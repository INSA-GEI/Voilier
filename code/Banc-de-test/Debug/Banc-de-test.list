
Banc-de-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023ef8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005b88  080240c8  080240c8  000340c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029c50  08029c50  001ced58  2**0
                  CONTENTS
  4 .ARM          00000008  08029c50  08029c50  00039c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029c58  08029c58  001ced58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  08029c58  08029c58  00039c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08029c6c  08029c6c  00039c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08029c74  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b5cc  2000010c  08029d80  0004010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b6d8  08029d80  0004b6d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  001ced58  2**0
                  CONTENTS, READONLY
 12 ExtFlashSection 00178350  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 FontFlashSection 0000690c  90178350  90178350  001c8350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 000000fc  9017ec5c  9017ec5c  001cec5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .debug_info   0008d018  00000000  00000000  001ced88  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00016ba9  00000000  00000000  0025bda0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00005e98  00000000  00000000  00272950  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00005588  00000000  00000000  002787e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003ab0c  00000000  00000000  0027dd70  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0005490b  00000000  00000000  002b887c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    00114ed5  00000000  00000000  0030d187  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  0042205c  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000191b8  00000000  00000000  00422158  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000010c 	.word	0x2000010c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080240b0 	.word	0x080240b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000110 	.word	0x20000110
 800020c:	080240b0 	.word	0x080240b0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005ec:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <SCB_EnableICache+0x3c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005fc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <SCB_EnableICache+0x3c>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <SCB_EnableICache+0x3c>)
 8000606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800060c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000610:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800062a:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <SCB_EnableDCache+0x7c>)
 800062c:	2200      	movs	r2, #0
 800062e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000632:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000636:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <SCB_EnableDCache+0x7c>)
 8000638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800063c:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	0b5b      	lsrs	r3, r3, #13
 8000642:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000646:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	08db      	lsrs	r3, r3, #3
 800064c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000650:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	015a      	lsls	r2, r3, #5
 8000656:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800065a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800065c:	68ba      	ldr	r2, [r7, #8]
 800065e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000660:	490f      	ldr	r1, [pc, #60]	; (80006a0 <SCB_EnableDCache+0x7c>)
 8000662:	4313      	orrs	r3, r2
 8000664:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	1e5a      	subs	r2, r3, #1
 800066c:	60ba      	str	r2, [r7, #8]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1ef      	bne.n	8000652 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	1e5a      	subs	r2, r3, #1
 8000676:	60fa      	str	r2, [r7, #12]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1e5      	bne.n	8000648 <SCB_EnableDCache+0x24>
 800067c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <SCB_EnableDCache+0x7c>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <SCB_EnableDCache+0x7c>)
 8000686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800068a:	6153      	str	r3, [r2, #20]
 800068c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000690:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000694:	bf00      	nop
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b5b0      	push	{r4, r5, r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006aa:	f000 fe5b 	bl	8001364 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006ae:	f7ff ff99 	bl	80005e4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006b2:	f7ff ffb7 	bl	8000624 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b6:	f001 ffa1 	bl	80025fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 f827 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006be:	f000 fabb 	bl	8000c38 <MX_GPIO_Init>
  MX_CRC_Init();
 80006c2:	f000 f8c3 	bl	800084c <MX_CRC_Init>
  MX_QUADSPI_Init();
 80006c6:	f000 f9d7 	bl	8000a78 <MX_QUADSPI_Init>
  MX_DMA2D_Init();
 80006ca:	f000 f8e1 	bl	8000890 <MX_DMA2D_Init>
  MX_FMC_Init();
 80006ce:	f000 fa07 	bl	8000ae0 <MX_FMC_Init>
  MX_LTDC_Init();
 80006d2:	f000 f94f 	bl	8000974 <MX_LTDC_Init>
  MX_I2C3_Init();
 80006d6:	f000 f90d 	bl	80008f4 <MX_I2C3_Init>
  MX_TouchGFX_Init();
 80006da:	f008 ffb3 	bl	8009644 <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTaskHand */
  osThreadDef(defaultTaskHand, StartDefaultTask, osPriorityNormal, 0, 4096);
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <main+0x60>)
 80006e0:	1d3c      	adds	r4, r7, #4
 80006e2:	461d      	mov	r5, r3
 80006e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e8:	682b      	ldr	r3, [r5, #0]
 80006ea:	6023      	str	r3, [r4, #0]
  defaultTaskHandHandle = osThreadCreate(osThread(defaultTaskHand), NULL);
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f006 fce4 	bl	80070be <osThreadCreate>
 80006f6:	4602      	mov	r2, r0
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <main+0x64>)
 80006fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006fc:	f006 fcd8 	bl	80070b0 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000700:	e7fe      	b.n	8000700 <main+0x5c>
 8000702:	bf00      	nop
 8000704:	080240d8 	.word	0x080240d8
 8000708:	2000b4d8 	.word	0x2000b4d8

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b0b4      	sub	sp, #208	; 0xd0
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000716:	2230      	movs	r2, #48	; 0x30
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f022 fd4b 	bl	80231b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	2284      	movs	r2, #132	; 0x84
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f022 fd3c 	bl	80231b6 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	4b40      	ldr	r3, [pc, #256]	; (8000840 <SystemClock_Config+0x134>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	4a3f      	ldr	r2, [pc, #252]	; (8000840 <SystemClock_Config+0x134>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000748:	6413      	str	r3, [r2, #64]	; 0x40
 800074a:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <SystemClock_Config+0x134>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000756:	4b3b      	ldr	r3, [pc, #236]	; (8000844 <SystemClock_Config+0x138>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a3a      	ldr	r2, [pc, #232]	; (8000844 <SystemClock_Config+0x138>)
 800075c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000760:	6013      	str	r3, [r2, #0]
 8000762:	4b38      	ldr	r3, [pc, #224]	; (8000844 <SystemClock_Config+0x138>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800076e:	2301      	movs	r3, #1
 8000770:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000778:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077c:	2302      	movs	r3, #2
 800077e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000782:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000786:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800078a:	2319      	movs	r3, #25
 800078c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000790:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000794:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000798:	2302      	movs	r3, #2
 800079a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800079e:	2309      	movs	r3, #9
 80007a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f005 f815 	bl	80057d8 <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80007b4:	f000 fe30 	bl	8001418 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007b8:	f004 fa62 	bl	8004c80 <HAL_PWREx_EnableOverDrive>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007c2:	f000 fe29 	bl	8001418 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c6:	230f      	movs	r3, #15
 80007c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007cc:	2302      	movs	r3, #2
 80007ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80007e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007ec:	2106      	movs	r1, #6
 80007ee:	4618      	mov	r0, r3
 80007f0:	f005 fa62 	bl	8005cb8 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80007fa:	f000 fe0d 	bl	8001418 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_I2C3;
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <SystemClock_Config+0x13c>)
 8000800:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000802:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000806:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000808:	2305      	movs	r3, #5
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000810:	2303      	movs	r3, #3
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000814:	2301      	movs	r3, #1
 8000816:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000818:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800081c:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800081e:	2300      	movs	r3, #0
 8000820:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000822:	f107 0308 	add.w	r3, r7, #8
 8000826:	4618      	mov	r0, r3
 8000828:	f005 fc32 	bl	8006090 <HAL_RCCEx_PeriphCLKConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x12a>
  {
    Error_Handler();
 8000832:	f000 fdf1 	bl	8001418 <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	37d0      	adds	r7, #208	; 0xd0
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000
 8000848:	00010008 	.word	0x00010008

0800084c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000850:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <MX_CRC_Init+0x3c>)
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <MX_CRC_Init+0x40>)
 8000854:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_CRC_Init+0x3c>)
 8000858:	2200      	movs	r2, #0
 800085a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_CRC_Init+0x3c>)
 800085e:	2200      	movs	r2, #0
 8000860:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_CRC_Init+0x3c>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_CRC_Init+0x3c>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_CRC_Init+0x3c>)
 8000870:	2201      	movs	r2, #1
 8000872:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_CRC_Init+0x3c>)
 8000876:	f002 f8a9 	bl	80029cc <HAL_CRC_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000880:	f000 fdca 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	2000b4b4 	.word	0x2000b4b4
 800088c:	40023000 	.word	0x40023000

08000890 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_DMA2D_Init+0x5c>)
 8000896:	4a16      	ldr	r2, [pc, #88]	; (80008f0 <MX_DMA2D_Init+0x60>)
 8000898:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_DMA2D_Init+0x5c>)
 800089c:	2200      	movs	r2, #0
 800089e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_DMA2D_Init+0x5c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_DMA2D_Init+0x5c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_DMA2D_Init+0x5c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_DMA2D_Init+0x5c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_DMA2D_Init+0x5c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_DMA2D_Init+0x5c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008c4:	4809      	ldr	r0, [pc, #36]	; (80008ec <MX_DMA2D_Init+0x5c>)
 80008c6:	f002 f9db 	bl	8002c80 <HAL_DMA2D_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008d0:	f000 fda2 	bl	8001418 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008d4:	2101      	movs	r1, #1
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_DMA2D_Init+0x5c>)
 80008d8:	f002 fc9c 	bl	8003214 <HAL_DMA2D_ConfigLayer>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008e2:	f000 fd99 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000b584 	.word	0x2000b584
 80008f0:	4002b000 	.word	0x4002b000

080008f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <MX_I2C3_Init+0x74>)
 80008fa:	4a1c      	ldr	r2, [pc, #112]	; (800096c <MX_I2C3_Init+0x78>)
 80008fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_I2C3_Init+0x74>)
 8000900:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <MX_I2C3_Init+0x7c>)
 8000902:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_I2C3_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_I2C3_Init+0x74>)
 800090c:	2201      	movs	r2, #1
 800090e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_I2C3_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_I2C3_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_I2C3_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_I2C3_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_I2C3_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800092e:	480e      	ldr	r0, [pc, #56]	; (8000968 <MX_I2C3_Init+0x74>)
 8000930:	f003 f86c 	bl	8003a0c <HAL_I2C_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800093a:	f000 fd6d 	bl	8001418 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800093e:	2100      	movs	r1, #0
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <MX_I2C3_Init+0x74>)
 8000942:	f003 fd6d 	bl	8004420 <HAL_I2CEx_ConfigAnalogFilter>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800094c:	f000 fd64 	bl	8001418 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000950:	2100      	movs	r1, #0
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_I2C3_Init+0x74>)
 8000954:	f003 fdaf 	bl	80044b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800095e:	f000 fd5b 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000b468 	.word	0x2000b468
 800096c:	40005c00 	.word	0x40005c00
 8000970:	00c0eaff 	.word	0x00c0eaff

08000974 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08e      	sub	sp, #56	; 0x38
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2234      	movs	r2, #52	; 0x34
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f022 fc18 	bl	80231b6 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000986:	4b3a      	ldr	r3, [pc, #232]	; (8000a70 <MX_LTDC_Init+0xfc>)
 8000988:	4a3a      	ldr	r2, [pc, #232]	; (8000a74 <MX_LTDC_Init+0x100>)
 800098a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800098c:	4b38      	ldr	r3, [pc, #224]	; (8000a70 <MX_LTDC_Init+0xfc>)
 800098e:	2200      	movs	r2, #0
 8000990:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000992:	4b37      	ldr	r3, [pc, #220]	; (8000a70 <MX_LTDC_Init+0xfc>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000998:	4b35      	ldr	r3, [pc, #212]	; (8000a70 <MX_LTDC_Init+0xfc>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800099e:	4b34      	ldr	r3, [pc, #208]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80009a4:	4b32      	ldr	r3, [pc, #200]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009a6:	2228      	movs	r2, #40	; 0x28
 80009a8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80009aa:	4b31      	ldr	r3, [pc, #196]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009ac:	2209      	movs	r2, #9
 80009ae:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80009b0:	4b2f      	ldr	r3, [pc, #188]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009b2:	2235      	movs	r2, #53	; 0x35
 80009b4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80009b6:	4b2e      	ldr	r3, [pc, #184]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009b8:	220b      	movs	r2, #11
 80009ba:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80009bc:	4b2c      	ldr	r3, [pc, #176]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009be:	f240 2215 	movw	r2, #533	; 0x215
 80009c2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80009c4:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009c6:	f240 121b 	movw	r2, #283	; 0x11b
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80009cc:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009ce:	f240 2235 	movw	r2, #565	; 0x235
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80009d4:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009d6:	f240 121d 	movw	r2, #285	; 0x11d
 80009da:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80009dc:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009de:	2200      	movs	r2, #0
 80009e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80009e4:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80009ec:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80009f4:	481e      	ldr	r0, [pc, #120]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009f6:	f003 fdab 	bl	8004550 <HAL_LTDC_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000a00:	f000 fd0a 	bl	8001418 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000a08:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a0c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000a12:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a16:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000a1c:	23ff      	movs	r3, #255	; 0xff
 8000a1e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a28:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a2a:	2305      	movs	r3, #5
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000a2e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000a34:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000a3a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a3e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2200      	movs	r2, #0
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_LTDC_Init+0xfc>)
 8000a5a:	f003 ff01 	bl	8004860 <HAL_LTDC_ConfigLayer>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000a64:	f000 fcd8 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	3738      	adds	r7, #56	; 0x38
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	2000b4dc 	.word	0x2000b4dc
 8000a74:	40016800 	.word	0x40016800

08000a78 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000a7e:	4a17      	ldr	r2, [pc, #92]	; (8000adc <MX_QUADSPI_Init+0x64>)
 8000a80:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a8e:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000a90:	2210      	movs	r2, #16
 8000a92:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000a94:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000a96:	2218      	movs	r2, #24
 8000a98:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000a9c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000aa0:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ab4:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000ab6:	f004 f933 	bl	8004d20 <HAL_QSPI_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000ac0:	f000 fcaa 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  BSP_QSPI_Init();
 8000ac4:	f001 f942 	bl	8001d4c <BSP_QSPI_Init>

  BSP_QSPI_MemoryMappedMode();
 8000ac8:	f001 f998 	bl	8001dfc <BSP_QSPI_EnableMemoryMappedMode>
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8000acc:	205c      	movs	r0, #92	; 0x5c
 8000ace:	f001 fef7 	bl	80028c0 <HAL_NVIC_DisableIRQ>

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000b5f8 	.word	0x2000b5f8
 8000adc:	a0001000 	.word	0xa0001000

08000ae0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
 8000af4:	615a      	str	r2, [r3, #20]
 8000af6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000af8:	4b4c      	ldr	r3, [pc, #304]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000afa:	4a4d      	ldr	r2, [pc, #308]	; (8000c30 <MX_FMC_Init+0x150>)
 8000afc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000afe:	4b4b      	ldr	r3, [pc, #300]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b04:	4b49      	ldr	r3, [pc, #292]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b0a:	4b48      	ldr	r3, [pc, #288]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b10:	4b46      	ldr	r3, [pc, #280]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b12:	2210      	movs	r2, #16
 8000b14:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b16:	4b45      	ldr	r3, [pc, #276]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b18:	2240      	movs	r2, #64	; 0x40
 8000b1a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b1c:	4b43      	ldr	r3, [pc, #268]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b1e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000b22:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b24:	4b41      	ldr	r3, [pc, #260]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b2a:	4b40      	ldr	r3, [pc, #256]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b30:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000b32:	4b3e      	ldr	r3, [pc, #248]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000b3a:	4b3c      	ldr	r3, [pc, #240]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b44:	2307      	movs	r3, #7
 8000b46:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b4c:	2307      	movs	r3, #7
 8000b4e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b50:	2303      	movs	r3, #3
 8000b52:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b54:	2302      	movs	r3, #2
 8000b56:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4832      	ldr	r0, [pc, #200]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b62:	f005 fe83 	bl	800686c <HAL_SDRAM_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b6c:	f000 fc54 	bl	8001418 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
    __IO uint32_t tmpmrd = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000b74:	4b2f      	ldr	r3, [pc, #188]	; (8000c34 <MX_FMC_Init+0x154>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8000b7a:	4b2e      	ldr	r3, [pc, #184]	; (8000c34 <MX_FMC_Init+0x154>)
 8000b7c:	2210      	movs	r2, #16
 8000b7e:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8000b80:	4b2c      	ldr	r3, [pc, #176]	; (8000c34 <MX_FMC_Init+0x154>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8000b86:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <MX_FMC_Init+0x154>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b90:	4928      	ldr	r1, [pc, #160]	; (8000c34 <MX_FMC_Init+0x154>)
 8000b92:	4826      	ldr	r0, [pc, #152]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b94:	f005 fe9e 	bl	80068d4 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f001 fd6b 	bl	8002674 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000b9e:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <MX_FMC_Init+0x154>)
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000ba4:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <MX_FMC_Init+0x154>)
 8000ba6:	2210      	movs	r2, #16
 8000ba8:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8000baa:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8000bb0:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bba:	491e      	ldr	r1, [pc, #120]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bbc:	481b      	ldr	r0, [pc, #108]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000bbe:	f005 fe89 	bl	80068d4 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bca:	2210      	movs	r2, #16
 8000bcc:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bd0:	2208      	movs	r2, #8
 8000bd2:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000bda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bde:	4915      	ldr	r1, [pc, #84]	; (8000c34 <MX_FMC_Init+0x154>)
 8000be0:	4812      	ldr	r0, [pc, #72]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000be2:	f005 fe77 	bl	80068d4 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8000be6:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000bea:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bee:	2204      	movs	r2, #4
 8000bf0:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bf4:	2210      	movs	r2, #16
 8000bf6:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <MX_FMC_Init+0x154>)
 8000c02:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c08:	490a      	ldr	r1, [pc, #40]	; (8000c34 <MX_FMC_Init+0x154>)
 8000c0a:	4808      	ldr	r0, [pc, #32]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000c0c:	f005 fe62 	bl	80068d4 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8000c10:	f240 712b 	movw	r1, #1835	; 0x72b
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000c16:	f005 fe88 	bl	800692a <HAL_SDRAM_ProgramRefreshRate>
    
    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 8000c1a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8000c1e:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c22:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8000c24:	bf00      	nop
 8000c26:	3720      	adds	r7, #32
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	2000b5c4 	.word	0x2000b5c4
 8000c30:	a0000140 	.word	0xa0000140
 8000c34:	20000128 	.word	0x20000128

08000c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b090      	sub	sp, #64	; 0x40
 8000c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c4e:	4bae      	ldr	r3, [pc, #696]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4aad      	ldr	r2, [pc, #692]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c54:	f043 0310 	orr.w	r3, r3, #16
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4bab      	ldr	r3, [pc, #684]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0310 	and.w	r3, r3, #16
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c66:	4ba8      	ldr	r3, [pc, #672]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4aa7      	ldr	r2, [pc, #668]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4ba5      	ldr	r3, [pc, #660]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	4ba2      	ldr	r3, [pc, #648]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4aa1      	ldr	r2, [pc, #644]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b9f      	ldr	r3, [pc, #636]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	623b      	str	r3, [r7, #32]
 8000c94:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c96:	4b9c      	ldr	r3, [pc, #624]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a9b      	ldr	r2, [pc, #620]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c9c:	f043 0308 	orr.w	r3, r3, #8
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b99      	ldr	r3, [pc, #612]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0308 	and.w	r3, r3, #8
 8000caa:	61fb      	str	r3, [r7, #28]
 8000cac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	4b96      	ldr	r3, [pc, #600]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a95      	ldr	r2, [pc, #596]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000cb4:	f043 0304 	orr.w	r3, r3, #4
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b93      	ldr	r3, [pc, #588]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	61bb      	str	r3, [r7, #24]
 8000cc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	4b90      	ldr	r3, [pc, #576]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a8f      	ldr	r2, [pc, #572]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b8d      	ldr	r3, [pc, #564]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000cde:	4b8a      	ldr	r3, [pc, #552]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a89      	ldr	r2, [pc, #548]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000ce4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b87      	ldr	r3, [pc, #540]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cf6:	4b84      	ldr	r3, [pc, #528]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a83      	ldr	r2, [pc, #524]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b81      	ldr	r3, [pc, #516]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d0e:	4b7e      	ldr	r3, [pc, #504]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a7d      	ldr	r2, [pc, #500]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b7b      	ldr	r3, [pc, #492]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d26:	4b78      	ldr	r3, [pc, #480]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a77      	ldr	r2, [pc, #476]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d2c:	f043 0320 	orr.w	r3, r3, #32
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b75      	ldr	r3, [pc, #468]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0320 	and.w	r3, r3, #32
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3e:	4b72      	ldr	r3, [pc, #456]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a71      	ldr	r2, [pc, #452]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b6f      	ldr	r3, [pc, #444]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d56:	2201      	movs	r2, #1
 8000d58:	2120      	movs	r1, #32
 8000d5a:	486c      	ldr	r0, [pc, #432]	; (8000f0c <MX_GPIO_Init+0x2d4>)
 8000d5c:	f002 fe3c 	bl	80039d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	210c      	movs	r1, #12
 8000d64:	486a      	ldr	r0, [pc, #424]	; (8000f10 <MX_GPIO_Init+0x2d8>)
 8000d66:	f002 fe37 	bl	80039d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2108      	movs	r1, #8
 8000d6e:	4869      	ldr	r0, [pc, #420]	; (8000f14 <MX_GPIO_Init+0x2dc>)
 8000d70:	f002 fe32 	bl	80039d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d7a:	4865      	ldr	r0, [pc, #404]	; (8000f10 <MX_GPIO_Init+0x2d8>)
 8000d7c:	f002 fe2c 	bl	80039d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d86:	4864      	ldr	r0, [pc, #400]	; (8000f18 <MX_GPIO_Init+0x2e0>)
 8000d88:	f002 fe26 	bl	80039d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	21c8      	movs	r1, #200	; 0xc8
 8000d90:	4862      	ldr	r0, [pc, #392]	; (8000f1c <MX_GPIO_Init+0x2e4>)
 8000d92:	f002 fe21 	bl	80039d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000d96:	2308      	movs	r3, #8
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da6:	4619      	mov	r1, r3
 8000da8:	485d      	ldr	r0, [pc, #372]	; (8000f20 <MX_GPIO_Init+0x2e8>)
 8000daa:	f002 fb61 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000dae:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dc0:	230b      	movs	r3, #11
 8000dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4854      	ldr	r0, [pc, #336]	; (8000f1c <MX_GPIO_Init+0x2e4>)
 8000dcc:	f002 fb50 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000dd0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd6:	2312      	movs	r3, #18
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000de2:	2304      	movs	r3, #4
 8000de4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dea:	4619      	mov	r1, r3
 8000dec:	484d      	ldr	r0, [pc, #308]	; (8000f24 <MX_GPIO_Init+0x2ec>)
 8000dee:	f002 fb3f 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8000df2:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e04:	230a      	movs	r3, #10
 8000e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4845      	ldr	r0, [pc, #276]	; (8000f24 <MX_GPIO_Init+0x2ec>)
 8000e10:	f002 fb2e 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000e14:	2310      	movs	r3, #16
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e24:	2302      	movs	r3, #2
 8000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	483d      	ldr	r0, [pc, #244]	; (8000f24 <MX_GPIO_Init+0x2ec>)
 8000e30:	f002 fb1e 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000e44:	2308      	movs	r3, #8
 8000e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	482f      	ldr	r0, [pc, #188]	; (8000f0c <MX_GPIO_Init+0x2d4>)
 8000e50:	f002 fb0e 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9 
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8000e54:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e66:	230c      	movs	r3, #12
 8000e68:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e6e:	4619      	mov	r1, r3
 8000e70:	482d      	ldr	r0, [pc, #180]	; (8000f28 <MX_GPIO_Init+0x2f0>)
 8000e72:	f002 fafd 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e90:	4619      	mov	r1, r3
 8000e92:	4826      	ldr	r0, [pc, #152]	; (8000f2c <MX_GPIO_Init+0x2f4>)
 8000e94:	f002 faec 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000e98:	2360      	movs	r3, #96	; 0x60
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ea8:	230d      	movs	r3, #13
 8000eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	481b      	ldr	r0, [pc, #108]	; (8000f20 <MX_GPIO_Init+0x2e8>)
 8000eb4:	f002 fadc 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ec8:	2307      	movs	r3, #7
 8000eca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4814      	ldr	r0, [pc, #80]	; (8000f24 <MX_GPIO_Init+0x2ec>)
 8000ed4:	f002 facc 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eea:	4619      	mov	r1, r3
 8000eec:	4810      	ldr	r0, [pc, #64]	; (8000f30 <MX_GPIO_Init+0x2f8>)
 8000eee:	f002 fabf 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000ef2:	2340      	movs	r3, #64	; 0x40
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_GPIO_Init+0x2fc>)
 8000ef8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000efe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f02:	4619      	mov	r1, r3
 8000f04:	e018      	b.n	8000f38 <MX_GPIO_Init+0x300>
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020c00 	.word	0x40020c00
 8000f10:	40022000 	.word	0x40022000
 8000f14:	40022800 	.word	0x40022800
 8000f18:	40021c00 	.word	0x40021c00
 8000f1c:	40021800 	.word	0x40021800
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40020400 	.word	0x40020400
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	40022400 	.word	0x40022400
 8000f34:	10120000 	.word	0x10120000
 8000f38:	48bb      	ldr	r0, [pc, #748]	; (8001228 <MX_GPIO_Init+0x5f0>)
 8000f3a:	f002 fa99 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000f3e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f50:	230a      	movs	r3, #10
 8000f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f58:	4619      	mov	r1, r3
 8000f5a:	48b4      	ldr	r0, [pc, #720]	; (800122c <MX_GPIO_Init+0x5f4>)
 8000f5c:	f002 fa88 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000f60:	23f0      	movs	r3, #240	; 0xf0
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000f70:	230a      	movs	r3, #10
 8000f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	48ad      	ldr	r0, [pc, #692]	; (8001230 <MX_GPIO_Init+0x5f8>)
 8000f7c:	f002 fa78 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000f80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000f92:	230a      	movs	r3, #10
 8000f94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	48a5      	ldr	r0, [pc, #660]	; (8001234 <MX_GPIO_Init+0x5fc>)
 8000f9e:	f002 fa67 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fa2:	2320      	movs	r3, #32
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	489b      	ldr	r0, [pc, #620]	; (8001228 <MX_GPIO_Init+0x5f0>)
 8000fba:	f002 fa59 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000fbe:	2308      	movs	r3, #8
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000fce:	230d      	movs	r3, #13
 8000fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4893      	ldr	r0, [pc, #588]	; (8001228 <MX_GPIO_Init+0x5f0>)
 8000fda:	f002 fa49 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000fde:	f241 030c 	movw	r3, #4108	; 0x100c
 8000fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ff0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	488e      	ldr	r0, [pc, #568]	; (8001230 <MX_GPIO_Init+0x5f8>)
 8000ff8:	f002 fa3a 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000ffc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001002:	2300      	movs	r3, #0
 8001004:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800100e:	4619      	mov	r1, r3
 8001010:	4889      	ldr	r0, [pc, #548]	; (8001238 <MX_GPIO_Init+0x600>)
 8001012:	f002 fa2d 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001016:	2308      	movs	r3, #8
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2301      	movs	r3, #1
 800101c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800102a:	4619      	mov	r1, r3
 800102c:	4883      	ldr	r0, [pc, #524]	; (800123c <MX_GPIO_Init+0x604>)
 800102e:	f002 fa1f 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001032:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001044:	230d      	movs	r3, #13
 8001046:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001048:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800104c:	4619      	mov	r1, r3
 800104e:	4879      	ldr	r0, [pc, #484]	; (8001234 <MX_GPIO_Init+0x5fc>)
 8001050:	f002 fa0e 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001054:	2310      	movs	r3, #16
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001058:	2300      	movs	r3, #0
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001064:	4619      	mov	r1, r3
 8001066:	4870      	ldr	r0, [pc, #448]	; (8001228 <MX_GPIO_Init+0x5f0>)
 8001068:	f002 fa02 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800106c:	2304      	movs	r3, #4
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800107c:	230c      	movs	r3, #12
 800107e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001084:	4619      	mov	r1, r3
 8001086:	4868      	ldr	r0, [pc, #416]	; (8001228 <MX_GPIO_Init+0x5f0>)
 8001088:	f002 f9f2 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800108c:	f248 0304 	movw	r3, #32772	; 0x8004
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001092:	2300      	movs	r3, #0
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800109a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800109e:	4619      	mov	r1, r3
 80010a0:	4867      	ldr	r0, [pc, #412]	; (8001240 <MX_GPIO_Init+0x608>)
 80010a2:	f002 f9e5 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80010a6:	2302      	movs	r3, #2
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010b6:	2305      	movs	r3, #5
 80010b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010be:	4619      	mov	r1, r3
 80010c0:	485b      	ldr	r0, [pc, #364]	; (8001230 <MX_GPIO_Init+0x5f8>)
 80010c2:	f002 f9d5 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80010c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010dc:	4619      	mov	r1, r3
 80010de:	4858      	ldr	r0, [pc, #352]	; (8001240 <MX_GPIO_Init+0x608>)
 80010e0:	f002 f9c6 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin 
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80010e4:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010f6:	230d      	movs	r3, #13
 80010f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010fe:	4619      	mov	r1, r3
 8001100:	484f      	ldr	r0, [pc, #316]	; (8001240 <MX_GPIO_Init+0x608>)
 8001102:	f002 f9b5 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001106:	2301      	movs	r3, #1
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001116:	2302      	movs	r3, #2
 8001118:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800111e:	4619      	mov	r1, r3
 8001120:	4843      	ldr	r0, [pc, #268]	; (8001230 <MX_GPIO_Init+0x5f8>)
 8001122:	f002 f9a5 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001138:	2307      	movs	r3, #7
 800113a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001140:	4619      	mov	r1, r3
 8001142:	483a      	ldr	r0, [pc, #232]	; (800122c <MX_GPIO_Init+0x5f4>)
 8001144:	f002 f994 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001148:	f44f 7380 	mov.w	r3, #256	; 0x100
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800115a:	2301      	movs	r3, #1
 800115c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001162:	4619      	mov	r1, r3
 8001164:	4831      	ldr	r0, [pc, #196]	; (800122c <MX_GPIO_Init+0x5f4>)
 8001166:	f002 f983 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800116a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001170:	4b34      	ldr	r3, [pc, #208]	; (8001244 <MX_GPIO_Init+0x60c>)
 8001172:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117c:	4619      	mov	r1, r3
 800117e:	482c      	ldr	r0, [pc, #176]	; (8001230 <MX_GPIO_Init+0x5f8>)
 8001180:	f002 f976 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001184:	23c0      	movs	r3, #192	; 0xc0
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001194:	2308      	movs	r3, #8
 8001196:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800119c:	4619      	mov	r1, r3
 800119e:	4826      	ldr	r0, [pc, #152]	; (8001238 <MX_GPIO_Init+0x600>)
 80011a0:	f002 f966 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80011a4:	2310      	movs	r3, #16
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80011b4:	230a      	movs	r3, #10
 80011b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011bc:	4619      	mov	r1, r3
 80011be:	4820      	ldr	r0, [pc, #128]	; (8001240 <MX_GPIO_Init+0x608>)
 80011c0:	f002 f956 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80011c4:	23c8      	movs	r3, #200	; 0xc8
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d8:	4619      	mov	r1, r3
 80011da:	4816      	ldr	r0, [pc, #88]	; (8001234 <MX_GPIO_Init+0x5fc>)
 80011dc:	f002 f948 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin 
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 80011e0:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e6:	2303      	movs	r3, #3
 80011e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f2:	4619      	mov	r1, r3
 80011f4:	4814      	ldr	r0, [pc, #80]	; (8001248 <MX_GPIO_Init+0x610>)
 80011f6:	f002 f93b 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80011fa:	2305      	movs	r3, #5
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800120a:	230a      	movs	r3, #10
 800120c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001212:	4619      	mov	r1, r3
 8001214:	4808      	ldr	r0, [pc, #32]	; (8001238 <MX_GPIO_Init+0x600>)
 8001216:	f002 f92b 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800121a:	2332      	movs	r3, #50	; 0x32
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	e012      	b.n	800124c <MX_GPIO_Init+0x614>
 8001226:	bf00      	nop
 8001228:	40020c00 	.word	0x40020c00
 800122c:	40020000 	.word	0x40020000
 8001230:	40022000 	.word	0x40022000
 8001234:	40021800 	.word	0x40021800
 8001238:	40020800 	.word	0x40020800
 800123c:	40022800 	.word	0x40022800
 8001240:	40021c00 	.word	0x40021c00
 8001244:	10120000 	.word	0x10120000
 8001248:	40021400 	.word	0x40021400
 800124c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001252:	230b      	movs	r3, #11
 8001254:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001256:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800125a:	4619      	mov	r1, r3
 800125c:	4837      	ldr	r0, [pc, #220]	; (800133c <MX_GPIO_Init+0x704>)
 800125e:	f002 f907 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001262:	2304      	movs	r3, #4
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001266:	2300      	movs	r3, #0
 8001268:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800126e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001272:	4619      	mov	r1, r3
 8001274:	4832      	ldr	r0, [pc, #200]	; (8001340 <MX_GPIO_Init+0x708>)
 8001276:	f002 f8fb 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800127a:	2386      	movs	r3, #134	; 0x86
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800128a:	230b      	movs	r3, #11
 800128c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001292:	4619      	mov	r1, r3
 8001294:	482b      	ldr	r0, [pc, #172]	; (8001344 <MX_GPIO_Init+0x70c>)
 8001296:	f002 f8eb 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800129a:	2301      	movs	r3, #1
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129e:	2303      	movs	r3, #3
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012aa:	4619      	mov	r1, r3
 80012ac:	4825      	ldr	r0, [pc, #148]	; (8001344 <MX_GPIO_Init+0x70c>)
 80012ae:	f002 f8df 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80012b2:	2350      	movs	r3, #80	; 0x50
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012c2:	230d      	movs	r3, #13
 80012c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ca:	4619      	mov	r1, r3
 80012cc:	481d      	ldr	r0, [pc, #116]	; (8001344 <MX_GPIO_Init+0x70c>)
 80012ce:	f002 f8cf 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80012d2:	2328      	movs	r3, #40	; 0x28
 80012d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80012e2:	230a      	movs	r3, #10
 80012e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ea:	4619      	mov	r1, r3
 80012ec:	4815      	ldr	r0, [pc, #84]	; (8001344 <MX_GPIO_Init+0x70c>)
 80012ee:	f002 f8bf 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80012f2:	2340      	movs	r3, #64	; 0x40
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001302:	2309      	movs	r3, #9
 8001304:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800130a:	4619      	mov	r1, r3
 800130c:	480e      	ldr	r0, [pc, #56]	; (8001348 <MX_GPIO_Init+0x710>)
 800130e:	f002 f8af 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001312:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001324:	2305      	movs	r3, #5
 8001326:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001328:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800132c:	4619      	mov	r1, r3
 800132e:	4807      	ldr	r0, [pc, #28]	; (800134c <MX_GPIO_Init+0x714>)
 8001330:	f002 f89e 	bl	8003470 <HAL_GPIO_Init>

}
 8001334:	bf00      	nop
 8001336:	3740      	adds	r7, #64	; 0x40
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40020800 	.word	0x40020800
 8001340:	40021800 	.word	0x40021800
 8001344:	40020000 	.word	0x40020000
 8001348:	40021c00 	.word	0x40021c00
 800134c:	40020400 	.word	0x40020400

08001350 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8001358:	f008 f97a 	bl	8009650 <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    
    osDelay(1);
 800135c:	2001      	movs	r0, #1
 800135e:	f005 fed5 	bl	800710c <osDelay>
 8001362:	e7fb      	b.n	800135c <StartDefaultTask+0xc>

08001364 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800136a:	463b      	mov	r3, r7
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001376:	f001 fab1 	bl	80028dc <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800137a:	2301      	movs	r3, #1
 800137c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800137e:	2300      	movs	r3, #0
 8001380:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8001382:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8001386:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8001388:	231b      	movs	r3, #27
 800138a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800138c:	2300      	movs	r3, #0
 800138e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001390:	2300      	movs	r3, #0
 8001392:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001394:	2303      	movs	r3, #3
 8001396:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013a8:	463b      	mov	r3, r7
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 faca 	bl	8002944 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80013b0:	2301      	movs	r3, #1
 80013b2:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80013b4:	2301      	movs	r3, #1
 80013b6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80013b8:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80013bc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80013be:	2317      	movs	r3, #23
 80013c0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80013ca:	2303      	movs	r3, #3
 80013cc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80013d6:	2301      	movs	r3, #1
 80013d8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013de:	463b      	mov	r3, r7
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 faaf 	bl	8002944 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80013e6:	2004      	movs	r0, #4
 80013e8:	f001 fa8e 	bl	8002908 <HAL_MPU_Enable>

}
 80013ec:	bf00      	nop
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d101      	bne.n	800140a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001406:	f001 f915 	bl	8002634 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40001000 	.word	0x40001000

08001418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <HAL_MspInit+0x4c>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a10      	ldr	r2, [pc, #64]	; (8001474 <HAL_MspInit+0x4c>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <HAL_MspInit+0x4c>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_MspInit+0x4c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <HAL_MspInit+0x4c>)
 800144c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001450:	6453      	str	r3, [r2, #68]	; 0x44
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <HAL_MspInit+0x4c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	210f      	movs	r1, #15
 8001462:	f06f 0001 	mvn.w	r0, #1
 8001466:	f001 fa01 	bl	800286c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800

08001478 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <HAL_CRC_MspInit+0x38>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d10b      	bne.n	80014a2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_CRC_MspInit+0x3c>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <HAL_CRC_MspInit+0x3c>)
 8001490:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <HAL_CRC_MspInit+0x3c>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40023000 	.word	0x40023000
 80014b4:	40023800 	.word	0x40023800

080014b8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <HAL_DMA2D_MspInit+0x44>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d113      	bne.n	80014f2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <HAL_DMA2D_MspInit+0x48>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a0c      	ldr	r2, [pc, #48]	; (8001500 <HAL_DMA2D_MspInit+0x48>)
 80014d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_DMA2D_MspInit+0x48>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2105      	movs	r1, #5
 80014e6:	205a      	movs	r0, #90	; 0x5a
 80014e8:	f001 f9c0 	bl	800286c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80014ec:	205a      	movs	r0, #90	; 0x5a
 80014ee:	f001 f9d9 	bl	80028a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	4002b000 	.word	0x4002b000
 8001500:	40023800 	.word	0x40023800

08001504 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a07      	ldr	r2, [pc, #28]	; (8001530 <HAL_DMA2D_MspDeInit+0x2c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d108      	bne.n	8001528 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <HAL_DMA2D_MspDeInit+0x30>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a06      	ldr	r2, [pc, #24]	; (8001534 <HAL_DMA2D_MspDeInit+0x30>)
 800151c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001520:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8001522:	205a      	movs	r0, #90	; 0x5a
 8001524:	f001 f9cc 	bl	80028c0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	4002b000 	.word	0x4002b000
 8001534:	40023800 	.word	0x40023800

08001538 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a17      	ldr	r2, [pc, #92]	; (80015b4 <HAL_I2C_MspInit+0x7c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d128      	bne.n	80015ac <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_I2C_MspInit+0x80>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a16      	ldr	r2, [pc, #88]	; (80015b8 <HAL_I2C_MspInit+0x80>)
 8001560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_I2C_MspInit+0x80>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001572:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001578:	2312      	movs	r3, #18
 800157a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800157c:	2301      	movs	r3, #1
 800157e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001584:	2304      	movs	r3, #4
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	480b      	ldr	r0, [pc, #44]	; (80015bc <HAL_I2C_MspInit+0x84>)
 8001590:	f001 ff6e 	bl	8003470 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <HAL_I2C_MspInit+0x80>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	4a07      	ldr	r2, [pc, #28]	; (80015b8 <HAL_I2C_MspInit+0x80>)
 800159a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800159e:	6413      	str	r3, [r2, #64]	; 0x40
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_I2C_MspInit+0x80>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80015ac:	bf00      	nop
 80015ae:	3728      	adds	r7, #40	; 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40005c00 	.word	0x40005c00
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40021c00 	.word	0x40021c00

080015c0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <HAL_I2C_MspDeInit+0x30>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d10a      	bne.n	80015e8 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <HAL_I2C_MspDeInit+0x34>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <HAL_I2C_MspDeInit+0x34>)
 80015d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 80015de:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <HAL_I2C_MspDeInit+0x38>)
 80015e4:	f002 f8ee 	bl	80037c4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40005c00 	.word	0x40005c00
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40021c00 	.word	0x40021c00

080015fc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08e      	sub	sp, #56	; 0x38
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a55      	ldr	r2, [pc, #340]	; (8001770 <HAL_LTDC_MspInit+0x174>)
 800161a:	4293      	cmp	r3, r2
 800161c:	f040 80a3 	bne.w	8001766 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001620:	4b54      	ldr	r3, [pc, #336]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 8001622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001624:	4a53      	ldr	r2, [pc, #332]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 8001626:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800162a:	6453      	str	r3, [r2, #68]	; 0x44
 800162c:	4b51      	ldr	r3, [pc, #324]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800162e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001630:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001634:	623b      	str	r3, [r7, #32]
 8001636:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001638:	4b4e      	ldr	r3, [pc, #312]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	4a4d      	ldr	r2, [pc, #308]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800163e:	f043 0310 	orr.w	r3, r3, #16
 8001642:	6313      	str	r3, [r2, #48]	; 0x30
 8001644:	4b4b      	ldr	r3, [pc, #300]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001650:	4b48      	ldr	r3, [pc, #288]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	4a47      	ldr	r2, [pc, #284]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 8001656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800165a:	6313      	str	r3, [r2, #48]	; 0x30
 800165c:	4b45      	ldr	r3, [pc, #276]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001664:	61bb      	str	r3, [r7, #24]
 8001666:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001668:	4b42      	ldr	r3, [pc, #264]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	4a41      	ldr	r2, [pc, #260]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800166e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001672:	6313      	str	r3, [r2, #48]	; 0x30
 8001674:	4b3f      	ldr	r3, [pc, #252]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001680:	4b3c      	ldr	r3, [pc, #240]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	4a3b      	ldr	r2, [pc, #236]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 8001686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800168a:	6313      	str	r3, [r2, #48]	; 0x30
 800168c:	4b39      	ldr	r3, [pc, #228]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001698:	4b36      	ldr	r3, [pc, #216]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169c:	4a35      	ldr	r2, [pc, #212]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800169e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a2:	6313      	str	r3, [r2, #48]	; 0x30
 80016a4:	4b33      	ldr	r3, [pc, #204]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 80016a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80016b0:	2310      	movs	r3, #16
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016c0:	230e      	movs	r3, #14
 80016c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80016c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c8:	4619      	mov	r1, r3
 80016ca:	482b      	ldr	r0, [pc, #172]	; (8001778 <HAL_LTDC_MspInit+0x17c>)
 80016cc:	f001 fed0 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 80016d0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016e2:	230e      	movs	r3, #14
 80016e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80016e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ea:	4619      	mov	r1, r3
 80016ec:	4823      	ldr	r0, [pc, #140]	; (800177c <HAL_LTDC_MspInit+0x180>)
 80016ee:	f001 febf 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80016f2:	23f7      	movs	r3, #247	; 0xf7
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001702:	230e      	movs	r3, #14
 8001704:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170a:	4619      	mov	r1, r3
 800170c:	481c      	ldr	r0, [pc, #112]	; (8001780 <HAL_LTDC_MspInit+0x184>)
 800170e:	f001 feaf 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001724:	2309      	movs	r3, #9
 8001726:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172c:	4619      	mov	r1, r3
 800172e:	4815      	ldr	r0, [pc, #84]	; (8001784 <HAL_LTDC_MspInit+0x188>)
 8001730:	f001 fe9e 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001734:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001746:	230e      	movs	r3, #14
 8001748:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800174a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174e:	4619      	mov	r1, r3
 8001750:	480d      	ldr	r0, [pc, #52]	; (8001788 <HAL_LTDC_MspInit+0x18c>)
 8001752:	f001 fe8d 	bl	8003470 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2105      	movs	r1, #5
 800175a:	2058      	movs	r0, #88	; 0x58
 800175c:	f001 f886 	bl	800286c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001760:	2058      	movs	r0, #88	; 0x58
 8001762:	f001 f89f 	bl	80028a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001766:	bf00      	nop
 8001768:	3738      	adds	r7, #56	; 0x38
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40016800 	.word	0x40016800
 8001774:	40023800 	.word	0x40023800
 8001778:	40021000 	.word	0x40021000
 800177c:	40022400 	.word	0x40022400
 8001780:	40022800 	.word	0x40022800
 8001784:	40021800 	.word	0x40021800
 8001788:	40022000 	.word	0x40022000

0800178c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08c      	sub	sp, #48	; 0x30
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 031c 	add.w	r3, r7, #28
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a3b      	ldr	r2, [pc, #236]	; (8001898 <HAL_QSPI_MspInit+0x10c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d170      	bne.n	8001890 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80017ae:	4b3b      	ldr	r3, [pc, #236]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b2:	4a3a      	ldr	r2, [pc, #232]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	6393      	str	r3, [r2, #56]	; 0x38
 80017ba:	4b38      	ldr	r3, [pc, #224]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	61bb      	str	r3, [r7, #24]
 80017c4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017c6:	4b35      	ldr	r3, [pc, #212]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a34      	ldr	r2, [pc, #208]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017cc:	f043 0310 	orr.w	r3, r3, #16
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b32      	ldr	r3, [pc, #200]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017de:	4b2f      	ldr	r3, [pc, #188]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a2e      	ldr	r2, [pc, #184]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017e4:	f043 0302 	orr.w	r3, r3, #2
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b2c      	ldr	r3, [pc, #176]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f6:	4b29      	ldr	r3, [pc, #164]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a28      	ldr	r2, [pc, #160]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017fc:	f043 0308 	orr.w	r3, r3, #8
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b26      	ldr	r3, [pc, #152]	; (800189c <HAL_QSPI_MspInit+0x110>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800180e:	2304      	movs	r3, #4
 8001810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800181e:	2309      	movs	r3, #9
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	4619      	mov	r1, r3
 8001828:	481d      	ldr	r0, [pc, #116]	; (80018a0 <HAL_QSPI_MspInit+0x114>)
 800182a:	f001 fe21 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800182e:	2340      	movs	r3, #64	; 0x40
 8001830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183a:	2303      	movs	r3, #3
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800183e:	230a      	movs	r3, #10
 8001840:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	4619      	mov	r1, r3
 8001848:	4816      	ldr	r0, [pc, #88]	; (80018a4 <HAL_QSPI_MspInit+0x118>)
 800184a:	f001 fe11 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800184e:	2304      	movs	r3, #4
 8001850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185a:	2303      	movs	r3, #3
 800185c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800185e:	2309      	movs	r3, #9
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001862:	f107 031c 	add.w	r3, r7, #28
 8001866:	4619      	mov	r1, r3
 8001868:	480e      	ldr	r0, [pc, #56]	; (80018a4 <HAL_QSPI_MspInit+0x118>)
 800186a:	f001 fe01 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800186e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001880:	2309      	movs	r3, #9
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	4619      	mov	r1, r3
 800188a:	4807      	ldr	r0, [pc, #28]	; (80018a8 <HAL_QSPI_MspInit+0x11c>)
 800188c:	f001 fdf0 	bl	8003470 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001890:	bf00      	nop
 8001892:	3730      	adds	r7, #48	; 0x30
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	a0001000 	.word	0xa0001000
 800189c:	40023800 	.word	0x40023800
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40020400 	.word	0x40020400
 80018a8:	40020c00 	.word	0x40020c00

080018ac <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0c      	ldr	r2, [pc, #48]	; (80018ec <HAL_QSPI_MspDeInit+0x40>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d112      	bne.n	80018e4 <HAL_QSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_QSPI_MspDeInit+0x44>)
 80018c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c2:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <HAL_QSPI_MspDeInit+0x44>)
 80018c4:	f023 0302 	bic.w	r3, r3, #2
 80018c8:	6393      	str	r3, [r2, #56]	; 0x38
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    HAL_GPIO_DeInit(QSPI_D2_GPIO_Port, QSPI_D2_Pin);
 80018ca:	2104      	movs	r1, #4
 80018cc:	4809      	ldr	r0, [pc, #36]	; (80018f4 <HAL_QSPI_MspDeInit+0x48>)
 80018ce:	f001 ff79 	bl	80037c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, QSPI_NCS_Pin|GPIO_PIN_2);
 80018d2:	2144      	movs	r1, #68	; 0x44
 80018d4:	4808      	ldr	r0, [pc, #32]	; (80018f8 <HAL_QSPI_MspDeInit+0x4c>)
 80018d6:	f001 ff75 	bl	80037c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin);
 80018da:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80018de:	4807      	ldr	r0, [pc, #28]	; (80018fc <HAL_QSPI_MspDeInit+0x50>)
 80018e0:	f001 ff70 	bl	80037c4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	a0001000 	.word	0xa0001000
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40020400 	.word	0x40020400
 80018fc:	40020c00 	.word	0x40020c00

08001900 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001914:	4b3a      	ldr	r3, [pc, #232]	; (8001a00 <HAL_FMC_MspInit+0x100>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d16d      	bne.n	80019f8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800191c:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <HAL_FMC_MspInit+0x100>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001922:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HAL_FMC_MspInit+0x104>)
 8001924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001926:	4a37      	ldr	r2, [pc, #220]	; (8001a04 <HAL_FMC_MspInit+0x104>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6393      	str	r3, [r2, #56]	; 0x38
 800192e:	4b35      	ldr	r3, [pc, #212]	; (8001a04 <HAL_FMC_MspInit+0x104>)
 8001930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800193a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800193e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800194c:	230c      	movs	r3, #12
 800194e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	4619      	mov	r1, r3
 8001954:	482c      	ldr	r0, [pc, #176]	; (8001a08 <HAL_FMC_MspInit+0x108>)
 8001956:	f001 fd8b 	bl	8003470 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800195a:	f248 1333 	movw	r3, #33075	; 0x8133
 800195e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800196c:	230c      	movs	r3, #12
 800196e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	4619      	mov	r1, r3
 8001974:	4825      	ldr	r0, [pc, #148]	; (8001a0c <HAL_FMC_MspInit+0x10c>)
 8001976:	f001 fd7b 	bl	8003470 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800197a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800197e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800198c:	230c      	movs	r3, #12
 800198e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	4619      	mov	r1, r3
 8001994:	481e      	ldr	r0, [pc, #120]	; (8001a10 <HAL_FMC_MspInit+0x110>)
 8001996:	f001 fd6b 	bl	8003470 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800199a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800199e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a8:	2303      	movs	r3, #3
 80019aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019ac:	230c      	movs	r3, #12
 80019ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	4619      	mov	r1, r3
 80019b4:	4817      	ldr	r0, [pc, #92]	; (8001a14 <HAL_FMC_MspInit+0x114>)
 80019b6:	f001 fd5b 	bl	8003470 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80019ba:	2328      	movs	r3, #40	; 0x28
 80019bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c6:	2303      	movs	r3, #3
 80019c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019ca:	230c      	movs	r3, #12
 80019cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	4619      	mov	r1, r3
 80019d2:	4811      	ldr	r0, [pc, #68]	; (8001a18 <HAL_FMC_MspInit+0x118>)
 80019d4:	f001 fd4c 	bl	8003470 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80019d8:	2308      	movs	r3, #8
 80019da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019e8:	230c      	movs	r3, #12
 80019ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	4619      	mov	r1, r3
 80019f0:	480a      	ldr	r0, [pc, #40]	; (8001a1c <HAL_FMC_MspInit+0x11c>)
 80019f2:	f001 fd3d 	bl	8003470 <HAL_GPIO_Init>
 80019f6:	e000      	b.n	80019fa <HAL_FMC_MspInit+0xfa>
    return;
 80019f8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000138 	.word	0x20000138
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40021800 	.word	0x40021800
 8001a10:	40020c00 	.word	0x40020c00
 8001a14:	40021400 	.word	0x40021400
 8001a18:	40021c00 	.word	0x40021c00
 8001a1c:	40020800 	.word	0x40020800

08001a20 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001a28:	f7ff ff6a 	bl	8001900 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08c      	sub	sp, #48	; 0x30
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001a44:	2200      	movs	r2, #0
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	2036      	movs	r0, #54	; 0x36
 8001a4a:	f000 ff0f 	bl	800286c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001a4e:	2036      	movs	r0, #54	; 0x36
 8001a50:	f000 ff28 	bl	80028a4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <HAL_InitTick+0xa0>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	4a1e      	ldr	r2, [pc, #120]	; (8001ad4 <HAL_InitTick+0xa0>)
 8001a5a:	f043 0310 	orr.w	r3, r3, #16
 8001a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a60:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <HAL_InitTick+0xa0>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	f003 0310 	and.w	r3, r3, #16
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a6c:	f107 0210 	add.w	r2, r7, #16
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f004 fad8 	bl	800602c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001a7c:	f004 fac2 	bl	8006004 <HAL_RCC_GetPCLK1Freq>
 8001a80:	4603      	mov	r3, r0
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a88:	4a13      	ldr	r2, [pc, #76]	; (8001ad8 <HAL_InitTick+0xa4>)
 8001a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8e:	0c9b      	lsrs	r3, r3, #18
 8001a90:	3b01      	subs	r3, #1
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_InitTick+0xa8>)
 8001a96:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <HAL_InitTick+0xac>)
 8001a98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <HAL_InitTick+0xa8>)
 8001a9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aa0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001aa2:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <HAL_InitTick+0xa8>)
 8001aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <HAL_InitTick+0xa8>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_InitTick+0xa8>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001ab4:	4809      	ldr	r0, [pc, #36]	; (8001adc <HAL_InitTick+0xa8>)
 8001ab6:	f004 ff58 	bl	800696a <HAL_TIM_Base_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d104      	bne.n	8001aca <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001ac0:	4806      	ldr	r0, [pc, #24]	; (8001adc <HAL_InitTick+0xa8>)
 8001ac2:	f004 ff87 	bl	80069d4 <HAL_TIM_Base_Start_IT>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	e000      	b.n	8001acc <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3730      	adds	r7, #48	; 0x30
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	431bde83 	.word	0x431bde83
 8001adc:	2000b644 	.word	0x2000b644
 8001ae0:	40001000 	.word	0x40001000

08001ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <HardFault_Handler+0x4>

08001af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <MemManage_Handler+0x4>

08001afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <BusFault_Handler+0x4>

08001b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <UsageFault_Handler+0x4>

08001b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <TIM6_DAC_IRQHandler+0x10>)
 8001b1e:	f004 ff83 	bl	8006a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2000b644 	.word	0x2000b644

08001b2c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <LTDC_IRQHandler+0x10>)
 8001b32:	f002 fddd 	bl	80046f0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2000b4dc 	.word	0x2000b4dc

08001b40 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <DMA2D_IRQHandler+0x10>)
 8001b46:	f001 fa54 	bl	8002ff2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2000b584 	.word	0x2000b584

08001b54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
	return 1;
 8001b58:	2301      	movs	r3, #1
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <_kill>:

int _kill(int pid, int sig)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b6e:	f021 facb 	bl	8023108 <__errno>
 8001b72:	4602      	mov	r2, r0
 8001b74:	2316      	movs	r3, #22
 8001b76:	6013      	str	r3, [r2, #0]
	return -1;
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_exit>:

void _exit (int status)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ffe7 	bl	8001b64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b96:	e7fe      	b.n	8001b96 <_exit+0x12>

08001b98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	e00a      	b.n	8001bc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001baa:	f3af 8000 	nop.w
 8001bae:	4601      	mov	r1, r0
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	60ba      	str	r2, [r7, #8]
 8001bb6:	b2ca      	uxtb	r2, r1
 8001bb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	dbf0      	blt.n	8001baa <_read+0x12>
	}

return len;
 8001bc8:	687b      	ldr	r3, [r7, #4]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	e009      	b.n	8001bf8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	60ba      	str	r2, [r7, #8]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	dbf1      	blt.n	8001be4 <_write+0x12>
	}
	return len;
 8001c00:	687b      	ldr	r3, [r7, #4]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <_close>:

int _close(int file)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
	return -1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c32:	605a      	str	r2, [r3, #4]
	return 0;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <_isatty>:

int _isatty(int file)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
	return 1;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
	return 0;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <_sbrk+0x50>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <_sbrk+0x16>
		heap_end = &end;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <_sbrk+0x50>)
 8001c86:	4a10      	ldr	r2, [pc, #64]	; (8001cc8 <_sbrk+0x54>)
 8001c88:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <_sbrk+0x50>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <_sbrk+0x50>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4413      	add	r3, r2
 8001c98:	466a      	mov	r2, sp
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d907      	bls.n	8001cae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001c9e:	f021 fa33 	bl	8023108 <__errno>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	230c      	movs	r3, #12
 8001ca6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cac:	e006      	b.n	8001cbc <_sbrk+0x48>
	}

	heap_end += incr;
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <_sbrk+0x50>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a03      	ldr	r2, [pc, #12]	; (8001cc4 <_sbrk+0x50>)
 8001cb8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001cba:	68fb      	ldr	r3, [r7, #12]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	2000013c 	.word	0x2000013c
 8001cc8:	2000b6d8 	.word	0x2000b6d8

08001ccc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <SystemInit+0x28>)
 8001cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd6:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <SystemInit+0x28>)
 8001cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <SystemInit+0x28>)
 8001ce2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ce6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cfc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cfe:	e003      	b.n	8001d08 <LoopCopyDataInit>

08001d00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d06:	3104      	adds	r1, #4

08001d08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d08:	480b      	ldr	r0, [pc, #44]	; (8001d38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d10:	d3f6      	bcc.n	8001d00 <CopyDataInit>
  ldr  r2, =_sbss
 8001d12:	4a0b      	ldr	r2, [pc, #44]	; (8001d40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d14:	e002      	b.n	8001d1c <LoopFillZerobss>

08001d16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d18:	f842 3b04 	str.w	r3, [r2], #4

08001d1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d20:	d3f9      	bcc.n	8001d16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d22:	f7ff ffd3 	bl	8001ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d26:	f021 fa07 	bl	8023138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d2a:	f7fe fcbb 	bl	80006a4 <main>
  bx  lr    
 8001d2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d30:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001d34:	08029c74 	.word	0x08029c74
  ldr  r0, =_sdata
 8001d38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d3c:	2000010c 	.word	0x2000010c
  ldr  r2, =_sbss
 8001d40:	2000010c 	.word	0x2000010c
  ldr  r3, = _ebss
 8001d44:	2000b6d8 	.word	0x2000b6d8

08001d48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d48:	e7fe      	b.n	8001d48 <ADC_IRQHandler>
	...

08001d4c <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8001d52:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001d54:	4a28      	ldr	r2, [pc, #160]	; (8001df8 <BSP_QSPI_Init+0xac>)
 8001d56:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8001d58:	4826      	ldr	r0, [pc, #152]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001d5a:	f003 f86b 	bl	8004e34 <HAL_QSPI_DeInit>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e041      	b.n	8001dec <BSP_QSPI_Init+0xa0>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4822      	ldr	r0, [pc, #136]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001d6c:	f000 f878 	bl	8001e60 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI freq = 216 MHz/(1+1) = 108 Mhz */
 8001d70:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8001d76:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001d78:	2204      	movs	r2, #4
 8001d7a:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001d7e:	2210      	movs	r2, #16
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d86:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d90:	683b      	ldr	r3, [r7, #0]
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8001d92:	fab3 f383 	clz	r3, r3
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001d9e:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001da2:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001da6:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	621a      	str	r2, [r3, #32]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8001dba:	480e      	ldr	r0, [pc, #56]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001dbc:	f002 ffb0 	bl	8004d20 <HAL_QSPI_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <BSP_QSPI_Init+0x7e>
  {
    return QSPI_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e010      	b.n	8001dec <BSP_QSPI_Init+0xa0>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8001dca:	480a      	ldr	r0, [pc, #40]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001dcc:	f000 f908 	bl	8001fe0 <QSPI_ResetMemory>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <BSP_QSPI_Init+0x8e>
  {
    return QSPI_NOT_SUPPORTED;
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	e008      	b.n	8001dec <BSP_QSPI_Init+0xa0>
  }
 
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 8001dda:	4806      	ldr	r0, [pc, #24]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001ddc:	f000 f942 	bl	8002064 <QSPI_DummyCyclesCfg>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <BSP_QSPI_Init+0x9e>
  {
    return QSPI_NOT_SUPPORTED;
 8001de6:	2304      	movs	r3, #4
 8001de8:	e000      	b.n	8001dec <BSP_QSPI_Init+0xa0>
  }
  
  return QSPI_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	2000b684 	.word	0x2000b684
 8001df8:	a0001000 	.word	0xa0001000

08001dfc <BSP_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_EnableMemoryMappedMode(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b090      	sub	sp, #64	; 0x40
 8001e00:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001e02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e06:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8001e08:	23eb      	movs	r3, #235	; 0xeb
 8001e0a:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001e0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001e12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e16:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001e1c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8001e22:	230a      	movs	r3, #10
 8001e24:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	603b      	str	r3, [r7, #0]
  
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8001e3a:	463a      	mov	r2, r7
 8001e3c:	f107 0308 	add.w	r3, r7, #8
 8001e40:	4619      	mov	r1, r3
 8001e42:	4806      	ldr	r0, [pc, #24]	; (8001e5c <BSP_QSPI_EnableMemoryMappedMode+0x60>)
 8001e44:	f003 fa34 	bl	80052b0 <HAL_QSPI_MemoryMapped>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <BSP_QSPI_EnableMemoryMappedMode+0x56>
  {
    return QSPI_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <BSP_QSPI_EnableMemoryMappedMode+0x58>
  }

  return QSPI_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3740      	adds	r7, #64	; 0x40
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	2000b684 	.word	0x2000b684

08001e60 <BSP_QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08e      	sub	sp, #56	; 0x38
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8001e6a:	4b59      	ldr	r3, [pc, #356]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6e:	4a58      	ldr	r2, [pc, #352]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	6393      	str	r3, [r2, #56]	; 0x38
 8001e76:	4b56      	ldr	r3, [pc, #344]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	623b      	str	r3, [r7, #32]
 8001e80:	6a3b      	ldr	r3, [r7, #32]
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8001e82:	4b53      	ldr	r3, [pc, #332]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	4a52      	ldr	r2, [pc, #328]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 8001e8e:	4b50      	ldr	r3, [pc, #320]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	4a4f      	ldr	r2, [pc, #316]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001e94:	f023 0302 	bic.w	r3, r3, #2
 8001e98:	6193      	str	r3, [r2, #24]
  /* Enable GPIO clocks */
  QSPI_CS_GPIO_CLK_ENABLE();
 8001e9a:	4b4d      	ldr	r3, [pc, #308]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a4c      	ldr	r2, [pc, #304]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b4a      	ldr	r3, [pc, #296]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	61fb      	str	r3, [r7, #28]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8001eb2:	4b47      	ldr	r3, [pc, #284]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a46      	ldr	r2, [pc, #280]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b44      	ldr	r3, [pc, #272]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	61bb      	str	r3, [r7, #24]
 8001ec8:	69bb      	ldr	r3, [r7, #24]
  QSPI_D0_GPIO_CLK_ENABLE();
 8001eca:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a40      	ldr	r2, [pc, #256]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ed0:	f043 0308 	orr.w	r3, r3, #8
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b3e      	ldr	r3, [pc, #248]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697b      	ldr	r3, [r7, #20]
  QSPI_D1_GPIO_CLK_ENABLE();
 8001ee2:	4b3b      	ldr	r3, [pc, #236]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a3a      	ldr	r2, [pc, #232]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ee8:	f043 0308 	orr.w	r3, r3, #8
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b38      	ldr	r3, [pc, #224]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8001efa:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a34      	ldr	r2, [pc, #208]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001f00:	f043 0310 	orr.w	r3, r3, #16
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b32      	ldr	r3, [pc, #200]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
  QSPI_D3_GPIO_CLK_ENABLE();
 8001f12:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a2e      	ldr	r2, [pc, #184]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001f18:	f043 0308 	orr.w	r3, r3, #8
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b2c      	ldr	r3, [pc, #176]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 8001f2a:	2340      	movs	r3, #64	; 0x40
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001f32:	2301      	movs	r3, #1
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8001f36:	2303      	movs	r3, #3
 8001f38:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8001f3a:	230a      	movs	r3, #10
 8001f3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8001f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f42:	4619      	mov	r1, r3
 8001f44:	4823      	ldr	r0, [pc, #140]	; (8001fd4 <BSP_QSPI_MspInit+0x174>)
 8001f46:	f001 fa93 	bl	8003470 <HAL_GPIO_Init>

  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001f52:	2309      	movs	r3, #9
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8001f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	481d      	ldr	r0, [pc, #116]	; (8001fd4 <BSP_QSPI_MspInit+0x174>)
 8001f5e:	f001 fa87 	bl	8003470 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8001f62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001f68:	2309      	movs	r3, #9
 8001f6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8001f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f70:	4619      	mov	r1, r3
 8001f72:	4819      	ldr	r0, [pc, #100]	; (8001fd8 <BSP_QSPI_MspInit+0x178>)
 8001f74:	f001 fa7c 	bl	8003470 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8001f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001f7e:	2309      	movs	r3, #9
 8001f80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8001f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f86:	4619      	mov	r1, r3
 8001f88:	4813      	ldr	r0, [pc, #76]	; (8001fd8 <BSP_QSPI_MspInit+0x178>)
 8001f8a:	f001 fa71 	bl	8003470 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8001f8e:	2304      	movs	r3, #4
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001f92:	2309      	movs	r3, #9
 8001f94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8001f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	480f      	ldr	r0, [pc, #60]	; (8001fdc <BSP_QSPI_MspInit+0x17c>)
 8001f9e:	f001 fa67 	bl	8003470 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8001fa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001fa8:	2309      	movs	r3, #9
 8001faa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8001fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4809      	ldr	r0, [pc, #36]	; (8001fd8 <BSP_QSPI_MspInit+0x178>)
 8001fb4:	f001 fa5c 	bl	8003470 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	210f      	movs	r1, #15
 8001fbc:	205c      	movs	r0, #92	; 0x5c
 8001fbe:	f000 fc55 	bl	800286c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8001fc2:	205c      	movs	r0, #92	; 0x5c
 8001fc4:	f000 fc6e 	bl	80028a4 <HAL_NVIC_EnableIRQ>
}
 8001fc8:	bf00      	nop
 8001fca:	3738      	adds	r7, #56	; 0x38
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020400 	.word	0x40020400
 8001fd8:	40020c00 	.word	0x40020c00
 8001fdc:	40021000 	.word	0x40021000

08001fe0 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b090      	sub	sp, #64	; 0x40
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fec:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8001fee:	2366      	movs	r3, #102	; 0x66
 8001ff0:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002006:	2300      	movs	r3, #0
 8002008:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800200a:	2300      	movs	r3, #0
 800200c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800200e:	f107 0308 	add.w	r3, r7, #8
 8002012:	f241 3288 	movw	r2, #5000	; 0x1388
 8002016:	4619      	mov	r1, r3
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f002 ff3b 	bl	8004e94 <HAL_QSPI_Command>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e019      	b.n	800205c <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8002028:	2399      	movs	r3, #153	; 0x99
 800202a:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800202c:	f107 0308 	add.w	r3, r7, #8
 8002030:	f241 3288 	movw	r2, #5000	; 0x1388
 8002034:	4619      	mov	r1, r3
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f002 ff2c 	bl	8004e94 <HAL_QSPI_Command>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e00a      	b.n	800205c <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002046:	f241 3188 	movw	r1, #5000	; 0x1388
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8c7 	bl	80021de <QSPI_AutoPollingMemReady>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3740      	adds	r7, #64	; 0x40
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b094      	sub	sp, #80	; 0x50
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800206c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8002072:	2385      	movs	r3, #133	; 0x85
 8002074:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002076:	2300      	movs	r3, #0
 8002078:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800207a:	2300      	movs	r3, #0
 800207c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800207e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002082:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8002088:	2301      	movs	r3, #1
 800208a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002090:	2300      	movs	r3, #0
 8002092:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002094:	2300      	movs	r3, #0
 8002096:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a0:	4619      	mov	r1, r3
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f002 fef6 	bl	8004e94 <HAL_QSPI_Command>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e048      	b.n	8002144 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80020b2:	f107 030f 	add.w	r3, r7, #15
 80020b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ba:	4619      	mov	r1, r3
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f002 ffde 	bl	800507e <HAL_QSPI_Receive>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e03b      	b.n	8002144 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f83d 	bl	800214c <QSPI_WriteEnable>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e033      	b.n	8002144 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */  
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 80020dc:	2381      	movs	r3, #129	; 0x81
 80020de:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	b25b      	sxtb	r3, r3
 80020e4:	f003 030f 	and.w	r3, r3, #15
 80020e8:	b25a      	sxtb	r2, r3
 80020ea:	23f0      	movs	r3, #240	; 0xf0
 80020ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80020f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020f8:	fab3 f383 	clz	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	4619      	mov	r1, r3
 8002100:	230a      	movs	r3, #10
 8002102:	408b      	lsls	r3, r1
 8002104:	b25b      	sxtb	r3, r3
 8002106:	4313      	orrs	r3, r2
 8002108:	b25b      	sxtb	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	73fb      	strb	r3, [r7, #15]
      
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800210e:	f107 0310 	add.w	r3, r7, #16
 8002112:	f241 3288 	movw	r2, #5000	; 0x1388
 8002116:	4619      	mov	r1, r3
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f002 febb 	bl	8004e94 <HAL_QSPI_Command>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <QSPI_DummyCyclesCfg+0xc4>
  {
    return QSPI_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e00d      	b.n	8002144 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002128:	f107 030f 	add.w	r3, r7, #15
 800212c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002130:	4619      	mov	r1, r3
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f002 ff0e 	bl	8004f54 <HAL_QSPI_Transmit>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <QSPI_DummyCyclesCfg+0xde>
  {
    return QSPI_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <QSPI_DummyCyclesCfg+0xe0>
  }
  
  return QSPI_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3750      	adds	r7, #80	; 0x50
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b096      	sub	sp, #88	; 0x58
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002154:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002158:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800215a:	2306      	movs	r3, #6
 800215c:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800215e:	2300      	movs	r3, #0
 8002160:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002162:	2300      	movs	r3, #0
 8002164:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8002166:	2300      	movs	r3, #0
 8002168:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800216e:	2300      	movs	r3, #0
 8002170:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002172:	2300      	movs	r3, #0
 8002174:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002176:	2300      	movs	r3, #0
 8002178:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800217a:	f107 0320 	add.w	r3, r7, #32
 800217e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002182:	4619      	mov	r1, r3
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f002 fe85 	bl	8004e94 <HAL_QSPI_Command>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e020      	b.n	80021d6 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = N25Q128A_SR_WREN;
 8002194:	2302      	movs	r3, #2
 8002196:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 8002198:	2302      	movs	r3, #2
 800219a:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800219c:	2300      	movs	r3, #0
 800219e:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80021a0:	2301      	movs	r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80021a4:	2310      	movs	r3, #16
 80021a6:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80021a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021ac:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 80021ae:	2305      	movs	r3, #5
 80021b0:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 80021b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021b8:	f107 0208 	add.w	r2, r7, #8
 80021bc:	f107 0120 	add.w	r1, r7, #32
 80021c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f002 fffa 	bl	80051be <HAL_QSPI_AutoPolling>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3758      	adds	r7, #88	; 0x58
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b096      	sub	sp, #88	; 0x58
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80021e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ec:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80021ee:	2305      	movs	r3, #5
 80021f0:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80021fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021fe:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002204:	2300      	movs	r3, #0
 8002206:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002208:	2300      	movs	r3, #0
 800220a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800220c:	2300      	movs	r3, #0
 800220e:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 8002214:	2301      	movs	r3, #1
 8002216:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002218:	2300      	movs	r3, #0
 800221a:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 800221c:	2301      	movs	r3, #1
 800221e:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8002220:	2310      	movs	r3, #16
 8002222:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002224:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002228:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800222a:	f107 0208 	add.w	r2, r7, #8
 800222e:	f107 0120 	add.w	r1, r7, #32
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f002 ffc2 	bl	80051be <HAL_QSPI_AutoPolling>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3758      	adds	r7, #88	; 0x58
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  //TS_IO_Delay(200);

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002258:	f000 f9b4 	bl	80025c4 <ft5336_I2C_InitializeIfRequired>
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b084      	sub	sp, #16
 800227e:	af00      	add	r7, sp, #0
 8002280:	4603      	mov	r3, r0
 8002282:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800228c:	2300      	movs	r3, #0
 800228e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002290:	f000 f998 	bl	80025c4 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8002294:	2300      	movs	r3, #0
 8002296:	73fb      	strb	r3, [r7, #15]
 8002298:	e010      	b.n	80022bc <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	21a8      	movs	r1, #168	; 0xa8
 80022a0:	4618      	mov	r0, r3
 80022a2:	f00e fc5d 	bl	8010b60 <TS_IO_Read>
 80022a6:	4603      	mov	r3, r0
 80022a8:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80022aa:	7b7b      	ldrb	r3, [r7, #13]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b51      	cmp	r3, #81	; 0x51
 80022b0:	d101      	bne.n	80022b6 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	3301      	adds	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d802      	bhi.n	80022c8 <ft5336_ReadID+0x4e>
 80022c2:	7bbb      	ldrb	r3, [r7, #14]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0e8      	beq.n	800229a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80022c8:	7b7b      	ldrb	r3, [r7, #13]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	b29b      	uxth	r3, r3
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	4603      	mov	r3, r0
 80022de:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 f97c 	bl	80025e0 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f932 	bl	8002554 <ft5336_TS_DisableIT>
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8002306:	88fb      	ldrh	r3, [r7, #6]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2102      	movs	r1, #2
 800230c:	4618      	mov	r0, r3
 800230e:	f00e fc27 	bl	8010b60 <TS_IO_Read>
 8002312:	4603      	mov	r3, r0
 8002314:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	b2db      	uxtb	r3, r3
 8002320:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b05      	cmp	r3, #5
 8002328:	d901      	bls.n	800232e <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4b05      	ldr	r3, [pc, #20]	; (8002348 <ft5336_TS_DetectTouch+0x50>)
 8002334:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8002336:	4b04      	ldr	r3, [pc, #16]	; (8002348 <ft5336_TS_DetectTouch+0x50>)
 8002338:	2200      	movs	r2, #0
 800233a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	b2db      	uxtb	r3, r3
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20000140 	.word	0x20000140

0800234c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
 8002358:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800236e:	4b6d      	ldr	r3, [pc, #436]	; (8002524 <ft5336_TS_GetXY+0x1d8>)
 8002370:	789a      	ldrb	r2, [r3, #2]
 8002372:	4b6c      	ldr	r3, [pc, #432]	; (8002524 <ft5336_TS_GetXY+0x1d8>)
 8002374:	785b      	ldrb	r3, [r3, #1]
 8002376:	429a      	cmp	r2, r3
 8002378:	f080 80cf 	bcs.w	800251a <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800237c:	4b69      	ldr	r3, [pc, #420]	; (8002524 <ft5336_TS_GetXY+0x1d8>)
 800237e:	789b      	ldrb	r3, [r3, #2]
 8002380:	2b09      	cmp	r3, #9
 8002382:	d871      	bhi.n	8002468 <ft5336_TS_GetXY+0x11c>
 8002384:	a201      	add	r2, pc, #4	; (adr r2, 800238c <ft5336_TS_GetXY+0x40>)
 8002386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238a:	bf00      	nop
 800238c:	080023b5 	.word	0x080023b5
 8002390:	080023c7 	.word	0x080023c7
 8002394:	080023d9 	.word	0x080023d9
 8002398:	080023eb 	.word	0x080023eb
 800239c:	080023fd 	.word	0x080023fd
 80023a0:	0800240f 	.word	0x0800240f
 80023a4:	08002421 	.word	0x08002421
 80023a8:	08002433 	.word	0x08002433
 80023ac:	08002445 	.word	0x08002445
 80023b0:	08002457 	.word	0x08002457
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80023b4:	2304      	movs	r3, #4
 80023b6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80023b8:	2303      	movs	r3, #3
 80023ba:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80023bc:	2306      	movs	r3, #6
 80023be:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80023c0:	2305      	movs	r3, #5
 80023c2:	753b      	strb	r3, [r7, #20]
      break;
 80023c4:	e051      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80023c6:	230a      	movs	r3, #10
 80023c8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80023ca:	2309      	movs	r3, #9
 80023cc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80023ce:	230c      	movs	r3, #12
 80023d0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80023d2:	230b      	movs	r3, #11
 80023d4:	753b      	strb	r3, [r7, #20]
      break;
 80023d6:	e048      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80023d8:	2310      	movs	r3, #16
 80023da:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80023dc:	230f      	movs	r3, #15
 80023de:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80023e0:	2312      	movs	r3, #18
 80023e2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80023e4:	2311      	movs	r3, #17
 80023e6:	753b      	strb	r3, [r7, #20]
      break;
 80023e8:	e03f      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80023ea:	2316      	movs	r3, #22
 80023ec:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80023ee:	2315      	movs	r3, #21
 80023f0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80023f2:	2318      	movs	r3, #24
 80023f4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80023f6:	2317      	movs	r3, #23
 80023f8:	753b      	strb	r3, [r7, #20]
      break;
 80023fa:	e036      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80023fc:	231c      	movs	r3, #28
 80023fe:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8002400:	231b      	movs	r3, #27
 8002402:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8002404:	231e      	movs	r3, #30
 8002406:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8002408:	231d      	movs	r3, #29
 800240a:	753b      	strb	r3, [r7, #20]
      break;
 800240c:	e02d      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800240e:	2322      	movs	r3, #34	; 0x22
 8002410:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8002412:	2321      	movs	r3, #33	; 0x21
 8002414:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8002416:	2324      	movs	r3, #36	; 0x24
 8002418:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800241a:	2323      	movs	r3, #35	; 0x23
 800241c:	753b      	strb	r3, [r7, #20]
      break;
 800241e:	e024      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8002420:	2328      	movs	r3, #40	; 0x28
 8002422:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8002424:	2327      	movs	r3, #39	; 0x27
 8002426:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8002428:	232a      	movs	r3, #42	; 0x2a
 800242a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 800242c:	2329      	movs	r3, #41	; 0x29
 800242e:	753b      	strb	r3, [r7, #20]
      break;
 8002430:	e01b      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8002432:	232e      	movs	r3, #46	; 0x2e
 8002434:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8002436:	232d      	movs	r3, #45	; 0x2d
 8002438:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800243a:	2330      	movs	r3, #48	; 0x30
 800243c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800243e:	232f      	movs	r3, #47	; 0x2f
 8002440:	753b      	strb	r3, [r7, #20]
      break;
 8002442:	e012      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8002444:	2334      	movs	r3, #52	; 0x34
 8002446:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8002448:	2333      	movs	r3, #51	; 0x33
 800244a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 800244c:	2336      	movs	r3, #54	; 0x36
 800244e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8002450:	2335      	movs	r3, #53	; 0x35
 8002452:	753b      	strb	r3, [r7, #20]
      break;
 8002454:	e009      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8002456:	233a      	movs	r3, #58	; 0x3a
 8002458:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800245a:	2339      	movs	r3, #57	; 0x39
 800245c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800245e:	233c      	movs	r3, #60	; 0x3c
 8002460:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8002462:	233b      	movs	r3, #59	; 0x3b
 8002464:	753b      	strb	r3, [r7, #20]
      break;
 8002466:	e000      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8002468:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800246a:	89fb      	ldrh	r3, [r7, #14]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	7dfa      	ldrb	r2, [r7, #23]
 8002470:	4611      	mov	r1, r2
 8002472:	4618      	mov	r0, r3
 8002474:	f00e fb74 	bl	8010b60 <TS_IO_Read>
 8002478:	4603      	mov	r3, r0
 800247a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	b29a      	uxth	r2, r3
 8002482:	4b29      	ldr	r3, [pc, #164]	; (8002528 <ft5336_TS_GetXY+0x1dc>)
 8002484:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8002486:	89fb      	ldrh	r3, [r7, #14]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	7dba      	ldrb	r2, [r7, #22]
 800248c:	4611      	mov	r1, r2
 800248e:	4618      	mov	r0, r3
 8002490:	f00e fb66 	bl	8010b60 <TS_IO_Read>
 8002494:	4603      	mov	r3, r0
 8002496:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	021b      	lsls	r3, r3, #8
 800249e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80024a2:	b21a      	sxth	r2, r3
 80024a4:	4b20      	ldr	r3, [pc, #128]	; (8002528 <ft5336_TS_GetXY+0x1dc>)
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	b21b      	sxth	r3, r3
 80024aa:	4313      	orrs	r3, r2
 80024ac:	b21b      	sxth	r3, r3
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	4b1d      	ldr	r3, [pc, #116]	; (8002528 <ft5336_TS_GetXY+0x1dc>)
 80024b2:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80024b4:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <ft5336_TS_GetXY+0x1dc>)
 80024b6:	881a      	ldrh	r2, [r3, #0]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80024bc:	89fb      	ldrh	r3, [r7, #14]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	7d7a      	ldrb	r2, [r7, #21]
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f00e fb4b 	bl	8010b60 <TS_IO_Read>
 80024ca:	4603      	mov	r3, r0
 80024cc:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80024ce:	7cfb      	ldrb	r3, [r7, #19]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	4b14      	ldr	r3, [pc, #80]	; (8002528 <ft5336_TS_GetXY+0x1dc>)
 80024d6:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80024d8:	89fb      	ldrh	r3, [r7, #14]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	7d3a      	ldrb	r2, [r7, #20]
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f00e fb3d 	bl	8010b60 <TS_IO_Read>
 80024e6:	4603      	mov	r3, r0
 80024e8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80024ea:	7cfb      	ldrb	r3, [r7, #19]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	021b      	lsls	r3, r3, #8
 80024f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80024f4:	b21a      	sxth	r2, r3
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <ft5336_TS_GetXY+0x1dc>)
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	b21b      	sxth	r3, r3
 80024fc:	4313      	orrs	r3, r2
 80024fe:	b21b      	sxth	r3, r3
 8002500:	b29a      	uxth	r2, r3
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <ft5336_TS_GetXY+0x1dc>)
 8002504:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8002506:	4b08      	ldr	r3, [pc, #32]	; (8002528 <ft5336_TS_GetXY+0x1dc>)
 8002508:	881a      	ldrh	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800250e:	4b05      	ldr	r3, [pc, #20]	; (8002524 <ft5336_TS_GetXY+0x1d8>)
 8002510:	789b      	ldrb	r3, [r3, #2]
 8002512:	3301      	adds	r3, #1
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4b03      	ldr	r3, [pc, #12]	; (8002524 <ft5336_TS_GetXY+0x1d8>)
 8002518:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800251a:	bf00      	nop
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000140 	.word	0x20000140
 8002528:	20000144 	.word	0x20000144

0800252c <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	7bfa      	ldrb	r2, [r7, #15]
 8002544:	21a4      	movs	r1, #164	; 0xa4
 8002546:	4618      	mov	r0, r3
 8002548:	f00e faf0 	bl	8010b2c <TS_IO_Write>
}
 800254c:	bf00      	nop
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8002562:	2300      	movs	r3, #0
 8002564:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	7bfa      	ldrb	r2, [r7, #15]
 800256c:	21a4      	movs	r1, #164	; 0xa4
 800256e:	4618      	mov	r0, r3
 8002570:	f00e fadc 	bl	8010b2c <TS_IO_Write>
}
 8002574:	bf00      	nop
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80025b0:	4b03      	ldr	r3, [pc, #12]	; (80025c0 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	20000140 	.word	0x20000140

080025c4 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80025c8:	f7ff fff0 	bl	80025ac <ft5336_Get_I2C_InitializedStatus>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d102      	bne.n	80025d8 <ft5336_I2C_InitializeIfRequired+0x14>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80025d2:	4b02      	ldr	r3, [pc, #8]	; (80025dc <ft5336_I2C_InitializeIfRequired+0x18>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	701a      	strb	r2, [r3, #0]
  }
}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20000140 	.word	0x20000140

080025e0 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80025ee:	68fb      	ldr	r3, [r7, #12]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_Init+0x34>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <HAL_Init+0x34>)
 8002606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800260a:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800260c:	4b08      	ldr	r3, [pc, #32]	; (8002630 <HAL_Init+0x34>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a07      	ldr	r2, [pc, #28]	; (8002630 <HAL_Init+0x34>)
 8002612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002616:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002618:	2003      	movs	r0, #3
 800261a:	f000 f91c 	bl	8002856 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800261e:	2000      	movs	r0, #0
 8002620:	f7ff fa08 	bl	8001a34 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002624:	f7fe ff00 	bl	8001428 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023c00 	.word	0x40023c00

08002634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002638:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_IncTick+0x20>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_IncTick+0x24>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4413      	add	r3, r2
 8002644:	4a04      	ldr	r2, [pc, #16]	; (8002658 <HAL_IncTick+0x24>)
 8002646:	6013      	str	r3, [r2, #0]
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	20000030 	.word	0x20000030
 8002658:	2000b6d0 	.word	0x2000b6d0

0800265c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return uwTick;
 8002660:	4b03      	ldr	r3, [pc, #12]	; (8002670 <HAL_GetTick+0x14>)
 8002662:	681b      	ldr	r3, [r3, #0]
}
 8002664:	4618      	mov	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	2000b6d0 	.word	0x2000b6d0

08002674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800267c:	f7ff ffee 	bl	800265c <HAL_GetTick>
 8002680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d005      	beq.n	800269a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_Delay+0x40>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4413      	add	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800269a:	bf00      	nop
 800269c:	f7ff ffde 	bl	800265c <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d8f7      	bhi.n	800269c <HAL_Delay+0x28>
  {
  }
}
 80026ac:	bf00      	nop
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20000030 	.word	0x20000030

080026b8 <__NVIC_SetPriorityGrouping>:
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <__NVIC_SetPriorityGrouping+0x40>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026d4:	4013      	ands	r3, r2
 80026d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <__NVIC_SetPriorityGrouping+0x44>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026e6:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <__NVIC_SetPriorityGrouping+0x40>)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	60d3      	str	r3, [r2, #12]
}
 80026ec:	bf00      	nop
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000ed00 	.word	0xe000ed00
 80026fc:	05fa0000 	.word	0x05fa0000

08002700 <__NVIC_GetPriorityGrouping>:
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <__NVIC_GetPriorityGrouping+0x18>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	0a1b      	lsrs	r3, r3, #8
 800270a:	f003 0307 	and.w	r3, r3, #7
}
 800270e:	4618      	mov	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <__NVIC_EnableIRQ>:
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	2b00      	cmp	r3, #0
 800272c:	db0b      	blt.n	8002746 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	f003 021f 	and.w	r2, r3, #31
 8002734:	4907      	ldr	r1, [pc, #28]	; (8002754 <__NVIC_EnableIRQ+0x38>)
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	2001      	movs	r0, #1
 800273e:	fa00 f202 	lsl.w	r2, r0, r2
 8002742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000e100 	.word	0xe000e100

08002758 <__NVIC_DisableIRQ>:
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	2b00      	cmp	r3, #0
 8002768:	db10      	blt.n	800278c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	f003 021f 	and.w	r2, r3, #31
 8002770:	4909      	ldr	r1, [pc, #36]	; (8002798 <__NVIC_DisableIRQ+0x40>)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	2001      	movs	r0, #1
 800277a:	fa00 f202 	lsl.w	r2, r0, r2
 800277e:	3320      	adds	r3, #32
 8002780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002784:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002788:	f3bf 8f6f 	isb	sy
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000e100 	.word	0xe000e100

0800279c <__NVIC_SetPriority>:
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	6039      	str	r1, [r7, #0]
 80027a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	db0a      	blt.n	80027c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	490c      	ldr	r1, [pc, #48]	; (80027e8 <__NVIC_SetPriority+0x4c>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	0112      	lsls	r2, r2, #4
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	440b      	add	r3, r1
 80027c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027c4:	e00a      	b.n	80027dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	4908      	ldr	r1, [pc, #32]	; (80027ec <__NVIC_SetPriority+0x50>)
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	3b04      	subs	r3, #4
 80027d4:	0112      	lsls	r2, r2, #4
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	440b      	add	r3, r1
 80027da:	761a      	strb	r2, [r3, #24]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000e100 	.word	0xe000e100
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <NVIC_EncodePriority>:
{
 80027f0:	b480      	push	{r7}
 80027f2:	b089      	sub	sp, #36	; 0x24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f1c3 0307 	rsb	r3, r3, #7
 800280a:	2b04      	cmp	r3, #4
 800280c:	bf28      	it	cs
 800280e:	2304      	movcs	r3, #4
 8002810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3304      	adds	r3, #4
 8002816:	2b06      	cmp	r3, #6
 8002818:	d902      	bls.n	8002820 <NVIC_EncodePriority+0x30>
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3b03      	subs	r3, #3
 800281e:	e000      	b.n	8002822 <NVIC_EncodePriority+0x32>
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002824:	f04f 32ff 	mov.w	r2, #4294967295
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43da      	mvns	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	401a      	ands	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002838:	f04f 31ff 	mov.w	r1, #4294967295
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	fa01 f303 	lsl.w	r3, r1, r3
 8002842:	43d9      	mvns	r1, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002848:	4313      	orrs	r3, r2
}
 800284a:	4618      	mov	r0, r3
 800284c:	3724      	adds	r7, #36	; 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff ff2a 	bl	80026b8 <__NVIC_SetPriorityGrouping>
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800287e:	f7ff ff3f 	bl	8002700 <__NVIC_GetPriorityGrouping>
 8002882:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	68b9      	ldr	r1, [r7, #8]
 8002888:	6978      	ldr	r0, [r7, #20]
 800288a:	f7ff ffb1 	bl	80027f0 <NVIC_EncodePriority>
 800288e:	4602      	mov	r2, r0
 8002890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002894:	4611      	mov	r1, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff ff80 	bl	800279c <__NVIC_SetPriority>
}
 800289c:	bf00      	nop
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ff32 	bl	800271c <__NVIC_EnableIRQ>
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ff42 	bl	8002758 <__NVIC_DisableIRQ>
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80028e0:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_MPU_Disable+0x24>)
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	4a05      	ldr	r2, [pc, #20]	; (8002900 <HAL_MPU_Disable+0x24>)
 80028ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ee:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <HAL_MPU_Disable+0x28>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	605a      	str	r2, [r3, #4]
}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	e000ed00 	.word	0xe000ed00
 8002904:	e000ed90 	.word	0xe000ed90

08002908 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002910:	4a0a      	ldr	r2, [pc, #40]	; (800293c <HAL_MPU_Enable+0x34>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_MPU_Enable+0x38>)
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	4a08      	ldr	r2, [pc, #32]	; (8002940 <HAL_MPU_Enable+0x38>)
 8002920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002924:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002926:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800292a:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	e000ed90 	.word	0xe000ed90
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	785a      	ldrb	r2, [r3, #1]
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <HAL_MPU_ConfigRegion+0x84>)
 8002952:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d029      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 800295c:	4a1a      	ldr	r2, [pc, #104]	; (80029c8 <HAL_MPU_ConfigRegion+0x84>)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	7b1b      	ldrb	r3, [r3, #12]
 8002968:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	7adb      	ldrb	r3, [r3, #11]
 800296e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002970:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	7a9b      	ldrb	r3, [r3, #10]
 8002976:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002978:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	7b5b      	ldrb	r3, [r3, #13]
 800297e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002980:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7b9b      	ldrb	r3, [r3, #14]
 8002986:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002988:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	7bdb      	ldrb	r3, [r3, #15]
 800298e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002990:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7a5b      	ldrb	r3, [r3, #9]
 8002996:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002998:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	7a1b      	ldrb	r3, [r3, #8]
 800299e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80029a0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	7812      	ldrb	r2, [r2, #0]
 80029a6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029a8:	4a07      	ldr	r2, [pc, #28]	; (80029c8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029aa:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029ac:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80029ae:	e005      	b.n	80029bc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_MPU_ConfigRegion+0x84>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80029b6:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <HAL_MPU_ConfigRegion+0x84>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	611a      	str	r2, [r3, #16]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000ed90 	.word	0xe000ed90

080029cc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e054      	b.n	8002a88 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7f5b      	ldrb	r3, [r3, #29]
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d105      	bne.n	80029f4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7fe fd42 	bl	8001478 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	791b      	ldrb	r3, [r3, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10c      	bne.n	8002a1c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a22      	ldr	r2, [pc, #136]	; (8002a90 <HAL_CRC_Init+0xc4>)
 8002a08:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0218 	bic.w	r2, r2, #24
 8002a18:	609a      	str	r2, [r3, #8]
 8002a1a:	e00c      	b.n	8002a36 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6899      	ldr	r1, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	461a      	mov	r2, r3
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f834 	bl	8002a94 <HAL_CRCEx_Polynomial_Set>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e028      	b.n	8002a88 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	795b      	ldrb	r3, [r3, #5]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d105      	bne.n	8002a4a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f04f 32ff 	mov.w	r2, #4294967295
 8002a46:	611a      	str	r2, [r3, #16]
 8002a48:	e004      	b.n	8002a54 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6912      	ldr	r2, [r2, #16]
 8002a52:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695a      	ldr	r2, [r3, #20]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699a      	ldr	r2, [r3, #24]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	04c11db7 	.word	0x04c11db7

08002a94 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002aa4:	231f      	movs	r3, #31
 8002aa6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002aa8:	bf00      	nop
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1e5a      	subs	r2, r3, #1
 8002aae:	613a      	str	r2, [r7, #16]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d009      	beq.n	8002ac8 <HAL_CRCEx_Polynomial_Set+0x34>
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f003 031f 	and.w	r3, r3, #31
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b18      	cmp	r3, #24
 8002acc:	d846      	bhi.n	8002b5c <HAL_CRCEx_Polynomial_Set+0xc8>
 8002ace:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad4:	08002b63 	.word	0x08002b63
 8002ad8:	08002b5d 	.word	0x08002b5d
 8002adc:	08002b5d 	.word	0x08002b5d
 8002ae0:	08002b5d 	.word	0x08002b5d
 8002ae4:	08002b5d 	.word	0x08002b5d
 8002ae8:	08002b5d 	.word	0x08002b5d
 8002aec:	08002b5d 	.word	0x08002b5d
 8002af0:	08002b5d 	.word	0x08002b5d
 8002af4:	08002b51 	.word	0x08002b51
 8002af8:	08002b5d 	.word	0x08002b5d
 8002afc:	08002b5d 	.word	0x08002b5d
 8002b00:	08002b5d 	.word	0x08002b5d
 8002b04:	08002b5d 	.word	0x08002b5d
 8002b08:	08002b5d 	.word	0x08002b5d
 8002b0c:	08002b5d 	.word	0x08002b5d
 8002b10:	08002b5d 	.word	0x08002b5d
 8002b14:	08002b45 	.word	0x08002b45
 8002b18:	08002b5d 	.word	0x08002b5d
 8002b1c:	08002b5d 	.word	0x08002b5d
 8002b20:	08002b5d 	.word	0x08002b5d
 8002b24:	08002b5d 	.word	0x08002b5d
 8002b28:	08002b5d 	.word	0x08002b5d
 8002b2c:	08002b5d 	.word	0x08002b5d
 8002b30:	08002b5d 	.word	0x08002b5d
 8002b34:	08002b39 	.word	0x08002b39
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	2b06      	cmp	r3, #6
 8002b3c:	d913      	bls.n	8002b66 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002b42:	e010      	b.n	8002b66 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	2b07      	cmp	r3, #7
 8002b48:	d90f      	bls.n	8002b6a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002b4e:	e00c      	b.n	8002b6a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	2b0f      	cmp	r3, #15
 8002b54:	d90b      	bls.n	8002b6e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002b5a:	e008      	b.n	8002b6e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b60:	e006      	b.n	8002b70 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b62:	bf00      	nop
 8002b64:	e004      	b.n	8002b70 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b66:	bf00      	nop
 8002b68:	e002      	b.n	8002b70 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b6a:	bf00      	nop
 8002b6c:	e000      	b.n	8002b70 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b6e:	bf00      	nop
  }
  if (status == HAL_OK)
 8002b70:	7dfb      	ldrb	r3, [r7, #23]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10d      	bne.n	8002b92 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f023 0118 	bic.w	r1, r3, #24
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	371c      	adds	r7, #28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bae:	f7ff fd55 	bl	800265c <HAL_GetTick>
 8002bb2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d008      	beq.n	8002bd2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2280      	movs	r2, #128	; 0x80
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e052      	b.n	8002c78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0216 	bic.w	r2, r2, #22
 8002be0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bf0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d103      	bne.n	8002c02 <HAL_DMA_Abort+0x62>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d007      	beq.n	8002c12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0208 	bic.w	r2, r2, #8
 8002c10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0201 	bic.w	r2, r2, #1
 8002c20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c22:	e013      	b.n	8002c4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c24:	f7ff fd1a 	bl	800265c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b05      	cmp	r3, #5
 8002c30:	d90c      	bls.n	8002c4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2220      	movs	r2, #32
 8002c36:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2203      	movs	r2, #3
 8002c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e015      	b.n	8002c78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1e4      	bne.n	8002c24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5e:	223f      	movs	r2, #63	; 0x3f
 8002c60:	409a      	lsls	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e039      	b.n	8002d06 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d106      	bne.n	8002cac <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7fe fc06 	bl	80014b8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd0:	f023 0107 	bic.w	r1, r3, #7
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <HAL_DMA2D_Init+0x90>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68d1      	ldr	r1, [r2, #12]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	430b      	orrs	r3, r1
 8002cf4:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	ffffc000 	.word	0xffffc000

08002d14 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e05f      	b.n	8002de6 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8002d26:	4b32      	ldr	r3, [pc, #200]	; (8002df0 <HAL_DMA2D_DeInit+0xdc>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d02e      	beq.n	8002d90 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d107      	bne.n	8002d50 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f8c1 	bl	8002ec8 <HAL_DMA2D_Abort>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d021      	beq.n	8002d90 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e04a      	b.n	8002de6 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b20      	cmp	r3, #32
 8002d5c:	d108      	bne.n	8002d70 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8002d5e:	2100      	movs	r1, #0
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f8f7 	bl	8002f54 <HAL_DMA2D_CLUTLoading_Abort>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d011      	beq.n	8002d90 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e03a      	b.n	8002de6 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	f003 0320 	and.w	r3, r3, #32
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	d108      	bne.n	8002d90 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8002d7e:	2101      	movs	r1, #1
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f8e7 	bl	8002f54 <HAL_DMA2D_CLUTLoading_Abort>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e02a      	b.n	8002de6 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	223f      	movs	r2, #63	; 0x3f
 8002d9e:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2200      	movs	r2, #0
 8002da6:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2200      	movs	r2, #0
 8002dae:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2200      	movs	r2, #0
 8002db6:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7fe fb9b 	bl	8001504 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40023800 	.word	0x40023800

08002df4 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_DMA2D_Start_IT+0x1c>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e020      	b.n	8002e52 <HAL_DMA2D_Start_IT+0x5e>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 fa84 	bl	8003338 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8002e3e:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b086      	sub	sp, #24
 8002e5e:	af02      	add	r7, sp, #8
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_DMA2D_BlendingStart_IT+0x1c>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e024      	b.n	8002ec0 <HAL_DMA2D_BlendingStart_IT+0x66>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2202      	movs	r2, #2
 8002e82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	68b9      	ldr	r1, [r7, #8]
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 fa4d 	bl	8003338 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8002eac:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f042 0201 	orr.w	r2, r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 0205 	bic.w	r2, r3, #5
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0204 	orr.w	r2, r2, #4
 8002ee2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ee4:	f7ff fbba 	bl	800265c <HAL_GetTick>
 8002ee8:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002eea:	e017      	b.n	8002f1c <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8002eec:	f7ff fbb6 	bl	800265c <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002efa:	d90f      	bls.n	8002f1c <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f00:	f043 0220 	orr.w	r2, r3, #32
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e017      	b.n	8002f4c <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1e0      	bne.n	8002eec <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8002f38:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3324      	adds	r3, #36	; 0x24
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0204 	orr.w	r2, r2, #4
 8002f74:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d103      	bne.n	8002f84 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	331c      	adds	r3, #28
 8002f82:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8002f84:	f7ff fb6a 	bl	800265c <HAL_GetTick>
 8002f88:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8002f8a:	e017      	b.n	8002fbc <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8002f8c:	f7ff fb66 	bl	800265c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f9a:	d90f      	bls.n	8002fbc <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa0:	f043 0220 	orr.w	r2, r3, #32
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2203      	movs	r2, #3
 8002fac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e016      	b.n	8002fea <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0320 	and.w	r3, r3, #32
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e1      	bne.n	8002f8c <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8002fd6:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d026      	beq.n	8003062 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301a:	2b00      	cmp	r3, #0
 800301c:	d021      	beq.n	8003062 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800302c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003032:	f043 0201 	orr.w	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2201      	movs	r2, #1
 8003040:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2204      	movs	r2, #4
 8003046:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b00      	cmp	r3, #0
 800306a:	d026      	beq.n	80030ba <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d021      	beq.n	80030ba <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003084:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2220      	movs	r2, #32
 800308c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003092:	f043 0202 	orr.w	r2, r3, #2
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2204      	movs	r2, #4
 800309e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d026      	beq.n	8003112 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d021      	beq.n	8003112 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030dc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2208      	movs	r2, #8
 80030e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ea:	f043 0204 	orr.w	r2, r3, #4
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2204      	movs	r2, #4
 80030f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d013      	beq.n	8003144 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00e      	beq.n	8003144 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003134:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2204      	movs	r2, #4
 800313c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f853 	bl	80031ea <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d024      	beq.n	8003198 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003154:	2b00      	cmp	r3, #0
 8003156:	d01f      	beq.n	8003198 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003166:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2202      	movs	r2, #2
 800316e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f003 0310 	and.w	r3, r3, #16
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d01f      	beq.n	80031e2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d01a      	beq.n	80031e2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031ba:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2210      	movs	r2, #16
 80031c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f80e 	bl	80031fe <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80031e2:	bf00      	nop
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
	...

08003214 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_DMA2D_ConfigLayer+0x20>
 8003230:	2302      	movs	r3, #2
 8003232:	e079      	b.n	8003328 <HAL_DMA2D_ConfigLayer+0x114>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	3318      	adds	r3, #24
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	4413      	add	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	041b      	lsls	r3, r3, #16
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800325e:	4b35      	ldr	r3, [pc, #212]	; (8003334 <HAL_DMA2D_ConfigLayer+0x120>)
 8003260:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b0a      	cmp	r3, #10
 8003268:	d003      	beq.n	8003272 <HAL_DMA2D_ConfigLayer+0x5e>
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b09      	cmp	r3, #9
 8003270:	d107      	bne.n	8003282 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	4313      	orrs	r3, r2
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	e005      	b.n	800328e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	061b      	lsls	r3, r3, #24
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d120      	bne.n	80032d6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	43db      	mvns	r3, r3
 800329e:	ea02 0103 	and.w	r1, r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b0a      	cmp	r3, #10
 80032bc:	d003      	beq.n	80032c6 <HAL_DMA2D_ConfigLayer+0xb2>
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b09      	cmp	r3, #9
 80032c4:	d127      	bne.n	8003316 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80032d2:	629a      	str	r2, [r3, #40]	; 0x28
 80032d4:	e01f      	b.n	8003316 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69da      	ldr	r2, [r3, #28]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	43db      	mvns	r3, r3
 80032e0:	ea02 0103 	and.w	r1, r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b0a      	cmp	r3, #10
 80032fe:	d003      	beq.n	8003308 <HAL_DMA2D_ConfigLayer+0xf4>
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2b09      	cmp	r3, #9
 8003306:	d106      	bne.n	8003316 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003314:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	371c      	adds	r7, #28
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	ff03000f 	.word	0xff03000f

08003338 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003338:	b480      	push	{r7}
 800333a:	b08b      	sub	sp, #44	; 0x2c
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	041a      	lsls	r2, r3, #16
 8003354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003356:	431a      	orrs	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003370:	d174      	bne.n	800345c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003378:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003380:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003388:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d108      	bne.n	80033aa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	431a      	orrs	r2, r3
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
 80033a8:	e053      	b.n	8003452 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d106      	bne.n	80033c0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
 80033be:	e048      	b.n	8003452 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d111      	bne.n	80033ec <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	0cdb      	lsrs	r3, r3, #19
 80033cc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	0a9b      	lsrs	r3, r3, #10
 80033d2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	08db      	lsrs	r3, r3, #3
 80033d8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	02db      	lsls	r3, r3, #11
 80033e2:	4313      	orrs	r3, r2
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ea:	e032      	b.n	8003452 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d117      	bne.n	8003424 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	0fdb      	lsrs	r3, r3, #31
 80033f8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	0cdb      	lsrs	r3, r3, #19
 80033fe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	0adb      	lsrs	r3, r3, #11
 8003404:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	08db      	lsrs	r3, r3, #3
 800340a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	029b      	lsls	r3, r3, #10
 8003414:	431a      	orrs	r2, r3
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	03db      	lsls	r3, r3, #15
 800341a:	4313      	orrs	r3, r2
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	4313      	orrs	r3, r2
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
 8003422:	e016      	b.n	8003452 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	0f1b      	lsrs	r3, r3, #28
 8003428:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	0d1b      	lsrs	r3, r3, #20
 800342e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	0b1b      	lsrs	r3, r3, #12
 8003434:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	091b      	lsrs	r3, r3, #4
 800343a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	011a      	lsls	r2, r3, #4
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	431a      	orrs	r2, r3
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	031b      	lsls	r3, r3, #12
 800344a:	4313      	orrs	r3, r2
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003458:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800345a:	e003      	b.n	8003464 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	60da      	str	r2, [r3, #12]
}
 8003464:	bf00      	nop
 8003466:	372c      	adds	r7, #44	; 0x2c
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003470:	b480      	push	{r7}
 8003472:	b089      	sub	sp, #36	; 0x24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003486:	2300      	movs	r3, #0
 8003488:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
 800348e:	e175      	b.n	800377c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003490:	2201      	movs	r2, #1
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	4013      	ands	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	f040 8164 	bne.w	8003776 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d003      	beq.n	80034be <HAL_GPIO_Init+0x4e>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b12      	cmp	r3, #18
 80034bc:	d123      	bne.n	8003506 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	08da      	lsrs	r2, r3, #3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3208      	adds	r2, #8
 80034c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	220f      	movs	r2, #15
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4013      	ands	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	691a      	ldr	r2, [r3, #16]
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	08da      	lsrs	r2, r3, #3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3208      	adds	r2, #8
 8003500:	69b9      	ldr	r1, [r7, #24]
 8003502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	2203      	movs	r2, #3
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43db      	mvns	r3, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4013      	ands	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 0203 	and.w	r2, r3, #3
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4313      	orrs	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d00b      	beq.n	800355a <HAL_GPIO_Init+0xea>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d007      	beq.n	800355a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800354e:	2b11      	cmp	r3, #17
 8003550:	d003      	beq.n	800355a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b12      	cmp	r3, #18
 8003558:	d130      	bne.n	80035bc <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	2203      	movs	r2, #3
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43db      	mvns	r3, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4013      	ands	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4313      	orrs	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003590:	2201      	movs	r2, #1
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f003 0201 	and.w	r2, r3, #1
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	2203      	movs	r2, #3
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	43db      	mvns	r3, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4013      	ands	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 80be 	beq.w	8003776 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035fa:	4b65      	ldr	r3, [pc, #404]	; (8003790 <HAL_GPIO_Init+0x320>)
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	4a64      	ldr	r2, [pc, #400]	; (8003790 <HAL_GPIO_Init+0x320>)
 8003600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003604:	6453      	str	r3, [r2, #68]	; 0x44
 8003606:	4b62      	ldr	r3, [pc, #392]	; (8003790 <HAL_GPIO_Init+0x320>)
 8003608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003612:	4a60      	ldr	r2, [pc, #384]	; (8003794 <HAL_GPIO_Init+0x324>)
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	089b      	lsrs	r3, r3, #2
 8003618:	3302      	adds	r3, #2
 800361a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800361e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	220f      	movs	r2, #15
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4013      	ands	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a57      	ldr	r2, [pc, #348]	; (8003798 <HAL_GPIO_Init+0x328>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d037      	beq.n	80036ae <HAL_GPIO_Init+0x23e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a56      	ldr	r2, [pc, #344]	; (800379c <HAL_GPIO_Init+0x32c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d031      	beq.n	80036aa <HAL_GPIO_Init+0x23a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a55      	ldr	r2, [pc, #340]	; (80037a0 <HAL_GPIO_Init+0x330>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d02b      	beq.n	80036a6 <HAL_GPIO_Init+0x236>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a54      	ldr	r2, [pc, #336]	; (80037a4 <HAL_GPIO_Init+0x334>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d025      	beq.n	80036a2 <HAL_GPIO_Init+0x232>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a53      	ldr	r2, [pc, #332]	; (80037a8 <HAL_GPIO_Init+0x338>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01f      	beq.n	800369e <HAL_GPIO_Init+0x22e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a52      	ldr	r2, [pc, #328]	; (80037ac <HAL_GPIO_Init+0x33c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d019      	beq.n	800369a <HAL_GPIO_Init+0x22a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a51      	ldr	r2, [pc, #324]	; (80037b0 <HAL_GPIO_Init+0x340>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d013      	beq.n	8003696 <HAL_GPIO_Init+0x226>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a50      	ldr	r2, [pc, #320]	; (80037b4 <HAL_GPIO_Init+0x344>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00d      	beq.n	8003692 <HAL_GPIO_Init+0x222>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a4f      	ldr	r2, [pc, #316]	; (80037b8 <HAL_GPIO_Init+0x348>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d007      	beq.n	800368e <HAL_GPIO_Init+0x21e>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a4e      	ldr	r2, [pc, #312]	; (80037bc <HAL_GPIO_Init+0x34c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d101      	bne.n	800368a <HAL_GPIO_Init+0x21a>
 8003686:	2309      	movs	r3, #9
 8003688:	e012      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 800368a:	230a      	movs	r3, #10
 800368c:	e010      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 800368e:	2308      	movs	r3, #8
 8003690:	e00e      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 8003692:	2307      	movs	r3, #7
 8003694:	e00c      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 8003696:	2306      	movs	r3, #6
 8003698:	e00a      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 800369a:	2305      	movs	r3, #5
 800369c:	e008      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 800369e:	2304      	movs	r3, #4
 80036a0:	e006      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 80036a2:	2303      	movs	r3, #3
 80036a4:	e004      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e002      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 80036ae:	2300      	movs	r3, #0
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	f002 0203 	and.w	r2, r2, #3
 80036b6:	0092      	lsls	r2, r2, #2
 80036b8:	4093      	lsls	r3, r2
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80036c0:	4934      	ldr	r1, [pc, #208]	; (8003794 <HAL_GPIO_Init+0x324>)
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	089b      	lsrs	r3, r3, #2
 80036c6:	3302      	adds	r3, #2
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036ce:	4b3c      	ldr	r3, [pc, #240]	; (80037c0 <HAL_GPIO_Init+0x350>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	43db      	mvns	r3, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4013      	ands	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036f2:	4a33      	ldr	r2, [pc, #204]	; (80037c0 <HAL_GPIO_Init+0x350>)
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80036f8:	4b31      	ldr	r3, [pc, #196]	; (80037c0 <HAL_GPIO_Init+0x350>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	43db      	mvns	r3, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800371c:	4a28      	ldr	r2, [pc, #160]	; (80037c0 <HAL_GPIO_Init+0x350>)
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003722:	4b27      	ldr	r3, [pc, #156]	; (80037c0 <HAL_GPIO_Init+0x350>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	43db      	mvns	r3, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4013      	ands	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003746:	4a1e      	ldr	r2, [pc, #120]	; (80037c0 <HAL_GPIO_Init+0x350>)
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800374c:	4b1c      	ldr	r3, [pc, #112]	; (80037c0 <HAL_GPIO_Init+0x350>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003770:	4a13      	ldr	r2, [pc, #76]	; (80037c0 <HAL_GPIO_Init+0x350>)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	3301      	adds	r3, #1
 800377a:	61fb      	str	r3, [r7, #28]
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	2b0f      	cmp	r3, #15
 8003780:	f67f ae86 	bls.w	8003490 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003784:	bf00      	nop
 8003786:	3724      	adds	r7, #36	; 0x24
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	40023800 	.word	0x40023800
 8003794:	40013800 	.word	0x40013800
 8003798:	40020000 	.word	0x40020000
 800379c:	40020400 	.word	0x40020400
 80037a0:	40020800 	.word	0x40020800
 80037a4:	40020c00 	.word	0x40020c00
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40021400 	.word	0x40021400
 80037b0:	40021800 	.word	0x40021800
 80037b4:	40021c00 	.word	0x40021c00
 80037b8:	40022000 	.word	0x40022000
 80037bc:	40022400 	.word	0x40022400
 80037c0:	40013c00 	.word	0x40013c00

080037c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	e0d9      	b.n	8003994 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80037e0:	2201      	movs	r2, #1
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4013      	ands	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	f040 80c9 	bne.w	800398e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80037fc:	4a6a      	ldr	r2, [pc, #424]	; (80039a8 <HAL_GPIO_DeInit+0x1e4>)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	089b      	lsrs	r3, r3, #2
 8003802:	3302      	adds	r3, #2
 8003804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003808:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	220f      	movs	r2, #15
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	4013      	ands	r3, r2
 800381c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a62      	ldr	r2, [pc, #392]	; (80039ac <HAL_GPIO_DeInit+0x1e8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d037      	beq.n	8003896 <HAL_GPIO_DeInit+0xd2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a61      	ldr	r2, [pc, #388]	; (80039b0 <HAL_GPIO_DeInit+0x1ec>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d031      	beq.n	8003892 <HAL_GPIO_DeInit+0xce>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a60      	ldr	r2, [pc, #384]	; (80039b4 <HAL_GPIO_DeInit+0x1f0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d02b      	beq.n	800388e <HAL_GPIO_DeInit+0xca>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a5f      	ldr	r2, [pc, #380]	; (80039b8 <HAL_GPIO_DeInit+0x1f4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d025      	beq.n	800388a <HAL_GPIO_DeInit+0xc6>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a5e      	ldr	r2, [pc, #376]	; (80039bc <HAL_GPIO_DeInit+0x1f8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d01f      	beq.n	8003886 <HAL_GPIO_DeInit+0xc2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a5d      	ldr	r2, [pc, #372]	; (80039c0 <HAL_GPIO_DeInit+0x1fc>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d019      	beq.n	8003882 <HAL_GPIO_DeInit+0xbe>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a5c      	ldr	r2, [pc, #368]	; (80039c4 <HAL_GPIO_DeInit+0x200>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d013      	beq.n	800387e <HAL_GPIO_DeInit+0xba>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a5b      	ldr	r2, [pc, #364]	; (80039c8 <HAL_GPIO_DeInit+0x204>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00d      	beq.n	800387a <HAL_GPIO_DeInit+0xb6>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a5a      	ldr	r2, [pc, #360]	; (80039cc <HAL_GPIO_DeInit+0x208>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d007      	beq.n	8003876 <HAL_GPIO_DeInit+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a59      	ldr	r2, [pc, #356]	; (80039d0 <HAL_GPIO_DeInit+0x20c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d101      	bne.n	8003872 <HAL_GPIO_DeInit+0xae>
 800386e:	2309      	movs	r3, #9
 8003870:	e012      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 8003872:	230a      	movs	r3, #10
 8003874:	e010      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 8003876:	2308      	movs	r3, #8
 8003878:	e00e      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 800387a:	2307      	movs	r3, #7
 800387c:	e00c      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 800387e:	2306      	movs	r3, #6
 8003880:	e00a      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 8003882:	2305      	movs	r3, #5
 8003884:	e008      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 8003886:	2304      	movs	r3, #4
 8003888:	e006      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 800388a:	2303      	movs	r3, #3
 800388c:	e004      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 800388e:	2302      	movs	r3, #2
 8003890:	e002      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 8003896:	2300      	movs	r3, #0
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	f002 0203 	and.w	r2, r2, #3
 800389e:	0092      	lsls	r2, r2, #2
 80038a0:	4093      	lsls	r3, r2
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d132      	bne.n	800390e <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	220f      	movs	r2, #15
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80038b8:	4a3b      	ldr	r2, [pc, #236]	; (80039a8 <HAL_GPIO_DeInit+0x1e4>)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	089b      	lsrs	r3, r3, #2
 80038be:	3302      	adds	r3, #2
 80038c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	43da      	mvns	r2, r3
 80038c8:	4837      	ldr	r0, [pc, #220]	; (80039a8 <HAL_GPIO_DeInit+0x1e4>)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	089b      	lsrs	r3, r3, #2
 80038ce:	400a      	ands	r2, r1
 80038d0:	3302      	adds	r3, #2
 80038d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80038d6:	4b3f      	ldr	r3, [pc, #252]	; (80039d4 <HAL_GPIO_DeInit+0x210>)
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	43db      	mvns	r3, r3
 80038de:	493d      	ldr	r1, [pc, #244]	; (80039d4 <HAL_GPIO_DeInit+0x210>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80038e4:	4b3b      	ldr	r3, [pc, #236]	; (80039d4 <HAL_GPIO_DeInit+0x210>)
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	43db      	mvns	r3, r3
 80038ec:	4939      	ldr	r1, [pc, #228]	; (80039d4 <HAL_GPIO_DeInit+0x210>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80038f2:	4b38      	ldr	r3, [pc, #224]	; (80039d4 <HAL_GPIO_DeInit+0x210>)
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	43db      	mvns	r3, r3
 80038fa:	4936      	ldr	r1, [pc, #216]	; (80039d4 <HAL_GPIO_DeInit+0x210>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003900:	4b34      	ldr	r3, [pc, #208]	; (80039d4 <HAL_GPIO_DeInit+0x210>)
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	43db      	mvns	r3, r3
 8003908:	4932      	ldr	r1, [pc, #200]	; (80039d4 <HAL_GPIO_DeInit+0x210>)
 800390a:	4013      	ands	r3, r2
 800390c:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	2103      	movs	r1, #3
 8003918:	fa01 f303 	lsl.w	r3, r1, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	401a      	ands	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	08da      	lsrs	r2, r3, #3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3208      	adds	r2, #8
 800392c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	220f      	movs	r2, #15
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43db      	mvns	r3, r3
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	08d2      	lsrs	r2, r2, #3
 8003944:	4019      	ands	r1, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3208      	adds	r2, #8
 800394a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	2103      	movs	r1, #3
 8003958:	fa01 f303 	lsl.w	r3, r1, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	401a      	ands	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	2101      	movs	r1, #1
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	fa01 f303 	lsl.w	r3, r1, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	401a      	ands	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	2103      	movs	r1, #3
 8003982:	fa01 f303 	lsl.w	r3, r1, r3
 8003986:	43db      	mvns	r3, r3
 8003988:	401a      	ands	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	3301      	adds	r3, #1
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	2b0f      	cmp	r3, #15
 8003998:	f67f af22 	bls.w	80037e0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800399c:	bf00      	nop
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	40013800 	.word	0x40013800
 80039ac:	40020000 	.word	0x40020000
 80039b0:	40020400 	.word	0x40020400
 80039b4:	40020800 	.word	0x40020800
 80039b8:	40020c00 	.word	0x40020c00
 80039bc:	40021000 	.word	0x40021000
 80039c0:	40021400 	.word	0x40021400
 80039c4:	40021800 	.word	0x40021800
 80039c8:	40021c00 	.word	0x40021c00
 80039cc:	40022000 	.word	0x40022000
 80039d0:	40022400 	.word	0x40022400
 80039d4:	40013c00 	.word	0x40013c00

080039d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	807b      	strh	r3, [r7, #2]
 80039e4:	4613      	mov	r3, r2
 80039e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039e8:	787b      	ldrb	r3, [r7, #1]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039ee:	887a      	ldrh	r2, [r7, #2]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80039f4:	e003      	b.n	80039fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80039f6:	887b      	ldrh	r3, [r7, #2]
 80039f8:	041a      	lsls	r2, r3, #16
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	619a      	str	r2, [r3, #24]
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
	...

08003a0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e07f      	b.n	8003b1e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fd fd80 	bl	8001538 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2224      	movs	r2, #36	; 0x24
 8003a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0201 	bic.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d107      	bne.n	8003a86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a82:	609a      	str	r2, [r3, #8]
 8003a84:	e006      	b.n	8003a94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d104      	bne.n	8003aa6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003aa4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6859      	ldr	r1, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <HAL_I2C_Init+0x11c>)
 8003ab2:	430b      	orrs	r3, r1
 8003ab4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ac4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691a      	ldr	r2, [r3, #16]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	ea42 0103 	orr.w	r1, r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	021a      	lsls	r2, r3, #8
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69d9      	ldr	r1, [r3, #28]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1a      	ldr	r2, [r3, #32]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	02008000 	.word	0x02008000

08003b2c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e021      	b.n	8003b82 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2224      	movs	r2, #36	; 0x24
 8003b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0201 	bic.w	r2, r2, #1
 8003b54:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7fd fd32 	bl	80015c0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	4608      	mov	r0, r1
 8003b96:	4611      	mov	r1, r2
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	817b      	strh	r3, [r7, #10]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	813b      	strh	r3, [r7, #8]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	f040 80f9 	bne.w	8003da6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <HAL_I2C_Mem_Write+0x34>
 8003bba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d105      	bne.n	8003bcc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bc6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0ed      	b.n	8003da8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <HAL_I2C_Mem_Write+0x4e>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e0e6      	b.n	8003da8 <HAL_I2C_Mem_Write+0x21c>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003be2:	f7fe fd3b 	bl	800265c <HAL_GetTick>
 8003be6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	2319      	movs	r3, #25
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 fac3 	bl	8004180 <I2C_WaitOnFlagUntilTimeout>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e0d1      	b.n	8003da8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2221      	movs	r2, #33	; 0x21
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2240      	movs	r2, #64	; 0x40
 8003c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a3a      	ldr	r2, [r7, #32]
 8003c1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c2c:	88f8      	ldrh	r0, [r7, #6]
 8003c2e:	893a      	ldrh	r2, [r7, #8]
 8003c30:	8979      	ldrh	r1, [r7, #10]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	9301      	str	r3, [sp, #4]
 8003c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f9d3 	bl	8003fe8 <I2C_RequestMemoryWrite>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e0a9      	b.n	8003da8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	2bff      	cmp	r3, #255	; 0xff
 8003c5c:	d90e      	bls.n	8003c7c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	22ff      	movs	r2, #255	; 0xff
 8003c62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	8979      	ldrh	r1, [r7, #10]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 fba5 	bl	80043c4 <I2C_TransferConfig>
 8003c7a:	e00f      	b.n	8003c9c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	8979      	ldrh	r1, [r7, #10]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fb94 	bl	80043c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 faad 	bl	8004200 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e07b      	b.n	8003da8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	781a      	ldrb	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d034      	beq.n	8003d54 <HAL_I2C_Mem_Write+0x1c8>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d130      	bne.n	8003d54 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2180      	movs	r1, #128	; 0x80
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 fa3f 	bl	8004180 <I2C_WaitOnFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e04d      	b.n	8003da8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	2bff      	cmp	r3, #255	; 0xff
 8003d14:	d90e      	bls.n	8003d34 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	22ff      	movs	r2, #255	; 0xff
 8003d1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	8979      	ldrh	r1, [r7, #10]
 8003d24:	2300      	movs	r3, #0
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 fb49 	bl	80043c4 <I2C_TransferConfig>
 8003d32:	e00f      	b.n	8003d54 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	8979      	ldrh	r1, [r7, #10]
 8003d46:	2300      	movs	r3, #0
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 fb38 	bl	80043c4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d19e      	bne.n	8003c9c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 fa8c 	bl	8004280 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e01a      	b.n	8003da8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2220      	movs	r2, #32
 8003d78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6859      	ldr	r1, [r3, #4]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <HAL_I2C_Mem_Write+0x224>)
 8003d86:	400b      	ands	r3, r1
 8003d88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	e000      	b.n	8003da8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003da6:	2302      	movs	r3, #2
  }
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	fe00e800 	.word	0xfe00e800

08003db4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	4608      	mov	r0, r1
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	817b      	strh	r3, [r7, #10]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	813b      	strh	r3, [r7, #8]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	f040 80fd 	bne.w	8003fd6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <HAL_I2C_Mem_Read+0x34>
 8003de2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d105      	bne.n	8003df4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0f1      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_I2C_Mem_Read+0x4e>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e0ea      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x224>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e0a:	f7fe fc27 	bl	800265c <HAL_GetTick>
 8003e0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	2319      	movs	r3, #25
 8003e16:	2201      	movs	r2, #1
 8003e18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 f9af 	bl	8004180 <I2C_WaitOnFlagUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0d5      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2222      	movs	r2, #34	; 0x22
 8003e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2240      	movs	r2, #64	; 0x40
 8003e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a3a      	ldr	r2, [r7, #32]
 8003e46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e54:	88f8      	ldrh	r0, [r7, #6]
 8003e56:	893a      	ldrh	r2, [r7, #8]
 8003e58:	8979      	ldrh	r1, [r7, #10]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	9301      	str	r3, [sp, #4]
 8003e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	4603      	mov	r3, r0
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f913 	bl	8004090 <I2C_RequestMemoryRead>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0ad      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2bff      	cmp	r3, #255	; 0xff
 8003e84:	d90e      	bls.n	8003ea4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	22ff      	movs	r2, #255	; 0xff
 8003e8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	8979      	ldrh	r1, [r7, #10]
 8003e94:	4b52      	ldr	r3, [pc, #328]	; (8003fe0 <HAL_I2C_Mem_Read+0x22c>)
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 fa91 	bl	80043c4 <I2C_TransferConfig>
 8003ea2:	e00f      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	8979      	ldrh	r1, [r7, #10]
 8003eb6:	4b4a      	ldr	r3, [pc, #296]	; (8003fe0 <HAL_I2C_Mem_Read+0x22c>)
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 fa80 	bl	80043c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2104      	movs	r1, #4
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f956 	bl	8004180 <I2C_WaitOnFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e07c      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d034      	beq.n	8003f84 <HAL_I2C_Mem_Read+0x1d0>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d130      	bne.n	8003f84 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f28:	2200      	movs	r2, #0
 8003f2a:	2180      	movs	r1, #128	; 0x80
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 f927 	bl	8004180 <I2C_WaitOnFlagUntilTimeout>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e04d      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2bff      	cmp	r3, #255	; 0xff
 8003f44:	d90e      	bls.n	8003f64 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	22ff      	movs	r2, #255	; 0xff
 8003f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	8979      	ldrh	r1, [r7, #10]
 8003f54:	2300      	movs	r3, #0
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 fa31 	bl	80043c4 <I2C_TransferConfig>
 8003f62:	e00f      	b.n	8003f84 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	8979      	ldrh	r1, [r7, #10]
 8003f76:	2300      	movs	r3, #0
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 fa20 	bl	80043c4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d19a      	bne.n	8003ec4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f974 	bl	8004280 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e01a      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6859      	ldr	r1, [r3, #4]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <HAL_I2C_Mem_Read+0x230>)
 8003fb6:	400b      	ands	r3, r1
 8003fb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e000      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003fd6:	2302      	movs	r3, #2
  }
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	80002400 	.word	0x80002400
 8003fe4:	fe00e800 	.word	0xfe00e800

08003fe8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	817b      	strh	r3, [r7, #10]
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	813b      	strh	r3, [r7, #8]
 8003ffe:	4613      	mov	r3, r2
 8004000:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	b2da      	uxtb	r2, r3
 8004006:	8979      	ldrh	r1, [r7, #10]
 8004008:	4b20      	ldr	r3, [pc, #128]	; (800408c <I2C_RequestMemoryWrite+0xa4>)
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f9d7 	bl	80043c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004016:	69fa      	ldr	r2, [r7, #28]
 8004018:	69b9      	ldr	r1, [r7, #24]
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f8f0 	bl	8004200 <I2C_WaitOnTXISFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e02c      	b.n	8004084 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800402a:	88fb      	ldrh	r3, [r7, #6]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d105      	bne.n	800403c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004030:	893b      	ldrh	r3, [r7, #8]
 8004032:	b2da      	uxtb	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	629a      	str	r2, [r3, #40]	; 0x28
 800403a:	e015      	b.n	8004068 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800403c:	893b      	ldrh	r3, [r7, #8]
 800403e:	0a1b      	lsrs	r3, r3, #8
 8004040:	b29b      	uxth	r3, r3
 8004042:	b2da      	uxtb	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800404a:	69fa      	ldr	r2, [r7, #28]
 800404c:	69b9      	ldr	r1, [r7, #24]
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 f8d6 	bl	8004200 <I2C_WaitOnTXISFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e012      	b.n	8004084 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800405e:	893b      	ldrh	r3, [r7, #8]
 8004060:	b2da      	uxtb	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	2200      	movs	r2, #0
 8004070:	2180      	movs	r1, #128	; 0x80
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 f884 	bl	8004180 <I2C_WaitOnFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	80002000 	.word	0x80002000

08004090 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af02      	add	r7, sp, #8
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	4608      	mov	r0, r1
 800409a:	4611      	mov	r1, r2
 800409c:	461a      	mov	r2, r3
 800409e:	4603      	mov	r3, r0
 80040a0:	817b      	strh	r3, [r7, #10]
 80040a2:	460b      	mov	r3, r1
 80040a4:	813b      	strh	r3, [r7, #8]
 80040a6:	4613      	mov	r3, r2
 80040a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	8979      	ldrh	r1, [r7, #10]
 80040b0:	4b20      	ldr	r3, [pc, #128]	; (8004134 <I2C_RequestMemoryRead+0xa4>)
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	2300      	movs	r3, #0
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f984 	bl	80043c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	69b9      	ldr	r1, [r7, #24]
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f89d 	bl	8004200 <I2C_WaitOnTXISFlagUntilTimeout>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e02c      	b.n	800412a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040d0:	88fb      	ldrh	r3, [r7, #6]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d105      	bne.n	80040e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040d6:	893b      	ldrh	r3, [r7, #8]
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	629a      	str	r2, [r3, #40]	; 0x28
 80040e0:	e015      	b.n	800410e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040e2:	893b      	ldrh	r3, [r7, #8]
 80040e4:	0a1b      	lsrs	r3, r3, #8
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040f0:	69fa      	ldr	r2, [r7, #28]
 80040f2:	69b9      	ldr	r1, [r7, #24]
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f883 	bl	8004200 <I2C_WaitOnTXISFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e012      	b.n	800412a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004104:	893b      	ldrh	r3, [r7, #8]
 8004106:	b2da      	uxtb	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	2200      	movs	r2, #0
 8004116:	2140      	movs	r1, #64	; 0x40
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 f831 	bl	8004180 <I2C_WaitOnFlagUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	80002000 	.word	0x80002000

08004138 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b02      	cmp	r3, #2
 800414c:	d103      	bne.n	8004156 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2200      	movs	r2, #0
 8004154:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b01      	cmp	r3, #1
 8004162:	d007      	beq.n	8004174 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	619a      	str	r2, [r3, #24]
  }
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	603b      	str	r3, [r7, #0]
 800418c:	4613      	mov	r3, r2
 800418e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004190:	e022      	b.n	80041d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d01e      	beq.n	80041d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419a:	f7fe fa5f 	bl	800265c <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d302      	bcc.n	80041b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d113      	bne.n	80041d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b4:	f043 0220 	orr.w	r2, r3, #32
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e00f      	b.n	80041f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699a      	ldr	r2, [r3, #24]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	4013      	ands	r3, r2
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	bf0c      	ite	eq
 80041e8:	2301      	moveq	r3, #1
 80041ea:	2300      	movne	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	461a      	mov	r2, r3
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d0cd      	beq.n	8004192 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800420c:	e02c      	b.n	8004268 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	68b9      	ldr	r1, [r7, #8]
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 f870 	bl	80042f8 <I2C_IsAcknowledgeFailed>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e02a      	b.n	8004278 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d01e      	beq.n	8004268 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422a:	f7fe fa17 	bl	800265c <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	429a      	cmp	r2, r3
 8004238:	d302      	bcc.n	8004240 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d113      	bne.n	8004268 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004244:	f043 0220 	orr.w	r2, r3, #32
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e007      	b.n	8004278 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b02      	cmp	r3, #2
 8004274:	d1cb      	bne.n	800420e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800428c:	e028      	b.n	80042e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	68b9      	ldr	r1, [r7, #8]
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f830 	bl	80042f8 <I2C_IsAcknowledgeFailed>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e026      	b.n	80042f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a2:	f7fe f9db 	bl	800265c <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d302      	bcc.n	80042b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d113      	bne.n	80042e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042bc:	f043 0220 	orr.w	r2, r3, #32
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e007      	b.n	80042f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	d1cf      	bne.n	800428e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	f003 0310 	and.w	r3, r3, #16
 800430e:	2b10      	cmp	r3, #16
 8004310:	d151      	bne.n	80043b6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004312:	e022      	b.n	800435a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431a:	d01e      	beq.n	800435a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431c:	f7fe f99e 	bl	800265c <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	429a      	cmp	r2, r3
 800432a:	d302      	bcc.n	8004332 <I2C_IsAcknowledgeFailed+0x3a>
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d113      	bne.n	800435a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004336:	f043 0220 	orr.w	r2, r3, #32
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e02e      	b.n	80043b8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	f003 0320 	and.w	r3, r3, #32
 8004364:	2b20      	cmp	r3, #32
 8004366:	d1d5      	bne.n	8004314 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2210      	movs	r2, #16
 800436e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2220      	movs	r2, #32
 8004376:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f7ff fedd 	bl	8004138 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6859      	ldr	r1, [r3, #4]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	4b0d      	ldr	r3, [pc, #52]	; (80043c0 <I2C_IsAcknowledgeFailed+0xc8>)
 800438a:	400b      	ands	r3, r1
 800438c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004392:	f043 0204 	orr.w	r2, r3, #4
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	fe00e800 	.word	0xfe00e800

080043c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	607b      	str	r3, [r7, #4]
 80043ce:	460b      	mov	r3, r1
 80043d0:	817b      	strh	r3, [r7, #10]
 80043d2:	4613      	mov	r3, r2
 80043d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	0d5b      	lsrs	r3, r3, #21
 80043e0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80043e4:	4b0d      	ldr	r3, [pc, #52]	; (800441c <I2C_TransferConfig+0x58>)
 80043e6:	430b      	orrs	r3, r1
 80043e8:	43db      	mvns	r3, r3
 80043ea:	ea02 0103 	and.w	r1, r2, r3
 80043ee:	897b      	ldrh	r3, [r7, #10]
 80043f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80043f4:	7a7b      	ldrb	r3, [r7, #9]
 80043f6:	041b      	lsls	r3, r3, #16
 80043f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	431a      	orrs	r2, r3
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	431a      	orrs	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800440e:	bf00      	nop
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	03ff63ff 	.word	0x03ff63ff

08004420 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b20      	cmp	r3, #32
 8004434:	d138      	bne.n	80044a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004440:	2302      	movs	r3, #2
 8004442:	e032      	b.n	80044aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2224      	movs	r2, #36	; 0x24
 8004450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 0201 	bic.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004472:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6819      	ldr	r1, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044a4:	2300      	movs	r3, #0
 80044a6:	e000      	b.n	80044aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044a8:	2302      	movs	r3, #2
  }
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b085      	sub	sp, #20
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	d139      	bne.n	8004540 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e033      	b.n	8004542 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2224      	movs	r2, #36	; 0x24
 80044e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0201 	bic.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004508:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	021b      	lsls	r3, r3, #8
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	e000      	b.n	8004542 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004540:	2302      	movs	r3, #2
  }
}
 8004542:	4618      	mov	r0, r3
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
	...

08004550 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e0bf      	b.n	80046e2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d106      	bne.n	800457c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7fd f840 	bl	80015fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004592:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6999      	ldr	r1, [r3, #24]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80045a8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6899      	ldr	r1, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	4b4a      	ldr	r3, [pc, #296]	; (80046ec <HAL_LTDC_Init+0x19c>)
 80045c4:	400b      	ands	r3, r1
 80045c6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	041b      	lsls	r3, r3, #16
 80045ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6899      	ldr	r1, [r3, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68d9      	ldr	r1, [r3, #12]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	4b3e      	ldr	r3, [pc, #248]	; (80046ec <HAL_LTDC_Init+0x19c>)
 80045f2:	400b      	ands	r3, r1
 80045f4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	041b      	lsls	r3, r3, #16
 80045fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68d9      	ldr	r1, [r3, #12]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a1a      	ldr	r2, [r3, #32]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6919      	ldr	r1, [r3, #16]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	4b33      	ldr	r3, [pc, #204]	; (80046ec <HAL_LTDC_Init+0x19c>)
 8004620:	400b      	ands	r3, r1
 8004622:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	041b      	lsls	r3, r3, #16
 800462a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6919      	ldr	r1, [r3, #16]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	431a      	orrs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6959      	ldr	r1, [r3, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	4b27      	ldr	r3, [pc, #156]	; (80046ec <HAL_LTDC_Init+0x19c>)
 800464e:	400b      	ands	r3, r1
 8004650:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004656:	041b      	lsls	r3, r3, #16
 8004658:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6959      	ldr	r1, [r3, #20]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004676:	021b      	lsls	r3, r3, #8
 8004678:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004680:	041b      	lsls	r3, r3, #16
 8004682:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004692:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0206 	orr.w	r2, r2, #6
 80046be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	f000f800 	.word	0xf000f800

080046f0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004706:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d023      	beq.n	800475a <HAL_LTDC_IRQHandler+0x6a>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d01e      	beq.n	800475a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0204 	bic.w	r2, r2, #4
 800472a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2204      	movs	r2, #4
 8004732:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800473a:	f043 0201 	orr.w	r2, r3, #1
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2204      	movs	r2, #4
 8004748:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f86f 	bl	8004838 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d023      	beq.n	80047ac <HAL_LTDC_IRQHandler+0xbc>
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d01e      	beq.n	80047ac <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0202 	bic.w	r2, r2, #2
 800477c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2202      	movs	r2, #2
 8004784:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800478c:	f043 0202 	orr.w	r2, r3, #2
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2204      	movs	r2, #4
 800479a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f846 	bl	8004838 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d01b      	beq.n	80047ee <HAL_LTDC_IRQHandler+0xfe>
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d016      	beq.n	80047ee <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0201 	bic.w	r2, r2, #1
 80047ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2201      	movs	r2, #1
 80047d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f00d ff7b 	bl	80126e4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01b      	beq.n	8004830 <HAL_LTDC_IRQHandler+0x140>
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d016      	beq.n	8004830 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0208 	bic.w	r2, r2, #8
 8004810:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2208      	movs	r2, #8
 8004818:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f80e 	bl	800484c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004830:	bf00      	nop
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004860:	b5b0      	push	{r4, r5, r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_LTDC_ConfigLayer+0x1a>
 8004876:	2302      	movs	r3, #2
 8004878:	e02c      	b.n	80048d4 <HAL_LTDC_ConfigLayer+0x74>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2202      	movs	r2, #2
 8004886:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2134      	movs	r1, #52	; 0x34
 8004890:	fb01 f303 	mul.w	r3, r1, r3
 8004894:	4413      	add	r3, r2
 8004896:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4614      	mov	r4, r2
 800489e:	461d      	mov	r5, r3
 80048a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048ac:	682b      	ldr	r3, [r5, #0]
 80048ae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	68b9      	ldr	r1, [r7, #8]
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 f849 	bl	800494c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2201      	movs	r2, #1
 80048c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bdb0      	pop	{r4, r5, r7, pc}

080048dc <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_LTDC_ProgramLineEvent+0x18>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e023      	b.n	800493c <HAL_LTDC_ProgramLineEvent+0x60>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0201 	bic.w	r2, r2, #1
 8004912:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8004914:	4a0c      	ldr	r2, [pc, #48]	; (8004948 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f042 0201 	orr.w	r2, r2, #1
 8004928:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	40016800 	.word	0x40016800

0800494c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800494c:	b480      	push	{r7}
 800494e:	b089      	sub	sp, #36	; 0x24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	0c1b      	lsrs	r3, r3, #16
 8004964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004968:	4413      	add	r3, r2
 800496a:	041b      	lsls	r3, r3, #16
 800496c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	01db      	lsls	r3, r3, #7
 8004978:	4413      	add	r3, r2
 800497a:	3384      	adds	r3, #132	; 0x84
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	6812      	ldr	r2, [r2, #0]
 8004982:	4611      	mov	r1, r2
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	01d2      	lsls	r2, r2, #7
 8004988:	440a      	add	r2, r1
 800498a:	3284      	adds	r2, #132	; 0x84
 800498c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004990:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	0c1b      	lsrs	r3, r3, #16
 800499e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a2:	4413      	add	r3, r2
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4619      	mov	r1, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	01db      	lsls	r3, r3, #7
 80049b0:	440b      	add	r3, r1
 80049b2:	3384      	adds	r3, #132	; 0x84
 80049b4:	4619      	mov	r1, r3
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049ca:	4413      	add	r3, r2
 80049cc:	041b      	lsls	r3, r3, #16
 80049ce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	461a      	mov	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	01db      	lsls	r3, r3, #7
 80049da:	4413      	add	r3, r2
 80049dc:	3384      	adds	r3, #132	; 0x84
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	6812      	ldr	r2, [r2, #0]
 80049e4:	4611      	mov	r1, r2
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	01d2      	lsls	r2, r2, #7
 80049ea:	440a      	add	r2, r1
 80049ec:	3284      	adds	r2, #132	; 0x84
 80049ee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80049f2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a02:	4413      	add	r3, r2
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	01db      	lsls	r3, r3, #7
 8004a10:	440b      	add	r3, r1
 8004a12:	3384      	adds	r3, #132	; 0x84
 8004a14:	4619      	mov	r1, r3
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	461a      	mov	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	01db      	lsls	r3, r3, #7
 8004a26:	4413      	add	r3, r2
 8004a28:	3384      	adds	r3, #132	; 0x84
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	6812      	ldr	r2, [r2, #0]
 8004a30:	4611      	mov	r1, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	01d2      	lsls	r2, r2, #7
 8004a36:	440a      	add	r2, r1
 8004a38:	3284      	adds	r2, #132	; 0x84
 8004a3a:	f023 0307 	bic.w	r3, r3, #7
 8004a3e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	01db      	lsls	r3, r3, #7
 8004a4a:	4413      	add	r3, r2
 8004a4c:	3384      	adds	r3, #132	; 0x84
 8004a4e:	461a      	mov	r2, r3
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004a5c:	021b      	lsls	r3, r3, #8
 8004a5e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004a66:	041b      	lsls	r3, r3, #16
 8004a68:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	061b      	lsls	r3, r3, #24
 8004a70:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	01db      	lsls	r3, r3, #7
 8004a7c:	4413      	add	r3, r2
 8004a7e:	3384      	adds	r3, #132	; 0x84
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	01db      	lsls	r3, r3, #7
 8004a8c:	4413      	add	r3, r2
 8004a8e:	3384      	adds	r3, #132	; 0x84
 8004a90:	461a      	mov	r2, r3
 8004a92:	2300      	movs	r3, #0
 8004a94:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4619      	mov	r1, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	01db      	lsls	r3, r3, #7
 8004ab0:	440b      	add	r3, r1
 8004ab2:	3384      	adds	r3, #132	; 0x84
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	01db      	lsls	r3, r3, #7
 8004ac6:	4413      	add	r3, r2
 8004ac8:	3384      	adds	r3, #132	; 0x84
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	6812      	ldr	r2, [r2, #0]
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	01d2      	lsls	r2, r2, #7
 8004ad6:	440a      	add	r2, r1
 8004ad8:	3284      	adds	r2, #132	; 0x84
 8004ada:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ade:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	01db      	lsls	r3, r3, #7
 8004aea:	4413      	add	r3, r2
 8004aec:	3384      	adds	r3, #132	; 0x84
 8004aee:	461a      	mov	r2, r3
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	01db      	lsls	r3, r3, #7
 8004b00:	4413      	add	r3, r2
 8004b02:	3384      	adds	r3, #132	; 0x84
 8004b04:	69da      	ldr	r2, [r3, #28]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	01db      	lsls	r3, r3, #7
 8004b10:	440b      	add	r3, r1
 8004b12:	3384      	adds	r3, #132	; 0x84
 8004b14:	4619      	mov	r1, r3
 8004b16:	4b58      	ldr	r3, [pc, #352]	; (8004c78 <LTDC_SetConfig+0x32c>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	68f9      	ldr	r1, [r7, #12]
 8004b26:	6809      	ldr	r1, [r1, #0]
 8004b28:	4608      	mov	r0, r1
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	01c9      	lsls	r1, r1, #7
 8004b2e:	4401      	add	r1, r0
 8004b30:	3184      	adds	r1, #132	; 0x84
 8004b32:	4313      	orrs	r3, r2
 8004b34:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	01db      	lsls	r3, r3, #7
 8004b40:	4413      	add	r3, r2
 8004b42:	3384      	adds	r3, #132	; 0x84
 8004b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	01db      	lsls	r3, r3, #7
 8004b50:	4413      	add	r3, r2
 8004b52:	3384      	adds	r3, #132	; 0x84
 8004b54:	461a      	mov	r2, r3
 8004b56:	2300      	movs	r3, #0
 8004b58:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	01db      	lsls	r3, r3, #7
 8004b64:	4413      	add	r3, r2
 8004b66:	3384      	adds	r3, #132	; 0x84
 8004b68:	461a      	mov	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d102      	bne.n	8004b7e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004b78:	2304      	movs	r3, #4
 8004b7a:	61fb      	str	r3, [r7, #28]
 8004b7c:	e01b      	b.n	8004bb6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d102      	bne.n	8004b8c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004b86:	2303      	movs	r3, #3
 8004b88:	61fb      	str	r3, [r7, #28]
 8004b8a:	e014      	b.n	8004bb6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d00b      	beq.n	8004bac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d007      	beq.n	8004bac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	d003      	beq.n	8004bac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004ba8:	2b07      	cmp	r3, #7
 8004baa:	d102      	bne.n	8004bb2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004bac:	2302      	movs	r3, #2
 8004bae:	61fb      	str	r3, [r7, #28]
 8004bb0:	e001      	b.n	8004bb6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	01db      	lsls	r3, r3, #7
 8004bc0:	4413      	add	r3, r2
 8004bc2:	3384      	adds	r3, #132	; 0x84
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	6812      	ldr	r2, [r2, #0]
 8004bca:	4611      	mov	r1, r2
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	01d2      	lsls	r2, r2, #7
 8004bd0:	440a      	add	r2, r1
 8004bd2:	3284      	adds	r2, #132	; 0x84
 8004bd4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004bd8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bde:	69fa      	ldr	r2, [r7, #28]
 8004be0:	fb02 f303 	mul.w	r3, r2, r3
 8004be4:	041a      	lsls	r2, r3, #16
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	6859      	ldr	r1, [r3, #4]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	1acb      	subs	r3, r1, r3
 8004bf0:	69f9      	ldr	r1, [r7, #28]
 8004bf2:	fb01 f303 	mul.w	r3, r1, r3
 8004bf6:	3303      	adds	r3, #3
 8004bf8:	68f9      	ldr	r1, [r7, #12]
 8004bfa:	6809      	ldr	r1, [r1, #0]
 8004bfc:	4608      	mov	r0, r1
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	01c9      	lsls	r1, r1, #7
 8004c02:	4401      	add	r1, r0
 8004c04:	3184      	adds	r1, #132	; 0x84
 8004c06:	4313      	orrs	r3, r2
 8004c08:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	01db      	lsls	r3, r3, #7
 8004c14:	4413      	add	r3, r2
 8004c16:	3384      	adds	r3, #132	; 0x84
 8004c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4619      	mov	r1, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	01db      	lsls	r3, r3, #7
 8004c24:	440b      	add	r3, r1
 8004c26:	3384      	adds	r3, #132	; 0x84
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4b14      	ldr	r3, [pc, #80]	; (8004c7c <LTDC_SetConfig+0x330>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	01db      	lsls	r3, r3, #7
 8004c3a:	4413      	add	r3, r2
 8004c3c:	3384      	adds	r3, #132	; 0x84
 8004c3e:	461a      	mov	r2, r3
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	01db      	lsls	r3, r3, #7
 8004c50:	4413      	add	r3, r2
 8004c52:	3384      	adds	r3, #132	; 0x84
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	6812      	ldr	r2, [r2, #0]
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	01d2      	lsls	r2, r2, #7
 8004c60:	440a      	add	r2, r1
 8004c62:	3284      	adds	r2, #132	; 0x84
 8004c64:	f043 0301 	orr.w	r3, r3, #1
 8004c68:	6013      	str	r3, [r2, #0]
}
 8004c6a:	bf00      	nop
 8004c6c:	3724      	adds	r7, #36	; 0x24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	fffff8f8 	.word	0xfffff8f8
 8004c7c:	fffff800 	.word	0xfffff800

08004c80 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004c8a:	4b23      	ldr	r3, [pc, #140]	; (8004d18 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	4a22      	ldr	r2, [pc, #136]	; (8004d18 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c94:	6413      	str	r3, [r2, #64]	; 0x40
 8004c96:	4b20      	ldr	r3, [pc, #128]	; (8004d18 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004ca2:	4b1e      	ldr	r3, [pc, #120]	; (8004d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a1d      	ldr	r2, [pc, #116]	; (8004d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cae:	f7fd fcd5 	bl	800265c <HAL_GetTick>
 8004cb2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004cb4:	e009      	b.n	8004cca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004cb6:	f7fd fcd1 	bl	800265c <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cc4:	d901      	bls.n	8004cca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e022      	b.n	8004d10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004cca:	4b14      	ldr	r3, [pc, #80]	; (8004d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd6:	d1ee      	bne.n	8004cb6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004cd8:	4b10      	ldr	r3, [pc, #64]	; (8004d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a0f      	ldr	r2, [pc, #60]	; (8004d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ce2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ce4:	f7fd fcba 	bl	800265c <HAL_GetTick>
 8004ce8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004cea:	e009      	b.n	8004d00 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004cec:	f7fd fcb6 	bl	800265c <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cfa:	d901      	bls.n	8004d00 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e007      	b.n	8004d10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d00:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d0c:	d1ee      	bne.n	8004cec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	40007000 	.word	0x40007000

08004d20 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004d2c:	f7fd fc96 	bl	800265c <HAL_GetTick>
 8004d30:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e073      	b.n	8004e24 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_QSPI_Init+0x2c>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e06b      	b.n	8004e24 <HAL_QSPI_Init+0x104>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10b      	bne.n	8004d78 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7fc fd0f 	bl	800178c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8004d6e:	f241 3188 	movw	r1, #5000	; 0x1388
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fb65 	bl	8005442 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	021a      	lsls	r2, r3, #8
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	2120      	movs	r1, #32
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 fb5d 	bl	800545e <QSPI_WaitFlagStateUntilTimeout>
 8004da4:	4603      	mov	r3, r0
 8004da6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d135      	bne.n	8004e1a <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	4b1d      	ldr	r3, [pc, #116]	; (8004e2c <HAL_QSPI_Init+0x10c>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6852      	ldr	r2, [r2, #4]
 8004dbc:	0611      	lsls	r1, r2, #24
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	68d2      	ldr	r2, [r2, #12]
 8004dc2:	4311      	orrs	r1, r2
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	69d2      	ldr	r2, [r2, #28]
 8004dc8:	4311      	orrs	r1, r2
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6a12      	ldr	r2, [r2, #32]
 8004dce:	4311      	orrs	r1, r2
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6812      	ldr	r2, [r2, #0]
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	4b14      	ldr	r3, [pc, #80]	; (8004e30 <HAL_QSPI_Init+0x110>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6912      	ldr	r2, [r2, #16]
 8004de6:	0411      	lsls	r1, r2, #16
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6952      	ldr	r2, [r2, #20]
 8004dec:	4311      	orrs	r1, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6992      	ldr	r2, [r2, #24]
 8004df2:	4311      	orrs	r1, r2
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6812      	ldr	r2, [r2, #0]
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0201 	orr.w	r2, r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	00ffff2f 	.word	0x00ffff2f
 8004e30:	ffe0f8fe 	.word	0xffe0f8fe

08004e34 <HAL_QSPI_DeInit>:
  * @brief DeInitializes the QSPI peripheral 
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e022      	b.n	8004e8c <HAL_QSPI_DeInit+0x58>
  }

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_QSPI_DeInit+0x22>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e01a      	b.n	8004e8c <HAL_QSPI_DeInit+0x58>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0201 	bic.w	r2, r2, #1
 8004e6c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fc fd1c 	bl	80018ac <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_QSPI_Command>:
  * @param Timeout  Time out duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 8004ea4:	f7fd fbda 	bl	800265c <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d101      	bne.n	8004eba <HAL_QSPI_Command+0x26>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e048      	b.n	8004f4c <HAL_QSPI_Command+0xb8>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d137      	bne.n	8004f3e <HAL_QSPI_Command+0xaa>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;   
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2120      	movs	r1, #32
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 fab9 	bl	800545e <QSPI_WaitFlagStateUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 8004ef0:	7dfb      	ldrb	r3, [r7, #23]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d125      	bne.n	8004f42 <HAL_QSPI_Command+0xae>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	68b9      	ldr	r1, [r7, #8]
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 fae6 	bl	80054cc <QSPI_Config>
      
      if (cmd->DataMode == QSPI_DATA_NONE)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d115      	bne.n	8004f34 <HAL_QSPI_Command+0xa0>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done 
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	2102      	movs	r1, #2
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 faa3 	bl	800545e <QSPI_WaitFlagStateUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10f      	bne.n	8004f42 <HAL_QSPI_Command+0xae>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2202      	movs	r2, #2
 8004f28:	60da      	str	r2, [r3, #12]
          
          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;   
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f32:	e006      	b.n	8004f42 <HAL_QSPI_Command+0xae>
        
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;   
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f3c:	e001      	b.n	8004f42 <HAL_QSPI_Command+0xae>
      }
    }
  }
  else
  {
    status = HAL_BUSY;   
 8004f3e:	2302      	movs	r3, #2
 8004f40:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_QSPI_Transmit>:
  * @param Timeout  Time out duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08a      	sub	sp, #40	; 0x28
 8004f58:	af02      	add	r7, sp, #8
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
   HAL_StatusTypeDef status = HAL_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004f64:	f7fd fb7a 	bl	800265c <HAL_GetTick>
 8004f68:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3320      	adds	r3, #32
 8004f70:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <HAL_QSPI_Transmit+0x2e>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e079      	b.n	8005076 <HAL_QSPI_Transmit+0x122>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d168      	bne.n	8005068 <HAL_QSPI_Transmit+0x114>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d059      	beq.n	8005056 <HAL_QSPI_Transmit+0x102>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2212      	movs	r2, #18
 8004fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      
      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	625a      	str	r2, [r3, #36]	; 0x24
    
      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695a      	ldr	r2, [r3, #20]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004fd6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0)
 8004fd8:	e019      	b.n	800500e <HAL_QSPI_Transmit+0xba>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	2104      	movs	r1, #4
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 fa3a 	bl	800545e <QSPI_WaitFlagStateUntilTimeout>
 8004fea:	4603      	mov	r3, r0
 8004fec:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8004fee:	7ffb      	ldrb	r3, [r7, #31]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d111      	bne.n	8005018 <HAL_QSPI_Transmit+0xc4>
        { 
          break;
        }

        *(__IO uint8_t *)data_reg = *hqspi->pTxBuffPtr++;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	1c59      	adds	r1, r3, #1
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	6251      	str	r1, [r2, #36]	; 0x24
 8004ffe:	781a      	ldrb	r2, [r3, #0]
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	701a      	strb	r2, [r3, #0]
        hqspi->TxXferCount--;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	1e5a      	subs	r2, r3, #1
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e1      	bne.n	8004fda <HAL_QSPI_Transmit+0x86>
 8005016:	e000      	b.n	800501a <HAL_QSPI_Transmit+0xc6>
          break;
 8005018:	bf00      	nop
      }
    
      if (status == HAL_OK)
 800501a:	7ffb      	ldrb	r3, [r7, #31]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d115      	bne.n	800504c <HAL_QSPI_Transmit+0xf8>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	2201      	movs	r2, #1
 8005028:	2102      	movs	r1, #2
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 fa17 	bl	800545e <QSPI_WaitFlagStateUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005034:	7ffb      	ldrb	r3, [r7, #31]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d108      	bne.n	800504c <HAL_QSPI_Transmit+0xf8>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2202      	movs	r2, #2
 8005040:	60da      	str	r2, [r3, #12]
          
#if defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 f998 	bl	8005378 <HAL_QSPI_Abort>
 8005048:	4603      	mov	r3, r0
 800504a:	77fb      	strb	r3, [r7, #31]
#endif /* QSPI_V1_0 */ 
        }
      }
    
      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;    
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005054:	e00a      	b.n	800506c <HAL_QSPI_Transmit+0x118>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505a:	f043 0208 	orr.w	r2, r3, #8
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	77fb      	strb	r3, [r7, #31]
 8005066:	e001      	b.n	800506c <HAL_QSPI_Transmit+0x118>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005068:	2302      	movs	r3, #2
 800506a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005074:	7ffb      	ldrb	r3, [r7, #31]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3720      	adds	r7, #32
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_QSPI_Receive>:
  * @param Timeout  Time out duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b08a      	sub	sp, #40	; 0x28
 8005082:	af02      	add	r7, sp, #8
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800508e:	f7fd fae5 	bl	800265c <HAL_GetTick>
 8005092:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3320      	adds	r3, #32
 80050a2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d101      	bne.n	80050b4 <HAL_QSPI_Receive+0x36>
 80050b0:	2302      	movs	r3, #2
 80050b2:	e080      	b.n	80051b6 <HAL_QSPI_Receive+0x138>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d16f      	bne.n	80051a8 <HAL_QSPI_Receive+0x12a>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	645a      	str	r2, [r3, #68]	; 0x44
    if(pData != NULL )
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d060      	beq.n	8005196 <HAL_QSPI_Receive+0x118>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2222      	movs	r2, #34	; 0x22
 80050d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800510c:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	619a      	str	r2, [r3, #24]
      
      while(hqspi->RxXferCount > 0)
 8005116:	e01a      	b.n	800514e <HAL_QSPI_Receive+0xd0>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	2201      	movs	r2, #1
 8005120:	2106      	movs	r1, #6
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 f99b 	bl	800545e <QSPI_WaitFlagStateUntilTimeout>
 8005128:	4603      	mov	r3, r0
 800512a:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800512c:	7ffb      	ldrb	r3, [r7, #31]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d112      	bne.n	8005158 <HAL_QSPI_Receive+0xda>
        { 
          break;
        }

        *hqspi->pRxBuffPtr++ = *(__IO uint8_t *)data_reg;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	1c59      	adds	r1, r3, #1
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	6311      	str	r1, [r2, #48]	; 0x30
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	7812      	ldrb	r2, [r2, #0]
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	701a      	strb	r2, [r3, #0]
        hqspi->RxXferCount--;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005148:	1e5a      	subs	r2, r3, #1
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1e0      	bne.n	8005118 <HAL_QSPI_Receive+0x9a>
 8005156:	e000      	b.n	800515a <HAL_QSPI_Receive+0xdc>
          break;
 8005158:	bf00      	nop
      }
    
      if (status == HAL_OK)
 800515a:	7ffb      	ldrb	r3, [r7, #31]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d115      	bne.n	800518c <HAL_QSPI_Receive+0x10e>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	2201      	movs	r2, #1
 8005168:	2102      	movs	r1, #2
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f977 	bl	800545e <QSPI_WaitFlagStateUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8005174:	7ffb      	ldrb	r3, [r7, #31]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d108      	bne.n	800518c <HAL_QSPI_Receive+0x10e>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2202      	movs	r2, #2
 8005180:	60da      	str	r2, [r3, #12]
          
#if defined(QSPI1_V1_0)
         /* Workaround - Extra data written in the FIFO at the end of a read transfer */
         status = HAL_QSPI_Abort(hqspi);
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 f8f8 	bl	8005378 <HAL_QSPI_Abort>
 8005188:	4603      	mov	r3, r0
 800518a:	77fb      	strb	r3, [r7, #31]
#endif /* QSPI_V1_0 */  
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;    
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005194:	e00a      	b.n	80051ac <HAL_QSPI_Receive+0x12e>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519a:	f043 0208 	orr.w	r2, r3, #8
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	77fb      	strb	r3, [r7, #31]
 80051a6:	e001      	b.n	80051ac <HAL_QSPI_Receive+0x12e>
    }
  }
  else
  {
    status = HAL_BUSY;
 80051a8:	2302      	movs	r3, #2
 80051aa:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80051b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3720      	adds	r7, #32
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <HAL_QSPI_AutoPolling>:
  * @param  Timeout  Time out duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b088      	sub	sp, #32
 80051c2:	af02      	add	r7, sp, #8
 80051c4:	60f8      	str	r0, [r7, #12]
 80051c6:	60b9      	str	r1, [r7, #8]
 80051c8:	607a      	str	r2, [r7, #4]
 80051ca:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 80051d0:	f7fd fa44 	bl	800265c <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d101      	bne.n	80051e6 <HAL_QSPI_AutoPolling+0x28>
 80051e2:	2302      	movs	r3, #2
 80051e4:	e060      	b.n	80052a8 <HAL_QSPI_AutoPolling+0xea>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d14f      	bne.n	800529a <HAL_QSPI_AutoPolling+0xdc>
  {
    
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2242      	movs	r2, #66	; 0x42
 8005204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	2200      	movs	r2, #0
 8005210:	2120      	movs	r1, #32
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 f923 	bl	800545e <QSPI_WaitFlagStateUntilTimeout>
 8005218:	4603      	mov	r3, r0
 800521a:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 800521c:	7dfb      	ldrb	r3, [r7, #23]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d13d      	bne.n	800529e <HAL_QSPI_AutoPolling+0xe0>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	6812      	ldr	r2, [r2, #0]
 800522a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6852      	ldr	r2, [r2, #4]
 8005234:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6892      	ldr	r2, [r2, #8]
 800523e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Configure QSPI: CR register with Match mode and Automatic stop enabled 
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS), 
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	431a      	orrs	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005258:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));
      
      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005262:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005266:	68b9      	ldr	r1, [r7, #8]
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 f92f 	bl	80054cc <QSPI_Config>
      
      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	2201      	movs	r2, #1
 8005276:	2108      	movs	r1, #8
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 f8f0 	bl	800545e <QSPI_WaitFlagStateUntilTimeout>
 800527e:	4603      	mov	r3, r0
 8005280:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8005282:	7dfb      	ldrb	r3, [r7, #23]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10a      	bne.n	800529e <HAL_QSPI_AutoPolling+0xe0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2208      	movs	r2, #8
 800528e:	60da      	str	r2, [r3, #12]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005298:	e001      	b.n	800529e <HAL_QSPI_AutoPolling+0xe0>
      }
    }
  }
  else
  {
    status = HAL_BUSY;   
 800529a:	2302      	movs	r3, #2
 800529c:	75fb      	strb	r3, [r7, #23]
  }
  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return status;  
 80052a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b088      	sub	sp, #32
 80052b4:	af02      	add	r7, sp, #8
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 80052c0:	f7fd f9cc 	bl	800265c <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d101      	bne.n	80052d6 <HAL_QSPI_MemoryMapped+0x26>
 80052d2:	2302      	movs	r3, #2
 80052d4:	e04c      	b.n	8005370 <HAL_QSPI_MemoryMapped+0xc0>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d13b      	bne.n	8005362 <HAL_QSPI_MemoryMapped+0xb2>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2282      	movs	r2, #130	; 0x82
 80052f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	2200      	movs	r2, #0
 8005302:	2120      	movs	r1, #32
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f8aa 	bl	800545e <QSPI_WaitFlagStateUntilTimeout>
 800530a:	4603      	mov	r3, r0
 800530c:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 800530e:	7dfb      	ldrb	r3, [r7, #23]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d128      	bne.n	8005366 <HAL_QSPI_MemoryMapped+0xb6>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f023 0108 	bic.w	r1, r3, #8
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2b08      	cmp	r3, #8
 8005330:	d110      	bne.n	8005354 <HAL_QSPI_MemoryMapped+0xa4>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));
        
        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6812      	ldr	r2, [r2, #0]
 800533a:	631a      	str	r2, [r3, #48]	; 0x30
        
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2210      	movs	r2, #16
 8005342:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005352:	601a      	str	r2, [r3, #0]
      }
      
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8005354:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8005358:	68b9      	ldr	r1, [r7, #8]
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 f8b6 	bl	80054cc <QSPI_Config>
 8005360:	e001      	b.n	8005366 <HAL_QSPI_MemoryMapped+0xb6>
    }
  }
  else
  {
    status = HAL_BUSY;   
 8005362:	2302      	movs	r3, #2
 8005364:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return status;  
 800536e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af02      	add	r7, sp, #8
 800537e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005384:	f7fd f96a 	bl	800265c <HAL_GetTick>
 8005388:	60b8      	str	r0, [r7, #8]
  
  /* Check if the state is in one of the busy states */
  if ((hqspi->State & 0x2) != 0)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005390:	b2db      	uxtb	r3, r3
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d04e      	beq.n	8005438 <HAL_QSPI_Abort+0xc0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN)!= RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d017      	beq.n	80053e0 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 0204 	bic.w	r2, r2, #4
 80053be:	601a      	str	r2, [r3, #0]
      
      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7fd fbeb 	bl	8002ba0 <HAL_DMA_Abort>
 80053ca:	4603      	mov	r3, r0
 80053cc:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d8:	f043 0204 	orr.w	r2, r3, #4
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }  
    
    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0202 	orr.w	r2, r2, #2
 80053ee:	601a      	str	r2, [r3, #0]
    
    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2201      	movs	r2, #1
 80053fa:	2102      	movs	r1, #2
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f82e 	bl	800545e <QSPI_WaitFlagStateUntilTimeout>
 8005402:	4603      	mov	r3, r0
 8005404:	73fb      	strb	r3, [r7, #15]

    if(status == HAL_OK)
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10e      	bne.n	800542a <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2202      	movs	r2, #2
 8005412:	60da      	str	r2, [r3, #12]
      
      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2200      	movs	r2, #0
 800541e:	2120      	movs	r1, #32
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f81c 	bl	800545e <QSPI_WaitFlagStateUntilTimeout>
 8005426:	4603      	mov	r3, r0
 8005428:	73fb      	strb	r3, [r7, #15]
    }
    
    if (status == HAL_OK)
 800542a:	7bfb      	ldrb	r3, [r7, #15]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d103      	bne.n	8005438 <HAL_QSPI_Abort+0xc0>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8005438:	7bfb      	ldrb	r3, [r7, #15]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b084      	sub	sp, #16
 8005462:	af00      	add	r7, sp, #0
 8005464:	60f8      	str	r0, [r7, #12]
 8005466:	60b9      	str	r1, [r7, #8]
 8005468:	603b      	str	r3, [r7, #0]
 800546a:	4613      	mov	r3, r2
 800546c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800546e:	e01a      	b.n	80054a6 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005476:	d016      	beq.n	80054a6 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d007      	beq.n	800548e <QSPI_WaitFlagStateUntilTimeout+0x30>
 800547e:	f7fd f8ed 	bl	800265c <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	429a      	cmp	r2, r3
 800548c:	d20b      	bcs.n	80054a6 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2204      	movs	r2, #4
 8005492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549a:	f043 0201 	orr.w	r2, r3, #1
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e00e      	b.n	80054c4 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	4013      	ands	r3, r2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	bf14      	ite	ne
 80054b4:	2301      	movne	r3, #1
 80054b6:	2300      	moveq	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	461a      	mov	r2, r3
 80054bc:	79fb      	ldrb	r3, [r7, #7]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d1d6      	bne.n	8005470 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d009      	beq.n	80054f4 <QSPI_Config+0x28>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80054e6:	d005      	beq.n	80054f4 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1));
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3a01      	subs	r2, #1
 80054f2:	611a      	str	r2, [r3, #16]
  }
      
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 80b9 	beq.w	8005670 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d05f      	beq.n	80055c6 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	6892      	ldr	r2, [r2, #8]
 800550e:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d031      	beq.n	800557c <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005520:	431a      	orrs	r2, r3
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005526:	431a      	orrs	r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	431a      	orrs	r2, r3
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	049b      	lsls	r3, r3, #18
 8005534:	431a      	orrs	r2, r3
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	431a      	orrs	r2, r3
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	431a      	orrs	r2, r3
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	431a      	orrs	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	431a      	orrs	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	431a      	orrs	r2, r3
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	ea42 0103 	orr.w	r1, r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	430a      	orrs	r2, r1
 8005564:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << 18) | cmd->AlternateBytesSize |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800556c:	f000 812e 	beq.w	80057cc <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	6852      	ldr	r2, [r2, #4]
 8005578:	619a      	str	r2, [r3, #24]
                                           cmd->AddressMode | cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800557a:	e127      	b.n	80057cc <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005584:	431a      	orrs	r2, r3
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800558a:	431a      	orrs	r2, r3
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	431a      	orrs	r2, r3
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	049b      	lsls	r3, r3, #18
 8005598:	431a      	orrs	r2, r3
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	431a      	orrs	r2, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	431a      	orrs	r2, r3
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	431a      	orrs	r2, r3
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	431a      	orrs	r2, r3
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	ea42 0103 	orr.w	r1, r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	615a      	str	r2, [r3, #20]
}
 80055c4:	e102      	b.n	80057cc <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d02e      	beq.n	800562c <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d6:	431a      	orrs	r2, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055dc:	431a      	orrs	r2, r3
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	431a      	orrs	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	049b      	lsls	r3, r3, #18
 80055ea:	431a      	orrs	r2, r3
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	431a      	orrs	r2, r3
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	431a      	orrs	r2, r3
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	431a      	orrs	r2, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	ea42 0103 	orr.w	r1, r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	430a      	orrs	r2, r1
 8005614:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800561c:	f000 80d6 	beq.w	80057cc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	6852      	ldr	r2, [r2, #4]
 8005628:	619a      	str	r2, [r3, #24]
}
 800562a:	e0cf      	b.n	80057cc <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	431a      	orrs	r2, r3
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563a:	431a      	orrs	r2, r3
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005640:	431a      	orrs	r2, r3
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	049b      	lsls	r3, r3, #18
 8005648:	431a      	orrs	r2, r3
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	431a      	orrs	r2, r3
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	431a      	orrs	r2, r3
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	431a      	orrs	r2, r3
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	ea42 0103 	orr.w	r1, r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	430a      	orrs	r2, r1
 800566c:	615a      	str	r2, [r3, #20]
}
 800566e:	e0ad      	b.n	80057cc <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d058      	beq.n	800572a <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	6892      	ldr	r2, [r2, #8]
 8005680:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d02d      	beq.n	80056e6 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005692:	431a      	orrs	r2, r3
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005698:	431a      	orrs	r2, r3
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	431a      	orrs	r2, r3
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	049b      	lsls	r3, r3, #18
 80056a6:	431a      	orrs	r2, r3
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	431a      	orrs	r2, r3
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	431a      	orrs	r2, r3
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	431a      	orrs	r2, r3
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	431a      	orrs	r2, r3
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	ea42 0103 	orr.w	r1, r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80056d8:	d078      	beq.n	80057cc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	6852      	ldr	r2, [r2, #4]
 80056e2:	619a      	str	r2, [r3, #24]
}
 80056e4:	e072      	b.n	80057cc <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ee:	431a      	orrs	r2, r3
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f4:	431a      	orrs	r2, r3
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	431a      	orrs	r2, r3
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	049b      	lsls	r3, r3, #18
 8005702:	431a      	orrs	r2, r3
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	431a      	orrs	r2, r3
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	431a      	orrs	r2, r3
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	431a      	orrs	r2, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	ea42 0103 	orr.w	r1, r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	430a      	orrs	r2, r1
 8005726:	615a      	str	r2, [r3, #20]
}
 8005728:	e050      	b.n	80057cc <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d02a      	beq.n	8005788 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573a:	431a      	orrs	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005740:	431a      	orrs	r2, r3
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005746:	431a      	orrs	r2, r3
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	049b      	lsls	r3, r3, #18
 800574e:	431a      	orrs	r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	431a      	orrs	r2, r3
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	431a      	orrs	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	431a      	orrs	r2, r3
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	ea42 0103 	orr.w	r1, r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	430a      	orrs	r2, r1
 8005772:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800577a:	d027      	beq.n	80057cc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	6852      	ldr	r2, [r2, #4]
 8005784:	619a      	str	r2, [r3, #24]
}
 8005786:	e021      	b.n	80057cc <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01d      	beq.n	80057cc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005798:	431a      	orrs	r2, r3
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579e:	431a      	orrs	r2, r3
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	431a      	orrs	r2, r3
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	049b      	lsls	r3, r3, #18
 80057ac:	431a      	orrs	r2, r3
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	431a      	orrs	r2, r3
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	431a      	orrs	r2, r3
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	ea42 0103 	orr.w	r1, r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	615a      	str	r2, [r3, #20]
}
 80057cc:	bf00      	nop
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80057e0:	2300      	movs	r3, #0
 80057e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e25c      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 8087 	beq.w	800590a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057fc:	4b96      	ldr	r3, [pc, #600]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 030c 	and.w	r3, r3, #12
 8005804:	2b04      	cmp	r3, #4
 8005806:	d00c      	beq.n	8005822 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005808:	4b93      	ldr	r3, [pc, #588]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f003 030c 	and.w	r3, r3, #12
 8005810:	2b08      	cmp	r3, #8
 8005812:	d112      	bne.n	800583a <HAL_RCC_OscConfig+0x62>
 8005814:	4b90      	ldr	r3, [pc, #576]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800581c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005820:	d10b      	bne.n	800583a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005822:	4b8d      	ldr	r3, [pc, #564]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d06c      	beq.n	8005908 <HAL_RCC_OscConfig+0x130>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d168      	bne.n	8005908 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e236      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005842:	d106      	bne.n	8005852 <HAL_RCC_OscConfig+0x7a>
 8005844:	4b84      	ldr	r3, [pc, #528]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a83      	ldr	r2, [pc, #524]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 800584a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	e02e      	b.n	80058b0 <HAL_RCC_OscConfig+0xd8>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10c      	bne.n	8005874 <HAL_RCC_OscConfig+0x9c>
 800585a:	4b7f      	ldr	r3, [pc, #508]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a7e      	ldr	r2, [pc, #504]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005864:	6013      	str	r3, [r2, #0]
 8005866:	4b7c      	ldr	r3, [pc, #496]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a7b      	ldr	r2, [pc, #492]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 800586c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	e01d      	b.n	80058b0 <HAL_RCC_OscConfig+0xd8>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800587c:	d10c      	bne.n	8005898 <HAL_RCC_OscConfig+0xc0>
 800587e:	4b76      	ldr	r3, [pc, #472]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a75      	ldr	r2, [pc, #468]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	4b73      	ldr	r3, [pc, #460]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a72      	ldr	r2, [pc, #456]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	e00b      	b.n	80058b0 <HAL_RCC_OscConfig+0xd8>
 8005898:	4b6f      	ldr	r3, [pc, #444]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a6e      	ldr	r2, [pc, #440]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 800589e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058a2:	6013      	str	r3, [r2, #0]
 80058a4:	4b6c      	ldr	r3, [pc, #432]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a6b      	ldr	r2, [pc, #428]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 80058aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d013      	beq.n	80058e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b8:	f7fc fed0 	bl	800265c <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058c0:	f7fc fecc 	bl	800265c <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b64      	cmp	r3, #100	; 0x64
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e1ea      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058d2:	4b61      	ldr	r3, [pc, #388]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0f0      	beq.n	80058c0 <HAL_RCC_OscConfig+0xe8>
 80058de:	e014      	b.n	800590a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e0:	f7fc febc 	bl	800265c <HAL_GetTick>
 80058e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058e6:	e008      	b.n	80058fa <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058e8:	f7fc feb8 	bl	800265c <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b64      	cmp	r3, #100	; 0x64
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e1d6      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058fa:	4b57      	ldr	r3, [pc, #348]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1f0      	bne.n	80058e8 <HAL_RCC_OscConfig+0x110>
 8005906:	e000      	b.n	800590a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d069      	beq.n	80059ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005916:	4b50      	ldr	r3, [pc, #320]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 030c 	and.w	r3, r3, #12
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00b      	beq.n	800593a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005922:	4b4d      	ldr	r3, [pc, #308]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 030c 	and.w	r3, r3, #12
 800592a:	2b08      	cmp	r3, #8
 800592c:	d11c      	bne.n	8005968 <HAL_RCC_OscConfig+0x190>
 800592e:	4b4a      	ldr	r3, [pc, #296]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d116      	bne.n	8005968 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800593a:	4b47      	ldr	r3, [pc, #284]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d005      	beq.n	8005952 <HAL_RCC_OscConfig+0x17a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d001      	beq.n	8005952 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e1aa      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005952:	4b41      	ldr	r3, [pc, #260]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	493d      	ldr	r1, [pc, #244]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005962:	4313      	orrs	r3, r2
 8005964:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005966:	e040      	b.n	80059ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d023      	beq.n	80059b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005970:	4b39      	ldr	r3, [pc, #228]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a38      	ldr	r2, [pc, #224]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005976:	f043 0301 	orr.w	r3, r3, #1
 800597a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597c:	f7fc fe6e 	bl	800265c <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005984:	f7fc fe6a 	bl	800265c <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e188      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005996:	4b30      	ldr	r3, [pc, #192]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0f0      	beq.n	8005984 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059a2:	4b2d      	ldr	r3, [pc, #180]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	4929      	ldr	r1, [pc, #164]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	600b      	str	r3, [r1, #0]
 80059b6:	e018      	b.n	80059ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059b8:	4b27      	ldr	r3, [pc, #156]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a26      	ldr	r2, [pc, #152]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 80059be:	f023 0301 	bic.w	r3, r3, #1
 80059c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c4:	f7fc fe4a 	bl	800265c <HAL_GetTick>
 80059c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059cc:	f7fc fe46 	bl	800265c <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e164      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059de:	4b1e      	ldr	r3, [pc, #120]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0302 	and.w	r3, r3, #2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1f0      	bne.n	80059cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d038      	beq.n	8005a68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d019      	beq.n	8005a32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059fe:	4b16      	ldr	r3, [pc, #88]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a02:	4a15      	ldr	r2, [pc, #84]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005a04:	f043 0301 	orr.w	r3, r3, #1
 8005a08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a0a:	f7fc fe27 	bl	800265c <HAL_GetTick>
 8005a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a10:	e008      	b.n	8005a24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a12:	f7fc fe23 	bl	800265c <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e141      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a24:	4b0c      	ldr	r3, [pc, #48]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0f0      	beq.n	8005a12 <HAL_RCC_OscConfig+0x23a>
 8005a30:	e01a      	b.n	8005a68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a32:	4b09      	ldr	r3, [pc, #36]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a36:	4a08      	ldr	r2, [pc, #32]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a3e:	f7fc fe0d 	bl	800265c <HAL_GetTick>
 8005a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a44:	e00a      	b.n	8005a5c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a46:	f7fc fe09 	bl	800265c <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d903      	bls.n	8005a5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e127      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
 8005a58:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a5c:	4b94      	ldr	r3, [pc, #592]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1ee      	bne.n	8005a46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 80a4 	beq.w	8005bbe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a76:	4b8e      	ldr	r3, [pc, #568]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10d      	bne.n	8005a9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a82:	4b8b      	ldr	r3, [pc, #556]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	4a8a      	ldr	r2, [pc, #552]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a8e:	4b88      	ldr	r3, [pc, #544]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a9e:	4b85      	ldr	r3, [pc, #532]	; (8005cb4 <HAL_RCC_OscConfig+0x4dc>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d118      	bne.n	8005adc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005aaa:	4b82      	ldr	r3, [pc, #520]	; (8005cb4 <HAL_RCC_OscConfig+0x4dc>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a81      	ldr	r2, [pc, #516]	; (8005cb4 <HAL_RCC_OscConfig+0x4dc>)
 8005ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ab6:	f7fc fdd1 	bl	800265c <HAL_GetTick>
 8005aba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005abc:	e008      	b.n	8005ad0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005abe:	f7fc fdcd 	bl	800265c <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	2b64      	cmp	r3, #100	; 0x64
 8005aca:	d901      	bls.n	8005ad0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e0eb      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ad0:	4b78      	ldr	r3, [pc, #480]	; (8005cb4 <HAL_RCC_OscConfig+0x4dc>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0f0      	beq.n	8005abe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d106      	bne.n	8005af2 <HAL_RCC_OscConfig+0x31a>
 8005ae4:	4b72      	ldr	r3, [pc, #456]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae8:	4a71      	ldr	r2, [pc, #452]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005aea:	f043 0301 	orr.w	r3, r3, #1
 8005aee:	6713      	str	r3, [r2, #112]	; 0x70
 8005af0:	e02d      	b.n	8005b4e <HAL_RCC_OscConfig+0x376>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10c      	bne.n	8005b14 <HAL_RCC_OscConfig+0x33c>
 8005afa:	4b6d      	ldr	r3, [pc, #436]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afe:	4a6c      	ldr	r2, [pc, #432]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005b00:	f023 0301 	bic.w	r3, r3, #1
 8005b04:	6713      	str	r3, [r2, #112]	; 0x70
 8005b06:	4b6a      	ldr	r3, [pc, #424]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0a:	4a69      	ldr	r2, [pc, #420]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005b0c:	f023 0304 	bic.w	r3, r3, #4
 8005b10:	6713      	str	r3, [r2, #112]	; 0x70
 8005b12:	e01c      	b.n	8005b4e <HAL_RCC_OscConfig+0x376>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	2b05      	cmp	r3, #5
 8005b1a:	d10c      	bne.n	8005b36 <HAL_RCC_OscConfig+0x35e>
 8005b1c:	4b64      	ldr	r3, [pc, #400]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b20:	4a63      	ldr	r2, [pc, #396]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005b22:	f043 0304 	orr.w	r3, r3, #4
 8005b26:	6713      	str	r3, [r2, #112]	; 0x70
 8005b28:	4b61      	ldr	r3, [pc, #388]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2c:	4a60      	ldr	r2, [pc, #384]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005b2e:	f043 0301 	orr.w	r3, r3, #1
 8005b32:	6713      	str	r3, [r2, #112]	; 0x70
 8005b34:	e00b      	b.n	8005b4e <HAL_RCC_OscConfig+0x376>
 8005b36:	4b5e      	ldr	r3, [pc, #376]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3a:	4a5d      	ldr	r2, [pc, #372]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005b3c:	f023 0301 	bic.w	r3, r3, #1
 8005b40:	6713      	str	r3, [r2, #112]	; 0x70
 8005b42:	4b5b      	ldr	r3, [pc, #364]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b46:	4a5a      	ldr	r2, [pc, #360]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005b48:	f023 0304 	bic.w	r3, r3, #4
 8005b4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d015      	beq.n	8005b82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b56:	f7fc fd81 	bl	800265c <HAL_GetTick>
 8005b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b5c:	e00a      	b.n	8005b74 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b5e:	f7fc fd7d 	bl	800265c <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d901      	bls.n	8005b74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e099      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b74:	4b4e      	ldr	r3, [pc, #312]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0ee      	beq.n	8005b5e <HAL_RCC_OscConfig+0x386>
 8005b80:	e014      	b.n	8005bac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b82:	f7fc fd6b 	bl	800265c <HAL_GetTick>
 8005b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b88:	e00a      	b.n	8005ba0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b8a:	f7fc fd67 	bl	800265c <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e083      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ba0:	4b43      	ldr	r3, [pc, #268]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1ee      	bne.n	8005b8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bac:	7dfb      	ldrb	r3, [r7, #23]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d105      	bne.n	8005bbe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bb2:	4b3f      	ldr	r3, [pc, #252]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	4a3e      	ldr	r2, [pc, #248]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d06f      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bc6:	4b3a      	ldr	r3, [pc, #232]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 030c 	and.w	r3, r3, #12
 8005bce:	2b08      	cmp	r3, #8
 8005bd0:	d067      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d149      	bne.n	8005c6e <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bda:	4b35      	ldr	r3, [pc, #212]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a34      	ldr	r2, [pc, #208]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005be0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be6:	f7fc fd39 	bl	800265c <HAL_GetTick>
 8005bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bec:	e008      	b.n	8005c00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bee:	f7fc fd35 	bl	800265c <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e053      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c00:	4b2b      	ldr	r3, [pc, #172]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1f0      	bne.n	8005bee <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	69da      	ldr	r2, [r3, #28]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	431a      	orrs	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	019b      	lsls	r3, r3, #6
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c22:	085b      	lsrs	r3, r3, #1
 8005c24:	3b01      	subs	r3, #1
 8005c26:	041b      	lsls	r3, r3, #16
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2e:	061b      	lsls	r3, r3, #24
 8005c30:	4313      	orrs	r3, r2
 8005c32:	4a1f      	ldr	r2, [pc, #124]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005c34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c38:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c3a:	4b1d      	ldr	r3, [pc, #116]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a1c      	ldr	r2, [pc, #112]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005c40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c46:	f7fc fd09 	bl	800265c <HAL_GetTick>
 8005c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c4c:	e008      	b.n	8005c60 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c4e:	f7fc fd05 	bl	800265c <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e023      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c60:	4b13      	ldr	r3, [pc, #76]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0f0      	beq.n	8005c4e <HAL_RCC_OscConfig+0x476>
 8005c6c:	e01b      	b.n	8005ca6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c6e:	4b10      	ldr	r3, [pc, #64]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a0f      	ldr	r2, [pc, #60]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005c74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c7a:	f7fc fcef 	bl	800265c <HAL_GetTick>
 8005c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c80:	e008      	b.n	8005c94 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c82:	f7fc fceb 	bl	800265c <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d901      	bls.n	8005c94 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e009      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c94:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1f0      	bne.n	8005c82 <HAL_RCC_OscConfig+0x4aa>
 8005ca0:	e001      	b.n	8005ca6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3718      	adds	r7, #24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	40023800 	.word	0x40023800
 8005cb4:	40007000 	.word	0x40007000

08005cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e0ce      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cd0:	4b69      	ldr	r3, [pc, #420]	; (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 030f 	and.w	r3, r3, #15
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d910      	bls.n	8005d00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cde:	4b66      	ldr	r3, [pc, #408]	; (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f023 020f 	bic.w	r2, r3, #15
 8005ce6:	4964      	ldr	r1, [pc, #400]	; (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cee:	4b62      	ldr	r3, [pc, #392]	; (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 030f 	and.w	r3, r3, #15
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d001      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e0b6      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d020      	beq.n	8005d4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d18:	4b58      	ldr	r3, [pc, #352]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	4a57      	ldr	r2, [pc, #348]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0308 	and.w	r3, r3, #8
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d005      	beq.n	8005d3c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d30:	4b52      	ldr	r3, [pc, #328]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	4a51      	ldr	r2, [pc, #324]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d3c:	4b4f      	ldr	r3, [pc, #316]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	494c      	ldr	r1, [pc, #304]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d040      	beq.n	8005ddc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d107      	bne.n	8005d72 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d62:	4b46      	ldr	r3, [pc, #280]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d115      	bne.n	8005d9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e07d      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d107      	bne.n	8005d8a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d7a:	4b40      	ldr	r3, [pc, #256]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d109      	bne.n	8005d9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e071      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d8a:	4b3c      	ldr	r3, [pc, #240]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e069      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d9a:	4b38      	ldr	r3, [pc, #224]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f023 0203 	bic.w	r2, r3, #3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	4935      	ldr	r1, [pc, #212]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dac:	f7fc fc56 	bl	800265c <HAL_GetTick>
 8005db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005db2:	e00a      	b.n	8005dca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005db4:	f7fc fc52 	bl	800265c <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e051      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dca:	4b2c      	ldr	r3, [pc, #176]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 020c 	and.w	r2, r3, #12
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d1eb      	bne.n	8005db4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ddc:	4b26      	ldr	r3, [pc, #152]	; (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 030f 	and.w	r3, r3, #15
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d210      	bcs.n	8005e0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dea:	4b23      	ldr	r3, [pc, #140]	; (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f023 020f 	bic.w	r2, r3, #15
 8005df2:	4921      	ldr	r1, [pc, #132]	; (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dfa:	4b1f      	ldr	r3, [pc, #124]	; (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 030f 	and.w	r3, r3, #15
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d001      	beq.n	8005e0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e030      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d008      	beq.n	8005e2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e18:	4b18      	ldr	r3, [pc, #96]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	4915      	ldr	r1, [pc, #84]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0308 	and.w	r3, r3, #8
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d009      	beq.n	8005e4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e36:	4b11      	ldr	r3, [pc, #68]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	490d      	ldr	r1, [pc, #52]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e4a:	f000 f81d 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8005e4e:	4601      	mov	r1, r0
 8005e50:	4b0a      	ldr	r3, [pc, #40]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	091b      	lsrs	r3, r3, #4
 8005e56:	f003 030f 	and.w	r3, r3, #15
 8005e5a:	4a09      	ldr	r2, [pc, #36]	; (8005e80 <HAL_RCC_ClockConfig+0x1c8>)
 8005e5c:	5cd3      	ldrb	r3, [r2, r3]
 8005e5e:	fa21 f303 	lsr.w	r3, r1, r3
 8005e62:	4a08      	ldr	r2, [pc, #32]	; (8005e84 <HAL_RCC_ClockConfig+0x1cc>)
 8005e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005e66:	2000      	movs	r0, #0
 8005e68:	f7fb fde4 	bl	8001a34 <HAL_InitTick>

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	40023c00 	.word	0x40023c00
 8005e7c:	40023800 	.word	0x40023800
 8005e80:	0802493c 	.word	0x0802493c
 8005e84:	20000004 	.word	0x20000004

08005e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	607b      	str	r3, [r7, #4]
 8005e92:	2300      	movs	r3, #0
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	2300      	movs	r3, #0
 8005e98:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e9e:	4b50      	ldr	r3, [pc, #320]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 030c 	and.w	r3, r3, #12
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	d007      	beq.n	8005eba <HAL_RCC_GetSysClockFreq+0x32>
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d008      	beq.n	8005ec0 <HAL_RCC_GetSysClockFreq+0x38>
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f040 808d 	bne.w	8005fce <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005eb4:	4b4b      	ldr	r3, [pc, #300]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005eb6:	60bb      	str	r3, [r7, #8]
       break;
 8005eb8:	e08c      	b.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005eba:	4b4b      	ldr	r3, [pc, #300]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ebc:	60bb      	str	r3, [r7, #8]
      break;
 8005ebe:	e089      	b.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ec0:	4b47      	ldr	r3, [pc, #284]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ec8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005eca:	4b45      	ldr	r3, [pc, #276]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d023      	beq.n	8005f1e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ed6:	4b42      	ldr	r3, [pc, #264]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	099b      	lsrs	r3, r3, #6
 8005edc:	f04f 0400 	mov.w	r4, #0
 8005ee0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	ea03 0501 	and.w	r5, r3, r1
 8005eec:	ea04 0602 	and.w	r6, r4, r2
 8005ef0:	4a3d      	ldr	r2, [pc, #244]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ef2:	fb02 f106 	mul.w	r1, r2, r6
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	fb02 f205 	mul.w	r2, r2, r5
 8005efc:	440a      	add	r2, r1
 8005efe:	493a      	ldr	r1, [pc, #232]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005f00:	fba5 0101 	umull	r0, r1, r5, r1
 8005f04:	1853      	adds	r3, r2, r1
 8005f06:	4619      	mov	r1, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f04f 0400 	mov.w	r4, #0
 8005f0e:	461a      	mov	r2, r3
 8005f10:	4623      	mov	r3, r4
 8005f12:	f7fa f9cd 	bl	80002b0 <__aeabi_uldivmod>
 8005f16:	4603      	mov	r3, r0
 8005f18:	460c      	mov	r4, r1
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	e049      	b.n	8005fb2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f1e:	4b30      	ldr	r3, [pc, #192]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	099b      	lsrs	r3, r3, #6
 8005f24:	f04f 0400 	mov.w	r4, #0
 8005f28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	ea03 0501 	and.w	r5, r3, r1
 8005f34:	ea04 0602 	and.w	r6, r4, r2
 8005f38:	4629      	mov	r1, r5
 8005f3a:	4632      	mov	r2, r6
 8005f3c:	f04f 0300 	mov.w	r3, #0
 8005f40:	f04f 0400 	mov.w	r4, #0
 8005f44:	0154      	lsls	r4, r2, #5
 8005f46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f4a:	014b      	lsls	r3, r1, #5
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4622      	mov	r2, r4
 8005f50:	1b49      	subs	r1, r1, r5
 8005f52:	eb62 0206 	sbc.w	r2, r2, r6
 8005f56:	f04f 0300 	mov.w	r3, #0
 8005f5a:	f04f 0400 	mov.w	r4, #0
 8005f5e:	0194      	lsls	r4, r2, #6
 8005f60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005f64:	018b      	lsls	r3, r1, #6
 8005f66:	1a5b      	subs	r3, r3, r1
 8005f68:	eb64 0402 	sbc.w	r4, r4, r2
 8005f6c:	f04f 0100 	mov.w	r1, #0
 8005f70:	f04f 0200 	mov.w	r2, #0
 8005f74:	00e2      	lsls	r2, r4, #3
 8005f76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005f7a:	00d9      	lsls	r1, r3, #3
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4614      	mov	r4, r2
 8005f80:	195b      	adds	r3, r3, r5
 8005f82:	eb44 0406 	adc.w	r4, r4, r6
 8005f86:	f04f 0100 	mov.w	r1, #0
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	02a2      	lsls	r2, r4, #10
 8005f90:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005f94:	0299      	lsls	r1, r3, #10
 8005f96:	460b      	mov	r3, r1
 8005f98:	4614      	mov	r4, r2
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f04f 0400 	mov.w	r4, #0
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	4623      	mov	r3, r4
 8005fa8:	f7fa f982 	bl	80002b0 <__aeabi_uldivmod>
 8005fac:	4603      	mov	r3, r0
 8005fae:	460c      	mov	r4, r1
 8005fb0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8005fb2:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	0c1b      	lsrs	r3, r3, #16
 8005fb8:	f003 0303 	and.w	r3, r3, #3
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fca:	60bb      	str	r3, [r7, #8]
      break;
 8005fcc:	e002      	b.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fce:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005fd0:	60bb      	str	r3, [r7, #8]
      break;
 8005fd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fd4:	68bb      	ldr	r3, [r7, #8]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	40023800 	.word	0x40023800
 8005fe4:	00f42400 	.word	0x00f42400
 8005fe8:	017d7840 	.word	0x017d7840

08005fec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ff0:	4b03      	ldr	r3, [pc, #12]	; (8006000 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	20000004 	.word	0x20000004

08006004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006008:	f7ff fff0 	bl	8005fec <HAL_RCC_GetHCLKFreq>
 800600c:	4601      	mov	r1, r0
 800600e:	4b05      	ldr	r3, [pc, #20]	; (8006024 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	0a9b      	lsrs	r3, r3, #10
 8006014:	f003 0307 	and.w	r3, r3, #7
 8006018:	4a03      	ldr	r2, [pc, #12]	; (8006028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800601a:	5cd3      	ldrb	r3, [r2, r3]
 800601c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006020:	4618      	mov	r0, r3
 8006022:	bd80      	pop	{r7, pc}
 8006024:	40023800 	.word	0x40023800
 8006028:	0802494c 	.word	0x0802494c

0800602c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	220f      	movs	r2, #15
 800603a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800603c:	4b12      	ldr	r3, [pc, #72]	; (8006088 <HAL_RCC_GetClockConfig+0x5c>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f003 0203 	and.w	r2, r3, #3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006048:	4b0f      	ldr	r3, [pc, #60]	; (8006088 <HAL_RCC_GetClockConfig+0x5c>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006054:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <HAL_RCC_GetClockConfig+0x5c>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006060:	4b09      	ldr	r3, [pc, #36]	; (8006088 <HAL_RCC_GetClockConfig+0x5c>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	08db      	lsrs	r3, r3, #3
 8006066:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800606e:	4b07      	ldr	r3, [pc, #28]	; (800608c <HAL_RCC_GetClockConfig+0x60>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 020f 	and.w	r2, r3, #15
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	601a      	str	r2, [r3, #0]
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	40023800 	.word	0x40023800
 800608c:	40023c00 	.word	0x40023c00

08006090 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b088      	sub	sp, #32
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006098:	2300      	movs	r3, #0
 800609a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800609c:	2300      	movs	r3, #0
 800609e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80060a0:	2300      	movs	r3, #0
 80060a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80060a4:	2300      	movs	r3, #0
 80060a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80060a8:	2300      	movs	r3, #0
 80060aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d012      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060b8:	4b69      	ldr	r3, [pc, #420]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	4a68      	ldr	r2, [pc, #416]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80060c2:	6093      	str	r3, [r2, #8]
 80060c4:	4b66      	ldr	r3, [pc, #408]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060cc:	4964      	ldr	r1, [pc, #400]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80060da:	2301      	movs	r3, #1
 80060dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d017      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060ea:	4b5d      	ldr	r3, [pc, #372]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f8:	4959      	ldr	r1, [pc, #356]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006108:	d101      	bne.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800610a:	2301      	movs	r3, #1
 800610c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006116:	2301      	movs	r3, #1
 8006118:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d017      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006126:	4b4e      	ldr	r3, [pc, #312]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800612c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006134:	494a      	ldr	r1, [pc, #296]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006136:	4313      	orrs	r3, r2
 8006138:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006144:	d101      	bne.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006146:	2301      	movs	r3, #1
 8006148:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006152:	2301      	movs	r3, #1
 8006154:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006162:	2301      	movs	r3, #1
 8006164:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 808b 	beq.w	800628a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006174:	4b3a      	ldr	r3, [pc, #232]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006178:	4a39      	ldr	r2, [pc, #228]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800617a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800617e:	6413      	str	r3, [r2, #64]	; 0x40
 8006180:	4b37      	ldr	r3, [pc, #220]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006188:	60bb      	str	r3, [r7, #8]
 800618a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800618c:	4b35      	ldr	r3, [pc, #212]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a34      	ldr	r2, [pc, #208]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006196:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006198:	f7fc fa60 	bl	800265c <HAL_GetTick>
 800619c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800619e:	e008      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061a0:	f7fc fa5c 	bl	800265c <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b64      	cmp	r3, #100	; 0x64
 80061ac:	d901      	bls.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e355      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80061b2:	4b2c      	ldr	r3, [pc, #176]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0f0      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061be:	4b28      	ldr	r3, [pc, #160]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d035      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d02e      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061dc:	4b20      	ldr	r3, [pc, #128]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061e6:	4b1e      	ldr	r3, [pc, #120]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ea:	4a1d      	ldr	r2, [pc, #116]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061f2:	4b1b      	ldr	r3, [pc, #108]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f6:	4a1a      	ldr	r2, [pc, #104]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80061fe:	4a18      	ldr	r2, [pc, #96]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006204:	4b16      	ldr	r3, [pc, #88]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b01      	cmp	r3, #1
 800620e:	d114      	bne.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006210:	f7fc fa24 	bl	800265c <HAL_GetTick>
 8006214:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006216:	e00a      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006218:	f7fc fa20 	bl	800265c <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	f241 3288 	movw	r2, #5000	; 0x1388
 8006226:	4293      	cmp	r3, r2
 8006228:	d901      	bls.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e317      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800622e:	4b0c      	ldr	r3, [pc, #48]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0ee      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006246:	d111      	bne.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006248:	4b05      	ldr	r3, [pc, #20]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006254:	4b04      	ldr	r3, [pc, #16]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006256:	400b      	ands	r3, r1
 8006258:	4901      	ldr	r1, [pc, #4]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800625a:	4313      	orrs	r3, r2
 800625c:	608b      	str	r3, [r1, #8]
 800625e:	e00b      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006260:	40023800 	.word	0x40023800
 8006264:	40007000 	.word	0x40007000
 8006268:	0ffffcff 	.word	0x0ffffcff
 800626c:	4bb0      	ldr	r3, [pc, #704]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	4aaf      	ldr	r2, [pc, #700]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006272:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006276:	6093      	str	r3, [r2, #8]
 8006278:	4bad      	ldr	r3, [pc, #692]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800627a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006284:	49aa      	ldr	r1, [pc, #680]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006286:	4313      	orrs	r3, r2
 8006288:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0310 	and.w	r3, r3, #16
 8006292:	2b00      	cmp	r3, #0
 8006294:	d010      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006296:	4ba6      	ldr	r3, [pc, #664]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800629c:	4aa4      	ldr	r2, [pc, #656]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800629e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80062a6:	4ba2      	ldr	r3, [pc, #648]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b0:	499f      	ldr	r1, [pc, #636]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00a      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062c4:	4b9a      	ldr	r3, [pc, #616]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062d2:	4997      	ldr	r1, [pc, #604]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00a      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062e6:	4b92      	ldr	r3, [pc, #584]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062f4:	498e      	ldr	r1, [pc, #568]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00a      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006308:	4b89      	ldr	r3, [pc, #548]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800630a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006316:	4986      	ldr	r1, [pc, #536]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006318:	4313      	orrs	r3, r2
 800631a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00a      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800632a:	4b81      	ldr	r3, [pc, #516]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800632c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006330:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006338:	497d      	ldr	r1, [pc, #500]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800633a:	4313      	orrs	r3, r2
 800633c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00a      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800634c:	4b78      	ldr	r3, [pc, #480]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800634e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006352:	f023 0203 	bic.w	r2, r3, #3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635a:	4975      	ldr	r1, [pc, #468]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800635c:	4313      	orrs	r3, r2
 800635e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00a      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800636e:	4b70      	ldr	r3, [pc, #448]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006374:	f023 020c 	bic.w	r2, r3, #12
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800637c:	496c      	ldr	r1, [pc, #432]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800637e:	4313      	orrs	r3, r2
 8006380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00a      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006390:	4b67      	ldr	r3, [pc, #412]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006396:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800639e:	4964      	ldr	r1, [pc, #400]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00a      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063b2:	4b5f      	ldr	r3, [pc, #380]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c0:	495b      	ldr	r1, [pc, #364]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00a      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063d4:	4b56      	ldr	r3, [pc, #344]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e2:	4953      	ldr	r1, [pc, #332]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80063f6:	4b4e      	ldr	r3, [pc, #312]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006404:	494a      	ldr	r1, [pc, #296]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006406:	4313      	orrs	r3, r2
 8006408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006418:	4b45      	ldr	r3, [pc, #276]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800641a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800641e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006426:	4942      	ldr	r1, [pc, #264]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006428:	4313      	orrs	r3, r2
 800642a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800643a:	4b3d      	ldr	r3, [pc, #244]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800643c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006440:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006448:	4939      	ldr	r1, [pc, #228]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800644a:	4313      	orrs	r3, r2
 800644c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800645c:	4b34      	ldr	r3, [pc, #208]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800645e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006462:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800646a:	4931      	ldr	r1, [pc, #196]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800646c:	4313      	orrs	r3, r2
 800646e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d011      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800647e:	4b2c      	ldr	r3, [pc, #176]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006484:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800648c:	4928      	ldr	r1, [pc, #160]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800648e:	4313      	orrs	r3, r2
 8006490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800649c:	d101      	bne.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800649e:	2301      	movs	r3, #1
 80064a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0308 	and.w	r3, r3, #8
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80064ae:	2301      	movs	r3, #1
 80064b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00a      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064be:	4b1c      	ldr	r3, [pc, #112]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064cc:	4918      	ldr	r1, [pc, #96]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00b      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80064e0:	4b13      	ldr	r3, [pc, #76]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064f0:	490f      	ldr	r1, [pc, #60]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d005      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006506:	f040 80d8 	bne.w	80066ba <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800650a:	4b09      	ldr	r3, [pc, #36]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a08      	ldr	r2, [pc, #32]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006510:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006516:	f7fc f8a1 	bl	800265c <HAL_GetTick>
 800651a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800651c:	e00a      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800651e:	f7fc f89d 	bl	800265c <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b64      	cmp	r3, #100	; 0x64
 800652a:	d903      	bls.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e196      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006530:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006534:	4b6c      	ldr	r3, [pc, #432]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1ee      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b00      	cmp	r3, #0
 800654a:	d021      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006550:	2b00      	cmp	r3, #0
 8006552:	d11d      	bne.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006554:	4b64      	ldr	r3, [pc, #400]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800655a:	0c1b      	lsrs	r3, r3, #16
 800655c:	f003 0303 	and.w	r3, r3, #3
 8006560:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006562:	4b61      	ldr	r3, [pc, #388]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006568:	0e1b      	lsrs	r3, r3, #24
 800656a:	f003 030f 	and.w	r3, r3, #15
 800656e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	019a      	lsls	r2, r3, #6
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	041b      	lsls	r3, r3, #16
 800657a:	431a      	orrs	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	061b      	lsls	r3, r3, #24
 8006580:	431a      	orrs	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	071b      	lsls	r3, r3, #28
 8006588:	4957      	ldr	r1, [pc, #348]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800658a:	4313      	orrs	r3, r2
 800658c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d004      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065a4:	d00a      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d02e      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065ba:	d129      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80065bc:	4b4a      	ldr	r3, [pc, #296]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065c2:	0c1b      	lsrs	r3, r3, #16
 80065c4:	f003 0303 	and.w	r3, r3, #3
 80065c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80065ca:	4b47      	ldr	r3, [pc, #284]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065d0:	0f1b      	lsrs	r3, r3, #28
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	019a      	lsls	r2, r3, #6
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	041b      	lsls	r3, r3, #16
 80065e2:	431a      	orrs	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	061b      	lsls	r3, r3, #24
 80065ea:	431a      	orrs	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	071b      	lsls	r3, r3, #28
 80065f0:	493d      	ldr	r1, [pc, #244]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80065f8:	4b3b      	ldr	r3, [pc, #236]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065fe:	f023 021f 	bic.w	r2, r3, #31
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	3b01      	subs	r3, #1
 8006608:	4937      	ldr	r1, [pc, #220]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800660a:	4313      	orrs	r3, r2
 800660c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d01d      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800661c:	4b32      	ldr	r3, [pc, #200]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800661e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006622:	0e1b      	lsrs	r3, r3, #24
 8006624:	f003 030f 	and.w	r3, r3, #15
 8006628:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800662a:	4b2f      	ldr	r3, [pc, #188]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800662c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006630:	0f1b      	lsrs	r3, r3, #28
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	019a      	lsls	r2, r3, #6
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	041b      	lsls	r3, r3, #16
 8006644:	431a      	orrs	r2, r3
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	061b      	lsls	r3, r3, #24
 800664a:	431a      	orrs	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	071b      	lsls	r3, r3, #28
 8006650:	4925      	ldr	r1, [pc, #148]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006652:	4313      	orrs	r3, r2
 8006654:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d011      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	019a      	lsls	r2, r3, #6
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	041b      	lsls	r3, r3, #16
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	061b      	lsls	r3, r3, #24
 8006678:	431a      	orrs	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	071b      	lsls	r3, r3, #28
 8006680:	4919      	ldr	r1, [pc, #100]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006682:	4313      	orrs	r3, r2
 8006684:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006688:	4b17      	ldr	r3, [pc, #92]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a16      	ldr	r2, [pc, #88]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800668e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006694:	f7fb ffe2 	bl	800265c <HAL_GetTick>
 8006698:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800669a:	e008      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800669c:	f7fb ffde 	bl	800265c <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b64      	cmp	r3, #100	; 0x64
 80066a8:	d901      	bls.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e0d7      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066ae:	4b0e      	ldr	r3, [pc, #56]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d0f0      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	f040 80cd 	bne.w	800685c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80066c2:	4b09      	ldr	r3, [pc, #36]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a08      	ldr	r2, [pc, #32]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066ce:	f7fb ffc5 	bl	800265c <HAL_GetTick>
 80066d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066d4:	e00a      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80066d6:	f7fb ffc1 	bl	800265c <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b64      	cmp	r3, #100	; 0x64
 80066e2:	d903      	bls.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e0ba      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80066e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066ec:	4b5e      	ldr	r3, [pc, #376]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066f8:	d0ed      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670a:	2b00      	cmp	r3, #0
 800670c:	d009      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006716:	2b00      	cmp	r3, #0
 8006718:	d02e      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	d12a      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006722:	4b51      	ldr	r3, [pc, #324]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006728:	0c1b      	lsrs	r3, r3, #16
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006730:	4b4d      	ldr	r3, [pc, #308]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006736:	0f1b      	lsrs	r3, r3, #28
 8006738:	f003 0307 	and.w	r3, r3, #7
 800673c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	019a      	lsls	r2, r3, #6
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	041b      	lsls	r3, r3, #16
 8006748:	431a      	orrs	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	061b      	lsls	r3, r3, #24
 8006750:	431a      	orrs	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	071b      	lsls	r3, r3, #28
 8006756:	4944      	ldr	r1, [pc, #272]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006758:	4313      	orrs	r3, r2
 800675a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800675e:	4b42      	ldr	r3, [pc, #264]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006764:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676c:	3b01      	subs	r3, #1
 800676e:	021b      	lsls	r3, r3, #8
 8006770:	493d      	ldr	r1, [pc, #244]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006772:	4313      	orrs	r3, r2
 8006774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d022      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006788:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800678c:	d11d      	bne.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800678e:	4b36      	ldr	r3, [pc, #216]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006794:	0e1b      	lsrs	r3, r3, #24
 8006796:	f003 030f 	and.w	r3, r3, #15
 800679a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800679c:	4b32      	ldr	r3, [pc, #200]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800679e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a2:	0f1b      	lsrs	r3, r3, #28
 80067a4:	f003 0307 	and.w	r3, r3, #7
 80067a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	019a      	lsls	r2, r3, #6
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	041b      	lsls	r3, r3, #16
 80067b6:	431a      	orrs	r2, r3
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	061b      	lsls	r3, r3, #24
 80067bc:	431a      	orrs	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	071b      	lsls	r3, r3, #28
 80067c2:	4929      	ldr	r1, [pc, #164]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0308 	and.w	r3, r3, #8
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d028      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067d6:	4b24      	ldr	r3, [pc, #144]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067dc:	0e1b      	lsrs	r3, r3, #24
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80067e4:	4b20      	ldr	r3, [pc, #128]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ea:	0c1b      	lsrs	r3, r3, #16
 80067ec:	f003 0303 	and.w	r3, r3, #3
 80067f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	019a      	lsls	r2, r3, #6
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	041b      	lsls	r3, r3, #16
 80067fc:	431a      	orrs	r2, r3
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	061b      	lsls	r3, r3, #24
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	071b      	lsls	r3, r3, #28
 800680a:	4917      	ldr	r1, [pc, #92]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800680c:	4313      	orrs	r3, r2
 800680e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006812:	4b15      	ldr	r3, [pc, #84]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006818:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	4911      	ldr	r1, [pc, #68]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006822:	4313      	orrs	r3, r2
 8006824:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006828:	4b0f      	ldr	r3, [pc, #60]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a0e      	ldr	r2, [pc, #56]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800682e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006832:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006834:	f7fb ff12 	bl	800265c <HAL_GetTick>
 8006838:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800683a:	e008      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800683c:	f7fb ff0e 	bl	800265c <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b64      	cmp	r3, #100	; 0x64
 8006848:	d901      	bls.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e007      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800684e:	4b06      	ldr	r3, [pc, #24]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800685a:	d1ef      	bne.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3720      	adds	r7, #32
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	40023800 	.word	0x40023800

0800686c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e025      	b.n	80068cc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d106      	bne.n	800689a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7fb f8c3 	bl	8001a20 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2202      	movs	r2, #2
 800689e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	3304      	adds	r3, #4
 80068aa:	4619      	mov	r1, r3
 80068ac:	4610      	mov	r0, r2
 80068ae:	f000 fac1 	bl	8006e34 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6818      	ldr	r0, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	461a      	mov	r2, r3
 80068bc:	6839      	ldr	r1, [r7, #0]
 80068be:	f000 fb2b 	bl	8006f18 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d101      	bne.n	80068f0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80068ec:	2302      	movs	r3, #2
 80068ee:	e018      	b.n	8006922 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	68b9      	ldr	r1, [r7, #8]
 8006900:	4618      	mov	r0, r3
 8006902:	f000 fb89 	bl	8007018 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b02      	cmp	r3, #2
 800690c:	d104      	bne.n	8006918 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2205      	movs	r2, #5
 8006912:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006916:	e003      	b.n	8006920 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b082      	sub	sp, #8
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800693a:	b2db      	uxtb	r3, r3
 800693c:	2b02      	cmp	r3, #2
 800693e:	d101      	bne.n	8006944 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006940:	2302      	movs	r3, #2
 8006942:	e00e      	b.n	8006962 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	4618      	mov	r0, r3
 8006954:	f000 fb81 	bl	800705a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b082      	sub	sp, #8
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e01d      	b.n	80069b8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b00      	cmp	r3, #0
 8006986:	d106      	bne.n	8006996 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f815 	bl	80069c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2202      	movs	r2, #2
 800699a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3304      	adds	r3, #4
 80069a6:	4619      	mov	r1, r3
 80069a8:	4610      	mov	r0, r2
 80069aa:	f000 f985 	bl	8006cb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68da      	ldr	r2, [r3, #12]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 0201 	orr.w	r2, r2, #1
 80069ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	4b0c      	ldr	r3, [pc, #48]	; (8006a24 <HAL_TIM_Base_Start_IT+0x50>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b06      	cmp	r3, #6
 80069fc:	d00b      	beq.n	8006a16 <HAL_TIM_Base_Start_IT+0x42>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a04:	d007      	beq.n	8006a16 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f042 0201 	orr.w	r2, r2, #1
 8006a14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	00010007 	.word	0x00010007

08006a28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d122      	bne.n	8006a84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f003 0302 	and.w	r3, r3, #2
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d11b      	bne.n	8006a84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f06f 0202 	mvn.w	r2, #2
 8006a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	f003 0303 	and.w	r3, r3, #3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d003      	beq.n	8006a72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f905 	bl	8006c7a <HAL_TIM_IC_CaptureCallback>
 8006a70:	e005      	b.n	8006a7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f8f7 	bl	8006c66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f908 	bl	8006c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	f003 0304 	and.w	r3, r3, #4
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d122      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f003 0304 	and.w	r3, r3, #4
 8006a9c:	2b04      	cmp	r3, #4
 8006a9e:	d11b      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f06f 0204 	mvn.w	r2, #4
 8006aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2202      	movs	r2, #2
 8006aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f8db 	bl	8006c7a <HAL_TIM_IC_CaptureCallback>
 8006ac4:	e005      	b.n	8006ad2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f8cd 	bl	8006c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f8de 	bl	8006c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	f003 0308 	and.w	r3, r3, #8
 8006ae2:	2b08      	cmp	r3, #8
 8006ae4:	d122      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f003 0308 	and.w	r3, r3, #8
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d11b      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f06f 0208 	mvn.w	r2, #8
 8006afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2204      	movs	r2, #4
 8006b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	f003 0303 	and.w	r3, r3, #3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f8b1 	bl	8006c7a <HAL_TIM_IC_CaptureCallback>
 8006b18:	e005      	b.n	8006b26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f8a3 	bl	8006c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f8b4 	bl	8006c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f003 0310 	and.w	r3, r3, #16
 8006b36:	2b10      	cmp	r3, #16
 8006b38:	d122      	bne.n	8006b80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f003 0310 	and.w	r3, r3, #16
 8006b44:	2b10      	cmp	r3, #16
 8006b46:	d11b      	bne.n	8006b80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f06f 0210 	mvn.w	r2, #16
 8006b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2208      	movs	r2, #8
 8006b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f887 	bl	8006c7a <HAL_TIM_IC_CaptureCallback>
 8006b6c:	e005      	b.n	8006b7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f879 	bl	8006c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f88a 	bl	8006c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d10e      	bne.n	8006bac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d107      	bne.n	8006bac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f06f 0201 	mvn.w	r2, #1
 8006ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7fa fc24 	bl	80013f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb6:	2b80      	cmp	r3, #128	; 0x80
 8006bb8:	d10e      	bne.n	8006bd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc4:	2b80      	cmp	r3, #128	; 0x80
 8006bc6:	d107      	bne.n	8006bd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f91a 	bl	8006e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006be6:	d10e      	bne.n	8006c06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf2:	2b80      	cmp	r3, #128	; 0x80
 8006bf4:	d107      	bne.n	8006c06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f90d 	bl	8006e20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c10:	2b40      	cmp	r3, #64	; 0x40
 8006c12:	d10e      	bne.n	8006c32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1e:	2b40      	cmp	r3, #64	; 0x40
 8006c20:	d107      	bne.n	8006c32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f838 	bl	8006ca2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	f003 0320 	and.w	r3, r3, #32
 8006c3c:	2b20      	cmp	r3, #32
 8006c3e:	d10e      	bne.n	8006c5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	f003 0320 	and.w	r3, r3, #32
 8006c4a:	2b20      	cmp	r3, #32
 8006c4c:	d107      	bne.n	8006c5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f06f 0220 	mvn.w	r2, #32
 8006c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f8cd 	bl	8006df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c5e:	bf00      	nop
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b083      	sub	sp, #12
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c6e:	bf00      	nop
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c82:	bf00      	nop
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b083      	sub	sp, #12
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c96:	bf00      	nop
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b083      	sub	sp, #12
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006caa:	bf00      	nop
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
	...

08006cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a40      	ldr	r2, [pc, #256]	; (8006dcc <TIM_Base_SetConfig+0x114>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d013      	beq.n	8006cf8 <TIM_Base_SetConfig+0x40>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd6:	d00f      	beq.n	8006cf8 <TIM_Base_SetConfig+0x40>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a3d      	ldr	r2, [pc, #244]	; (8006dd0 <TIM_Base_SetConfig+0x118>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d00b      	beq.n	8006cf8 <TIM_Base_SetConfig+0x40>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a3c      	ldr	r2, [pc, #240]	; (8006dd4 <TIM_Base_SetConfig+0x11c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d007      	beq.n	8006cf8 <TIM_Base_SetConfig+0x40>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a3b      	ldr	r2, [pc, #236]	; (8006dd8 <TIM_Base_SetConfig+0x120>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d003      	beq.n	8006cf8 <TIM_Base_SetConfig+0x40>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a3a      	ldr	r2, [pc, #232]	; (8006ddc <TIM_Base_SetConfig+0x124>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d108      	bne.n	8006d0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a2f      	ldr	r2, [pc, #188]	; (8006dcc <TIM_Base_SetConfig+0x114>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d02b      	beq.n	8006d6a <TIM_Base_SetConfig+0xb2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d18:	d027      	beq.n	8006d6a <TIM_Base_SetConfig+0xb2>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a2c      	ldr	r2, [pc, #176]	; (8006dd0 <TIM_Base_SetConfig+0x118>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d023      	beq.n	8006d6a <TIM_Base_SetConfig+0xb2>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a2b      	ldr	r2, [pc, #172]	; (8006dd4 <TIM_Base_SetConfig+0x11c>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d01f      	beq.n	8006d6a <TIM_Base_SetConfig+0xb2>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a2a      	ldr	r2, [pc, #168]	; (8006dd8 <TIM_Base_SetConfig+0x120>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d01b      	beq.n	8006d6a <TIM_Base_SetConfig+0xb2>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a29      	ldr	r2, [pc, #164]	; (8006ddc <TIM_Base_SetConfig+0x124>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d017      	beq.n	8006d6a <TIM_Base_SetConfig+0xb2>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a28      	ldr	r2, [pc, #160]	; (8006de0 <TIM_Base_SetConfig+0x128>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d013      	beq.n	8006d6a <TIM_Base_SetConfig+0xb2>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a27      	ldr	r2, [pc, #156]	; (8006de4 <TIM_Base_SetConfig+0x12c>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00f      	beq.n	8006d6a <TIM_Base_SetConfig+0xb2>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a26      	ldr	r2, [pc, #152]	; (8006de8 <TIM_Base_SetConfig+0x130>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00b      	beq.n	8006d6a <TIM_Base_SetConfig+0xb2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a25      	ldr	r2, [pc, #148]	; (8006dec <TIM_Base_SetConfig+0x134>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d007      	beq.n	8006d6a <TIM_Base_SetConfig+0xb2>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a24      	ldr	r2, [pc, #144]	; (8006df0 <TIM_Base_SetConfig+0x138>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d003      	beq.n	8006d6a <TIM_Base_SetConfig+0xb2>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a23      	ldr	r2, [pc, #140]	; (8006df4 <TIM_Base_SetConfig+0x13c>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d108      	bne.n	8006d7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a0a      	ldr	r2, [pc, #40]	; (8006dcc <TIM_Base_SetConfig+0x114>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d003      	beq.n	8006db0 <TIM_Base_SetConfig+0xf8>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a0c      	ldr	r2, [pc, #48]	; (8006ddc <TIM_Base_SetConfig+0x124>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d103      	bne.n	8006db8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	691a      	ldr	r2, [r3, #16]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	615a      	str	r2, [r3, #20]
}
 8006dbe:	bf00      	nop
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	40010000 	.word	0x40010000
 8006dd0:	40000400 	.word	0x40000400
 8006dd4:	40000800 	.word	0x40000800
 8006dd8:	40000c00 	.word	0x40000c00
 8006ddc:	40010400 	.word	0x40010400
 8006de0:	40014000 	.word	0x40014000
 8006de4:	40014400 	.word	0x40014400
 8006de8:	40014800 	.word	0x40014800
 8006dec:	40001800 	.word	0x40001800
 8006df0:	40001c00 	.word	0x40001c00
 8006df4:	40002000 	.word	0x40002000

08006df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8006e42:	2300      	movs	r3, #0
 8006e44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d027      	beq.n	8006e9e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	4b2f      	ldr	r3, [pc, #188]	; (8006f14 <FMC_SDRAM_Init+0xe0>)
 8006e58:	4013      	ands	r3, r2
 8006e5a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006e64:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8006e6a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8006e70:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8006e76:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8006e7c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8006e82:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8006e88:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006e8e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	601a      	str	r2, [r3, #0]
 8006e9c:	e032      	b.n	8006f04 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006eaa:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006eb4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006eba:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	4b12      	ldr	r3, [pc, #72]	; (8006f14 <FMC_SDRAM_Init+0xe0>)
 8006ecc:	4013      	ands	r3, r2
 8006ece:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006ed8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8006ede:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8006ee4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8006eea:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8006ef0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	ffff8000 	.word	0xffff8000

08006f18 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8006f24:	2300      	movs	r3, #0
 8006f26:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d02e      	beq.n	8006f90 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006f3e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006f4e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	3b01      	subs	r3, #1
 8006f56:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006f58:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006f62:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8006f6c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006f76:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006f80:	4313      	orrs	r3, r2
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	609a      	str	r2, [r3, #8]
 8006f8e:	e039      	b.n	8007004 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	4b1e      	ldr	r3, [pc, #120]	; (8007014 <FMC_SDRAM_Timing_Init+0xfc>)
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006fc2:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006fd2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8006fdc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006fe6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	371c      	adds	r7, #28
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	ff0f0fff 	.word	0xff0f0fff

08007018 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8007024:	2300      	movs	r3, #0
 8007026:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007030:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	3b01      	subs	r3, #1
 8007038:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800703a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007042:	4313      	orrs	r3, r2
 8007044:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	371c      	adds	r7, #28
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800705a:	b480      	push	{r7}
 800705c:	b083      	sub	sp, #12
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	695a      	ldr	r2, [r3, #20]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	005b      	lsls	r3, r3, #1
 800706c:	431a      	orrs	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	4603      	mov	r3, r0
 8007088:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800708a:	2300      	movs	r3, #0
 800708c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800708e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007092:	2b84      	cmp	r3, #132	; 0x84
 8007094:	d005      	beq.n	80070a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007096:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	4413      	add	r3, r2
 800709e:	3303      	adds	r3, #3
 80070a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80070a2:	68fb      	ldr	r3, [r7, #12]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80070b4:	f001 f86c 	bl	8008190 <vTaskStartScheduler>
  
  return osOK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	bd80      	pop	{r7, pc}

080070be <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80070be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070c0:	b087      	sub	sp, #28
 80070c2:	af02      	add	r7, sp, #8
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685c      	ldr	r4, [r3, #4]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070d4:	b29e      	uxth	r6, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80070dc:	4618      	mov	r0, r3
 80070de:	f7ff ffcf 	bl	8007080 <makeFreeRtosPriority>
 80070e2:	4602      	mov	r2, r0
 80070e4:	f107 030c 	add.w	r3, r7, #12
 80070e8:	9301      	str	r3, [sp, #4]
 80070ea:	9200      	str	r2, [sp, #0]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	4632      	mov	r2, r6
 80070f0:	4629      	mov	r1, r5
 80070f2:	4620      	mov	r0, r4
 80070f4:	f000 fee0 	bl	8007eb8 <xTaskCreate>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d001      	beq.n	8007102 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80070fe:	2300      	movs	r3, #0
 8007100:	e000      	b.n	8007104 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8007102:	68fb      	ldr	r3, [r7, #12]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800710c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <osDelay+0x16>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	e000      	b.n	8007124 <osDelay+0x18>
 8007122:	2301      	movs	r3, #1
 8007124:	4618      	mov	r0, r3
 8007126:	f000 fffd 	bl	8008124 <vTaskDelay>
  
  return osOK;
 800712a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f103 0208 	add.w	r2, r3, #8
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f04f 32ff 	mov.w	r2, #4294967295
 800714c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f103 0208 	add.w	r2, r3, #8
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f103 0208 	add.w	r2, r3, #8
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007182:	bf00      	nop
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800718e:	b480      	push	{r7}
 8007190:	b085      	sub	sp, #20
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	689a      	ldr	r2, [r3, #8]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	1c5a      	adds	r2, r3, #1
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	601a      	str	r2, [r3, #0]
}
 80071ca:	bf00      	nop
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071d6:	b480      	push	{r7}
 80071d8:	b085      	sub	sp, #20
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ec:	d103      	bne.n	80071f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	60fb      	str	r3, [r7, #12]
 80071f4:	e00c      	b.n	8007210 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	3308      	adds	r3, #8
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	e002      	b.n	8007204 <vListInsert+0x2e>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	429a      	cmp	r2, r3
 800720e:	d2f6      	bcs.n	80071fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	685a      	ldr	r2, [r3, #4]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	1c5a      	adds	r2, r3, #1
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	601a      	str	r2, [r3, #0]
}
 800723c:	bf00      	nop
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	6892      	ldr	r2, [r2, #8]
 800725e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	6852      	ldr	r2, [r2, #4]
 8007268:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	429a      	cmp	r2, r3
 8007272:	d103      	bne.n	800727c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	689a      	ldr	r2, [r3, #8]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	1e5a      	subs	r2, r3, #1
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10b      	bne.n	80072c8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80072b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b4:	b672      	cpsid	i
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	b662      	cpsie	i
 80072c4:	60bb      	str	r3, [r7, #8]
 80072c6:	e7fe      	b.n	80072c6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80072c8:	f001 feb6 	bl	8009038 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d4:	68f9      	ldr	r1, [r7, #12]
 80072d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80072d8:	fb01 f303 	mul.w	r3, r1, r3
 80072dc:	441a      	add	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f8:	3b01      	subs	r3, #1
 80072fa:	68f9      	ldr	r1, [r7, #12]
 80072fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80072fe:	fb01 f303 	mul.w	r3, r1, r3
 8007302:	441a      	add	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	22ff      	movs	r2, #255	; 0xff
 800730c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	22ff      	movs	r2, #255	; 0xff
 8007314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d114      	bne.n	8007348 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d01a      	beq.n	800735c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	3310      	adds	r3, #16
 800732a:	4618      	mov	r0, r3
 800732c:	f001 f98c 	bl	8008648 <xTaskRemoveFromEventList>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d012      	beq.n	800735c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007336:	4b0d      	ldr	r3, [pc, #52]	; (800736c <xQueueGenericReset+0xd0>)
 8007338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	e009      	b.n	800735c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	3310      	adds	r3, #16
 800734c:	4618      	mov	r0, r3
 800734e:	f7ff fef1 	bl	8007134 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	3324      	adds	r3, #36	; 0x24
 8007356:	4618      	mov	r0, r3
 8007358:	f7ff feec 	bl	8007134 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800735c:	f001 fe9e 	bl	800909c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007360:	2301      	movs	r3, #1
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	e000ed04 	.word	0xe000ed04

08007370 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007370:	b580      	push	{r7, lr}
 8007372:	b08a      	sub	sp, #40	; 0x28
 8007374:	af02      	add	r7, sp, #8
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	4613      	mov	r3, r2
 800737c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10b      	bne.n	800739c <xQueueGenericCreate+0x2c>
 8007384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007388:	b672      	cpsid	i
 800738a:	f383 8811 	msr	BASEPRI, r3
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	f3bf 8f4f 	dsb	sy
 8007396:	b662      	cpsie	i
 8007398:	613b      	str	r3, [r7, #16]
 800739a:	e7fe      	b.n	800739a <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d102      	bne.n	80073a8 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	61fb      	str	r3, [r7, #28]
 80073a6:	e004      	b.n	80073b2 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	fb02 f303 	mul.w	r3, r2, r3
 80073b0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	3348      	adds	r3, #72	; 0x48
 80073b6:	4618      	mov	r0, r3
 80073b8:	f001 ff60 	bl	800927c <pvPortMalloc>
 80073bc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00b      	beq.n	80073dc <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	3348      	adds	r3, #72	; 0x48
 80073c8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073ca:	79fa      	ldrb	r2, [r7, #7]
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	4613      	mov	r3, r2
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	68b9      	ldr	r1, [r7, #8]
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f000 f805 	bl	80073e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80073dc:	69bb      	ldr	r3, [r7, #24]
	}
 80073de:	4618      	mov	r0, r3
 80073e0:	3720      	adds	r7, #32
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b084      	sub	sp, #16
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	60f8      	str	r0, [r7, #12]
 80073ee:	60b9      	str	r1, [r7, #8]
 80073f0:	607a      	str	r2, [r7, #4]
 80073f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d103      	bne.n	8007402 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	e002      	b.n	8007408 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007414:	2101      	movs	r1, #1
 8007416:	69b8      	ldr	r0, [r7, #24]
 8007418:	f7ff ff40 	bl	800729c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800741c:	bf00      	nop
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b08e      	sub	sp, #56	; 0x38
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
 8007430:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007432:	2300      	movs	r3, #0
 8007434:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10b      	bne.n	8007458 <xQueueGenericSend+0x34>
 8007440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007444:	b672      	cpsid	i
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	b662      	cpsie	i
 8007454:	62bb      	str	r3, [r7, #40]	; 0x28
 8007456:	e7fe      	b.n	8007456 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d103      	bne.n	8007466 <xQueueGenericSend+0x42>
 800745e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <xQueueGenericSend+0x46>
 8007466:	2301      	movs	r3, #1
 8007468:	e000      	b.n	800746c <xQueueGenericSend+0x48>
 800746a:	2300      	movs	r3, #0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10b      	bne.n	8007488 <xQueueGenericSend+0x64>
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	b672      	cpsid	i
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	b662      	cpsie	i
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
 8007486:	e7fe      	b.n	8007486 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	2b02      	cmp	r3, #2
 800748c:	d103      	bne.n	8007496 <xQueueGenericSend+0x72>
 800748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007492:	2b01      	cmp	r3, #1
 8007494:	d101      	bne.n	800749a <xQueueGenericSend+0x76>
 8007496:	2301      	movs	r3, #1
 8007498:	e000      	b.n	800749c <xQueueGenericSend+0x78>
 800749a:	2300      	movs	r3, #0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10b      	bne.n	80074b8 <xQueueGenericSend+0x94>
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	b672      	cpsid	i
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	b662      	cpsie	i
 80074b4:	623b      	str	r3, [r7, #32]
 80074b6:	e7fe      	b.n	80074b6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074b8:	f001 fa6c 	bl	8008994 <xTaskGetSchedulerState>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d102      	bne.n	80074c8 <xQueueGenericSend+0xa4>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <xQueueGenericSend+0xa8>
 80074c8:	2301      	movs	r3, #1
 80074ca:	e000      	b.n	80074ce <xQueueGenericSend+0xaa>
 80074cc:	2300      	movs	r3, #0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10b      	bne.n	80074ea <xQueueGenericSend+0xc6>
 80074d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d6:	b672      	cpsid	i
 80074d8:	f383 8811 	msr	BASEPRI, r3
 80074dc:	f3bf 8f6f 	isb	sy
 80074e0:	f3bf 8f4f 	dsb	sy
 80074e4:	b662      	cpsie	i
 80074e6:	61fb      	str	r3, [r7, #28]
 80074e8:	e7fe      	b.n	80074e8 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074ea:	f001 fda5 	bl	8009038 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d302      	bcc.n	8007500 <xQueueGenericSend+0xdc>
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d129      	bne.n	8007554 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007500:	683a      	ldr	r2, [r7, #0]
 8007502:	68b9      	ldr	r1, [r7, #8]
 8007504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007506:	f000 fbc7 	bl	8007c98 <prvCopyDataToQueue>
 800750a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800750c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007510:	2b00      	cmp	r3, #0
 8007512:	d010      	beq.n	8007536 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	3324      	adds	r3, #36	; 0x24
 8007518:	4618      	mov	r0, r3
 800751a:	f001 f895 	bl	8008648 <xTaskRemoveFromEventList>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d013      	beq.n	800754c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007524:	4b3f      	ldr	r3, [pc, #252]	; (8007624 <xQueueGenericSend+0x200>)
 8007526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800752a:	601a      	str	r2, [r3, #0]
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	e00a      	b.n	800754c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007538:	2b00      	cmp	r3, #0
 800753a:	d007      	beq.n	800754c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800753c:	4b39      	ldr	r3, [pc, #228]	; (8007624 <xQueueGenericSend+0x200>)
 800753e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800754c:	f001 fda6 	bl	800909c <vPortExitCritical>
				return pdPASS;
 8007550:	2301      	movs	r3, #1
 8007552:	e063      	b.n	800761c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d103      	bne.n	8007562 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800755a:	f001 fd9f 	bl	800909c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800755e:	2300      	movs	r3, #0
 8007560:	e05c      	b.n	800761c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007564:	2b00      	cmp	r3, #0
 8007566:	d106      	bne.n	8007576 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007568:	f107 0314 	add.w	r3, r7, #20
 800756c:	4618      	mov	r0, r3
 800756e:	f001 f8cf 	bl	8008710 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007572:	2301      	movs	r3, #1
 8007574:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007576:	f001 fd91 	bl	800909c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800757a:	f000 fe53 	bl	8008224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800757e:	f001 fd5b 	bl	8009038 <vPortEnterCritical>
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007588:	b25b      	sxtb	r3, r3
 800758a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758e:	d103      	bne.n	8007598 <xQueueGenericSend+0x174>
 8007590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007592:	2200      	movs	r2, #0
 8007594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800759e:	b25b      	sxtb	r3, r3
 80075a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a4:	d103      	bne.n	80075ae <xQueueGenericSend+0x18a>
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075ae:	f001 fd75 	bl	800909c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075b2:	1d3a      	adds	r2, r7, #4
 80075b4:	f107 0314 	add.w	r3, r7, #20
 80075b8:	4611      	mov	r1, r2
 80075ba:	4618      	mov	r0, r3
 80075bc:	f001 f8be 	bl	800873c <xTaskCheckForTimeOut>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d124      	bne.n	8007610 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80075c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075c8:	f000 fc5e 	bl	8007e88 <prvIsQueueFull>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d018      	beq.n	8007604 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d4:	3310      	adds	r3, #16
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	4611      	mov	r1, r2
 80075da:	4618      	mov	r0, r3
 80075dc:	f001 f80e 	bl	80085fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80075e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075e2:	f000 fbe9 	bl	8007db8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80075e6:	f000 fe2b 	bl	8008240 <xTaskResumeAll>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f47f af7c 	bne.w	80074ea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80075f2:	4b0c      	ldr	r3, [pc, #48]	; (8007624 <xQueueGenericSend+0x200>)
 80075f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075f8:	601a      	str	r2, [r3, #0]
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	e772      	b.n	80074ea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007606:	f000 fbd7 	bl	8007db8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800760a:	f000 fe19 	bl	8008240 <xTaskResumeAll>
 800760e:	e76c      	b.n	80074ea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007612:	f000 fbd1 	bl	8007db8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007616:	f000 fe13 	bl	8008240 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800761a:	2300      	movs	r3, #0
		}
	}
}
 800761c:	4618      	mov	r0, r3
 800761e:	3738      	adds	r7, #56	; 0x38
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	e000ed04 	.word	0xe000ed04

08007628 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08e      	sub	sp, #56	; 0x38
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
 8007634:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10b      	bne.n	8007658 <xQueueGenericSendFromISR+0x30>
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	b672      	cpsid	i
 8007646:	f383 8811 	msr	BASEPRI, r3
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	b662      	cpsie	i
 8007654:	627b      	str	r3, [r7, #36]	; 0x24
 8007656:	e7fe      	b.n	8007656 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d103      	bne.n	8007666 <xQueueGenericSendFromISR+0x3e>
 800765e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <xQueueGenericSendFromISR+0x42>
 8007666:	2301      	movs	r3, #1
 8007668:	e000      	b.n	800766c <xQueueGenericSendFromISR+0x44>
 800766a:	2300      	movs	r3, #0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10b      	bne.n	8007688 <xQueueGenericSendFromISR+0x60>
 8007670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007674:	b672      	cpsid	i
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	b662      	cpsie	i
 8007684:	623b      	str	r3, [r7, #32]
 8007686:	e7fe      	b.n	8007686 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b02      	cmp	r3, #2
 800768c:	d103      	bne.n	8007696 <xQueueGenericSendFromISR+0x6e>
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007692:	2b01      	cmp	r3, #1
 8007694:	d101      	bne.n	800769a <xQueueGenericSendFromISR+0x72>
 8007696:	2301      	movs	r3, #1
 8007698:	e000      	b.n	800769c <xQueueGenericSendFromISR+0x74>
 800769a:	2300      	movs	r3, #0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10b      	bne.n	80076b8 <xQueueGenericSendFromISR+0x90>
 80076a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a4:	b672      	cpsid	i
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	b662      	cpsie	i
 80076b4:	61fb      	str	r3, [r7, #28]
 80076b6:	e7fe      	b.n	80076b6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076b8:	f001 fd9e 	bl	80091f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80076bc:	f3ef 8211 	mrs	r2, BASEPRI
 80076c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c4:	b672      	cpsid	i
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	b662      	cpsie	i
 80076d4:	61ba      	str	r2, [r7, #24]
 80076d6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80076d8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076da:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d302      	bcc.n	80076ee <xQueueGenericSendFromISR+0xc6>
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d12c      	bne.n	8007748 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80076f8:	683a      	ldr	r2, [r7, #0]
 80076fa:	68b9      	ldr	r1, [r7, #8]
 80076fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076fe:	f000 facb 	bl	8007c98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007702:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800770a:	d112      	bne.n	8007732 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800770c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	2b00      	cmp	r3, #0
 8007712:	d016      	beq.n	8007742 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007716:	3324      	adds	r3, #36	; 0x24
 8007718:	4618      	mov	r0, r3
 800771a:	f000 ff95 	bl	8008648 <xTaskRemoveFromEventList>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00e      	beq.n	8007742 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00b      	beq.n	8007742 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	601a      	str	r2, [r3, #0]
 8007730:	e007      	b.n	8007742 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007732:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007736:	3301      	adds	r3, #1
 8007738:	b2db      	uxtb	r3, r3
 800773a:	b25a      	sxtb	r2, r3
 800773c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007742:	2301      	movs	r3, #1
 8007744:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007746:	e001      	b.n	800774c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007748:	2300      	movs	r3, #0
 800774a:	637b      	str	r3, [r7, #52]	; 0x34
 800774c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007758:	4618      	mov	r0, r3
 800775a:	3738      	adds	r7, #56	; 0x38
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b08e      	sub	sp, #56	; 0x38
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800776e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10b      	bne.n	800778c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007778:	b672      	cpsid	i
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	b662      	cpsie	i
 8007788:	623b      	str	r3, [r7, #32]
 800778a:	e7fe      	b.n	800778a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800778c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00b      	beq.n	80077ac <xQueueGiveFromISR+0x4c>
 8007794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007798:	b672      	cpsid	i
 800779a:	f383 8811 	msr	BASEPRI, r3
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	b662      	cpsie	i
 80077a8:	61fb      	str	r3, [r7, #28]
 80077aa:	e7fe      	b.n	80077aa <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80077ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d103      	bne.n	80077bc <xQueueGiveFromISR+0x5c>
 80077b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <xQueueGiveFromISR+0x60>
 80077bc:	2301      	movs	r3, #1
 80077be:	e000      	b.n	80077c2 <xQueueGiveFromISR+0x62>
 80077c0:	2300      	movs	r3, #0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10b      	bne.n	80077de <xQueueGiveFromISR+0x7e>
 80077c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ca:	b672      	cpsid	i
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	b662      	cpsie	i
 80077da:	61bb      	str	r3, [r7, #24]
 80077dc:	e7fe      	b.n	80077dc <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077de:	f001 fd0b 	bl	80091f8 <vPortValidateInterruptPriority>
	__asm volatile
 80077e2:	f3ef 8211 	mrs	r2, BASEPRI
 80077e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ea:	b672      	cpsid	i
 80077ec:	f383 8811 	msr	BASEPRI, r3
 80077f0:	f3bf 8f6f 	isb	sy
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	b662      	cpsie	i
 80077fa:	617a      	str	r2, [r7, #20]
 80077fc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80077fe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007800:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007806:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800780c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800780e:	429a      	cmp	r2, r3
 8007810:	d22b      	bcs.n	800786a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007814:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800781c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781e:	1c5a      	adds	r2, r3, #1
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007822:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007824:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782c:	d112      	bne.n	8007854 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007832:	2b00      	cmp	r3, #0
 8007834:	d016      	beq.n	8007864 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007838:	3324      	adds	r3, #36	; 0x24
 800783a:	4618      	mov	r0, r3
 800783c:	f000 ff04 	bl	8008648 <xTaskRemoveFromEventList>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00e      	beq.n	8007864 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00b      	beq.n	8007864 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2201      	movs	r2, #1
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	e007      	b.n	8007864 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007858:	3301      	adds	r3, #1
 800785a:	b2db      	uxtb	r3, r3
 800785c:	b25a      	sxtb	r2, r3
 800785e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007864:	2301      	movs	r3, #1
 8007866:	637b      	str	r3, [r7, #52]	; 0x34
 8007868:	e001      	b.n	800786e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800786a:	2300      	movs	r3, #0
 800786c:	637b      	str	r3, [r7, #52]	; 0x34
 800786e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007870:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800787a:	4618      	mov	r0, r3
 800787c:	3738      	adds	r7, #56	; 0x38
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
	...

08007884 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b08c      	sub	sp, #48	; 0x30
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007890:	2300      	movs	r3, #0
 8007892:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10b      	bne.n	80078b6 <xQueueReceive+0x32>
	__asm volatile
 800789e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a2:	b672      	cpsid	i
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	b662      	cpsie	i
 80078b2:	623b      	str	r3, [r7, #32]
 80078b4:	e7fe      	b.n	80078b4 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d103      	bne.n	80078c4 <xQueueReceive+0x40>
 80078bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <xQueueReceive+0x44>
 80078c4:	2301      	movs	r3, #1
 80078c6:	e000      	b.n	80078ca <xQueueReceive+0x46>
 80078c8:	2300      	movs	r3, #0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10b      	bne.n	80078e6 <xQueueReceive+0x62>
 80078ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d2:	b672      	cpsid	i
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	b662      	cpsie	i
 80078e2:	61fb      	str	r3, [r7, #28]
 80078e4:	e7fe      	b.n	80078e4 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078e6:	f001 f855 	bl	8008994 <xTaskGetSchedulerState>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d102      	bne.n	80078f6 <xQueueReceive+0x72>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <xQueueReceive+0x76>
 80078f6:	2301      	movs	r3, #1
 80078f8:	e000      	b.n	80078fc <xQueueReceive+0x78>
 80078fa:	2300      	movs	r3, #0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10b      	bne.n	8007918 <xQueueReceive+0x94>
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	b672      	cpsid	i
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	b662      	cpsie	i
 8007914:	61bb      	str	r3, [r7, #24]
 8007916:	e7fe      	b.n	8007916 <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007918:	f001 fb8e 	bl	8009038 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800791c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007920:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007924:	2b00      	cmp	r3, #0
 8007926:	d01f      	beq.n	8007968 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007928:	68b9      	ldr	r1, [r7, #8]
 800792a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800792c:	f000 fa1e 	bl	8007d6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	1e5a      	subs	r2, r3, #1
 8007934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007936:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00f      	beq.n	8007960 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007942:	3310      	adds	r3, #16
 8007944:	4618      	mov	r0, r3
 8007946:	f000 fe7f 	bl	8008648 <xTaskRemoveFromEventList>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d007      	beq.n	8007960 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007950:	4b3c      	ldr	r3, [pc, #240]	; (8007a44 <xQueueReceive+0x1c0>)
 8007952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007960:	f001 fb9c 	bl	800909c <vPortExitCritical>
				return pdPASS;
 8007964:	2301      	movs	r3, #1
 8007966:	e069      	b.n	8007a3c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d103      	bne.n	8007976 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800796e:	f001 fb95 	bl	800909c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007972:	2300      	movs	r3, #0
 8007974:	e062      	b.n	8007a3c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007978:	2b00      	cmp	r3, #0
 800797a:	d106      	bne.n	800798a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800797c:	f107 0310 	add.w	r3, r7, #16
 8007980:	4618      	mov	r0, r3
 8007982:	f000 fec5 	bl	8008710 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007986:	2301      	movs	r3, #1
 8007988:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800798a:	f001 fb87 	bl	800909c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800798e:	f000 fc49 	bl	8008224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007992:	f001 fb51 	bl	8009038 <vPortEnterCritical>
 8007996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800799c:	b25b      	sxtb	r3, r3
 800799e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a2:	d103      	bne.n	80079ac <xQueueReceive+0x128>
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079b2:	b25b      	sxtb	r3, r3
 80079b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b8:	d103      	bne.n	80079c2 <xQueueReceive+0x13e>
 80079ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079c2:	f001 fb6b 	bl	800909c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079c6:	1d3a      	adds	r2, r7, #4
 80079c8:	f107 0310 	add.w	r3, r7, #16
 80079cc:	4611      	mov	r1, r2
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 feb4 	bl	800873c <xTaskCheckForTimeOut>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d123      	bne.n	8007a22 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079dc:	f000 fa3e 	bl	8007e5c <prvIsQueueEmpty>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d017      	beq.n	8007a16 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80079e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e8:	3324      	adds	r3, #36	; 0x24
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	4611      	mov	r1, r2
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 fe04 	bl	80085fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80079f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079f6:	f000 f9df 	bl	8007db8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80079fa:	f000 fc21 	bl	8008240 <xTaskResumeAll>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d189      	bne.n	8007918 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007a04:	4b0f      	ldr	r3, [pc, #60]	; (8007a44 <xQueueReceive+0x1c0>)
 8007a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a0a:	601a      	str	r2, [r3, #0]
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	e780      	b.n	8007918 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007a16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a18:	f000 f9ce 	bl	8007db8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a1c:	f000 fc10 	bl	8008240 <xTaskResumeAll>
 8007a20:	e77a      	b.n	8007918 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a24:	f000 f9c8 	bl	8007db8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a28:	f000 fc0a 	bl	8008240 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a2e:	f000 fa15 	bl	8007e5c <prvIsQueueEmpty>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f43f af6f 	beq.w	8007918 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a3a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3730      	adds	r7, #48	; 0x30
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	e000ed04 	.word	0xe000ed04

08007a48 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b08e      	sub	sp, #56	; 0x38
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a52:	2300      	movs	r3, #0
 8007a54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10b      	bne.n	8007a7c <xQueueSemaphoreTake+0x34>
 8007a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a68:	b672      	cpsid	i
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	b662      	cpsie	i
 8007a78:	623b      	str	r3, [r7, #32]
 8007a7a:	e7fe      	b.n	8007a7a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00b      	beq.n	8007a9c <xQueueSemaphoreTake+0x54>
 8007a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a88:	b672      	cpsid	i
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	b662      	cpsie	i
 8007a98:	61fb      	str	r3, [r7, #28]
 8007a9a:	e7fe      	b.n	8007a9a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a9c:	f000 ff7a 	bl	8008994 <xTaskGetSchedulerState>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d102      	bne.n	8007aac <xQueueSemaphoreTake+0x64>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <xQueueSemaphoreTake+0x68>
 8007aac:	2301      	movs	r3, #1
 8007aae:	e000      	b.n	8007ab2 <xQueueSemaphoreTake+0x6a>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10b      	bne.n	8007ace <xQueueSemaphoreTake+0x86>
 8007ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aba:	b672      	cpsid	i
 8007abc:	f383 8811 	msr	BASEPRI, r3
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	b662      	cpsie	i
 8007aca:	61bb      	str	r3, [r7, #24]
 8007acc:	e7fe      	b.n	8007acc <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ace:	f001 fab3 	bl	8009038 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d024      	beq.n	8007b28 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae0:	1e5a      	subs	r2, r3, #1
 8007ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d104      	bne.n	8007af8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007aee:	f001 f91f 	bl	8008d30 <pvTaskIncrementMutexHeldCount>
 8007af2:	4602      	mov	r2, r0
 8007af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af6:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00f      	beq.n	8007b20 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b02:	3310      	adds	r3, #16
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 fd9f 	bl	8008648 <xTaskRemoveFromEventList>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d007      	beq.n	8007b20 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b10:	4b54      	ldr	r3, [pc, #336]	; (8007c64 <xQueueSemaphoreTake+0x21c>)
 8007b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b20:	f001 fabc 	bl	800909c <vPortExitCritical>
				return pdPASS;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e098      	b.n	8007c5a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d112      	bne.n	8007b54 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00b      	beq.n	8007b4c <xQueueSemaphoreTake+0x104>
 8007b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b38:	b672      	cpsid	i
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	b662      	cpsie	i
 8007b48:	617b      	str	r3, [r7, #20]
 8007b4a:	e7fe      	b.n	8007b4a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007b4c:	f001 faa6 	bl	800909c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b50:	2300      	movs	r3, #0
 8007b52:	e082      	b.n	8007c5a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d106      	bne.n	8007b68 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b5a:	f107 030c 	add.w	r3, r7, #12
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 fdd6 	bl	8008710 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b64:	2301      	movs	r3, #1
 8007b66:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b68:	f001 fa98 	bl	800909c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b6c:	f000 fb5a 	bl	8008224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b70:	f001 fa62 	bl	8009038 <vPortEnterCritical>
 8007b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b7a:	b25b      	sxtb	r3, r3
 8007b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b80:	d103      	bne.n	8007b8a <xQueueSemaphoreTake+0x142>
 8007b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b90:	b25b      	sxtb	r3, r3
 8007b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b96:	d103      	bne.n	8007ba0 <xQueueSemaphoreTake+0x158>
 8007b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ba0:	f001 fa7c 	bl	800909c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ba4:	463a      	mov	r2, r7
 8007ba6:	f107 030c 	add.w	r3, r7, #12
 8007baa:	4611      	mov	r1, r2
 8007bac:	4618      	mov	r0, r3
 8007bae:	f000 fdc5 	bl	800873c <xTaskCheckForTimeOut>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d132      	bne.n	8007c1e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bba:	f000 f94f 	bl	8007e5c <prvIsQueueEmpty>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d026      	beq.n	8007c12 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d109      	bne.n	8007be0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007bcc:	f001 fa34 	bl	8009038 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 fefb 	bl	80089d0 <xTaskPriorityInherit>
 8007bda:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007bdc:	f001 fa5e 	bl	800909c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be2:	3324      	adds	r3, #36	; 0x24
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	4611      	mov	r1, r2
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 fd07 	bl	80085fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007bee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bf0:	f000 f8e2 	bl	8007db8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007bf4:	f000 fb24 	bl	8008240 <xTaskResumeAll>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f47f af67 	bne.w	8007ace <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007c00:	4b18      	ldr	r3, [pc, #96]	; (8007c64 <xQueueSemaphoreTake+0x21c>)
 8007c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c06:	601a      	str	r2, [r3, #0]
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	e75d      	b.n	8007ace <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007c12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c14:	f000 f8d0 	bl	8007db8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c18:	f000 fb12 	bl	8008240 <xTaskResumeAll>
 8007c1c:	e757      	b.n	8007ace <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007c1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c20:	f000 f8ca 	bl	8007db8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c24:	f000 fb0c 	bl	8008240 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c2a:	f000 f917 	bl	8007e5c <prvIsQueueEmpty>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f43f af4c 	beq.w	8007ace <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00d      	beq.n	8007c58 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007c3c:	f001 f9fc 	bl	8009038 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007c40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c42:	f000 f811 	bl	8007c68 <prvGetDisinheritPriorityAfterTimeout>
 8007c46:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8007c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 ffcc 	bl	8008bec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007c54:	f001 fa22 	bl	800909c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3738      	adds	r7, #56	; 0x38
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	e000ed04 	.word	0xe000ed04

08007c68 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d006      	beq.n	8007c86 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f1c3 0307 	rsb	r3, r3, #7
 8007c82:	60fb      	str	r3, [r7, #12]
 8007c84:	e001      	b.n	8007c8a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007c86:	2300      	movs	r3, #0
 8007c88:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
	}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10d      	bne.n	8007cd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d14d      	bne.n	8007d5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 ff0a 	bl	8008adc <xTaskPriorityDisinherit>
 8007cc8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	605a      	str	r2, [r3, #4]
 8007cd0:	e043      	b.n	8007d5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d119      	bne.n	8007d0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6898      	ldr	r0, [r3, #8]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	68b9      	ldr	r1, [r7, #8]
 8007ce4:	f01b fa5c 	bl	80231a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	689a      	ldr	r2, [r3, #8]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf0:	441a      	add	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	689a      	ldr	r2, [r3, #8]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d32b      	bcc.n	8007d5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	609a      	str	r2, [r3, #8]
 8007d0a:	e026      	b.n	8007d5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	68d8      	ldr	r0, [r3, #12]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d14:	461a      	mov	r2, r3
 8007d16:	68b9      	ldr	r1, [r7, #8]
 8007d18:	f01b fa42 	bl	80231a0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	68da      	ldr	r2, [r3, #12]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d24:	425b      	negs	r3, r3
 8007d26:	441a      	add	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	68da      	ldr	r2, [r3, #12]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d207      	bcs.n	8007d48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d40:	425b      	negs	r3, r3
 8007d42:	441a      	add	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d105      	bne.n	8007d5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	3b01      	subs	r3, #1
 8007d58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	1c5a      	adds	r2, r3, #1
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007d62:	697b      	ldr	r3, [r7, #20]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d018      	beq.n	8007db0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68da      	ldr	r2, [r3, #12]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d86:	441a      	add	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68da      	ldr	r2, [r3, #12]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d303      	bcc.n	8007da0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68d9      	ldr	r1, [r3, #12]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da8:	461a      	mov	r2, r3
 8007daa:	6838      	ldr	r0, [r7, #0]
 8007dac:	f01b f9f8 	bl	80231a0 <memcpy>
	}
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007dc0:	f001 f93a 	bl	8009038 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007dcc:	e011      	b.n	8007df2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d012      	beq.n	8007dfc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	3324      	adds	r3, #36	; 0x24
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f000 fc34 	bl	8008648 <xTaskRemoveFromEventList>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007de6:	f000 fd0d 	bl	8008804 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
 8007dec:	3b01      	subs	r3, #1
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	dce9      	bgt.n	8007dce <prvUnlockQueue+0x16>
 8007dfa:	e000      	b.n	8007dfe <prvUnlockQueue+0x46>
					break;
 8007dfc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	22ff      	movs	r2, #255	; 0xff
 8007e02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e06:	f001 f949 	bl	800909c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e0a:	f001 f915 	bl	8009038 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e16:	e011      	b.n	8007e3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d012      	beq.n	8007e46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	3310      	adds	r3, #16
 8007e24:	4618      	mov	r0, r3
 8007e26:	f000 fc0f 	bl	8008648 <xTaskRemoveFromEventList>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e30:	f000 fce8 	bl	8008804 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e34:	7bbb      	ldrb	r3, [r7, #14]
 8007e36:	3b01      	subs	r3, #1
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	dce9      	bgt.n	8007e18 <prvUnlockQueue+0x60>
 8007e44:	e000      	b.n	8007e48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	22ff      	movs	r2, #255	; 0xff
 8007e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007e50:	f001 f924 	bl	800909c <vPortExitCritical>
}
 8007e54:	bf00      	nop
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e64:	f001 f8e8 	bl	8009038 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d102      	bne.n	8007e76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e70:	2301      	movs	r3, #1
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	e001      	b.n	8007e7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e76:	2300      	movs	r3, #0
 8007e78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e7a:	f001 f90f 	bl	800909c <vPortExitCritical>

	return xReturn;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e90:	f001 f8d2 	bl	8009038 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d102      	bne.n	8007ea6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	e001      	b.n	8007eaa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007eaa:	f001 f8f7 	bl	800909c <vPortExitCritical>

	return xReturn;
 8007eae:	68fb      	ldr	r3, [r7, #12]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b08c      	sub	sp, #48	; 0x30
 8007ebc:	af04      	add	r7, sp, #16
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	603b      	str	r3, [r7, #0]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ec8:	88fb      	ldrh	r3, [r7, #6]
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f001 f9d5 	bl	800927c <pvPortMalloc>
 8007ed2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00e      	beq.n	8007ef8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007eda:	2058      	movs	r0, #88	; 0x58
 8007edc:	f001 f9ce 	bl	800927c <pvPortMalloc>
 8007ee0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d003      	beq.n	8007ef0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	631a      	str	r2, [r3, #48]	; 0x30
 8007eee:	e005      	b.n	8007efc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ef0:	6978      	ldr	r0, [r7, #20]
 8007ef2:	f001 fa8f 	bl	8009414 <vPortFree>
 8007ef6:	e001      	b.n	8007efc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d013      	beq.n	8007f2a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f02:	88fa      	ldrh	r2, [r7, #6]
 8007f04:	2300      	movs	r3, #0
 8007f06:	9303      	str	r3, [sp, #12]
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	9302      	str	r3, [sp, #8]
 8007f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0e:	9301      	str	r3, [sp, #4]
 8007f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	68b9      	ldr	r1, [r7, #8]
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 f80e 	bl	8007f3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f1e:	69f8      	ldr	r0, [r7, #28]
 8007f20:	f000 f896 	bl	8008050 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f24:	2301      	movs	r3, #1
 8007f26:	61bb      	str	r3, [r7, #24]
 8007f28:	e002      	b.n	8007f30 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f2e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f30:	69bb      	ldr	r3, [r7, #24]
	}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3720      	adds	r7, #32
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b088      	sub	sp, #32
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	60f8      	str	r0, [r7, #12]
 8007f42:	60b9      	str	r1, [r7, #8]
 8007f44:	607a      	str	r2, [r7, #4]
 8007f46:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	461a      	mov	r2, r3
 8007f52:	21a5      	movs	r1, #165	; 0xa5
 8007f54:	f01b f92f 	bl	80231b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f5c:	6879      	ldr	r1, [r7, #4]
 8007f5e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007f62:	440b      	add	r3, r1
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	f023 0307 	bic.w	r3, r3, #7
 8007f70:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	f003 0307 	and.w	r3, r3, #7
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00b      	beq.n	8007f94 <prvInitialiseNewTask+0x5a>
 8007f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f80:	b672      	cpsid	i
 8007f82:	f383 8811 	msr	BASEPRI, r3
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	b662      	cpsie	i
 8007f90:	617b      	str	r3, [r7, #20]
 8007f92:	e7fe      	b.n	8007f92 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f94:	2300      	movs	r3, #0
 8007f96:	61fb      	str	r3, [r7, #28]
 8007f98:	e012      	b.n	8007fc0 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	7819      	ldrb	r1, [r3, #0]
 8007fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	3334      	adds	r3, #52	; 0x34
 8007faa:	460a      	mov	r2, r1
 8007fac:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d006      	beq.n	8007fc8 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	61fb      	str	r3, [r7, #28]
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	2b0f      	cmp	r3, #15
 8007fc4:	d9e9      	bls.n	8007f9a <prvInitialiseNewTask+0x60>
 8007fc6:	e000      	b.n	8007fca <prvInitialiseNewTask+0x90>
		{
			break;
 8007fc8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd4:	2b06      	cmp	r3, #6
 8007fd6:	d901      	bls.n	8007fdc <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007fd8:	2306      	movs	r3, #6
 8007fda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fe0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fe6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fea:	2200      	movs	r2, #0
 8007fec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7ff f8be 	bl	8007174 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffa:	3318      	adds	r3, #24
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7ff f8b9 	bl	8007174 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008006:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800a:	f1c3 0207 	rsb	r2, r3, #7
 800800e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008010:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008016:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8008018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801a:	2200      	movs	r2, #0
 800801c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800801e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008020:	2200      	movs	r2, #0
 8008022:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	2200      	movs	r2, #0
 8008028:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	68f9      	ldr	r1, [r7, #12]
 8008030:	69b8      	ldr	r0, [r7, #24]
 8008032:	f000 fef7 	bl	8008e24 <pxPortInitialiseStack>
 8008036:	4602      	mov	r2, r0
 8008038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800803c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803e:	2b00      	cmp	r3, #0
 8008040:	d002      	beq.n	8008048 <prvInitialiseNewTask+0x10e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008046:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008048:	bf00      	nop
 800804a:	3720      	adds	r7, #32
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008058:	f000 ffee 	bl	8009038 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800805c:	4b2a      	ldr	r3, [pc, #168]	; (8008108 <prvAddNewTaskToReadyList+0xb8>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3301      	adds	r3, #1
 8008062:	4a29      	ldr	r2, [pc, #164]	; (8008108 <prvAddNewTaskToReadyList+0xb8>)
 8008064:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008066:	4b29      	ldr	r3, [pc, #164]	; (800810c <prvAddNewTaskToReadyList+0xbc>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d109      	bne.n	8008082 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800806e:	4a27      	ldr	r2, [pc, #156]	; (800810c <prvAddNewTaskToReadyList+0xbc>)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008074:	4b24      	ldr	r3, [pc, #144]	; (8008108 <prvAddNewTaskToReadyList+0xb8>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d110      	bne.n	800809e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800807c:	f000 fbe8 	bl	8008850 <prvInitialiseTaskLists>
 8008080:	e00d      	b.n	800809e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008082:	4b23      	ldr	r3, [pc, #140]	; (8008110 <prvAddNewTaskToReadyList+0xc0>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d109      	bne.n	800809e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800808a:	4b20      	ldr	r3, [pc, #128]	; (800810c <prvAddNewTaskToReadyList+0xbc>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008094:	429a      	cmp	r2, r3
 8008096:	d802      	bhi.n	800809e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008098:	4a1c      	ldr	r2, [pc, #112]	; (800810c <prvAddNewTaskToReadyList+0xbc>)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800809e:	4b1d      	ldr	r3, [pc, #116]	; (8008114 <prvAddNewTaskToReadyList+0xc4>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3301      	adds	r3, #1
 80080a4:	4a1b      	ldr	r2, [pc, #108]	; (8008114 <prvAddNewTaskToReadyList+0xc4>)
 80080a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ac:	2201      	movs	r2, #1
 80080ae:	409a      	lsls	r2, r3
 80080b0:	4b19      	ldr	r3, [pc, #100]	; (8008118 <prvAddNewTaskToReadyList+0xc8>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	4a18      	ldr	r2, [pc, #96]	; (8008118 <prvAddNewTaskToReadyList+0xc8>)
 80080b8:	6013      	str	r3, [r2, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080be:	4613      	mov	r3, r2
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4413      	add	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4a15      	ldr	r2, [pc, #84]	; (800811c <prvAddNewTaskToReadyList+0xcc>)
 80080c8:	441a      	add	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	3304      	adds	r3, #4
 80080ce:	4619      	mov	r1, r3
 80080d0:	4610      	mov	r0, r2
 80080d2:	f7ff f85c 	bl	800718e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080d6:	f000 ffe1 	bl	800909c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80080da:	4b0d      	ldr	r3, [pc, #52]	; (8008110 <prvAddNewTaskToReadyList+0xc0>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00e      	beq.n	8008100 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80080e2:	4b0a      	ldr	r3, [pc, #40]	; (800810c <prvAddNewTaskToReadyList+0xbc>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d207      	bcs.n	8008100 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80080f0:	4b0b      	ldr	r3, [pc, #44]	; (8008120 <prvAddNewTaskToReadyList+0xd0>)
 80080f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008100:	bf00      	nop
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	20000248 	.word	0x20000248
 800810c:	20000148 	.word	0x20000148
 8008110:	20000254 	.word	0x20000254
 8008114:	20000264 	.word	0x20000264
 8008118:	20000250 	.word	0x20000250
 800811c:	2000014c 	.word	0x2000014c
 8008120:	e000ed04 	.word	0xe000ed04

08008124 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800812c:	2300      	movs	r3, #0
 800812e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d018      	beq.n	8008168 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008136:	4b14      	ldr	r3, [pc, #80]	; (8008188 <vTaskDelay+0x64>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00b      	beq.n	8008156 <vTaskDelay+0x32>
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	b672      	cpsid	i
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	b662      	cpsie	i
 8008152:	60bb      	str	r3, [r7, #8]
 8008154:	e7fe      	b.n	8008154 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8008156:	f000 f865 	bl	8008224 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800815a:	2100      	movs	r1, #0
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fdfb 	bl	8008d58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008162:	f000 f86d 	bl	8008240 <xTaskResumeAll>
 8008166:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d107      	bne.n	800817e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800816e:	4b07      	ldr	r3, [pc, #28]	; (800818c <vTaskDelay+0x68>)
 8008170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800817e:	bf00      	nop
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20000270 	.word	0x20000270
 800818c:	e000ed04 	.word	0xe000ed04

08008190 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8008196:	4b1d      	ldr	r3, [pc, #116]	; (800820c <vTaskStartScheduler+0x7c>)
 8008198:	9301      	str	r3, [sp, #4]
 800819a:	2300      	movs	r3, #0
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	2300      	movs	r3, #0
 80081a0:	2280      	movs	r2, #128	; 0x80
 80081a2:	491b      	ldr	r1, [pc, #108]	; (8008210 <vTaskStartScheduler+0x80>)
 80081a4:	481b      	ldr	r0, [pc, #108]	; (8008214 <vTaskStartScheduler+0x84>)
 80081a6:	f7ff fe87 	bl	8007eb8 <xTaskCreate>
 80081aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d117      	bne.n	80081e2 <vTaskStartScheduler+0x52>
 80081b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b6:	b672      	cpsid	i
 80081b8:	f383 8811 	msr	BASEPRI, r3
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	b662      	cpsie	i
 80081c6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80081c8:	4b13      	ldr	r3, [pc, #76]	; (8008218 <vTaskStartScheduler+0x88>)
 80081ca:	f04f 32ff 	mov.w	r2, #4294967295
 80081ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80081d0:	4b12      	ldr	r3, [pc, #72]	; (800821c <vTaskStartScheduler+0x8c>)
 80081d2:	2201      	movs	r2, #1
 80081d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80081d6:	4b12      	ldr	r3, [pc, #72]	; (8008220 <vTaskStartScheduler+0x90>)
 80081d8:	2200      	movs	r2, #0
 80081da:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80081dc:	f000 feb0 	bl	8008f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80081e0:	e00f      	b.n	8008202 <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e8:	d10b      	bne.n	8008202 <vTaskStartScheduler+0x72>
 80081ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ee:	b672      	cpsid	i
 80081f0:	f383 8811 	msr	BASEPRI, r3
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	b662      	cpsie	i
 80081fe:	607b      	str	r3, [r7, #4]
 8008200:	e7fe      	b.n	8008200 <vTaskStartScheduler+0x70>
}
 8008202:	bf00      	nop
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	2000026c 	.word	0x2000026c
 8008210:	080240ec 	.word	0x080240ec
 8008214:	0800881d 	.word	0x0800881d
 8008218:	20000268 	.word	0x20000268
 800821c:	20000254 	.word	0x20000254
 8008220:	2000024c 	.word	0x2000024c

08008224 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008224:	b480      	push	{r7}
 8008226:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008228:	4b04      	ldr	r3, [pc, #16]	; (800823c <vTaskSuspendAll+0x18>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3301      	adds	r3, #1
 800822e:	4a03      	ldr	r2, [pc, #12]	; (800823c <vTaskSuspendAll+0x18>)
 8008230:	6013      	str	r3, [r2, #0]
}
 8008232:	bf00      	nop
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	20000270 	.word	0x20000270

08008240 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008246:	2300      	movs	r3, #0
 8008248:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800824a:	2300      	movs	r3, #0
 800824c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800824e:	4b42      	ldr	r3, [pc, #264]	; (8008358 <xTaskResumeAll+0x118>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10b      	bne.n	800826e <xTaskResumeAll+0x2e>
 8008256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825a:	b672      	cpsid	i
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	b662      	cpsie	i
 800826a:	603b      	str	r3, [r7, #0]
 800826c:	e7fe      	b.n	800826c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800826e:	f000 fee3 	bl	8009038 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008272:	4b39      	ldr	r3, [pc, #228]	; (8008358 <xTaskResumeAll+0x118>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3b01      	subs	r3, #1
 8008278:	4a37      	ldr	r2, [pc, #220]	; (8008358 <xTaskResumeAll+0x118>)
 800827a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800827c:	4b36      	ldr	r3, [pc, #216]	; (8008358 <xTaskResumeAll+0x118>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d161      	bne.n	8008348 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008284:	4b35      	ldr	r3, [pc, #212]	; (800835c <xTaskResumeAll+0x11c>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d05d      	beq.n	8008348 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800828c:	e02e      	b.n	80082ec <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800828e:	4b34      	ldr	r3, [pc, #208]	; (8008360 <xTaskResumeAll+0x120>)
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	3318      	adds	r3, #24
 800829a:	4618      	mov	r0, r3
 800829c:	f7fe ffd4 	bl	8007248 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	3304      	adds	r3, #4
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7fe ffcf 	bl	8007248 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ae:	2201      	movs	r2, #1
 80082b0:	409a      	lsls	r2, r3
 80082b2:	4b2c      	ldr	r3, [pc, #176]	; (8008364 <xTaskResumeAll+0x124>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	4a2a      	ldr	r2, [pc, #168]	; (8008364 <xTaskResumeAll+0x124>)
 80082ba:	6013      	str	r3, [r2, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c0:	4613      	mov	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4413      	add	r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4a27      	ldr	r2, [pc, #156]	; (8008368 <xTaskResumeAll+0x128>)
 80082ca:	441a      	add	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	3304      	adds	r3, #4
 80082d0:	4619      	mov	r1, r3
 80082d2:	4610      	mov	r0, r2
 80082d4:	f7fe ff5b 	bl	800718e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082dc:	4b23      	ldr	r3, [pc, #140]	; (800836c <xTaskResumeAll+0x12c>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d302      	bcc.n	80082ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80082e6:	4b22      	ldr	r3, [pc, #136]	; (8008370 <xTaskResumeAll+0x130>)
 80082e8:	2201      	movs	r2, #1
 80082ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082ec:	4b1c      	ldr	r3, [pc, #112]	; (8008360 <xTaskResumeAll+0x120>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1cc      	bne.n	800828e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80082fa:	f000 fb25 	bl	8008948 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80082fe:	4b1d      	ldr	r3, [pc, #116]	; (8008374 <xTaskResumeAll+0x134>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d010      	beq.n	800832c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800830a:	f000 f837 	bl	800837c <xTaskIncrementTick>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008314:	4b16      	ldr	r3, [pc, #88]	; (8008370 <xTaskResumeAll+0x130>)
 8008316:	2201      	movs	r2, #1
 8008318:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	3b01      	subs	r3, #1
 800831e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1f1      	bne.n	800830a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008326:	4b13      	ldr	r3, [pc, #76]	; (8008374 <xTaskResumeAll+0x134>)
 8008328:	2200      	movs	r2, #0
 800832a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800832c:	4b10      	ldr	r3, [pc, #64]	; (8008370 <xTaskResumeAll+0x130>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d009      	beq.n	8008348 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008334:	2301      	movs	r3, #1
 8008336:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008338:	4b0f      	ldr	r3, [pc, #60]	; (8008378 <xTaskResumeAll+0x138>)
 800833a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800833e:	601a      	str	r2, [r3, #0]
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008348:	f000 fea8 	bl	800909c <vPortExitCritical>

	return xAlreadyYielded;
 800834c:	68bb      	ldr	r3, [r7, #8]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	20000270 	.word	0x20000270
 800835c:	20000248 	.word	0x20000248
 8008360:	20000208 	.word	0x20000208
 8008364:	20000250 	.word	0x20000250
 8008368:	2000014c 	.word	0x2000014c
 800836c:	20000148 	.word	0x20000148
 8008370:	2000025c 	.word	0x2000025c
 8008374:	20000258 	.word	0x20000258
 8008378:	e000ed04 	.word	0xe000ed04

0800837c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008382:	2300      	movs	r3, #0
 8008384:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008386:	4b51      	ldr	r3, [pc, #324]	; (80084cc <xTaskIncrementTick+0x150>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	f040 808e 	bne.w	80084ac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008390:	4b4f      	ldr	r3, [pc, #316]	; (80084d0 <xTaskIncrementTick+0x154>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	3301      	adds	r3, #1
 8008396:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008398:	4a4d      	ldr	r2, [pc, #308]	; (80084d0 <xTaskIncrementTick+0x154>)
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d121      	bne.n	80083e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80083a4:	4b4b      	ldr	r3, [pc, #300]	; (80084d4 <xTaskIncrementTick+0x158>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00b      	beq.n	80083c6 <xTaskIncrementTick+0x4a>
 80083ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b2:	b672      	cpsid	i
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	b662      	cpsie	i
 80083c2:	603b      	str	r3, [r7, #0]
 80083c4:	e7fe      	b.n	80083c4 <xTaskIncrementTick+0x48>
 80083c6:	4b43      	ldr	r3, [pc, #268]	; (80084d4 <xTaskIncrementTick+0x158>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	60fb      	str	r3, [r7, #12]
 80083cc:	4b42      	ldr	r3, [pc, #264]	; (80084d8 <xTaskIncrementTick+0x15c>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a40      	ldr	r2, [pc, #256]	; (80084d4 <xTaskIncrementTick+0x158>)
 80083d2:	6013      	str	r3, [r2, #0]
 80083d4:	4a40      	ldr	r2, [pc, #256]	; (80084d8 <xTaskIncrementTick+0x15c>)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6013      	str	r3, [r2, #0]
 80083da:	4b40      	ldr	r3, [pc, #256]	; (80084dc <xTaskIncrementTick+0x160>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	3301      	adds	r3, #1
 80083e0:	4a3e      	ldr	r2, [pc, #248]	; (80084dc <xTaskIncrementTick+0x160>)
 80083e2:	6013      	str	r3, [r2, #0]
 80083e4:	f000 fab0 	bl	8008948 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80083e8:	4b3d      	ldr	r3, [pc, #244]	; (80084e0 <xTaskIncrementTick+0x164>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d34d      	bcc.n	800848e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083f2:	4b38      	ldr	r3, [pc, #224]	; (80084d4 <xTaskIncrementTick+0x158>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d101      	bne.n	8008400 <xTaskIncrementTick+0x84>
 80083fc:	2301      	movs	r3, #1
 80083fe:	e000      	b.n	8008402 <xTaskIncrementTick+0x86>
 8008400:	2300      	movs	r3, #0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d004      	beq.n	8008410 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008406:	4b36      	ldr	r3, [pc, #216]	; (80084e0 <xTaskIncrementTick+0x164>)
 8008408:	f04f 32ff 	mov.w	r2, #4294967295
 800840c:	601a      	str	r2, [r3, #0]
					break;
 800840e:	e03e      	b.n	800848e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008410:	4b30      	ldr	r3, [pc, #192]	; (80084d4 <xTaskIncrementTick+0x158>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	429a      	cmp	r2, r3
 8008426:	d203      	bcs.n	8008430 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008428:	4a2d      	ldr	r2, [pc, #180]	; (80084e0 <xTaskIncrementTick+0x164>)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6013      	str	r3, [r2, #0]
						break;
 800842e:	e02e      	b.n	800848e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	3304      	adds	r3, #4
 8008434:	4618      	mov	r0, r3
 8008436:	f7fe ff07 	bl	8007248 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843e:	2b00      	cmp	r3, #0
 8008440:	d004      	beq.n	800844c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	3318      	adds	r3, #24
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe fefe 	bl	8007248 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	2201      	movs	r2, #1
 8008452:	409a      	lsls	r2, r3
 8008454:	4b23      	ldr	r3, [pc, #140]	; (80084e4 <xTaskIncrementTick+0x168>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4313      	orrs	r3, r2
 800845a:	4a22      	ldr	r2, [pc, #136]	; (80084e4 <xTaskIncrementTick+0x168>)
 800845c:	6013      	str	r3, [r2, #0]
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008462:	4613      	mov	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4413      	add	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4a1f      	ldr	r2, [pc, #124]	; (80084e8 <xTaskIncrementTick+0x16c>)
 800846c:	441a      	add	r2, r3
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	3304      	adds	r3, #4
 8008472:	4619      	mov	r1, r3
 8008474:	4610      	mov	r0, r2
 8008476:	f7fe fe8a 	bl	800718e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800847e:	4b1b      	ldr	r3, [pc, #108]	; (80084ec <xTaskIncrementTick+0x170>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008484:	429a      	cmp	r2, r3
 8008486:	d3b4      	bcc.n	80083f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008488:	2301      	movs	r3, #1
 800848a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800848c:	e7b1      	b.n	80083f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800848e:	4b17      	ldr	r3, [pc, #92]	; (80084ec <xTaskIncrementTick+0x170>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008494:	4914      	ldr	r1, [pc, #80]	; (80084e8 <xTaskIncrementTick+0x16c>)
 8008496:	4613      	mov	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	440b      	add	r3, r1
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d907      	bls.n	80084b6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80084a6:	2301      	movs	r3, #1
 80084a8:	617b      	str	r3, [r7, #20]
 80084aa:	e004      	b.n	80084b6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80084ac:	4b10      	ldr	r3, [pc, #64]	; (80084f0 <xTaskIncrementTick+0x174>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	3301      	adds	r3, #1
 80084b2:	4a0f      	ldr	r2, [pc, #60]	; (80084f0 <xTaskIncrementTick+0x174>)
 80084b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80084b6:	4b0f      	ldr	r3, [pc, #60]	; (80084f4 <xTaskIncrementTick+0x178>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d001      	beq.n	80084c2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80084be:	2301      	movs	r3, #1
 80084c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80084c2:	697b      	ldr	r3, [r7, #20]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3718      	adds	r7, #24
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	20000270 	.word	0x20000270
 80084d0:	2000024c 	.word	0x2000024c
 80084d4:	20000200 	.word	0x20000200
 80084d8:	20000204 	.word	0x20000204
 80084dc:	20000260 	.word	0x20000260
 80084e0:	20000268 	.word	0x20000268
 80084e4:	20000250 	.word	0x20000250
 80084e8:	2000014c 	.word	0x2000014c
 80084ec:	20000148 	.word	0x20000148
 80084f0:	20000258 	.word	0x20000258
 80084f4:	2000025c 	.word	0x2000025c

080084f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b088      	sub	sp, #32
 80084fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80084fe:	4b3a      	ldr	r3, [pc, #232]	; (80085e8 <vTaskSwitchContext+0xf0>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d003      	beq.n	800850e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008506:	4b39      	ldr	r3, [pc, #228]	; (80085ec <vTaskSwitchContext+0xf4>)
 8008508:	2201      	movs	r2, #1
 800850a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800850c:	e067      	b.n	80085de <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800850e:	4b37      	ldr	r3, [pc, #220]	; (80085ec <vTaskSwitchContext+0xf4>)
 8008510:	2200      	movs	r2, #0
 8008512:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008514:	4b36      	ldr	r3, [pc, #216]	; (80085f0 <vTaskSwitchContext+0xf8>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851a:	61fb      	str	r3, [r7, #28]
 800851c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8008520:	61bb      	str	r3, [r7, #24]
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	429a      	cmp	r2, r3
 800852a:	d111      	bne.n	8008550 <vTaskSwitchContext+0x58>
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	3304      	adds	r3, #4
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	69ba      	ldr	r2, [r7, #24]
 8008534:	429a      	cmp	r2, r3
 8008536:	d10b      	bne.n	8008550 <vTaskSwitchContext+0x58>
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	3308      	adds	r3, #8
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	69ba      	ldr	r2, [r7, #24]
 8008540:	429a      	cmp	r2, r3
 8008542:	d105      	bne.n	8008550 <vTaskSwitchContext+0x58>
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	330c      	adds	r3, #12
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	69ba      	ldr	r2, [r7, #24]
 800854c:	429a      	cmp	r2, r3
 800854e:	d008      	beq.n	8008562 <vTaskSwitchContext+0x6a>
 8008550:	4b27      	ldr	r3, [pc, #156]	; (80085f0 <vTaskSwitchContext+0xf8>)
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	4b26      	ldr	r3, [pc, #152]	; (80085f0 <vTaskSwitchContext+0xf8>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	3334      	adds	r3, #52	; 0x34
 800855a:	4619      	mov	r1, r3
 800855c:	4610      	mov	r0, r2
 800855e:	f7f8 f82e 	bl	80005be <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008562:	4b24      	ldr	r3, [pc, #144]	; (80085f4 <vTaskSwitchContext+0xfc>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	fab3 f383 	clz	r3, r3
 800856e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008570:	7afb      	ldrb	r3, [r7, #11]
 8008572:	f1c3 031f 	rsb	r3, r3, #31
 8008576:	617b      	str	r3, [r7, #20]
 8008578:	491f      	ldr	r1, [pc, #124]	; (80085f8 <vTaskSwitchContext+0x100>)
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	4613      	mov	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4413      	add	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	440b      	add	r3, r1
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10b      	bne.n	80085a4 <vTaskSwitchContext+0xac>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008590:	b672      	cpsid	i
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	b662      	cpsie	i
 80085a0:	607b      	str	r3, [r7, #4]
 80085a2:	e7fe      	b.n	80085a2 <vTaskSwitchContext+0xaa>
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	4613      	mov	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4413      	add	r3, r2
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	4a12      	ldr	r2, [pc, #72]	; (80085f8 <vTaskSwitchContext+0x100>)
 80085b0:	4413      	add	r3, r2
 80085b2:	613b      	str	r3, [r7, #16]
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	685a      	ldr	r2, [r3, #4]
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	605a      	str	r2, [r3, #4]
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	685a      	ldr	r2, [r3, #4]
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	3308      	adds	r3, #8
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d104      	bne.n	80085d4 <vTaskSwitchContext+0xdc>
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	685a      	ldr	r2, [r3, #4]
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	605a      	str	r2, [r3, #4]
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	4a05      	ldr	r2, [pc, #20]	; (80085f0 <vTaskSwitchContext+0xf8>)
 80085dc:	6013      	str	r3, [r2, #0]
}
 80085de:	bf00      	nop
 80085e0:	3720      	adds	r7, #32
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	20000270 	.word	0x20000270
 80085ec:	2000025c 	.word	0x2000025c
 80085f0:	20000148 	.word	0x20000148
 80085f4:	20000250 	.word	0x20000250
 80085f8:	2000014c 	.word	0x2000014c

080085fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10b      	bne.n	8008624 <vTaskPlaceOnEventList+0x28>
 800860c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008610:	b672      	cpsid	i
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	b662      	cpsie	i
 8008620:	60fb      	str	r3, [r7, #12]
 8008622:	e7fe      	b.n	8008622 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008624:	4b07      	ldr	r3, [pc, #28]	; (8008644 <vTaskPlaceOnEventList+0x48>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	3318      	adds	r3, #24
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f7fe fdd2 	bl	80071d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008632:	2101      	movs	r1, #1
 8008634:	6838      	ldr	r0, [r7, #0]
 8008636:	f000 fb8f 	bl	8008d58 <prvAddCurrentTaskToDelayedList>
}
 800863a:	bf00      	nop
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	20000148 	.word	0x20000148

08008648 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10b      	bne.n	8008676 <xTaskRemoveFromEventList+0x2e>
 800865e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008662:	b672      	cpsid	i
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	b662      	cpsie	i
 8008672:	60fb      	str	r3, [r7, #12]
 8008674:	e7fe      	b.n	8008674 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	3318      	adds	r3, #24
 800867a:	4618      	mov	r0, r3
 800867c:	f7fe fde4 	bl	8007248 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008680:	4b1d      	ldr	r3, [pc, #116]	; (80086f8 <xTaskRemoveFromEventList+0xb0>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d11c      	bne.n	80086c2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	3304      	adds	r3, #4
 800868c:	4618      	mov	r0, r3
 800868e:	f7fe fddb 	bl	8007248 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008696:	2201      	movs	r2, #1
 8008698:	409a      	lsls	r2, r3
 800869a:	4b18      	ldr	r3, [pc, #96]	; (80086fc <xTaskRemoveFromEventList+0xb4>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4313      	orrs	r3, r2
 80086a0:	4a16      	ldr	r2, [pc, #88]	; (80086fc <xTaskRemoveFromEventList+0xb4>)
 80086a2:	6013      	str	r3, [r2, #0]
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a8:	4613      	mov	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4a13      	ldr	r2, [pc, #76]	; (8008700 <xTaskRemoveFromEventList+0xb8>)
 80086b2:	441a      	add	r2, r3
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	3304      	adds	r3, #4
 80086b8:	4619      	mov	r1, r3
 80086ba:	4610      	mov	r0, r2
 80086bc:	f7fe fd67 	bl	800718e <vListInsertEnd>
 80086c0:	e005      	b.n	80086ce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	3318      	adds	r3, #24
 80086c6:	4619      	mov	r1, r3
 80086c8:	480e      	ldr	r0, [pc, #56]	; (8008704 <xTaskRemoveFromEventList+0xbc>)
 80086ca:	f7fe fd60 	bl	800718e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d2:	4b0d      	ldr	r3, [pc, #52]	; (8008708 <xTaskRemoveFromEventList+0xc0>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d8:	429a      	cmp	r2, r3
 80086da:	d905      	bls.n	80086e8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80086dc:	2301      	movs	r3, #1
 80086de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80086e0:	4b0a      	ldr	r3, [pc, #40]	; (800870c <xTaskRemoveFromEventList+0xc4>)
 80086e2:	2201      	movs	r2, #1
 80086e4:	601a      	str	r2, [r3, #0]
 80086e6:	e001      	b.n	80086ec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80086e8:	2300      	movs	r3, #0
 80086ea:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80086ec:	697b      	ldr	r3, [r7, #20]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3718      	adds	r7, #24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	20000270 	.word	0x20000270
 80086fc:	20000250 	.word	0x20000250
 8008700:	2000014c 	.word	0x2000014c
 8008704:	20000208 	.word	0x20000208
 8008708:	20000148 	.word	0x20000148
 800870c:	2000025c 	.word	0x2000025c

08008710 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008718:	4b06      	ldr	r3, [pc, #24]	; (8008734 <vTaskInternalSetTimeOutState+0x24>)
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008720:	4b05      	ldr	r3, [pc, #20]	; (8008738 <vTaskInternalSetTimeOutState+0x28>)
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	605a      	str	r2, [r3, #4]
}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr
 8008734:	20000260 	.word	0x20000260
 8008738:	2000024c 	.word	0x2000024c

0800873c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b088      	sub	sp, #32
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10b      	bne.n	8008764 <xTaskCheckForTimeOut+0x28>
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	b672      	cpsid	i
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	b662      	cpsie	i
 8008760:	613b      	str	r3, [r7, #16]
 8008762:	e7fe      	b.n	8008762 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10b      	bne.n	8008782 <xTaskCheckForTimeOut+0x46>
 800876a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876e:	b672      	cpsid	i
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	b662      	cpsie	i
 800877e:	60fb      	str	r3, [r7, #12]
 8008780:	e7fe      	b.n	8008780 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8008782:	f000 fc59 	bl	8009038 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008786:	4b1d      	ldr	r3, [pc, #116]	; (80087fc <xTaskCheckForTimeOut+0xc0>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	69ba      	ldr	r2, [r7, #24]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800879e:	d102      	bne.n	80087a6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80087a0:	2300      	movs	r3, #0
 80087a2:	61fb      	str	r3, [r7, #28]
 80087a4:	e023      	b.n	80087ee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	4b15      	ldr	r3, [pc, #84]	; (8008800 <xTaskCheckForTimeOut+0xc4>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d007      	beq.n	80087c2 <xTaskCheckForTimeOut+0x86>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	69ba      	ldr	r2, [r7, #24]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d302      	bcc.n	80087c2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80087bc:	2301      	movs	r3, #1
 80087be:	61fb      	str	r3, [r7, #28]
 80087c0:	e015      	b.n	80087ee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d20b      	bcs.n	80087e4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	1ad2      	subs	r2, r2, r3
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7ff ff99 	bl	8008710 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80087de:	2300      	movs	r3, #0
 80087e0:	61fb      	str	r3, [r7, #28]
 80087e2:	e004      	b.n	80087ee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	2200      	movs	r2, #0
 80087e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80087ea:	2301      	movs	r3, #1
 80087ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80087ee:	f000 fc55 	bl	800909c <vPortExitCritical>

	return xReturn;
 80087f2:	69fb      	ldr	r3, [r7, #28]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3720      	adds	r7, #32
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	2000024c 	.word	0x2000024c
 8008800:	20000260 	.word	0x20000260

08008804 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008804:	b480      	push	{r7}
 8008806:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008808:	4b03      	ldr	r3, [pc, #12]	; (8008818 <vTaskMissedYield+0x14>)
 800880a:	2201      	movs	r2, #1
 800880c:	601a      	str	r2, [r3, #0]
}
 800880e:	bf00      	nop
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	2000025c 	.word	0x2000025c

0800881c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008824:	f000 f854 	bl	80088d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008828:	4b07      	ldr	r3, [pc, #28]	; (8008848 <prvIdleTask+0x2c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d907      	bls.n	8008840 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008830:	4b06      	ldr	r3, [pc, #24]	; (800884c <prvIdleTask+0x30>)
 8008832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008836:	601a      	str	r2, [r3, #0]
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008840:	f7f7 feb6 	bl	80005b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008844:	e7ee      	b.n	8008824 <prvIdleTask+0x8>
 8008846:	bf00      	nop
 8008848:	2000014c 	.word	0x2000014c
 800884c:	e000ed04 	.word	0xe000ed04

08008850 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008856:	2300      	movs	r3, #0
 8008858:	607b      	str	r3, [r7, #4]
 800885a:	e00c      	b.n	8008876 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	4613      	mov	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4a12      	ldr	r2, [pc, #72]	; (80088b0 <prvInitialiseTaskLists+0x60>)
 8008868:	4413      	add	r3, r2
 800886a:	4618      	mov	r0, r3
 800886c:	f7fe fc62 	bl	8007134 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	3301      	adds	r3, #1
 8008874:	607b      	str	r3, [r7, #4]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2b06      	cmp	r3, #6
 800887a:	d9ef      	bls.n	800885c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800887c:	480d      	ldr	r0, [pc, #52]	; (80088b4 <prvInitialiseTaskLists+0x64>)
 800887e:	f7fe fc59 	bl	8007134 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008882:	480d      	ldr	r0, [pc, #52]	; (80088b8 <prvInitialiseTaskLists+0x68>)
 8008884:	f7fe fc56 	bl	8007134 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008888:	480c      	ldr	r0, [pc, #48]	; (80088bc <prvInitialiseTaskLists+0x6c>)
 800888a:	f7fe fc53 	bl	8007134 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800888e:	480c      	ldr	r0, [pc, #48]	; (80088c0 <prvInitialiseTaskLists+0x70>)
 8008890:	f7fe fc50 	bl	8007134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008894:	480b      	ldr	r0, [pc, #44]	; (80088c4 <prvInitialiseTaskLists+0x74>)
 8008896:	f7fe fc4d 	bl	8007134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800889a:	4b0b      	ldr	r3, [pc, #44]	; (80088c8 <prvInitialiseTaskLists+0x78>)
 800889c:	4a05      	ldr	r2, [pc, #20]	; (80088b4 <prvInitialiseTaskLists+0x64>)
 800889e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80088a0:	4b0a      	ldr	r3, [pc, #40]	; (80088cc <prvInitialiseTaskLists+0x7c>)
 80088a2:	4a05      	ldr	r2, [pc, #20]	; (80088b8 <prvInitialiseTaskLists+0x68>)
 80088a4:	601a      	str	r2, [r3, #0]
}
 80088a6:	bf00      	nop
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	2000014c 	.word	0x2000014c
 80088b4:	200001d8 	.word	0x200001d8
 80088b8:	200001ec 	.word	0x200001ec
 80088bc:	20000208 	.word	0x20000208
 80088c0:	2000021c 	.word	0x2000021c
 80088c4:	20000234 	.word	0x20000234
 80088c8:	20000200 	.word	0x20000200
 80088cc:	20000204 	.word	0x20000204

080088d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088d6:	e019      	b.n	800890c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80088d8:	f000 fbae 	bl	8009038 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80088dc:	4b0f      	ldr	r3, [pc, #60]	; (800891c <prvCheckTasksWaitingTermination+0x4c>)
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	3304      	adds	r3, #4
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7fe fcad 	bl	8007248 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80088ee:	4b0c      	ldr	r3, [pc, #48]	; (8008920 <prvCheckTasksWaitingTermination+0x50>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	3b01      	subs	r3, #1
 80088f4:	4a0a      	ldr	r2, [pc, #40]	; (8008920 <prvCheckTasksWaitingTermination+0x50>)
 80088f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80088f8:	4b0a      	ldr	r3, [pc, #40]	; (8008924 <prvCheckTasksWaitingTermination+0x54>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	3b01      	subs	r3, #1
 80088fe:	4a09      	ldr	r2, [pc, #36]	; (8008924 <prvCheckTasksWaitingTermination+0x54>)
 8008900:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008902:	f000 fbcb 	bl	800909c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 f80e 	bl	8008928 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800890c:	4b05      	ldr	r3, [pc, #20]	; (8008924 <prvCheckTasksWaitingTermination+0x54>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1e1      	bne.n	80088d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008914:	bf00      	nop
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	2000021c 	.word	0x2000021c
 8008920:	20000248 	.word	0x20000248
 8008924:	20000230 	.word	0x20000230

08008928 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008934:	4618      	mov	r0, r3
 8008936:	f000 fd6d 	bl	8009414 <vPortFree>
			vPortFree( pxTCB );
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fd6a 	bl	8009414 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008940:	bf00      	nop
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800894e:	4b0f      	ldr	r3, [pc, #60]	; (800898c <prvResetNextTaskUnblockTime+0x44>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d101      	bne.n	800895c <prvResetNextTaskUnblockTime+0x14>
 8008958:	2301      	movs	r3, #1
 800895a:	e000      	b.n	800895e <prvResetNextTaskUnblockTime+0x16>
 800895c:	2300      	movs	r3, #0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d004      	beq.n	800896c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008962:	4b0b      	ldr	r3, [pc, #44]	; (8008990 <prvResetNextTaskUnblockTime+0x48>)
 8008964:	f04f 32ff 	mov.w	r2, #4294967295
 8008968:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800896a:	e008      	b.n	800897e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800896c:	4b07      	ldr	r3, [pc, #28]	; (800898c <prvResetNextTaskUnblockTime+0x44>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	4a05      	ldr	r2, [pc, #20]	; (8008990 <prvResetNextTaskUnblockTime+0x48>)
 800897c:	6013      	str	r3, [r2, #0]
}
 800897e:	bf00      	nop
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	20000200 	.word	0x20000200
 8008990:	20000268 	.word	0x20000268

08008994 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800899a:	4b0b      	ldr	r3, [pc, #44]	; (80089c8 <xTaskGetSchedulerState+0x34>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d102      	bne.n	80089a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80089a2:	2301      	movs	r3, #1
 80089a4:	607b      	str	r3, [r7, #4]
 80089a6:	e008      	b.n	80089ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089a8:	4b08      	ldr	r3, [pc, #32]	; (80089cc <xTaskGetSchedulerState+0x38>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d102      	bne.n	80089b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80089b0:	2302      	movs	r3, #2
 80089b2:	607b      	str	r3, [r7, #4]
 80089b4:	e001      	b.n	80089ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80089b6:	2300      	movs	r3, #0
 80089b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80089ba:	687b      	ldr	r3, [r7, #4]
	}
 80089bc:	4618      	mov	r0, r3
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr
 80089c8:	20000254 	.word	0x20000254
 80089cc:	20000270 	.word	0x20000270

080089d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80089dc:	2300      	movs	r3, #0
 80089de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d06e      	beq.n	8008ac4 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ea:	4b39      	ldr	r3, [pc, #228]	; (8008ad0 <xTaskPriorityInherit+0x100>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d25e      	bcs.n	8008ab2 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	db06      	blt.n	8008a0a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089fc:	4b34      	ldr	r3, [pc, #208]	; (8008ad0 <xTaskPriorityInherit+0x100>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a02:	f1c3 0207 	rsb	r2, r3, #7
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	6959      	ldr	r1, [r3, #20]
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a12:	4613      	mov	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4413      	add	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4a2e      	ldr	r2, [pc, #184]	; (8008ad4 <xTaskPriorityInherit+0x104>)
 8008a1c:	4413      	add	r3, r2
 8008a1e:	4299      	cmp	r1, r3
 8008a20:	d101      	bne.n	8008a26 <xTaskPriorityInherit+0x56>
 8008a22:	2301      	movs	r3, #1
 8008a24:	e000      	b.n	8008a28 <xTaskPriorityInherit+0x58>
 8008a26:	2300      	movs	r3, #0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d03a      	beq.n	8008aa2 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	3304      	adds	r3, #4
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7fe fc09 	bl	8007248 <uxListRemove>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d115      	bne.n	8008a68 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a40:	4924      	ldr	r1, [pc, #144]	; (8008ad4 <xTaskPriorityInherit+0x104>)
 8008a42:	4613      	mov	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4413      	add	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	440b      	add	r3, r1
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10a      	bne.n	8008a68 <xTaskPriorityInherit+0x98>
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a56:	2201      	movs	r2, #1
 8008a58:	fa02 f303 	lsl.w	r3, r2, r3
 8008a5c:	43da      	mvns	r2, r3
 8008a5e:	4b1e      	ldr	r3, [pc, #120]	; (8008ad8 <xTaskPriorityInherit+0x108>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4013      	ands	r3, r2
 8008a64:	4a1c      	ldr	r2, [pc, #112]	; (8008ad8 <xTaskPriorityInherit+0x108>)
 8008a66:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a68:	4b19      	ldr	r3, [pc, #100]	; (8008ad0 <xTaskPriorityInherit+0x100>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a76:	2201      	movs	r2, #1
 8008a78:	409a      	lsls	r2, r3
 8008a7a:	4b17      	ldr	r3, [pc, #92]	; (8008ad8 <xTaskPriorityInherit+0x108>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	4a15      	ldr	r2, [pc, #84]	; (8008ad8 <xTaskPriorityInherit+0x108>)
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a88:	4613      	mov	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4a10      	ldr	r2, [pc, #64]	; (8008ad4 <xTaskPriorityInherit+0x104>)
 8008a92:	441a      	add	r2, r3
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	3304      	adds	r3, #4
 8008a98:	4619      	mov	r1, r3
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	f7fe fb77 	bl	800718e <vListInsertEnd>
 8008aa0:	e004      	b.n	8008aac <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008aa2:	4b0b      	ldr	r3, [pc, #44]	; (8008ad0 <xTaskPriorityInherit+0x100>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008aac:	2301      	movs	r3, #1
 8008aae:	60fb      	str	r3, [r7, #12]
 8008ab0:	e008      	b.n	8008ac4 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ab6:	4b06      	ldr	r3, [pc, #24]	; (8008ad0 <xTaskPriorityInherit+0x100>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d201      	bcs.n	8008ac4 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
	}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	20000148 	.word	0x20000148
 8008ad4:	2000014c 	.word	0x2000014c
 8008ad8:	20000250 	.word	0x20000250

08008adc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d070      	beq.n	8008bd4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008af2:	4b3b      	ldr	r3, [pc, #236]	; (8008be0 <xTaskPriorityDisinherit+0x104>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d00b      	beq.n	8008b14 <xTaskPriorityDisinherit+0x38>
 8008afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b00:	b672      	cpsid	i
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	b662      	cpsie	i
 8008b10:	60fb      	str	r3, [r7, #12]
 8008b12:	e7fe      	b.n	8008b12 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d10b      	bne.n	8008b34 <xTaskPriorityDisinherit+0x58>
 8008b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b20:	b672      	cpsid	i
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	b662      	cpsie	i
 8008b30:	60bb      	str	r3, [r7, #8]
 8008b32:	e7fe      	b.n	8008b32 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b38:	1e5a      	subs	r2, r3, #1
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d044      	beq.n	8008bd4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d140      	bne.n	8008bd4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	3304      	adds	r3, #4
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fe fb76 	bl	8007248 <uxListRemove>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d115      	bne.n	8008b8e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b66:	491f      	ldr	r1, [pc, #124]	; (8008be4 <xTaskPriorityDisinherit+0x108>)
 8008b68:	4613      	mov	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	4413      	add	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	440b      	add	r3, r1
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10a      	bne.n	8008b8e <xTaskPriorityDisinherit+0xb2>
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b82:	43da      	mvns	r2, r3
 8008b84:	4b18      	ldr	r3, [pc, #96]	; (8008be8 <xTaskPriorityDisinherit+0x10c>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4013      	ands	r3, r2
 8008b8a:	4a17      	ldr	r2, [pc, #92]	; (8008be8 <xTaskPriorityDisinherit+0x10c>)
 8008b8c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9a:	f1c3 0207 	rsb	r2, r3, #7
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	409a      	lsls	r2, r3
 8008baa:	4b0f      	ldr	r3, [pc, #60]	; (8008be8 <xTaskPriorityDisinherit+0x10c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	4a0d      	ldr	r2, [pc, #52]	; (8008be8 <xTaskPriorityDisinherit+0x10c>)
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb8:	4613      	mov	r3, r2
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	4413      	add	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4a08      	ldr	r2, [pc, #32]	; (8008be4 <xTaskPriorityDisinherit+0x108>)
 8008bc2:	441a      	add	r2, r3
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	3304      	adds	r3, #4
 8008bc8:	4619      	mov	r1, r3
 8008bca:	4610      	mov	r0, r2
 8008bcc:	f7fe fadf 	bl	800718e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008bd4:	697b      	ldr	r3, [r7, #20]
	}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3718      	adds	r7, #24
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	20000148 	.word	0x20000148
 8008be4:	2000014c 	.word	0x2000014c
 8008be8:	20000250 	.word	0x20000250

08008bec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b088      	sub	sp, #32
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 808a 	beq.w	8008d1a <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10b      	bne.n	8008c26 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8008c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c12:	b672      	cpsid	i
 8008c14:	f383 8811 	msr	BASEPRI, r3
 8008c18:	f3bf 8f6f 	isb	sy
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	b662      	cpsie	i
 8008c22:	60fb      	str	r3, [r7, #12]
 8008c24:	e7fe      	b.n	8008c24 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d902      	bls.n	8008c36 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	61fb      	str	r3, [r7, #28]
 8008c34:	e002      	b.n	8008c3c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c3a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c40:	69fa      	ldr	r2, [r7, #28]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d069      	beq.n	8008d1a <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c4a:	697a      	ldr	r2, [r7, #20]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d164      	bne.n	8008d1a <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008c50:	4b34      	ldr	r3, [pc, #208]	; (8008d24 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	69ba      	ldr	r2, [r7, #24]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d10b      	bne.n	8008c72 <vTaskPriorityDisinheritAfterTimeout+0x86>
 8008c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5e:	b672      	cpsid	i
 8008c60:	f383 8811 	msr	BASEPRI, r3
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	b662      	cpsie	i
 8008c6e:	60bb      	str	r3, [r7, #8]
 8008c70:	e7fe      	b.n	8008c70 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c76:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	69fa      	ldr	r2, [r7, #28]
 8008c7c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	db04      	blt.n	8008c90 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	f1c3 0207 	rsb	r2, r3, #7
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	6959      	ldr	r1, [r3, #20]
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	4613      	mov	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4a22      	ldr	r2, [pc, #136]	; (8008d28 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008ca0:	4413      	add	r3, r2
 8008ca2:	4299      	cmp	r1, r3
 8008ca4:	d101      	bne.n	8008caa <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e000      	b.n	8008cac <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8008caa:	2300      	movs	r3, #0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d034      	beq.n	8008d1a <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	3304      	adds	r3, #4
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fe fac7 	bl	8007248 <uxListRemove>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d115      	bne.n	8008cec <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc4:	4918      	ldr	r1, [pc, #96]	; (8008d28 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4413      	add	r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	440b      	add	r3, r1
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10a      	bne.n	8008cec <vTaskPriorityDisinheritAfterTimeout+0x100>
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cda:	2201      	movs	r2, #1
 8008cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce0:	43da      	mvns	r2, r3
 8008ce2:	4b12      	ldr	r3, [pc, #72]	; (8008d2c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	4a10      	ldr	r2, [pc, #64]	; (8008d2c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8008cea:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	409a      	lsls	r2, r3
 8008cf4:	4b0d      	ldr	r3, [pc, #52]	; (8008d2c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	4a0c      	ldr	r2, [pc, #48]	; (8008d2c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8008cfc:	6013      	str	r3, [r2, #0]
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d02:	4613      	mov	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4413      	add	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4a07      	ldr	r2, [pc, #28]	; (8008d28 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008d0c:	441a      	add	r2, r3
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	3304      	adds	r3, #4
 8008d12:	4619      	mov	r1, r3
 8008d14:	4610      	mov	r0, r2
 8008d16:	f7fe fa3a 	bl	800718e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d1a:	bf00      	nop
 8008d1c:	3720      	adds	r7, #32
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	20000148 	.word	0x20000148
 8008d28:	2000014c 	.word	0x2000014c
 8008d2c:	20000250 	.word	0x20000250

08008d30 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008d30:	b480      	push	{r7}
 8008d32:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008d34:	4b07      	ldr	r3, [pc, #28]	; (8008d54 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d004      	beq.n	8008d46 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008d3c:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d42:	3201      	adds	r2, #1
 8008d44:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008d46:	4b03      	ldr	r3, [pc, #12]	; (8008d54 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d48:	681b      	ldr	r3, [r3, #0]
	}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr
 8008d54:	20000148 	.word	0x20000148

08008d58 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d62:	4b29      	ldr	r3, [pc, #164]	; (8008e08 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d68:	4b28      	ldr	r3, [pc, #160]	; (8008e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe fa6a 	bl	8007248 <uxListRemove>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10b      	bne.n	8008d92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008d7a:	4b24      	ldr	r3, [pc, #144]	; (8008e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d80:	2201      	movs	r2, #1
 8008d82:	fa02 f303 	lsl.w	r3, r2, r3
 8008d86:	43da      	mvns	r2, r3
 8008d88:	4b21      	ldr	r3, [pc, #132]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	4a20      	ldr	r2, [pc, #128]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d98:	d10a      	bne.n	8008db0 <prvAddCurrentTaskToDelayedList+0x58>
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d007      	beq.n	8008db0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008da0:	4b1a      	ldr	r3, [pc, #104]	; (8008e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	3304      	adds	r3, #4
 8008da6:	4619      	mov	r1, r3
 8008da8:	481a      	ldr	r0, [pc, #104]	; (8008e14 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008daa:	f7fe f9f0 	bl	800718e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008dae:	e026      	b.n	8008dfe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4413      	add	r3, r2
 8008db6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008db8:	4b14      	ldr	r3, [pc, #80]	; (8008e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d209      	bcs.n	8008ddc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dc8:	4b13      	ldr	r3, [pc, #76]	; (8008e18 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	4b0f      	ldr	r3, [pc, #60]	; (8008e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	f7fe f9fe 	bl	80071d6 <vListInsert>
}
 8008dda:	e010      	b.n	8008dfe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ddc:	4b0f      	ldr	r3, [pc, #60]	; (8008e1c <prvAddCurrentTaskToDelayedList+0xc4>)
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	4b0a      	ldr	r3, [pc, #40]	; (8008e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	3304      	adds	r3, #4
 8008de6:	4619      	mov	r1, r3
 8008de8:	4610      	mov	r0, r2
 8008dea:	f7fe f9f4 	bl	80071d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008dee:	4b0c      	ldr	r3, [pc, #48]	; (8008e20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68ba      	ldr	r2, [r7, #8]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d202      	bcs.n	8008dfe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008df8:	4a09      	ldr	r2, [pc, #36]	; (8008e20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	6013      	str	r3, [r2, #0]
}
 8008dfe:	bf00      	nop
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	2000024c 	.word	0x2000024c
 8008e0c:	20000148 	.word	0x20000148
 8008e10:	20000250 	.word	0x20000250
 8008e14:	20000234 	.word	0x20000234
 8008e18:	20000204 	.word	0x20000204
 8008e1c:	20000200 	.word	0x20000200
 8008e20:	20000268 	.word	0x20000268

08008e24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	3b04      	subs	r3, #4
 8008e34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	3b04      	subs	r3, #4
 8008e42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	f023 0201 	bic.w	r2, r3, #1
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	3b04      	subs	r3, #4
 8008e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e54:	4a0c      	ldr	r2, [pc, #48]	; (8008e88 <pxPortInitialiseStack+0x64>)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	3b14      	subs	r3, #20
 8008e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	3b04      	subs	r3, #4
 8008e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f06f 0202 	mvn.w	r2, #2
 8008e72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	3b20      	subs	r3, #32
 8008e78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3714      	adds	r7, #20
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr
 8008e88:	08008e8d 	.word	0x08008e8d

08008e8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e92:	2300      	movs	r3, #0
 8008e94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e96:	4b13      	ldr	r3, [pc, #76]	; (8008ee4 <prvTaskExitError+0x58>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9e:	d00b      	beq.n	8008eb8 <prvTaskExitError+0x2c>
 8008ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea4:	b672      	cpsid	i
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	b662      	cpsie	i
 8008eb4:	60fb      	str	r3, [r7, #12]
 8008eb6:	e7fe      	b.n	8008eb6 <prvTaskExitError+0x2a>
 8008eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebc:	b672      	cpsid	i
 8008ebe:	f383 8811 	msr	BASEPRI, r3
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	b662      	cpsie	i
 8008ecc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ece:	bf00      	nop
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d0fc      	beq.n	8008ed0 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ed6:	bf00      	nop
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	20000034 	.word	0x20000034
	...

08008ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ef0:	4b07      	ldr	r3, [pc, #28]	; (8008f10 <pxCurrentTCBConst2>)
 8008ef2:	6819      	ldr	r1, [r3, #0]
 8008ef4:	6808      	ldr	r0, [r1, #0]
 8008ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efa:	f380 8809 	msr	PSP, r0
 8008efe:	f3bf 8f6f 	isb	sy
 8008f02:	f04f 0000 	mov.w	r0, #0
 8008f06:	f380 8811 	msr	BASEPRI, r0
 8008f0a:	4770      	bx	lr
 8008f0c:	f3af 8000 	nop.w

08008f10 <pxCurrentTCBConst2>:
 8008f10:	20000148 	.word	0x20000148
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f14:	bf00      	nop
 8008f16:	bf00      	nop

08008f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f18:	4808      	ldr	r0, [pc, #32]	; (8008f3c <prvPortStartFirstTask+0x24>)
 8008f1a:	6800      	ldr	r0, [r0, #0]
 8008f1c:	6800      	ldr	r0, [r0, #0]
 8008f1e:	f380 8808 	msr	MSP, r0
 8008f22:	f04f 0000 	mov.w	r0, #0
 8008f26:	f380 8814 	msr	CONTROL, r0
 8008f2a:	b662      	cpsie	i
 8008f2c:	b661      	cpsie	f
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	f3bf 8f6f 	isb	sy
 8008f36:	df00      	svc	0
 8008f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f3a:	bf00      	nop
 8008f3c:	e000ed08 	.word	0xe000ed08

08008f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f46:	4b36      	ldr	r3, [pc, #216]	; (8009020 <xPortStartScheduler+0xe0>)
 8008f48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	22ff      	movs	r2, #255	; 0xff
 8008f56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f60:	78fb      	ldrb	r3, [r7, #3]
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	4b2e      	ldr	r3, [pc, #184]	; (8009024 <xPortStartScheduler+0xe4>)
 8008f6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f6e:	4b2e      	ldr	r3, [pc, #184]	; (8009028 <xPortStartScheduler+0xe8>)
 8008f70:	2207      	movs	r2, #7
 8008f72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f74:	e009      	b.n	8008f8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008f76:	4b2c      	ldr	r3, [pc, #176]	; (8009028 <xPortStartScheduler+0xe8>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	4a2a      	ldr	r2, [pc, #168]	; (8009028 <xPortStartScheduler+0xe8>)
 8008f7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f80:	78fb      	ldrb	r3, [r7, #3]
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	005b      	lsls	r3, r3, #1
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f8a:	78fb      	ldrb	r3, [r7, #3]
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f92:	2b80      	cmp	r3, #128	; 0x80
 8008f94:	d0ef      	beq.n	8008f76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f96:	4b24      	ldr	r3, [pc, #144]	; (8009028 <xPortStartScheduler+0xe8>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f1c3 0307 	rsb	r3, r3, #7
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d00b      	beq.n	8008fba <xPortStartScheduler+0x7a>
 8008fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa6:	b672      	cpsid	i
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	b662      	cpsie	i
 8008fb6:	60bb      	str	r3, [r7, #8]
 8008fb8:	e7fe      	b.n	8008fb8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008fba:	4b1b      	ldr	r3, [pc, #108]	; (8009028 <xPortStartScheduler+0xe8>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	021b      	lsls	r3, r3, #8
 8008fc0:	4a19      	ldr	r2, [pc, #100]	; (8009028 <xPortStartScheduler+0xe8>)
 8008fc2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008fc4:	4b18      	ldr	r3, [pc, #96]	; (8009028 <xPortStartScheduler+0xe8>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fcc:	4a16      	ldr	r2, [pc, #88]	; (8009028 <xPortStartScheduler+0xe8>)
 8008fce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fd8:	4b14      	ldr	r3, [pc, #80]	; (800902c <xPortStartScheduler+0xec>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a13      	ldr	r2, [pc, #76]	; (800902c <xPortStartScheduler+0xec>)
 8008fde:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008fe2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fe4:	4b11      	ldr	r3, [pc, #68]	; (800902c <xPortStartScheduler+0xec>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a10      	ldr	r2, [pc, #64]	; (800902c <xPortStartScheduler+0xec>)
 8008fea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008fee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ff0:	f000 f8d4 	bl	800919c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ff4:	4b0e      	ldr	r3, [pc, #56]	; (8009030 <xPortStartScheduler+0xf0>)
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ffa:	f000 f8f3 	bl	80091e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ffe:	4b0d      	ldr	r3, [pc, #52]	; (8009034 <xPortStartScheduler+0xf4>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a0c      	ldr	r2, [pc, #48]	; (8009034 <xPortStartScheduler+0xf4>)
 8009004:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009008:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800900a:	f7ff ff85 	bl	8008f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800900e:	f7ff fa73 	bl	80084f8 <vTaskSwitchContext>
	prvTaskExitError();
 8009012:	f7ff ff3b 	bl	8008e8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	e000e400 	.word	0xe000e400
 8009024:	20000274 	.word	0x20000274
 8009028:	20000278 	.word	0x20000278
 800902c:	e000ed20 	.word	0xe000ed20
 8009030:	20000034 	.word	0x20000034
 8009034:	e000ef34 	.word	0xe000ef34

08009038 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009042:	b672      	cpsid	i
 8009044:	f383 8811 	msr	BASEPRI, r3
 8009048:	f3bf 8f6f 	isb	sy
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	b662      	cpsie	i
 8009052:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009054:	4b0f      	ldr	r3, [pc, #60]	; (8009094 <vPortEnterCritical+0x5c>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	3301      	adds	r3, #1
 800905a:	4a0e      	ldr	r2, [pc, #56]	; (8009094 <vPortEnterCritical+0x5c>)
 800905c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800905e:	4b0d      	ldr	r3, [pc, #52]	; (8009094 <vPortEnterCritical+0x5c>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2b01      	cmp	r3, #1
 8009064:	d110      	bne.n	8009088 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009066:	4b0c      	ldr	r3, [pc, #48]	; (8009098 <vPortEnterCritical+0x60>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	b2db      	uxtb	r3, r3
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00b      	beq.n	8009088 <vPortEnterCritical+0x50>
 8009070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009074:	b672      	cpsid	i
 8009076:	f383 8811 	msr	BASEPRI, r3
 800907a:	f3bf 8f6f 	isb	sy
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	b662      	cpsie	i
 8009084:	603b      	str	r3, [r7, #0]
 8009086:	e7fe      	b.n	8009086 <vPortEnterCritical+0x4e>
	}
}
 8009088:	bf00      	nop
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr
 8009094:	20000034 	.word	0x20000034
 8009098:	e000ed04 	.word	0xe000ed04

0800909c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80090a2:	4b12      	ldr	r3, [pc, #72]	; (80090ec <vPortExitCritical+0x50>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d10b      	bne.n	80090c2 <vPortExitCritical+0x26>
 80090aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ae:	b672      	cpsid	i
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	b662      	cpsie	i
 80090be:	607b      	str	r3, [r7, #4]
 80090c0:	e7fe      	b.n	80090c0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80090c2:	4b0a      	ldr	r3, [pc, #40]	; (80090ec <vPortExitCritical+0x50>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	3b01      	subs	r3, #1
 80090c8:	4a08      	ldr	r2, [pc, #32]	; (80090ec <vPortExitCritical+0x50>)
 80090ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090cc:	4b07      	ldr	r3, [pc, #28]	; (80090ec <vPortExitCritical+0x50>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d104      	bne.n	80090de <vPortExitCritical+0x42>
 80090d4:	2300      	movs	r3, #0
 80090d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80090de:	bf00      	nop
 80090e0:	370c      	adds	r7, #12
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	20000034 	.word	0x20000034

080090f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090f0:	f3ef 8009 	mrs	r0, PSP
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	4b15      	ldr	r3, [pc, #84]	; (8009150 <pxCurrentTCBConst>)
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	f01e 0f10 	tst.w	lr, #16
 8009100:	bf08      	it	eq
 8009102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800910a:	6010      	str	r0, [r2, #0]
 800910c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009110:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009114:	b672      	cpsid	i
 8009116:	f380 8811 	msr	BASEPRI, r0
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	b662      	cpsie	i
 8009124:	f7ff f9e8 	bl	80084f8 <vTaskSwitchContext>
 8009128:	f04f 0000 	mov.w	r0, #0
 800912c:	f380 8811 	msr	BASEPRI, r0
 8009130:	bc09      	pop	{r0, r3}
 8009132:	6819      	ldr	r1, [r3, #0]
 8009134:	6808      	ldr	r0, [r1, #0]
 8009136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913a:	f01e 0f10 	tst.w	lr, #16
 800913e:	bf08      	it	eq
 8009140:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009144:	f380 8809 	msr	PSP, r0
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop

08009150 <pxCurrentTCBConst>:
 8009150:	20000148 	.word	0x20000148
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009154:	bf00      	nop
 8009156:	bf00      	nop

08009158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
	__asm volatile
 800915e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009162:	b672      	cpsid	i
 8009164:	f383 8811 	msr	BASEPRI, r3
 8009168:	f3bf 8f6f 	isb	sy
 800916c:	f3bf 8f4f 	dsb	sy
 8009170:	b662      	cpsie	i
 8009172:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009174:	f7ff f902 	bl	800837c <xTaskIncrementTick>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d003      	beq.n	8009186 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800917e:	4b06      	ldr	r3, [pc, #24]	; (8009198 <SysTick_Handler+0x40>)
 8009180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009184:	601a      	str	r2, [r3, #0]
 8009186:	2300      	movs	r3, #0
 8009188:	603b      	str	r3, [r7, #0]
	__asm volatile
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009190:	bf00      	nop
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	e000ed04 	.word	0xe000ed04

0800919c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800919c:	b480      	push	{r7}
 800919e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091a0:	4b0b      	ldr	r3, [pc, #44]	; (80091d0 <vPortSetupTimerInterrupt+0x34>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091a6:	4b0b      	ldr	r3, [pc, #44]	; (80091d4 <vPortSetupTimerInterrupt+0x38>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091ac:	4b0a      	ldr	r3, [pc, #40]	; (80091d8 <vPortSetupTimerInterrupt+0x3c>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a0a      	ldr	r2, [pc, #40]	; (80091dc <vPortSetupTimerInterrupt+0x40>)
 80091b2:	fba2 2303 	umull	r2, r3, r2, r3
 80091b6:	099b      	lsrs	r3, r3, #6
 80091b8:	4a09      	ldr	r2, [pc, #36]	; (80091e0 <vPortSetupTimerInterrupt+0x44>)
 80091ba:	3b01      	subs	r3, #1
 80091bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091be:	4b04      	ldr	r3, [pc, #16]	; (80091d0 <vPortSetupTimerInterrupt+0x34>)
 80091c0:	2207      	movs	r2, #7
 80091c2:	601a      	str	r2, [r3, #0]
}
 80091c4:	bf00      	nop
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	e000e010 	.word	0xe000e010
 80091d4:	e000e018 	.word	0xe000e018
 80091d8:	20000004 	.word	0x20000004
 80091dc:	10624dd3 	.word	0x10624dd3
 80091e0:	e000e014 	.word	0xe000e014

080091e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80091f4 <vPortEnableVFP+0x10>
 80091e8:	6801      	ldr	r1, [r0, #0]
 80091ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80091ee:	6001      	str	r1, [r0, #0]
 80091f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80091f2:	bf00      	nop
 80091f4:	e000ed88 	.word	0xe000ed88

080091f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80091fe:	f3ef 8305 	mrs	r3, IPSR
 8009202:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2b0f      	cmp	r3, #15
 8009208:	d915      	bls.n	8009236 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800920a:	4a18      	ldr	r2, [pc, #96]	; (800926c <vPortValidateInterruptPriority+0x74>)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	4413      	add	r3, r2
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009214:	4b16      	ldr	r3, [pc, #88]	; (8009270 <vPortValidateInterruptPriority+0x78>)
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	7afa      	ldrb	r2, [r7, #11]
 800921a:	429a      	cmp	r2, r3
 800921c:	d20b      	bcs.n	8009236 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800921e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009222:	b672      	cpsid	i
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	b662      	cpsie	i
 8009232:	607b      	str	r3, [r7, #4]
 8009234:	e7fe      	b.n	8009234 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009236:	4b0f      	ldr	r3, [pc, #60]	; (8009274 <vPortValidateInterruptPriority+0x7c>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800923e:	4b0e      	ldr	r3, [pc, #56]	; (8009278 <vPortValidateInterruptPriority+0x80>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	429a      	cmp	r2, r3
 8009244:	d90b      	bls.n	800925e <vPortValidateInterruptPriority+0x66>
 8009246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924a:	b672      	cpsid	i
 800924c:	f383 8811 	msr	BASEPRI, r3
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	b662      	cpsie	i
 800925a:	603b      	str	r3, [r7, #0]
 800925c:	e7fe      	b.n	800925c <vPortValidateInterruptPriority+0x64>
	}
 800925e:	bf00      	nop
 8009260:	3714      	adds	r7, #20
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	e000e3f0 	.word	0xe000e3f0
 8009270:	20000274 	.word	0x20000274
 8009274:	e000ed0c 	.word	0xe000ed0c
 8009278:	20000278 	.word	0x20000278

0800927c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b08a      	sub	sp, #40	; 0x28
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009284:	2300      	movs	r3, #0
 8009286:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009288:	f7fe ffcc 	bl	8008224 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800928c:	4b5c      	ldr	r3, [pc, #368]	; (8009400 <pvPortMalloc+0x184>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d101      	bne.n	8009298 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009294:	f000 f91a 	bl	80094cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009298:	4b5a      	ldr	r3, [pc, #360]	; (8009404 <pvPortMalloc+0x188>)
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4013      	ands	r3, r2
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f040 8090 	bne.w	80093c6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d01e      	beq.n	80092ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80092ac:	2208      	movs	r2, #8
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4413      	add	r3, r2
 80092b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f003 0307 	and.w	r3, r3, #7
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d015      	beq.n	80092ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f023 0307 	bic.w	r3, r3, #7
 80092c4:	3308      	adds	r3, #8
 80092c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f003 0307 	and.w	r3, r3, #7
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00b      	beq.n	80092ea <pvPortMalloc+0x6e>
 80092d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d6:	b672      	cpsid	i
 80092d8:	f383 8811 	msr	BASEPRI, r3
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	b662      	cpsie	i
 80092e6:	617b      	str	r3, [r7, #20]
 80092e8:	e7fe      	b.n	80092e8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d06a      	beq.n	80093c6 <pvPortMalloc+0x14a>
 80092f0:	4b45      	ldr	r3, [pc, #276]	; (8009408 <pvPortMalloc+0x18c>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d865      	bhi.n	80093c6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80092fa:	4b44      	ldr	r3, [pc, #272]	; (800940c <pvPortMalloc+0x190>)
 80092fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80092fe:	4b43      	ldr	r3, [pc, #268]	; (800940c <pvPortMalloc+0x190>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009304:	e004      	b.n	8009310 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009308:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800930a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	429a      	cmp	r2, r3
 8009318:	d903      	bls.n	8009322 <pvPortMalloc+0xa6>
 800931a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1f1      	bne.n	8009306 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009322:	4b37      	ldr	r3, [pc, #220]	; (8009400 <pvPortMalloc+0x184>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009328:	429a      	cmp	r2, r3
 800932a:	d04c      	beq.n	80093c6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800932c:	6a3b      	ldr	r3, [r7, #32]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2208      	movs	r2, #8
 8009332:	4413      	add	r3, r2
 8009334:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	6a3b      	ldr	r3, [r7, #32]
 800933c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800933e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009340:	685a      	ldr	r2, [r3, #4]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	1ad2      	subs	r2, r2, r3
 8009346:	2308      	movs	r3, #8
 8009348:	005b      	lsls	r3, r3, #1
 800934a:	429a      	cmp	r2, r3
 800934c:	d920      	bls.n	8009390 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800934e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4413      	add	r3, r2
 8009354:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	f003 0307 	and.w	r3, r3, #7
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00b      	beq.n	8009378 <pvPortMalloc+0xfc>
 8009360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009364:	b672      	cpsid	i
 8009366:	f383 8811 	msr	BASEPRI, r3
 800936a:	f3bf 8f6f 	isb	sy
 800936e:	f3bf 8f4f 	dsb	sy
 8009372:	b662      	cpsie	i
 8009374:	613b      	str	r3, [r7, #16]
 8009376:	e7fe      	b.n	8009376 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	1ad2      	subs	r2, r2, r3
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800938a:	69b8      	ldr	r0, [r7, #24]
 800938c:	f000 f900 	bl	8009590 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009390:	4b1d      	ldr	r3, [pc, #116]	; (8009408 <pvPortMalloc+0x18c>)
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	4a1b      	ldr	r2, [pc, #108]	; (8009408 <pvPortMalloc+0x18c>)
 800939c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800939e:	4b1a      	ldr	r3, [pc, #104]	; (8009408 <pvPortMalloc+0x18c>)
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	4b1b      	ldr	r3, [pc, #108]	; (8009410 <pvPortMalloc+0x194>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d203      	bcs.n	80093b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093aa:	4b17      	ldr	r3, [pc, #92]	; (8009408 <pvPortMalloc+0x18c>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a18      	ldr	r2, [pc, #96]	; (8009410 <pvPortMalloc+0x194>)
 80093b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b4:	685a      	ldr	r2, [r3, #4]
 80093b6:	4b13      	ldr	r3, [pc, #76]	; (8009404 <pvPortMalloc+0x188>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	431a      	orrs	r2, r3
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c2:	2200      	movs	r2, #0
 80093c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80093c6:	f7fe ff3b 	bl	8008240 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d101      	bne.n	80093d4 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80093d0:	f7f7 f900 	bl	80005d4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	f003 0307 	and.w	r3, r3, #7
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00b      	beq.n	80093f6 <pvPortMalloc+0x17a>
 80093de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e2:	b672      	cpsid	i
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	b662      	cpsie	i
 80093f2:	60fb      	str	r3, [r7, #12]
 80093f4:	e7fe      	b.n	80093f4 <pvPortMalloc+0x178>
	return pvReturn;
 80093f6:	69fb      	ldr	r3, [r7, #28]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3728      	adds	r7, #40	; 0x28
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	20008284 	.word	0x20008284
 8009404:	20008290 	.word	0x20008290
 8009408:	20008288 	.word	0x20008288
 800940c:	2000827c 	.word	0x2000827c
 8009410:	2000828c 	.word	0x2000828c

08009414 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d04a      	beq.n	80094bc <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009426:	2308      	movs	r3, #8
 8009428:	425b      	negs	r3, r3
 800942a:	697a      	ldr	r2, [r7, #20]
 800942c:	4413      	add	r3, r2
 800942e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	685a      	ldr	r2, [r3, #4]
 8009438:	4b22      	ldr	r3, [pc, #136]	; (80094c4 <vPortFree+0xb0>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4013      	ands	r3, r2
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10b      	bne.n	800945a <vPortFree+0x46>
 8009442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009446:	b672      	cpsid	i
 8009448:	f383 8811 	msr	BASEPRI, r3
 800944c:	f3bf 8f6f 	isb	sy
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	b662      	cpsie	i
 8009456:	60fb      	str	r3, [r7, #12]
 8009458:	e7fe      	b.n	8009458 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00b      	beq.n	800947a <vPortFree+0x66>
 8009462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009466:	b672      	cpsid	i
 8009468:	f383 8811 	msr	BASEPRI, r3
 800946c:	f3bf 8f6f 	isb	sy
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	b662      	cpsie	i
 8009476:	60bb      	str	r3, [r7, #8]
 8009478:	e7fe      	b.n	8009478 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	685a      	ldr	r2, [r3, #4]
 800947e:	4b11      	ldr	r3, [pc, #68]	; (80094c4 <vPortFree+0xb0>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4013      	ands	r3, r2
 8009484:	2b00      	cmp	r3, #0
 8009486:	d019      	beq.n	80094bc <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d115      	bne.n	80094bc <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	685a      	ldr	r2, [r3, #4]
 8009494:	4b0b      	ldr	r3, [pc, #44]	; (80094c4 <vPortFree+0xb0>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	43db      	mvns	r3, r3
 800949a:	401a      	ands	r2, r3
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80094a0:	f7fe fec0 	bl	8008224 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	685a      	ldr	r2, [r3, #4]
 80094a8:	4b07      	ldr	r3, [pc, #28]	; (80094c8 <vPortFree+0xb4>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4413      	add	r3, r2
 80094ae:	4a06      	ldr	r2, [pc, #24]	; (80094c8 <vPortFree+0xb4>)
 80094b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80094b2:	6938      	ldr	r0, [r7, #16]
 80094b4:	f000 f86c 	bl	8009590 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80094b8:	f7fe fec2 	bl	8008240 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80094bc:	bf00      	nop
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	20008290 	.word	0x20008290
 80094c8:	20008288 	.word	0x20008288

080094cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80094d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094d8:	4b27      	ldr	r3, [pc, #156]	; (8009578 <prvHeapInit+0xac>)
 80094da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f003 0307 	and.w	r3, r3, #7
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00c      	beq.n	8009500 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	3307      	adds	r3, #7
 80094ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f023 0307 	bic.w	r3, r3, #7
 80094f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	1ad3      	subs	r3, r2, r3
 80094fa:	4a1f      	ldr	r2, [pc, #124]	; (8009578 <prvHeapInit+0xac>)
 80094fc:	4413      	add	r3, r2
 80094fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009504:	4a1d      	ldr	r2, [pc, #116]	; (800957c <prvHeapInit+0xb0>)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800950a:	4b1c      	ldr	r3, [pc, #112]	; (800957c <prvHeapInit+0xb0>)
 800950c:	2200      	movs	r2, #0
 800950e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	68ba      	ldr	r2, [r7, #8]
 8009514:	4413      	add	r3, r2
 8009516:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009518:	2208      	movs	r2, #8
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	1a9b      	subs	r3, r3, r2
 800951e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f023 0307 	bic.w	r3, r3, #7
 8009526:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	4a15      	ldr	r2, [pc, #84]	; (8009580 <prvHeapInit+0xb4>)
 800952c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800952e:	4b14      	ldr	r3, [pc, #80]	; (8009580 <prvHeapInit+0xb4>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2200      	movs	r2, #0
 8009534:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009536:	4b12      	ldr	r3, [pc, #72]	; (8009580 <prvHeapInit+0xb4>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2200      	movs	r2, #0
 800953c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	1ad2      	subs	r2, r2, r3
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800954c:	4b0c      	ldr	r3, [pc, #48]	; (8009580 <prvHeapInit+0xb4>)
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	4a0a      	ldr	r2, [pc, #40]	; (8009584 <prvHeapInit+0xb8>)
 800955a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	4a09      	ldr	r2, [pc, #36]	; (8009588 <prvHeapInit+0xbc>)
 8009562:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009564:	4b09      	ldr	r3, [pc, #36]	; (800958c <prvHeapInit+0xc0>)
 8009566:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800956a:	601a      	str	r2, [r3, #0]
}
 800956c:	bf00      	nop
 800956e:	3714      	adds	r7, #20
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr
 8009578:	2000027c 	.word	0x2000027c
 800957c:	2000827c 	.word	0x2000827c
 8009580:	20008284 	.word	0x20008284
 8009584:	2000828c 	.word	0x2000828c
 8009588:	20008288 	.word	0x20008288
 800958c:	20008290 	.word	0x20008290

08009590 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009598:	4b28      	ldr	r3, [pc, #160]	; (800963c <prvInsertBlockIntoFreeList+0xac>)
 800959a:	60fb      	str	r3, [r7, #12]
 800959c:	e002      	b.n	80095a4 <prvInsertBlockIntoFreeList+0x14>
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d8f7      	bhi.n	800959e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	68ba      	ldr	r2, [r7, #8]
 80095b8:	4413      	add	r3, r2
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d108      	bne.n	80095d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	685a      	ldr	r2, [r3, #4]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	441a      	add	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	441a      	add	r2, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d118      	bne.n	8009618 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	4b15      	ldr	r3, [pc, #84]	; (8009640 <prvInsertBlockIntoFreeList+0xb0>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d00d      	beq.n	800960e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	685a      	ldr	r2, [r3, #4]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	441a      	add	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	e008      	b.n	8009620 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800960e:	4b0c      	ldr	r3, [pc, #48]	; (8009640 <prvInsertBlockIntoFreeList+0xb0>)
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	e003      	b.n	8009620 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	429a      	cmp	r2, r3
 8009626:	d002      	beq.n	800962e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800962e:	bf00      	nop
 8009630:	3714      	adds	r7, #20
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	2000827c 	.word	0x2000827c
 8009640:	20008284 	.word	0x20008284

08009644 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 8009648:	f008 fcdc 	bl	8012004 <touchgfx_init>
}
 800964c:	bf00      	nop
 800964e:	bd80      	pop	{r7, pc}

08009650 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 8009654:	f008 fd00 	bl	8012058 <touchgfx_taskEntry>
}
 8009658:	bf00      	nop
 800965a:	bd80      	pop	{r7, pc}

0800965c <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
    {
 8009664:	4a04      	ldr	r2, [pc, #16]	; (8009678 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	601a      	str	r2, [r3, #0]
    }
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4618      	mov	r0, r3
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr
 8009678:	08024970 	.word	0x08024970

0800967c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
    }
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7ff ffe9 	bl	800965c <_ZN8touchgfx12FontProviderD1Ev>
 800968a:	2104      	movs	r1, #4
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f019 fcde 	bl	802304e <_ZdlPvj>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4618      	mov	r0, r3
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	460b      	mov	r3, r1
 80096a6:	807b      	strh	r3, [r7, #2]
    switch (typography)
 80096a8:	887b      	ldrh	r3, [r7, #2]
 80096aa:	2b04      	cmp	r3, #4
 80096ac:	d825      	bhi.n	80096fa <_ZN23ApplicationFontProvider7getFontEt+0x5e>
 80096ae:	a201      	add	r2, pc, #4	; (adr r2, 80096b4 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 80096b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b4:	080096c9 	.word	0x080096c9
 80096b8:	080096d3 	.word	0x080096d3
 80096bc:	080096dd 	.word	0x080096dd
 80096c0:	080096e7 	.word	0x080096e7
 80096c4:	080096f1 	.word	0x080096f1
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80096c8:	f006 f938 	bl	800f93c <_ZN17TypedTextDatabase8getFontsEv>
 80096cc:	4603      	mov	r3, r0
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	e014      	b.n	80096fc <_ZN23ApplicationFontProvider7getFontEt+0x60>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80096d2:	f006 f933 	bl	800f93c <_ZN17TypedTextDatabase8getFontsEv>
 80096d6:	4603      	mov	r3, r0
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	e00f      	b.n	80096fc <_ZN23ApplicationFontProvider7getFontEt+0x60>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80096dc:	f006 f92e 	bl	800f93c <_ZN17TypedTextDatabase8getFontsEv>
 80096e0:	4603      	mov	r3, r0
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	e00a      	b.n	80096fc <_ZN23ApplicationFontProvider7getFontEt+0x60>
    case Typography::CANAL:
        // verdana_80_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 80096e6:	f006 f929 	bl	800f93c <_ZN17TypedTextDatabase8getFontsEv>
 80096ea:	4603      	mov	r3, r0
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	e005      	b.n	80096fc <_ZN23ApplicationFontProvider7getFontEt+0x60>
    case Typography::TYPOGRAPHY_15:
        // verdana_15_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 80096f0:	f006 f924 	bl	800f93c <_ZN17TypedTextDatabase8getFontsEv>
 80096f4:	4603      	mov	r3, r0
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	e000      	b.n	80096fc <_ZN23ApplicationFontProvider7getFontEt+0x60>
    default:
        return 0;
 80096fa:	2300      	movs	r3, #0
    }
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3708      	adds	r7, #8
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId CANAL = 3;         // verdana_80_4bpp
    static const touchgfx::FontId TYPOGRAPHY_15 = 4; // verdana_15_4bpp
    static const uint16_t NUMBER_OF_FONTS = 5;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	4a05      	ldr	r2, [pc, #20]	; (8009724 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	601a      	str	r2, [r3, #0]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4618      	mov	r0, r3
 8009716:	f7ff ffa1 	bl	800965c <_ZN8touchgfx12FontProviderD1Ev>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4618      	mov	r0, r3
 800971e:	3708      	adds	r7, #8
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	0802495c 	.word	0x0802495c

08009728 <_ZN23ApplicationFontProviderD0Ev>:
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f7ff ffe7 	bl	8009704 <_ZN23ApplicationFontProviderD1Ev>
 8009736:	2104      	movs	r1, #4
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f019 fc88 	bl	802304e <_ZdlPvj>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4618      	mov	r0, r3
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	4a04      	ldr	r2, [pc, #16]	; (8009764 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	601a      	str	r2, [r3, #0]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4618      	mov	r0, r3
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr
 8009764:	080283f0 	.word	0x080283f0

08009768 <_ZN8touchgfx4FontD0Ev>:
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f7ff ffe9 	bl	8009748 <_ZN8touchgfx4FontD1Ev>
 8009776:	2110      	movs	r1, #16
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f019 fc68 	bl	802304e <_ZdlPvj>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4618      	mov	r0, r3
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8009788:	b590      	push	{r4, r7, lr}
 800978a:	b087      	sub	sp, #28
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	460b      	mov	r3, r1
 8009792:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 8009794:	2300      	movs	r3, #0
 8009796:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8009798:	2300      	movs	r3, #0
 800979a:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	3308      	adds	r3, #8
 80097a2:	681c      	ldr	r4, [r3, #0]
 80097a4:	f107 030f 	add.w	r3, r7, #15
 80097a8:	f107 0210 	add.w	r2, r7, #16
 80097ac:	8879      	ldrh	r1, [r7, #2]
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	47a0      	blx	r4
 80097b2:	6178      	str	r0, [r7, #20]
        return glyph;
 80097b4:	697b      	ldr	r3, [r7, #20]
    }
 80097b6:	4618      	mov	r0, r3
 80097b8:	371c      	adds	r7, #28
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd90      	pop	{r4, r7, pc}

080097be <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80097be:	b480      	push	{r7}
 80097c0:	b083      	sub	sp, #12
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	895b      	ldrh	r3, [r3, #10]
    }
 80097ca:	4618      	mov	r0, r3
 80097cc:	370c      	adds	r7, #12
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 80097d6:	b480      	push	{r7}
 80097d8:	b083      	sub	sp, #12
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	899b      	ldrh	r3, [r3, #12]
    }
 80097e2:	4618      	mov	r0, r3
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 80097ee:	b480      	push	{r7}
 80097f0:	b083      	sub	sp, #12
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	889b      	ldrh	r3, [r3, #4]
    }
 80097fa:	4618      	mov	r0, r3
 80097fc:	370c      	adds	r7, #12
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 8009806:	b480      	push	{r7}
 8009808:	b083      	sub	sp, #12
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	889a      	ldrh	r2, [r3, #4]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	799b      	ldrb	r3, [r3, #6]
 8009816:	b29b      	uxth	r3, r3
 8009818:	4413      	add	r3, r2
 800981a:	b29b      	uxth	r3, r3
    }
 800981c:	4618      	mov	r0, r3
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	79db      	ldrb	r3, [r3, #7]
 8009834:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8009838:	b2db      	uxtb	r3, r3
    }
 800983a:	4618      	mov	r0, r3
 800983c:	370c      	adds	r7, #12
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 8009846:	b480      	push	{r7}
 8009848:	b083      	sub	sp, #12
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	79db      	ldrb	r3, [r3, #7]
 8009852:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009856:	b2db      	uxtb	r3, r3
    }
 8009858:	4618      	mov	r0, r3
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	4a05      	ldr	r2, [pc, #20]	; (8009884 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	601a      	str	r2, [r3, #0]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4618      	mov	r0, r3
 8009876:	f7ff ff67 	bl	8009748 <_ZN8touchgfx4FontD1Ev>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4618      	mov	r0, r3
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	080284a8 	.word	0x080284a8

08009888 <_ZN8touchgfx9ConstFontD0Ev>:
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f7ff ffe7 	bl	8009864 <_ZN8touchgfx9ConstFontD1Ev>
 8009896:	2118      	movs	r1, #24
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f019 fbd8 	bl	802304e <_ZdlPvj>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4618      	mov	r0, r3
 80098a2:	3708      	adds	r7, #8
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	4a05      	ldr	r2, [pc, #20]	; (80098c8 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	601a      	str	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7ff ffd3 	bl	8009864 <_ZN8touchgfx9ConstFontD1Ev>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4618      	mov	r0, r3
 80098c2:	3708      	adds	r7, #8
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	080249b4 	.word	0x080249b4

080098cc <_ZN8touchgfx13GeneratedFontD0Ev>:
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7ff ffe7 	bl	80098a8 <_ZN8touchgfx13GeneratedFontD1Ev>
 80098da:	2124      	movs	r1, #36	; 0x24
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f019 fbb6 	bl	802304e <_ZdlPvj>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4618      	mov	r0, r3
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 f82d 	bl	8009954 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 80098fa:	4b08      	ldr	r3, [pc, #32]	; (800991c <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	4b08      	ldr	r3, [pc, #32]	; (8009920 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 8009900:	6819      	ldr	r1, [r3, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	881b      	ldrh	r3, [r3, #0]
 8009906:	005b      	lsls	r3, r3, #1
 8009908:	440b      	add	r3, r1
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	4413      	add	r3, r2
 8009910:	681b      	ldr	r3, [r3, #0]
    }
 8009912:	4618      	mov	r0, r3
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	2000b244 	.word	0x2000b244
 8009920:	2000b23c 	.word	0x2000b23c

08009924 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 f811 	bl	8009954 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 8009932:	4b07      	ldr	r3, [pc, #28]	; (8009950 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	005b      	lsls	r3, r3, #1
 800993c:	4413      	add	r3, r2
 800993e:	785b      	ldrb	r3, [r3, #1]
 8009940:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009944:	b2db      	uxtb	r3, r3
    }
 8009946:	4618      	mov	r0, r3
 8009948:	3708      	adds	r7, #8
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	2000b23c 	.word	0x2000b23c

08009954 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800995c:	4b0c      	ldr	r3, [pc, #48]	; (8009990 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d105      	bne.n	8009970 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 8009964:	4b0b      	ldr	r3, [pc, #44]	; (8009994 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 8009966:	4a0c      	ldr	r2, [pc, #48]	; (8009998 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 8009968:	21de      	movs	r1, #222	; 0xde
 800996a:	480c      	ldr	r0, [pc, #48]	; (800999c <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800996c:	f019 fb9a 	bl	80230a4 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	881a      	ldrh	r2, [r3, #0]
 8009974:	4b0a      	ldr	r3, [pc, #40]	; (80099a0 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 8009976:	881b      	ldrh	r3, [r3, #0]
 8009978:	429a      	cmp	r2, r3
 800997a:	d305      	bcc.n	8009988 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800997c:	4b09      	ldr	r3, [pc, #36]	; (80099a4 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800997e:	4a06      	ldr	r2, [pc, #24]	; (8009998 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 8009980:	21df      	movs	r1, #223	; 0xdf
 8009982:	4806      	ldr	r0, [pc, #24]	; (800999c <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 8009984:	f019 fb8e 	bl	80230a4 <__assert_func>
    }
 8009988:	bf00      	nop
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	2000b23c 	.word	0x2000b23c
 8009994:	080240f4 	.word	0x080240f4
 8009998:	0802497c 	.word	0x0802497c
 800999c:	08024138 	.word	0x08024138
 80099a0:	2000b240 	.word	0x2000b240
 80099a4:	0802417c 	.word	0x0802417c

080099a8 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	7b5b      	ldrb	r3, [r3, #13]
 80099b4:	021b      	lsls	r3, r3, #8
 80099b6:	b21b      	sxth	r3, r3
 80099b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80099bc:	b21a      	sxth	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	7adb      	ldrb	r3, [r3, #11]
 80099c2:	b21b      	sxth	r3, r3
 80099c4:	4313      	orrs	r3, r2
 80099c6:	b21b      	sxth	r3, r3
 80099c8:	b29b      	uxth	r3, r3
    }
 80099ca:	4618      	mov	r0, r3
 80099cc:	370c      	adds	r7, #12
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr

080099d6 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 80099d6:	b480      	push	{r7}
 80099d8:	b083      	sub	sp, #12
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a1b      	ldr	r3, [r3, #32]
    }
 80099e2:	4618      	mov	r0, r3
 80099e4:	370c      	adds	r7, #12
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr
	...

080099f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b08c      	sub	sp, #48	; 0x30
 80099f4:	af08      	add	r7, sp, #32
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	4611      	mov	r1, r2
 80099fc:	461a      	mov	r2, r3
 80099fe:	460b      	mov	r3, r1
 8009a00:	80fb      	strh	r3, [r7, #6]
 8009a02:	4613      	mov	r3, r2
 8009a04:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	88b9      	ldrh	r1, [r7, #4]
 8009a0a:	88fa      	ldrh	r2, [r7, #6]
 8009a0c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009a0e:	9306      	str	r3, [sp, #24]
 8009a10:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009a12:	9305      	str	r3, [sp, #20]
 8009a14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a18:	9304      	str	r3, [sp, #16]
 8009a1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a1e:	9303      	str	r3, [sp, #12]
 8009a20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a24:	9302      	str	r3, [sp, #8]
 8009a26:	7f3b      	ldrb	r3, [r7, #28]
 8009a28:	9301      	str	r3, [sp, #4]
 8009a2a:	7e3b      	ldrb	r3, [r7, #24]
 8009a2c:	9300      	str	r3, [sp, #0]
 8009a2e:	460b      	mov	r3, r1
 8009a30:	68b9      	ldr	r1, [r7, #8]
 8009a32:	f00e f90d 	bl	8017c50 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8009a36:	4a08      	ldr	r2, [pc, #32]	; (8009a58 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	601a      	str	r2, [r3, #0]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a40:	619a      	str	r2, [r3, #24]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a46:	61da      	str	r2, [r3, #28]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a4c:	621a      	str	r2, [r3, #32]
{
}
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	4618      	mov	r0, r3
 8009a52:	3710      	adds	r7, #16
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	080249b4 	.word	0x080249b4

08009a5c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	889b      	ldrh	r3, [r3, #4]
 8009a70:	0adb      	lsrs	r3, r3, #11
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	4413      	add	r3, r2
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4413      	add	r3, r2
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3714      	adds	r7, #20
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr

08009a8e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b086      	sub	sp, #24
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	60f8      	str	r0, [r7, #12]
 8009a96:	460b      	mov	r3, r1
 8009a98:	607a      	str	r2, [r7, #4]
 8009a9a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d003      	beq.n	8009aaa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	7b1b      	ldrb	r3, [r3, #12]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d101      	bne.n	8009aae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	e023      	b.n	8009af6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f7ff ff7a 	bl	80099a8 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 8009ab8:	8abb      	ldrh	r3, [r7, #20]
 8009aba:	82fb      	strh	r3, [r7, #22]
 8009abc:	8afa      	ldrh	r2, [r7, #22]
 8009abe:	8abb      	ldrh	r3, [r7, #20]
 8009ac0:	6879      	ldr	r1, [r7, #4]
 8009ac2:	7b09      	ldrb	r1, [r1, #12]
 8009ac4:	440b      	add	r3, r1
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	da14      	bge.n	8009af4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	69da      	ldr	r2, [r3, #28]
 8009ace:	8afb      	ldrh	r3, [r7, #22]
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	4413      	add	r3, r2
 8009ad4:	881b      	ldrh	r3, [r3, #0]
 8009ad6:	897a      	ldrh	r2, [r7, #10]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d107      	bne.n	8009aec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	69da      	ldr	r2, [r3, #28]
 8009ae0:	8afb      	ldrh	r3, [r7, #22]
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4413      	add	r3, r2
 8009ae6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8009aea:	e004      	b.n	8009af6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 8009aec:	8afb      	ldrh	r3, [r7, #22]
 8009aee:	3301      	adds	r3, #1
 8009af0:	82fb      	strh	r3, [r7, #22]
 8009af2:	e7e3      	b.n	8009abc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3718      	adds	r7, #24
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
	...

08009b00 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_10_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 104, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 95, 0, 0);
 8009b00:	b580      	push	{r7, lr}
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	4801      	ldr	r0, [pc, #4]	; (8009b0c <__tcf_0+0xc>)
 8009b06:	f7ff fecf 	bl	80098a8 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	20008294 	.word	0x20008294

08009b10 <_Z23getFont_verdana_10_4bppv>:
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b08a      	sub	sp, #40	; 0x28
 8009b14:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 104, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 95, 0, 0);
 8009b16:	4b15      	ldr	r3, [pc, #84]	; (8009b6c <_Z23getFont_verdana_10_4bppv+0x5c>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f003 0301 	and.w	r3, r3, #1
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d11f      	bne.n	8009b62 <_Z23getFont_verdana_10_4bppv+0x52>
 8009b22:	2300      	movs	r3, #0
 8009b24:	9309      	str	r3, [sp, #36]	; 0x24
 8009b26:	2300      	movs	r3, #0
 8009b28:	9308      	str	r3, [sp, #32]
 8009b2a:	235f      	movs	r3, #95	; 0x5f
 8009b2c:	9307      	str	r3, [sp, #28]
 8009b2e:	4b10      	ldr	r3, [pc, #64]	; (8009b70 <_Z23getFont_verdana_10_4bppv+0x60>)
 8009b30:	9306      	str	r3, [sp, #24]
 8009b32:	4b10      	ldr	r3, [pc, #64]	; (8009b74 <_Z23getFont_verdana_10_4bppv+0x64>)
 8009b34:	9305      	str	r3, [sp, #20]
 8009b36:	2301      	movs	r3, #1
 8009b38:	9304      	str	r3, [sp, #16]
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	9303      	str	r3, [sp, #12]
 8009b3e:	2301      	movs	r3, #1
 8009b40:	9302      	str	r3, [sp, #8]
 8009b42:	2304      	movs	r3, #4
 8009b44:	9301      	str	r3, [sp, #4]
 8009b46:	2302      	movs	r3, #2
 8009b48:	9300      	str	r3, [sp, #0]
 8009b4a:	230a      	movs	r3, #10
 8009b4c:	2268      	movs	r2, #104	; 0x68
 8009b4e:	490a      	ldr	r1, [pc, #40]	; (8009b78 <_Z23getFont_verdana_10_4bppv+0x68>)
 8009b50:	480a      	ldr	r0, [pc, #40]	; (8009b7c <_Z23getFont_verdana_10_4bppv+0x6c>)
 8009b52:	f7ff ff4d 	bl	80099f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8009b56:	4b05      	ldr	r3, [pc, #20]	; (8009b6c <_Z23getFont_verdana_10_4bppv+0x5c>)
 8009b58:	2201      	movs	r2, #1
 8009b5a:	601a      	str	r2, [r3, #0]
 8009b5c:	4808      	ldr	r0, [pc, #32]	; (8009b80 <_Z23getFont_verdana_10_4bppv+0x70>)
 8009b5e:	f019 fabf 	bl	80230e0 <atexit>
    return verdana_10_4bpp;
 8009b62:	4b06      	ldr	r3, [pc, #24]	; (8009b7c <_Z23getFont_verdana_10_4bppv+0x6c>)
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	200082b8 	.word	0x200082b8
 8009b70:	9017dd6c 	.word	0x9017dd6c
 8009b74:	08024a00 	.word	0x08024a00
 8009b78:	9017deb8 	.word	0x9017deb8
 8009b7c:	20008294 	.word	0x20008294
 8009b80:	08009b01 	.word	0x08009b01

08009b84 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_15_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_15_4bpp();

touchgfx::GeneratedFont& getFont_verdana_15_4bpp()
{
    static touchgfx::GeneratedFont verdana_15_4bpp(glyphs_verdana_15_4bpp, 95, 15, 3, 4, 1, 1, 1, unicodes_verdana_15_4bpp, kerning_verdana_15_4bpp, 63, 0, 0);
 8009b84:	b580      	push	{r7, lr}
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	4801      	ldr	r0, [pc, #4]	; (8009b90 <__tcf_0+0xc>)
 8009b8a:	f7ff fe8d 	bl	80098a8 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	200082bc 	.word	0x200082bc

08009b94 <_Z23getFont_verdana_15_4bppv>:
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b08a      	sub	sp, #40	; 0x28
 8009b98:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_15_4bpp(glyphs_verdana_15_4bpp, 95, 15, 3, 4, 1, 1, 1, unicodes_verdana_15_4bpp, kerning_verdana_15_4bpp, 63, 0, 0);
 8009b9a:	4b15      	ldr	r3, [pc, #84]	; (8009bf0 <_Z23getFont_verdana_15_4bppv+0x5c>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d11f      	bne.n	8009be6 <_Z23getFont_verdana_15_4bppv+0x52>
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8009baa:	2300      	movs	r3, #0
 8009bac:	9308      	str	r3, [sp, #32]
 8009bae:	233f      	movs	r3, #63	; 0x3f
 8009bb0:	9307      	str	r3, [sp, #28]
 8009bb2:	4b10      	ldr	r3, [pc, #64]	; (8009bf4 <_Z23getFont_verdana_15_4bppv+0x60>)
 8009bb4:	9306      	str	r3, [sp, #24]
 8009bb6:	4b10      	ldr	r3, [pc, #64]	; (8009bf8 <_Z23getFont_verdana_15_4bppv+0x64>)
 8009bb8:	9305      	str	r3, [sp, #20]
 8009bba:	2301      	movs	r3, #1
 8009bbc:	9304      	str	r3, [sp, #16]
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	9303      	str	r3, [sp, #12]
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	9302      	str	r3, [sp, #8]
 8009bc6:	2304      	movs	r3, #4
 8009bc8:	9301      	str	r3, [sp, #4]
 8009bca:	2303      	movs	r3, #3
 8009bcc:	9300      	str	r3, [sp, #0]
 8009bce:	230f      	movs	r3, #15
 8009bd0:	225f      	movs	r2, #95	; 0x5f
 8009bd2:	490a      	ldr	r1, [pc, #40]	; (8009bfc <_Z23getFont_verdana_15_4bppv+0x68>)
 8009bd4:	480a      	ldr	r0, [pc, #40]	; (8009c00 <_Z23getFont_verdana_15_4bppv+0x6c>)
 8009bd6:	f7ff ff0b 	bl	80099f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8009bda:	4b05      	ldr	r3, [pc, #20]	; (8009bf0 <_Z23getFont_verdana_15_4bppv+0x5c>)
 8009bdc:	2201      	movs	r2, #1
 8009bde:	601a      	str	r2, [r3, #0]
 8009be0:	4808      	ldr	r0, [pc, #32]	; (8009c04 <_Z23getFont_verdana_15_4bppv+0x70>)
 8009be2:	f019 fa7d 	bl	80230e0 <atexit>
    return verdana_15_4bpp;
 8009be6:	4b06      	ldr	r3, [pc, #24]	; (8009c00 <_Z23getFont_verdana_15_4bppv+0x6c>)
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	200082e0 	.word	0x200082e0
 8009bf4:	9017dda0 	.word	0x9017dda0
 8009bf8:	08024a04 	.word	0x08024a04
 8009bfc:	9017e468 	.word	0x9017e468
 8009c00:	200082bc 	.word	0x200082bc
 8009c04:	08009b85 	.word	0x08009b85

08009c08 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 38, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	4801      	ldr	r0, [pc, #4]	; (8009c14 <__tcf_0+0xc>)
 8009c0e:	f7ff fe4b 	bl	80098a8 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	200082e4 	.word	0x200082e4

08009c18 <_Z23getFont_verdana_20_4bppv>:
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b08a      	sub	sp, #40	; 0x28
 8009c1c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 38, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8009c1e:	4b15      	ldr	r3, [pc, #84]	; (8009c74 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f003 0301 	and.w	r3, r3, #1
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d11f      	bne.n	8009c6a <_Z23getFont_verdana_20_4bppv+0x52>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c2e:	2300      	movs	r3, #0
 8009c30:	9308      	str	r3, [sp, #32]
 8009c32:	233f      	movs	r3, #63	; 0x3f
 8009c34:	9307      	str	r3, [sp, #28]
 8009c36:	4b10      	ldr	r3, [pc, #64]	; (8009c78 <_Z23getFont_verdana_20_4bppv+0x60>)
 8009c38:	9306      	str	r3, [sp, #24]
 8009c3a:	4b10      	ldr	r3, [pc, #64]	; (8009c7c <_Z23getFont_verdana_20_4bppv+0x64>)
 8009c3c:	9305      	str	r3, [sp, #20]
 8009c3e:	2301      	movs	r3, #1
 8009c40:	9304      	str	r3, [sp, #16]
 8009c42:	2301      	movs	r3, #1
 8009c44:	9303      	str	r3, [sp, #12]
 8009c46:	2301      	movs	r3, #1
 8009c48:	9302      	str	r3, [sp, #8]
 8009c4a:	2304      	movs	r3, #4
 8009c4c:	9301      	str	r3, [sp, #4]
 8009c4e:	2304      	movs	r3, #4
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	2314      	movs	r3, #20
 8009c54:	2226      	movs	r2, #38	; 0x26
 8009c56:	490a      	ldr	r1, [pc, #40]	; (8009c80 <_Z23getFont_verdana_20_4bppv+0x68>)
 8009c58:	480a      	ldr	r0, [pc, #40]	; (8009c84 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8009c5a:	f7ff fec9 	bl	80099f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8009c5e:	4b05      	ldr	r3, [pc, #20]	; (8009c74 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8009c60:	2201      	movs	r2, #1
 8009c62:	601a      	str	r2, [r3, #0]
 8009c64:	4808      	ldr	r0, [pc, #32]	; (8009c88 <_Z23getFont_verdana_20_4bppv+0x70>)
 8009c66:	f019 fa3b 	bl	80230e0 <atexit>
    return verdana_20_4bpp;
 8009c6a:	4b06      	ldr	r3, [pc, #24]	; (8009c84 <_Z23getFont_verdana_20_4bppv+0x6c>)
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	20008308 	.word	0x20008308
 8009c78:	9017de7c 	.word	0x9017de7c
 8009c7c:	08024a08 	.word	0x08024a08
 8009c80:	9017e99c 	.word	0x9017e99c
 8009c84:	200082e4 	.word	0x200082e4
 8009c88:	08009c09 	.word	0x08009c09

08009c8c <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	4801      	ldr	r0, [pc, #4]	; (8009c98 <__tcf_0+0xc>)
 8009c92:	f7ff fe09 	bl	80098a8 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	2000830c 	.word	0x2000830c

08009c9c <_Z23getFont_verdana_40_4bppv>:
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b08a      	sub	sp, #40	; 0x28
 8009ca0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8009ca2:	4b15      	ldr	r3, [pc, #84]	; (8009cf8 <_Z23getFont_verdana_40_4bppv+0x5c>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f003 0301 	and.w	r3, r3, #1
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d11f      	bne.n	8009cee <_Z23getFont_verdana_40_4bppv+0x52>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	9308      	str	r3, [sp, #32]
 8009cb6:	233f      	movs	r3, #63	; 0x3f
 8009cb8:	9307      	str	r3, [sp, #28]
 8009cba:	4b10      	ldr	r3, [pc, #64]	; (8009cfc <_Z23getFont_verdana_40_4bppv+0x60>)
 8009cbc:	9306      	str	r3, [sp, #24]
 8009cbe:	4b10      	ldr	r3, [pc, #64]	; (8009d00 <_Z23getFont_verdana_40_4bppv+0x64>)
 8009cc0:	9305      	str	r3, [sp, #20]
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	9304      	str	r3, [sp, #16]
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	9303      	str	r3, [sp, #12]
 8009cca:	2301      	movs	r3, #1
 8009ccc:	9302      	str	r3, [sp, #8]
 8009cce:	2304      	movs	r3, #4
 8009cd0:	9301      	str	r3, [sp, #4]
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	9300      	str	r3, [sp, #0]
 8009cd6:	2328      	movs	r3, #40	; 0x28
 8009cd8:	2201      	movs	r2, #1
 8009cda:	490a      	ldr	r1, [pc, #40]	; (8009d04 <_Z23getFont_verdana_40_4bppv+0x68>)
 8009cdc:	480a      	ldr	r0, [pc, #40]	; (8009d08 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8009cde:	f7ff fe87 	bl	80099f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8009ce2:	4b05      	ldr	r3, [pc, #20]	; (8009cf8 <_Z23getFont_verdana_40_4bppv+0x5c>)
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	601a      	str	r2, [r3, #0]
 8009ce8:	4808      	ldr	r0, [pc, #32]	; (8009d0c <_Z23getFont_verdana_40_4bppv+0x70>)
 8009cea:	f019 f9f9 	bl	80230e0 <atexit>
    return verdana_40_4bpp;
 8009cee:	4b06      	ldr	r3, [pc, #24]	; (8009d08 <_Z23getFont_verdana_40_4bppv+0x6c>)
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	20008330 	.word	0x20008330
 8009cfc:	9017deb0 	.word	0x9017deb0
 8009d00:	08024a0c 	.word	0x08024a0c
 8009d04:	9017ebb0 	.word	0x9017ebb0
 8009d08:	2000830c 	.word	0x2000830c
 8009d0c:	08009c8d 	.word	0x08009c8d

08009d10 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_80_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_80_4bpp();

touchgfx::GeneratedFont& getFont_verdana_80_4bpp()
{
    static touchgfx::GeneratedFont verdana_80_4bpp(glyphs_verdana_80_4bpp, 11, 80, 1, 4, 1, 0, 0, unicodes_verdana_80_4bpp, kerning_verdana_80_4bpp, 63, 0, 0);
 8009d10:	b580      	push	{r7, lr}
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	4801      	ldr	r0, [pc, #4]	; (8009d1c <__tcf_0+0xc>)
 8009d16:	f7ff fdc7 	bl	80098a8 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	20008334 	.word	0x20008334

08009d20 <_Z23getFont_verdana_80_4bppv>:
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b08a      	sub	sp, #40	; 0x28
 8009d24:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_80_4bpp(glyphs_verdana_80_4bpp, 11, 80, 1, 4, 1, 0, 0, unicodes_verdana_80_4bpp, kerning_verdana_80_4bpp, 63, 0, 0);
 8009d26:	4b15      	ldr	r3, [pc, #84]	; (8009d7c <_Z23getFont_verdana_80_4bppv+0x5c>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f003 0301 	and.w	r3, r3, #1
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d11f      	bne.n	8009d72 <_Z23getFont_verdana_80_4bppv+0x52>
 8009d32:	2300      	movs	r3, #0
 8009d34:	9309      	str	r3, [sp, #36]	; 0x24
 8009d36:	2300      	movs	r3, #0
 8009d38:	9308      	str	r3, [sp, #32]
 8009d3a:	233f      	movs	r3, #63	; 0x3f
 8009d3c:	9307      	str	r3, [sp, #28]
 8009d3e:	4b10      	ldr	r3, [pc, #64]	; (8009d80 <_Z23getFont_verdana_80_4bppv+0x60>)
 8009d40:	9306      	str	r3, [sp, #24]
 8009d42:	4b10      	ldr	r3, [pc, #64]	; (8009d84 <_Z23getFont_verdana_80_4bppv+0x64>)
 8009d44:	9305      	str	r3, [sp, #20]
 8009d46:	2300      	movs	r3, #0
 8009d48:	9304      	str	r3, [sp, #16]
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	9303      	str	r3, [sp, #12]
 8009d4e:	2301      	movs	r3, #1
 8009d50:	9302      	str	r3, [sp, #8]
 8009d52:	2304      	movs	r3, #4
 8009d54:	9301      	str	r3, [sp, #4]
 8009d56:	2301      	movs	r3, #1
 8009d58:	9300      	str	r3, [sp, #0]
 8009d5a:	2350      	movs	r3, #80	; 0x50
 8009d5c:	220b      	movs	r2, #11
 8009d5e:	490a      	ldr	r1, [pc, #40]	; (8009d88 <_Z23getFont_verdana_80_4bppv+0x68>)
 8009d60:	480a      	ldr	r0, [pc, #40]	; (8009d8c <_Z23getFont_verdana_80_4bppv+0x6c>)
 8009d62:	f7ff fe45 	bl	80099f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8009d66:	4b05      	ldr	r3, [pc, #20]	; (8009d7c <_Z23getFont_verdana_80_4bppv+0x5c>)
 8009d68:	2201      	movs	r2, #1
 8009d6a:	601a      	str	r2, [r3, #0]
 8009d6c:	4808      	ldr	r0, [pc, #32]	; (8009d90 <_Z23getFont_verdana_80_4bppv+0x70>)
 8009d6e:	f019 f9b7 	bl	80230e0 <atexit>
    return verdana_80_4bpp;
 8009d72:	4b06      	ldr	r3, [pc, #24]	; (8009d8c <_Z23getFont_verdana_80_4bppv+0x6c>)
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	20008358 	.word	0x20008358
 8009d80:	9017deb4 	.word	0x9017deb4
 8009d84:	08024a10 	.word	0x08024a10
 8009d88:	9017ebc0 	.word	0x9017ebc0
 8009d8c:	20008334 	.word	0x20008334
 8009d90:	08009d11 	.word	0x08009d11

08009d94 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	4618      	mov	r0, r3
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
    {
    }
 8009db6:	bf00      	nop
 8009db8:	370c      	adds	r7, #12
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr

08009dc2 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8009dc2:	b480      	push	{r7}
 8009dc4:	b083      	sub	sp, #12
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	6039      	str	r1, [r7, #0]
    {
    }
 8009dcc:	bf00      	nop
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
    {
    }
 8009de2:	bf00      	nop
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8009dee:	b480      	push	{r7}
 8009df0:	b083      	sub	sp, #12
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
 8009df6:	460b      	mov	r3, r1
 8009df8:	70fb      	strb	r3, [r7, #3]
    {
    }
 8009dfa:	bf00      	nop
 8009dfc:	370c      	adds	r7, #12
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr

08009e06 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8009e06:	b480      	push	{r7}
 8009e08:	b083      	sub	sp, #12
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
    {
    }
 8009e0e:	bf00      	nop
 8009e10:	370c      	adds	r7, #12
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr

08009e1a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 8009e1a:	b480      	push	{r7}
 8009e1c:	b083      	sub	sp, #12
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
    {
    }
 8009e22:	bf00      	nop
 8009e24:	370c      	adds	r7, #12
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr
	...

08009e30 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
    {
 8009e38:	4a04      	ldr	r2, [pc, #16]	; (8009e4c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	601a      	str	r2, [r3, #0]
    }
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	4618      	mov	r0, r3
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr
 8009e4c:	08024b5c 	.word	0x08024b5c

08009e50 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
    }
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f7ff ffe9 	bl	8009e30 <_ZN8touchgfx15UIEventListenerD1Ev>
 8009e5e:	2104      	movs	r1, #4
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f019 f8f4 	bl	802304e <_ZdlPvj>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 8009e78:	4a07      	ldr	r2, [pc, #28]	; (8009e98 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	601a      	str	r2, [r3, #0]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	605a      	str	r2, [r3, #4]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	721a      	strb	r2, [r3, #8]
    {
    }
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr
 8009e98:	08024b3c 	.word	0x08024b3c

08009e9c <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
    {
 8009ea4:	4a04      	ldr	r2, [pc, #16]	; (8009eb8 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	601a      	str	r2, [r3, #0]
    }
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4618      	mov	r0, r3
 8009eae:	370c      	adds	r7, #12
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr
 8009eb8:	08024b3c 	.word	0x08024b3c

08009ebc <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
    }
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f7ff ffe9 	bl	8009e9c <_ZN8touchgfx10TransitionD1Ev>
 8009eca:	210c      	movs	r1, #12
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f019 f8be 	bl	802304e <_ZdlPvj>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	bf00      	nop
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	bf00      	nop
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	bf00      	nop
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	683a      	ldr	r2, [r7, #0]
 8009f26:	605a      	str	r2, [r3, #4]
    }
 8009f28:	bf00      	nop
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	70fb      	strb	r3, [r7, #3]
    {
    }
 8009f40:	bf00      	nop
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr

08009f4c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
    {
 8009f54:	4a04      	ldr	r2, [pc, #16]	; (8009f68 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	601a      	str	r2, [r3, #0]
    }
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr
 8009f68:	08024b24 	.word	0x08024b24

08009f6c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
    }
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f7ff ffe9 	bl	8009f4c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8009f7a:	2104      	movs	r1, #4
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f019 f866 	bl	802304e <_ZdlPvj>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4618      	mov	r0, r3
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	4608      	mov	r0, r1
 8009f96:	4611      	mov	r1, r2
 8009f98:	461a      	mov	r2, r3
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	817b      	strh	r3, [r7, #10]
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	813b      	strh	r3, [r7, #8]
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	3334      	adds	r3, #52	; 0x34
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009fb2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	4798      	blx	r3
        setWidth(width);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	3338      	adds	r3, #56	; 0x38
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009fc6:	4611      	mov	r1, r2
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	4798      	blx	r3
        setHeight(height);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	333c      	adds	r3, #60	; 0x3c
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8009fd8:	4611      	mov	r1, r2
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	4798      	blx	r3
    }
 8009fde:	bf00      	nop
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <_ZNK8touchgfx8Drawable4getXEv>:
     *
     *        Gets the x coordinate of this drawable.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 8009fe6:	b480      	push	{r7}
 8009fe8:	b083      	sub	sp, #12
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	370c      	adds	r7, #12
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <_ZNK8touchgfx8Drawable4getYEv>:
     *
     *        Gets the y coordinate of this drawable.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800a00e:	4618      	mov	r0, r3
 800a010:	370c      	adds	r7, #12
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
	...

0800a01c <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800a01c:	b480      	push	{r7}
 800a01e:	af00      	add	r7, sp, #0
    {
        return instance;
 800a020:	4b03      	ldr	r3, [pc, #12]	; (800a030 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800a022:	681b      	ldr	r3, [r3, #0]
    }
 800a024:	4618      	mov	r0, r3
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop
 800a030:	2000b1ac 	.word	0x2000b1ac

0800a034 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800a034:	b480      	push	{r7}
 800a036:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800a038:	4b0b      	ldr	r3, [pc, #44]	; (800a068 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800a040:	2b00      	cmp	r3, #0
 800a042:	d008      	beq.n	800a056 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800a044:	4b08      	ldr	r3, [pc, #32]	; (800a068 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d003      	beq.n	800a056 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800a04e:	4b06      	ldr	r3, [pc, #24]	; (800a068 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a054:	e002      	b.n	800a05c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800a056:	4b04      	ldr	r3, [pc, #16]	; (800a068 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	689b      	ldr	r3, [r3, #8]
        }
    }
 800a05c:	4618      	mov	r0, r3
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop
 800a068:	2000b1ac 	.word	0x2000b1ac

0800a06c <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	4a05      	ldr	r2, [pc, #20]	; (800a08c <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	601a      	str	r2, [r3, #0]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7ff fed7 	bl	8009e30 <_ZN8touchgfx15UIEventListenerD1Ev>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	4618      	mov	r0, r3
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	080282c4 	.word	0x080282c4

0800a090 <_ZN8touchgfx11ApplicationD0Ev>:
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f7ff ffe7 	bl	800a06c <_ZN8touchgfx11ApplicationD1Ev>
 800a09e:	f44f 7198 	mov.w	r1, #304	; 0x130
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f018 ffd3 	bl	802304e <_ZdlPvj>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
	...

0800a0b4 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f00d f900 	bl	80172c4 <_ZN8touchgfx11ApplicationC1Ev>
 800a0c4:	4a09      	ldr	r2, [pc, #36]	; (800a0ec <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	601a      	str	r2, [r3, #0]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4a04      	ldr	r2, [pc, #16]	; (800a0f0 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800a0de:	6013      	str	r3, [r2, #0]
    }
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3708      	adds	r7, #8
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	08024ae8 	.word	0x08024ae8
 800a0f0:	2000b238 	.word	0x2000b238

0800a0f4 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	4a05      	ldr	r2, [pc, #20]	; (800a114 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	601a      	str	r2, [r3, #0]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	4618      	mov	r0, r3
 800a106:	f7ff ffb1 	bl	800a06c <_ZN8touchgfx11ApplicationD1Ev>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4618      	mov	r0, r3
 800a10e:	3708      	adds	r7, #8
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	08024ae8 	.word	0x08024ae8

0800a118 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f7ff ffe7 	bl	800a0f4 <_ZN8touchgfx14MVPApplicationD1Ev>
 800a126:	f44f 719c 	mov.w	r1, #312	; 0x138
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f018 ff8f 	bl	802304e <_ZdlPvj>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4618      	mov	r0, r3
 800a134:	3708      	adds	r7, #8
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b082      	sub	sp, #8
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 f804 	bl	800a150 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800a148:	bf00      	nop
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00f      	beq.n	800a182 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	330c      	adds	r3, #12
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4610      	mov	r0, r2
 800a176:	4798      	blx	r3
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800a17e:	2301      	movs	r3, #1
 800a180:	e000      	b.n	800a184 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800a182:	2300      	movs	r3, #0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00e      	beq.n	800a1a6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	3308      	adds	r3, #8
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4610      	mov	r0, r2
 800a19c:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 800a1a6:	bf00      	nop
 800a1a8:	3708      	adds	r7, #8
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b084      	sub	sp, #16
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	60f8      	str	r0, [r7, #12]
 800a1b6:	60b9      	str	r1, [r7, #8]
 800a1b8:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 800a1ba:	f00d f819 	bl	80171f0 <_ZN8touchgfx11Application11getInstanceEv>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f00d f863 	bl	801728c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d008      	beq.n	800a1e0 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	330c      	adds	r3, #12
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4610      	mov	r0, r2
 800a1de:	4798      	blx	r3
    }
    if (*currentTrans)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d007      	beq.n	800a1f8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4610      	mov	r0, r2
 800a1f6:	4798      	blx	r3
    }
    if (*currentScreen)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d008      	beq.n	800a212 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	3314      	adds	r3, #20
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4610      	mov	r0, r2
 800a210:	4798      	blx	r3
    }
    if (*currentPresenter)
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d008      	beq.n	800a22c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	3304      	adds	r3, #4
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4610      	mov	r0, r2
 800a22a:	4798      	blx	r3
    }
    if (*currentScreen)
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d007      	beq.n	800a244 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4610      	mov	r0, r2
 800a242:	4798      	blx	r3
    }
    if (*currentPresenter)
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d008      	beq.n	800a25e <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	3308      	adds	r3, #8
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4610      	mov	r0, r2
 800a25c:	4798      	blx	r3
    }
}
 800a25e:	bf00      	nop
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b084      	sub	sp, #16
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	60f8      	str	r0, [r7, #12]
 800a26e:	60b9      	str	r1, [r7, #8]
 800a270:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	330c      	adds	r3, #12
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	4798      	blx	r3
    newPresenter->activate();
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68b8      	ldr	r0, [r7, #8]
 800a286:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800a288:	6879      	ldr	r1, [r7, #4]
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f00e f908 	bl	80184a0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	3310      	adds	r3, #16
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	4798      	blx	r3

    Application::getInstance()->draw();
 800a29c:	f00c ffa8 	bl	80171f0 <_ZN8touchgfx11Application11getInstanceEv>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	6813      	ldr	r3, [r2, #0]
 800a2a4:	3328      	adds	r3, #40	; 0x28
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4610      	mov	r0, r2
 800a2aa:	4798      	blx	r3
}
 800a2ac:	bf00      	nop
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	683a      	ldr	r2, [r7, #0]
 800a2c2:	601a      	str	r2, [r3, #0]
    }
 800a2c4:	bf00      	nop
 800a2c6:	370c      	adds	r7, #12
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	4a08      	ldr	r2, [pc, #32]	; (800a2fc <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	601a      	str	r2, [r3, #0]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f001 fc21 	bl	800bb2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7ff ff01 	bl	800a0f4 <_ZN8touchgfx14MVPApplicationD1Ev>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3708      	adds	r7, #8
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	08024a94 	.word	0x08024a94

0800a300 <_ZN23FrontendApplicationBaseD0Ev>:
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f7ff ffe1 	bl	800a2d0 <_ZN23FrontendApplicationBaseD1Ev>
 800a30e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f018 fe9b 	bl	802304e <_ZdlPvj>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4618      	mov	r0, r3
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
	...

0800a324 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4618      	mov	r0, r3
 800a330:	f7ff fd9e 	bl	8009e70 <_ZN8touchgfx10TransitionC1Ev>
 800a334:	4a03      	ldr	r2, [pc, #12]	; (800a344 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	601a      	str	r2, [r3, #0]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4618      	mov	r0, r3
 800a33e:	3708      	adds	r7, #8
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	08024a74 	.word	0x08024a74

0800a348 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	4a05      	ldr	r2, [pc, #20]	; (800a368 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	601a      	str	r2, [r3, #0]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4618      	mov	r0, r3
 800a35a:	f7ff fd9f 	bl	8009e9c <_ZN8touchgfx10TransitionD1Ev>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	4618      	mov	r0, r3
 800a362:	3708      	adds	r7, #8
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	08024a74 	.word	0x08024a74

0800a36c <_ZN8touchgfx12NoTransitionD0Ev>:
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f7ff ffe7 	bl	800a348 <_ZN8touchgfx12NoTransitionD1Ev>
 800a37a:	210c      	movs	r1, #12
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f018 fe66 	bl	802304e <_ZdlPvj>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4618      	mov	r0, r3
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	721a      	strb	r2, [r3, #8]
    }
 800a39a:	bf00      	nop
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	683a      	ldr	r2, [r7, #0]
 800a3b4:	605a      	str	r2, [r3, #4]
    }
 800a3b6:	bf00      	nop
 800a3b8:	370c      	adds	r7, #12
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
	...

0800a3c4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/testgirouette_screen/TestGirouetteView.hpp>
#include <gui/testgirouette_screen/TestGirouettePresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7ff fe6e 	bl	800a0b4 <_ZN8touchgfx14MVPApplicationC1Ev>
 800a3d8:	4a13      	ldr	r2, [pc, #76]	; (800a428 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	601a      	str	r2, [r3, #0]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f000 fa89 	bl	800a8fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	68ba      	ldr	r2, [r7, #8]
 800a3f6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800a3fa:	f7ff fe0f 	bl	800a01c <_ZN8touchgfx3HAL11getInstanceEv>
 800a3fe:	4602      	mov	r2, r0
 800a400:	6813      	ldr	r3, [r2, #0]
 800a402:	3308      	adds	r3, #8
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2100      	movs	r1, #0
 800a408:	4610      	mov	r0, r2
 800a40a:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800a40c:	2000      	movs	r0, #0
 800a40e:	f005 fa1d 	bl	800f84c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800a412:	f7ff fe0f 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 800a416:	4603      	mov	r3, r0
 800a418:	4618      	mov	r0, r3
 800a41a:	f012 fb26 	bl	801ca6a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	4618      	mov	r0, r3
 800a422:	3710      	adds	r7, #16
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	08024a94 	.word	0x08024a94

0800a42c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4618      	mov	r0, r3
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	683a      	ldr	r2, [r7, #0]
 800a452:	4611      	mov	r1, r2
 800a454:	4618      	mov	r0, r3
 800a456:	f7ff ffe9 	bl	800a42c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	685a      	ldr	r2, [r3, #4]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	605a      	str	r2, [r3, #4]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	683a      	ldr	r2, [r7, #0]
 800a466:	3308      	adds	r3, #8
 800a468:	3208      	adds	r2, #8
 800a46a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a46e:	e883 0003 	stmia.w	r3, {r0, r1}
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4618      	mov	r0, r3
 800a476:	3708      	adds	r7, #8
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <_ZN23FrontendApplicationBase26gotoMenuScreenNoTransitionEv>:
 */

// Menu

void FrontendApplicationBase::gotoMenuScreenNoTransition()
{
 800a47c:	b590      	push	{r4, r7, lr}
 800a47e:	b089      	sub	sp, #36	; 0x24
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMenuScreenNoTransitionImpl);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800a48a:	4b10      	ldr	r3, [pc, #64]	; (800a4cc <_ZN23FrontendApplicationBase26gotoMenuScreenNoTransitionEv+0x50>)
 800a48c:	61bb      	str	r3, [r7, #24]
 800a48e:	2300      	movs	r3, #0
 800a490:	61fb      	str	r3, [r7, #28]
 800a492:	f107 0008 	add.w	r0, r7, #8
 800a496:	f107 0318 	add.w	r3, r7, #24
 800a49a:	cb0c      	ldmia	r3, {r2, r3}
 800a49c:	6879      	ldr	r1, [r7, #4]
 800a49e:	f000 fa49 	bl	800a934 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800a4a2:	f107 0308 	add.w	r3, r7, #8
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	f7ff ffcb 	bl	800a444 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800a4ae:	f107 0308 	add.w	r3, r7, #8
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f001 fb3a 	bl	800bb2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800a4c4:	bf00      	nop
 800a4c6:	3724      	adds	r7, #36	; 0x24
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd90      	pop	{r4, r7, pc}
 800a4cc:	0800a4d1 	.word	0x0800a4d1

0800a4d0 <_ZN23FrontendApplicationBase30gotoMenuScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMenuScreenNoTransitionImpl()
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af02      	add	r7, sp, #8
 800a4d6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MenuView, MenuPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	4b04      	ldr	r3, [pc, #16]	; (800a500 <_ZN23FrontendApplicationBase30gotoMenuScreenNoTransitionImplEv+0x30>)
 800a4f0:	4804      	ldr	r0, [pc, #16]	; (800a504 <_ZN23FrontendApplicationBase30gotoMenuScreenNoTransitionImplEv+0x34>)
 800a4f2:	f000 fa3f 	bl	800a974 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800a4f6:	bf00      	nop
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	2000b22c 	.word	0x2000b22c
 800a504:	2000b228 	.word	0x2000b228

0800a508 <_ZN23FrontendApplicationBase48gotoTestRotationPlateauScreenSlideTransitionEastEv>:

// TestRotationPlateau

void FrontendApplicationBase::gotoTestRotationPlateauScreenSlideTransitionEast()
{
 800a508:	b590      	push	{r4, r7, lr}
 800a50a:	b089      	sub	sp, #36	; 0x24
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoTestRotationPlateauScreenSlideTransitionEastImpl);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800a516:	4b10      	ldr	r3, [pc, #64]	; (800a558 <_ZN23FrontendApplicationBase48gotoTestRotationPlateauScreenSlideTransitionEastEv+0x50>)
 800a518:	61bb      	str	r3, [r7, #24]
 800a51a:	2300      	movs	r3, #0
 800a51c:	61fb      	str	r3, [r7, #28]
 800a51e:	f107 0008 	add.w	r0, r7, #8
 800a522:	f107 0318 	add.w	r3, r7, #24
 800a526:	cb0c      	ldmia	r3, {r2, r3}
 800a528:	6879      	ldr	r1, [r7, #4]
 800a52a:	f000 fa03 	bl	800a934 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800a52e:	f107 0308 	add.w	r3, r7, #8
 800a532:	4619      	mov	r1, r3
 800a534:	4620      	mov	r0, r4
 800a536:	f7ff ff85 	bl	800a444 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800a53a:	f107 0308 	add.w	r3, r7, #8
 800a53e:	4618      	mov	r0, r3
 800a540:	f001 faf4 	bl	800bb2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800a550:	bf00      	nop
 800a552:	3724      	adds	r7, #36	; 0x24
 800a554:	46bd      	mov	sp, r7
 800a556:	bd90      	pop	{r4, r7, pc}
 800a558:	0800a55d 	.word	0x0800a55d

0800a55c <_ZN23FrontendApplicationBase52gotoTestRotationPlateauScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoTestRotationPlateauScreenSlideTransitionEastImpl()
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af02      	add	r7, sp, #8
 800a562:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<TestRotationPlateauView, TestRotationPlateauPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800a570:	461a      	mov	r2, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	4b04      	ldr	r3, [pc, #16]	; (800a58c <_ZN23FrontendApplicationBase52gotoTestRotationPlateauScreenSlideTransitionEastImplEv+0x30>)
 800a57c:	4804      	ldr	r0, [pc, #16]	; (800a590 <_ZN23FrontendApplicationBase52gotoTestRotationPlateauScreenSlideTransitionEastImplEv+0x34>)
 800a57e:	f000 fab5 	bl	800aaec <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800a582:	bf00      	nop
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	2000b22c 	.word	0x2000b22c
 800a590:	2000b228 	.word	0x2000b228

0800a594 <_ZN23FrontendApplicationBase37gotoTestUartScreenSlideTransitionEastEv>:

// TestUart

void FrontendApplicationBase::gotoTestUartScreenSlideTransitionEast()
{
 800a594:	b590      	push	{r4, r7, lr}
 800a596:	b089      	sub	sp, #36	; 0x24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoTestUartScreenSlideTransitionEastImpl);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800a5a2:	4b10      	ldr	r3, [pc, #64]	; (800a5e4 <_ZN23FrontendApplicationBase37gotoTestUartScreenSlideTransitionEastEv+0x50>)
 800a5a4:	61bb      	str	r3, [r7, #24]
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	61fb      	str	r3, [r7, #28]
 800a5aa:	f107 0008 	add.w	r0, r7, #8
 800a5ae:	f107 0318 	add.w	r3, r7, #24
 800a5b2:	cb0c      	ldmia	r3, {r2, r3}
 800a5b4:	6879      	ldr	r1, [r7, #4]
 800a5b6:	f000 f9bd 	bl	800a934 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800a5ba:	f107 0308 	add.w	r3, r7, #8
 800a5be:	4619      	mov	r1, r3
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f7ff ff3f 	bl	800a444 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800a5c6:	f107 0308 	add.w	r3, r7, #8
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f001 faae 	bl	800bb2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800a5dc:	bf00      	nop
 800a5de:	3724      	adds	r7, #36	; 0x24
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd90      	pop	{r4, r7, pc}
 800a5e4:	0800a5e9 	.word	0x0800a5e9

0800a5e8 <_ZN23FrontendApplicationBase41gotoTestUartScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoTestUartScreenSlideTransitionEastImpl()
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af02      	add	r7, sp, #8
 800a5ee:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<TestUartView, TestUartPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a604:	9300      	str	r3, [sp, #0]
 800a606:	4b04      	ldr	r3, [pc, #16]	; (800a618 <_ZN23FrontendApplicationBase41gotoTestUartScreenSlideTransitionEastImplEv+0x30>)
 800a608:	4804      	ldr	r0, [pc, #16]	; (800a61c <_ZN23FrontendApplicationBase41gotoTestUartScreenSlideTransitionEastImplEv+0x34>)
 800a60a:	f000 fb2b 	bl	800ac64 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800a60e:	bf00      	nop
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	2000b22c 	.word	0x2000b22c
 800a61c:	2000b228 	.word	0x2000b228

0800a620 <_ZN23FrontendApplicationBase39gotoTestI2CSPIScreenSlideTransitionEastEv>:

// TestI2CSPI

void FrontendApplicationBase::gotoTestI2CSPIScreenSlideTransitionEast()
{
 800a620:	b590      	push	{r4, r7, lr}
 800a622:	b089      	sub	sp, #36	; 0x24
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoTestI2CSPIScreenSlideTransitionEastImpl);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800a62e:	4b10      	ldr	r3, [pc, #64]	; (800a670 <_ZN23FrontendApplicationBase39gotoTestI2CSPIScreenSlideTransitionEastEv+0x50>)
 800a630:	61bb      	str	r3, [r7, #24]
 800a632:	2300      	movs	r3, #0
 800a634:	61fb      	str	r3, [r7, #28]
 800a636:	f107 0008 	add.w	r0, r7, #8
 800a63a:	f107 0318 	add.w	r3, r7, #24
 800a63e:	cb0c      	ldmia	r3, {r2, r3}
 800a640:	6879      	ldr	r1, [r7, #4]
 800a642:	f000 f977 	bl	800a934 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800a646:	f107 0308 	add.w	r3, r7, #8
 800a64a:	4619      	mov	r1, r3
 800a64c:	4620      	mov	r0, r4
 800a64e:	f7ff fef9 	bl	800a444 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800a652:	f107 0308 	add.w	r3, r7, #8
 800a656:	4618      	mov	r0, r3
 800a658:	f001 fa68 	bl	800bb2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800a668:	bf00      	nop
 800a66a:	3724      	adds	r7, #36	; 0x24
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd90      	pop	{r4, r7, pc}
 800a670:	0800a675 	.word	0x0800a675

0800a674 <_ZN23FrontendApplicationBase43gotoTestI2CSPIScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoTestI2CSPIScreenSlideTransitionEastImpl()
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af02      	add	r7, sp, #8
 800a67a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<TestI2CSPIView, TestI2CSPIPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800a688:	461a      	mov	r2, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a690:	9300      	str	r3, [sp, #0]
 800a692:	4b04      	ldr	r3, [pc, #16]	; (800a6a4 <_ZN23FrontendApplicationBase43gotoTestI2CSPIScreenSlideTransitionEastImplEv+0x30>)
 800a694:	4804      	ldr	r0, [pc, #16]	; (800a6a8 <_ZN23FrontendApplicationBase43gotoTestI2CSPIScreenSlideTransitionEastImplEv+0x34>)
 800a696:	f000 fba1 	bl	800addc <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800a69a:	bf00      	nop
 800a69c:	3708      	adds	r7, #8
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	2000b22c 	.word	0x2000b22c
 800a6a8:	2000b228 	.word	0x2000b228

0800a6ac <_ZN23FrontendApplicationBase49gotoTestOrientationVoileScreenSlideTransitionEastEv>:

// TestOrientationVoile

void FrontendApplicationBase::gotoTestOrientationVoileScreenSlideTransitionEast()
{
 800a6ac:	b590      	push	{r4, r7, lr}
 800a6ae:	b089      	sub	sp, #36	; 0x24
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoTestOrientationVoileScreenSlideTransitionEastImpl);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800a6ba:	4b10      	ldr	r3, [pc, #64]	; (800a6fc <_ZN23FrontendApplicationBase49gotoTestOrientationVoileScreenSlideTransitionEastEv+0x50>)
 800a6bc:	61bb      	str	r3, [r7, #24]
 800a6be:	2300      	movs	r3, #0
 800a6c0:	61fb      	str	r3, [r7, #28]
 800a6c2:	f107 0008 	add.w	r0, r7, #8
 800a6c6:	f107 0318 	add.w	r3, r7, #24
 800a6ca:	cb0c      	ldmia	r3, {r2, r3}
 800a6cc:	6879      	ldr	r1, [r7, #4]
 800a6ce:	f000 f931 	bl	800a934 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800a6d2:	f107 0308 	add.w	r3, r7, #8
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	4620      	mov	r0, r4
 800a6da:	f7ff feb3 	bl	800a444 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800a6de:	f107 0308 	add.w	r3, r7, #8
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f001 fa22 	bl	800bb2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800a6f4:	bf00      	nop
 800a6f6:	3724      	adds	r7, #36	; 0x24
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd90      	pop	{r4, r7, pc}
 800a6fc:	0800a701 	.word	0x0800a701

0800a700 <_ZN23FrontendApplicationBase53gotoTestOrientationVoileScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoTestOrientationVoileScreenSlideTransitionEastImpl()
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af02      	add	r7, sp, #8
 800a706:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<TestOrientationVoileView, TestOrientationVoilePresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800a714:	461a      	mov	r2, r3
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	4b04      	ldr	r3, [pc, #16]	; (800a730 <_ZN23FrontendApplicationBase53gotoTestOrientationVoileScreenSlideTransitionEastImplEv+0x30>)
 800a720:	4804      	ldr	r0, [pc, #16]	; (800a734 <_ZN23FrontendApplicationBase53gotoTestOrientationVoileScreenSlideTransitionEastImplEv+0x34>)
 800a722:	f000 fc15 	bl	800af50 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800a726:	bf00      	nop
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	2000b22c 	.word	0x2000b22c
 800a734:	2000b228 	.word	0x2000b228

0800a738 <_ZN23FrontendApplicationBase36gotoTestADCScreenSlideTransitionEastEv>:

// TestADC

void FrontendApplicationBase::gotoTestADCScreenSlideTransitionEast()
{
 800a738:	b590      	push	{r4, r7, lr}
 800a73a:	b089      	sub	sp, #36	; 0x24
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoTestADCScreenSlideTransitionEastImpl);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800a746:	4b10      	ldr	r3, [pc, #64]	; (800a788 <_ZN23FrontendApplicationBase36gotoTestADCScreenSlideTransitionEastEv+0x50>)
 800a748:	61bb      	str	r3, [r7, #24]
 800a74a:	2300      	movs	r3, #0
 800a74c:	61fb      	str	r3, [r7, #28]
 800a74e:	f107 0008 	add.w	r0, r7, #8
 800a752:	f107 0318 	add.w	r3, r7, #24
 800a756:	cb0c      	ldmia	r3, {r2, r3}
 800a758:	6879      	ldr	r1, [r7, #4]
 800a75a:	f000 f8eb 	bl	800a934 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800a75e:	f107 0308 	add.w	r3, r7, #8
 800a762:	4619      	mov	r1, r3
 800a764:	4620      	mov	r0, r4
 800a766:	f7ff fe6d 	bl	800a444 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800a76a:	f107 0308 	add.w	r3, r7, #8
 800a76e:	4618      	mov	r0, r3
 800a770:	f001 f9dc 	bl	800bb2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800a780:	bf00      	nop
 800a782:	3724      	adds	r7, #36	; 0x24
 800a784:	46bd      	mov	sp, r7
 800a786:	bd90      	pop	{r4, r7, pc}
 800a788:	0800a78d 	.word	0x0800a78d

0800a78c <_ZN23FrontendApplicationBase40gotoTestADCScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoTestADCScreenSlideTransitionEastImpl()
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af02      	add	r7, sp, #8
 800a792:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<TestADCView, TestADCPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	4b04      	ldr	r3, [pc, #16]	; (800a7bc <_ZN23FrontendApplicationBase40gotoTestADCScreenSlideTransitionEastImplEv+0x30>)
 800a7ac:	4804      	ldr	r0, [pc, #16]	; (800a7c0 <_ZN23FrontendApplicationBase40gotoTestADCScreenSlideTransitionEastImplEv+0x34>)
 800a7ae:	f000 fc89 	bl	800b0c4 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800a7b2:	bf00      	nop
 800a7b4:	3708      	adds	r7, #8
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	2000b22c 	.word	0x2000b22c
 800a7c0:	2000b228 	.word	0x2000b228

0800a7c4 <_ZN23FrontendApplicationBase40gotoTestCompletScreenSlideTransitionEastEv>:

// TestComplet

void FrontendApplicationBase::gotoTestCompletScreenSlideTransitionEast()
{
 800a7c4:	b590      	push	{r4, r7, lr}
 800a7c6:	b089      	sub	sp, #36	; 0x24
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoTestCompletScreenSlideTransitionEastImpl);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800a7d2:	4b10      	ldr	r3, [pc, #64]	; (800a814 <_ZN23FrontendApplicationBase40gotoTestCompletScreenSlideTransitionEastEv+0x50>)
 800a7d4:	61bb      	str	r3, [r7, #24]
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	61fb      	str	r3, [r7, #28]
 800a7da:	f107 0008 	add.w	r0, r7, #8
 800a7de:	f107 0318 	add.w	r3, r7, #24
 800a7e2:	cb0c      	ldmia	r3, {r2, r3}
 800a7e4:	6879      	ldr	r1, [r7, #4]
 800a7e6:	f000 f8a5 	bl	800a934 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800a7ea:	f107 0308 	add.w	r3, r7, #8
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f7ff fe27 	bl	800a444 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800a7f6:	f107 0308 	add.w	r3, r7, #8
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f001 f996 	bl	800bb2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800a80c:	bf00      	nop
 800a80e:	3724      	adds	r7, #36	; 0x24
 800a810:	46bd      	mov	sp, r7
 800a812:	bd90      	pop	{r4, r7, pc}
 800a814:	0800a819 	.word	0x0800a819

0800a818 <_ZN23FrontendApplicationBase44gotoTestCompletScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoTestCompletScreenSlideTransitionEastImpl()
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af02      	add	r7, sp, #8
 800a81e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<TestCompletView, TestCompletPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800a82c:	461a      	mov	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	4b04      	ldr	r3, [pc, #16]	; (800a848 <_ZN23FrontendApplicationBase44gotoTestCompletScreenSlideTransitionEastImplEv+0x30>)
 800a838:	4804      	ldr	r0, [pc, #16]	; (800a84c <_ZN23FrontendApplicationBase44gotoTestCompletScreenSlideTransitionEastImplEv+0x34>)
 800a83a:	f000 fcfd 	bl	800b238 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800a83e:	bf00      	nop
 800a840:	3708      	adds	r7, #8
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	2000b22c 	.word	0x2000b22c
 800a84c:	2000b228 	.word	0x2000b228

0800a850 <_ZN23FrontendApplicationBase42gotoTestGirouetteScreenSlideTransitionEastEv>:

// TestGirouette

void FrontendApplicationBase::gotoTestGirouetteScreenSlideTransitionEast()
{
 800a850:	b590      	push	{r4, r7, lr}
 800a852:	b089      	sub	sp, #36	; 0x24
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoTestGirouetteScreenSlideTransitionEastImpl);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800a85e:	4b10      	ldr	r3, [pc, #64]	; (800a8a0 <_ZN23FrontendApplicationBase42gotoTestGirouetteScreenSlideTransitionEastEv+0x50>)
 800a860:	61bb      	str	r3, [r7, #24]
 800a862:	2300      	movs	r3, #0
 800a864:	61fb      	str	r3, [r7, #28]
 800a866:	f107 0008 	add.w	r0, r7, #8
 800a86a:	f107 0318 	add.w	r3, r7, #24
 800a86e:	cb0c      	ldmia	r3, {r2, r3}
 800a870:	6879      	ldr	r1, [r7, #4]
 800a872:	f000 f85f 	bl	800a934 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800a876:	f107 0308 	add.w	r3, r7, #8
 800a87a:	4619      	mov	r1, r3
 800a87c:	4620      	mov	r0, r4
 800a87e:	f7ff fde1 	bl	800a444 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800a882:	f107 0308 	add.w	r3, r7, #8
 800a886:	4618      	mov	r0, r3
 800a888:	f001 f950 	bl	800bb2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800a898:	bf00      	nop
 800a89a:	3724      	adds	r7, #36	; 0x24
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd90      	pop	{r4, r7, pc}
 800a8a0:	0800a8a5 	.word	0x0800a8a5

0800a8a4 <_ZN23FrontendApplicationBase46gotoTestGirouetteScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoTestGirouetteScreenSlideTransitionEastImpl()
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af02      	add	r7, sp, #8
 800a8aa:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<TestGirouetteView, TestGirouettePresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a8c0:	9300      	str	r3, [sp, #0]
 800a8c2:	4b04      	ldr	r3, [pc, #16]	; (800a8d4 <_ZN23FrontendApplicationBase46gotoTestGirouetteScreenSlideTransitionEastImplEv+0x30>)
 800a8c4:	4804      	ldr	r0, [pc, #16]	; (800a8d8 <_ZN23FrontendApplicationBase46gotoTestGirouetteScreenSlideTransitionEastImplEv+0x34>)
 800a8c6:	f000 fd71 	bl	800b3ac <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800a8ca:	bf00      	nop
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	2000b22c 	.word	0x2000b22c
 800a8d8:	2000b228 	.word	0x2000b228

0800a8dc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	4a04      	ldr	r2, [pc, #16]	; (800a8f8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	601a      	str	r2, [r3, #0]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr
 800a8f8:	08024b24 	.word	0x08024b24

0800a8fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4618      	mov	r0, r3
 800a908:	f7ff ffe8 	bl	800a8dc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800a90c:	4a08      	ldr	r2, [pc, #32]	; (800a930 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	601a      	str	r2, [r3, #0]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	605a      	str	r2, [r3, #4]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	609a      	str	r2, [r3, #8]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2200      	movs	r2, #0
 800a922:	60da      	str	r2, [r3, #12]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4618      	mov	r0, r3
 800a928:	3708      	adds	r7, #8
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	08024ad0 	.word	0x08024ad0

0800a934 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	4639      	mov	r1, r7
 800a940:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	4618      	mov	r0, r3
 800a948:	f7ff ffc8 	bl	800a8dc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800a94c:	4a08      	ldr	r2, [pc, #32]	; (800a970 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	68ba      	ldr	r2, [r7, #8]
 800a956:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	3308      	adds	r3, #8
 800a95c:	463a      	mov	r2, r7
 800a95e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a962:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	4618      	mov	r0, r3
 800a96a:	3710      	adds	r7, #16
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	08024ad0 	.word	0x08024ad0

0800a974 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800a974:	b590      	push	{r4, r7, lr}
 800a976:	b089      	sub	sp, #36	; 0x24
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]
 800a980:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	689a      	ldr	r2, [r3, #8]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	3320      	adds	r3, #32
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4610      	mov	r0, r2
 800a992:	4798      	blx	r3
 800a994:	4602      	mov	r2, r0
 800a996:	f240 53eb 	movw	r3, #1515	; 0x5eb
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d805      	bhi.n	800a9aa <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800a99e:	4b4e      	ldr	r3, [pc, #312]	; (800aad8 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800a9a0:	4a4e      	ldr	r2, [pc, #312]	; (800aadc <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800a9a2:	21c2      	movs	r1, #194	; 0xc2
 800a9a4:	484e      	ldr	r0, [pc, #312]	; (800aae0 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800a9a6:	f018 fb7d 	bl	80230a4 <__assert_func>
 800a9aa:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685a      	ldr	r2, [r3, #4]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	3320      	adds	r3, #32
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4610      	mov	r0, r2
 800a9bc:	4798      	blx	r3
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b0f      	cmp	r3, #15
 800a9c2:	d805      	bhi.n	800a9d0 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800a9c4:	4b47      	ldr	r3, [pc, #284]	; (800aae4 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800a9c6:	4a45      	ldr	r2, [pc, #276]	; (800aadc <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800a9c8:	21c3      	movs	r1, #195	; 0xc3
 800a9ca:	4845      	ldr	r0, [pc, #276]	; (800aae0 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800a9cc:	f018 fb6a 	bl	80230a4 <__assert_func>
 800a9d0:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	68da      	ldr	r2, [r3, #12]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	3320      	adds	r3, #32
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4610      	mov	r0, r2
 800a9e2:	4798      	blx	r3
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	2b0b      	cmp	r3, #11
 800a9e8:	d805      	bhi.n	800a9f6 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800a9ea:	4b3f      	ldr	r3, [pc, #252]	; (800aae8 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 800a9ec:	4a3b      	ldr	r2, [pc, #236]	; (800aadc <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800a9ee:	21c4      	movs	r1, #196	; 0xc4
 800a9f0:	483b      	ldr	r0, [pc, #236]	; (800aae0 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800a9f2:	f018 fb57 	bl	80230a4 <__assert_func>
 800a9f6:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800a9f8:	683a      	ldr	r2, [r7, #0]
 800a9fa:	68b9      	ldr	r1, [r7, #8]
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f7ff fbd6 	bl	800a1ae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	2100      	movs	r1, #0
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f000 fd89 	bl	800b520 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	4619      	mov	r1, r3
 800aa12:	200c      	movs	r0, #12
 800aa14:	f7ff f9be 	bl	8009d94 <_ZnwjPv>
 800aa18:	4604      	mov	r4, r0
 800aa1a:	2c00      	cmp	r4, #0
 800aa1c:	d004      	beq.n	800aa28 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f7ff fc80 	bl	800a324 <_ZN8touchgfx12NoTransitionC1Ev>
 800aa24:	4623      	mov	r3, r4
 800aa26:	e000      	b.n	800aa2a <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 800aa28:	4623      	mov	r3, r4
 800aa2a:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	2100      	movs	r1, #0
 800aa32:	4618      	mov	r0, r3
 800aa34:	f000 fd87 	bl	800b546 <_ZN8touchgfx17AbstractPartition2atI8MenuViewEERT_t>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	f240 50ec 	movw	r0, #1516	; 0x5ec
 800aa40:	f7ff f9a8 	bl	8009d94 <_ZnwjPv>
 800aa44:	4604      	mov	r4, r0
 800aa46:	2c00      	cmp	r4, #0
 800aa48:	d004      	beq.n	800aa54 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f005 fa12 	bl	800fe74 <_ZN8MenuViewC1Ev>
 800aa50:	4623      	mov	r3, r4
 800aa52:	e000      	b.n	800aa56 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 800aa54:	4623      	mov	r3, r4
 800aa56:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f000 fd84 	bl	800b56c <_ZN8touchgfx17AbstractPartition2atI13MenuPresenterEERT_t>
 800aa64:	4603      	mov	r3, r0
 800aa66:	4619      	mov	r1, r3
 800aa68:	2010      	movs	r0, #16
 800aa6a:	f7ff f993 	bl	8009d94 <_ZnwjPv>
 800aa6e:	4604      	mov	r4, r0
 800aa70:	2c00      	cmp	r4, #0
 800aa72:	d005      	beq.n	800aa80 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 800aa74:	69b9      	ldr	r1, [r7, #24]
 800aa76:	4620      	mov	r0, r4
 800aa78:	f005 f8d6 	bl	800fc28 <_ZN13MenuPresenterC1ER8MenuView>
 800aa7c:	4623      	mov	r3, r4
 800aa7e:	e000      	b.n	800aa82 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 800aa80:	4623      	mov	r3, r4
 800aa82:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	69fa      	ldr	r2, [r7, #28]
 800aa88:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	697a      	ldr	r2, [r7, #20]
 800aa8e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	69ba      	ldr	r2, [r7, #24]
 800aa94:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d002      	beq.n	800aaa2 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	3304      	adds	r3, #4
 800aaa0:	e000      	b.n	800aaa4 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aaa8:	f7ff fc04 	bl	800a2b4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	3304      	adds	r3, #4
 800aab0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7ff fc77 	bl	800a3a6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	6979      	ldr	r1, [r7, #20]
 800aabc:	4618      	mov	r0, r3
 800aabe:	f000 fd68 	bl	800b592 <_ZN8touchgfx4ViewI13MenuPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800aac2:	69fa      	ldr	r2, [r7, #28]
 800aac4:	6979      	ldr	r1, [r7, #20]
 800aac6:	69b8      	ldr	r0, [r7, #24]
 800aac8:	f7ff fbcd 	bl	800a266 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 800aacc:	697b      	ldr	r3, [r7, #20]
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3724      	adds	r7, #36	; 0x24
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd90      	pop	{r4, r7, pc}
 800aad6:	bf00      	nop
 800aad8:	080241d0 	.word	0x080241d0
 800aadc:	08024b7c 	.word	0x08024b7c
 800aae0:	08024260 	.word	0x08024260
 800aae4:	080242a4 	.word	0x080242a4
 800aae8:	08024348 	.word	0x08024348

0800aaec <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800aaec:	b590      	push	{r4, r7, lr}
 800aaee:	b089      	sub	sp, #36	; 0x24
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	60b9      	str	r1, [r7, #8]
 800aaf6:	607a      	str	r2, [r7, #4]
 800aaf8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	689a      	ldr	r2, [r3, #8]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	3320      	adds	r3, #32
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4610      	mov	r0, r2
 800ab0a:	4798      	blx	r3
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	f5b3 5ff9 	cmp.w	r3, #7968	; 0x1f20
 800ab12:	d205      	bcs.n	800ab20 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800ab14:	4b4e      	ldr	r3, [pc, #312]	; (800ac50 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800ab16:	4a4f      	ldr	r2, [pc, #316]	; (800ac54 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800ab18:	21c2      	movs	r1, #194	; 0xc2
 800ab1a:	484f      	ldr	r0, [pc, #316]	; (800ac58 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800ab1c:	f018 fac2 	bl	80230a4 <__assert_func>
 800ab20:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	685a      	ldr	r2, [r3, #4]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	3320      	adds	r3, #32
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4610      	mov	r0, r2
 800ab32:	4798      	blx	r3
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b0f      	cmp	r3, #15
 800ab38:	d805      	bhi.n	800ab46 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800ab3a:	4b48      	ldr	r3, [pc, #288]	; (800ac5c <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800ab3c:	4a45      	ldr	r2, [pc, #276]	; (800ac54 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800ab3e:	21c3      	movs	r1, #195	; 0xc3
 800ab40:	4845      	ldr	r0, [pc, #276]	; (800ac58 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800ab42:	f018 faaf 	bl	80230a4 <__assert_func>
 800ab46:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	68da      	ldr	r2, [r3, #12]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	3320      	adds	r3, #32
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4610      	mov	r0, r2
 800ab58:	4798      	blx	r3
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b53      	cmp	r3, #83	; 0x53
 800ab5e:	d805      	bhi.n	800ab6c <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800ab60:	4b3f      	ldr	r3, [pc, #252]	; (800ac60 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 800ab62:	4a3c      	ldr	r2, [pc, #240]	; (800ac54 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800ab64:	21c4      	movs	r1, #196	; 0xc4
 800ab66:	483c      	ldr	r0, [pc, #240]	; (800ac58 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800ab68:	f018 fa9c 	bl	80230a4 <__assert_func>
 800ab6c:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	68b9      	ldr	r1, [r7, #8]
 800ab72:	68f8      	ldr	r0, [r7, #12]
 800ab74:	f7ff fb1b 	bl	800a1ae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f000 fd15 	bl	800b5ae <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800ab84:	4603      	mov	r3, r0
 800ab86:	4619      	mov	r1, r3
 800ab88:	2054      	movs	r0, #84	; 0x54
 800ab8a:	f7ff f903 	bl	8009d94 <_ZnwjPv>
 800ab8e:	4604      	mov	r4, r0
 800ab90:	2c00      	cmp	r4, #0
 800ab92:	d005      	beq.n	800aba0 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800ab94:	2114      	movs	r1, #20
 800ab96:	4620      	mov	r0, r4
 800ab98:	f000 fd3e 	bl	800b618 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800ab9c:	4623      	mov	r3, r4
 800ab9e:	e000      	b.n	800aba2 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 800aba0:	4623      	mov	r3, r4
 800aba2:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	2100      	movs	r1, #0
 800abaa:	4618      	mov	r0, r3
 800abac:	f000 fdc8 	bl	800b740 <_ZN8touchgfx17AbstractPartition2atI23TestRotationPlateauViewEERT_t>
 800abb0:	4603      	mov	r3, r0
 800abb2:	4619      	mov	r1, r3
 800abb4:	f44f 50f9 	mov.w	r0, #7968	; 0x1f20
 800abb8:	f7ff f8ec 	bl	8009d94 <_ZnwjPv>
 800abbc:	4604      	mov	r4, r0
 800abbe:	2c00      	cmp	r4, #0
 800abc0:	d004      	beq.n	800abcc <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 800abc2:	4620      	mov	r0, r4
 800abc4:	f005 fe0e 	bl	80107e4 <_ZN23TestRotationPlateauViewC1Ev>
 800abc8:	4623      	mov	r3, r4
 800abca:	e000      	b.n	800abce <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 800abcc:	4623      	mov	r3, r4
 800abce:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	2100      	movs	r1, #0
 800abd6:	4618      	mov	r0, r3
 800abd8:	f000 fdc5 	bl	800b766 <_ZN8touchgfx17AbstractPartition2atI28TestRotationPlateauPresenterEERT_t>
 800abdc:	4603      	mov	r3, r0
 800abde:	4619      	mov	r1, r3
 800abe0:	2010      	movs	r0, #16
 800abe2:	f7ff f8d7 	bl	8009d94 <_ZnwjPv>
 800abe6:	4604      	mov	r4, r0
 800abe8:	2c00      	cmp	r4, #0
 800abea:	d005      	beq.n	800abf8 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 800abec:	69b9      	ldr	r1, [r7, #24]
 800abee:	4620      	mov	r0, r4
 800abf0:	f005 fda0 	bl	8010734 <_ZN28TestRotationPlateauPresenterC1ER23TestRotationPlateauView>
 800abf4:	4623      	mov	r3, r4
 800abf6:	e000      	b.n	800abfa <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 800abf8:	4623      	mov	r3, r4
 800abfa:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	69fa      	ldr	r2, [r7, #28]
 800ac00:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	697a      	ldr	r2, [r7, #20]
 800ac06:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	69ba      	ldr	r2, [r7, #24]
 800ac0c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d002      	beq.n	800ac1a <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	3304      	adds	r3, #4
 800ac18:	e000      	b.n	800ac1c <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac20:	f7ff fb48 	bl	800a2b4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	3304      	adds	r3, #4
 800ac28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7ff fbbb 	bl	800a3a6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800ac30:	69bb      	ldr	r3, [r7, #24]
 800ac32:	6979      	ldr	r1, [r7, #20]
 800ac34:	4618      	mov	r0, r3
 800ac36:	f000 fda9 	bl	800b78c <_ZN8touchgfx4ViewI28TestRotationPlateauPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800ac3a:	69fa      	ldr	r2, [r7, #28]
 800ac3c:	6979      	ldr	r1, [r7, #20]
 800ac3e:	69b8      	ldr	r0, [r7, #24]
 800ac40:	f7ff fb11 	bl	800a266 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 800ac44:	697b      	ldr	r3, [r7, #20]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3724      	adds	r7, #36	; 0x24
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd90      	pop	{r4, r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	080241d0 	.word	0x080241d0
 800ac54:	08024c7c 	.word	0x08024c7c
 800ac58:	08024260 	.word	0x08024260
 800ac5c:	080242a4 	.word	0x080242a4
 800ac60:	08024348 	.word	0x08024348

0800ac64 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ac64:	b590      	push	{r4, r7, lr}
 800ac66:	b089      	sub	sp, #36	; 0x24
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
 800ac70:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	689a      	ldr	r2, [r3, #8]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	3320      	adds	r3, #32
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4610      	mov	r0, r2
 800ac82:	4798      	blx	r3
 800ac84:	4602      	mov	r2, r0
 800ac86:	f640 5307 	movw	r3, #3335	; 0xd07
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d805      	bhi.n	800ac9a <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800ac8e:	4b4e      	ldr	r3, [pc, #312]	; (800adc8 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800ac90:	4a4e      	ldr	r2, [pc, #312]	; (800adcc <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800ac92:	21c2      	movs	r1, #194	; 0xc2
 800ac94:	484e      	ldr	r0, [pc, #312]	; (800add0 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800ac96:	f018 fa05 	bl	80230a4 <__assert_func>
 800ac9a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	685a      	ldr	r2, [r3, #4]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	3320      	adds	r3, #32
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4610      	mov	r0, r2
 800acac:	4798      	blx	r3
 800acae:	4603      	mov	r3, r0
 800acb0:	2b0f      	cmp	r3, #15
 800acb2:	d805      	bhi.n	800acc0 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800acb4:	4b47      	ldr	r3, [pc, #284]	; (800add4 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800acb6:	4a45      	ldr	r2, [pc, #276]	; (800adcc <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800acb8:	21c3      	movs	r1, #195	; 0xc3
 800acba:	4845      	ldr	r0, [pc, #276]	; (800add0 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800acbc:	f018 f9f2 	bl	80230a4 <__assert_func>
 800acc0:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	68da      	ldr	r2, [r3, #12]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	3320      	adds	r3, #32
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4610      	mov	r0, r2
 800acd2:	4798      	blx	r3
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b53      	cmp	r3, #83	; 0x53
 800acd8:	d805      	bhi.n	800ace6 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800acda:	4b3f      	ldr	r3, [pc, #252]	; (800add8 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 800acdc:	4a3b      	ldr	r2, [pc, #236]	; (800adcc <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800acde:	21c4      	movs	r1, #196	; 0xc4
 800ace0:	483b      	ldr	r0, [pc, #236]	; (800add0 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800ace2:	f018 f9df 	bl	80230a4 <__assert_func>
 800ace6:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800ace8:	683a      	ldr	r2, [r7, #0]
 800acea:	68b9      	ldr	r1, [r7, #8]
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	f7ff fa5e 	bl	800a1ae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	68db      	ldr	r3, [r3, #12]
 800acf6:	2100      	movs	r1, #0
 800acf8:	4618      	mov	r0, r3
 800acfa:	f000 fc58 	bl	800b5ae <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800acfe:	4603      	mov	r3, r0
 800ad00:	4619      	mov	r1, r3
 800ad02:	2054      	movs	r0, #84	; 0x54
 800ad04:	f7ff f846 	bl	8009d94 <_ZnwjPv>
 800ad08:	4604      	mov	r4, r0
 800ad0a:	2c00      	cmp	r4, #0
 800ad0c:	d005      	beq.n	800ad1a <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 800ad0e:	2114      	movs	r1, #20
 800ad10:	4620      	mov	r0, r4
 800ad12:	f000 fc81 	bl	800b618 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800ad16:	4623      	mov	r3, r4
 800ad18:	e000      	b.n	800ad1c <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb8>
 800ad1a:	4623      	mov	r3, r4
 800ad1c:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	2100      	movs	r1, #0
 800ad24:	4618      	mov	r0, r3
 800ad26:	f000 fd3f 	bl	800b7a8 <_ZN8touchgfx17AbstractPartition2atI12TestUartViewEERT_t>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	f640 5008 	movw	r0, #3336	; 0xd08
 800ad32:	f7ff f82f 	bl	8009d94 <_ZnwjPv>
 800ad36:	4604      	mov	r4, r0
 800ad38:	2c00      	cmp	r4, #0
 800ad3a:	d004      	beq.n	800ad46 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	f005 fe07 	bl	8010950 <_ZN12TestUartViewC1Ev>
 800ad42:	4623      	mov	r3, r4
 800ad44:	e000      	b.n	800ad48 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
 800ad46:	4623      	mov	r3, r4
 800ad48:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	2100      	movs	r1, #0
 800ad50:	4618      	mov	r0, r3
 800ad52:	f000 fd3c 	bl	800b7ce <_ZN8touchgfx17AbstractPartition2atI17TestUartPresenterEERT_t>
 800ad56:	4603      	mov	r3, r0
 800ad58:	4619      	mov	r1, r3
 800ad5a:	2010      	movs	r0, #16
 800ad5c:	f7ff f81a 	bl	8009d94 <_ZnwjPv>
 800ad60:	4604      	mov	r4, r0
 800ad62:	2c00      	cmp	r4, #0
 800ad64:	d005      	beq.n	800ad72 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 800ad66:	69b9      	ldr	r1, [r7, #24]
 800ad68:	4620      	mov	r0, r4
 800ad6a:	f005 fd99 	bl	80108a0 <_ZN17TestUartPresenterC1ER12TestUartView>
 800ad6e:	4623      	mov	r3, r4
 800ad70:	e000      	b.n	800ad74 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
 800ad72:	4623      	mov	r3, r4
 800ad74:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	69fa      	ldr	r2, [r7, #28]
 800ad7a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	697a      	ldr	r2, [r7, #20]
 800ad80:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	69ba      	ldr	r2, [r7, #24]
 800ad86:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d002      	beq.n	800ad94 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	3304      	adds	r3, #4
 800ad92:	e000      	b.n	800ad96 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
 800ad94:	2300      	movs	r3, #0
 800ad96:	4619      	mov	r1, r3
 800ad98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad9a:	f7ff fa8b 	bl	800a2b4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	3304      	adds	r3, #4
 800ada2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7ff fafe 	bl	800a3a6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	6979      	ldr	r1, [r7, #20]
 800adae:	4618      	mov	r0, r3
 800adb0:	f000 fd20 	bl	800b7f4 <_ZN8touchgfx4ViewI17TestUartPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800adb4:	69fa      	ldr	r2, [r7, #28]
 800adb6:	6979      	ldr	r1, [r7, #20]
 800adb8:	69b8      	ldr	r0, [r7, #24]
 800adba:	f7ff fa54 	bl	800a266 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 800adbe:	697b      	ldr	r3, [r7, #20]
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3724      	adds	r7, #36	; 0x24
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd90      	pop	{r4, r7, pc}
 800adc8:	080241d0 	.word	0x080241d0
 800adcc:	08024db4 	.word	0x08024db4
 800add0:	08024260 	.word	0x08024260
 800add4:	080242a4 	.word	0x080242a4
 800add8:	08024348 	.word	0x08024348

0800addc <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800addc:	b590      	push	{r4, r7, lr}
 800adde:	b089      	sub	sp, #36	; 0x24
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
 800ade8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	689a      	ldr	r2, [r3, #8]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	3320      	adds	r3, #32
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4610      	mov	r0, r2
 800adfa:	4798      	blx	r3
 800adfc:	4603      	mov	r3, r0
 800adfe:	2be3      	cmp	r3, #227	; 0xe3
 800ae00:	d805      	bhi.n	800ae0e <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 800ae02:	4b4e      	ldr	r3, [pc, #312]	; (800af3c <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 800ae04:	4a4e      	ldr	r2, [pc, #312]	; (800af40 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800ae06:	21c2      	movs	r1, #194	; 0xc2
 800ae08:	484e      	ldr	r0, [pc, #312]	; (800af44 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800ae0a:	f018 f94b 	bl	80230a4 <__assert_func>
 800ae0e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	685a      	ldr	r2, [r3, #4]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	3320      	adds	r3, #32
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4610      	mov	r0, r2
 800ae20:	4798      	blx	r3
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b0f      	cmp	r3, #15
 800ae26:	d805      	bhi.n	800ae34 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800ae28:	4b47      	ldr	r3, [pc, #284]	; (800af48 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800ae2a:	4a45      	ldr	r2, [pc, #276]	; (800af40 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800ae2c:	21c3      	movs	r1, #195	; 0xc3
 800ae2e:	4845      	ldr	r0, [pc, #276]	; (800af44 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800ae30:	f018 f938 	bl	80230a4 <__assert_func>
 800ae34:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	68da      	ldr	r2, [r3, #12]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	3320      	adds	r3, #32
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4610      	mov	r0, r2
 800ae46:	4798      	blx	r3
 800ae48:	4603      	mov	r3, r0
 800ae4a:	2b53      	cmp	r3, #83	; 0x53
 800ae4c:	d805      	bhi.n	800ae5a <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800ae4e:	4b3f      	ldr	r3, [pc, #252]	; (800af4c <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800ae50:	4a3b      	ldr	r2, [pc, #236]	; (800af40 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800ae52:	21c4      	movs	r1, #196	; 0xc4
 800ae54:	483b      	ldr	r0, [pc, #236]	; (800af44 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800ae56:	f018 f925 	bl	80230a4 <__assert_func>
 800ae5a:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800ae5c:	683a      	ldr	r2, [r7, #0]
 800ae5e:	68b9      	ldr	r1, [r7, #8]
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	f7ff f9a4 	bl	800a1ae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	68db      	ldr	r3, [r3, #12]
 800ae6a:	2100      	movs	r1, #0
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f000 fb9e 	bl	800b5ae <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800ae72:	4603      	mov	r3, r0
 800ae74:	4619      	mov	r1, r3
 800ae76:	2054      	movs	r0, #84	; 0x54
 800ae78:	f7fe ff8c 	bl	8009d94 <_ZnwjPv>
 800ae7c:	4604      	mov	r4, r0
 800ae7e:	2c00      	cmp	r4, #0
 800ae80:	d005      	beq.n	800ae8e <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 800ae82:	2114      	movs	r1, #20
 800ae84:	4620      	mov	r0, r4
 800ae86:	f000 fbc7 	bl	800b618 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800ae8a:	4623      	mov	r3, r4
 800ae8c:	e000      	b.n	800ae90 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800ae8e:	4623      	mov	r3, r4
 800ae90:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	2100      	movs	r1, #0
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f000 fcb9 	bl	800b810 <_ZN8touchgfx17AbstractPartition2atI14TestI2CSPIViewEERT_t>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	4619      	mov	r1, r3
 800aea2:	20e4      	movs	r0, #228	; 0xe4
 800aea4:	f7fe ff76 	bl	8009d94 <_ZnwjPv>
 800aea8:	4604      	mov	r4, r0
 800aeaa:	2c00      	cmp	r4, #0
 800aeac:	d004      	beq.n	800aeb8 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xdc>
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f005 fb2e 	bl	8010510 <_ZN14TestI2CSPIViewC1Ev>
 800aeb4:	4623      	mov	r3, r4
 800aeb6:	e000      	b.n	800aeba <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 800aeb8:	4623      	mov	r3, r4
 800aeba:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	2100      	movs	r1, #0
 800aec2:	4618      	mov	r0, r3
 800aec4:	f000 fcb7 	bl	800b836 <_ZN8touchgfx17AbstractPartition2atI19TestI2CSPIPresenterEERT_t>
 800aec8:	4603      	mov	r3, r0
 800aeca:	4619      	mov	r1, r3
 800aecc:	2010      	movs	r0, #16
 800aece:	f7fe ff61 	bl	8009d94 <_ZnwjPv>
 800aed2:	4604      	mov	r4, r0
 800aed4:	2c00      	cmp	r4, #0
 800aed6:	d005      	beq.n	800aee4 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x108>
 800aed8:	69b9      	ldr	r1, [r7, #24]
 800aeda:	4620      	mov	r0, r4
 800aedc:	f005 fac2 	bl	8010464 <_ZN19TestI2CSPIPresenterC1ER14TestI2CSPIView>
 800aee0:	4623      	mov	r3, r4
 800aee2:	e000      	b.n	800aee6 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 800aee4:	4623      	mov	r3, r4
 800aee6:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	69fa      	ldr	r2, [r7, #28]
 800aeec:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	697a      	ldr	r2, [r7, #20]
 800aef2:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	69ba      	ldr	r2, [r7, #24]
 800aef8:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d002      	beq.n	800af06 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	3304      	adds	r3, #4
 800af04:	e000      	b.n	800af08 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 800af06:	2300      	movs	r3, #0
 800af08:	4619      	mov	r1, r3
 800af0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af0c:	f7ff f9d2 	bl	800a2b4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	3304      	adds	r3, #4
 800af14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af16:	4618      	mov	r0, r3
 800af18:	f7ff fa45 	bl	800a3a6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800af1c:	69bb      	ldr	r3, [r7, #24]
 800af1e:	6979      	ldr	r1, [r7, #20]
 800af20:	4618      	mov	r0, r3
 800af22:	f000 fc9b 	bl	800b85c <_ZN8touchgfx4ViewI19TestI2CSPIPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800af26:	69fa      	ldr	r2, [r7, #28]
 800af28:	6979      	ldr	r1, [r7, #20]
 800af2a:	69b8      	ldr	r0, [r7, #24]
 800af2c:	f7ff f99b 	bl	800a266 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 800af30:	697b      	ldr	r3, [r7, #20]
}
 800af32:	4618      	mov	r0, r3
 800af34:	3724      	adds	r7, #36	; 0x24
 800af36:	46bd      	mov	sp, r7
 800af38:	bd90      	pop	{r4, r7, pc}
 800af3a:	bf00      	nop
 800af3c:	080241d0 	.word	0x080241d0
 800af40:	08024ed8 	.word	0x08024ed8
 800af44:	08024260 	.word	0x08024260
 800af48:	080242a4 	.word	0x080242a4
 800af4c:	08024348 	.word	0x08024348

0800af50 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800af50:	b590      	push	{r4, r7, lr}
 800af52:	b089      	sub	sp, #36	; 0x24
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
 800af5c:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	689a      	ldr	r2, [r3, #8]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	3320      	adds	r3, #32
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4610      	mov	r0, r2
 800af6e:	4798      	blx	r3
 800af70:	4603      	mov	r3, r0
 800af72:	2be3      	cmp	r3, #227	; 0xe3
 800af74:	d805      	bhi.n	800af82 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 800af76:	4b4e      	ldr	r3, [pc, #312]	; (800b0b0 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 800af78:	4a4e      	ldr	r2, [pc, #312]	; (800b0b4 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800af7a:	21c2      	movs	r1, #194	; 0xc2
 800af7c:	484e      	ldr	r0, [pc, #312]	; (800b0b8 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800af7e:	f018 f891 	bl	80230a4 <__assert_func>
 800af82:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	685a      	ldr	r2, [r3, #4]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	3320      	adds	r3, #32
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4610      	mov	r0, r2
 800af94:	4798      	blx	r3
 800af96:	4603      	mov	r3, r0
 800af98:	2b0f      	cmp	r3, #15
 800af9a:	d805      	bhi.n	800afa8 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800af9c:	4b47      	ldr	r3, [pc, #284]	; (800b0bc <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800af9e:	4a45      	ldr	r2, [pc, #276]	; (800b0b4 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800afa0:	21c3      	movs	r1, #195	; 0xc3
 800afa2:	4845      	ldr	r0, [pc, #276]	; (800b0b8 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800afa4:	f018 f87e 	bl	80230a4 <__assert_func>
 800afa8:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	68da      	ldr	r2, [r3, #12]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	3320      	adds	r3, #32
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4610      	mov	r0, r2
 800afba:	4798      	blx	r3
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b53      	cmp	r3, #83	; 0x53
 800afc0:	d805      	bhi.n	800afce <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800afc2:	4b3f      	ldr	r3, [pc, #252]	; (800b0c0 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800afc4:	4a3b      	ldr	r2, [pc, #236]	; (800b0b4 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800afc6:	21c4      	movs	r1, #196	; 0xc4
 800afc8:	483b      	ldr	r0, [pc, #236]	; (800b0b8 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800afca:	f018 f86b 	bl	80230a4 <__assert_func>
 800afce:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800afd0:	683a      	ldr	r2, [r7, #0]
 800afd2:	68b9      	ldr	r1, [r7, #8]
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f7ff f8ea 	bl	800a1ae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	2100      	movs	r1, #0
 800afe0:	4618      	mov	r0, r3
 800afe2:	f000 fae4 	bl	800b5ae <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800afe6:	4603      	mov	r3, r0
 800afe8:	4619      	mov	r1, r3
 800afea:	2054      	movs	r0, #84	; 0x54
 800afec:	f7fe fed2 	bl	8009d94 <_ZnwjPv>
 800aff0:	4604      	mov	r4, r0
 800aff2:	2c00      	cmp	r4, #0
 800aff4:	d005      	beq.n	800b002 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 800aff6:	2114      	movs	r1, #20
 800aff8:	4620      	mov	r0, r4
 800affa:	f000 fb0d 	bl	800b618 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800affe:	4623      	mov	r3, r4
 800b000:	e000      	b.n	800b004 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800b002:	4623      	mov	r3, r4
 800b004:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	2100      	movs	r1, #0
 800b00c:	4618      	mov	r0, r3
 800b00e:	f000 fc33 	bl	800b878 <_ZN8touchgfx17AbstractPartition2atI24TestOrientationVoileViewEERT_t>
 800b012:	4603      	mov	r3, r0
 800b014:	4619      	mov	r1, r3
 800b016:	20e4      	movs	r0, #228	; 0xe4
 800b018:	f7fe febc 	bl	8009d94 <_ZnwjPv>
 800b01c:	4604      	mov	r4, r0
 800b01e:	2c00      	cmp	r4, #0
 800b020:	d004      	beq.n	800b02c <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xdc>
 800b022:	4620      	mov	r0, r4
 800b024:	f005 fb28 	bl	8010678 <_ZN24TestOrientationVoileViewC1Ev>
 800b028:	4623      	mov	r3, r4
 800b02a:	e000      	b.n	800b02e <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 800b02c:	4623      	mov	r3, r4
 800b02e:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	2100      	movs	r1, #0
 800b036:	4618      	mov	r0, r3
 800b038:	f000 fc31 	bl	800b89e <_ZN8touchgfx17AbstractPartition2atI29TestOrientationVoilePresenterEERT_t>
 800b03c:	4603      	mov	r3, r0
 800b03e:	4619      	mov	r1, r3
 800b040:	2010      	movs	r0, #16
 800b042:	f7fe fea7 	bl	8009d94 <_ZnwjPv>
 800b046:	4604      	mov	r4, r0
 800b048:	2c00      	cmp	r4, #0
 800b04a:	d005      	beq.n	800b058 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x108>
 800b04c:	69b9      	ldr	r1, [r7, #24]
 800b04e:	4620      	mov	r0, r4
 800b050:	f005 fabc 	bl	80105cc <_ZN29TestOrientationVoilePresenterC1ER24TestOrientationVoileView>
 800b054:	4623      	mov	r3, r4
 800b056:	e000      	b.n	800b05a <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 800b058:	4623      	mov	r3, r4
 800b05a:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	69fa      	ldr	r2, [r7, #28]
 800b060:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	697a      	ldr	r2, [r7, #20]
 800b066:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	69ba      	ldr	r2, [r7, #24]
 800b06c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d002      	beq.n	800b07a <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	3304      	adds	r3, #4
 800b078:	e000      	b.n	800b07c <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 800b07a:	2300      	movs	r3, #0
 800b07c:	4619      	mov	r1, r3
 800b07e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b080:	f7ff f918 	bl	800a2b4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	3304      	adds	r3, #4
 800b088:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7ff f98b 	bl	800a3a6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800b090:	69bb      	ldr	r3, [r7, #24]
 800b092:	6979      	ldr	r1, [r7, #20]
 800b094:	4618      	mov	r0, r3
 800b096:	f000 fc15 	bl	800b8c4 <_ZN8touchgfx4ViewI29TestOrientationVoilePresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800b09a:	69fa      	ldr	r2, [r7, #28]
 800b09c:	6979      	ldr	r1, [r7, #20]
 800b09e:	69b8      	ldr	r0, [r7, #24]
 800b0a0:	f7ff f8e1 	bl	800a266 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 800b0a4:	697b      	ldr	r3, [r7, #20]
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3724      	adds	r7, #36	; 0x24
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd90      	pop	{r4, r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	080241d0 	.word	0x080241d0
 800b0b4:	08025000 	.word	0x08025000
 800b0b8:	08024260 	.word	0x08024260
 800b0bc:	080242a4 	.word	0x080242a4
 800b0c0:	08024348 	.word	0x08024348

0800b0c4 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800b0c4:	b590      	push	{r4, r7, lr}
 800b0c6:	b089      	sub	sp, #36	; 0x24
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
 800b0d0:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	689a      	ldr	r2, [r3, #8]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	3320      	adds	r3, #32
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4610      	mov	r0, r2
 800b0e2:	4798      	blx	r3
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	2be3      	cmp	r3, #227	; 0xe3
 800b0e8:	d805      	bhi.n	800b0f6 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 800b0ea:	4b4e      	ldr	r3, [pc, #312]	; (800b224 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 800b0ec:	4a4e      	ldr	r2, [pc, #312]	; (800b228 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800b0ee:	21c2      	movs	r1, #194	; 0xc2
 800b0f0:	484e      	ldr	r0, [pc, #312]	; (800b22c <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b0f2:	f017 ffd7 	bl	80230a4 <__assert_func>
 800b0f6:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	685a      	ldr	r2, [r3, #4]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	3320      	adds	r3, #32
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4610      	mov	r0, r2
 800b108:	4798      	blx	r3
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b0f      	cmp	r3, #15
 800b10e:	d805      	bhi.n	800b11c <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800b110:	4b47      	ldr	r3, [pc, #284]	; (800b230 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800b112:	4a45      	ldr	r2, [pc, #276]	; (800b228 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800b114:	21c3      	movs	r1, #195	; 0xc3
 800b116:	4845      	ldr	r0, [pc, #276]	; (800b22c <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b118:	f017 ffc4 	bl	80230a4 <__assert_func>
 800b11c:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	68da      	ldr	r2, [r3, #12]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	3320      	adds	r3, #32
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4610      	mov	r0, r2
 800b12e:	4798      	blx	r3
 800b130:	4603      	mov	r3, r0
 800b132:	2b53      	cmp	r3, #83	; 0x53
 800b134:	d805      	bhi.n	800b142 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800b136:	4b3f      	ldr	r3, [pc, #252]	; (800b234 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800b138:	4a3b      	ldr	r2, [pc, #236]	; (800b228 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800b13a:	21c4      	movs	r1, #196	; 0xc4
 800b13c:	483b      	ldr	r0, [pc, #236]	; (800b22c <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b13e:	f017 ffb1 	bl	80230a4 <__assert_func>
 800b142:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800b144:	683a      	ldr	r2, [r7, #0]
 800b146:	68b9      	ldr	r1, [r7, #8]
 800b148:	68f8      	ldr	r0, [r7, #12]
 800b14a:	f7ff f830 	bl	800a1ae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	68db      	ldr	r3, [r3, #12]
 800b152:	2100      	movs	r1, #0
 800b154:	4618      	mov	r0, r3
 800b156:	f000 fa2a 	bl	800b5ae <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800b15a:	4603      	mov	r3, r0
 800b15c:	4619      	mov	r1, r3
 800b15e:	2054      	movs	r0, #84	; 0x54
 800b160:	f7fe fe18 	bl	8009d94 <_ZnwjPv>
 800b164:	4604      	mov	r4, r0
 800b166:	2c00      	cmp	r4, #0
 800b168:	d005      	beq.n	800b176 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 800b16a:	2114      	movs	r1, #20
 800b16c:	4620      	mov	r0, r4
 800b16e:	f000 fa53 	bl	800b618 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800b172:	4623      	mov	r3, r4
 800b174:	e000      	b.n	800b178 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800b176:	4623      	mov	r3, r4
 800b178:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	2100      	movs	r1, #0
 800b180:	4618      	mov	r0, r3
 800b182:	f000 fbad 	bl	800b8e0 <_ZN8touchgfx17AbstractPartition2atI11TestADCViewEERT_t>
 800b186:	4603      	mov	r3, r0
 800b188:	4619      	mov	r1, r3
 800b18a:	20e4      	movs	r0, #228	; 0xe4
 800b18c:	f7fe fe02 	bl	8009d94 <_ZnwjPv>
 800b190:	4604      	mov	r4, r0
 800b192:	2c00      	cmp	r4, #0
 800b194:	d004      	beq.n	800b1a0 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xdc>
 800b196:	4620      	mov	r0, r4
 800b198:	f004 ff9e 	bl	80100d8 <_ZN11TestADCViewC1Ev>
 800b19c:	4623      	mov	r3, r4
 800b19e:	e000      	b.n	800b1a2 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 800b1a0:	4623      	mov	r3, r4
 800b1a2:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f000 fbab 	bl	800b906 <_ZN8touchgfx17AbstractPartition2atI16TestADCPresenterEERT_t>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	2010      	movs	r0, #16
 800b1b6:	f7fe fded 	bl	8009d94 <_ZnwjPv>
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	2c00      	cmp	r4, #0
 800b1be:	d005      	beq.n	800b1cc <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x108>
 800b1c0:	69b9      	ldr	r1, [r7, #24]
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	f004 ff32 	bl	801002c <_ZN16TestADCPresenterC1ER11TestADCView>
 800b1c8:	4623      	mov	r3, r4
 800b1ca:	e000      	b.n	800b1ce <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 800b1cc:	4623      	mov	r3, r4
 800b1ce:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	69fa      	ldr	r2, [r7, #28]
 800b1d4:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	697a      	ldr	r2, [r7, #20]
 800b1da:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	69ba      	ldr	r2, [r7, #24]
 800b1e0:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d002      	beq.n	800b1ee <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	3304      	adds	r3, #4
 800b1ec:	e000      	b.n	800b1f0 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1f4:	f7ff f85e 	bl	800a2b4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	3304      	adds	r3, #4
 800b1fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7ff f8d1 	bl	800a3a6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800b204:	69bb      	ldr	r3, [r7, #24]
 800b206:	6979      	ldr	r1, [r7, #20]
 800b208:	4618      	mov	r0, r3
 800b20a:	f000 fb8f 	bl	800b92c <_ZN8touchgfx4ViewI16TestADCPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800b20e:	69fa      	ldr	r2, [r7, #28]
 800b210:	6979      	ldr	r1, [r7, #20]
 800b212:	69b8      	ldr	r0, [r7, #24]
 800b214:	f7ff f827 	bl	800a266 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 800b218:	697b      	ldr	r3, [r7, #20]
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3724      	adds	r7, #36	; 0x24
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd90      	pop	{r4, r7, pc}
 800b222:	bf00      	nop
 800b224:	080241d0 	.word	0x080241d0
 800b228:	0802513c 	.word	0x0802513c
 800b22c:	08024260 	.word	0x08024260
 800b230:	080242a4 	.word	0x080242a4
 800b234:	08024348 	.word	0x08024348

0800b238 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800b238:	b590      	push	{r4, r7, lr}
 800b23a:	b089      	sub	sp, #36	; 0x24
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	607a      	str	r2, [r7, #4]
 800b244:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	689a      	ldr	r2, [r3, #8]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	689b      	ldr	r3, [r3, #8]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	3320      	adds	r3, #32
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4610      	mov	r0, r2
 800b256:	4798      	blx	r3
 800b258:	4603      	mov	r3, r0
 800b25a:	2be3      	cmp	r3, #227	; 0xe3
 800b25c:	d805      	bhi.n	800b26a <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 800b25e:	4b4e      	ldr	r3, [pc, #312]	; (800b398 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 800b260:	4a4e      	ldr	r2, [pc, #312]	; (800b39c <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800b262:	21c2      	movs	r1, #194	; 0xc2
 800b264:	484e      	ldr	r0, [pc, #312]	; (800b3a0 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b266:	f017 ff1d 	bl	80230a4 <__assert_func>
 800b26a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	685a      	ldr	r2, [r3, #4]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	3320      	adds	r3, #32
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4610      	mov	r0, r2
 800b27c:	4798      	blx	r3
 800b27e:	4603      	mov	r3, r0
 800b280:	2b0f      	cmp	r3, #15
 800b282:	d805      	bhi.n	800b290 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800b284:	4b47      	ldr	r3, [pc, #284]	; (800b3a4 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800b286:	4a45      	ldr	r2, [pc, #276]	; (800b39c <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800b288:	21c3      	movs	r1, #195	; 0xc3
 800b28a:	4845      	ldr	r0, [pc, #276]	; (800b3a0 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b28c:	f017 ff0a 	bl	80230a4 <__assert_func>
 800b290:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	68da      	ldr	r2, [r3, #12]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	3320      	adds	r3, #32
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4610      	mov	r0, r2
 800b2a2:	4798      	blx	r3
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b53      	cmp	r3, #83	; 0x53
 800b2a8:	d805      	bhi.n	800b2b6 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800b2aa:	4b3f      	ldr	r3, [pc, #252]	; (800b3a8 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800b2ac:	4a3b      	ldr	r2, [pc, #236]	; (800b39c <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800b2ae:	21c4      	movs	r1, #196	; 0xc4
 800b2b0:	483b      	ldr	r0, [pc, #236]	; (800b3a0 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b2b2:	f017 fef7 	bl	80230a4 <__assert_func>
 800b2b6:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800b2b8:	683a      	ldr	r2, [r7, #0]
 800b2ba:	68b9      	ldr	r1, [r7, #8]
 800b2bc:	68f8      	ldr	r0, [r7, #12]
 800b2be:	f7fe ff76 	bl	800a1ae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	2100      	movs	r1, #0
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f000 f970 	bl	800b5ae <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	2054      	movs	r0, #84	; 0x54
 800b2d4:	f7fe fd5e 	bl	8009d94 <_ZnwjPv>
 800b2d8:	4604      	mov	r4, r0
 800b2da:	2c00      	cmp	r4, #0
 800b2dc:	d005      	beq.n	800b2ea <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 800b2de:	2114      	movs	r1, #20
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f000 f999 	bl	800b618 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800b2e6:	4623      	mov	r3, r4
 800b2e8:	e000      	b.n	800b2ec <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800b2ea:	4623      	mov	r3, r4
 800b2ec:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	689b      	ldr	r3, [r3, #8]
 800b2f2:	2100      	movs	r1, #0
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f000 fb27 	bl	800b948 <_ZN8touchgfx17AbstractPartition2atI15TestCompletViewEERT_t>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	20e4      	movs	r0, #228	; 0xe4
 800b300:	f7fe fd48 	bl	8009d94 <_ZnwjPv>
 800b304:	4604      	mov	r4, r0
 800b306:	2c00      	cmp	r4, #0
 800b308:	d004      	beq.n	800b314 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xdc>
 800b30a:	4620      	mov	r0, r4
 800b30c:	f004 ff98 	bl	8010240 <_ZN15TestCompletViewC1Ev>
 800b310:	4623      	mov	r3, r4
 800b312:	e000      	b.n	800b316 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 800b314:	4623      	mov	r3, r4
 800b316:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	2100      	movs	r1, #0
 800b31e:	4618      	mov	r0, r3
 800b320:	f000 fb25 	bl	800b96e <_ZN8touchgfx17AbstractPartition2atI20TestCompletPresenterEERT_t>
 800b324:	4603      	mov	r3, r0
 800b326:	4619      	mov	r1, r3
 800b328:	2010      	movs	r0, #16
 800b32a:	f7fe fd33 	bl	8009d94 <_ZnwjPv>
 800b32e:	4604      	mov	r4, r0
 800b330:	2c00      	cmp	r4, #0
 800b332:	d005      	beq.n	800b340 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x108>
 800b334:	69b9      	ldr	r1, [r7, #24]
 800b336:	4620      	mov	r0, r4
 800b338:	f004 ff2c 	bl	8010194 <_ZN20TestCompletPresenterC1ER15TestCompletView>
 800b33c:	4623      	mov	r3, r4
 800b33e:	e000      	b.n	800b342 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 800b340:	4623      	mov	r3, r4
 800b342:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	69fa      	ldr	r2, [r7, #28]
 800b348:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	697a      	ldr	r2, [r7, #20]
 800b34e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	69ba      	ldr	r2, [r7, #24]
 800b354:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d002      	beq.n	800b362 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	3304      	adds	r3, #4
 800b360:	e000      	b.n	800b364 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 800b362:	2300      	movs	r3, #0
 800b364:	4619      	mov	r1, r3
 800b366:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b368:	f7fe ffa4 	bl	800a2b4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	3304      	adds	r3, #4
 800b370:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b372:	4618      	mov	r0, r3
 800b374:	f7ff f817 	bl	800a3a6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800b378:	69bb      	ldr	r3, [r7, #24]
 800b37a:	6979      	ldr	r1, [r7, #20]
 800b37c:	4618      	mov	r0, r3
 800b37e:	f000 fb09 	bl	800b994 <_ZN8touchgfx4ViewI20TestCompletPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800b382:	69fa      	ldr	r2, [r7, #28]
 800b384:	6979      	ldr	r1, [r7, #20]
 800b386:	69b8      	ldr	r0, [r7, #24]
 800b388:	f7fe ff6d 	bl	800a266 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 800b38c:	697b      	ldr	r3, [r7, #20]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3724      	adds	r7, #36	; 0x24
 800b392:	46bd      	mov	sp, r7
 800b394:	bd90      	pop	{r4, r7, pc}
 800b396:	bf00      	nop
 800b398:	080241d0 	.word	0x080241d0
 800b39c:	0802525c 	.word	0x0802525c
 800b3a0:	08024260 	.word	0x08024260
 800b3a4:	080242a4 	.word	0x080242a4
 800b3a8:	08024348 	.word	0x08024348

0800b3ac <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800b3ac:	b590      	push	{r4, r7, lr}
 800b3ae:	b089      	sub	sp, #36	; 0x24
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
 800b3b8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	689a      	ldr	r2, [r3, #8]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	689b      	ldr	r3, [r3, #8]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	3320      	adds	r3, #32
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4610      	mov	r0, r2
 800b3ca:	4798      	blx	r3
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2be3      	cmp	r3, #227	; 0xe3
 800b3d0:	d805      	bhi.n	800b3de <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 800b3d2:	4b4e      	ldr	r3, [pc, #312]	; (800b50c <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 800b3d4:	4a4e      	ldr	r2, [pc, #312]	; (800b510 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800b3d6:	21c2      	movs	r1, #194	; 0xc2
 800b3d8:	484e      	ldr	r0, [pc, #312]	; (800b514 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b3da:	f017 fe63 	bl	80230a4 <__assert_func>
 800b3de:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	685a      	ldr	r2, [r3, #4]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	3320      	adds	r3, #32
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4610      	mov	r0, r2
 800b3f0:	4798      	blx	r3
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b0f      	cmp	r3, #15
 800b3f6:	d805      	bhi.n	800b404 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800b3f8:	4b47      	ldr	r3, [pc, #284]	; (800b518 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800b3fa:	4a45      	ldr	r2, [pc, #276]	; (800b510 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800b3fc:	21c3      	movs	r1, #195	; 0xc3
 800b3fe:	4845      	ldr	r0, [pc, #276]	; (800b514 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b400:	f017 fe50 	bl	80230a4 <__assert_func>
 800b404:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	68da      	ldr	r2, [r3, #12]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	68db      	ldr	r3, [r3, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	3320      	adds	r3, #32
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4610      	mov	r0, r2
 800b416:	4798      	blx	r3
 800b418:	4603      	mov	r3, r0
 800b41a:	2b53      	cmp	r3, #83	; 0x53
 800b41c:	d805      	bhi.n	800b42a <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800b41e:	4b3f      	ldr	r3, [pc, #252]	; (800b51c <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800b420:	4a3b      	ldr	r2, [pc, #236]	; (800b510 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800b422:	21c4      	movs	r1, #196	; 0xc4
 800b424:	483b      	ldr	r0, [pc, #236]	; (800b514 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b426:	f017 fe3d 	bl	80230a4 <__assert_func>
 800b42a:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800b42c:	683a      	ldr	r2, [r7, #0]
 800b42e:	68b9      	ldr	r1, [r7, #8]
 800b430:	68f8      	ldr	r0, [r7, #12]
 800b432:	f7fe febc 	bl	800a1ae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	2100      	movs	r1, #0
 800b43c:	4618      	mov	r0, r3
 800b43e:	f000 f8b6 	bl	800b5ae <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800b442:	4603      	mov	r3, r0
 800b444:	4619      	mov	r1, r3
 800b446:	2054      	movs	r0, #84	; 0x54
 800b448:	f7fe fca4 	bl	8009d94 <_ZnwjPv>
 800b44c:	4604      	mov	r4, r0
 800b44e:	2c00      	cmp	r4, #0
 800b450:	d005      	beq.n	800b45e <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 800b452:	2114      	movs	r1, #20
 800b454:	4620      	mov	r0, r4
 800b456:	f000 f8df 	bl	800b618 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800b45a:	4623      	mov	r3, r4
 800b45c:	e000      	b.n	800b460 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800b45e:	4623      	mov	r3, r4
 800b460:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	689b      	ldr	r3, [r3, #8]
 800b466:	2100      	movs	r1, #0
 800b468:	4618      	mov	r0, r3
 800b46a:	f000 faa1 	bl	800b9b0 <_ZN8touchgfx17AbstractPartition2atI17TestGirouetteViewEERT_t>
 800b46e:	4603      	mov	r3, r0
 800b470:	4619      	mov	r1, r3
 800b472:	20e4      	movs	r0, #228	; 0xe4
 800b474:	f7fe fc8e 	bl	8009d94 <_ZnwjPv>
 800b478:	4604      	mov	r4, r0
 800b47a:	2c00      	cmp	r4, #0
 800b47c:	d004      	beq.n	800b488 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xdc>
 800b47e:	4620      	mov	r0, r4
 800b480:	f004 ff92 	bl	80103a8 <_ZN17TestGirouetteViewC1Ev>
 800b484:	4623      	mov	r3, r4
 800b486:	e000      	b.n	800b48a <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 800b488:	4623      	mov	r3, r4
 800b48a:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	2100      	movs	r1, #0
 800b492:	4618      	mov	r0, r3
 800b494:	f000 fa9f 	bl	800b9d6 <_ZN8touchgfx17AbstractPartition2atI22TestGirouettePresenterEERT_t>
 800b498:	4603      	mov	r3, r0
 800b49a:	4619      	mov	r1, r3
 800b49c:	2010      	movs	r0, #16
 800b49e:	f7fe fc79 	bl	8009d94 <_ZnwjPv>
 800b4a2:	4604      	mov	r4, r0
 800b4a4:	2c00      	cmp	r4, #0
 800b4a6:	d005      	beq.n	800b4b4 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x108>
 800b4a8:	69b9      	ldr	r1, [r7, #24]
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f004 ff26 	bl	80102fc <_ZN22TestGirouettePresenterC1ER17TestGirouetteView>
 800b4b0:	4623      	mov	r3, r4
 800b4b2:	e000      	b.n	800b4b6 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 800b4b4:	4623      	mov	r3, r4
 800b4b6:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	69fa      	ldr	r2, [r7, #28]
 800b4bc:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	697a      	ldr	r2, [r7, #20]
 800b4c2:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	69ba      	ldr	r2, [r7, #24]
 800b4c8:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d002      	beq.n	800b4d6 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	3304      	adds	r3, #4
 800b4d4:	e000      	b.n	800b4d8 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	4619      	mov	r1, r3
 800b4da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b4dc:	f7fe feea 	bl	800a2b4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	3304      	adds	r3, #4
 800b4e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7fe ff5d 	bl	800a3a6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800b4ec:	69bb      	ldr	r3, [r7, #24]
 800b4ee:	6979      	ldr	r1, [r7, #20]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f000 fa83 	bl	800b9fc <_ZN8touchgfx4ViewI22TestGirouettePresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800b4f6:	69fa      	ldr	r2, [r7, #28]
 800b4f8:	6979      	ldr	r1, [r7, #20]
 800b4fa:	69b8      	ldr	r0, [r7, #24]
 800b4fc:	f7fe feb3 	bl	800a266 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 800b500:	697b      	ldr	r3, [r7, #20]
}
 800b502:	4618      	mov	r0, r3
 800b504:	3724      	adds	r7, #36	; 0x24
 800b506:	46bd      	mov	sp, r7
 800b508:	bd90      	pop	{r4, r7, pc}
 800b50a:	bf00      	nop
 800b50c:	080241d0 	.word	0x080241d0
 800b510:	08025384 	.word	0x08025384
 800b514:	08024260 	.word	0x08024260
 800b518:	080242a4 	.word	0x080242a4
 800b51c:	08024348 	.word	0x08024348

0800b520 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	460b      	mov	r3, r1
 800b52a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	3324      	adds	r3, #36	; 0x24
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	887a      	ldrh	r2, [r7, #2]
 800b536:	4611      	mov	r1, r2
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	4798      	blx	r3
 800b53c:	4603      	mov	r3, r0
    }
 800b53e:	4618      	mov	r0, r3
 800b540:	3708      	adds	r7, #8
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <_ZN8touchgfx17AbstractPartition2atI8MenuViewEERT_t>:
    T& at(const uint16_t index)
 800b546:	b580      	push	{r7, lr}
 800b548:	b082      	sub	sp, #8
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
 800b54e:	460b      	mov	r3, r1
 800b550:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	3324      	adds	r3, #36	; 0x24
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	887a      	ldrh	r2, [r7, #2]
 800b55c:	4611      	mov	r1, r2
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	4798      	blx	r3
 800b562:	4603      	mov	r3, r0
    }
 800b564:	4618      	mov	r0, r3
 800b566:	3708      	adds	r7, #8
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <_ZN8touchgfx17AbstractPartition2atI13MenuPresenterEERT_t>:
    T& at(const uint16_t index)
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b082      	sub	sp, #8
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	460b      	mov	r3, r1
 800b576:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	3324      	adds	r3, #36	; 0x24
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	887a      	ldrh	r2, [r7, #2]
 800b582:	4611      	mov	r1, r2
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	4798      	blx	r3
 800b588:	4603      	mov	r3, r0
    }
 800b58a:	4618      	mov	r0, r3
 800b58c:	3708      	adds	r7, #8
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <_ZN8touchgfx4ViewI13MenuPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800b592:	b480      	push	{r7}
 800b594:	b083      	sub	sp, #12
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
 800b59a:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	683a      	ldr	r2, [r7, #0]
 800b5a0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800b5a2:	bf00      	nop
 800b5a4:	370c      	adds	r7, #12
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr

0800b5ae <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b082      	sub	sp, #8
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	3324      	adds	r3, #36	; 0x24
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	887a      	ldrh	r2, [r7, #2]
 800b5c4:	4611      	mov	r1, r2
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	4798      	blx	r3
 800b5ca:	4603      	mov	r3, r0
    }
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3708      	adds	r7, #8
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	4a05      	ldr	r2, [pc, #20]	; (800b5f4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	601a      	str	r2, [r3, #0]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f000 fa81 	bl	800baec <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3708      	adds	r7, #8
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	08024a44 	.word	0x08024a44

0800b5f8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7ff ffe7 	bl	800b5d4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800b606:	2110      	movs	r1, #16
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f017 fd20 	bl	802304e <_ZdlPvj>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	4618      	mov	r0, r3
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}

0800b618 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
     *
     *        Constructor.
     *
     * @param transitionSteps Number of steps in the transition animation.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 800b618:	b590      	push	{r4, r7, lr}
 800b61a:	b087      	sub	sp, #28
 800b61c:	af02      	add	r7, sp, #8
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	460b      	mov	r3, r1
 800b622:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	4618      	mov	r0, r3
 800b628:	f7fe fc22 	bl	8009e70 <_ZN8touchgfx10TransitionC1Ev>
 800b62c:	4a3f      	ldr	r2, [pc, #252]	; (800b72c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x114>)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	601a      	str	r2, [r3, #0]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	330c      	adds	r3, #12
 800b636:	4618      	mov	r0, r3
 800b638:	f00a f9ac 	bl	8015994 <_ZN8touchgfx14SnapshotWidgetC1Ev>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f103 020c 	add.w	r2, r3, #12
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	639a      	str	r2, [r3, #56]	; 0x38
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800b64c:	4a38      	ldr	r2, [pc, #224]	; (800b730 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x118>)
 800b64e:	f107 0308 	add.w	r3, r7, #8
 800b652:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b656:	e883 0003 	stmia.w	r3, {r0, r1}
 800b65a:	f107 0308 	add.w	r3, r7, #8
 800b65e:	cb0c      	ldmia	r3, {r2, r3}
 800b660:	6879      	ldr	r1, [r7, #4]
 800b662:	4620      	mov	r0, r4
 800b664:	f000 fa22 	bl	800baac <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2202      	movs	r2, #2
 800b66c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	78fa      	ldrb	r2, [r7, #3]
 800b674:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2200      	movs	r2, #0
 800b684:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    {
        if (HAL::USE_ANIMATION_STORAGE)
 800b688:	4b2a      	ldr	r3, [pc, #168]	; (800b734 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x11c>)
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d047      	beq.n	800b720 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f103 000c 	add.w	r0, r3, #12
 800b696:	4b28      	ldr	r3, [pc, #160]	; (800b738 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800b698:	881b      	ldrh	r3, [r3, #0]
 800b69a:	b21a      	sxth	r2, r3
 800b69c:	4b27      	ldr	r3, [pc, #156]	; (800b73c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800b69e:	881b      	ldrh	r3, [r3, #0]
 800b6a0:	b21b      	sxth	r3, r3
 800b6a2:	9300      	str	r3, [sp, #0]
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	f7fe fc6f 	bl	8009f8c <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	330c      	adds	r3, #12
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f00a f8eb 	bl	801588e <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b6be:	2b03      	cmp	r3, #3
 800b6c0:	d82a      	bhi.n	800b718 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x100>
 800b6c2:	a201      	add	r2, pc, #4	; (adr r2, 800b6c8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 800b6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c8:	0800b6f9 	.word	0x0800b6f9
 800b6cc:	0800b707 	.word	0x0800b707
 800b6d0:	0800b6d9 	.word	0x0800b6d9
 800b6d4:	0800b6eb 	.word	0x0800b6eb
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 800b6d8:	4b17      	ldr	r3, [pc, #92]	; (800b738 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800b6da:	881b      	ldrh	r3, [r3, #0]
 800b6dc:	425b      	negs	r3, r3
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	b21a      	sxth	r2, r3
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800b6e8:	e01a      	b.n	800b720 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 800b6ea:	4b13      	ldr	r3, [pc, #76]	; (800b738 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800b6ec:	881b      	ldrh	r3, [r3, #0]
 800b6ee:	b21a      	sxth	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800b6f6:	e013      	b.n	800b720 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 800b6f8:	4b10      	ldr	r3, [pc, #64]	; (800b73c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800b6fa:	881b      	ldrh	r3, [r3, #0]
 800b6fc:	b21a      	sxth	r2, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800b704:	e00c      	b.n	800b720 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 800b706:	4b0d      	ldr	r3, [pc, #52]	; (800b73c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800b708:	881b      	ldrh	r3, [r3, #0]
 800b70a:	425b      	negs	r3, r3
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	b21a      	sxth	r2, r3
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800b716:	e003      	b.n	800b720 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            default:
                done = true;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2201      	movs	r2, #1
 800b71c:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 800b71e:	bf00      	nop
            }
        }
    }
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	4618      	mov	r0, r3
 800b724:	3714      	adds	r7, #20
 800b726:	46bd      	mov	sp, r7
 800b728:	bd90      	pop	{r4, r7, pc}
 800b72a:	bf00      	nop
 800b72c:	08024a1c 	.word	0x08024a1c
 800b730:	080243ec 	.word	0x080243ec
 800b734:	2000b1ab 	.word	0x2000b1ab
 800b738:	2000b1a0 	.word	0x2000b1a0
 800b73c:	2000b1a2 	.word	0x2000b1a2

0800b740 <_ZN8touchgfx17AbstractPartition2atI23TestRotationPlateauViewEERT_t>:
    T& at(const uint16_t index)
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	460b      	mov	r3, r1
 800b74a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	3324      	adds	r3, #36	; 0x24
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	887a      	ldrh	r2, [r7, #2]
 800b756:	4611      	mov	r1, r2
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	4798      	blx	r3
 800b75c:	4603      	mov	r3, r0
    }
 800b75e:	4618      	mov	r0, r3
 800b760:	3708      	adds	r7, #8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <_ZN8touchgfx17AbstractPartition2atI28TestRotationPlateauPresenterEERT_t>:
    T& at(const uint16_t index)
 800b766:	b580      	push	{r7, lr}
 800b768:	b082      	sub	sp, #8
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	460b      	mov	r3, r1
 800b770:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	3324      	adds	r3, #36	; 0x24
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	887a      	ldrh	r2, [r7, #2]
 800b77c:	4611      	mov	r1, r2
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	4798      	blx	r3
 800b782:	4603      	mov	r3, r0
    }
 800b784:	4618      	mov	r0, r3
 800b786:	3708      	adds	r7, #8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <_ZN8touchgfx4ViewI28TestRotationPlateauPresenterE4bindERS1_>:
    void bind(T& presenter)
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	683a      	ldr	r2, [r7, #0]
 800b79a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800b79c:	bf00      	nop
 800b79e:	370c      	adds	r7, #12
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <_ZN8touchgfx17AbstractPartition2atI12TestUartViewEERT_t>:
    T& at(const uint16_t index)
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	3324      	adds	r3, #36	; 0x24
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	887a      	ldrh	r2, [r7, #2]
 800b7be:	4611      	mov	r1, r2
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	4798      	blx	r3
 800b7c4:	4603      	mov	r3, r0
    }
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3708      	adds	r7, #8
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <_ZN8touchgfx17AbstractPartition2atI17TestUartPresenterEERT_t>:
    T& at(const uint16_t index)
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b082      	sub	sp, #8
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	3324      	adds	r3, #36	; 0x24
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	887a      	ldrh	r2, [r7, #2]
 800b7e4:	4611      	mov	r1, r2
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	4798      	blx	r3
 800b7ea:	4603      	mov	r3, r0
    }
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <_ZN8touchgfx4ViewI17TestUartPresenterE4bindERS1_>:
    void bind(T& presenter)
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	683a      	ldr	r2, [r7, #0]
 800b802:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800b804:	bf00      	nop
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <_ZN8touchgfx17AbstractPartition2atI14TestI2CSPIViewEERT_t>:
    T& at(const uint16_t index)
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	460b      	mov	r3, r1
 800b81a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	3324      	adds	r3, #36	; 0x24
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	887a      	ldrh	r2, [r7, #2]
 800b826:	4611      	mov	r1, r2
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	4798      	blx	r3
 800b82c:	4603      	mov	r3, r0
    }
 800b82e:	4618      	mov	r0, r3
 800b830:	3708      	adds	r7, #8
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}

0800b836 <_ZN8touchgfx17AbstractPartition2atI19TestI2CSPIPresenterEERT_t>:
    T& at(const uint16_t index)
 800b836:	b580      	push	{r7, lr}
 800b838:	b082      	sub	sp, #8
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
 800b83e:	460b      	mov	r3, r1
 800b840:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	3324      	adds	r3, #36	; 0x24
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	887a      	ldrh	r2, [r7, #2]
 800b84c:	4611      	mov	r1, r2
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	4798      	blx	r3
 800b852:	4603      	mov	r3, r0
    }
 800b854:	4618      	mov	r0, r3
 800b856:	3708      	adds	r7, #8
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <_ZN8touchgfx4ViewI19TestI2CSPIPresenterE4bindERS1_>:
    void bind(T& presenter)
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	683a      	ldr	r2, [r7, #0]
 800b86a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800b86c:	bf00      	nop
 800b86e:	370c      	adds	r7, #12
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr

0800b878 <_ZN8touchgfx17AbstractPartition2atI24TestOrientationVoileViewEERT_t>:
    T& at(const uint16_t index)
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	460b      	mov	r3, r1
 800b882:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	3324      	adds	r3, #36	; 0x24
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	887a      	ldrh	r2, [r7, #2]
 800b88e:	4611      	mov	r1, r2
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	4798      	blx	r3
 800b894:	4603      	mov	r3, r0
    }
 800b896:	4618      	mov	r0, r3
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <_ZN8touchgfx17AbstractPartition2atI29TestOrientationVoilePresenterEERT_t>:
    T& at(const uint16_t index)
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b082      	sub	sp, #8
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	3324      	adds	r3, #36	; 0x24
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	887a      	ldrh	r2, [r7, #2]
 800b8b4:	4611      	mov	r1, r2
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	4798      	blx	r3
 800b8ba:	4603      	mov	r3, r0
    }
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <_ZN8touchgfx4ViewI29TestOrientationVoilePresenterE4bindERS1_>:
    void bind(T& presenter)
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	683a      	ldr	r2, [r7, #0]
 800b8d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800b8d4:	bf00      	nop
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <_ZN8touchgfx17AbstractPartition2atI11TestADCViewEERT_t>:
    T& at(const uint16_t index)
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	3324      	adds	r3, #36	; 0x24
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	887a      	ldrh	r2, [r7, #2]
 800b8f6:	4611      	mov	r1, r2
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	4798      	blx	r3
 800b8fc:	4603      	mov	r3, r0
    }
 800b8fe:	4618      	mov	r0, r3
 800b900:	3708      	adds	r7, #8
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <_ZN8touchgfx17AbstractPartition2atI16TestADCPresenterEERT_t>:
    T& at(const uint16_t index)
 800b906:	b580      	push	{r7, lr}
 800b908:	b082      	sub	sp, #8
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
 800b90e:	460b      	mov	r3, r1
 800b910:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	3324      	adds	r3, #36	; 0x24
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	887a      	ldrh	r2, [r7, #2]
 800b91c:	4611      	mov	r1, r2
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	4798      	blx	r3
 800b922:	4603      	mov	r3, r0
    }
 800b924:	4618      	mov	r0, r3
 800b926:	3708      	adds	r7, #8
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <_ZN8touchgfx4ViewI16TestADCPresenterE4bindERS1_>:
    void bind(T& presenter)
 800b92c:	b480      	push	{r7}
 800b92e:	b083      	sub	sp, #12
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	683a      	ldr	r2, [r7, #0]
 800b93a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800b93c:	bf00      	nop
 800b93e:	370c      	adds	r7, #12
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <_ZN8touchgfx17AbstractPartition2atI15TestCompletViewEERT_t>:
    T& at(const uint16_t index)
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	460b      	mov	r3, r1
 800b952:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	3324      	adds	r3, #36	; 0x24
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	887a      	ldrh	r2, [r7, #2]
 800b95e:	4611      	mov	r1, r2
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	4798      	blx	r3
 800b964:	4603      	mov	r3, r0
    }
 800b966:	4618      	mov	r0, r3
 800b968:	3708      	adds	r7, #8
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <_ZN8touchgfx17AbstractPartition2atI20TestCompletPresenterEERT_t>:
    T& at(const uint16_t index)
 800b96e:	b580      	push	{r7, lr}
 800b970:	b082      	sub	sp, #8
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
 800b976:	460b      	mov	r3, r1
 800b978:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	3324      	adds	r3, #36	; 0x24
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	887a      	ldrh	r2, [r7, #2]
 800b984:	4611      	mov	r1, r2
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	4798      	blx	r3
 800b98a:	4603      	mov	r3, r0
    }
 800b98c:	4618      	mov	r0, r3
 800b98e:	3708      	adds	r7, #8
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <_ZN8touchgfx4ViewI20TestCompletPresenterE4bindERS1_>:
    void bind(T& presenter)
 800b994:	b480      	push	{r7}
 800b996:	b083      	sub	sp, #12
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	683a      	ldr	r2, [r7, #0]
 800b9a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800b9a4:	bf00      	nop
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <_ZN8touchgfx17AbstractPartition2atI17TestGirouetteViewEERT_t>:
    T& at(const uint16_t index)
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	3324      	adds	r3, #36	; 0x24
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	887a      	ldrh	r2, [r7, #2]
 800b9c6:	4611      	mov	r1, r2
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	4798      	blx	r3
 800b9cc:	4603      	mov	r3, r0
    }
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3708      	adds	r7, #8
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}

0800b9d6 <_ZN8touchgfx17AbstractPartition2atI22TestGirouettePresenterEERT_t>:
    T& at(const uint16_t index)
 800b9d6:	b580      	push	{r7, lr}
 800b9d8:	b082      	sub	sp, #8
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
 800b9de:	460b      	mov	r3, r1
 800b9e0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	3324      	adds	r3, #36	; 0x24
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	887a      	ldrh	r2, [r7, #2]
 800b9ec:	4611      	mov	r1, r2
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	4798      	blx	r3
 800b9f2:	4603      	mov	r3, r0
    }
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3708      	adds	r7, #8
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <_ZN8touchgfx4ViewI22TestGirouettePresenterE4bindERS1_>:
    void bind(T& presenter)
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	683a      	ldr	r2, [r7, #0]
 800ba0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800ba0c:	bf00      	nop
 800ba0e:	370c      	adds	r7, #12
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr

0800ba18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
     *
     *        Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba26:	683a      	ldr	r2, [r7, #0]
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d02a      	beq.n	800ba82 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        {
            return;
        }

        switch (direction)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ba32:	2b03      	cmp	r3, #3
 800ba34:	d820      	bhi.n	800ba78 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
 800ba36:	a201      	add	r2, pc, #4	; (adr r2, 800ba3c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 800ba38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba3c:	0800ba63 	.word	0x0800ba63
 800ba40:	0800ba63 	.word	0x0800ba63
 800ba44:	0800ba4d 	.word	0x0800ba4d
 800ba48:	0800ba4d 	.word	0x0800ba4d
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	3354      	adds	r3, #84	; 0x54
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	6838      	ldr	r0, [r7, #0]
 800ba5e:	4798      	blx	r3
            break;
 800ba60:	e010      	b.n	800ba84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	3354      	adds	r3, #84	; 0x54
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 800ba70:	2100      	movs	r1, #0
 800ba72:	6838      	ldr	r0, [r7, #0]
 800ba74:	4798      	blx	r3
            break;
 800ba76:	e005      	b.n	800ba84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	721a      	strb	r2, [r3, #8]
            break;
 800ba7e:	bf00      	nop
 800ba80:	e000      	b.n	800ba84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 800ba82:	bf00      	nop
        }
    }
 800ba84:	3708      	adds	r7, #8
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop

0800ba8c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	4a04      	ldr	r2, [pc, #16]	; (800baa8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	601a      	str	r2, [r3, #0]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	370c      	adds	r7, #12
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr
 800baa8:	08024a5c 	.word	0x08024a5c

0800baac <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	4639      	mov	r1, r7
 800bab8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	4618      	mov	r0, r3
 800bac0:	f7ff ffe4 	bl	800ba8c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800bac4:	4a08      	ldr	r2, [pc, #32]	; (800bae8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	68ba      	ldr	r2, [r7, #8]
 800bace:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	3308      	adds	r3, #8
 800bad4:	463a      	mov	r2, r7
 800bad6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bada:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	4618      	mov	r0, r3
 800bae2:	3710      	adds	r7, #16
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	08024a44 	.word	0x08024a44

0800baec <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 800baec:	b480      	push	{r7}
 800baee:	b083      	sub	sp, #12
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
    }
 800baf4:	4a04      	ldr	r2, [pc, #16]	; (800bb08 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	601a      	str	r2, [r3, #0]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4618      	mov	r0, r3
 800bafe:	370c      	adds	r7, #12
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr
 800bb08:	08024a5c 	.word	0x08024a5c

0800bb0c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
    }
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f7ff ffe9 	bl	800baec <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800bb1a:	2104      	movs	r1, #4
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f017 fa96 	bl	802304e <_ZdlPvj>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	4618      	mov	r0, r3
 800bb26:	3708      	adds	r7, #8
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b082      	sub	sp, #8
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	4a05      	ldr	r2, [pc, #20]	; (800bb4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	601a      	str	r2, [r3, #0]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7fe fa05 	bl	8009f4c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	4618      	mov	r0, r3
 800bb46:	3708      	adds	r7, #8
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	08024ad0 	.word	0x08024ad0

0800bb50 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b082      	sub	sp, #8
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f7ff ffe7 	bl	800bb2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800bb5e:	2110      	movs	r1, #16
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f017 fa74 	bl	802304e <_ZdlPvj>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3708      	adds	r7, #8
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
    virtual ~SlideTransition()
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
    }
 800bb78:	4a0a      	ldr	r2, [pc, #40]	; (800bba4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	601a      	str	r2, [r3, #0]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	333c      	adds	r3, #60	; 0x3c
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7ff fd26 	bl	800b5d4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	330c      	adds	r3, #12
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f009 fe7d 	bl	801588c <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7fe f981 	bl	8009e9c <_ZN8touchgfx10TransitionD1Ev>
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3708      	adds	r7, #8
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	08024a1c 	.word	0x08024a1c

0800bba8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
    virtual ~SlideTransition()
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
    }
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f7ff ffdd 	bl	800bb70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 800bbb6:	2154      	movs	r1, #84	; 0x54
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f017 fa48 	bl	802304e <_ZdlPvj>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3708      	adds	r7, #8
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 800bbd0:	4b59      	ldr	r3, [pc, #356]	; (800bd38 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x170>)
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	f083 0301 	eor.w	r3, r3, #1
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d003      	beq.n	800bbe6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	721a      	strb	r2, [r3, #8]
            return;
 800bbe4:	e0a5      	b.n	800bd32 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7fe f977 	bl	8009edc <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	b2da      	uxtb	r2, r3
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d82f      	bhi.n	800bc6e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800bc14:	b298      	uxth	r0, r3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	2100      	movs	r1, #0
 800bc26:	f00c fc85 	bl	8018534 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800bc3a:	b29b      	uxth	r3, r3
 800bc3c:	f003 0301 	and.w	r3, r3, #1
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d01b      	beq.n	800bc7e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 800bc54:	2a00      	cmp	r2, #0
 800bc56:	dd01      	ble.n	800bc5c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 800bc58:	2201      	movs	r2, #1
 800bc5a:	e001      	b.n	800bc60 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 800bc5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc60:	4413      	add	r3, r2
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	b21a      	sxth	r2, r3
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800bc6c:	e007      	b.n	800bc7e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2201      	movs	r2, #1
 800bc72:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2200      	movs	r2, #0
 800bc78:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 800bc7c:	e059      	b.n	800bd32 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        switch (direction)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800bc84:	2b03      	cmp	r3, #3
 800bc86:	d845      	bhi.n	800bd14 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x14c>
 800bc88:	a201      	add	r2, pc, #4	; (adr r2, 800bc90 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xc8>)
 800bc8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc8e:	bf00      	nop
 800bc90:	0800bcdb 	.word	0x0800bcdb
 800bc94:	0800bcdb 	.word	0x0800bcdb
 800bc98:	0800bca1 	.word	0x0800bca1
 800bc9c:	0800bca1 	.word	0x0800bca1
            calculatedValue -= snapshot.getX();
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	330c      	adds	r3, #12
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7fe f99e 	bl	8009fe6 <_ZNK8touchgfx8Drawable4getXEv>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	4619      	mov	r1, r3
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800bcb4:	b29a      	uxth	r2, r3
 800bcb6:	b28b      	uxth	r3, r1
 800bcb8:	1ad3      	subs	r3, r2, r3
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	b21a      	sxth	r2, r3
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f103 000c 	add.w	r0, r3, #12
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	f00b ff32 	bl	8017b3c <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800bcd8:	e020      	b.n	800bd1c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	330c      	adds	r3, #12
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7fe f98e 	bl	800a000 <_ZNK8touchgfx8Drawable4getYEv>
 800bce4:	4603      	mov	r3, r0
 800bce6:	4619      	mov	r1, r3
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800bcee:	b29a      	uxth	r2, r3
 800bcf0:	b28b      	uxth	r3, r1
 800bcf2:	1ad3      	subs	r3, r2, r3
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	b21a      	sxth	r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f103 000c 	add.w	r0, r3, #12
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	2100      	movs	r1, #0
 800bd0e:	f00b ff15 	bl	8017b3c <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800bd12:	e003      	b.n	800bd1c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            done = true;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2201      	movs	r2, #1
 800bd18:	721a      	strb	r2, [r3, #8]
            break;
 800bd1a:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6858      	ldr	r0, [r3, #4]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	3378      	adds	r3, #120	; 0x78
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	323c      	adds	r2, #60	; 0x3c
 800bd2e:	4611      	mov	r1, r2
 800bd30:	4798      	blx	r3
    }
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	2000b1ab 	.word	0x2000b1ab

0800bd3c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 800bd44:	4b0b      	ldr	r3, [pc, #44]	; (800bd74 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d00e      	beq.n	800bd6a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00a      	beq.n	800bd6a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6858      	ldr	r0, [r3, #4]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	3364      	adds	r3, #100	; 0x64
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	320c      	adds	r2, #12
 800bd66:	4611      	mov	r1, r2
 800bd68:	4798      	blx	r3
    }
 800bd6a:	bf00      	nop
 800bd6c:	3708      	adds	r7, #8
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	2000b1ab 	.word	0x2000b1ab

0800bd78 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b088      	sub	sp, #32
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 800bd80:	4b1a      	ldr	r3, [pc, #104]	; (800bdec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d02d      	beq.n	800bde4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7fe f8ba 	bl	8009f04 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800bd90:	4a17      	ldr	r2, [pc, #92]	; (800bdf0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 800bd92:	f107 0318 	add.w	r3, r7, #24
 800bd96:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bd9a:	e883 0003 	stmia.w	r3, {r0, r1}
 800bd9e:	f107 0008 	add.w	r0, r7, #8
 800bda2:	f107 0318 	add.w	r3, r7, #24
 800bda6:	cb0c      	ldmia	r3, {r2, r3}
 800bda8:	6879      	ldr	r1, [r7, #4]
 800bdaa:	f7ff fe7f 	bl	800baac <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	685a      	ldr	r2, [r3, #4]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	3378      	adds	r3, #120	; 0x78
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f107 0108 	add.w	r1, r7, #8
 800bdc0:	4610      	mov	r0, r2
 800bdc2:	4798      	blx	r3
            screenContainer->add(snapshot);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6858      	ldr	r0, [r3, #4]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	3360      	adds	r3, #96	; 0x60
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	320c      	adds	r2, #12
 800bdd6:	4611      	mov	r1, r2
 800bdd8:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800bdda:	f107 0308 	add.w	r3, r7, #8
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7ff fbf8 	bl	800b5d4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 800bde4:	bf00      	nop
 800bde6:	3720      	adds	r7, #32
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}
 800bdec:	2000b1ab 	.word	0x2000b1ab
 800bdf0:	080243f4 	.word	0x080243f4

0800bdf4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	6039      	str	r1, [r7, #0]
        switch (direction)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800be04:	2b03      	cmp	r3, #3
 800be06:	d83b      	bhi.n	800be80 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8c>
 800be08:	a201      	add	r2, pc, #4	; (adr r2, 800be10 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 800be0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be0e:	bf00      	nop
 800be10:	0800be51 	.word	0x0800be51
 800be14:	0800be6b 	.word	0x0800be6b
 800be18:	0800be21 	.word	0x0800be21
 800be1c:	0800be37 	.word	0x0800be37
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	3354      	adds	r3, #84	; 0x54
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4a18      	ldr	r2, [pc, #96]	; (800be8c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800be2a:	8812      	ldrh	r2, [r2, #0]
 800be2c:	b211      	sxth	r1, r2
 800be2e:	2200      	movs	r2, #0
 800be30:	6838      	ldr	r0, [r7, #0]
 800be32:	4798      	blx	r3
            break;
 800be34:	e025      	b.n	800be82 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	3354      	adds	r3, #84	; 0x54
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4a13      	ldr	r2, [pc, #76]	; (800be8c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800be40:	8812      	ldrh	r2, [r2, #0]
 800be42:	4252      	negs	r2, r2
 800be44:	b292      	uxth	r2, r2
 800be46:	b211      	sxth	r1, r2
 800be48:	2200      	movs	r2, #0
 800be4a:	6838      	ldr	r0, [r7, #0]
 800be4c:	4798      	blx	r3
            break;
 800be4e:	e018      	b.n	800be82 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	3354      	adds	r3, #84	; 0x54
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4a0d      	ldr	r2, [pc, #52]	; (800be90 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 800be5a:	8812      	ldrh	r2, [r2, #0]
 800be5c:	4252      	negs	r2, r2
 800be5e:	b292      	uxth	r2, r2
 800be60:	b212      	sxth	r2, r2
 800be62:	2100      	movs	r1, #0
 800be64:	6838      	ldr	r0, [r7, #0]
 800be66:	4798      	blx	r3
            break;
 800be68:	e00b      	b.n	800be82 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	3354      	adds	r3, #84	; 0x54
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a07      	ldr	r2, [pc, #28]	; (800be90 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 800be74:	8812      	ldrh	r2, [r2, #0]
 800be76:	b212      	sxth	r2, r2
 800be78:	2100      	movs	r1, #0
 800be7a:	6838      	ldr	r0, [r7, #0]
 800be7c:	4798      	blx	r3
            break;
 800be7e:	e000      	b.n	800be82 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 800be80:	bf00      	nop
    }
 800be82:	bf00      	nop
 800be84:	3708      	adds	r7, #8
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	2000b1a0 	.word	0x2000b1a0
 800be90:	2000b1a2 	.word	0x2000b1a2

0800be94 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	68d2      	ldr	r2, [r2, #12]
 800bea6:	1052      	asrs	r2, r2, #1
 800bea8:	1898      	adds	r0, r3, r2
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	68db      	ldr	r3, [r3, #12]
 800beae:	f003 0301 	and.w	r3, r3, #1
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d102      	bne.n	800bebc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	689b      	ldr	r3, [r3, #8]
 800beba:	e00a      	b.n	800bed2 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	687a      	ldr	r2, [r7, #4]
 800bec2:	68d2      	ldr	r2, [r2, #12]
 800bec4:	1052      	asrs	r2, r2, #1
 800bec6:	4413      	add	r3, r2
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	6892      	ldr	r2, [r2, #8]
 800bece:	4413      	add	r3, r2
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	6839      	ldr	r1, [r7, #0]
 800bed4:	4798      	blx	r3
    }
 800bed6:	bf00      	nop
 800bed8:	3708      	adds	r7, #8
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}

0800bede <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 800bede:	b480      	push	{r7}
 800bee0:	b083      	sub	sp, #12
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d010      	beq.n	800bf10 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d107      	bne.n	800bf06 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	f003 0301 	and.w	r3, r3, #1
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d101      	bne.n	800bf06 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800bf02:	2301      	movs	r3, #1
 800bf04:	e000      	b.n	800bf08 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 800bf06:	2300      	movs	r3, #0
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d001      	beq.n	800bf10 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	e000      	b.n	800bf12 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 800bf10:	2300      	movs	r3, #0
    }
 800bf12:	4618      	mov	r0, r3
 800bf14:	370c      	adds	r7, #12
 800bf16:	46bd      	mov	sp, r7
 800bf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1c:	4770      	bx	lr

0800bf1e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b082      	sub	sp, #8
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	68d2      	ldr	r2, [r2, #12]
 800bf2e:	1052      	asrs	r2, r2, #1
 800bf30:	1899      	adds	r1, r3, r2
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	68db      	ldr	r3, [r3, #12]
 800bf36:	f003 0301 	and.w	r3, r3, #1
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d102      	bne.n	800bf44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	689b      	ldr	r3, [r3, #8]
 800bf42:	e00a      	b.n	800bf5a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	68d2      	ldr	r2, [r2, #12]
 800bf4c:	1052      	asrs	r2, r2, #1
 800bf4e:	4413      	add	r3, r2
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	6892      	ldr	r2, [r2, #8]
 800bf56:	4413      	add	r3, r2
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4608      	mov	r0, r1
 800bf5c:	4798      	blx	r3
    }
 800bf5e:	bf00      	nop
 800bf60:	3708      	adds	r7, #8
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}

0800bf66 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800bf66:	b480      	push	{r7}
 800bf68:	b083      	sub	sp, #12
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d010      	beq.n	800bf98 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d107      	bne.n	800bf8e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	68db      	ldr	r3, [r3, #12]
 800bf82:	f003 0301 	and.w	r3, r3, #1
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d101      	bne.n	800bf8e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	e000      	b.n	800bf90 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800bf8e:	2300      	movs	r3, #0
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d001      	beq.n	800bf98 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800bf94:	2301      	movs	r3, #1
 800bf96:	e000      	b.n	800bf9a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800bf98:	2300      	movs	r3, #0
    }
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	370c      	adds	r7, #12
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr

0800bfa6 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 800bfa6:	b480      	push	{r7}
 800bfa8:	b083      	sub	sp, #12
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
 800bfae:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	683a      	ldr	r2, [r7, #0]
 800bfb4:	601a      	str	r2, [r3, #0]
    }
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4618      	mov	r0, r3
 800bfba:	370c      	adds	r7, #12
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	80da      	strh	r2, [r3, #6]
    }
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	370c      	adds	r7, #12
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr

0800bff2 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800bff2:	b480      	push	{r7}
 800bff4:	b085      	sub	sp, #20
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	60f8      	str	r0, [r7, #12]
 800bffa:	4608      	mov	r0, r1
 800bffc:	4611      	mov	r1, r2
 800bffe:	461a      	mov	r2, r3
 800c000:	4603      	mov	r3, r0
 800c002:	817b      	strh	r3, [r7, #10]
 800c004:	460b      	mov	r3, r1
 800c006:	813b      	strh	r3, [r7, #8]
 800c008:	4613      	mov	r3, r2
 800c00a:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	897a      	ldrh	r2, [r7, #10]
 800c010:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	893a      	ldrh	r2, [r7, #8]
 800c016:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	88fa      	ldrh	r2, [r7, #6]
 800c01c:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	8b3a      	ldrh	r2, [r7, #24]
 800c022:	80da      	strh	r2, [r3, #6]
    }
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	4618      	mov	r0, r3
 800c028:	3714      	adds	r7, #20
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr

0800c032 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 800c032:	b480      	push	{r7}
 800c034:	b083      	sub	sp, #12
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
 800c03a:	460b      	mov	r3, r1
 800c03c:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	887a      	ldrh	r2, [r7, #2]
 800c042:	801a      	strh	r2, [r3, #0]
    {
    }
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4618      	mov	r0, r3
 800c048:	370c      	adds	r7, #12
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr
	...

0800c054 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable() : rect(0, 0, 0, 0),
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af02      	add	r7, sp, #8
 800c05a:	6078      	str	r0, [r7, #4]
        visible(true)
 800c05c:	4a13      	ldr	r2, [pc, #76]	; (800c0ac <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	601a      	str	r2, [r3, #0]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	1d18      	adds	r0, r3, #4
 800c066:	2300      	movs	r3, #0
 800c068:	9300      	str	r3, [sp, #0]
 800c06a:	2300      	movs	r3, #0
 800c06c:	2200      	movs	r2, #0
 800c06e:	2100      	movs	r1, #0
 800c070:	f7ff ffbf 	bl	800bff2 <_ZN8touchgfx4RectC1Essss>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	330c      	adds	r3, #12
 800c078:	4618      	mov	r0, r3
 800c07a:	f7ff ffa3 	bl	800bfc4 <_ZN8touchgfx4RectC1Ev>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2200      	movs	r2, #0
 800c082:	615a      	str	r2, [r3, #20]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	619a      	str	r2, [r3, #24]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	61da      	str	r2, [r3, #28]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2201      	movs	r2, #1
 800c09c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3708      	adds	r7, #8
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	08028440 	.word	0x08028440

0800c0b0 <_ZN8touchgfx8DrawableD1Ev>:
    virtual ~Drawable() { }
 800c0b0:	b480      	push	{r7}
 800c0b2:	b083      	sub	sp, #12
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	4a04      	ldr	r2, [pc, #16]	; (800c0cc <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	601a      	str	r2, [r3, #0]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr
 800c0cc:	08028440 	.word	0x08028440

0800c0d0 <_ZN8touchgfx8DrawableD0Ev>:
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f7ff ffe9 	bl	800c0b0 <_ZN8touchgfx8DrawableD1Ev>
 800c0de:	2128      	movs	r1, #40	; 0x28
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f016 ffb4 	bl	802304e <_ZdlPvj>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	887a      	ldrh	r2, [r7, #2]
 800c100:	809a      	strh	r2, [r3, #4]
    }
 800c102:	bf00      	nop
 800c104:	370c      	adds	r7, #12
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr

0800c10e <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 800c10e:	b480      	push	{r7}
 800c110:	b083      	sub	sp, #12
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
 800c116:	460b      	mov	r3, r1
 800c118:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	887a      	ldrh	r2, [r7, #2]
 800c11e:	80da      	strh	r2, [r3, #6]
    }
 800c120:	bf00      	nop
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr

0800c12c <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	460b      	mov	r3, r1
 800c136:	807b      	strh	r3, [r7, #2]
 800c138:	4613      	mov	r3, r2
 800c13a:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	332c      	adds	r3, #44	; 0x2c
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c148:	4611      	mov	r1, r2
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	4798      	blx	r3
        setY(y);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	3330      	adds	r3, #48	; 0x30
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c15a:	4611      	mov	r1, r2
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	4798      	blx	r3
    }
 800c160:	bf00      	nop
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 800c168:	b480      	push	{r7}
 800c16a:	b083      	sub	sp, #12
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	460b      	mov	r3, r1
 800c172:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	887a      	ldrh	r2, [r7, #2]
 800c178:	811a      	strh	r2, [r3, #8]
    }
 800c17a:	bf00      	nop
 800c17c:	370c      	adds	r7, #12
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr

0800c186 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 800c186:	b480      	push	{r7}
 800c188:	b083      	sub	sp, #12
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
 800c18e:	460b      	mov	r3, r1
 800c190:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	887a      	ldrh	r2, [r7, #2]
 800c196:	815a      	strh	r2, [r3, #10]
    }
 800c198:	bf00      	nop
 800c19a:	370c      	adds	r7, #12
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 800c1a4:	b480      	push	{r7}
 800c1a6:	b083      	sub	sp, #12
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	bf00      	nop
 800c1ae:	370c      	adds	r7, #12
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b6:	4770      	bx	lr

0800c1b8 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 800c1b8:	b480      	push	{r7}
 800c1ba:	b083      	sub	sp, #12
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
 800c1c2:	bf00      	nop
 800c1c4:	370c      	adds	r7, #12
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr

0800c1ce <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 800c1ce:	b480      	push	{r7}
 800c1d0:	b083      	sub	sp, #12
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
 800c1d6:	6039      	str	r1, [r7, #0]
 800c1d8:	bf00      	nop
 800c1da:	370c      	adds	r7, #12
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr

0800c1e4 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 800c1e4:	b480      	push	{r7}
 800c1e6:	b083      	sub	sp, #12
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
 800c1ee:	bf00      	nop
 800c1f0:	370c      	adds	r7, #12
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr

0800c1fa <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 800c1fa:	b480      	push	{r7}
 800c1fc:	b083      	sub	sp, #12
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
 800c202:	bf00      	nop
 800c204:	370c      	adds	r7, #12
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr

0800c20e <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800c20e:	b480      	push	{r7}
 800c210:	b083      	sub	sp, #12
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800c21c:	4618      	mov	r0, r3
 800c21e:	370c      	adds	r7, #12
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr

0800c228 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800c228:	b480      	push	{r7}
 800c22a:	b083      	sub	sp, #12
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800c236:	4618      	mov	r0, r3
 800c238:	370c      	adds	r7, #12
 800c23a:	46bd      	mov	sp, r7
 800c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c240:	4770      	bx	lr

0800c242 <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800c242:	b580      	push	{r7, lr}
 800c244:	b082      	sub	sp, #8
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]
 800c24a:	460b      	mov	r3, r1
 800c24c:	807b      	strh	r3, [r7, #2]
 800c24e:	4613      	mov	r3, r2
 800c250:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	3354      	adds	r3, #84	; 0x54
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	8879      	ldrh	r1, [r7, #2]
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800c262:	b292      	uxth	r2, r2
 800c264:	1a8a      	subs	r2, r1, r2
 800c266:	b292      	uxth	r2, r2
 800c268:	b210      	sxth	r0, r2
 800c26a:	8839      	ldrh	r1, [r7, #0]
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800c272:	b292      	uxth	r2, r2
 800c274:	1a8a      	subs	r2, r1, r2
 800c276:	b292      	uxth	r2, r2
 800c278:	b212      	sxth	r2, r2
 800c27a:	4601      	mov	r1, r0
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	4798      	blx	r3
    }
 800c280:	bf00      	nop
 800c282:	3708      	adds	r7, #8
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800c288:	b480      	push	{r7}
 800c28a:	b083      	sub	sp, #12
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c296:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c29e:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c2a6:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800c2a8:	bf00      	nop
 800c2aa:	370c      	adds	r7, #12
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr

0800c2b4 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800c2c0:	68f8      	ldr	r0, [r7, #12]
 800c2c2:	f7ff ffe1 	bl	800c288 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681a      	ldr	r2, [r3, #0]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	68fa      	ldr	r2, [r7, #12]
 800c2d2:	601a      	str	r2, [r3, #0]
    }
 800c2d4:	bf00      	nop
 800c2d6:	3710      	adds	r7, #16
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <_ZN8touchgfx9ContainerC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Container() : Drawable(),
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
        firstChild(0)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7ff feb4 	bl	800c054 <_ZN8touchgfx8DrawableC1Ev>
 800c2ec:	4a05      	ldr	r2, [pc, #20]	; (800c304 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	601a      	str	r2, [r3, #0]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3708      	adds	r7, #8
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	08026c84 	.word	0x08026c84

0800c308 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 800c308:	b580      	push	{r7, lr}
 800c30a:	b082      	sub	sp, #8
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	4a05      	ldr	r2, [pc, #20]	; (800c328 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	601a      	str	r2, [r3, #0]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	4618      	mov	r0, r3
 800c31a:	f7ff fec9 	bl	800c0b0 <_ZN8touchgfx8DrawableD1Ev>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	4618      	mov	r0, r3
 800c322:	3708      	adds	r7, #8
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}
 800c328:	08026c84 	.word	0x08026c84

0800c32c <_ZN8touchgfx9ContainerD0Ev>:
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f7ff ffe7 	bl	800c308 <_ZN8touchgfx9ContainerD1Ev>
 800c33a:	212c      	movs	r1, #44	; 0x2c
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f016 fe86 	bl	802304e <_ZdlPvj>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4618      	mov	r0, r3
 800c346:	3708      	adds	r7, #8
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	4618      	mov	r0, r3
 800c358:	f7ff fe7c 	bl	800c054 <_ZN8touchgfx8DrawableC1Ev>
 800c35c:	4a03      	ldr	r2, [pc, #12]	; (800c36c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	601a      	str	r2, [r3, #0]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	4618      	mov	r0, r3
 800c366:	3708      	adds	r7, #8
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	080255c4 	.word	0x080255c4

0800c370 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 800c370:	b580      	push	{r7, lr}
 800c372:	b082      	sub	sp, #8
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	4a05      	ldr	r2, [pc, #20]	; (800c390 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	601a      	str	r2, [r3, #0]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	4618      	mov	r0, r3
 800c382:	f7ff fe95 	bl	800c0b0 <_ZN8touchgfx8DrawableD1Ev>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	4618      	mov	r0, r3
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	080255c4 	.word	0x080255c4

0800c394 <_ZN8touchgfx6WidgetD0Ev>:
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f7ff ffe7 	bl	800c370 <_ZN8touchgfx6WidgetD1Ev>
 800c3a2:	2128      	movs	r1, #40	; 0x28
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f016 fe52 	bl	802304e <_ZdlPvj>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3708      	adds	r7, #8
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	607b      	str	r3, [r7, #4]
 800c3be:	460b      	mov	r3, r1
 800c3c0:	817b      	strh	r3, [r7, #10]
 800c3c2:	4613      	mov	r3, r2
 800c3c4:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f7ff ff20 	bl	800c20e <_ZNK8touchgfx8Drawable9isVisibleEv>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d008      	beq.n	800c3e6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7ff ff26 	bl	800c228 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d001      	beq.n	800c3e6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	e000      	b.n	800c3e8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d002      	beq.n	800c3f2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	601a      	str	r2, [r3, #0]
        }
    }
 800c3f2:	bf00      	nop
 800c3f4:	3710      	adds	r7, #16
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
	...

0800c3fc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	4618      	mov	r0, r3
 800c40a:	f7ff ff9f 	bl	800c34c <_ZN8touchgfx6WidgetC1Ev>
 800c40e:	4a0b      	ldr	r2, [pc, #44]	; (800c43c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	601a      	str	r2, [r3, #0]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	3326      	adds	r3, #38	; 0x26
 800c418:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7ff fe08 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	22ff      	movs	r2, #255	; 0xff
 800c426:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 800c42a:	6839      	ldr	r1, [r7, #0]
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f009 fdeb 	bl	8016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	4618      	mov	r0, r3
 800c436:	3708      	adds	r7, #8
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	08028040 	.word	0x08028040

0800c440 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 800c440:	b480      	push	{r7}
 800c442:	b083      	sub	sp, #12
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	460b      	mov	r3, r1
 800c44a:	807b      	strh	r3, [r7, #2]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	887a      	ldrh	r2, [r7, #2]
 800c450:	801a      	strh	r2, [r3, #0]
    }
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	4618      	mov	r0, r3
 800c456:	370c      	adds	r7, #12
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr

0800c460 <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 800c460:	b580      	push	{r7, lr}
 800c462:	b082      	sub	sp, #8
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
        assertValid();
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f7fd fa73 	bl	8009954 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 800c46e:	4b06      	ldr	r3, [pc, #24]	; (800c488 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	881b      	ldrh	r3, [r3, #0]
 800c476:	4619      	mov	r1, r3
 800c478:	4610      	mov	r0, r2
 800c47a:	f003 fa3d 	bl	800f8f8 <_ZNK8touchgfx5Texts7getTextEt>
 800c47e:	4603      	mov	r3, r0
    }
 800c480:	4618      	mov	r0, r3
 800c482:	3708      	adds	r7, #8
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	2000b248 	.word	0x2000b248

0800c48c <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	4618      	mov	r0, r3
 800c498:	f7ff ff58 	bl	800c34c <_ZN8touchgfx6WidgetC1Ev>
 800c49c:	4a13      	ldr	r2, [pc, #76]	; (800c4ec <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	601a      	str	r2, [r3, #0]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	3326      	adds	r3, #38	; 0x26
 800c4a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7ff ffc8 	bl	800c440 <_ZN8touchgfx9TypedTextC1Et>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	3328      	adds	r3, #40	; 0x28
 800c4b4:	2100      	movs	r1, #0
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7ff fd75 	bl	800bfa6 <_ZN8touchgfx9colortypeC1Em>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	859a      	strh	r2, [r3, #44]	; 0x2c
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	22ff      	movs	r2, #255	; 0xff
 800c4c6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3708      	adds	r7, #8
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	08027d98 	.word	0x08027d98

0800c4f0 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b084      	sub	sp, #16
 800c4f4:	af02      	add	r7, sp, #8
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	9300      	str	r3, [sp, #0]
 800c4fe:	2300      	movs	r3, #0
 800c500:	2200      	movs	r2, #0
 800c502:	2100      	movs	r1, #0
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f7ff fd74 	bl	800bff2 <_ZN8touchgfx4RectC1Essss>
    }
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	3708      	adds	r7, #8
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}

0800c512 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 800c512:	b480      	push	{r7}
 800c514:	b083      	sub	sp, #12
 800c516:	af00      	add	r7, sp, #0
 800c518:	6078      	str	r0, [r7, #4]
 800c51a:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	683a      	ldr	r2, [r7, #0]
 800c520:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800c522:	bf00      	nop
 800c524:	370c      	adds	r7, #12
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr

0800c52e <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800c52e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c530:	b085      	sub	sp, #20
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
 800c536:	460b      	mov	r3, r1
 800c538:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800c53a:	687e      	ldr	r6, [r7, #4]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	3330      	adds	r3, #48	; 0x30
 800c542:	681c      	ldr	r4, [r3, #0]
 800c544:	887d      	ldrh	r5, [r7, #2]
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 f845 	bl	800c5d6 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800c54c:	4603      	mov	r3, r0
 800c54e:	81bb      	strh	r3, [r7, #12]
 800c550:	f107 030c 	add.w	r3, r7, #12
 800c554:	4618      	mov	r0, r3
 800c556:	f7fd f9c9 	bl	80098ec <_ZNK8touchgfx9TypedText7getFontEv>
 800c55a:	4602      	mov	r2, r0
 800c55c:	6813      	ldr	r3, [r2, #0]
 800c55e:	332c      	adds	r3, #44	; 0x2c
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4610      	mov	r0, r2
 800c564:	4798      	blx	r3
 800c566:	4603      	mov	r3, r0
 800c568:	1aeb      	subs	r3, r5, r3
 800c56a:	b29b      	uxth	r3, r3
 800c56c:	b21b      	sxth	r3, r3
 800c56e:	4619      	mov	r1, r3
 800c570:	4630      	mov	r0, r6
 800c572:	47a0      	blx	r4
    }
 800c574:	bf00      	nop
 800c576:	3714      	adds	r7, #20
 800c578:	46bd      	mov	sp, r7
 800c57a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c57c <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	460b      	mov	r3, r1
 800c586:	807b      	strh	r3, [r7, #2]
 800c588:	4613      	mov	r3, r2
 800c58a:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	332c      	adds	r3, #44	; 0x2c
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800c59a:	4610      	mov	r0, r2
 800c59c:	4798      	blx	r3
        setBaselineY(baselineY);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	3360      	adds	r3, #96	; 0x60
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c5aa:	4611      	mov	r1, r2
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	4798      	blx	r3
    }
 800c5b0:	bf00      	nop
 800c5b2:	3708      	adds	r7, #8
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	887a      	ldrh	r2, [r7, #2]
 800c5c8:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 800c5ca:	bf00      	nop
 800c5cc:	370c      	adds	r7, #12
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr

0800c5d6 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 800c5d6:	b480      	push	{r7}
 800c5d8:	b083      	sub	sp, #12
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	370c      	adds	r7, #12
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr
	...

0800c5f0 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b082      	sub	sp, #8
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	4a05      	ldr	r2, [pc, #20]	; (800c610 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	601a      	str	r2, [r3, #0]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	4618      	mov	r0, r3
 800c602:	f7ff feb5 	bl	800c370 <_ZN8touchgfx6WidgetD1Ev>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	4618      	mov	r0, r3
 800c60a:	3708      	adds	r7, #8
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	08027d98 	.word	0x08027d98

0800c614 <_ZN8touchgfx8TextAreaD0Ev>:
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f7ff ffe7 	bl	800c5f0 <_ZN8touchgfx8TextAreaD1Ev>
 800c622:	2134      	movs	r1, #52	; 0x34
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f016 fd12 	bl	802304e <_ZdlPvj>
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	4618      	mov	r0, r3
 800c62e:	3708      	adds	r7, #8
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 800c634:	b580      	push	{r7, lr}
 800c636:	b082      	sub	sp, #8
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
        : TextArea()
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	4618      	mov	r0, r3
 800c640:	f7ff ff24 	bl	800c48c <_ZN8touchgfx8TextAreaC1Ev>
 800c644:	4a03      	ldr	r2, [pc, #12]	; (800c654 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	601a      	str	r2, [r3, #0]
    {
    }
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	4618      	mov	r0, r3
 800c64e:	3708      	adds	r7, #8
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	08025548 	.word	0x08025548

0800c658 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	4a05      	ldr	r2, [pc, #20]	; (800c678 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	601a      	str	r2, [r3, #0]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	4618      	mov	r0, r3
 800c66a:	f7ff ffc1 	bl	800c5f0 <_ZN8touchgfx8TextAreaD1Ev>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4618      	mov	r0, r3
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	08025548 	.word	0x08025548

0800c67c <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f7ff ffe7 	bl	800c658 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800c68a:	2134      	movs	r1, #52	; 0x34
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f016 fcde 	bl	802304e <_ZdlPvj>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	4618      	mov	r0, r3
 800c696:	3708      	adds	r7, #8
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7ff ffc4 	bl	800c634 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800c6ac:	4a05      	ldr	r2, [pc, #20]	; (800c6c4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	601a      	str	r2, [r3, #0]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3708      	adds	r7, #8
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	08027f1c 	.word	0x08027f1c

0800c6c8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800c6c8:	b480      	push	{r7}
 800c6ca:	b083      	sub	sp, #12
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	683a      	ldr	r2, [r7, #0]
 800c6d6:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800c6d8:	bf00      	nop
 800c6da:	370c      	adds	r7, #12
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr

0800c6e4 <_ZN17MenuContainerBaseD1Ev>:

class MenuContainerBase : public touchgfx::Container
{
public:
    MenuContainerBase();
    virtual ~MenuContainerBase() {}
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b082      	sub	sp, #8
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	4a0a      	ldr	r2, [pc, #40]	; (800c718 <_ZN17MenuContainerBaseD1Ev+0x34>)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	601a      	str	r2, [r3, #0]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	3358      	adds	r3, #88	; 0x58
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f000 f914 	bl	800c924 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	332c      	adds	r3, #44	; 0x2c
 800c700:	4618      	mov	r0, r3
 800c702:	f000 f8ed 	bl	800c8e0 <_ZN8touchgfx5ImageD1Ev>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4618      	mov	r0, r3
 800c70a:	f7ff fdfd 	bl	800c308 <_ZN8touchgfx9ContainerD1Ev>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	4618      	mov	r0, r3
 800c712:	3708      	adds	r7, #8
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	080254b8 	.word	0x080254b8

0800c71c <_ZN17MenuContainerBaseD0Ev>:
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f7ff ffdd 	bl	800c6e4 <_ZN17MenuContainerBaseD1Ev>
 800c72a:	21e0      	movs	r1, #224	; 0xe0
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f016 fc8e 	bl	802304e <_ZdlPvj>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	4618      	mov	r0, r3
 800c736:	3708      	adds	r7, #8
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 800c73c:	b590      	push	{r4, r7, lr}
 800c73e:	b083      	sub	sp, #12
 800c740:	af00      	add	r7, sp, #0
 800c742:	4603      	mov	r3, r0
 800c744:	71fb      	strb	r3, [r7, #7]
 800c746:	460b      	mov	r3, r1
 800c748:	71bb      	strb	r3, [r7, #6]
 800c74a:	4613      	mov	r3, r2
 800c74c:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800c74e:	f7fd fc65 	bl	800a01c <_ZN8touchgfx3HAL11getInstanceEv>
 800c752:	4603      	mov	r3, r0
 800c754:	2b00      	cmp	r3, #0
 800c756:	d105      	bne.n	800c764 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 800c758:	4b0a      	ldr	r3, [pc, #40]	; (800c784 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 800c75a:	4a0b      	ldr	r2, [pc, #44]	; (800c788 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 800c75c:	2138      	movs	r1, #56	; 0x38
 800c75e:	480b      	ldr	r0, [pc, #44]	; (800c78c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 800c760:	f016 fca0 	bl	80230a4 <__assert_func>
 800c764:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 800c766:	f7fd fc65 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 800c76a:	6803      	ldr	r3, [r0, #0]
 800c76c:	332c      	adds	r3, #44	; 0x2c
 800c76e:	681c      	ldr	r4, [r3, #0]
 800c770:	797b      	ldrb	r3, [r7, #5]
 800c772:	79ba      	ldrb	r2, [r7, #6]
 800c774:	79f9      	ldrb	r1, [r7, #7]
 800c776:	47a0      	blx	r4
 800c778:	4603      	mov	r3, r0
    }
 800c77a:	4618      	mov	r0, r3
 800c77c:	370c      	adds	r7, #12
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd90      	pop	{r4, r7, pc}
 800c782:	bf00      	nop
 800c784:	080244d8 	.word	0x080244d8
 800c788:	08025624 	.word	0x08025624
 800c78c:	0802451c 	.word	0x0802451c

0800c790 <_ZN17MenuContainerBaseC1Ev>:
#include <gui_generated/containers/MenuContainerBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

MenuContainerBase::MenuContainerBase()
 800c790:	b590      	push	{r4, r7, lr}
 800c792:	b089      	sub	sp, #36	; 0x24
 800c794:	af02      	add	r7, sp, #8
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7ff fd9e 	bl	800c2dc <_ZN8touchgfx9ContainerC1Ev>
 800c7a0:	4a48      	ldr	r2, [pc, #288]	; (800c8c4 <_ZN17MenuContainerBaseC1Ev+0x134>)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	601a      	str	r2, [r3, #0]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c7ac:	f107 0308 	add.w	r3, r7, #8
 800c7b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7ff fc3c 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800c7ba:	f107 0308 	add.w	r3, r7, #8
 800c7be:	4619      	mov	r1, r3
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	f7ff fe1b 	bl	800c3fc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	3358      	adds	r3, #88	; 0x58
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7ff ff66 	bl	800c69c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{
    setWidth(120);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2178      	movs	r1, #120	; 0x78
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f7ff fcc7 	bl	800c168 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(88);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2158      	movs	r1, #88	; 0x58
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7ff fcd1 	bl	800c186 <_ZN8touchgfx8Drawable9setHeightEs>
    image.setXY(36, 2);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	332c      	adds	r3, #44	; 0x2c
 800c7e8:	2202      	movs	r2, #2
 800c7ea:	2124      	movs	r1, #36	; 0x24
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7ff fc9d 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    image.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_COMPASS_48_ID));
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c7f8:	f107 030c 	add.w	r3, r7, #12
 800c7fc:	210d      	movs	r1, #13
 800c7fe:	4618      	mov	r0, r3
 800c800:	f7ff fc17 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800c804:	f107 030c 	add.w	r3, r7, #12
 800c808:	4619      	mov	r1, r3
 800c80a:	4620      	mov	r0, r4
 800c80c:	f009 fbfc 	bl	8016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textArea.setPosition(0, 50, 120, 38);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800c816:	2326      	movs	r3, #38	; 0x26
 800c818:	9300      	str	r3, [sp, #0]
 800c81a:	2378      	movs	r3, #120	; 0x78
 800c81c:	2232      	movs	r2, #50	; 0x32
 800c81e:	2100      	movs	r1, #0
 800c820:	f7fd fbb4 	bl	8009f8c <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f103 0458 	add.w	r4, r3, #88	; 0x58
 800c82a:	2200      	movs	r2, #0
 800c82c:	2100      	movs	r1, #0
 800c82e:	2000      	movs	r0, #0
 800c830:	f7ff ff84 	bl	800c73c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800c834:	4603      	mov	r3, r0
 800c836:	4619      	mov	r1, r3
 800c838:	4620      	mov	r0, r4
 800c83a:	f7ff fe6a 	bl	800c512 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea.setLinespacing(0);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	3358      	adds	r3, #88	; 0x58
 800c842:	2100      	movs	r1, #0
 800c844:	4618      	mov	r0, r3
 800c846:	f7ff feb7 	bl	800c5b8 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(textAreaBuffer, TEXTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID9).getText());
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f103 0490 	add.w	r4, r3, #144	; 0x90
 800c850:	f107 0310 	add.w	r3, r7, #16
 800c854:	2104      	movs	r1, #4
 800c856:	4618      	mov	r0, r3
 800c858:	f7ff fdf2 	bl	800c440 <_ZN8touchgfx9TypedTextC1Et>
 800c85c:	f107 0310 	add.w	r3, r7, #16
 800c860:	4618      	mov	r0, r3
 800c862:	f7ff fdfd 	bl	800c460 <_ZNK8touchgfx9TypedText7getTextEv>
 800c866:	4603      	mov	r3, r0
 800c868:	4a17      	ldr	r2, [pc, #92]	; (800c8c8 <_ZN17MenuContainerBaseC1Ev+0x138>)
 800c86a:	2128      	movs	r1, #40	; 0x28
 800c86c:	4620      	mov	r0, r4
 800c86e:	f00c fdf3 	bl	8019458 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea.setWildcard(textAreaBuffer);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	3390      	adds	r3, #144	; 0x90
 800c87c:	4619      	mov	r1, r3
 800c87e:	4610      	mov	r0, r2
 800c880:	f7ff ff22 	bl	800c6c8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f103 0458 	add.w	r4, r3, #88	; 0x58
 800c88a:	f107 0314 	add.w	r3, r7, #20
 800c88e:	2103      	movs	r1, #3
 800c890:	4618      	mov	r0, r3
 800c892:	f7ff fdd5 	bl	800c440 <_ZN8touchgfx9TypedTextC1Et>
 800c896:	8ab9      	ldrh	r1, [r7, #20]
 800c898:	4620      	mov	r0, r4
 800c89a:	f009 f9a1 	bl	8015be0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(image);
 800c89e:	687a      	ldr	r2, [r7, #4]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	332c      	adds	r3, #44	; 0x2c
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	4610      	mov	r0, r2
 800c8a8:	f006 fea4 	bl	80135f4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(textArea);
 800c8ac:	687a      	ldr	r2, [r7, #4]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	3358      	adds	r3, #88	; 0x58
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	4610      	mov	r0, r2
 800c8b6:	f006 fe9d 	bl	80135f4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	4618      	mov	r0, r3
 800c8be:	371c      	adds	r7, #28
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd90      	pop	{r4, r7, pc}
 800c8c4:	080254b8 	.word	0x080254b8
 800c8c8:	0802455c 	.word	0x0802455c

0800c8cc <_ZN17MenuContainerBase10initializeEv>:

void MenuContainerBase::initialize()
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]

}
 800c8d4:	bf00      	nop
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	4a05      	ldr	r2, [pc, #20]	; (800c900 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	601a      	str	r2, [r3, #0]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f7ff fd3d 	bl	800c370 <_ZN8touchgfx6WidgetD1Ev>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3708      	adds	r7, #8
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}
 800c900:	08028040 	.word	0x08028040

0800c904 <_ZN8touchgfx5ImageD0Ev>:
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f7ff ffe7 	bl	800c8e0 <_ZN8touchgfx5ImageD1Ev>
 800c912:	212c      	movs	r1, #44	; 0x2c
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f016 fb9a 	bl	802304e <_ZdlPvj>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	4618      	mov	r0, r3
 800c91e:	3708      	adds	r7, #8
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	4a05      	ldr	r2, [pc, #20]	; (800c944 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	601a      	str	r2, [r3, #0]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	4618      	mov	r0, r3
 800c936:	f7ff fe8f 	bl	800c658 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	4618      	mov	r0, r3
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	08027f1c 	.word	0x08027f1c

0800c948 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f7ff ffe7 	bl	800c924 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800c956:	2138      	movs	r1, #56	; 0x38
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f016 fb78 	bl	802304e <_ZdlPvj>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	4618      	mov	r0, r3
 800c962:	3708      	adds	r7, #8
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	4a06      	ldr	r2, [pc, #24]	; (800c98c <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	601a      	str	r2, [r3, #0]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	3304      	adds	r3, #4
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7ff fcc4 	bl	800c308 <_ZN8touchgfx9ContainerD1Ev>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	4618      	mov	r0, r3
 800c984:	3708      	adds	r7, #8
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	bf00      	nop
 800c98c:	08028538 	.word	0x08028538

0800c990 <_ZN8touchgfx6ScreenD0Ev>:
 800c990:	b580      	push	{r7, lr}
 800c992:	b082      	sub	sp, #8
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f7ff ffe5 	bl	800c968 <_ZN8touchgfx6ScreenD1Ev>
 800c99e:	213c      	movs	r1, #60	; 0x3c
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f016 fb54 	bl	802304e <_ZdlPvj>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3708      	adds	r7, #8
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 800c9b0:	b480      	push	{r7}
 800c9b2:	b083      	sub	sp, #12
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
 800c9b8:	bf00      	nop
 800c9ba:	370c      	adds	r7, #12
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c2:	4770      	bx	lr

0800c9c4 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	bf00      	nop
 800c9ce:	370c      	adds	r7, #12
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 800c9d8:	b480      	push	{r7}
 800c9da:	b083      	sub	sp, #12
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	bf00      	nop
 800c9e2:	370c      	adds	r7, #12
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
    {
    }
 800c9f4:	bf00      	nop
 800c9f6:	370c      	adds	r7, #12
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr

0800ca00 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800ca00:	b480      	push	{r7}
 800ca02:	b083      	sub	sp, #12
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	460b      	mov	r3, r1
 800ca0a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800ca0c:	bf00      	nop
 800ca0e:	370c      	adds	r7, #12
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr

0800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	3304      	adds	r3, #4
 800ca26:	6839      	ldr	r1, [r7, #0]
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f006 fde3 	bl	80135f4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800ca2e:	bf00      	nop
 800ca30:	3708      	adds	r7, #8
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}
	...

0800ca38 <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destuctor.
     */
    virtual ~DrawableListItemsInterface()
 800ca38:	b480      	push	{r7}
 800ca3a:	b083      	sub	sp, #12
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
    {
 800ca40:	4a04      	ldr	r2, [pc, #16]	; (800ca54 <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev+0x1c>)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	601a      	str	r2, [r3, #0]
    }
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	4618      	mov	r0, r3
 800ca4a:	370c      	adds	r7, #12
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr
 800ca54:	08025770 	.word	0x08025770

0800ca58 <_ZN8touchgfx26DrawableListItemsInterfaceD0Ev>:
    virtual ~DrawableListItemsInterface()
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
    }
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f7ff ffe9 	bl	800ca38 <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev>
 800ca66:	2104      	movs	r1, #4
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f016 faf0 	bl	802304e <_ZdlPvj>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	4618      	mov	r0, r3
 800ca72:	3708      	adds	r7, #8
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <_ZN8touchgfx10ScrollBase10initializeEv>:
     *
     * @brief Initializes the contents of all drawables.
     *
     *        Initializes the contents of all drawables.
     */
    virtual void initialize()
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
    {
        list.refreshDrawables();
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	332c      	adds	r3, #44	; 0x2c
 800ca84:	4618      	mov	r0, r3
 800ca86:	f006 f8a0 	bl	8012bca <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
    }
 800ca8a:	bf00      	nop
 800ca8c:	3708      	adds	r7, #8
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the AbstractButton.
     *
     * @see GenericCallback
     */
    void setAction(GenericCallback< const AbstractButton& >& callback)
 800ca92:	b480      	push	{r7}
 800ca94:	b083      	sub	sp, #12
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
 800ca9a:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	683a      	ldr	r2, [r7, #0]
 800caa0:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800caa2:	bf00      	nop
 800caa4:	370c      	adds	r7, #12
 800caa6:	46bd      	mov	sp, r7
 800caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caac:	4770      	bx	lr
	...

0800cab0 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b082      	sub	sp, #8
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	4a05      	ldr	r2, [pc, #20]	; (800cad0 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	601a      	str	r2, [r3, #0]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7ff fc55 	bl	800c370 <_ZN8touchgfx6WidgetD1Ev>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	4618      	mov	r0, r3
 800caca:	3708      	adds	r7, #8
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	08027cbc 	.word	0x08027cbc

0800cad4 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f7ff ffe7 	bl	800cab0 <_ZN8touchgfx14AbstractButtonD1Ev>
 800cae2:	2130      	movs	r1, #48	; 0x30
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f016 fab2 	bl	802304e <_ZdlPvj>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	4618      	mov	r0, r3
 800caee:	3708      	adds	r7, #8
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <_ZN8touchgfx6ButtonD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Button() { }
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	4a05      	ldr	r2, [pc, #20]	; (800cb14 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	601a      	str	r2, [r3, #0]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7ff ffd3 	bl	800cab0 <_ZN8touchgfx14AbstractButtonD1Ev>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3708      	adds	r7, #8
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}
 800cb14:	08027e78 	.word	0x08027e78

0800cb18 <_ZN8touchgfx6ButtonD0Ev>:
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f7ff ffe7 	bl	800caf4 <_ZN8touchgfx6ButtonD1Ev>
 800cb26:	2134      	movs	r1, #52	; 0x34
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f016 fa90 	bl	802304e <_ZdlPvj>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	4618      	mov	r0, r3
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>:
     * @note Changing this does not automatically yield a redraw.
     * @note The value will be overwritten by calling.
     *
     * @param x The new x value, relative to the background bitmap. A negative value is allowed.
     */
    void setIconX(int16_t x)
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	460b      	mov	r3, r1
 800cb42:	807b      	strh	r3, [r7, #2]
    {
        iconX = x;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	887a      	ldrh	r2, [r7, #2]
 800cb48:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 800cb4a:	bf00      	nop
 800cb4c:	370c      	adds	r7, #12
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb54:	4770      	bx	lr

0800cb56 <_ZN8touchgfx14ButtonWithIcon8setIconYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the background bitmap. A negative value is allowed.
     */
    void setIconY(int16_t y)
 800cb56:	b480      	push	{r7}
 800cb58:	b083      	sub	sp, #12
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
 800cb5e:	460b      	mov	r3, r1
 800cb60:	807b      	strh	r3, [r7, #2]
    {
        iconY = y;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	887a      	ldrh	r2, [r7, #2]
 800cb66:	875a      	strh	r2, [r3, #58]	; 0x3a
    }
 800cb68:	bf00      	nop
 800cb6a:	370c      	adds	r7, #12
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr

0800cb74 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the background bitmap. A negative value is allowed.
     * @param y The new y value, relative to the background bitmap. A negative value is allowed.
     */
    void setIconXY(int16_t x, int16_t y)
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b082      	sub	sp, #8
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	807b      	strh	r3, [r7, #2]
 800cb80:	4613      	mov	r3, r2
 800cb82:	803b      	strh	r3, [r7, #0]
    {
        setIconX(x);
 800cb84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cb88:	4619      	mov	r1, r3
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7ff ffd4 	bl	800cb38 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>
        setIconY(y);
 800cb90:	f9b7 3000 	ldrsh.w	r3, [r7]
 800cb94:	4619      	mov	r1, r3
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f7ff ffdd 	bl	800cb56 <_ZN8touchgfx14ButtonWithIcon8setIconYEs>
    }
 800cb9c:	bf00      	nop
 800cb9e:	3708      	adds	r7, #8
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <_ZN8touchgfx4ViewI13MenuPresenterED1Ev>:
class View : public Screen
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b082      	sub	sp, #8
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	4a05      	ldr	r2, [pc, #20]	; (800cbc4 <_ZN8touchgfx4ViewI13MenuPresenterED1Ev+0x20>)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	601a      	str	r2, [r3, #0]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7ff fed7 	bl	800c968 <_ZN8touchgfx6ScreenD1Ev>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3708      	adds	r7, #8
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	08025724 	.word	0x08025724

0800cbc8 <_ZN8touchgfx4ViewI13MenuPresenterED0Ev>:
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f7ff ffe7 	bl	800cba4 <_ZN8touchgfx4ViewI13MenuPresenterED1Ev>
 800cbd6:	2140      	movs	r1, #64	; 0x40
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f016 fa38 	bl	802304e <_ZdlPvj>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3708      	adds	r7, #8
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <_ZN12MenuViewBaseD1Ev>:

class MenuViewBase : public touchgfx::View<MenuPresenter>
{
public:
    MenuViewBase();
    virtual ~MenuViewBase() {}
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b082      	sub	sp, #8
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	4a16      	ldr	r2, [pc, #88]	; (800cc4c <_ZN12MenuViewBaseD1Ev+0x64>)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	601a      	str	r2, [r3, #0]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f000 fb19 	bl	800d234 <_ZN8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssED1Ev>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f203 53cc 	addw	r3, r3, #1484	; 0x5cc
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f000 fb35 	bl	800d278 <_ZN8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 800cc14:	4618      	mov	r0, r3
 800cc16:	f000 fb51 	bl	800d2bc <_ZN8touchgfx14ButtonWithIconD1Ev>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800cc20:	4618      	mov	r0, r3
 800cc22:	f000 f9bd 	bl	800cfa0 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EED1Ev>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	336c      	adds	r3, #108	; 0x6c
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f006 fc1d 	bl	801346a <_ZN8touchgfx11ScrollWheelD1Ev>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	3340      	adds	r3, #64	; 0x40
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7ff fe53 	bl	800c8e0 <_ZN8touchgfx5ImageD1Ev>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7ff ffb1 	bl	800cba4 <_ZN8touchgfx4ViewI13MenuPresenterED1Ev>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	4618      	mov	r0, r3
 800cc46:	3708      	adds	r7, #8
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}
 800cc4c:	08025688 	.word	0x08025688

0800cc50 <_ZN12MenuViewBaseD0Ev>:
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f7ff ffc5 	bl	800cbe8 <_ZN12MenuViewBaseD1Ev>
 800cc5e:	f240 51ec 	movw	r1, #1516	; 0x5ec
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f016 f9f3 	bl	802304e <_ZdlPvj>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3708      	adds	r7, #8
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}

0800cc72 <_ZN12MenuViewBase21scrollWheelUpdateItemER13MenuContainers>:
    virtual void setupScreen();

    virtual void scrollWheelUpdateItem(MenuContainer& item, int16_t itemIndex)
 800cc72:	b480      	push	{r7}
 800cc74:	b085      	sub	sp, #20
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	60f8      	str	r0, [r7, #12]
 800cc7a:	60b9      	str	r1, [r7, #8]
 800cc7c:	4613      	mov	r3, r2
 800cc7e:	80fb      	strh	r3, [r7, #6]
    {
        // Override and implement this function in Menu
    }
 800cc80:	bf00      	nop
 800cc82:	3714      	adds	r7, #20
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr

0800cc8c <_ZN12MenuViewBase15ButtonOKClickedEv>:

    /*
     * Virtual Action Handlers
     */
    virtual void ButtonOKClicked()
 800cc8c:	b480      	push	{r7}
 800cc8e:	b083      	sub	sp, #12
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Menu
    }
 800cc94:	bf00      	nop
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <_ZN12MenuViewBaseC1Ev>:
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/menu_screen/MenuViewBase.hpp>
#include "BitmapDatabase.hpp"

MenuViewBase::MenuViewBase() :
 800cca0:	b590      	push	{r4, r7, lr}
 800cca2:	b08f      	sub	sp, #60	; 0x3c
 800cca4:	af02      	add	r7, sp, #8
 800cca6:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &MenuViewBase::buttonCallbackHandler),
    updateItemCallback(this, &MenuViewBase::updateItemCallbackHandler)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f000 f9ae 	bl	800d00c <_ZN8touchgfx4ViewI13MenuPresenterEC1Ev>
 800ccb0:	4a7f      	ldr	r2, [pc, #508]	; (800ceb0 <_ZN12MenuViewBaseC1Ev+0x210>)
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	601a      	str	r2, [r3, #0]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800ccbc:	f107 0308 	add.w	r3, r7, #8
 800ccc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f7ff f9b4 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800ccca:	f107 0308 	add.w	r3, r7, #8
 800ccce:	4619      	mov	r1, r3
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	f7ff fb93 	bl	800c3fc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	336c      	adds	r3, #108	; 0x6c
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f006 fbe8 	bl	80134b0 <_ZN8touchgfx11ScrollWheelC1Ev>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800cce6:	4618      	mov	r0, r3
 800cce8:	f000 f9b6 	bl	800d058 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EEC1Ev>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f009 f964 	bl	8015fc0 <_ZN8touchgfx14ButtonWithIconC1Ev>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f203 50cc 	addw	r0, r3, #1484	; 0x5cc
 800ccfe:	4b6d      	ldr	r3, [pc, #436]	; (800ceb4 <_ZN12MenuViewBaseC1Ev+0x214>)
 800cd00:	60fb      	str	r3, [r7, #12]
 800cd02:	2300      	movs	r3, #0
 800cd04:	613b      	str	r3, [r7, #16]
 800cd06:	f107 030c 	add.w	r3, r7, #12
 800cd0a:	cb0c      	ldmia	r3, {r2, r3}
 800cd0c:	6879      	ldr	r1, [r7, #4]
 800cd0e:	f000 f9d1 	bl	800d0b4 <_ZN8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f203 50dc 	addw	r0, r3, #1500	; 0x5dc
 800cd18:	4b67      	ldr	r3, [pc, #412]	; (800ceb8 <_ZN12MenuViewBaseC1Ev+0x218>)
 800cd1a:	617b      	str	r3, [r7, #20]
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	61bb      	str	r3, [r7, #24]
 800cd20:	f107 0314 	add.w	r3, r7, #20
 800cd24:	cb0c      	ldmia	r3, {r2, r3}
 800cd26:	6879      	ldr	r1, [r7, #4]
 800cd28:	f000 f9f4 	bl	800d114 <_ZN8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssEC1EPS1_MS1_FvS3_ssE>
{

    imageBg.setXY(0, 0);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	3340      	adds	r3, #64	; 0x40
 800cd30:	2200      	movs	r2, #0
 800cd32:	2100      	movs	r1, #0
 800cd34:	4618      	mov	r0, r3
 800cd36:	f7ff f9f9 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    imageBg.setBitmap(touchgfx::Bitmap(BITMAP_GREEN_POLYGONS_BACKGROUND_480X272_ID));
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800cd40:	f107 031c 	add.w	r3, r7, #28
 800cd44:	2108      	movs	r1, #8
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7ff f973 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800cd4c:	f107 031c 	add.w	r3, r7, #28
 800cd50:	4619      	mov	r1, r3
 800cd52:	4620      	mov	r0, r4
 800cd54:	f009 f958 	bl	8016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    scrollWheel.setPosition(50, 76, 380, 88);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800cd5e:	2358      	movs	r3, #88	; 0x58
 800cd60:	9300      	str	r3, [sp, #0]
 800cd62:	f44f 73be 	mov.w	r3, #380	; 0x17c
 800cd66:	224c      	movs	r2, #76	; 0x4c
 800cd68:	2132      	movs	r1, #50	; 0x32
 800cd6a:	f7fd f90f 	bl	8009f8c <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollWheel.setHorizontal(true);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	336c      	adds	r3, #108	; 0x6c
 800cd72:	2101      	movs	r1, #1
 800cd74:	4618      	mov	r0, r3
 800cd76:	f006 fb08 	bl	801338a <_ZN8touchgfx10ScrollBase13setHorizontalEb>
    scrollWheel.setCircular(true);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	336c      	adds	r3, #108	; 0x6c
 800cd7e:	2101      	movs	r1, #1
 800cd80:	4618      	mov	r0, r3
 800cd82:	f006 fb5b 	bl	801343c <_ZN8touchgfx10ScrollBase11setCircularEb>
    scrollWheel.setEasingEquation(touchgfx::EasingEquations::linearEaseOut);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	336c      	adds	r3, #108	; 0x6c
 800cd8a:	494c      	ldr	r1, [pc, #304]	; (800cebc <_ZN12MenuViewBaseC1Ev+0x21c>)
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f006 fa4c 	bl	801322a <_ZN8touchgfx10ScrollBase17setEasingEquationEPFstsstE>
    scrollWheel.setSwipeAcceleration(10);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	336c      	adds	r3, #108	; 0x6c
 800cd96:	210a      	movs	r1, #10
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f006 fa49 	bl	8013230 <_ZN8touchgfx10ScrollBase20setSwipeAccelerationEt>
    scrollWheel.setDragAcceleration(10);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	336c      	adds	r3, #108	; 0x6c
 800cda2:	210a      	movs	r1, #10
 800cda4:	4618      	mov	r0, r3
 800cda6:	f006 fa46 	bl	8013236 <_ZN8touchgfx10ScrollBase19setDragAccelerationEt>
    scrollWheel.setNumberOfItems(7);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	336c      	adds	r3, #108	; 0x6c
 800cdae:	2107      	movs	r1, #7
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f006 f98b 	bl	80130cc <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs>
    scrollWheel.setSelectedItemOffset(130);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	336c      	adds	r3, #108	; 0x6c
 800cdba:	2182      	movs	r1, #130	; 0x82
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f005 ff92 	bl	8012ce6 <_ZN8touchgfx15ScrollWheelBase21setSelectedItemOffsetEs>
    scrollWheel.setDrawableSize(120, 0);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	336c      	adds	r3, #108	; 0x6c
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	2178      	movs	r1, #120	; 0x78
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f006 fa26 	bl	801321c <_ZN8touchgfx10ScrollBase15setDrawableSizeEss>
    scrollWheel.setDrawables(scrollWheelListItems, updateItemCallback);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f503 7196 	add.w	r1, r3, #300	; 0x12c
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800cde2:	461a      	mov	r2, r3
 800cde4:	f006 fb49 	bl	801347a <_ZN8touchgfx11ScrollWheel12setDrawablesERNS_26DrawableListItemsInterfaceERNS_15GenericCallbackIPS1_ssEE>
    scrollWheel.animateToItem(1, 0);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	336c      	adds	r3, #108	; 0x6c
 800cdec:	2200      	movs	r2, #0
 800cdee:	2101      	movs	r1, #1
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f006 f917 	bl	8013024 <_ZN8touchgfx10ScrollBase13animateToItemEss>

    buttonOk.setXY(175, 194);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 800cdfc:	22c2      	movs	r2, #194	; 0xc2
 800cdfe:	21af      	movs	r1, #175	; 0xaf
 800ce00:	4618      	mov	r0, r3
 800ce02:	f7ff f993 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    buttonOk.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_EMPTY_RELEASED_ID), touchgfx::Bitmap(BITMAP_BUTTON_EMPTY_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICONS8_OK_60_ID), touchgfx::Bitmap(BITMAP_ICONS8_OK_60_ID));
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f503 64b2 	add.w	r4, r3, #1424	; 0x590
 800ce0c:	f107 0320 	add.w	r3, r7, #32
 800ce10:	2102      	movs	r1, #2
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7ff f90d 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800ce18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce1c:	2101      	movs	r1, #1
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7ff f907 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800ce24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ce28:	210f      	movs	r1, #15
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7ff f901 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800ce30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ce34:	210f      	movs	r1, #15
 800ce36:	4618      	mov	r0, r3
 800ce38:	f7ff f8fb 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800ce3c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800ce40:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ce44:	f107 0120 	add.w	r1, r7, #32
 800ce48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ce4c:	9300      	str	r3, [sp, #0]
 800ce4e:	4603      	mov	r3, r0
 800ce50:	4620      	mov	r0, r4
 800ce52:	f009 f813 	bl	8015e7c <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    buttonOk.setIconXY(49, 12);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 800ce5c:	220c      	movs	r2, #12
 800ce5e:	2131      	movs	r1, #49	; 0x31
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7ff fe87 	bl	800cb74 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    buttonOk.setAction(buttonCallback);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f503 62b2 	add.w	r2, r3, #1424	; 0x590
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f203 53cc 	addw	r3, r3, #1484	; 0x5cc
 800ce72:	4619      	mov	r1, r3
 800ce74:	4610      	mov	r0, r2
 800ce76:	f7ff fe0c 	bl	800ca92 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(imageBg);
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	3340      	adds	r3, #64	; 0x40
 800ce80:	4619      	mov	r1, r3
 800ce82:	4610      	mov	r0, r2
 800ce84:	f7ff fdc8 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(scrollWheel);
 800ce88:	687a      	ldr	r2, [r7, #4]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	336c      	adds	r3, #108	; 0x6c
 800ce8e:	4619      	mov	r1, r3
 800ce90:	4610      	mov	r0, r2
 800ce92:	f7ff fdc1 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonOk);
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 800ce9e:	4619      	mov	r1, r3
 800cea0:	4610      	mov	r0, r2
 800cea2:	f7ff fdb9 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3734      	adds	r7, #52	; 0x34
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd90      	pop	{r4, r7, pc}
 800ceb0:	08025688 	.word	0x08025688
 800ceb4:	0800cf21 	.word	0x0800cf21
 800ceb8:	0800cf4b 	.word	0x0800cf4b
 800cebc:	080185c9 	.word	0x080185c9

0800cec0 <_ZN12MenuViewBase11setupScreenEv>:

void MenuViewBase::setupScreen()
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
    scrollWheel.initialize();
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	336c      	adds	r3, #108	; 0x6c
 800cecc:	4618      	mov	r0, r3
 800cece:	f7ff fdd3 	bl	800ca78 <_ZN8touchgfx10ScrollBase10initializeEv>
    for (int i = 0; i < scrollWheelListItems.getNumberOfDrawables(); i++)
 800ced2:	2300      	movs	r3, #0
 800ced4:	60fb      	str	r3, [r7, #12]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800cedc:	4618      	mov	r0, r3
 800cede:	f000 f939 	bl	800d154 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EE20getNumberOfDrawablesEv>
 800cee2:	4603      	mov	r3, r0
 800cee4:	461a      	mov	r2, r3
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	4293      	cmp	r3, r2
 800ceea:	bfb4      	ite	lt
 800ceec:	2301      	movlt	r3, #1
 800ceee:	2300      	movge	r3, #0
 800cef0:	b2db      	uxtb	r3, r3
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d010      	beq.n	800cf18 <_ZN12MenuViewBase11setupScreenEv+0x58>
    {
        scrollWheelListItems[i].initialize();
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800cefc:	68f9      	ldr	r1, [r7, #12]
 800cefe:	4618      	mov	r0, r3
 800cf00:	f000 f934 	bl	800d16c <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EEixEi>
 800cf04:	4602      	mov	r2, r0
 800cf06:	6813      	ldr	r3, [r2, #0]
 800cf08:	3384      	adds	r3, #132	; 0x84
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4610      	mov	r0, r2
 800cf0e:	4798      	blx	r3
    for (int i = 0; i < scrollWheelListItems.getNumberOfDrawables(); i++)
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	3301      	adds	r3, #1
 800cf14:	60fb      	str	r3, [r7, #12]
 800cf16:	e7de      	b.n	800ced6 <_ZN12MenuViewBase11setupScreenEv+0x16>
    }
}
 800cf18:	bf00      	nop
 800cf1a:	3710      	adds	r7, #16
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <_ZN12MenuViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MenuViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b082      	sub	sp, #8
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
    if (&src == &buttonOk)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 800cf30:	683a      	ldr	r2, [r7, #0]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d105      	bne.n	800cf42 <_ZN12MenuViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //InteractionButtonOKClicked
        //When buttonOk clicked call virtual function
        //Call ButtonOKClicked
        ButtonOKClicked();
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	3330      	adds	r3, #48	; 0x30
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	4798      	blx	r3
    }
}
 800cf42:	bf00      	nop
 800cf44:	3708      	adds	r7, #8
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}

0800cf4a <_ZN12MenuViewBase25updateItemCallbackHandlerEPN8touchgfx26DrawableListItemsInterfaceEss>:

void MenuViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
 800cf4a:	b580      	push	{r7, lr}
 800cf4c:	b086      	sub	sp, #24
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	60f8      	str	r0, [r7, #12]
 800cf52:	60b9      	str	r1, [r7, #8]
 800cf54:	4611      	mov	r1, r2
 800cf56:	461a      	mov	r2, r3
 800cf58:	460b      	mov	r3, r1
 800cf5a:	80fb      	strh	r3, [r7, #6]
 800cf5c:	4613      	mov	r3, r2
 800cf5e:	80bb      	strh	r3, [r7, #4]
    if (items == &scrollWheelListItems)
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800cf66:	68ba      	ldr	r2, [r7, #8]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d114      	bne.n	800cf96 <_ZN12MenuViewBase25updateItemCallbackHandlerEPN8touchgfx26DrawableListItemsInterfaceEss+0x4c>
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	3308      	adds	r3, #8
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cf78:	4611      	mov	r1, r2
 800cf7a:	68b8      	ldr	r0, [r7, #8]
 800cf7c:	4798      	blx	r3
 800cf7e:	6178      	str	r0, [r7, #20]
        MenuContainer* cc = (MenuContainer*)d;
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	613b      	str	r3, [r7, #16]
        scrollWheelUpdateItem(*cc, itemIndex);
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	332c      	adds	r3, #44	; 0x2c
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800cf90:	6939      	ldr	r1, [r7, #16]
 800cf92:	68f8      	ldr	r0, [r7, #12]
 800cf94:	4798      	blx	r3
    }
}
 800cf96:	bf00      	nop
 800cf98:	3718      	adds	r7, #24
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
	...

0800cfa0 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EED1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DrawableListItems()
 800cfa0:	b590      	push	{r4, r7, lr}
 800cfa2:	b083      	sub	sp, #12
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
    {
    }
 800cfa8:	4a0e      	ldr	r2, [pc, #56]	; (800cfe4 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EED1Ev+0x44>)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	601a      	str	r2, [r3, #0]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	3304      	adds	r3, #4
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d00d      	beq.n	800cfd2 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EED1Ev+0x32>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	3304      	adds	r3, #4
 800cfba:	f503 648c 	add.w	r4, r3, #1120	; 0x460
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	3304      	adds	r3, #4
 800cfc2:	429c      	cmp	r4, r3
 800cfc4:	d005      	beq.n	800cfd2 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EED1Ev+0x32>
 800cfc6:	3ce0      	subs	r4, #224	; 0xe0
 800cfc8:	6823      	ldr	r3, [r4, #0]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4620      	mov	r0, r4
 800cfce:	4798      	blx	r3
 800cfd0:	e7f5      	b.n	800cfbe <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EED1Ev+0x1e>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f7ff fd2f 	bl	800ca38 <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	4618      	mov	r0, r3
 800cfde:	370c      	adds	r7, #12
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd90      	pop	{r4, r7, pc}
 800cfe4:	0802570c 	.word	0x0802570c

0800cfe8 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EED0Ev>:
    virtual ~DrawableListItems()
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
    }
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f7ff ffd5 	bl	800cfa0 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EED1Ev>
 800cff6:	f240 4164 	movw	r1, #1124	; 0x464
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f016 f827 	bl	802304e <_ZdlPvj>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	4618      	mov	r0, r3
 800d004:	3708      	adds	r7, #8
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
	...

0800d00c <_ZN8touchgfx4ViewI13MenuPresenterEC1Ev>:
    View() : presenter(0)
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	4618      	mov	r0, r3
 800d018:	f00b f8c8 	bl	80181ac <_ZN8touchgfx6ScreenC1Ev>
 800d01c:	4a05      	ldr	r2, [pc, #20]	; (800d034 <_ZN8touchgfx4ViewI13MenuPresenterEC1Ev+0x28>)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	601a      	str	r2, [r3, #0]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2200      	movs	r2, #0
 800d026:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	4618      	mov	r0, r3
 800d02c:	3708      	adds	r7, #8
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	08025724 	.word	0x08025724

0800d038 <_ZN8touchgfx26DrawableListItemsInterfaceC1Ev>:
class DrawableListItemsInterface
 800d038:	b480      	push	{r7}
 800d03a:	b083      	sub	sp, #12
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	4a04      	ldr	r2, [pc, #16]	; (800d054 <_ZN8touchgfx26DrawableListItemsInterfaceC1Ev+0x1c>)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	601a      	str	r2, [r3, #0]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	4618      	mov	r0, r3
 800d04a:	370c      	adds	r7, #12
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr
 800d054:	08025770 	.word	0x08025770

0800d058 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EEC1Ev>:
    DrawableListItems()
 800d058:	b5b0      	push	{r4, r5, r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
        : DrawableListItemsInterface()
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	4618      	mov	r0, r3
 800d064:	f7ff ffe8 	bl	800d038 <_ZN8touchgfx26DrawableListItemsInterfaceC1Ev>
 800d068:	4a09      	ldr	r2, [pc, #36]	; (800d090 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EEC1Ev+0x38>)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	601a      	str	r2, [r3, #0]
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	3304      	adds	r3, #4
 800d072:	2404      	movs	r4, #4
 800d074:	461d      	mov	r5, r3
 800d076:	2c00      	cmp	r4, #0
 800d078:	db05      	blt.n	800d086 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EEC1Ev+0x2e>
 800d07a:	4628      	mov	r0, r5
 800d07c:	f002 fd0a 	bl	800fa94 <_ZN13MenuContainerC1Ev>
 800d080:	35e0      	adds	r5, #224	; 0xe0
 800d082:	3c01      	subs	r4, #1
 800d084:	e7f7      	b.n	800d076 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EEC1Ev+0x1e>
    }
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	4618      	mov	r0, r3
 800d08a:	3708      	adds	r7, #8
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bdb0      	pop	{r4, r5, r7, pc}
 800d090:	0802570c 	.word	0x0802570c

0800d094 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	4a04      	ldr	r2, [pc, #16]	; (800d0b0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	601a      	str	r2, [r3, #0]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	370c      	adds	r7, #12
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ae:	4770      	bx	lr
 800d0b0:	08025758 	.word	0x08025758

0800d0b4 <_ZN8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	60f8      	str	r0, [r7, #12]
 800d0bc:	60b9      	str	r1, [r7, #8]
 800d0be:	4639      	mov	r1, r7
 800d0c0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7ff ffe4 	bl	800d094 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800d0cc:	4a08      	ldr	r2, [pc, #32]	; (800d0f0 <_ZN8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	68ba      	ldr	r2, [r7, #8]
 800d0d6:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	3308      	adds	r3, #8
 800d0dc:	463a      	mov	r2, r7
 800d0de:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d0e2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3710      	adds	r7, #16
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	080256f4 	.word	0x080256f4

0800d0f4 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssEC1Ev>:
class GenericCallback
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	4a04      	ldr	r2, [pc, #16]	; (800d110 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssEC1Ev+0x1c>)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	601a      	str	r2, [r3, #0]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4618      	mov	r0, r3
 800d106:	370c      	adds	r7, #12
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr
 800d110:	080256dc 	.word	0x080256dc

0800d114 <_ZN8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssEC1EPS1_MS1_FvS3_ssE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_3)(T1, T2, T3))
 800d114:	b580      	push	{r7, lr}
 800d116:	b084      	sub	sp, #16
 800d118:	af00      	add	r7, sp, #0
 800d11a:	60f8      	str	r0, [r7, #12]
 800d11c:	60b9      	str	r1, [r7, #8]
 800d11e:	4639      	mov	r1, r7
 800d120:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	4618      	mov	r0, r3
 800d128:	f7ff ffe4 	bl	800d0f4 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssEC1Ev>
 800d12c:	4a08      	ldr	r2, [pc, #32]	; (800d150 <_ZN8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssEC1EPS1_MS1_FvS3_ssE+0x3c>)
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	68ba      	ldr	r2, [r7, #8]
 800d136:	605a      	str	r2, [r3, #4]
        this->pmemfun_3 = pmemfun_3;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	3308      	adds	r3, #8
 800d13c:	463a      	mov	r2, r7
 800d13e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d142:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	4618      	mov	r0, r3
 800d14a:	3710      	adds	r7, #16
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}
 800d150:	080256c4 	.word	0x080256c4

0800d154 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EE20getNumberOfDrawablesEv>:
    {
        assert(index >= 0 && index < SIZE);
        return element[index];
    }

    virtual int16_t getNumberOfDrawables()
 800d154:	b480      	push	{r7}
 800d156:	b083      	sub	sp, #12
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
    {
        return SIZE;
 800d15c:	2305      	movs	r3, #5
    }
 800d15e:	4618      	mov	r0, r3
 800d160:	370c      	adds	r7, #12
 800d162:	46bd      	mov	sp, r7
 800d164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d168:	4770      	bx	lr
	...

0800d16c <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EEixEi>:
    TYPE& operator[](int index)
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
        assert(index >= 0 && index < SIZE);
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	db02      	blt.n	800d182 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EEixEi+0x16>
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	2b04      	cmp	r3, #4
 800d180:	dd05      	ble.n	800d18e <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EEixEi+0x22>
 800d182:	4b09      	ldr	r3, [pc, #36]	; (800d1a8 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EEixEi+0x3c>)
 800d184:	4a09      	ldr	r2, [pc, #36]	; (800d1ac <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EEixEi+0x40>)
 800d186:	2198      	movs	r1, #152	; 0x98
 800d188:	4809      	ldr	r0, [pc, #36]	; (800d1b0 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EEixEi+0x44>)
 800d18a:	f015 ff8b 	bl	80230a4 <__assert_func>
        return element[index];
 800d18e:	683a      	ldr	r2, [r7, #0]
 800d190:	4613      	mov	r3, r2
 800d192:	00db      	lsls	r3, r3, #3
 800d194:	1a9b      	subs	r3, r3, r2
 800d196:	015b      	lsls	r3, r3, #5
 800d198:	687a      	ldr	r2, [r7, #4]
 800d19a:	4413      	add	r3, r2
 800d19c:	3304      	adds	r3, #4
    }
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3708      	adds	r7, #8
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	08024560 	.word	0x08024560
 800d1ac:	08025814 	.word	0x08025814
 800d1b0:	0802457c 	.word	0x0802457c

0800d1b4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
    }
 800d1bc:	4a04      	ldr	r2, [pc, #16]	; (800d1d0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	601a      	str	r2, [r3, #0]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	370c      	adds	r7, #12
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr
 800d1d0:	08025758 	.word	0x08025758

0800d1d4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b082      	sub	sp, #8
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
    }
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f7ff ffe9 	bl	800d1b4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800d1e2:	2104      	movs	r1, #4
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f015 ff32 	bl	802304e <_ZdlPvj>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3708      	adds	r7, #8
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev>:
    virtual ~GenericCallback()
 800d1f4:	b480      	push	{r7}
 800d1f6:	b083      	sub	sp, #12
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
    }
 800d1fc:	4a04      	ldr	r2, [pc, #16]	; (800d210 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev+0x1c>)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	601a      	str	r2, [r3, #0]
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	4618      	mov	r0, r3
 800d206:	370c      	adds	r7, #12
 800d208:	46bd      	mov	sp, r7
 800d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20e:	4770      	bx	lr
 800d210:	080256dc 	.word	0x080256dc

0800d214 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED0Ev>:
    virtual ~GenericCallback()
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
    }
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f7ff ffe9 	bl	800d1f4 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev>
 800d222:	2104      	movs	r1, #4
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f015 ff12 	bl	802304e <_ZdlPvj>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	4618      	mov	r0, r3
 800d22e:	3708      	adds	r7, #8
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <_ZN8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssED1Ev>:
struct Callback : public GenericCallback<T1, T2, T3>
 800d234:	b580      	push	{r7, lr}
 800d236:	b082      	sub	sp, #8
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	4a05      	ldr	r2, [pc, #20]	; (800d254 <_ZN8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssED1Ev+0x20>)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	601a      	str	r2, [r3, #0]
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	4618      	mov	r0, r3
 800d246:	f7ff ffd5 	bl	800d1f4 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	4618      	mov	r0, r3
 800d24e:	3708      	adds	r7, #8
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}
 800d254:	080256c4 	.word	0x080256c4

0800d258 <_ZN8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssED0Ev>:
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f7ff ffe7 	bl	800d234 <_ZN8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssED1Ev>
 800d266:	2110      	movs	r1, #16
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f015 fef0 	bl	802304e <_ZdlPvj>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	4618      	mov	r0, r3
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <_ZN8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800d278:	b580      	push	{r7, lr}
 800d27a:	b082      	sub	sp, #8
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	4a05      	ldr	r2, [pc, #20]	; (800d298 <_ZN8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	601a      	str	r2, [r3, #0]
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	4618      	mov	r0, r3
 800d28a:	f7ff ff93 	bl	800d1b4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	4618      	mov	r0, r3
 800d292:	3708      	adds	r7, #8
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	080256f4 	.word	0x080256f4

0800d29c <_ZN8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b082      	sub	sp, #8
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f7ff ffe7 	bl	800d278 <_ZN8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800d2aa:	2110      	movs	r1, #16
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f015 fece 	bl	802304e <_ZdlPvj>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3708      	adds	r7, #8
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <_ZN8touchgfx14ButtonWithIconD1Ev>:
class ButtonWithIcon : public Button
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b082      	sub	sp, #8
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	4a05      	ldr	r2, [pc, #20]	; (800d2dc <_ZN8touchgfx14ButtonWithIconD1Ev+0x20>)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	601a      	str	r2, [r3, #0]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f7ff fc11 	bl	800caf4 <_ZN8touchgfx6ButtonD1Ev>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3708      	adds	r7, #8
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	08027f98 	.word	0x08027f98

0800d2e0 <_ZN8touchgfx14ButtonWithIconD0Ev>:
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b082      	sub	sp, #8
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f7ff ffe7 	bl	800d2bc <_ZN8touchgfx14ButtonWithIconD1Ev>
 800d2ee:	213c      	movs	r1, #60	; 0x3c
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f015 feac 	bl	802304e <_ZdlPvj>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3708      	adds	r7, #8
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <_ZN8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssE7executeES3_ss>:
    virtual void execute(T1 t1, T2 t2, T3 t3)
 800d300:	b590      	push	{r4, r7, lr}
 800d302:	b085      	sub	sp, #20
 800d304:	af00      	add	r7, sp, #0
 800d306:	60f8      	str	r0, [r7, #12]
 800d308:	60b9      	str	r1, [r7, #8]
 800d30a:	4611      	mov	r1, r2
 800d30c:	461a      	mov	r2, r3
 800d30e:	460b      	mov	r3, r1
 800d310:	80fb      	strh	r3, [r7, #6]
 800d312:	4613      	mov	r3, r2
 800d314:	80bb      	strh	r3, [r7, #4]
        (pobject->*pmemfun_3)(t1, t2, t3);
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	68fa      	ldr	r2, [r7, #12]
 800d31c:	68d2      	ldr	r2, [r2, #12]
 800d31e:	1052      	asrs	r2, r2, #1
 800d320:	1898      	adds	r0, r3, r2
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	68db      	ldr	r3, [r3, #12]
 800d326:	f003 0301 	and.w	r3, r3, #1
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d102      	bne.n	800d334 <_ZN8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssE7executeES3_ss+0x34>
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	689c      	ldr	r4, [r3, #8]
 800d332:	e00a      	b.n	800d34a <_ZN8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssE7executeES3_ss+0x4a>
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	68fa      	ldr	r2, [r7, #12]
 800d33a:	68d2      	ldr	r2, [r2, #12]
 800d33c:	1052      	asrs	r2, r2, #1
 800d33e:	4413      	add	r3, r2
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	68fa      	ldr	r2, [r7, #12]
 800d344:	6892      	ldr	r2, [r2, #8]
 800d346:	4413      	add	r3, r2
 800d348:	681c      	ldr	r4, [r3, #0]
 800d34a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d34e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d352:	68b9      	ldr	r1, [r7, #8]
 800d354:	47a0      	blx	r4
    }
 800d356:	bf00      	nop
 800d358:	3714      	adds	r7, #20
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd90      	pop	{r4, r7, pc}

0800d35e <_ZNK8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv>:
    virtual bool isValid() const
 800d35e:	b480      	push	{r7}
 800d360:	b083      	sub	sp, #12
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_3 != 0);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	685b      	ldr	r3, [r3, #4]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d010      	beq.n	800d390 <_ZNK8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x32>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	689b      	ldr	r3, [r3, #8]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d107      	bne.n	800d386 <_ZNK8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x28>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	68db      	ldr	r3, [r3, #12]
 800d37a:	f003 0301 	and.w	r3, r3, #1
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d101      	bne.n	800d386 <_ZNK8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x28>
 800d382:	2301      	movs	r3, #1
 800d384:	e000      	b.n	800d388 <_ZNK8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x2a>
 800d386:	2300      	movs	r3, #0
 800d388:	2b01      	cmp	r3, #1
 800d38a:	d001      	beq.n	800d390 <_ZNK8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x32>
 800d38c:	2301      	movs	r3, #1
 800d38e:	e000      	b.n	800d392 <_ZNK8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x34>
 800d390:	2300      	movs	r3, #0
    }
 800d392:	4618      	mov	r0, r3
 800d394:	370c      	adds	r7, #12
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr

0800d39e <_ZN8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800d39e:	b580      	push	{r7, lr}
 800d3a0:	b082      	sub	sp, #8
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	6078      	str	r0, [r7, #4]
 800d3a6:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	687a      	ldr	r2, [r7, #4]
 800d3ae:	68d2      	ldr	r2, [r2, #12]
 800d3b0:	1052      	asrs	r2, r2, #1
 800d3b2:	1898      	adds	r0, r3, r2
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	68db      	ldr	r3, [r3, #12]
 800d3b8:	f003 0301 	and.w	r3, r3, #1
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d102      	bne.n	800d3c6 <_ZN8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	689b      	ldr	r3, [r3, #8]
 800d3c4:	e00a      	b.n	800d3dc <_ZN8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	685b      	ldr	r3, [r3, #4]
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	68d2      	ldr	r2, [r2, #12]
 800d3ce:	1052      	asrs	r2, r2, #1
 800d3d0:	4413      	add	r3, r2
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	687a      	ldr	r2, [r7, #4]
 800d3d6:	6892      	ldr	r2, [r2, #8]
 800d3d8:	4413      	add	r3, r2
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	6839      	ldr	r1, [r7, #0]
 800d3de:	4798      	blx	r3
    }
 800d3e0:	bf00      	nop
 800d3e2:	3708      	adds	r7, #8
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <_ZNK8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800d3e8:	b480      	push	{r7}
 800d3ea:	b083      	sub	sp, #12
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	685b      	ldr	r3, [r3, #4]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d010      	beq.n	800d41a <_ZNK8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	689b      	ldr	r3, [r3, #8]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d107      	bne.n	800d410 <_ZNK8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	68db      	ldr	r3, [r3, #12]
 800d404:	f003 0301 	and.w	r3, r3, #1
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d101      	bne.n	800d410 <_ZNK8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800d40c:	2301      	movs	r3, #1
 800d40e:	e000      	b.n	800d412 <_ZNK8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800d410:	2300      	movs	r3, #0
 800d412:	2b01      	cmp	r3, #1
 800d414:	d001      	beq.n	800d41a <_ZNK8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800d416:	2301      	movs	r3, #1
 800d418:	e000      	b.n	800d41c <_ZNK8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800d41a:	2300      	movs	r3, #0
    }
 800d41c:	4618      	mov	r0, r3
 800d41e:	370c      	adds	r7, #12
 800d420:	46bd      	mov	sp, r7
 800d422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d426:	4770      	bx	lr

0800d428 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EE11getDrawableEs>:
    virtual Drawable* getDrawable(int16_t index)
 800d428:	b580      	push	{r7, lr}
 800d42a:	b082      	sub	sp, #8
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	460b      	mov	r3, r1
 800d432:	807b      	strh	r3, [r7, #2]
        assert(index >= 0 && index < SIZE);
 800d434:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	db03      	blt.n	800d444 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EE11getDrawableEs+0x1c>
 800d43c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d440:	2b04      	cmp	r3, #4
 800d442:	dd05      	ble.n	800d450 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EE11getDrawableEs+0x28>
 800d444:	4b09      	ldr	r3, [pc, #36]	; (800d46c <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EE11getDrawableEs+0x44>)
 800d446:	4a0a      	ldr	r2, [pc, #40]	; (800d470 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EE11getDrawableEs+0x48>)
 800d448:	2187      	movs	r1, #135	; 0x87
 800d44a:	480a      	ldr	r0, [pc, #40]	; (800d474 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EE11getDrawableEs+0x4c>)
 800d44c:	f015 fe2a 	bl	80230a4 <__assert_func>
        return &element[index];
 800d450:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d454:	4613      	mov	r3, r2
 800d456:	00db      	lsls	r3, r3, #3
 800d458:	1a9b      	subs	r3, r3, r2
 800d45a:	015b      	lsls	r3, r3, #5
 800d45c:	687a      	ldr	r2, [r7, #4]
 800d45e:	4413      	add	r3, r2
 800d460:	3304      	adds	r3, #4
    }
 800d462:	4618      	mov	r0, r3
 800d464:	3708      	adds	r7, #8
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}
 800d46a:	bf00      	nop
 800d46c:	08024560 	.word	0x08024560
 800d470:	08025780 	.word	0x08025780
 800d474:	0802457c 	.word	0x0802457c

0800d478 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 800d478:	b480      	push	{r7}
 800d47a:	b083      	sub	sp, #12
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	460b      	mov	r3, r1
 800d482:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	78fa      	ldrb	r2, [r7, #3]
 800d488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800d48c:	bf00      	nop
 800d48e:	370c      	adds	r7, #12
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr

0800d498 <_ZN8touchgfx14AbstractButtonC1Ev>:
    AbstractButton() : Widget(), action(), pressed(false)
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f7fe ff52 	bl	800c34c <_ZN8touchgfx6WidgetC1Ev>
 800d4a8:	4a09      	ldr	r2, [pc, #36]	; (800d4d0 <_ZN8touchgfx14AbstractButtonC1Ev+0x38>)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	601a      	str	r2, [r3, #0]
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	629a      	str	r2, [r3, #40]	; 0x28
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        setTouchable(true);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2101      	movs	r1, #1
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f7ff ffd9 	bl	800d478 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3708      	adds	r7, #8
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	08027cbc 	.word	0x08027cbc

0800d4d4 <_ZN8touchgfx6ButtonC1Ev>:
    Button() : AbstractButton(), up(), down(), alpha(255) { }
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7ff ffda 	bl	800d498 <_ZN8touchgfx14AbstractButtonC1Ev>
 800d4e4:	4a0c      	ldr	r2, [pc, #48]	; (800d518 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	601a      	str	r2, [r3, #0]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	332e      	adds	r3, #46	; 0x2e
 800d4ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7fe fd9d 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	3330      	adds	r3, #48	; 0x30
 800d4fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d500:	4618      	mov	r0, r3
 800d502:	f7fe fd96 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	22ff      	movs	r2, #255	; 0xff
 800d50a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	4618      	mov	r0, r3
 800d512:	3708      	adds	r7, #8
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}
 800d518:	08027e78 	.word	0x08027e78

0800d51c <_ZN8touchgfx4ViewI16TestADCPresenterED1Ev>:
class View : public Screen
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	4a05      	ldr	r2, [pc, #20]	; (800d53c <_ZN8touchgfx4ViewI16TestADCPresenterED1Ev+0x20>)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	601a      	str	r2, [r3, #0]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7ff fa1b 	bl	800c968 <_ZN8touchgfx6ScreenD1Ev>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	4618      	mov	r0, r3
 800d536:	3708      	adds	r7, #8
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}
 800d53c:	080258d8 	.word	0x080258d8

0800d540 <_ZN8touchgfx4ViewI16TestADCPresenterED0Ev>:
 800d540:	b580      	push	{r7, lr}
 800d542:	b082      	sub	sp, #8
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f7ff ffe7 	bl	800d51c <_ZN8touchgfx4ViewI16TestADCPresenterED1Ev>
 800d54e:	2140      	movs	r1, #64	; 0x40
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f015 fd7c 	bl	802304e <_ZdlPvj>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	4618      	mov	r0, r3
 800d55a:	3708      	adds	r7, #8
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <_ZN15TestADCViewBaseD1Ev>:

class TestADCViewBase : public touchgfx::View<TestADCPresenter>
{
public:
    TestADCViewBase();
    virtual ~TestADCViewBase() {}
 800d560:	b580      	push	{r7, lr}
 800d562:	b082      	sub	sp, #8
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	4a0f      	ldr	r2, [pc, #60]	; (800d5a8 <_ZN15TestADCViewBaseD1Ev+0x48>)
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	601a      	str	r2, [r3, #0]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	33d4      	adds	r3, #212	; 0xd4
 800d572:	4618      	mov	r0, r3
 800d574:	f000 f93c 	bl	800d7f0 <_ZN8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	33a0      	adds	r3, #160	; 0xa0
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7ff fab9 	bl	800caf4 <_ZN8touchgfx6ButtonD1Ev>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	336c      	adds	r3, #108	; 0x6c
 800d586:	4618      	mov	r0, r3
 800d588:	f7ff f832 	bl	800c5f0 <_ZN8touchgfx8TextAreaD1Ev>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	3340      	adds	r3, #64	; 0x40
 800d590:	4618      	mov	r0, r3
 800d592:	f7ff f9a5 	bl	800c8e0 <_ZN8touchgfx5ImageD1Ev>
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	4618      	mov	r0, r3
 800d59a:	f7ff ffbf 	bl	800d51c <_ZN8touchgfx4ViewI16TestADCPresenterED1Ev>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	08025888 	.word	0x08025888

0800d5ac <_ZN15TestADCViewBaseD0Ev>:
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f7ff ffd3 	bl	800d560 <_ZN15TestADCViewBaseD1Ev>
 800d5ba:	21e4      	movs	r1, #228	; 0xe4
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f015 fd46 	bl	802304e <_ZdlPvj>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3708      	adds	r7, #8
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <_ZN15TestADCViewBase19buttonReturnClickedEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void buttonReturnClicked()
 800d5cc:	b480      	push	{r7}
 800d5ce:	b083      	sub	sp, #12
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in TestADC
    }
 800d5d4:	bf00      	nop
 800d5d6:	370c      	adds	r7, #12
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr

0800d5e0 <_ZN15TestADCViewBaseC1Ev>:
#include <gui_generated/testadc_screen/TestADCViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

TestADCViewBase::TestADCViewBase() :
 800d5e0:	b590      	push	{r4, r7, lr}
 800d5e2:	b08b      	sub	sp, #44	; 0x2c
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &TestADCViewBase::buttonCallbackHandler)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f000 f8ca 	bl	800d784 <_ZN8touchgfx4ViewI16TestADCPresenterEC1Ev>
 800d5f0:	4a53      	ldr	r2, [pc, #332]	; (800d740 <_ZN15TestADCViewBaseC1Ev+0x160>)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	601a      	str	r2, [r3, #0]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800d5fc:	f107 030c 	add.w	r3, r7, #12
 800d600:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d604:	4618      	mov	r0, r3
 800d606:	f7fe fd14 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800d60a:	f107 030c 	add.w	r3, r7, #12
 800d60e:	4619      	mov	r1, r3
 800d610:	4620      	mov	r0, r4
 800d612:	f7fe fef3 	bl	800c3fc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	336c      	adds	r3, #108	; 0x6c
 800d61a:	4618      	mov	r0, r3
 800d61c:	f7fe ff36 	bl	800c48c <_ZN8touchgfx8TextAreaC1Ev>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	33a0      	adds	r3, #160	; 0xa0
 800d624:	4618      	mov	r0, r3
 800d626:	f7ff ff55 	bl	800d4d4 <_ZN8touchgfx6ButtonC1Ev>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800d630:	4b44      	ldr	r3, [pc, #272]	; (800d744 <_ZN15TestADCViewBaseC1Ev+0x164>)
 800d632:	613b      	str	r3, [r7, #16]
 800d634:	2300      	movs	r3, #0
 800d636:	617b      	str	r3, [r7, #20]
 800d638:	f107 0310 	add.w	r3, r7, #16
 800d63c:	cb0c      	ldmia	r3, {r2, r3}
 800d63e:	6879      	ldr	r1, [r7, #4]
 800d640:	f000 f8b6 	bl	800d7b0 <_ZN8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    imageBg.setXY(0, 0);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	3340      	adds	r3, #64	; 0x40
 800d648:	2200      	movs	r2, #0
 800d64a:	2100      	movs	r1, #0
 800d64c:	4618      	mov	r0, r3
 800d64e:	f7fe fd6d 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    imageBg.setBitmap(touchgfx::Bitmap(BITMAP_GREEN_POLYGONS_BACKGROUND_480X272_ID));
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800d658:	f107 0318 	add.w	r3, r7, #24
 800d65c:	2108      	movs	r1, #8
 800d65e:	4618      	mov	r0, r3
 800d660:	f7fe fce7 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800d664:	f107 0318 	add.w	r3, r7, #24
 800d668:	4619      	mov	r1, r3
 800d66a:	4620      	mov	r0, r4
 800d66c:	f008 fccc 	bl	8016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textArea1.setXY(219, 111);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	336c      	adds	r3, #108	; 0x6c
 800d674:	226f      	movs	r2, #111	; 0x6f
 800d676:	21db      	movs	r1, #219	; 0xdb
 800d678:	4618      	mov	r0, r3
 800d67a:	f7fe fd57 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800d684:	2200      	movs	r2, #0
 800d686:	2100      	movs	r1, #0
 800d688:	2000      	movs	r0, #0
 800d68a:	f7ff f857 	bl	800c73c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800d68e:	4603      	mov	r3, r0
 800d690:	4619      	mov	r1, r3
 800d692:	4620      	mov	r0, r4
 800d694:	f7fe ff3d 	bl	800c512 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	336c      	adds	r3, #108	; 0x6c
 800d69c:	2100      	movs	r1, #0
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7fe ff8a 	bl	800c5b8 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800d6aa:	f107 031c 	add.w	r3, r7, #28
 800d6ae:	2107      	movs	r1, #7
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7fe fec5 	bl	800c440 <_ZN8touchgfx9TypedTextC1Et>
 800d6b6:	8bb9      	ldrh	r1, [r7, #28]
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	f008 fa91 	bl	8015be0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    buttonReturn.setXY(10, 230);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	33a0      	adds	r3, #160	; 0xa0
 800d6c2:	22e6      	movs	r2, #230	; 0xe6
 800d6c4:	210a      	movs	r1, #10
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7fe fd30 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    buttonReturn.setBitmaps(touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID), touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID));
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800d6d2:	f107 0320 	add.w	r3, r7, #32
 800d6d6:	210e      	movs	r1, #14
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7fe fcaa 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800d6de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d6e2:	210e      	movs	r1, #14
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f7fe fca4 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800d6ea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d6ee:	f107 0320 	add.w	r3, r7, #32
 800d6f2:	4619      	mov	r1, r3
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	f008 fa7d 	bl	8015bf4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonReturn.setAction(buttonCallback);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	33d4      	adds	r3, #212	; 0xd4
 800d704:	4619      	mov	r1, r3
 800d706:	4610      	mov	r0, r2
 800d708:	f7ff f9c3 	bl	800ca92 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(imageBg);
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	3340      	adds	r3, #64	; 0x40
 800d712:	4619      	mov	r1, r3
 800d714:	4610      	mov	r0, r2
 800d716:	f7ff f97f 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 800d71a:	687a      	ldr	r2, [r7, #4]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	336c      	adds	r3, #108	; 0x6c
 800d720:	4619      	mov	r1, r3
 800d722:	4610      	mov	r0, r2
 800d724:	f7ff f978 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonReturn);
 800d728:	687a      	ldr	r2, [r7, #4]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	33a0      	adds	r3, #160	; 0xa0
 800d72e:	4619      	mov	r1, r3
 800d730:	4610      	mov	r0, r2
 800d732:	f7ff f971 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	4618      	mov	r0, r3
 800d73a:	372c      	adds	r7, #44	; 0x2c
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd90      	pop	{r4, r7, pc}
 800d740:	08025888 	.word	0x08025888
 800d744:	0800d75d 	.word	0x0800d75d

0800d748 <_ZN15TestADCViewBase11setupScreenEv>:

void TestADCViewBase::setupScreen()
{
 800d748:	b480      	push	{r7}
 800d74a:	b083      	sub	sp, #12
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]

}
 800d750:	bf00      	nop
 800d752:	370c      	adds	r7, #12
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr

0800d75c <_ZN15TestADCViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void TestADCViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b082      	sub	sp, #8
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	6039      	str	r1, [r7, #0]
    if (&src == &buttonReturn)
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	33a0      	adds	r3, #160	; 0xa0
 800d76a:	683a      	ldr	r2, [r7, #0]
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d105      	bne.n	800d77c <_ZN15TestADCViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x20>
    {
        //InteractionButtonReturnClicked
        //When buttonReturn clicked call virtual function
        //Call buttonReturnClicked
        buttonReturnClicked();
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	332c      	adds	r3, #44	; 0x2c
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	4798      	blx	r3
    }
}
 800d77c:	bf00      	nop
 800d77e:	3708      	adds	r7, #8
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <_ZN8touchgfx4ViewI16TestADCPresenterEC1Ev>:
    View() : presenter(0)
 800d784:	b580      	push	{r7, lr}
 800d786:	b082      	sub	sp, #8
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	4618      	mov	r0, r3
 800d790:	f00a fd0c 	bl	80181ac <_ZN8touchgfx6ScreenC1Ev>
 800d794:	4a05      	ldr	r2, [pc, #20]	; (800d7ac <_ZN8touchgfx4ViewI16TestADCPresenterEC1Ev+0x28>)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	601a      	str	r2, [r3, #0]
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2200      	movs	r2, #0
 800d79e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3708      	adds	r7, #8
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	080258d8 	.word	0x080258d8

0800d7b0 <_ZN8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	4639      	mov	r1, r7
 800d7bc:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7ff fc66 	bl	800d094 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800d7c8:	4a08      	ldr	r2, [pc, #32]	; (800d7ec <_ZN8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	68ba      	ldr	r2, [r7, #8]
 800d7d2:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	3308      	adds	r3, #8
 800d7d8:	463a      	mov	r2, r7
 800d7da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d7de:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3710      	adds	r7, #16
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}
 800d7ec:	080258c0 	.word	0x080258c0

0800d7f0 <_ZN8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b082      	sub	sp, #8
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	4a05      	ldr	r2, [pc, #20]	; (800d810 <_ZN8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	601a      	str	r2, [r3, #0]
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	4618      	mov	r0, r3
 800d802:	f7ff fcd7 	bl	800d1b4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	4618      	mov	r0, r3
 800d80a:	3708      	adds	r7, #8
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	080258c0 	.word	0x080258c0

0800d814 <_ZN8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800d814:	b580      	push	{r7, lr}
 800d816:	b082      	sub	sp, #8
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f7ff ffe7 	bl	800d7f0 <_ZN8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800d822:	2110      	movs	r1, #16
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f015 fc12 	bl	802304e <_ZdlPvj>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	4618      	mov	r0, r3
 800d82e:	3708      	adds	r7, #8
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <_ZN8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800d834:	b580      	push	{r7, lr}
 800d836:	b082      	sub	sp, #8
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	687a      	ldr	r2, [r7, #4]
 800d844:	68d2      	ldr	r2, [r2, #12]
 800d846:	1052      	asrs	r2, r2, #1
 800d848:	1898      	adds	r0, r3, r2
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	f003 0301 	and.w	r3, r3, #1
 800d852:	2b00      	cmp	r3, #0
 800d854:	d102      	bne.n	800d85c <_ZN8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	689b      	ldr	r3, [r3, #8]
 800d85a:	e00a      	b.n	800d872 <_ZN8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	685b      	ldr	r3, [r3, #4]
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	68d2      	ldr	r2, [r2, #12]
 800d864:	1052      	asrs	r2, r2, #1
 800d866:	4413      	add	r3, r2
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	6892      	ldr	r2, [r2, #8]
 800d86e:	4413      	add	r3, r2
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	6839      	ldr	r1, [r7, #0]
 800d874:	4798      	blx	r3
    }
 800d876:	bf00      	nop
 800d878:	3708      	adds	r7, #8
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}

0800d87e <_ZNK8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800d87e:	b480      	push	{r7}
 800d880:	b083      	sub	sp, #12
 800d882:	af00      	add	r7, sp, #0
 800d884:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	685b      	ldr	r3, [r3, #4]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d010      	beq.n	800d8b0 <_ZNK8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	689b      	ldr	r3, [r3, #8]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d107      	bne.n	800d8a6 <_ZNK8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	68db      	ldr	r3, [r3, #12]
 800d89a:	f003 0301 	and.w	r3, r3, #1
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d101      	bne.n	800d8a6 <_ZNK8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	e000      	b.n	800d8a8 <_ZNK8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d001      	beq.n	800d8b0 <_ZNK8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	e000      	b.n	800d8b2 <_ZNK8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800d8b0:	2300      	movs	r3, #0
    }
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	370c      	adds	r7, #12
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr
	...

0800d8c0 <_ZN8touchgfx4ViewI20TestCompletPresenterED1Ev>:
class View : public Screen
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b082      	sub	sp, #8
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	4a05      	ldr	r2, [pc, #20]	; (800d8e0 <_ZN8touchgfx4ViewI20TestCompletPresenterED1Ev+0x20>)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	601a      	str	r2, [r3, #0]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7ff f849 	bl	800c968 <_ZN8touchgfx6ScreenD1Ev>
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3708      	adds	r7, #8
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	0802595c 	.word	0x0802595c

0800d8e4 <_ZN8touchgfx4ViewI20TestCompletPresenterED0Ev>:
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f7ff ffe7 	bl	800d8c0 <_ZN8touchgfx4ViewI20TestCompletPresenterED1Ev>
 800d8f2:	2140      	movs	r1, #64	; 0x40
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f015 fbaa 	bl	802304e <_ZdlPvj>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3708      	adds	r7, #8
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}

0800d904 <_ZN19TestCompletViewBaseD1Ev>:

class TestCompletViewBase : public touchgfx::View<TestCompletPresenter>
{
public:
    TestCompletViewBase();
    virtual ~TestCompletViewBase() {}
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	4a0f      	ldr	r2, [pc, #60]	; (800d94c <_ZN19TestCompletViewBaseD1Ev+0x48>)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	601a      	str	r2, [r3, #0]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	33d4      	adds	r3, #212	; 0xd4
 800d916:	4618      	mov	r0, r3
 800d918:	f000 f93c 	bl	800db94 <_ZN8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	33a0      	adds	r3, #160	; 0xa0
 800d920:	4618      	mov	r0, r3
 800d922:	f7ff f8e7 	bl	800caf4 <_ZN8touchgfx6ButtonD1Ev>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	336c      	adds	r3, #108	; 0x6c
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7fe fe60 	bl	800c5f0 <_ZN8touchgfx8TextAreaD1Ev>
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	3340      	adds	r3, #64	; 0x40
 800d934:	4618      	mov	r0, r3
 800d936:	f7fe ffd3 	bl	800c8e0 <_ZN8touchgfx5ImageD1Ev>
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7ff ffbf 	bl	800d8c0 <_ZN8touchgfx4ViewI20TestCompletPresenterED1Ev>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	4618      	mov	r0, r3
 800d946:	3708      	adds	r7, #8
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}
 800d94c:	0802590c 	.word	0x0802590c

0800d950 <_ZN19TestCompletViewBaseD0Ev>:
 800d950:	b580      	push	{r7, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f7ff ffd3 	bl	800d904 <_ZN19TestCompletViewBaseD1Ev>
 800d95e:	21e4      	movs	r1, #228	; 0xe4
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f015 fb74 	bl	802304e <_ZdlPvj>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	4618      	mov	r0, r3
 800d96a:	3708      	adds	r7, #8
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}

0800d970 <_ZN19TestCompletViewBase19buttonreturnClickedEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void buttonreturnClicked()
 800d970:	b480      	push	{r7}
 800d972:	b083      	sub	sp, #12
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in TestComplet
    }
 800d978:	bf00      	nop
 800d97a:	370c      	adds	r7, #12
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr

0800d984 <_ZN19TestCompletViewBaseC1Ev>:
#include <gui_generated/testcomplet_screen/TestCompletViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

TestCompletViewBase::TestCompletViewBase() :
 800d984:	b590      	push	{r4, r7, lr}
 800d986:	b08b      	sub	sp, #44	; 0x2c
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &TestCompletViewBase::buttonCallbackHandler)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	4618      	mov	r0, r3
 800d990:	f000 f8ca 	bl	800db28 <_ZN8touchgfx4ViewI20TestCompletPresenterEC1Ev>
 800d994:	4a53      	ldr	r2, [pc, #332]	; (800dae4 <_ZN19TestCompletViewBaseC1Ev+0x160>)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	601a      	str	r2, [r3, #0]
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800d9a0:	f107 030c 	add.w	r3, r7, #12
 800d9a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f7fe fb42 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800d9ae:	f107 030c 	add.w	r3, r7, #12
 800d9b2:	4619      	mov	r1, r3
 800d9b4:	4620      	mov	r0, r4
 800d9b6:	f7fe fd21 	bl	800c3fc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	336c      	adds	r3, #108	; 0x6c
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f7fe fd64 	bl	800c48c <_ZN8touchgfx8TextAreaC1Ev>
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	33a0      	adds	r3, #160	; 0xa0
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f7ff fd83 	bl	800d4d4 <_ZN8touchgfx6ButtonC1Ev>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800d9d4:	4b44      	ldr	r3, [pc, #272]	; (800dae8 <_ZN19TestCompletViewBaseC1Ev+0x164>)
 800d9d6:	613b      	str	r3, [r7, #16]
 800d9d8:	2300      	movs	r3, #0
 800d9da:	617b      	str	r3, [r7, #20]
 800d9dc:	f107 0310 	add.w	r3, r7, #16
 800d9e0:	cb0c      	ldmia	r3, {r2, r3}
 800d9e2:	6879      	ldr	r1, [r7, #4]
 800d9e4:	f000 f8b6 	bl	800db54 <_ZN8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    imageBg.setXY(0, 0);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	3340      	adds	r3, #64	; 0x40
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	2100      	movs	r1, #0
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f7fe fb9b 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    imageBg.setBitmap(touchgfx::Bitmap(BITMAP_GREEN_POLYGONS_BACKGROUND_480X272_ID));
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800d9fc:	f107 0318 	add.w	r3, r7, #24
 800da00:	2108      	movs	r1, #8
 800da02:	4618      	mov	r0, r3
 800da04:	f7fe fb15 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800da08:	f107 0318 	add.w	r3, r7, #24
 800da0c:	4619      	mov	r1, r3
 800da0e:	4620      	mov	r0, r4
 800da10:	f008 fafa 	bl	8016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textArea1.setXY(199, 111);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	336c      	adds	r3, #108	; 0x6c
 800da18:	226f      	movs	r2, #111	; 0x6f
 800da1a:	21c7      	movs	r1, #199	; 0xc7
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7fe fb85 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800da28:	2200      	movs	r2, #0
 800da2a:	2100      	movs	r1, #0
 800da2c:	2000      	movs	r0, #0
 800da2e:	f7fe fe85 	bl	800c73c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800da32:	4603      	mov	r3, r0
 800da34:	4619      	mov	r1, r3
 800da36:	4620      	mov	r0, r4
 800da38:	f7fe fd6b 	bl	800c512 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	336c      	adds	r3, #108	; 0x6c
 800da40:	2100      	movs	r1, #0
 800da42:	4618      	mov	r0, r3
 800da44:	f7fe fdb8 	bl	800c5b8 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800da4e:	f107 031c 	add.w	r3, r7, #28
 800da52:	2108      	movs	r1, #8
 800da54:	4618      	mov	r0, r3
 800da56:	f7fe fcf3 	bl	800c440 <_ZN8touchgfx9TypedTextC1Et>
 800da5a:	8bb9      	ldrh	r1, [r7, #28]
 800da5c:	4620      	mov	r0, r4
 800da5e:	f008 f8bf 	bl	8015be0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    buttonReturn.setXY(10, 230);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	33a0      	adds	r3, #160	; 0xa0
 800da66:	22e6      	movs	r2, #230	; 0xe6
 800da68:	210a      	movs	r1, #10
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7fe fb5e 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    buttonReturn.setBitmaps(touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID), touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID));
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800da76:	f107 0320 	add.w	r3, r7, #32
 800da7a:	210e      	movs	r1, #14
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7fe fad8 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800da82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800da86:	210e      	movs	r1, #14
 800da88:	4618      	mov	r0, r3
 800da8a:	f7fe fad2 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800da8e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800da92:	f107 0320 	add.w	r3, r7, #32
 800da96:	4619      	mov	r1, r3
 800da98:	4620      	mov	r0, r4
 800da9a:	f008 f8ab 	bl	8015bf4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonReturn.setAction(buttonCallback);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	33d4      	adds	r3, #212	; 0xd4
 800daa8:	4619      	mov	r1, r3
 800daaa:	4610      	mov	r0, r2
 800daac:	f7fe fff1 	bl	800ca92 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(imageBg);
 800dab0:	687a      	ldr	r2, [r7, #4]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	3340      	adds	r3, #64	; 0x40
 800dab6:	4619      	mov	r1, r3
 800dab8:	4610      	mov	r0, r2
 800daba:	f7fe ffad 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 800dabe:	687a      	ldr	r2, [r7, #4]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	336c      	adds	r3, #108	; 0x6c
 800dac4:	4619      	mov	r1, r3
 800dac6:	4610      	mov	r0, r2
 800dac8:	f7fe ffa6 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonReturn);
 800dacc:	687a      	ldr	r2, [r7, #4]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	33a0      	adds	r3, #160	; 0xa0
 800dad2:	4619      	mov	r1, r3
 800dad4:	4610      	mov	r0, r2
 800dad6:	f7fe ff9f 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	4618      	mov	r0, r3
 800dade:	372c      	adds	r7, #44	; 0x2c
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd90      	pop	{r4, r7, pc}
 800dae4:	0802590c 	.word	0x0802590c
 800dae8:	0800db01 	.word	0x0800db01

0800daec <_ZN19TestCompletViewBase11setupScreenEv>:

void TestCompletViewBase::setupScreen()
{
 800daec:	b480      	push	{r7}
 800daee:	b083      	sub	sp, #12
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]

}
 800daf4:	bf00      	nop
 800daf6:	370c      	adds	r7, #12
 800daf8:	46bd      	mov	sp, r7
 800dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafe:	4770      	bx	lr

0800db00 <_ZN19TestCompletViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void TestCompletViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b082      	sub	sp, #8
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	6039      	str	r1, [r7, #0]
    if (&src == &buttonReturn)
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	33a0      	adds	r3, #160	; 0xa0
 800db0e:	683a      	ldr	r2, [r7, #0]
 800db10:	429a      	cmp	r2, r3
 800db12:	d105      	bne.n	800db20 <_ZN19TestCompletViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x20>
    {
        //InteractionbuttonreturnClicked
        //When buttonReturn clicked call virtual function
        //Call buttonreturnClicked
        buttonreturnClicked();
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	332c      	adds	r3, #44	; 0x2c
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	4798      	blx	r3
    }
}
 800db20:	bf00      	nop
 800db22:	3708      	adds	r7, #8
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <_ZN8touchgfx4ViewI20TestCompletPresenterEC1Ev>:
    View() : presenter(0)
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	4618      	mov	r0, r3
 800db34:	f00a fb3a 	bl	80181ac <_ZN8touchgfx6ScreenC1Ev>
 800db38:	4a05      	ldr	r2, [pc, #20]	; (800db50 <_ZN8touchgfx4ViewI20TestCompletPresenterEC1Ev+0x28>)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	601a      	str	r2, [r3, #0]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2200      	movs	r2, #0
 800db42:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	4618      	mov	r0, r3
 800db48:	3708      	adds	r7, #8
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
 800db4e:	bf00      	nop
 800db50:	0802595c 	.word	0x0802595c

0800db54 <_ZN8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800db54:	b580      	push	{r7, lr}
 800db56:	b084      	sub	sp, #16
 800db58:	af00      	add	r7, sp, #0
 800db5a:	60f8      	str	r0, [r7, #12]
 800db5c:	60b9      	str	r1, [r7, #8]
 800db5e:	4639      	mov	r1, r7
 800db60:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	4618      	mov	r0, r3
 800db68:	f7ff fa94 	bl	800d094 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800db6c:	4a08      	ldr	r2, [pc, #32]	; (800db90 <_ZN8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	68ba      	ldr	r2, [r7, #8]
 800db76:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	3308      	adds	r3, #8
 800db7c:	463a      	mov	r2, r7
 800db7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db82:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	4618      	mov	r0, r3
 800db8a:	3710      	adds	r7, #16
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	08025944 	.word	0x08025944

0800db94 <_ZN8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	4a05      	ldr	r2, [pc, #20]	; (800dbb4 <_ZN8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	601a      	str	r2, [r3, #0]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7ff fb05 	bl	800d1b4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	4618      	mov	r0, r3
 800dbae:	3708      	adds	r7, #8
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}
 800dbb4:	08025944 	.word	0x08025944

0800dbb8 <_ZN8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f7ff ffe7 	bl	800db94 <_ZN8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800dbc6:	2110      	movs	r1, #16
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f015 fa40 	bl	802304e <_ZdlPvj>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3708      	adds	r7, #8
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <_ZN8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	68d2      	ldr	r2, [r2, #12]
 800dbea:	1052      	asrs	r2, r2, #1
 800dbec:	1898      	adds	r0, r3, r2
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	68db      	ldr	r3, [r3, #12]
 800dbf2:	f003 0301 	and.w	r3, r3, #1
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d102      	bne.n	800dc00 <_ZN8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	689b      	ldr	r3, [r3, #8]
 800dbfe:	e00a      	b.n	800dc16 <_ZN8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	687a      	ldr	r2, [r7, #4]
 800dc06:	68d2      	ldr	r2, [r2, #12]
 800dc08:	1052      	asrs	r2, r2, #1
 800dc0a:	4413      	add	r3, r2
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	687a      	ldr	r2, [r7, #4]
 800dc10:	6892      	ldr	r2, [r2, #8]
 800dc12:	4413      	add	r3, r2
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	6839      	ldr	r1, [r7, #0]
 800dc18:	4798      	blx	r3
    }
 800dc1a:	bf00      	nop
 800dc1c:	3708      	adds	r7, #8
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}

0800dc22 <_ZNK8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800dc22:	b480      	push	{r7}
 800dc24:	b083      	sub	sp, #12
 800dc26:	af00      	add	r7, sp, #0
 800dc28:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	685b      	ldr	r3, [r3, #4]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d010      	beq.n	800dc54 <_ZNK8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	689b      	ldr	r3, [r3, #8]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d107      	bne.n	800dc4a <_ZNK8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	68db      	ldr	r3, [r3, #12]
 800dc3e:	f003 0301 	and.w	r3, r3, #1
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d101      	bne.n	800dc4a <_ZNK8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800dc46:	2301      	movs	r3, #1
 800dc48:	e000      	b.n	800dc4c <_ZNK8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d001      	beq.n	800dc54 <_ZNK8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800dc50:	2301      	movs	r3, #1
 800dc52:	e000      	b.n	800dc56 <_ZNK8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800dc54:	2300      	movs	r3, #0
    }
 800dc56:	4618      	mov	r0, r3
 800dc58:	370c      	adds	r7, #12
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc60:	4770      	bx	lr
	...

0800dc64 <_ZN8touchgfx4ViewI22TestGirouettePresenterED1Ev>:
class View : public Screen
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b082      	sub	sp, #8
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	4a05      	ldr	r2, [pc, #20]	; (800dc84 <_ZN8touchgfx4ViewI22TestGirouettePresenterED1Ev+0x20>)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	601a      	str	r2, [r3, #0]
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7fe fe77 	bl	800c968 <_ZN8touchgfx6ScreenD1Ev>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3708      	adds	r7, #8
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}
 800dc84:	080259e0 	.word	0x080259e0

0800dc88 <_ZN8touchgfx4ViewI22TestGirouettePresenterED0Ev>:
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f7ff ffe7 	bl	800dc64 <_ZN8touchgfx4ViewI22TestGirouettePresenterED1Ev>
 800dc96:	2140      	movs	r1, #64	; 0x40
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f015 f9d8 	bl	802304e <_ZdlPvj>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	4618      	mov	r0, r3
 800dca2:	3708      	adds	r7, #8
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <_ZN21TestGirouetteViewBaseD1Ev>:

class TestGirouetteViewBase : public touchgfx::View<TestGirouettePresenter>
{
public:
    TestGirouetteViewBase();
    virtual ~TestGirouetteViewBase() {}
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b082      	sub	sp, #8
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	4a0f      	ldr	r2, [pc, #60]	; (800dcf0 <_ZN21TestGirouetteViewBaseD1Ev+0x48>)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	601a      	str	r2, [r3, #0]
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	33d4      	adds	r3, #212	; 0xd4
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f000 f93c 	bl	800df38 <_ZN8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	33a0      	adds	r3, #160	; 0xa0
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7fe ff15 	bl	800caf4 <_ZN8touchgfx6ButtonD1Ev>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	336c      	adds	r3, #108	; 0x6c
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7fe fc8e 	bl	800c5f0 <_ZN8touchgfx8TextAreaD1Ev>
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	3340      	adds	r3, #64	; 0x40
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f7fe fe01 	bl	800c8e0 <_ZN8touchgfx5ImageD1Ev>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7ff ffbf 	bl	800dc64 <_ZN8touchgfx4ViewI22TestGirouettePresenterED1Ev>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	4618      	mov	r0, r3
 800dcea:	3708      	adds	r7, #8
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}
 800dcf0:	08025990 	.word	0x08025990

0800dcf4 <_ZN21TestGirouetteViewBaseD0Ev>:
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b082      	sub	sp, #8
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f7ff ffd3 	bl	800dca8 <_ZN21TestGirouetteViewBaseD1Ev>
 800dd02:	21e4      	movs	r1, #228	; 0xe4
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f015 f9a2 	bl	802304e <_ZdlPvj>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3708      	adds	r7, #8
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}

0800dd14 <_ZN21TestGirouetteViewBase19buttonreturnClickedEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void buttonreturnClicked()
 800dd14:	b480      	push	{r7}
 800dd16:	b083      	sub	sp, #12
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in TestGirouette
    }
 800dd1c:	bf00      	nop
 800dd1e:	370c      	adds	r7, #12
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr

0800dd28 <_ZN21TestGirouetteViewBaseC1Ev>:
#include <gui_generated/testgirouette_screen/TestGirouetteViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

TestGirouetteViewBase::TestGirouetteViewBase() :
 800dd28:	b590      	push	{r4, r7, lr}
 800dd2a:	b08b      	sub	sp, #44	; 0x2c
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &TestGirouetteViewBase::buttonCallbackHandler)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	4618      	mov	r0, r3
 800dd34:	f000 f8ca 	bl	800decc <_ZN8touchgfx4ViewI22TestGirouettePresenterEC1Ev>
 800dd38:	4a53      	ldr	r2, [pc, #332]	; (800de88 <_ZN21TestGirouetteViewBaseC1Ev+0x160>)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	601a      	str	r2, [r3, #0]
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800dd44:	f107 030c 	add.w	r3, r7, #12
 800dd48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f7fe f970 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800dd52:	f107 030c 	add.w	r3, r7, #12
 800dd56:	4619      	mov	r1, r3
 800dd58:	4620      	mov	r0, r4
 800dd5a:	f7fe fb4f 	bl	800c3fc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	336c      	adds	r3, #108	; 0x6c
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7fe fb92 	bl	800c48c <_ZN8touchgfx8TextAreaC1Ev>
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	33a0      	adds	r3, #160	; 0xa0
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f7ff fbb1 	bl	800d4d4 <_ZN8touchgfx6ButtonC1Ev>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800dd78:	4b44      	ldr	r3, [pc, #272]	; (800de8c <_ZN21TestGirouetteViewBaseC1Ev+0x164>)
 800dd7a:	613b      	str	r3, [r7, #16]
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	617b      	str	r3, [r7, #20]
 800dd80:	f107 0310 	add.w	r3, r7, #16
 800dd84:	cb0c      	ldmia	r3, {r2, r3}
 800dd86:	6879      	ldr	r1, [r7, #4]
 800dd88:	f000 f8b6 	bl	800def8 <_ZN8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    imageBg.setXY(0, 0);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	3340      	adds	r3, #64	; 0x40
 800dd90:	2200      	movs	r2, #0
 800dd92:	2100      	movs	r1, #0
 800dd94:	4618      	mov	r0, r3
 800dd96:	f7fe f9c9 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    imageBg.setBitmap(touchgfx::Bitmap(BITMAP_GREEN_POLYGONS_BACKGROUND_480X272_ID));
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800dda0:	f107 0318 	add.w	r3, r7, #24
 800dda4:	2108      	movs	r1, #8
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7fe f943 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800ddac:	f107 0318 	add.w	r3, r7, #24
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	4620      	mov	r0, r4
 800ddb4:	f008 f928 	bl	8016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textArea1.setXY(193, 111);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	336c      	adds	r3, #108	; 0x6c
 800ddbc:	226f      	movs	r2, #111	; 0x6f
 800ddbe:	21c1      	movs	r1, #193	; 0xc1
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7fe f9b3 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800ddcc:	2200      	movs	r2, #0
 800ddce:	2100      	movs	r1, #0
 800ddd0:	2000      	movs	r0, #0
 800ddd2:	f7fe fcb3 	bl	800c73c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	4619      	mov	r1, r3
 800ddda:	4620      	mov	r0, r4
 800dddc:	f7fe fb99 	bl	800c512 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	336c      	adds	r3, #108	; 0x6c
 800dde4:	2100      	movs	r1, #0
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7fe fbe6 	bl	800c5b8 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800ddf2:	f107 031c 	add.w	r3, r7, #28
 800ddf6:	2109      	movs	r1, #9
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f7fe fb21 	bl	800c440 <_ZN8touchgfx9TypedTextC1Et>
 800ddfe:	8bb9      	ldrh	r1, [r7, #28]
 800de00:	4620      	mov	r0, r4
 800de02:	f007 feed 	bl	8015be0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    buttonReturn.setXY(10, 230);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	33a0      	adds	r3, #160	; 0xa0
 800de0a:	22e6      	movs	r2, #230	; 0xe6
 800de0c:	210a      	movs	r1, #10
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fe f98c 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    buttonReturn.setBitmaps(touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID), touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID));
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800de1a:	f107 0320 	add.w	r3, r7, #32
 800de1e:	210e      	movs	r1, #14
 800de20:	4618      	mov	r0, r3
 800de22:	f7fe f906 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800de26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de2a:	210e      	movs	r1, #14
 800de2c:	4618      	mov	r0, r3
 800de2e:	f7fe f900 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800de32:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800de36:	f107 0320 	add.w	r3, r7, #32
 800de3a:	4619      	mov	r1, r3
 800de3c:	4620      	mov	r0, r4
 800de3e:	f007 fed9 	bl	8015bf4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonReturn.setAction(buttonCallback);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	33d4      	adds	r3, #212	; 0xd4
 800de4c:	4619      	mov	r1, r3
 800de4e:	4610      	mov	r0, r2
 800de50:	f7fe fe1f 	bl	800ca92 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(imageBg);
 800de54:	687a      	ldr	r2, [r7, #4]
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	3340      	adds	r3, #64	; 0x40
 800de5a:	4619      	mov	r1, r3
 800de5c:	4610      	mov	r0, r2
 800de5e:	f7fe fddb 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 800de62:	687a      	ldr	r2, [r7, #4]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	336c      	adds	r3, #108	; 0x6c
 800de68:	4619      	mov	r1, r3
 800de6a:	4610      	mov	r0, r2
 800de6c:	f7fe fdd4 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonReturn);
 800de70:	687a      	ldr	r2, [r7, #4]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	33a0      	adds	r3, #160	; 0xa0
 800de76:	4619      	mov	r1, r3
 800de78:	4610      	mov	r0, r2
 800de7a:	f7fe fdcd 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4618      	mov	r0, r3
 800de82:	372c      	adds	r7, #44	; 0x2c
 800de84:	46bd      	mov	sp, r7
 800de86:	bd90      	pop	{r4, r7, pc}
 800de88:	08025990 	.word	0x08025990
 800de8c:	0800dea5 	.word	0x0800dea5

0800de90 <_ZN21TestGirouetteViewBase11setupScreenEv>:

void TestGirouetteViewBase::setupScreen()
{
 800de90:	b480      	push	{r7}
 800de92:	b083      	sub	sp, #12
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]

}
 800de98:	bf00      	nop
 800de9a:	370c      	adds	r7, #12
 800de9c:	46bd      	mov	sp, r7
 800de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea2:	4770      	bx	lr

0800dea4 <_ZN21TestGirouetteViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void TestGirouetteViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	6039      	str	r1, [r7, #0]
    if (&src == &buttonReturn)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	33a0      	adds	r3, #160	; 0xa0
 800deb2:	683a      	ldr	r2, [r7, #0]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d105      	bne.n	800dec4 <_ZN21TestGirouetteViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x20>
    {
        //InteractionButtonReturnClicked
        //When buttonReturn clicked call virtual function
        //Call buttonreturnClicked
        buttonreturnClicked();
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	332c      	adds	r3, #44	; 0x2c
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	4798      	blx	r3
    }
}
 800dec4:	bf00      	nop
 800dec6:	3708      	adds	r7, #8
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}

0800decc <_ZN8touchgfx4ViewI22TestGirouettePresenterEC1Ev>:
    View() : presenter(0)
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	4618      	mov	r0, r3
 800ded8:	f00a f968 	bl	80181ac <_ZN8touchgfx6ScreenC1Ev>
 800dedc:	4a05      	ldr	r2, [pc, #20]	; (800def4 <_ZN8touchgfx4ViewI22TestGirouettePresenterEC1Ev+0x28>)
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	601a      	str	r2, [r3, #0]
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2200      	movs	r2, #0
 800dee6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	4618      	mov	r0, r3
 800deec:	3708      	adds	r7, #8
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}
 800def2:	bf00      	nop
 800def4:	080259e0 	.word	0x080259e0

0800def8 <_ZN8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800def8:	b580      	push	{r7, lr}
 800defa:	b084      	sub	sp, #16
 800defc:	af00      	add	r7, sp, #0
 800defe:	60f8      	str	r0, [r7, #12]
 800df00:	60b9      	str	r1, [r7, #8]
 800df02:	4639      	mov	r1, r7
 800df04:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	4618      	mov	r0, r3
 800df0c:	f7ff f8c2 	bl	800d094 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800df10:	4a08      	ldr	r2, [pc, #32]	; (800df34 <_ZN8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	68ba      	ldr	r2, [r7, #8]
 800df1a:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	3308      	adds	r3, #8
 800df20:	463a      	mov	r2, r7
 800df22:	e892 0003 	ldmia.w	r2, {r0, r1}
 800df26:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	4618      	mov	r0, r3
 800df2e:	3710      	adds	r7, #16
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}
 800df34:	080259c8 	.word	0x080259c8

0800df38 <_ZN8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800df38:	b580      	push	{r7, lr}
 800df3a:	b082      	sub	sp, #8
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	4a05      	ldr	r2, [pc, #20]	; (800df58 <_ZN8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	601a      	str	r2, [r3, #0]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	4618      	mov	r0, r3
 800df4a:	f7ff f933 	bl	800d1b4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	4618      	mov	r0, r3
 800df52:	3708      	adds	r7, #8
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}
 800df58:	080259c8 	.word	0x080259c8

0800df5c <_ZN8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b082      	sub	sp, #8
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f7ff ffe7 	bl	800df38 <_ZN8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800df6a:	2110      	movs	r1, #16
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f015 f86e 	bl	802304e <_ZdlPvj>
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	4618      	mov	r0, r3
 800df76:	3708      	adds	r7, #8
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <_ZN8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b082      	sub	sp, #8
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	685b      	ldr	r3, [r3, #4]
 800df8a:	687a      	ldr	r2, [r7, #4]
 800df8c:	68d2      	ldr	r2, [r2, #12]
 800df8e:	1052      	asrs	r2, r2, #1
 800df90:	1898      	adds	r0, r3, r2
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	68db      	ldr	r3, [r3, #12]
 800df96:	f003 0301 	and.w	r3, r3, #1
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d102      	bne.n	800dfa4 <_ZN8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	689b      	ldr	r3, [r3, #8]
 800dfa2:	e00a      	b.n	800dfba <_ZN8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	685b      	ldr	r3, [r3, #4]
 800dfa8:	687a      	ldr	r2, [r7, #4]
 800dfaa:	68d2      	ldr	r2, [r2, #12]
 800dfac:	1052      	asrs	r2, r2, #1
 800dfae:	4413      	add	r3, r2
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	6892      	ldr	r2, [r2, #8]
 800dfb6:	4413      	add	r3, r2
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	6839      	ldr	r1, [r7, #0]
 800dfbc:	4798      	blx	r3
    }
 800dfbe:	bf00      	nop
 800dfc0:	3708      	adds	r7, #8
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}

0800dfc6 <_ZNK8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800dfc6:	b480      	push	{r7}
 800dfc8:	b083      	sub	sp, #12
 800dfca:	af00      	add	r7, sp, #0
 800dfcc:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d010      	beq.n	800dff8 <_ZNK8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	689b      	ldr	r3, [r3, #8]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d107      	bne.n	800dfee <_ZNK8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	68db      	ldr	r3, [r3, #12]
 800dfe2:	f003 0301 	and.w	r3, r3, #1
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d101      	bne.n	800dfee <_ZNK8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800dfea:	2301      	movs	r3, #1
 800dfec:	e000      	b.n	800dff0 <_ZNK8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800dfee:	2300      	movs	r3, #0
 800dff0:	2b01      	cmp	r3, #1
 800dff2:	d001      	beq.n	800dff8 <_ZNK8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800dff4:	2301      	movs	r3, #1
 800dff6:	e000      	b.n	800dffa <_ZNK8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800dff8:	2300      	movs	r3, #0
    }
 800dffa:	4618      	mov	r0, r3
 800dffc:	370c      	adds	r7, #12
 800dffe:	46bd      	mov	sp, r7
 800e000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e004:	4770      	bx	lr
	...

0800e008 <_ZN8touchgfx4ViewI19TestI2CSPIPresenterED1Ev>:
class View : public Screen
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	4a05      	ldr	r2, [pc, #20]	; (800e028 <_ZN8touchgfx4ViewI19TestI2CSPIPresenterED1Ev+0x20>)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	601a      	str	r2, [r3, #0]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	4618      	mov	r0, r3
 800e01a:	f7fe fca5 	bl	800c968 <_ZN8touchgfx6ScreenD1Ev>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	4618      	mov	r0, r3
 800e022:	3708      	adds	r7, #8
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}
 800e028:	08025a64 	.word	0x08025a64

0800e02c <_ZN8touchgfx4ViewI19TestI2CSPIPresenterED0Ev>:
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b082      	sub	sp, #8
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f7ff ffe7 	bl	800e008 <_ZN8touchgfx4ViewI19TestI2CSPIPresenterED1Ev>
 800e03a:	2140      	movs	r1, #64	; 0x40
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f015 f806 	bl	802304e <_ZdlPvj>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	4618      	mov	r0, r3
 800e046:	3708      	adds	r7, #8
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}

0800e04c <_ZN18TestI2CSPIViewBaseD1Ev>:

class TestI2CSPIViewBase : public touchgfx::View<TestI2CSPIPresenter>
{
public:
    TestI2CSPIViewBase();
    virtual ~TestI2CSPIViewBase() {}
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b082      	sub	sp, #8
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	4a0f      	ldr	r2, [pc, #60]	; (800e094 <_ZN18TestI2CSPIViewBaseD1Ev+0x48>)
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	601a      	str	r2, [r3, #0]
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	33d4      	adds	r3, #212	; 0xd4
 800e05e:	4618      	mov	r0, r3
 800e060:	f000 f93c 	bl	800e2dc <_ZN8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	33a0      	adds	r3, #160	; 0xa0
 800e068:	4618      	mov	r0, r3
 800e06a:	f7fe fd43 	bl	800caf4 <_ZN8touchgfx6ButtonD1Ev>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	336c      	adds	r3, #108	; 0x6c
 800e072:	4618      	mov	r0, r3
 800e074:	f7fe fabc 	bl	800c5f0 <_ZN8touchgfx8TextAreaD1Ev>
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	3340      	adds	r3, #64	; 0x40
 800e07c:	4618      	mov	r0, r3
 800e07e:	f7fe fc2f 	bl	800c8e0 <_ZN8touchgfx5ImageD1Ev>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	4618      	mov	r0, r3
 800e086:	f7ff ffbf 	bl	800e008 <_ZN8touchgfx4ViewI19TestI2CSPIPresenterED1Ev>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	4618      	mov	r0, r3
 800e08e:	3708      	adds	r7, #8
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}
 800e094:	08025a14 	.word	0x08025a14

0800e098 <_ZN18TestI2CSPIViewBaseD0Ev>:
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f7ff ffd3 	bl	800e04c <_ZN18TestI2CSPIViewBaseD1Ev>
 800e0a6:	21e4      	movs	r1, #228	; 0xe4
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f014 ffd0 	bl	802304e <_ZdlPvj>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3708      	adds	r7, #8
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}

0800e0b8 <_ZN18TestI2CSPIViewBase19buttonReturnClickedEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void buttonReturnClicked()
 800e0b8:	b480      	push	{r7}
 800e0ba:	b083      	sub	sp, #12
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in TestI2CSPI
    }
 800e0c0:	bf00      	nop
 800e0c2:	370c      	adds	r7, #12
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ca:	4770      	bx	lr

0800e0cc <_ZN18TestI2CSPIViewBaseC1Ev>:
#include <gui_generated/testi2cspi_screen/TestI2CSPIViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

TestI2CSPIViewBase::TestI2CSPIViewBase() :
 800e0cc:	b590      	push	{r4, r7, lr}
 800e0ce:	b08b      	sub	sp, #44	; 0x2c
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &TestI2CSPIViewBase::buttonCallbackHandler)
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f000 f8ca 	bl	800e270 <_ZN8touchgfx4ViewI19TestI2CSPIPresenterEC1Ev>
 800e0dc:	4a53      	ldr	r2, [pc, #332]	; (800e22c <_ZN18TestI2CSPIViewBaseC1Ev+0x160>)
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	601a      	str	r2, [r3, #0]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800e0e8:	f107 030c 	add.w	r3, r7, #12
 800e0ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f7fd ff9e 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800e0f6:	f107 030c 	add.w	r3, r7, #12
 800e0fa:	4619      	mov	r1, r3
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	f7fe f97d 	bl	800c3fc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	336c      	adds	r3, #108	; 0x6c
 800e106:	4618      	mov	r0, r3
 800e108:	f7fe f9c0 	bl	800c48c <_ZN8touchgfx8TextAreaC1Ev>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	33a0      	adds	r3, #160	; 0xa0
 800e110:	4618      	mov	r0, r3
 800e112:	f7ff f9df 	bl	800d4d4 <_ZN8touchgfx6ButtonC1Ev>
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800e11c:	4b44      	ldr	r3, [pc, #272]	; (800e230 <_ZN18TestI2CSPIViewBaseC1Ev+0x164>)
 800e11e:	613b      	str	r3, [r7, #16]
 800e120:	2300      	movs	r3, #0
 800e122:	617b      	str	r3, [r7, #20]
 800e124:	f107 0310 	add.w	r3, r7, #16
 800e128:	cb0c      	ldmia	r3, {r2, r3}
 800e12a:	6879      	ldr	r1, [r7, #4]
 800e12c:	f000 f8b6 	bl	800e29c <_ZN8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    imageBg.setXY(0, 0);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	3340      	adds	r3, #64	; 0x40
 800e134:	2200      	movs	r2, #0
 800e136:	2100      	movs	r1, #0
 800e138:	4618      	mov	r0, r3
 800e13a:	f7fd fff7 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    imageBg.setBitmap(touchgfx::Bitmap(BITMAP_GREEN_POLYGONS_BACKGROUND_480X272_ID));
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800e144:	f107 0318 	add.w	r3, r7, #24
 800e148:	2108      	movs	r1, #8
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7fd ff71 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800e150:	f107 0318 	add.w	r3, r7, #24
 800e154:	4619      	mov	r1, r3
 800e156:	4620      	mov	r0, r4
 800e158:	f007 ff56 	bl	8016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textArea1.setXY(194, 111);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	336c      	adds	r3, #108	; 0x6c
 800e160:	226f      	movs	r2, #111	; 0x6f
 800e162:	21c2      	movs	r1, #194	; 0xc2
 800e164:	4618      	mov	r0, r3
 800e166:	f7fd ffe1 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800e170:	2200      	movs	r2, #0
 800e172:	2100      	movs	r1, #0
 800e174:	2000      	movs	r0, #0
 800e176:	f7fe fae1 	bl	800c73c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800e17a:	4603      	mov	r3, r0
 800e17c:	4619      	mov	r1, r3
 800e17e:	4620      	mov	r0, r4
 800e180:	f7fe f9c7 	bl	800c512 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	336c      	adds	r3, #108	; 0x6c
 800e188:	2100      	movs	r1, #0
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7fe fa14 	bl	800c5b8 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID10));
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800e196:	f107 031c 	add.w	r3, r7, #28
 800e19a:	2105      	movs	r1, #5
 800e19c:	4618      	mov	r0, r3
 800e19e:	f7fe f94f 	bl	800c440 <_ZN8touchgfx9TypedTextC1Et>
 800e1a2:	8bb9      	ldrh	r1, [r7, #28]
 800e1a4:	4620      	mov	r0, r4
 800e1a6:	f007 fd1b 	bl	8015be0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    buttonReturn.setXY(10, 230);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	33a0      	adds	r3, #160	; 0xa0
 800e1ae:	22e6      	movs	r2, #230	; 0xe6
 800e1b0:	210a      	movs	r1, #10
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7fd ffba 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    buttonReturn.setBitmaps(touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID), touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID));
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800e1be:	f107 0320 	add.w	r3, r7, #32
 800e1c2:	210e      	movs	r1, #14
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7fd ff34 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800e1ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e1ce:	210e      	movs	r1, #14
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f7fd ff2e 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800e1d6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e1da:	f107 0320 	add.w	r3, r7, #32
 800e1de:	4619      	mov	r1, r3
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	f007 fd07 	bl	8015bf4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonReturn.setAction(buttonCallback);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	33d4      	adds	r3, #212	; 0xd4
 800e1f0:	4619      	mov	r1, r3
 800e1f2:	4610      	mov	r0, r2
 800e1f4:	f7fe fc4d 	bl	800ca92 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(imageBg);
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	3340      	adds	r3, #64	; 0x40
 800e1fe:	4619      	mov	r1, r3
 800e200:	4610      	mov	r0, r2
 800e202:	f7fe fc09 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 800e206:	687a      	ldr	r2, [r7, #4]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	336c      	adds	r3, #108	; 0x6c
 800e20c:	4619      	mov	r1, r3
 800e20e:	4610      	mov	r0, r2
 800e210:	f7fe fc02 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonReturn);
 800e214:	687a      	ldr	r2, [r7, #4]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	33a0      	adds	r3, #160	; 0xa0
 800e21a:	4619      	mov	r1, r3
 800e21c:	4610      	mov	r0, r2
 800e21e:	f7fe fbfb 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	4618      	mov	r0, r3
 800e226:	372c      	adds	r7, #44	; 0x2c
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd90      	pop	{r4, r7, pc}
 800e22c:	08025a14 	.word	0x08025a14
 800e230:	0800e249 	.word	0x0800e249

0800e234 <_ZN18TestI2CSPIViewBase11setupScreenEv>:

void TestI2CSPIViewBase::setupScreen()
{
 800e234:	b480      	push	{r7}
 800e236:	b083      	sub	sp, #12
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]

}
 800e23c:	bf00      	nop
 800e23e:	370c      	adds	r7, #12
 800e240:	46bd      	mov	sp, r7
 800e242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e246:	4770      	bx	lr

0800e248 <_ZN18TestI2CSPIViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void TestI2CSPIViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b082      	sub	sp, #8
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	6039      	str	r1, [r7, #0]
    if (&src == &buttonReturn)
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	33a0      	adds	r3, #160	; 0xa0
 800e256:	683a      	ldr	r2, [r7, #0]
 800e258:	429a      	cmp	r2, r3
 800e25a:	d105      	bne.n	800e268 <_ZN18TestI2CSPIViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x20>
    {
        //InteractionbuttonReturnClicked
        //When buttonReturn clicked call virtual function
        //Call buttonReturnClicked
        buttonReturnClicked();
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	332c      	adds	r3, #44	; 0x2c
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	4798      	blx	r3
    }
}
 800e268:	bf00      	nop
 800e26a:	3708      	adds	r7, #8
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <_ZN8touchgfx4ViewI19TestI2CSPIPresenterEC1Ev>:
    View() : presenter(0)
 800e270:	b580      	push	{r7, lr}
 800e272:	b082      	sub	sp, #8
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	4618      	mov	r0, r3
 800e27c:	f009 ff96 	bl	80181ac <_ZN8touchgfx6ScreenC1Ev>
 800e280:	4a05      	ldr	r2, [pc, #20]	; (800e298 <_ZN8touchgfx4ViewI19TestI2CSPIPresenterEC1Ev+0x28>)
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	601a      	str	r2, [r3, #0]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2200      	movs	r2, #0
 800e28a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	4618      	mov	r0, r3
 800e290:	3708      	adds	r7, #8
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	08025a64 	.word	0x08025a64

0800e29c <_ZN8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b084      	sub	sp, #16
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	60f8      	str	r0, [r7, #12]
 800e2a4:	60b9      	str	r1, [r7, #8]
 800e2a6:	4639      	mov	r1, r7
 800e2a8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f7fe fef0 	bl	800d094 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800e2b4:	4a08      	ldr	r2, [pc, #32]	; (800e2d8 <_ZN8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	68ba      	ldr	r2, [r7, #8]
 800e2be:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	3308      	adds	r3, #8
 800e2c4:	463a      	mov	r2, r7
 800e2c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e2ca:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3710      	adds	r7, #16
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	08025a4c 	.word	0x08025a4c

0800e2dc <_ZN8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b082      	sub	sp, #8
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	4a05      	ldr	r2, [pc, #20]	; (800e2fc <_ZN8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	601a      	str	r2, [r3, #0]
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f7fe ff61 	bl	800d1b4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3708      	adds	r7, #8
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	08025a4c 	.word	0x08025a4c

0800e300 <_ZN8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800e300:	b580      	push	{r7, lr}
 800e302:	b082      	sub	sp, #8
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f7ff ffe7 	bl	800e2dc <_ZN8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800e30e:	2110      	movs	r1, #16
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f014 fe9c 	bl	802304e <_ZdlPvj>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	4618      	mov	r0, r3
 800e31a:	3708      	adds	r7, #8
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}

0800e320 <_ZN8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800e320:	b580      	push	{r7, lr}
 800e322:	b082      	sub	sp, #8
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
 800e328:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	685b      	ldr	r3, [r3, #4]
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	68d2      	ldr	r2, [r2, #12]
 800e332:	1052      	asrs	r2, r2, #1
 800e334:	1898      	adds	r0, r3, r2
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	68db      	ldr	r3, [r3, #12]
 800e33a:	f003 0301 	and.w	r3, r3, #1
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d102      	bne.n	800e348 <_ZN8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	689b      	ldr	r3, [r3, #8]
 800e346:	e00a      	b.n	800e35e <_ZN8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	685b      	ldr	r3, [r3, #4]
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	68d2      	ldr	r2, [r2, #12]
 800e350:	1052      	asrs	r2, r2, #1
 800e352:	4413      	add	r3, r2
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	687a      	ldr	r2, [r7, #4]
 800e358:	6892      	ldr	r2, [r2, #8]
 800e35a:	4413      	add	r3, r2
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	6839      	ldr	r1, [r7, #0]
 800e360:	4798      	blx	r3
    }
 800e362:	bf00      	nop
 800e364:	3708      	adds	r7, #8
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}

0800e36a <_ZNK8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800e36a:	b480      	push	{r7}
 800e36c:	b083      	sub	sp, #12
 800e36e:	af00      	add	r7, sp, #0
 800e370:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	685b      	ldr	r3, [r3, #4]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d010      	beq.n	800e39c <_ZNK8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	689b      	ldr	r3, [r3, #8]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d107      	bne.n	800e392 <_ZNK8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	68db      	ldr	r3, [r3, #12]
 800e386:	f003 0301 	and.w	r3, r3, #1
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d101      	bne.n	800e392 <_ZNK8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800e38e:	2301      	movs	r3, #1
 800e390:	e000      	b.n	800e394 <_ZNK8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800e392:	2300      	movs	r3, #0
 800e394:	2b01      	cmp	r3, #1
 800e396:	d001      	beq.n	800e39c <_ZNK8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800e398:	2301      	movs	r3, #1
 800e39a:	e000      	b.n	800e39e <_ZNK8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800e39c:	2300      	movs	r3, #0
    }
 800e39e:	4618      	mov	r0, r3
 800e3a0:	370c      	adds	r7, #12
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a8:	4770      	bx	lr
	...

0800e3ac <_ZN8touchgfx4ViewI29TestOrientationVoilePresenterED1Ev>:
class View : public Screen
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b082      	sub	sp, #8
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	4a05      	ldr	r2, [pc, #20]	; (800e3cc <_ZN8touchgfx4ViewI29TestOrientationVoilePresenterED1Ev+0x20>)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	601a      	str	r2, [r3, #0]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f7fe fad3 	bl	800c968 <_ZN8touchgfx6ScreenD1Ev>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3708      	adds	r7, #8
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}
 800e3cc:	08025ae8 	.word	0x08025ae8

0800e3d0 <_ZN8touchgfx4ViewI29TestOrientationVoilePresenterED0Ev>:
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b082      	sub	sp, #8
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f7ff ffe7 	bl	800e3ac <_ZN8touchgfx4ViewI29TestOrientationVoilePresenterED1Ev>
 800e3de:	2140      	movs	r1, #64	; 0x40
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f014 fe34 	bl	802304e <_ZdlPvj>
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3708      	adds	r7, #8
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}

0800e3f0 <_ZN28TestOrientationVoileViewBaseD1Ev>:

class TestOrientationVoileViewBase : public touchgfx::View<TestOrientationVoilePresenter>
{
public:
    TestOrientationVoileViewBase();
    virtual ~TestOrientationVoileViewBase() {}
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b082      	sub	sp, #8
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	4a0f      	ldr	r2, [pc, #60]	; (800e438 <_ZN28TestOrientationVoileViewBaseD1Ev+0x48>)
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	601a      	str	r2, [r3, #0]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	33d4      	adds	r3, #212	; 0xd4
 800e402:	4618      	mov	r0, r3
 800e404:	f000 f93c 	bl	800e680 <_ZN8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	33a0      	adds	r3, #160	; 0xa0
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7fe fb71 	bl	800caf4 <_ZN8touchgfx6ButtonD1Ev>
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	336c      	adds	r3, #108	; 0x6c
 800e416:	4618      	mov	r0, r3
 800e418:	f7fe f8ea 	bl	800c5f0 <_ZN8touchgfx8TextAreaD1Ev>
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	3340      	adds	r3, #64	; 0x40
 800e420:	4618      	mov	r0, r3
 800e422:	f7fe fa5d 	bl	800c8e0 <_ZN8touchgfx5ImageD1Ev>
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	4618      	mov	r0, r3
 800e42a:	f7ff ffbf 	bl	800e3ac <_ZN8touchgfx4ViewI29TestOrientationVoilePresenterED1Ev>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	4618      	mov	r0, r3
 800e432:	3708      	adds	r7, #8
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}
 800e438:	08025a98 	.word	0x08025a98

0800e43c <_ZN28TestOrientationVoileViewBaseD0Ev>:
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b082      	sub	sp, #8
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f7ff ffd3 	bl	800e3f0 <_ZN28TestOrientationVoileViewBaseD1Ev>
 800e44a:	21e4      	movs	r1, #228	; 0xe4
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f014 fdfe 	bl	802304e <_ZdlPvj>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	4618      	mov	r0, r3
 800e456:	3708      	adds	r7, #8
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <_ZN28TestOrientationVoileViewBase19buttonReturnClickedEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void buttonReturnClicked()
 800e45c:	b480      	push	{r7}
 800e45e:	b083      	sub	sp, #12
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in TestOrientationVoile
    }
 800e464:	bf00      	nop
 800e466:	370c      	adds	r7, #12
 800e468:	46bd      	mov	sp, r7
 800e46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46e:	4770      	bx	lr

0800e470 <_ZN28TestOrientationVoileViewBaseC1Ev>:
#include <gui_generated/testorientationvoile_screen/TestOrientationVoileViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

TestOrientationVoileViewBase::TestOrientationVoileViewBase() :
 800e470:	b590      	push	{r4, r7, lr}
 800e472:	b08b      	sub	sp, #44	; 0x2c
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &TestOrientationVoileViewBase::buttonCallbackHandler)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	4618      	mov	r0, r3
 800e47c:	f000 f8ca 	bl	800e614 <_ZN8touchgfx4ViewI29TestOrientationVoilePresenterEC1Ev>
 800e480:	4a53      	ldr	r2, [pc, #332]	; (800e5d0 <_ZN28TestOrientationVoileViewBaseC1Ev+0x160>)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	601a      	str	r2, [r3, #0]
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800e48c:	f107 030c 	add.w	r3, r7, #12
 800e490:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e494:	4618      	mov	r0, r3
 800e496:	f7fd fdcc 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800e49a:	f107 030c 	add.w	r3, r7, #12
 800e49e:	4619      	mov	r1, r3
 800e4a0:	4620      	mov	r0, r4
 800e4a2:	f7fd ffab 	bl	800c3fc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	336c      	adds	r3, #108	; 0x6c
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f7fd ffee 	bl	800c48c <_ZN8touchgfx8TextAreaC1Ev>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	33a0      	adds	r3, #160	; 0xa0
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7ff f80d 	bl	800d4d4 <_ZN8touchgfx6ButtonC1Ev>
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800e4c0:	4b44      	ldr	r3, [pc, #272]	; (800e5d4 <_ZN28TestOrientationVoileViewBaseC1Ev+0x164>)
 800e4c2:	613b      	str	r3, [r7, #16]
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	617b      	str	r3, [r7, #20]
 800e4c8:	f107 0310 	add.w	r3, r7, #16
 800e4cc:	cb0c      	ldmia	r3, {r2, r3}
 800e4ce:	6879      	ldr	r1, [r7, #4]
 800e4d0:	f000 f8b6 	bl	800e640 <_ZN8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    imageBg.setXY(0, 0);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	3340      	adds	r3, #64	; 0x40
 800e4d8:	2200      	movs	r2, #0
 800e4da:	2100      	movs	r1, #0
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f7fd fe25 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    imageBg.setBitmap(touchgfx::Bitmap(BITMAP_GREEN_POLYGONS_BACKGROUND_480X272_ID));
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800e4e8:	f107 0318 	add.w	r3, r7, #24
 800e4ec:	2108      	movs	r1, #8
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7fd fd9f 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800e4f4:	f107 0318 	add.w	r3, r7, #24
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	4620      	mov	r0, r4
 800e4fc:	f007 fd84 	bl	8016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textArea1.setXY(184, 99);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	336c      	adds	r3, #108	; 0x6c
 800e504:	2263      	movs	r2, #99	; 0x63
 800e506:	21b8      	movs	r1, #184	; 0xb8
 800e508:	4618      	mov	r0, r3
 800e50a:	f7fd fe0f 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800e514:	2200      	movs	r2, #0
 800e516:	2100      	movs	r1, #0
 800e518:	2000      	movs	r0, #0
 800e51a:	f7fe f90f 	bl	800c73c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800e51e:	4603      	mov	r3, r0
 800e520:	4619      	mov	r1, r3
 800e522:	4620      	mov	r0, r4
 800e524:	f7fd fff5 	bl	800c512 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	336c      	adds	r3, #108	; 0x6c
 800e52c:	2100      	movs	r1, #0
 800e52e:	4618      	mov	r0, r3
 800e530:	f7fe f842 	bl	800c5b8 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800e53a:	f107 031c 	add.w	r3, r7, #28
 800e53e:	2106      	movs	r1, #6
 800e540:	4618      	mov	r0, r3
 800e542:	f7fd ff7d 	bl	800c440 <_ZN8touchgfx9TypedTextC1Et>
 800e546:	8bb9      	ldrh	r1, [r7, #28]
 800e548:	4620      	mov	r0, r4
 800e54a:	f007 fb49 	bl	8015be0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    buttonReturn.setXY(10, 230);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	33a0      	adds	r3, #160	; 0xa0
 800e552:	22e6      	movs	r2, #230	; 0xe6
 800e554:	210a      	movs	r1, #10
 800e556:	4618      	mov	r0, r3
 800e558:	f7fd fde8 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    buttonReturn.setBitmaps(touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID), touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID));
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800e562:	f107 0320 	add.w	r3, r7, #32
 800e566:	210e      	movs	r1, #14
 800e568:	4618      	mov	r0, r3
 800e56a:	f7fd fd62 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800e56e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e572:	210e      	movs	r1, #14
 800e574:	4618      	mov	r0, r3
 800e576:	f7fd fd5c 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800e57a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e57e:	f107 0320 	add.w	r3, r7, #32
 800e582:	4619      	mov	r1, r3
 800e584:	4620      	mov	r0, r4
 800e586:	f007 fb35 	bl	8015bf4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonReturn.setAction(buttonCallback);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	33d4      	adds	r3, #212	; 0xd4
 800e594:	4619      	mov	r1, r3
 800e596:	4610      	mov	r0, r2
 800e598:	f7fe fa7b 	bl	800ca92 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(imageBg);
 800e59c:	687a      	ldr	r2, [r7, #4]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	3340      	adds	r3, #64	; 0x40
 800e5a2:	4619      	mov	r1, r3
 800e5a4:	4610      	mov	r0, r2
 800e5a6:	f7fe fa37 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 800e5aa:	687a      	ldr	r2, [r7, #4]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	336c      	adds	r3, #108	; 0x6c
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	4610      	mov	r0, r2
 800e5b4:	f7fe fa30 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonReturn);
 800e5b8:	687a      	ldr	r2, [r7, #4]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	33a0      	adds	r3, #160	; 0xa0
 800e5be:	4619      	mov	r1, r3
 800e5c0:	4610      	mov	r0, r2
 800e5c2:	f7fe fa29 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	372c      	adds	r7, #44	; 0x2c
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bd90      	pop	{r4, r7, pc}
 800e5d0:	08025a98 	.word	0x08025a98
 800e5d4:	0800e5ed 	.word	0x0800e5ed

0800e5d8 <_ZN28TestOrientationVoileViewBase11setupScreenEv>:

void TestOrientationVoileViewBase::setupScreen()
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]

}
 800e5e0:	bf00      	nop
 800e5e2:	370c      	adds	r7, #12
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ea:	4770      	bx	lr

0800e5ec <_ZN28TestOrientationVoileViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void TestOrientationVoileViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	6039      	str	r1, [r7, #0]
    if (&src == &buttonReturn)
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	33a0      	adds	r3, #160	; 0xa0
 800e5fa:	683a      	ldr	r2, [r7, #0]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d105      	bne.n	800e60c <_ZN28TestOrientationVoileViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x20>
    {
        //InteractionbuttonReturnClicked
        //When buttonReturn clicked call virtual function
        //Call buttonReturnClicked
        buttonReturnClicked();
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	332c      	adds	r3, #44	; 0x2c
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	4798      	blx	r3
    }
}
 800e60c:	bf00      	nop
 800e60e:	3708      	adds	r7, #8
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <_ZN8touchgfx4ViewI29TestOrientationVoilePresenterEC1Ev>:
    View() : presenter(0)
 800e614:	b580      	push	{r7, lr}
 800e616:	b082      	sub	sp, #8
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	4618      	mov	r0, r3
 800e620:	f009 fdc4 	bl	80181ac <_ZN8touchgfx6ScreenC1Ev>
 800e624:	4a05      	ldr	r2, [pc, #20]	; (800e63c <_ZN8touchgfx4ViewI29TestOrientationVoilePresenterEC1Ev+0x28>)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	601a      	str	r2, [r3, #0]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2200      	movs	r2, #0
 800e62e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	4618      	mov	r0, r3
 800e634:	3708      	adds	r7, #8
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	bf00      	nop
 800e63c:	08025ae8 	.word	0x08025ae8

0800e640 <_ZN8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800e640:	b580      	push	{r7, lr}
 800e642:	b084      	sub	sp, #16
 800e644:	af00      	add	r7, sp, #0
 800e646:	60f8      	str	r0, [r7, #12]
 800e648:	60b9      	str	r1, [r7, #8]
 800e64a:	4639      	mov	r1, r7
 800e64c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	4618      	mov	r0, r3
 800e654:	f7fe fd1e 	bl	800d094 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800e658:	4a08      	ldr	r2, [pc, #32]	; (800e67c <_ZN8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	68ba      	ldr	r2, [r7, #8]
 800e662:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	3308      	adds	r3, #8
 800e668:	463a      	mov	r2, r7
 800e66a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e66e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	4618      	mov	r0, r3
 800e676:	3710      	adds	r7, #16
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}
 800e67c:	08025ad0 	.word	0x08025ad0

0800e680 <_ZN8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800e680:	b580      	push	{r7, lr}
 800e682:	b082      	sub	sp, #8
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
 800e688:	4a05      	ldr	r2, [pc, #20]	; (800e6a0 <_ZN8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	601a      	str	r2, [r3, #0]
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	4618      	mov	r0, r3
 800e692:	f7fe fd8f 	bl	800d1b4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	4618      	mov	r0, r3
 800e69a:	3708      	adds	r7, #8
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	08025ad0 	.word	0x08025ad0

0800e6a4 <_ZN8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f7ff ffe7 	bl	800e680 <_ZN8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800e6b2:	2110      	movs	r1, #16
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f014 fcca 	bl	802304e <_ZdlPvj>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3708      	adds	r7, #8
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <_ZN8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
 800e6cc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	685b      	ldr	r3, [r3, #4]
 800e6d2:	687a      	ldr	r2, [r7, #4]
 800e6d4:	68d2      	ldr	r2, [r2, #12]
 800e6d6:	1052      	asrs	r2, r2, #1
 800e6d8:	1898      	adds	r0, r3, r2
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	68db      	ldr	r3, [r3, #12]
 800e6de:	f003 0301 	and.w	r3, r3, #1
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d102      	bne.n	800e6ec <_ZN8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	689b      	ldr	r3, [r3, #8]
 800e6ea:	e00a      	b.n	800e702 <_ZN8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	685b      	ldr	r3, [r3, #4]
 800e6f0:	687a      	ldr	r2, [r7, #4]
 800e6f2:	68d2      	ldr	r2, [r2, #12]
 800e6f4:	1052      	asrs	r2, r2, #1
 800e6f6:	4413      	add	r3, r2
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	687a      	ldr	r2, [r7, #4]
 800e6fc:	6892      	ldr	r2, [r2, #8]
 800e6fe:	4413      	add	r3, r2
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	6839      	ldr	r1, [r7, #0]
 800e704:	4798      	blx	r3
    }
 800e706:	bf00      	nop
 800e708:	3708      	adds	r7, #8
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}

0800e70e <_ZNK8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800e70e:	b480      	push	{r7}
 800e710:	b083      	sub	sp, #12
 800e712:	af00      	add	r7, sp, #0
 800e714:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	685b      	ldr	r3, [r3, #4]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d010      	beq.n	800e740 <_ZNK8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	689b      	ldr	r3, [r3, #8]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d107      	bne.n	800e736 <_ZNK8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	68db      	ldr	r3, [r3, #12]
 800e72a:	f003 0301 	and.w	r3, r3, #1
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d101      	bne.n	800e736 <_ZNK8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800e732:	2301      	movs	r3, #1
 800e734:	e000      	b.n	800e738 <_ZNK8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800e736:	2300      	movs	r3, #0
 800e738:	2b01      	cmp	r3, #1
 800e73a:	d001      	beq.n	800e740 <_ZNK8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800e73c:	2301      	movs	r3, #1
 800e73e:	e000      	b.n	800e742 <_ZNK8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800e740:	2300      	movs	r3, #0
    }
 800e742:	4618      	mov	r0, r3
 800e744:	370c      	adds	r7, #12
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr

0800e74e <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 800e74e:	b480      	push	{r7}
 800e750:	b083      	sub	sp, #12
 800e752:	af00      	add	r7, sp, #0
 800e754:	6078      	str	r0, [r7, #4]
 800e756:	460b      	mov	r3, r1
 800e758:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	78fa      	ldrb	r2, [r7, #3]
 800e75e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800e762:	bf00      	nop
 800e764:	370c      	adds	r7, #12
 800e766:	46bd      	mov	sp, r7
 800e768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76c:	4770      	bx	lr

0800e76e <_ZN8touchgfx6Slider20setStopValueCallbackERNS_15GenericCallbackIRKS0_ivEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the Slider and the current value of the slider at interaction end.
     *
     * @see GenericCallback
     */
    void setStopValueCallback(GenericCallback< const Slider&, int >& callback)
 800e76e:	b480      	push	{r7}
 800e770:	b083      	sub	sp, #12
 800e772:	af00      	add	r7, sp, #0
 800e774:	6078      	str	r0, [r7, #4]
 800e776:	6039      	str	r1, [r7, #0]
    {
        stopValueCallback = &callback;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	683a      	ldr	r2, [r7, #0]
 800e77c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    }
 800e780:	bf00      	nop
 800e782:	370c      	adds	r7, #12
 800e784:	46bd      	mov	sp, r7
 800e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78a:	4770      	bx	lr

0800e78c <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the Slider and the current value of the slider.
     *
     * @see GenericCallback
     */
    void setNewValueCallback(GenericCallback< const Slider&, int >& callback)
 800e78c:	b480      	push	{r7}
 800e78e:	b083      	sub	sp, #12
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	6039      	str	r1, [r7, #0]
    {
        newValueCallback = &callback;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	683a      	ldr	r2, [r7, #0]
 800e79a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    }
 800e79e:	bf00      	nop
 800e7a0:	370c      	adds	r7, #12
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a8:	4770      	bx	lr

0800e7aa <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 800e7aa:	b480      	push	{r7}
 800e7ac:	b083      	sub	sp, #12
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	6078      	str	r0, [r7, #4]
 800e7b2:	6039      	str	r1, [r7, #0]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	683a      	ldr	r2, [r7, #0]
 800e7b8:	601a      	str	r2, [r3, #0]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	4618      	mov	r0, r3
 800e7be:	370c      	adds	r7, #12
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c6:	4770      	bx	lr

0800e7c8 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b082      	sub	sp, #8
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	4a05      	ldr	r2, [pc, #20]	; (800e7e8 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	601a      	str	r2, [r3, #0]
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f006 ff49 	bl	8015670 <_ZN8touchgfx15AbstractPainterD1Ev>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3708      	adds	r7, #8
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}
 800e7e8:	0802791c 	.word	0x0802791c

0800e7ec <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b082      	sub	sp, #8
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f7ff ffe7 	bl	800e7c8 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 800e7fa:	2114      	movs	r1, #20
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f014 fc26 	bl	802304e <_ZdlPvj>
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	4618      	mov	r0, r3
 800e806:	3708      	adds	r7, #8
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}

0800e80c <_ZN8touchgfx4ViewI28TestRotationPlateauPresenterED1Ev>:
class View : public Screen
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b082      	sub	sp, #8
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	4a05      	ldr	r2, [pc, #20]	; (800e82c <_ZN8touchgfx4ViewI28TestRotationPlateauPresenterED1Ev+0x20>)
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	601a      	str	r2, [r3, #0]
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7fe f8a3 	bl	800c968 <_ZN8touchgfx6ScreenD1Ev>
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	4618      	mov	r0, r3
 800e826:	3708      	adds	r7, #8
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}
 800e82c:	08025b8c 	.word	0x08025b8c

0800e830 <_ZN8touchgfx4ViewI28TestRotationPlateauPresenterED0Ev>:
 800e830:	b580      	push	{r7, lr}
 800e832:	b082      	sub	sp, #8
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f7ff ffe7 	bl	800e80c <_ZN8touchgfx4ViewI28TestRotationPlateauPresenterED1Ev>
 800e83e:	2140      	movs	r1, #64	; 0x40
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f014 fc04 	bl	802304e <_ZdlPvj>
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	4618      	mov	r0, r3
 800e84a:	3708      	adds	r7, #8
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <_ZN27TestRotationPlateauViewBaseD1Ev>:

class TestRotationPlateauViewBase : public touchgfx::View<TestRotationPlateauPresenter>
{
public:
    TestRotationPlateauViewBase();
    virtual ~TestRotationPlateauViewBase() {}
 800e850:	b580      	push	{r7, lr}
 800e852:	b082      	sub	sp, #8
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
 800e858:	4a28      	ldr	r2, [pc, #160]	; (800e8fc <_ZN27TestRotationPlateauViewBaseD1Ev+0xac>)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	601a      	str	r2, [r3, #0]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 800e864:	4618      	mov	r0, r3
 800e866:	f000 fc27 	bl	800f0b8 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivED1Ev>
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800e870:	4618      	mov	r0, r3
 800e872:	f000 fc21 	bl	800f0b8 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivED1Ev>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800e87c:	4618      	mov	r0, r3
 800e87e:	f000 fc3d 	bl	800f0fc <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e888:	4618      	mov	r0, r3
 800e88a:	f7fe f933 	bl	800caf4 <_ZN8touchgfx6ButtonD1Ev>
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800e894:	4618      	mov	r0, r3
 800e896:	f7fe f823 	bl	800c8e0 <_ZN8touchgfx5ImageD1Ev>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7fe f81d 	bl	800c8e0 <_ZN8touchgfx5ImageD1Ev>
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f7fe f839 	bl	800c924 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7fe f811 	bl	800c8e0 <_ZN8touchgfx5ImageD1Ev>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f000 fc5d 	bl	800f184 <_ZN8touchgfx13PainterRGB888D1Ev>
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f000 fc35 	bl	800f140 <_ZN8touchgfx6CircleD1Ev>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	336c      	adds	r3, #108	; 0x6c
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f004 ffc8 	bl	8013870 <_ZN8touchgfx6SliderD1Ev>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	3340      	adds	r3, #64	; 0x40
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f7fd fffb 	bl	800c8e0 <_ZN8touchgfx5ImageD1Ev>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7ff ff8d 	bl	800e80c <_ZN8touchgfx4ViewI28TestRotationPlateauPresenterED1Ev>
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3708      	adds	r7, #8
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}
 800e8fc:	08025b1c 	.word	0x08025b1c

0800e900 <_ZN27TestRotationPlateauViewBaseD0Ev>:
 800e900:	b580      	push	{r7, lr}
 800e902:	b082      	sub	sp, #8
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f7ff ffa1 	bl	800e850 <_ZN27TestRotationPlateauViewBaseD1Ev>
 800e90e:	f44f 51f9 	mov.w	r1, #7968	; 0x1f20
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f014 fb9b 	bl	802304e <_ZdlPvj>
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	4618      	mov	r0, r3
 800e91c:	3708      	adds	r7, #8
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}

0800e922 <_ZN27TestRotationPlateauViewBase21sliderRotationChangedEi>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void sliderRotationChanged(int value)
 800e922:	b480      	push	{r7}
 800e924:	b083      	sub	sp, #12
 800e926:	af00      	add	r7, sp, #0
 800e928:	6078      	str	r0, [r7, #4]
 800e92a:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in TestRotationPlateau
    }
 800e92c:	bf00      	nop
 800e92e:	370c      	adds	r7, #12
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr

0800e938 <_ZN27TestRotationPlateauViewBase22sliderRotationReleasedEi>:

    virtual void sliderRotationReleased(int value)
 800e938:	b480      	push	{r7}
 800e93a:	b083      	sub	sp, #12
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
 800e940:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in TestRotationPlateau
    }
 800e942:	bf00      	nop
 800e944:	370c      	adds	r7, #12
 800e946:	46bd      	mov	sp, r7
 800e948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94c:	4770      	bx	lr

0800e94e <_ZN27TestRotationPlateauViewBase19buttonReturnClickedEv>:

    virtual void buttonReturnClicked()
 800e94e:	b480      	push	{r7}
 800e950:	b083      	sub	sp, #12
 800e952:	af00      	add	r7, sp, #0
 800e954:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in TestRotationPlateau
    }
 800e956:	bf00      	nop
 800e958:	370c      	adds	r7, #12
 800e95a:	46bd      	mov	sp, r7
 800e95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e960:	4770      	bx	lr
	...

0800e964 <_ZN27TestRotationPlateauViewBaseC1Ev>:
#include <gui_generated/testrotationplateau_screen/TestRotationPlateauViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

TestRotationPlateauViewBase::TestRotationPlateauViewBase() :
 800e964:	b590      	push	{r4, r7, lr}
 800e966:	b09b      	sub	sp, #108	; 0x6c
 800e968:	af02      	add	r7, sp, #8
 800e96a:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &TestRotationPlateauViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &TestRotationPlateauViewBase::sliderValueChangedCallbackHandler),
    sliderValueConfirmedCallback(this, &TestRotationPlateauViewBase::sliderValueConfirmedCallbackHandler)
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	4618      	mov	r0, r3
 800e970:	f000 faee 	bl	800ef50 <_ZN8touchgfx4ViewI28TestRotationPlateauPresenterEC1Ev>
 800e974:	4adb      	ldr	r2, [pc, #876]	; (800ece4 <_ZN27TestRotationPlateauViewBaseC1Ev+0x380>)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	601a      	str	r2, [r3, #0]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800e980:	f107 0308 	add.w	r3, r7, #8
 800e984:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e988:	4618      	mov	r0, r3
 800e98a:	f7fd fb52 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800e98e:	f107 0308 	add.w	r3, r7, #8
 800e992:	4619      	mov	r1, r3
 800e994:	4620      	mov	r0, r4
 800e996:	f7fd fd31 	bl	800c3fc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	336c      	adds	r3, #108	; 0x6c
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f005 f9a8 	bl	8013cf4 <_ZN8touchgfx6SliderC1Ev>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f006 f9d4 	bl	8014d58 <_ZN8touchgfx6CircleC1Ev>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f503 74da 	add.w	r4, r3, #436	; 0x1b4
 800e9b6:	f107 030c 	add.w	r3, r7, #12
 800e9ba:	2100      	movs	r1, #0
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f7fd faf2 	bl	800bfa6 <_ZN8touchgfx9colortypeC1Em>
 800e9c2:	22ff      	movs	r2, #255	; 0xff
 800e9c4:	68f9      	ldr	r1, [r7, #12]
 800e9c6:	4620      	mov	r0, r4
 800e9c8:	f006 fe10 	bl	80155ec <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 800e9d2:	f107 0310 	add.w	r3, r7, #16
 800e9d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7fd fb29 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800e9e0:	f107 0310 	add.w	r3, r7, #16
 800e9e4:	4619      	mov	r1, r3
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	f7fd fd08 	bl	800c3fc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f7fd fe52 	bl	800c69c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f503 740c 	add.w	r4, r3, #560	; 0x230
 800e9fe:	f107 0314 	add.w	r3, r7, #20
 800ea02:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ea06:	4618      	mov	r0, r3
 800ea08:	f7fd fb13 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800ea0c:	f107 0314 	add.w	r3, r7, #20
 800ea10:	4619      	mov	r1, r3
 800ea12:	4620      	mov	r0, r4
 800ea14:	f7fd fcf2 	bl	800c3fc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f503 7417 	add.w	r4, r3, #604	; 0x25c
 800ea1e:	f107 0318 	add.w	r3, r7, #24
 800ea22:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7fd fb03 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800ea2c:	f107 0318 	add.w	r3, r7, #24
 800ea30:	4619      	mov	r1, r3
 800ea32:	4620      	mov	r0, r4
 800ea34:	f7fd fce2 	bl	800c3fc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f7fe fd48 	bl	800d4d4 <_ZN8touchgfx6ButtonC1Ev>
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f503 7034 	add.w	r0, r3, #720	; 0x2d0
 800ea4a:	4ba7      	ldr	r3, [pc, #668]	; (800ece8 <_ZN27TestRotationPlateauViewBaseC1Ev+0x384>)
 800ea4c:	61fb      	str	r3, [r7, #28]
 800ea4e:	2300      	movs	r3, #0
 800ea50:	623b      	str	r3, [r7, #32]
 800ea52:	f107 031c 	add.w	r3, r7, #28
 800ea56:	cb0c      	ldmia	r3, {r2, r3}
 800ea58:	6879      	ldr	r1, [r7, #4]
 800ea5a:	f000 fa8f 	bl	800ef7c <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f503 7038 	add.w	r0, r3, #736	; 0x2e0
 800ea64:	4ba1      	ldr	r3, [pc, #644]	; (800ecec <_ZN27TestRotationPlateauViewBaseC1Ev+0x388>)
 800ea66:	627b      	str	r3, [r7, #36]	; 0x24
 800ea68:	2300      	movs	r3, #0
 800ea6a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea70:	cb0c      	ldmia	r3, {r2, r3}
 800ea72:	6879      	ldr	r1, [r7, #4]
 800ea74:	f000 fab2 	bl	800efdc <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f503 703c 	add.w	r0, r3, #752	; 0x2f0
 800ea7e:	4b9c      	ldr	r3, [pc, #624]	; (800ecf0 <_ZN27TestRotationPlateauViewBaseC1Ev+0x38c>)
 800ea80:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea82:	2300      	movs	r3, #0
 800ea84:	633b      	str	r3, [r7, #48]	; 0x30
 800ea86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ea8a:	cb0c      	ldmia	r3, {r2, r3}
 800ea8c:	6879      	ldr	r1, [r7, #4]
 800ea8e:	f000 faa5 	bl	800efdc <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ea98:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f007 fb21 	bl	80160e4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    imageBg.setXY(0, 0);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	3340      	adds	r3, #64	; 0x40
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	2100      	movs	r1, #0
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7fd fb3e 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    imageBg.setBitmap(touchgfx::Bitmap(BITMAP_GREEN_POLYGONS_BACKGROUND_480X272_ID));
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800eab6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800eaba:	2108      	movs	r1, #8
 800eabc:	4618      	mov	r0, r3
 800eabe:	f7fd fab8 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800eac2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800eac6:	4619      	mov	r1, r3
 800eac8:	4620      	mov	r0, r4
 800eaca:	f007 fa9d 	bl	8016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    sliderRotation.setXY(91, 216);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	336c      	adds	r3, #108	; 0x6c
 800ead2:	22d8      	movs	r2, #216	; 0xd8
 800ead4:	215b      	movs	r1, #91	; 0x5b
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7fd fb28 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    sliderRotation.setBitmaps(touchgfx::Bitmap(BITMAP_SLIDER_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_SLIDER_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_SLIDER_KNOB_ID));
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800eae2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800eae6:	211f      	movs	r1, #31
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7fd faa2 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800eaee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800eaf2:	211f      	movs	r1, #31
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f7fd fa9c 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800eafa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800eafe:	211e      	movs	r1, #30
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7fd fa96 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800eb06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800eb0a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800eb0e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800eb12:	4620      	mov	r0, r4
 800eb14:	f005 f942 	bl	8013d9c <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    sliderRotation.setupHorizontalSlider(0, 10, 0, 0, 318);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800eb1e:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800eb22:	9301      	str	r3, [sp, #4]
 800eb24:	2300      	movs	r3, #0
 800eb26:	9300      	str	r3, [sp, #0]
 800eb28:	2300      	movs	r3, #0
 800eb2a:	220a      	movs	r2, #10
 800eb2c:	2100      	movs	r1, #0
 800eb2e:	f004 ffaf 	bl	8013a90 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
    sliderRotation.setValueRange(0, 100);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	336c      	adds	r3, #108	; 0x6c
 800eb36:	2264      	movs	r2, #100	; 0x64
 800eb38:	2100      	movs	r1, #0
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f004 ff0d 	bl	801395a <_ZN8touchgfx6Slider13setValueRangeEii>
    sliderRotation.setValue(50);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	336c      	adds	r3, #108	; 0x6c
 800eb44:	2132      	movs	r1, #50	; 0x32
 800eb46:	4618      	mov	r0, r3
 800eb48:	f004 fe93 	bl	8013872 <_ZN8touchgfx6Slider8setValueEi>
    sliderRotation.setNewValueCallback(sliderValueChangedCallback);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800eb58:	4619      	mov	r1, r3
 800eb5a:	4610      	mov	r0, r2
 800eb5c:	f7ff fe16 	bl	800e78c <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>
    sliderRotation.setStopValueCallback(sliderValueConfirmedCallback);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	4610      	mov	r0, r2
 800eb70:	f7ff fdfd 	bl	800e76e <_ZN8touchgfx6Slider20setStopValueCallbackERNS_15GenericCallbackIRKS0_ivEE>

    circleRotation.setPosition(167, 13, 170, 161);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f503 70b4 	add.w	r0, r3, #360	; 0x168
 800eb7a:	23a1      	movs	r3, #161	; 0xa1
 800eb7c:	9300      	str	r3, [sp, #0]
 800eb7e:	23aa      	movs	r3, #170	; 0xaa
 800eb80:	220d      	movs	r2, #13
 800eb82:	21a7      	movs	r1, #167	; 0xa7
 800eb84:	f7fb fa02 	bl	8009f8c <_ZN8touchgfx8Drawable11setPositionEssss>
    circleRotation.setCenter(100, 100);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800eb8e:	2264      	movs	r2, #100	; 0x64
 800eb90:	2164      	movs	r1, #100	; 0x64
 800eb92:	4618      	mov	r0, r3
 800eb94:	f000 f98f 	bl	800eeb6 <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>
    circleRotation.setRadius(95);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800eb9e:	215f      	movs	r1, #95	; 0x5f
 800eba0:	4618      	mov	r0, r3
 800eba2:	f000 fa3b 	bl	800f01c <_ZN8touchgfx6Circle9setRadiusIiEEvT_>
    circleRotation.setLineWidth(7);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ebac:	2107      	movs	r1, #7
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f000 fa4b 	bl	800f04a <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>
    circleRotation.setArc(180, 180);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ebba:	22b4      	movs	r2, #180	; 0xb4
 800ebbc:	21b4      	movs	r1, #180	; 0xb4
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f000 f99f 	bl	800ef02 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>
    circleRotation.setCapPrecision(10);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ebca:	210a      	movs	r1, #10
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f006 f8db 	bl	8014d88 <_ZN8touchgfx6Circle15setCapPrecisionEi>
    circleRotationPainter.setColor(touchgfx::Color::getColorFrom24BitRGB(249, 186, 109));
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f503 74da 	add.w	r4, r3, #436	; 0x1b4
 800ebd8:	226d      	movs	r2, #109	; 0x6d
 800ebda:	21ba      	movs	r1, #186	; 0xba
 800ebdc:	20f9      	movs	r0, #249	; 0xf9
 800ebde:	f7fd fdad 	bl	800c73c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	22ff      	movs	r2, #255	; 0xff
 800ebe6:	4619      	mov	r1, r3
 800ebe8:	4620      	mov	r0, r4
 800ebea:	f006 fce4 	bl	80155b6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    circleRotation.setPainter(circleRotationPainter);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	4610      	mov	r0, r2
 800ebfe:	f006 fd3d 	bl	801567c <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    circleRotation.setVisible(false);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ec08:	2100      	movs	r1, #0
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f7ff fd9f 	bl	800e74e <_ZN8touchgfx8Drawable10setVisibleEb>

    imageRotBg.setXY(202, 43);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800ec16:	222b      	movs	r2, #43	; 0x2b
 800ec18:	21ca      	movs	r1, #202	; 0xca
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f7fd fa86 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    imageRotBg.setBitmap(touchgfx::Bitmap(BITMAP_SAILBOAT_2_LARGE_ID));
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 800ec26:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ec2a:	2117      	movs	r1, #23
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f7fd fa00 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800ec32:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ec36:	4619      	mov	r1, r3
 800ec38:	4620      	mov	r0, r4
 800ec3a:	f007 f9e5 	bl	8016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textRotationSpeed.setPosition(206, 18, 92, 25);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 800ec44:	2319      	movs	r3, #25
 800ec46:	9300      	str	r3, [sp, #0]
 800ec48:	235c      	movs	r3, #92	; 0x5c
 800ec4a:	2212      	movs	r2, #18
 800ec4c:	21ce      	movs	r1, #206	; 0xce
 800ec4e:	f7fb f99d 	bl	8009f8c <_ZN8touchgfx8Drawable11setPositionEssss>
    textRotationSpeed.setColor(touchgfx::Color::getColorFrom24BitRGB(249, 186, 109));
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 800ec58:	226d      	movs	r2, #109	; 0x6d
 800ec5a:	21ba      	movs	r1, #186	; 0xba
 800ec5c:	20f9      	movs	r0, #249	; 0xf9
 800ec5e:	f7fd fd6d 	bl	800c73c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ec62:	4603      	mov	r3, r0
 800ec64:	4619      	mov	r1, r3
 800ec66:	4620      	mov	r0, r4
 800ec68:	f7fd fc53 	bl	800c512 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textRotationSpeed.setLinespacing(0);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ec72:	2100      	movs	r1, #0
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7fd fc9f 	bl	800c5b8 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(textRotationSpeedBuffer, TEXTROTATIONSPEED_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID6).getText());
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 800ec80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ec84:	2101      	movs	r1, #1
 800ec86:	4618      	mov	r0, r3
 800ec88:	f7fd fbda 	bl	800c440 <_ZN8touchgfx9TypedTextC1Et>
 800ec8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ec90:	4618      	mov	r0, r3
 800ec92:	f7fd fbe5 	bl	800c460 <_ZNK8touchgfx9TypedText7getTextEv>
 800ec96:	4603      	mov	r3, r0
 800ec98:	4a16      	ldr	r2, [pc, #88]	; (800ecf4 <_ZN27TestRotationPlateauViewBaseC1Ev+0x390>)
 800ec9a:	210a      	movs	r1, #10
 800ec9c:	4620      	mov	r0, r4
 800ec9e:	f00a fbdb 	bl	8019458 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textRotationSpeed.setWildcard(textRotationSpeedBuffer);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800ecae:	4619      	mov	r1, r3
 800ecb0:	4610      	mov	r0, r2
 800ecb2:	f7fd fd09 	bl	800c6c8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textRotationSpeed.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5));
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 800ecbc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ecc0:	2100      	movs	r1, #0
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7fd fbbc 	bl	800c440 <_ZN8touchgfx9TypedTextC1Et>
 800ecc8:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 800eccc:	4620      	mov	r0, r4
 800ecce:	f006 ff87 	bl	8015be0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    imageRotLeft.setXY(110, 158);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800ecd8:	229e      	movs	r2, #158	; 0x9e
 800ecda:	216e      	movs	r1, #110	; 0x6e
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f7fd fa25 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
 800ece2:	e009      	b.n	800ecf8 <_ZN27TestRotationPlateauViewBaseC1Ev+0x394>
 800ece4:	08025b1c 	.word	0x08025b1c
 800ece8:	0800ee35 	.word	0x0800ee35
 800ecec:	0800ee5f 	.word	0x0800ee5f
 800ecf0:	0800ee8b 	.word	0x0800ee8b
 800ecf4:	08024738 	.word	0x08024738
    imageRotLeft.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_UP_3_52_ID));
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f503 740c 	add.w	r4, r3, #560	; 0x230
 800ecfe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ed02:	2113      	movs	r1, #19
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7fd f994 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800ed0a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ed0e:	4619      	mov	r1, r3
 800ed10:	4620      	mov	r0, r4
 800ed12:	f007 f979 	bl	8016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    imageRotRight.setXY(390, 164);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800ed1c:	22a4      	movs	r2, #164	; 0xa4
 800ed1e:	f44f 71c3 	mov.w	r1, #390	; 0x186
 800ed22:	4618      	mov	r0, r3
 800ed24:	f7fd fa02 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    imageRotRight.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_UP_2_52_ID));
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f503 7417 	add.w	r4, r3, #604	; 0x25c
 800ed2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ed32:	2112      	movs	r1, #18
 800ed34:	4618      	mov	r0, r3
 800ed36:	f7fd f97c 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800ed3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ed3e:	4619      	mov	r1, r3
 800ed40:	4620      	mov	r0, r4
 800ed42:	f007 f961 	bl	8016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    buttonReturn.setXY(10, 230);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800ed4c:	22e6      	movs	r2, #230	; 0xe6
 800ed4e:	210a      	movs	r1, #10
 800ed50:	4618      	mov	r0, r3
 800ed52:	f7fd f9eb 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    buttonReturn.setBitmaps(touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID), touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID));
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f503 7422 	add.w	r4, r3, #648	; 0x288
 800ed5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ed60:	210e      	movs	r1, #14
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7fd f965 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800ed68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ed6c:	210e      	movs	r1, #14
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f7fd f95f 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800ed74:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800ed78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ed7c:	4619      	mov	r1, r3
 800ed7e:	4620      	mov	r0, r4
 800ed80:	f006 ff38 	bl	8015bf4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonReturn.setAction(buttonCallback);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	f503 7222 	add.w	r2, r3, #648	; 0x288
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800ed90:	4619      	mov	r1, r3
 800ed92:	4610      	mov	r0, r2
 800ed94:	f7fd fe7d 	bl	800ca92 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(imageBg);
 800ed98:	687a      	ldr	r2, [r7, #4]
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	3340      	adds	r3, #64	; 0x40
 800ed9e:	4619      	mov	r1, r3
 800eda0:	4610      	mov	r0, r2
 800eda2:	f7fd fe39 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(sliderRotation);
 800eda6:	687a      	ldr	r2, [r7, #4]
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	336c      	adds	r3, #108	; 0x6c
 800edac:	4619      	mov	r1, r3
 800edae:	4610      	mov	r0, r2
 800edb0:	f7fd fe32 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(circleRotation);
 800edb4:	687a      	ldr	r2, [r7, #4]
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800edbc:	4619      	mov	r1, r3
 800edbe:	4610      	mov	r0, r2
 800edc0:	f7fd fe2a 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(imageRotBg);
 800edc4:	687a      	ldr	r2, [r7, #4]
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800edcc:	4619      	mov	r1, r3
 800edce:	4610      	mov	r0, r2
 800edd0:	f7fd fe22 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textRotationSpeed);
 800edd4:	687a      	ldr	r2, [r7, #4]
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800eddc:	4619      	mov	r1, r3
 800edde:	4610      	mov	r0, r2
 800ede0:	f7fd fe1a 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(imageRotLeft);
 800ede4:	687a      	ldr	r2, [r7, #4]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800edec:	4619      	mov	r1, r3
 800edee:	4610      	mov	r0, r2
 800edf0:	f7fd fe12 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(imageRotRight);
 800edf4:	687a      	ldr	r2, [r7, #4]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800edfc:	4619      	mov	r1, r3
 800edfe:	4610      	mov	r0, r2
 800ee00:	f7fd fe0a 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonReturn);
 800ee04:	687a      	ldr	r2, [r7, #4]
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800ee0c:	4619      	mov	r1, r3
 800ee0e:	4610      	mov	r0, r2
 800ee10:	f7fd fe02 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	4618      	mov	r0, r3
 800ee18:	3764      	adds	r7, #100	; 0x64
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd90      	pop	{r4, r7, pc}
 800ee1e:	bf00      	nop

0800ee20 <_ZN27TestRotationPlateauViewBase11setupScreenEv>:

void TestRotationPlateauViewBase::setupScreen()
{
 800ee20:	b480      	push	{r7}
 800ee22:	b083      	sub	sp, #12
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]

}
 800ee28:	bf00      	nop
 800ee2a:	370c      	adds	r7, #12
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee32:	4770      	bx	lr

0800ee34 <_ZN27TestRotationPlateauViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void TestRotationPlateauViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b082      	sub	sp, #8
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	6039      	str	r1, [r7, #0]
    if (&src == &buttonReturn)
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800ee44:	683a      	ldr	r2, [r7, #0]
 800ee46:	429a      	cmp	r2, r3
 800ee48:	d105      	bne.n	800ee56 <_ZN27TestRotationPlateauViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //InteractionbuttonReturnClicked
        //When buttonReturn clicked call virtual function
        //Call buttonReturnClicked
        buttonReturnClicked();
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	3334      	adds	r3, #52	; 0x34
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	4798      	blx	r3
    }
}
 800ee56:	bf00      	nop
 800ee58:	3708      	adds	r7, #8
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}

0800ee5e <_ZN27TestRotationPlateauViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi>:

void TestRotationPlateauViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
 800ee5e:	b580      	push	{r7, lr}
 800ee60:	b084      	sub	sp, #16
 800ee62:	af00      	add	r7, sp, #0
 800ee64:	60f8      	str	r0, [r7, #12]
 800ee66:	60b9      	str	r1, [r7, #8]
 800ee68:	607a      	str	r2, [r7, #4]
    if (&src == &sliderRotation)
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	336c      	adds	r3, #108	; 0x6c
 800ee6e:	68ba      	ldr	r2, [r7, #8]
 800ee70:	429a      	cmp	r2, r3
 800ee72:	d106      	bne.n	800ee82 <_ZN27TestRotationPlateauViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x24>
    {
        //InteractionsliderRotationChanged
        //When sliderRotation value changed call virtual function
        //Call sliderRotationChanged
        sliderRotationChanged(value);
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	332c      	adds	r3, #44	; 0x2c
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	6879      	ldr	r1, [r7, #4]
 800ee7e:	68f8      	ldr	r0, [r7, #12]
 800ee80:	4798      	blx	r3
    }
}
 800ee82:	bf00      	nop
 800ee84:	3710      	adds	r7, #16
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}

0800ee8a <_ZN27TestRotationPlateauViewBase35sliderValueConfirmedCallbackHandlerERKN8touchgfx6SliderEi>:

void TestRotationPlateauViewBase::sliderValueConfirmedCallbackHandler(const touchgfx::Slider& src, int value)
{
 800ee8a:	b580      	push	{r7, lr}
 800ee8c:	b084      	sub	sp, #16
 800ee8e:	af00      	add	r7, sp, #0
 800ee90:	60f8      	str	r0, [r7, #12]
 800ee92:	60b9      	str	r1, [r7, #8]
 800ee94:	607a      	str	r2, [r7, #4]
    if (&src == &sliderRotation)
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	336c      	adds	r3, #108	; 0x6c
 800ee9a:	68ba      	ldr	r2, [r7, #8]
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d106      	bne.n	800eeae <_ZN27TestRotationPlateauViewBase35sliderValueConfirmedCallbackHandlerERKN8touchgfx6SliderEi+0x24>
    {
        //InteractionRotationReleased
        //When sliderRotation value confirmed call virtual function
        //Call sliderRotationReleased
        sliderRotationReleased(value);
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	3330      	adds	r3, #48	; 0x30
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	6879      	ldr	r1, [r7, #4]
 800eeaa:	68f8      	ldr	r0, [r7, #12]
 800eeac:	4798      	blx	r3
    }
}
 800eeae:	bf00      	nop
 800eeb0:	3710      	adds	r7, #16
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}

0800eeb6 <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>:
     * @param y The y coordinate of center.
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setCenter(const T x, const T y)
 800eeb6:	b580      	push	{r7, lr}
 800eeb8:	b088      	sub	sp, #32
 800eeba:	af00      	add	r7, sp, #0
 800eebc:	60f8      	str	r0, [r7, #12]
 800eebe:	60b9      	str	r1, [r7, #8]
 800eec0:	607a      	str	r2, [r7, #4]
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 800eec6:	69bb      	ldr	r3, [r7, #24]
 800eec8:	015a      	lsls	r2, r3, #5
 800eeca:	f107 0314 	add.w	r3, r7, #20
 800eece:	4611      	mov	r1, r2
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7ff fc6a 	bl	800e7aa <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	461a      	mov	r2, r3
    {
        this->circleCenterX = CWRUtil::toQ5<T>(x);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	631a      	str	r2, [r3, #48]	; 0x30
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	61fb      	str	r3, [r7, #28]
 800eee2:	69fb      	ldr	r3, [r7, #28]
 800eee4:	015a      	lsls	r2, r3, #5
 800eee6:	f107 0310 	add.w	r3, r7, #16
 800eeea:	4611      	mov	r1, r2
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7ff fc5c 	bl	800e7aa <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	461a      	mov	r2, r3
        this->circleCenterY = CWRUtil::toQ5<T>(y);
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800eefa:	bf00      	nop
 800eefc:	3720      	adds	r7, #32
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}

0800ef02 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>:
     * @see updateArcStart
     * @see updateArcEnd
     * @see updateArc
     */
    template <typename T>
    void setArc(const T startAngle, const T endAngle)
 800ef02:	b580      	push	{r7, lr}
 800ef04:	b088      	sub	sp, #32
 800ef06:	af00      	add	r7, sp, #0
 800ef08:	60f8      	str	r0, [r7, #12]
 800ef0a:	60b9      	str	r1, [r7, #8]
 800ef0c:	607a      	str	r2, [r7, #4]
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	61bb      	str	r3, [r7, #24]
 800ef12:	69bb      	ldr	r3, [r7, #24]
 800ef14:	015a      	lsls	r2, r3, #5
 800ef16:	f107 0314 	add.w	r3, r7, #20
 800ef1a:	4611      	mov	r1, r2
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7ff fc44 	bl	800e7aa <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	461a      	mov	r2, r3
    {
        circleArcAngleStart = CWRUtil::toQ5<T>(startAngle);
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	63da      	str	r2, [r3, #60]	; 0x3c
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	61fb      	str	r3, [r7, #28]
 800ef2e:	69fb      	ldr	r3, [r7, #28]
 800ef30:	015a      	lsls	r2, r3, #5
 800ef32:	f107 0310 	add.w	r3, r7, #16
 800ef36:	4611      	mov	r1, r2
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f7ff fc36 	bl	800e7aa <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	461a      	mov	r2, r3
        circleArcAngleEnd = CWRUtil::toQ5<T>(endAngle);
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	641a      	str	r2, [r3, #64]	; 0x40
    }
 800ef46:	bf00      	nop
 800ef48:	3720      	adds	r7, #32
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}
	...

0800ef50 <_ZN8touchgfx4ViewI28TestRotationPlateauPresenterEC1Ev>:
    View() : presenter(0)
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b082      	sub	sp, #8
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f009 f926 	bl	80181ac <_ZN8touchgfx6ScreenC1Ev>
 800ef60:	4a05      	ldr	r2, [pc, #20]	; (800ef78 <_ZN8touchgfx4ViewI28TestRotationPlateauPresenterEC1Ev+0x28>)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	601a      	str	r2, [r3, #0]
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	4618      	mov	r0, r3
 800ef70:	3708      	adds	r7, #8
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}
 800ef76:	bf00      	nop
 800ef78:	08025b8c 	.word	0x08025b8c

0800ef7c <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b084      	sub	sp, #16
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	60f8      	str	r0, [r7, #12]
 800ef84:	60b9      	str	r1, [r7, #8]
 800ef86:	4639      	mov	r1, r7
 800ef88:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f7fe f880 	bl	800d094 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800ef94:	4a08      	ldr	r2, [pc, #32]	; (800efb8 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	68ba      	ldr	r2, [r7, #8]
 800ef9e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	3308      	adds	r3, #8
 800efa4:	463a      	mov	r2, r7
 800efa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800efaa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	4618      	mov	r0, r3
 800efb2:	3710      	adds	r7, #16
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}
 800efb8:	08025b74 	.word	0x08025b74

0800efbc <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>:
class GenericCallback<T1, T2, void>
 800efbc:	b480      	push	{r7}
 800efbe:	b083      	sub	sp, #12
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	4a04      	ldr	r2, [pc, #16]	; (800efd8 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev+0x1c>)
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	601a      	str	r2, [r3, #0]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	4618      	mov	r0, r3
 800efce:	370c      	adds	r7, #12
 800efd0:	46bd      	mov	sp, r7
 800efd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd6:	4770      	bx	lr
 800efd8:	08025bc0 	.word	0x08025bc0

0800efdc <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_2)(T1, T2))
 800efdc:	b580      	push	{r7, lr}
 800efde:	b084      	sub	sp, #16
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	60f8      	str	r0, [r7, #12]
 800efe4:	60b9      	str	r1, [r7, #8]
 800efe6:	4639      	mov	r1, r7
 800efe8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	4618      	mov	r0, r3
 800eff0:	f7ff ffe4 	bl	800efbc <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>
 800eff4:	4a08      	ldr	r2, [pc, #32]	; (800f018 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE+0x3c>)
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	68ba      	ldr	r2, [r7, #8]
 800effe:	605a      	str	r2, [r3, #4]
        this->pmemfun_2 = pmemfun_2;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	3308      	adds	r3, #8
 800f004:	463a      	mov	r2, r7
 800f006:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f00a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	4618      	mov	r0, r3
 800f012:	3710      	adds	r7, #16
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}
 800f018:	08025b5c 	.word	0x08025b5c

0800f01c <_ZN8touchgfx6Circle9setRadiusIiEEvT_>:
    void setRadius(const T r)
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b084      	sub	sp, #16
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	6039      	str	r1, [r7, #0]
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	60fb      	str	r3, [r7, #12]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	015a      	lsls	r2, r3, #5
 800f02e:	f107 0308 	add.w	r3, r7, #8
 800f032:	4611      	mov	r1, r2
 800f034:	4618      	mov	r0, r3
 800f036:	f7ff fbb8 	bl	800e7aa <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	461a      	mov	r2, r3
        this->circleRadius = CWRUtil::toQ5<T>(r);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	639a      	str	r2, [r3, #56]	; 0x38
    }
 800f042:	bf00      	nop
 800f044:	3710      	adds	r7, #16
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}

0800f04a <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>:
     * @note The area containing the Circle is not invalidated.
     * @note if the new line with is smaller than the old width, the circle should be invalidated
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
 800f04a:	b580      	push	{r7, lr}
 800f04c:	b084      	sub	sp, #16
 800f04e:	af00      	add	r7, sp, #0
 800f050:	6078      	str	r0, [r7, #4]
 800f052:	6039      	str	r1, [r7, #0]
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	60fb      	str	r3, [r7, #12]
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	015a      	lsls	r2, r3, #5
 800f05c:	f107 0308 	add.w	r3, r7, #8
 800f060:	4611      	mov	r1, r2
 800f062:	4618      	mov	r0, r3
 800f064:	f7ff fba1 	bl	800e7aa <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	461a      	mov	r2, r3
    {
        this->circleLineWidth = CWRUtil::toQ5<T>(width);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	645a      	str	r2, [r3, #68]	; 0x44
    }
 800f070:	bf00      	nop
 800f072:	3710      	adds	r7, #16
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}

0800f078 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>:
    virtual ~GenericCallback()
 800f078:	b480      	push	{r7}
 800f07a:	b083      	sub	sp, #12
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
    }
 800f080:	4a04      	ldr	r2, [pc, #16]	; (800f094 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev+0x1c>)
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	601a      	str	r2, [r3, #0]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	4618      	mov	r0, r3
 800f08a:	370c      	adds	r7, #12
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr
 800f094:	08025bc0 	.word	0x08025bc0

0800f098 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED0Ev>:
    virtual ~GenericCallback()
 800f098:	b580      	push	{r7, lr}
 800f09a:	b082      	sub	sp, #8
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
    }
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f7ff ffe9 	bl	800f078 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 800f0a6:	2104      	movs	r1, #4
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f013 ffd0 	bl	802304e <_ZdlPvj>
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3708      	adds	r7, #8
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}

0800f0b8 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b082      	sub	sp, #8
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	4a05      	ldr	r2, [pc, #20]	; (800f0d8 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivED1Ev+0x20>)
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	601a      	str	r2, [r3, #0]
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f7ff ffd5 	bl	800f078 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3708      	adds	r7, #8
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}
 800f0d8:	08025b5c 	.word	0x08025b5c

0800f0dc <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivED0Ev>:
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b082      	sub	sp, #8
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f7ff ffe7 	bl	800f0b8 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivED1Ev>
 800f0ea:	2110      	movs	r1, #16
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f013 ffae 	bl	802304e <_ZdlPvj>
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3708      	adds	r7, #8
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b082      	sub	sp, #8
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	4a05      	ldr	r2, [pc, #20]	; (800f11c <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	601a      	str	r2, [r3, #0]
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	4618      	mov	r0, r3
 800f10e:	f7fe f851 	bl	800d1b4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	4618      	mov	r0, r3
 800f116:	3708      	adds	r7, #8
 800f118:	46bd      	mov	sp, r7
 800f11a:	bd80      	pop	{r7, pc}
 800f11c:	08025b74 	.word	0x08025b74

0800f120 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800f120:	b580      	push	{r7, lr}
 800f122:	b082      	sub	sp, #8
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f7ff ffe7 	bl	800f0fc <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800f12e:	2110      	movs	r1, #16
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f013 ff8c 	bl	802304e <_ZdlPvj>
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	4618      	mov	r0, r3
 800f13a:	3708      	adds	r7, #8
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}

0800f140 <_ZN8touchgfx6CircleD1Ev>:
class Circle : public CanvasWidget
 800f140:	b580      	push	{r7, lr}
 800f142:	b082      	sub	sp, #8
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
 800f148:	4a05      	ldr	r2, [pc, #20]	; (800f160 <_ZN8touchgfx6CircleD1Ev+0x20>)
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	601a      	str	r2, [r3, #0]
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	4618      	mov	r0, r3
 800f152:	f006 fb71 	bl	8015838 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	4618      	mov	r0, r3
 800f15a:	3708      	adds	r7, #8
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}
 800f160:	080279f4 	.word	0x080279f4

0800f164 <_ZN8touchgfx6CircleD0Ev>:
 800f164:	b580      	push	{r7, lr}
 800f166:	b082      	sub	sp, #8
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f7ff ffe7 	bl	800f140 <_ZN8touchgfx6CircleD1Ev>
 800f172:	214c      	movs	r1, #76	; 0x4c
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f013 ff6a 	bl	802304e <_ZdlPvj>
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	4618      	mov	r0, r3
 800f17e:	3708      	adds	r7, #8
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 800f184:	b580      	push	{r7, lr}
 800f186:	b082      	sub	sp, #8
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
 800f18c:	4a05      	ldr	r2, [pc, #20]	; (800f1a4 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	601a      	str	r2, [r3, #0]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	4618      	mov	r0, r3
 800f196:	f7ff fb17 	bl	800e7c8 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	4618      	mov	r0, r3
 800f19e:	3708      	adds	r7, #8
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}
 800f1a4:	08027b18 	.word	0x08027b18

0800f1a8 <_ZN8touchgfx13PainterRGB888D0Ev>:
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b082      	sub	sp, #8
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f7ff ffe7 	bl	800f184 <_ZN8touchgfx13PainterRGB888D1Ev>
 800f1b6:	2118      	movs	r1, #24
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	f013 ff48 	bl	802304e <_ZdlPvj>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3708      	adds	r7, #8
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b084      	sub	sp, #16
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	60f8      	str	r0, [r7, #12]
 800f1d0:	60b9      	str	r1, [r7, #8]
 800f1d2:	607a      	str	r2, [r7, #4]
        (pobject->*pmemfun_2)(t1, t2);
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	685b      	ldr	r3, [r3, #4]
 800f1d8:	68fa      	ldr	r2, [r7, #12]
 800f1da:	68d2      	ldr	r2, [r2, #12]
 800f1dc:	1052      	asrs	r2, r2, #1
 800f1de:	1898      	adds	r0, r3, r2
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	68db      	ldr	r3, [r3, #12]
 800f1e4:	f003 0301 	and.w	r3, r3, #1
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d102      	bne.n	800f1f2 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivE7executeES4_i+0x2a>
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	689b      	ldr	r3, [r3, #8]
 800f1f0:	e00a      	b.n	800f208 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivE7executeES4_i+0x40>
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	685b      	ldr	r3, [r3, #4]
 800f1f6:	68fa      	ldr	r2, [r7, #12]
 800f1f8:	68d2      	ldr	r2, [r2, #12]
 800f1fa:	1052      	asrs	r2, r2, #1
 800f1fc:	4413      	add	r3, r2
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	68fa      	ldr	r2, [r7, #12]
 800f202:	6892      	ldr	r2, [r2, #8]
 800f204:	4413      	add	r3, r2
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	687a      	ldr	r2, [r7, #4]
 800f20a:	68b9      	ldr	r1, [r7, #8]
 800f20c:	4798      	blx	r3
    }
 800f20e:	bf00      	nop
 800f210:	3710      	adds	r7, #16
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}

0800f216 <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivE7isValidEv>:
    virtual bool isValid() const
 800f216:	b480      	push	{r7}
 800f218:	b083      	sub	sp, #12
 800f21a:	af00      	add	r7, sp, #0
 800f21c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_2 != 0);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	685b      	ldr	r3, [r3, #4]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d010      	beq.n	800f248 <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	689b      	ldr	r3, [r3, #8]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d107      	bne.n	800f23e <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	68db      	ldr	r3, [r3, #12]
 800f232:	f003 0301 	and.w	r3, r3, #1
 800f236:	2b00      	cmp	r3, #0
 800f238:	d101      	bne.n	800f23e <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 800f23a:	2301      	movs	r3, #1
 800f23c:	e000      	b.n	800f240 <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivE7isValidEv+0x2a>
 800f23e:	2300      	movs	r3, #0
 800f240:	2b01      	cmp	r3, #1
 800f242:	d001      	beq.n	800f248 <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 800f244:	2301      	movs	r3, #1
 800f246:	e000      	b.n	800f24a <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivE7isValidEv+0x34>
 800f248:	2300      	movs	r3, #0
    }
 800f24a:	4618      	mov	r0, r3
 800f24c:	370c      	adds	r7, #12
 800f24e:	46bd      	mov	sp, r7
 800f250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f254:	4770      	bx	lr

0800f256 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800f256:	b580      	push	{r7, lr}
 800f258:	b082      	sub	sp, #8
 800f25a:	af00      	add	r7, sp, #0
 800f25c:	6078      	str	r0, [r7, #4]
 800f25e:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	687a      	ldr	r2, [r7, #4]
 800f266:	68d2      	ldr	r2, [r2, #12]
 800f268:	1052      	asrs	r2, r2, #1
 800f26a:	1898      	adds	r0, r3, r2
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	68db      	ldr	r3, [r3, #12]
 800f270:	f003 0301 	and.w	r3, r3, #1
 800f274:	2b00      	cmp	r3, #0
 800f276:	d102      	bne.n	800f27e <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	689b      	ldr	r3, [r3, #8]
 800f27c:	e00a      	b.n	800f294 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	685b      	ldr	r3, [r3, #4]
 800f282:	687a      	ldr	r2, [r7, #4]
 800f284:	68d2      	ldr	r2, [r2, #12]
 800f286:	1052      	asrs	r2, r2, #1
 800f288:	4413      	add	r3, r2
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	687a      	ldr	r2, [r7, #4]
 800f28e:	6892      	ldr	r2, [r2, #8]
 800f290:	4413      	add	r3, r2
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	6839      	ldr	r1, [r7, #0]
 800f296:	4798      	blx	r3
    }
 800f298:	bf00      	nop
 800f29a:	3708      	adds	r7, #8
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}

0800f2a0 <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800f2a0:	b480      	push	{r7}
 800f2a2:	b083      	sub	sp, #12
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	685b      	ldr	r3, [r3, #4]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d010      	beq.n	800f2d2 <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	689b      	ldr	r3, [r3, #8]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d107      	bne.n	800f2c8 <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	68db      	ldr	r3, [r3, #12]
 800f2bc:	f003 0301 	and.w	r3, r3, #1
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d101      	bne.n	800f2c8 <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800f2c4:	2301      	movs	r3, #1
 800f2c6:	e000      	b.n	800f2ca <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	2b01      	cmp	r3, #1
 800f2cc:	d001      	beq.n	800f2d2 <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	e000      	b.n	800f2d4 <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800f2d2:	2300      	movs	r3, #0
    }
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	370c      	adds	r7, #12
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2de:	4770      	bx	lr

0800f2e0 <_ZN8touchgfx4ViewI17TestUartPresenterED1Ev>:
class View : public Screen
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b082      	sub	sp, #8
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
 800f2e8:	4a05      	ldr	r2, [pc, #20]	; (800f300 <_ZN8touchgfx4ViewI17TestUartPresenterED1Ev+0x20>)
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	601a      	str	r2, [r3, #0]
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7fd fb39 	bl	800c968 <_ZN8touchgfx6ScreenD1Ev>
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3708      	adds	r7, #8
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	08025c2c 	.word	0x08025c2c

0800f304 <_ZN8touchgfx4ViewI17TestUartPresenterED0Ev>:
 800f304:	b580      	push	{r7, lr}
 800f306:	b082      	sub	sp, #8
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f7ff ffe7 	bl	800f2e0 <_ZN8touchgfx4ViewI17TestUartPresenterED1Ev>
 800f312:	2140      	movs	r1, #64	; 0x40
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f013 fe9a 	bl	802304e <_ZdlPvj>
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	4618      	mov	r0, r3
 800f31e:	3708      	adds	r7, #8
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}

0800f324 <_ZN16TestUartViewBaseD1Ev>:

class TestUartViewBase : public touchgfx::View<TestUartPresenter>
{
public:
    TestUartViewBase();
    virtual ~TestUartViewBase() {}
 800f324:	b580      	push	{r7, lr}
 800f326:	b082      	sub	sp, #8
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
 800f32c:	4a15      	ldr	r2, [pc, #84]	; (800f384 <_ZN16TestUartViewBaseD1Ev+0x60>)
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	601a      	str	r2, [r3, #0]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f603 43f8 	addw	r3, r3, #3320	; 0xcf8
 800f338:	4618      	mov	r0, r3
 800f33a:	f000 f9f1 	bl	800f720 <_ZN8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800f344:	4618      	mov	r0, r3
 800f346:	f7fd fbd5 	bl	800caf4 <_ZN8touchgfx6ButtonD1Ev>
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	33d4      	adds	r3, #212	; 0xd4
 800f34e:	4618      	mov	r0, r3
 800f350:	f7fd fae8 	bl	800c924 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	3398      	adds	r3, #152	; 0x98
 800f358:	4618      	mov	r0, r3
 800f35a:	f7fd ffaf 	bl	800d2bc <_ZN8touchgfx14ButtonWithIconD1Ev>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	336c      	adds	r3, #108	; 0x6c
 800f362:	4618      	mov	r0, r3
 800f364:	f7fd fabc 	bl	800c8e0 <_ZN8touchgfx5ImageD1Ev>
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	3340      	adds	r3, #64	; 0x40
 800f36c:	4618      	mov	r0, r3
 800f36e:	f7fd fab7 	bl	800c8e0 <_ZN8touchgfx5ImageD1Ev>
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	4618      	mov	r0, r3
 800f376:	f7ff ffb3 	bl	800f2e0 <_ZN8touchgfx4ViewI17TestUartPresenterED1Ev>
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	4618      	mov	r0, r3
 800f37e:	3708      	adds	r7, #8
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}
 800f384:	08025bd8 	.word	0x08025bd8

0800f388 <_ZN16TestUartViewBaseD0Ev>:
 800f388:	b580      	push	{r7, lr}
 800f38a:	b082      	sub	sp, #8
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
 800f390:	6878      	ldr	r0, [r7, #4]
 800f392:	f7ff ffc7 	bl	800f324 <_ZN16TestUartViewBaseD1Ev>
 800f396:	f640 5108 	movw	r1, #3336	; 0xd08
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f013 fe57 	bl	802304e <_ZdlPvj>
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	3708      	adds	r7, #8
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}

0800f3aa <_ZN16TestUartViewBase17buttonWipeClickedEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void buttonWipeClicked()
 800f3aa:	b480      	push	{r7}
 800f3ac:	b083      	sub	sp, #12
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in TestUart
    }
 800f3b2:	bf00      	nop
 800f3b4:	370c      	adds	r7, #12
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3bc:	4770      	bx	lr

0800f3be <_ZN16TestUartViewBase19buttonReturnClickedEv>:

    virtual void buttonReturnClicked()
 800f3be:	b480      	push	{r7}
 800f3c0:	b083      	sub	sp, #12
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in TestUart
    }
 800f3c6:	bf00      	nop
 800f3c8:	370c      	adds	r7, #12
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d0:	4770      	bx	lr
	...

0800f3d4 <_ZN16TestUartViewBaseC1Ev>:
#include <gui_generated/testuart_screen/TestUartViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

TestUartViewBase::TestUartViewBase() :
 800f3d4:	b590      	push	{r4, r7, lr}
 800f3d6:	b093      	sub	sp, #76	; 0x4c
 800f3d8:	af02      	add	r7, sp, #8
 800f3da:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &TestUartViewBase::buttonCallbackHandler)
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f000 f968 	bl	800f6b4 <_ZN8touchgfx4ViewI17TestUartPresenterEC1Ev>
 800f3e4:	4a9b      	ldr	r2, [pc, #620]	; (800f654 <_ZN16TestUartViewBaseC1Ev+0x280>)
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	601a      	str	r2, [r3, #0]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800f3f0:	f107 030c 	add.w	r3, r7, #12
 800f3f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f7fc fe1a 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800f3fe:	f107 030c 	add.w	r3, r7, #12
 800f402:	4619      	mov	r1, r3
 800f404:	4620      	mov	r0, r4
 800f406:	f7fc fff9 	bl	800c3fc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800f410:	f107 0310 	add.w	r3, r7, #16
 800f414:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f418:	4618      	mov	r0, r3
 800f41a:	f7fc fe0a 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800f41e:	f107 0310 	add.w	r3, r7, #16
 800f422:	4619      	mov	r1, r3
 800f424:	4620      	mov	r0, r4
 800f426:	f7fc ffe9 	bl	800c3fc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	3398      	adds	r3, #152	; 0x98
 800f42e:	4618      	mov	r0, r3
 800f430:	f006 fdc6 	bl	8015fc0 <_ZN8touchgfx14ButtonWithIconC1Ev>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	33d4      	adds	r3, #212	; 0xd4
 800f438:	4618      	mov	r0, r3
 800f43a:	f7fd f92f 	bl	800c69c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800f444:	4618      	mov	r0, r3
 800f446:	f7fe f845 	bl	800d4d4 <_ZN8touchgfx6ButtonC1Ev>
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f603 40f8 	addw	r0, r3, #3320	; 0xcf8
 800f450:	4b81      	ldr	r3, [pc, #516]	; (800f658 <_ZN16TestUartViewBaseC1Ev+0x284>)
 800f452:	617b      	str	r3, [r7, #20]
 800f454:	2300      	movs	r3, #0
 800f456:	61bb      	str	r3, [r7, #24]
 800f458:	f107 0314 	add.w	r3, r7, #20
 800f45c:	cb0c      	ldmia	r3, {r2, r3}
 800f45e:	6879      	ldr	r1, [r7, #4]
 800f460:	f000 f93e 	bl	800f6e0 <_ZN8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    imageBg.setXY(0, 0);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	3340      	adds	r3, #64	; 0x40
 800f468:	2200      	movs	r2, #0
 800f46a:	2100      	movs	r1, #0
 800f46c:	4618      	mov	r0, r3
 800f46e:	f7fc fe5d 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    imageBg.setBitmap(touchgfx::Bitmap(BITMAP_GREEN_POLYGONS_BACKGROUND_480X272_ID));
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800f478:	f107 031c 	add.w	r3, r7, #28
 800f47c:	2108      	movs	r1, #8
 800f47e:	4618      	mov	r0, r3
 800f480:	f7fc fdd7 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800f484:	f107 031c 	add.w	r3, r7, #28
 800f488:	4619      	mov	r1, r3
 800f48a:	4620      	mov	r0, r4
 800f48c:	f006 fdbc 	bl	8016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    imageMessageBoxBg.setXY(81, 14);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	336c      	adds	r3, #108	; 0x6c
 800f494:	220e      	movs	r2, #14
 800f496:	2151      	movs	r1, #81	; 0x51
 800f498:	4618      	mov	r0, r3
 800f49a:	f7fc fe47 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    imageMessageBoxBg.setBitmap(touchgfx::Bitmap(BITMAP_COUNTER_BOX_MESSAGES_ID));
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800f4a4:	f107 0320 	add.w	r3, r7, #32
 800f4a8:	2106      	movs	r1, #6
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f7fc fdc1 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800f4b0:	f107 0320 	add.w	r3, r7, #32
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	4620      	mov	r0, r4
 800f4b8:	f006 fda6 	bl	8016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    buttonWipe.setXY(182, 214);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	3398      	adds	r3, #152	; 0x98
 800f4c0:	22d6      	movs	r2, #214	; 0xd6
 800f4c2:	21b6      	movs	r1, #182	; 0xb6
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7fc fe31 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    buttonWipe.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_EMPTY_RELEASED_ID), touchgfx::Bitmap(BITMAP_BUTTON_EMPTY_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICONS8_BROOM_ORANGE_ID), touchgfx::Bitmap(BITMAP_ICONS8_BROOM_ORANGE_LIGHT_ID));
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800f4d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4d4:	2102      	movs	r1, #2
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f7fc fdab 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800f4dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f4e0:	2101      	movs	r1, #1
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f7fc fda5 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800f4e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f4ec:	210a      	movs	r1, #10
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7fc fd9f 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800f4f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f4f8:	210b      	movs	r1, #11
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7fc fd99 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800f500:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800f504:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f508:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800f50c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f510:	9300      	str	r3, [sp, #0]
 800f512:	4603      	mov	r3, r0
 800f514:	4620      	mov	r0, r4
 800f516:	f006 fcb1 	bl	8015e7c <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    buttonWipe.setIconXY(49, 12);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	3398      	adds	r3, #152	; 0x98
 800f51e:	220c      	movs	r2, #12
 800f520:	2131      	movs	r1, #49	; 0x31
 800f522:	4618      	mov	r0, r3
 800f524:	f7fd fb26 	bl	800cb74 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    buttonWipe.setAction(buttonCallback);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f603 43f8 	addw	r3, r3, #3320	; 0xcf8
 800f534:	4619      	mov	r1, r3
 800f536:	4610      	mov	r0, r2
 800f538:	f7fd faab 	bl	800ca92 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textMessages.setPosition(81, 14, 360, 200);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800f542:	23c8      	movs	r3, #200	; 0xc8
 800f544:	9300      	str	r3, [sp, #0]
 800f546:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800f54a:	220e      	movs	r2, #14
 800f54c:	2151      	movs	r1, #81	; 0x51
 800f54e:	f7fa fd1d 	bl	8009f8c <_ZN8touchgfx8Drawable11setPositionEssss>
    textMessages.setColor(touchgfx::Color::getColorFrom24BitRGB(249, 186, 109));
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 800f558:	226d      	movs	r2, #109	; 0x6d
 800f55a:	21ba      	movs	r1, #186	; 0xba
 800f55c:	20f9      	movs	r0, #249	; 0xf9
 800f55e:	f7fd f8ed 	bl	800c73c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f562:	4603      	mov	r3, r0
 800f564:	4619      	mov	r1, r3
 800f566:	4620      	mov	r0, r4
 800f568:	f7fc ffd3 	bl	800c512 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textMessages.setLinespacing(0);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	33d4      	adds	r3, #212	; 0xd4
 800f570:	2100      	movs	r1, #0
 800f572:	4618      	mov	r0, r3
 800f574:	f7fd f820 	bl	800c5b8 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textMessagesBuffer[0] = 0;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2200      	movs	r2, #0
 800f57c:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
    textMessages.setWildcard(textMessagesBuffer);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800f58c:	4619      	mov	r1, r3
 800f58e:	4610      	mov	r0, r2
 800f590:	f7fd f89a 	bl	800c6c8 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textMessages.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 800f59a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f59e:	2102      	movs	r1, #2
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f7fc ff4d 	bl	800c440 <_ZN8touchgfx9TypedTextC1Et>
 800f5a6:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	f006 fb19 	bl	8015be0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    buttonReturn.setXY(10, 230);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800f5b4:	22e6      	movs	r2, #230	; 0xe6
 800f5b6:	210a      	movs	r1, #10
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7fc fdb7 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
    buttonReturn.setBitmaps(touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID), touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID));
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 800f5c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f5c8:	210e      	movs	r1, #14
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f7fc fd31 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800f5d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f5d4:	210e      	movs	r1, #14
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f7fc fd2b 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800f5dc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800f5e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	4620      	mov	r0, r4
 800f5e8:	f006 fb04 	bl	8015bf4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonReturn.setAction(buttonCallback);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	f503 7286 	add.w	r2, r3, #268	; 0x10c
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f603 43f8 	addw	r3, r3, #3320	; 0xcf8
 800f5f8:	4619      	mov	r1, r3
 800f5fa:	4610      	mov	r0, r2
 800f5fc:	f7fd fa49 	bl	800ca92 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(imageBg);
 800f600:	687a      	ldr	r2, [r7, #4]
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	3340      	adds	r3, #64	; 0x40
 800f606:	4619      	mov	r1, r3
 800f608:	4610      	mov	r0, r2
 800f60a:	f7fd fa05 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(imageMessageBoxBg);
 800f60e:	687a      	ldr	r2, [r7, #4]
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	336c      	adds	r3, #108	; 0x6c
 800f614:	4619      	mov	r1, r3
 800f616:	4610      	mov	r0, r2
 800f618:	f7fd f9fe 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWipe);
 800f61c:	687a      	ldr	r2, [r7, #4]
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	3398      	adds	r3, #152	; 0x98
 800f622:	4619      	mov	r1, r3
 800f624:	4610      	mov	r0, r2
 800f626:	f7fd f9f7 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textMessages);
 800f62a:	687a      	ldr	r2, [r7, #4]
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	33d4      	adds	r3, #212	; 0xd4
 800f630:	4619      	mov	r1, r3
 800f632:	4610      	mov	r0, r2
 800f634:	f7fd f9f0 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonReturn);
 800f638:	687a      	ldr	r2, [r7, #4]
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800f640:	4619      	mov	r1, r3
 800f642:	4610      	mov	r0, r2
 800f644:	f7fd f9e8 	bl	800ca18 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	4618      	mov	r0, r3
 800f64c:	3744      	adds	r7, #68	; 0x44
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd90      	pop	{r4, r7, pc}
 800f652:	bf00      	nop
 800f654:	08025bd8 	.word	0x08025bd8
 800f658:	0800f671 	.word	0x0800f671

0800f65c <_ZN16TestUartViewBase11setupScreenEv>:

void TestUartViewBase::setupScreen()
{
 800f65c:	b480      	push	{r7}
 800f65e:	b083      	sub	sp, #12
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]

}
 800f664:	bf00      	nop
 800f666:	370c      	adds	r7, #12
 800f668:	46bd      	mov	sp, r7
 800f66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66e:	4770      	bx	lr

0800f670 <_ZN16TestUartViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void TestUartViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b082      	sub	sp, #8
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
 800f678:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWipe)
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	3398      	adds	r3, #152	; 0x98
 800f67e:	683a      	ldr	r2, [r7, #0]
 800f680:	429a      	cmp	r2, r3
 800f682:	d106      	bne.n	800f692 <_ZN16TestUartViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //InteractionButtonWipeClicked
        //When buttonWipe clicked call virtual function
        //Call buttonWipeClicked
        buttonWipeClicked();
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	332c      	adds	r3, #44	; 0x2c
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	4798      	blx	r3
        //InteractionbuttonReturnClicked
        //When buttonReturn clicked call virtual function
        //Call buttonReturnClicked
        buttonReturnClicked();
    }
}
 800f690:	e00b      	b.n	800f6aa <_ZN16TestUartViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3a>
    else if (&src == &buttonReturn)
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800f698:	683a      	ldr	r2, [r7, #0]
 800f69a:	429a      	cmp	r2, r3
 800f69c:	d105      	bne.n	800f6aa <_ZN16TestUartViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3a>
        buttonReturnClicked();
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	3330      	adds	r3, #48	; 0x30
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	4798      	blx	r3
}
 800f6aa:	bf00      	nop
 800f6ac:	3708      	adds	r7, #8
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}
	...

0800f6b4 <_ZN8touchgfx4ViewI17TestUartPresenterEC1Ev>:
    View() : presenter(0)
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b082      	sub	sp, #8
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f008 fd74 	bl	80181ac <_ZN8touchgfx6ScreenC1Ev>
 800f6c4:	4a05      	ldr	r2, [pc, #20]	; (800f6dc <_ZN8touchgfx4ViewI17TestUartPresenterEC1Ev+0x28>)
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	601a      	str	r2, [r3, #0]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	3708      	adds	r7, #8
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}
 800f6da:	bf00      	nop
 800f6dc:	08025c2c 	.word	0x08025c2c

0800f6e0 <_ZN8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b084      	sub	sp, #16
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	60f8      	str	r0, [r7, #12]
 800f6e8:	60b9      	str	r1, [r7, #8]
 800f6ea:	4639      	mov	r1, r7
 800f6ec:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f7fd fcce 	bl	800d094 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800f6f8:	4a08      	ldr	r2, [pc, #32]	; (800f71c <_ZN8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	68ba      	ldr	r2, [r7, #8]
 800f702:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	3308      	adds	r3, #8
 800f708:	463a      	mov	r2, r7
 800f70a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f70e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	4618      	mov	r0, r3
 800f716:	3710      	adds	r7, #16
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}
 800f71c:	08025c14 	.word	0x08025c14

0800f720 <_ZN8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800f720:	b580      	push	{r7, lr}
 800f722:	b082      	sub	sp, #8
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	4a05      	ldr	r2, [pc, #20]	; (800f740 <_ZN8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	601a      	str	r2, [r3, #0]
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	4618      	mov	r0, r3
 800f732:	f7fd fd3f 	bl	800d1b4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	4618      	mov	r0, r3
 800f73a:	3708      	adds	r7, #8
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	08025c14 	.word	0x08025c14

0800f744 <_ZN8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800f744:	b580      	push	{r7, lr}
 800f746:	b082      	sub	sp, #8
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f7ff ffe7 	bl	800f720 <_ZN8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800f752:	2110      	movs	r1, #16
 800f754:	6878      	ldr	r0, [r7, #4]
 800f756:	f013 fc7a 	bl	802304e <_ZdlPvj>
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	4618      	mov	r0, r3
 800f75e:	3708      	adds	r7, #8
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}

0800f764 <_ZN8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800f764:	b580      	push	{r7, lr}
 800f766:	b082      	sub	sp, #8
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
 800f76c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	685b      	ldr	r3, [r3, #4]
 800f772:	687a      	ldr	r2, [r7, #4]
 800f774:	68d2      	ldr	r2, [r2, #12]
 800f776:	1052      	asrs	r2, r2, #1
 800f778:	1898      	adds	r0, r3, r2
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	68db      	ldr	r3, [r3, #12]
 800f77e:	f003 0301 	and.w	r3, r3, #1
 800f782:	2b00      	cmp	r3, #0
 800f784:	d102      	bne.n	800f78c <_ZN8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	689b      	ldr	r3, [r3, #8]
 800f78a:	e00a      	b.n	800f7a2 <_ZN8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	685b      	ldr	r3, [r3, #4]
 800f790:	687a      	ldr	r2, [r7, #4]
 800f792:	68d2      	ldr	r2, [r2, #12]
 800f794:	1052      	asrs	r2, r2, #1
 800f796:	4413      	add	r3, r2
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	687a      	ldr	r2, [r7, #4]
 800f79c:	6892      	ldr	r2, [r2, #8]
 800f79e:	4413      	add	r3, r2
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	6839      	ldr	r1, [r7, #0]
 800f7a4:	4798      	blx	r3
    }
 800f7a6:	bf00      	nop
 800f7a8:	3708      	adds	r7, #8
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}

0800f7ae <_ZNK8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800f7ae:	b480      	push	{r7}
 800f7b0:	b083      	sub	sp, #12
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	685b      	ldr	r3, [r3, #4]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d010      	beq.n	800f7e0 <_ZNK8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	689b      	ldr	r3, [r3, #8]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d107      	bne.n	800f7d6 <_ZNK8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	68db      	ldr	r3, [r3, #12]
 800f7ca:	f003 0301 	and.w	r3, r3, #1
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d101      	bne.n	800f7d6 <_ZNK8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	e000      	b.n	800f7d8 <_ZNK8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	2b01      	cmp	r3, #1
 800f7da:	d001      	beq.n	800f7e0 <_ZNK8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800f7dc:	2301      	movs	r3, #1
 800f7de:	e000      	b.n	800f7e2 <_ZNK8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800f7e0:	2300      	movs	r3, #0
    }
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	370c      	adds	r7, #12
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ec:	4770      	bx	lr
	...

0800f7f0 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	af00      	add	r7, sp, #0
    return bitmap_database;
 800f7f4:	4b02      	ldr	r3, [pc, #8]	; (800f800 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fe:	4770      	bx	lr
 800f800:	08025c58 	.word	0x08025c58

0800f804 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800f804:	b480      	push	{r7}
 800f806:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800f808:	2320      	movs	r3, #32
}
 800f80a:	4618      	mov	r0, r3
 800f80c:	46bd      	mov	sp, r7
 800f80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f812:	4770      	bx	lr

0800f814 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800f814:	b480      	push	{r7}
 800f816:	b085      	sub	sp, #20
 800f818:	af00      	add	r7, sp, #0
 800f81a:	60f8      	str	r0, [r7, #12]
 800f81c:	60b9      	str	r1, [r7, #8]
 800f81e:	4613      	mov	r3, r2
 800f820:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 800f822:	4a07      	ldr	r2, [pc, #28]	; (800f840 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	6013      	str	r3, [r2, #0]
        fonts = f;
 800f828:	4a06      	ldr	r2, [pc, #24]	; (800f844 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800f82e:	4a06      	ldr	r2, [pc, #24]	; (800f848 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800f830:	88fb      	ldrh	r3, [r7, #6]
 800f832:	8013      	strh	r3, [r2, #0]
    }
 800f834:	bf00      	nop
 800f836:	3714      	adds	r7, #20
 800f838:	46bd      	mov	sp, r7
 800f83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83e:	4770      	bx	lr
 800f840:	2000b23c 	.word	0x2000b23c
 800f844:	2000b244 	.word	0x2000b244
 800f848:	2000b240 	.word	0x2000b240

0800f84c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800f84c:	b590      	push	{r4, r7, lr}
 800f84e:	b085      	sub	sp, #20
 800f850:	af00      	add	r7, sp, #0
 800f852:	4603      	mov	r3, r0
 800f854:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800f856:	2300      	movs	r3, #0
 800f858:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800f85a:	88fb      	ldrh	r3, [r7, #6]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d127      	bne.n	800f8b0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800f860:	88fb      	ldrh	r3, [r7, #6]
 800f862:	4a1e      	ldr	r2, [pc, #120]	; (800f8dc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800f864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d016      	beq.n	800f89a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800f86c:	88fb      	ldrh	r3, [r7, #6]
 800f86e:	4a1b      	ldr	r2, [pc, #108]	; (800f8dc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800f870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f874:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	68ba      	ldr	r2, [r7, #8]
 800f87c:	4413      	add	r3, r2
 800f87e:	4a18      	ldr	r2, [pc, #96]	; (800f8e0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800f880:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	685b      	ldr	r3, [r3, #4]
 800f886:	68ba      	ldr	r2, [r7, #8]
 800f888:	4413      	add	r3, r2
 800f88a:	4a16      	ldr	r2, [pc, #88]	; (800f8e4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800f88c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	689b      	ldr	r3, [r3, #8]
 800f892:	68ba      	ldr	r2, [r7, #8]
 800f894:	4413      	add	r3, r2
 800f896:	60fb      	str	r3, [r7, #12]
 800f898:	e00a      	b.n	800f8b0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800f89a:	4b11      	ldr	r3, [pc, #68]	; (800f8e0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800f89c:	4a12      	ldr	r2, [pc, #72]	; (800f8e8 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800f89e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800f8a0:	4a12      	ldr	r2, [pc, #72]	; (800f8ec <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800f8a2:	4b10      	ldr	r3, [pc, #64]	; (800f8e4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800f8a4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800f8a6:	88fb      	ldrh	r3, [r7, #6]
 800f8a8:	4a11      	ldr	r2, [pc, #68]	; (800f8f0 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800f8aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8ae:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d00d      	beq.n	800f8d2 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800f8b6:	4a0f      	ldr	r2, [pc, #60]	; (800f8f4 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800f8b8:	88fb      	ldrh	r3, [r7, #6]
 800f8ba:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800f8bc:	f000 f83e 	bl	800f93c <_ZN17TypedTextDatabase8getFontsEv>
 800f8c0:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800f8c2:	f000 f833 	bl	800f92c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	461a      	mov	r2, r3
 800f8ca:	4621      	mov	r1, r4
 800f8cc:	68f8      	ldr	r0, [r7, #12]
 800f8ce:	f7ff ffa1 	bl	800f814 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800f8d2:	bf00      	nop
 800f8d4:	3714      	adds	r7, #20
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd90      	pop	{r4, r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	2000836c 	.word	0x2000836c
 800f8e0:	20008374 	.word	0x20008374
 800f8e4:	20008378 	.word	0x20008378
 800f8e8:	9017ec84 	.word	0x9017ec84
 800f8ec:	9017ec5c 	.word	0x9017ec5c
 800f8f0:	9017ed54 	.word	0x9017ed54
 800f8f4:	20008370 	.word	0x20008370

0800f8f8 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b083      	sub	sp, #12
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	460b      	mov	r3, r1
 800f902:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800f904:	4b07      	ldr	r3, [pc, #28]	; (800f924 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800f906:	681a      	ldr	r2, [r3, #0]
 800f908:	4b07      	ldr	r3, [pc, #28]	; (800f928 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800f90a:	6819      	ldr	r1, [r3, #0]
 800f90c:	887b      	ldrh	r3, [r7, #2]
 800f90e:	009b      	lsls	r3, r3, #2
 800f910:	440b      	add	r3, r1
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	005b      	lsls	r3, r3, #1
 800f916:	4413      	add	r3, r2
}
 800f918:	4618      	mov	r0, r3
 800f91a:	370c      	adds	r7, #12
 800f91c:	46bd      	mov	sp, r7
 800f91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f922:	4770      	bx	lr
 800f924:	20008374 	.word	0x20008374
 800f928:	20008378 	.word	0x20008378

0800f92c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800f92c:	b480      	push	{r7}
 800f92e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800f930:	230a      	movs	r3, #10
}
 800f932:	4618      	mov	r0, r3
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr

0800f93c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800f93c:	b480      	push	{r7}
 800f93e:	af00      	add	r7, sp, #0
    return _fonts;
 800f940:	4b02      	ldr	r3, [pc, #8]	; (800f94c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800f942:	4618      	mov	r0, r3
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr
 800f94c:	2000837c 	.word	0x2000837c

0800f950 <_Z41__static_initialization_and_destruction_0ii>:
    case 4:
        _fonts[4] = &(getFont_verdana_15_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 800f950:	b580      	push	{r7, lr}
 800f952:	b082      	sub	sp, #8
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6039      	str	r1, [r7, #0]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2b01      	cmp	r3, #1
 800f95e:	d11d      	bne.n	800f99c <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f966:	4293      	cmp	r3, r2
 800f968:	d118      	bne.n	800f99c <_Z41__static_initialization_and_destruction_0ii+0x4c>
    &(getFont_verdana_20_4bpp()),
 800f96a:	f7fa f955 	bl	8009c18 <_Z23getFont_verdana_20_4bppv>
 800f96e:	4602      	mov	r2, r0
};
 800f970:	4b0c      	ldr	r3, [pc, #48]	; (800f9a4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800f972:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 800f974:	f7fa f992 	bl	8009c9c <_Z23getFont_verdana_40_4bppv>
 800f978:	4602      	mov	r2, r0
};
 800f97a:	4b0a      	ldr	r3, [pc, #40]	; (800f9a4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800f97c:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp()),
 800f97e:	f7fa f8c7 	bl	8009b10 <_Z23getFont_verdana_10_4bppv>
 800f982:	4602      	mov	r2, r0
};
 800f984:	4b07      	ldr	r3, [pc, #28]	; (800f9a4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800f986:	609a      	str	r2, [r3, #8]
    &(getFont_verdana_80_4bpp()),
 800f988:	f7fa f9ca 	bl	8009d20 <_Z23getFont_verdana_80_4bppv>
 800f98c:	4602      	mov	r2, r0
};
 800f98e:	4b05      	ldr	r3, [pc, #20]	; (800f9a4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800f990:	60da      	str	r2, [r3, #12]
    &(getFont_verdana_15_4bpp())
 800f992:	f7fa f8ff 	bl	8009b94 <_Z23getFont_verdana_15_4bppv>
 800f996:	4602      	mov	r2, r0
};
 800f998:	4b02      	ldr	r3, [pc, #8]	; (800f9a4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800f99a:	611a      	str	r2, [r3, #16]
}  // namespace TypedTextDatabase
 800f99c:	bf00      	nop
 800f99e:	3708      	adds	r7, #8
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}
 800f9a4:	2000837c 	.word	0x2000837c

0800f9a8 <_GLOBAL__sub_I__fonts>:
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f9b0:	2001      	movs	r0, #1
 800f9b2:	f7ff ffcd 	bl	800f950 <_Z41__static_initialization_and_destruction_0ii>
 800f9b6:	bd80      	pop	{r7, pc}

0800f9b8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
	FrontendApplication(Model& m, FrontendHeap& heap);
	virtual ~FrontendApplication() { }
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	4a05      	ldr	r2, [pc, #20]	; (800f9d8 <_ZN19FrontendApplicationD1Ev+0x20>)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	601a      	str	r2, [r3, #0]
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7fa fc81 	bl	800a2d0 <_ZN23FrontendApplicationBaseD1Ev>
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3708      	adds	r7, #8
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}
 800f9d8:	08025ee0 	.word	0x08025ee0

0800f9dc <_ZN19FrontendApplicationD0Ev>:
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b082      	sub	sp, #8
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f7ff ffe7 	bl	800f9b8 <_ZN19FrontendApplicationD1Ev>
 800f9ea:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f013 fb2d 	bl	802304e <_ZdlPvj>
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3708      	adds	r7, #8
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}

0800f9fe <_ZN19FrontendApplication15handleTickEventEv>:

	virtual void handleTickEvent()
 800f9fe:	b580      	push	{r7, lr}
 800fa00:	b082      	sub	sp, #8
 800fa02:	af00      	add	r7, sp, #0
 800fa04:	6078      	str	r0, [r7, #4]
	{
		model.tick();
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f000 facf 	bl	800ffb0 <_ZN5Model4tickEv>
		FrontendApplicationBase::handleTickEvent();
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	4618      	mov	r0, r3
 800fa16:	f007 fabf 	bl	8016f98 <_ZN8touchgfx11Application15handleTickEventEv>
	}
 800fa1a:	bf00      	nop
 800fa1c:	3708      	adds	r7, #8
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}
	...

0800fa24 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/testgirouette_screen/TestGirouettePresenter.hpp>

using namespace touchgfx;


FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b084      	sub	sp, #16
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	60f8      	str	r0, [r7, #12]
 800fa2c:	60b9      	str	r1, [r7, #8]
 800fa2e:	607a      	str	r2, [r7, #4]
: FrontendApplicationBase(m, heap)
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	687a      	ldr	r2, [r7, #4]
 800fa34:	68b9      	ldr	r1, [r7, #8]
 800fa36:	4618      	mov	r0, r3
 800fa38:	f7fa fcc4 	bl	800a3c4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800fa3c:	4a03      	ldr	r2, [pc, #12]	; (800fa4c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	601a      	str	r2, [r3, #0]
{

}
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	4618      	mov	r0, r3
 800fa46:	3710      	adds	r7, #16
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd80      	pop	{r7, pc}
 800fa4c:	08025ee0 	.word	0x08025ee0

0800fa50 <_ZN13MenuContainerD1Ev>:

class MenuContainer : public MenuContainerBase
{
public:
	MenuContainer();
	virtual ~MenuContainer() {}
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b082      	sub	sp, #8
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	4a05      	ldr	r2, [pc, #20]	; (800fa70 <_ZN13MenuContainerD1Ev+0x20>)
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	601a      	str	r2, [r3, #0]
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7fc fe3f 	bl	800c6e4 <_ZN17MenuContainerBaseD1Ev>
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3708      	adds	r7, #8
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}
 800fa70:	08025f1c 	.word	0x08025f1c

0800fa74 <_ZN13MenuContainerD0Ev>:
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	f7ff ffe7 	bl	800fa50 <_ZN13MenuContainerD1Ev>
 800fa82:	21e0      	movs	r1, #224	; 0xe0
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f013 fae2 	bl	802304e <_ZdlPvj>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3708      	adds	r7, #8
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}

0800fa94 <_ZN13MenuContainerC1Ev>:
#include <gui/containers/MenuContainer.hpp>

MenuContainer::MenuContainer()
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b082      	sub	sp, #8
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fc fe76 	bl	800c790 <_ZN17MenuContainerBaseC1Ev>
 800faa4:	4a03      	ldr	r2, [pc, #12]	; (800fab4 <_ZN13MenuContainerC1Ev+0x20>)
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	601a      	str	r2, [r3, #0]
{

}
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	4618      	mov	r0, r3
 800faae:	3708      	adds	r7, #8
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}
 800fab4:	08025f1c 	.word	0x08025f1c

0800fab8 <_ZN13MenuContainer10initializeEv>:

void MenuContainer::initialize()
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b082      	sub	sp, #8
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
    MenuContainerBase::initialize();
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7fc ff02 	bl	800c8cc <_ZN17MenuContainerBase10initializeEv>
}
 800fac8:	bf00      	nop
 800faca:	3708      	adds	r7, #8
 800facc:	46bd      	mov	sp, r7
 800face:	bd80      	pop	{r7, pc}

0800fad0 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800fad0:	b480      	push	{r7}
 800fad2:	b083      	sub	sp, #12
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
    {
    }
 800fad8:	bf00      	nop
 800fada:	370c      	adds	r7, #12
 800fadc:	46bd      	mov	sp, r7
 800fade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae2:	4770      	bx	lr

0800fae4 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800fae4:	b480      	push	{r7}
 800fae6:	b083      	sub	sp, #12
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
    {
    }
 800faec:	bf00      	nop
 800faee:	370c      	adds	r7, #12
 800faf0:	46bd      	mov	sp, r7
 800faf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf6:	4770      	bx	lr

0800faf8 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 800faf8:	b480      	push	{r7}
 800fafa:	b083      	sub	sp, #12
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
    {
 800fb00:	4a04      	ldr	r2, [pc, #16]	; (800fb14 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	601a      	str	r2, [r3, #0]
    }
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	4618      	mov	r0, r3
 800fb0a:	370c      	adds	r7, #12
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb12:	4770      	bx	lr
 800fb14:	08025fe4 	.word	0x08025fe4

0800fb18 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
    }
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f7ff ffe9 	bl	800faf8 <_ZN8touchgfx9PresenterD1Ev>
 800fb26:	2104      	movs	r1, #4
 800fb28:	6878      	ldr	r0, [r7, #4]
 800fb2a:	f013 fa90 	bl	802304e <_ZdlPvj>
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	4618      	mov	r0, r3
 800fb32:	3708      	adds	r7, #8
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}

0800fb38 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 800fb38:	b480      	push	{r7}
 800fb3a:	b083      	sub	sp, #12
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
    {
 800fb40:	4a04      	ldr	r2, [pc, #16]	; (800fb54 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	601a      	str	r2, [r3, #0]
    }
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	4618      	mov	r0, r3
 800fb4a:	370c      	adds	r7, #12
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb52:	4770      	bx	lr
 800fb54:	08025fe4 	.word	0x08025fe4

0800fb58 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800fb58:	b480      	push	{r7}
 800fb5a:	b083      	sub	sp, #12
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	4a06      	ldr	r2, [pc, #24]	; (800fb7c <_ZN13ModelListenerC1Ev+0x24>)
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	601a      	str	r2, [r3, #0]
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2200      	movs	r2, #0
 800fb6a:	605a      	str	r2, [r3, #4]
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	4618      	mov	r0, r3
 800fb70:	370c      	adds	r7, #12
 800fb72:	46bd      	mov	sp, r7
 800fb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb78:	4770      	bx	lr
 800fb7a:	bf00      	nop
 800fb7c:	08025fd4 	.word	0x08025fd4

0800fb80 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800fb80:	b480      	push	{r7}
 800fb82:	b083      	sub	sp, #12
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	4a04      	ldr	r2, [pc, #16]	; (800fb9c <_ZN13ModelListenerD1Ev+0x1c>)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	601a      	str	r2, [r3, #0]
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	4618      	mov	r0, r3
 800fb92:	370c      	adds	r7, #12
 800fb94:	46bd      	mov	sp, r7
 800fb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9a:	4770      	bx	lr
 800fb9c:	08025fd4 	.word	0x08025fd4

0800fba0 <_ZN13ModelListenerD0Ev>:
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b082      	sub	sp, #8
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f7ff ffe9 	bl	800fb80 <_ZN13ModelListenerD1Ev>
 800fbae:	2108      	movs	r1, #8
 800fbb0:	6878      	ldr	r0, [r7, #4]
 800fbb2:	f013 fa4c 	bl	802304e <_ZdlPvj>
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	4618      	mov	r0, r3
 800fbba:	3708      	adds	r7, #8
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}

0800fbc0 <_ZN13MenuPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MenuPresenter() {};
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b082      	sub	sp, #8
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	4a09      	ldr	r2, [pc, #36]	; (800fbf0 <_ZN13MenuPresenterD1Ev+0x30>)
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	601a      	str	r2, [r3, #0]
 800fbce:	4a09      	ldr	r2, [pc, #36]	; (800fbf4 <_ZN13MenuPresenterD1Ev+0x34>)
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	605a      	str	r2, [r3, #4]
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	3304      	adds	r3, #4
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7ff ffd1 	bl	800fb80 <_ZN13ModelListenerD1Ev>
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f7ff ff89 	bl	800faf8 <_ZN8touchgfx9PresenterD1Ev>
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3708      	adds	r7, #8
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd80      	pop	{r7, pc}
 800fbf0:	08025fac 	.word	0x08025fac
 800fbf4:	08025fc4 	.word	0x08025fc4

0800fbf8 <_ZThn4_N13MenuPresenterD1Ev>:
 800fbf8:	f1a0 0004 	sub.w	r0, r0, #4
 800fbfc:	e7e0      	b.n	800fbc0 <_ZN13MenuPresenterD1Ev>
 800fbfe:	bf00      	nop

0800fc00 <_ZN13MenuPresenterD0Ev>:
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b082      	sub	sp, #8
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f7ff ffd9 	bl	800fbc0 <_ZN13MenuPresenterD1Ev>
 800fc0e:	2110      	movs	r1, #16
 800fc10:	6878      	ldr	r0, [r7, #4]
 800fc12:	f013 fa1c 	bl	802304e <_ZdlPvj>
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	4618      	mov	r0, r3
 800fc1a:	3708      	adds	r7, #8
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd80      	pop	{r7, pc}

0800fc20 <_ZThn4_N13MenuPresenterD0Ev>:
 800fc20:	f1a0 0004 	sub.w	r0, r0, #4
 800fc24:	e7ec      	b.n	800fc00 <_ZN13MenuPresenterD0Ev>
	...

0800fc28 <_ZN13MenuPresenterC1ER8MenuView>:
#include <gui/menu_screen/MenuView.hpp>
#include <gui/menu_screen/MenuPresenter.hpp>

MenuPresenter::MenuPresenter(MenuView& v)
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b082      	sub	sp, #8
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
 800fc30:	6039      	str	r1, [r7, #0]
    : view(v)
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	4618      	mov	r0, r3
 800fc36:	f7ff ff7f 	bl	800fb38 <_ZN8touchgfx9PresenterC1Ev>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	3304      	adds	r3, #4
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f7ff ff8a 	bl	800fb58 <_ZN13ModelListenerC1Ev>
 800fc44:	4a06      	ldr	r2, [pc, #24]	; (800fc60 <_ZN13MenuPresenterC1ER8MenuView+0x38>)
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	601a      	str	r2, [r3, #0]
 800fc4a:	4a06      	ldr	r2, [pc, #24]	; (800fc64 <_ZN13MenuPresenterC1ER8MenuView+0x3c>)
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	605a      	str	r2, [r3, #4]
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	683a      	ldr	r2, [r7, #0]
 800fc54:	60da      	str	r2, [r3, #12]
{

}
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3708      	adds	r7, #8
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}
 800fc60:	08025fac 	.word	0x08025fac
 800fc64:	08025fc4 	.word	0x08025fc4

0800fc68 <_ZN13MenuPresenter8activateEv>:

void MenuPresenter::activate()
{
 800fc68:	b480      	push	{r7}
 800fc6a:	b083      	sub	sp, #12
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]

}
 800fc70:	bf00      	nop
 800fc72:	370c      	adds	r7, #12
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <_ZN13MenuPresenter10deactivateEv>:

void MenuPresenter::deactivate()
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b083      	sub	sp, #12
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]

}
 800fc84:	bf00      	nop
 800fc86:	370c      	adds	r7, #12
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8e:	4770      	bx	lr

0800fc90 <_ZN13MenuContainer9setNumberEi>:

	virtual void initialize();

	void setNumber(int no)
 800fc90:	b590      	push	{r4, r7, lr}
 800fc92:	b08b      	sub	sp, #44	; 0x2c
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
 800fc98:	6039      	str	r1, [r7, #0]
	{
		switch (no)
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	2b06      	cmp	r3, #6
 800fc9e:	f200 80b2 	bhi.w	800fe06 <_ZN13MenuContainer9setNumberEi+0x176>
 800fca2:	a201      	add	r2, pc, #4	; (adr r2, 800fca8 <_ZN13MenuContainer9setNumberEi+0x18>)
 800fca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fca8:	0800fcc5 	.word	0x0800fcc5
 800fcac:	0800fcf3 	.word	0x0800fcf3
 800fcb0:	0800fd21 	.word	0x0800fd21
 800fcb4:	0800fd4f 	.word	0x0800fd4f
 800fcb8:	0800fd7d 	.word	0x0800fd7d
 800fcbc:	0800fdab 	.word	0x0800fdab
 800fcc0:	0800fdd9 	.word	0x0800fdd9
		{
		case 0:
			image.setBitmap(Bitmap(BITMAP_ICONS8_COMPASS_48_ID));
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fcca:	f107 030c 	add.w	r3, r7, #12
 800fcce:	210d      	movs	r1, #13
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f7fc f9ae 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800fcd6:	f107 030c 	add.w	r3, r7, #12
 800fcda:	4619      	mov	r1, r3
 800fcdc:	4620      	mov	r0, r4
 800fcde:	f006 f993 	bl	8016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
			Unicode::snprintf(textAreaBuffer, TEXTAREA_SIZE, "Orientation\nPlateau");
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	3390      	adds	r3, #144	; 0x90
 800fce6:	4a4a      	ldr	r2, [pc, #296]	; (800fe10 <_ZN13MenuContainer9setNumberEi+0x180>)
 800fce8:	2128      	movs	r1, #40	; 0x28
 800fcea:	4618      	mov	r0, r3
 800fcec:	f009 fbb4 	bl	8019458 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			break;
 800fcf0:	e08a      	b.n	800fe08 <_ZN13MenuContainer9setNumberEi+0x178>
		case 1:
			image.setBitmap(Bitmap(BITMAP_ICONS8_WIND_48_ID));
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fcf8:	f107 0310 	add.w	r3, r7, #16
 800fcfc:	2114      	movs	r1, #20
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f7fc f997 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800fd04:	f107 0310 	add.w	r3, r7, #16
 800fd08:	4619      	mov	r1, r3
 800fd0a:	4620      	mov	r0, r4
 800fd0c:	f006 f97c 	bl	8016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

			Unicode::snprintf(textAreaBuffer, TEXTAREA_SIZE, "Orientation\nVoile");
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	3390      	adds	r3, #144	; 0x90
 800fd14:	4a3f      	ldr	r2, [pc, #252]	; (800fe14 <_ZN13MenuContainer9setNumberEi+0x184>)
 800fd16:	2128      	movs	r1, #40	; 0x28
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f009 fb9d 	bl	8019458 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			break;
 800fd1e:	e073      	b.n	800fe08 <_ZN13MenuContainer9setNumberEi+0x178>
		case 2:
			image.setBitmap(Bitmap(BITMAP_ICONS8_SAMPLE_RATE_48_ID));
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fd26:	f107 0314 	add.w	r3, r7, #20
 800fd2a:	2110      	movs	r1, #16
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f7fc f980 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800fd32:	f107 0314 	add.w	r3, r7, #20
 800fd36:	4619      	mov	r1, r3
 800fd38:	4620      	mov	r0, r4
 800fd3a:	f006 f965 	bl	8016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
			Unicode::snprintf(textAreaBuffer, TEXTAREA_SIZE, "Tension\nBatterie");
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	3390      	adds	r3, #144	; 0x90
 800fd42:	4a35      	ldr	r2, [pc, #212]	; (800fe18 <_ZN13MenuContainer9setNumberEi+0x188>)
 800fd44:	2128      	movs	r1, #40	; 0x28
 800fd46:	4618      	mov	r0, r3
 800fd48:	f009 fb86 	bl	8019458 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			break;
 800fd4c:	e05c      	b.n	800fe08 <_ZN13MenuContainer9setNumberEi+0x178>
		case 3:
			image.setBitmap(Bitmap(BITMAP_COMMUNICATION_48_ID));
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fd54:	f107 0318 	add.w	r3, r7, #24
 800fd58:	2103      	movs	r1, #3
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f7fc f969 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800fd60:	f107 0318 	add.w	r3, r7, #24
 800fd64:	4619      	mov	r1, r3
 800fd66:	4620      	mov	r0, r4
 800fd68:	f006 f94e 	bl	8016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
			Unicode::snprintf(textAreaBuffer, TEXTAREA_SIZE, "Com\nSerie");
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	3390      	adds	r3, #144	; 0x90
 800fd70:	4a2a      	ldr	r2, [pc, #168]	; (800fe1c <_ZN13MenuContainer9setNumberEi+0x18c>)
 800fd72:	2128      	movs	r1, #40	; 0x28
 800fd74:	4618      	mov	r0, r3
 800fd76:	f009 fb6f 	bl	8019458 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			break;
 800fd7a:	e045      	b.n	800fe08 <_ZN13MenuContainer9setNumberEi+0x178>
		case 4:
			image.setBitmap(Bitmap(BITMAP_I2C_SPI_48_ID));
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fd82:	f107 031c 	add.w	r3, r7, #28
 800fd86:	2109      	movs	r1, #9
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f7fc f952 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800fd8e:	f107 031c 	add.w	r3, r7, #28
 800fd92:	4619      	mov	r1, r3
 800fd94:	4620      	mov	r0, r4
 800fd96:	f006 f937 	bl	8016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
			Unicode::snprintf(textAreaBuffer, TEXTAREA_SIZE, "Com\nI2C & SPI");
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	3390      	adds	r3, #144	; 0x90
 800fd9e:	4a20      	ldr	r2, [pc, #128]	; (800fe20 <_ZN13MenuContainer9setNumberEi+0x190>)
 800fda0:	2128      	movs	r1, #40	; 0x28
 800fda2:	4618      	mov	r0, r3
 800fda4:	f009 fb58 	bl	8019458 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			break;
 800fda8:	e02e      	b.n	800fe08 <_ZN13MenuContainer9setNumberEi+0x178>
		case 5:
			image.setBitmap(Bitmap(BITMAP_GIROUTTE_48_ID));
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fdb0:	f107 0320 	add.w	r3, r7, #32
 800fdb4:	2107      	movs	r1, #7
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7fc f93b 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800fdbc:	f107 0320 	add.w	r3, r7, #32
 800fdc0:	4619      	mov	r1, r3
 800fdc2:	4620      	mov	r0, r4
 800fdc4:	f006 f920 	bl	8016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
			Unicode::snprintf(textAreaBuffer, TEXTAREA_SIZE, "Girouette");
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	3390      	adds	r3, #144	; 0x90
 800fdcc:	4a15      	ldr	r2, [pc, #84]	; (800fe24 <_ZN13MenuContainer9setNumberEi+0x194>)
 800fdce:	2128      	movs	r1, #40	; 0x28
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f009 fb41 	bl	8019458 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			break;
 800fdd6:	e017      	b.n	800fe08 <_ZN13MenuContainer9setNumberEi+0x178>
		case 6:
			image.setBitmap(Bitmap(BITMAP_ICONS8_TEST_PASSED_48_ID));
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fdde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fde2:	2111      	movs	r1, #17
 800fde4:	4618      	mov	r0, r3
 800fde6:	f7fc f924 	bl	800c032 <_ZN8touchgfx6BitmapC1Et>
 800fdea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fdee:	4619      	mov	r1, r3
 800fdf0:	4620      	mov	r0, r4
 800fdf2:	f006 f909 	bl	8016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
			Unicode::snprintf(textAreaBuffer, TEXTAREA_SIZE, "Test\nComplet");
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	3390      	adds	r3, #144	; 0x90
 800fdfa:	4a0b      	ldr	r2, [pc, #44]	; (800fe28 <_ZN13MenuContainer9setNumberEi+0x198>)
 800fdfc:	2128      	movs	r1, #40	; 0x28
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f009 fb2a 	bl	8019458 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			break;
 800fe04:	e000      	b.n	800fe08 <_ZN13MenuContainer9setNumberEi+0x178>
		default:
			break;
 800fe06:	bf00      	nop
		}
	}
 800fe08:	bf00      	nop
 800fe0a:	372c      	adds	r7, #44	; 0x2c
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd90      	pop	{r4, r7, pc}
 800fe10:	0802473c 	.word	0x0802473c
 800fe14:	08024750 	.word	0x08024750
 800fe18:	08024764 	.word	0x08024764
 800fe1c:	08024778 	.word	0x08024778
 800fe20:	08024784 	.word	0x08024784
 800fe24:	08024794 	.word	0x08024794
 800fe28:	080247a0 	.word	0x080247a0

0800fe2c <_ZN8MenuViewD1Ev>:

class MenuView : public MenuViewBase
{
public:
    MenuView();
    virtual ~MenuView() {}
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
 800fe34:	4a05      	ldr	r2, [pc, #20]	; (800fe4c <_ZN8MenuViewD1Ev+0x20>)
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	601a      	str	r2, [r3, #0]
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7fc fed3 	bl	800cbe8 <_ZN12MenuViewBaseD1Ev>
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	4618      	mov	r0, r3
 800fe46:	3708      	adds	r7, #8
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}
 800fe4c:	08025ffc 	.word	0x08025ffc

0800fe50 <_ZN8MenuViewD0Ev>:
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b082      	sub	sp, #8
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	f7ff ffe7 	bl	800fe2c <_ZN8MenuViewD1Ev>
 800fe5e:	f240 51ec 	movw	r1, #1516	; 0x5ec
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f013 f8f3 	bl	802304e <_ZdlPvj>
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	3708      	adds	r7, #8
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}
	...

0800fe74 <_ZN8MenuViewC1Ev>:
#include <gui/menu_screen/MenuView.hpp>
#include <gui_generated/common/FrontendApplicationBase.hpp>
#include <gui/common/FrontendApplication.hpp>

MenuView::MenuView()
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b082      	sub	sp, #8
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f7fc ff0e 	bl	800cca0 <_ZN12MenuViewBaseC1Ev>
 800fe84:	4a03      	ldr	r2, [pc, #12]	; (800fe94 <_ZN8MenuViewC1Ev+0x20>)
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	601a      	str	r2, [r3, #0]
{

}
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3708      	adds	r7, #8
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}
 800fe94:	08025ffc 	.word	0x08025ffc

0800fe98 <_ZN8MenuView11setupScreenEv>:

void MenuView::setupScreen()
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b082      	sub	sp, #8
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
	MenuViewBase::setupScreen();
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	4618      	mov	r0, r3
 800fea4:	f7fd f80c 	bl	800cec0 <_ZN12MenuViewBase11setupScreenEv>
}
 800fea8:	bf00      	nop
 800feaa:	3708      	adds	r7, #8
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}

0800feb0 <_ZN8MenuView14tearDownScreenEv>:

void MenuView::tearDownScreen()
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b082      	sub	sp, #8
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
	MenuViewBase::tearDownScreen();
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	4618      	mov	r0, r3
 800febc:	f7fc fd8c 	bl	800c9d8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800fec0:	bf00      	nop
 800fec2:	3708      	adds	r7, #8
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <_ZN8MenuView21scrollWheelUpdateItemER13MenuContainers>:

void MenuView::scrollWheelUpdateItem(MenuContainer& item, int16_t itemIndex)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b084      	sub	sp, #16
 800fecc:	af00      	add	r7, sp, #0
 800fece:	60f8      	str	r0, [r7, #12]
 800fed0:	60b9      	str	r1, [r7, #8]
 800fed2:	4613      	mov	r3, r2
 800fed4:	80fb      	strh	r3, [r7, #6]
	item.setNumber(itemIndex);
 800fed6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800feda:	4619      	mov	r1, r3
 800fedc:	68b8      	ldr	r0, [r7, #8]
 800fede:	f7ff fed7 	bl	800fc90 <_ZN13MenuContainer9setNumberEi>
}
 800fee2:	bf00      	nop
 800fee4:	3710      	adds	r7, #16
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}
	...

0800feec <_ZN8MenuView15ButtonOKClickedEv>:

void MenuView::ButtonOKClicked()
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b082      	sub	sp, #8
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
	switch (scrollWheel.getSelectedItem())
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	336c      	adds	r3, #108	; 0x6c
 800fef8:	4618      	mov	r0, r3
 800fefa:	f003 f805 	bl	8012f08 <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv>
 800fefe:	4603      	mov	r3, r0
 800ff00:	2b06      	cmp	r3, #6
 800ff02:	d842      	bhi.n	800ff8a <_ZN8MenuView15ButtonOKClickedEv+0x9e>
 800ff04:	a201      	add	r2, pc, #4	; (adr r2, 800ff0c <_ZN8MenuView15ButtonOKClickedEv+0x20>)
 800ff06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff0a:	bf00      	nop
 800ff0c:	0800ff29 	.word	0x0800ff29
 800ff10:	0800ff37 	.word	0x0800ff37
 800ff14:	0800ff45 	.word	0x0800ff45
 800ff18:	0800ff53 	.word	0x0800ff53
 800ff1c:	0800ff61 	.word	0x0800ff61
 800ff20:	0800ff6f 	.word	0x0800ff6f
 800ff24:	0800ff7d 	.word	0x0800ff7d
	{
	case 0:
		static_cast<FrontendApplication*>(Application::getInstance())->gotoTestRotationPlateauScreenSlideTransitionEast();
 800ff28:	f007 f962 	bl	80171f0 <_ZN8touchgfx11Application11getInstanceEv>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7fa faea 	bl	800a508 <_ZN23FrontendApplicationBase48gotoTestRotationPlateauScreenSlideTransitionEastEv>
		break;
 800ff34:	e02a      	b.n	800ff8c <_ZN8MenuView15ButtonOKClickedEv+0xa0>
	case 1:
		static_cast<FrontendApplication*>(Application::getInstance())->gotoTestOrientationVoileScreenSlideTransitionEast();
 800ff36:	f007 f95b 	bl	80171f0 <_ZN8touchgfx11Application11getInstanceEv>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f7fa fbb5 	bl	800a6ac <_ZN23FrontendApplicationBase49gotoTestOrientationVoileScreenSlideTransitionEastEv>
		break;
 800ff42:	e023      	b.n	800ff8c <_ZN8MenuView15ButtonOKClickedEv+0xa0>
	case 2:
		static_cast<FrontendApplication*>(Application::getInstance())->gotoTestADCScreenSlideTransitionEast();
 800ff44:	f007 f954 	bl	80171f0 <_ZN8touchgfx11Application11getInstanceEv>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f7fa fbf4 	bl	800a738 <_ZN23FrontendApplicationBase36gotoTestADCScreenSlideTransitionEastEv>
		break;
 800ff50:	e01c      	b.n	800ff8c <_ZN8MenuView15ButtonOKClickedEv+0xa0>
	case 3:
		static_cast<FrontendApplication*>(Application::getInstance())->gotoTestUartScreenSlideTransitionEast();
 800ff52:	f007 f94d 	bl	80171f0 <_ZN8touchgfx11Application11getInstanceEv>
 800ff56:	4603      	mov	r3, r0
 800ff58:	4618      	mov	r0, r3
 800ff5a:	f7fa fb1b 	bl	800a594 <_ZN23FrontendApplicationBase37gotoTestUartScreenSlideTransitionEastEv>
		break;
 800ff5e:	e015      	b.n	800ff8c <_ZN8MenuView15ButtonOKClickedEv+0xa0>
	case 4:
		static_cast<FrontendApplication*>(Application::getInstance())->gotoTestI2CSPIScreenSlideTransitionEast();
 800ff60:	f007 f946 	bl	80171f0 <_ZN8touchgfx11Application11getInstanceEv>
 800ff64:	4603      	mov	r3, r0
 800ff66:	4618      	mov	r0, r3
 800ff68:	f7fa fb5a 	bl	800a620 <_ZN23FrontendApplicationBase39gotoTestI2CSPIScreenSlideTransitionEastEv>
		break;
 800ff6c:	e00e      	b.n	800ff8c <_ZN8MenuView15ButtonOKClickedEv+0xa0>
	case 5:
		static_cast<FrontendApplication*>(Application::getInstance())->gotoTestGirouetteScreenSlideTransitionEast();
 800ff6e:	f007 f93f 	bl	80171f0 <_ZN8touchgfx11Application11getInstanceEv>
 800ff72:	4603      	mov	r3, r0
 800ff74:	4618      	mov	r0, r3
 800ff76:	f7fa fc6b 	bl	800a850 <_ZN23FrontendApplicationBase42gotoTestGirouetteScreenSlideTransitionEastEv>
		break;
 800ff7a:	e007      	b.n	800ff8c <_ZN8MenuView15ButtonOKClickedEv+0xa0>
	case 6:
		static_cast<FrontendApplication*>(Application::getInstance())->gotoTestCompletScreenSlideTransitionEast();
 800ff7c:	f007 f938 	bl	80171f0 <_ZN8touchgfx11Application11getInstanceEv>
 800ff80:	4603      	mov	r3, r0
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7fa fc1e 	bl	800a7c4 <_ZN23FrontendApplicationBase40gotoTestCompletScreenSlideTransitionEastEv>
		break;
 800ff88:	e000      	b.n	800ff8c <_ZN8MenuView15ButtonOKClickedEv+0xa0>
	default:
		break;
 800ff8a:	bf00      	nop
	}
	//else
		//	static_cast<FrontendApplication*>(Application::getInstance())->gotoTestUartScreenNoTransition();
}
 800ff8c:	bf00      	nop
 800ff8e:	3708      	adds	r7, #8
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}

0800ff94 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800ff94:	b480      	push	{r7}
 800ff96:	b083      	sub	sp, #12
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	601a      	str	r2, [r3, #0]
{

}
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	370c      	adds	r7, #12
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffae:	4770      	bx	lr

0800ffb0 <_ZN5Model4tickEv>:

void Model::tick()
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b083      	sub	sp, #12
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]

}
 800ffb8:	bf00      	nop
 800ffba:	370c      	adds	r7, #12
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc2:	4770      	bx	lr

0800ffc4 <_ZN16TestADCPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~TestADCPresenter() {};
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
 800ffcc:	4a09      	ldr	r2, [pc, #36]	; (800fff4 <_ZN16TestADCPresenterD1Ev+0x30>)
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	601a      	str	r2, [r3, #0]
 800ffd2:	4a09      	ldr	r2, [pc, #36]	; (800fff8 <_ZN16TestADCPresenterD1Ev+0x34>)
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	605a      	str	r2, [r3, #4]
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	3304      	adds	r3, #4
 800ffdc:	4618      	mov	r0, r3
 800ffde:	f7ff fdcf 	bl	800fb80 <_ZN13ModelListenerD1Ev>
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f7ff fd87 	bl	800faf8 <_ZN8touchgfx9PresenterD1Ev>
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	4618      	mov	r0, r3
 800ffee:	3708      	adds	r7, #8
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}
 800fff4:	08026038 	.word	0x08026038
 800fff8:	08026050 	.word	0x08026050

0800fffc <_ZThn4_N16TestADCPresenterD1Ev>:
 800fffc:	f1a0 0004 	sub.w	r0, r0, #4
 8010000:	e7e0      	b.n	800ffc4 <_ZN16TestADCPresenterD1Ev>
 8010002:	bf00      	nop

08010004 <_ZN16TestADCPresenterD0Ev>:
 8010004:	b580      	push	{r7, lr}
 8010006:	b082      	sub	sp, #8
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f7ff ffd9 	bl	800ffc4 <_ZN16TestADCPresenterD1Ev>
 8010012:	2110      	movs	r1, #16
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f013 f81a 	bl	802304e <_ZdlPvj>
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	4618      	mov	r0, r3
 801001e:	3708      	adds	r7, #8
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}

08010024 <_ZThn4_N16TestADCPresenterD0Ev>:
 8010024:	f1a0 0004 	sub.w	r0, r0, #4
 8010028:	e7ec      	b.n	8010004 <_ZN16TestADCPresenterD0Ev>
	...

0801002c <_ZN16TestADCPresenterC1ER11TestADCView>:
#include <gui/testadc_screen/TestADCView.hpp>
#include <gui/testadc_screen/TestADCPresenter.hpp>

TestADCPresenter::TestADCPresenter(TestADCView& v)
 801002c:	b580      	push	{r7, lr}
 801002e:	b082      	sub	sp, #8
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	6039      	str	r1, [r7, #0]
    : view(v)
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	4618      	mov	r0, r3
 801003a:	f7ff fd7d 	bl	800fb38 <_ZN8touchgfx9PresenterC1Ev>
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	3304      	adds	r3, #4
 8010042:	4618      	mov	r0, r3
 8010044:	f7ff fd88 	bl	800fb58 <_ZN13ModelListenerC1Ev>
 8010048:	4a06      	ldr	r2, [pc, #24]	; (8010064 <_ZN16TestADCPresenterC1ER11TestADCView+0x38>)
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	601a      	str	r2, [r3, #0]
 801004e:	4a06      	ldr	r2, [pc, #24]	; (8010068 <_ZN16TestADCPresenterC1ER11TestADCView+0x3c>)
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	605a      	str	r2, [r3, #4]
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	683a      	ldr	r2, [r7, #0]
 8010058:	60da      	str	r2, [r3, #12]
{

}
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	4618      	mov	r0, r3
 801005e:	3708      	adds	r7, #8
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}
 8010064:	08026038 	.word	0x08026038
 8010068:	08026050 	.word	0x08026050

0801006c <_ZN16TestADCPresenter8activateEv>:

void TestADCPresenter::activate()
{
 801006c:	b480      	push	{r7}
 801006e:	b083      	sub	sp, #12
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]

}
 8010074:	bf00      	nop
 8010076:	370c      	adds	r7, #12
 8010078:	46bd      	mov	sp, r7
 801007a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007e:	4770      	bx	lr

08010080 <_ZN16TestADCPresenter10deactivateEv>:

void TestADCPresenter::deactivate()
{
 8010080:	b480      	push	{r7}
 8010082:	b083      	sub	sp, #12
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]

}
 8010088:	bf00      	nop
 801008a:	370c      	adds	r7, #12
 801008c:	46bd      	mov	sp, r7
 801008e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010092:	4770      	bx	lr

08010094 <_ZN11TestADCViewD1Ev>:

class TestADCView : public TestADCViewBase
{
public:
    TestADCView();
    virtual ~TestADCView() {}
 8010094:	b580      	push	{r7, lr}
 8010096:	b082      	sub	sp, #8
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
 801009c:	4a05      	ldr	r2, [pc, #20]	; (80100b4 <_ZN11TestADCViewD1Ev+0x20>)
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	601a      	str	r2, [r3, #0]
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	4618      	mov	r0, r3
 80100a6:	f7fd fa5b 	bl	800d560 <_ZN15TestADCViewBaseD1Ev>
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	4618      	mov	r0, r3
 80100ae:	3708      	adds	r7, #8
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}
 80100b4:	08026060 	.word	0x08026060

080100b8 <_ZN11TestADCViewD0Ev>:
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b082      	sub	sp, #8
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f7ff ffe7 	bl	8010094 <_ZN11TestADCViewD1Ev>
 80100c6:	21e4      	movs	r1, #228	; 0xe4
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	f012 ffc0 	bl	802304e <_ZdlPvj>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	4618      	mov	r0, r3
 80100d2:	3708      	adds	r7, #8
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}

080100d8 <_ZN11TestADCViewC1Ev>:
#include <gui/testadc_screen/TestADCView.hpp>

TestADCView::TestADCView()
 80100d8:	b580      	push	{r7, lr}
 80100da:	b082      	sub	sp, #8
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7fd fa7c 	bl	800d5e0 <_ZN15TestADCViewBaseC1Ev>
 80100e8:	4a03      	ldr	r2, [pc, #12]	; (80100f8 <_ZN11TestADCViewC1Ev+0x20>)
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	601a      	str	r2, [r3, #0]
{

}
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	4618      	mov	r0, r3
 80100f2:	3708      	adds	r7, #8
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bd80      	pop	{r7, pc}
 80100f8:	08026060 	.word	0x08026060

080100fc <_ZN11TestADCView11setupScreenEv>:

void TestADCView::setupScreen()
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b082      	sub	sp, #8
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
    TestADCViewBase::setupScreen();
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	4618      	mov	r0, r3
 8010108:	f7fd fb1e 	bl	800d748 <_ZN15TestADCViewBase11setupScreenEv>
}
 801010c:	bf00      	nop
 801010e:	3708      	adds	r7, #8
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}

08010114 <_ZN11TestADCView14tearDownScreenEv>:

void TestADCView::tearDownScreen()
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b082      	sub	sp, #8
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
    TestADCViewBase::tearDownScreen();
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	4618      	mov	r0, r3
 8010120:	f7fc fc5a 	bl	800c9d8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8010124:	bf00      	nop
 8010126:	3708      	adds	r7, #8
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}

0801012c <_ZN20TestCompletPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~TestCompletPresenter() {};
 801012c:	b580      	push	{r7, lr}
 801012e:	b082      	sub	sp, #8
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	4a09      	ldr	r2, [pc, #36]	; (801015c <_ZN20TestCompletPresenterD1Ev+0x30>)
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	601a      	str	r2, [r3, #0]
 801013a:	4a09      	ldr	r2, [pc, #36]	; (8010160 <_ZN20TestCompletPresenterD1Ev+0x34>)
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	605a      	str	r2, [r3, #4]
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	3304      	adds	r3, #4
 8010144:	4618      	mov	r0, r3
 8010146:	f7ff fd1b 	bl	800fb80 <_ZN13ModelListenerD1Ev>
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	4618      	mov	r0, r3
 801014e:	f7ff fcd3 	bl	800faf8 <_ZN8touchgfx9PresenterD1Ev>
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	4618      	mov	r0, r3
 8010156:	3708      	adds	r7, #8
 8010158:	46bd      	mov	sp, r7
 801015a:	bd80      	pop	{r7, pc}
 801015c:	08026098 	.word	0x08026098
 8010160:	080260b0 	.word	0x080260b0

08010164 <_ZThn4_N20TestCompletPresenterD1Ev>:
 8010164:	f1a0 0004 	sub.w	r0, r0, #4
 8010168:	e7e0      	b.n	801012c <_ZN20TestCompletPresenterD1Ev>
 801016a:	bf00      	nop

0801016c <_ZN20TestCompletPresenterD0Ev>:
 801016c:	b580      	push	{r7, lr}
 801016e:	b082      	sub	sp, #8
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	f7ff ffd9 	bl	801012c <_ZN20TestCompletPresenterD1Ev>
 801017a:	2110      	movs	r1, #16
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f012 ff66 	bl	802304e <_ZdlPvj>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	4618      	mov	r0, r3
 8010186:	3708      	adds	r7, #8
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}

0801018c <_ZThn4_N20TestCompletPresenterD0Ev>:
 801018c:	f1a0 0004 	sub.w	r0, r0, #4
 8010190:	e7ec      	b.n	801016c <_ZN20TestCompletPresenterD0Ev>
	...

08010194 <_ZN20TestCompletPresenterC1ER15TestCompletView>:
#include <gui/testcomplet_screen/TestCompletView.hpp>
#include <gui/testcomplet_screen/TestCompletPresenter.hpp>

TestCompletPresenter::TestCompletPresenter(TestCompletView& v)
 8010194:	b580      	push	{r7, lr}
 8010196:	b082      	sub	sp, #8
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	6039      	str	r1, [r7, #0]
    : view(v)
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7ff fcc9 	bl	800fb38 <_ZN8touchgfx9PresenterC1Ev>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	3304      	adds	r3, #4
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7ff fcd4 	bl	800fb58 <_ZN13ModelListenerC1Ev>
 80101b0:	4a06      	ldr	r2, [pc, #24]	; (80101cc <_ZN20TestCompletPresenterC1ER15TestCompletView+0x38>)
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	601a      	str	r2, [r3, #0]
 80101b6:	4a06      	ldr	r2, [pc, #24]	; (80101d0 <_ZN20TestCompletPresenterC1ER15TestCompletView+0x3c>)
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	605a      	str	r2, [r3, #4]
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	683a      	ldr	r2, [r7, #0]
 80101c0:	60da      	str	r2, [r3, #12]
{

}
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	4618      	mov	r0, r3
 80101c6:	3708      	adds	r7, #8
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}
 80101cc:	08026098 	.word	0x08026098
 80101d0:	080260b0 	.word	0x080260b0

080101d4 <_ZN20TestCompletPresenter8activateEv>:

void TestCompletPresenter::activate()
{
 80101d4:	b480      	push	{r7}
 80101d6:	b083      	sub	sp, #12
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]

}
 80101dc:	bf00      	nop
 80101de:	370c      	adds	r7, #12
 80101e0:	46bd      	mov	sp, r7
 80101e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e6:	4770      	bx	lr

080101e8 <_ZN20TestCompletPresenter10deactivateEv>:

void TestCompletPresenter::deactivate()
{
 80101e8:	b480      	push	{r7}
 80101ea:	b083      	sub	sp, #12
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]

}
 80101f0:	bf00      	nop
 80101f2:	370c      	adds	r7, #12
 80101f4:	46bd      	mov	sp, r7
 80101f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fa:	4770      	bx	lr

080101fc <_ZN15TestCompletViewD1Ev>:

class TestCompletView : public TestCompletViewBase
{
public:
    TestCompletView();
    virtual ~TestCompletView() {}
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b082      	sub	sp, #8
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	4a05      	ldr	r2, [pc, #20]	; (801021c <_ZN15TestCompletViewD1Ev+0x20>)
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	601a      	str	r2, [r3, #0]
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	4618      	mov	r0, r3
 801020e:	f7fd fb79 	bl	800d904 <_ZN19TestCompletViewBaseD1Ev>
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	4618      	mov	r0, r3
 8010216:	3708      	adds	r7, #8
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}
 801021c:	080260c0 	.word	0x080260c0

08010220 <_ZN15TestCompletViewD0Ev>:
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f7ff ffe7 	bl	80101fc <_ZN15TestCompletViewD1Ev>
 801022e:	21e4      	movs	r1, #228	; 0xe4
 8010230:	6878      	ldr	r0, [r7, #4]
 8010232:	f012 ff0c 	bl	802304e <_ZdlPvj>
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	4618      	mov	r0, r3
 801023a:	3708      	adds	r7, #8
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}

08010240 <_ZN15TestCompletViewC1Ev>:
#include <gui/testcomplet_screen/TestCompletView.hpp>

TestCompletView::TestCompletView()
 8010240:	b580      	push	{r7, lr}
 8010242:	b082      	sub	sp, #8
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	4618      	mov	r0, r3
 801024c:	f7fd fb9a 	bl	800d984 <_ZN19TestCompletViewBaseC1Ev>
 8010250:	4a03      	ldr	r2, [pc, #12]	; (8010260 <_ZN15TestCompletViewC1Ev+0x20>)
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	601a      	str	r2, [r3, #0]
{

}
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	4618      	mov	r0, r3
 801025a:	3708      	adds	r7, #8
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}
 8010260:	080260c0 	.word	0x080260c0

08010264 <_ZN15TestCompletView11setupScreenEv>:

void TestCompletView::setupScreen()
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b082      	sub	sp, #8
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
    TestCompletViewBase::setupScreen();
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	4618      	mov	r0, r3
 8010270:	f7fd fc3c 	bl	800daec <_ZN19TestCompletViewBase11setupScreenEv>
}
 8010274:	bf00      	nop
 8010276:	3708      	adds	r7, #8
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}

0801027c <_ZN15TestCompletView14tearDownScreenEv>:

void TestCompletView::tearDownScreen()
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b082      	sub	sp, #8
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
    TestCompletViewBase::tearDownScreen();
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	4618      	mov	r0, r3
 8010288:	f7fc fba6 	bl	800c9d8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801028c:	bf00      	nop
 801028e:	3708      	adds	r7, #8
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}

08010294 <_ZN22TestGirouettePresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~TestGirouettePresenter() {};
 8010294:	b580      	push	{r7, lr}
 8010296:	b082      	sub	sp, #8
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	4a09      	ldr	r2, [pc, #36]	; (80102c4 <_ZN22TestGirouettePresenterD1Ev+0x30>)
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	601a      	str	r2, [r3, #0]
 80102a2:	4a09      	ldr	r2, [pc, #36]	; (80102c8 <_ZN22TestGirouettePresenterD1Ev+0x34>)
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	605a      	str	r2, [r3, #4]
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	3304      	adds	r3, #4
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7ff fc67 	bl	800fb80 <_ZN13ModelListenerD1Ev>
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	4618      	mov	r0, r3
 80102b6:	f7ff fc1f 	bl	800faf8 <_ZN8touchgfx9PresenterD1Ev>
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	4618      	mov	r0, r3
 80102be:	3708      	adds	r7, #8
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}
 80102c4:	080260f8 	.word	0x080260f8
 80102c8:	08026110 	.word	0x08026110

080102cc <_ZThn4_N22TestGirouettePresenterD1Ev>:
 80102cc:	f1a0 0004 	sub.w	r0, r0, #4
 80102d0:	e7e0      	b.n	8010294 <_ZN22TestGirouettePresenterD1Ev>
 80102d2:	bf00      	nop

080102d4 <_ZN22TestGirouettePresenterD0Ev>:
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b082      	sub	sp, #8
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	6878      	ldr	r0, [r7, #4]
 80102de:	f7ff ffd9 	bl	8010294 <_ZN22TestGirouettePresenterD1Ev>
 80102e2:	2110      	movs	r1, #16
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f012 feb2 	bl	802304e <_ZdlPvj>
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	4618      	mov	r0, r3
 80102ee:	3708      	adds	r7, #8
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}

080102f4 <_ZThn4_N22TestGirouettePresenterD0Ev>:
 80102f4:	f1a0 0004 	sub.w	r0, r0, #4
 80102f8:	e7ec      	b.n	80102d4 <_ZN22TestGirouettePresenterD0Ev>
	...

080102fc <_ZN22TestGirouettePresenterC1ER17TestGirouetteView>:
#include <gui/testgirouette_screen/TestGirouetteView.hpp>
#include <gui/testgirouette_screen/TestGirouettePresenter.hpp>

TestGirouettePresenter::TestGirouettePresenter(TestGirouetteView& v)
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b082      	sub	sp, #8
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
 8010304:	6039      	str	r1, [r7, #0]
    : view(v)
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	4618      	mov	r0, r3
 801030a:	f7ff fc15 	bl	800fb38 <_ZN8touchgfx9PresenterC1Ev>
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	3304      	adds	r3, #4
 8010312:	4618      	mov	r0, r3
 8010314:	f7ff fc20 	bl	800fb58 <_ZN13ModelListenerC1Ev>
 8010318:	4a06      	ldr	r2, [pc, #24]	; (8010334 <_ZN22TestGirouettePresenterC1ER17TestGirouetteView+0x38>)
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	601a      	str	r2, [r3, #0]
 801031e:	4a06      	ldr	r2, [pc, #24]	; (8010338 <_ZN22TestGirouettePresenterC1ER17TestGirouetteView+0x3c>)
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	605a      	str	r2, [r3, #4]
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	683a      	ldr	r2, [r7, #0]
 8010328:	60da      	str	r2, [r3, #12]
{

}
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	4618      	mov	r0, r3
 801032e:	3708      	adds	r7, #8
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}
 8010334:	080260f8 	.word	0x080260f8
 8010338:	08026110 	.word	0x08026110

0801033c <_ZN22TestGirouettePresenter8activateEv>:

void TestGirouettePresenter::activate()
{
 801033c:	b480      	push	{r7}
 801033e:	b083      	sub	sp, #12
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]

}
 8010344:	bf00      	nop
 8010346:	370c      	adds	r7, #12
 8010348:	46bd      	mov	sp, r7
 801034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034e:	4770      	bx	lr

08010350 <_ZN22TestGirouettePresenter10deactivateEv>:

void TestGirouettePresenter::deactivate()
{
 8010350:	b480      	push	{r7}
 8010352:	b083      	sub	sp, #12
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]

}
 8010358:	bf00      	nop
 801035a:	370c      	adds	r7, #12
 801035c:	46bd      	mov	sp, r7
 801035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010362:	4770      	bx	lr

08010364 <_ZN17TestGirouetteViewD1Ev>:

class TestGirouetteView : public TestGirouetteViewBase
{
public:
    TestGirouetteView();
    virtual ~TestGirouetteView() {}
 8010364:	b580      	push	{r7, lr}
 8010366:	b082      	sub	sp, #8
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	4a05      	ldr	r2, [pc, #20]	; (8010384 <_ZN17TestGirouetteViewD1Ev+0x20>)
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	601a      	str	r2, [r3, #0]
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	4618      	mov	r0, r3
 8010376:	f7fd fc97 	bl	800dca8 <_ZN21TestGirouetteViewBaseD1Ev>
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	4618      	mov	r0, r3
 801037e:	3708      	adds	r7, #8
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}
 8010384:	08026120 	.word	0x08026120

08010388 <_ZN17TestGirouetteViewD0Ev>:
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	f7ff ffe7 	bl	8010364 <_ZN17TestGirouetteViewD1Ev>
 8010396:	21e4      	movs	r1, #228	; 0xe4
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f012 fe58 	bl	802304e <_ZdlPvj>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	4618      	mov	r0, r3
 80103a2:	3708      	adds	r7, #8
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}

080103a8 <_ZN17TestGirouetteViewC1Ev>:
#include <gui/testgirouette_screen/TestGirouetteView.hpp>

TestGirouetteView::TestGirouetteView()
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b082      	sub	sp, #8
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7fd fcb8 	bl	800dd28 <_ZN21TestGirouetteViewBaseC1Ev>
 80103b8:	4a03      	ldr	r2, [pc, #12]	; (80103c8 <_ZN17TestGirouetteViewC1Ev+0x20>)
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	601a      	str	r2, [r3, #0]
{

}
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	4618      	mov	r0, r3
 80103c2:	3708      	adds	r7, #8
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}
 80103c8:	08026120 	.word	0x08026120

080103cc <_ZN17TestGirouetteView11setupScreenEv>:

void TestGirouetteView::setupScreen()
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b082      	sub	sp, #8
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
    TestGirouetteViewBase::setupScreen();
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7fd fd5a 	bl	800de90 <_ZN21TestGirouetteViewBase11setupScreenEv>
}
 80103dc:	bf00      	nop
 80103de:	3708      	adds	r7, #8
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}

080103e4 <_ZN17TestGirouetteView14tearDownScreenEv>:

void TestGirouetteView::tearDownScreen()
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b082      	sub	sp, #8
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
    TestGirouetteViewBase::tearDownScreen();
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	4618      	mov	r0, r3
 80103f0:	f7fc faf2 	bl	800c9d8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80103f4:	bf00      	nop
 80103f6:	3708      	adds	r7, #8
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}

080103fc <_ZN19TestI2CSPIPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~TestI2CSPIPresenter() {};
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	4a09      	ldr	r2, [pc, #36]	; (801042c <_ZN19TestI2CSPIPresenterD1Ev+0x30>)
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	601a      	str	r2, [r3, #0]
 801040a:	4a09      	ldr	r2, [pc, #36]	; (8010430 <_ZN19TestI2CSPIPresenterD1Ev+0x34>)
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	605a      	str	r2, [r3, #4]
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	3304      	adds	r3, #4
 8010414:	4618      	mov	r0, r3
 8010416:	f7ff fbb3 	bl	800fb80 <_ZN13ModelListenerD1Ev>
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	4618      	mov	r0, r3
 801041e:	f7ff fb6b 	bl	800faf8 <_ZN8touchgfx9PresenterD1Ev>
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	4618      	mov	r0, r3
 8010426:	3708      	adds	r7, #8
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}
 801042c:	08026158 	.word	0x08026158
 8010430:	08026170 	.word	0x08026170

08010434 <_ZThn4_N19TestI2CSPIPresenterD1Ev>:
 8010434:	f1a0 0004 	sub.w	r0, r0, #4
 8010438:	e7e0      	b.n	80103fc <_ZN19TestI2CSPIPresenterD1Ev>
 801043a:	bf00      	nop

0801043c <_ZN19TestI2CSPIPresenterD0Ev>:
 801043c:	b580      	push	{r7, lr}
 801043e:	b082      	sub	sp, #8
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f7ff ffd9 	bl	80103fc <_ZN19TestI2CSPIPresenterD1Ev>
 801044a:	2110      	movs	r1, #16
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f012 fdfe 	bl	802304e <_ZdlPvj>
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	4618      	mov	r0, r3
 8010456:	3708      	adds	r7, #8
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}

0801045c <_ZThn4_N19TestI2CSPIPresenterD0Ev>:
 801045c:	f1a0 0004 	sub.w	r0, r0, #4
 8010460:	e7ec      	b.n	801043c <_ZN19TestI2CSPIPresenterD0Ev>
	...

08010464 <_ZN19TestI2CSPIPresenterC1ER14TestI2CSPIView>:
#include <gui/testi2cspi_screen/TestI2CSPIView.hpp>
#include <gui/testi2cspi_screen/TestI2CSPIPresenter.hpp>

TestI2CSPIPresenter::TestI2CSPIPresenter(TestI2CSPIView& v)
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
 801046c:	6039      	str	r1, [r7, #0]
    : view(v)
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	4618      	mov	r0, r3
 8010472:	f7ff fb61 	bl	800fb38 <_ZN8touchgfx9PresenterC1Ev>
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	3304      	adds	r3, #4
 801047a:	4618      	mov	r0, r3
 801047c:	f7ff fb6c 	bl	800fb58 <_ZN13ModelListenerC1Ev>
 8010480:	4a06      	ldr	r2, [pc, #24]	; (801049c <_ZN19TestI2CSPIPresenterC1ER14TestI2CSPIView+0x38>)
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	601a      	str	r2, [r3, #0]
 8010486:	4a06      	ldr	r2, [pc, #24]	; (80104a0 <_ZN19TestI2CSPIPresenterC1ER14TestI2CSPIView+0x3c>)
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	605a      	str	r2, [r3, #4]
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	683a      	ldr	r2, [r7, #0]
 8010490:	60da      	str	r2, [r3, #12]
{

}
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	4618      	mov	r0, r3
 8010496:	3708      	adds	r7, #8
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}
 801049c:	08026158 	.word	0x08026158
 80104a0:	08026170 	.word	0x08026170

080104a4 <_ZN19TestI2CSPIPresenter8activateEv>:

void TestI2CSPIPresenter::activate()
{
 80104a4:	b480      	push	{r7}
 80104a6:	b083      	sub	sp, #12
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]

}
 80104ac:	bf00      	nop
 80104ae:	370c      	adds	r7, #12
 80104b0:	46bd      	mov	sp, r7
 80104b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b6:	4770      	bx	lr

080104b8 <_ZN19TestI2CSPIPresenter10deactivateEv>:

void TestI2CSPIPresenter::deactivate()
{
 80104b8:	b480      	push	{r7}
 80104ba:	b083      	sub	sp, #12
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]

}
 80104c0:	bf00      	nop
 80104c2:	370c      	adds	r7, #12
 80104c4:	46bd      	mov	sp, r7
 80104c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ca:	4770      	bx	lr

080104cc <_ZN14TestI2CSPIViewD1Ev>:

class TestI2CSPIView : public TestI2CSPIViewBase
{
public:
    TestI2CSPIView();
    virtual ~TestI2CSPIView() {}
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b082      	sub	sp, #8
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	4a05      	ldr	r2, [pc, #20]	; (80104ec <_ZN14TestI2CSPIViewD1Ev+0x20>)
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	601a      	str	r2, [r3, #0]
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	4618      	mov	r0, r3
 80104de:	f7fd fdb5 	bl	800e04c <_ZN18TestI2CSPIViewBaseD1Ev>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	4618      	mov	r0, r3
 80104e6:	3708      	adds	r7, #8
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}
 80104ec:	08026180 	.word	0x08026180

080104f0 <_ZN14TestI2CSPIViewD0Ev>:
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b082      	sub	sp, #8
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f7ff ffe7 	bl	80104cc <_ZN14TestI2CSPIViewD1Ev>
 80104fe:	21e4      	movs	r1, #228	; 0xe4
 8010500:	6878      	ldr	r0, [r7, #4]
 8010502:	f012 fda4 	bl	802304e <_ZdlPvj>
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	4618      	mov	r0, r3
 801050a:	3708      	adds	r7, #8
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}

08010510 <_ZN14TestI2CSPIViewC1Ev>:
#include <gui/testi2cspi_screen/TestI2CSPIView.hpp>

TestI2CSPIView::TestI2CSPIView()
 8010510:	b580      	push	{r7, lr}
 8010512:	b082      	sub	sp, #8
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	4618      	mov	r0, r3
 801051c:	f7fd fdd6 	bl	800e0cc <_ZN18TestI2CSPIViewBaseC1Ev>
 8010520:	4a03      	ldr	r2, [pc, #12]	; (8010530 <_ZN14TestI2CSPIViewC1Ev+0x20>)
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	601a      	str	r2, [r3, #0]
{

}
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	4618      	mov	r0, r3
 801052a:	3708      	adds	r7, #8
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}
 8010530:	08026180 	.word	0x08026180

08010534 <_ZN14TestI2CSPIView11setupScreenEv>:

void TestI2CSPIView::setupScreen()
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b082      	sub	sp, #8
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
    TestI2CSPIViewBase::setupScreen();
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	4618      	mov	r0, r3
 8010540:	f7fd fe78 	bl	800e234 <_ZN18TestI2CSPIViewBase11setupScreenEv>
}
 8010544:	bf00      	nop
 8010546:	3708      	adds	r7, #8
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}

0801054c <_ZN14TestI2CSPIView14tearDownScreenEv>:

void TestI2CSPIView::tearDownScreen()
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b082      	sub	sp, #8
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
    TestI2CSPIViewBase::tearDownScreen();
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	4618      	mov	r0, r3
 8010558:	f7fc fa3e 	bl	800c9d8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801055c:	bf00      	nop
 801055e:	3708      	adds	r7, #8
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}

08010564 <_ZN29TestOrientationVoilePresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~TestOrientationVoilePresenter() {};
 8010564:	b580      	push	{r7, lr}
 8010566:	b082      	sub	sp, #8
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
 801056c:	4a09      	ldr	r2, [pc, #36]	; (8010594 <_ZN29TestOrientationVoilePresenterD1Ev+0x30>)
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	601a      	str	r2, [r3, #0]
 8010572:	4a09      	ldr	r2, [pc, #36]	; (8010598 <_ZN29TestOrientationVoilePresenterD1Ev+0x34>)
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	605a      	str	r2, [r3, #4]
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	3304      	adds	r3, #4
 801057c:	4618      	mov	r0, r3
 801057e:	f7ff faff 	bl	800fb80 <_ZN13ModelListenerD1Ev>
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	4618      	mov	r0, r3
 8010586:	f7ff fab7 	bl	800faf8 <_ZN8touchgfx9PresenterD1Ev>
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	4618      	mov	r0, r3
 801058e:	3708      	adds	r7, #8
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}
 8010594:	080261b8 	.word	0x080261b8
 8010598:	080261d0 	.word	0x080261d0

0801059c <_ZThn4_N29TestOrientationVoilePresenterD1Ev>:
 801059c:	f1a0 0004 	sub.w	r0, r0, #4
 80105a0:	e7e0      	b.n	8010564 <_ZN29TestOrientationVoilePresenterD1Ev>
 80105a2:	bf00      	nop

080105a4 <_ZN29TestOrientationVoilePresenterD0Ev>:
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b082      	sub	sp, #8
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	f7ff ffd9 	bl	8010564 <_ZN29TestOrientationVoilePresenterD1Ev>
 80105b2:	2110      	movs	r1, #16
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f012 fd4a 	bl	802304e <_ZdlPvj>
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	4618      	mov	r0, r3
 80105be:	3708      	adds	r7, #8
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}

080105c4 <_ZThn4_N29TestOrientationVoilePresenterD0Ev>:
 80105c4:	f1a0 0004 	sub.w	r0, r0, #4
 80105c8:	e7ec      	b.n	80105a4 <_ZN29TestOrientationVoilePresenterD0Ev>
	...

080105cc <_ZN29TestOrientationVoilePresenterC1ER24TestOrientationVoileView>:
#include <gui/testorientationvoile_screen/TestOrientationVoileView.hpp>
#include <gui/testorientationvoile_screen/TestOrientationVoilePresenter.hpp>

TestOrientationVoilePresenter::TestOrientationVoilePresenter(TestOrientationVoileView& v)
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b082      	sub	sp, #8
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
 80105d4:	6039      	str	r1, [r7, #0]
    : view(v)
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	4618      	mov	r0, r3
 80105da:	f7ff faad 	bl	800fb38 <_ZN8touchgfx9PresenterC1Ev>
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	3304      	adds	r3, #4
 80105e2:	4618      	mov	r0, r3
 80105e4:	f7ff fab8 	bl	800fb58 <_ZN13ModelListenerC1Ev>
 80105e8:	4a06      	ldr	r2, [pc, #24]	; (8010604 <_ZN29TestOrientationVoilePresenterC1ER24TestOrientationVoileView+0x38>)
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	601a      	str	r2, [r3, #0]
 80105ee:	4a06      	ldr	r2, [pc, #24]	; (8010608 <_ZN29TestOrientationVoilePresenterC1ER24TestOrientationVoileView+0x3c>)
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	605a      	str	r2, [r3, #4]
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	683a      	ldr	r2, [r7, #0]
 80105f8:	60da      	str	r2, [r3, #12]
{

}
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	4618      	mov	r0, r3
 80105fe:	3708      	adds	r7, #8
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}
 8010604:	080261b8 	.word	0x080261b8
 8010608:	080261d0 	.word	0x080261d0

0801060c <_ZN29TestOrientationVoilePresenter8activateEv>:

void TestOrientationVoilePresenter::activate()
{
 801060c:	b480      	push	{r7}
 801060e:	b083      	sub	sp, #12
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]

}
 8010614:	bf00      	nop
 8010616:	370c      	adds	r7, #12
 8010618:	46bd      	mov	sp, r7
 801061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061e:	4770      	bx	lr

08010620 <_ZN29TestOrientationVoilePresenter10deactivateEv>:

void TestOrientationVoilePresenter::deactivate()
{
 8010620:	b480      	push	{r7}
 8010622:	b083      	sub	sp, #12
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]

}
 8010628:	bf00      	nop
 801062a:	370c      	adds	r7, #12
 801062c:	46bd      	mov	sp, r7
 801062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010632:	4770      	bx	lr

08010634 <_ZN24TestOrientationVoileViewD1Ev>:

class TestOrientationVoileView : public TestOrientationVoileViewBase
{
public:
    TestOrientationVoileView();
    virtual ~TestOrientationVoileView() {}
 8010634:	b580      	push	{r7, lr}
 8010636:	b082      	sub	sp, #8
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	4a05      	ldr	r2, [pc, #20]	; (8010654 <_ZN24TestOrientationVoileViewD1Ev+0x20>)
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	601a      	str	r2, [r3, #0]
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	4618      	mov	r0, r3
 8010646:	f7fd fed3 	bl	800e3f0 <_ZN28TestOrientationVoileViewBaseD1Ev>
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	4618      	mov	r0, r3
 801064e:	3708      	adds	r7, #8
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}
 8010654:	080261e0 	.word	0x080261e0

08010658 <_ZN24TestOrientationVoileViewD0Ev>:
 8010658:	b580      	push	{r7, lr}
 801065a:	b082      	sub	sp, #8
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
 8010660:	6878      	ldr	r0, [r7, #4]
 8010662:	f7ff ffe7 	bl	8010634 <_ZN24TestOrientationVoileViewD1Ev>
 8010666:	21e4      	movs	r1, #228	; 0xe4
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f012 fcf0 	bl	802304e <_ZdlPvj>
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	4618      	mov	r0, r3
 8010672:	3708      	adds	r7, #8
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}

08010678 <_ZN24TestOrientationVoileViewC1Ev>:
#include <gui/testorientationvoile_screen/TestOrientationVoileView.hpp>

TestOrientationVoileView::TestOrientationVoileView()
 8010678:	b580      	push	{r7, lr}
 801067a:	b082      	sub	sp, #8
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	4618      	mov	r0, r3
 8010684:	f7fd fef4 	bl	800e470 <_ZN28TestOrientationVoileViewBaseC1Ev>
 8010688:	4a03      	ldr	r2, [pc, #12]	; (8010698 <_ZN24TestOrientationVoileViewC1Ev+0x20>)
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	601a      	str	r2, [r3, #0]
{

}
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	4618      	mov	r0, r3
 8010692:	3708      	adds	r7, #8
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}
 8010698:	080261e0 	.word	0x080261e0

0801069c <_ZN24TestOrientationVoileView11setupScreenEv>:

void TestOrientationVoileView::setupScreen()
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b082      	sub	sp, #8
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
    TestOrientationVoileViewBase::setupScreen();
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7fd ff96 	bl	800e5d8 <_ZN28TestOrientationVoileViewBase11setupScreenEv>
}
 80106ac:	bf00      	nop
 80106ae:	3708      	adds	r7, #8
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}

080106b4 <_ZN24TestOrientationVoileView14tearDownScreenEv>:

void TestOrientationVoileView::tearDownScreen()
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b082      	sub	sp, #8
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
    TestOrientationVoileViewBase::tearDownScreen();
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	4618      	mov	r0, r3
 80106c0:	f7fc f98a 	bl	800c9d8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80106c4:	bf00      	nop
 80106c6:	3708      	adds	r7, #8
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}

080106cc <_ZN28TestRotationPlateauPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~TestRotationPlateauPresenter() {};
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b082      	sub	sp, #8
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	4a09      	ldr	r2, [pc, #36]	; (80106fc <_ZN28TestRotationPlateauPresenterD1Ev+0x30>)
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	601a      	str	r2, [r3, #0]
 80106da:	4a09      	ldr	r2, [pc, #36]	; (8010700 <_ZN28TestRotationPlateauPresenterD1Ev+0x34>)
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	605a      	str	r2, [r3, #4]
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	3304      	adds	r3, #4
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7ff fa4b 	bl	800fb80 <_ZN13ModelListenerD1Ev>
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	4618      	mov	r0, r3
 80106ee:	f7ff fa03 	bl	800faf8 <_ZN8touchgfx9PresenterD1Ev>
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	4618      	mov	r0, r3
 80106f6:	3708      	adds	r7, #8
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}
 80106fc:	08026218 	.word	0x08026218
 8010700:	08026230 	.word	0x08026230

08010704 <_ZThn4_N28TestRotationPlateauPresenterD1Ev>:
 8010704:	f1a0 0004 	sub.w	r0, r0, #4
 8010708:	e7e0      	b.n	80106cc <_ZN28TestRotationPlateauPresenterD1Ev>
 801070a:	bf00      	nop

0801070c <_ZN28TestRotationPlateauPresenterD0Ev>:
 801070c:	b580      	push	{r7, lr}
 801070e:	b082      	sub	sp, #8
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f7ff ffd9 	bl	80106cc <_ZN28TestRotationPlateauPresenterD1Ev>
 801071a:	2110      	movs	r1, #16
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f012 fc96 	bl	802304e <_ZdlPvj>
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	4618      	mov	r0, r3
 8010726:	3708      	adds	r7, #8
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}

0801072c <_ZThn4_N28TestRotationPlateauPresenterD0Ev>:
 801072c:	f1a0 0004 	sub.w	r0, r0, #4
 8010730:	e7ec      	b.n	801070c <_ZN28TestRotationPlateauPresenterD0Ev>
	...

08010734 <_ZN28TestRotationPlateauPresenterC1ER23TestRotationPlateauView>:
#include <gui/testrotationplateau_screen/TestRotationPlateauView.hpp>
#include <gui/testrotationplateau_screen/TestRotationPlateauPresenter.hpp>

TestRotationPlateauPresenter::TestRotationPlateauPresenter(TestRotationPlateauView& v)
 8010734:	b580      	push	{r7, lr}
 8010736:	b082      	sub	sp, #8
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	6039      	str	r1, [r7, #0]
    : view(v)
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	4618      	mov	r0, r3
 8010742:	f7ff f9f9 	bl	800fb38 <_ZN8touchgfx9PresenterC1Ev>
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	3304      	adds	r3, #4
 801074a:	4618      	mov	r0, r3
 801074c:	f7ff fa04 	bl	800fb58 <_ZN13ModelListenerC1Ev>
 8010750:	4a06      	ldr	r2, [pc, #24]	; (801076c <_ZN28TestRotationPlateauPresenterC1ER23TestRotationPlateauView+0x38>)
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	601a      	str	r2, [r3, #0]
 8010756:	4a06      	ldr	r2, [pc, #24]	; (8010770 <_ZN28TestRotationPlateauPresenterC1ER23TestRotationPlateauView+0x3c>)
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	605a      	str	r2, [r3, #4]
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	683a      	ldr	r2, [r7, #0]
 8010760:	60da      	str	r2, [r3, #12]
{

}
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	4618      	mov	r0, r3
 8010766:	3708      	adds	r7, #8
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}
 801076c:	08026218 	.word	0x08026218
 8010770:	08026230 	.word	0x08026230

08010774 <_ZN28TestRotationPlateauPresenter8activateEv>:

void TestRotationPlateauPresenter::activate()
{
 8010774:	b480      	push	{r7}
 8010776:	b083      	sub	sp, #12
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]

}
 801077c:	bf00      	nop
 801077e:	370c      	adds	r7, #12
 8010780:	46bd      	mov	sp, r7
 8010782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010786:	4770      	bx	lr

08010788 <_ZN28TestRotationPlateauPresenter10deactivateEv>:

void TestRotationPlateauPresenter::deactivate()
{
 8010788:	b480      	push	{r7}
 801078a:	b083      	sub	sp, #12
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]

}
 8010790:	bf00      	nop
 8010792:	370c      	adds	r7, #12
 8010794:	46bd      	mov	sp, r7
 8010796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079a:	4770      	bx	lr

0801079c <_ZN23TestRotationPlateauViewD1Ev>:

class TestRotationPlateauView : public TestRotationPlateauViewBase
{
public:
    TestRotationPlateauView();
    virtual ~TestRotationPlateauView() {}
 801079c:	b580      	push	{r7, lr}
 801079e:	b082      	sub	sp, #8
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	4a05      	ldr	r2, [pc, #20]	; (80107bc <_ZN23TestRotationPlateauViewD1Ev+0x20>)
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	601a      	str	r2, [r3, #0]
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	4618      	mov	r0, r3
 80107ae:	f7fe f84f 	bl	800e850 <_ZN27TestRotationPlateauViewBaseD1Ev>
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	4618      	mov	r0, r3
 80107b6:	3708      	adds	r7, #8
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}
 80107bc:	08026240 	.word	0x08026240

080107c0 <_ZN23TestRotationPlateauViewD0Ev>:
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b082      	sub	sp, #8
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	f7ff ffe7 	bl	801079c <_ZN23TestRotationPlateauViewD1Ev>
 80107ce:	f44f 51f9 	mov.w	r1, #7968	; 0x1f20
 80107d2:	6878      	ldr	r0, [r7, #4]
 80107d4:	f012 fc3b 	bl	802304e <_ZdlPvj>
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	4618      	mov	r0, r3
 80107dc:	3708      	adds	r7, #8
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}
	...

080107e4 <_ZN23TestRotationPlateauViewC1Ev>:
#include <gui/testrotationplateau_screen/TestRotationPlateauView.hpp>

TestRotationPlateauView::TestRotationPlateauView()
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b082      	sub	sp, #8
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	4618      	mov	r0, r3
 80107f0:	f7fe f8b8 	bl	800e964 <_ZN27TestRotationPlateauViewBaseC1Ev>
 80107f4:	4a03      	ldr	r2, [pc, #12]	; (8010804 <_ZN23TestRotationPlateauViewC1Ev+0x20>)
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	601a      	str	r2, [r3, #0]
{

}
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	4618      	mov	r0, r3
 80107fe:	3708      	adds	r7, #8
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}
 8010804:	08026240 	.word	0x08026240

08010808 <_ZN23TestRotationPlateauView11setupScreenEv>:

void TestRotationPlateauView::setupScreen()
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b082      	sub	sp, #8
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
    TestRotationPlateauViewBase::setupScreen();
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	4618      	mov	r0, r3
 8010814:	f7fe fb04 	bl	800ee20 <_ZN27TestRotationPlateauViewBase11setupScreenEv>
}
 8010818:	bf00      	nop
 801081a:	3708      	adds	r7, #8
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}

08010820 <_ZN23TestRotationPlateauView14tearDownScreenEv>:

void TestRotationPlateauView::tearDownScreen()
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b082      	sub	sp, #8
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
    TestRotationPlateauViewBase::tearDownScreen();
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	4618      	mov	r0, r3
 801082c:	f7fc f8d4 	bl	800c9d8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8010830:	bf00      	nop
 8010832:	3708      	adds	r7, #8
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <_ZN17TestUartPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~TestUartPresenter() {};
 8010838:	b580      	push	{r7, lr}
 801083a:	b082      	sub	sp, #8
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
 8010840:	4a09      	ldr	r2, [pc, #36]	; (8010868 <_ZN17TestUartPresenterD1Ev+0x30>)
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	601a      	str	r2, [r3, #0]
 8010846:	4a09      	ldr	r2, [pc, #36]	; (801086c <_ZN17TestUartPresenterD1Ev+0x34>)
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	605a      	str	r2, [r3, #4]
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	3304      	adds	r3, #4
 8010850:	4618      	mov	r0, r3
 8010852:	f7ff f995 	bl	800fb80 <_ZN13ModelListenerD1Ev>
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	4618      	mov	r0, r3
 801085a:	f7ff f94d 	bl	800faf8 <_ZN8touchgfx9PresenterD1Ev>
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	4618      	mov	r0, r3
 8010862:	3708      	adds	r7, #8
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}
 8010868:	08026280 	.word	0x08026280
 801086c:	08026298 	.word	0x08026298

08010870 <_ZThn4_N17TestUartPresenterD1Ev>:
 8010870:	f1a0 0004 	sub.w	r0, r0, #4
 8010874:	e7e0      	b.n	8010838 <_ZN17TestUartPresenterD1Ev>
 8010876:	bf00      	nop

08010878 <_ZN17TestUartPresenterD0Ev>:
 8010878:	b580      	push	{r7, lr}
 801087a:	b082      	sub	sp, #8
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	6878      	ldr	r0, [r7, #4]
 8010882:	f7ff ffd9 	bl	8010838 <_ZN17TestUartPresenterD1Ev>
 8010886:	2110      	movs	r1, #16
 8010888:	6878      	ldr	r0, [r7, #4]
 801088a:	f012 fbe0 	bl	802304e <_ZdlPvj>
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	4618      	mov	r0, r3
 8010892:	3708      	adds	r7, #8
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}

08010898 <_ZThn4_N17TestUartPresenterD0Ev>:
 8010898:	f1a0 0004 	sub.w	r0, r0, #4
 801089c:	e7ec      	b.n	8010878 <_ZN17TestUartPresenterD0Ev>
	...

080108a0 <_ZN17TestUartPresenterC1ER12TestUartView>:
#include <gui/testuart_screen/TestUartView.hpp>
#include <gui/testuart_screen/TestUartPresenter.hpp>

TestUartPresenter::TestUartPresenter(TestUartView& v)
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b082      	sub	sp, #8
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6039      	str	r1, [r7, #0]
    : view(v)
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	4618      	mov	r0, r3
 80108ae:	f7ff f943 	bl	800fb38 <_ZN8touchgfx9PresenterC1Ev>
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	3304      	adds	r3, #4
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7ff f94e 	bl	800fb58 <_ZN13ModelListenerC1Ev>
 80108bc:	4a06      	ldr	r2, [pc, #24]	; (80108d8 <_ZN17TestUartPresenterC1ER12TestUartView+0x38>)
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	601a      	str	r2, [r3, #0]
 80108c2:	4a06      	ldr	r2, [pc, #24]	; (80108dc <_ZN17TestUartPresenterC1ER12TestUartView+0x3c>)
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	605a      	str	r2, [r3, #4]
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	683a      	ldr	r2, [r7, #0]
 80108cc:	60da      	str	r2, [r3, #12]
{

}
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	4618      	mov	r0, r3
 80108d2:	3708      	adds	r7, #8
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd80      	pop	{r7, pc}
 80108d8:	08026280 	.word	0x08026280
 80108dc:	08026298 	.word	0x08026298

080108e0 <_ZN17TestUartPresenter8activateEv>:

void TestUartPresenter::activate()
{
 80108e0:	b480      	push	{r7}
 80108e2:	b083      	sub	sp, #12
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]

}
 80108e8:	bf00      	nop
 80108ea:	370c      	adds	r7, #12
 80108ec:	46bd      	mov	sp, r7
 80108ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f2:	4770      	bx	lr

080108f4 <_ZN17TestUartPresenter10deactivateEv>:

void TestUartPresenter::deactivate()
{
 80108f4:	b480      	push	{r7}
 80108f6:	b083      	sub	sp, #12
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]

}
 80108fc:	bf00      	nop
 80108fe:	370c      	adds	r7, #12
 8010900:	46bd      	mov	sp, r7
 8010902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010906:	4770      	bx	lr

08010908 <_ZN12TestUartViewD1Ev>:

class TestUartView : public TestUartViewBase
{
public:
    TestUartView();
    virtual ~TestUartView() {}
 8010908:	b580      	push	{r7, lr}
 801090a:	b082      	sub	sp, #8
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
 8010910:	4a05      	ldr	r2, [pc, #20]	; (8010928 <_ZN12TestUartViewD1Ev+0x20>)
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	601a      	str	r2, [r3, #0]
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	4618      	mov	r0, r3
 801091a:	f7fe fd03 	bl	800f324 <_ZN16TestUartViewBaseD1Ev>
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	4618      	mov	r0, r3
 8010922:	3708      	adds	r7, #8
 8010924:	46bd      	mov	sp, r7
 8010926:	bd80      	pop	{r7, pc}
 8010928:	080262a8 	.word	0x080262a8

0801092c <_ZN12TestUartViewD0Ev>:
 801092c:	b580      	push	{r7, lr}
 801092e:	b082      	sub	sp, #8
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	6878      	ldr	r0, [r7, #4]
 8010936:	f7ff ffe7 	bl	8010908 <_ZN12TestUartViewD1Ev>
 801093a:	f640 5108 	movw	r1, #3336	; 0xd08
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f012 fb85 	bl	802304e <_ZdlPvj>
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	4618      	mov	r0, r3
 8010948:	3708      	adds	r7, #8
 801094a:	46bd      	mov	sp, r7
 801094c:	bd80      	pop	{r7, pc}
	...

08010950 <_ZN12TestUartViewC1Ev>:
#include <gui/testuart_screen/TestUartView.hpp>

TestUartView::TestUartView()
 8010950:	b580      	push	{r7, lr}
 8010952:	b082      	sub	sp, #8
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	4618      	mov	r0, r3
 801095c:	f7fe fd3a 	bl	800f3d4 <_ZN16TestUartViewBaseC1Ev>
 8010960:	4a03      	ldr	r2, [pc, #12]	; (8010970 <_ZN12TestUartViewC1Ev+0x20>)
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	601a      	str	r2, [r3, #0]
{

}
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	4618      	mov	r0, r3
 801096a:	3708      	adds	r7, #8
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}
 8010970:	080262a8 	.word	0x080262a8

08010974 <_ZN12TestUartView11setupScreenEv>:

void TestUartView::setupScreen()
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b082      	sub	sp, #8
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
    TestUartViewBase::setupScreen();
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	4618      	mov	r0, r3
 8010980:	f7fe fe6c 	bl	800f65c <_ZN16TestUartViewBase11setupScreenEv>
}
 8010984:	bf00      	nop
 8010986:	3708      	adds	r7, #8
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}

0801098c <_ZN12TestUartView14tearDownScreenEv>:

void TestUartView::tearDownScreen()
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b082      	sub	sp, #8
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
    TestUartViewBase::tearDownScreen();
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	4618      	mov	r0, r3
 8010998:	f7fc f81e 	bl	800c9d8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801099c:	bf00      	nop
 801099e:	3708      	adds	r7, #8
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bd80      	pop	{r7, pc}

080109a4 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 80109a4:	b480      	push	{r7}
 80109a6:	b083      	sub	sp, #12
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
    {
 80109ac:	4a04      	ldr	r2, [pc, #16]	; (80109c0 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	601a      	str	r2, [r3, #0]
    }
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	4618      	mov	r0, r3
 80109b6:	370c      	adds	r7, #12
 80109b8:	46bd      	mov	sp, r7
 80109ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109be:	4770      	bx	lr
 80109c0:	080262fc 	.word	0x080262fc

080109c4 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
    }
 80109cc:	6878      	ldr	r0, [r7, #4]
 80109ce:	f7ff ffe9 	bl	80109a4 <_ZN8touchgfx15TouchControllerD1Ev>
 80109d2:	2104      	movs	r1, #4
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	f012 fb3a 	bl	802304e <_ZdlPvj>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	4618      	mov	r0, r3
 80109de:	3708      	adds	r7, #8
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}

080109e4 <_ZN20STM32TouchController4initEv>:

static TS_DrvTypeDef* tsDriver;
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b082      	sub	sp, #8
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80109ec:	4b05      	ldr	r3, [pc, #20]	; (8010a04 <_ZN20STM32TouchController4initEv+0x20>)
 80109ee:	4a06      	ldr	r2, [pc, #24]	; (8010a08 <_ZN20STM32TouchController4initEv+0x24>)
 80109f0:	601a      	str	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 80109f2:	4b04      	ldr	r3, [pc, #16]	; (8010a04 <_ZN20STM32TouchController4initEv+0x20>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	68db      	ldr	r3, [r3, #12]
 80109f8:	2070      	movs	r0, #112	; 0x70
 80109fa:	4798      	blx	r3
}
 80109fc:	bf00      	nop
 80109fe:	3708      	adds	r7, #8
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}
 8010a04:	20008390 	.word	0x20008390
 8010a08:	20000008 	.word	0x20000008

08010a0c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b084      	sub	sp, #16
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	60f8      	str	r0, [r7, #12]
 8010a14:	60b9      	str	r1, [r7, #8]
 8010a16:	607a      	str	r2, [r7, #4]
    /* Checking if the screen has been touched */

    if (tsDriver)
 8010a18:	4b0f      	ldr	r3, [pc, #60]	; (8010a58 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d015      	beq.n	8010a4c <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
    {
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8010a20:	4b0d      	ldr	r3, [pc, #52]	; (8010a58 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	691b      	ldr	r3, [r3, #16]
 8010a26:	2070      	movs	r0, #112	; 0x70
 8010a28:	4798      	blx	r3
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	bf14      	ite	ne
 8010a30:	2301      	movne	r3, #1
 8010a32:	2300      	moveq	r3, #0
 8010a34:	b2db      	uxtb	r3, r3
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d008      	beq.n	8010a4c <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
        {
            /* Get each touch coordinates */
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 8010a3a:	4b07      	ldr	r3, [pc, #28]	; (8010a58 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	695b      	ldr	r3, [r3, #20]
 8010a40:	68ba      	ldr	r2, [r7, #8]
 8010a42:	6879      	ldr	r1, [r7, #4]
 8010a44:	2070      	movs	r0, #112	; 0x70
 8010a46:	4798      	blx	r3
            return true;
 8010a48:	2301      	movs	r3, #1
 8010a4a:	e000      	b.n	8010a4e <_ZN20STM32TouchController11sampleTouchERlS0_+0x42>
        }
    }
    return false;
 8010a4c:	2300      	movs	r3, #0
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	3710      	adds	r7, #16
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}
 8010a56:	bf00      	nop
 8010a58:	20008390 	.word	0x20008390

08010a5c <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef* i2c_handler, uint8_t Addr)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b082      	sub	sp, #8
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
 8010a64:	460b      	mov	r3, r1
 8010a66:	70fb      	strb	r3, [r7, #3]
    /* De-initialize the I2C communication bus */
    HAL_I2C_DeInit(i2c_handler);
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f7f3 f85f 	bl	8003b2c <HAL_I2C_DeInit>

    /* Re-Initialize the I2C communication bus */
    //I2Cx_Init(i2c_handler);
}
 8010a6e:	bf00      	nop
 8010a70:	3708      	adds	r7, #8
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}

08010a76 <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t* Buffer,
                                           uint16_t Length)
{
 8010a76:	b580      	push	{r7, lr}
 8010a78:	b08a      	sub	sp, #40	; 0x28
 8010a7a:	af04      	add	r7, sp, #16
 8010a7c:	60f8      	str	r0, [r7, #12]
 8010a7e:	4608      	mov	r0, r1
 8010a80:	4611      	mov	r1, r2
 8010a82:	461a      	mov	r2, r3
 8010a84:	4603      	mov	r3, r0
 8010a86:	72fb      	strb	r3, [r7, #11]
 8010a88:	460b      	mov	r3, r1
 8010a8a:	813b      	strh	r3, [r7, #8]
 8010a8c:	4613      	mov	r3, r2
 8010a8e:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_OK;
 8010a90:	2300      	movs	r3, #0
 8010a92:	75fb      	strb	r3, [r7, #23]

    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8010a94:	7afb      	ldrb	r3, [r7, #11]
 8010a96:	b299      	uxth	r1, r3
 8010a98:	88f8      	ldrh	r0, [r7, #6]
 8010a9a:	893a      	ldrh	r2, [r7, #8]
 8010a9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010aa0:	9302      	str	r3, [sp, #8]
 8010aa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010aa4:	9301      	str	r3, [sp, #4]
 8010aa6:	6a3b      	ldr	r3, [r7, #32]
 8010aa8:	9300      	str	r3, [sp, #0]
 8010aaa:	4603      	mov	r3, r0
 8010aac:	68f8      	ldr	r0, [r7, #12]
 8010aae:	f7f3 f981 	bl	8003db4 <HAL_I2C_Mem_Read>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	75fb      	strb	r3, [r7, #23]

    /* Check the communication status */
    if (status != HAL_OK)
 8010ab6:	7dfb      	ldrb	r3, [r7, #23]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d004      	beq.n	8010ac6 <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht+0x50>
    {
        /* I2C error occurred */
        I2Cx_Error(i2c_handler, Addr);
 8010abc:	7afb      	ldrb	r3, [r7, #11]
 8010abe:	4619      	mov	r1, r3
 8010ac0:	68f8      	ldr	r0, [r7, #12]
 8010ac2:	f7ff ffcb 	bl	8010a5c <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>
    }
    return status;
 8010ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3718      	adds	r7, #24
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}

08010ad0 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t* Buffer,
                                            uint16_t Length)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b08a      	sub	sp, #40	; 0x28
 8010ad4:	af04      	add	r7, sp, #16
 8010ad6:	60f8      	str	r0, [r7, #12]
 8010ad8:	4608      	mov	r0, r1
 8010ada:	4611      	mov	r1, r2
 8010adc:	461a      	mov	r2, r3
 8010ade:	4603      	mov	r3, r0
 8010ae0:	72fb      	strb	r3, [r7, #11]
 8010ae2:	460b      	mov	r3, r1
 8010ae4:	813b      	strh	r3, [r7, #8]
 8010ae6:	4613      	mov	r3, r2
 8010ae8:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_OK;
 8010aea:	2300      	movs	r3, #0
 8010aec:	75fb      	strb	r3, [r7, #23]

    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8010aee:	7afb      	ldrb	r3, [r7, #11]
 8010af0:	b299      	uxth	r1, r3
 8010af2:	88f8      	ldrh	r0, [r7, #6]
 8010af4:	893a      	ldrh	r2, [r7, #8]
 8010af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010afa:	9302      	str	r3, [sp, #8]
 8010afc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010afe:	9301      	str	r3, [sp, #4]
 8010b00:	6a3b      	ldr	r3, [r7, #32]
 8010b02:	9300      	str	r3, [sp, #0]
 8010b04:	4603      	mov	r3, r0
 8010b06:	68f8      	ldr	r0, [r7, #12]
 8010b08:	f7f3 f840 	bl	8003b8c <HAL_I2C_Mem_Write>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	75fb      	strb	r3, [r7, #23]

    /* Check the communication status */
    if (status != HAL_OK)
 8010b10:	7dfb      	ldrb	r3, [r7, #23]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d004      	beq.n	8010b20 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht+0x50>
    {
        /* Re-Initiaize the I2C Bus */
        I2Cx_Error(i2c_handler, Addr);
 8010b16:	7afb      	ldrb	r3, [r7, #11]
 8010b18:	4619      	mov	r1, r3
 8010b1a:	68f8      	ldr	r0, [r7, #12]
 8010b1c:	f7ff ff9e 	bl	8010a5c <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>
    }
    return status;
 8010b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3718      	adds	r7, #24
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}
	...

08010b2c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b084      	sub	sp, #16
 8010b30:	af02      	add	r7, sp, #8
 8010b32:	4603      	mov	r3, r0
 8010b34:	71fb      	strb	r3, [r7, #7]
 8010b36:	460b      	mov	r3, r1
 8010b38:	71bb      	strb	r3, [r7, #6]
 8010b3a:	4613      	mov	r3, r2
 8010b3c:	717b      	strb	r3, [r7, #5]
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
 8010b3e:	79bb      	ldrb	r3, [r7, #6]
 8010b40:	b29a      	uxth	r2, r3
 8010b42:	79f9      	ldrb	r1, [r7, #7]
 8010b44:	2301      	movs	r3, #1
 8010b46:	9301      	str	r3, [sp, #4]
 8010b48:	1d7b      	adds	r3, r7, #5
 8010b4a:	9300      	str	r3, [sp, #0]
 8010b4c:	2301      	movs	r3, #1
 8010b4e:	4803      	ldr	r0, [pc, #12]	; (8010b5c <TS_IO_Write+0x30>)
 8010b50:	f7ff ffbe 	bl	8010ad0 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht>
}
 8010b54:	bf00      	nop
 8010b56:	3708      	adds	r7, #8
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}
 8010b5c:	2000b468 	.word	0x2000b468

08010b60 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b086      	sub	sp, #24
 8010b64:	af02      	add	r7, sp, #8
 8010b66:	4603      	mov	r3, r0
 8010b68:	460a      	mov	r2, r1
 8010b6a:	71fb      	strb	r3, [r7, #7]
 8010b6c:	4613      	mov	r3, r2
 8010b6e:	71bb      	strb	r3, [r7, #6]
    uint8_t read_value = 0;
 8010b70:	2300      	movs	r3, #0
 8010b72:	73fb      	strb	r3, [r7, #15]

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8010b74:	79bb      	ldrb	r3, [r7, #6]
 8010b76:	b29a      	uxth	r2, r3
 8010b78:	79f9      	ldrb	r1, [r7, #7]
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	9301      	str	r3, [sp, #4]
 8010b7e:	f107 030f 	add.w	r3, r7, #15
 8010b82:	9300      	str	r3, [sp, #0]
 8010b84:	2301      	movs	r3, #1
 8010b86:	4804      	ldr	r0, [pc, #16]	; (8010b98 <TS_IO_Read+0x38>)
 8010b88:	f7ff ff75 	bl	8010a76 <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht>

    return read_value;
 8010b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b8e:	4618      	mov	r0, r3
 8010b90:	3710      	adds	r7, #16
 8010b92:	46bd      	mov	sp, r7
 8010b94:	bd80      	pop	{r7, pc}
 8010b96:	bf00      	nop
 8010b98:	2000b468 	.word	0x2000b468

08010b9c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b082      	sub	sp, #8
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	4a05      	ldr	r2, [pc, #20]	; (8010bbc <_ZN20STM32TouchControllerD1Ev+0x20>)
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	601a      	str	r2, [r3, #0]
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	4618      	mov	r0, r3
 8010bae:	f7ff fef9 	bl	80109a4 <_ZN8touchgfx15TouchControllerD1Ev>
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	3708      	adds	r7, #8
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bd80      	pop	{r7, pc}
 8010bbc:	080262e4 	.word	0x080262e4

08010bc0 <_ZN20STM32TouchControllerD0Ev>:
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b082      	sub	sp, #8
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f7ff ffe7 	bl	8010b9c <_ZN20STM32TouchControllerD1Ev>
 8010bce:	2104      	movs	r1, #4
 8010bd0:	6878      	ldr	r0, [r7, #4]
 8010bd2:	f012 fa3c 	bl	802304e <_ZdlPvj>
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3708      	adds	r7, #8
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}

08010be0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8010be0:	b480      	push	{r7}
 8010be2:	b083      	sub	sp, #12
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	4603      	mov	r3, r0
 8010be8:	71fb      	strb	r3, [r7, #7]

}
 8010bea:	bf00      	nop
 8010bec:	370c      	adds	r7, #12
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf4:	4770      	bx	lr

08010bf6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8010bf6:	b480      	push	{r7}
 8010bf8:	b083      	sub	sp, #12
 8010bfa:	af00      	add	r7, sp, #0
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	71fb      	strb	r3, [r7, #7]

}
 8010c00:	bf00      	nop
 8010c02:	370c      	adds	r7, #12
 8010c04:	46bd      	mov	sp, r7
 8010c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0a:	4770      	bx	lr

08010c0c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8010c0c:	b480      	push	{r7}
 8010c0e:	b083      	sub	sp, #12
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	4603      	mov	r3, r0
 8010c14:	71fb      	strb	r3, [r7, #7]

}
 8010c16:	bf00      	nop
 8010c18:	370c      	adds	r7, #12
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c20:	4770      	bx	lr
	...

08010c24 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8010c24:	b480      	push	{r7}
 8010c26:	b083      	sub	sp, #12
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
    {
 8010c2c:	4a04      	ldr	r2, [pc, #16]	; (8010c40 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	601a      	str	r2, [r3, #0]
    }
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	4618      	mov	r0, r3
 8010c36:	370c      	adds	r7, #12
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3e:	4770      	bx	lr
 8010c40:	080273b4 	.word	0x080273b4

08010c44 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b082      	sub	sp, #8
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
    }
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f7ff ffe9 	bl	8010c24 <_ZN8touchgfx3HALD1Ev>
 8010c52:	2178      	movs	r1, #120	; 0x78
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f012 f9fa 	bl	802304e <_ZdlPvj>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3708      	adds	r7, #8
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}

08010c64 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8010c64:	b480      	push	{r7}
 8010c66:	b083      	sub	sp, #12
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
 8010c6c:	460b      	mov	r3, r1
 8010c6e:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	78fa      	ldrb	r2, [r7, #3]
 8010c74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8010c80:	bf00      	nop
 8010c82:	370c      	adds	r7, #12
 8010c84:	46bd      	mov	sp, r7
 8010c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8a:	4770      	bx	lr

08010c8c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b082      	sub	sp, #8
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	685a      	ldr	r2, [r3, #4]
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	685b      	ldr	r3, [r3, #4]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	4610      	mov	r0, r2
 8010ca2:	4798      	blx	r3
 8010ca4:	4603      	mov	r3, r0
    }
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	3708      	adds	r7, #8
 8010caa:	46bd      	mov	sp, r7
 8010cac:	bd80      	pop	{r7, pc}

08010cae <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 8010cae:	b580      	push	{r7, lr}
 8010cb0:	b082      	sub	sp, #8
 8010cb2:	af00      	add	r7, sp, #0
 8010cb4:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8010cb6:	6878      	ldr	r0, [r7, #4]
 8010cb8:	f003 fe36 	bl	8014928 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	3390      	adds	r3, #144	; 0x90
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	4798      	blx	r3
    }
 8010cc8:	bf00      	nop
 8010cca:	3708      	adds	r7, #8
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}

08010cd0 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8010cd0:	b480      	push	{r7}
 8010cd2:	b083      	sub	sp, #12
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
 8010cd8:	6039      	str	r1, [r7, #0]
    {
        return false;
 8010cda:	2300      	movs	r3, #0
    }
 8010cdc:	4618      	mov	r0, r3
 8010cde:	370c      	adds	r7, #12
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce6:	4770      	bx	lr

08010ce8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 8010ce8:	b590      	push	{r4, r7, lr}
 8010cea:	b08b      	sub	sp, #44	; 0x2c
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	60f8      	str	r0, [r7, #12]
 8010cf0:	60b9      	str	r1, [r7, #8]
 8010cf2:	4611      	mov	r1, r2
 8010cf4:	461a      	mov	r2, r3
 8010cf6:	460b      	mov	r3, r1
 8010cf8:	80fb      	strh	r3, [r7, #6]
 8010cfa:	4613      	mov	r3, r2
 8010cfc:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 8010cfe:	f7f9 f999 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8010d02:	4602      	mov	r2, r0
 8010d04:	6813      	ldr	r3, [r2, #0]
 8010d06:	3328      	adds	r3, #40	; 0x28
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	4610      	mov	r0, r2
 8010d0c:	4798      	blx	r3
 8010d0e:	4603      	mov	r3, r0
 8010d10:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 8010d12:	8b7b      	ldrh	r3, [r7, #26]
 8010d14:	4a3d      	ldr	r2, [pc, #244]	; (8010e0c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8010d16:	8812      	ldrh	r2, [r2, #0]
 8010d18:	fb02 f303 	mul.w	r3, r2, r3
 8010d1c:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 8010d1e:	68bb      	ldr	r3, [r7, #8]
 8010d20:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 8010d22:	2300      	movs	r3, #0
 8010d24:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8010d26:	2300      	movs	r3, #0
 8010d28:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8010d2a:	797b      	ldrb	r3, [r7, #5]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d005      	beq.n	8010d3c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 8010d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d32:	697b      	ldr	r3, [r7, #20]
 8010d34:	4413      	add	r3, r2
 8010d36:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8010d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d3a:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8010d3c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d005      	beq.n	8010d50 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8010d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d46:	697b      	ldr	r3, [r7, #20]
 8010d48:	4413      	add	r3, r2
 8010d4a:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8010d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d4e:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 8010d50:	88fb      	ldrh	r3, [r7, #6]
 8010d52:	3b01      	subs	r3, #1
 8010d54:	2b1f      	cmp	r3, #31
 8010d56:	d84d      	bhi.n	8010df4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8010d58:	a201      	add	r2, pc, #4	; (adr r2, 8010d60 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8010d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d5e:	bf00      	nop
 8010d60:	08010de1 	.word	0x08010de1
 8010d64:	08010de1 	.word	0x08010de1
 8010d68:	08010df5 	.word	0x08010df5
 8010d6c:	08010de1 	.word	0x08010de1
 8010d70:	08010df5 	.word	0x08010df5
 8010d74:	08010df5 	.word	0x08010df5
 8010d78:	08010df5 	.word	0x08010df5
 8010d7c:	08010de1 	.word	0x08010de1
 8010d80:	08010df5 	.word	0x08010df5
 8010d84:	08010df5 	.word	0x08010df5
 8010d88:	08010df5 	.word	0x08010df5
 8010d8c:	08010df5 	.word	0x08010df5
 8010d90:	08010df5 	.word	0x08010df5
 8010d94:	08010df5 	.word	0x08010df5
 8010d98:	08010df5 	.word	0x08010df5
 8010d9c:	08010de1 	.word	0x08010de1
 8010da0:	08010df5 	.word	0x08010df5
 8010da4:	08010df5 	.word	0x08010df5
 8010da8:	08010df5 	.word	0x08010df5
 8010dac:	08010df5 	.word	0x08010df5
 8010db0:	08010df5 	.word	0x08010df5
 8010db4:	08010df5 	.word	0x08010df5
 8010db8:	08010df5 	.word	0x08010df5
 8010dbc:	08010de1 	.word	0x08010de1
 8010dc0:	08010df5 	.word	0x08010df5
 8010dc4:	08010df5 	.word	0x08010df5
 8010dc8:	08010df5 	.word	0x08010df5
 8010dcc:	08010df5 	.word	0x08010df5
 8010dd0:	08010df5 	.word	0x08010df5
 8010dd4:	08010df5 	.word	0x08010df5
 8010dd8:	08010df5 	.word	0x08010df5
 8010ddc:	08010de1 	.word	0x08010de1
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	3374      	adds	r3, #116	; 0x74
 8010de6:	681c      	ldr	r4, [r3, #0]
 8010de8:	69fb      	ldr	r3, [r7, #28]
 8010dea:	6a3a      	ldr	r2, [r7, #32]
 8010dec:	68b9      	ldr	r1, [r7, #8]
 8010dee:	68f8      	ldr	r0, [r7, #12]
 8010df0:	47a0      	blx	r4
            break;
 8010df2:	e006      	b.n	8010e02 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 8010df4:	4b06      	ldr	r3, [pc, #24]	; (8010e10 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8010df6:	4a07      	ldr	r2, [pc, #28]	; (8010e14 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8010df8:	f240 3125 	movw	r1, #805	; 0x325
 8010dfc:	4806      	ldr	r0, [pc, #24]	; (8010e18 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 8010dfe:	f012 f951 	bl	80230a4 <__assert_func>
            break;
        }
    }
 8010e02:	bf00      	nop
 8010e04:	372c      	adds	r7, #44	; 0x2c
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd90      	pop	{r4, r7, pc}
 8010e0a:	bf00      	nop
 8010e0c:	2000b1a8 	.word	0x2000b1a8
 8010e10:	08024828 	.word	0x08024828
 8010e14:	08026410 	.word	0x08026410
 8010e18:	08024848 	.word	0x08024848

08010e1c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b084      	sub	sp, #16
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	60f8      	str	r0, [r7, #12]
 8010e24:	60b9      	str	r1, [r7, #8]
 8010e26:	607a      	str	r2, [r7, #4]
 8010e28:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8010e2a:	68bb      	ldr	r3, [r7, #8]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d106      	bne.n	8010e3e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8010e30:	4b11      	ldr	r3, [pc, #68]	; (8010e78 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8010e32:	4a12      	ldr	r2, [pc, #72]	; (8010e7c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8010e34:	f240 3137 	movw	r1, #823	; 0x337
 8010e38:	4811      	ldr	r0, [pc, #68]	; (8010e80 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8010e3a:	f012 f933 	bl	80230a4 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	68ba      	ldr	r2, [r7, #8]
 8010e42:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	687a      	ldr	r2, [r7, #4]
 8010e48:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	683a      	ldr	r2, [r7, #0]
 8010e4e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	bf14      	ite	ne
 8010e56:	2301      	movne	r3, #1
 8010e58:	2300      	moveq	r3, #0
 8010e5a:	b2da      	uxtb	r2, r3
 8010e5c:	4b09      	ldr	r3, [pc, #36]	; (8010e84 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8010e5e:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	bf14      	ite	ne
 8010e66:	2301      	movne	r3, #1
 8010e68:	2300      	moveq	r3, #0
 8010e6a:	b2da      	uxtb	r2, r3
 8010e6c:	4b06      	ldr	r3, [pc, #24]	; (8010e88 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8010e6e:	701a      	strb	r2, [r3, #0]
    }
 8010e70:	bf00      	nop
 8010e72:	3710      	adds	r7, #16
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}
 8010e78:	0802488c 	.word	0x0802488c
 8010e7c:	080263c0 	.word	0x080263c0
 8010e80:	08024848 	.word	0x08024848
 8010e84:	2000b1aa 	.word	0x2000b1aa
 8010e88:	2000b1ab 	.word	0x2000b1ab

08010e8c <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b082      	sub	sp, #8
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
 8010e94:	460b      	mov	r3, r1
 8010e96:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d004      	beq.n	8010eaa <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ea4:	887a      	ldrh	r2, [r7, #2]
 8010ea6:	4610      	mov	r0, r2
 8010ea8:	4798      	blx	r3
        }
    }
 8010eaa:	bf00      	nop
 8010eac:	3708      	adds	r7, #8
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}

08010eb2 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *        not used, then the getTFTCurrentLine function is never called and can be
     *        disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8010eb2:	b480      	push	{r7}
 8010eb4:	b083      	sub	sp, #12
 8010eb6:	af00      	add	r7, sp, #0
 8010eb8:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8010eba:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	370c      	adds	r7, #12
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec8:	4770      	bx	lr

08010eca <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8010eca:	b580      	push	{r7, lr}
 8010ecc:	b082      	sub	sp, #8
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	685a      	ldr	r2, [r3, #4]
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	685b      	ldr	r3, [r3, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	3318      	adds	r3, #24
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	4610      	mov	r0, r2
 8010ee2:	4798      	blx	r3
 8010ee4:	4603      	mov	r3, r0
    }
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	3708      	adds	r7, #8
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bd80      	pop	{r7, pc}
	...

08010ef0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8010ef0:	b480      	push	{r7}
 8010ef2:	b083      	sub	sp, #12
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d017      	beq.n	8010f38 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8010f08:	4b1a      	ldr	r3, [pc, #104]	; (8010f74 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8010f0a:	781b      	ldrb	r3, [r3, #0]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d12a      	bne.n	8010f66 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8010f10:	4b19      	ldr	r3, [pc, #100]	; (8010f78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8010f12:	881a      	ldrh	r2, [r3, #0]
 8010f14:	4b19      	ldr	r3, [pc, #100]	; (8010f7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8010f16:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8010f18:	4b19      	ldr	r3, [pc, #100]	; (8010f80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8010f1a:	881a      	ldrh	r2, [r3, #0]
 8010f1c:	4b19      	ldr	r3, [pc, #100]	; (8010f84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8010f1e:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8010f20:	4b16      	ldr	r3, [pc, #88]	; (8010f7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8010f22:	881a      	ldrh	r2, [r3, #0]
 8010f24:	4b16      	ldr	r3, [pc, #88]	; (8010f80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8010f26:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8010f28:	4b16      	ldr	r3, [pc, #88]	; (8010f84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8010f2a:	881a      	ldrh	r2, [r3, #0]
 8010f2c:	4b12      	ldr	r3, [pc, #72]	; (8010f78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8010f2e:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8010f30:	4b10      	ldr	r3, [pc, #64]	; (8010f74 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8010f32:	2201      	movs	r2, #1
 8010f34:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8010f36:	e016      	b.n	8010f66 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8010f38:	4b0e      	ldr	r3, [pc, #56]	; (8010f74 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8010f3a:	781b      	ldrb	r3, [r3, #0]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d012      	beq.n	8010f66 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8010f40:	4b0f      	ldr	r3, [pc, #60]	; (8010f80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8010f42:	881a      	ldrh	r2, [r3, #0]
 8010f44:	4b0d      	ldr	r3, [pc, #52]	; (8010f7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8010f46:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8010f48:	4b0b      	ldr	r3, [pc, #44]	; (8010f78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8010f4a:	881a      	ldrh	r2, [r3, #0]
 8010f4c:	4b0d      	ldr	r3, [pc, #52]	; (8010f84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8010f4e:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8010f50:	4b0c      	ldr	r3, [pc, #48]	; (8010f84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8010f52:	881a      	ldrh	r2, [r3, #0]
 8010f54:	4b0a      	ldr	r3, [pc, #40]	; (8010f80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8010f56:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8010f58:	4b08      	ldr	r3, [pc, #32]	; (8010f7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8010f5a:	881a      	ldrh	r2, [r3, #0]
 8010f5c:	4b06      	ldr	r3, [pc, #24]	; (8010f78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8010f5e:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8010f60:	4b04      	ldr	r3, [pc, #16]	; (8010f74 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8010f62:	2200      	movs	r2, #0
 8010f64:	701a      	strb	r2, [r3, #0]
    }
 8010f66:	bf00      	nop
 8010f68:	370c      	adds	r7, #12
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f70:	4770      	bx	lr
 8010f72:	bf00      	nop
 8010f74:	2000b1a4 	.word	0x2000b1a4
 8010f78:	2000b1a0 	.word	0x2000b1a0
 8010f7c:	2000b1a6 	.word	0x2000b1a6
 8010f80:	2000b1a2 	.word	0x2000b1a2
 8010f84:	2000b1a8 	.word	0x2000b1a8

08010f88 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b082      	sub	sp, #8
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	4618      	mov	r0, r3
 8010f94:	f002 ff4b 	bl	8013e2e <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8010f98:	bf00      	nop
 8010f9a:	3708      	adds	r7, #8
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}

08010fa0 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
 8010fa8:	4a05      	ldr	r2, [pc, #20]	; (8010fc0 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	601a      	str	r2, [r3, #0]
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f7ff fe37 	bl	8010c24 <_ZN8touchgfx3HALD1Ev>
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	4618      	mov	r0, r3
 8010fba:	3708      	adds	r7, #8
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}
 8010fc0:	080265e8 	.word	0x080265e8

08010fc4 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b082      	sub	sp, #8
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
 8010fcc:	6878      	ldr	r0, [r7, #4]
 8010fce:	f7ff ffe7 	bl	8010fa0 <_ZN20TouchGFXGeneratedHALD1Ev>
 8010fd2:	2178      	movs	r1, #120	; 0x78
 8010fd4:	6878      	ldr	r0, [r7, #4]
 8010fd6:	f012 f83a 	bl	802304e <_ZdlPvj>
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	4618      	mov	r0, r3
 8010fde:	3708      	adds	r7, #8
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd80      	pop	{r7, pc}

08010fe4 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b082      	sub	sp, #8
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	4618      	mov	r0, r3
 8010ff0:	f7ff ffca 	bl	8010f88 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8010ff4:	bf00      	nop
 8010ff6:	3708      	adds	r7, #8
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}

08010ffc <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b082      	sub	sp, #8
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	4618      	mov	r0, r3
 8011008:	f001 fab8 	bl	801257c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 801100c:	bf00      	nop
 801100e:	3708      	adds	r7, #8
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}

08011014 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b082      	sub	sp, #8
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	4618      	mov	r0, r3
 8011020:	f001 fb2e 	bl	8012680 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8011024:	4603      	mov	r3, r0
}
 8011026:	4618      	mov	r0, r3
 8011028:	3708      	adds	r7, #8
 801102a:	46bd      	mov	sp, r7
 801102c:	bd80      	pop	{r7, pc}

0801102e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801102e:	b580      	push	{r7, lr}
 8011030:	b082      	sub	sp, #8
 8011032:	af00      	add	r7, sp, #0
 8011034:	6078      	str	r0, [r7, #4]
 8011036:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	6839      	ldr	r1, [r7, #0]
 801103c:	4618      	mov	r0, r3
 801103e:	f001 fb2d 	bl	801269c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8011042:	bf00      	nop
 8011044:	3708      	adds	r7, #8
 8011046:	46bd      	mov	sp, r7
 8011048:	bd80      	pop	{r7, pc}

0801104a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801104a:	b580      	push	{r7, lr}
 801104c:	b082      	sub	sp, #8
 801104e:	af00      	add	r7, sp, #0
 8011050:	6078      	str	r0, [r7, #4]
 8011052:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	6839      	ldr	r1, [r7, #0]
 8011058:	4618      	mov	r0, r3
 801105a:	f001 fb35 	bl	80126c8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 801105e:	bf00      	nop
 8011060:	3708      	adds	r7, #8
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}

08011066 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8011066:	b580      	push	{r7, lr}
 8011068:	b082      	sub	sp, #8
 801106a:	af00      	add	r7, sp, #0
 801106c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	4618      	mov	r0, r3
 8011072:	f001 faab 	bl	80125cc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8011076:	bf00      	nop
 8011078:	3708      	adds	r7, #8
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}

0801107e <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 801107e:	b580      	push	{r7, lr}
 8011080:	b082      	sub	sp, #8
 8011082:	af00      	add	r7, sp, #0
 8011084:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	4618      	mov	r0, r3
 801108a:	f001 faaf 	bl	80125ec <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 801108e:	bf00      	nop
 8011090:	3708      	adds	r7, #8
 8011092:	46bd      	mov	sp, r7
 8011094:	bd80      	pop	{r7, pc}

08011096 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8011096:	b580      	push	{r7, lr}
 8011098:	b082      	sub	sp, #8
 801109a:	af00      	add	r7, sp, #0
 801109c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	4618      	mov	r0, r3
 80110a2:	f001 fab1 	bl	8012608 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 80110a6:	bf00      	nop
 80110a8:	3708      	adds	r7, #8
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}

080110ae <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 80110ae:	b580      	push	{r7, lr}
 80110b0:	b082      	sub	sp, #8
 80110b2:	af00      	add	r7, sp, #0
 80110b4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	4618      	mov	r0, r3
 80110ba:	f001 fab3 	bl	8012624 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80110be:	bf00      	nop
 80110c0:	3708      	adds	r7, #8
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}
	...

080110c8 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b082      	sub	sp, #8
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
 80110d0:	4a05      	ldr	r2, [pc, #20]	; (80110e8 <_ZN11TouchGFXHALD1Ev+0x20>)
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	601a      	str	r2, [r3, #0]
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	4618      	mov	r0, r3
 80110da:	f7ff ff61 	bl	8010fa0 <_ZN20TouchGFXGeneratedHALD1Ev>
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	4618      	mov	r0, r3
 80110e2:	3708      	adds	r7, #8
 80110e4:	46bd      	mov	sp, r7
 80110e6:	bd80      	pop	{r7, pc}
 80110e8:	08026314 	.word	0x08026314

080110ec <_ZN11TouchGFXHALD0Ev>:
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b082      	sub	sp, #8
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f7ff ffe7 	bl	80110c8 <_ZN11TouchGFXHALD1Ev>
 80110fa:	2178      	movs	r1, #120	; 0x78
 80110fc:	6878      	ldr	r0, [r7, #4]
 80110fe:	f011 ffa6 	bl	802304e <_ZdlPvj>
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	4618      	mov	r0, r3
 8011106:	3708      	adds	r7, #8
 8011108:	46bd      	mov	sp, r7
 801110a:	bd80      	pop	{r7, pc}

0801110c <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 801110c:	b580      	push	{r7, lr}
 801110e:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 8011110:	2203      	movs	r2, #3
 8011112:	2100      	movs	r1, #0
 8011114:	2001      	movs	r0, #1
 8011116:	f7f6 f92b 	bl	8007370 <xQueueGenericCreate>
 801111a:	4602      	mov	r2, r0
 801111c:	4b0b      	ldr	r3, [pc, #44]	; (801114c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801111e:	601a      	str	r2, [r3, #0]
 8011120:	4b0a      	ldr	r3, [pc, #40]	; (801114c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d006      	beq.n	8011136 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 8011128:	4b08      	ldr	r3, [pc, #32]	; (801114c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 801112a:	6818      	ldr	r0, [r3, #0]
 801112c:	2300      	movs	r3, #0
 801112e:	2200      	movs	r2, #0
 8011130:	2100      	movs	r1, #0
 8011132:	f7f6 f977 	bl	8007424 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8011136:	2200      	movs	r2, #0
 8011138:	2101      	movs	r1, #1
 801113a:	2001      	movs	r0, #1
 801113c:	f7f6 f918 	bl	8007370 <xQueueGenericCreate>
 8011140:	4602      	mov	r2, r0
 8011142:	4b03      	ldr	r3, [pc, #12]	; (8011150 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8011144:	601a      	str	r2, [r3, #0]
}
 8011146:	bf00      	nop
 8011148:	bd80      	pop	{r7, pc}
 801114a:	bf00      	nop
 801114c:	20008394 	.word	0x20008394
 8011150:	20008398 	.word	0x20008398

08011154 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8011154:	b580      	push	{r7, lr}
 8011156:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8011158:	4b04      	ldr	r3, [pc, #16]	; (801116c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	f04f 31ff 	mov.w	r1, #4294967295
 8011160:	4618      	mov	r0, r3
 8011162:	f7f6 fc71 	bl	8007a48 <xQueueSemaphoreTake>
}
 8011166:	bf00      	nop
 8011168:	bd80      	pop	{r7, pc}
 801116a:	bf00      	nop
 801116c:	20008394 	.word	0x20008394

08011170 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8011170:	b580      	push	{r7, lr}
 8011172:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 8011174:	4b04      	ldr	r3, [pc, #16]	; (8011188 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 8011176:	6818      	ldr	r0, [r3, #0]
 8011178:	2300      	movs	r3, #0
 801117a:	2200      	movs	r2, #0
 801117c:	2100      	movs	r1, #0
 801117e:	f7f6 f951 	bl	8007424 <xQueueGenericSend>
}
 8011182:	bf00      	nop
 8011184:	bd80      	pop	{r7, pc}
 8011186:	bf00      	nop
 8011188:	20008394 	.word	0x20008394

0801118c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 801118c:	b580      	push	{r7, lr}
 801118e:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 8011190:	4b03      	ldr	r3, [pc, #12]	; (80111a0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	2100      	movs	r1, #0
 8011196:	4618      	mov	r0, r3
 8011198:	f7f6 fc56 	bl	8007a48 <xQueueSemaphoreTake>
}
 801119c:	bf00      	nop
 801119e:	bd80      	pop	{r7, pc}
 80111a0:	20008394 	.word	0x20008394

080111a4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b082      	sub	sp, #8
 80111a8:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 80111aa:	2300      	movs	r3, #0
 80111ac:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 80111ae:	4b0b      	ldr	r3, [pc, #44]	; (80111dc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	1d3a      	adds	r2, r7, #4
 80111b4:	4611      	mov	r1, r2
 80111b6:	4618      	mov	r0, r3
 80111b8:	f7f6 fad2 	bl	8007760 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d007      	beq.n	80111d2 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 80111c2:	4b07      	ldr	r3, [pc, #28]	; (80111e0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 80111c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111c8:	601a      	str	r2, [r3, #0]
 80111ca:	f3bf 8f4f 	dsb	sy
 80111ce:	f3bf 8f6f 	isb	sy
}
 80111d2:	bf00      	nop
 80111d4:	3708      	adds	r7, #8
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}
 80111da:	bf00      	nop
 80111dc:	20008394 	.word	0x20008394
 80111e0:	e000ed04 	.word	0xe000ed04

080111e4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b082      	sub	sp, #8
 80111e8:	af00      	add	r7, sp, #0
    if (vsync_q)
 80111ea:	4b0e      	ldr	r3, [pc, #56]	; (8011224 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d013      	beq.n	801121a <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 80111f2:	2300      	movs	r3, #0
 80111f4:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 80111f6:	4b0b      	ldr	r3, [pc, #44]	; (8011224 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 80111f8:	6818      	ldr	r0, [r3, #0]
 80111fa:	1d3a      	adds	r2, r7, #4
 80111fc:	2300      	movs	r3, #0
 80111fe:	490a      	ldr	r1, [pc, #40]	; (8011228 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8011200:	f7f6 fa12 	bl	8007628 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d007      	beq.n	801121a <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 801120a:	4b08      	ldr	r3, [pc, #32]	; (801122c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 801120c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011210:	601a      	str	r2, [r3, #0]
 8011212:	f3bf 8f4f 	dsb	sy
 8011216:	f3bf 8f6f 	isb	sy
    }
}
 801121a:	bf00      	nop
 801121c:	3708      	adds	r7, #8
 801121e:	46bd      	mov	sp, r7
 8011220:	bd80      	pop	{r7, pc}
 8011222:	bf00      	nop
 8011224:	20008398 	.word	0x20008398
 8011228:	20000048 	.word	0x20000048
 801122c:	e000ed04 	.word	0xe000ed04

08011230 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8011230:	b580      	push	{r7, lr}
 8011232:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8011234:	4b08      	ldr	r3, [pc, #32]	; (8011258 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	2200      	movs	r2, #0
 801123a:	4908      	ldr	r1, [pc, #32]	; (801125c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 801123c:	4618      	mov	r0, r3
 801123e:	f7f6 fb21 	bl	8007884 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 8011242:	4b05      	ldr	r3, [pc, #20]	; (8011258 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	f04f 32ff 	mov.w	r2, #4294967295
 801124a:	4904      	ldr	r1, [pc, #16]	; (801125c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 801124c:	4618      	mov	r0, r3
 801124e:	f7f6 fb19 	bl	8007884 <xQueueReceive>
}
 8011252:	bf00      	nop
 8011254:	bd80      	pop	{r7, pc}
 8011256:	bf00      	nop
 8011258:	20008398 	.word	0x20008398
 801125c:	20000048 	.word	0x20000048

08011260 <__NVIC_EnableIRQ>:
{
 8011260:	b480      	push	{r7}
 8011262:	b083      	sub	sp, #12
 8011264:	af00      	add	r7, sp, #0
 8011266:	4603      	mov	r3, r0
 8011268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801126e:	2b00      	cmp	r3, #0
 8011270:	db0d      	blt.n	801128e <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011276:	b2db      	uxtb	r3, r3
 8011278:	f003 021f 	and.w	r2, r3, #31
 801127c:	4907      	ldr	r1, [pc, #28]	; (801129c <__NVIC_EnableIRQ+0x3c>)
 801127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011282:	095b      	lsrs	r3, r3, #5
 8011284:	2001      	movs	r0, #1
 8011286:	fa00 f202 	lsl.w	r2, r0, r2
 801128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801128e:	bf00      	nop
 8011290:	370c      	adds	r7, #12
 8011292:	46bd      	mov	sp, r7
 8011294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011298:	4770      	bx	lr
 801129a:	bf00      	nop
 801129c:	e000e100 	.word	0xe000e100

080112a0 <__NVIC_DisableIRQ>:
{
 80112a0:	b480      	push	{r7}
 80112a2:	b083      	sub	sp, #12
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	4603      	mov	r3, r0
 80112a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80112aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	db12      	blt.n	80112d8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80112b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80112b6:	b2db      	uxtb	r3, r3
 80112b8:	f003 021f 	and.w	r2, r3, #31
 80112bc:	4909      	ldr	r1, [pc, #36]	; (80112e4 <__NVIC_DisableIRQ+0x44>)
 80112be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80112c2:	095b      	lsrs	r3, r3, #5
 80112c4:	2001      	movs	r0, #1
 80112c6:	fa00 f202 	lsl.w	r2, r0, r2
 80112ca:	3320      	adds	r3, #32
 80112cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80112d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80112d4:	f3bf 8f6f 	isb	sy
}
 80112d8:	bf00      	nop
 80112da:	370c      	adds	r7, #12
 80112dc:	46bd      	mov	sp, r7
 80112de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e2:	4770      	bx	lr
 80112e4:	e000e100 	.word	0xe000e100

080112e8 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 80112e8:	b480      	push	{r7}
 80112ea:	b083      	sub	sp, #12
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2200      	movs	r2, #0
 80112f4:	601a      	str	r2, [r3, #0]
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	4618      	mov	r0, r3
 80112fa:	370c      	adds	r7, #12
 80112fc:	46bd      	mov	sp, r7
 80112fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011302:	4770      	bx	lr

08011304 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8011304:	b480      	push	{r7}
 8011306:	b083      	sub	sp, #12
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
        return color;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681b      	ldr	r3, [r3, #0]
    }
 8011310:	4618      	mov	r0, r3
 8011312:	370c      	adds	r7, #12
 8011314:	46bd      	mov	sp, r7
 8011316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131a:	4770      	bx	lr

0801131c <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 801131c:	b480      	push	{r7}
 801131e:	b083      	sub	sp, #12
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	b29b      	uxth	r3, r3
    }
 801132a:	4618      	mov	r0, r3
 801132c:	370c      	adds	r7, #12
 801132e:	46bd      	mov	sp, r7
 8011330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011334:	4770      	bx	lr
	...

08011338 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8011338:	b480      	push	{r7}
 801133a:	b083      	sub	sp, #12
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
    {
 8011340:	4a04      	ldr	r2, [pc, #16]	; (8011354 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	601a      	str	r2, [r3, #0]
    }
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	4618      	mov	r0, r3
 801134a:	370c      	adds	r7, #12
 801134c:	46bd      	mov	sp, r7
 801134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011352:	4770      	bx	lr
 8011354:	080264bc 	.word	0x080264bc

08011358 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8011358:	b580      	push	{r7, lr}
 801135a:	b082      	sub	sp, #8
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
    }
 8011360:	6878      	ldr	r0, [r7, #4]
 8011362:	f7ff ffe9 	bl	8011338 <_ZN8touchgfx9DMA_QueueD1Ev>
 8011366:	2104      	movs	r1, #4
 8011368:	6878      	ldr	r0, [r7, #4]
 801136a:	f011 fe70 	bl	802304e <_ZdlPvj>
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	4618      	mov	r0, r3
 8011372:	3708      	adds	r7, #8
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}

08011378 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8011378:	b580      	push	{r7, lr}
 801137a:	b082      	sub	sp, #8
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	3344      	adds	r3, #68	; 0x44
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	6878      	ldr	r0, [r7, #4]
 801138a:	4798      	blx	r3
    }
 801138c:	bf00      	nop
 801138e:	3708      	adds	r7, #8
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}

08011394 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8011394:	b480      	push	{r7}
 8011396:	b083      	sub	sp, #12
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 801139c:	2300      	movs	r3, #0
    }
 801139e:	4618      	mov	r0, r3
 80113a0:	370c      	adds	r7, #12
 80113a2:	46bd      	mov	sp, r7
 80113a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a8:	4770      	bx	lr
	...

080113ac <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 80113ac:	b480      	push	{r7}
 80113ae:	b083      	sub	sp, #12
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
    {
 80113b4:	4a04      	ldr	r2, [pc, #16]	; (80113c8 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	601a      	str	r2, [r3, #0]
    }
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	4618      	mov	r0, r3
 80113be:	370c      	adds	r7, #12
 80113c0:	46bd      	mov	sp, r7
 80113c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c6:	4770      	bx	lr
 80113c8:	080277f8 	.word	0x080277f8

080113cc <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b082      	sub	sp, #8
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
    }
 80113d4:	6878      	ldr	r0, [r7, #4]
 80113d6:	f7ff ffe9 	bl	80113ac <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80113da:	210c      	movs	r1, #12
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f011 fe36 	bl	802304e <_ZdlPvj>
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	4618      	mov	r0, r3
 80113e6:	3708      	adds	r7, #8
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}

080113ec <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80113ec:	b480      	push	{r7}
 80113ee:	b083      	sub	sp, #12
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
 80113f4:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80113f6:	4a09      	ldr	r2, [pc, #36]	; (801141c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	601a      	str	r2, [r3, #0]
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	683a      	ldr	r2, [r7, #0]
 8011400:	605a      	str	r2, [r3, #4]
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	2200      	movs	r2, #0
 8011406:	721a      	strb	r2, [r3, #8]
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	2200      	movs	r2, #0
 801140c:	725a      	strb	r2, [r3, #9]
    {
    }
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	4618      	mov	r0, r3
 8011412:	370c      	adds	r7, #12
 8011414:	46bd      	mov	sp, r7
 8011416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141a:	4770      	bx	lr
 801141c:	080277f8 	.word	0x080277f8

08011420 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8011420:	b580      	push	{r7, lr}
 8011422:	b082      	sub	sp, #8
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	685a      	ldr	r2, [r3, #4]
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	685b      	ldr	r3, [r3, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	3314      	adds	r3, #20
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	4610      	mov	r0, r2
 8011438:	4798      	blx	r3
    }
 801143a:	bf00      	nop
 801143c:	3708      	adds	r7, #8
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}

08011442 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8011442:	b580      	push	{r7, lr}
 8011444:	b082      	sub	sp, #8
 8011446:	af00      	add	r7, sp, #0
 8011448:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 801144a:	687a      	ldr	r2, [r7, #4]
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	3328      	adds	r3, #40	; 0x28
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	4610      	mov	r0, r2
 8011456:	4798      	blx	r3
    }
 8011458:	bf00      	nop
 801145a:	3708      	adds	r7, #8
 801145c:	46bd      	mov	sp, r7
 801145e:	bd80      	pop	{r7, pc}

08011460 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8011460:	b480      	push	{r7}
 8011462:	b085      	sub	sp, #20
 8011464:	af00      	add	r7, sp, #0
 8011466:	60f8      	str	r0, [r7, #12]
 8011468:	60b9      	str	r1, [r7, #8]
 801146a:	607a      	str	r2, [r7, #4]
 801146c:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8011478:	68ba      	ldr	r2, [r7, #8]
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	430a      	orrs	r2, r1
 8011480:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011488:	f023 0107 	bic.w	r1, r3, #7
 801148c:	687a      	ldr	r2, [r7, #4]
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	430a      	orrs	r2, r1
 8011494:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801149c:	4b06      	ldr	r3, [pc, #24]	; (80114b8 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 801149e:	4013      	ands	r3, r2
 80114a0:	6839      	ldr	r1, [r7, #0]
 80114a2:	68fa      	ldr	r2, [r7, #12]
 80114a4:	6812      	ldr	r2, [r2, #0]
 80114a6:	430b      	orrs	r3, r1
 80114a8:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 80114aa:	2300      	movs	r3, #0
}
 80114ac:	4618      	mov	r0, r3
 80114ae:	3714      	adds	r7, #20
 80114b0:	46bd      	mov	sp, r7
 80114b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b6:	4770      	bx	lr
 80114b8:	ffffc000 	.word	0xffffc000

080114bc <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b082      	sub	sp, #8
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 80114c4:	f7f8 fdaa 	bl	800a01c <_ZN8touchgfx3HAL11getInstanceEv>
 80114c8:	4603      	mov	r3, r0
 80114ca:	4618      	mov	r0, r3
 80114cc:	f7ff ffa8 	bl	8011420 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 80114d0:	bf00      	nop
 80114d2:	3708      	adds	r7, #8
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}

080114d8 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b082      	sub	sp, #8
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
    assert(0);
 80114e0:	4b02      	ldr	r3, [pc, #8]	; (80114ec <DMA2D_XferErrorCallback+0x14>)
 80114e2:	4a03      	ldr	r2, [pc, #12]	; (80114f0 <DMA2D_XferErrorCallback+0x18>)
 80114e4:	213e      	movs	r1, #62	; 0x3e
 80114e6:	4803      	ldr	r0, [pc, #12]	; (80114f4 <DMA2D_XferErrorCallback+0x1c>)
 80114e8:	f011 fddc 	bl	80230a4 <__assert_func>
 80114ec:	080248c4 	.word	0x080248c4
 80114f0:	080264d8 	.word	0x080264d8
 80114f4:	080248c8 	.word	0x080248c8

080114f8 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b082      	sub	sp, #8
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	3318      	adds	r3, #24
 8011504:	4618      	mov	r0, r3
 8011506:	f7ff feef 	bl	80112e8 <_ZN8touchgfx9colortypeC1Ev>
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	4618      	mov	r0, r3
 801150e:	3708      	adds	r7, #8
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}

08011514 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 8011514:	b5b0      	push	{r4, r5, r7, lr}
 8011516:	b082      	sub	sp, #8
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 801151c:	687a      	ldr	r2, [r7, #4]
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	330c      	adds	r3, #12
 8011522:	4619      	mov	r1, r3
 8011524:	4610      	mov	r0, r2
 8011526:	f7ff ff61 	bl	80113ec <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801152a:	4a0e      	ldr	r2, [pc, #56]	; (8011564 <_ZN10STM32F7DMAC1Ev+0x50>)
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	601a      	str	r2, [r3, #0]
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	f103 000c 	add.w	r0, r3, #12
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	3320      	adds	r3, #32
 801153a:	2260      	movs	r2, #96	; 0x60
 801153c:	4619      	mov	r1, r3
 801153e:	f003 fb19 	bl	8014b74 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	3320      	adds	r3, #32
 8011546:	245f      	movs	r4, #95	; 0x5f
 8011548:	461d      	mov	r5, r3
 801154a:	2c00      	cmp	r4, #0
 801154c:	db05      	blt.n	801155a <_ZN10STM32F7DMAC1Ev+0x46>
 801154e:	4628      	mov	r0, r5
 8011550:	f7ff ffd2 	bl	80114f8 <_ZN8touchgfx6BlitOpC1Ev>
 8011554:	3520      	adds	r5, #32
 8011556:	3c01      	subs	r4, #1
 8011558:	e7f7      	b.n	801154a <_ZN10STM32F7DMAC1Ev+0x36>
{}
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	4618      	mov	r0, r3
 801155e:	3708      	adds	r7, #8
 8011560:	46bd      	mov	sp, r7
 8011562:	bdb0      	pop	{r4, r5, r7, pc}
 8011564:	0802646c 	.word	0x0802646c

08011568 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8011568:	b580      	push	{r7, lr}
 801156a:	b082      	sub	sp, #8
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
 8011570:	4a0b      	ldr	r2, [pc, #44]	; (80115a0 <_ZN10STM32F7DMAD1Ev+0x38>)
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8011576:	480b      	ldr	r0, [pc, #44]	; (80115a4 <_ZN10STM32F7DMAD1Ev+0x3c>)
 8011578:	f7f1 fbcc 	bl	8002d14 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 801157c:	205a      	movs	r0, #90	; 0x5a
 801157e:	f7ff fe8f 	bl	80112a0 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	330c      	adds	r3, #12
 8011586:	4618      	mov	r0, r3
 8011588:	f000 faa0 	bl	8011acc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	4618      	mov	r0, r3
 8011590:	f7ff ff0c 	bl	80113ac <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	4618      	mov	r0, r3
 8011598:	3708      	adds	r7, #8
 801159a:	46bd      	mov	sp, r7
 801159c:	bd80      	pop	{r7, pc}
 801159e:	bf00      	nop
 80115a0:	0802646c 	.word	0x0802646c
 80115a4:	2000b584 	.word	0x2000b584

080115a8 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b082      	sub	sp, #8
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
}
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f7ff ffd9 	bl	8011568 <_ZN10STM32F7DMAD1Ev>
 80115b6:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	f011 fd47 	bl	802304e <_ZdlPvj>
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	4618      	mov	r0, r3
 80115c4:	3708      	adds	r7, #8
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bd80      	pop	{r7, pc}
	...

080115cc <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b082      	sub	sp, #8
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 80115d4:	4b09      	ldr	r3, [pc, #36]	; (80115fc <_ZN10STM32F7DMA10initializeEv+0x30>)
 80115d6:	4a0a      	ldr	r2, [pc, #40]	; (8011600 <_ZN10STM32F7DMA10initializeEv+0x34>)
 80115d8:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 80115da:	4808      	ldr	r0, [pc, #32]	; (80115fc <_ZN10STM32F7DMA10initializeEv+0x30>)
 80115dc:	f7f1 fb50 	bl	8002c80 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80115e0:	4b06      	ldr	r3, [pc, #24]	; (80115fc <_ZN10STM32F7DMA10initializeEv+0x30>)
 80115e2:	4a08      	ldr	r2, [pc, #32]	; (8011604 <_ZN10STM32F7DMA10initializeEv+0x38>)
 80115e4:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 80115e6:	4b05      	ldr	r3, [pc, #20]	; (80115fc <_ZN10STM32F7DMA10initializeEv+0x30>)
 80115e8:	4a07      	ldr	r2, [pc, #28]	; (8011608 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 80115ea:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 80115ec:	205a      	movs	r0, #90	; 0x5a
 80115ee:	f7ff fe37 	bl	8011260 <__NVIC_EnableIRQ>
}
 80115f2:	bf00      	nop
 80115f4:	3708      	adds	r7, #8
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}
 80115fa:	bf00      	nop
 80115fc:	2000b584 	.word	0x2000b584
 8011600:	4002b000 	.word	0x4002b000
 8011604:	080114bd 	.word	0x080114bd
 8011608:	080114d9 	.word	0x080114d9

0801160c <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 801160c:	b480      	push	{r7}
 801160e:	b083      	sub	sp, #12
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8011614:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8011618:	4618      	mov	r0, r3
 801161a:	370c      	adds	r7, #12
 801161c:	46bd      	mov	sp, r7
 801161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011622:	4770      	bx	lr

08011624 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8011624:	b590      	push	{r4, r7, lr}
 8011626:	b08d      	sub	sp, #52	; 0x34
 8011628:	af02      	add	r7, sp, #8
 801162a:	6078      	str	r0, [r7, #4]
 801162c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 801162e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011632:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8011634:	2300      	movs	r3, #0
 8011636:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 801163c:	2b20      	cmp	r3, #32
 801163e:	d007      	beq.n	8011650 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8011640:	683b      	ldr	r3, [r7, #0]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	2b40      	cmp	r3, #64	; 0x40
 8011646:	d003      	beq.n	8011650 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8011648:	683b      	ldr	r3, [r7, #0]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	2b04      	cmp	r3, #4
 801164e:	d101      	bne.n	8011654 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8011650:	2301      	movs	r3, #1
 8011652:	e000      	b.n	8011656 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8011654:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8011656:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 801165c:	2b80      	cmp	r3, #128	; 0x80
 801165e:	d004      	beq.n	801166a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011668:	d101      	bne.n	801166e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 801166a:	2301      	movs	r3, #1
 801166c:	e000      	b.n	8011670 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 801166e:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8011670:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8011672:	f7f8 fcdf 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8011676:	4602      	mov	r2, r0
 8011678:	6813      	ldr	r3, [r2, #0]
 801167a:	3320      	adds	r3, #32
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	4610      	mov	r0, r2
 8011680:	4798      	blx	r3
 8011682:	4603      	mov	r3, r0
 8011684:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8011686:	683b      	ldr	r3, [r7, #0]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	2b40      	cmp	r3, #64	; 0x40
 801168c:	d01d      	beq.n	80116ca <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 801168e:	2b40      	cmp	r3, #64	; 0x40
 8011690:	d804      	bhi.n	801169c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8011692:	2b04      	cmp	r3, #4
 8011694:	d00e      	beq.n	80116b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8011696:	2b20      	cmp	r3, #32
 8011698:	d017      	beq.n	80116ca <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 801169a:	e019      	b.n	80116d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 801169c:	2b80      	cmp	r3, #128	; 0x80
 801169e:	d003      	beq.n	80116a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 80116a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80116a4:	d003      	beq.n	80116ae <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 80116a6:	e013      	b.n	80116d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 80116a8:	230a      	movs	r3, #10
 80116aa:	623b      	str	r3, [r7, #32]
        break;
 80116ac:	e01a      	b.n	80116e4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 80116ae:	2309      	movs	r3, #9
 80116b0:	623b      	str	r3, [r7, #32]
        break;
 80116b2:	e017      	b.n	80116e4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80116b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80116b8:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80116ba:	7f7b      	ldrb	r3, [r7, #29]
 80116bc:	2b10      	cmp	r3, #16
 80116be:	d101      	bne.n	80116c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 80116c0:	2302      	movs	r3, #2
 80116c2:	e000      	b.n	80116c6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 80116c4:	2301      	movs	r3, #1
 80116c6:	623b      	str	r3, [r7, #32]
        break;
 80116c8:	e00c      	b.n	80116e4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 80116ca:	2300      	movs	r3, #0
 80116cc:	623b      	str	r3, [r7, #32]
        break;
 80116ce:	e009      	b.n	80116e4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 80116d0:	2300      	movs	r3, #0
 80116d2:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80116d4:	7f7b      	ldrb	r3, [r7, #29]
 80116d6:	2b10      	cmp	r3, #16
 80116d8:	d101      	bne.n	80116de <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 80116da:	2302      	movs	r3, #2
 80116dc:	e000      	b.n	80116e0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 80116de:	2301      	movs	r3, #1
 80116e0:	623b      	str	r3, [r7, #32]
        break;
 80116e2:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80116e4:	4a76      	ldr	r2, [pc, #472]	; (80118c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80116e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e8:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80116ea:	7f7b      	ldrb	r3, [r7, #29]
 80116ec:	2b10      	cmp	r3, #16
 80116ee:	d101      	bne.n	80116f4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 80116f0:	2302      	movs	r3, #2
 80116f2:	e000      	b.n	80116f6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 80116f4:	2301      	movs	r3, #1
 80116f6:	4a72      	ldr	r2, [pc, #456]	; (80118c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80116f8:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	8adb      	ldrh	r3, [r3, #22]
 80116fe:	461a      	mov	r2, r3
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	8a1b      	ldrh	r3, [r3, #16]
 8011704:	1ad3      	subs	r3, r2, r3
 8011706:	461a      	mov	r2, r3
 8011708:	4b6d      	ldr	r3, [pc, #436]	; (80118c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801170a:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801170c:	7f7b      	ldrb	r3, [r7, #29]
 801170e:	2b10      	cmp	r3, #16
 8011710:	d101      	bne.n	8011716 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8011712:	2202      	movs	r2, #2
 8011714:	e000      	b.n	8011718 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8011716:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8011718:	683b      	ldr	r3, [r7, #0]
 801171a:	8adb      	ldrh	r3, [r3, #22]
 801171c:	4619      	mov	r1, r3
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	8a1b      	ldrh	r3, [r3, #16]
 8011722:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8011724:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011726:	4866      	ldr	r0, [pc, #408]	; (80118c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011728:	f7ff fe9a 	bl	8011460 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 801172c:	4a64      	ldr	r2, [pc, #400]	; (80118c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801172e:	6a3b      	ldr	r3, [r7, #32]
 8011730:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	8a9b      	ldrh	r3, [r3, #20]
 8011736:	461a      	mov	r2, r3
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	8a1b      	ldrh	r3, [r3, #16]
 801173c:	1ad3      	subs	r3, r2, r3
 801173e:	461a      	mov	r2, r3
 8011740:	4b5f      	ldr	r3, [pc, #380]	; (80118c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011742:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8011744:	7ffb      	ldrb	r3, [r7, #31]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d103      	bne.n	8011752 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 801174a:	7fbb      	ldrb	r3, [r7, #30]
 801174c:	2b00      	cmp	r3, #0
 801174e:	f000 8082 	beq.w	8011856 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	7f1b      	ldrb	r3, [r3, #28]
 8011756:	2bff      	cmp	r3, #255	; 0xff
 8011758:	d008      	beq.n	801176c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 801175a:	4b59      	ldr	r3, [pc, #356]	; (80118c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801175c:	2202      	movs	r2, #2
 801175e:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8011760:	683b      	ldr	r3, [r7, #0]
 8011762:	7f1b      	ldrb	r3, [r3, #28]
 8011764:	461a      	mov	r2, r3
 8011766:	4b56      	ldr	r3, [pc, #344]	; (80118c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011768:	635a      	str	r2, [r3, #52]	; 0x34
 801176a:	e002      	b.n	8011772 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 801176c:	4b54      	ldr	r3, [pc, #336]	; (80118c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801176e:	2200      	movs	r2, #0
 8011770:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8011772:	7fbb      	ldrb	r3, [r7, #30]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d059      	beq.n	801182c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 8011778:	7f7b      	ldrb	r3, [r7, #29]
 801177a:	2b10      	cmp	r3, #16
 801177c:	d14a      	bne.n	8011814 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	3318      	adds	r3, #24
 8011782:	4618      	mov	r0, r3
 8011784:	f7ff fdca 	bl	801131c <_ZNK8touchgfx9colortypecvtEv>
 8011788:	4603      	mov	r3, r0
 801178a:	12db      	asrs	r3, r3, #11
 801178c:	f003 021f 	and.w	r2, r3, #31
 8011790:	4613      	mov	r3, r2
 8011792:	021b      	lsls	r3, r3, #8
 8011794:	1a9b      	subs	r3, r3, r2
 8011796:	4a4b      	ldr	r2, [pc, #300]	; (80118c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8011798:	fb82 1203 	smull	r1, r2, r2, r3
 801179c:	441a      	add	r2, r3
 801179e:	1112      	asrs	r2, r2, #4
 80117a0:	17db      	asrs	r3, r3, #31
 80117a2:	1ad3      	subs	r3, r2, r3
 80117a4:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80117a6:	683b      	ldr	r3, [r7, #0]
 80117a8:	3318      	adds	r3, #24
 80117aa:	4618      	mov	r0, r3
 80117ac:	f7ff fdb6 	bl	801131c <_ZNK8touchgfx9colortypecvtEv>
 80117b0:	4603      	mov	r3, r0
 80117b2:	115b      	asrs	r3, r3, #5
 80117b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80117b8:	4613      	mov	r3, r2
 80117ba:	021b      	lsls	r3, r3, #8
 80117bc:	1a9b      	subs	r3, r3, r2
 80117be:	4a42      	ldr	r2, [pc, #264]	; (80118c8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80117c0:	fb82 1203 	smull	r1, r2, r2, r3
 80117c4:	441a      	add	r2, r3
 80117c6:	1152      	asrs	r2, r2, #5
 80117c8:	17db      	asrs	r3, r3, #31
 80117ca:	1ad3      	subs	r3, r2, r3
 80117cc:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	3318      	adds	r3, #24
 80117d2:	4618      	mov	r0, r3
 80117d4:	f7ff fda2 	bl	801131c <_ZNK8touchgfx9colortypecvtEv>
 80117d8:	4603      	mov	r3, r0
 80117da:	f003 021f 	and.w	r2, r3, #31
 80117de:	4613      	mov	r3, r2
 80117e0:	021b      	lsls	r3, r3, #8
 80117e2:	1a9b      	subs	r3, r3, r2
 80117e4:	4a37      	ldr	r2, [pc, #220]	; (80118c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80117e6:	fb82 1203 	smull	r1, r2, r2, r3
 80117ea:	441a      	add	r2, r3
 80117ec:	1112      	asrs	r2, r2, #4
 80117ee:	17db      	asrs	r3, r3, #31
 80117f0:	1ad3      	subs	r3, r2, r3
 80117f2:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	7f1b      	ldrb	r3, [r3, #28]
 80117f8:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	061a      	lsls	r2, r3, #24
 80117fe:	69bb      	ldr	r3, [r7, #24]
 8011800:	041b      	lsls	r3, r3, #16
 8011802:	431a      	orrs	r2, r3
 8011804:	697b      	ldr	r3, [r7, #20]
 8011806:	021b      	lsls	r3, r3, #8
 8011808:	431a      	orrs	r2, r3
 801180a:	693b      	ldr	r3, [r7, #16]
 801180c:	4313      	orrs	r3, r2
 801180e:	4a2c      	ldr	r2, [pc, #176]	; (80118c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011810:	6353      	str	r3, [r2, #52]	; 0x34
 8011812:	e00b      	b.n	801182c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	3318      	adds	r3, #24
 8011818:	4618      	mov	r0, r3
 801181a:	f7ff fd73 	bl	8011304 <_ZNK8touchgfx9colortype10getColor32Ev>
 801181e:	4602      	mov	r2, r0
 8011820:	683b      	ldr	r3, [r7, #0]
 8011822:	7f1b      	ldrb	r3, [r3, #28]
 8011824:	061b      	lsls	r3, r3, #24
 8011826:	4313      	orrs	r3, r2
 8011828:	4a25      	ldr	r2, [pc, #148]	; (80118c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801182a:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	8adb      	ldrh	r3, [r3, #22]
 8011830:	461a      	mov	r2, r3
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	8a1b      	ldrh	r3, [r3, #16]
 8011836:	1ad3      	subs	r3, r2, r3
 8011838:	461a      	mov	r2, r3
 801183a:	4b21      	ldr	r3, [pc, #132]	; (80118c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801183c:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801183e:	7f7b      	ldrb	r3, [r7, #29]
 8011840:	2b10      	cmp	r3, #16
 8011842:	d101      	bne.n	8011848 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8011844:	2302      	movs	r3, #2
 8011846:	e000      	b.n	801184a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 8011848:	2301      	movs	r3, #1
 801184a:	4a1d      	ldr	r2, [pc, #116]	; (80118c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801184c:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 801184e:	2100      	movs	r1, #0
 8011850:	481b      	ldr	r0, [pc, #108]	; (80118c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011852:	f7f1 fcdf 	bl	8003214 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8011856:	2101      	movs	r1, #1
 8011858:	4819      	ldr	r0, [pc, #100]	; (80118c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801185a:	f7f1 fcdb 	bl	8003214 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 801185e:	7ffb      	ldrb	r3, [r7, #31]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d102      	bne.n	801186a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 8011864:	7fbb      	ldrb	r3, [r7, #30]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d015      	beq.n	8011896 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801186e:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8011870:	683b      	ldr	r3, [r7, #0]
 8011872:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011874:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801187a:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801187c:	683b      	ldr	r3, [r7, #0]
 801187e:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011880:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011886:	9301      	str	r3, [sp, #4]
 8011888:	9200      	str	r2, [sp, #0]
 801188a:	4623      	mov	r3, r4
 801188c:	4602      	mov	r2, r0
 801188e:	480c      	ldr	r0, [pc, #48]	; (80118c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011890:	f7f1 fae3 	bl	8002e5a <HAL_DMA2D_BlendingStart_IT>
 8011894:	e00f      	b.n	80118b6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 801189a:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 80118a0:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 80118a6:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 80118a8:	683b      	ldr	r3, [r7, #0]
 80118aa:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 80118ac:	9300      	str	r3, [sp, #0]
 80118ae:	4603      	mov	r3, r0
 80118b0:	4803      	ldr	r0, [pc, #12]	; (80118c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80118b2:	f7f1 fa9f 	bl	8002df4 <HAL_DMA2D_Start_IT>
    }
}
 80118b6:	bf00      	nop
 80118b8:	372c      	adds	r7, #44	; 0x2c
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd90      	pop	{r4, r7, pc}
 80118be:	bf00      	nop
 80118c0:	2000b584 	.word	0x2000b584
 80118c4:	84210843 	.word	0x84210843
 80118c8:	82082083 	.word	0x82082083

080118cc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 80118cc:	b590      	push	{r4, r7, lr}
 80118ce:	b08d      	sub	sp, #52	; 0x34
 80118d0:	af02      	add	r7, sp, #8
 80118d2:	6078      	str	r0, [r7, #4]
 80118d4:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 80118d6:	f7f8 fbad 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 80118da:	4602      	mov	r2, r0
 80118dc:	6813      	ldr	r3, [r2, #0]
 80118de:	3320      	adds	r3, #32
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	4610      	mov	r0, r2
 80118e4:	4798      	blx	r3
 80118e6:	4603      	mov	r3, r0
 80118e8:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80118ea:	7ffb      	ldrb	r3, [r7, #31]
 80118ec:	2b10      	cmp	r3, #16
 80118ee:	d101      	bne.n	80118f4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 80118f0:	2302      	movs	r3, #2
 80118f2:	e000      	b.n	80118f6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 80118f4:	2301      	movs	r3, #1
 80118f6:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 80118f8:	2300      	movs	r3, #0
 80118fa:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 80118fc:	7ffb      	ldrb	r3, [r7, #31]
 80118fe:	2b10      	cmp	r3, #16
 8011900:	d149      	bne.n	8011996 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	3318      	adds	r3, #24
 8011906:	4618      	mov	r0, r3
 8011908:	f7ff fd08 	bl	801131c <_ZNK8touchgfx9colortypecvtEv>
 801190c:	4603      	mov	r3, r0
 801190e:	12db      	asrs	r3, r3, #11
 8011910:	f003 021f 	and.w	r2, r3, #31
 8011914:	4613      	mov	r3, r2
 8011916:	021b      	lsls	r3, r3, #8
 8011918:	1a9b      	subs	r3, r3, r2
 801191a:	4a69      	ldr	r2, [pc, #420]	; (8011ac0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 801191c:	fb82 1203 	smull	r1, r2, r2, r3
 8011920:	441a      	add	r2, r3
 8011922:	1112      	asrs	r2, r2, #4
 8011924:	17db      	asrs	r3, r3, #31
 8011926:	1ad3      	subs	r3, r2, r3
 8011928:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	3318      	adds	r3, #24
 801192e:	4618      	mov	r0, r3
 8011930:	f7ff fcf4 	bl	801131c <_ZNK8touchgfx9colortypecvtEv>
 8011934:	4603      	mov	r3, r0
 8011936:	115b      	asrs	r3, r3, #5
 8011938:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801193c:	4613      	mov	r3, r2
 801193e:	021b      	lsls	r3, r3, #8
 8011940:	1a9b      	subs	r3, r3, r2
 8011942:	4a60      	ldr	r2, [pc, #384]	; (8011ac4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8011944:	fb82 1203 	smull	r1, r2, r2, r3
 8011948:	441a      	add	r2, r3
 801194a:	1152      	asrs	r2, r2, #5
 801194c:	17db      	asrs	r3, r3, #31
 801194e:	1ad3      	subs	r3, r2, r3
 8011950:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	3318      	adds	r3, #24
 8011956:	4618      	mov	r0, r3
 8011958:	f7ff fce0 	bl	801131c <_ZNK8touchgfx9colortypecvtEv>
 801195c:	4603      	mov	r3, r0
 801195e:	f003 021f 	and.w	r2, r3, #31
 8011962:	4613      	mov	r3, r2
 8011964:	021b      	lsls	r3, r3, #8
 8011966:	1a9b      	subs	r3, r3, r2
 8011968:	4a55      	ldr	r2, [pc, #340]	; (8011ac0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 801196a:	fb82 1203 	smull	r1, r2, r2, r3
 801196e:	441a      	add	r2, r3
 8011970:	1112      	asrs	r2, r2, #4
 8011972:	17db      	asrs	r3, r3, #31
 8011974:	1ad3      	subs	r3, r2, r3
 8011976:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	7f1b      	ldrb	r3, [r3, #28]
 801197c:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	061a      	lsls	r2, r3, #24
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	041b      	lsls	r3, r3, #16
 8011986:	431a      	orrs	r2, r3
 8011988:	693b      	ldr	r3, [r7, #16]
 801198a:	021b      	lsls	r3, r3, #8
 801198c:	4313      	orrs	r3, r2
 801198e:	68fa      	ldr	r2, [r7, #12]
 8011990:	4313      	orrs	r3, r2
 8011992:	623b      	str	r3, [r7, #32]
 8011994:	e00b      	b.n	80119ae <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8011996:	683b      	ldr	r3, [r7, #0]
 8011998:	7f1b      	ldrb	r3, [r3, #28]
 801199a:	061b      	lsls	r3, r3, #24
 801199c:	461c      	mov	r4, r3
 801199e:	683b      	ldr	r3, [r7, #0]
 80119a0:	3318      	adds	r3, #24
 80119a2:	4618      	mov	r0, r3
 80119a4:	f7ff fcae 	bl	8011304 <_ZNK8touchgfx9colortype10getColor32Ev>
 80119a8:	4603      	mov	r3, r0
 80119aa:	4323      	orrs	r3, r4
 80119ac:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	2b08      	cmp	r3, #8
 80119b4:	d103      	bne.n	80119be <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80119b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80119ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80119bc:	e003      	b.n	80119c6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 80119be:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80119c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80119c4:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80119c6:	4a40      	ldr	r2, [pc, #256]	; (8011ac8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80119c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ca:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80119cc:	7ffb      	ldrb	r3, [r7, #31]
 80119ce:	2b10      	cmp	r3, #16
 80119d0:	d101      	bne.n	80119d6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 80119d2:	2302      	movs	r3, #2
 80119d4:	e000      	b.n	80119d8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 80119d6:	2301      	movs	r3, #1
 80119d8:	4a3b      	ldr	r2, [pc, #236]	; (8011ac8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80119da:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80119dc:	683b      	ldr	r3, [r7, #0]
 80119de:	8adb      	ldrh	r3, [r3, #22]
 80119e0:	461a      	mov	r2, r3
 80119e2:	683b      	ldr	r3, [r7, #0]
 80119e4:	8a1b      	ldrh	r3, [r3, #16]
 80119e6:	1ad3      	subs	r3, r2, r3
 80119e8:	461a      	mov	r2, r3
 80119ea:	4b37      	ldr	r3, [pc, #220]	; (8011ac8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80119ec:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80119ee:	7ffb      	ldrb	r3, [r7, #31]
 80119f0:	2b10      	cmp	r3, #16
 80119f2:	d101      	bne.n	80119f8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 80119f4:	2202      	movs	r2, #2
 80119f6:	e000      	b.n	80119fa <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 80119f8:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80119fa:	683b      	ldr	r3, [r7, #0]
 80119fc:	8adb      	ldrh	r3, [r3, #22]
 80119fe:	4619      	mov	r1, r3
 8011a00:	683b      	ldr	r3, [r7, #0]
 8011a02:	8a1b      	ldrh	r3, [r3, #16]
 8011a04:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8011a06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011a08:	482f      	ldr	r0, [pc, #188]	; (8011ac8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011a0a:	f7ff fd29 	bl	8011460 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8011a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011a14:	d11e      	bne.n	8011a54 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8011a16:	4b2c      	ldr	r3, [pc, #176]	; (8011ac8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011a18:	2201      	movs	r2, #1
 8011a1a:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8011a1c:	4a2a      	ldr	r2, [pc, #168]	; (8011ac8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011a1e:	6a3b      	ldr	r3, [r7, #32]
 8011a20:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8011a22:	4b29      	ldr	r3, [pc, #164]	; (8011ac8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011a24:	2209      	movs	r2, #9
 8011a26:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	8adb      	ldrh	r3, [r3, #22]
 8011a2c:	461a      	mov	r2, r3
 8011a2e:	683b      	ldr	r3, [r7, #0]
 8011a30:	8a1b      	ldrh	r3, [r3, #16]
 8011a32:	1ad3      	subs	r3, r2, r3
 8011a34:	461a      	mov	r2, r3
 8011a36:	4b24      	ldr	r3, [pc, #144]	; (8011ac8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011a38:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8011a3a:	7ffb      	ldrb	r3, [r7, #31]
 8011a3c:	2b10      	cmp	r3, #16
 8011a3e:	d101      	bne.n	8011a44 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 8011a40:	2302      	movs	r3, #2
 8011a42:	e000      	b.n	8011a46 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8011a44:	2301      	movs	r3, #1
 8011a46:	4a20      	ldr	r2, [pc, #128]	; (8011ac8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011a48:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8011a4a:	2100      	movs	r1, #0
 8011a4c:	481e      	ldr	r0, [pc, #120]	; (8011ac8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011a4e:	f7f1 fbe1 	bl	8003214 <HAL_DMA2D_ConfigLayer>
 8011a52:	e005      	b.n	8011a60 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8011a54:	4a1c      	ldr	r2, [pc, #112]	; (8011ac8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011a56:	69bb      	ldr	r3, [r7, #24]
 8011a58:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8011a5a:	4b1b      	ldr	r3, [pc, #108]	; (8011ac8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8011a60:	2101      	movs	r1, #1
 8011a62:	4819      	ldr	r0, [pc, #100]	; (8011ac8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011a64:	f7f1 fbd6 	bl	8003214 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8011a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011a6e:	d115      	bne.n	8011a9c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011a74:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8011a76:	683b      	ldr	r3, [r7, #0]
 8011a78:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011a7a:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8011a7c:	683b      	ldr	r3, [r7, #0]
 8011a7e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011a80:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011a86:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8011a88:	683b      	ldr	r3, [r7, #0]
 8011a8a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011a8c:	9301      	str	r3, [sp, #4]
 8011a8e:	9200      	str	r2, [sp, #0]
 8011a90:	4623      	mov	r3, r4
 8011a92:	4602      	mov	r2, r0
 8011a94:	480c      	ldr	r0, [pc, #48]	; (8011ac8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011a96:	f7f1 f9e0 	bl	8002e5a <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8011a9a:	e00d      	b.n	8011ab8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8011a9c:	683b      	ldr	r3, [r7, #0]
 8011a9e:	68db      	ldr	r3, [r3, #12]
 8011aa0:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8011aa6:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8011aa8:	683b      	ldr	r3, [r7, #0]
 8011aaa:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8011aac:	9300      	str	r3, [sp, #0]
 8011aae:	460b      	mov	r3, r1
 8011ab0:	6a39      	ldr	r1, [r7, #32]
 8011ab2:	4805      	ldr	r0, [pc, #20]	; (8011ac8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011ab4:	f7f1 f99e 	bl	8002df4 <HAL_DMA2D_Start_IT>
}
 8011ab8:	bf00      	nop
 8011aba:	372c      	adds	r7, #44	; 0x2c
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd90      	pop	{r4, r7, pc}
 8011ac0:	84210843 	.word	0x84210843
 8011ac4:	82082083 	.word	0x82082083
 8011ac8:	2000b584 	.word	0x2000b584

08011acc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b082      	sub	sp, #8
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
 8011ad4:	4a05      	ldr	r2, [pc, #20]	; (8011aec <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	601a      	str	r2, [r3, #0]
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7ff fc2b 	bl	8011338 <_ZN8touchgfx9DMA_QueueD1Ev>
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	3708      	adds	r7, #8
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}
 8011aec:	08027848 	.word	0x08027848

08011af0 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b082      	sub	sp, #8
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
 8011af8:	6878      	ldr	r0, [r7, #4]
 8011afa:	f7ff ffe7 	bl	8011acc <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8011afe:	2114      	movs	r1, #20
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f011 faa4 	bl	802304e <_ZdlPvj>
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	4618      	mov	r0, r3
 8011b0a:	3708      	adds	r7, #8
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	bd80      	pop	{r7, pc}

08011b10 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8011b10:	b480      	push	{r7}
 8011b12:	b083      	sub	sp, #12
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
        texts = t;
 8011b18:	4a04      	ldr	r2, [pc, #16]	; (8011b2c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	6013      	str	r3, [r2, #0]
    }
 8011b1e:	bf00      	nop
 8011b20:	370c      	adds	r7, #12
 8011b22:	46bd      	mov	sp, r7
 8011b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b28:	4770      	bx	lr
 8011b2a:	bf00      	nop
 8011b2c:	2000b248 	.word	0x2000b248

08011b30 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8011b30:	b480      	push	{r7}
 8011b32:	b085      	sub	sp, #20
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	60f8      	str	r0, [r7, #12]
 8011b38:	60b9      	str	r1, [r7, #8]
 8011b3a:	607a      	str	r2, [r7, #4]
 8011b3c:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8011b3e:	4a0b      	ldr	r2, [pc, #44]	; (8011b6c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	601a      	str	r2, [r3, #0]
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	68ba      	ldr	r2, [r7, #8]
 8011b48:	605a      	str	r2, [r3, #4]
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	687a      	ldr	r2, [r7, #4]
 8011b4e:	609a      	str	r2, [r3, #8]
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	683a      	ldr	r2, [r7, #0]
 8011b54:	60da      	str	r2, [r3, #12]
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	69ba      	ldr	r2, [r7, #24]
 8011b5a:	611a      	str	r2, [r3, #16]
    {
    }
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	4618      	mov	r0, r3
 8011b60:	3714      	adds	r7, #20
 8011b62:	46bd      	mov	sp, r7
 8011b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b68:	4770      	bx	lr
 8011b6a:	bf00      	nop
 8011b6c:	080265d8 	.word	0x080265d8

08011b70 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 8011b70:	b480      	push	{r7}
 8011b72:	b083      	sub	sp, #12
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
    {
 8011b78:	4a04      	ldr	r2, [pc, #16]	; (8011b8c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	601a      	str	r2, [r3, #0]
    }
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	4618      	mov	r0, r3
 8011b82:	370c      	adds	r7, #12
 8011b84:	46bd      	mov	sp, r7
 8011b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8a:	4770      	bx	lr
 8011b8c:	080265d8 	.word	0x080265d8

08011b90 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b082      	sub	sp, #8
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
    }
 8011b98:	6878      	ldr	r0, [r7, #4]
 8011b9a:	f7ff ffe9 	bl	8011b70 <_ZN8touchgfx7MVPHeapD1Ev>
 8011b9e:	2114      	movs	r1, #20
 8011ba0:	6878      	ldr	r0, [r7, #4]
 8011ba2:	f011 fa54 	bl	802304e <_ZdlPvj>
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	4618      	mov	r0, r3
 8011baa:	3708      	adds	r7, #8
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}

08011bb0 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 8011bb0:	b480      	push	{r7}
 8011bb2:	b083      	sub	sp, #12
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
    {
 8011bb8:	4a04      	ldr	r2, [pc, #16]	; (8011bcc <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	601a      	str	r2, [r3, #0]
    }
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	370c      	adds	r7, #12
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bca:	4770      	bx	lr
 8011bcc:	080281c0 	.word	0x080281c0

08011bd0 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b082      	sub	sp, #8
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
    }
 8011bd8:	6878      	ldr	r0, [r7, #4]
 8011bda:	f7ff ffe9 	bl	8011bb0 <_ZN8touchgfx3LCDD1Ev>
 8011bde:	2108      	movs	r1, #8
 8011be0:	6878      	ldr	r0, [r7, #4]
 8011be2:	f011 fa34 	bl	802304e <_ZdlPvj>
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	4618      	mov	r0, r3
 8011bea:	3708      	adds	r7, #8
 8011bec:	46bd      	mov	sp, r7
 8011bee:	bd80      	pop	{r7, pc}

08011bf0 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 8011bf0:	b480      	push	{r7}
 8011bf2:	b083      	sub	sp, #12
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	801a      	strh	r2, [r3, #0]
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	2200      	movs	r2, #0
 8011c02:	805a      	strh	r2, [r3, #2]
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2200      	movs	r2, #0
 8011c08:	809a      	strh	r2, [r3, #4]
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	80da      	strh	r2, [r3, #6]
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	2200      	movs	r2, #0
 8011c14:	811a      	strh	r2, [r3, #8]
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	2200      	movs	r2, #0
 8011c1a:	815a      	strh	r2, [r3, #10]
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	2200      	movs	r2, #0
 8011c20:	819a      	strh	r2, [r3, #12]
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	2200      	movs	r2, #0
 8011c26:	739a      	strb	r2, [r3, #14]
        {
        }
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	370c      	adds	r7, #12
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c34:	4770      	bx	lr

08011c36 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 8011c36:	b580      	push	{r7, lr}
 8011c38:	b082      	sub	sp, #8
 8011c3a:	af00      	add	r7, sp, #0
 8011c3c:	6078      	str	r0, [r7, #4]
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	4618      	mov	r0, r3
 8011c42:	f7ff ffd5 	bl	8011bf0 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	2200      	movs	r2, #0
 8011c4a:	611a      	str	r2, [r3, #16]
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	2200      	movs	r2, #0
 8011c50:	829a      	strh	r2, [r3, #20]
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	4618      	mov	r0, r3
 8011c56:	3708      	adds	r7, #8
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	bd80      	pop	{r7, pc}

08011c5c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b084      	sub	sp, #16
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	60f8      	str	r0, [r7, #12]
 8011c64:	60b9      	str	r1, [r7, #8]
 8011c66:	607a      	str	r2, [r7, #4]
 8011c68:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 8011c6a:	4a44      	ldr	r2, [pc, #272]	; (8011d7c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	601a      	str	r2, [r3, #0]
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	68ba      	ldr	r2, [r7, #8]
 8011c74:	605a      	str	r2, [r3, #4]
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	687a      	ldr	r2, [r7, #4]
 8011c7a:	609a      	str	r2, [r3, #8]
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	683a      	ldr	r2, [r7, #0]
 8011c80:	60da      	str	r2, [r3, #12]
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	2200      	movs	r2, #0
 8011c86:	611a      	str	r2, [r3, #16]
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	615a      	str	r2, [r3, #20]
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	2200      	movs	r2, #0
 8011c92:	619a      	str	r2, [r3, #24]
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	331c      	adds	r3, #28
 8011c98:	4618      	mov	r0, r3
 8011c9a:	f7ff ffcc 	bl	8011c36 <_ZN8touchgfx8GesturesC1Ev>
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	639a      	str	r2, [r3, #56]	; 0x38
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	63da      	str	r2, [r3, #60]	; 0x3c
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	2200      	movs	r2, #0
 8011cae:	641a      	str	r2, [r3, #64]	; 0x40
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	645a      	str	r2, [r3, #68]	; 0x44
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	2200      	movs	r2, #0
 8011cba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	2201      	movs	r2, #1
 8011cc2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	2201      	movs	r2, #1
 8011cca:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	64da      	str	r2, [r3, #76]	; 0x4c
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	3350      	adds	r3, #80	; 0x50
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f7fa f973 	bl	800bfc4 <_ZN8touchgfx4RectC1Ev>
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	2201      	movs	r2, #1
 8011ce2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	2200      	movs	r2, #0
 8011cea:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	2200      	movs	r2, #0
 8011cf2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	2201      	movs	r2, #1
 8011cfa:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	2200      	movs	r2, #0
 8011d02:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	2200      	movs	r2, #0
 8011d0a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	2200      	movs	r2, #0
 8011d12:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	2200      	movs	r2, #0
 8011d1a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	2200      	movs	r2, #0
 8011d22:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	2200      	movs	r2, #0
 8011d2a:	671a      	str	r2, [r3, #112]	; 0x70
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	2200      	movs	r2, #0
 8011d30:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8011d34:	4a12      	ldr	r2, [pc, #72]	; (8011d80 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8011d3a:	4a12      	ldr	r2, [pc, #72]	; (8011d84 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8011d3c:	8b3b      	ldrh	r3, [r7, #24]
 8011d3e:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8011d40:	4a11      	ldr	r2, [pc, #68]	; (8011d88 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8011d42:	8bbb      	ldrh	r3, [r7, #28]
 8011d44:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8011d46:	4b11      	ldr	r3, [pc, #68]	; (8011d8c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8011d48:	2200      	movs	r2, #0
 8011d4a:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8011d4c:	4b0d      	ldr	r3, [pc, #52]	; (8011d84 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8011d4e:	881a      	ldrh	r2, [r3, #0]
 8011d50:	4b0f      	ldr	r3, [pc, #60]	; (8011d90 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8011d52:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8011d54:	4b0c      	ldr	r3, [pc, #48]	; (8011d88 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8011d56:	881a      	ldrh	r2, [r3, #0]
 8011d58:	4b0e      	ldr	r3, [pc, #56]	; (8011d94 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8011d5a:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8011d5c:	8b3a      	ldrh	r2, [r7, #24]
 8011d5e:	8bbb      	ldrh	r3, [r7, #28]
 8011d60:	429a      	cmp	r2, r3
 8011d62:	d301      	bcc.n	8011d68 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8011d64:	2200      	movs	r2, #0
 8011d66:	e000      	b.n	8011d6a <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8011d68:	2201      	movs	r2, #1
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	4618      	mov	r0, r3
 8011d74:	3710      	adds	r7, #16
 8011d76:	46bd      	mov	sp, r7
 8011d78:	bd80      	pop	{r7, pc}
 8011d7a:	bf00      	nop
 8011d7c:	080273b4 	.word	0x080273b4
 8011d80:	2000b1ac 	.word	0x2000b1ac
 8011d84:	2000b1a0 	.word	0x2000b1a0
 8011d88:	2000b1a2 	.word	0x2000b1a2
 8011d8c:	2000b1a4 	.word	0x2000b1a4
 8011d90:	2000b1a6 	.word	0x2000b1a6
 8011d94:	2000b1a8 	.word	0x2000b1a8

08011d98 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b082      	sub	sp, #8
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
 8011da0:	6039      	str	r1, [r7, #0]
    {
        app.gotoMenuScreenNoTransition();
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	4618      	mov	r0, r3
 8011da6:	f7f8 fb69 	bl	800a47c <_ZN23FrontendApplicationBase26gotoMenuScreenNoTransitionEv>
    }
 8011daa:	bf00      	nop
 8011dac:	3708      	adds	r7, #8
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd80      	pop	{r7, pc}
	...

08011db4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b086      	sub	sp, #24
 8011db8:	af02      	add	r7, sp, #8
 8011dba:	60f8      	str	r0, [r7, #12]
 8011dbc:	60b9      	str	r1, [r7, #8]
 8011dbe:	607a      	str	r2, [r7, #4]
 8011dc0:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8011dc2:	68f8      	ldr	r0, [r7, #12]
 8011dc4:	69bb      	ldr	r3, [r7, #24]
 8011dc6:	9300      	str	r3, [sp, #0]
 8011dc8:	683b      	ldr	r3, [r7, #0]
 8011dca:	687a      	ldr	r2, [r7, #4]
 8011dcc:	68b9      	ldr	r1, [r7, #8]
 8011dce:	f7ff feaf 	bl	8011b30 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8011dd2:	4a04      	ldr	r2, [pc, #16]	; (8011de4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	601a      	str	r2, [r3, #0]
    {

    }
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	4618      	mov	r0, r3
 8011ddc:	3710      	adds	r7, #16
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bd80      	pop	{r7, pc}
 8011de2:	bf00      	nop
 8011de4:	080265c4 	.word	0x080265c4

08011de8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8011de8:	b580      	push	{r7, lr}
 8011dea:	af00      	add	r7, sp, #0
 8011dec:	4801      	ldr	r0, [pc, #4]	; (8011df4 <__tcf_0+0xc>)
 8011dee:	f000 f9db 	bl	80121a8 <_ZN12FrontendHeapD1Ev>
 8011df2:	bd80      	pop	{r7, pc}
 8011df4:	2000839c 	.word	0x2000839c

08011df8 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8011dfc:	4b08      	ldr	r3, [pc, #32]	; (8011e20 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	f003 0301 	and.w	r3, r3, #1
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d108      	bne.n	8011e1a <_ZN12FrontendHeap11getInstanceEv+0x22>
 8011e08:	4806      	ldr	r0, [pc, #24]	; (8011e24 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 8011e0a:	f000 f831 	bl	8011e70 <_ZN12FrontendHeapC1Ev>
 8011e0e:	4b04      	ldr	r3, [pc, #16]	; (8011e20 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8011e10:	2201      	movs	r2, #1
 8011e12:	601a      	str	r2, [r3, #0]
 8011e14:	4804      	ldr	r0, [pc, #16]	; (8011e28 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8011e16:	f011 f963 	bl	80230e0 <atexit>
        return instance;
 8011e1a:	4b02      	ldr	r3, [pc, #8]	; (8011e24 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	bd80      	pop	{r7, pc}
 8011e20:	2000a4a0 	.word	0x2000a4a0
 8011e24:	2000839c 	.word	0x2000839c
 8011e28:	08011de9 	.word	0x08011de9

08011e2c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b082      	sub	sp, #8
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
 8011e34:	4a05      	ldr	r2, [pc, #20]	; (8011e4c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	601a      	str	r2, [r3, #0]
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f7ff fe97 	bl	8011b70 <_ZN8touchgfx7MVPHeapD1Ev>
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	4618      	mov	r0, r3
 8011e46:	3708      	adds	r7, #8
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}
 8011e4c:	080265c4 	.word	0x080265c4

08011e50 <_ZN16FrontendHeapBaseD0Ev>:
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b082      	sub	sp, #8
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
 8011e58:	6878      	ldr	r0, [r7, #4]
 8011e5a:	f7ff ffe7 	bl	8011e2c <_ZN16FrontendHeapBaseD1Ev>
 8011e5e:	2114      	movs	r1, #20
 8011e60:	6878      	ldr	r0, [r7, #4]
 8011e62:	f011 f8f4 	bl	802304e <_ZdlPvj>
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	4618      	mov	r0, r3
 8011e6a:	3708      	adds	r7, #8
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	bd80      	pop	{r7, pc}

08011e70 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8011e70:	b5b0      	push	{r4, r5, r7, lr}
 8011e72:	b084      	sub	sp, #16
 8011e74:	af02      	add	r7, sp, #8
 8011e76:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	f103 0414 	add.w	r4, r3, #20
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	f641 7254 	movw	r2, #8020	; 0x1f54
 8011e8c:	441a      	add	r2, r3
 8011e8e:	6879      	ldr	r1, [r7, #4]
 8011e90:	f641 73b0 	movw	r3, #8112	; 0x1fb0
 8011e94:	440b      	add	r3, r1
 8011e96:	9300      	str	r3, [sp, #0]
 8011e98:	4613      	mov	r3, r2
 8011e9a:	462a      	mov	r2, r5
 8011e9c:	4621      	mov	r1, r4
 8011e9e:	f7ff ff89 	bl	8011db4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8011ea2:	4a19      	ldr	r2, [pc, #100]	; (8011f08 <_ZN12FrontendHeapC1Ev+0x98>)
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	601a      	str	r2, [r3, #0]
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	3314      	adds	r3, #20
 8011eac:	4618      	mov	r0, r3
 8011eae:	f000 f8dd 	bl	801206c <_ZN8touchgfx9PartitionINS_4meta8TypeListI22TestGirouettePresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	332c      	adds	r3, #44	; 0x2c
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f000 f90c 	bl	80120d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23TestRotationPlateauViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8011ebc:	687a      	ldr	r2, [r7, #4]
 8011ebe:	f641 7354 	movw	r3, #8020	; 0x1f54
 8011ec2:	4413      	add	r3, r2
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	f000 f93b 	bl	8012140 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8011eca:	687a      	ldr	r2, [r7, #4]
 8011ecc:	f641 73b0 	movw	r3, #8112	; 0x1fb0
 8011ed0:	4413      	add	r3, r2
 8011ed2:	687a      	ldr	r2, [r7, #4]
 8011ed4:	f502 5104 	add.w	r1, r2, #8448	; 0x2100
 8011ed8:	687a      	ldr	r2, [r7, #4]
 8011eda:	4618      	mov	r0, r3
 8011edc:	f7fd fda2 	bl	800fa24 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7fe f854 	bl	800ff94 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8011eec:	6878      	ldr	r0, [r7, #4]
 8011eee:	687a      	ldr	r2, [r7, #4]
 8011ef0:	f641 73b0 	movw	r3, #8112	; 0x1fb0
 8011ef4:	4413      	add	r3, r2
 8011ef6:	4619      	mov	r1, r3
 8011ef8:	f7ff ff4e 	bl	8011d98 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	4618      	mov	r0, r3
 8011f00:	3708      	adds	r7, #8
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bdb0      	pop	{r4, r5, r7, pc}
 8011f06:	bf00      	nop
 8011f08:	08026514 	.word	0x08026514

08011f0c <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b082      	sub	sp, #8
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
    {
 8011f14:	4a05      	ldr	r2, [pc, #20]	; (8011f2c <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	601a      	str	r2, [r3, #0]
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f7ff fe47 	bl	8011bb0 <_ZN8touchgfx3LCDD1Ev>
    }
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	4618      	mov	r0, r3
 8011f26:	3708      	adds	r7, #8
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bd80      	pop	{r7, pc}
 8011f2c:	08029578 	.word	0x08029578

08011f30 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b082      	sub	sp, #8
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
    }
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f7ff ffe7 	bl	8011f0c <_ZN8touchgfx8LCD24bppD1Ev>
 8011f3e:	2158      	movs	r1, #88	; 0x58
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	f011 f884 	bl	802304e <_ZdlPvj>
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	4618      	mov	r0, r3
 8011f4a:	3708      	adds	r7, #8
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bd80      	pop	{r7, pc}

08011f50 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b086      	sub	sp, #24
 8011f54:	af02      	add	r7, sp, #8
 8011f56:	60f8      	str	r0, [r7, #12]
 8011f58:	60b9      	str	r1, [r7, #8]
 8011f5a:	607a      	str	r2, [r7, #4]
 8011f5c:	603b      	str	r3, [r7, #0]
 8011f5e:	68f8      	ldr	r0, [r7, #12]
 8011f60:	8bbb      	ldrh	r3, [r7, #28]
 8011f62:	9301      	str	r3, [sp, #4]
 8011f64:	8b3b      	ldrh	r3, [r7, #24]
 8011f66:	9300      	str	r3, [sp, #0]
 8011f68:	683b      	ldr	r3, [r7, #0]
 8011f6a:	687a      	ldr	r2, [r7, #4]
 8011f6c:	68b9      	ldr	r1, [r7, #8]
 8011f6e:	f7ff fe75 	bl	8011c5c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8011f72:	4a04      	ldr	r2, [pc, #16]	; (8011f84 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	601a      	str	r2, [r3, #0]
    }
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	3710      	adds	r7, #16
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	bd80      	pop	{r7, pc}
 8011f82:	bf00      	nop
 8011f84:	080265e8 	.word	0x080265e8

08011f88 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b086      	sub	sp, #24
 8011f8c:	af02      	add	r7, sp, #8
 8011f8e:	60f8      	str	r0, [r7, #12]
 8011f90:	60b9      	str	r1, [r7, #8]
 8011f92:	607a      	str	r2, [r7, #4]
 8011f94:	603b      	str	r3, [r7, #0]
 8011f96:	68f8      	ldr	r0, [r7, #12]
 8011f98:	8bbb      	ldrh	r3, [r7, #28]
 8011f9a:	9301      	str	r3, [sp, #4]
 8011f9c:	8b3b      	ldrh	r3, [r7, #24]
 8011f9e:	9300      	str	r3, [sp, #0]
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	687a      	ldr	r2, [r7, #4]
 8011fa4:	68b9      	ldr	r1, [r7, #8]
 8011fa6:	f7ff ffd3 	bl	8011f50 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8011faa:	4a04      	ldr	r2, [pc, #16]	; (8011fbc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	601a      	str	r2, [r3, #0]
    }
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	3710      	adds	r7, #16
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	bd80      	pop	{r7, pc}
 8011fba:	bf00      	nop
 8011fbc:	08026314 	.word	0x08026314

08011fc0 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8011fc0:	b480      	push	{r7}
 8011fc2:	b083      	sub	sp, #12
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
 8011fc8:	4a04      	ldr	r2, [pc, #16]	; (8011fdc <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	601a      	str	r2, [r3, #0]
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	370c      	adds	r7, #12
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fda:	4770      	bx	lr
 8011fdc:	080262fc 	.word	0x080262fc

08011fe0 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b082      	sub	sp, #8
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	4618      	mov	r0, r3
 8011fec:	f7ff ffe8 	bl	8011fc0 <_ZN8touchgfx15TouchControllerC1Ev>
 8011ff0:	4a03      	ldr	r2, [pc, #12]	; (8012000 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	601a      	str	r2, [r3, #0]
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	3708      	adds	r7, #8
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd80      	pop	{r7, pc}
 8012000:	080262e4 	.word	0x080262e4

08012004 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8012004:	b590      	push	{r4, r7, lr}
 8012006:	b085      	sub	sp, #20
 8012008:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 801200a:	f7fd fbf1 	bl	800f7f0 <_ZN14BitmapDatabase11getInstanceEv>
 801200e:	4604      	mov	r4, r0
 8012010:	f7fd fbf8 	bl	800f804 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8012014:	4603      	mov	r3, r0
 8012016:	4619      	mov	r1, r3
 8012018:	2300      	movs	r3, #0
 801201a:	9300      	str	r3, [sp, #0]
 801201c:	2300      	movs	r3, #0
 801201e:	2200      	movs	r2, #0
 8012020:	4620      	mov	r0, r4
 8012022:	f007 fad9 	bl	80195d8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8012026:	4809      	ldr	r0, [pc, #36]	; (801204c <touchgfx_init+0x48>)
 8012028:	f7ff fd72 	bl	8011b10 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 801202c:	2000      	movs	r0, #0
 801202e:	f7fd fc0d 	bl	800f84c <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8012032:	4807      	ldr	r0, [pc, #28]	; (8012050 <touchgfx_init+0x4c>)
 8012034:	f007 fa1e 	bl	8019474 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8012038:	f7ff fede 	bl	8011df8 <_ZN12FrontendHeap11getInstanceEv>
 801203c:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 801203e:	4805      	ldr	r0, [pc, #20]	; (8012054 <touchgfx_init+0x50>)
 8012040:	f7fe ffdc 	bl	8010ffc <_ZN11TouchGFXHAL10initializeEv>
}
 8012044:	bf00      	nop
 8012046:	370c      	adds	r7, #12
 8012048:	46bd      	mov	sp, r7
 801204a:	bd90      	pop	{r4, r7, pc}
 801204c:	2000b120 	.word	0x2000b120
 8012050:	2000004c 	.word	0x2000004c
 8012054:	2000b124 	.word	0x2000b124

08012058 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8012058:	b580      	push	{r7, lr}
 801205a:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 801205c:	4802      	ldr	r0, [pc, #8]	; (8012068 <touchgfx_taskEntry+0x10>)
 801205e:	f001 ff16 	bl	8013e8e <_ZN8touchgfx3HAL9taskEntryEv>
}
 8012062:	bf00      	nop
 8012064:	bd80      	pop	{r7, pc}
 8012066:	bf00      	nop
 8012068:	2000b124 	.word	0x2000b124

0801206c <_ZN8touchgfx9PartitionINS_4meta8TypeListI22TestGirouettePresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 801206c:	b580      	push	{r7, lr}
 801206e:	b082      	sub	sp, #8
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	4618      	mov	r0, r3
 8012078:	f000 fbfa 	bl	8012870 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801207c:	4a03      	ldr	r2, [pc, #12]	; (801208c <_ZN8touchgfx9PartitionINS_4meta8TypeListI22TestGirouettePresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	601a      	str	r2, [r3, #0]
    {
    }
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	4618      	mov	r0, r3
 8012086:	3708      	adds	r7, #8
 8012088:	46bd      	mov	sp, r7
 801208a:	bd80      	pop	{r7, pc}
 801208c:	08026590 	.word	0x08026590

08012090 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22TestGirouettePresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8012090:	b580      	push	{r7, lr}
 8012092:	b082      	sub	sp, #8
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
    {
    }
 8012098:	4a05      	ldr	r2, [pc, #20]	; (80120b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22TestGirouettePresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	601a      	str	r2, [r3, #0]
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	4618      	mov	r0, r3
 80120a2:	f000 fbe3 	bl	801286c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	4618      	mov	r0, r3
 80120aa:	3708      	adds	r7, #8
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bd80      	pop	{r7, pc}
 80120b0:	08026590 	.word	0x08026590

080120b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22TestGirouettePresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b082      	sub	sp, #8
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
    }
 80120bc:	6878      	ldr	r0, [r7, #4]
 80120be:	f7ff ffe7 	bl	8012090 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22TestGirouettePresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80120c2:	2118      	movs	r1, #24
 80120c4:	6878      	ldr	r0, [r7, #4]
 80120c6:	f010 ffc2 	bl	802304e <_ZdlPvj>
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	4618      	mov	r0, r3
 80120ce:	3708      	adds	r7, #8
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd80      	pop	{r7, pc}

080120d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23TestRotationPlateauViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b082      	sub	sp, #8
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	4618      	mov	r0, r3
 80120e0:	f000 fbc6 	bl	8012870 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80120e4:	4a03      	ldr	r2, [pc, #12]	; (80120f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23TestRotationPlateauViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	601a      	str	r2, [r3, #0]
    }
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	4618      	mov	r0, r3
 80120ee:	3708      	adds	r7, #8
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bd80      	pop	{r7, pc}
 80120f4:	0802655c 	.word	0x0802655c

080120f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23TestRotationPlateauViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b082      	sub	sp, #8
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
    }
 8012100:	4a05      	ldr	r2, [pc, #20]	; (8012118 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23TestRotationPlateauViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	601a      	str	r2, [r3, #0]
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	4618      	mov	r0, r3
 801210a:	f000 fbaf 	bl	801286c <_ZN8touchgfx17AbstractPartitionD1Ev>
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	4618      	mov	r0, r3
 8012112:	3708      	adds	r7, #8
 8012114:	46bd      	mov	sp, r7
 8012116:	bd80      	pop	{r7, pc}
 8012118:	0802655c 	.word	0x0802655c

0801211c <_ZN8touchgfx9PartitionINS_4meta8TypeListI23TestRotationPlateauViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 801211c:	b580      	push	{r7, lr}
 801211e:	b082      	sub	sp, #8
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]
    }
 8012124:	6878      	ldr	r0, [r7, #4]
 8012126:	f7ff ffe7 	bl	80120f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23TestRotationPlateauViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801212a:	f641 7128 	movw	r1, #7976	; 0x1f28
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	f010 ff8d 	bl	802304e <_ZdlPvj>
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	4618      	mov	r0, r3
 8012138:	3708      	adds	r7, #8
 801213a:	46bd      	mov	sp, r7
 801213c:	bd80      	pop	{r7, pc}
	...

08012140 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8012140:	b580      	push	{r7, lr}
 8012142:	b082      	sub	sp, #8
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	4618      	mov	r0, r3
 801214c:	f000 fb90 	bl	8012870 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012150:	4a03      	ldr	r2, [pc, #12]	; (8012160 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	601a      	str	r2, [r3, #0]
    }
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	4618      	mov	r0, r3
 801215a:	3708      	adds	r7, #8
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}
 8012160:	08026528 	.word	0x08026528

08012164 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
    virtual ~Partition()
 8012164:	b580      	push	{r7, lr}
 8012166:	b082      	sub	sp, #8
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
    }
 801216c:	4a05      	ldr	r2, [pc, #20]	; (8012184 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	601a      	str	r2, [r3, #0]
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	4618      	mov	r0, r3
 8012176:	f000 fb79 	bl	801286c <_ZN8touchgfx17AbstractPartitionD1Ev>
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	4618      	mov	r0, r3
 801217e:	3708      	adds	r7, #8
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}
 8012184:	08026528 	.word	0x08026528

08012188 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
    virtual ~Partition()
 8012188:	b580      	push	{r7, lr}
 801218a:	b082      	sub	sp, #8
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
    }
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	f7ff ffe7 	bl	8012164 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8012196:	215c      	movs	r1, #92	; 0x5c
 8012198:	6878      	ldr	r0, [r7, #4]
 801219a:	f010 ff58 	bl	802304e <_ZdlPvj>
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	4618      	mov	r0, r3
 80121a2:	3708      	adds	r7, #8
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}

080121a8 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b082      	sub	sp, #8
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
 80121b0:	4a11      	ldr	r2, [pc, #68]	; (80121f8 <_ZN12FrontendHeapD1Ev+0x50>)
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	601a      	str	r2, [r3, #0]
 80121b6:	687a      	ldr	r2, [r7, #4]
 80121b8:	f641 73b0 	movw	r3, #8112	; 0x1fb0
 80121bc:	4413      	add	r3, r2
 80121be:	4618      	mov	r0, r3
 80121c0:	f7fd fbfa 	bl	800f9b8 <_ZN19FrontendApplicationD1Ev>
 80121c4:	687a      	ldr	r2, [r7, #4]
 80121c6:	f641 7354 	movw	r3, #8020	; 0x1f54
 80121ca:	4413      	add	r3, r2
 80121cc:	4618      	mov	r0, r3
 80121ce:	f7ff ffc9 	bl	8012164 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	332c      	adds	r3, #44	; 0x2c
 80121d6:	4618      	mov	r0, r3
 80121d8:	f7ff ff8e 	bl	80120f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23TestRotationPlateauViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	3314      	adds	r3, #20
 80121e0:	4618      	mov	r0, r3
 80121e2:	f7ff ff55 	bl	8012090 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22TestGirouettePresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	4618      	mov	r0, r3
 80121ea:	f7ff fe1f 	bl	8011e2c <_ZN16FrontendHeapBaseD1Ev>
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	4618      	mov	r0, r3
 80121f2:	3708      	adds	r7, #8
 80121f4:	46bd      	mov	sp, r7
 80121f6:	bd80      	pop	{r7, pc}
 80121f8:	08026514 	.word	0x08026514

080121fc <_ZN12FrontendHeapD0Ev>:
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b082      	sub	sp, #8
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
 8012204:	6878      	ldr	r0, [r7, #4]
 8012206:	f7ff ffcf 	bl	80121a8 <_ZN12FrontendHeapD1Ev>
 801220a:	f242 1104 	movw	r1, #8452	; 0x2104
 801220e:	6878      	ldr	r0, [r7, #4]
 8012210:	f010 ff1d 	bl	802304e <_ZdlPvj>
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	4618      	mov	r0, r3
 8012218:	3708      	adds	r7, #8
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}
	...

08012220 <_Z41__static_initialization_and_destruction_0ii>:
 8012220:	b580      	push	{r7, lr}
 8012222:	b084      	sub	sp, #16
 8012224:	af02      	add	r7, sp, #8
 8012226:	6078      	str	r0, [r7, #4]
 8012228:	6039      	str	r1, [r7, #0]
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	2b01      	cmp	r3, #1
 801222e:	d119      	bne.n	8012264 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012236:	4293      	cmp	r3, r2
 8012238:	d114      	bne.n	8012264 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 801223a:	4818      	ldr	r0, [pc, #96]	; (801229c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801223c:	f7ff fed0 	bl	8011fe0 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8012240:	4817      	ldr	r0, [pc, #92]	; (80122a0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8012242:	f7ff f967 	bl	8011514 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8012246:	4817      	ldr	r0, [pc, #92]	; (80122a4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8012248:	f009 fbec 	bl	801ba24 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 801224c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8012250:	9301      	str	r3, [sp, #4]
 8012252:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8012256:	9300      	str	r3, [sp, #0]
 8012258:	4b10      	ldr	r3, [pc, #64]	; (801229c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801225a:	4a12      	ldr	r2, [pc, #72]	; (80122a4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801225c:	4910      	ldr	r1, [pc, #64]	; (80122a0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801225e:	4812      	ldr	r0, [pc, #72]	; (80122a8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8012260:	f7ff fe92 	bl	8011f88 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d113      	bne.n	8012292 <_Z41__static_initialization_and_destruction_0ii+0x72>
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012270:	4293      	cmp	r3, r2
 8012272:	d10e      	bne.n	8012292 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8012274:	480c      	ldr	r0, [pc, #48]	; (80122a8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8012276:	f7fe ff27 	bl	80110c8 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 801227a:	480c      	ldr	r0, [pc, #48]	; (80122ac <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 801227c:	f7f7 fa42 	bl	8009704 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8012280:	4808      	ldr	r0, [pc, #32]	; (80122a4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8012282:	f7ff fe43 	bl	8011f0c <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8012286:	4806      	ldr	r0, [pc, #24]	; (80122a0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8012288:	f7ff f96e 	bl	8011568 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 801228c:	4803      	ldr	r0, [pc, #12]	; (801229c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801228e:	f7fe fc85 	bl	8010b9c <_ZN20STM32TouchControllerD1Ev>
}
 8012292:	bf00      	nop
 8012294:	3708      	adds	r7, #8
 8012296:	46bd      	mov	sp, r7
 8012298:	bd80      	pop	{r7, pc}
 801229a:	bf00      	nop
 801229c:	2000a4a4 	.word	0x2000a4a4
 80122a0:	2000a4a8 	.word	0x2000a4a8
 80122a4:	2000b0c8 	.word	0x2000b0c8
 80122a8:	2000b124 	.word	0x2000b124
 80122ac:	2000004c 	.word	0x2000004c

080122b0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 80122b0:	b480      	push	{r7}
 80122b2:	b083      	sub	sp, #12
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80122b8:	2301      	movs	r3, #1
    }
 80122ba:	4618      	mov	r0, r3
 80122bc:	370c      	adds	r7, #12
 80122be:	46bd      	mov	sp, r7
 80122c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c4:	4770      	bx	lr

080122c6 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 80122c6:	b480      	push	{r7}
 80122c8:	b083      	sub	sp, #12
 80122ca:	af00      	add	r7, sp, #0
 80122cc:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80122ce:	2354      	movs	r3, #84	; 0x54
    }
 80122d0:	4618      	mov	r0, r3
 80122d2:	370c      	adds	r7, #12
 80122d4:	46bd      	mov	sp, r7
 80122d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122da:	4770      	bx	lr

080122dc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 80122dc:	b480      	push	{r7}
 80122de:	b083      	sub	sp, #12
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
 80122e4:	460b      	mov	r3, r1
 80122e6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80122e8:	887b      	ldrh	r3, [r7, #2]
 80122ea:	2254      	movs	r2, #84	; 0x54
 80122ec:	fb02 f303 	mul.w	r3, r2, r3
 80122f0:	3308      	adds	r3, #8
 80122f2:	687a      	ldr	r2, [r7, #4]
 80122f4:	4413      	add	r3, r2
    }
 80122f6:	4618      	mov	r0, r3
 80122f8:	370c      	adds	r7, #12
 80122fa:	46bd      	mov	sp, r7
 80122fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012300:	4770      	bx	lr

08012302 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8012302:	b480      	push	{r7}
 8012304:	b083      	sub	sp, #12
 8012306:	af00      	add	r7, sp, #0
 8012308:	6078      	str	r0, [r7, #4]
 801230a:	460b      	mov	r3, r1
 801230c:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 801230e:	887b      	ldrh	r3, [r7, #2]
 8012310:	2254      	movs	r2, #84	; 0x54
 8012312:	fb02 f303 	mul.w	r3, r2, r3
 8012316:	3308      	adds	r3, #8
 8012318:	687a      	ldr	r2, [r7, #4]
 801231a:	4413      	add	r3, r2
    }
 801231c:	4618      	mov	r0, r3
 801231e:	370c      	adds	r7, #12
 8012320:	46bd      	mov	sp, r7
 8012322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012326:	4770      	bx	lr

08012328 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI23TestRotationPlateauViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8012328:	b480      	push	{r7}
 801232a:	b083      	sub	sp, #12
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8012330:	2301      	movs	r3, #1
    }
 8012332:	4618      	mov	r0, r3
 8012334:	370c      	adds	r7, #12
 8012336:	46bd      	mov	sp, r7
 8012338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233c:	4770      	bx	lr

0801233e <_ZN8touchgfx9PartitionINS_4meta8TypeListI23TestRotationPlateauViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801233e:	b480      	push	{r7}
 8012340:	b083      	sub	sp, #12
 8012342:	af00      	add	r7, sp, #0
 8012344:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8012346:	f44f 53f9 	mov.w	r3, #7968	; 0x1f20
    }
 801234a:	4618      	mov	r0, r3
 801234c:	370c      	adds	r7, #12
 801234e:	46bd      	mov	sp, r7
 8012350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012354:	4770      	bx	lr

08012356 <_ZN8touchgfx9PartitionINS_4meta8TypeListI23TestRotationPlateauViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8012356:	b480      	push	{r7}
 8012358:	b083      	sub	sp, #12
 801235a:	af00      	add	r7, sp, #0
 801235c:	6078      	str	r0, [r7, #4]
 801235e:	460b      	mov	r3, r1
 8012360:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8012362:	887b      	ldrh	r3, [r7, #2]
 8012364:	f44f 52f9 	mov.w	r2, #7968	; 0x1f20
 8012368:	fb02 f303 	mul.w	r3, r2, r3
 801236c:	3308      	adds	r3, #8
 801236e:	687a      	ldr	r2, [r7, #4]
 8012370:	4413      	add	r3, r2
    }
 8012372:	4618      	mov	r0, r3
 8012374:	370c      	adds	r7, #12
 8012376:	46bd      	mov	sp, r7
 8012378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237c:	4770      	bx	lr

0801237e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI23TestRotationPlateauViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801237e:	b480      	push	{r7}
 8012380:	b083      	sub	sp, #12
 8012382:	af00      	add	r7, sp, #0
 8012384:	6078      	str	r0, [r7, #4]
 8012386:	460b      	mov	r3, r1
 8012388:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801238a:	887b      	ldrh	r3, [r7, #2]
 801238c:	f44f 52f9 	mov.w	r2, #7968	; 0x1f20
 8012390:	fb02 f303 	mul.w	r3, r2, r3
 8012394:	3308      	adds	r3, #8
 8012396:	687a      	ldr	r2, [r7, #4]
 8012398:	4413      	add	r3, r2
    }
 801239a:	4618      	mov	r0, r3
 801239c:	370c      	adds	r7, #12
 801239e:	46bd      	mov	sp, r7
 80123a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a4:	4770      	bx	lr

080123a6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI22TestGirouettePresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80123a6:	b480      	push	{r7}
 80123a8:	b083      	sub	sp, #12
 80123aa:	af00      	add	r7, sp, #0
 80123ac:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80123ae:	2301      	movs	r3, #1
    }
 80123b0:	4618      	mov	r0, r3
 80123b2:	370c      	adds	r7, #12
 80123b4:	46bd      	mov	sp, r7
 80123b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ba:	4770      	bx	lr

080123bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI22TestGirouettePresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80123bc:	b480      	push	{r7}
 80123be:	b083      	sub	sp, #12
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80123c4:	2310      	movs	r3, #16
    }
 80123c6:	4618      	mov	r0, r3
 80123c8:	370c      	adds	r7, #12
 80123ca:	46bd      	mov	sp, r7
 80123cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d0:	4770      	bx	lr

080123d2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22TestGirouettePresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80123d2:	b480      	push	{r7}
 80123d4:	b083      	sub	sp, #12
 80123d6:	af00      	add	r7, sp, #0
 80123d8:	6078      	str	r0, [r7, #4]
 80123da:	460b      	mov	r3, r1
 80123dc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80123de:	887b      	ldrh	r3, [r7, #2]
 80123e0:	011b      	lsls	r3, r3, #4
 80123e2:	3308      	adds	r3, #8
 80123e4:	687a      	ldr	r2, [r7, #4]
 80123e6:	4413      	add	r3, r2
    }
 80123e8:	4618      	mov	r0, r3
 80123ea:	370c      	adds	r7, #12
 80123ec:	46bd      	mov	sp, r7
 80123ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f2:	4770      	bx	lr

080123f4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI22TestGirouettePresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80123f4:	b480      	push	{r7}
 80123f6:	b083      	sub	sp, #12
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
 80123fc:	460b      	mov	r3, r1
 80123fe:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8012400:	887b      	ldrh	r3, [r7, #2]
 8012402:	011b      	lsls	r3, r3, #4
 8012404:	3308      	adds	r3, #8
 8012406:	687a      	ldr	r2, [r7, #4]
 8012408:	4413      	add	r3, r2
    }
 801240a:	4618      	mov	r0, r3
 801240c:	370c      	adds	r7, #12
 801240e:	46bd      	mov	sp, r7
 8012410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012414:	4770      	bx	lr

08012416 <_GLOBAL__sub_I_touchgfx_init>:
 8012416:	b580      	push	{r7, lr}
 8012418:	af00      	add	r7, sp, #0
 801241a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801241e:	2001      	movs	r0, #1
 8012420:	f7ff fefe 	bl	8012220 <_Z41__static_initialization_and_destruction_0ii>
 8012424:	bd80      	pop	{r7, pc}

08012426 <_GLOBAL__sub_D_touchgfx_init>:
 8012426:	b580      	push	{r7, lr}
 8012428:	af00      	add	r7, sp, #0
 801242a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801242e:	2000      	movs	r0, #0
 8012430:	f7ff fef6 	bl	8012220 <_Z41__static_initialization_and_destruction_0ii>
 8012434:	bd80      	pop	{r7, pc}

08012436 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8012436:	b580      	push	{r7, lr}
 8012438:	b082      	sub	sp, #8
 801243a:	af00      	add	r7, sp, #0
 801243c:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	3318      	adds	r3, #24
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	6878      	ldr	r0, [r7, #4]
 8012448:	4798      	blx	r3
    }
 801244a:	bf00      	nop
 801244c:	3708      	adds	r7, #8
 801244e:	46bd      	mov	sp, r7
 8012450:	bd80      	pop	{r7, pc}

08012452 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8012452:	b480      	push	{r7}
 8012454:	b083      	sub	sp, #12
 8012456:	af00      	add	r7, sp, #0
 8012458:	6078      	str	r0, [r7, #4]
 801245a:	460b      	mov	r3, r1
 801245c:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	78fa      	ldrb	r2, [r7, #3]
 8012462:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8012466:	bf00      	nop
 8012468:	370c      	adds	r7, #12
 801246a:	46bd      	mov	sp, r7
 801246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012470:	4770      	bx	lr

08012472 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8012472:	b480      	push	{r7}
 8012474:	b083      	sub	sp, #12
 8012476:	af00      	add	r7, sp, #0
 8012478:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8012480:	3301      	adds	r3, #1
 8012482:	b2da      	uxtb	r2, r3
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 801248a:	bf00      	nop
 801248c:	370c      	adds	r7, #12
 801248e:	46bd      	mov	sp, r7
 8012490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012494:	4770      	bx	lr
	...

08012498 <__NVIC_EnableIRQ>:
{
 8012498:	b480      	push	{r7}
 801249a:	b083      	sub	sp, #12
 801249c:	af00      	add	r7, sp, #0
 801249e:	4603      	mov	r3, r0
 80124a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80124a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	db0d      	blt.n	80124c6 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80124aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80124ae:	b2db      	uxtb	r3, r3
 80124b0:	f003 021f 	and.w	r2, r3, #31
 80124b4:	4907      	ldr	r1, [pc, #28]	; (80124d4 <__NVIC_EnableIRQ+0x3c>)
 80124b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80124ba:	095b      	lsrs	r3, r3, #5
 80124bc:	2001      	movs	r0, #1
 80124be:	fa00 f202 	lsl.w	r2, r0, r2
 80124c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80124c6:	bf00      	nop
 80124c8:	370c      	adds	r7, #12
 80124ca:	46bd      	mov	sp, r7
 80124cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d0:	4770      	bx	lr
 80124d2:	bf00      	nop
 80124d4:	e000e100 	.word	0xe000e100

080124d8 <__NVIC_DisableIRQ>:
{
 80124d8:	b480      	push	{r7}
 80124da:	b083      	sub	sp, #12
 80124dc:	af00      	add	r7, sp, #0
 80124de:	4603      	mov	r3, r0
 80124e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80124e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	db12      	blt.n	8012510 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80124ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80124ee:	b2db      	uxtb	r3, r3
 80124f0:	f003 021f 	and.w	r2, r3, #31
 80124f4:	4909      	ldr	r1, [pc, #36]	; (801251c <__NVIC_DisableIRQ+0x44>)
 80124f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80124fa:	095b      	lsrs	r3, r3, #5
 80124fc:	2001      	movs	r0, #1
 80124fe:	fa00 f202 	lsl.w	r2, r0, r2
 8012502:	3320      	adds	r3, #32
 8012504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8012508:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801250c:	f3bf 8f6f 	isb	sy
}
 8012510:	bf00      	nop
 8012512:	370c      	adds	r7, #12
 8012514:	46bd      	mov	sp, r7
 8012516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251a:	4770      	bx	lr
 801251c:	e000e100 	.word	0xe000e100

08012520 <__NVIC_SetPriority>:
{
 8012520:	b480      	push	{r7}
 8012522:	b083      	sub	sp, #12
 8012524:	af00      	add	r7, sp, #0
 8012526:	4603      	mov	r3, r0
 8012528:	6039      	str	r1, [r7, #0]
 801252a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801252c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012530:	2b00      	cmp	r3, #0
 8012532:	db0c      	blt.n	801254e <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012534:	683b      	ldr	r3, [r7, #0]
 8012536:	b2db      	uxtb	r3, r3
 8012538:	4a0e      	ldr	r2, [pc, #56]	; (8012574 <__NVIC_SetPriority+0x54>)
 801253a:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801253e:	4608      	mov	r0, r1
 8012540:	011b      	lsls	r3, r3, #4
 8012542:	b2d9      	uxtb	r1, r3
 8012544:	1813      	adds	r3, r2, r0
 8012546:	460a      	mov	r2, r1
 8012548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801254c:	e00c      	b.n	8012568 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801254e:	683b      	ldr	r3, [r7, #0]
 8012550:	b2da      	uxtb	r2, r3
 8012552:	4909      	ldr	r1, [pc, #36]	; (8012578 <__NVIC_SetPriority+0x58>)
 8012554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012558:	b2db      	uxtb	r3, r3
 801255a:	f003 030f 	and.w	r3, r3, #15
 801255e:	3b04      	subs	r3, #4
 8012560:	0112      	lsls	r2, r2, #4
 8012562:	b2d2      	uxtb	r2, r2
 8012564:	440b      	add	r3, r1
 8012566:	761a      	strb	r2, [r3, #24]
}
 8012568:	bf00      	nop
 801256a:	370c      	adds	r7, #12
 801256c:	46bd      	mov	sp, r7
 801256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012572:	4770      	bx	lr
 8012574:	e000e100 	.word	0xe000e100
 8012578:	e000ed00 	.word	0xe000ed00

0801257c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 801257c:	b5b0      	push	{r4, r5, r7, lr}
 801257e:	b082      	sub	sp, #8
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	4618      	mov	r0, r3
 8012588:	f001 ff46 	bl	8014418 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 801258c:	687d      	ldr	r5, [r7, #4]
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	334c      	adds	r3, #76	; 0x4c
 8012594:	681c      	ldr	r4, [r3, #0]
 8012596:	f004 fe2b 	bl	80171f0 <_ZN8touchgfx11Application11getInstanceEv>
 801259a:	4603      	mov	r3, r0
 801259c:	4619      	mov	r1, r3
 801259e:	4628      	mov	r0, r5
 80125a0:	47a0      	blx	r4

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0xC005FA00, (void*)0);
 80125a2:	6878      	ldr	r0, [r7, #4]
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	3374      	adds	r3, #116	; 0x74
 80125aa:	681c      	ldr	r4, [r3, #0]
 80125ac:	2300      	movs	r3, #0
 80125ae:	4a06      	ldr	r2, [pc, #24]	; (80125c8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 80125b0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80125b4:	47a0      	blx	r4
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     *
     * Setting to false to increase performance when using double buffering
     */
    lockDMAToFrontPorch(false);
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	2100      	movs	r1, #0
 80125ba:	4618      	mov	r0, r3
 80125bc:	f7ff ff49 	bl	8012452 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 80125c0:	bf00      	nop
 80125c2:	3708      	adds	r7, #8
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bdb0      	pop	{r4, r5, r7, pc}
 80125c8:	c005fa00 	.word	0xc005fa00

080125cc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b082      	sub	sp, #8
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80125d4:	2109      	movs	r1, #9
 80125d6:	205a      	movs	r0, #90	; 0x5a
 80125d8:	f7ff ffa2 	bl	8012520 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80125dc:	2109      	movs	r1, #9
 80125de:	2058      	movs	r0, #88	; 0x58
 80125e0:	f7ff ff9e 	bl	8012520 <__NVIC_SetPriority>
}
 80125e4:	bf00      	nop
 80125e6:	3708      	adds	r7, #8
 80125e8:	46bd      	mov	sp, r7
 80125ea:	bd80      	pop	{r7, pc}

080125ec <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b082      	sub	sp, #8
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80125f4:	205a      	movs	r0, #90	; 0x5a
 80125f6:	f7ff ff4f 	bl	8012498 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 80125fa:	2058      	movs	r0, #88	; 0x58
 80125fc:	f7ff ff4c 	bl	8012498 <__NVIC_EnableIRQ>
}
 8012600:	bf00      	nop
 8012602:	3708      	adds	r7, #8
 8012604:	46bd      	mov	sp, r7
 8012606:	bd80      	pop	{r7, pc}

08012608 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b082      	sub	sp, #8
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8012610:	205a      	movs	r0, #90	; 0x5a
 8012612:	f7ff ff61 	bl	80124d8 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8012616:	2058      	movs	r0, #88	; 0x58
 8012618:	f7ff ff5e 	bl	80124d8 <__NVIC_DisableIRQ>
}
 801261c:	bf00      	nop
 801261e:	3708      	adds	r7, #8
 8012620:	46bd      	mov	sp, r7
 8012622:	bd80      	pop	{r7, pc}

08012624 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8012624:	b480      	push	{r7}
 8012626:	b083      	sub	sp, #12
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 801262c:	4b11      	ldr	r3, [pc, #68]	; (8012674 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801262e:	68db      	ldr	r3, [r3, #12]
 8012630:	b29b      	uxth	r3, r3
 8012632:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012636:	b29b      	uxth	r3, r3
 8012638:	3b01      	subs	r3, #1
 801263a:	b29a      	uxth	r2, r3
 801263c:	4b0e      	ldr	r3, [pc, #56]	; (8012678 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801263e:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8012640:	4b0c      	ldr	r3, [pc, #48]	; (8012674 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8012642:	691b      	ldr	r3, [r3, #16]
 8012644:	b29b      	uxth	r3, r3
 8012646:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801264a:	b29b      	uxth	r3, r3
 801264c:	3b01      	subs	r3, #1
 801264e:	b29a      	uxth	r2, r3
 8012650:	4b0a      	ldr	r3, [pc, #40]	; (801267c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8012652:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8012654:	4b08      	ldr	r3, [pc, #32]	; (8012678 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8012656:	881a      	ldrh	r2, [r3, #0]
 8012658:	4b06      	ldr	r3, [pc, #24]	; (8012674 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801265a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 801265c:	4b05      	ldr	r3, [pc, #20]	; (8012674 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801265e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012660:	4a04      	ldr	r2, [pc, #16]	; (8012674 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8012662:	f043 0301 	orr.w	r3, r3, #1
 8012666:	6353      	str	r3, [r2, #52]	; 0x34
}
 8012668:	bf00      	nop
 801266a:	370c      	adds	r7, #12
 801266c:	46bd      	mov	sp, r7
 801266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012672:	4770      	bx	lr
 8012674:	40016800 	.word	0x40016800
 8012678:	2000b19c 	.word	0x2000b19c
 801267c:	2000b19e 	.word	0x2000b19e

08012680 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8012680:	b480      	push	{r7}
 8012682:	b083      	sub	sp, #12
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8012688:	4b03      	ldr	r3, [pc, #12]	; (8012698 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 801268a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801268c:	4618      	mov	r0, r3
 801268e:	370c      	adds	r7, #12
 8012690:	46bd      	mov	sp, r7
 8012692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012696:	4770      	bx	lr
 8012698:	40016884 	.word	0x40016884

0801269c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 801269c:	b480      	push	{r7}
 801269e:	b083      	sub	sp, #12
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
 80126a4:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80126a6:	4a06      	ldr	r2, [pc, #24]	; (80126c0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80126ac:	4b05      	ldr	r3, [pc, #20]	; (80126c4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80126ae:	2201      	movs	r2, #1
 80126b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80126b2:	bf00      	nop
 80126b4:	370c      	adds	r7, #12
 80126b6:	46bd      	mov	sp, r7
 80126b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126bc:	4770      	bx	lr
 80126be:	bf00      	nop
 80126c0:	40016884 	.word	0x40016884
 80126c4:	40016800 	.word	0x40016800

080126c8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b082      	sub	sp, #8
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	6839      	ldr	r1, [r7, #0]
 80126d6:	4618      	mov	r0, r3
 80126d8:	f001 fbaf 	bl	8013e3a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80126dc:	bf00      	nop
 80126de:	3708      	adds	r7, #8
 80126e0:	46bd      	mov	sp, r7
 80126e2:	bd80      	pop	{r7, pc}

080126e4 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b082      	sub	sp, #8
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 80126ec:	4b1a      	ldr	r3, [pc, #104]	; (8012758 <HAL_LTDC_LineEventCallback+0x74>)
 80126ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126f0:	4a1a      	ldr	r2, [pc, #104]	; (801275c <HAL_LTDC_LineEventCallback+0x78>)
 80126f2:	8812      	ldrh	r2, [r2, #0]
 80126f4:	4293      	cmp	r3, r2
 80126f6:	bf0c      	ite	eq
 80126f8:	2301      	moveq	r3, #1
 80126fa:	2300      	movne	r3, #0
 80126fc:	b2db      	uxtb	r3, r3
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d017      	beq.n	8012732 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8012702:	4b17      	ldr	r3, [pc, #92]	; (8012760 <HAL_LTDC_LineEventCallback+0x7c>)
 8012704:	881b      	ldrh	r3, [r3, #0]
 8012706:	4619      	mov	r1, r3
 8012708:	6878      	ldr	r0, [r7, #4]
 801270a:	f7f2 f8e7 	bl	80048dc <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 801270e:	f7f7 fc85 	bl	800a01c <_ZN8touchgfx3HAL11getInstanceEv>
 8012712:	4603      	mov	r3, r0
 8012714:	4618      	mov	r0, r3
 8012716:	f7ff feac 	bl	8012472 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 801271a:	f7fe fd63 	bl	80111e4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 801271e:	f7f7 fc7d 	bl	800a01c <_ZN8touchgfx3HAL11getInstanceEv>
 8012722:	4603      	mov	r3, r0
 8012724:	4618      	mov	r0, r3
 8012726:	f002 f8ff 	bl	8014928 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 801272a:	2000      	movs	r0, #0
 801272c:	f7fe fa58 	bl	8010be0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8012730:	e00e      	b.n	8012750 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8012732:	4b0a      	ldr	r3, [pc, #40]	; (801275c <HAL_LTDC_LineEventCallback+0x78>)
 8012734:	881b      	ldrh	r3, [r3, #0]
 8012736:	4619      	mov	r1, r3
 8012738:	6878      	ldr	r0, [r7, #4]
 801273a:	f7f2 f8cf 	bl	80048dc <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 801273e:	2000      	movs	r0, #0
 8012740:	f7fe fa59 	bl	8010bf6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8012744:	f7f7 fc6a 	bl	800a01c <_ZN8touchgfx3HAL11getInstanceEv>
 8012748:	4603      	mov	r3, r0
 801274a:	4618      	mov	r0, r3
 801274c:	f7ff fe73 	bl	8012436 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8012750:	bf00      	nop
 8012752:	3708      	adds	r7, #8
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}
 8012758:	40016800 	.word	0x40016800
 801275c:	2000b19c 	.word	0x2000b19c
 8012760:	2000b19e 	.word	0x2000b19e

08012764 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8012764:	8880      	ldrh	r0, [r0, #4]
 8012766:	4770      	bx	lr

08012768 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8012768:	2300      	movs	r3, #0
 801276a:	8083      	strh	r3, [r0, #4]
 801276c:	4770      	bx	lr
	...

08012770 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8012770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012772:	6803      	ldr	r3, [r0, #0]
 8012774:	460e      	mov	r6, r1
 8012776:	2100      	movs	r1, #0
 8012778:	4605      	mov	r5, r0
 801277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801277c:	4798      	blx	r3
 801277e:	4604      	mov	r4, r0
 8012780:	682b      	ldr	r3, [r5, #0]
 8012782:	4628      	mov	r0, r5
 8012784:	1b34      	subs	r4, r6, r4
 8012786:	6a1b      	ldr	r3, [r3, #32]
 8012788:	b2a4      	uxth	r4, r4
 801278a:	4798      	blx	r3
 801278c:	88ab      	ldrh	r3, [r5, #4]
 801278e:	fbb4 f4f0 	udiv	r4, r4, r0
 8012792:	42a3      	cmp	r3, r4
 8012794:	d805      	bhi.n	80127a2 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8012796:	4b0e      	ldr	r3, [pc, #56]	; (80127d0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8012798:	211e      	movs	r1, #30
 801279a:	4a0e      	ldr	r2, [pc, #56]	; (80127d4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801279c:	480e      	ldr	r0, [pc, #56]	; (80127d8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801279e:	f010 fc81 	bl	80230a4 <__assert_func>
 80127a2:	682b      	ldr	r3, [r5, #0]
 80127a4:	2100      	movs	r1, #0
 80127a6:	4628      	mov	r0, r5
 80127a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127aa:	4798      	blx	r3
 80127ac:	682b      	ldr	r3, [r5, #0]
 80127ae:	4607      	mov	r7, r0
 80127b0:	4628      	mov	r0, r5
 80127b2:	6a1b      	ldr	r3, [r3, #32]
 80127b4:	4798      	blx	r3
 80127b6:	1bf3      	subs	r3, r6, r7
 80127b8:	b29b      	uxth	r3, r3
 80127ba:	fbb3 f2f0 	udiv	r2, r3, r0
 80127be:	fb02 3010 	mls	r0, r2, r0, r3
 80127c2:	b118      	cbz	r0, 80127cc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 80127c4:	4b05      	ldr	r3, [pc, #20]	; (80127dc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 80127c6:	211f      	movs	r1, #31
 80127c8:	4a02      	ldr	r2, [pc, #8]	; (80127d4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80127ca:	e7e7      	b.n	801279c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 80127cc:	4620      	mov	r0, r4
 80127ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127d0:	08026694 	.word	0x08026694
 80127d4:	08026802 	.word	0x08026802
 80127d8:	080266a9 	.word	0x080266a9
 80127dc:	080266d7 	.word	0x080266d7

080127e0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80127e0:	b538      	push	{r3, r4, r5, lr}
 80127e2:	6803      	ldr	r3, [r0, #0]
 80127e4:	460d      	mov	r5, r1
 80127e6:	4604      	mov	r4, r0
 80127e8:	6a1b      	ldr	r3, [r3, #32]
 80127ea:	4798      	blx	r3
 80127ec:	4285      	cmp	r5, r0
 80127ee:	d905      	bls.n	80127fc <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 80127f0:	4b0c      	ldr	r3, [pc, #48]	; (8012824 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 80127f2:	212f      	movs	r1, #47	; 0x2f
 80127f4:	4a0c      	ldr	r2, [pc, #48]	; (8012828 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80127f6:	480d      	ldr	r0, [pc, #52]	; (801282c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 80127f8:	f010 fc54 	bl	80230a4 <__assert_func>
 80127fc:	6823      	ldr	r3, [r4, #0]
 80127fe:	4620      	mov	r0, r4
 8012800:	88a5      	ldrh	r5, [r4, #4]
 8012802:	69db      	ldr	r3, [r3, #28]
 8012804:	4798      	blx	r3
 8012806:	4285      	cmp	r5, r0
 8012808:	d303      	bcc.n	8012812 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801280a:	4b09      	ldr	r3, [pc, #36]	; (8012830 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801280c:	2130      	movs	r1, #48	; 0x30
 801280e:	4a06      	ldr	r2, [pc, #24]	; (8012828 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8012810:	e7f1      	b.n	80127f6 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8012812:	6823      	ldr	r3, [r4, #0]
 8012814:	4620      	mov	r0, r4
 8012816:	88a1      	ldrh	r1, [r4, #4]
 8012818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801281a:	4798      	blx	r3
 801281c:	88a3      	ldrh	r3, [r4, #4]
 801281e:	3301      	adds	r3, #1
 8012820:	80a3      	strh	r3, [r4, #4]
 8012822:	bd38      	pop	{r3, r4, r5, pc}
 8012824:	08026751 	.word	0x08026751
 8012828:	08026845 	.word	0x08026845
 801282c:	080266a9 	.word	0x080266a9
 8012830:	08026768 	.word	0x08026768

08012834 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8012834:	b570      	push	{r4, r5, r6, lr}
 8012836:	6803      	ldr	r3, [r0, #0]
 8012838:	4616      	mov	r6, r2
 801283a:	4604      	mov	r4, r0
 801283c:	460d      	mov	r5, r1
 801283e:	6a1b      	ldr	r3, [r3, #32]
 8012840:	4798      	blx	r3
 8012842:	4286      	cmp	r6, r0
 8012844:	d905      	bls.n	8012852 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8012846:	4b06      	ldr	r3, [pc, #24]	; (8012860 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8012848:	2139      	movs	r1, #57	; 0x39
 801284a:	4a06      	ldr	r2, [pc, #24]	; (8012864 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801284c:	4806      	ldr	r0, [pc, #24]	; (8012868 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801284e:	f010 fc29 	bl	80230a4 <__assert_func>
 8012852:	6823      	ldr	r3, [r4, #0]
 8012854:	4629      	mov	r1, r5
 8012856:	4620      	mov	r0, r4
 8012858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801285a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801285e:	4718      	bx	r3
 8012860:	08026751 	.word	0x08026751
 8012864:	080267b8 	.word	0x080267b8
 8012868:	080266a9 	.word	0x080266a9

0801286c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801286c:	4770      	bx	lr
	...

08012870 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8012870:	4a02      	ldr	r2, [pc, #8]	; (801287c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8012872:	6002      	str	r2, [r0, #0]
 8012874:	2200      	movs	r2, #0
 8012876:	8082      	strh	r2, [r0, #4]
 8012878:	4770      	bx	lr
 801287a:	bf00      	nop
 801287c:	0802678c 	.word	0x0802678c

08012880 <_ZN8touchgfx12DrawableListD1Ev>:
 8012880:	4770      	bx	lr

08012882 <_ZNK8touchgfx12DrawableList13getHorizontalEv>:
 8012882:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8012886:	4770      	bx	lr

08012888 <_ZNK8touchgfx12DrawableList11getCircularEv>:
 8012888:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 801288c:	4770      	bx	lr

0801288e <_ZNK8touchgfx12DrawableList11getItemSizeEv>:
 801288e:	f9b0 0034 	ldrsh.w	r0, [r0, #52]	; 0x34
 8012892:	4770      	bx	lr

08012894 <_ZNK8touchgfx12DrawableList15getDrawableSizeEv>:
 8012894:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8012896:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8012898:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 801289c:	b200      	sxth	r0, r0
 801289e:	4770      	bx	lr

080128a0 <_ZNK8touchgfx12DrawableList17getDrawableMarginEv>:
 80128a0:	f9b0 0036 	ldrsh.w	r0, [r0, #54]	; 0x36
 80128a4:	4770      	bx	lr

080128a6 <_ZN8touchgfx12DrawableListD0Ev>:
 80128a6:	b510      	push	{r4, lr}
 80128a8:	4604      	mov	r4, r0
 80128aa:	214c      	movs	r1, #76	; 0x4c
 80128ac:	f010 fbcf 	bl	802304e <_ZdlPvj>
 80128b0:	4620      	mov	r0, r4
 80128b2:	bd10      	pop	{r4, pc}

080128b4 <_ZN8touchgfx12DrawableListC1Ev>:
 80128b4:	2101      	movs	r1, #1
 80128b6:	2200      	movs	r2, #0
 80128b8:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80128bc:	490f      	ldr	r1, [pc, #60]	; (80128fc <_ZN8touchgfx12DrawableListC1Ev+0x48>)
 80128be:	8082      	strh	r2, [r0, #4]
 80128c0:	80c2      	strh	r2, [r0, #6]
 80128c2:	8102      	strh	r2, [r0, #8]
 80128c4:	8142      	strh	r2, [r0, #10]
 80128c6:	8182      	strh	r2, [r0, #12]
 80128c8:	81c2      	strh	r2, [r0, #14]
 80128ca:	8202      	strh	r2, [r0, #16]
 80128cc:	8242      	strh	r2, [r0, #18]
 80128ce:	61c2      	str	r2, [r0, #28]
 80128d0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80128d4:	6282      	str	r2, [r0, #40]	; 0x28
 80128d6:	6001      	str	r1, [r0, #0]
 80128d8:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 80128dc:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
 80128e0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 80128e4:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
 80128e8:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80128ec:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 80128f0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 80128f4:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
 80128f8:	4770      	bx	lr
 80128fa:	bf00      	nop
 80128fc:	0802688c 	.word	0x0802688c

08012900 <_ZN8touchgfx12DrawableList15setDrawableSizeEss>:
 8012900:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8012904:	86c2      	strh	r2, [r0, #54]	; 0x36
 8012906:	8681      	strh	r1, [r0, #52]	; 0x34
 8012908:	4770      	bx	lr

0801290a <_ZNK8touchgfx12DrawableList16getNumberOfItemsEv>:
 801290a:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 801290e:	4770      	bx	lr

08012910 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv>:
 8012910:	b538      	push	{r3, r4, r5, lr}
 8012912:	4605      	mov	r5, r0
 8012914:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8012916:	b308      	cbz	r0, 801295c <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x4c>
 8012918:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 801291c:	2a00      	cmp	r2, #0
 801291e:	dd21      	ble.n	8012964 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x54>
 8012920:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8012924:	b1db      	cbz	r3, 801295e <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x4e>
 8012926:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 801292a:	1e63      	subs	r3, r4, #1
 801292c:	1e54      	subs	r4, r2, #1
 801292e:	441c      	add	r4, r3
 8012930:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8012934:	fb94 f4f2 	sdiv	r4, r4, r2
 8012938:	3401      	adds	r4, #1
 801293a:	b224      	sxth	r4, r4
 801293c:	b923      	cbnz	r3, 8012948 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x38>
 801293e:	f9b5 3038 	ldrsh.w	r3, [r5, #56]	; 0x38
 8012942:	429c      	cmp	r4, r3
 8012944:	bfa8      	it	ge
 8012946:	461c      	movge	r4, r3
 8012948:	6803      	ldr	r3, [r0, #0]
 801294a:	68db      	ldr	r3, [r3, #12]
 801294c:	4798      	blx	r3
 801294e:	f9b5 3042 	ldrsh.w	r3, [r5, #66]	; 0x42
 8012952:	1ac0      	subs	r0, r0, r3
 8012954:	42a0      	cmp	r0, r4
 8012956:	bfa8      	it	ge
 8012958:	4620      	movge	r0, r4
 801295a:	b200      	sxth	r0, r0
 801295c:	bd38      	pop	{r3, r4, r5, pc}
 801295e:	f9b5 400a 	ldrsh.w	r4, [r5, #10]
 8012962:	e7e2      	b.n	801292a <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x1a>
 8012964:	2000      	movs	r0, #0
 8012966:	e7f9      	b.n	801295c <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x4c>

08012968 <_ZN8touchgfx12DrawableList9setOffsetEl>:
 8012968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801296c:	4604      	mov	r4, r0
 801296e:	460d      	mov	r5, r1
 8012970:	6321      	str	r1, [r4, #48]	; 0x30
 8012972:	f9b0 303a 	ldrsh.w	r3, [r0, #58]	; 0x3a
 8012976:	2b00      	cmp	r3, #0
 8012978:	f000 80ec 	beq.w	8012b54 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ec>
 801297c:	f9b0 3038 	ldrsh.w	r3, [r0, #56]	; 0x38
 8012980:	2b00      	cmp	r3, #0
 8012982:	f000 80e7 	beq.w	8012b54 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ec>
 8012986:	f9b0 3034 	ldrsh.w	r3, [r0, #52]	; 0x34
 801298a:	2b00      	cmp	r3, #0
 801298c:	f000 80e2 	beq.w	8012b54 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ec>
 8012990:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8012992:	2800      	cmp	r0, #0
 8012994:	f000 80de 	beq.w	8012b54 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ec>
 8012998:	6803      	ldr	r3, [r0, #0]
 801299a:	68db      	ldr	r3, [r3, #12]
 801299c:	4798      	blx	r3
 801299e:	2800      	cmp	r0, #0
 80129a0:	f000 80d8 	beq.w	8012b54 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ec>
 80129a4:	2d00      	cmp	r5, #0
 80129a6:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 80129aa:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 80129ae:	bfd8      	it	le
 80129b0:	2300      	movle	r3, #0
 80129b2:	f9b4 003a 	ldrsh.w	r0, [r4, #58]	; 0x3a
 80129b6:	bfc1      	itttt	gt
 80129b8:	fb95 f2f1 	sdivgt	r2, r5, r1
 80129bc:	3201      	addgt	r2, #1
 80129be:	4253      	neggt	r3, r2
 80129c0:	fb01 5512 	mlsgt	r5, r1, r2, r5
 80129c4:	f1c1 0200 	rsb	r2, r1, #0
 80129c8:	bfc8      	it	gt
 80129ca:	b21b      	sxthgt	r3, r3
 80129cc:	42aa      	cmp	r2, r5
 80129ce:	bfa1      	itttt	ge
 80129d0:	fb95 f2f1 	sdivge	r2, r5, r1
 80129d4:	1a9b      	subge	r3, r3, r2
 80129d6:	fb01 5512 	mlsge	r5, r1, r2, r5
 80129da:	b21b      	sxthge	r3, r3
 80129dc:	b167      	cbz	r7, 80129f8 <_ZN8touchgfx12DrawableList9setOffsetEl+0x90>
 80129de:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 80129e2:	fb93 f2f1 	sdiv	r2, r3, r1
 80129e6:	fb01 3312 	mls	r3, r1, r2, r3
 80129ea:	440b      	add	r3, r1
 80129ec:	fb93 f2f1 	sdiv	r2, r3, r1
 80129f0:	fb01 3312 	mls	r3, r1, r2, r3
 80129f4:	b21b      	sxth	r3, r3
 80129f6:	e004      	b.n	8012a02 <_ZN8touchgfx12DrawableList9setOffsetEl+0x9a>
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	da64      	bge.n	8012ac6 <_ZN8touchgfx12DrawableList9setOffsetEl+0x15e>
 80129fc:	fb01 5513 	mls	r5, r1, r3, r5
 8012a00:	463b      	mov	r3, r7
 8012a02:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
 8012a06:	b1be      	cbz	r6, 8012a38 <_ZN8touchgfx12DrawableList9setOffsetEl+0xd0>
 8012a08:	f9b4 e03c 	ldrsh.w	lr, [r4, #60]	; 0x3c
 8012a0c:	459e      	cmp	lr, r3
 8012a0e:	d068      	beq.n	8012ae2 <_ZN8touchgfx12DrawableList9setOffsetEl+0x17a>
 8012a10:	2601      	movs	r6, #1
 8012a12:	4286      	cmp	r6, r0
 8012a14:	da67      	bge.n	8012ae6 <_ZN8touchgfx12DrawableList9setOffsetEl+0x17e>
 8012a16:	eb0e 0106 	add.w	r1, lr, r6
 8012a1a:	199a      	adds	r2, r3, r6
 8012a1c:	b14f      	cbz	r7, 8012a32 <_ZN8touchgfx12DrawableList9setOffsetEl+0xca>
 8012a1e:	f9b4 c038 	ldrsh.w	ip, [r4, #56]	; 0x38
 8012a22:	fb91 f8fc 	sdiv	r8, r1, ip
 8012a26:	fb0c 1118 	mls	r1, ip, r8, r1
 8012a2a:	fb92 f8fc 	sdiv	r8, r2, ip
 8012a2e:	fb0c 2218 	mls	r2, ip, r8, r2
 8012a32:	428b      	cmp	r3, r1
 8012a34:	d151      	bne.n	8012ada <_ZN8touchgfx12DrawableList9setOffsetEl+0x172>
 8012a36:	4276      	negs	r6, r6
 8012a38:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 8012a3c:	2700      	movs	r7, #0
 8012a3e:	b2ad      	uxth	r5, r5
 8012a40:	f04f 0b01 	mov.w	fp, #1
 8012a44:	1b92      	subs	r2, r2, r6
 8012a46:	46ba      	mov	sl, r7
 8012a48:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8012a4a:	4402      	add	r2, r0
 8012a4c:	fb92 f1f0 	sdiv	r1, r2, r0
 8012a50:	fb00 2011 	mls	r0, r0, r1, r2
 8012a54:	87e0      	strh	r0, [r4, #62]	; 0x3e
 8012a56:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	; 0x3a
 8012a5a:	42ba      	cmp	r2, r7
 8012a5c:	dd77      	ble.n	8012b4e <_ZN8touchgfx12DrawableList9setOffsetEl+0x1e6>
 8012a5e:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8012a62:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8012a64:	443b      	add	r3, r7
 8012a66:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 8012a6a:	fb93 f8f2 	sdiv	r8, r3, r2
 8012a6e:	fb02 3818 	mls	r8, r2, r8, r3
 8012a72:	6803      	ldr	r3, [r0, #0]
 8012a74:	fa1f f888 	uxth.w	r8, r8
 8012a78:	689b      	ldr	r3, [r3, #8]
 8012a7a:	4441      	add	r1, r8
 8012a7c:	b209      	sxth	r1, r1
 8012a7e:	4798      	blx	r3
 8012a80:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012a84:	4681      	mov	r9, r0
 8012a86:	fa1f fe87 	uxth.w	lr, r7
 8012a8a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8012a8c:	f8b4 c034 	ldrh.w	ip, [r4, #52]	; 0x34
 8012a90:	6802      	ldr	r2, [r0, #0]
 8012a92:	b351      	cbz	r1, 8012aea <_ZN8touchgfx12DrawableList9setOffsetEl+0x182>
 8012a94:	18e9      	adds	r1, r5, r3
 8012a96:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8012a98:	2200      	movs	r2, #0
 8012a9a:	fb1c 110e 	smlabb	r1, ip, lr, r1
 8012a9e:	b209      	sxth	r1, r1
 8012aa0:	4798      	blx	r3
 8012aa2:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
 8012aa6:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8012aaa:	443b      	add	r3, r7
 8012aac:	b322      	cbz	r2, 8012af8 <_ZN8touchgfx12DrawableList9setOffsetEl+0x190>
 8012aae:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	; 0x38
 8012ab2:	fb93 f1f2 	sdiv	r1, r3, r2
 8012ab6:	fb02 3311 	mls	r3, r2, r1, r3
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	da22      	bge.n	8012b04 <_ZN8touchgfx12DrawableList9setOffsetEl+0x19c>
 8012abe:	f889 a025 	strb.w	sl, [r9, #37]	; 0x25
 8012ac2:	3701      	adds	r7, #1
 8012ac4:	e7c7      	b.n	8012a56 <_ZN8touchgfx12DrawableList9setOffsetEl+0xee>
 8012ac6:	18c6      	adds	r6, r0, r3
 8012ac8:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	; 0x38
 8012acc:	4296      	cmp	r6, r2
 8012ace:	dd98      	ble.n	8012a02 <_ZN8touchgfx12DrawableList9setOffsetEl+0x9a>
 8012ad0:	1b92      	subs	r2, r2, r6
 8012ad2:	fb01 5502 	mla	r5, r1, r2, r5
 8012ad6:	4413      	add	r3, r2
 8012ad8:	e78c      	b.n	80129f4 <_ZN8touchgfx12DrawableList9setOffsetEl+0x8c>
 8012ada:	4596      	cmp	lr, r2
 8012adc:	d0ac      	beq.n	8012a38 <_ZN8touchgfx12DrawableList9setOffsetEl+0xd0>
 8012ade:	3601      	adds	r6, #1
 8012ae0:	e797      	b.n	8012a12 <_ZN8touchgfx12DrawableList9setOffsetEl+0xaa>
 8012ae2:	2600      	movs	r6, #0
 8012ae4:	e7a8      	b.n	8012a38 <_ZN8touchgfx12DrawableList9setOffsetEl+0xd0>
 8012ae6:	4606      	mov	r6, r0
 8012ae8:	e7a6      	b.n	8012a38 <_ZN8touchgfx12DrawableList9setOffsetEl+0xd0>
 8012aea:	442b      	add	r3, r5
 8012aec:	fb1c 3c0e 	smlabb	ip, ip, lr, r3
 8012af0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8012af2:	fa0f f28c 	sxth.w	r2, ip
 8012af6:	e7d3      	b.n	8012aa0 <_ZN8touchgfx12DrawableList9setOffsetEl+0x138>
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	dbe0      	blt.n	8012abe <_ZN8touchgfx12DrawableList9setOffsetEl+0x156>
 8012afc:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	; 0x38
 8012b00:	4293      	cmp	r3, r2
 8012b02:	dadc      	bge.n	8012abe <_ZN8touchgfx12DrawableList9setOffsetEl+0x156>
 8012b04:	f889 b025 	strb.w	fp, [r9, #37]	; 0x25
 8012b08:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8012b0c:	b132      	cbz	r2, 8012b1c <_ZN8touchgfx12DrawableList9setOffsetEl+0x1b4>
 8012b0e:	42be      	cmp	r6, r7
 8012b10:	dc04      	bgt.n	8012b1c <_ZN8touchgfx12DrawableList9setOffsetEl+0x1b4>
 8012b12:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	; 0x3a
 8012b16:	4432      	add	r2, r6
 8012b18:	4297      	cmp	r7, r2
 8012b1a:	dbd2      	blt.n	8012ac2 <_ZN8touchgfx12DrawableList9setOffsetEl+0x15a>
 8012b1c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8012b1e:	9301      	str	r3, [sp, #4]
 8012b20:	6802      	ldr	r2, [r0, #0]
 8012b22:	68d2      	ldr	r2, [r2, #12]
 8012b24:	4790      	blx	r2
 8012b26:	2800      	cmp	r0, #0
 8012b28:	d0cb      	beq.n	8012ac2 <_ZN8touchgfx12DrawableList9setOffsetEl+0x15a>
 8012b2a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8012b2c:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8012b30:	6801      	ldr	r1, [r0, #0]
 8012b32:	9b01      	ldr	r3, [sp, #4]
 8012b34:	4442      	add	r2, r8
 8012b36:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8012b3a:	b21b      	sxth	r3, r3
 8012b3c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012b3e:	b212      	sxth	r2, r2
 8012b40:	47c0      	blx	r8
 8012b42:	f8d9 3000 	ldr.w	r3, [r9]
 8012b46:	4648      	mov	r0, r9
 8012b48:	695b      	ldr	r3, [r3, #20]
 8012b4a:	4798      	blx	r3
 8012b4c:	e7b9      	b.n	8012ac2 <_ZN8touchgfx12DrawableList9setOffsetEl+0x15a>
 8012b4e:	2301      	movs	r3, #1
 8012b50:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8012b54:	b003      	add	sp, #12
 8012b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012b5a <_ZNK8touchgfx12DrawableList9getOffsetEv>:
 8012b5a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8012b5c:	4770      	bx	lr

08012b5e <_ZNK8touchgfx12DrawableList16getDrawableIndexEss>:
 8012b5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b60:	1c54      	adds	r4, r2, #1
 8012b62:	db2f      	blt.n	8012bc4 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 8012b64:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
 8012b68:	4294      	cmp	r4, r2
 8012b6a:	dd2b      	ble.n	8012bc4 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 8012b6c:	b354      	cbz	r4, 8012bc4 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 8012b6e:	f9b0 6038 	ldrsh.w	r6, [r0, #56]	; 0x38
 8012b72:	b33e      	cbz	r6, 8012bc4 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 8012b74:	1c53      	adds	r3, r2, #1
 8012b76:	d008      	beq.n	8012b8a <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x2c>
 8012b78:	f9b0 303e 	ldrsh.w	r3, [r0, #62]	; 0x3e
 8012b7c:	1ad2      	subs	r2, r2, r3
 8012b7e:	4422      	add	r2, r4
 8012b80:	fb92 f3f4 	sdiv	r3, r2, r4
 8012b84:	fb04 2213 	mls	r2, r4, r3, r2
 8012b88:	b212      	sxth	r2, r2
 8012b8a:	3201      	adds	r2, #1
 8012b8c:	b212      	sxth	r2, r2
 8012b8e:	4294      	cmp	r4, r2
 8012b90:	dd18      	ble.n	8012bc4 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 8012b92:	b295      	uxth	r5, r2
 8012b94:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8012b96:	f890 702d 	ldrb.w	r7, [r0, #45]	; 0x2d
 8012b9a:	442b      	add	r3, r5
 8012b9c:	b21b      	sxth	r3, r3
 8012b9e:	b127      	cbz	r7, 8012baa <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x4c>
 8012ba0:	fb93 f7f6 	sdiv	r7, r3, r6
 8012ba4:	fb06 3317 	mls	r3, r6, r7, r3
 8012ba8:	b21b      	sxth	r3, r3
 8012baa:	428b      	cmp	r3, r1
 8012bac:	d108      	bne.n	8012bc0 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x62>
 8012bae:	f9b0 003e 	ldrsh.w	r0, [r0, #62]	; 0x3e
 8012bb2:	4402      	add	r2, r0
 8012bb4:	fb92 f0f4 	sdiv	r0, r2, r4
 8012bb8:	fb04 2010 	mls	r0, r4, r0, r2
 8012bbc:	b200      	sxth	r0, r0
 8012bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012bc0:	1c6a      	adds	r2, r5, #1
 8012bc2:	e7e3      	b.n	8012b8c <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x2e>
 8012bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8012bc8:	e7f9      	b.n	8012bbe <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x60>

08012bca <_ZN8touchgfx12DrawableList16refreshDrawablesEv>:
 8012bca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012bcc:	2500      	movs	r5, #0
 8012bce:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8012bd0:	4604      	mov	r4, r0
 8012bd2:	8745      	strh	r5, [r0, #58]	; 0x3a
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d03c      	beq.n	8012c52 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x88>
 8012bd8:	f7ff fe9a 	bl	8012910 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv>
 8012bdc:	8760      	strh	r0, [r4, #58]	; 0x3a
 8012bde:	4620      	mov	r0, r4
 8012be0:	f000 fc7a 	bl	80134d8 <_ZN8touchgfx9Container9removeAllEv>
 8012be4:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	; 0x3a
 8012be8:	42ab      	cmp	r3, r5
 8012bea:	dd27      	ble.n	8012c3c <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x72>
 8012bec:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8012bee:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 8012bf2:	6803      	ldr	r3, [r0, #0]
 8012bf4:	4429      	add	r1, r5
 8012bf6:	689b      	ldr	r3, [r3, #8]
 8012bf8:	b209      	sxth	r1, r1
 8012bfa:	4798      	blx	r3
 8012bfc:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8012c00:	4606      	mov	r6, r0
 8012c02:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 8012c06:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8012c08:	6807      	ldr	r7, [r0, #0]
 8012c0a:	b17a      	cbz	r2, 8012c2c <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x62>
 8012c0c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012c10:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
 8012c14:	2200      	movs	r2, #0
 8012c16:	9300      	str	r3, [sp, #0]
 8012c18:	b20b      	sxth	r3, r1
 8012c1a:	6abf      	ldr	r7, [r7, #40]	; 0x28
 8012c1c:	4611      	mov	r1, r2
 8012c1e:	3501      	adds	r5, #1
 8012c20:	47b8      	blx	r7
 8012c22:	4631      	mov	r1, r6
 8012c24:	4620      	mov	r0, r4
 8012c26:	f000 fce5 	bl	80135f4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012c2a:	e7db      	b.n	8012be4 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x1a>
 8012c2c:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
 8012c30:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8012c34:	b209      	sxth	r1, r1
 8012c36:	9100      	str	r1, [sp, #0]
 8012c38:	6abf      	ldr	r7, [r7, #40]	; 0x28
 8012c3a:	e7ef      	b.n	8012c1c <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x52>
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012c40:	4620      	mov	r0, r4
 8012c42:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8012c46:	63e3      	str	r3, [r4, #60]	; 0x3c
 8012c48:	b003      	add	sp, #12
 8012c4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012c4e:	f7ff be8b 	b.w	8012968 <_ZN8touchgfx12DrawableList9setOffsetEl>
 8012c52:	b003      	add	sp, #12
 8012c54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012c56 <_ZN8touchgfx12DrawableList8setWidthEs>:
 8012c56:	8101      	strh	r1, [r0, #8]
 8012c58:	f7ff bfb7 	b.w	8012bca <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

08012c5c <_ZN8touchgfx12DrawableList9setHeightEs>:
 8012c5c:	8141      	strh	r1, [r0, #10]
 8012c5e:	f7ff bfb4 	b.w	8012bca <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

08012c62 <_ZN8touchgfx12DrawableList13setHorizontalEb>:
 8012c62:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8012c66:	b121      	cbz	r1, 8012c72 <_ZN8touchgfx12DrawableList13setHorizontalEb+0x10>
 8012c68:	b92b      	cbnz	r3, 8012c76 <_ZN8touchgfx12DrawableList13setHorizontalEb+0x14>
 8012c6a:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 8012c6e:	f7ff bfac 	b.w	8012bca <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d1f9      	bne.n	8012c6a <_ZN8touchgfx12DrawableList13setHorizontalEb+0x8>
 8012c76:	4770      	bx	lr

08012c78 <_ZN8touchgfx12DrawableList11setCircularEb>:
 8012c78:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8012c7c:	b121      	cbz	r1, 8012c88 <_ZN8touchgfx12DrawableList11setCircularEb+0x10>
 8012c7e:	b92b      	cbnz	r3, 8012c8c <_ZN8touchgfx12DrawableList11setCircularEb+0x14>
 8012c80:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
 8012c84:	f7ff bfa1 	b.w	8012bca <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d1f9      	bne.n	8012c80 <_ZN8touchgfx12DrawableList11setCircularEb+0x8>
 8012c8c:	4770      	bx	lr

08012c8e <_ZN8touchgfx12DrawableList12setDrawablesERNS_26DrawableListItemsInterfaceEsRNS_15GenericCallbackIPS1_ssEE>:
 8012c8e:	b410      	push	{r4}
 8012c90:	6441      	str	r1, [r0, #68]	; 0x44
 8012c92:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
 8012c96:	6483      	str	r3, [r0, #72]	; 0x48
 8012c98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c9c:	f7ff bf95 	b.w	8012bca <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

08012ca0 <_ZN8touchgfx12DrawableList16setNumberOfItemsEs>:
 8012ca0:	8701      	strh	r1, [r0, #56]	; 0x38
 8012ca2:	f7ff bf92 	b.w	8012bca <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

08012ca6 <_ZN8touchgfx12DrawableList11itemChangedEs>:
 8012ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ca8:	4604      	mov	r4, r0
 8012caa:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8012cac:	460e      	mov	r6, r1
 8012cae:	b1c0      	cbz	r0, 8012ce2 <_ZN8touchgfx12DrawableList11itemChangedEs+0x3c>
 8012cb0:	6803      	ldr	r3, [r0, #0]
 8012cb2:	68db      	ldr	r3, [r3, #12]
 8012cb4:	4798      	blx	r3
 8012cb6:	b1a0      	cbz	r0, 8012ce2 <_ZN8touchgfx12DrawableList11itemChangedEs+0x3c>
 8012cb8:	f04f 35ff 	mov.w	r5, #4294967295
 8012cbc:	462a      	mov	r2, r5
 8012cbe:	4631      	mov	r1, r6
 8012cc0:	4620      	mov	r0, r4
 8012cc2:	f7ff ff4c 	bl	8012b5e <_ZNK8touchgfx12DrawableList16getDrawableIndexEss>
 8012cc6:	1c43      	adds	r3, r0, #1
 8012cc8:	4605      	mov	r5, r0
 8012cca:	d00a      	beq.n	8012ce2 <_ZN8touchgfx12DrawableList11itemChangedEs+0x3c>
 8012ccc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8012cce:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8012cd2:	6803      	ldr	r3, [r0, #0]
 8012cd4:	442a      	add	r2, r5
 8012cd6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012cd8:	689f      	ldr	r7, [r3, #8]
 8012cda:	4633      	mov	r3, r6
 8012cdc:	b212      	sxth	r2, r2
 8012cde:	47b8      	blx	r7
 8012ce0:	e7ec      	b.n	8012cbc <_ZN8touchgfx12DrawableList11itemChangedEs+0x16>
 8012ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012ce4 <_ZN8touchgfx15ScrollWheelBaseD1Ev>:
 8012ce4:	4770      	bx	lr

08012ce6 <_ZN8touchgfx15ScrollWheelBase21setSelectedItemOffsetEs>:
 8012ce6:	b570      	push	{r4, r5, r6, lr}
 8012ce8:	6803      	ldr	r3, [r0, #0]
 8012cea:	4604      	mov	r4, r0
 8012cec:	460d      	mov	r5, r1
 8012cee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012cf2:	4798      	blx	r3
 8012cf4:	6823      	ldr	r3, [r4, #0]
 8012cf6:	f8a4 507a 	strh.w	r5, [r4, #122]	; 0x7a
 8012cfa:	4601      	mov	r1, r0
 8012cfc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012d00:	4620      	mov	r0, r4
 8012d02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d06:	4718      	bx	r3

08012d08 <_ZNK8touchgfx15ScrollWheelBase21getSelectedItemOffsetEv>:
 8012d08:	f9b0 007a 	ldrsh.w	r0, [r0, #122]	; 0x7a
 8012d0c:	4770      	bx	lr

08012d0e <_ZN8touchgfx15ScrollWheelBase18getPositionForItemEs>:
 8012d0e:	b570      	push	{r4, r5, r6, lr}
 8012d10:	6803      	ldr	r3, [r0, #0]
 8012d12:	4249      	negs	r1, r1
 8012d14:	f9b0 407c 	ldrsh.w	r4, [r0, #124]	; 0x7c
 8012d18:	4605      	mov	r5, r0
 8012d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012d1e:	434c      	muls	r4, r1
 8012d20:	4798      	blx	r3
 8012d22:	b1c0      	cbz	r0, 8012d56 <_ZN8touchgfx15ScrollWheelBase18getPositionForItemEs+0x48>
 8012d24:	682b      	ldr	r3, [r5, #0]
 8012d26:	4628      	mov	r0, r5
 8012d28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012d2c:	4798      	blx	r3
 8012d2e:	f8b5 607c 	ldrh.w	r6, [r5, #124]	; 0x7c
 8012d32:	682b      	ldr	r3, [r5, #0]
 8012d34:	fb10 4606 	smlabb	r6, r0, r6, r4
 8012d38:	4628      	mov	r0, r5
 8012d3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012d3e:	4798      	blx	r3
 8012d40:	1a23      	subs	r3, r4, r0
 8012d42:	1a30      	subs	r0, r6, r0
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	bfb8      	it	lt
 8012d48:	425b      	neglt	r3, r3
 8012d4a:	2800      	cmp	r0, #0
 8012d4c:	bfb8      	it	lt
 8012d4e:	4240      	neglt	r0, r0
 8012d50:	4283      	cmp	r3, r0
 8012d52:	bfc8      	it	gt
 8012d54:	4634      	movgt	r4, r6
 8012d56:	4620      	mov	r0, r4
 8012d58:	bd70      	pop	{r4, r5, r6, pc}

08012d5a <_ZNK8touchgfx15ScrollWheelBase22keepOffsetInsideLimitsEls>:
 8012d5a:	b570      	push	{r4, r5, r6, lr}
 8012d5c:	6803      	ldr	r3, [r0, #0]
 8012d5e:	428a      	cmp	r2, r1
 8012d60:	4605      	mov	r5, r0
 8012d62:	4616      	mov	r6, r2
 8012d64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012d68:	4614      	mov	r4, r2
 8012d6a:	bfa8      	it	ge
 8012d6c:	460e      	movge	r6, r1
 8012d6e:	4798      	blx	r3
 8012d70:	f9b5 207c 	ldrsh.w	r2, [r5, #124]	; 0x7c
 8012d74:	f1c0 0001 	rsb	r0, r0, #1
 8012d78:	4350      	muls	r0, r2
 8012d7a:	1b00      	subs	r0, r0, r4
 8012d7c:	42b0      	cmp	r0, r6
 8012d7e:	bfb8      	it	lt
 8012d80:	4630      	movlt	r0, r6
 8012d82:	bd70      	pop	{r4, r5, r6, pc}

08012d84 <_ZN8touchgfx15ScrollWheelBase15handleDragEventERKNS_9DragEventE>:
 8012d84:	2302      	movs	r3, #2
 8012d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d8a:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
 8012d8e:	4605      	mov	r5, r0
 8012d90:	6803      	ldr	r3, [r0, #0]
 8012d92:	460e      	mov	r6, r1
 8012d94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012d98:	4798      	blx	r3
 8012d9a:	682b      	ldr	r3, [r5, #0]
 8012d9c:	4607      	mov	r7, r0
 8012d9e:	4628      	mov	r0, r5
 8012da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012da4:	4798      	blx	r3
 8012da6:	b3a0      	cbz	r0, 8012e12 <_ZN8touchgfx15ScrollWheelBase15handleDragEventERKNS_9DragEventE+0x8e>
 8012da8:	8973      	ldrh	r3, [r6, #10]
 8012daa:	88f4      	ldrh	r4, [r6, #6]
 8012dac:	1b1b      	subs	r3, r3, r4
 8012dae:	f8b5 4080 	ldrh.w	r4, [r5, #128]	; 0x80
 8012db2:	4628      	mov	r0, r5
 8012db4:	b21b      	sxth	r3, r3
 8012db6:	435c      	muls	r4, r3
 8012db8:	230a      	movs	r3, #10
 8012dba:	fb94 f4f3 	sdiv	r4, r4, r3
 8012dbe:	682b      	ldr	r3, [r5, #0]
 8012dc0:	443c      	add	r4, r7
 8012dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012dc6:	4798      	blx	r3
 8012dc8:	b9d8      	cbnz	r0, 8012e02 <_ZN8touchgfx15ScrollWheelBase15handleDragEventERKNS_9DragEventE+0x7e>
 8012dca:	f9b5 107c 	ldrsh.w	r1, [r5, #124]	; 0x7c
 8012dce:	2604      	movs	r6, #4
 8012dd0:	682b      	ldr	r3, [r5, #0]
 8012dd2:	4628      	mov	r0, r5
 8012dd4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012dd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012ddc:	fb91 f1f6 	sdiv	r1, r1, r6
 8012de0:	428c      	cmp	r4, r1
 8012de2:	bfa8      	it	ge
 8012de4:	460c      	movge	r4, r1
 8012de6:	4798      	blx	r3
 8012de8:	f9b5 307c 	ldrsh.w	r3, [r5, #124]	; 0x7c
 8012dec:	3801      	subs	r0, #1
 8012dee:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8012df2:	fb91 f1f6 	sdiv	r1, r1, r6
 8012df6:	4249      	negs	r1, r1
 8012df8:	fb03 1110 	mls	r1, r3, r0, r1
 8012dfc:	428c      	cmp	r4, r1
 8012dfe:	bfb8      	it	lt
 8012e00:	460c      	movlt	r4, r1
 8012e02:	682b      	ldr	r3, [r5, #0]
 8012e04:	4621      	mov	r1, r4
 8012e06:	4628      	mov	r0, r5
 8012e08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012e0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e10:	4718      	bx	r3
 8012e12:	89b3      	ldrh	r3, [r6, #12]
 8012e14:	8934      	ldrh	r4, [r6, #8]
 8012e16:	e7c9      	b.n	8012dac <_ZN8touchgfx15ScrollWheelBase15handleDragEventERKNS_9DragEventE+0x28>

08012e18 <_ZN8touchgfx15ScrollWheelBase18handleGestureEventERKNS_12GestureEventE>:
 8012e18:	b570      	push	{r4, r5, r6, lr}
 8012e1a:	6803      	ldr	r3, [r0, #0]
 8012e1c:	4604      	mov	r4, r0
 8012e1e:	790e      	ldrb	r6, [r1, #4]
 8012e20:	460d      	mov	r5, r1
 8012e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012e26:	4798      	blx	r3
 8012e28:	f080 0001 	eor.w	r0, r0, #1
 8012e2c:	b2c0      	uxtb	r0, r0
 8012e2e:	42b0      	cmp	r0, r6
 8012e30:	d126      	bne.n	8012e80 <_ZN8touchgfx15ScrollWheelBase18handleGestureEventERKNS_12GestureEventE+0x68>
 8012e32:	6823      	ldr	r3, [r4, #0]
 8012e34:	4620      	mov	r0, r4
 8012e36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012e3a:	4798      	blx	r3
 8012e3c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012e40:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
 8012e44:	4359      	muls	r1, r3
 8012e46:	230a      	movs	r3, #10
 8012e48:	fb91 f1f3 	sdiv	r1, r1, r3
 8012e4c:	f8b4 3082 	ldrh.w	r3, [r4, #130]	; 0x82
 8012e50:	4401      	add	r1, r0
 8012e52:	b163      	cbz	r3, 8012e6e <_ZN8touchgfx15ScrollWheelBase18handleGestureEventERKNS_12GestureEventE+0x56>
 8012e54:	f9b4 007c 	ldrsh.w	r0, [r4, #124]	; 0x7c
 8012e58:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 8012e5c:	4343      	muls	r3, r0
 8012e5e:	18d0      	adds	r0, r2, r3
 8012e60:	4281      	cmp	r1, r0
 8012e62:	bfa8      	it	ge
 8012e64:	4601      	movge	r1, r0
 8012e66:	1ad0      	subs	r0, r2, r3
 8012e68:	4281      	cmp	r1, r0
 8012e6a:	bfb8      	it	lt
 8012e6c:	4601      	movlt	r1, r0
 8012e6e:	6823      	ldr	r3, [r4, #0]
 8012e70:	4620      	mov	r0, r4
 8012e72:	f04f 32ff 	mov.w	r2, #4294967295
 8012e76:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8012e7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e7e:	4718      	bx	r3
 8012e80:	bd70      	pop	{r4, r5, r6, pc}

08012e82 <_ZN8touchgfx15ScrollWheelBase17animateToPositionEls>:
 8012e82:	b570      	push	{r4, r5, r6, lr}
 8012e84:	4604      	mov	r4, r0
 8012e86:	f8d0 00bc 	ldr.w	r0, [r0, #188]	; 0xbc
 8012e8a:	460d      	mov	r5, r1
 8012e8c:	4616      	mov	r6, r2
 8012e8e:	b1c8      	cbz	r0, 8012ec4 <_ZN8touchgfx15ScrollWheelBase17animateToPositionEls+0x42>
 8012e90:	6803      	ldr	r3, [r0, #0]
 8012e92:	68db      	ldr	r3, [r3, #12]
 8012e94:	4798      	blx	r3
 8012e96:	b1a8      	cbz	r0, 8012ec4 <_ZN8touchgfx15ScrollWheelBase17animateToPositionEls+0x42>
 8012e98:	f9b4 307c 	ldrsh.w	r3, [r4, #124]	; 0x7c
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	dd11      	ble.n	8012ec4 <_ZN8touchgfx15ScrollWheelBase17animateToPositionEls+0x42>
 8012ea0:	6823      	ldr	r3, [r4, #0]
 8012ea2:	4629      	mov	r1, r5
 8012ea4:	4620      	mov	r0, r4
 8012ea6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8012eaa:	4798      	blx	r3
 8012eac:	4605      	mov	r5, r0
 8012eae:	f9b4 307c 	ldrsh.w	r3, [r4, #124]	; 0x7c
 8012eb2:	4269      	negs	r1, r5
 8012eb4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 8012eb8:	fb91 f1f3 	sdiv	r1, r1, r3
 8012ebc:	6803      	ldr	r3, [r0, #0]
 8012ebe:	b209      	sxth	r1, r1
 8012ec0:	689b      	ldr	r3, [r3, #8]
 8012ec2:	4798      	blx	r3
 8012ec4:	4632      	mov	r2, r6
 8012ec6:	4629      	mov	r1, r5
 8012ec8:	4620      	mov	r0, r4
 8012eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ece:	f000 b92a 	b.w	8013126 <_ZN8touchgfx10ScrollBase17animateToPositionEls>

08012ed2 <_ZN8touchgfx15ScrollWheelBaseD0Ev>:
 8012ed2:	b510      	push	{r4, lr}
 8012ed4:	4604      	mov	r4, r0
 8012ed6:	21c0      	movs	r1, #192	; 0xc0
 8012ed8:	f010 f8b9 	bl	802304e <_ZdlPvj>
 8012edc:	4620      	mov	r0, r4
 8012ede:	bd10      	pop	{r4, pc}

08012ee0 <_ZN8touchgfx15ScrollWheelBaseC1Ev>:
 8012ee0:	b510      	push	{r4, lr}
 8012ee2:	4604      	mov	r4, r0
 8012ee4:	f000 fa5a 	bl	801339c <_ZN8touchgfx10ScrollBaseC1Ev>
 8012ee8:	4b06      	ldr	r3, [pc, #24]	; (8012f04 <_ZN8touchgfx15ScrollWheelBaseC1Ev+0x24>)
 8012eea:	2100      	movs	r1, #0
 8012eec:	4620      	mov	r0, r4
 8012eee:	6023      	str	r3, [r4, #0]
 8012ef0:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
 8012ef4:	f000 fa49 	bl	801338a <_ZN8touchgfx10ScrollBase13setHorizontalEb>
 8012ef8:	2301      	movs	r3, #1
 8012efa:	4620      	mov	r0, r4
 8012efc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8012f00:	bd10      	pop	{r4, pc}
 8012f02:	bf00      	nop
 8012f04:	08026938 	.word	0x08026938

08012f08 <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv>:
 8012f08:	b510      	push	{r4, lr}
 8012f0a:	f9b0 307c 	ldrsh.w	r3, [r0, #124]	; 0x7c
 8012f0e:	4604      	mov	r4, r0
 8012f10:	b1a3      	cbz	r3, 8012f3c <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv+0x34>
 8012f12:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
 8012f16:	2b01      	cmp	r3, #1
 8012f18:	d109      	bne.n	8012f2e <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv+0x26>
 8012f1a:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
 8012f1e:	f000 f9da 	bl	80132d6 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>
 8012f22:	f9b4 307c 	ldrsh.w	r3, [r4, #124]	; 0x7c
 8012f26:	4240      	negs	r0, r0
 8012f28:	fb90 f0f3 	sdiv	r0, r0, r3
 8012f2c:	bd10      	pop	{r4, pc}
 8012f2e:	6803      	ldr	r3, [r0, #0]
 8012f30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012f34:	4798      	blx	r3
 8012f36:	4601      	mov	r1, r0
 8012f38:	4620      	mov	r0, r4
 8012f3a:	e7f0      	b.n	8012f1e <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv+0x16>
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	e7f5      	b.n	8012f2c <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv+0x24>

08012f40 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE>:
 8012f40:	b570      	push	{r4, r5, r6, lr}
 8012f42:	6803      	ldr	r3, [r0, #0]
 8012f44:	460d      	mov	r5, r1
 8012f46:	4604      	mov	r4, r0
 8012f48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012f4c:	4798      	blx	r3
 8012f4e:	792b      	ldrb	r3, [r5, #4]
 8012f50:	4606      	mov	r6, r0
 8012f52:	b9fb      	cbnz	r3, 8012f94 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x54>
 8012f54:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012f58:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
 8012f5c:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8012f60:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 8012f64:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8012f68:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
 8012f6c:	2800      	cmp	r0, #0
 8012f6e:	d058      	beq.n	8013022 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xe2>
 8012f70:	6803      	ldr	r3, [r0, #0]
 8012f72:	68db      	ldr	r3, [r3, #12]
 8012f74:	4798      	blx	r3
 8012f76:	2800      	cmp	r0, #0
 8012f78:	d053      	beq.n	8013022 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xe2>
 8012f7a:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
 8012f7e:	682b      	ldr	r3, [r5, #0]
 8012f80:	4620      	mov	r0, r4
 8012f82:	689e      	ldr	r6, [r3, #8]
 8012f84:	f7ff ffc0 	bl	8012f08 <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv>
 8012f88:	b201      	sxth	r1, r0
 8012f8a:	4628      	mov	r0, r5
 8012f8c:	4633      	mov	r3, r6
 8012f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f92:	4718      	bx	r3
 8012f94:	2b01      	cmp	r3, #1
 8012f96:	d144      	bne.n	8013022 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xe2>
 8012f98:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 8012f9c:	bbb3      	cbnz	r3, 801300c <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xcc>
 8012f9e:	6823      	ldr	r3, [r4, #0]
 8012fa0:	4620      	mov	r0, r4
 8012fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012fa6:	4798      	blx	r3
 8012fa8:	b1f0      	cbz	r0, 8012fe8 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xa8>
 8012faa:	f9b4 30b0 	ldrsh.w	r3, [r4, #176]	; 0xb0
 8012fae:	f9b4 207a 	ldrsh.w	r2, [r4, #122]	; 0x7a
 8012fb2:	6821      	ldr	r1, [r4, #0]
 8012fb4:	429a      	cmp	r2, r3
 8012fb6:	f9b4 007c 	ldrsh.w	r0, [r4, #124]	; 0x7c
 8012fba:	f8d1 50c4 	ldr.w	r5, [r1, #196]	; 0xc4
 8012fbe:	dd16      	ble.n	8012fee <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xae>
 8012fc0:	1ad3      	subs	r3, r2, r3
 8012fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8012fc6:	fb93 f3f0 	sdiv	r3, r3, r0
 8012fca:	fb03 0000 	mla	r0, r3, r0, r0
 8012fce:	1981      	adds	r1, r0, r6
 8012fd0:	4620      	mov	r0, r4
 8012fd2:	47a8      	blx	r5
 8012fd4:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8012fd8:	b318      	cbz	r0, 8013022 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xe2>
 8012fda:	6803      	ldr	r3, [r0, #0]
 8012fdc:	68db      	ldr	r3, [r3, #12]
 8012fde:	4798      	blx	r3
 8012fe0:	b1f8      	cbz	r0, 8013022 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xe2>
 8012fe2:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
 8012fe6:	e7ca      	b.n	8012f7e <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x3e>
 8012fe8:	f9b4 30b2 	ldrsh.w	r3, [r4, #178]	; 0xb2
 8012fec:	e7df      	b.n	8012fae <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x6e>
 8012fee:	1881      	adds	r1, r0, r2
 8012ff0:	4299      	cmp	r1, r3
 8012ff2:	da07      	bge.n	8013004 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xc4>
 8012ff4:	1a9b      	subs	r3, r3, r2
 8012ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8012ffa:	fb93 f3f0 	sdiv	r3, r3, r0
 8012ffe:	fb00 6113 	mls	r1, r0, r3, r6
 8013002:	e7e5      	b.n	8012fd0 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x90>
 8013004:	f04f 32ff 	mov.w	r2, #4294967295
 8013008:	4631      	mov	r1, r6
 801300a:	e7e1      	b.n	8012fd0 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x90>
 801300c:	2b02      	cmp	r3, #2
 801300e:	d1e1      	bne.n	8012fd4 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x94>
 8013010:	6823      	ldr	r3, [r4, #0]
 8013012:	4601      	mov	r1, r0
 8013014:	f04f 32ff 	mov.w	r2, #4294967295
 8013018:	4620      	mov	r0, r4
 801301a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801301e:	4798      	blx	r3
 8013020:	e7d8      	b.n	8012fd4 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x94>
 8013022:	bd70      	pop	{r4, r5, r6, pc}

08013024 <_ZN8touchgfx10ScrollBase13animateToItemEss>:
 8013024:	b570      	push	{r4, r5, r6, lr}
 8013026:	6803      	ldr	r3, [r0, #0]
 8013028:	4615      	mov	r5, r2
 801302a:	4604      	mov	r4, r0
 801302c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8013030:	4798      	blx	r3
 8013032:	2d00      	cmp	r5, #0
 8013034:	6823      	ldr	r3, [r4, #0]
 8013036:	4601      	mov	r1, r0
 8013038:	bfb8      	it	lt
 801303a:	f9b4 5088 	ldrshlt.w	r5, [r4, #136]	; 0x88
 801303e:	4620      	mov	r0, r4
 8013040:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8013044:	462a      	mov	r2, r5
 8013046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801304a:	4718      	bx	r3

0801304c <_ZNK8touchgfx10ScrollBase16getNumberOfItemsEv>:
 801304c:	302c      	adds	r0, #44	; 0x2c
 801304e:	f7ff bc5c 	b.w	801290a <_ZNK8touchgfx12DrawableList16getNumberOfItemsEv>

08013052 <_ZN8touchgfx10ScrollBase11itemChangedEi>:
 8013052:	b209      	sxth	r1, r1
 8013054:	302c      	adds	r0, #44	; 0x2c
 8013056:	f7ff be26 	b.w	8012ca6 <_ZN8touchgfx12DrawableList11itemChangedEs>

0801305a <_ZN8touchgfx10ScrollBase9setOffsetEl>:
 801305a:	f9b0 307a 	ldrsh.w	r3, [r0, #122]	; 0x7a
 801305e:	302c      	adds	r0, #44	; 0x2c
 8013060:	4419      	add	r1, r3
 8013062:	f7ff bc81 	b.w	8012968 <_ZN8touchgfx12DrawableList9setOffsetEl>

08013066 <_ZNK8touchgfx10ScrollBase9getOffsetEv>:
 8013066:	b510      	push	{r4, lr}
 8013068:	4604      	mov	r4, r0
 801306a:	302c      	adds	r0, #44	; 0x2c
 801306c:	f7ff fd75 	bl	8012b5a <_ZNK8touchgfx12DrawableList9getOffsetEv>
 8013070:	f9b4 307a 	ldrsh.w	r3, [r4, #122]	; 0x7a
 8013074:	1ac0      	subs	r0, r0, r3
 8013076:	bd10      	pop	{r4, pc}

08013078 <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl>:
 8013078:	b538      	push	{r3, r4, r5, lr}
 801307a:	f9b0 307c 	ldrsh.w	r3, [r0, #124]	; 0x7c
 801307e:	4605      	mov	r5, r0
 8013080:	460c      	mov	r4, r1
 8013082:	b18b      	cbz	r3, 80130a8 <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0x30>
 8013084:	6803      	ldr	r3, [r0, #0]
 8013086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801308a:	4798      	blx	r3
 801308c:	4602      	mov	r2, r0
 801308e:	b168      	cbz	r0, 80130ac <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0x34>
 8013090:	f9b5 307c 	ldrsh.w	r3, [r5, #124]	; 0x7c
 8013094:	2102      	movs	r1, #2
 8013096:	2c00      	cmp	r4, #0
 8013098:	fb93 f1f1 	sdiv	r1, r3, r1
 801309c:	bfb4      	ite	lt
 801309e:	1a64      	sublt	r4, r4, r1
 80130a0:	1864      	addge	r4, r4, r1
 80130a2:	fb94 f4f3 	sdiv	r4, r4, r3
 80130a6:	435c      	muls	r4, r3
 80130a8:	4620      	mov	r0, r4
 80130aa:	bd38      	pop	{r3, r4, r5, pc}
 80130ac:	682b      	ldr	r3, [r5, #0]
 80130ae:	4621      	mov	r1, r4
 80130b0:	4628      	mov	r0, r5
 80130b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80130b6:	4798      	blx	r3
 80130b8:	f9b5 407c 	ldrsh.w	r4, [r5, #124]	; 0x7c
 80130bc:	2302      	movs	r3, #2
 80130be:	fb94 f3f3 	sdiv	r3, r4, r3
 80130c2:	1ac0      	subs	r0, r0, r3
 80130c4:	fb90 f0f4 	sdiv	r0, r0, r4
 80130c8:	4344      	muls	r4, r0
 80130ca:	e7ed      	b.n	80130a8 <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0x30>

080130cc <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs>:
 80130cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130d0:	6803      	ldr	r3, [r0, #0]
 80130d2:	460d      	mov	r5, r1
 80130d4:	4604      	mov	r4, r0
 80130d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80130da:	4798      	blx	r3
 80130dc:	42a8      	cmp	r0, r5
 80130de:	d020      	beq.n	8013122 <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs+0x56>
 80130e0:	4629      	mov	r1, r5
 80130e2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80130e6:	f7ff fddb 	bl	8012ca0 <_ZN8touchgfx12DrawableList16setNumberOfItemsEs>
 80130ea:	6823      	ldr	r3, [r4, #0]
 80130ec:	4620      	mov	r0, r4
 80130ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80130f2:	4798      	blx	r3
 80130f4:	4605      	mov	r5, r0
 80130f6:	b9a0      	cbnz	r0, 8013122 <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs+0x56>
 80130f8:	6823      	ldr	r3, [r4, #0]
 80130fa:	4620      	mov	r0, r4
 80130fc:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
 8013100:	f8d3 70bc 	ldr.w	r7, [r3, #188]	; 0xbc
 8013104:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013108:	4798      	blx	r3
 801310a:	462a      	mov	r2, r5
 801310c:	4601      	mov	r1, r0
 801310e:	4620      	mov	r0, r4
 8013110:	47b8      	blx	r7
 8013112:	4633      	mov	r3, r6
 8013114:	4601      	mov	r1, r0
 8013116:	f04f 32ff 	mov.w	r2, #4294967295
 801311a:	4620      	mov	r0, r4
 801311c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013120:	4718      	bx	r3
 8013122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013126 <_ZN8touchgfx10ScrollBase17animateToPositionEls>:
 8013126:	b570      	push	{r4, r5, r6, lr}
 8013128:	6803      	ldr	r3, [r0, #0]
 801312a:	4615      	mov	r5, r2
 801312c:	4604      	mov	r4, r0
 801312e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8013132:	4798      	blx	r3
 8013134:	2d00      	cmp	r5, #0
 8013136:	4606      	mov	r6, r0
 8013138:	6823      	ldr	r3, [r4, #0]
 801313a:	bfb8      	it	lt
 801313c:	f9b4 5088 	ldrshlt.w	r5, [r4, #136]	; 0x88
 8013140:	2d00      	cmp	r5, #0
 8013142:	dc06      	bgt.n	8013152 <_ZN8touchgfx10ScrollBase17animateToPositionEls+0x2c>
 8013144:	4601      	mov	r1, r0
 8013146:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801314a:	4620      	mov	r0, r4
 801314c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013150:	4718      	bx	r3
 8013152:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013156:	4620      	mov	r0, r4
 8013158:	4798      	blx	r3
 801315a:	2300      	movs	r3, #0
 801315c:	e9c4 3528 	strd	r3, r5, [r4, #160]	; 0xa0
 8013160:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 8013164:	2b01      	cmp	r3, #1
 8013166:	e9c4 062a 	strd	r0, r6, [r4, #168]	; 0xa8
 801316a:	d007      	beq.n	801317c <_ZN8touchgfx10ScrollBase17animateToPositionEls+0x56>
 801316c:	f004 f840 	bl	80171f0 <_ZN8touchgfx11Application11getInstanceEv>
 8013170:	4621      	mov	r1, r4
 8013172:	f004 f843 	bl	80171fc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8013176:	2301      	movs	r3, #1
 8013178:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
 801317c:	bd70      	pop	{r4, r5, r6, pc}

0801317e <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE>:
 801317e:	b570      	push	{r4, r5, r6, lr}
 8013180:	6803      	ldr	r3, [r0, #0]
 8013182:	4605      	mov	r5, r0
 8013184:	790e      	ldrb	r6, [r1, #4]
 8013186:	460c      	mov	r4, r1
 8013188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801318c:	4798      	blx	r3
 801318e:	f080 0001 	eor.w	r0, r0, #1
 8013192:	b2c0      	uxtb	r0, r0
 8013194:	42b0      	cmp	r0, r6
 8013196:	d140      	bne.n	801321a <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE+0x9c>
 8013198:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801319c:	4628      	mov	r0, r5
 801319e:	2b00      	cmp	r3, #0
 80131a0:	bfbb      	ittet	lt
 80131a2:	425b      	neglt	r3, r3
 80131a4:	f04f 36ff 	movlt.w	r6, #4294967295
 80131a8:	2601      	movge	r6, #1
 80131aa:	b21b      	sxthlt	r3, r3
 80131ac:	2b04      	cmp	r3, #4
 80131ae:	bfc9      	itett	gt
 80131b0:	3b04      	subgt	r3, #4
 80131b2:	2407      	movle	r4, #7
 80131b4:	ebc3 03c3 	rsbgt	r3, r3, r3, lsl #3
 80131b8:	b21c      	sxthgt	r4, r3
 80131ba:	682b      	ldr	r3, [r5, #0]
 80131bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80131c0:	4366      	muls	r6, r4
 80131c2:	4798      	blx	r3
 80131c4:	f8b5 107e 	ldrh.w	r1, [r5, #126]	; 0x7e
 80131c8:	230a      	movs	r3, #10
 80131ca:	4371      	muls	r1, r6
 80131cc:	fb91 f1f3 	sdiv	r1, r1, r3
 80131d0:	f8b5 3082 	ldrh.w	r3, [r5, #130]	; 0x82
 80131d4:	4401      	add	r1, r0
 80131d6:	b163      	cbz	r3, 80131f2 <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE+0x74>
 80131d8:	f9b5 007c 	ldrsh.w	r0, [r5, #124]	; 0x7c
 80131dc:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
 80131e0:	4343      	muls	r3, r0
 80131e2:	18d0      	adds	r0, r2, r3
 80131e4:	4281      	cmp	r1, r0
 80131e6:	bfa8      	it	ge
 80131e8:	4601      	movge	r1, r0
 80131ea:	1ad0      	subs	r0, r2, r3
 80131ec:	4281      	cmp	r1, r0
 80131ee:	bfb8      	it	lt
 80131f0:	4601      	movlt	r1, r0
 80131f2:	682b      	ldr	r3, [r5, #0]
 80131f4:	2200      	movs	r2, #0
 80131f6:	4628      	mov	r0, r5
 80131f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80131fc:	4798      	blx	r3
 80131fe:	f8b5 2088 	ldrh.w	r2, [r5, #136]	; 0x88
 8013202:	682b      	ldr	r3, [r5, #0]
 8013204:	4601      	mov	r1, r0
 8013206:	42a2      	cmp	r2, r4
 8013208:	4628      	mov	r0, r5
 801320a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801320e:	bfa8      	it	ge
 8013210:	4622      	movge	r2, r4
 8013212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013216:	b212      	sxth	r2, r2
 8013218:	4718      	bx	r3
 801321a:	bd70      	pop	{r4, r5, r6, pc}

0801321c <_ZN8touchgfx10ScrollBase15setDrawableSizeEss>:
 801321c:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8013220:	302c      	adds	r0, #44	; 0x2c
 8013222:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8013226:	f7ff bb6b 	b.w	8012900 <_ZN8touchgfx12DrawableList15setDrawableSizeEss>

0801322a <_ZN8touchgfx10ScrollBase17setEasingEquationEPFstsstE>:
 801322a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
 801322e:	4770      	bx	lr

08013230 <_ZN8touchgfx10ScrollBase20setSwipeAccelerationEt>:
 8013230:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
 8013234:	4770      	bx	lr

08013236 <_ZN8touchgfx10ScrollBase19setDragAccelerationEt>:
 8013236:	f8a0 1080 	strh.w	r1, [r0, #128]	; 0x80
 801323a:	4770      	bx	lr

0801323c <_ZN8touchgfx10ScrollBase13stopAnimationEv>:
 801323c:	b510      	push	{r4, lr}
 801323e:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
 8013242:	4604      	mov	r4, r0
 8013244:	2b01      	cmp	r3, #1
 8013246:	d10b      	bne.n	8013260 <_ZN8touchgfx10ScrollBase13stopAnimationEv+0x24>
 8013248:	f003 ffd2 	bl	80171f0 <_ZN8touchgfx11Application11getInstanceEv>
 801324c:	4621      	mov	r1, r4
 801324e:	f004 f807 	bl	8017260 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8013252:	6823      	ldr	r3, [r4, #0]
 8013254:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8013258:	4620      	mov	r0, r4
 801325a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801325e:	4798      	blx	r3
 8013260:	2300      	movs	r3, #0
 8013262:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
 8013266:	bd10      	pop	{r4, pc}

08013268 <_ZN8touchgfx10ScrollBase15handleDragEventERKNS_9DragEventE>:
 8013268:	b570      	push	{r4, r5, r6, lr}
 801326a:	4604      	mov	r4, r0
 801326c:	460e      	mov	r6, r1
 801326e:	f7ff ffe5 	bl	801323c <_ZN8touchgfx10ScrollBase13stopAnimationEv>
 8013272:	2302      	movs	r3, #2
 8013274:	4620      	mov	r0, r4
 8013276:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
 801327a:	6823      	ldr	r3, [r4, #0]
 801327c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013280:	4798      	blx	r3
 8013282:	6823      	ldr	r3, [r4, #0]
 8013284:	4605      	mov	r5, r0
 8013286:	4620      	mov	r0, r4
 8013288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801328c:	4798      	blx	r3
 801328e:	b1f8      	cbz	r0, 80132d0 <_ZN8touchgfx10ScrollBase15handleDragEventERKNS_9DragEventE+0x68>
 8013290:	8973      	ldrh	r3, [r6, #10]
 8013292:	88f1      	ldrh	r1, [r6, #6]
 8013294:	1a5b      	subs	r3, r3, r1
 8013296:	f8b4 1080 	ldrh.w	r1, [r4, #128]	; 0x80
 801329a:	f9b4 207c 	ldrsh.w	r2, [r4, #124]	; 0x7c
 801329e:	4620      	mov	r0, r4
 80132a0:	b21b      	sxth	r3, r3
 80132a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80132a6:	434b      	muls	r3, r1
 80132a8:	210a      	movs	r1, #10
 80132aa:	fb93 f3f1 	sdiv	r3, r3, r1
 80132ae:	2104      	movs	r1, #4
 80132b0:	fb92 f2f1 	sdiv	r2, r2, r1
 80132b4:	6821      	ldr	r1, [r4, #0]
 80132b6:	b212      	sxth	r2, r2
 80132b8:	f8d1 60bc 	ldr.w	r6, [r1, #188]	; 0xbc
 80132bc:	1959      	adds	r1, r3, r5
 80132be:	47b0      	blx	r6
 80132c0:	6823      	ldr	r3, [r4, #0]
 80132c2:	4601      	mov	r1, r0
 80132c4:	4620      	mov	r0, r4
 80132c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80132ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132ce:	4718      	bx	r3
 80132d0:	89b3      	ldrh	r3, [r6, #12]
 80132d2:	8931      	ldrh	r1, [r6, #8]
 80132d4:	e7de      	b.n	8013294 <_ZN8touchgfx10ScrollBase15handleDragEventERKNS_9DragEventE+0x2c>

080132d6 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>:
 80132d6:	b538      	push	{r3, r4, r5, lr}
 80132d8:	6803      	ldr	r3, [r0, #0]
 80132da:	4605      	mov	r5, r0
 80132dc:	460c      	mov	r4, r1
 80132de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80132e2:	4798      	blx	r3
 80132e4:	b150      	cbz	r0, 80132fc <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi+0x26>
 80132e6:	f9b5 307c 	ldrsh.w	r3, [r5, #124]	; 0x7c
 80132ea:	b13b      	cbz	r3, 80132fc <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi+0x26>
 80132ec:	4358      	muls	r0, r3
 80132ee:	fb94 f3f0 	sdiv	r3, r4, r0
 80132f2:	fb00 4413 	mls	r4, r0, r3, r4
 80132f6:	2c00      	cmp	r4, #0
 80132f8:	bfc8      	it	gt
 80132fa:	1a24      	subgt	r4, r4, r0
 80132fc:	4620      	mov	r0, r4
 80132fe:	bd38      	pop	{r3, r4, r5, pc}

08013300 <_ZN8touchgfx10ScrollBase15handleTickEventEv>:
 8013300:	b570      	push	{r4, r5, r6, lr}
 8013302:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
 8013306:	4604      	mov	r4, r0
 8013308:	2b01      	cmp	r3, #1
 801330a:	d13d      	bne.n	8013388 <_ZN8touchgfx10ScrollBase15handleTickEventEv+0x88>
 801330c:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
 8013310:	2100      	movs	r1, #0
 8013312:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8013316:	3001      	adds	r0, #1
 8013318:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 801331c:	e9d4 622a 	ldrd	r6, r2, [r4, #168]	; 0xa8
 8013320:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
 8013324:	b280      	uxth	r0, r0
 8013326:	1b92      	subs	r2, r2, r6
 8013328:	b212      	sxth	r2, r2
 801332a:	47a8      	blx	r5
 801332c:	6823      	ldr	r3, [r4, #0]
 801332e:	1981      	adds	r1, r0, r6
 8013330:	4620      	mov	r0, r4
 8013332:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013336:	4798      	blx	r3
 8013338:	e9d4 2328 	ldrd	r2, r3, [r4, #160]	; 0xa0
 801333c:	429a      	cmp	r2, r3
 801333e:	dd23      	ble.n	8013388 <_ZN8touchgfx10ScrollBase15handleTickEventEv+0x88>
 8013340:	2300      	movs	r3, #0
 8013342:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
 8013346:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 801334a:	f003 ff51 	bl	80171f0 <_ZN8touchgfx11Application11getInstanceEv>
 801334e:	4621      	mov	r1, r4
 8013350:	f003 ff86 	bl	8017260 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8013354:	6823      	ldr	r3, [r4, #0]
 8013356:	4620      	mov	r0, r4
 8013358:	e9d3 532c 	ldrd	r5, r3, [r3, #176]	; 0xb0
 801335c:	4798      	blx	r3
 801335e:	4601      	mov	r1, r0
 8013360:	4620      	mov	r0, r4
 8013362:	f7ff ffb8 	bl	80132d6 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>
 8013366:	4601      	mov	r1, r0
 8013368:	4620      	mov	r0, r4
 801336a:	47a8      	blx	r5
 801336c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8013370:	b150      	cbz	r0, 8013388 <_ZN8touchgfx10ScrollBase15handleTickEventEv+0x88>
 8013372:	6803      	ldr	r3, [r0, #0]
 8013374:	68db      	ldr	r3, [r3, #12]
 8013376:	4798      	blx	r3
 8013378:	b130      	cbz	r0, 8013388 <_ZN8touchgfx10ScrollBase15handleTickEventEv+0x88>
 801337a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 801337e:	6803      	ldr	r3, [r0, #0]
 8013380:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013384:	689b      	ldr	r3, [r3, #8]
 8013386:	4718      	bx	r3
 8013388:	bd70      	pop	{r4, r5, r6, pc}

0801338a <_ZN8touchgfx10ScrollBase13setHorizontalEb>:
 801338a:	f081 0301 	eor.w	r3, r1, #1
 801338e:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
 8013392:	302c      	adds	r0, #44	; 0x2c
 8013394:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
 8013398:	f7ff bc63 	b.w	8012c62 <_ZN8touchgfx12DrawableList13setHorizontalEb>

0801339c <_ZN8touchgfx10ScrollBaseC1Ev>:
 801339c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801339e:	2500      	movs	r5, #0
 80133a0:	4606      	mov	r6, r0
 80133a2:	2701      	movs	r7, #1
 80133a4:	4b23      	ldr	r3, [pc, #140]	; (8013434 <_ZN8touchgfx10ScrollBaseC1Ev+0x98>)
 80133a6:	4604      	mov	r4, r0
 80133a8:	8085      	strh	r5, [r0, #4]
 80133aa:	80c5      	strh	r5, [r0, #6]
 80133ac:	8105      	strh	r5, [r0, #8]
 80133ae:	8145      	strh	r5, [r0, #10]
 80133b0:	8185      	strh	r5, [r0, #12]
 80133b2:	81c5      	strh	r5, [r0, #14]
 80133b4:	8205      	strh	r5, [r0, #16]
 80133b6:	8245      	strh	r5, [r0, #18]
 80133b8:	61c5      	str	r5, [r0, #28]
 80133ba:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 80133be:	f880 7025 	strb.w	r7, [r0, #37]	; 0x25
 80133c2:	6285      	str	r5, [r0, #40]	; 0x28
 80133c4:	e9c0 5505 	strd	r5, r5, [r0, #20]
 80133c8:	f846 3b2c 	str.w	r3, [r6], #44
 80133cc:	4630      	mov	r0, r6
 80133ce:	f7ff fa71 	bl	80128b4 <_ZN8touchgfx12DrawableListC1Ev>
 80133d2:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80133d6:	230a      	movs	r3, #10
 80133d8:	4631      	mov	r1, r6
 80133da:	4620      	mov	r0, r4
 80133dc:	67a5      	str	r5, [r4, #120]	; 0x78
 80133de:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
 80133e2:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
 80133e6:	f884 50b9 	strb.w	r5, [r4, #185]	; 0xb9
 80133ea:	e9c4 231f 	strd	r2, r3, [r4, #124]	; 0x7c
 80133ee:	4b12      	ldr	r3, [pc, #72]	; (8013438 <_ZN8touchgfx10ScrollBaseC1Ev+0x9c>)
 80133f0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80133f4:	231e      	movs	r3, #30
 80133f6:	e9c4 5523 	strd	r5, r5, [r4, #140]	; 0x8c
 80133fa:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
 80133fe:	e9c4 5525 	strd	r5, r5, [r4, #148]	; 0x94
 8013402:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
 8013406:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
 801340a:	e9c4 552c 	strd	r5, r5, [r4, #176]	; 0xb0
 801340e:	f000 f8f1 	bl	80135f4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013412:	462a      	mov	r2, r5
 8013414:	4629      	mov	r1, r5
 8013416:	4630      	mov	r0, r6
 8013418:	f7f8 fe88 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
 801341c:	4629      	mov	r1, r5
 801341e:	4630      	mov	r0, r6
 8013420:	f7ff fc1f 	bl	8012c62 <_ZN8touchgfx12DrawableList13setHorizontalEb>
 8013424:	4630      	mov	r0, r6
 8013426:	4629      	mov	r1, r5
 8013428:	f7ff fc26 	bl	8012c78 <_ZN8touchgfx12DrawableList11setCircularEb>
 801342c:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
 8013430:	4620      	mov	r0, r4
 8013432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013434:	08026a10 	.word	0x08026a10
 8013438:	080184d1 	.word	0x080184d1

0801343c <_ZN8touchgfx10ScrollBase11setCircularEb>:
 801343c:	302c      	adds	r0, #44	; 0x2c
 801343e:	f7ff bc1b 	b.w	8012c78 <_ZN8touchgfx12DrawableList11setCircularEb>

08013442 <_ZN8touchgfx10ScrollBase8setWidthEs>:
 8013442:	8101      	strh	r1, [r0, #8]
 8013444:	302c      	adds	r0, #44	; 0x2c
 8013446:	f7ff bc06 	b.w	8012c56 <_ZN8touchgfx12DrawableList8setWidthEs>

0801344a <_ZN8touchgfx10ScrollBase9setHeightEs>:
 801344a:	8141      	strh	r1, [r0, #10]
 801344c:	302c      	adds	r0, #44	; 0x2c
 801344e:	f7ff bc05 	b.w	8012c5c <_ZN8touchgfx12DrawableList9setHeightEs>

08013452 <_ZNK8touchgfx10ScrollBase13getHorizontalEv>:
 8013452:	302c      	adds	r0, #44	; 0x2c
 8013454:	f7ff ba15 	b.w	8012882 <_ZNK8touchgfx12DrawableList13getHorizontalEv>

08013458 <_ZNK8touchgfx10ScrollBase11getCircularEv>:
 8013458:	302c      	adds	r0, #44	; 0x2c
 801345a:	f7ff ba15 	b.w	8012888 <_ZNK8touchgfx12DrawableList11getCircularEv>

0801345e <_ZNK8touchgfx10ScrollBase15getDrawableSizeEv>:
 801345e:	302c      	adds	r0, #44	; 0x2c
 8013460:	f7ff ba18 	b.w	8012894 <_ZNK8touchgfx12DrawableList15getDrawableSizeEv>

08013464 <_ZNK8touchgfx10ScrollBase17getDrawableMarginEv>:
 8013464:	302c      	adds	r0, #44	; 0x2c
 8013466:	f7ff ba1b 	b.w	80128a0 <_ZNK8touchgfx12DrawableList17getDrawableMarginEv>

0801346a <_ZN8touchgfx11ScrollWheelD1Ev>:
 801346a:	4770      	bx	lr

0801346c <_ZN8touchgfx11ScrollWheelD0Ev>:
 801346c:	b510      	push	{r4, lr}
 801346e:	4604      	mov	r4, r0
 8013470:	21c0      	movs	r1, #192	; 0xc0
 8013472:	f00f fdec 	bl	802304e <_ZdlPvj>
 8013476:	4620      	mov	r0, r4
 8013478:	bd10      	pop	{r4, pc}

0801347a <_ZN8touchgfx11ScrollWheel12setDrawablesERNS_26DrawableListItemsInterfaceERNS_15GenericCallbackIPS1_ssEE>:
 801347a:	b570      	push	{r4, r5, r6, lr}
 801347c:	460d      	mov	r5, r1
 801347e:	4604      	mov	r4, r0
 8013480:	4616      	mov	r6, r2
 8013482:	f7ff fedb 	bl	801323c <_ZN8touchgfx10ScrollBase13stopAnimationEv>
 8013486:	682b      	ldr	r3, [r5, #0]
 8013488:	4628      	mov	r0, r5
 801348a:	68db      	ldr	r3, [r3, #12]
 801348c:	4798      	blx	r3
 801348e:	4633      	mov	r3, r6
 8013490:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
 8013494:	4629      	mov	r1, r5
 8013496:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801349a:	2200      	movs	r2, #0
 801349c:	f7ff fbf7 	bl	8012c8e <_ZN8touchgfx12DrawableList12setDrawablesERNS_26DrawableListItemsInterfaceEsRNS_15GenericCallbackIPS1_ssEE>
 80134a0:	6823      	ldr	r3, [r4, #0]
 80134a2:	4620      	mov	r0, r4
 80134a4:	2100      	movs	r1, #0
 80134a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80134aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80134ae:	4718      	bx	r3

080134b0 <_ZN8touchgfx11ScrollWheelC1Ev>:
 80134b0:	b510      	push	{r4, lr}
 80134b2:	4604      	mov	r4, r0
 80134b4:	f7ff fd14 	bl	8012ee0 <_ZN8touchgfx15ScrollWheelBaseC1Ev>
 80134b8:	4b01      	ldr	r3, [pc, #4]	; (80134c0 <_ZN8touchgfx11ScrollWheelC1Ev+0x10>)
 80134ba:	4620      	mov	r0, r4
 80134bc:	6023      	str	r3, [r4, #0]
 80134be:	bd10      	pop	{r4, pc}
 80134c0:	08026ae0 	.word	0x08026ae0

080134c4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80134c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80134c6:	2000      	movs	r0, #0
 80134c8:	b12b      	cbz	r3, 80134d6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80134ca:	b920      	cbnz	r0, 80134d6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80134cc:	1a5a      	subs	r2, r3, r1
 80134ce:	699b      	ldr	r3, [r3, #24]
 80134d0:	4250      	negs	r0, r2
 80134d2:	4150      	adcs	r0, r2
 80134d4:	e7f8      	b.n	80134c8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80134d6:	4770      	bx	lr

080134d8 <_ZN8touchgfx9Container9removeAllEv>:
 80134d8:	2200      	movs	r2, #0
 80134da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80134dc:	b123      	cbz	r3, 80134e8 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80134de:	6999      	ldr	r1, [r3, #24]
 80134e0:	6281      	str	r1, [r0, #40]	; 0x28
 80134e2:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80134e6:	e7f8      	b.n	80134da <_ZN8touchgfx9Container9removeAllEv+0x2>
 80134e8:	4770      	bx	lr

080134ea <_ZN8touchgfx9Container6unlinkEv>:
 80134ea:	2300      	movs	r3, #0
 80134ec:	6283      	str	r3, [r0, #40]	; 0x28
 80134ee:	4770      	bx	lr

080134f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80134f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134f4:	461f      	mov	r7, r3
 80134f6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80134fa:	460d      	mov	r5, r1
 80134fc:	4616      	mov	r6, r2
 80134fe:	b103      	cbz	r3, 8013502 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8013500:	6038      	str	r0, [r7, #0]
 8013502:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013504:	b314      	cbz	r4, 801354c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8013506:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801350a:	b1eb      	cbz	r3, 8013548 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801350c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013510:	428d      	cmp	r5, r1
 8013512:	db19      	blt.n	8013548 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013514:	b289      	uxth	r1, r1
 8013516:	8923      	ldrh	r3, [r4, #8]
 8013518:	440b      	add	r3, r1
 801351a:	b21b      	sxth	r3, r3
 801351c:	429d      	cmp	r5, r3
 801351e:	da13      	bge.n	8013548 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013520:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013524:	4296      	cmp	r6, r2
 8013526:	db0f      	blt.n	8013548 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013528:	b292      	uxth	r2, r2
 801352a:	8963      	ldrh	r3, [r4, #10]
 801352c:	4413      	add	r3, r2
 801352e:	b21b      	sxth	r3, r3
 8013530:	429e      	cmp	r6, r3
 8013532:	da09      	bge.n	8013548 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8013534:	6823      	ldr	r3, [r4, #0]
 8013536:	1ab2      	subs	r2, r6, r2
 8013538:	1a69      	subs	r1, r5, r1
 801353a:	4620      	mov	r0, r4
 801353c:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8013540:	b212      	sxth	r2, r2
 8013542:	463b      	mov	r3, r7
 8013544:	b209      	sxth	r1, r1
 8013546:	47c0      	blx	r8
 8013548:	69a4      	ldr	r4, [r4, #24]
 801354a:	e7db      	b.n	8013504 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801354c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013550 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8013550:	2200      	movs	r2, #0
 8013552:	8002      	strh	r2, [r0, #0]
 8013554:	8042      	strh	r2, [r0, #2]
 8013556:	8082      	strh	r2, [r0, #4]
 8013558:	80c2      	strh	r2, [r0, #6]
 801355a:	4770      	bx	lr

0801355c <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801355c:	b570      	push	{r4, r5, r6, lr}
 801355e:	460d      	mov	r5, r1
 8013560:	4616      	mov	r6, r2
 8013562:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013564:	b13c      	cbz	r4, 8013576 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8013566:	6823      	ldr	r3, [r4, #0]
 8013568:	4620      	mov	r0, r4
 801356a:	4632      	mov	r2, r6
 801356c:	4629      	mov	r1, r5
 801356e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013570:	4798      	blx	r3
 8013572:	69a4      	ldr	r4, [r4, #24]
 8013574:	e7f6      	b.n	8013564 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8013576:	bd70      	pop	{r4, r5, r6, pc}

08013578 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8013578:	b538      	push	{r3, r4, r5, lr}
 801357a:	460d      	mov	r5, r1
 801357c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801357e:	b134      	cbz	r4, 801358e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8013580:	682b      	ldr	r3, [r5, #0]
 8013582:	4621      	mov	r1, r4
 8013584:	4628      	mov	r0, r5
 8013586:	689b      	ldr	r3, [r3, #8]
 8013588:	4798      	blx	r3
 801358a:	69a4      	ldr	r4, [r4, #24]
 801358c:	e7f7      	b.n	801357e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801358e:	bd38      	pop	{r3, r4, r5, pc}

08013590 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8013590:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013592:	b19b      	cbz	r3, 80135bc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8013594:	428b      	cmp	r3, r1
 8013596:	d109      	bne.n	80135ac <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8013598:	699a      	ldr	r2, [r3, #24]
 801359a:	2100      	movs	r1, #0
 801359c:	6159      	str	r1, [r3, #20]
 801359e:	6282      	str	r2, [r0, #40]	; 0x28
 80135a0:	b902      	cbnz	r2, 80135a4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80135a2:	4770      	bx	lr
 80135a4:	6199      	str	r1, [r3, #24]
 80135a6:	4770      	bx	lr
 80135a8:	4613      	mov	r3, r2
 80135aa:	b13a      	cbz	r2, 80135bc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80135ac:	699a      	ldr	r2, [r3, #24]
 80135ae:	428a      	cmp	r2, r1
 80135b0:	d1fa      	bne.n	80135a8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80135b2:	698a      	ldr	r2, [r1, #24]
 80135b4:	619a      	str	r2, [r3, #24]
 80135b6:	2300      	movs	r3, #0
 80135b8:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80135bc:	4770      	bx	lr

080135be <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80135be:	b410      	push	{r4}
 80135c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80135c2:	4604      	mov	r4, r0
 80135c4:	b92b      	cbnz	r3, 80135d2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80135c6:	6803      	ldr	r3, [r0, #0]
 80135c8:	4611      	mov	r1, r2
 80135ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80135d0:	4718      	bx	r3
 80135d2:	b941      	cbnz	r1, 80135e6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80135d4:	6193      	str	r3, [r2, #24]
 80135d6:	6282      	str	r2, [r0, #40]	; 0x28
 80135d8:	6154      	str	r4, [r2, #20]
 80135da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135de:	4770      	bx	lr
 80135e0:	4603      	mov	r3, r0
 80135e2:	2800      	cmp	r0, #0
 80135e4:	d0f9      	beq.n	80135da <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80135e6:	4299      	cmp	r1, r3
 80135e8:	6998      	ldr	r0, [r3, #24]
 80135ea:	d1f9      	bne.n	80135e0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80135ec:	6190      	str	r0, [r2, #24]
 80135ee:	618a      	str	r2, [r1, #24]
 80135f0:	e7f2      	b.n	80135d8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080135f4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80135f4:	4288      	cmp	r0, r1
 80135f6:	b508      	push	{r3, lr}
 80135f8:	d105      	bne.n	8013606 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80135fa:	4b11      	ldr	r3, [pc, #68]	; (8013640 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80135fc:	2123      	movs	r1, #35	; 0x23
 80135fe:	4a11      	ldr	r2, [pc, #68]	; (8013644 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8013600:	4811      	ldr	r0, [pc, #68]	; (8013648 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8013602:	f00f fd4f 	bl	80230a4 <__assert_func>
 8013606:	694b      	ldr	r3, [r1, #20]
 8013608:	b11b      	cbz	r3, 8013612 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 801360a:	4b10      	ldr	r3, [pc, #64]	; (801364c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 801360c:	2124      	movs	r1, #36	; 0x24
 801360e:	4a0d      	ldr	r2, [pc, #52]	; (8013644 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8013610:	e7f6      	b.n	8013600 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8013612:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8013616:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8013618:	b913      	cbnz	r3, 8013620 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 801361a:	6281      	str	r1, [r0, #40]	; 0x28
 801361c:	bd08      	pop	{r3, pc}
 801361e:	4613      	mov	r3, r2
 8013620:	699a      	ldr	r2, [r3, #24]
 8013622:	b12a      	cbz	r2, 8013630 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8013624:	428b      	cmp	r3, r1
 8013626:	d1fa      	bne.n	801361e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8013628:	4b09      	ldr	r3, [pc, #36]	; (8013650 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801362a:	2135      	movs	r1, #53	; 0x35
 801362c:	4a05      	ldr	r2, [pc, #20]	; (8013644 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801362e:	e7e7      	b.n	8013600 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8013630:	428b      	cmp	r3, r1
 8013632:	d103      	bne.n	801363c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8013634:	4b06      	ldr	r3, [pc, #24]	; (8013650 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8013636:	2138      	movs	r1, #56	; 0x38
 8013638:	4a02      	ldr	r2, [pc, #8]	; (8013644 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801363a:	e7e1      	b.n	8013600 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 801363c:	6199      	str	r1, [r3, #24]
 801363e:	e7ed      	b.n	801361c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8013640:	08026bb4 	.word	0x08026bb4
 8013644:	08026d08 	.word	0x08026d08
 8013648:	08026be0 	.word	0x08026be0
 801364c:	08026c13 	.word	0x08026c13
 8013650:	08026c49 	.word	0x08026c49

08013654 <_ZN8touchgfx4RectaNERKS0_>:
 8013654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013658:	888b      	ldrh	r3, [r1, #4]
 801365a:	f9b1 9000 	ldrsh.w	r9, [r1]
 801365e:	f9b0 a000 	ldrsh.w	sl, [r0]
 8013662:	444b      	add	r3, r9
 8013664:	b29b      	uxth	r3, r3
 8013666:	fa0f f883 	sxth.w	r8, r3
 801366a:	45c2      	cmp	sl, r8
 801366c:	da30      	bge.n	80136d0 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801366e:	8882      	ldrh	r2, [r0, #4]
 8013670:	4452      	add	r2, sl
 8013672:	b292      	uxth	r2, r2
 8013674:	fa0f fe82 	sxth.w	lr, r2
 8013678:	45f1      	cmp	r9, lr
 801367a:	da29      	bge.n	80136d0 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801367c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8013680:	88cc      	ldrh	r4, [r1, #6]
 8013682:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8013686:	442c      	add	r4, r5
 8013688:	b224      	sxth	r4, r4
 801368a:	42a6      	cmp	r6, r4
 801368c:	da20      	bge.n	80136d0 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801368e:	88c7      	ldrh	r7, [r0, #6]
 8013690:	4437      	add	r7, r6
 8013692:	b2bf      	uxth	r7, r7
 8013694:	fa0f fc87 	sxth.w	ip, r7
 8013698:	4565      	cmp	r5, ip
 801369a:	da19      	bge.n	80136d0 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801369c:	45ca      	cmp	sl, r9
 801369e:	4654      	mov	r4, sl
 80136a0:	bfb8      	it	lt
 80136a2:	464c      	movlt	r4, r9
 80136a4:	42b5      	cmp	r5, r6
 80136a6:	bfb8      	it	lt
 80136a8:	4635      	movlt	r5, r6
 80136aa:	45f0      	cmp	r8, lr
 80136ac:	bfc8      	it	gt
 80136ae:	4613      	movgt	r3, r2
 80136b0:	1b1b      	subs	r3, r3, r4
 80136b2:	8083      	strh	r3, [r0, #4]
 80136b4:	88ca      	ldrh	r2, [r1, #6]
 80136b6:	884b      	ldrh	r3, [r1, #2]
 80136b8:	8004      	strh	r4, [r0, #0]
 80136ba:	4413      	add	r3, r2
 80136bc:	8045      	strh	r5, [r0, #2]
 80136be:	b29b      	uxth	r3, r3
 80136c0:	b21a      	sxth	r2, r3
 80136c2:	4594      	cmp	ip, r2
 80136c4:	bfb8      	it	lt
 80136c6:	463b      	movlt	r3, r7
 80136c8:	1b5b      	subs	r3, r3, r5
 80136ca:	80c3      	strh	r3, [r0, #6]
 80136cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136d0:	2300      	movs	r3, #0
 80136d2:	8003      	strh	r3, [r0, #0]
 80136d4:	8043      	strh	r3, [r0, #2]
 80136d6:	8083      	strh	r3, [r0, #4]
 80136d8:	80c3      	strh	r3, [r0, #6]
 80136da:	e7f7      	b.n	80136cc <_ZN8touchgfx4RectaNERKS0_+0x78>

080136dc <_ZNK8touchgfx4Rect7isEmptyEv>:
 80136dc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80136e0:	b12b      	cbz	r3, 80136ee <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 80136e2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80136e6:	fab0 f080 	clz	r0, r0
 80136ea:	0940      	lsrs	r0, r0, #5
 80136ec:	4770      	bx	lr
 80136ee:	2001      	movs	r0, #1
 80136f0:	4770      	bx	lr

080136f2 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80136f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136f6:	2300      	movs	r3, #0
 80136f8:	4604      	mov	r4, r0
 80136fa:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80136fc:	8003      	strh	r3, [r0, #0]
 80136fe:	8043      	strh	r3, [r0, #2]
 8013700:	8083      	strh	r3, [r0, #4]
 8013702:	80c3      	strh	r3, [r0, #6]
 8013704:	2d00      	cmp	r5, #0
 8013706:	d040      	beq.n	801378a <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8013708:	1d28      	adds	r0, r5, #4
 801370a:	f7ff ffe7 	bl	80136dc <_ZNK8touchgfx4Rect7isEmptyEv>
 801370e:	b988      	cbnz	r0, 8013734 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8013710:	4620      	mov	r0, r4
 8013712:	f7ff ffe3 	bl	80136dc <_ZNK8touchgfx4Rect7isEmptyEv>
 8013716:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801371a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801371e:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8013722:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8013726:	b138      	cbz	r0, 8013738 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8013728:	8022      	strh	r2, [r4, #0]
 801372a:	8063      	strh	r3, [r4, #2]
 801372c:	f8a4 e004 	strh.w	lr, [r4, #4]
 8013730:	f8a4 c006 	strh.w	ip, [r4, #6]
 8013734:	69ad      	ldr	r5, [r5, #24]
 8013736:	e7e5      	b.n	8013704 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8013738:	f9b4 0000 	ldrsh.w	r0, [r4]
 801373c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013740:	4290      	cmp	r0, r2
 8013742:	4607      	mov	r7, r0
 8013744:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8013748:	460e      	mov	r6, r1
 801374a:	bfa8      	it	ge
 801374c:	4617      	movge	r7, r2
 801374e:	4299      	cmp	r1, r3
 8013750:	4472      	add	r2, lr
 8013752:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8013756:	bfa8      	it	ge
 8013758:	461e      	movge	r6, r3
 801375a:	4440      	add	r0, r8
 801375c:	4471      	add	r1, lr
 801375e:	4463      	add	r3, ip
 8013760:	b200      	sxth	r0, r0
 8013762:	8027      	strh	r7, [r4, #0]
 8013764:	b212      	sxth	r2, r2
 8013766:	8066      	strh	r6, [r4, #2]
 8013768:	b209      	sxth	r1, r1
 801376a:	b21b      	sxth	r3, r3
 801376c:	4290      	cmp	r0, r2
 801376e:	bfac      	ite	ge
 8013770:	ebc7 0200 	rsbge	r2, r7, r0
 8013774:	ebc7 0202 	rsblt	r2, r7, r2
 8013778:	4299      	cmp	r1, r3
 801377a:	bfac      	ite	ge
 801377c:	ebc6 0301 	rsbge	r3, r6, r1
 8013780:	ebc6 0303 	rsblt	r3, r6, r3
 8013784:	80a2      	strh	r2, [r4, #4]
 8013786:	80e3      	strh	r3, [r4, #6]
 8013788:	e7d4      	b.n	8013734 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801378a:	4620      	mov	r0, r4
 801378c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013790 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8013790:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013794:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8013798:	b383      	cbz	r3, 80137fc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801379a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801379c:	b374      	cbz	r4, 80137fc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801379e:	f9b1 5000 	ldrsh.w	r5, [r1]
 80137a2:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80137a6:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80137aa:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80137ae:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80137b2:	b303      	cbz	r3, 80137f6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80137b4:	4668      	mov	r0, sp
 80137b6:	1d21      	adds	r1, r4, #4
 80137b8:	f8ad 5000 	strh.w	r5, [sp]
 80137bc:	f8ad 6002 	strh.w	r6, [sp, #2]
 80137c0:	f8ad 7004 	strh.w	r7, [sp, #4]
 80137c4:	f8ad 8006 	strh.w	r8, [sp, #6]
 80137c8:	f7ff ff44 	bl	8013654 <_ZN8touchgfx4RectaNERKS0_>
 80137cc:	4668      	mov	r0, sp
 80137ce:	f7ff ff85 	bl	80136dc <_ZNK8touchgfx4Rect7isEmptyEv>
 80137d2:	b980      	cbnz	r0, 80137f6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80137d4:	f8bd 3000 	ldrh.w	r3, [sp]
 80137d8:	4669      	mov	r1, sp
 80137da:	88a2      	ldrh	r2, [r4, #4]
 80137dc:	4620      	mov	r0, r4
 80137de:	1a9b      	subs	r3, r3, r2
 80137e0:	88e2      	ldrh	r2, [r4, #6]
 80137e2:	f8ad 3000 	strh.w	r3, [sp]
 80137e6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80137ea:	1a9b      	subs	r3, r3, r2
 80137ec:	f8ad 3002 	strh.w	r3, [sp, #2]
 80137f0:	6823      	ldr	r3, [r4, #0]
 80137f2:	689b      	ldr	r3, [r3, #8]
 80137f4:	4798      	blx	r3
 80137f6:	69a4      	ldr	r4, [r4, #24]
 80137f8:	2c00      	cmp	r4, #0
 80137fa:	d1d8      	bne.n	80137ae <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80137fc:	b002      	add	sp, #8
 80137fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013802 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8013802:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013804:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8013808:	460d      	mov	r5, r1
 801380a:	4616      	mov	r6, r2
 801380c:	b323      	cbz	r3, 8013858 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801380e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8013810:	b314      	cbz	r4, 8013858 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8013812:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8013816:	b1eb      	cbz	r3, 8013854 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8013818:	6828      	ldr	r0, [r5, #0]
 801381a:	466b      	mov	r3, sp
 801381c:	6869      	ldr	r1, [r5, #4]
 801381e:	c303      	stmia	r3!, {r0, r1}
 8013820:	4668      	mov	r0, sp
 8013822:	1d21      	adds	r1, r4, #4
 8013824:	f7ff ff16 	bl	8013654 <_ZN8touchgfx4RectaNERKS0_>
 8013828:	4668      	mov	r0, sp
 801382a:	f7ff ff57 	bl	80136dc <_ZNK8touchgfx4Rect7isEmptyEv>
 801382e:	b988      	cbnz	r0, 8013854 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8013830:	f8bd 3000 	ldrh.w	r3, [sp]
 8013834:	4669      	mov	r1, sp
 8013836:	88a2      	ldrh	r2, [r4, #4]
 8013838:	4620      	mov	r0, r4
 801383a:	1a9b      	subs	r3, r3, r2
 801383c:	88e2      	ldrh	r2, [r4, #6]
 801383e:	f8ad 3000 	strh.w	r3, [sp]
 8013842:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013846:	1a9b      	subs	r3, r3, r2
 8013848:	4632      	mov	r2, r6
 801384a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801384e:	6823      	ldr	r3, [r4, #0]
 8013850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013852:	4798      	blx	r3
 8013854:	69a4      	ldr	r4, [r4, #24]
 8013856:	e7db      	b.n	8013810 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8013858:	b002      	add	sp, #8
 801385a:	bd70      	pop	{r4, r5, r6, pc}

0801385c <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
 801385c:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
 8013860:	4770      	bx	lr

08013862 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
 8013862:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
 8013866:	4770      	bx	lr

08013868 <_ZNK8touchgfx6Slider11getMinValueEv>:
 8013868:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 801386a:	4770      	bx	lr

0801386c <_ZNK8touchgfx6Slider11getMaxValueEv>:
 801386c:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 801386e:	4770      	bx	lr

08013870 <_ZN8touchgfx6SliderD1Ev>:
 8013870:	4770      	bx	lr

08013872 <_ZN8touchgfx6Slider8setValueEi>:
 8013872:	b570      	push	{r4, r5, r6, lr}
 8013874:	6803      	ldr	r3, [r0, #0]
 8013876:	4604      	mov	r4, r0
 8013878:	e9d3 532a 	ldrd	r5, r3, [r3, #168]	; 0xa8
 801387c:	4798      	blx	r3
 801387e:	4601      	mov	r1, r0
 8013880:	462b      	mov	r3, r5
 8013882:	4620      	mov	r0, r4
 8013884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013888:	4718      	bx	r3

0801388a <_ZNK8touchgfx6Slider15valueToPositionEi>:
 801388a:	b538      	push	{r3, r4, r5, lr}
 801388c:	e9d0 340d 	ldrd	r3, r4, [r0, #52]	; 0x34
 8013890:	4605      	mov	r5, r0
 8013892:	428c      	cmp	r4, r1
 8013894:	bfa8      	it	ge
 8013896:	460c      	movge	r4, r1
 8013898:	429c      	cmp	r4, r3
 801389a:	bfac      	ite	ge
 801389c:	ebc3 0404 	rsbge	r4, r3, r4
 80138a0:	ebc3 0403 	rsblt	r4, r3, r3
 80138a4:	6803      	ldr	r3, [r0, #0]
 80138a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80138aa:	4798      	blx	r3
 80138ac:	682b      	ldr	r3, [r5, #0]
 80138ae:	fb00 4404 	mla	r4, r0, r4, r4
 80138b2:	4628      	mov	r0, r5
 80138b4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80138b8:	4798      	blx	r3
 80138ba:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 80138be:	f9b5 30ec 	ldrsh.w	r3, [r5, #236]	; 0xec
 80138c2:	2a01      	cmp	r2, #1
 80138c4:	fb94 f0f0 	sdiv	r0, r4, r0
 80138c8:	bf08      	it	eq
 80138ca:	f9b5 20ee 	ldrsheq.w	r2, [r5, #238]	; 0xee
 80138ce:	4418      	add	r0, r3
 80138d0:	bf04      	itt	eq
 80138d2:	1a10      	subeq	r0, r2, r0
 80138d4:	18c0      	addeq	r0, r0, r3
 80138d6:	b200      	sxth	r0, r0
 80138d8:	bd38      	pop	{r3, r4, r5, pc}

080138da <_ZNK8touchgfx6Slider15positionToValueEs>:
 80138da:	b570      	push	{r4, r5, r6, lr}
 80138dc:	f9b0 30ec 	ldrsh.w	r3, [r0, #236]	; 0xec
 80138e0:	4605      	mov	r5, r0
 80138e2:	460c      	mov	r4, r1
 80138e4:	428b      	cmp	r3, r1
 80138e6:	d109      	bne.n	80138fc <_ZNK8touchgfx6Slider15positionToValueEs+0x22>
 80138e8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80138ea:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80138ee:	2b01      	cmp	r3, #1
 80138f0:	bf01      	itttt	eq
 80138f2:	6bab      	ldreq	r3, [r5, #56]	; 0x38
 80138f4:	1a18      	subeq	r0, r3, r0
 80138f6:	6b6b      	ldreq	r3, [r5, #52]	; 0x34
 80138f8:	18c0      	addeq	r0, r0, r3
 80138fa:	bd70      	pop	{r4, r5, r6, pc}
 80138fc:	f9b0 30ee 	ldrsh.w	r3, [r0, #238]	; 0xee
 8013900:	428b      	cmp	r3, r1
 8013902:	d101      	bne.n	8013908 <_ZNK8touchgfx6Slider15positionToValueEs+0x2e>
 8013904:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8013906:	e7f0      	b.n	80138ea <_ZNK8touchgfx6Slider15positionToValueEs+0x10>
 8013908:	6803      	ldr	r3, [r0, #0]
 801390a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801390e:	4798      	blx	r3
 8013910:	682b      	ldr	r3, [r5, #0]
 8013912:	f9b5 10ec 	ldrsh.w	r1, [r5, #236]	; 0xec
 8013916:	4606      	mov	r6, r0
 8013918:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801391c:	4628      	mov	r0, r5
 801391e:	1a64      	subs	r4, r4, r1
 8013920:	4798      	blx	r3
 8013922:	2102      	movs	r1, #2
 8013924:	682b      	ldr	r3, [r5, #0]
 8013926:	fb96 f6f1 	sdiv	r6, r6, r1
 801392a:	fb00 6404 	mla	r4, r0, r4, r6
 801392e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8013932:	4628      	mov	r0, r5
 8013934:	4798      	blx	r3
 8013936:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8013938:	fb94 f0f0 	sdiv	r0, r4, r0
 801393c:	4418      	add	r0, r3
 801393e:	e7d4      	b.n	80138ea <_ZNK8touchgfx6Slider15positionToValueEs+0x10>

08013940 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 8013940:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8013944:	2302      	movs	r3, #2
 8013946:	b92a      	cbnz	r2, 8013954 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x14>
 8013948:	f9b0 009c 	ldrsh.w	r0, [r0, #156]	; 0x9c
 801394c:	fb90 f0f3 	sdiv	r0, r0, r3
 8013950:	b280      	uxth	r0, r0
 8013952:	4770      	bx	lr
 8013954:	f9b0 009e 	ldrsh.w	r0, [r0, #158]	; 0x9e
 8013958:	e7f8      	b.n	801394c <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

0801395a <_ZN8touchgfx6Slider13setValueRangeEii>:
 801395a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801395c:	428b      	cmp	r3, r1
 801395e:	b410      	push	{r4}
 8013960:	db09      	blt.n	8013976 <_ZN8touchgfx6Slider13setValueRangeEii+0x1c>
 8013962:	4293      	cmp	r3, r2
 8013964:	bfa8      	it	ge
 8013966:	4613      	movge	r3, r2
 8013968:	6804      	ldr	r4, [r0, #0]
 801396a:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
 801396e:	46a4      	mov	ip, r4
 8013970:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013974:	4760      	bx	ip
 8013976:	460b      	mov	r3, r1
 8013978:	e7f6      	b.n	8013968 <_ZN8touchgfx6Slider13setValueRangeEii+0xe>

0801397a <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 801397a:	f9b0 20ee 	ldrsh.w	r2, [r0, #238]	; 0xee
 801397e:	f9b0 00ec 	ldrsh.w	r0, [r0, #236]	; 0xec
 8013982:	1a10      	subs	r0, r2, r0
 8013984:	4770      	bx	lr

08013986 <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 8013986:	e9d0 020d 	ldrd	r0, r2, [r0, #52]	; 0x34
 801398a:	1a10      	subs	r0, r2, r0
 801398c:	4770      	bx	lr

0801398e <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 801398e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013992:	f9b0 60ec 	ldrsh.w	r6, [r0, #236]	; 0xec
 8013996:	4604      	mov	r4, r0
 8013998:	3094      	adds	r0, #148	; 0x94
 801399a:	428e      	cmp	r6, r1
 801399c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80139a0:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
 80139a4:	bfb8      	it	lt
 80139a6:	460e      	movlt	r6, r1
 80139a8:	f9b0 105a 	ldrsh.w	r1, [r0, #90]	; 0x5a
 80139ac:	428e      	cmp	r6, r1
 80139ae:	bfa8      	it	ge
 80139b0:	460e      	movge	r6, r1
 80139b2:	fa1f f886 	uxth.w	r8, r6
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d132      	bne.n	8013a20 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x92>
 80139ba:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 80139be:	4631      	mov	r1, r6
 80139c0:	f7f8 fc3f 	bl	800c242 <_ZN8touchgfx8Drawable6moveToEss>
 80139c4:	4638      	mov	r0, r7
 80139c6:	f004 f889 	bl	8017adc <_ZNK8touchgfx8Drawable10invalidateEv>
 80139ca:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
 80139ce:	6823      	ldr	r3, [r4, #0]
 80139d0:	4620      	mov	r0, r4
 80139d2:	eba8 0802 	sub.w	r8, r8, r2
 80139d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80139da:	fa1f f888 	uxth.w	r8, r8
 80139de:	4798      	blx	r3
 80139e0:	4480      	add	r8, r0
 80139e2:	f8a4 80c8 	strh.w	r8, [r4, #200]	; 0xc8
 80139e6:	4638      	mov	r0, r7
 80139e8:	f004 f878 	bl	8017adc <_ZNK8touchgfx8Drawable10invalidateEv>
 80139ec:	6823      	ldr	r3, [r4, #0]
 80139ee:	4631      	mov	r1, r6
 80139f0:	4620      	mov	r0, r4
 80139f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80139f6:	4798      	blx	r3
 80139f8:	6320      	str	r0, [r4, #48]	; 0x30
 80139fa:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 80139fe:	2800      	cmp	r0, #0
 8013a00:	d03c      	beq.n	8013a7c <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xee>
 8013a02:	6803      	ldr	r3, [r0, #0]
 8013a04:	68db      	ldr	r3, [r3, #12]
 8013a06:	4798      	blx	r3
 8013a08:	2800      	cmp	r0, #0
 8013a0a:	d037      	beq.n	8013a7c <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xee>
 8013a0c:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 8013a10:	4621      	mov	r1, r4
 8013a12:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8013a14:	6803      	ldr	r3, [r0, #0]
 8013a16:	689b      	ldr	r3, [r3, #8]
 8013a18:	b003      	add	sp, #12
 8013a1a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a1e:	4718      	bx	r3
 8013a20:	4632      	mov	r2, r6
 8013a22:	f9b4 1098 	ldrsh.w	r1, [r4, #152]	; 0x98
 8013a26:	f7f8 fc0c 	bl	800c242 <_ZN8touchgfx8Drawable6moveToEss>
 8013a2a:	4638      	mov	r0, r7
 8013a2c:	f004 f856 	bl	8017adc <_ZNK8touchgfx8Drawable10invalidateEv>
 8013a30:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 8013a34:	f8b4 5042 	ldrh.w	r5, [r4, #66]	; 0x42
 8013a38:	6823      	ldr	r3, [r4, #0]
 8013a3a:	4405      	add	r5, r0
 8013a3c:	4620      	mov	r0, r4
 8013a3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013a42:	b2ad      	uxth	r5, r5
 8013a44:	4798      	blx	r3
 8013a46:	6823      	ldr	r3, [r4, #0]
 8013a48:	eba5 0508 	sub.w	r5, r5, r8
 8013a4c:	f9b4 90c4 	ldrsh.w	r9, [r4, #196]	; 0xc4
 8013a50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013a54:	1a2d      	subs	r5, r5, r0
 8013a56:	4620      	mov	r0, r4
 8013a58:	4798      	blx	r3
 8013a5a:	4440      	add	r0, r8
 8013a5c:	b2ad      	uxth	r5, r5
 8013a5e:	f9b4 30c8 	ldrsh.w	r3, [r4, #200]	; 0xc8
 8013a62:	4649      	mov	r1, r9
 8013a64:	b22a      	sxth	r2, r5
 8013a66:	9200      	str	r2, [sp, #0]
 8013a68:	b202      	sxth	r2, r0
 8013a6a:	4638      	mov	r0, r7
 8013a6c:	f7f6 fa8e 	bl	8009f8c <_ZN8touchgfx8Drawable11setPositionEssss>
 8013a70:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
 8013a74:	1a2d      	subs	r5, r5, r0
 8013a76:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
 8013a7a:	e7b4      	b.n	80139e6 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x58>
 8013a7c:	b003      	add	sp, #12
 8013a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08013a82 <_ZN8touchgfx6SliderD0Ev>:
 8013a82:	b510      	push	{r4, lr}
 8013a84:	4604      	mov	r4, r0
 8013a86:	21fc      	movs	r1, #252	; 0xfc
 8013a88:	f00f fae1 	bl	802304e <_ZdlPvj>
 8013a8c:	4620      	mov	r0, r4
 8013a8e:	bd10      	pop	{r4, pc}

08013a90 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>:
 8013a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a94:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8013a98:	4604      	mov	r4, r0
 8013a9a:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 8013a9e:	4689      	mov	r9, r1
 8013aa0:	4616      	mov	r6, r2
 8013aa2:	461d      	mov	r5, r3
 8013aa4:	45b8      	cmp	r8, r7
 8013aa6:	d305      	bcc.n	8013ab4 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x24>
 8013aa8:	4b28      	ldr	r3, [pc, #160]	; (8013b4c <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xbc>)
 8013aaa:	2147      	movs	r1, #71	; 0x47
 8013aac:	4a28      	ldr	r2, [pc, #160]	; (8013b50 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xc0>)
 8013aae:	4829      	ldr	r0, [pc, #164]	; (8013b54 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xc4>)
 8013ab0:	f00f faf8 	bl	80230a4 <__assert_func>
 8013ab4:	f04f 0a00 	mov.w	sl, #0
 8013ab8:	b213      	sxth	r3, r2
 8013aba:	fa0f fb81 	sxth.w	fp, r1
 8013abe:	303c      	adds	r0, #60	; 0x3c
 8013ac0:	f800 ac10 	strb.w	sl, [r0, #-16]
 8013ac4:	461a      	mov	r2, r3
 8013ac6:	4659      	mov	r1, fp
 8013ac8:	9301      	str	r3, [sp, #4]
 8013aca:	f7f8 fb2f 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
 8013ace:	9b01      	ldr	r3, [sp, #4]
 8013ad0:	4659      	mov	r1, fp
 8013ad2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8013ad6:	461a      	mov	r2, r3
 8013ad8:	f7f8 fb28 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
 8013adc:	4652      	mov	r2, sl
 8013ade:	4651      	mov	r1, sl
 8013ae0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8013ae4:	f7f8 fb22 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
 8013ae8:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 8013aec:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 8013af0:	4620      	mov	r0, r4
 8013af2:	4449      	add	r1, r9
 8013af4:	f8a4 80ec 	strh.w	r8, [r4, #236]	; 0xec
 8013af8:	f8a4 70ee 	strh.w	r7, [r4, #238]	; 0xee
 8013afc:	b28b      	uxth	r3, r1
 8013afe:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8013b02:	4439      	add	r1, r7
 8013b04:	b289      	uxth	r1, r1
 8013b06:	428b      	cmp	r3, r1
 8013b08:	bf88      	it	hi
 8013b0a:	b219      	sxthhi	r1, r3
 8013b0c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8013b10:	bf98      	it	ls
 8013b12:	b209      	sxthls	r1, r1
 8013b14:	441e      	add	r6, r3
 8013b16:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
 8013b1a:	441d      	add	r5, r3
 8013b1c:	b2b6      	uxth	r6, r6
 8013b1e:	6823      	ldr	r3, [r4, #0]
 8013b20:	b2ad      	uxth	r5, r5
 8013b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b24:	42ae      	cmp	r6, r5
 8013b26:	bf8c      	ite	hi
 8013b28:	b235      	sxthhi	r5, r6
 8013b2a:	b22d      	sxthls	r5, r5
 8013b2c:	4798      	blx	r3
 8013b2e:	6823      	ldr	r3, [r4, #0]
 8013b30:	4629      	mov	r1, r5
 8013b32:	4620      	mov	r0, r4
 8013b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b36:	4798      	blx	r3
 8013b38:	6823      	ldr	r3, [r4, #0]
 8013b3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013b3c:	4620      	mov	r0, r4
 8013b3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013b42:	b003      	add	sp, #12
 8013b44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b48:	4718      	bx	r3
 8013b4a:	bf00      	nop
 8013b4c:	08026eec 	.word	0x08026eec
 8013b50:	08027166 	.word	0x08027166
 8013b54:	08026f60 	.word	0x08026f60

08013b58 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>:
 8013b58:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b5c:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 8013b60:	4604      	mov	r4, r0
 8013b62:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 8013b66:	4689      	mov	r9, r1
 8013b68:	4690      	mov	r8, r2
 8013b6a:	461d      	mov	r5, r3
 8013b6c:	42b7      	cmp	r7, r6
 8013b6e:	d305      	bcc.n	8013b7c <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x24>
 8013b70:	4b25      	ldr	r3, [pc, #148]	; (8013c08 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb0>)
 8013b72:	2163      	movs	r1, #99	; 0x63
 8013b74:	4a25      	ldr	r2, [pc, #148]	; (8013c0c <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb4>)
 8013b76:	4826      	ldr	r0, [pc, #152]	; (8013c10 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb8>)
 8013b78:	f00f fa94 	bl	80230a4 <__assert_func>
 8013b7c:	2301      	movs	r3, #1
 8013b7e:	fa0f fa81 	sxth.w	sl, r1
 8013b82:	fa0f fb82 	sxth.w	fp, r2
 8013b86:	303c      	adds	r0, #60	; 0x3c
 8013b88:	f800 3c10 	strb.w	r3, [r0, #-16]
 8013b8c:	4651      	mov	r1, sl
 8013b8e:	465a      	mov	r2, fp
 8013b90:	f7f8 facc 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
 8013b94:	465a      	mov	r2, fp
 8013b96:	4651      	mov	r1, sl
 8013b98:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8013b9c:	f7f8 fac6 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
 8013ba0:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 8013ba4:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 8013ba8:	4620      	mov	r0, r4
 8013baa:	4489      	add	r9, r1
 8013bac:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8013bb0:	6823      	ldr	r3, [r4, #0]
 8013bb2:	4429      	add	r1, r5
 8013bb4:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
 8013bb8:	fa1f f989 	uxth.w	r9, r9
 8013bbc:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
 8013bc0:	44a8      	add	r8, r5
 8013bc2:	f8b4 509e 	ldrh.w	r5, [r4, #158]	; 0x9e
 8013bc6:	b289      	uxth	r1, r1
 8013bc8:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
 8013bcc:	4435      	add	r5, r6
 8013bce:	fa1f f888 	uxth.w	r8, r8
 8013bd2:	4589      	cmp	r9, r1
 8013bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bd6:	b2ad      	uxth	r5, r5
 8013bd8:	bf8c      	ite	hi
 8013bda:	fa0f f189 	sxthhi.w	r1, r9
 8013bde:	b209      	sxthls	r1, r1
 8013be0:	45a8      	cmp	r8, r5
 8013be2:	bf8c      	ite	hi
 8013be4:	fa0f f588 	sxthhi.w	r5, r8
 8013be8:	b22d      	sxthls	r5, r5
 8013bea:	4798      	blx	r3
 8013bec:	6823      	ldr	r3, [r4, #0]
 8013bee:	4629      	mov	r1, r5
 8013bf0:	4620      	mov	r0, r4
 8013bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013bf4:	4798      	blx	r3
 8013bf6:	6823      	ldr	r3, [r4, #0]
 8013bf8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013bfa:	4620      	mov	r0, r4
 8013bfc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013c00:	b001      	add	sp, #4
 8013c02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c06:	4718      	bx	r3
 8013c08:	08026e7a 	.word	0x08026e7a
 8013c0c:	08027101 	.word	0x08027101
 8013c10:	08026f60 	.word	0x08026f60

08013c14 <_ZN8touchgfx6Slider13setValueRangeEiii>:
 8013c14:	4291      	cmp	r1, r2
 8013c16:	b510      	push	{r4, lr}
 8013c18:	db06      	blt.n	8013c28 <_ZN8touchgfx6Slider13setValueRangeEiii+0x14>
 8013c1a:	4b08      	ldr	r3, [pc, #32]	; (8013c3c <_ZN8touchgfx6Slider13setValueRangeEiii+0x28>)
 8013c1c:	f240 110b 	movw	r1, #267	; 0x10b
 8013c20:	4a07      	ldr	r2, [pc, #28]	; (8013c40 <_ZN8touchgfx6Slider13setValueRangeEiii+0x2c>)
 8013c22:	4808      	ldr	r0, [pc, #32]	; (8013c44 <_ZN8touchgfx6Slider13setValueRangeEiii+0x30>)
 8013c24:	f00f fa3e 	bl	80230a4 <__assert_func>
 8013c28:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 8013c2c:	6802      	ldr	r2, [r0, #0]
 8013c2e:	4619      	mov	r1, r3
 8013c30:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 8013c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c38:	4710      	bx	r2
 8013c3a:	bf00      	nop
 8013c3c:	08026e22 	.word	0x08026e22
 8013c40:	080270c5 	.word	0x080270c5
 8013c44:	08026f60 	.word	0x08026f60

08013c48 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 8013c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c4c:	790b      	ldrb	r3, [r1, #4]
 8013c4e:	4604      	mov	r4, r0
 8013c50:	460d      	mov	r5, r1
 8013c52:	b323      	cbz	r3, 8013c9e <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x56>
 8013c54:	2b01      	cmp	r3, #1
 8013c56:	d135      	bne.n	8013cc4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8013c58:	6823      	ldr	r3, [r4, #0]
 8013c5a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8013c5e:	f8d3 70a8 	ldr.w	r7, [r3, #168]	; 0xa8
 8013c62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013c66:	2a00      	cmp	r2, #0
 8013c68:	d12a      	bne.n	8013cc0 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x78>
 8013c6a:	88ee      	ldrh	r6, [r5, #6]
 8013c6c:	4620      	mov	r0, r4
 8013c6e:	4798      	blx	r3
 8013c70:	1a31      	subs	r1, r6, r0
 8013c72:	4620      	mov	r0, r4
 8013c74:	b209      	sxth	r1, r1
 8013c76:	47b8      	blx	r7
 8013c78:	792b      	ldrb	r3, [r5, #4]
 8013c7a:	2b01      	cmp	r3, #1
 8013c7c:	d122      	bne.n	8013cc4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8013c7e:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 8013c82:	b1f8      	cbz	r0, 8013cc4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8013c84:	6803      	ldr	r3, [r0, #0]
 8013c86:	68db      	ldr	r3, [r3, #12]
 8013c88:	4798      	blx	r3
 8013c8a:	b1d8      	cbz	r0, 8013cc4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8013c8c:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 8013c90:	4621      	mov	r1, r4
 8013c92:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8013c94:	6803      	ldr	r3, [r0, #0]
 8013c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c9a:	689b      	ldr	r3, [r3, #8]
 8013c9c:	4718      	bx	r3
 8013c9e:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 8013ca2:	2800      	cmp	r0, #0
 8013ca4:	d0d8      	beq.n	8013c58 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8013ca6:	6803      	ldr	r3, [r0, #0]
 8013ca8:	68db      	ldr	r3, [r3, #12]
 8013caa:	4798      	blx	r3
 8013cac:	2800      	cmp	r0, #0
 8013cae:	d0d3      	beq.n	8013c58 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8013cb0:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 8013cb4:	4621      	mov	r1, r4
 8013cb6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8013cb8:	6803      	ldr	r3, [r0, #0]
 8013cba:	689b      	ldr	r3, [r3, #8]
 8013cbc:	4798      	blx	r3
 8013cbe:	e7cb      	b.n	8013c58 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8013cc0:	892e      	ldrh	r6, [r5, #8]
 8013cc2:	e7d3      	b.n	8013c6c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x24>
 8013cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013cc8 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 8013cc8:	b570      	push	{r4, r5, r6, lr}
 8013cca:	6803      	ldr	r3, [r0, #0]
 8013ccc:	4604      	mov	r4, r0
 8013cce:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8013cd2:	f8d3 60a8 	ldr.w	r6, [r3, #168]	; 0xa8
 8013cd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013cda:	b942      	cbnz	r2, 8013cee <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x26>
 8013cdc:	894d      	ldrh	r5, [r1, #10]
 8013cde:	4798      	blx	r3
 8013ce0:	1a29      	subs	r1, r5, r0
 8013ce2:	4633      	mov	r3, r6
 8013ce4:	4620      	mov	r0, r4
 8013ce6:	b209      	sxth	r1, r1
 8013ce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013cec:	4718      	bx	r3
 8013cee:	898d      	ldrh	r5, [r1, #12]
 8013cf0:	e7f5      	b.n	8013cde <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x16>
	...

08013cf4 <_ZN8touchgfx6SliderC1Ev>:
 8013cf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cf8:	4604      	mov	r4, r0
 8013cfa:	2500      	movs	r5, #0
 8013cfc:	f7f8 faee 	bl	800c2dc <_ZN8touchgfx9ContainerC1Ev>
 8013d00:	ae02      	add	r6, sp, #8
 8013d02:	4b25      	ldr	r3, [pc, #148]	; (8013d98 <_ZN8touchgfx6SliderC1Ev+0xa4>)
 8013d04:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8013d08:	f04f 0b01 	mov.w	fp, #1
 8013d0c:	f104 093c 	add.w	r9, r4, #60	; 0x3c
 8013d10:	f104 0a68 	add.w	sl, r4, #104	; 0x68
 8013d14:	6023      	str	r3, [r4, #0]
 8013d16:	f826 7d04 	strh.w	r7, [r6, #-4]!
 8013d1a:	4648      	mov	r0, r9
 8013d1c:	4631      	mov	r1, r6
 8013d1e:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 8013d22:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
 8013d26:	f104 0894 	add.w	r8, r4, #148	; 0x94
 8013d2a:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 8013d2e:	f7f8 fb65 	bl	800c3fc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013d32:	4631      	mov	r1, r6
 8013d34:	4650      	mov	r0, sl
 8013d36:	f8ad 7004 	strh.w	r7, [sp, #4]
 8013d3a:	f7f8 fb5f 	bl	800c3fc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013d3e:	4631      	mov	r1, r6
 8013d40:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
 8013d44:	4640      	mov	r0, r8
 8013d46:	f8ad 7004 	strh.w	r7, [sp, #4]
 8013d4a:	f7f8 fb57 	bl	800c3fc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013d4e:	4630      	mov	r0, r6
 8013d50:	f7f8 fac4 	bl	800c2dc <_ZN8touchgfx9ContainerC1Ev>
 8013d54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013d58:	4651      	mov	r1, sl
 8013d5a:	4630      	mov	r0, r6
 8013d5c:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
 8013d60:	e9c4 353b 	strd	r3, r5, [r4, #236]	; 0xec
 8013d64:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
 8013d68:	f7ff fc44 	bl	80135f4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013d6c:	4649      	mov	r1, r9
 8013d6e:	4620      	mov	r0, r4
 8013d70:	f7ff fc40 	bl	80135f4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013d74:	4631      	mov	r1, r6
 8013d76:	4620      	mov	r0, r4
 8013d78:	f7ff fc3c 	bl	80135f4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013d7c:	4641      	mov	r1, r8
 8013d7e:	4620      	mov	r0, r4
 8013d80:	f7ff fc38 	bl	80135f4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013d84:	4620      	mov	r0, r4
 8013d86:	2264      	movs	r2, #100	; 0x64
 8013d88:	4629      	mov	r1, r5
 8013d8a:	f7ff fde6 	bl	801395a <_ZN8touchgfx6Slider13setValueRangeEii>
 8013d8e:	4620      	mov	r0, r4
 8013d90:	b003      	add	sp, #12
 8013d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d96:	bf00      	nop
 8013d98:	08026f98 	.word	0x08026f98

08013d9c <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 8013d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013da0:	4615      	mov	r5, r2
 8013da2:	4604      	mov	r4, r0
 8013da4:	4608      	mov	r0, r1
 8013da6:	460e      	mov	r6, r1
 8013da8:	461f      	mov	r7, r3
 8013daa:	f005 fc29 	bl	8019600 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013dae:	4680      	mov	r8, r0
 8013db0:	4628      	mov	r0, r5
 8013db2:	f005 fc25 	bl	8019600 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013db6:	4580      	cmp	r8, r0
 8013db8:	d005      	beq.n	8013dc6 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x2a>
 8013dba:	4b14      	ldr	r3, [pc, #80]	; (8013e0c <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x70>)
 8013dbc:	2137      	movs	r1, #55	; 0x37
 8013dbe:	4a14      	ldr	r2, [pc, #80]	; (8013e10 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x74>)
 8013dc0:	4814      	ldr	r0, [pc, #80]	; (8013e14 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x78>)
 8013dc2:	f00f f96f 	bl	80230a4 <__assert_func>
 8013dc6:	4630      	mov	r0, r6
 8013dc8:	f005 fc54 	bl	8019674 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013dcc:	4680      	mov	r8, r0
 8013dce:	4628      	mov	r0, r5
 8013dd0:	f005 fc50 	bl	8019674 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013dd4:	4580      	cmp	r8, r0
 8013dd6:	d1f0      	bne.n	8013dba <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x1e>
 8013dd8:	4631      	mov	r1, r6
 8013dda:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8013dde:	f002 f913 	bl	8016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8013de2:	4629      	mov	r1, r5
 8013de4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8013de8:	f002 f90e 	bl	8016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8013dec:	4639      	mov	r1, r7
 8013dee:	f104 0094 	add.w	r0, r4, #148	; 0x94
 8013df2:	f002 f909 	bl	8016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8013df6:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 8013dfa:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 8013dfe:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 8013e02:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
 8013e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e0a:	bf00      	nop
 8013e0c:	08026d43 	.word	0x08026d43
 8013e10:	08027058 	.word	0x08027058
 8013e14:	08026f60 	.word	0x08026f60

08013e18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8013e18:	6803      	ldr	r3, [r0, #0]
 8013e1a:	b513      	push	{r0, r1, r4, lr}
 8013e1c:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8013e20:	2300      	movs	r3, #0
 8013e22:	e9cd 3300 	strd	r3, r3, [sp]
 8013e26:	466b      	mov	r3, sp
 8013e28:	47a0      	blx	r4
 8013e2a:	b002      	add	sp, #8
 8013e2c:	bd10      	pop	{r4, pc}

08013e2e <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8013e2e:	2301      	movs	r3, #1
 8013e30:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8013e34:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8013e38:	4770      	bx	lr

08013e3a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8013e3a:	2301      	movs	r3, #1
 8013e3c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8013e40:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8013e44:	4770      	bx	lr

08013e46 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8013e46:	6843      	ldr	r3, [r0, #4]
 8013e48:	2201      	movs	r2, #1
 8013e4a:	725a      	strb	r2, [r3, #9]
 8013e4c:	6840      	ldr	r0, [r0, #4]
 8013e4e:	6803      	ldr	r3, [r0, #0]
 8013e50:	691b      	ldr	r3, [r3, #16]
 8013e52:	4718      	bx	r3

08013e54 <_ZN8touchgfx3HAL8flushDMAEv>:
 8013e54:	6840      	ldr	r0, [r0, #4]
 8013e56:	6803      	ldr	r3, [r0, #0]
 8013e58:	689b      	ldr	r3, [r3, #8]
 8013e5a:	4718      	bx	r3

08013e5c <_ZN8touchgfx3HAL10beginFrameEv>:
 8013e5c:	4b04      	ldr	r3, [pc, #16]	; (8013e70 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8013e5e:	781b      	ldrb	r3, [r3, #0]
 8013e60:	b123      	cbz	r3, 8013e6c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8013e62:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8013e66:	f080 0001 	eor.w	r0, r0, #1
 8013e6a:	4770      	bx	lr
 8013e6c:	2001      	movs	r0, #1
 8013e6e:	4770      	bx	lr
 8013e70:	2000b1aa 	.word	0x2000b1aa

08013e74 <_ZN8touchgfx3HAL8endFrameEv>:
 8013e74:	b510      	push	{r4, lr}
 8013e76:	4604      	mov	r4, r0
 8013e78:	6840      	ldr	r0, [r0, #4]
 8013e7a:	6803      	ldr	r3, [r0, #0]
 8013e7c:	689b      	ldr	r3, [r3, #8]
 8013e7e:	4798      	blx	r3
 8013e80:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8013e84:	b113      	cbz	r3, 8013e8c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8013e86:	2301      	movs	r3, #1
 8013e88:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8013e8c:	bd10      	pop	{r4, pc}

08013e8e <_ZN8touchgfx3HAL9taskEntryEv>:
 8013e8e:	b508      	push	{r3, lr}
 8013e90:	6803      	ldr	r3, [r0, #0]
 8013e92:	4604      	mov	r4, r0
 8013e94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013e96:	4798      	blx	r3
 8013e98:	6823      	ldr	r3, [r4, #0]
 8013e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013e9c:	4620      	mov	r0, r4
 8013e9e:	4798      	blx	r3
 8013ea0:	f7fd f9c6 	bl	8011230 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8013ea4:	6823      	ldr	r3, [r4, #0]
 8013ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ea8:	e7f8      	b.n	8013e9c <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08013eac <_ZN8touchgfx3HAL4tickEv>:
 8013eac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013eae:	6803      	ldr	r3, [r0, #0]
 8013eb0:	4604      	mov	r4, r0
 8013eb2:	4d5c      	ldr	r5, [pc, #368]	; (8014024 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8013eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013eb8:	4798      	blx	r3
 8013eba:	2800      	cmp	r0, #0
 8013ebc:	f000 8097 	beq.w	8013fee <_ZN8touchgfx3HAL4tickEv+0x142>
 8013ec0:	2001      	movs	r0, #1
 8013ec2:	2600      	movs	r6, #0
 8013ec4:	f7fc fe8c 	bl	8010be0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8013ec8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8013ecc:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8013ed0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013ed4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8013ed8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8013edc:	b133      	cbz	r3, 8013eec <_ZN8touchgfx3HAL4tickEv+0x40>
 8013ede:	6823      	ldr	r3, [r4, #0]
 8013ee0:	4620      	mov	r0, r4
 8013ee2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8013ee6:	4798      	blx	r3
 8013ee8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8013eec:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8013ef0:	2601      	movs	r6, #1
 8013ef2:	6862      	ldr	r2, [r4, #4]
 8013ef4:	f083 0301 	eor.w	r3, r3, #1
 8013ef8:	702e      	strb	r6, [r5, #0]
 8013efa:	7253      	strb	r3, [r2, #9]
 8013efc:	f003 f978 	bl	80171f0 <_ZN8touchgfx11Application11getInstanceEv>
 8013f00:	6803      	ldr	r3, [r0, #0]
 8013f02:	4631      	mov	r1, r6
 8013f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f06:	4798      	blx	r3
 8013f08:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8013f0c:	b90b      	cbnz	r3, 8013f12 <_ZN8touchgfx3HAL4tickEv+0x66>
 8013f0e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8013f12:	f003 f96d 	bl	80171f0 <_ZN8touchgfx11Application11getInstanceEv>
 8013f16:	6803      	ldr	r3, [r0, #0]
 8013f18:	695b      	ldr	r3, [r3, #20]
 8013f1a:	4798      	blx	r3
 8013f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f1e:	6803      	ldr	r3, [r0, #0]
 8013f20:	691b      	ldr	r3, [r3, #16]
 8013f22:	4798      	blx	r3
 8013f24:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8013f28:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8013f2c:	3b01      	subs	r3, #1
 8013f2e:	b2db      	uxtb	r3, r3
 8013f30:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013f34:	b10a      	cbz	r2, 8013f3a <_ZN8touchgfx3HAL4tickEv+0x8e>
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d1eb      	bne.n	8013f12 <_ZN8touchgfx3HAL4tickEv+0x66>
 8013f3a:	4a3b      	ldr	r2, [pc, #236]	; (8014028 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8013f3c:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8013f40:	7813      	ldrb	r3, [r2, #0]
 8013f42:	3301      	adds	r3, #1
 8013f44:	b25b      	sxtb	r3, r3
 8013f46:	4299      	cmp	r1, r3
 8013f48:	7013      	strb	r3, [r2, #0]
 8013f4a:	dc10      	bgt.n	8013f6e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	68e0      	ldr	r0, [r4, #12]
 8013f50:	a902      	add	r1, sp, #8
 8013f52:	7013      	strb	r3, [r2, #0]
 8013f54:	aa03      	add	r2, sp, #12
 8013f56:	6803      	ldr	r3, [r0, #0]
 8013f58:	68db      	ldr	r3, [r3, #12]
 8013f5a:	4798      	blx	r3
 8013f5c:	6823      	ldr	r3, [r4, #0]
 8013f5e:	2800      	cmp	r0, #0
 8013f60:	d051      	beq.n	8014006 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8013f62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013f66:	4620      	mov	r0, r4
 8013f68:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8013f6c:	4798      	blx	r3
 8013f6e:	2300      	movs	r3, #0
 8013f70:	6960      	ldr	r0, [r4, #20]
 8013f72:	f88d 3007 	strb.w	r3, [sp, #7]
 8013f76:	b158      	cbz	r0, 8013f90 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8013f78:	6803      	ldr	r3, [r0, #0]
 8013f7a:	f10d 0107 	add.w	r1, sp, #7
 8013f7e:	68db      	ldr	r3, [r3, #12]
 8013f80:	4798      	blx	r3
 8013f82:	b128      	cbz	r0, 8013f90 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8013f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f86:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013f8a:	6803      	ldr	r3, [r0, #0]
 8013f8c:	68db      	ldr	r3, [r3, #12]
 8013f8e:	4798      	blx	r3
 8013f90:	f104 001c 	add.w	r0, r4, #28
 8013f94:	f00d fbba 	bl	802170c <_ZN8touchgfx8Gestures4tickEv>
 8013f98:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8013f9c:	b30b      	cbz	r3, 8013fe2 <_ZN8touchgfx3HAL4tickEv+0x136>
 8013f9e:	6920      	ldr	r0, [r4, #16]
 8013fa0:	6803      	ldr	r3, [r0, #0]
 8013fa2:	691b      	ldr	r3, [r3, #16]
 8013fa4:	4798      	blx	r3
 8013fa6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013fa8:	4606      	mov	r6, r0
 8013faa:	b903      	cbnz	r3, 8013fae <_ZN8touchgfx3HAL4tickEv+0x102>
 8013fac:	6720      	str	r0, [r4, #112]	; 0x70
 8013fae:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013fb0:	4a1e      	ldr	r2, [pc, #120]	; (801402c <_ZN8touchgfx3HAL4tickEv+0x180>)
 8013fb2:	1af3      	subs	r3, r6, r3
 8013fb4:	4293      	cmp	r3, r2
 8013fb6:	d914      	bls.n	8013fe2 <_ZN8touchgfx3HAL4tickEv+0x136>
 8013fb8:	6920      	ldr	r0, [r4, #16]
 8013fba:	6803      	ldr	r3, [r0, #0]
 8013fbc:	699b      	ldr	r3, [r3, #24]
 8013fbe:	4798      	blx	r3
 8013fc0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013fc2:	2264      	movs	r2, #100	; 0x64
 8013fc4:	1af3      	subs	r3, r6, r3
 8013fc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8013fca:	fbb0 f0f3 	udiv	r0, r0, r3
 8013fce:	2800      	cmp	r0, #0
 8013fd0:	dc1e      	bgt.n	8014010 <_ZN8touchgfx3HAL4tickEv+0x164>
 8013fd2:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8013fd6:	6920      	ldr	r0, [r4, #16]
 8013fd8:	2100      	movs	r1, #0
 8013fda:	6803      	ldr	r3, [r0, #0]
 8013fdc:	69db      	ldr	r3, [r3, #28]
 8013fde:	4798      	blx	r3
 8013fe0:	6726      	str	r6, [r4, #112]	; 0x70
 8013fe2:	f003 f905 	bl	80171f0 <_ZN8touchgfx11Application11getInstanceEv>
 8013fe6:	6803      	ldr	r3, [r0, #0]
 8013fe8:	2100      	movs	r1, #0
 8013fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013fec:	4798      	blx	r3
 8013fee:	6823      	ldr	r3, [r4, #0]
 8013ff0:	4620      	mov	r0, r4
 8013ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013ff6:	4798      	blx	r3
 8013ff8:	2001      	movs	r0, #1
 8013ffa:	f7fc fdfc 	bl	8010bf6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8013ffe:	2300      	movs	r3, #0
 8014000:	702b      	strb	r3, [r5, #0]
 8014002:	b004      	add	sp, #16
 8014004:	bd70      	pop	{r4, r5, r6, pc}
 8014006:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801400a:	4620      	mov	r0, r4
 801400c:	4798      	blx	r3
 801400e:	e7ae      	b.n	8013f6e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8014010:	2863      	cmp	r0, #99	; 0x63
 8014012:	bfcb      	itete	gt
 8014014:	2300      	movgt	r3, #0
 8014016:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801401a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801401e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8014022:	e7d8      	b.n	8013fd6 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8014024:	2000b1b0 	.word	0x2000b1b0
 8014028:	2000b1b1 	.word	0x2000b1b1
 801402c:	05f5e100 	.word	0x05f5e100

08014030 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8014030:	f7fd b89e 	b.w	8011170 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08014034 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8014034:	6581      	str	r1, [r0, #88]	; 0x58
 8014036:	301c      	adds	r0, #28
 8014038:	f00d bb66 	b.w	8021708 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801403c <_ZN8touchgfx3HAL5touchEll>:
 801403c:	b530      	push	{r4, r5, lr}
 801403e:	b087      	sub	sp, #28
 8014040:	4604      	mov	r4, r0
 8014042:	a804      	add	r0, sp, #16
 8014044:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8014048:	f002 fe90 	bl	8016d6c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801404c:	9b04      	ldr	r3, [sp, #16]
 801404e:	a906      	add	r1, sp, #24
 8014050:	a803      	add	r0, sp, #12
 8014052:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014056:	9b05      	ldr	r3, [sp, #20]
 8014058:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801405c:	f002 fed4 	bl	8016e08 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8014060:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8014064:	f104 001c 	add.w	r0, r4, #28
 8014068:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801406c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8014070:	b189      	cbz	r1, 8014096 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8014072:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8014076:	9300      	str	r3, [sp, #0]
 8014078:	4613      	mov	r3, r2
 801407a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801407e:	462a      	mov	r2, r5
 8014080:	f00d fb52 	bl	8021728 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8014084:	b128      	cbz	r0, 8014092 <_ZN8touchgfx3HAL5touchEll+0x56>
 8014086:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801408a:	65e3      	str	r3, [r4, #92]	; 0x5c
 801408c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014090:	6623      	str	r3, [r4, #96]	; 0x60
 8014092:	b007      	add	sp, #28
 8014094:	bd30      	pop	{r4, r5, pc}
 8014096:	f00d fb8b 	bl	80217b0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801409a:	2301      	movs	r3, #1
 801409c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80140a0:	e7f1      	b.n	8014086 <_ZN8touchgfx3HAL5touchEll+0x4a>

080140a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80140a2:	b570      	push	{r4, r5, r6, lr}
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d050      	beq.n	801414a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80140a8:	ea81 0002 	eor.w	r0, r1, r2
 80140ac:	07c6      	lsls	r6, r0, #31
 80140ae:	d508      	bpl.n	80140c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80140b0:	3a01      	subs	r2, #1
 80140b2:	18cc      	adds	r4, r1, r3
 80140b4:	42a1      	cmp	r1, r4
 80140b6:	d048      	beq.n	801414a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80140b8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80140bc:	f801 0b01 	strb.w	r0, [r1], #1
 80140c0:	e7f8      	b.n	80140b4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80140c2:	07d5      	lsls	r5, r2, #31
 80140c4:	bf42      	ittt	mi
 80140c6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80140ca:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80140ce:	f801 0b01 	strbmi.w	r0, [r1], #1
 80140d2:	2b01      	cmp	r3, #1
 80140d4:	d915      	bls.n	8014102 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80140d6:	ea82 0001 	eor.w	r0, r2, r1
 80140da:	0784      	lsls	r4, r0, #30
 80140dc:	d02d      	beq.n	801413a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 80140de:	1e94      	subs	r4, r2, #2
 80140e0:	4608      	mov	r0, r1
 80140e2:	18ce      	adds	r6, r1, r3
 80140e4:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 80140e8:	f820 5b02 	strh.w	r5, [r0], #2
 80140ec:	1a35      	subs	r5, r6, r0
 80140ee:	2d01      	cmp	r5, #1
 80140f0:	d8f8      	bhi.n	80140e4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 80140f2:	1e98      	subs	r0, r3, #2
 80140f4:	f003 0301 	and.w	r3, r3, #1
 80140f8:	f020 0001 	bic.w	r0, r0, #1
 80140fc:	3002      	adds	r0, #2
 80140fe:	4401      	add	r1, r0
 8014100:	4402      	add	r2, r0
 8014102:	1f14      	subs	r4, r2, #4
 8014104:	4608      	mov	r0, r1
 8014106:	18ce      	adds	r6, r1, r3
 8014108:	1a35      	subs	r5, r6, r0
 801410a:	2d03      	cmp	r5, #3
 801410c:	d810      	bhi.n	8014130 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801410e:	089c      	lsrs	r4, r3, #2
 8014110:	00a0      	lsls	r0, r4, #2
 8014112:	4401      	add	r1, r0
 8014114:	3801      	subs	r0, #1
 8014116:	4402      	add	r2, r0
 8014118:	f06f 0003 	mvn.w	r0, #3
 801411c:	fb00 3404 	mla	r4, r0, r4, r3
 8014120:	440c      	add	r4, r1
 8014122:	42a1      	cmp	r1, r4
 8014124:	d011      	beq.n	801414a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8014126:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801412a:	f801 3b01 	strb.w	r3, [r1], #1
 801412e:	e7f8      	b.n	8014122 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8014130:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8014134:	f840 5b04 	str.w	r5, [r0], #4
 8014138:	e7e6      	b.n	8014108 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801413a:	0790      	lsls	r0, r2, #30
 801413c:	d0e1      	beq.n	8014102 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801413e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8014142:	3b02      	subs	r3, #2
 8014144:	f821 0b02 	strh.w	r0, [r1], #2
 8014148:	e7db      	b.n	8014102 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801414a:	2001      	movs	r0, #1
 801414c:	bd70      	pop	{r4, r5, r6, pc}

0801414e <_ZN8touchgfx3HAL7noTouchEv>:
 801414e:	b510      	push	{r4, lr}
 8014150:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8014154:	4604      	mov	r4, r0
 8014156:	b153      	cbz	r3, 801416e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8014158:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801415c:	2101      	movs	r1, #1
 801415e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8014162:	301c      	adds	r0, #28
 8014164:	f00d fb24 	bl	80217b0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8014168:	2300      	movs	r3, #0
 801416a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801416e:	bd10      	pop	{r4, pc}

08014170 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8014170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014174:	4605      	mov	r5, r0
 8014176:	6980      	ldr	r0, [r0, #24]
 8014178:	b085      	sub	sp, #20
 801417a:	460f      	mov	r7, r1
 801417c:	4690      	mov	r8, r2
 801417e:	4699      	mov	r9, r3
 8014180:	b930      	cbnz	r0, 8014190 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8014182:	4b1f      	ldr	r3, [pc, #124]	; (8014200 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8014184:	f44f 7198 	mov.w	r1, #304	; 0x130
 8014188:	4a1e      	ldr	r2, [pc, #120]	; (8014204 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801418a:	481f      	ldr	r0, [pc, #124]	; (8014208 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 801418c:	f00e ff8a 	bl	80230a4 <__assert_func>
 8014190:	ac04      	add	r4, sp, #16
 8014192:	2600      	movs	r6, #0
 8014194:	f844 6d04 	str.w	r6, [r4, #-4]!
 8014198:	6806      	ldr	r6, [r0, #0]
 801419a:	9401      	str	r4, [sp, #4]
 801419c:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80141a0:	9400      	str	r4, [sp, #0]
 80141a2:	6834      	ldr	r4, [r6, #0]
 80141a4:	47a0      	blx	r4
 80141a6:	4c19      	ldr	r4, [pc, #100]	; (801420c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 80141a8:	4606      	mov	r6, r0
 80141aa:	f8a4 9000 	strh.w	r9, [r4]
 80141ae:	f7f5 ff41 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 80141b2:	6803      	ldr	r3, [r0, #0]
 80141b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141b6:	4798      	blx	r3
 80141b8:	280c      	cmp	r0, #12
 80141ba:	d80f      	bhi.n	80141dc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 80141bc:	e8df f000 	tbb	[pc, r0]
 80141c0:	1b1b1207 	.word	0x1b1b1207
 80141c4:	1b1b1b1b 	.word	0x1b1b1b1b
 80141c8:	1b1b1b1b 	.word	0x1b1b1b1b
 80141cc:	1b          	.byte	0x1b
 80141cd:	00          	.byte	0x00
 80141ce:	8823      	ldrh	r3, [r4, #0]
 80141d0:	fb08 7203 	mla	r2, r8, r3, r7
 80141d4:	9b03      	ldr	r3, [sp, #12]
 80141d6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80141da:	63eb      	str	r3, [r5, #60]	; 0x3c
 80141dc:	4630      	mov	r0, r6
 80141de:	b005      	add	sp, #20
 80141e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141e4:	8822      	ldrh	r2, [r4, #0]
 80141e6:	9b03      	ldr	r3, [sp, #12]
 80141e8:	fb08 7202 	mla	r2, r8, r2, r7
 80141ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80141f0:	1a9a      	subs	r2, r3, r2
 80141f2:	63ea      	str	r2, [r5, #60]	; 0x3c
 80141f4:	e7f2      	b.n	80141dc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 80141f6:	4b06      	ldr	r3, [pc, #24]	; (8014210 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 80141f8:	f240 114d 	movw	r1, #333	; 0x14d
 80141fc:	4a01      	ldr	r2, [pc, #4]	; (8014204 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80141fe:	e7c4      	b.n	801418a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8014200:	0802723b 	.word	0x0802723b
 8014204:	0802754a 	.word	0x0802754a
 8014208:	08027280 	.word	0x08027280
 801420c:	2000b1a6 	.word	0x2000b1a6
 8014210:	080272a6 	.word	0x080272a6

08014214 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8014214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014218:	4698      	mov	r8, r3
 801421a:	6803      	ldr	r3, [r0, #0]
 801421c:	b087      	sub	sp, #28
 801421e:	460e      	mov	r6, r1
 8014220:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8014222:	4617      	mov	r7, r2
 8014224:	4b0d      	ldr	r3, [pc, #52]	; (801425c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8014226:	4604      	mov	r4, r0
 8014228:	f8b3 9000 	ldrh.w	r9, [r3]
 801422c:	f7f5 ff02 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8014230:	6803      	ldr	r3, [r0, #0]
 8014232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014234:	4798      	blx	r3
 8014236:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801423a:	463a      	mov	r2, r7
 801423c:	4631      	mov	r1, r6
 801423e:	9302      	str	r3, [sp, #8]
 8014240:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8014244:	9301      	str	r3, [sp, #4]
 8014246:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801424a:	e9cd 9003 	strd	r9, r0, [sp, #12]
 801424e:	9300      	str	r3, [sp, #0]
 8014250:	4620      	mov	r0, r4
 8014252:	4643      	mov	r3, r8
 8014254:	47a8      	blx	r5
 8014256:	b007      	add	sp, #28
 8014258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801425c:	2000b1a6 	.word	0x2000b1a6

08014260 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8014260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014264:	4606      	mov	r6, r0
 8014266:	b089      	sub	sp, #36	; 0x24
 8014268:	4610      	mov	r0, r2
 801426a:	460c      	mov	r4, r1
 801426c:	4691      	mov	r9, r2
 801426e:	4698      	mov	r8, r3
 8014270:	f005 f906 	bl	8019480 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8014274:	2800      	cmp	r0, #0
 8014276:	f000 8092 	beq.w	801439e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 801427a:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80143b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 801427e:	ad08      	add	r5, sp, #32
 8014280:	f8df b138 	ldr.w	fp, [pc, #312]	; 80143bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8014284:	f8da 0000 	ldr.w	r0, [sl]
 8014288:	4f4a      	ldr	r7, [pc, #296]	; (80143b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801428a:	6802      	ldr	r2, [r0, #0]
 801428c:	6a12      	ldr	r2, [r2, #32]
 801428e:	4790      	blx	r2
 8014290:	f8da 0000 	ldr.w	r0, [sl]
 8014294:	6802      	ldr	r2, [r0, #0]
 8014296:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8014298:	4790      	blx	r2
 801429a:	f8bb 3000 	ldrh.w	r3, [fp]
 801429e:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 80142a2:	4628      	mov	r0, r5
 80142a4:	9300      	str	r3, [sp, #0]
 80142a6:	883b      	ldrh	r3, [r7, #0]
 80142a8:	9301      	str	r3, [sp, #4]
 80142aa:	f005 f9a9 	bl	8019600 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80142ae:	f8ab 0000 	strh.w	r0, [fp]
 80142b2:	4628      	mov	r0, r5
 80142b4:	f005 f9de 	bl	8019674 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80142b8:	f8da b000 	ldr.w	fp, [sl]
 80142bc:	8038      	strh	r0, [r7, #0]
 80142be:	4648      	mov	r0, r9
 80142c0:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 80142c4:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 80142c8:	9302      	str	r3, [sp, #8]
 80142ca:	f005 f8d9 	bl	8019480 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80142ce:	f8da 2000 	ldr.w	r2, [sl]
 80142d2:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 80142d6:	63d0      	str	r0, [r2, #60]	; 0x3c
 80142d8:	4620      	mov	r0, r4
 80142da:	6822      	ldr	r2, [r4, #0]
 80142dc:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 80142e0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80142e2:	2200      	movs	r2, #0
 80142e4:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 80142e8:	4611      	mov	r1, r2
 80142ea:	4798      	blx	r3
 80142ec:	2201      	movs	r2, #1
 80142ee:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 80142f2:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 80142f6:	1d22      	adds	r2, r4, #4
 80142f8:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 80142fc:	2900      	cmp	r1, #0
 80142fe:	d051      	beq.n	80143a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8014300:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8014304:	2900      	cmp	r1, #0
 8014306:	d04d      	beq.n	80143a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8014308:	6810      	ldr	r0, [r2, #0]
 801430a:	f10d 0c18 	add.w	ip, sp, #24
 801430e:	6851      	ldr	r1, [r2, #4]
 8014310:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8014314:	4641      	mov	r1, r8
 8014316:	a806      	add	r0, sp, #24
 8014318:	f7ff f99c 	bl	8013654 <_ZN8touchgfx4RectaNERKS0_>
 801431c:	4628      	mov	r0, r5
 801431e:	f005 fafb 	bl	8019918 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014322:	4680      	mov	r8, r0
 8014324:	f7f5 fe86 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8014328:	6802      	ldr	r2, [r0, #0]
 801432a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801432c:	4790      	blx	r2
 801432e:	4580      	cmp	r8, r0
 8014330:	d03d      	beq.n	80143ae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 8014332:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8014334:	b150      	cbz	r0, 801434c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8014336:	4628      	mov	r0, r5
 8014338:	f005 faee 	bl	8019918 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801433c:	4605      	mov	r5, r0
 801433e:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8014340:	6803      	ldr	r3, [r0, #0]
 8014342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014344:	4798      	blx	r3
 8014346:	1a2b      	subs	r3, r5, r0
 8014348:	4258      	negs	r0, r3
 801434a:	4158      	adcs	r0, r3
 801434c:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8014350:	2500      	movs	r5, #0
 8014352:	6963      	ldr	r3, [r4, #20]
 8014354:	4620      	mov	r0, r4
 8014356:	6822      	ldr	r2, [r4, #0]
 8014358:	a906      	add	r1, sp, #24
 801435a:	6165      	str	r5, [r4, #20]
 801435c:	9303      	str	r3, [sp, #12]
 801435e:	6892      	ldr	r2, [r2, #8]
 8014360:	4790      	blx	r2
 8014362:	9b03      	ldr	r3, [sp, #12]
 8014364:	4620      	mov	r0, r4
 8014366:	4652      	mov	r2, sl
 8014368:	6163      	str	r3, [r4, #20]
 801436a:	4649      	mov	r1, r9
 801436c:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8014370:	6823      	ldr	r3, [r4, #0]
 8014372:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8014376:	4c10      	ldr	r4, [pc, #64]	; (80143b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8014378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801437a:	4798      	blx	r3
 801437c:	6820      	ldr	r0, [r4, #0]
 801437e:	9b02      	ldr	r3, [sp, #8]
 8014380:	9a00      	ldr	r2, [sp, #0]
 8014382:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8014386:	4b0d      	ldr	r3, [pc, #52]	; (80143bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8014388:	801a      	strh	r2, [r3, #0]
 801438a:	4b0a      	ldr	r3, [pc, #40]	; (80143b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801438c:	9a01      	ldr	r2, [sp, #4]
 801438e:	801a      	strh	r2, [r3, #0]
 8014390:	6803      	ldr	r3, [r0, #0]
 8014392:	6a1b      	ldr	r3, [r3, #32]
 8014394:	4798      	blx	r3
 8014396:	6820      	ldr	r0, [r4, #0]
 8014398:	6803      	ldr	r3, [r0, #0]
 801439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801439c:	4798      	blx	r3
 801439e:	b009      	add	sp, #36	; 0x24
 80143a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143a4:	ab06      	add	r3, sp, #24
 80143a6:	6810      	ldr	r0, [r2, #0]
 80143a8:	6851      	ldr	r1, [r2, #4]
 80143aa:	c303      	stmia	r3!, {r0, r1}
 80143ac:	e7b6      	b.n	801431c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 80143ae:	2000      	movs	r0, #0
 80143b0:	e7cc      	b.n	801434c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 80143b2:	bf00      	nop
 80143b4:	2000b1a8 	.word	0x2000b1a8
 80143b8:	2000b1ac 	.word	0x2000b1ac
 80143bc:	2000b1a6 	.word	0x2000b1a6

080143c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80143c0:	4b07      	ldr	r3, [pc, #28]	; (80143e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80143c2:	b510      	push	{r4, lr}
 80143c4:	781b      	ldrb	r3, [r3, #0]
 80143c6:	4604      	mov	r4, r0
 80143c8:	b13b      	cbz	r3, 80143da <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80143ca:	6803      	ldr	r3, [r0, #0]
 80143cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143ce:	4798      	blx	r3
 80143d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80143d2:	4283      	cmp	r3, r0
 80143d4:	d101      	bne.n	80143da <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80143d6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80143d8:	bd10      	pop	{r4, pc}
 80143da:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80143dc:	e7fc      	b.n	80143d8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80143de:	bf00      	nop
 80143e0:	2000b1aa 	.word	0x2000b1aa

080143e4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80143e4:	4b0b      	ldr	r3, [pc, #44]	; (8014414 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 80143e6:	b510      	push	{r4, lr}
 80143e8:	781b      	ldrb	r3, [r3, #0]
 80143ea:	4604      	mov	r4, r0
 80143ec:	b95b      	cbnz	r3, 8014406 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80143ee:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80143f2:	2b02      	cmp	r3, #2
 80143f4:	d007      	beq.n	8014406 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80143f6:	6840      	ldr	r0, [r0, #4]
 80143f8:	f000 fbc8 	bl	8014b8c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80143fc:	b118      	cbz	r0, 8014406 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80143fe:	6862      	ldr	r2, [r4, #4]
 8014400:	7a53      	ldrb	r3, [r2, #9]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d0fc      	beq.n	8014400 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8014406:	f7fc fea5 	bl	8011154 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801440a:	4620      	mov	r0, r4
 801440c:	f7ff ffd8 	bl	80143c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014410:	bd10      	pop	{r4, pc}
 8014412:	bf00      	nop
 8014414:	2000b1aa 	.word	0x2000b1aa

08014418 <_ZN8touchgfx3HAL10initializeEv>:
 8014418:	b510      	push	{r4, lr}
 801441a:	4604      	mov	r4, r0
 801441c:	f7fc fe76 	bl	801110c <_ZN8touchgfx10OSWrappers10initializeEv>
 8014420:	6860      	ldr	r0, [r4, #4]
 8014422:	6803      	ldr	r3, [r0, #0]
 8014424:	68db      	ldr	r3, [r3, #12]
 8014426:	4798      	blx	r3
 8014428:	68e0      	ldr	r0, [r4, #12]
 801442a:	6803      	ldr	r3, [r0, #0]
 801442c:	689b      	ldr	r3, [r3, #8]
 801442e:	4798      	blx	r3
 8014430:	6823      	ldr	r3, [r4, #0]
 8014432:	4620      	mov	r0, r4
 8014434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801443a:	4718      	bx	r3

0801443c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 801443c:	b508      	push	{r3, lr}
 801443e:	290c      	cmp	r1, #12
 8014440:	d817      	bhi.n	8014472 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8014442:	e8df f001 	tbb	[pc, r1]
 8014446:	090b      	.short	0x090b
 8014448:	0d0d0d07 	.word	0x0d0d0d07
 801444c:	1414140d 	.word	0x1414140d
 8014450:	1414      	.short	0x1414
 8014452:	0d          	.byte	0x0d
 8014453:	00          	.byte	0x00
 8014454:	2020      	movs	r0, #32
 8014456:	bd08      	pop	{r3, pc}
 8014458:	2018      	movs	r0, #24
 801445a:	e7fc      	b.n	8014456 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801445c:	2010      	movs	r0, #16
 801445e:	e7fa      	b.n	8014456 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014460:	4b05      	ldr	r3, [pc, #20]	; (8014478 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8014462:	f44f 710c 	mov.w	r1, #560	; 0x230
 8014466:	4a05      	ldr	r2, [pc, #20]	; (801447c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8014468:	4805      	ldr	r0, [pc, #20]	; (8014480 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 801446a:	f00e fe1b 	bl	80230a4 <__assert_func>
 801446e:	2008      	movs	r0, #8
 8014470:	e7f1      	b.n	8014456 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014472:	2000      	movs	r0, #0
 8014474:	e7ef      	b.n	8014456 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8014476:	bf00      	nop
 8014478:	08027379 	.word	0x08027379
 801447c:	0802770c 	.word	0x0802770c
 8014480:	08027280 	.word	0x08027280

08014484 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8014484:	b570      	push	{r4, r5, r6, lr}
 8014486:	460d      	mov	r5, r1
 8014488:	f89d 1014 	ldrb.w	r1, [sp, #20]
 801448c:	4616      	mov	r6, r2
 801448e:	461c      	mov	r4, r3
 8014490:	f7ff ffd4 	bl	801443c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8014494:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8014498:	10c0      	asrs	r0, r0, #3
 801449a:	fb06 5101 	mla	r1, r6, r1, r5
 801449e:	fb00 4001 	mla	r0, r0, r1, r4
 80144a2:	bd70      	pop	{r4, r5, r6, pc}

080144a4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 80144a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144a8:	b08a      	sub	sp, #40	; 0x28
 80144aa:	f04f 0c00 	mov.w	ip, #0
 80144ae:	4604      	mov	r4, r0
 80144b0:	469a      	mov	sl, r3
 80144b2:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 80144b6:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80144ba:	f1b8 0f02 	cmp.w	r8, #2
 80144be:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80144c2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80144c6:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80144ca:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 80144ce:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80144d2:	f8cd c020 	str.w	ip, [sp, #32]
 80144d6:	d030      	beq.n	801453a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 80144d8:	2bff      	cmp	r3, #255	; 0xff
 80144da:	d12c      	bne.n	8014536 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 80144dc:	4560      	cmp	r0, ip
 80144de:	bf14      	ite	ne
 80144e0:	2004      	movne	r0, #4
 80144e2:	2001      	moveq	r0, #1
 80144e4:	9204      	str	r2, [sp, #16]
 80144e6:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80144ea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80144ee:	f8ad 201c 	strh.w	r2, [sp, #28]
 80144f2:	f8ad 6018 	strh.w	r6, [sp, #24]
 80144f6:	f8ad 501a 	strh.w	r5, [sp, #26]
 80144fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80144fe:	4620      	mov	r0, r4
 8014500:	f7ff ff5e 	bl	80143c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8014504:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8014508:	4603      	mov	r3, r0
 801450a:	4651      	mov	r1, sl
 801450c:	4620      	mov	r0, r4
 801450e:	e9cd 9700 	strd	r9, r7, [sp]
 8014512:	f7ff ffb7 	bl	8014484 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8014516:	f8ad 901e 	strh.w	r9, [sp, #30]
 801451a:	9005      	str	r0, [sp, #20]
 801451c:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8014520:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8014524:	b106      	cbz	r6, 8014528 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8014526:	b98d      	cbnz	r5, 801454c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8014528:	4b12      	ldr	r3, [pc, #72]	; (8014574 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 801452a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 801452e:	4a12      	ldr	r2, [pc, #72]	; (8014578 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8014530:	4812      	ldr	r0, [pc, #72]	; (801457c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8014532:	f00e fdb7 	bl	80230a4 <__assert_func>
 8014536:	2004      	movs	r0, #4
 8014538:	e7d4      	b.n	80144e4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801453a:	2bff      	cmp	r3, #255	; 0xff
 801453c:	d104      	bne.n	8014548 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 801453e:	2800      	cmp	r0, #0
 8014540:	bf14      	ite	ne
 8014542:	2040      	movne	r0, #64	; 0x40
 8014544:	2020      	moveq	r0, #32
 8014546:	e7cd      	b.n	80144e4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8014548:	2040      	movs	r0, #64	; 0x40
 801454a:	e7cb      	b.n	80144e4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 801454c:	6823      	ldr	r3, [r4, #0]
 801454e:	4620      	mov	r0, r4
 8014550:	9d02      	ldr	r5, [sp, #8]
 8014552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014554:	4798      	blx	r3
 8014556:	4228      	tst	r0, r5
 8014558:	d104      	bne.n	8014564 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 801455a:	4b09      	ldr	r3, [pc, #36]	; (8014580 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 801455c:	f240 11b1 	movw	r1, #433	; 0x1b1
 8014560:	4a05      	ldr	r2, [pc, #20]	; (8014578 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8014562:	e7e5      	b.n	8014530 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8014564:	6860      	ldr	r0, [r4, #4]
 8014566:	a902      	add	r1, sp, #8
 8014568:	6803      	ldr	r3, [r0, #0]
 801456a:	685b      	ldr	r3, [r3, #4]
 801456c:	4798      	blx	r3
 801456e:	b00a      	add	sp, #40	; 0x28
 8014570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014574:	080272fc 	.word	0x080272fc
 8014578:	080275ae 	.word	0x080275ae
 801457c:	08027280 	.word	0x08027280
 8014580:	08027334 	.word	0x08027334

08014584 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8014584:	b510      	push	{r4, lr}
 8014586:	b08a      	sub	sp, #40	; 0x28
 8014588:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801458c:	9408      	str	r4, [sp, #32]
 801458e:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8014592:	9407      	str	r4, [sp, #28]
 8014594:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8014598:	9406      	str	r4, [sp, #24]
 801459a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801459e:	9405      	str	r4, [sp, #20]
 80145a0:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 80145a4:	9404      	str	r4, [sp, #16]
 80145a6:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 80145aa:	9403      	str	r4, [sp, #12]
 80145ac:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 80145b0:	9402      	str	r4, [sp, #8]
 80145b2:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80145b6:	e9cd 3400 	strd	r3, r4, [sp]
 80145ba:	4613      	mov	r3, r2
 80145bc:	2200      	movs	r2, #0
 80145be:	f7ff ff71 	bl	80144a4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80145c2:	b00a      	add	sp, #40	; 0x28
 80145c4:	bd10      	pop	{r4, pc}
	...

080145c8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 80145c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145ca:	b08b      	sub	sp, #44	; 0x2c
 80145cc:	4616      	mov	r6, r2
 80145ce:	460d      	mov	r5, r1
 80145d0:	461f      	mov	r7, r3
 80145d2:	4604      	mov	r4, r0
 80145d4:	f7f5 fd2e 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 80145d8:	6803      	ldr	r3, [r0, #0]
 80145da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145dc:	4798      	blx	r3
 80145de:	4b0e      	ldr	r3, [pc, #56]	; (8014618 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 80145e0:	2200      	movs	r2, #0
 80145e2:	4629      	mov	r1, r5
 80145e4:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80145e8:	881b      	ldrh	r3, [r3, #0]
 80145ea:	4620      	mov	r0, r4
 80145ec:	9306      	str	r3, [sp, #24]
 80145ee:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80145f2:	9305      	str	r3, [sp, #20]
 80145f4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80145f8:	9304      	str	r3, [sp, #16]
 80145fa:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80145fe:	9303      	str	r3, [sp, #12]
 8014600:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8014604:	9302      	str	r3, [sp, #8]
 8014606:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801460a:	e9cd 7300 	strd	r7, r3, [sp]
 801460e:	4633      	mov	r3, r6
 8014610:	f7ff ff48 	bl	80144a4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8014614:	b00b      	add	sp, #44	; 0x2c
 8014616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014618:	2000b1a6 	.word	0x2000b1a6

0801461c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 801461c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014620:	461f      	mov	r7, r3
 8014622:	4b14      	ldr	r3, [pc, #80]	; (8014674 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8014624:	b08a      	sub	sp, #40	; 0x28
 8014626:	4616      	mov	r6, r2
 8014628:	f8b3 8000 	ldrh.w	r8, [r3]
 801462c:	460d      	mov	r5, r1
 801462e:	4604      	mov	r4, r0
 8014630:	f7f5 fd00 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8014634:	6803      	ldr	r3, [r0, #0]
 8014636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014638:	4798      	blx	r3
 801463a:	2302      	movs	r3, #2
 801463c:	9008      	str	r0, [sp, #32]
 801463e:	2200      	movs	r2, #0
 8014640:	4629      	mov	r1, r5
 8014642:	4620      	mov	r0, r4
 8014644:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8014648:	2301      	movs	r3, #1
 801464a:	9305      	str	r3, [sp, #20]
 801464c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8014650:	9304      	str	r3, [sp, #16]
 8014652:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8014656:	9303      	str	r3, [sp, #12]
 8014658:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801465c:	9302      	str	r3, [sp, #8]
 801465e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014662:	e9cd 7300 	strd	r7, r3, [sp]
 8014666:	4633      	mov	r3, r6
 8014668:	f7ff ff1c 	bl	80144a4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801466c:	b00a      	add	sp, #40	; 0x28
 801466e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014672:	bf00      	nop
 8014674:	2000b1a6 	.word	0x2000b1a6

08014678 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8014678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801467c:	b08b      	sub	sp, #44	; 0x2c
 801467e:	469b      	mov	fp, r3
 8014680:	4604      	mov	r4, r0
 8014682:	4692      	mov	sl, r2
 8014684:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8014688:	2600      	movs	r6, #0
 801468a:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 801468e:	4689      	mov	r9, r1
 8014690:	2fff      	cmp	r7, #255	; 0xff
 8014692:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8014696:	9608      	str	r6, [sp, #32]
 8014698:	bf14      	ite	ne
 801469a:	2308      	movne	r3, #8
 801469c:	2302      	moveq	r3, #2
 801469e:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80146a2:	f7ff fe8d 	bl	80143c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80146a6:	465a      	mov	r2, fp
 80146a8:	4603      	mov	r3, r0
 80146aa:	4651      	mov	r1, sl
 80146ac:	4620      	mov	r0, r4
 80146ae:	e9cd 8500 	strd	r8, r5, [sp]
 80146b2:	f7ff fee7 	bl	8014484 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80146b6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80146ba:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80146be:	f8ad 3018 	strh.w	r3, [sp, #24]
 80146c2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80146c6:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 80146ca:	f8ad 301a 	strh.w	r3, [sp, #26]
 80146ce:	6823      	ldr	r3, [r4, #0]
 80146d0:	9d02      	ldr	r5, [sp, #8]
 80146d2:	9005      	str	r0, [sp, #20]
 80146d4:	4620      	mov	r0, r4
 80146d6:	f8ad 601c 	strh.w	r6, [sp, #28]
 80146da:	f8ad 801e 	strh.w	r8, [sp, #30]
 80146de:	f8cd 9020 	str.w	r9, [sp, #32]
 80146e2:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 80146e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146e8:	4798      	blx	r3
 80146ea:	4228      	tst	r0, r5
 80146ec:	d106      	bne.n	80146fc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 80146ee:	4b07      	ldr	r3, [pc, #28]	; (801470c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 80146f0:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 80146f4:	4a06      	ldr	r2, [pc, #24]	; (8014710 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 80146f6:	4807      	ldr	r0, [pc, #28]	; (8014714 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 80146f8:	f00e fcd4 	bl	80230a4 <__assert_func>
 80146fc:	6860      	ldr	r0, [r4, #4]
 80146fe:	a902      	add	r1, sp, #8
 8014700:	6803      	ldr	r3, [r0, #0]
 8014702:	685b      	ldr	r3, [r3, #4]
 8014704:	4798      	blx	r3
 8014706:	b00b      	add	sp, #44	; 0x2c
 8014708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801470c:	08027334 	.word	0x08027334
 8014710:	08027677 	.word	0x08027677
 8014714:	08027280 	.word	0x08027280

08014718 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8014718:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801471c:	461f      	mov	r7, r3
 801471e:	4b0b      	ldr	r3, [pc, #44]	; (801474c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8014720:	460d      	mov	r5, r1
 8014722:	4616      	mov	r6, r2
 8014724:	f8b3 8000 	ldrh.w	r8, [r3]
 8014728:	4604      	mov	r4, r0
 801472a:	f7f5 fc83 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 801472e:	6803      	ldr	r3, [r0, #0]
 8014730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014732:	4798      	blx	r3
 8014734:	463b      	mov	r3, r7
 8014736:	4632      	mov	r2, r6
 8014738:	4629      	mov	r1, r5
 801473a:	e9cd 8000 	strd	r8, r0, [sp]
 801473e:	4620      	mov	r0, r4
 8014740:	f7ff fea0 	bl	8014484 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8014744:	b002      	add	sp, #8
 8014746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801474a:	bf00      	nop
 801474c:	2000b1a6 	.word	0x2000b1a6

08014750 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8014750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014754:	4698      	mov	r8, r3
 8014756:	b088      	sub	sp, #32
 8014758:	2300      	movs	r3, #0
 801475a:	4617      	mov	r7, r2
 801475c:	4604      	mov	r4, r0
 801475e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8014762:	9306      	str	r3, [sp, #24]
 8014764:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8014768:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801476c:	f8ad 6010 	strh.w	r6, [sp, #16]
 8014770:	f8ad 5012 	strh.w	r5, [sp, #18]
 8014774:	e9cd 3100 	strd	r3, r1, [sp]
 8014778:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801477c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014780:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8014784:	f88d 301c 	strb.w	r3, [sp, #28]
 8014788:	f7ff fe1a 	bl	80143c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801478c:	4642      	mov	r2, r8
 801478e:	4603      	mov	r3, r0
 8014790:	4639      	mov	r1, r7
 8014792:	4620      	mov	r0, r4
 8014794:	f7ff ffc0 	bl	8014718 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8014798:	4b16      	ldr	r3, [pc, #88]	; (80147f4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 801479a:	9003      	str	r0, [sp, #12]
 801479c:	881b      	ldrh	r3, [r3, #0]
 801479e:	f8ad 3016 	strh.w	r3, [sp, #22]
 80147a2:	f7f5 fc47 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 80147a6:	6803      	ldr	r3, [r0, #0]
 80147a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147aa:	4798      	blx	r3
 80147ac:	f88d 001e 	strb.w	r0, [sp, #30]
 80147b0:	f88d 001d 	strb.w	r0, [sp, #29]
 80147b4:	b106      	cbz	r6, 80147b8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 80147b6:	b935      	cbnz	r5, 80147c6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 80147b8:	4b0f      	ldr	r3, [pc, #60]	; (80147f8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 80147ba:	f240 11cd 	movw	r1, #461	; 0x1cd
 80147be:	4a0f      	ldr	r2, [pc, #60]	; (80147fc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80147c0:	480f      	ldr	r0, [pc, #60]	; (8014800 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 80147c2:	f00e fc6f 	bl	80230a4 <__assert_func>
 80147c6:	6823      	ldr	r3, [r4, #0]
 80147c8:	4620      	mov	r0, r4
 80147ca:	9d00      	ldr	r5, [sp, #0]
 80147cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147ce:	4798      	blx	r3
 80147d0:	4228      	tst	r0, r5
 80147d2:	d104      	bne.n	80147de <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 80147d4:	4b0b      	ldr	r3, [pc, #44]	; (8014804 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 80147d6:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 80147da:	4a08      	ldr	r2, [pc, #32]	; (80147fc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80147dc:	e7f0      	b.n	80147c0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 80147de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80147e0:	4669      	mov	r1, sp
 80147e2:	6860      	ldr	r0, [r4, #4]
 80147e4:	9306      	str	r3, [sp, #24]
 80147e6:	6803      	ldr	r3, [r0, #0]
 80147e8:	685b      	ldr	r3, [r3, #4]
 80147ea:	4798      	blx	r3
 80147ec:	b008      	add	sp, #32
 80147ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147f2:	bf00      	nop
 80147f4:	2000b1a6 	.word	0x2000b1a6
 80147f8:	080272fc 	.word	0x080272fc
 80147fc:	08027460 	.word	0x08027460
 8014800:	08027280 	.word	0x08027280
 8014804:	08027334 	.word	0x08027334

08014808 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8014808:	b570      	push	{r4, r5, r6, lr}
 801480a:	b08a      	sub	sp, #40	; 0x28
 801480c:	4604      	mov	r4, r0
 801480e:	466b      	mov	r3, sp
 8014810:	e883 0006 	stmia.w	r3, {r1, r2}
 8014814:	4b1f      	ldr	r3, [pc, #124]	; (8014894 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8014816:	781b      	ldrb	r3, [r3, #0]
 8014818:	b933      	cbnz	r3, 8014828 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 801481a:	4b1f      	ldr	r3, [pc, #124]	; (8014898 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 801481c:	f240 11f9 	movw	r1, #505	; 0x1f9
 8014820:	4a1e      	ldr	r2, [pc, #120]	; (801489c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8014822:	481f      	ldr	r0, [pc, #124]	; (80148a0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8014824:	f00e fc3e 	bl	80230a4 <__assert_func>
 8014828:	2300      	movs	r3, #0
 801482a:	f8bd 5000 	ldrh.w	r5, [sp]
 801482e:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8014832:	9308      	str	r3, [sp, #32]
 8014834:	2301      	movs	r3, #1
 8014836:	9302      	str	r3, [sp, #8]
 8014838:	6803      	ldr	r3, [r0, #0]
 801483a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801483c:	4798      	blx	r3
 801483e:	4632      	mov	r2, r6
 8014840:	4629      	mov	r1, r5
 8014842:	4603      	mov	r3, r0
 8014844:	4620      	mov	r0, r4
 8014846:	f7ff ff67 	bl	8014718 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801484a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801484c:	9003      	str	r0, [sp, #12]
 801484e:	9305      	str	r3, [sp, #20]
 8014850:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014854:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014858:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801485c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014860:	4b10      	ldr	r3, [pc, #64]	; (80148a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8014862:	881b      	ldrh	r3, [r3, #0]
 8014864:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014868:	f8ad 301e 	strh.w	r3, [sp, #30]
 801486c:	f7f5 fbe2 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8014870:	6803      	ldr	r3, [r0, #0]
 8014872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014874:	4798      	blx	r3
 8014876:	23ff      	movs	r3, #255	; 0xff
 8014878:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801487c:	a902      	add	r1, sp, #8
 801487e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8014882:	6860      	ldr	r0, [r4, #4]
 8014884:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014888:	6803      	ldr	r3, [r0, #0]
 801488a:	685b      	ldr	r3, [r3, #4]
 801488c:	4798      	blx	r3
 801488e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8014890:	b00a      	add	sp, #40	; 0x28
 8014892:	bd70      	pop	{r4, r5, r6, pc}
 8014894:	2000b1ab 	.word	0x2000b1ab
 8014898:	080271cd 	.word	0x080271cd
 801489c:	08027504 	.word	0x08027504
 80148a0:	08027280 	.word	0x08027280
 80148a4:	2000b1a6 	.word	0x2000b1a6

080148a8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80148a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148aa:	b08b      	sub	sp, #44	; 0x2c
 80148ac:	4604      	mov	r4, r0
 80148ae:	466d      	mov	r5, sp
 80148b0:	e885 0006 	stmia.w	r5, {r1, r2}
 80148b4:	461d      	mov	r5, r3
 80148b6:	2300      	movs	r3, #0
 80148b8:	f8bd 6000 	ldrh.w	r6, [sp]
 80148bc:	9308      	str	r3, [sp, #32]
 80148be:	2301      	movs	r3, #1
 80148c0:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80148c4:	9302      	str	r3, [sp, #8]
 80148c6:	6803      	ldr	r3, [r0, #0]
 80148c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80148ca:	4798      	blx	r3
 80148cc:	463a      	mov	r2, r7
 80148ce:	4631      	mov	r1, r6
 80148d0:	4603      	mov	r3, r0
 80148d2:	4620      	mov	r0, r4
 80148d4:	f7ff ff20 	bl	8014718 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80148d8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80148dc:	9003      	str	r0, [sp, #12]
 80148de:	f8ad 3018 	strh.w	r3, [sp, #24]
 80148e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80148e6:	9505      	str	r5, [sp, #20]
 80148e8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80148ec:	4b0d      	ldr	r3, [pc, #52]	; (8014924 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 80148ee:	881b      	ldrh	r3, [r3, #0]
 80148f0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80148f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80148f6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80148fa:	f7f5 fb9b 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 80148fe:	6803      	ldr	r3, [r0, #0]
 8014900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014902:	4798      	blx	r3
 8014904:	23ff      	movs	r3, #255	; 0xff
 8014906:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801490a:	a902      	add	r1, sp, #8
 801490c:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8014910:	6860      	ldr	r0, [r4, #4]
 8014912:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8014916:	6803      	ldr	r3, [r0, #0]
 8014918:	685b      	ldr	r3, [r3, #4]
 801491a:	4798      	blx	r3
 801491c:	4628      	mov	r0, r5
 801491e:	b00b      	add	sp, #44	; 0x2c
 8014920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014922:	bf00      	nop
 8014924:	2000b1a6 	.word	0x2000b1a6

08014928 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8014928:	b570      	push	{r4, r5, r6, lr}
 801492a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801492e:	4604      	mov	r4, r0
 8014930:	b19b      	cbz	r3, 801495a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8014932:	2002      	movs	r0, #2
 8014934:	f7fc f96a 	bl	8010c0c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8014938:	2300      	movs	r3, #0
 801493a:	4620      	mov	r0, r4
 801493c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8014940:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8014944:	6823      	ldr	r3, [r4, #0]
 8014946:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 801494a:	f7ff fd39 	bl	80143c0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801494e:	4601      	mov	r1, r0
 8014950:	4620      	mov	r0, r4
 8014952:	462b      	mov	r3, r5
 8014954:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014958:	4718      	bx	r3
 801495a:	bd70      	pop	{r4, r5, r6, pc}

0801495c <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801495c:	4770      	bx	lr

0801495e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801495e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8014962:	1a13      	subs	r3, r2, r0
 8014964:	4258      	negs	r0, r3
 8014966:	4158      	adcs	r0, r3
 8014968:	4770      	bx	lr

0801496a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801496a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801496e:	1a9b      	subs	r3, r3, r2
 8014970:	2b00      	cmp	r3, #0
 8014972:	bfdc      	itt	le
 8014974:	6882      	ldrle	r2, [r0, #8]
 8014976:	189b      	addle	r3, r3, r2
 8014978:	2b01      	cmp	r3, #1
 801497a:	bfcc      	ite	gt
 801497c:	2000      	movgt	r0, #0
 801497e:	2001      	movle	r0, #1
 8014980:	4770      	bx	lr

08014982 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8014982:	6902      	ldr	r2, [r0, #16]
 8014984:	6840      	ldr	r0, [r0, #4]
 8014986:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801498a:	4770      	bx	lr

0801498c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801498c:	6803      	ldr	r3, [r0, #0]
 801498e:	691b      	ldr	r3, [r3, #16]
 8014990:	4718      	bx	r3

08014992 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8014992:	4770      	bx	lr

08014994 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8014994:	4770      	bx	lr
	...

08014998 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8014998:	2301      	movs	r3, #1
 801499a:	b570      	push	{r4, r5, r6, lr}
 801499c:	7203      	strb	r3, [r0, #8]
 801499e:	4604      	mov	r4, r0
 80149a0:	6840      	ldr	r0, [r0, #4]
 80149a2:	6803      	ldr	r3, [r0, #0]
 80149a4:	699b      	ldr	r3, [r3, #24]
 80149a6:	4798      	blx	r3
 80149a8:	6803      	ldr	r3, [r0, #0]
 80149aa:	4605      	mov	r5, r0
 80149ac:	2b08      	cmp	r3, #8
 80149ae:	d01e      	beq.n	80149ee <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 80149b0:	d80b      	bhi.n	80149ca <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80149b2:	2b02      	cmp	r3, #2
 80149b4:	d027      	beq.n	8014a06 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80149b6:	2b04      	cmp	r3, #4
 80149b8:	d011      	beq.n	80149de <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80149ba:	2b01      	cmp	r3, #1
 80149bc:	d028      	beq.n	8014a10 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80149be:	4b17      	ldr	r3, [pc, #92]	; (8014a1c <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 80149c0:	218b      	movs	r1, #139	; 0x8b
 80149c2:	4a17      	ldr	r2, [pc, #92]	; (8014a20 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 80149c4:	4817      	ldr	r0, [pc, #92]	; (8014a24 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 80149c6:	f00e fb6d 	bl	80230a4 <__assert_func>
 80149ca:	2b40      	cmp	r3, #64	; 0x40
 80149cc:	d020      	beq.n	8014a10 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80149ce:	d801      	bhi.n	80149d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80149d0:	2b20      	cmp	r3, #32
 80149d2:	e7f3      	b.n	80149bc <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80149d4:	2b80      	cmp	r3, #128	; 0x80
 80149d6:	d01b      	beq.n	8014a10 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80149d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80149dc:	e7ee      	b.n	80149bc <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80149de:	6823      	ldr	r3, [r4, #0]
 80149e0:	7f01      	ldrb	r1, [r0, #28]
 80149e2:	4620      	mov	r0, r4
 80149e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149e6:	4798      	blx	r3
 80149e8:	6823      	ldr	r3, [r4, #0]
 80149ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149ec:	e006      	b.n	80149fc <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80149ee:	6823      	ldr	r3, [r4, #0]
 80149f0:	7f01      	ldrb	r1, [r0, #28]
 80149f2:	4620      	mov	r0, r4
 80149f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149f6:	4798      	blx	r3
 80149f8:	6823      	ldr	r3, [r4, #0]
 80149fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149fc:	4629      	mov	r1, r5
 80149fe:	4620      	mov	r0, r4
 8014a00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a04:	4718      	bx	r3
 8014a06:	6823      	ldr	r3, [r4, #0]
 8014a08:	4620      	mov	r0, r4
 8014a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014a0c:	4798      	blx	r3
 8014a0e:	e7f3      	b.n	80149f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8014a10:	6823      	ldr	r3, [r4, #0]
 8014a12:	4620      	mov	r0, r4
 8014a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014a16:	4798      	blx	r3
 8014a18:	e7e6      	b.n	80149e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8014a1a:	bf00      	nop
 8014a1c:	08027755 	.word	0x08027755
 8014a20:	08027864 	.word	0x08027864
 8014a24:	0802777a 	.word	0x0802777a

08014a28 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8014a28:	b570      	push	{r4, r5, r6, lr}
 8014a2a:	4604      	mov	r4, r0
 8014a2c:	460e      	mov	r6, r1
 8014a2e:	6860      	ldr	r0, [r4, #4]
 8014a30:	6803      	ldr	r3, [r0, #0]
 8014a32:	685b      	ldr	r3, [r3, #4]
 8014a34:	4798      	blx	r3
 8014a36:	2800      	cmp	r0, #0
 8014a38:	d1f9      	bne.n	8014a2e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8014a3a:	4d0b      	ldr	r5, [pc, #44]	; (8014a68 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8014a3c:	6828      	ldr	r0, [r5, #0]
 8014a3e:	6803      	ldr	r3, [r0, #0]
 8014a40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014a42:	4798      	blx	r3
 8014a44:	f7fc fba2 	bl	801118c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8014a48:	6860      	ldr	r0, [r4, #4]
 8014a4a:	4631      	mov	r1, r6
 8014a4c:	6803      	ldr	r3, [r0, #0]
 8014a4e:	689b      	ldr	r3, [r3, #8]
 8014a50:	4798      	blx	r3
 8014a52:	6823      	ldr	r3, [r4, #0]
 8014a54:	4620      	mov	r0, r4
 8014a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a58:	4798      	blx	r3
 8014a5a:	6828      	ldr	r0, [r5, #0]
 8014a5c:	6803      	ldr	r3, [r0, #0]
 8014a5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014a64:	4718      	bx	r3
 8014a66:	bf00      	nop
 8014a68:	2000b1ac 	.word	0x2000b1ac

08014a6c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8014a6c:	b508      	push	{r3, lr}
 8014a6e:	f7fc fb71 	bl	8011154 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8014a72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014a76:	f7fc bb7b 	b.w	8011170 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08014a7a <_ZN8touchgfx13DMA_Interface5startEv>:
 8014a7a:	b510      	push	{r4, lr}
 8014a7c:	4604      	mov	r4, r0
 8014a7e:	6840      	ldr	r0, [r0, #4]
 8014a80:	6803      	ldr	r3, [r0, #0]
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	4798      	blx	r3
 8014a86:	b948      	cbnz	r0, 8014a9c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014a88:	7a63      	ldrb	r3, [r4, #9]
 8014a8a:	b13b      	cbz	r3, 8014a9c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014a8c:	7a23      	ldrb	r3, [r4, #8]
 8014a8e:	b92b      	cbnz	r3, 8014a9c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8014a90:	6823      	ldr	r3, [r4, #0]
 8014a92:	4620      	mov	r0, r4
 8014a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a9a:	4718      	bx	r3
 8014a9c:	bd10      	pop	{r4, pc}
	...

08014aa0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8014aa0:	b510      	push	{r4, lr}
 8014aa2:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8014aa6:	1b12      	subs	r2, r2, r4
 8014aa8:	2a00      	cmp	r2, #0
 8014aaa:	bfdc      	itt	le
 8014aac:	6883      	ldrle	r3, [r0, #8]
 8014aae:	18d2      	addle	r2, r2, r3
 8014ab0:	2a01      	cmp	r2, #1
 8014ab2:	dd18      	ble.n	8014ae6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8014ab4:	6843      	ldr	r3, [r0, #4]
 8014ab6:	f101 021c 	add.w	r2, r1, #28
 8014aba:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8014abe:	f851 4b04 	ldr.w	r4, [r1], #4
 8014ac2:	4291      	cmp	r1, r2
 8014ac4:	f843 4b04 	str.w	r4, [r3], #4
 8014ac8:	d1f9      	bne.n	8014abe <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8014aca:	880a      	ldrh	r2, [r1, #0]
 8014acc:	801a      	strh	r2, [r3, #0]
 8014ace:	788a      	ldrb	r2, [r1, #2]
 8014ad0:	709a      	strb	r2, [r3, #2]
 8014ad2:	68c3      	ldr	r3, [r0, #12]
 8014ad4:	6882      	ldr	r2, [r0, #8]
 8014ad6:	f3bf 8f5b 	dmb	ish
 8014ada:	3301      	adds	r3, #1
 8014adc:	429a      	cmp	r2, r3
 8014ade:	bfd8      	it	le
 8014ae0:	1a9b      	suble	r3, r3, r2
 8014ae2:	60c3      	str	r3, [r0, #12]
 8014ae4:	bd10      	pop	{r4, pc}
 8014ae6:	4b03      	ldr	r3, [pc, #12]	; (8014af4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8014ae8:	2139      	movs	r1, #57	; 0x39
 8014aea:	4a03      	ldr	r2, [pc, #12]	; (8014af8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8014aec:	4803      	ldr	r0, [pc, #12]	; (8014afc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8014aee:	f00e fad9 	bl	80230a4 <__assert_func>
 8014af2:	bf00      	nop
 8014af4:	080277a0 	.word	0x080277a0
 8014af8:	08027894 	.word	0x08027894
 8014afc:	0802777a 	.word	0x0802777a

08014b00 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8014b00:	b510      	push	{r4, lr}
 8014b02:	6803      	ldr	r3, [r0, #0]
 8014b04:	4604      	mov	r4, r0
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	4798      	blx	r3
 8014b0a:	b128      	cbz	r0, 8014b18 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8014b0c:	4b07      	ldr	r3, [pc, #28]	; (8014b2c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8014b0e:	213f      	movs	r1, #63	; 0x3f
 8014b10:	4a07      	ldr	r2, [pc, #28]	; (8014b30 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8014b12:	4808      	ldr	r0, [pc, #32]	; (8014b34 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8014b14:	f00e fac6 	bl	80230a4 <__assert_func>
 8014b18:	6923      	ldr	r3, [r4, #16]
 8014b1a:	68a2      	ldr	r2, [r4, #8]
 8014b1c:	f3bf 8f5b 	dmb	ish
 8014b20:	3301      	adds	r3, #1
 8014b22:	429a      	cmp	r2, r3
 8014b24:	bfd8      	it	le
 8014b26:	1a9b      	suble	r3, r3, r2
 8014b28:	6123      	str	r3, [r4, #16]
 8014b2a:	bd10      	pop	{r4, pc}
 8014b2c:	080277c3 	.word	0x080277c3
 8014b30:	080278e2 	.word	0x080278e2
 8014b34:	0802777a 	.word	0x0802777a

08014b38 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8014b38:	b570      	push	{r4, r5, r6, lr}
 8014b3a:	4604      	mov	r4, r0
 8014b3c:	6840      	ldr	r0, [r0, #4]
 8014b3e:	6803      	ldr	r3, [r0, #0]
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	4798      	blx	r3
 8014b44:	4605      	mov	r5, r0
 8014b46:	b930      	cbnz	r0, 8014b56 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8014b48:	7a23      	ldrb	r3, [r4, #8]
 8014b4a:	b123      	cbz	r3, 8014b56 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8014b4c:	6860      	ldr	r0, [r4, #4]
 8014b4e:	6803      	ldr	r3, [r0, #0]
 8014b50:	695b      	ldr	r3, [r3, #20]
 8014b52:	4798      	blx	r3
 8014b54:	7225      	strb	r5, [r4, #8]
 8014b56:	6860      	ldr	r0, [r4, #4]
 8014b58:	6803      	ldr	r3, [r0, #0]
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	4798      	blx	r3
 8014b5e:	b928      	cbnz	r0, 8014b6c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8014b60:	6823      	ldr	r3, [r4, #0]
 8014b62:	4620      	mov	r0, r4
 8014b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014b6a:	4718      	bx	r3
 8014b6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014b70:	f7fc bb18 	b.w	80111a4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08014b74 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8014b74:	b510      	push	{r4, lr}
 8014b76:	6082      	str	r2, [r0, #8]
 8014b78:	2200      	movs	r2, #0
 8014b7a:	4c03      	ldr	r4, [pc, #12]	; (8014b88 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8014b7c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8014b80:	e9c0 4100 	strd	r4, r1, [r0]
 8014b84:	bd10      	pop	{r4, pc}
 8014b86:	bf00      	nop
 8014b88:	08027848 	.word	0x08027848

08014b8c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8014b8c:	6840      	ldr	r0, [r0, #4]
 8014b8e:	6803      	ldr	r3, [r0, #0]
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	4718      	bx	r3

08014b94 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8014b94:	2001      	movs	r0, #1
 8014b96:	4770      	bx	lr

08014b98 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8014b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b9c:	460d      	mov	r5, r1
 8014b9e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8014ba2:	b085      	sub	sp, #20
 8014ba4:	4690      	mov	r8, r2
 8014ba6:	4411      	add	r1, r2
 8014ba8:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8014bac:	4699      	mov	r9, r3
 8014bae:	6803      	ldr	r3, [r0, #0]
 8014bb0:	60c1      	str	r1, [r0, #12]
 8014bb2:	4604      	mov	r4, r0
 8014bb4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014bb6:	440a      	add	r2, r1
 8014bb8:	6102      	str	r2, [r0, #16]
 8014bba:	68db      	ldr	r3, [r3, #12]
 8014bbc:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 8014bc0:	4798      	blx	r3
 8014bc2:	2800      	cmp	r0, #0
 8014bc4:	d039      	beq.n	8014c3a <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 8014bc6:	44c8      	add	r8, r9
 8014bc8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8014bcc:	4445      	add	r5, r8
 8014bce:	6823      	ldr	r3, [r4, #0]
 8014bd0:	f10d 020f 	add.w	r2, sp, #15
 8014bd4:	a903      	add	r1, sp, #12
 8014bd6:	4620      	mov	r0, r4
 8014bd8:	9200      	str	r2, [sp, #0]
 8014bda:	f10d 020d 	add.w	r2, sp, #13
 8014bde:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8014be2:	f10d 030e 	add.w	r3, sp, #14
 8014be6:	47c0      	blx	r8
 8014be8:	b1f8      	cbz	r0, 8014c2a <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 8014bea:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8014bee:	7a20      	ldrb	r0, [r4, #8]
 8014bf0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8014bf4:	4358      	muls	r0, r3
 8014bf6:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8014bfa:	1c43      	adds	r3, r0, #1
 8014bfc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8014c00:	f817 0b01 	ldrb.w	r0, [r7], #1
 8014c04:	121b      	asrs	r3, r3, #8
 8014c06:	fb10 f003 	smulbb	r0, r0, r3
 8014c0a:	b283      	uxth	r3, r0
 8014c0c:	1c58      	adds	r0, r3, #1
 8014c0e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8014c12:	6823      	ldr	r3, [r4, #0]
 8014c14:	1200      	asrs	r0, r0, #8
 8014c16:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8014c1a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8014c1e:	28ff      	cmp	r0, #255	; 0xff
 8014c20:	d10e      	bne.n	8014c40 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 8014c22:	9100      	str	r1, [sp, #0]
 8014c24:	4629      	mov	r1, r5
 8014c26:	4620      	mov	r0, r4
 8014c28:	47c0      	blx	r8
 8014c2a:	68e3      	ldr	r3, [r4, #12]
 8014c2c:	3e01      	subs	r6, #1
 8014c2e:	f105 0503 	add.w	r5, r5, #3
 8014c32:	f103 0301 	add.w	r3, r3, #1
 8014c36:	60e3      	str	r3, [r4, #12]
 8014c38:	d1c9      	bne.n	8014bce <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 8014c3a:	b005      	add	sp, #20
 8014c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c40:	fa1f fc80 	uxth.w	ip, r0
 8014c44:	43c0      	mvns	r0, r0
 8014c46:	f895 e002 	ldrb.w	lr, [r5, #2]
 8014c4a:	fb12 f20c 	smulbb	r2, r2, ip
 8014c4e:	b2c0      	uxtb	r0, r0
 8014c50:	fb13 f30c 	smulbb	r3, r3, ip
 8014c54:	fb0e 2200 	mla	r2, lr, r0, r2
 8014c58:	f895 e001 	ldrb.w	lr, [r5, #1]
 8014c5c:	fb11 f10c 	smulbb	r1, r1, ip
 8014c60:	fb0e 3300 	mla	r3, lr, r0, r3
 8014c64:	f895 e000 	ldrb.w	lr, [r5]
 8014c68:	b292      	uxth	r2, r2
 8014c6a:	b29b      	uxth	r3, r3
 8014c6c:	fb0e 1000 	mla	r0, lr, r0, r1
 8014c70:	1c59      	adds	r1, r3, #1
 8014c72:	b280      	uxth	r0, r0
 8014c74:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8014c78:	1c51      	adds	r1, r2, #1
 8014c7a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8014c7e:	1c41      	adds	r1, r0, #1
 8014c80:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8014c84:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8014c88:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8014c8c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8014c90:	9000      	str	r0, [sp, #0]
 8014c92:	e7c7      	b.n	8014c24 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

08014c94 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 8014c94:	f89d 0000 	ldrb.w	r0, [sp]
 8014c98:	704b      	strb	r3, [r1, #1]
 8014c9a:	7008      	strb	r0, [r1, #0]
 8014c9c:	708a      	strb	r2, [r1, #2]
 8014c9e:	4770      	bx	lr

08014ca0 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 8014ca0:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8014ca4:	4770      	bx	lr

08014ca6 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 8014ca6:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 8014caa:	4770      	bx	lr

08014cac <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8014cac:	b507      	push	{r0, r1, r2, lr}
 8014cae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8014cb2:	ab01      	add	r3, sp, #4
 8014cb4:	6809      	ldr	r1, [r1, #0]
 8014cb6:	6800      	ldr	r0, [r0, #0]
 8014cb8:	f003 f851 	bl	8017d5e <_ZN8touchgfx6muldivElllRl>
 8014cbc:	b003      	add	sp, #12
 8014cbe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08014cc4 <_ZN8touchgfx7CWRUtil4sineEi>:
 8014cc4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014cc8:	fb90 f3f2 	sdiv	r3, r0, r2
 8014ccc:	fb03 0312 	mls	r3, r3, r2, r0
 8014cd0:	4413      	add	r3, r2
 8014cd2:	fb93 f0f2 	sdiv	r0, r3, r2
 8014cd6:	fb02 3010 	mls	r0, r2, r0, r3
 8014cda:	4b0a      	ldr	r3, [pc, #40]	; (8014d04 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 8014cdc:	285a      	cmp	r0, #90	; 0x5a
 8014cde:	dc02      	bgt.n	8014ce6 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8014ce0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8014ce4:	4770      	bx	lr
 8014ce6:	28b4      	cmp	r0, #180	; 0xb4
 8014ce8:	dc02      	bgt.n	8014cf0 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 8014cea:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8014cee:	e7f7      	b.n	8014ce0 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8014cf0:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8014cf4:	bfd4      	ite	le
 8014cf6:	38b4      	suble	r0, #180	; 0xb4
 8014cf8:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8014cfc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8014d00:	4240      	negs	r0, r0
 8014d02:	4770      	bx	lr
 8014d04:	08027934 	.word	0x08027934

08014d08 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8014d08:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8014d0c:	fb90 f3f2 	sdiv	r3, r0, r2
 8014d10:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014d12:	fb03 0012 	mls	r0, r3, r2, r0
 8014d16:	4410      	add	r0, r2
 8014d18:	fb90 f4f2 	sdiv	r4, r0, r2
 8014d1c:	fb02 0414 	mls	r4, r2, r4, r0
 8014d20:	f004 061f 	and.w	r6, r4, #31
 8014d24:	1164      	asrs	r4, r4, #5
 8014d26:	4620      	mov	r0, r4
 8014d28:	f7ff ffcc 	bl	8014cc4 <_ZN8touchgfx7CWRUtil4sineEi>
 8014d2c:	4605      	mov	r5, r0
 8014d2e:	b90e      	cbnz	r6, 8014d34 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 8014d30:	b002      	add	sp, #8
 8014d32:	bd70      	pop	{r4, r5, r6, pc}
 8014d34:	1c60      	adds	r0, r4, #1
 8014d36:	f7ff ffc5 	bl	8014cc4 <_ZN8touchgfx7CWRUtil4sineEi>
 8014d3a:	ab01      	add	r3, sp, #4
 8014d3c:	2220      	movs	r2, #32
 8014d3e:	4631      	mov	r1, r6
 8014d40:	1b40      	subs	r0, r0, r5
 8014d42:	f003 f80c 	bl	8017d5e <_ZN8touchgfx6muldivElllRl>
 8014d46:	4428      	add	r0, r5
 8014d48:	e7f2      	b.n	8014d30 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

08014d4a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 8014d4a:	b508      	push	{r3, lr}
 8014d4c:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8014d50:	f7ff ffda 	bl	8014d08 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014d54:	bd08      	pop	{r3, pc}
	...

08014d58 <_ZN8touchgfx6CircleC1Ev>:
 8014d58:	b510      	push	{r4, lr}
 8014d5a:	4604      	mov	r4, r0
 8014d5c:	f000 fd4e 	bl	80157fc <_ZN8touchgfx12CanvasWidgetC1Ev>
 8014d60:	4b08      	ldr	r3, [pc, #32]	; (8014d84 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 8014d62:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8014d66:	4620      	mov	r0, r4
 8014d68:	6023      	str	r3, [r4, #0]
 8014d6a:	2300      	movs	r3, #0
 8014d6c:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8014d70:	f24b 4205 	movw	r2, #46085	; 0xb405
 8014d74:	60a3      	str	r3, [r4, #8]
 8014d76:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8014d7a:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 8014d7e:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 8014d82:	bd10      	pop	{r4, pc}
 8014d84:	080279f4 	.word	0x080279f4

08014d88 <_ZN8touchgfx6Circle15setCapPrecisionEi>:
 8014d88:	29b4      	cmp	r1, #180	; 0xb4
 8014d8a:	bfa8      	it	ge
 8014d8c:	21b4      	movge	r1, #180	; 0xb4
 8014d8e:	2901      	cmp	r1, #1
 8014d90:	bfb8      	it	lt
 8014d92:	2101      	movlt	r1, #1
 8014d94:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
 8014d98:	4770      	bx	lr

08014d9a <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8014d9a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014d9e:	4606      	mov	r6, r0
 8014da0:	6810      	ldr	r0, [r2, #0]
 8014da2:	4698      	mov	r8, r3
 8014da4:	4691      	mov	r9, r2
 8014da6:	460f      	mov	r7, r1
 8014da8:	f7ff ffae 	bl	8014d08 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014dac:	a902      	add	r1, sp, #8
 8014dae:	2402      	movs	r4, #2
 8014db0:	f841 0d08 	str.w	r0, [r1, #-8]!
 8014db4:	4640      	mov	r0, r8
 8014db6:	f7ff ff79 	bl	8014cac <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014dba:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8014dbc:	fb90 f0f4 	sdiv	r0, r0, r4
 8014dc0:	4405      	add	r5, r0
 8014dc2:	f8d9 0000 	ldr.w	r0, [r9]
 8014dc6:	f7ff ffc0 	bl	8014d4a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014dca:	a902      	add	r1, sp, #8
 8014dcc:	f841 0d04 	str.w	r0, [r1, #-4]!
 8014dd0:	4640      	mov	r0, r8
 8014dd2:	f7ff ff6b 	bl	8014cac <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014dd6:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8014dd8:	4629      	mov	r1, r5
 8014dda:	fb90 f0f4 	sdiv	r0, r0, r4
 8014dde:	1a12      	subs	r2, r2, r0
 8014de0:	4638      	mov	r0, r7
 8014de2:	f00c ff5c 	bl	8021c9e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8014de6:	b003      	add	sp, #12
 8014de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014dec <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
 8014dec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014df0:	9e08      	ldr	r6, [sp, #32]
 8014df2:	4698      	mov	r8, r3
 8014df4:	4615      	mov	r5, r2
 8014df6:	460f      	mov	r7, r1
 8014df8:	6830      	ldr	r0, [r6, #0]
 8014dfa:	2402      	movs	r4, #2
 8014dfc:	f7ff ff84 	bl	8014d08 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014e00:	a902      	add	r1, sp, #8
 8014e02:	f841 0d08 	str.w	r0, [r1, #-8]!
 8014e06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e08:	f7ff ff50 	bl	8014cac <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014e0c:	682d      	ldr	r5, [r5, #0]
 8014e0e:	fb90 f0f4 	sdiv	r0, r0, r4
 8014e12:	4405      	add	r5, r0
 8014e14:	6830      	ldr	r0, [r6, #0]
 8014e16:	f7ff ff98 	bl	8014d4a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014e1a:	a902      	add	r1, sp, #8
 8014e1c:	f841 0d04 	str.w	r0, [r1, #-4]!
 8014e20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e22:	f7ff ff43 	bl	8014cac <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014e26:	f8d8 2000 	ldr.w	r2, [r8]
 8014e2a:	4629      	mov	r1, r5
 8014e2c:	fb90 f0f4 	sdiv	r0, r0, r4
 8014e30:	1a12      	subs	r2, r2, r0
 8014e32:	4638      	mov	r0, r7
 8014e34:	f00c fec2 	bl	8021bbc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8014e38:	b002      	add	sp, #8
 8014e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014e3e <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 8014e3e:	b513      	push	{r0, r1, r4, lr}
 8014e40:	e9cd 2300 	strd	r2, r3, [sp]
 8014e44:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8014e48:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8014e4c:	f7ff ffce 	bl	8014dec <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8014e50:	b002      	add	sp, #8
 8014e52:	bd10      	pop	{r4, pc}

08014e54 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8014e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e56:	680e      	ldr	r6, [r1, #0]
 8014e58:	681f      	ldr	r7, [r3, #0]
 8014e5a:	9807      	ldr	r0, [sp, #28]
 8014e5c:	42be      	cmp	r6, r7
 8014e5e:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8014e62:	bfb8      	it	lt
 8014e64:	601e      	strlt	r6, [r3, #0]
 8014e66:	680b      	ldr	r3, [r1, #0]
 8014e68:	6829      	ldr	r1, [r5, #0]
 8014e6a:	428b      	cmp	r3, r1
 8014e6c:	bfc8      	it	gt
 8014e6e:	602b      	strgt	r3, [r5, #0]
 8014e70:	6813      	ldr	r3, [r2, #0]
 8014e72:	6821      	ldr	r1, [r4, #0]
 8014e74:	428b      	cmp	r3, r1
 8014e76:	bfb8      	it	lt
 8014e78:	6023      	strlt	r3, [r4, #0]
 8014e7a:	6813      	ldr	r3, [r2, #0]
 8014e7c:	6802      	ldr	r2, [r0, #0]
 8014e7e:	4293      	cmp	r3, r2
 8014e80:	bfc8      	it	gt
 8014e82:	6003      	strgt	r3, [r0, #0]
 8014e84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014e86 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8014e86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e8a:	b089      	sub	sp, #36	; 0x24
 8014e8c:	4690      	mov	r8, r2
 8014e8e:	4606      	mov	r6, r0
 8014e90:	2402      	movs	r4, #2
 8014e92:	ad08      	add	r5, sp, #32
 8014e94:	6808      	ldr	r0, [r1, #0]
 8014e96:	461f      	mov	r7, r3
 8014e98:	4689      	mov	r9, r1
 8014e9a:	f7ff ff35 	bl	8014d08 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8014e9e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8014ea2:	4640      	mov	r0, r8
 8014ea4:	4629      	mov	r1, r5
 8014ea6:	f7ff ff01 	bl	8014cac <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014eaa:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8014eac:	fb90 f0f4 	sdiv	r0, r0, r4
 8014eb0:	4418      	add	r0, r3
 8014eb2:	9005      	str	r0, [sp, #20]
 8014eb4:	f8d9 0000 	ldr.w	r0, [r9]
 8014eb8:	f7ff ff47 	bl	8014d4a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8014ebc:	4629      	mov	r1, r5
 8014ebe:	9007      	str	r0, [sp, #28]
 8014ec0:	4640      	mov	r0, r8
 8014ec2:	f7ff fef3 	bl	8014cac <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8014ec6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014ec8:	aa08      	add	r2, sp, #32
 8014eca:	a905      	add	r1, sp, #20
 8014ecc:	fb90 f0f4 	sdiv	r0, r0, r4
 8014ed0:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8014ed2:	1a24      	subs	r4, r4, r0
 8014ed4:	4630      	mov	r0, r6
 8014ed6:	f842 4d08 	str.w	r4, [r2, #-8]!
 8014eda:	9302      	str	r3, [sp, #8]
 8014edc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014ede:	9301      	str	r3, [sp, #4]
 8014ee0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014ee2:	9300      	str	r3, [sp, #0]
 8014ee4:	463b      	mov	r3, r7
 8014ee6:	f7ff ffb5 	bl	8014e54 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8014eea:	b009      	add	sp, #36	; 0x24
 8014eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014ef0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 8014ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ef4:	4291      	cmp	r1, r2
 8014ef6:	b08d      	sub	sp, #52	; 0x34
 8014ef8:	461e      	mov	r6, r3
 8014efa:	4604      	mov	r4, r0
 8014efc:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8014f00:	ad0c      	add	r5, sp, #48	; 0x30
 8014f02:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8014f06:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8014f0a:	bfc8      	it	gt
 8014f0c:	e9cd 1206 	strdgt	r1, r2, [sp, #24]
 8014f10:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014f14:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 8014f18:	1a9b      	subs	r3, r3, r2
 8014f1a:	a907      	add	r1, sp, #28
 8014f1c:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8014f20:	bfa2      	ittt	ge
 8014f22:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8014f26:	2200      	movge	r2, #0
 8014f28:	e9cd 3206 	strdge	r3, r2, [sp, #24]
 8014f2c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8014f2e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8014f30:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8014f34:	f845 3d04 	str.w	r3, [r5, #-4]!
 8014f38:	4633      	mov	r3, r6
 8014f3a:	462a      	mov	r2, r5
 8014f3c:	9700      	str	r7, [sp, #0]
 8014f3e:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8014f42:	f7ff ffa0 	bl	8014e86 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8014f46:	9b07      	ldr	r3, [sp, #28]
 8014f48:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 8014f4c:	f103 0120 	add.w	r1, r3, #32
 8014f50:	fb91 f3f0 	sdiv	r3, r1, r0
 8014f54:	fb00 1313 	mls	r3, r0, r3, r1
 8014f58:	1ac3      	subs	r3, r0, r3
 8014f5a:	fb93 f2f0 	sdiv	r2, r3, r0
 8014f5e:	fb00 3312 	mls	r3, r0, r2, r3
 8014f62:	440b      	add	r3, r1
 8014f64:	f84a 3d0c 	str.w	r3, [sl, #-12]!
 8014f68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f6a:	9906      	ldr	r1, [sp, #24]
 8014f6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014f6e:	4291      	cmp	r1, r2
 8014f70:	db11      	blt.n	8014f96 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xa6>
 8014f72:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8014f74:	4651      	mov	r1, sl
 8014f76:	9700      	str	r7, [sp, #0]
 8014f78:	4620      	mov	r0, r4
 8014f7a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8014f7e:	462a      	mov	r2, r5
 8014f80:	930b      	str	r3, [sp, #44]	; 0x2c
 8014f82:	4633      	mov	r3, r6
 8014f84:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8014f88:	f7ff ff7d 	bl	8014e86 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8014f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f8e:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8014f92:	9309      	str	r3, [sp, #36]	; 0x24
 8014f94:	e7e8      	b.n	8014f68 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x78>
 8014f96:	f5a2 6234 	sub.w	r2, r2, #2880	; 0xb40
 8014f9a:	4291      	cmp	r1, r2
 8014f9c:	dd0c      	ble.n	8014fb8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc8>
 8014f9e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8014fa0:	a906      	add	r1, sp, #24
 8014fa2:	9700      	str	r7, [sp, #0]
 8014fa4:	4620      	mov	r0, r4
 8014fa6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8014faa:	462a      	mov	r2, r5
 8014fac:	930b      	str	r3, [sp, #44]	; 0x2c
 8014fae:	4633      	mov	r3, r6
 8014fb0:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8014fb4:	f7ff ff67 	bl	8014e86 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8014fb8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	f040 8097 	bne.w	80150ee <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fe>
 8014fc0:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 8014fc4:	1a52      	subs	r2, r2, r1
 8014fc6:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 8014fca:	da0a      	bge.n	8014fe2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xf2>
 8014fcc:	462a      	mov	r2, r5
 8014fce:	a90a      	add	r1, sp, #40	; 0x28
 8014fd0:	9700      	str	r7, [sp, #0]
 8014fd2:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8014fd6:	4633      	mov	r3, r6
 8014fd8:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8014fdc:	4620      	mov	r0, r4
 8014fde:	f7ff ff52 	bl	8014e86 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8014fe2:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8014fe6:	2bb3      	cmp	r3, #179	; 0xb3
 8014fe8:	d87e      	bhi.n	80150e8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8014fea:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 8014fee:	1a1b      	subs	r3, r3, r0
 8014ff0:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8014ff4:	da78      	bge.n	80150e8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8014ff6:	ad0c      	add	r5, sp, #48	; 0x30
 8014ff8:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 8014ffc:	f7ff fe84 	bl	8014d08 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015000:	f04f 0a02 	mov.w	sl, #2
 8015004:	f845 0d04 	str.w	r0, [r5, #-4]!
 8015008:	4658      	mov	r0, fp
 801500a:	4629      	mov	r1, r5
 801500c:	f7ff fe4e 	bl	8014cac <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015010:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015012:	18c3      	adds	r3, r0, r3
 8015014:	9807      	ldr	r0, [sp, #28]
 8015016:	9305      	str	r3, [sp, #20]
 8015018:	f7ff fe97 	bl	8014d4a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801501c:	4629      	mov	r1, r5
 801501e:	900b      	str	r0, [sp, #44]	; 0x2c
 8015020:	4658      	mov	r0, fp
 8015022:	f7ff fe43 	bl	8014cac <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015026:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015028:	9a05      	ldr	r2, [sp, #20]
 801502a:	a90a      	add	r1, sp, #40	; 0x28
 801502c:	1a1b      	subs	r3, r3, r0
 801502e:	9700      	str	r7, [sp, #0]
 8015030:	4620      	mov	r0, r4
 8015032:	9304      	str	r3, [sp, #16]
 8015034:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8015036:	fb93 f3fa 	sdiv	r3, r3, sl
 801503a:	1ad2      	subs	r2, r2, r3
 801503c:	920a      	str	r2, [sp, #40]	; 0x28
 801503e:	9a04      	ldr	r2, [sp, #16]
 8015040:	1ad3      	subs	r3, r2, r3
 8015042:	462a      	mov	r2, r5
 8015044:	930b      	str	r3, [sp, #44]	; 0x2c
 8015046:	4633      	mov	r3, r6
 8015048:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801504c:	f7ff ff02 	bl	8014e54 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8015050:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8015052:	9a05      	ldr	r2, [sp, #20]
 8015054:	a90a      	add	r1, sp, #40	; 0x28
 8015056:	4620      	mov	r0, r4
 8015058:	9700      	str	r7, [sp, #0]
 801505a:	fb93 f3fa 	sdiv	r3, r3, sl
 801505e:	189a      	adds	r2, r3, r2
 8015060:	920a      	str	r2, [sp, #40]	; 0x28
 8015062:	9a04      	ldr	r2, [sp, #16]
 8015064:	4413      	add	r3, r2
 8015066:	462a      	mov	r2, r5
 8015068:	930b      	str	r3, [sp, #44]	; 0x2c
 801506a:	4633      	mov	r3, r6
 801506c:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8015070:	f7ff fef0 	bl	8014e54 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8015074:	9806      	ldr	r0, [sp, #24]
 8015076:	f7ff fe47 	bl	8014d08 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801507a:	4629      	mov	r1, r5
 801507c:	900b      	str	r0, [sp, #44]	; 0x2c
 801507e:	4658      	mov	r0, fp
 8015080:	f7ff fe14 	bl	8014cac <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015084:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015086:	18c3      	adds	r3, r0, r3
 8015088:	9806      	ldr	r0, [sp, #24]
 801508a:	9304      	str	r3, [sp, #16]
 801508c:	f7ff fe5d 	bl	8014d4a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015090:	4629      	mov	r1, r5
 8015092:	900b      	str	r0, [sp, #44]	; 0x2c
 8015094:	4658      	mov	r0, fp
 8015096:	f7ff fe09 	bl	8014cac <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801509a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801509c:	9a04      	ldr	r2, [sp, #16]
 801509e:	a90a      	add	r1, sp, #40	; 0x28
 80150a0:	eba3 0b00 	sub.w	fp, r3, r0
 80150a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80150a6:	4620      	mov	r0, r4
 80150a8:	9700      	str	r7, [sp, #0]
 80150aa:	fb93 f3fa 	sdiv	r3, r3, sl
 80150ae:	1ad2      	subs	r2, r2, r3
 80150b0:	ebab 0303 	sub.w	r3, fp, r3
 80150b4:	920a      	str	r2, [sp, #40]	; 0x28
 80150b6:	462a      	mov	r2, r5
 80150b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80150ba:	4633      	mov	r3, r6
 80150bc:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80150c0:	f7ff fec8 	bl	8014e54 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80150c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80150c6:	9700      	str	r7, [sp, #0]
 80150c8:	462a      	mov	r2, r5
 80150ca:	a90a      	add	r1, sp, #40	; 0x28
 80150cc:	4620      	mov	r0, r4
 80150ce:	fb93 fafa 	sdiv	sl, r3, sl
 80150d2:	9b04      	ldr	r3, [sp, #16]
 80150d4:	4453      	add	r3, sl
 80150d6:	930a      	str	r3, [sp, #40]	; 0x28
 80150d8:	eb0a 030b 	add.w	r3, sl, fp
 80150dc:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80150e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80150e2:	4633      	mov	r3, r6
 80150e4:	f7ff feb6 	bl	8014e54 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80150e8:	b00d      	add	sp, #52	; 0x34
 80150ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80150f0:	a907      	add	r1, sp, #28
 80150f2:	9700      	str	r7, [sp, #0]
 80150f4:	4620      	mov	r0, r4
 80150f6:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80150fa:	462a      	mov	r2, r5
 80150fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80150fe:	4633      	mov	r3, r6
 8015100:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8015104:	f7ff febf 	bl	8014e86 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8015108:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801510a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801510c:	a906      	add	r1, sp, #24
 801510e:	9700      	str	r7, [sp, #0]
 8015110:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8015114:	462a      	mov	r2, r5
 8015116:	930b      	str	r3, [sp, #44]	; 0x2c
 8015118:	4633      	mov	r3, r6
 801511a:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801511e:	e75d      	b.n	8014fdc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>

08015120 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 8015120:	b530      	push	{r4, r5, lr}
 8015122:	4604      	mov	r4, r0
 8015124:	4608      	mov	r0, r1
 8015126:	4611      	mov	r1, r2
 8015128:	461a      	mov	r2, r3
 801512a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801512e:	b089      	sub	sp, #36	; 0x24
 8015130:	2500      	movs	r5, #0
 8015132:	015b      	lsls	r3, r3, #5
 8015134:	9505      	str	r5, [sp, #20]
 8015136:	9304      	str	r3, [sp, #16]
 8015138:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801513c:	015b      	lsls	r3, r3, #5
 801513e:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8015142:	ab07      	add	r3, sp, #28
 8015144:	2520      	movs	r5, #32
 8015146:	9302      	str	r3, [sp, #8]
 8015148:	ab06      	add	r3, sp, #24
 801514a:	9301      	str	r3, [sp, #4]
 801514c:	ab05      	add	r3, sp, #20
 801514e:	9300      	str	r3, [sp, #0]
 8015150:	ab04      	add	r3, sp, #16
 8015152:	f7ff fecd 	bl	8014ef0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8015156:	9a04      	ldr	r2, [sp, #16]
 8015158:	9805      	ldr	r0, [sp, #20]
 801515a:	9b06      	ldr	r3, [sp, #24]
 801515c:	9907      	ldr	r1, [sp, #28]
 801515e:	fb92 f2f5 	sdiv	r2, r2, r5
 8015162:	fb90 f0f5 	sdiv	r0, r0, r5
 8015166:	fb93 f3f5 	sdiv	r3, r3, r5
 801516a:	fb91 f1f5 	sdiv	r1, r1, r5
 801516e:	b292      	uxth	r2, r2
 8015170:	3002      	adds	r0, #2
 8015172:	b29b      	uxth	r3, r3
 8015174:	3102      	adds	r1, #2
 8015176:	1a80      	subs	r0, r0, r2
 8015178:	3a01      	subs	r2, #1
 801517a:	1ac9      	subs	r1, r1, r3
 801517c:	3b01      	subs	r3, #1
 801517e:	80a0      	strh	r0, [r4, #4]
 8015180:	4620      	mov	r0, r4
 8015182:	8022      	strh	r2, [r4, #0]
 8015184:	8063      	strh	r3, [r4, #2]
 8015186:	80e1      	strh	r1, [r4, #6]
 8015188:	b009      	add	sp, #36	; 0x24
 801518a:	bd30      	pop	{r4, r5, pc}

0801518c <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 801518c:	b510      	push	{r4, lr}
 801518e:	4604      	mov	r4, r0
 8015190:	e9d1 230f 	ldrd	r2, r3, [r1, #60]	; 0x3c
 8015194:	f7ff ffc4 	bl	8015120 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8015198:	4620      	mov	r0, r4
 801519a:	bd10      	pop	{r4, pc}

0801519c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 801519c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151a0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80151a2:	b0b8      	sub	sp, #224	; 0xe0
 80151a4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80151a6:	4604      	mov	r4, r0
 80151a8:	9302      	str	r3, [sp, #8]
 80151aa:	460f      	mov	r7, r1
 80151ac:	4293      	cmp	r3, r2
 80151ae:	9203      	str	r2, [sp, #12]
 80151b0:	ae09      	add	r6, sp, #36	; 0x24
 80151b2:	bfc8      	it	gt
 80151b4:	e9cd 2302 	strdgt	r2, r3, [sp, #8]
 80151b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80151bc:	1a9b      	subs	r3, r3, r2
 80151be:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80151c2:	bfa2      	ittt	ge
 80151c4:	2200      	movge	r2, #0
 80151c6:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 80151ca:	e9cd 2302 	strdge	r2, r3, [sp, #8]
 80151ce:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80151d0:	2a00      	cmp	r2, #0
 80151d2:	d131      	bne.n	8015238 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9c>
 80151d4:	463a      	mov	r2, r7
 80151d6:	4621      	mov	r1, r4
 80151d8:	a80a      	add	r0, sp, #40	; 0x28
 80151da:	f00c fb97 	bl	802190c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 80151de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80151e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80151e2:	9204      	str	r2, [sp, #16]
 80151e4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80151e8:	9305      	str	r3, [sp, #20]
 80151ea:	dc6f      	bgt.n	80152cc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x130>
 80151ec:	9b02      	ldr	r3, [sp, #8]
 80151ee:	a90a      	add	r1, sp, #40	; 0x28
 80151f0:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 80151f4:	4620      	mov	r0, r4
 80151f6:	9306      	str	r3, [sp, #24]
 80151f8:	016d      	lsls	r5, r5, #5
 80151fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80151fe:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8015202:	aa06      	add	r2, sp, #24
 8015204:	9309      	str	r3, [sp, #36]	; 0x24
 8015206:	4633      	mov	r3, r6
 8015208:	f7ff fdc7 	bl	8014d9a <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 801520c:	9f06      	ldr	r7, [sp, #24]
 801520e:	2d00      	cmp	r5, #0
 8015210:	d165      	bne.n	80152de <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x142>
 8015212:	3720      	adds	r7, #32
 8015214:	4639      	mov	r1, r7
 8015216:	9a03      	ldr	r2, [sp, #12]
 8015218:	9b05      	ldr	r3, [sp, #20]
 801521a:	442f      	add	r7, r5
 801521c:	4291      	cmp	r1, r2
 801521e:	dc6b      	bgt.n	80152f8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x15c>
 8015220:	9a04      	ldr	r2, [sp, #16]
 8015222:	4620      	mov	r0, r4
 8015224:	9106      	str	r1, [sp, #24]
 8015226:	a90a      	add	r1, sp, #40	; 0x28
 8015228:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801522c:	aa06      	add	r2, sp, #24
 801522e:	9309      	str	r3, [sp, #36]	; 0x24
 8015230:	4633      	mov	r3, r6
 8015232:	f7ff fe04 	bl	8014e3e <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8015236:	e7ed      	b.n	8015214 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8015238:	f9b1 c000 	ldrsh.w	ip, [r1]
 801523c:	88bd      	ldrh	r5, [r7, #4]
 801523e:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8015242:	4465      	add	r5, ip
 8015244:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 8015248:	b22d      	sxth	r5, r5
 801524a:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 801524e:	eba3 134c 	sub.w	r3, r3, ip, lsl #5
 8015252:	2d00      	cmp	r5, #0
 8015254:	bfb8      	it	lt
 8015256:	426d      	neglt	r5, r5
 8015258:	2b00      	cmp	r3, #0
 801525a:	bfb8      	it	lt
 801525c:	425b      	neglt	r3, r3
 801525e:	429d      	cmp	r5, r3
 8015260:	bfb8      	it	lt
 8015262:	461d      	movlt	r5, r3
 8015264:	88fb      	ldrh	r3, [r7, #6]
 8015266:	4403      	add	r3, r0
 8015268:	116d      	asrs	r5, r5, #5
 801526a:	b21b      	sxth	r3, r3
 801526c:	3501      	adds	r5, #1
 801526e:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
 8015272:	eba1 1140 	sub.w	r1, r1, r0, lsl #5
 8015276:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801527a:	2b00      	cmp	r3, #0
 801527c:	f100 0001 	add.w	r0, r0, #1
 8015280:	bfb8      	it	lt
 8015282:	425b      	neglt	r3, r3
 8015284:	2900      	cmp	r1, #0
 8015286:	ea4f 0060 	mov.w	r0, r0, asr #1
 801528a:	bfb8      	it	lt
 801528c:	4249      	neglt	r1, r1
 801528e:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8015292:	428b      	cmp	r3, r1
 8015294:	bfb8      	it	lt
 8015296:	460b      	movlt	r3, r1
 8015298:	115b      	asrs	r3, r3, #5
 801529a:	3301      	adds	r3, #1
 801529c:	435b      	muls	r3, r3
 801529e:	fb05 3505 	mla	r5, r5, r5, r3
 80152a2:	2302      	movs	r3, #2
 80152a4:	fb92 f2f3 	sdiv	r2, r2, r3
 80152a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80152aa:	1a9a      	subs	r2, r3, r2
 80152ac:	9209      	str	r2, [sp, #36]	; 0x24
 80152ae:	f7ff fd09 	bl	8014cc4 <_ZN8touchgfx7CWRUtil4sineEi>
 80152b2:	a90a      	add	r1, sp, #40	; 0x28
 80152b4:	900a      	str	r0, [sp, #40]	; 0x28
 80152b6:	4630      	mov	r0, r6
 80152b8:	f7ff fcf8 	bl	8014cac <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80152bc:	2320      	movs	r3, #32
 80152be:	fb90 f0f3 	sdiv	r0, r0, r3
 80152c2:	4340      	muls	r0, r0
 80152c4:	42a8      	cmp	r0, r5
 80152c6:	dd85      	ble.n	80151d4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x38>
 80152c8:	2401      	movs	r4, #1
 80152ca:	e036      	b.n	801533a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x19e>
 80152cc:	2102      	movs	r1, #2
 80152ce:	fb93 f3f1 	sdiv	r3, r3, r1
 80152d2:	4413      	add	r3, r2
 80152d4:	9305      	str	r3, [sp, #20]
 80152d6:	fb93 f3f1 	sdiv	r3, r3, r1
 80152da:	9304      	str	r3, [sp, #16]
 80152dc:	e786      	b.n	80151ec <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x50>
 80152de:	f107 0320 	add.w	r3, r7, #32
 80152e2:	fb93 f7f5 	sdiv	r7, r3, r5
 80152e6:	fb05 3717 	mls	r7, r5, r7, r3
 80152ea:	1bea      	subs	r2, r5, r7
 80152ec:	fb92 f7f5 	sdiv	r7, r2, r5
 80152f0:	fb05 2717 	mls	r7, r5, r7, r2
 80152f4:	441f      	add	r7, r3
 80152f6:	e78d      	b.n	8015214 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 80152f8:	9906      	ldr	r1, [sp, #24]
 80152fa:	428a      	cmp	r2, r1
 80152fc:	dd09      	ble.n	8015312 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
 80152fe:	9a04      	ldr	r2, [sp, #16]
 8015300:	a90a      	add	r1, sp, #40	; 0x28
 8015302:	4620      	mov	r0, r4
 8015304:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8015308:	aa03      	add	r2, sp, #12
 801530a:	9309      	str	r3, [sp, #36]	; 0x24
 801530c:	4633      	mov	r3, r6
 801530e:	f7ff fd96 	bl	8014e3e <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8015312:	9a05      	ldr	r2, [sp, #20]
 8015314:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 8015318:	1ac3      	subs	r3, r0, r3
 801531a:	b992      	cbnz	r2, 8015342 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a6>
 801531c:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8015320:	da04      	bge.n	801532c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8015322:	a80a      	add	r0, sp, #40	; 0x28
 8015324:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8015328:	f00c fc48 	bl	8021bbc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801532c:	a80a      	add	r0, sp, #40	; 0x28
 801532e:	f00c fdba 	bl	8021ea6 <_ZN8touchgfx6Canvas6renderEv>
 8015332:	4604      	mov	r4, r0
 8015334:	a80a      	add	r0, sp, #40	; 0x28
 8015336:	f00c fdf7 	bl	8021f28 <_ZN8touchgfx6CanvasD1Ev>
 801533a:	4620      	mov	r0, r4
 801533c:	b038      	add	sp, #224	; 0xe0
 801533e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015342:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 8015346:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 801534a:	ea4f 1747 	mov.w	r7, r7, lsl #5
 801534e:	da2b      	bge.n	80153a8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20c>
 8015350:	f7ff fcda 	bl	8014d08 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8015354:	4631      	mov	r1, r6
 8015356:	9009      	str	r0, [sp, #36]	; 0x24
 8015358:	a804      	add	r0, sp, #16
 801535a:	f7ff fca7 	bl	8014cac <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801535e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015360:	f10d 0814 	add.w	r8, sp, #20
 8015364:	4418      	add	r0, r3
 8015366:	9007      	str	r0, [sp, #28]
 8015368:	9803      	ldr	r0, [sp, #12]
 801536a:	f7ff fcee 	bl	8014d4a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801536e:	4631      	mov	r1, r6
 8015370:	9009      	str	r0, [sp, #36]	; 0x24
 8015372:	a804      	add	r0, sp, #16
 8015374:	f7ff fc9a 	bl	8014cac <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015378:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801537a:	1a18      	subs	r0, r3, r0
 801537c:	9b03      	ldr	r3, [sp, #12]
 801537e:	443b      	add	r3, r7
 8015380:	9008      	str	r0, [sp, #32]
 8015382:	9309      	str	r3, [sp, #36]	; 0x24
 8015384:	9b03      	ldr	r3, [sp, #12]
 8015386:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015388:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 801538c:	4293      	cmp	r3, r2
 801538e:	dd0b      	ble.n	80153a8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20c>
 8015390:	ab08      	add	r3, sp, #32
 8015392:	aa07      	add	r2, sp, #28
 8015394:	a90a      	add	r1, sp, #40	; 0x28
 8015396:	4620      	mov	r0, r4
 8015398:	e9cd 6800 	strd	r6, r8, [sp]
 801539c:	f7ff fd26 	bl	8014dec <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 80153a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153a2:	443b      	add	r3, r7
 80153a4:	9309      	str	r3, [sp, #36]	; 0x24
 80153a6:	e7ed      	b.n	8015384 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e8>
 80153a8:	9a03      	ldr	r2, [sp, #12]
 80153aa:	9b06      	ldr	r3, [sp, #24]
 80153ac:	429a      	cmp	r2, r3
 80153ae:	dd0a      	ble.n	80153c6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22a>
 80153b0:	a90a      	add	r1, sp, #40	; 0x28
 80153b2:	4620      	mov	r0, r4
 80153b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80153b8:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80153bc:	aa03      	add	r2, sp, #12
 80153be:	9309      	str	r3, [sp, #36]	; 0x24
 80153c0:	4633      	mov	r3, r6
 80153c2:	f7ff fd3c 	bl	8014e3e <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80153c6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80153ca:	4642      	mov	r2, r8
 80153cc:	9b02      	ldr	r3, [sp, #8]
 80153ce:	eba8 0805 	sub.w	r8, r8, r5
 80153d2:	429a      	cmp	r2, r3
 80153d4:	db0c      	blt.n	80153f0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x254>
 80153d6:	9206      	str	r2, [sp, #24]
 80153d8:	a90a      	add	r1, sp, #40	; 0x28
 80153da:	4620      	mov	r0, r4
 80153dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80153e0:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80153e4:	aa06      	add	r2, sp, #24
 80153e6:	9309      	str	r3, [sp, #36]	; 0x24
 80153e8:	4633      	mov	r3, r6
 80153ea:	f7ff fd28 	bl	8014e3e <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80153ee:	e7ec      	b.n	80153ca <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22e>
 80153f0:	9a06      	ldr	r2, [sp, #24]
 80153f2:	4293      	cmp	r3, r2
 80153f4:	da0a      	bge.n	801540c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x270>
 80153f6:	a90a      	add	r1, sp, #40	; 0x28
 80153f8:	4620      	mov	r0, r4
 80153fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80153fe:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8015402:	aa02      	add	r2, sp, #8
 8015404:	9309      	str	r3, [sp, #36]	; 0x24
 8015406:	4633      	mov	r3, r6
 8015408:	f7ff fd19 	bl	8014e3e <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 801540c:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8015410:	1a1b      	subs	r3, r3, r0
 8015412:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8015416:	da89      	bge.n	801532c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8015418:	f7ff fc76 	bl	8014d08 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801541c:	4631      	mov	r1, r6
 801541e:	9009      	str	r0, [sp, #36]	; 0x24
 8015420:	a804      	add	r0, sp, #16
 8015422:	f7ff fc43 	bl	8014cac <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8015426:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015428:	ad05      	add	r5, sp, #20
 801542a:	4418      	add	r0, r3
 801542c:	9007      	str	r0, [sp, #28]
 801542e:	9802      	ldr	r0, [sp, #8]
 8015430:	f7ff fc8b 	bl	8014d4a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8015434:	4631      	mov	r1, r6
 8015436:	9009      	str	r0, [sp, #36]	; 0x24
 8015438:	a804      	add	r0, sp, #16
 801543a:	f7ff fc37 	bl	8014cac <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801543e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015440:	1a18      	subs	r0, r3, r0
 8015442:	9b02      	ldr	r3, [sp, #8]
 8015444:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
 8015448:	9008      	str	r0, [sp, #32]
 801544a:	443b      	add	r3, r7
 801544c:	9309      	str	r3, [sp, #36]	; 0x24
 801544e:	9a02      	ldr	r2, [sp, #8]
 8015450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015452:	429a      	cmp	r2, r3
 8015454:	f77f af6a 	ble.w	801532c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8015458:	ab08      	add	r3, sp, #32
 801545a:	aa07      	add	r2, sp, #28
 801545c:	a90a      	add	r1, sp, #40	; 0x28
 801545e:	4620      	mov	r0, r4
 8015460:	e9cd 6500 	strd	r6, r5, [sp]
 8015464:	f7ff fcc2 	bl	8014dec <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8015468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801546a:	443b      	add	r3, r7
 801546c:	9309      	str	r3, [sp, #36]	; 0x24
 801546e:	e7ee      	b.n	801544e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b2>

08015470 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8015470:	4413      	add	r3, r2
 8015472:	7dc2      	ldrb	r2, [r0, #23]
 8015474:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015478:	4419      	add	r1, r3
 801547a:	7a03      	ldrb	r3, [r0, #8]
 801547c:	435a      	muls	r2, r3
 801547e:	1c53      	adds	r3, r2, #1
 8015480:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8015484:	121b      	asrs	r3, r3, #8
 8015486:	2bff      	cmp	r3, #255	; 0xff
 8015488:	b5f0      	push	{r4, r5, r6, r7, lr}
 801548a:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 801548e:	d13e      	bne.n	801550e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 8015490:	4427      	add	r7, r4
 8015492:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015496:	3103      	adds	r1, #3
 8015498:	7d86      	ldrb	r6, [r0, #22]
 801549a:	2bff      	cmp	r3, #255	; 0xff
 801549c:	d10a      	bne.n	80154b4 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 801549e:	f801 6c03 	strb.w	r6, [r1, #-3]
 80154a2:	7d43      	ldrb	r3, [r0, #21]
 80154a4:	f801 3c02 	strb.w	r3, [r1, #-2]
 80154a8:	7d03      	ldrb	r3, [r0, #20]
 80154aa:	f801 3c01 	strb.w	r3, [r1, #-1]
 80154ae:	42a7      	cmp	r7, r4
 80154b0:	d1ef      	bne.n	8015492 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 80154b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154b4:	b29a      	uxth	r2, r3
 80154b6:	43db      	mvns	r3, r3
 80154b8:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 80154bc:	fb16 f602 	smulbb	r6, r6, r2
 80154c0:	b2db      	uxtb	r3, r3
 80154c2:	fb05 6503 	mla	r5, r5, r3, r6
 80154c6:	b2ad      	uxth	r5, r5
 80154c8:	1c6e      	adds	r6, r5, #1
 80154ca:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80154ce:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 80154d2:	fb16 f603 	smulbb	r6, r6, r3
 80154d6:	122d      	asrs	r5, r5, #8
 80154d8:	f801 5c03 	strb.w	r5, [r1, #-3]
 80154dc:	7d45      	ldrb	r5, [r0, #21]
 80154de:	fb05 6502 	mla	r5, r5, r2, r6
 80154e2:	b2ad      	uxth	r5, r5
 80154e4:	1c6e      	adds	r6, r5, #1
 80154e6:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80154ea:	122d      	asrs	r5, r5, #8
 80154ec:	f801 5c02 	strb.w	r5, [r1, #-2]
 80154f0:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80154f4:	7d06      	ldrb	r6, [r0, #20]
 80154f6:	fb15 f303 	smulbb	r3, r5, r3
 80154fa:	fb06 3202 	mla	r2, r6, r2, r3
 80154fe:	b292      	uxth	r2, r2
 8015500:	1c53      	adds	r3, r2, #1
 8015502:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8015506:	1212      	asrs	r2, r2, #8
 8015508:	f801 2c01 	strb.w	r2, [r1, #-1]
 801550c:	e7cf      	b.n	80154ae <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 801550e:	b2de      	uxtb	r6, r3
 8015510:	2b00      	cmp	r3, #0
 8015512:	d0ce      	beq.n	80154b2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 8015514:	3103      	adds	r1, #3
 8015516:	4427      	add	r7, r4
 8015518:	f814 2b01 	ldrb.w	r2, [r4], #1
 801551c:	3103      	adds	r1, #3
 801551e:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8015522:	fb02 f306 	mul.w	r3, r2, r6
 8015526:	42bc      	cmp	r4, r7
 8015528:	f103 0201 	add.w	r2, r3, #1
 801552c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8015530:	ea4f 2222 	mov.w	r2, r2, asr #8
 8015534:	b295      	uxth	r5, r2
 8015536:	ea6f 0202 	mvn.w	r2, r2
 801553a:	b2d3      	uxtb	r3, r2
 801553c:	7d82      	ldrb	r2, [r0, #22]
 801553e:	fb1c fc03 	smulbb	ip, ip, r3
 8015542:	fb02 c205 	mla	r2, r2, r5, ip
 8015546:	b292      	uxth	r2, r2
 8015548:	f102 0c01 	add.w	ip, r2, #1
 801554c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8015550:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 8015554:	fb1c fc03 	smulbb	ip, ip, r3
 8015558:	ea4f 2222 	mov.w	r2, r2, asr #8
 801555c:	f801 2c06 	strb.w	r2, [r1, #-6]
 8015560:	7d42      	ldrb	r2, [r0, #21]
 8015562:	fb02 c205 	mla	r2, r2, r5, ip
 8015566:	b292      	uxth	r2, r2
 8015568:	f102 0c01 	add.w	ip, r2, #1
 801556c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8015570:	ea4f 2222 	mov.w	r2, r2, asr #8
 8015574:	f801 2c05 	strb.w	r2, [r1, #-5]
 8015578:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 801557c:	f890 c014 	ldrb.w	ip, [r0, #20]
 8015580:	fb12 f303 	smulbb	r3, r2, r3
 8015584:	fb0c 3305 	mla	r3, ip, r5, r3
 8015588:	b29b      	uxth	r3, r3
 801558a:	f103 0201 	add.w	r2, r3, #1
 801558e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8015592:	ea4f 2323 	mov.w	r3, r3, asr #8
 8015596:	f801 3c04 	strb.w	r3, [r1, #-4]
 801559a:	d1bd      	bne.n	8015518 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 801559c:	e789      	b.n	80154b2 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

0801559e <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 801559e:	b510      	push	{r4, lr}
 80155a0:	7d04      	ldrb	r4, [r0, #20]
 80155a2:	700c      	strb	r4, [r1, #0]
 80155a4:	7d41      	ldrb	r1, [r0, #21]
 80155a6:	7011      	strb	r1, [r2, #0]
 80155a8:	7d82      	ldrb	r2, [r0, #22]
 80155aa:	701a      	strb	r2, [r3, #0]
 80155ac:	9b02      	ldr	r3, [sp, #8]
 80155ae:	7dc2      	ldrb	r2, [r0, #23]
 80155b0:	2001      	movs	r0, #1
 80155b2:	701a      	strb	r2, [r3, #0]
 80155b4:	bd10      	pop	{r4, pc}

080155b6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 80155b6:	b570      	push	{r4, r5, r6, lr}
 80155b8:	4616      	mov	r6, r2
 80155ba:	4604      	mov	r4, r0
 80155bc:	460d      	mov	r5, r1
 80155be:	f7f4 fd39 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 80155c2:	6803      	ldr	r3, [r0, #0]
 80155c4:	4629      	mov	r1, r5
 80155c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155c8:	4798      	blx	r3
 80155ca:	7520      	strb	r0, [r4, #20]
 80155cc:	f7f4 fd32 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 80155d0:	6803      	ldr	r3, [r0, #0]
 80155d2:	4629      	mov	r1, r5
 80155d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80155d6:	4798      	blx	r3
 80155d8:	7560      	strb	r0, [r4, #21]
 80155da:	f7f4 fd2b 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 80155de:	6803      	ldr	r3, [r0, #0]
 80155e0:	4629      	mov	r1, r5
 80155e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80155e4:	4798      	blx	r3
 80155e6:	75e6      	strb	r6, [r4, #23]
 80155e8:	75a0      	strb	r0, [r4, #22]
 80155ea:	bd70      	pop	{r4, r5, r6, pc}

080155ec <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 80155ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155ee:	460e      	mov	r6, r1
 80155f0:	4617      	mov	r7, r2
 80155f2:	4604      	mov	r4, r0
 80155f4:	f000 f832 	bl	801565c <_ZN8touchgfx15AbstractPainterC1Ev>
 80155f8:	4b12      	ldr	r3, [pc, #72]	; (8015644 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 80155fa:	6023      	str	r3, [r4, #0]
 80155fc:	f7f4 fd1a 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8015600:	6803      	ldr	r3, [r0, #0]
 8015602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015604:	4798      	blx	r3
 8015606:	1e43      	subs	r3, r0, #1
 8015608:	425d      	negs	r5, r3
 801560a:	415d      	adcs	r5, r3
 801560c:	4b0e      	ldr	r3, [pc, #56]	; (8015648 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015612:	b130      	cbz	r0, 8015622 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 8015614:	6803      	ldr	r3, [r0, #0]
 8015616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015618:	4798      	blx	r3
 801561a:	2801      	cmp	r0, #1
 801561c:	bf08      	it	eq
 801561e:	f045 0501 	orreq.w	r5, r5, #1
 8015622:	b92d      	cbnz	r5, 8015630 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 8015624:	4b09      	ldr	r3, [pc, #36]	; (801564c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 8015626:	2129      	movs	r1, #41	; 0x29
 8015628:	4a09      	ldr	r2, [pc, #36]	; (8015650 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 801562a:	480a      	ldr	r0, [pc, #40]	; (8015654 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 801562c:	f00d fd3a 	bl	80230a4 <__assert_func>
 8015630:	4b09      	ldr	r3, [pc, #36]	; (8015658 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 8015632:	4620      	mov	r0, r4
 8015634:	463a      	mov	r2, r7
 8015636:	4631      	mov	r1, r6
 8015638:	6023      	str	r3, [r4, #0]
 801563a:	f7ff ffbc 	bl	80155b6 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 801563e:	4620      	mov	r0, r4
 8015640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015642:	bf00      	nop
 8015644:	0802791c 	.word	0x0802791c
 8015648:	2000b1ac 	.word	0x2000b1ac
 801564c:	08027a6c 	.word	0x08027a6c
 8015650:	08027b30 	.word	0x08027b30
 8015654:	08027aca 	.word	0x08027aca
 8015658:	08027b18 	.word	0x08027b18

0801565c <_ZN8touchgfx15AbstractPainterC1Ev>:
 801565c:	4a03      	ldr	r2, [pc, #12]	; (801566c <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 801565e:	6002      	str	r2, [r0, #0]
 8015660:	2200      	movs	r2, #0
 8015662:	6042      	str	r2, [r0, #4]
 8015664:	22ff      	movs	r2, #255	; 0xff
 8015666:	7202      	strb	r2, [r0, #8]
 8015668:	4770      	bx	lr
 801566a:	bf00      	nop
 801566c:	08027b74 	.word	0x08027b74

08015670 <_ZN8touchgfx15AbstractPainterD1Ev>:
 8015670:	4770      	bx	lr

08015672 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 8015672:	8081      	strh	r1, [r0, #4]
 8015674:	80c2      	strh	r2, [r0, #6]
 8015676:	4770      	bx	lr

08015678 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 8015678:	7201      	strb	r1, [r0, #8]
 801567a:	4770      	bx	lr

0801567c <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 801567c:	6281      	str	r1, [r0, #40]	; 0x28
 801567e:	4770      	bx	lr

08015680 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8015680:	b513      	push	{r0, r1, r4, lr}
 8015682:	6803      	ldr	r3, [r0, #0]
 8015684:	4604      	mov	r4, r0
 8015686:	4601      	mov	r1, r0
 8015688:	4668      	mov	r0, sp
 801568a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801568c:	4798      	blx	r3
 801568e:	6823      	ldr	r3, [r4, #0]
 8015690:	4669      	mov	r1, sp
 8015692:	4620      	mov	r0, r4
 8015694:	691b      	ldr	r3, [r3, #16]
 8015696:	4798      	blx	r3
 8015698:	b002      	add	sp, #8
 801569a:	bd10      	pop	{r4, pc}

0801569c <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 801569c:	b510      	push	{r4, lr}
 801569e:	2200      	movs	r2, #0
 80156a0:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80156a4:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80156a8:	8002      	strh	r2, [r0, #0]
 80156aa:	8042      	strh	r2, [r0, #2]
 80156ac:	8084      	strh	r4, [r0, #4]
 80156ae:	80c1      	strh	r1, [r0, #6]
 80156b0:	bd10      	pop	{r4, pc}

080156b2 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 80156b2:	2200      	movs	r2, #0
 80156b4:	8002      	strh	r2, [r0, #0]
 80156b6:	8042      	strh	r2, [r0, #2]
 80156b8:	8082      	strh	r2, [r0, #4]
 80156ba:	80c2      	strh	r2, [r0, #6]
 80156bc:	4770      	bx	lr
	...

080156c0 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 80156c0:	b508      	push	{r3, lr}
 80156c2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80156c4:	b928      	cbnz	r0, 80156d2 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 80156c6:	4b03      	ldr	r3, [pc, #12]	; (80156d4 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 80156c8:	2127      	movs	r1, #39	; 0x27
 80156ca:	4a03      	ldr	r2, [pc, #12]	; (80156d8 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 80156cc:	4803      	ldr	r0, [pc, #12]	; (80156dc <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 80156ce:	f00d fce9 	bl	80230a4 <__assert_func>
 80156d2:	bd08      	pop	{r3, pc}
 80156d4:	08027b80 	.word	0x08027b80
 80156d8:	08027c64 	.word	0x08027c64
 80156dc:	08027ba7 	.word	0x08027ba7

080156e0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80156e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156e4:	b089      	sub	sp, #36	; 0x24
 80156e6:	4604      	mov	r4, r0
 80156e8:	6808      	ldr	r0, [r1, #0]
 80156ea:	f04f 0a00 	mov.w	sl, #0
 80156ee:	6849      	ldr	r1, [r1, #4]
 80156f0:	ab02      	add	r3, sp, #8
 80156f2:	f04f 0b01 	mov.w	fp, #1
 80156f6:	c303      	stmia	r3!, {r0, r1}
 80156f8:	4b3f      	ldr	r3, [pc, #252]	; (80157f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 80156fa:	4621      	mov	r1, r4
 80156fc:	a804      	add	r0, sp, #16
 80156fe:	781b      	ldrb	r3, [r3, #0]
 8015700:	2b01      	cmp	r3, #1
 8015702:	6823      	ldr	r3, [r4, #0]
 8015704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015706:	bf1f      	itttt	ne
 8015708:	f10d 0906 	addne.w	r9, sp, #6
 801570c:	ae03      	addne	r6, sp, #12
 801570e:	f10d 050e 	addne.w	r5, sp, #14
 8015712:	f10d 080a 	addne.w	r8, sp, #10
 8015716:	bf01      	itttt	eq
 8015718:	f10d 090e 	addeq.w	r9, sp, #14
 801571c:	f10d 0606 	addeq.w	r6, sp, #6
 8015720:	ad03      	addeq	r5, sp, #12
 8015722:	f10d 0808 	addeq.w	r8, sp, #8
 8015726:	4798      	blx	r3
 8015728:	f9b5 3000 	ldrsh.w	r3, [r5]
 801572c:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8015730:	2b00      	cmp	r3, #0
 8015732:	d056      	beq.n	80157e2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 8015734:	4293      	cmp	r3, r2
 8015736:	bfa8      	it	ge
 8015738:	4613      	movge	r3, r2
 801573a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801573e:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8015742:	2f00      	cmp	r7, #0
 8015744:	dd34      	ble.n	80157b0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 8015746:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 801574a:	f8bd c014 	ldrh.w	ip, [sp, #20]
 801574e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8015752:	4484      	add	ip, r0
 8015754:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8015758:	f9b6 e000 	ldrsh.w	lr, [r6]
 801575c:	fa0f fc8c 	sxth.w	ip, ip
 8015760:	f9b9 1000 	ldrsh.w	r1, [r9]
 8015764:	f8ad 2018 	strh.w	r2, [sp, #24]
 8015768:	4562      	cmp	r2, ip
 801576a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801576e:	f8ad e01c 	strh.w	lr, [sp, #28]
 8015772:	f8ad 101e 	strh.w	r1, [sp, #30]
 8015776:	da29      	bge.n	80157cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8015778:	4472      	add	r2, lr
 801577a:	b212      	sxth	r2, r2
 801577c:	4290      	cmp	r0, r2
 801577e:	da25      	bge.n	80157cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8015780:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8015784:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8015788:	4402      	add	r2, r0
 801578a:	b212      	sxth	r2, r2
 801578c:	4293      	cmp	r3, r2
 801578e:	da1d      	bge.n	80157cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8015790:	440b      	add	r3, r1
 8015792:	b21b      	sxth	r3, r3
 8015794:	4298      	cmp	r0, r3
 8015796:	da19      	bge.n	80157cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8015798:	6823      	ldr	r3, [r4, #0]
 801579a:	a906      	add	r1, sp, #24
 801579c:	4620      	mov	r0, r4
 801579e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80157a0:	4798      	blx	r3
 80157a2:	b998      	cbnz	r0, 80157cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80157a4:	107f      	asrs	r7, r7, #1
 80157a6:	f04f 0a01 	mov.w	sl, #1
 80157aa:	f8ad 7006 	strh.w	r7, [sp, #6]
 80157ae:	e7c6      	b.n	801573e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80157b0:	d10c      	bne.n	80157cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 80157b2:	f8ad b006 	strh.w	fp, [sp, #6]
 80157b6:	f8b8 2000 	ldrh.w	r2, [r8]
 80157ba:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80157be:	440a      	add	r2, r1
 80157c0:	f8a8 2000 	strh.w	r2, [r8]
 80157c4:	882b      	ldrh	r3, [r5, #0]
 80157c6:	1a5b      	subs	r3, r3, r1
 80157c8:	802b      	strh	r3, [r5, #0]
 80157ca:	e7ad      	b.n	8015728 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80157cc:	f1ba 0f00 	cmp.w	sl, #0
 80157d0:	d0f1      	beq.n	80157b6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 80157d2:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80157d6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80157da:	429a      	cmp	r2, r3
 80157dc:	bf08      	it	eq
 80157de:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 80157e0:	e7e9      	b.n	80157b6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 80157e2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80157e6:	429a      	cmp	r2, r3
 80157e8:	bf04      	itt	eq
 80157ea:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 80157ee:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 80157f0:	b009      	add	sp, #36	; 0x24
 80157f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157f6:	bf00      	nop
 80157f8:	2000b1a4 	.word	0x2000b1a4

080157fc <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80157fc:	2200      	movs	r2, #0
 80157fe:	2101      	movs	r1, #1
 8015800:	8082      	strh	r2, [r0, #4]
 8015802:	80c2      	strh	r2, [r0, #6]
 8015804:	8102      	strh	r2, [r0, #8]
 8015806:	8142      	strh	r2, [r0, #10]
 8015808:	8182      	strh	r2, [r0, #12]
 801580a:	81c2      	strh	r2, [r0, #14]
 801580c:	8202      	strh	r2, [r0, #16]
 801580e:	8242      	strh	r2, [r0, #18]
 8015810:	61c2      	str	r2, [r0, #28]
 8015812:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8015816:	6282      	str	r2, [r0, #40]	; 0x28
 8015818:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801581c:	4905      	ldr	r1, [pc, #20]	; (8015834 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 801581e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015822:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015826:	6001      	str	r1, [r0, #0]
 8015828:	8582      	strh	r2, [r0, #44]	; 0x2c
 801582a:	22ff      	movs	r2, #255	; 0xff
 801582c:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8015830:	4770      	bx	lr
 8015832:	bf00      	nop
 8015834:	08027bec 	.word	0x08027bec

08015838 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 8015838:	4770      	bx	lr

0801583a <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801583a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801583e:	4770      	bx	lr

08015840 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8015840:	b570      	push	{r4, r5, r6, lr}
 8015842:	790b      	ldrb	r3, [r1, #4]
 8015844:	4604      	mov	r4, r0
 8015846:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801584a:	460e      	mov	r6, r1
 801584c:	2b00      	cmp	r3, #0
 801584e:	bf0c      	ite	eq
 8015850:	2301      	moveq	r3, #1
 8015852:	2300      	movne	r3, #0
 8015854:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8015858:	d110      	bne.n	801587c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801585a:	b185      	cbz	r5, 801587e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 801585c:	7933      	ldrb	r3, [r6, #4]
 801585e:	2b01      	cmp	r3, #1
 8015860:	d113      	bne.n	801588a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8015862:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015864:	b188      	cbz	r0, 801588a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8015866:	6803      	ldr	r3, [r0, #0]
 8015868:	68db      	ldr	r3, [r3, #12]
 801586a:	4798      	blx	r3
 801586c:	b168      	cbz	r0, 801588a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801586e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015870:	4621      	mov	r1, r4
 8015872:	6803      	ldr	r3, [r0, #0]
 8015874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015878:	689b      	ldr	r3, [r3, #8]
 801587a:	4718      	bx	r3
 801587c:	b12d      	cbz	r5, 801588a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 801587e:	6823      	ldr	r3, [r4, #0]
 8015880:	4620      	mov	r0, r4
 8015882:	695b      	ldr	r3, [r3, #20]
 8015884:	4798      	blx	r3
 8015886:	2d00      	cmp	r5, #0
 8015888:	d1e8      	bne.n	801585c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801588a:	bd70      	pop	{r4, r5, r6, pc}

0801588c <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 801588c:	4770      	bx	lr

0801588e <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 801588e:	6803      	ldr	r3, [r0, #0]
 8015890:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8015894:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015896:	4718      	bx	r3

08015898 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 8015898:	b510      	push	{r4, lr}
 801589a:	4604      	mov	r4, r0
 801589c:	212c      	movs	r1, #44	; 0x2c
 801589e:	f00d fbd6 	bl	802304e <_ZdlPvj>
 80158a2:	4620      	mov	r0, r4
 80158a4:	bd10      	pop	{r4, pc}

080158a6 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 80158a6:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80158aa:	2bff      	cmp	r3, #255	; 0xff
 80158ac:	b510      	push	{r4, lr}
 80158ae:	d104      	bne.n	80158ba <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 80158b0:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 80158b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80158b6:	429a      	cmp	r2, r3
 80158b8:	d105      	bne.n	80158c6 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 80158ba:	2300      	movs	r3, #0
 80158bc:	8003      	strh	r3, [r0, #0]
 80158be:	8043      	strh	r3, [r0, #2]
 80158c0:	8083      	strh	r3, [r0, #4]
 80158c2:	80c3      	strh	r3, [r0, #6]
 80158c4:	bd10      	pop	{r4, pc}
 80158c6:	2300      	movs	r3, #0
 80158c8:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80158cc:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 80158d0:	8003      	strh	r3, [r0, #0]
 80158d2:	8043      	strh	r3, [r0, #2]
 80158d4:	8084      	strh	r4, [r0, #4]
 80158d6:	80c2      	strh	r2, [r0, #6]
 80158d8:	e7f4      	b.n	80158c4 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

080158da <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 80158da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80158de:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80158e2:	b087      	sub	sp, #28
 80158e4:	4604      	mov	r4, r0
 80158e6:	4689      	mov	r9, r1
 80158e8:	b363      	cbz	r3, 8015944 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 80158ea:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80158ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80158f0:	429a      	cmp	r2, r3
 80158f2:	d027      	beq.n	8015944 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 80158f4:	ad06      	add	r5, sp, #24
 80158f6:	2700      	movs	r7, #0
 80158f8:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 80158fc:	4628      	mov	r0, r5
 80158fe:	f003 fe7f 	bl	8019600 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015902:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015906:	a904      	add	r1, sp, #16
 8015908:	f8ad 0014 	strh.w	r0, [sp, #20]
 801590c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015910:	4620      	mov	r0, r4
 8015912:	6823      	ldr	r3, [r4, #0]
 8015914:	9704      	str	r7, [sp, #16]
 8015916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015918:	4798      	blx	r3
 801591a:	f7f4 fb8b 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 801591e:	6803      	ldr	r3, [r0, #0]
 8015920:	4606      	mov	r6, r0
 8015922:	4628      	mov	r0, r5
 8015924:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8015928:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801592a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801592e:	f003 ff6f 	bl	8019810 <_ZNK8touchgfx6Bitmap7getDataEv>
 8015932:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8015936:	4601      	mov	r1, r0
 8015938:	9701      	str	r7, [sp, #4]
 801593a:	aa04      	add	r2, sp, #16
 801593c:	9300      	str	r3, [sp, #0]
 801593e:	4630      	mov	r0, r6
 8015940:	464b      	mov	r3, r9
 8015942:	47c0      	blx	r8
 8015944:	b007      	add	sp, #28
 8015946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801594a <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 801594a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801594c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015950:	460d      	mov	r5, r1
 8015952:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8015956:	2100      	movs	r1, #0
 8015958:	f8ad 3006 	strh.w	r3, [sp, #6]
 801595c:	4604      	mov	r4, r0
 801595e:	6803      	ldr	r3, [r0, #0]
 8015960:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015964:	6a1b      	ldr	r3, [r3, #32]
 8015966:	9100      	str	r1, [sp, #0]
 8015968:	4669      	mov	r1, sp
 801596a:	4798      	blx	r3
 801596c:	4621      	mov	r1, r4
 801596e:	a802      	add	r0, sp, #8
 8015970:	f002 f95b 	bl	8017c2a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015974:	f7f4 fb5e 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8015978:	6803      	ldr	r3, [r0, #0]
 801597a:	aa02      	add	r2, sp, #8
 801597c:	4669      	mov	r1, sp
 801597e:	699e      	ldr	r6, [r3, #24]
 8015980:	462b      	mov	r3, r5
 8015982:	47b0      	blx	r6
 8015984:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015988:	2800      	cmp	r0, #0
 801598a:	bf08      	it	eq
 801598c:	461d      	moveq	r5, r3
 801598e:	84e5      	strh	r5, [r4, #38]	; 0x26
 8015990:	b004      	add	sp, #16
 8015992:	bd70      	pop	{r4, r5, r6, pc}

08015994 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 8015994:	2200      	movs	r2, #0
 8015996:	8082      	strh	r2, [r0, #4]
 8015998:	80c2      	strh	r2, [r0, #6]
 801599a:	8102      	strh	r2, [r0, #8]
 801599c:	8142      	strh	r2, [r0, #10]
 801599e:	8182      	strh	r2, [r0, #12]
 80159a0:	81c2      	strh	r2, [r0, #14]
 80159a2:	8202      	strh	r2, [r0, #16]
 80159a4:	8242      	strh	r2, [r0, #18]
 80159a6:	61c2      	str	r2, [r0, #28]
 80159a8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80159ac:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80159b0:	2201      	movs	r2, #1
 80159b2:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 80159b6:	4a04      	ldr	r2, [pc, #16]	; (80159c8 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x34>)
 80159b8:	6002      	str	r2, [r0, #0]
 80159ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80159be:	84c2      	strh	r2, [r0, #38]	; 0x26
 80159c0:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 80159c4:	4770      	bx	lr
 80159c6:	bf00      	nop
 80159c8:	08027d28 	.word	0x08027d28

080159cc <_ZN8touchgfx8TextArea13getTextHeightEv>:
 80159cc:	b570      	push	{r4, r5, r6, lr}
 80159ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80159d2:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80159d4:	4604      	mov	r4, r0
 80159d6:	429a      	cmp	r2, r3
 80159d8:	d00c      	beq.n	80159f4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 80159da:	f850 3b26 	ldr.w	r3, [r0], #38
 80159de:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 80159e0:	f7f6 fd3e 	bl	800c460 <_ZNK8touchgfx9TypedText7getTextEv>
 80159e4:	2300      	movs	r3, #0
 80159e6:	4601      	mov	r1, r0
 80159e8:	46ac      	mov	ip, r5
 80159ea:	4620      	mov	r0, r4
 80159ec:	461a      	mov	r2, r3
 80159ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80159f2:	4760      	bx	ip
 80159f4:	2000      	movs	r0, #0
 80159f6:	bd70      	pop	{r4, r5, r6, pc}

080159f8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80159f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80159fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80159fe:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8015a00:	429a      	cmp	r2, r3
 8015a02:	d016      	beq.n	8015a32 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 8015a04:	f100 0426 	add.w	r4, r0, #38	; 0x26
 8015a08:	4620      	mov	r0, r4
 8015a0a:	f7f3 ff6f 	bl	80098ec <_ZNK8touchgfx9TypedText7getFontEv>
 8015a0e:	6803      	ldr	r3, [r0, #0]
 8015a10:	4605      	mov	r5, r0
 8015a12:	4620      	mov	r0, r4
 8015a14:	69de      	ldr	r6, [r3, #28]
 8015a16:	f7f3 ff85 	bl	8009924 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8015a1a:	4607      	mov	r7, r0
 8015a1c:	4620      	mov	r0, r4
 8015a1e:	f7f6 fd1f 	bl	800c460 <_ZNK8touchgfx9TypedText7getTextEv>
 8015a22:	2300      	movs	r3, #0
 8015a24:	4602      	mov	r2, r0
 8015a26:	4639      	mov	r1, r7
 8015a28:	9300      	str	r3, [sp, #0]
 8015a2a:	4628      	mov	r0, r5
 8015a2c:	47b0      	blx	r6
 8015a2e:	b003      	add	sp, #12
 8015a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a32:	2000      	movs	r0, #0
 8015a34:	e7fb      	b.n	8015a2e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

08015a36 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8015a36:	b40e      	push	{r1, r2, r3}
 8015a38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a40:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8015a42:	b09b      	sub	sp, #108	; 0x6c
 8015a44:	4604      	mov	r4, r0
 8015a46:	429a      	cmp	r2, r3
 8015a48:	d03f      	beq.n	8015aca <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 8015a4a:	f100 0726 	add.w	r7, r0, #38	; 0x26
 8015a4e:	ab22      	add	r3, sp, #136	; 0x88
 8015a50:	4638      	mov	r0, r7
 8015a52:	9303      	str	r3, [sp, #12]
 8015a54:	f7f3 ff4a 	bl	80098ec <_ZNK8touchgfx9TypedText7getFontEv>
 8015a58:	6803      	ldr	r3, [r0, #0]
 8015a5a:	4680      	mov	r8, r0
 8015a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a5e:	4798      	blx	r3
 8015a60:	4606      	mov	r6, r0
 8015a62:	b205      	sxth	r5, r0
 8015a64:	a804      	add	r0, sp, #16
 8015a66:	f003 f811 	bl	8018a8c <_ZN8touchgfx12TextProviderC1Ev>
 8015a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8015a6e:	4640      	mov	r0, r8
 8015a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a72:	4798      	blx	r3
 8015a74:	9a03      	ldr	r2, [sp, #12]
 8015a76:	4603      	mov	r3, r0
 8015a78:	9921      	ldr	r1, [sp, #132]	; 0x84
 8015a7a:	a804      	add	r0, sp, #16
 8015a7c:	f003 f823 	bl	8018ac6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8015a80:	4638      	mov	r0, r7
 8015a82:	f7f3 ff4f 	bl	8009924 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8015a86:	4680      	mov	r8, r0
 8015a88:	4638      	mov	r0, r7
 8015a8a:	f7f3 ff2f 	bl	80098ec <_ZNK8touchgfx9TypedText7getFontEv>
 8015a8e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8015a92:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 8015a96:	4642      	mov	r2, r8
 8015a98:	9300      	str	r3, [sp, #0]
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	a804      	add	r0, sp, #16
 8015a9e:	f000 ff8a 	bl	80169b6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8015aa2:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8015aa6:	b203      	sxth	r3, r0
 8015aa8:	18a9      	adds	r1, r5, r2
 8015aaa:	2900      	cmp	r1, #0
 8015aac:	dd0b      	ble.n	8015ac6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 8015aae:	3b01      	subs	r3, #1
 8015ab0:	fb13 f302 	smulbb	r3, r3, r2
 8015ab4:	fb16 3300 	smlabb	r3, r6, r0, r3
 8015ab8:	b21d      	sxth	r5, r3
 8015aba:	4628      	mov	r0, r5
 8015abc:	b01b      	add	sp, #108	; 0x6c
 8015abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ac2:	b003      	add	sp, #12
 8015ac4:	4770      	bx	lr
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	dcf7      	bgt.n	8015aba <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 8015aca:	2500      	movs	r5, #0
 8015acc:	e7f5      	b.n	8015aba <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
	...

08015ad0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8015ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ad4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015ad8:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8015ada:	b08d      	sub	sp, #52	; 0x34
 8015adc:	4604      	mov	r4, r0
 8015ade:	429e      	cmp	r6, r3
 8015ae0:	4688      	mov	r8, r1
 8015ae2:	d04b      	beq.n	8015b7c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8015ae4:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8015ae8:	4628      	mov	r0, r5
 8015aea:	f7f3 feff 	bl	80098ec <_ZNK8touchgfx9TypedText7getFontEv>
 8015aee:	4607      	mov	r7, r0
 8015af0:	2800      	cmp	r0, #0
 8015af2:	d043      	beq.n	8015b7c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8015af4:	4628      	mov	r0, r5
 8015af6:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8015afa:	f7f3 ff2b 	bl	8009954 <_ZNK8touchgfx9TypedText11assertValidEv>
 8015afe:	4b21      	ldr	r3, [pc, #132]	; (8015b84 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 8015b00:	4628      	mov	r0, r5
 8015b02:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8015b0c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8015b10:	785e      	ldrb	r6, [r3, #1]
 8015b12:	f7f3 ff07 	bl	8009924 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8015b16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015b18:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8015b1c:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8015b20:	9309      	str	r3, [sp, #36]	; 0x24
 8015b22:	4b19      	ldr	r3, [pc, #100]	; (8015b88 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 8015b24:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8015b2e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015b32:	9707      	str	r7, [sp, #28]
 8015b34:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8015b38:	f88d 6020 	strb.w	r6, [sp, #32]
 8015b3c:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8015b40:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8015b44:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8015b48:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8015b4c:	b10a      	cbz	r2, 8015b52 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 8015b4e:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8015b50:	b906      	cbnz	r6, 8015b54 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 8015b52:	689e      	ldr	r6, [r3, #8]
 8015b54:	af05      	add	r7, sp, #20
 8015b56:	4621      	mov	r1, r4
 8015b58:	4638      	mov	r0, r7
 8015b5a:	f002 f866 	bl	8017c2a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015b5e:	4628      	mov	r0, r5
 8015b60:	f7f6 fc7e 	bl	800c460 <_ZNK8touchgfx9TypedText7getTextEv>
 8015b64:	2300      	movs	r3, #0
 8015b66:	9001      	str	r0, [sp, #4]
 8015b68:	4630      	mov	r0, r6
 8015b6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015b6e:	ab07      	add	r3, sp, #28
 8015b70:	9300      	str	r3, [sp, #0]
 8015b72:	4643      	mov	r3, r8
 8015b74:	e897 0006 	ldmia.w	r7, {r1, r2}
 8015b78:	f000 fcea 	bl	8016550 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015b7c:	b00d      	add	sp, #52	; 0x34
 8015b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b82:	bf00      	nop
 8015b84:	2000b23c 	.word	0x2000b23c
 8015b88:	2000b1ac 	.word	0x2000b1ac

08015b8c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8015b8c:	b570      	push	{r4, r5, r6, lr}
 8015b8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015b92:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8015b94:	4604      	mov	r4, r0
 8015b96:	429a      	cmp	r2, r3
 8015b98:	d021      	beq.n	8015bde <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 8015b9a:	6803      	ldr	r3, [r0, #0]
 8015b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b9e:	4798      	blx	r3
 8015ba0:	6823      	ldr	r3, [r4, #0]
 8015ba2:	4605      	mov	r5, r0
 8015ba4:	4620      	mov	r0, r4
 8015ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015ba8:	4798      	blx	r3
 8015baa:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8015bae:	4606      	mov	r6, r0
 8015bb0:	b22d      	sxth	r5, r5
 8015bb2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8015bb6:	6823      	ldr	r3, [r4, #0]
 8015bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015bba:	d109      	bne.n	8015bd0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8015bbc:	4629      	mov	r1, r5
 8015bbe:	4620      	mov	r0, r4
 8015bc0:	4798      	blx	r3
 8015bc2:	6823      	ldr	r3, [r4, #0]
 8015bc4:	4631      	mov	r1, r6
 8015bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015bc8:	4620      	mov	r0, r4
 8015bca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015bce:	4718      	bx	r3
 8015bd0:	4601      	mov	r1, r0
 8015bd2:	4620      	mov	r0, r4
 8015bd4:	4798      	blx	r3
 8015bd6:	6823      	ldr	r3, [r4, #0]
 8015bd8:	4629      	mov	r1, r5
 8015bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015bdc:	e7f4      	b.n	8015bc8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 8015bde:	bd70      	pop	{r4, r5, r6, pc}

08015be0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8015be0:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8015be4:	84c1      	strh	r1, [r0, #38]	; 0x26
 8015be6:	b922      	cbnz	r2, 8015bf2 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8015be8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015bec:	b90b      	cbnz	r3, 8015bf2 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8015bee:	f7ff bfcd 	b.w	8015b8c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8015bf2:	4770      	bx	lr

08015bf4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8015bf4:	b538      	push	{r3, r4, r5, lr}
 8015bf6:	880b      	ldrh	r3, [r1, #0]
 8015bf8:	4605      	mov	r5, r0
 8015bfa:	4604      	mov	r4, r0
 8015bfc:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8015bfe:	8813      	ldrh	r3, [r2, #0]
 8015c00:	f825 3f30 	strh.w	r3, [r5, #48]!
 8015c04:	4628      	mov	r0, r5
 8015c06:	f003 fcfb 	bl	8019600 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015c0a:	8120      	strh	r0, [r4, #8]
 8015c0c:	4628      	mov	r0, r5
 8015c0e:	f003 fd31 	bl	8019674 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015c12:	8160      	strh	r0, [r4, #10]
 8015c14:	bd38      	pop	{r3, r4, r5, pc}

08015c16 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8015c16:	b510      	push	{r4, lr}
 8015c18:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8015c1c:	4604      	mov	r4, r0
 8015c1e:	2bff      	cmp	r3, #255	; 0xff
 8015c20:	d006      	beq.n	8015c30 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8015c22:	2300      	movs	r3, #0
 8015c24:	8003      	strh	r3, [r0, #0]
 8015c26:	8043      	strh	r3, [r0, #2]
 8015c28:	8083      	strh	r3, [r0, #4]
 8015c2a:	80c3      	strh	r3, [r0, #6]
 8015c2c:	4620      	mov	r0, r4
 8015c2e:	bd10      	pop	{r4, pc}
 8015c30:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8015c34:	b11b      	cbz	r3, 8015c3e <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8015c36:	3130      	adds	r1, #48	; 0x30
 8015c38:	f003 fd56 	bl	80196e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8015c3c:	e7f6      	b.n	8015c2c <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8015c3e:	312e      	adds	r1, #46	; 0x2e
 8015c40:	e7fa      	b.n	8015c38 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08015c44 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8015c44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c48:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8015c4c:	b08b      	sub	sp, #44	; 0x2c
 8015c4e:	4604      	mov	r4, r0
 8015c50:	4689      	mov	r9, r1
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d043      	beq.n	8015cde <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9a>
 8015c56:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8015c58:	a805      	add	r0, sp, #20
 8015c5a:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015c5e:	f003 fccf 	bl	8019600 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015c62:	4607      	mov	r7, r0
 8015c64:	fa0f f880 	sxth.w	r8, r0
 8015c68:	a805      	add	r0, sp, #20
 8015c6a:	f003 fd03 	bl	8019674 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015c6e:	f9b9 6000 	ldrsh.w	r6, [r9]
 8015c72:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 8015c76:	2300      	movs	r3, #0
 8015c78:	fa0f fc80 	sxth.w	ip, r0
 8015c7c:	4432      	add	r2, r6
 8015c7e:	9306      	str	r3, [sp, #24]
 8015c80:	b292      	uxth	r2, r2
 8015c82:	fa0f fe82 	sxth.w	lr, r2
 8015c86:	459e      	cmp	lr, r3
 8015c88:	dd2b      	ble.n	8015ce2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 8015c8a:	45b0      	cmp	r8, r6
 8015c8c:	dd29      	ble.n	8015ce2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 8015c8e:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 8015c92:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 8015c96:	442b      	add	r3, r5
 8015c98:	b29b      	uxth	r3, r3
 8015c9a:	b219      	sxth	r1, r3
 8015c9c:	2900      	cmp	r1, #0
 8015c9e:	dd20      	ble.n	8015ce2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 8015ca0:	45ac      	cmp	ip, r5
 8015ca2:	dd1e      	ble.n	8015ce2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 8015ca4:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8015ca8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8015cac:	45f0      	cmp	r8, lr
 8015cae:	bfb8      	it	lt
 8015cb0:	463a      	movlt	r2, r7
 8015cb2:	458c      	cmp	ip, r1
 8015cb4:	bfb8      	it	lt
 8015cb6:	4603      	movlt	r3, r0
 8015cb8:	f8ad 6018 	strh.w	r6, [sp, #24]
 8015cbc:	1b92      	subs	r2, r2, r6
 8015cbe:	1b5b      	subs	r3, r3, r5
 8015cc0:	f8ad 501a 	strh.w	r5, [sp, #26]
 8015cc4:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015cc8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015ccc:	4b1d      	ldr	r3, [pc, #116]	; (8015d44 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>)
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	b953      	cbnz	r3, 8015ce8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa4>
 8015cd2:	4b1d      	ldr	r3, [pc, #116]	; (8015d48 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x104>)
 8015cd4:	21b8      	movs	r1, #184	; 0xb8
 8015cd6:	4a1d      	ldr	r2, [pc, #116]	; (8015d4c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8015cd8:	481d      	ldr	r0, [pc, #116]	; (8015d50 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8015cda:	f00d f9e3 	bl	80230a4 <__assert_func>
 8015cde:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8015ce0:	e7ba      	b.n	8015c58 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	9307      	str	r3, [sp, #28]
 8015ce6:	e7f1      	b.n	8015ccc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x88>
 8015ce8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8015cec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015cf0:	429a      	cmp	r2, r3
 8015cf2:	d024      	beq.n	8015d3e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 8015cf4:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8015cf8:	b30b      	cbz	r3, 8015d3e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 8015cfa:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8015cfe:	b1f3      	cbz	r3, 8015d3e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 8015d00:	2300      	movs	r3, #0
 8015d02:	a908      	add	r1, sp, #32
 8015d04:	4620      	mov	r0, r4
 8015d06:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8015d0a:	6823      	ldr	r3, [r4, #0]
 8015d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d0e:	4798      	blx	r3
 8015d10:	4b10      	ldr	r3, [pc, #64]	; (8015d54 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8015d18:	b10a      	cbz	r2, 8015d1e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8015d1a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015d1c:	b900      	cbnz	r0, 8015d20 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xdc>
 8015d1e:	6898      	ldr	r0, [r3, #8]
 8015d20:	2501      	movs	r5, #1
 8015d22:	6801      	ldr	r1, [r0, #0]
 8015d24:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8015d28:	9502      	str	r5, [sp, #8]
 8015d2a:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8015d2e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8015d32:	9401      	str	r4, [sp, #4]
 8015d34:	ac06      	add	r4, sp, #24
 8015d36:	9400      	str	r4, [sp, #0]
 8015d38:	68cc      	ldr	r4, [r1, #12]
 8015d3a:	a905      	add	r1, sp, #20
 8015d3c:	47a0      	blx	r4
 8015d3e:	b00b      	add	sp, #44	; 0x2c
 8015d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d44:	2000b274 	.word	0x2000b274
 8015d48:	08027e0c 	.word	0x08027e0c
 8015d4c:	08027ee0 	.word	0x08027ee0
 8015d50:	08027e48 	.word	0x08027e48
 8015d54:	2000b1ac 	.word	0x2000b1ac

08015d58 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8015d58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015d5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d60:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8015d62:	4604      	mov	r4, r0
 8015d64:	429a      	cmp	r2, r3
 8015d66:	d018      	beq.n	8015d9a <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 8015d68:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8015d6c:	4628      	mov	r0, r5
 8015d6e:	f7f3 fdbd 	bl	80098ec <_ZNK8touchgfx9TypedText7getFontEv>
 8015d72:	6803      	ldr	r3, [r0, #0]
 8015d74:	4606      	mov	r6, r0
 8015d76:	4628      	mov	r0, r5
 8015d78:	69df      	ldr	r7, [r3, #28]
 8015d7a:	f7f3 fdd3 	bl	8009924 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8015d7e:	4680      	mov	r8, r0
 8015d80:	4628      	mov	r0, r5
 8015d82:	f7f6 fb6d 	bl	800c460 <_ZNK8touchgfx9TypedText7getTextEv>
 8015d86:	2300      	movs	r3, #0
 8015d88:	4602      	mov	r2, r0
 8015d8a:	4641      	mov	r1, r8
 8015d8c:	9300      	str	r3, [sp, #0]
 8015d8e:	4630      	mov	r0, r6
 8015d90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015d92:	47b8      	blx	r7
 8015d94:	b002      	add	sp, #8
 8015d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d9a:	2000      	movs	r0, #0
 8015d9c:	e7fa      	b.n	8015d94 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

08015d9e <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8015d9e:	b570      	push	{r4, r5, r6, lr}
 8015da0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015da4:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8015da6:	4604      	mov	r4, r0
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d00c      	beq.n	8015dc6 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 8015dac:	f850 3b26 	ldr.w	r3, [r0], #38
 8015db0:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8015db2:	f7f6 fb55 	bl	800c460 <_ZNK8touchgfx9TypedText7getTextEv>
 8015db6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8015db8:	4601      	mov	r1, r0
 8015dba:	46ac      	mov	ip, r5
 8015dbc:	4620      	mov	r0, r4
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015dc4:	4760      	bx	ip
 8015dc6:	2000      	movs	r0, #0
 8015dc8:	bd70      	pop	{r4, r5, r6, pc}
	...

08015dcc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8015dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015dd4:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8015dd6:	b08d      	sub	sp, #52	; 0x34
 8015dd8:	4604      	mov	r4, r0
 8015dda:	429e      	cmp	r6, r3
 8015ddc:	460f      	mov	r7, r1
 8015dde:	d048      	beq.n	8015e72 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8015de0:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8015de4:	4628      	mov	r0, r5
 8015de6:	f7f3 fd81 	bl	80098ec <_ZNK8touchgfx9TypedText7getFontEv>
 8015dea:	4680      	mov	r8, r0
 8015dec:	2800      	cmp	r0, #0
 8015dee:	d040      	beq.n	8015e72 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8015df0:	4628      	mov	r0, r5
 8015df2:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8015df6:	f7f3 fdad 	bl	8009954 <_ZNK8touchgfx9TypedText11assertValidEv>
 8015dfa:	4b1f      	ldr	r3, [pc, #124]	; (8015e78 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 8015dfc:	4628      	mov	r0, r5
 8015dfe:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8015e08:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8015e0c:	785e      	ldrb	r6, [r3, #1]
 8015e0e:	f7f3 fd89 	bl	8009924 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8015e12:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8015e16:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8015e1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015e1c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8015e20:	f88d 6020 	strb.w	r6, [sp, #32]
 8015e24:	ae05      	add	r6, sp, #20
 8015e26:	9309      	str	r3, [sp, #36]	; 0x24
 8015e28:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8015e2c:	f8cd 801c 	str.w	r8, [sp, #28]
 8015e30:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8015e34:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8015e38:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8015e3c:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8015e40:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8015e44:	f7f4 f8f6 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8015e48:	4621      	mov	r1, r4
 8015e4a:	4680      	mov	r8, r0
 8015e4c:	4630      	mov	r0, r6
 8015e4e:	f001 feec 	bl	8017c2a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015e52:	4628      	mov	r0, r5
 8015e54:	f7f6 fb04 	bl	800c460 <_ZNK8touchgfx9TypedText7getTextEv>
 8015e58:	2300      	movs	r3, #0
 8015e5a:	9303      	str	r3, [sp, #12]
 8015e5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015e5e:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8015e62:	ab07      	add	r3, sp, #28
 8015e64:	4640      	mov	r0, r8
 8015e66:	9300      	str	r3, [sp, #0]
 8015e68:	463b      	mov	r3, r7
 8015e6a:	e896 0006 	ldmia.w	r6, {r1, r2}
 8015e6e:	f000 fb6f 	bl	8016550 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8015e72:	b00d      	add	sp, #52	; 0x34
 8015e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e78:	2000b23c 	.word	0x2000b23c

08015e7c <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 8015e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e80:	461c      	mov	r4, r3
 8015e82:	4606      	mov	r6, r0
 8015e84:	9f06      	ldr	r7, [sp, #24]
 8015e86:	f7ff feb5 	bl	8015bf4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8015e8a:	8823      	ldrh	r3, [r4, #0]
 8015e8c:	f04f 0802 	mov.w	r8, #2
 8015e90:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 8015e94:	4638      	mov	r0, r7
 8015e96:	86b3      	strh	r3, [r6, #52]	; 0x34
 8015e98:	883b      	ldrh	r3, [r7, #0]
 8015e9a:	fb95 f5f8 	sdiv	r5, r5, r8
 8015e9e:	86f3      	strh	r3, [r6, #54]	; 0x36
 8015ea0:	b2ad      	uxth	r5, r5
 8015ea2:	f003 fbad 	bl	8019600 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015ea6:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 8015eaa:	eba5 0050 	sub.w	r0, r5, r0, lsr #1
 8015eae:	fb94 f4f8 	sdiv	r4, r4, r8
 8015eb2:	b2a4      	uxth	r4, r4
 8015eb4:	8730      	strh	r0, [r6, #56]	; 0x38
 8015eb6:	4638      	mov	r0, r7
 8015eb8:	f003 fbdc 	bl	8019674 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015ebc:	eba4 0050 	sub.w	r0, r4, r0, lsr #1
 8015ec0:	8770      	strh	r0, [r6, #58]	; 0x3a
 8015ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08015ec8 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 8015ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ecc:	4604      	mov	r4, r0
 8015ece:	b08c      	sub	sp, #48	; 0x30
 8015ed0:	460d      	mov	r5, r1
 8015ed2:	f7ff feb7 	bl	8015c44 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8015ed6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015eda:	b33b      	cbz	r3, 8015f2c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x64>
 8015edc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8015ede:	a805      	add	r0, sp, #20
 8015ee0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015ee4:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	; 0x38
 8015ee8:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	; 0x3a
 8015eec:	f003 fb88 	bl	8019600 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015ef0:	4606      	mov	r6, r0
 8015ef2:	a805      	add	r0, sp, #20
 8015ef4:	f003 fbbe 	bl	8019674 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015ef8:	6869      	ldr	r1, [r5, #4]
 8015efa:	f8ad 001e 	strh.w	r0, [sp, #30]
 8015efe:	ab08      	add	r3, sp, #32
 8015f00:	6828      	ldr	r0, [r5, #0]
 8015f02:	ad08      	add	r5, sp, #32
 8015f04:	f8ad 8018 	strh.w	r8, [sp, #24]
 8015f08:	f8ad 701a 	strh.w	r7, [sp, #26]
 8015f0c:	f8ad 601c 	strh.w	r6, [sp, #28]
 8015f10:	c303      	stmia	r3!, {r0, r1}
 8015f12:	a906      	add	r1, sp, #24
 8015f14:	4628      	mov	r0, r5
 8015f16:	f7fd fb9d 	bl	8013654 <_ZN8touchgfx4RectaNERKS0_>
 8015f1a:	4b24      	ldr	r3, [pc, #144]	; (8015fac <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe4>)
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	b93b      	cbnz	r3, 8015f30 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x68>
 8015f20:	4b23      	ldr	r3, [pc, #140]	; (8015fb0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe8>)
 8015f22:	21b8      	movs	r1, #184	; 0xb8
 8015f24:	4a23      	ldr	r2, [pc, #140]	; (8015fb4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xec>)
 8015f26:	4824      	ldr	r0, [pc, #144]	; (8015fb8 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf0>)
 8015f28:	f00d f8bc 	bl	80230a4 <__assert_func>
 8015f2c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8015f2e:	e7d6      	b.n	8015ede <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x16>
 8015f30:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8015f34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f38:	429a      	cmp	r2, r3
 8015f3a:	d034      	beq.n	8015fa6 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xde>
 8015f3c:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d030      	beq.n	8015fa6 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xde>
 8015f44:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8015f48:	b36b      	cbz	r3, 8015fa6 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xde>
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	a90a      	add	r1, sp, #40	; 0x28
 8015f4e:	4620      	mov	r0, r4
 8015f50:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8015f54:	6823      	ldr	r3, [r4, #0]
 8015f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f58:	4798      	blx	r3
 8015f5a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015f5e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8015f60:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8015f64:	1a9b      	subs	r3, r3, r2
 8015f66:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015f6a:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8015f6c:	1ac9      	subs	r1, r1, r3
 8015f6e:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8015f72:	4912      	ldr	r1, [pc, #72]	; (8015fbc <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf4>)
 8015f74:	6809      	ldr	r1, [r1, #0]
 8015f76:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
 8015f7a:	b108      	cbz	r0, 8015f80 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xb8>
 8015f7c:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8015f7e:	b900      	cbnz	r0, 8015f82 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xba>
 8015f80:	6888      	ldr	r0, [r1, #8]
 8015f82:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 8015f86:	2601      	movs	r6, #1
 8015f88:	440b      	add	r3, r1
 8015f8a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8015f8e:	440a      	add	r2, r1
 8015f90:	6801      	ldr	r1, [r0, #0]
 8015f92:	9602      	str	r6, [sp, #8]
 8015f94:	b21b      	sxth	r3, r3
 8015f96:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8015f9a:	b212      	sxth	r2, r2
 8015f9c:	e9cd 5400 	strd	r5, r4, [sp]
 8015fa0:	68cc      	ldr	r4, [r1, #12]
 8015fa2:	a905      	add	r1, sp, #20
 8015fa4:	47a0      	blx	r4
 8015fa6:	b00c      	add	sp, #48	; 0x30
 8015fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fac:	2000b274 	.word	0x2000b274
 8015fb0:	08027e0c 	.word	0x08027e0c
 8015fb4:	08028004 	.word	0x08028004
 8015fb8:	08027e48 	.word	0x08027e48
 8015fbc:	2000b1ac 	.word	0x2000b1ac

08015fc0 <_ZN8touchgfx14ButtonWithIconC1Ev>:
 8015fc0:	2101      	movs	r1, #1
 8015fc2:	2200      	movs	r2, #0
 8015fc4:	b510      	push	{r4, lr}
 8015fc6:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8015fca:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8015fce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015fd2:	4c0c      	ldr	r4, [pc, #48]	; (8016004 <_ZN8touchgfx14ButtonWithIconC1Ev+0x44>)
 8015fd4:	8082      	strh	r2, [r0, #4]
 8015fd6:	80c2      	strh	r2, [r0, #6]
 8015fd8:	8102      	strh	r2, [r0, #8]
 8015fda:	8142      	strh	r2, [r0, #10]
 8015fdc:	8182      	strh	r2, [r0, #12]
 8015fde:	81c2      	strh	r2, [r0, #14]
 8015fe0:	8202      	strh	r2, [r0, #16]
 8015fe2:	8242      	strh	r2, [r0, #18]
 8015fe4:	61c2      	str	r2, [r0, #28]
 8015fe6:	6282      	str	r2, [r0, #40]	; 0x28
 8015fe8:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8015fec:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8015fee:	8601      	strh	r1, [r0, #48]	; 0x30
 8015ff0:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 8015ff4:	6004      	str	r4, [r0, #0]
 8015ff6:	8681      	strh	r1, [r0, #52]	; 0x34
 8015ff8:	86c1      	strh	r1, [r0, #54]	; 0x36
 8015ffa:	8702      	strh	r2, [r0, #56]	; 0x38
 8015ffc:	8742      	strh	r2, [r0, #58]	; 0x3a
 8015ffe:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016002:	bd10      	pop	{r4, pc}
 8016004:	08027f98 	.word	0x08027f98

08016008 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8016008:	b570      	push	{r4, r5, r6, lr}
 801600a:	4605      	mov	r5, r0
 801600c:	880b      	ldrh	r3, [r1, #0]
 801600e:	4604      	mov	r4, r0
 8016010:	84c3      	strh	r3, [r0, #38]	; 0x26
 8016012:	f855 3b26 	ldr.w	r3, [r5], #38
 8016016:	4628      	mov	r0, r5
 8016018:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 801601a:	f003 faf1 	bl	8019600 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801601e:	b201      	sxth	r1, r0
 8016020:	4620      	mov	r0, r4
 8016022:	47b0      	blx	r6
 8016024:	6823      	ldr	r3, [r4, #0]
 8016026:	4628      	mov	r0, r5
 8016028:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 801602a:	f003 fb23 	bl	8019674 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801602e:	b201      	sxth	r1, r0
 8016030:	4620      	mov	r0, r4
 8016032:	47b0      	blx	r6
 8016034:	4628      	mov	r0, r5
 8016036:	f003 fbb1 	bl	801979c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801603a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 801603e:	bd70      	pop	{r4, r5, r6, pc}

08016040 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8016040:	b510      	push	{r4, lr}
 8016042:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8016046:	4604      	mov	r4, r0
 8016048:	2bff      	cmp	r3, #255	; 0xff
 801604a:	d006      	beq.n	801605a <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801604c:	2300      	movs	r3, #0
 801604e:	8003      	strh	r3, [r0, #0]
 8016050:	8043      	strh	r3, [r0, #2]
 8016052:	8083      	strh	r3, [r0, #4]
 8016054:	80c3      	strh	r3, [r0, #6]
 8016056:	4620      	mov	r0, r4
 8016058:	bd10      	pop	{r4, pc}
 801605a:	3126      	adds	r1, #38	; 0x26
 801605c:	f003 fb44 	bl	80196e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8016060:	e7f9      	b.n	8016056 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08016064 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8016064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016068:	4604      	mov	r4, r0
 801606a:	b088      	sub	sp, #32
 801606c:	2500      	movs	r5, #0
 801606e:	460f      	mov	r7, r1
 8016070:	f854 3b26 	ldr.w	r3, [r4], #38
 8016074:	a904      	add	r1, sp, #16
 8016076:	4606      	mov	r6, r0
 8016078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801607a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801607e:	4798      	blx	r3
 8016080:	4620      	mov	r0, r4
 8016082:	f003 fabd 	bl	8019600 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016086:	4680      	mov	r8, r0
 8016088:	4620      	mov	r0, r4
 801608a:	f003 faf3 	bl	8019674 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801608e:	9506      	str	r5, [sp, #24]
 8016090:	ad06      	add	r5, sp, #24
 8016092:	f8ad 001e 	strh.w	r0, [sp, #30]
 8016096:	4639      	mov	r1, r7
 8016098:	f8ad 801c 	strh.w	r8, [sp, #28]
 801609c:	4628      	mov	r0, r5
 801609e:	f7fd fad9 	bl	8013654 <_ZN8touchgfx4RectaNERKS0_>
 80160a2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80160a6:	b1c3      	cbz	r3, 80160da <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 80160a8:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80160ac:	b1ab      	cbz	r3, 80160da <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 80160ae:	4b0c      	ldr	r3, [pc, #48]	; (80160e0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80160b6:	b10a      	cbz	r2, 80160bc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 80160b8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80160ba:	b900      	cbnz	r0, 80160be <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 80160bc:	6898      	ldr	r0, [r3, #8]
 80160be:	2701      	movs	r7, #1
 80160c0:	6801      	ldr	r1, [r0, #0]
 80160c2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80160c6:	9702      	str	r7, [sp, #8]
 80160c8:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80160cc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80160d0:	e9cd 5600 	strd	r5, r6, [sp]
 80160d4:	68cd      	ldr	r5, [r1, #12]
 80160d6:	4621      	mov	r1, r4
 80160d8:	47a8      	blx	r5
 80160da:	b008      	add	sp, #32
 80160dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160e0:	2000b1ac 	.word	0x2000b1ac

080160e4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 80160e4:	4b02      	ldr	r3, [pc, #8]	; (80160f0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 80160e6:	6018      	str	r0, [r3, #0]
 80160e8:	4b02      	ldr	r3, [pc, #8]	; (80160f4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 80160ea:	6019      	str	r1, [r3, #0]
 80160ec:	4770      	bx	lr
 80160ee:	bf00      	nop
 80160f0:	2000b1b4 	.word	0x2000b1b4
 80160f4:	2000b1c8 	.word	0x2000b1c8

080160f8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 80160f8:	b538      	push	{r3, r4, r5, lr}
 80160fa:	4c2b      	ldr	r4, [pc, #172]	; (80161a8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 80160fc:	4b2b      	ldr	r3, [pc, #172]	; (80161ac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 80160fe:	6821      	ldr	r1, [r4, #0]
 8016100:	681a      	ldr	r2, [r3, #0]
 8016102:	4281      	cmp	r1, r0
 8016104:	4d2a      	ldr	r5, [pc, #168]	; (80161b0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 8016106:	492b      	ldr	r1, [pc, #172]	; (80161b4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 8016108:	d108      	bne.n	801611c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 801610a:	682b      	ldr	r3, [r5, #0]
 801610c:	4293      	cmp	r3, r2
 801610e:	d105      	bne.n	801611c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8016110:	6808      	ldr	r0, [r1, #0]
 8016112:	280f      	cmp	r0, #15
 8016114:	bf94      	ite	ls
 8016116:	2000      	movls	r0, #0
 8016118:	2001      	movhi	r0, #1
 801611a:	bd38      	pop	{r3, r4, r5, pc}
 801611c:	4b26      	ldr	r3, [pc, #152]	; (80161b8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 801611e:	6020      	str	r0, [r4, #0]
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	602a      	str	r2, [r5, #0]
 8016124:	4298      	cmp	r0, r3
 8016126:	d905      	bls.n	8016134 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 8016128:	4b24      	ldr	r3, [pc, #144]	; (80161bc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801612a:	2137      	movs	r1, #55	; 0x37
 801612c:	4a24      	ldr	r2, [pc, #144]	; (80161c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801612e:	4825      	ldr	r0, [pc, #148]	; (80161c4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8016130:	f00c ffb8 	bl	80230a4 <__assert_func>
 8016134:	f010 0403 	ands.w	r4, r0, #3
 8016138:	bf1f      	itttt	ne
 801613a:	f1c4 0504 	rsbne	r5, r4, #4
 801613e:	3b04      	subne	r3, #4
 8016140:	1952      	addne	r2, r2, r5
 8016142:	191b      	addne	r3, r3, r4
 8016144:	4d20      	ldr	r5, [pc, #128]	; (80161c8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 8016146:	4402      	add	r2, r0
 8016148:	1a1b      	subs	r3, r3, r0
 801614a:	3001      	adds	r0, #1
 801614c:	602a      	str	r2, [r5, #0]
 801614e:	f020 0401 	bic.w	r4, r0, #1
 8016152:	42a3      	cmp	r3, r4
 8016154:	d203      	bcs.n	801615e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 8016156:	4b19      	ldr	r3, [pc, #100]	; (80161bc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8016158:	214a      	movs	r1, #74	; 0x4a
 801615a:	4a19      	ldr	r2, [pc, #100]	; (80161c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801615c:	e7e7      	b.n	801612e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801615e:	f010 0002 	ands.w	r0, r0, #2
 8016162:	bf1f      	itttt	ne
 8016164:	f1c0 0504 	rsbne	r5, r0, #4
 8016168:	1952      	addne	r2, r2, r5
 801616a:	1f05      	subne	r5, r0, #4
 801616c:	195b      	addne	r3, r3, r5
 801616e:	4422      	add	r2, r4
 8016170:	4d16      	ldr	r5, [pc, #88]	; (80161cc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 8016172:	1b1b      	subs	r3, r3, r4
 8016174:	602a      	str	r2, [r5, #0]
 8016176:	429c      	cmp	r4, r3
 8016178:	d903      	bls.n	8016182 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 801617a:	4b10      	ldr	r3, [pc, #64]	; (80161bc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801617c:	215d      	movs	r1, #93	; 0x5d
 801617e:	4a10      	ldr	r2, [pc, #64]	; (80161c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8016180:	e7d5      	b.n	801612e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8016182:	b120      	cbz	r0, 801618e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8016184:	f1c0 0504 	rsb	r5, r0, #4
 8016188:	3804      	subs	r0, #4
 801618a:	442a      	add	r2, r5
 801618c:	4403      	add	r3, r0
 801618e:	1b1b      	subs	r3, r3, r4
 8016190:	4422      	add	r2, r4
 8016192:	480f      	ldr	r0, [pc, #60]	; (80161d0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8016194:	2b0f      	cmp	r3, #15
 8016196:	600b      	str	r3, [r1, #0]
 8016198:	6002      	str	r2, [r0, #0]
 801619a:	d803      	bhi.n	80161a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 801619c:	4b0d      	ldr	r3, [pc, #52]	; (80161d4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 801619e:	2170      	movs	r1, #112	; 0x70
 80161a0:	4a07      	ldr	r2, [pc, #28]	; (80161c0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 80161a2:	e7c4      	b.n	801612e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 80161a4:	2001      	movs	r0, #1
 80161a6:	e7b8      	b.n	801611a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 80161a8:	2000b1bc 	.word	0x2000b1bc
 80161ac:	2000b1b4 	.word	0x2000b1b4
 80161b0:	2000b1c4 	.word	0x2000b1c4
 80161b4:	2000b1cc 	.word	0x2000b1cc
 80161b8:	2000b1c8 	.word	0x2000b1c8
 80161bc:	080280a4 	.word	0x080280a4
 80161c0:	0802816c 	.word	0x0802816c
 80161c4:	080280dd 	.word	0x080280dd
 80161c8:	2000b1d0 	.word	0x2000b1d0
 80161cc:	2000b1c0 	.word	0x2000b1c0
 80161d0:	2000b1b8 	.word	0x2000b1b8
 80161d4:	08028127 	.word	0x08028127

080161d8 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 80161d8:	4b04      	ldr	r3, [pc, #16]	; (80161ec <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 80161da:	6818      	ldr	r0, [r3, #0]
 80161dc:	b120      	cbz	r0, 80161e8 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 80161de:	4b04      	ldr	r3, [pc, #16]	; (80161f0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 80161e0:	6818      	ldr	r0, [r3, #0]
 80161e2:	3000      	adds	r0, #0
 80161e4:	bf18      	it	ne
 80161e6:	2001      	movne	r0, #1
 80161e8:	4770      	bx	lr
 80161ea:	bf00      	nop
 80161ec:	2000b1b4 	.word	0x2000b1b4
 80161f0:	2000b1c8 	.word	0x2000b1c8

080161f4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 80161f4:	4b01      	ldr	r3, [pc, #4]	; (80161fc <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 80161f6:	6818      	ldr	r0, [r3, #0]
 80161f8:	4770      	bx	lr
 80161fa:	bf00      	nop
 80161fc:	2000b1bc 	.word	0x2000b1bc

08016200 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 8016200:	4b01      	ldr	r3, [pc, #4]	; (8016208 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 8016202:	6818      	ldr	r0, [r3, #0]
 8016204:	4770      	bx	lr
 8016206:	bf00      	nop
 8016208:	2000b1c4 	.word	0x2000b1c4

0801620c <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 801620c:	4b01      	ldr	r3, [pc, #4]	; (8016214 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 801620e:	6818      	ldr	r0, [r3, #0]
 8016210:	4770      	bx	lr
 8016212:	bf00      	nop
 8016214:	2000b1d0 	.word	0x2000b1d0

08016218 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8016218:	4b01      	ldr	r3, [pc, #4]	; (8016220 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 801621a:	6818      	ldr	r0, [r3, #0]
 801621c:	4770      	bx	lr
 801621e:	bf00      	nop
 8016220:	2000b1c0 	.word	0x2000b1c0

08016224 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8016224:	4b01      	ldr	r3, [pc, #4]	; (801622c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8016226:	6818      	ldr	r0, [r3, #0]
 8016228:	4770      	bx	lr
 801622a:	bf00      	nop
 801622c:	2000b1b8 	.word	0x2000b1b8

08016230 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8016230:	4b01      	ldr	r3, [pc, #4]	; (8016238 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8016232:	6818      	ldr	r0, [r3, #0]
 8016234:	4770      	bx	lr
 8016236:	bf00      	nop
 8016238:	2000b1cc 	.word	0x2000b1cc

0801623c <_ZN8touchgfx3LCD4initEv>:
 801623c:	4770      	bx	lr

0801623e <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801623e:	2000      	movs	r0, #0
 8016240:	4770      	bx	lr

08016242 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8016242:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016246:	b091      	sub	sp, #68	; 0x44
 8016248:	4699      	mov	r9, r3
 801624a:	4617      	mov	r7, r2
 801624c:	2500      	movs	r5, #0
 801624e:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8016252:	4680      	mov	r8, r0
 8016254:	a80e      	add	r0, sp, #56	; 0x38
 8016256:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8016258:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 801625c:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8016260:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8016264:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016268:	910d      	str	r1, [sp, #52]	; 0x34
 801626a:	950e      	str	r5, [sp, #56]	; 0x38
 801626c:	f000 fe3a 	bl	8016ee4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016270:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016272:	f8d9 6000 	ldr.w	r6, [r9]
 8016276:	6818      	ldr	r0, [r3, #0]
 8016278:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801627a:	f9b4 b000 	ldrsh.w	fp, [r4]
 801627e:	1b80      	subs	r0, r0, r6
 8016280:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016284:	eb02 0c06 	add.w	ip, r2, r6
 8016288:	ebab 0e0c 	sub.w	lr, fp, ip
 801628c:	4570      	cmp	r0, lr
 801628e:	f340 80bc 	ble.w	801640a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8016292:	88a1      	ldrh	r1, [r4, #4]
 8016294:	4459      	add	r1, fp
 8016296:	b209      	sxth	r1, r1
 8016298:	458c      	cmp	ip, r1
 801629a:	f300 80b6 	bgt.w	801640a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 801629e:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 80162a2:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 80162a6:	4283      	cmp	r3, r0
 80162a8:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 80162ac:	edd9 6a07 	vldr	s13, [r9, #28]
 80162b0:	bfa8      	it	ge
 80162b2:	4603      	movge	r3, r0
 80162b4:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 80162b8:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 80162bc:	45e3      	cmp	fp, ip
 80162be:	ee07 3a90 	vmov	s15, r3
 80162c2:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80162c6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80162ca:	ee25 4a04 	vmul.f32	s8, s10, s8
 80162ce:	ee65 4a24 	vmul.f32	s9, s10, s9
 80162d2:	ee25 5a27 	vmul.f32	s10, s10, s15
 80162d6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80162da:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80162de:	ee32 1a05 	vadd.f32	s2, s4, s10
 80162e2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80162e6:	ee36 0a84 	vadd.f32	s0, s13, s8
 80162ea:	ee61 1a87 	vmul.f32	s3, s3, s14
 80162ee:	ee22 2a07 	vmul.f32	s4, s4, s14
 80162f2:	f340 808d 	ble.w	8016410 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 80162f6:	fb9e f5f3 	sdiv	r5, lr, r3
 80162fa:	ee07 5a10 	vmov	s14, r5
 80162fe:	2d00      	cmp	r5, #0
 8016300:	fb03 e415 	mls	r4, r3, r5, lr
 8016304:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016308:	eea7 0a04 	vfma.f32	s0, s14, s8
 801630c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8016310:	eea7 1a05 	vfma.f32	s2, s14, s10
 8016314:	dd12      	ble.n	801633c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 8016316:	ee70 6a44 	vsub.f32	s13, s0, s8
 801631a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801631e:	ee31 2a45 	vsub.f32	s4, s2, s10
 8016322:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801632a:	bf14      	ite	ne
 801632c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8016330:	eeb0 7a67 	vmoveq.f32	s14, s15
 8016334:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016338:	ee22 2a07 	vmul.f32	s4, s4, s14
 801633c:	fb05 f703 	mul.w	r7, r5, r3
 8016340:	1bc0      	subs	r0, r0, r7
 8016342:	443e      	add	r6, r7
 8016344:	1997      	adds	r7, r2, r6
 8016346:	4407      	add	r7, r0
 8016348:	42b9      	cmp	r1, r7
 801634a:	bfbc      	itt	lt
 801634c:	1a88      	sublt	r0, r1, r2
 801634e:	1b80      	sublt	r0, r0, r6
 8016350:	2800      	cmp	r0, #0
 8016352:	dd5a      	ble.n	801640a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8016354:	fb90 f1f3 	sdiv	r1, r0, r3
 8016358:	fb03 0211 	mls	r2, r3, r1, r0
 801635c:	b90a      	cbnz	r2, 8016362 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 801635e:	3901      	subs	r1, #1
 8016360:	461a      	mov	r2, r3
 8016362:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8016366:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 801636a:	44a4      	add	ip, r4
 801636c:	2900      	cmp	r1, #0
 801636e:	bfcc      	ite	gt
 8016370:	469e      	movgt	lr, r3
 8016372:	4696      	movle	lr, r2
 8016374:	fb03 c505 	mla	r5, r3, r5, ip
 8016378:	eef0 6a42 	vmov.f32	s13, s4
 801637c:	eeb0 7a61 	vmov.f32	s14, s3
 8016380:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016384:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8016388:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801638c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8016390:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8016394:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016398:	ee17 0a90 	vmov	r0, s15
 801639c:	ee73 7a42 	vsub.f32	s15, s6, s4
 80163a0:	fb90 f6f3 	sdiv	r6, r0, r3
 80163a4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80163a8:	ee17 0a90 	vmov	r0, s15
 80163ac:	fb90 f7f3 	sdiv	r7, r0, r3
 80163b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80163b4:	f8d0 8000 	ldr.w	r8, [r0]
 80163b8:	900c      	str	r0, [sp, #48]	; 0x30
 80163ba:	981c      	ldr	r0, [sp, #112]	; 0x70
 80163bc:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80163c0:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 80163c4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80163c8:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 80163cc:	f8cd a020 	str.w	sl, [sp, #32]
 80163d0:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 80163d4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80163d6:	f8d9 9014 	ldr.w	r9, [r9, #20]
 80163da:	9603      	str	r6, [sp, #12]
 80163dc:	44ca      	add	sl, r9
 80163de:	9506      	str	r5, [sp, #24]
 80163e0:	e9cd 7004 	strd	r7, r0, [sp, #16]
 80163e4:	ee16 0a90 	vmov	r0, s13
 80163e8:	f8cd a01c 	str.w	sl, [sp, #28]
 80163ec:	fb07 0704 	mla	r7, r7, r4, r0
 80163f0:	ee17 0a10 	vmov	r0, s14
 80163f4:	fb06 0604 	mla	r6, r6, r4, r0
 80163f8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80163fa:	9702      	str	r7, [sp, #8]
 80163fc:	e9cd 3600 	strd	r3, r6, [sp]
 8016400:	ebae 0304 	sub.w	r3, lr, r4
 8016404:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8016408:	47a8      	blx	r5
 801640a:	b011      	add	sp, #68	; 0x44
 801640c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016410:	462c      	mov	r4, r5
 8016412:	e797      	b.n	8016344 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

08016414 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8016414:	b570      	push	{r4, r5, r6, lr}
 8016416:	4604      	mov	r4, r0
 8016418:	2500      	movs	r5, #0
 801641a:	9804      	ldr	r0, [sp, #16]
 801641c:	7223      	strb	r3, [r4, #8]
 801641e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8016422:	8025      	strh	r5, [r4, #0]
 8016424:	6061      	str	r1, [r4, #4]
 8016426:	7263      	strb	r3, [r4, #9]
 8016428:	60e0      	str	r0, [r4, #12]
 801642a:	8222      	strh	r2, [r4, #16]
 801642c:	8265      	strh	r5, [r4, #18]
 801642e:	82a5      	strh	r5, [r4, #20]
 8016430:	82e5      	strh	r5, [r4, #22]
 8016432:	8325      	strh	r5, [r4, #24]
 8016434:	8365      	strh	r5, [r4, #26]
 8016436:	83a5      	strh	r5, [r4, #28]
 8016438:	77a5      	strb	r5, [r4, #30]
 801643a:	6803      	ldr	r3, [r0, #0]
 801643c:	695b      	ldr	r3, [r3, #20]
 801643e:	4798      	blx	r3
 8016440:	4606      	mov	r6, r0
 8016442:	b1f8      	cbz	r0, 8016484 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8016444:	68e0      	ldr	r0, [r4, #12]
 8016446:	4631      	mov	r1, r6
 8016448:	6803      	ldr	r3, [r0, #0]
 801644a:	68db      	ldr	r3, [r3, #12]
 801644c:	4798      	blx	r3
 801644e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8016452:	4605      	mov	r5, r0
 8016454:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016458:	7a83      	ldrb	r3, [r0, #10]
 801645a:	4313      	orrs	r3, r2
 801645c:	83a3      	strh	r3, [r4, #28]
 801645e:	7a63      	ldrb	r3, [r4, #9]
 8016460:	2b04      	cmp	r3, #4
 8016462:	d10f      	bne.n	8016484 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8016464:	68e0      	ldr	r0, [r4, #12]
 8016466:	462a      	mov	r2, r5
 8016468:	4631      	mov	r1, r6
 801646a:	6803      	ldr	r3, [r0, #0]
 801646c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801646e:	4798      	blx	r3
 8016470:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8016474:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016478:	7aab      	ldrb	r3, [r5, #10]
 801647a:	4313      	orrs	r3, r2
 801647c:	4418      	add	r0, r3
 801647e:	8ba3      	ldrh	r3, [r4, #28]
 8016480:	4418      	add	r0, r3
 8016482:	83a0      	strh	r0, [r4, #28]
 8016484:	4620      	mov	r0, r4
 8016486:	bd70      	pop	{r4, r5, r6, pc}

08016488 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8016488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801648c:	2400      	movs	r4, #0
 801648e:	b085      	sub	sp, #20
 8016490:	4681      	mov	r9, r0
 8016492:	460f      	mov	r7, r1
 8016494:	4692      	mov	sl, r2
 8016496:	469b      	mov	fp, r3
 8016498:	46a0      	mov	r8, r4
 801649a:	4626      	mov	r6, r4
 801649c:	4554      	cmp	r4, sl
 801649e:	da21      	bge.n	80164e4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 80164a0:	2300      	movs	r3, #0
 80164a2:	463a      	mov	r2, r7
 80164a4:	4659      	mov	r1, fp
 80164a6:	4648      	mov	r0, r9
 80164a8:	9303      	str	r3, [sp, #12]
 80164aa:	ab03      	add	r3, sp, #12
 80164ac:	f002 fc70 	bl	8018d90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80164b0:	4605      	mov	r5, r0
 80164b2:	b1b8      	cbz	r0, 80164e4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 80164b4:	280a      	cmp	r0, #10
 80164b6:	d015      	beq.n	80164e4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 80164b8:	9a03      	ldr	r2, [sp, #12]
 80164ba:	b182      	cbz	r2, 80164de <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 80164bc:	f992 000d 	ldrsb.w	r0, [r2, #13]
 80164c0:	4641      	mov	r1, r8
 80164c2:	7a93      	ldrb	r3, [r2, #10]
 80164c4:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80164c8:	8895      	ldrh	r5, [r2, #4]
 80164ca:	4303      	orrs	r3, r0
 80164cc:	4638      	mov	r0, r7
 80164ce:	9301      	str	r3, [sp, #4]
 80164d0:	683b      	ldr	r3, [r7, #0]
 80164d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80164d4:	4798      	blx	r3
 80164d6:	9b01      	ldr	r3, [sp, #4]
 80164d8:	4418      	add	r0, r3
 80164da:	4406      	add	r6, r0
 80164dc:	b2b6      	uxth	r6, r6
 80164de:	3401      	adds	r4, #1
 80164e0:	46a8      	mov	r8, r5
 80164e2:	e7db      	b.n	801649c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 80164e4:	4630      	mov	r0, r6
 80164e6:	b005      	add	sp, #20
 80164e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080164ec <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80164ec:	2a02      	cmp	r2, #2
 80164ee:	b530      	push	{r4, r5, lr}
 80164f0:	d011      	beq.n	8016516 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80164f2:	2a03      	cmp	r2, #3
 80164f4:	d01c      	beq.n	8016530 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80164f6:	2a01      	cmp	r2, #1
 80164f8:	d10c      	bne.n	8016514 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80164fa:	888b      	ldrh	r3, [r1, #4]
 80164fc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8016500:	8801      	ldrh	r1, [r0, #0]
 8016502:	1a9b      	subs	r3, r3, r2
 8016504:	8844      	ldrh	r4, [r0, #2]
 8016506:	1a5b      	subs	r3, r3, r1
 8016508:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801650c:	8004      	strh	r4, [r0, #0]
 801650e:	8043      	strh	r3, [r0, #2]
 8016510:	8081      	strh	r1, [r0, #4]
 8016512:	80c2      	strh	r2, [r0, #6]
 8016514:	bd30      	pop	{r4, r5, pc}
 8016516:	88cb      	ldrh	r3, [r1, #6]
 8016518:	88c2      	ldrh	r2, [r0, #6]
 801651a:	1a9b      	subs	r3, r3, r2
 801651c:	8842      	ldrh	r2, [r0, #2]
 801651e:	1a9b      	subs	r3, r3, r2
 8016520:	888a      	ldrh	r2, [r1, #4]
 8016522:	8881      	ldrh	r1, [r0, #4]
 8016524:	8043      	strh	r3, [r0, #2]
 8016526:	1a52      	subs	r2, r2, r1
 8016528:	8801      	ldrh	r1, [r0, #0]
 801652a:	1a52      	subs	r2, r2, r1
 801652c:	8002      	strh	r2, [r0, #0]
 801652e:	e7f1      	b.n	8016514 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8016530:	88cb      	ldrh	r3, [r1, #6]
 8016532:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016536:	8841      	ldrh	r1, [r0, #2]
 8016538:	1a9b      	subs	r3, r3, r2
 801653a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801653e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8016542:	1a5b      	subs	r3, r3, r1
 8016544:	8045      	strh	r5, [r0, #2]
 8016546:	8082      	strh	r2, [r0, #4]
 8016548:	8003      	strh	r3, [r0, #0]
 801654a:	80c4      	strh	r4, [r0, #6]
 801654c:	e7e2      	b.n	8016514 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

08016550 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 8016550:	b570      	push	{r4, r5, r6, lr}
 8016552:	b086      	sub	sp, #24
 8016554:	ac02      	add	r4, sp, #8
 8016556:	e884 0006 	stmia.w	r4, {r1, r2}
 801655a:	461a      	mov	r2, r3
 801655c:	ab0c      	add	r3, sp, #48	; 0x30
 801655e:	9305      	str	r3, [sp, #20]
 8016560:	4b0a      	ldr	r3, [pc, #40]	; (801658c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 8016562:	685d      	ldr	r5, [r3, #4]
 8016564:	1069      	asrs	r1, r5, #1
 8016566:	07ed      	lsls	r5, r5, #31
 8016568:	eb00 0601 	add.w	r6, r0, r1
 801656c:	bf46      	itte	mi
 801656e:	681b      	ldrmi	r3, [r3, #0]
 8016570:	5841      	ldrmi	r1, [r0, r1]
 8016572:	681d      	ldrpl	r5, [r3, #0]
 8016574:	4630      	mov	r0, r6
 8016576:	bf48      	it	mi
 8016578:	58cd      	ldrmi	r5, [r1, r3]
 801657a:	4621      	mov	r1, r4
 801657c:	9b05      	ldr	r3, [sp, #20]
 801657e:	9301      	str	r3, [sp, #4]
 8016580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016582:	9300      	str	r3, [sp, #0]
 8016584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016586:	47a8      	blx	r5
 8016588:	b006      	add	sp, #24
 801658a:	bd70      	pop	{r4, r5, r6, pc}
 801658c:	20000040 	.word	0x20000040

08016590 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8016590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016594:	b09d      	sub	sp, #116	; 0x74
 8016596:	9114      	str	r1, [sp, #80]	; 0x50
 8016598:	9315      	str	r3, [sp, #84]	; 0x54
 801659a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801659c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801659e:	8809      	ldrh	r1, [r1, #0]
 80165a0:	889b      	ldrh	r3, [r3, #4]
 80165a2:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 80165a4:	440b      	add	r3, r1
 80165a6:	9210      	str	r2, [sp, #64]	; 0x40
 80165a8:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 80165ac:	b21b      	sxth	r3, r3
 80165ae:	900f      	str	r0, [sp, #60]	; 0x3c
 80165b0:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 80165b4:	930e      	str	r3, [sp, #56]	; 0x38
 80165b6:	6833      	ldr	r3, [r6, #0]
 80165b8:	7a59      	ldrb	r1, [r3, #9]
 80165ba:	7a1b      	ldrb	r3, [r3, #8]
 80165bc:	9113      	str	r1, [sp, #76]	; 0x4c
 80165be:	9312      	str	r3, [sp, #72]	; 0x48
 80165c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80165c2:	f9b3 4000 	ldrsh.w	r4, [r3]
 80165c6:	2a00      	cmp	r2, #0
 80165c8:	d059      	beq.n	801667e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 80165ca:	7c33      	ldrb	r3, [r6, #16]
 80165cc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80165ce:	2b04      	cmp	r3, #4
 80165d0:	bf14      	ite	ne
 80165d2:	2301      	movne	r3, #1
 80165d4:	2302      	moveq	r3, #2
 80165d6:	4413      	add	r3, r2
 80165d8:	f04f 0800 	mov.w	r8, #0
 80165dc:	930d      	str	r3, [sp, #52]	; 0x34
 80165de:	4645      	mov	r5, r8
 80165e0:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80165e4:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 80165e8:	4293      	cmp	r3, r2
 80165ea:	da75      	bge.n	80166d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 80165ec:	2300      	movs	r3, #0
 80165ee:	992b      	ldr	r1, [sp, #172]	; 0xac
 80165f0:	6832      	ldr	r2, [r6, #0]
 80165f2:	931a      	str	r3, [sp, #104]	; 0x68
 80165f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165f6:	428b      	cmp	r3, r1
 80165f8:	db43      	blt.n	8016682 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 80165fa:	6813      	ldr	r3, [r2, #0]
 80165fc:	4610      	mov	r0, r2
 80165fe:	695b      	ldr	r3, [r3, #20]
 8016600:	4798      	blx	r3
 8016602:	4681      	mov	r9, r0
 8016604:	6830      	ldr	r0, [r6, #0]
 8016606:	aa1b      	add	r2, sp, #108	; 0x6c
 8016608:	4649      	mov	r1, r9
 801660a:	6803      	ldr	r3, [r0, #0]
 801660c:	689f      	ldr	r7, [r3, #8]
 801660e:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8016612:	47b8      	blx	r7
 8016614:	901a      	str	r0, [sp, #104]	; 0x68
 8016616:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 801661a:	45d1      	cmp	r9, sl
 801661c:	d045      	beq.n	80166aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801661e:	f242 070b 	movw	r7, #8203	; 0x200b
 8016622:	45b9      	cmp	r9, r7
 8016624:	d041      	beq.n	80166aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8016626:	f1b9 0f00 	cmp.w	r9, #0
 801662a:	f000 80ee 	beq.w	801680a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801662e:	f1b9 0f0a 	cmp.w	r9, #10
 8016632:	d057      	beq.n	80166e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8016634:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016636:	b383      	cbz	r3, 801669a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 8016638:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 801663c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801663e:	2a00      	cmp	r2, #0
 8016640:	f000 80d2 	beq.w	80167e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 8016644:	f1bb 0f00 	cmp.w	fp, #0
 8016648:	d100      	bne.n	801664c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 801664a:	4444      	add	r4, r8
 801664c:	f992 800d 	ldrsb.w	r8, [r2, #13]
 8016650:	f1bb 0f01 	cmp.w	fp, #1
 8016654:	f408 7380 	and.w	r3, r8, #256	; 0x100
 8016658:	f892 800a 	ldrb.w	r8, [r2, #10]
 801665c:	ea48 0803 	orr.w	r8, r8, r3
 8016660:	d128      	bne.n	80166b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 8016662:	eba4 0408 	sub.w	r4, r4, r8
 8016666:	2d00      	cmp	r5, #0
 8016668:	d143      	bne.n	80166f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 801666a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801666c:	eb08 0304 	add.w	r3, r8, r4
 8016670:	4413      	add	r3, r2
 8016672:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8016674:	f9b2 2000 	ldrsh.w	r2, [r2]
 8016678:	4293      	cmp	r3, r2
 801667a:	da44      	bge.n	8016706 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801667c:	e02b      	b.n	80166d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 801667e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8016680:	e7aa      	b.n	80165d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 8016682:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8016686:	4659      	mov	r1, fp
 8016688:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801668a:	9301      	str	r3, [sp, #4]
 801668c:	ab1b      	add	r3, sp, #108	; 0x6c
 801668e:	9300      	str	r3, [sp, #0]
 8016690:	ab1a      	add	r3, sp, #104	; 0x68
 8016692:	f002 fbb1 	bl	8018df8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8016696:	4681      	mov	r9, r0
 8016698:	e7bd      	b.n	8016616 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801669a:	6830      	ldr	r0, [r6, #0]
 801669c:	6803      	ldr	r3, [r0, #0]
 801669e:	691b      	ldr	r3, [r3, #16]
 80166a0:	4798      	blx	r3
 80166a2:	4550      	cmp	r0, sl
 80166a4:	d001      	beq.n	80166aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80166a6:	42b8      	cmp	r0, r7
 80166a8:	d1c8      	bne.n	801663c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 80166aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80166ac:	464d      	mov	r5, r9
 80166ae:	3301      	adds	r3, #1
 80166b0:	930c      	str	r3, [sp, #48]	; 0x30
 80166b2:	e797      	b.n	80165e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 80166b4:	2d00      	cmp	r5, #0
 80166b6:	f000 80aa 	beq.w	801680e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 80166ba:	f1bb 0f00 	cmp.w	fp, #0
 80166be:	d118      	bne.n	80166f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 80166c0:	6830      	ldr	r0, [r6, #0]
 80166c2:	4629      	mov	r1, r5
 80166c4:	6803      	ldr	r3, [r0, #0]
 80166c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80166c8:	4798      	blx	r3
 80166ca:	4404      	add	r4, r0
 80166cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80166ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80166d0:	1ae3      	subs	r3, r4, r3
 80166d2:	4293      	cmp	r3, r2
 80166d4:	dd17      	ble.n	8016706 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80166d6:	464d      	mov	r5, r9
 80166d8:	2d00      	cmp	r5, #0
 80166da:	f000 8096 	beq.w	801680a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 80166de:	2d0a      	cmp	r5, #10
 80166e0:	f040 8084 	bne.w	80167ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 80166e4:	250a      	movs	r5, #10
 80166e6:	fab5 f085 	clz	r0, r5
 80166ea:	0940      	lsrs	r0, r0, #5
 80166ec:	b01d      	add	sp, #116	; 0x74
 80166ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166f2:	6830      	ldr	r0, [r6, #0]
 80166f4:	4629      	mov	r1, r5
 80166f6:	6803      	ldr	r3, [r0, #0]
 80166f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80166fa:	4798      	blx	r3
 80166fc:	f1bb 0f01 	cmp.w	fp, #1
 8016700:	eba4 0400 	sub.w	r4, r4, r0
 8016704:	d0b1      	beq.n	801666a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8016706:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016708:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801670a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801670e:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016712:	7b43      	ldrb	r3, [r0, #13]
 8016714:	4421      	add	r1, r4
 8016716:	015b      	lsls	r3, r3, #5
 8016718:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801671c:	7983      	ldrb	r3, [r0, #6]
 801671e:	4313      	orrs	r3, r2
 8016720:	440b      	add	r3, r1
 8016722:	42ab      	cmp	r3, r5
 8016724:	dbc1      	blt.n	80166aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8016726:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016728:	4299      	cmp	r1, r3
 801672a:	dabe      	bge.n	80166aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801672c:	6830      	ldr	r0, [r6, #0]
 801672e:	42a5      	cmp	r5, r4
 8016730:	6803      	ldr	r3, [r0, #0]
 8016732:	bfcc      	ite	gt
 8016734:	1b2d      	subgt	r5, r5, r4
 8016736:	2500      	movle	r5, #0
 8016738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801673a:	bfc8      	it	gt
 801673c:	b2ad      	uxthgt	r5, r5
 801673e:	4798      	blx	r3
 8016740:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016742:	4935      	ldr	r1, [pc, #212]	; (8016818 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 8016744:	7b5a      	ldrb	r2, [r3, #13]
 8016746:	f893 e008 	ldrb.w	lr, [r3, #8]
 801674a:	f012 0f40 	tst.w	r2, #64	; 0x40
 801674e:	bf18      	it	ne
 8016750:	468c      	movne	ip, r1
 8016752:	9915      	ldr	r1, [sp, #84]	; 0x54
 8016754:	bf08      	it	eq
 8016756:	f04f 0c00 	moveq.w	ip, #0
 801675a:	4408      	add	r0, r1
 801675c:	00d1      	lsls	r1, r2, #3
 801675e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8016762:	ea41 070e 	orr.w	r7, r1, lr
 8016766:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8016768:	ea4c 0707 	orr.w	r7, ip, r7
 801676c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8016770:	1bc7      	subs	r7, r0, r7
 8016772:	b2bf      	uxth	r7, r7
 8016774:	fa0f fa87 	sxth.w	sl, r7
 8016778:	4551      	cmp	r1, sl
 801677a:	dd33      	ble.n	80167e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 801677c:	0112      	lsls	r2, r2, #4
 801677e:	79d8      	ldrb	r0, [r3, #7]
 8016780:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8016784:	4302      	orrs	r2, r0
 8016786:	4492      	add	sl, r2
 8016788:	4551      	cmp	r1, sl
 801678a:	dc8e      	bgt.n	80166aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801678c:	1bcf      	subs	r7, r1, r7
 801678e:	468a      	mov	sl, r1
 8016790:	b2bf      	uxth	r7, r7
 8016792:	9317      	str	r3, [sp, #92]	; 0x5c
 8016794:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016796:	6830      	ldr	r0, [r6, #0]
 8016798:	681a      	ldr	r2, [r3, #0]
 801679a:	6801      	ldr	r1, [r0, #0]
 801679c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801679e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80167a0:	9311      	str	r3, [sp, #68]	; 0x44
 80167a2:	9216      	str	r2, [sp, #88]	; 0x58
 80167a4:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80167a6:	4788      	blx	r1
 80167a8:	79b1      	ldrb	r1, [r6, #6]
 80167aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80167ac:	910b      	str	r1, [sp, #44]	; 0x2c
 80167ae:	7bb1      	ldrb	r1, [r6, #14]
 80167b0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80167b2:	910a      	str	r1, [sp, #40]	; 0x28
 80167b4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 80167b8:	9109      	str	r1, [sp, #36]	; 0x24
 80167ba:	68b1      	ldr	r1, [r6, #8]
 80167bc:	9305      	str	r3, [sp, #20]
 80167be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80167c0:	9206      	str	r2, [sp, #24]
 80167c2:	e9cd a501 	strd	sl, r5, [sp, #4]
 80167c6:	4425      	add	r5, r4
 80167c8:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80167cc:	b22d      	sxth	r5, r5
 80167ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80167d0:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80167d4:	9500      	str	r5, [sp, #0]
 80167d6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80167d8:	681a      	ldr	r2, [r3, #0]
 80167da:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80167dc:	685b      	ldr	r3, [r3, #4]
 80167de:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80167e0:	47a8      	blx	r5
 80167e2:	e762      	b.n	80166aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80167e4:	2700      	movs	r7, #0
 80167e6:	e7d4      	b.n	8016792 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 80167e8:	4690      	mov	r8, r2
 80167ea:	e75e      	b.n	80166aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80167ec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80167ee:	3401      	adds	r4, #1
 80167f0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80167f2:	429c      	cmp	r4, r3
 80167f4:	f6bf af77 	bge.w	80166e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 80167f8:	4659      	mov	r1, fp
 80167fa:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80167fc:	f002 fa88 	bl	8018d10 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016800:	4605      	mov	r5, r0
 8016802:	b110      	cbz	r0, 801680a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8016804:	280a      	cmp	r0, #10
 8016806:	d1f2      	bne.n	80167ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 8016808:	e76c      	b.n	80166e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801680a:	2500      	movs	r5, #0
 801680c:	e76b      	b.n	80166e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801680e:	f1bb 0f00 	cmp.w	fp, #0
 8016812:	f43f af5b 	beq.w	80166cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 8016816:	e776      	b.n	8016706 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8016818:	fffffe00 	.word	0xfffffe00

0801681c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801681c:	b530      	push	{r4, r5, lr}
 801681e:	8a44      	ldrh	r4, [r0, #18]
 8016820:	8ac5      	ldrh	r5, [r0, #22]
 8016822:	82c3      	strh	r3, [r0, #22]
 8016824:	442c      	add	r4, r5
 8016826:	1ae4      	subs	r4, r4, r3
 8016828:	8b03      	ldrh	r3, [r0, #24]
 801682a:	8244      	strh	r4, [r0, #18]
 801682c:	8a84      	ldrh	r4, [r0, #20]
 801682e:	4422      	add	r2, r4
 8016830:	440c      	add	r4, r1
 8016832:	1a59      	subs	r1, r3, r1
 8016834:	8342      	strh	r2, [r0, #26]
 8016836:	8284      	strh	r4, [r0, #20]
 8016838:	8301      	strh	r1, [r0, #24]
 801683a:	bd30      	pop	{r4, r5, pc}

0801683c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801683c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016840:	7a45      	ldrb	r5, [r0, #9]
 8016842:	b085      	sub	sp, #20
 8016844:	4604      	mov	r4, r0
 8016846:	4689      	mov	r9, r1
 8016848:	1eeb      	subs	r3, r5, #3
 801684a:	b2db      	uxtb	r3, r3
 801684c:	b329      	cbz	r1, 801689a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 801684e:	2b01      	cmp	r3, #1
 8016850:	d921      	bls.n	8016896 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 8016852:	1e69      	subs	r1, r5, #1
 8016854:	f1d1 0b00 	rsbs	fp, r1, #0
 8016858:	eb4b 0b01 	adc.w	fp, fp, r1
 801685c:	1eaa      	subs	r2, r5, #2
 801685e:	2500      	movs	r5, #0
 8016860:	4253      	negs	r3, r2
 8016862:	9500      	str	r5, [sp, #0]
 8016864:	4153      	adcs	r3, r2
 8016866:	9301      	str	r3, [sp, #4]
 8016868:	2600      	movs	r6, #0
 801686a:	f242 080b 	movw	r8, #8203	; 0x200b
 801686e:	8266      	strh	r6, [r4, #18]
 8016870:	82a6      	strh	r6, [r4, #20]
 8016872:	2300      	movs	r3, #0
 8016874:	68e2      	ldr	r2, [r4, #12]
 8016876:	7a21      	ldrb	r1, [r4, #8]
 8016878:	9303      	str	r3, [sp, #12]
 801687a:	ab03      	add	r3, sp, #12
 801687c:	6860      	ldr	r0, [r4, #4]
 801687e:	8827      	ldrh	r7, [r4, #0]
 8016880:	f002 fa86 	bl	8018d90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016884:	8020      	strh	r0, [r4, #0]
 8016886:	b9b0      	cbnz	r0, 80168b6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 8016888:	8b22      	ldrh	r2, [r4, #24]
 801688a:	2300      	movs	r3, #0
 801688c:	4611      	mov	r1, r2
 801688e:	4620      	mov	r0, r4
 8016890:	f7ff ffc4 	bl	801681c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8016894:	e062      	b.n	801695c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8016896:	468b      	mov	fp, r1
 8016898:	e7e0      	b.n	801685c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 801689a:	2b01      	cmp	r3, #1
 801689c:	f105 35ff 	add.w	r5, r5, #4294967295
 80168a0:	9101      	str	r1, [sp, #4]
 80168a2:	468b      	mov	fp, r1
 80168a4:	bf8c      	ite	hi
 80168a6:	2300      	movhi	r3, #0
 80168a8:	2301      	movls	r3, #1
 80168aa:	2d01      	cmp	r5, #1
 80168ac:	9300      	str	r3, [sp, #0]
 80168ae:	bf8c      	ite	hi
 80168b0:	2500      	movhi	r5, #0
 80168b2:	2501      	movls	r5, #1
 80168b4:	e7d8      	b.n	8016868 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 80168b6:	8ae3      	ldrh	r3, [r4, #22]
 80168b8:	280a      	cmp	r0, #10
 80168ba:	f103 0301 	add.w	r3, r3, #1
 80168be:	82e3      	strh	r3, [r4, #22]
 80168c0:	d0e2      	beq.n	8016888 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 80168c2:	9a03      	ldr	r2, [sp, #12]
 80168c4:	b972      	cbnz	r2, 80168e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 80168c6:	4540      	cmp	r0, r8
 80168c8:	d1d3      	bne.n	8016872 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80168ca:	8823      	ldrh	r3, [r4, #0]
 80168cc:	8b21      	ldrh	r1, [r4, #24]
 80168ce:	2b20      	cmp	r3, #32
 80168d0:	d001      	beq.n	80168d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 80168d2:	4543      	cmp	r3, r8
 80168d4:	d11d      	bne.n	8016912 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 80168d6:	2f20      	cmp	r7, #32
 80168d8:	d002      	beq.n	80168e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 80168da:	4547      	cmp	r7, r8
 80168dc:	bf18      	it	ne
 80168de:	460e      	movne	r6, r1
 80168e0:	2001      	movs	r0, #1
 80168e2:	e017      	b.n	8016914 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 80168e4:	4540      	cmp	r0, r8
 80168e6:	d012      	beq.n	801690e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 80168e8:	8893      	ldrh	r3, [r2, #4]
 80168ea:	4639      	mov	r1, r7
 80168ec:	8023      	strh	r3, [r4, #0]
 80168ee:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 80168f2:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 80168f6:	f892 a00a 	ldrb.w	sl, [r2, #10]
 80168fa:	ea4a 0a00 	orr.w	sl, sl, r0
 80168fe:	68e0      	ldr	r0, [r4, #12]
 8016900:	6803      	ldr	r3, [r0, #0]
 8016902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016904:	4798      	blx	r3
 8016906:	eb0a 0200 	add.w	r2, sl, r0
 801690a:	b292      	uxth	r2, r2
 801690c:	e7dd      	b.n	80168ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801690e:	2200      	movs	r2, #0
 8016910:	e7db      	b.n	80168ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8016912:	2000      	movs	r0, #0
 8016914:	440a      	add	r2, r1
 8016916:	8aa3      	ldrh	r3, [r4, #20]
 8016918:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801691c:	b292      	uxth	r2, r2
 801691e:	8322      	strh	r2, [r4, #24]
 8016920:	4413      	add	r3, r2
 8016922:	f1b9 0f00 	cmp.w	r9, #0
 8016926:	d022      	beq.n	801696e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 8016928:	f1bb 0f00 	cmp.w	fp, #0
 801692c:	d102      	bne.n	8016934 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 801692e:	9901      	ldr	r1, [sp, #4]
 8016930:	b149      	cbz	r1, 8016946 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8016932:	b140      	cbz	r0, 8016946 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8016934:	8ba1      	ldrh	r1, [r4, #28]
 8016936:	4419      	add	r1, r3
 8016938:	458c      	cmp	ip, r1
 801693a:	da12      	bge.n	8016962 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 801693c:	8a61      	ldrh	r1, [r4, #18]
 801693e:	b181      	cbz	r1, 8016962 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8016940:	4563      	cmp	r3, ip
 8016942:	dd96      	ble.n	8016872 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8016944:	e004      	b.n	8016950 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 8016946:	4563      	cmp	r3, ip
 8016948:	dd93      	ble.n	8016872 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801694a:	8a63      	ldrh	r3, [r4, #18]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d090      	beq.n	8016872 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8016950:	2301      	movs	r3, #1
 8016952:	8ba2      	ldrh	r2, [r4, #28]
 8016954:	77a3      	strb	r3, [r4, #30]
 8016956:	8b63      	ldrh	r3, [r4, #26]
 8016958:	4413      	add	r3, r2
 801695a:	8363      	strh	r3, [r4, #26]
 801695c:	b005      	add	sp, #20
 801695e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016962:	2300      	movs	r3, #0
 8016964:	4611      	mov	r1, r2
 8016966:	4620      	mov	r0, r4
 8016968:	f7ff ff58 	bl	801681c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801696c:	e781      	b.n	8016872 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801696e:	4563      	cmp	r3, ip
 8016970:	dd16      	ble.n	80169a0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 8016972:	9b00      	ldr	r3, [sp, #0]
 8016974:	b113      	cbz	r3, 801697c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8016976:	2301      	movs	r3, #1
 8016978:	460a      	mov	r2, r1
 801697a:	e787      	b.n	801688c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 801697c:	2d00      	cmp	r5, #0
 801697e:	f43f af78 	beq.w	8016872 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8016982:	2800      	cmp	r0, #0
 8016984:	f47f af75 	bne.w	8016872 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8016988:	2f20      	cmp	r7, #32
 801698a:	d001      	beq.n	8016990 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 801698c:	4547      	cmp	r7, r8
 801698e:	d102      	bne.n	8016996 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 8016990:	2301      	movs	r3, #1
 8016992:	4632      	mov	r2, r6
 8016994:	e77b      	b.n	801688e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 8016996:	8a63      	ldrh	r3, [r4, #18]
 8016998:	2b00      	cmp	r3, #0
 801699a:	f43f af6a 	beq.w	8016872 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801699e:	e7dd      	b.n	801695c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 80169a0:	2800      	cmp	r0, #0
 80169a2:	f47f af66 	bne.w	8016872 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80169a6:	2f20      	cmp	r7, #32
 80169a8:	d002      	beq.n	80169b0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 80169aa:	4547      	cmp	r7, r8
 80169ac:	f47f af61 	bne.w	8016872 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80169b0:	2301      	movs	r3, #1
 80169b2:	4632      	mov	r2, r6
 80169b4:	e7d7      	b.n	8016966 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

080169b6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80169b6:	b570      	push	{r4, r5, r6, lr}
 80169b8:	4606      	mov	r6, r0
 80169ba:	b08a      	sub	sp, #40	; 0x28
 80169bc:	4615      	mov	r5, r2
 80169be:	b191      	cbz	r1, 80169e6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 80169c0:	2401      	movs	r4, #1
 80169c2:	e9cd 3100 	strd	r3, r1, [sp]
 80169c6:	4613      	mov	r3, r2
 80169c8:	4601      	mov	r1, r0
 80169ca:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80169ce:	a802      	add	r0, sp, #8
 80169d0:	f7ff fd20 	bl	8016414 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80169d4:	2100      	movs	r1, #0
 80169d6:	a802      	add	r0, sp, #8
 80169d8:	f7ff ff30 	bl	801683c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80169dc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80169e0:	b173      	cbz	r3, 8016a00 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 80169e2:	3401      	adds	r4, #1
 80169e4:	e7f6      	b.n	80169d4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 80169e6:	2401      	movs	r4, #1
 80169e8:	4611      	mov	r1, r2
 80169ea:	f002 f991 	bl	8018d10 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80169ee:	280a      	cmp	r0, #10
 80169f0:	4629      	mov	r1, r5
 80169f2:	4630      	mov	r0, r6
 80169f4:	bf08      	it	eq
 80169f6:	3401      	addeq	r4, #1
 80169f8:	f002 f98a 	bl	8018d10 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80169fc:	2800      	cmp	r0, #0
 80169fe:	d1f6      	bne.n	80169ee <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 8016a00:	b2a0      	uxth	r0, r4
 8016a02:	b00a      	add	sp, #40	; 0x28
 8016a04:	bd70      	pop	{r4, r5, r6, pc}

08016a06 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8016a06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a0a:	b0db      	sub	sp, #364	; 0x16c
 8016a0c:	468a      	mov	sl, r1
 8016a0e:	461c      	mov	r4, r3
 8016a10:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 8016a14:	9009      	str	r0, [sp, #36]	; 0x24
 8016a16:	f1bb 0f00 	cmp.w	fp, #0
 8016a1a:	f000 80c7 	beq.w	8016bac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	f000 80c3 	beq.w	8016bac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8016a26:	7ba3      	ldrb	r3, [r4, #14]
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	f000 80bf 	beq.w	8016bac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8016a2e:	af0c      	add	r7, sp, #48	; 0x30
 8016a30:	6810      	ldr	r0, [r2, #0]
 8016a32:	6851      	ldr	r1, [r2, #4]
 8016a34:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 8016a38:	463b      	mov	r3, r7
 8016a3a:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 8016a3e:	c303      	stmia	r3!, {r0, r1}
 8016a40:	2100      	movs	r1, #0
 8016a42:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 8016a46:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8016a4a:	4638      	mov	r0, r7
 8016a4c:	910e      	str	r1, [sp, #56]	; 0x38
 8016a4e:	a90e      	add	r1, sp, #56	; 0x38
 8016a50:	79a2      	ldrb	r2, [r4, #6]
 8016a52:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016a56:	f7ff fd49 	bl	80164ec <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8016a5a:	a90e      	add	r1, sp, #56	; 0x38
 8016a5c:	79a2      	ldrb	r2, [r4, #6]
 8016a5e:	4608      	mov	r0, r1
 8016a60:	f7ff fd44 	bl	80164ec <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8016a64:	4648      	mov	r0, r9
 8016a66:	f002 f811 	bl	8018a8c <_ZN8touchgfx12TextProviderC1Ev>
 8016a6a:	6820      	ldr	r0, [r4, #0]
 8016a6c:	6803      	ldr	r3, [r0, #0]
 8016a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016a70:	4798      	blx	r3
 8016a72:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8016a74:	4603      	mov	r3, r0
 8016a76:	4659      	mov	r1, fp
 8016a78:	4648      	mov	r0, r9
 8016a7a:	f002 f824 	bl	8018ac6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016a7e:	a82e      	add	r0, sp, #184	; 0xb8
 8016a80:	f002 f804 	bl	8018a8c <_ZN8touchgfx12TextProviderC1Ev>
 8016a84:	f894 8004 	ldrb.w	r8, [r4, #4]
 8016a88:	f1b8 0f00 	cmp.w	r8, #0
 8016a8c:	d009      	beq.n	8016aa2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8016a8e:	6820      	ldr	r0, [r4, #0]
 8016a90:	6803      	ldr	r3, [r0, #0]
 8016a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016a94:	4798      	blx	r3
 8016a96:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8016a98:	4603      	mov	r3, r0
 8016a9a:	4659      	mov	r1, fp
 8016a9c:	a82e      	add	r0, sp, #184	; 0xb8
 8016a9e:	f002 f812 	bl	8018ac6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016aa2:	6820      	ldr	r0, [r4, #0]
 8016aa4:	6803      	ldr	r3, [r0, #0]
 8016aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016aa8:	4798      	blx	r3
 8016aaa:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016aae:	182e      	adds	r6, r5, r0
 8016ab0:	2e00      	cmp	r6, #0
 8016ab2:	dd45      	ble.n	8016b40 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8016ab4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016ab8:	4283      	cmp	r3, r0
 8016aba:	db41      	blt.n	8016b40 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8016abc:	441d      	add	r5, r3
 8016abe:	fb95 f5f6 	sdiv	r5, r5, r6
 8016ac2:	a844      	add	r0, sp, #272	; 0x110
 8016ac4:	f001 ffe2 	bl	8018a8c <_ZN8touchgfx12TextProviderC1Ev>
 8016ac8:	7c23      	ldrb	r3, [r4, #16]
 8016aca:	b14b      	cbz	r3, 8016ae0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 8016acc:	6820      	ldr	r0, [r4, #0]
 8016ace:	6803      	ldr	r3, [r0, #0]
 8016ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016ad2:	4798      	blx	r3
 8016ad4:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8016ad6:	4603      	mov	r3, r0
 8016ad8:	4659      	mov	r1, fp
 8016ada:	a844      	add	r0, sp, #272	; 0x110
 8016adc:	f001 fff3 	bl	8018ac6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016ae0:	7c21      	ldrb	r1, [r4, #16]
 8016ae2:	a810      	add	r0, sp, #64	; 0x40
 8016ae4:	7963      	ldrb	r3, [r4, #5]
 8016ae6:	9101      	str	r1, [sp, #4]
 8016ae8:	6821      	ldr	r1, [r4, #0]
 8016aea:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8016aee:	9100      	str	r1, [sp, #0]
 8016af0:	a944      	add	r1, sp, #272	; 0x110
 8016af2:	f7ff fc8f 	bl	8016414 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8016af6:	7c23      	ldrb	r3, [r4, #16]
 8016af8:	bb23      	cbnz	r3, 8016b44 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 8016afa:	fa1f fb86 	uxth.w	fp, r6
 8016afe:	2d00      	cmp	r5, #0
 8016b00:	dd57      	ble.n	8016bb2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8016b02:	7961      	ldrb	r1, [r4, #5]
 8016b04:	4648      	mov	r0, r9
 8016b06:	f002 f903 	bl	8018d10 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016b0a:	4603      	mov	r3, r0
 8016b0c:	f1b8 0f00 	cmp.w	r8, #0
 8016b10:	d005      	beq.n	8016b1e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 8016b12:	9008      	str	r0, [sp, #32]
 8016b14:	a82e      	add	r0, sp, #184	; 0xb8
 8016b16:	7961      	ldrb	r1, [r4, #5]
 8016b18:	f002 f8fa 	bl	8018d10 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016b1c:	9b08      	ldr	r3, [sp, #32]
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d044      	beq.n	8016bac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8016b22:	2b0a      	cmp	r3, #10
 8016b24:	d1eb      	bne.n	8016afe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8016b26:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8016b2a:	3d01      	subs	r5, #1
 8016b2c:	445b      	add	r3, fp
 8016b2e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8016b32:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8016b36:	eba3 030b 	sub.w	r3, r3, fp
 8016b3a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016b3e:	e7de      	b.n	8016afe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8016b40:	2500      	movs	r5, #0
 8016b42:	e7be      	b.n	8016ac2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 8016b44:	0073      	lsls	r3, r6, #1
 8016b46:	9308      	str	r3, [sp, #32]
 8016b48:	2d00      	cmp	r5, #0
 8016b4a:	dd32      	ble.n	8016bb2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8016b4c:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8016b50:	a810      	add	r0, sp, #64	; 0x40
 8016b52:	9b08      	ldr	r3, [sp, #32]
 8016b54:	428b      	cmp	r3, r1
 8016b56:	bfd4      	ite	le
 8016b58:	2100      	movle	r1, #0
 8016b5a:	2101      	movgt	r1, #1
 8016b5c:	f7ff fe6e 	bl	801683c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8016b60:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 8016b64:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016b68:	fa1f fb83 	uxth.w	fp, r3
 8016b6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b70:	459b      	cmp	fp, r3
 8016b72:	d00b      	beq.n	8016b8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8016b74:	7961      	ldrb	r1, [r4, #5]
 8016b76:	4648      	mov	r0, r9
 8016b78:	f002 f8ca 	bl	8018d10 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016b7c:	f1b8 0f00 	cmp.w	r8, #0
 8016b80:	d0f0      	beq.n	8016b64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8016b82:	7961      	ldrb	r1, [r4, #5]
 8016b84:	a82e      	add	r0, sp, #184	; 0xb8
 8016b86:	f002 f8c3 	bl	8018d10 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016b8a:	e7eb      	b.n	8016b64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8016b8c:	b2b3      	uxth	r3, r6
 8016b8e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8016b92:	3d01      	subs	r5, #1
 8016b94:	441a      	add	r2, r3
 8016b96:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 8016b9a:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8016b9e:	1ad3      	subs	r3, r2, r3
 8016ba0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016ba4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d1cd      	bne.n	8016b48 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8016bac:	b05b      	add	sp, #364	; 0x16c
 8016bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bb2:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 8016bb6:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 8016bba:	7c23      	ldrb	r3, [r4, #16]
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d05f      	beq.n	8016c80 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 8016bc0:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8016bc4:	a810      	add	r0, sp, #64	; 0x40
 8016bc6:	458b      	cmp	fp, r1
 8016bc8:	bfd4      	ite	le
 8016bca:	2100      	movle	r1, #0
 8016bcc:	2101      	movgt	r1, #1
 8016bce:	f7ff fe35 	bl	801683c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8016bd2:	f1b8 0f00 	cmp.w	r8, #0
 8016bd6:	d04c      	beq.n	8016c72 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8016bd8:	7c23      	ldrb	r3, [r4, #16]
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d053      	beq.n	8016c86 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 8016bde:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8016be2:	7922      	ldrb	r2, [r4, #4]
 8016be4:	2a01      	cmp	r2, #1
 8016be6:	d13c      	bne.n	8016c62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8016be8:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8016bec:	1ac0      	subs	r0, r0, r3
 8016bee:	2302      	movs	r3, #2
 8016bf0:	fb90 f0f3 	sdiv	r0, r0, r3
 8016bf4:	b200      	sxth	r0, r0
 8016bf6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016bfa:	4418      	add	r0, r3
 8016bfc:	7c23      	ldrb	r3, [r4, #16]
 8016bfe:	8028      	strh	r0, [r5, #0]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d03a      	beq.n	8016c7a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 8016c04:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8016c08:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 8016c0c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8016c10:	f8cd 9010 	str.w	r9, [sp, #16]
 8016c14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016c16:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8016c1a:	2200      	movs	r2, #0
 8016c1c:	2100      	movs	r1, #0
 8016c1e:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8016c22:	e9cd 5700 	strd	r5, r7, [sp]
 8016c26:	4652      	mov	r2, sl
 8016c28:	f7ff fcb2 	bl	8016590 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8016c2c:	2800      	cmp	r0, #0
 8016c2e:	d1bd      	bne.n	8016bac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8016c30:	b2b2      	uxth	r2, r6
 8016c32:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8016c36:	4611      	mov	r1, r2
 8016c38:	4413      	add	r3, r2
 8016c3a:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8016c3e:	b21b      	sxth	r3, r3
 8016c40:	1a52      	subs	r2, r2, r1
 8016c42:	7c21      	ldrb	r1, [r4, #16]
 8016c44:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8016c48:	b212      	sxth	r2, r2
 8016c4a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8016c4e:	b109      	cbz	r1, 8016c54 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8016c50:	42b2      	cmp	r2, r6
 8016c52:	dbab      	blt.n	8016bac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8016c54:	887a      	ldrh	r2, [r7, #2]
 8016c56:	88f9      	ldrh	r1, [r7, #6]
 8016c58:	440a      	add	r2, r1
 8016c5a:	b212      	sxth	r2, r2
 8016c5c:	4293      	cmp	r3, r2
 8016c5e:	ddac      	ble.n	8016bba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 8016c60:	e7a4      	b.n	8016bac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8016c62:	2a02      	cmp	r2, #2
 8016c64:	d107      	bne.n	8016c76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 8016c66:	7be2      	ldrb	r2, [r4, #15]
 8016c68:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8016c6c:	1a80      	subs	r0, r0, r2
 8016c6e:	1ac0      	subs	r0, r0, r3
 8016c70:	e7c0      	b.n	8016bf4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 8016c72:	7be0      	ldrb	r0, [r4, #15]
 8016c74:	e7bf      	b.n	8016bf6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8016c76:	2000      	movs	r0, #0
 8016c78:	e7bd      	b.n	8016bf6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8016c7a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016c7e:	e7c3      	b.n	8016c08 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 8016c80:	f1b8 0f00 	cmp.w	r8, #0
 8016c84:	d0f5      	beq.n	8016c72 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8016c86:	2300      	movs	r3, #0
 8016c88:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016c8c:	6821      	ldr	r1, [r4, #0]
 8016c8e:	a82e      	add	r0, sp, #184	; 0xb8
 8016c90:	f7ff fbfa 	bl	8016488 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8016c94:	b203      	sxth	r3, r0
 8016c96:	e7a4      	b.n	8016be2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

08016c98 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8016c98:	2b02      	cmp	r3, #2
 8016c9a:	b510      	push	{r4, lr}
 8016c9c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016ca0:	d00b      	beq.n	8016cba <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8016ca2:	2b03      	cmp	r3, #3
 8016ca4:	d00e      	beq.n	8016cc4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8016ca6:	2b01      	cmp	r3, #1
 8016ca8:	d001      	beq.n	8016cae <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8016caa:	1860      	adds	r0, r4, r1
 8016cac:	bd10      	pop	{r4, pc}
 8016cae:	8880      	ldrh	r0, [r0, #4]
 8016cb0:	4420      	add	r0, r4
 8016cb2:	b200      	sxth	r0, r0
 8016cb4:	1a80      	subs	r0, r0, r2
 8016cb6:	3801      	subs	r0, #1
 8016cb8:	e7f8      	b.n	8016cac <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8016cba:	8880      	ldrh	r0, [r0, #4]
 8016cbc:	4420      	add	r0, r4
 8016cbe:	b200      	sxth	r0, r0
 8016cc0:	1a40      	subs	r0, r0, r1
 8016cc2:	e7f8      	b.n	8016cb6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8016cc4:	18a0      	adds	r0, r4, r2
 8016cc6:	e7f1      	b.n	8016cac <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08016cc8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8016cc8:	2b02      	cmp	r3, #2
 8016cca:	b510      	push	{r4, lr}
 8016ccc:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8016cd0:	d006      	beq.n	8016ce0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8016cd2:	2b03      	cmp	r3, #3
 8016cd4:	d00a      	beq.n	8016cec <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8016cd6:	2b01      	cmp	r3, #1
 8016cd8:	bf14      	ite	ne
 8016cda:	18a0      	addne	r0, r4, r2
 8016cdc:	1860      	addeq	r0, r4, r1
 8016cde:	bd10      	pop	{r4, pc}
 8016ce0:	88c0      	ldrh	r0, [r0, #6]
 8016ce2:	4420      	add	r0, r4
 8016ce4:	b200      	sxth	r0, r0
 8016ce6:	1a80      	subs	r0, r0, r2
 8016ce8:	3801      	subs	r0, #1
 8016cea:	e7f8      	b.n	8016cde <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8016cec:	88c0      	ldrh	r0, [r0, #6]
 8016cee:	4420      	add	r0, r4
 8016cf0:	b200      	sxth	r0, r0
 8016cf2:	1a40      	subs	r0, r0, r1
 8016cf4:	e7f8      	b.n	8016ce8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08016cf8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8016cf8:	4b01      	ldr	r3, [pc, #4]	; (8016d00 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8016cfa:	2200      	movs	r2, #0
 8016cfc:	601a      	str	r2, [r3, #0]
 8016cfe:	4770      	bx	lr
 8016d00:	2000b1d4 	.word	0x2000b1d4

08016d04 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 8016d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d06:	1e05      	subs	r5, r0, #0
 8016d08:	f04f 0601 	mov.w	r6, #1
 8016d0c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8016d10:	bfba      	itte	lt
 8016d12:	f04f 37ff 	movlt.w	r7, #4294967295
 8016d16:	426d      	neglt	r5, r5
 8016d18:	2701      	movge	r7, #1
 8016d1a:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 8016d1e:	f1be 0f00 	cmp.w	lr, #0
 8016d22:	bfbc      	itt	lt
 8016d24:	f1ce 0e00 	rsblt	lr, lr, #0
 8016d28:	427f      	neglt	r7, r7
 8016d2a:	2c00      	cmp	r4, #0
 8016d2c:	fa4e f001 	asr.w	r0, lr, r1
 8016d30:	fa06 f101 	lsl.w	r1, r6, r1
 8016d34:	bfbc      	itt	lt
 8016d36:	4264      	neglt	r4, r4
 8016d38:	427f      	neglt	r7, r7
 8016d3a:	3901      	subs	r1, #1
 8016d3c:	ea01 010e 	and.w	r1, r1, lr
 8016d40:	434d      	muls	r5, r1
 8016d42:	f8dc 1000 	ldr.w	r1, [ip]
 8016d46:	fb03 1300 	mla	r3, r3, r0, r1
 8016d4a:	fb95 f1f4 	sdiv	r1, r5, r4
 8016d4e:	fb04 5511 	mls	r5, r4, r1, r5
 8016d52:	441d      	add	r5, r3
 8016d54:	fb95 f3f4 	sdiv	r3, r5, r4
 8016d58:	4419      	add	r1, r3
 8016d5a:	fb04 5413 	mls	r4, r4, r3, r5
 8016d5e:	fb02 1000 	mla	r0, r2, r0, r1
 8016d62:	f8cc 4000 	str.w	r4, [ip]
 8016d66:	4378      	muls	r0, r7
 8016d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08016d6c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8016d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d70:	4c24      	ldr	r4, [pc, #144]	; (8016e04 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 8016d72:	b086      	sub	sp, #24
 8016d74:	4605      	mov	r5, r0
 8016d76:	6807      	ldr	r7, [r0, #0]
 8016d78:	69a3      	ldr	r3, [r4, #24]
 8016d7a:	b92b      	cbnz	r3, 8016d88 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8016d7c:	6840      	ldr	r0, [r0, #4]
 8016d7e:	e9c5 7000 	strd	r7, r0, [r5]
 8016d82:	b006      	add	sp, #24
 8016d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d88:	f04f 0802 	mov.w	r8, #2
 8016d8c:	68a2      	ldr	r2, [r4, #8]
 8016d8e:	ae06      	add	r6, sp, #24
 8016d90:	6820      	ldr	r0, [r4, #0]
 8016d92:	fb93 f1f8 	sdiv	r1, r3, r8
 8016d96:	440a      	add	r2, r1
 8016d98:	69e1      	ldr	r1, [r4, #28]
 8016d9a:	f846 2d04 	str.w	r2, [r6, #-4]!
 8016d9e:	9700      	str	r7, [sp, #0]
 8016da0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016da2:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8016da6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016da8:	f7ff ffac 	bl	8016d04 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8016dac:	69a3      	ldr	r3, [r4, #24]
 8016dae:	4607      	mov	r7, r0
 8016db0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016db2:	9301      	str	r3, [sp, #4]
 8016db4:	686b      	ldr	r3, [r5, #4]
 8016db6:	6a21      	ldr	r1, [r4, #32]
 8016db8:	9300      	str	r3, [sp, #0]
 8016dba:	9602      	str	r6, [sp, #8]
 8016dbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016dbe:	6860      	ldr	r0, [r4, #4]
 8016dc0:	f7ff ffa0 	bl	8016d04 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8016dc4:	69a2      	ldr	r2, [r4, #24]
 8016dc6:	6963      	ldr	r3, [r4, #20]
 8016dc8:	4407      	add	r7, r0
 8016dca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016dcc:	68e0      	ldr	r0, [r4, #12]
 8016dce:	fb92 f8f8 	sdiv	r8, r2, r8
 8016dd2:	4443      	add	r3, r8
 8016dd4:	9305      	str	r3, [sp, #20]
 8016dd6:	682b      	ldr	r3, [r5, #0]
 8016dd8:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8016ddc:	9300      	str	r3, [sp, #0]
 8016dde:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8016de0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016de2:	f7ff ff8f 	bl	8016d04 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8016de6:	69a3      	ldr	r3, [r4, #24]
 8016de8:	4680      	mov	r8, r0
 8016dea:	9602      	str	r6, [sp, #8]
 8016dec:	9301      	str	r3, [sp, #4]
 8016dee:	686b      	ldr	r3, [r5, #4]
 8016df0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016df2:	9300      	str	r3, [sp, #0]
 8016df4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8016df6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8016df8:	6920      	ldr	r0, [r4, #16]
 8016dfa:	f7ff ff83 	bl	8016d04 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8016dfe:	4440      	add	r0, r8
 8016e00:	e7bd      	b.n	8016d7e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 8016e02:	bf00      	nop
 8016e04:	2000b1d8 	.word	0x2000b1d8

08016e08 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8016e08:	4b07      	ldr	r3, [pc, #28]	; (8016e28 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8016e0a:	b510      	push	{r4, lr}
 8016e0c:	781b      	ldrb	r3, [r3, #0]
 8016e0e:	2b01      	cmp	r3, #1
 8016e10:	d108      	bne.n	8016e24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8016e12:	4b06      	ldr	r3, [pc, #24]	; (8016e2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8016e14:	880c      	ldrh	r4, [r1, #0]
 8016e16:	881b      	ldrh	r3, [r3, #0]
 8016e18:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016e1c:	3b01      	subs	r3, #1
 8016e1e:	1b1b      	subs	r3, r3, r4
 8016e20:	8003      	strh	r3, [r0, #0]
 8016e22:	800a      	strh	r2, [r1, #0]
 8016e24:	bd10      	pop	{r4, pc}
 8016e26:	bf00      	nop
 8016e28:	2000b1a4 	.word	0x2000b1a4
 8016e2c:	2000b1a8 	.word	0x2000b1a8

08016e30 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8016e30:	4b0a      	ldr	r3, [pc, #40]	; (8016e5c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8016e32:	b510      	push	{r4, lr}
 8016e34:	781b      	ldrb	r3, [r3, #0]
 8016e36:	2b01      	cmp	r3, #1
 8016e38:	d10e      	bne.n	8016e58 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8016e3a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8016e3e:	8843      	ldrh	r3, [r0, #2]
 8016e40:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016e44:	18ca      	adds	r2, r1, r3
 8016e46:	4b06      	ldr	r3, [pc, #24]	; (8016e60 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8016e48:	8044      	strh	r4, [r0, #2]
 8016e4a:	881b      	ldrh	r3, [r3, #0]
 8016e4c:	1a9b      	subs	r3, r3, r2
 8016e4e:	8003      	strh	r3, [r0, #0]
 8016e50:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016e54:	8081      	strh	r1, [r0, #4]
 8016e56:	80c3      	strh	r3, [r0, #6]
 8016e58:	bd10      	pop	{r4, pc}
 8016e5a:	bf00      	nop
 8016e5c:	2000b1a4 	.word	0x2000b1a4
 8016e60:	2000b1a0 	.word	0x2000b1a0

08016e64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8016e64:	4b07      	ldr	r3, [pc, #28]	; (8016e84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8016e66:	b510      	push	{r4, lr}
 8016e68:	781b      	ldrb	r3, [r3, #0]
 8016e6a:	2b01      	cmp	r3, #1
 8016e6c:	d108      	bne.n	8016e80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8016e6e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016e72:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016e76:	8003      	strh	r3, [r0, #0]
 8016e78:	8893      	ldrh	r3, [r2, #4]
 8016e7a:	3b01      	subs	r3, #1
 8016e7c:	1b1b      	subs	r3, r3, r4
 8016e7e:	800b      	strh	r3, [r1, #0]
 8016e80:	bd10      	pop	{r4, pc}
 8016e82:	bf00      	nop
 8016e84:	2000b1a4 	.word	0x2000b1a4

08016e88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8016e88:	4b08      	ldr	r3, [pc, #32]	; (8016eac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8016e8a:	b513      	push	{r0, r1, r4, lr}
 8016e8c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016e90:	2400      	movs	r4, #0
 8016e92:	4b07      	ldr	r3, [pc, #28]	; (8016eb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8016e94:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016e98:	466a      	mov	r2, sp
 8016e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016e9e:	9400      	str	r4, [sp, #0]
 8016ea0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016ea4:	f7ff ffde 	bl	8016e64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8016ea8:	b002      	add	sp, #8
 8016eaa:	bd10      	pop	{r4, pc}
 8016eac:	2000b1a0 	.word	0x2000b1a0
 8016eb0:	2000b1a2 	.word	0x2000b1a2

08016eb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8016eb4:	4b0a      	ldr	r3, [pc, #40]	; (8016ee0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8016eb6:	460a      	mov	r2, r1
 8016eb8:	b510      	push	{r4, lr}
 8016eba:	781b      	ldrb	r3, [r3, #0]
 8016ebc:	2b01      	cmp	r3, #1
 8016ebe:	d10d      	bne.n	8016edc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8016ec0:	8881      	ldrh	r1, [r0, #4]
 8016ec2:	8803      	ldrh	r3, [r0, #0]
 8016ec4:	440b      	add	r3, r1
 8016ec6:	4601      	mov	r1, r0
 8016ec8:	3b01      	subs	r3, #1
 8016eca:	f821 3b02 	strh.w	r3, [r1], #2
 8016ece:	f7ff ffc9 	bl	8016e64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8016ed2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016ed6:	88c2      	ldrh	r2, [r0, #6]
 8016ed8:	80c3      	strh	r3, [r0, #6]
 8016eda:	8082      	strh	r2, [r0, #4]
 8016edc:	bd10      	pop	{r4, pc}
 8016ede:	bf00      	nop
 8016ee0:	2000b1a4 	.word	0x2000b1a4

08016ee4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8016ee4:	4b09      	ldr	r3, [pc, #36]	; (8016f0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8016ee6:	b507      	push	{r0, r1, r2, lr}
 8016ee8:	2100      	movs	r1, #0
 8016eea:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016eee:	4b08      	ldr	r3, [pc, #32]	; (8016f10 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8016ef0:	9100      	str	r1, [sp, #0]
 8016ef2:	4669      	mov	r1, sp
 8016ef4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ef8:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016efc:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016f00:	f7ff ffd8 	bl	8016eb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016f04:	b003      	add	sp, #12
 8016f06:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f0a:	bf00      	nop
 8016f0c:	2000b1a0 	.word	0x2000b1a0
 8016f10:	2000b1a2 	.word	0x2000b1a2

08016f14 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8016f14:	4b03      	ldr	r3, [pc, #12]	; (8016f24 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8016f16:	6818      	ldr	r0, [r3, #0]
 8016f18:	b110      	cbz	r0, 8016f20 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8016f1a:	6803      	ldr	r3, [r0, #0]
 8016f1c:	699b      	ldr	r3, [r3, #24]
 8016f1e:	4718      	bx	r3
 8016f20:	4770      	bx	lr
 8016f22:	bf00      	nop
 8016f24:	2000b228 	.word	0x2000b228

08016f28 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8016f28:	4770      	bx	lr
	...

08016f2c <_ZN8touchgfx11Application4drawEv>:
 8016f2c:	4b09      	ldr	r3, [pc, #36]	; (8016f54 <_ZN8touchgfx11Application4drawEv+0x28>)
 8016f2e:	b507      	push	{r0, r1, r2, lr}
 8016f30:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016f34:	2100      	movs	r1, #0
 8016f36:	4b08      	ldr	r3, [pc, #32]	; (8016f58 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8016f38:	9100      	str	r1, [sp, #0]
 8016f3a:	4669      	mov	r1, sp
 8016f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f40:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016f44:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016f48:	6803      	ldr	r3, [r0, #0]
 8016f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f4c:	4798      	blx	r3
 8016f4e:	b003      	add	sp, #12
 8016f50:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f54:	2000b1a0 	.word	0x2000b1a0
 8016f58:	2000b1a2 	.word	0x2000b1a2

08016f5c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8016f5c:	4b03      	ldr	r3, [pc, #12]	; (8016f6c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8016f5e:	6818      	ldr	r0, [r3, #0]
 8016f60:	b110      	cbz	r0, 8016f68 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8016f62:	6803      	ldr	r3, [r0, #0]
 8016f64:	69db      	ldr	r3, [r3, #28]
 8016f66:	4718      	bx	r3
 8016f68:	4770      	bx	lr
 8016f6a:	bf00      	nop
 8016f6c:	2000b228 	.word	0x2000b228

08016f70 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8016f70:	4b03      	ldr	r3, [pc, #12]	; (8016f80 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8016f72:	6818      	ldr	r0, [r3, #0]
 8016f74:	b110      	cbz	r0, 8016f7c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8016f76:	6803      	ldr	r3, [r0, #0]
 8016f78:	6a1b      	ldr	r3, [r3, #32]
 8016f7a:	4718      	bx	r3
 8016f7c:	4770      	bx	lr
 8016f7e:	bf00      	nop
 8016f80:	2000b228 	.word	0x2000b228

08016f84 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8016f84:	4b03      	ldr	r3, [pc, #12]	; (8016f94 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8016f86:	6818      	ldr	r0, [r3, #0]
 8016f88:	b110      	cbz	r0, 8016f90 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8016f8a:	6803      	ldr	r3, [r0, #0]
 8016f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f8e:	4718      	bx	r3
 8016f90:	4770      	bx	lr
 8016f92:	bf00      	nop
 8016f94:	2000b228 	.word	0x2000b228

08016f98 <_ZN8touchgfx11Application15handleTickEventEv>:
 8016f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f9c:	4d3a      	ldr	r5, [pc, #232]	; (8017088 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 8016f9e:	4604      	mov	r4, r0
 8016fa0:	6828      	ldr	r0, [r5, #0]
 8016fa2:	b140      	cbz	r0, 8016fb6 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8016fa4:	7a03      	ldrb	r3, [r0, #8]
 8016fa6:	b933      	cbnz	r3, 8016fb6 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8016fa8:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8016fac:	6803      	ldr	r3, [r0, #0]
 8016fae:	689b      	ldr	r3, [r3, #8]
 8016fb0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fb4:	4718      	bx	r3
 8016fb6:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8016fba:	b97b      	cbnz	r3, 8016fdc <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8016fbc:	b170      	cbz	r0, 8016fdc <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8016fbe:	7a03      	ldrb	r3, [r0, #8]
 8016fc0:	b163      	cbz	r3, 8016fdc <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8016fc2:	4b32      	ldr	r3, [pc, #200]	; (801708c <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8016fc4:	6818      	ldr	r0, [r3, #0]
 8016fc6:	b110      	cbz	r0, 8016fce <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 8016fc8:	6803      	ldr	r3, [r0, #0]
 8016fca:	691b      	ldr	r3, [r3, #16]
 8016fcc:	4798      	blx	r3
 8016fce:	6828      	ldr	r0, [r5, #0]
 8016fd0:	6803      	ldr	r3, [r0, #0]
 8016fd2:	68db      	ldr	r3, [r3, #12]
 8016fd4:	4798      	blx	r3
 8016fd6:	2301      	movs	r3, #1
 8016fd8:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8016fdc:	2500      	movs	r5, #0
 8016fde:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8016fe2:	42a8      	cmp	r0, r5
 8016fe4:	dd0c      	ble.n	8017000 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 8016fe6:	1963      	adds	r3, r4, r5
 8016fe8:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8016fec:	b132      	cbz	r2, 8016ffc <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 8016fee:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8016ff2:	4413      	add	r3, r2
 8016ff4:	6858      	ldr	r0, [r3, #4]
 8016ff6:	6803      	ldr	r3, [r0, #0]
 8016ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016ffa:	4798      	blx	r3
 8016ffc:	3501      	adds	r5, #1
 8016ffe:	e7ee      	b.n	8016fde <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 8017000:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 8017004:	3801      	subs	r0, #1
 8017006:	f04f 0c00 	mov.w	ip, #0
 801700a:	3678      	adds	r6, #120	; 0x78
 801700c:	1c43      	adds	r3, r0, #1
 801700e:	d033      	beq.n	8017078 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 8017010:	1823      	adds	r3, r4, r0
 8017012:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8017016:	bb6a      	cbnz	r2, 8017074 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 8017018:	b281      	uxth	r1, r0
 801701a:	1d25      	adds	r5, r4, #4
 801701c:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8017020:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8017024:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8017028:	4293      	cmp	r3, r2
 801702a:	dc0a      	bgt.n	8017042 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801702c:	f101 0288 	add.w	r2, r1, #136	; 0x88
 8017030:	4422      	add	r2, r4
 8017032:	18b1      	adds	r1, r6, r2
 8017034:	b289      	uxth	r1, r1
 8017036:	428b      	cmp	r3, r1
 8017038:	d919      	bls.n	801706e <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 801703a:	7851      	ldrb	r1, [r2, #1]
 801703c:	f802 1b01 	strb.w	r1, [r2], #1
 8017040:	e7f7      	b.n	8017032 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8017042:	682f      	ldr	r7, [r5, #0]
 8017044:	f105 0804 	add.w	r8, r5, #4
 8017048:	45b9      	cmp	r9, r7
 801704a:	d10d      	bne.n	8017068 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 801704c:	4696      	mov	lr, r2
 801704e:	f1be 0f1e 	cmp.w	lr, #30
 8017052:	dc06      	bgt.n	8017062 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8017054:	f10e 0e01 	add.w	lr, lr, #1
 8017058:	686f      	ldr	r7, [r5, #4]
 801705a:	4573      	cmp	r3, lr
 801705c:	f845 7b04 	str.w	r7, [r5], #4
 8017060:	dcf5      	bgt.n	801704e <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8017062:	3b01      	subs	r3, #1
 8017064:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8017068:	3201      	adds	r2, #1
 801706a:	4645      	mov	r5, r8
 801706c:	e7da      	b.n	8017024 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801706e:	4423      	add	r3, r4
 8017070:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 8017074:	3801      	subs	r0, #1
 8017076:	e7c9      	b.n	801700c <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 8017078:	4b04      	ldr	r3, [pc, #16]	; (801708c <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801707a:	6818      	ldr	r0, [r3, #0]
 801707c:	b110      	cbz	r0, 8017084 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 801707e:	6803      	ldr	r3, [r0, #0]
 8017080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017082:	e795      	b.n	8016fb0 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 8017084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017088:	2000b22c 	.word	0x2000b22c
 801708c:	2000b228 	.word	0x2000b228

08017090 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8017090:	b570      	push	{r4, r5, r6, lr}
 8017092:	4606      	mov	r6, r0
 8017094:	460c      	mov	r4, r1
 8017096:	b929      	cbnz	r1, 80170a4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8017098:	4b0c      	ldr	r3, [pc, #48]	; (80170cc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801709a:	2164      	movs	r1, #100	; 0x64
 801709c:	4a0c      	ldr	r2, [pc, #48]	; (80170d0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801709e:	480d      	ldr	r0, [pc, #52]	; (80170d4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 80170a0:	f00c f800 	bl	80230a4 <__assert_func>
 80170a4:	2300      	movs	r3, #0
 80170a6:	4d0c      	ldr	r5, [pc, #48]	; (80170d8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 80170a8:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80170ac:	6828      	ldr	r0, [r5, #0]
 80170ae:	b110      	cbz	r0, 80170b6 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 80170b0:	6803      	ldr	r3, [r0, #0]
 80170b2:	695b      	ldr	r3, [r3, #20]
 80170b4:	4798      	blx	r3
 80170b6:	602c      	str	r4, [r5, #0]
 80170b8:	4620      	mov	r0, r4
 80170ba:	6823      	ldr	r3, [r4, #0]
 80170bc:	68db      	ldr	r3, [r3, #12]
 80170be:	4798      	blx	r3
 80170c0:	6833      	ldr	r3, [r6, #0]
 80170c2:	4630      	mov	r0, r6
 80170c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80170c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80170ca:	4718      	bx	r3
 80170cc:	08028208 	.word	0x08028208
 80170d0:	080282f8 	.word	0x080282f8
 80170d4:	08028212 	.word	0x08028212
 80170d8:	2000b228 	.word	0x2000b228

080170dc <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80170dc:	b510      	push	{r4, lr}
 80170de:	f9b1 4000 	ldrsh.w	r4, [r1]
 80170e2:	888a      	ldrh	r2, [r1, #4]
 80170e4:	f9b0 3000 	ldrsh.w	r3, [r0]
 80170e8:	4422      	add	r2, r4
 80170ea:	b212      	sxth	r2, r2
 80170ec:	4293      	cmp	r3, r2
 80170ee:	da15      	bge.n	801711c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80170f0:	8882      	ldrh	r2, [r0, #4]
 80170f2:	4413      	add	r3, r2
 80170f4:	b21b      	sxth	r3, r3
 80170f6:	429c      	cmp	r4, r3
 80170f8:	da10      	bge.n	801711c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80170fa:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80170fe:	88c9      	ldrh	r1, [r1, #6]
 8017100:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017104:	4419      	add	r1, r3
 8017106:	b209      	sxth	r1, r1
 8017108:	428a      	cmp	r2, r1
 801710a:	da07      	bge.n	801711c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801710c:	88c0      	ldrh	r0, [r0, #6]
 801710e:	4410      	add	r0, r2
 8017110:	b200      	sxth	r0, r0
 8017112:	4283      	cmp	r3, r0
 8017114:	bfac      	ite	ge
 8017116:	2000      	movge	r0, #0
 8017118:	2001      	movlt	r0, #1
 801711a:	bd10      	pop	{r4, pc}
 801711c:	2000      	movs	r0, #0
 801711e:	e7fc      	b.n	801711a <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08017120 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8017120:	b570      	push	{r4, r5, r6, lr}
 8017122:	f9b1 4000 	ldrsh.w	r4, [r1]
 8017126:	f9b0 5000 	ldrsh.w	r5, [r0]
 801712a:	42ac      	cmp	r4, r5
 801712c:	db18      	blt.n	8017160 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801712e:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8017132:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8017136:	429a      	cmp	r2, r3
 8017138:	db12      	blt.n	8017160 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801713a:	8886      	ldrh	r6, [r0, #4]
 801713c:	4435      	add	r5, r6
 801713e:	888e      	ldrh	r6, [r1, #4]
 8017140:	4434      	add	r4, r6
 8017142:	b22d      	sxth	r5, r5
 8017144:	b224      	sxth	r4, r4
 8017146:	42a5      	cmp	r5, r4
 8017148:	db0a      	blt.n	8017160 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801714a:	88c0      	ldrh	r0, [r0, #6]
 801714c:	4418      	add	r0, r3
 801714e:	88cb      	ldrh	r3, [r1, #6]
 8017150:	441a      	add	r2, r3
 8017152:	b200      	sxth	r0, r0
 8017154:	b212      	sxth	r2, r2
 8017156:	4290      	cmp	r0, r2
 8017158:	bfb4      	ite	lt
 801715a:	2000      	movlt	r0, #0
 801715c:	2001      	movge	r0, #1
 801715e:	bd70      	pop	{r4, r5, r6, pc}
 8017160:	2000      	movs	r0, #0
 8017162:	e7fc      	b.n	801715e <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08017164 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8017164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017166:	4604      	mov	r4, r0
 8017168:	4608      	mov	r0, r1
 801716a:	460d      	mov	r5, r1
 801716c:	f7fc fab6 	bl	80136dc <_ZNK8touchgfx4Rect7isEmptyEv>
 8017170:	b978      	cbnz	r0, 8017192 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8017172:	4620      	mov	r0, r4
 8017174:	f7fc fab2 	bl	80136dc <_ZNK8touchgfx4Rect7isEmptyEv>
 8017178:	f9b5 6000 	ldrsh.w	r6, [r5]
 801717c:	b150      	cbz	r0, 8017194 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801717e:	8026      	strh	r6, [r4, #0]
 8017180:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8017184:	8063      	strh	r3, [r4, #2]
 8017186:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801718a:	80a3      	strh	r3, [r4, #4]
 801718c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017190:	80e3      	strh	r3, [r4, #6]
 8017192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017194:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017198:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801719c:	42b1      	cmp	r1, r6
 801719e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80171a2:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80171a6:	460f      	mov	r7, r1
 80171a8:	88ed      	ldrh	r5, [r5, #6]
 80171aa:	bfa8      	it	ge
 80171ac:	4637      	movge	r7, r6
 80171ae:	4293      	cmp	r3, r2
 80171b0:	4618      	mov	r0, r3
 80171b2:	4466      	add	r6, ip
 80171b4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80171b8:	bfa8      	it	ge
 80171ba:	4610      	movge	r0, r2
 80171bc:	442a      	add	r2, r5
 80171be:	88e5      	ldrh	r5, [r4, #6]
 80171c0:	4461      	add	r1, ip
 80171c2:	b236      	sxth	r6, r6
 80171c4:	8027      	strh	r7, [r4, #0]
 80171c6:	442b      	add	r3, r5
 80171c8:	b209      	sxth	r1, r1
 80171ca:	b212      	sxth	r2, r2
 80171cc:	8060      	strh	r0, [r4, #2]
 80171ce:	b21b      	sxth	r3, r3
 80171d0:	428e      	cmp	r6, r1
 80171d2:	bfac      	ite	ge
 80171d4:	ebc7 0106 	rsbge	r1, r7, r6
 80171d8:	ebc7 0101 	rsblt	r1, r7, r1
 80171dc:	429a      	cmp	r2, r3
 80171de:	bfac      	ite	ge
 80171e0:	ebc0 0202 	rsbge	r2, r0, r2
 80171e4:	ebc0 0203 	rsblt	r2, r0, r3
 80171e8:	80a1      	strh	r1, [r4, #4]
 80171ea:	80e2      	strh	r2, [r4, #6]
 80171ec:	e7d1      	b.n	8017192 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080171f0 <_ZN8touchgfx11Application11getInstanceEv>:
 80171f0:	4b01      	ldr	r3, [pc, #4]	; (80171f8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80171f2:	6818      	ldr	r0, [r3, #0]
 80171f4:	4770      	bx	lr
 80171f6:	bf00      	nop
 80171f8:	2000b238 	.word	0x2000b238

080171fc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 80171fc:	b570      	push	{r4, r5, r6, lr}
 80171fe:	2200      	movs	r2, #0
 8017200:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 8017204:	1d04      	adds	r4, r0, #4
 8017206:	b295      	uxth	r5, r2
 8017208:	42ab      	cmp	r3, r5
 801720a:	d90e      	bls.n	801722a <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801720c:	f854 6b04 	ldr.w	r6, [r4], #4
 8017210:	4615      	mov	r5, r2
 8017212:	3201      	adds	r2, #1
 8017214:	428e      	cmp	r6, r1
 8017216:	d1f6      	bne.n	8017206 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 8017218:	4428      	add	r0, r5
 801721a:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801721e:	2bff      	cmp	r3, #255	; 0xff
 8017220:	d002      	beq.n	8017228 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 8017222:	3301      	adds	r3, #1
 8017224:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 8017228:	bd70      	pop	{r4, r5, r6, pc}
 801722a:	2b20      	cmp	r3, #32
 801722c:	d106      	bne.n	801723c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 801722e:	4b09      	ldr	r3, [pc, #36]	; (8017254 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 8017230:	f44f 7193 	mov.w	r1, #294	; 0x126
 8017234:	4a08      	ldr	r2, [pc, #32]	; (8017258 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 8017236:	4809      	ldr	r0, [pc, #36]	; (801725c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 8017238:	f00b ff34 	bl	80230a4 <__assert_func>
 801723c:	18c2      	adds	r2, r0, r3
 801723e:	2401      	movs	r4, #1
 8017240:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 8017244:	191a      	adds	r2, r3, r4
 8017246:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 801724a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801724e:	6041      	str	r1, [r0, #4]
 8017250:	e7ea      	b.n	8017228 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 8017252:	bf00      	nop
 8017254:	0802823c 	.word	0x0802823c
 8017258:	0802833c 	.word	0x0802833c
 801725c:	08028212 	.word	0x08028212

08017260 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 8017260:	b570      	push	{r4, r5, r6, lr}
 8017262:	2300      	movs	r3, #0
 8017264:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 8017268:	1d04      	adds	r4, r0, #4
 801726a:	b29a      	uxth	r2, r3
 801726c:	4296      	cmp	r6, r2
 801726e:	d90a      	bls.n	8017286 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 8017270:	f854 2b04 	ldr.w	r2, [r4], #4
 8017274:	428a      	cmp	r2, r1
 8017276:	d107      	bne.n	8017288 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8017278:	18c5      	adds	r5, r0, r3
 801727a:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801727e:	b11a      	cbz	r2, 8017288 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8017280:	3a01      	subs	r2, #1
 8017282:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 8017286:	bd70      	pop	{r4, r5, r6, pc}
 8017288:	3301      	adds	r3, #1
 801728a:	e7ee      	b.n	801726a <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801728c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801728c:	2300      	movs	r3, #0
 801728e:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8017292:	30a8      	adds	r0, #168	; 0xa8
 8017294:	f820 3c24 	strh.w	r3, [r0, #-36]
 8017298:	f802 3b01 	strb.w	r3, [r2], #1
 801729c:	4282      	cmp	r2, r0
 801729e:	d1fb      	bne.n	8017298 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 80172a0:	4770      	bx	lr

080172a2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80172a2:	4603      	mov	r3, r0
 80172a4:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80172a8:	2200      	movs	r2, #0
 80172aa:	801a      	strh	r2, [r3, #0]
 80172ac:	3308      	adds	r3, #8
 80172ae:	f823 2c06 	strh.w	r2, [r3, #-6]
 80172b2:	f823 2c04 	strh.w	r2, [r3, #-4]
 80172b6:	f823 2c02 	strh.w	r2, [r3, #-2]
 80172ba:	428b      	cmp	r3, r1
 80172bc:	d1f5      	bne.n	80172aa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80172be:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80172c2:	4770      	bx	lr

080172c4 <_ZN8touchgfx11ApplicationC1Ev>:
 80172c4:	b570      	push	{r4, r5, r6, lr}
 80172c6:	4b16      	ldr	r3, [pc, #88]	; (8017320 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 80172c8:	2500      	movs	r5, #0
 80172ca:	4604      	mov	r4, r0
 80172cc:	30a8      	adds	r0, #168	; 0xa8
 80172ce:	f840 3ca8 	str.w	r3, [r0, #-168]
 80172d2:	f820 5c24 	strh.w	r5, [r0, #-36]
 80172d6:	f7ff ffe4 	bl	80172a2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80172da:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80172de:	f7ff ffe0 	bl	80172a2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80172e2:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 80172e6:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 80172ea:	490e      	ldr	r1, [pc, #56]	; (8017324 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 80172ec:	480e      	ldr	r0, [pc, #56]	; (8017328 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 80172ee:	f00a f9bf 	bl	8021670 <CRC_Lock>
 80172f2:	4e0e      	ldr	r6, [pc, #56]	; (801732c <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 80172f4:	4b0e      	ldr	r3, [pc, #56]	; (8017330 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 80172f6:	b158      	cbz	r0, 8017310 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 80172f8:	801d      	strh	r5, [r3, #0]
 80172fa:	2300      	movs	r3, #0
 80172fc:	4a0d      	ldr	r2, [pc, #52]	; (8017334 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80172fe:	4620      	mov	r0, r4
 8017300:	6013      	str	r3, [r2, #0]
 8017302:	4a0d      	ldr	r2, [pc, #52]	; (8017338 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8017304:	6033      	str	r3, [r6, #0]
 8017306:	6013      	str	r3, [r2, #0]
 8017308:	f7ff ffc0 	bl	801728c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801730c:	4620      	mov	r0, r4
 801730e:	bd70      	pop	{r4, r5, r6, pc}
 8017310:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017314:	2002      	movs	r0, #2
 8017316:	801a      	strh	r2, [r3, #0]
 8017318:	6030      	str	r0, [r6, #0]
 801731a:	f000 ff81 	bl	8018220 <_ZN8touchgfx6Screen4drawEv>
 801731e:	e7ec      	b.n	80172fa <_ZN8touchgfx11ApplicationC1Ev+0x36>
 8017320:	080282c4 	.word	0x080282c4
 8017324:	b5e8b5cd 	.word	0xb5e8b5cd
 8017328:	f407a5c2 	.word	0xf407a5c2
 801732c:	2000b228 	.word	0x2000b228
 8017330:	20000050 	.word	0x20000050
 8017334:	2000b238 	.word	0x2000b238
 8017338:	2000b22c 	.word	0x2000b22c

0801733c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801733c:	2300      	movs	r3, #0
 801733e:	8003      	strh	r3, [r0, #0]
 8017340:	8043      	strh	r3, [r0, #2]
 8017342:	8083      	strh	r3, [r0, #4]
 8017344:	80c3      	strh	r3, [r0, #6]
 8017346:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801734a:	4293      	cmp	r3, r2
 801734c:	b530      	push	{r4, r5, lr}
 801734e:	d912      	bls.n	8017376 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8017350:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8017354:	3b01      	subs	r3, #1
 8017356:	6825      	ldr	r5, [r4, #0]
 8017358:	b29b      	uxth	r3, r3
 801735a:	6005      	str	r5, [r0, #0]
 801735c:	4293      	cmp	r3, r2
 801735e:	6865      	ldr	r5, [r4, #4]
 8017360:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 8017364:	6045      	str	r5, [r0, #4]
 8017366:	d906      	bls.n	8017376 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8017368:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801736c:	681d      	ldr	r5, [r3, #0]
 801736e:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 8017372:	685d      	ldr	r5, [r3, #4]
 8017374:	6065      	str	r5, [r4, #4]
 8017376:	bd30      	pop	{r4, r5, pc}

08017378 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8017378:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801737a:	466b      	mov	r3, sp
 801737c:	4604      	mov	r4, r0
 801737e:	e883 0006 	stmia.w	r3, {r1, r2}
 8017382:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8017386:	2a07      	cmp	r2, #7
 8017388:	d906      	bls.n	8017398 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801738a:	4b09      	ldr	r3, [pc, #36]	; (80173b0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801738c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8017390:	4a08      	ldr	r2, [pc, #32]	; (80173b4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8017392:	4809      	ldr	r0, [pc, #36]	; (80173b8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8017394:	f00b fe86 	bl	80230a4 <__assert_func>
 8017398:	1c51      	adds	r1, r2, #1
 801739a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801739e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80173a2:	cb03      	ldmia	r3!, {r0, r1}
 80173a4:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 80173a8:	6069      	str	r1, [r5, #4]
 80173aa:	b003      	add	sp, #12
 80173ac:	bd30      	pop	{r4, r5, pc}
 80173ae:	bf00      	nop
 80173b0:	08028264 	.word	0x08028264
 80173b4:	08028381 	.word	0x08028381
 80173b8:	08028293 	.word	0x08028293

080173bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80173bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80173c0:	b089      	sub	sp, #36	; 0x24
 80173c2:	4606      	mov	r6, r0
 80173c4:	466c      	mov	r4, sp
 80173c6:	4620      	mov	r0, r4
 80173c8:	e884 0006 	stmia.w	r4, {r1, r2}
 80173cc:	f7fc f986 	bl	80136dc <_ZNK8touchgfx4Rect7isEmptyEv>
 80173d0:	bbb0      	cbnz	r0, 8017440 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 80173d2:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 80173d6:	b1fd      	cbz	r5, 8017418 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 80173d8:	3d01      	subs	r5, #1
 80173da:	af04      	add	r7, sp, #16
 80173dc:	f04f 090a 	mov.w	r9, #10
 80173e0:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 80173e4:	ab02      	add	r3, sp, #8
 80173e6:	fa1f f885 	uxth.w	r8, r5
 80173ea:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80173ee:	6851      	ldr	r1, [r2, #4]
 80173f0:	c303      	stmia	r3!, {r0, r1}
 80173f2:	4621      	mov	r1, r4
 80173f4:	a802      	add	r0, sp, #8
 80173f6:	f7ff fe93 	bl	8017120 <_ZNK8touchgfx4Rect8includesERKS0_>
 80173fa:	bb08      	cbnz	r0, 8017440 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 80173fc:	a902      	add	r1, sp, #8
 80173fe:	4620      	mov	r0, r4
 8017400:	f7ff fe8e 	bl	8017120 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017404:	b1f8      	cbz	r0, 8017446 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 8017406:	4642      	mov	r2, r8
 8017408:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801740c:	a806      	add	r0, sp, #24
 801740e:	f7ff ff95 	bl	801733c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017412:	f115 35ff 	adds.w	r5, r5, #4294967295
 8017416:	d2e3      	bcs.n	80173e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 8017418:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801741c:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 8017420:	2b08      	cmp	r3, #8
 8017422:	d108      	bne.n	8017436 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8017424:	4629      	mov	r1, r5
 8017426:	a806      	add	r0, sp, #24
 8017428:	2207      	movs	r2, #7
 801742a:	f7ff ff87 	bl	801733c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801742e:	a906      	add	r1, sp, #24
 8017430:	4620      	mov	r0, r4
 8017432:	f7ff fe97 	bl	8017164 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017436:	4628      	mov	r0, r5
 8017438:	e894 0006 	ldmia.w	r4, {r1, r2}
 801743c:	f7ff ff9c 	bl	8017378 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8017440:	b009      	add	sp, #36	; 0x24
 8017442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017446:	4621      	mov	r1, r4
 8017448:	a802      	add	r0, sp, #8
 801744a:	f7ff fe47 	bl	80170dc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801744e:	b150      	cbz	r0, 8017466 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 8017450:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8017454:	a806      	add	r0, sp, #24
 8017456:	4642      	mov	r2, r8
 8017458:	f7ff ff70 	bl	801733c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801745c:	a902      	add	r1, sp, #8
 801745e:	4620      	mov	r0, r4
 8017460:	f7ff fe80 	bl	8017164 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017464:	e7d5      	b.n	8017412 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8017466:	e894 0003 	ldmia.w	r4, {r0, r1}
 801746a:	e887 0003 	stmia.w	r7, {r0, r1}
 801746e:	a902      	add	r1, sp, #8
 8017470:	4638      	mov	r0, r7
 8017472:	f7ff fe77 	bl	8017164 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017476:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801747a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801747e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8017482:	fb13 f302 	smulbb	r3, r3, r2
 8017486:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801748a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801748e:	fb11 f102 	smulbb	r1, r1, r2
 8017492:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8017496:	fb09 f303 	mul.w	r3, r9, r3
 801749a:	fb12 1100 	smlabb	r1, r2, r0, r1
 801749e:	220b      	movs	r2, #11
 80174a0:	434a      	muls	r2, r1
 80174a2:	4293      	cmp	r3, r2
 80174a4:	dab5      	bge.n	8017412 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80174a6:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80174aa:	a806      	add	r0, sp, #24
 80174ac:	4642      	mov	r2, r8
 80174ae:	f7ff ff45 	bl	801733c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80174b2:	e897 0003 	ldmia.w	r7, {r0, r1}
 80174b6:	e884 0003 	stmia.w	r4, {r0, r1}
 80174ba:	e7aa      	b.n	8017412 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

080174bc <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80174bc:	4b1d      	ldr	r3, [pc, #116]	; (8017534 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 80174be:	b530      	push	{r4, r5, lr}
 80174c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80174c4:	b085      	sub	sp, #20
 80174c6:	4b1c      	ldr	r3, [pc, #112]	; (8017538 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 80174c8:	460c      	mov	r4, r1
 80174ca:	2100      	movs	r1, #0
 80174cc:	4605      	mov	r5, r0
 80174ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80174d2:	6820      	ldr	r0, [r4, #0]
 80174d4:	9100      	str	r1, [sp, #0]
 80174d6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80174da:	ab02      	add	r3, sp, #8
 80174dc:	6861      	ldr	r1, [r4, #4]
 80174de:	f8ad 2004 	strh.w	r2, [sp, #4]
 80174e2:	c303      	stmia	r3!, {r0, r1}
 80174e4:	4669      	mov	r1, sp
 80174e6:	a802      	add	r0, sp, #8
 80174e8:	f7fc f8b4 	bl	8013654 <_ZN8touchgfx4RectaNERKS0_>
 80174ec:	ab02      	add	r3, sp, #8
 80174ee:	cb03      	ldmia	r3!, {r0, r1}
 80174f0:	4b12      	ldr	r3, [pc, #72]	; (801753c <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 80174f2:	6020      	str	r0, [r4, #0]
 80174f4:	6818      	ldr	r0, [r3, #0]
 80174f6:	6061      	str	r1, [r4, #4]
 80174f8:	b138      	cbz	r0, 801750a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80174fa:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 80174fe:	b133      	cbz	r3, 801750e <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8017500:	6821      	ldr	r1, [r4, #0]
 8017502:	4628      	mov	r0, r5
 8017504:	6862      	ldr	r2, [r4, #4]
 8017506:	f7ff ff59 	bl	80173bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801750a:	b005      	add	sp, #20
 801750c:	bd30      	pop	{r4, r5, pc}
 801750e:	6803      	ldr	r3, [r0, #0]
 8017510:	4621      	mov	r1, r4
 8017512:	689b      	ldr	r3, [r3, #8]
 8017514:	4798      	blx	r3
 8017516:	4b0a      	ldr	r3, [pc, #40]	; (8017540 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8017518:	6818      	ldr	r0, [r3, #0]
 801751a:	b118      	cbz	r0, 8017524 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801751c:	6803      	ldr	r3, [r0, #0]
 801751e:	4621      	mov	r1, r4
 8017520:	689b      	ldr	r3, [r3, #8]
 8017522:	4798      	blx	r3
 8017524:	4b07      	ldr	r3, [pc, #28]	; (8017544 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8017526:	4621      	mov	r1, r4
 8017528:	6818      	ldr	r0, [r3, #0]
 801752a:	6803      	ldr	r3, [r0, #0]
 801752c:	695b      	ldr	r3, [r3, #20]
 801752e:	4798      	blx	r3
 8017530:	e7eb      	b.n	801750a <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8017532:	bf00      	nop
 8017534:	2000b1a0 	.word	0x2000b1a0
 8017538:	2000b1a2 	.word	0x2000b1a2
 801753c:	2000b228 	.word	0x2000b228
 8017540:	2000b224 	.word	0x2000b224
 8017544:	2000b1ac 	.word	0x2000b1ac

08017548 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8017548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801754c:	4604      	mov	r4, r0
 801754e:	b09b      	sub	sp, #108	; 0x6c
 8017550:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 8017554:	b129      	cbz	r1, 8017562 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8017556:	2300      	movs	r3, #0
 8017558:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801755c:	b01b      	add	sp, #108	; 0x6c
 801755e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017562:	4baf      	ldr	r3, [pc, #700]	; (8017820 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	b33b      	cbz	r3, 80175b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8017568:	4dae      	ldr	r5, [pc, #696]	; (8017824 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801756a:	4628      	mov	r0, r5
 801756c:	f7fc f8b6 	bl	80136dc <_ZNK8touchgfx4Rect7isEmptyEv>
 8017570:	4606      	mov	r6, r0
 8017572:	bb08      	cbnz	r0, 80175b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8017574:	4628      	mov	r0, r5
 8017576:	f7ff fc5b 	bl	8016e30 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801757a:	6829      	ldr	r1, [r5, #0]
 801757c:	686a      	ldr	r2, [r5, #4]
 801757e:	4620      	mov	r0, r4
 8017580:	f7ff ff1c 	bl	80173bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017584:	802e      	strh	r6, [r5, #0]
 8017586:	806e      	strh	r6, [r5, #2]
 8017588:	80ae      	strh	r6, [r5, #4]
 801758a:	80ee      	strh	r6, [r5, #6]
 801758c:	4fa6      	ldr	r7, [pc, #664]	; (8017828 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801758e:	a809      	add	r0, sp, #36	; 0x24
 8017590:	f7ff fe87 	bl	80172a2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8017594:	883d      	ldrh	r5, [r7, #0]
 8017596:	462e      	mov	r6, r5
 8017598:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801759c:	42b3      	cmp	r3, r6
 801759e:	d910      	bls.n	80175c2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 80175a0:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80175a4:	3601      	adds	r6, #1
 80175a6:	a809      	add	r0, sp, #36	; 0x24
 80175a8:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 80175ac:	b2b6      	uxth	r6, r6
 80175ae:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80175b2:	f7ff fee1 	bl	8017378 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80175b6:	e7ef      	b.n	8017598 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 80175b8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d1e5      	bne.n	801758c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 80175c0:	e7cc      	b.n	801755c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80175c2:	462e      	mov	r6, r5
 80175c4:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 80175c8:	42b3      	cmp	r3, r6
 80175ca:	d90b      	bls.n	80175e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 80175cc:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80175d0:	3601      	adds	r6, #1
 80175d2:	4620      	mov	r0, r4
 80175d4:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 80175d8:	b2b6      	uxth	r6, r6
 80175da:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 80175de:	f7ff feed 	bl	80173bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80175e2:	e7ef      	b.n	80175c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 80175e4:	4e91      	ldr	r6, [pc, #580]	; (801782c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 80175e6:	6833      	ldr	r3, [r6, #0]
 80175e8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80175ec:	2b01      	cmp	r3, #1
 80175ee:	f040 8092 	bne.w	8017716 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 80175f2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80175f6:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 80175fa:	f04f 0900 	mov.w	r9, #0
 80175fe:	33aa      	adds	r3, #170	; 0xaa
 8017600:	42a8      	cmp	r0, r5
 8017602:	f103 0308 	add.w	r3, r3, #8
 8017606:	dd0a      	ble.n	801761e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 8017608:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801760c:	3501      	adds	r5, #1
 801760e:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8017612:	440a      	add	r2, r1
 8017614:	b212      	sxth	r2, r2
 8017616:	4591      	cmp	r9, r2
 8017618:	bfb8      	it	lt
 801761a:	4691      	movlt	r9, r2
 801761c:	e7f0      	b.n	8017600 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 801761e:	4b84      	ldr	r3, [pc, #528]	; (8017830 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8017620:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8017838 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 8017624:	881d      	ldrh	r5, [r3, #0]
 8017626:	2300      	movs	r3, #0
 8017628:	2d0f      	cmp	r5, #15
 801762a:	bf8c      	ite	hi
 801762c:	08ed      	lsrhi	r5, r5, #3
 801762e:	2501      	movls	r5, #1
 8017630:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8017634:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8017638:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801763c:	6830      	ldr	r0, [r6, #0]
 801763e:	440b      	add	r3, r1
 8017640:	6802      	ldr	r2, [r0, #0]
 8017642:	b21b      	sxth	r3, r3
 8017644:	4599      	cmp	r9, r3
 8017646:	dd49      	ble.n	80176dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 8017648:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 801764c:	4798      	blx	r3
 801764e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8017652:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8017656:	4413      	add	r3, r2
 8017658:	b21b      	sxth	r3, r3
 801765a:	195a      	adds	r2, r3, r5
 801765c:	4290      	cmp	r0, r2
 801765e:	da07      	bge.n	8017670 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8017660:	4581      	cmp	r9, r0
 8017662:	dd05      	ble.n	8017670 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8017664:	4298      	cmp	r0, r3
 8017666:	da33      	bge.n	80176d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8017668:	2b00      	cmp	r3, #0
 801766a:	dd31      	ble.n	80176d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801766c:	4648      	mov	r0, r9
 801766e:	e004      	b.n	801767a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 8017670:	4298      	cmp	r0, r3
 8017672:	dbfb      	blt.n	801766c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 8017674:	4548      	cmp	r0, r9
 8017676:	bfa8      	it	ge
 8017678:	4648      	movge	r0, r9
 801767a:	f9b8 2000 	ldrsh.w	r2, [r8]
 801767e:	2100      	movs	r1, #0
 8017680:	1ac0      	subs	r0, r0, r3
 8017682:	f8b7 a000 	ldrh.w	sl, [r7]
 8017686:	f8ad 1014 	strh.w	r1, [sp, #20]
 801768a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801768e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8017692:	f8ad 001a 	strh.w	r0, [sp, #26]
 8017696:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801769a:	4553      	cmp	r3, sl
 801769c:	d9ca      	bls.n	8017634 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 801769e:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 80176a2:	ab07      	add	r3, sp, #28
 80176a4:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80176a8:	6851      	ldr	r1, [r2, #4]
 80176aa:	c303      	stmia	r3!, {r0, r1}
 80176ac:	a807      	add	r0, sp, #28
 80176ae:	a905      	add	r1, sp, #20
 80176b0:	f7fb ffd0 	bl	8013654 <_ZN8touchgfx4RectaNERKS0_>
 80176b4:	a807      	add	r0, sp, #28
 80176b6:	f7fc f811 	bl	80136dc <_ZNK8touchgfx4Rect7isEmptyEv>
 80176ba:	b920      	cbnz	r0, 80176c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 80176bc:	6823      	ldr	r3, [r4, #0]
 80176be:	a907      	add	r1, sp, #28
 80176c0:	4620      	mov	r0, r4
 80176c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176c4:	4798      	blx	r3
 80176c6:	f10a 0a01 	add.w	sl, sl, #1
 80176ca:	fa1f fa8a 	uxth.w	sl, sl
 80176ce:	e7e2      	b.n	8017696 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 80176d0:	6830      	ldr	r0, [r6, #0]
 80176d2:	2101      	movs	r1, #1
 80176d4:	6803      	ldr	r3, [r0, #0]
 80176d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80176d8:	4798      	blx	r3
 80176da:	e7ab      	b.n	8017634 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 80176dc:	69d3      	ldr	r3, [r2, #28]
 80176de:	4798      	blx	r3
 80176e0:	4b54      	ldr	r3, [pc, #336]	; (8017834 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 80176e2:	781b      	ldrb	r3, [r3, #0]
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	f43f af39 	beq.w	801755c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80176ea:	2300      	movs	r3, #0
 80176ec:	883d      	ldrh	r5, [r7, #0]
 80176ee:	34ea      	adds	r4, #234	; 0xea
 80176f0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 80176f4:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80176f8:	42ab      	cmp	r3, r5
 80176fa:	f67f af2f 	bls.w	801755c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80176fe:	ab1a      	add	r3, sp, #104	; 0x68
 8017700:	4620      	mov	r0, r4
 8017702:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017706:	3501      	adds	r5, #1
 8017708:	3b44      	subs	r3, #68	; 0x44
 801770a:	b2ad      	uxth	r5, r5
 801770c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8017710:	f7ff fe32 	bl	8017378 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8017714:	e7ee      	b.n	80176f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 8017716:	2b02      	cmp	r3, #2
 8017718:	d16a      	bne.n	80177f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801771a:	f8df a120 	ldr.w	sl, [pc, #288]	; 801783c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801771e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8017722:	42ab      	cmp	r3, r5
 8017724:	d9dc      	bls.n	80176e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 8017726:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801772a:	ab03      	add	r3, sp, #12
 801772c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8017730:	6851      	ldr	r1, [r2, #4]
 8017732:	c303      	stmia	r3!, {r0, r1}
 8017734:	f89a 3000 	ldrb.w	r3, [sl]
 8017738:	2b01      	cmp	r3, #1
 801773a:	d102      	bne.n	8017742 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 801773c:	a803      	add	r0, sp, #12
 801773e:	f7ff fbd1 	bl	8016ee4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017742:	a803      	add	r0, sp, #12
 8017744:	f7fb ffca 	bl	80136dc <_ZNK8touchgfx4Rect7isEmptyEv>
 8017748:	2800      	cmp	r0, #0
 801774a:	d14a      	bne.n	80177e2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 801774c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8017750:	f10d 0914 	add.w	r9, sp, #20
 8017754:	f10d 081c 	add.w	r8, sp, #28
 8017758:	f8ad 001a 	strh.w	r0, [sp, #26]
 801775c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017760:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8017764:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017768:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801776c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017770:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8017774:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 8017778:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801777c:	44dc      	add	ip, fp
 801777e:	6830      	ldr	r0, [r6, #0]
 8017780:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8017784:	ebac 0c02 	sub.w	ip, ip, r2
 8017788:	f8d0 e000 	ldr.w	lr, [r0]
 801778c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8017790:	fa1f fc8c 	uxth.w	ip, ip
 8017794:	f8cd c000 	str.w	ip, [sp]
 8017798:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 801779c:	47d8      	blx	fp
 801779e:	f89a 3000 	ldrb.w	r3, [sl]
 80177a2:	f8ad 001a 	strh.w	r0, [sp, #26]
 80177a6:	2b01      	cmp	r3, #1
 80177a8:	d11e      	bne.n	80177e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 80177aa:	e899 0003 	ldmia.w	r9, {r0, r1}
 80177ae:	e888 0003 	stmia.w	r8, {r0, r1}
 80177b2:	4640      	mov	r0, r8
 80177b4:	f7ff fb3c 	bl	8016e30 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80177b8:	6823      	ldr	r3, [r4, #0]
 80177ba:	4641      	mov	r1, r8
 80177bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177be:	4620      	mov	r0, r4
 80177c0:	4798      	blx	r3
 80177c2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80177c6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80177ca:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80177ce:	4413      	add	r3, r2
 80177d0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80177d4:	440a      	add	r2, r1
 80177d6:	b21b      	sxth	r3, r3
 80177d8:	b212      	sxth	r2, r2
 80177da:	f8ad 3016 	strh.w	r3, [sp, #22]
 80177de:	4293      	cmp	r3, r2
 80177e0:	dbc6      	blt.n	8017770 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 80177e2:	3501      	adds	r5, #1
 80177e4:	b2ad      	uxth	r5, r5
 80177e6:	e79a      	b.n	801771e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 80177e8:	6823      	ldr	r3, [r4, #0]
 80177ea:	4649      	mov	r1, r9
 80177ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177ee:	e7e6      	b.n	80177be <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 80177f0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80177f4:	42ab      	cmp	r3, r5
 80177f6:	f67f af73 	bls.w	80176e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 80177fa:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80177fe:	ab07      	add	r3, sp, #28
 8017800:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8017804:	6851      	ldr	r1, [r2, #4]
 8017806:	c303      	stmia	r3!, {r0, r1}
 8017808:	a807      	add	r0, sp, #28
 801780a:	f7fb ff67 	bl	80136dc <_ZNK8touchgfx4Rect7isEmptyEv>
 801780e:	b920      	cbnz	r0, 801781a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 8017810:	6823      	ldr	r3, [r4, #0]
 8017812:	a907      	add	r1, sp, #28
 8017814:	4620      	mov	r0, r4
 8017816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017818:	4798      	blx	r3
 801781a:	3501      	adds	r5, #1
 801781c:	b2ad      	uxth	r5, r5
 801781e:	e7e7      	b.n	80177f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8017820:	2000b224 	.word	0x2000b224
 8017824:	2000b230 	.word	0x2000b230
 8017828:	20000050 	.word	0x20000050
 801782c:	2000b1ac 	.word	0x2000b1ac
 8017830:	2000b1a2 	.word	0x2000b1a2
 8017834:	2000b1aa 	.word	0x2000b1aa
 8017838:	2000b1a0 	.word	0x2000b1a0
 801783c:	2000b1a4 	.word	0x2000b1a4

08017840 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8017840:	4b03      	ldr	r3, [pc, #12]	; (8017850 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8017842:	2200      	movs	r2, #0
 8017844:	801a      	strh	r2, [r3, #0]
 8017846:	805a      	strh	r2, [r3, #2]
 8017848:	809a      	strh	r2, [r3, #4]
 801784a:	80da      	strh	r2, [r3, #6]
 801784c:	4770      	bx	lr
 801784e:	bf00      	nop
 8017850:	2000b230 	.word	0x2000b230

08017854 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 8017854:	2000      	movs	r0, #0
 8017856:	4770      	bx	lr

08017858 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 8017858:	2000      	movs	r0, #0
 801785a:	4770      	bx	lr

0801785c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801785c:	b508      	push	{r3, lr}
 801785e:	6803      	ldr	r3, [r0, #0]
 8017860:	68db      	ldr	r3, [r3, #12]
 8017862:	4798      	blx	r3
 8017864:	b128      	cbz	r0, 8017872 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8017866:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801786a:	7a80      	ldrb	r0, [r0, #10]
 801786c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017870:	4318      	orrs	r0, r3
 8017872:	bd08      	pop	{r3, pc}

08017874 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 8017874:	b40e      	push	{r1, r2, r3}
 8017876:	b533      	push	{r0, r1, r4, r5, lr}
 8017878:	ab05      	add	r3, sp, #20
 801787a:	f853 2b04 	ldr.w	r2, [r3], #4
 801787e:	9301      	str	r3, [sp, #4]
 8017880:	4b0a      	ldr	r3, [pc, #40]	; (80178ac <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 8017882:	685c      	ldr	r4, [r3, #4]
 8017884:	1061      	asrs	r1, r4, #1
 8017886:	07e4      	lsls	r4, r4, #31
 8017888:	eb00 0501 	add.w	r5, r0, r1
 801788c:	bf46      	itte	mi
 801788e:	681b      	ldrmi	r3, [r3, #0]
 8017890:	5841      	ldrmi	r1, [r0, r1]
 8017892:	681c      	ldrpl	r4, [r3, #0]
 8017894:	4628      	mov	r0, r5
 8017896:	bf48      	it	mi
 8017898:	58cc      	ldrmi	r4, [r1, r3]
 801789a:	2100      	movs	r1, #0
 801789c:	9b01      	ldr	r3, [sp, #4]
 801789e:	47a0      	blx	r4
 80178a0:	b002      	add	sp, #8
 80178a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80178a6:	b003      	add	sp, #12
 80178a8:	4770      	bx	lr
 80178aa:	bf00      	nop
 80178ac:	20000038 	.word	0x20000038

080178b0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 80178b0:	b40c      	push	{r2, r3}
 80178b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80178b4:	ab06      	add	r3, sp, #24
 80178b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80178ba:	9301      	str	r3, [sp, #4]
 80178bc:	4b09      	ldr	r3, [pc, #36]	; (80178e4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 80178be:	685d      	ldr	r5, [r3, #4]
 80178c0:	106c      	asrs	r4, r5, #1
 80178c2:	07ed      	lsls	r5, r5, #31
 80178c4:	eb00 0604 	add.w	r6, r0, r4
 80178c8:	bf45      	ittet	mi
 80178ca:	681b      	ldrmi	r3, [r3, #0]
 80178cc:	5900      	ldrmi	r0, [r0, r4]
 80178ce:	681c      	ldrpl	r4, [r3, #0]
 80178d0:	58c4      	ldrmi	r4, [r0, r3]
 80178d2:	4630      	mov	r0, r6
 80178d4:	9b01      	ldr	r3, [sp, #4]
 80178d6:	47a0      	blx	r4
 80178d8:	b002      	add	sp, #8
 80178da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178de:	b002      	add	sp, #8
 80178e0:	4770      	bx	lr
 80178e2:	bf00      	nop
 80178e4:	20000038 	.word	0x20000038

080178e8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80178e8:	b40e      	push	{r1, r2, r3}
 80178ea:	b530      	push	{r4, r5, lr}
 80178ec:	b098      	sub	sp, #96	; 0x60
 80178ee:	4604      	mov	r4, r0
 80178f0:	ab1b      	add	r3, sp, #108	; 0x6c
 80178f2:	a802      	add	r0, sp, #8
 80178f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80178f8:	9301      	str	r3, [sp, #4]
 80178fa:	f001 f8c7 	bl	8018a8c <_ZN8touchgfx12TextProviderC1Ev>
 80178fe:	6823      	ldr	r3, [r4, #0]
 8017900:	4620      	mov	r0, r4
 8017902:	2401      	movs	r4, #1
 8017904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017906:	4798      	blx	r3
 8017908:	9a01      	ldr	r2, [sp, #4]
 801790a:	4603      	mov	r3, r0
 801790c:	4629      	mov	r1, r5
 801790e:	a802      	add	r0, sp, #8
 8017910:	f001 f8d9 	bl	8018ac6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017914:	a802      	add	r0, sp, #8
 8017916:	f001 f90f 	bl	8018b38 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801791a:	b2a3      	uxth	r3, r4
 801791c:	b138      	cbz	r0, 801792e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801791e:	280a      	cmp	r0, #10
 8017920:	a802      	add	r0, sp, #8
 8017922:	bf04      	itt	eq
 8017924:	3301      	addeq	r3, #1
 8017926:	b21c      	sxtheq	r4, r3
 8017928:	f001 f906 	bl	8018b38 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801792c:	e7f5      	b.n	801791a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801792e:	4618      	mov	r0, r3
 8017930:	b018      	add	sp, #96	; 0x60
 8017932:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017936:	b003      	add	sp, #12
 8017938:	4770      	bx	lr
	...

0801793c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801793c:	b40e      	push	{r1, r2, r3}
 801793e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017940:	b098      	sub	sp, #96	; 0x60
 8017942:	4605      	mov	r5, r0
 8017944:	4f25      	ldr	r7, [pc, #148]	; (80179dc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 8017946:	ab1d      	add	r3, sp, #116	; 0x74
 8017948:	a802      	add	r0, sp, #8
 801794a:	ae18      	add	r6, sp, #96	; 0x60
 801794c:	f853 4b04 	ldr.w	r4, [r3], #4
 8017950:	9300      	str	r3, [sp, #0]
 8017952:	f001 f89b 	bl	8018a8c <_ZN8touchgfx12TextProviderC1Ev>
 8017956:	682b      	ldr	r3, [r5, #0]
 8017958:	4628      	mov	r0, r5
 801795a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801795c:	4798      	blx	r3
 801795e:	4621      	mov	r1, r4
 8017960:	2400      	movs	r4, #0
 8017962:	4603      	mov	r3, r0
 8017964:	9a00      	ldr	r2, [sp, #0]
 8017966:	a802      	add	r0, sp, #8
 8017968:	f001 f8ad 	bl	8018ac6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801796c:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8017970:	462a      	mov	r2, r5
 8017972:	4633      	mov	r3, r6
 8017974:	4621      	mov	r1, r4
 8017976:	a802      	add	r0, sp, #8
 8017978:	f001 fa0a 	bl	8018d90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801797c:	b340      	cbz	r0, 80179d0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 801797e:	280a      	cmp	r0, #10
 8017980:	d01f      	beq.n	80179c2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017982:	9901      	ldr	r1, [sp, #4]
 8017984:	b1e9      	cbz	r1, 80179c2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017986:	7b4b      	ldrb	r3, [r1, #13]
 8017988:	f891 c008 	ldrb.w	ip, [r1, #8]
 801798c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017990:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 8017994:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8017998:	79c9      	ldrb	r1, [r1, #7]
 801799a:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 801799e:	bf18      	it	ne
 80179a0:	4638      	movne	r0, r7
 80179a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80179a6:	bf08      	it	eq
 80179a8:	2000      	moveq	r0, #0
 80179aa:	88aa      	ldrh	r2, [r5, #4]
 80179ac:	ea41 010e 	orr.w	r1, r1, lr
 80179b0:	ea43 030c 	orr.w	r3, r3, ip
 80179b4:	440a      	add	r2, r1
 80179b6:	4303      	orrs	r3, r0
 80179b8:	1ad3      	subs	r3, r2, r3
 80179ba:	b29b      	uxth	r3, r3
 80179bc:	42a3      	cmp	r3, r4
 80179be:	bfc8      	it	gt
 80179c0:	b21c      	sxthgt	r4, r3
 80179c2:	4633      	mov	r3, r6
 80179c4:	462a      	mov	r2, r5
 80179c6:	2100      	movs	r1, #0
 80179c8:	a802      	add	r0, sp, #8
 80179ca:	f001 f9e1 	bl	8018d90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80179ce:	e7d5      	b.n	801797c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 80179d0:	b2a0      	uxth	r0, r4
 80179d2:	b018      	add	sp, #96	; 0x60
 80179d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80179d8:	b003      	add	sp, #12
 80179da:	4770      	bx	lr
 80179dc:	fffffe00 	.word	0xfffffe00

080179e0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80179e0:	b40e      	push	{r1, r2, r3}
 80179e2:	b570      	push	{r4, r5, r6, lr}
 80179e4:	b099      	sub	sp, #100	; 0x64
 80179e6:	4604      	mov	r4, r0
 80179e8:	26ff      	movs	r6, #255	; 0xff
 80179ea:	ab1d      	add	r3, sp, #116	; 0x74
 80179ec:	a802      	add	r0, sp, #8
 80179ee:	f853 5b04 	ldr.w	r5, [r3], #4
 80179f2:	9300      	str	r3, [sp, #0]
 80179f4:	f001 f84a 	bl	8018a8c <_ZN8touchgfx12TextProviderC1Ev>
 80179f8:	6823      	ldr	r3, [r4, #0]
 80179fa:	4620      	mov	r0, r4
 80179fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80179fe:	4798      	blx	r3
 8017a00:	4629      	mov	r1, r5
 8017a02:	4603      	mov	r3, r0
 8017a04:	9a00      	ldr	r2, [sp, #0]
 8017a06:	a802      	add	r0, sp, #8
 8017a08:	ad18      	add	r5, sp, #96	; 0x60
 8017a0a:	f001 f85c 	bl	8018ac6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017a0e:	2100      	movs	r1, #0
 8017a10:	4622      	mov	r2, r4
 8017a12:	a802      	add	r0, sp, #8
 8017a14:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8017a18:	462b      	mov	r3, r5
 8017a1a:	f001 f9b9 	bl	8018d90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017a1e:	b190      	cbz	r0, 8017a46 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 8017a20:	280a      	cmp	r0, #10
 8017a22:	d009      	beq.n	8017a38 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8017a24:	9a01      	ldr	r2, [sp, #4]
 8017a26:	b13a      	cbz	r2, 8017a38 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8017a28:	7923      	ldrb	r3, [r4, #4]
 8017a2a:	7a12      	ldrb	r2, [r2, #8]
 8017a2c:	1a9b      	subs	r3, r3, r2
 8017a2e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8017a32:	429e      	cmp	r6, r3
 8017a34:	bf28      	it	cs
 8017a36:	461e      	movcs	r6, r3
 8017a38:	462b      	mov	r3, r5
 8017a3a:	4622      	mov	r2, r4
 8017a3c:	2100      	movs	r1, #0
 8017a3e:	a802      	add	r0, sp, #8
 8017a40:	f001 f9a6 	bl	8018d90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017a44:	e7eb      	b.n	8017a1e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8017a46:	4630      	mov	r0, r6
 8017a48:	b019      	add	sp, #100	; 0x64
 8017a4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a4e:	b003      	add	sp, #12
 8017a50:	4770      	bx	lr

08017a52 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8017a52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a56:	b099      	sub	sp, #100	; 0x64
 8017a58:	4606      	mov	r6, r0
 8017a5a:	4614      	mov	r4, r2
 8017a5c:	4688      	mov	r8, r1
 8017a5e:	a802      	add	r0, sp, #8
 8017a60:	461d      	mov	r5, r3
 8017a62:	f04f 0b00 	mov.w	fp, #0
 8017a66:	f001 f811 	bl	8018a8c <_ZN8touchgfx12TextProviderC1Ev>
 8017a6a:	6833      	ldr	r3, [r6, #0]
 8017a6c:	4630      	mov	r0, r6
 8017a6e:	465f      	mov	r7, fp
 8017a70:	46da      	mov	sl, fp
 8017a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a74:	46d9      	mov	r9, fp
 8017a76:	4798      	blx	r3
 8017a78:	462a      	mov	r2, r5
 8017a7a:	4603      	mov	r3, r0
 8017a7c:	4621      	mov	r1, r4
 8017a7e:	a802      	add	r0, sp, #8
 8017a80:	f001 f821 	bl	8018ac6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8017a84:	ab01      	add	r3, sp, #4
 8017a86:	4632      	mov	r2, r6
 8017a88:	4641      	mov	r1, r8
 8017a8a:	a802      	add	r0, sp, #8
 8017a8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8017a90:	f001 f97e 	bl	8018d90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017a94:	4605      	mov	r5, r0
 8017a96:	b108      	cbz	r0, 8017a9c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 8017a98:	280a      	cmp	r0, #10
 8017a9a:	d10b      	bne.n	8017ab4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 8017a9c:	4557      	cmp	r7, sl
 8017a9e:	bf38      	it	cc
 8017aa0:	4657      	movcc	r7, sl
 8017aa2:	f04f 0a00 	mov.w	sl, #0
 8017aa6:	b91d      	cbnz	r5, 8017ab0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 8017aa8:	4638      	mov	r0, r7
 8017aaa:	b019      	add	sp, #100	; 0x64
 8017aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ab0:	46ab      	mov	fp, r5
 8017ab2:	e7e7      	b.n	8017a84 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 8017ab4:	9a01      	ldr	r2, [sp, #4]
 8017ab6:	2a00      	cmp	r2, #0
 8017ab8:	d0fa      	beq.n	8017ab0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 8017aba:	f992 400d 	ldrsb.w	r4, [r2, #13]
 8017abe:	4659      	mov	r1, fp
 8017ac0:	6833      	ldr	r3, [r6, #0]
 8017ac2:	f404 7080 	and.w	r0, r4, #256	; 0x100
 8017ac6:	7a94      	ldrb	r4, [r2, #10]
 8017ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017aca:	4304      	orrs	r4, r0
 8017acc:	4630      	mov	r0, r6
 8017ace:	8895      	ldrh	r5, [r2, #4]
 8017ad0:	4798      	blx	r3
 8017ad2:	4420      	add	r0, r4
 8017ad4:	4450      	add	r0, sl
 8017ad6:	fa1f fa80 	uxth.w	sl, r0
 8017ada:	e7e4      	b.n	8017aa6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

08017adc <_ZNK8touchgfx8Drawable10invalidateEv>:
 8017adc:	b513      	push	{r0, r1, r4, lr}
 8017ade:	1d01      	adds	r1, r0, #4
 8017ae0:	4603      	mov	r3, r0
 8017ae2:	466a      	mov	r2, sp
 8017ae4:	c903      	ldmia	r1, {r0, r1}
 8017ae6:	e882 0003 	stmia.w	r2, {r0, r1}
 8017aea:	2100      	movs	r1, #0
 8017aec:	4618      	mov	r0, r3
 8017aee:	9100      	str	r1, [sp, #0]
 8017af0:	6819      	ldr	r1, [r3, #0]
 8017af2:	690c      	ldr	r4, [r1, #16]
 8017af4:	4611      	mov	r1, r2
 8017af6:	47a0      	blx	r4
 8017af8:	b002      	add	sp, #8
 8017afa:	bd10      	pop	{r4, pc}

08017afc <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8017afc:	b538      	push	{r3, r4, r5, lr}
 8017afe:	680b      	ldr	r3, [r1, #0]
 8017b00:	460c      	mov	r4, r1
 8017b02:	4605      	mov	r5, r0
 8017b04:	68db      	ldr	r3, [r3, #12]
 8017b06:	4798      	blx	r3
 8017b08:	6823      	ldr	r3, [r4, #0]
 8017b0a:	4620      	mov	r0, r4
 8017b0c:	4629      	mov	r1, r5
 8017b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b10:	4798      	blx	r3
 8017b12:	4628      	mov	r0, r5
 8017b14:	bd38      	pop	{r3, r4, r5, pc}

08017b16 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8017b16:	b410      	push	{r4}
 8017b18:	880a      	ldrh	r2, [r1, #0]
 8017b1a:	8884      	ldrh	r4, [r0, #4]
 8017b1c:	4422      	add	r2, r4
 8017b1e:	800a      	strh	r2, [r1, #0]
 8017b20:	884a      	ldrh	r2, [r1, #2]
 8017b22:	88c4      	ldrh	r4, [r0, #6]
 8017b24:	4422      	add	r2, r4
 8017b26:	804a      	strh	r2, [r1, #2]
 8017b28:	6940      	ldr	r0, [r0, #20]
 8017b2a:	b120      	cbz	r0, 8017b36 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8017b2c:	6803      	ldr	r3, [r0, #0]
 8017b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b34:	4718      	bx	r3
 8017b36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017b3a:	4770      	bx	lr

08017b3c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8017b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b3e:	460b      	mov	r3, r1
 8017b40:	b085      	sub	sp, #20
 8017b42:	4604      	mov	r4, r0
 8017b44:	b901      	cbnz	r1, 8017b48 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8017b46:	b1fa      	cbz	r2, 8017b88 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 8017b48:	1d27      	adds	r7, r4, #4
 8017b4a:	466e      	mov	r6, sp
 8017b4c:	ad02      	add	r5, sp, #8
 8017b4e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8017b52:	e886 0003 	stmia.w	r6, {r0, r1}
 8017b56:	88e1      	ldrh	r1, [r4, #6]
 8017b58:	4620      	mov	r0, r4
 8017b5a:	440a      	add	r2, r1
 8017b5c:	88a1      	ldrh	r1, [r4, #4]
 8017b5e:	4419      	add	r1, r3
 8017b60:	6823      	ldr	r3, [r4, #0]
 8017b62:	b212      	sxth	r2, r2
 8017b64:	b209      	sxth	r1, r1
 8017b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017b68:	4798      	blx	r3
 8017b6a:	e897 0003 	ldmia.w	r7, {r0, r1}
 8017b6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8017b72:	6960      	ldr	r0, [r4, #20]
 8017b74:	b150      	cbz	r0, 8017b8c <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 8017b76:	6803      	ldr	r3, [r0, #0]
 8017b78:	4631      	mov	r1, r6
 8017b7a:	691b      	ldr	r3, [r3, #16]
 8017b7c:	4798      	blx	r3
 8017b7e:	6960      	ldr	r0, [r4, #20]
 8017b80:	6803      	ldr	r3, [r0, #0]
 8017b82:	691b      	ldr	r3, [r3, #16]
 8017b84:	4629      	mov	r1, r5
 8017b86:	4798      	blx	r3
 8017b88:	b005      	add	sp, #20
 8017b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b8c:	f7ff fb30 	bl	80171f0 <_ZN8touchgfx11Application11getInstanceEv>
 8017b90:	6803      	ldr	r3, [r0, #0]
 8017b92:	4631      	mov	r1, r6
 8017b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b96:	4798      	blx	r3
 8017b98:	f7ff fb2a 	bl	80171f0 <_ZN8touchgfx11Application11getInstanceEv>
 8017b9c:	6803      	ldr	r3, [r0, #0]
 8017b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ba0:	e7f0      	b.n	8017b84 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

08017ba2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8017ba2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017ba4:	8882      	ldrh	r2, [r0, #4]
 8017ba6:	4605      	mov	r5, r0
 8017ba8:	880b      	ldrh	r3, [r1, #0]
 8017baa:	460c      	mov	r4, r1
 8017bac:	4413      	add	r3, r2
 8017bae:	800b      	strh	r3, [r1, #0]
 8017bb0:	884b      	ldrh	r3, [r1, #2]
 8017bb2:	88c2      	ldrh	r2, [r0, #6]
 8017bb4:	4413      	add	r3, r2
 8017bb6:	4602      	mov	r2, r0
 8017bb8:	804b      	strh	r3, [r1, #2]
 8017bba:	466b      	mov	r3, sp
 8017bbc:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017bc0:	6851      	ldr	r1, [r2, #4]
 8017bc2:	c303      	stmia	r3!, {r0, r1}
 8017bc4:	4621      	mov	r1, r4
 8017bc6:	4668      	mov	r0, sp
 8017bc8:	f7fb fd44 	bl	8013654 <_ZN8touchgfx4RectaNERKS0_>
 8017bcc:	466b      	mov	r3, sp
 8017bce:	cb03      	ldmia	r3!, {r0, r1}
 8017bd0:	6020      	str	r0, [r4, #0]
 8017bd2:	6061      	str	r1, [r4, #4]
 8017bd4:	6968      	ldr	r0, [r5, #20]
 8017bd6:	b128      	cbz	r0, 8017be4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8017bd8:	6803      	ldr	r3, [r0, #0]
 8017bda:	691b      	ldr	r3, [r3, #16]
 8017bdc:	4621      	mov	r1, r4
 8017bde:	4798      	blx	r3
 8017be0:	b003      	add	sp, #12
 8017be2:	bd30      	pop	{r4, r5, pc}
 8017be4:	f7ff fb04 	bl	80171f0 <_ZN8touchgfx11Application11getInstanceEv>
 8017be8:	6803      	ldr	r3, [r0, #0]
 8017bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bec:	e7f6      	b.n	8017bdc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08017bee <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8017bee:	b570      	push	{r4, r5, r6, lr}
 8017bf0:	8882      	ldrh	r2, [r0, #4]
 8017bf2:	460c      	mov	r4, r1
 8017bf4:	880b      	ldrh	r3, [r1, #0]
 8017bf6:	4605      	mov	r5, r0
 8017bf8:	4413      	add	r3, r2
 8017bfa:	800b      	strh	r3, [r1, #0]
 8017bfc:	884b      	ldrh	r3, [r1, #2]
 8017bfe:	88c2      	ldrh	r2, [r0, #6]
 8017c00:	4413      	add	r3, r2
 8017c02:	804b      	strh	r3, [r1, #2]
 8017c04:	1d01      	adds	r1, r0, #4
 8017c06:	4620      	mov	r0, r4
 8017c08:	f7fb fd24 	bl	8013654 <_ZN8touchgfx4RectaNERKS0_>
 8017c0c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017c10:	b153      	cbz	r3, 8017c28 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8017c12:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017c16:	b13b      	cbz	r3, 8017c28 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8017c18:	6968      	ldr	r0, [r5, #20]
 8017c1a:	b128      	cbz	r0, 8017c28 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8017c1c:	6803      	ldr	r3, [r0, #0]
 8017c1e:	4621      	mov	r1, r4
 8017c20:	6a1b      	ldr	r3, [r3, #32]
 8017c22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c26:	4718      	bx	r3
 8017c28:	bd70      	pop	{r4, r5, r6, pc}

08017c2a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8017c2a:	b510      	push	{r4, lr}
 8017c2c:	2300      	movs	r3, #0
 8017c2e:	4604      	mov	r4, r0
 8017c30:	4608      	mov	r0, r1
 8017c32:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8017c36:	8023      	strh	r3, [r4, #0]
 8017c38:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017c3c:	8063      	strh	r3, [r4, #2]
 8017c3e:	6803      	ldr	r3, [r0, #0]
 8017c40:	80a1      	strh	r1, [r4, #4]
 8017c42:	4621      	mov	r1, r4
 8017c44:	80e2      	strh	r2, [r4, #6]
 8017c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c48:	4798      	blx	r3
 8017c4a:	4620      	mov	r0, r4
 8017c4c:	bd10      	pop	{r4, pc}
	...

08017c50 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8017c50:	b530      	push	{r4, r5, lr}
 8017c52:	8083      	strh	r3, [r0, #4]
 8017c54:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8017c58:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8017c5c:	7183      	strb	r3, [r0, #6]
 8017c5e:	79c3      	ldrb	r3, [r0, #7]
 8017c60:	6101      	str	r1, [r0, #16]
 8017c62:	f365 0306 	bfi	r3, r5, #0, #7
 8017c66:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8017c6a:	8282      	strh	r2, [r0, #20]
 8017c6c:	f365 13c7 	bfi	r3, r5, #7, #1
 8017c70:	71c3      	strb	r3, [r0, #7]
 8017c72:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8017c76:	7203      	strb	r3, [r0, #8]
 8017c78:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8017c7c:	7243      	strb	r3, [r0, #9]
 8017c7e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017c82:	8143      	strh	r3, [r0, #10]
 8017c84:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8017c88:	8183      	strh	r3, [r0, #12]
 8017c8a:	4b01      	ldr	r3, [pc, #4]	; (8017c90 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8017c8c:	6003      	str	r3, [r0, #0]
 8017c8e:	bd30      	pop	{r4, r5, pc}
 8017c90:	080284a8 	.word	0x080284a8

08017c94 <_ZNK8touchgfx9ConstFont4findEt>:
 8017c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c96:	8a84      	ldrh	r4, [r0, #20]
 8017c98:	2500      	movs	r5, #0
 8017c9a:	260e      	movs	r6, #14
 8017c9c:	3c01      	subs	r4, #1
 8017c9e:	42a5      	cmp	r5, r4
 8017ca0:	dc0c      	bgt.n	8017cbc <_ZNK8touchgfx9ConstFont4findEt+0x28>
 8017ca2:	192a      	adds	r2, r5, r4
 8017ca4:	6903      	ldr	r3, [r0, #16]
 8017ca6:	1052      	asrs	r2, r2, #1
 8017ca8:	fb06 3302 	mla	r3, r6, r2, r3
 8017cac:	889f      	ldrh	r7, [r3, #4]
 8017cae:	428f      	cmp	r7, r1
 8017cb0:	d901      	bls.n	8017cb6 <_ZNK8touchgfx9ConstFont4findEt+0x22>
 8017cb2:	1e54      	subs	r4, r2, #1
 8017cb4:	e7f3      	b.n	8017c9e <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8017cb6:	d202      	bcs.n	8017cbe <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 8017cb8:	1c55      	adds	r5, r2, #1
 8017cba:	e7f0      	b.n	8017c9e <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8017cbc:	2300      	movs	r3, #0
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017cc2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8017cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cc4:	4605      	mov	r5, r0
 8017cc6:	4617      	mov	r7, r2
 8017cc8:	461e      	mov	r6, r3
 8017cca:	f7ff ffe3 	bl	8017c94 <_ZNK8touchgfx9ConstFont4findEt>
 8017cce:	b9e0      	cbnz	r0, 8017d0a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 8017cd0:	b911      	cbnz	r1, 8017cd8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 8017cd2:	2400      	movs	r4, #0
 8017cd4:	4620      	mov	r0, r4
 8017cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017cd8:	290a      	cmp	r1, #10
 8017cda:	d0fa      	beq.n	8017cd2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8017cdc:	682b      	ldr	r3, [r5, #0]
 8017cde:	4628      	mov	r0, r5
 8017ce0:	691b      	ldr	r3, [r3, #16]
 8017ce2:	4798      	blx	r3
 8017ce4:	4601      	mov	r1, r0
 8017ce6:	4628      	mov	r0, r5
 8017ce8:	f7ff ffd4 	bl	8017c94 <_ZNK8touchgfx9ConstFont4findEt>
 8017cec:	4604      	mov	r4, r0
 8017cee:	2800      	cmp	r0, #0
 8017cf0:	d0ef      	beq.n	8017cd2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8017cf2:	682b      	ldr	r3, [r5, #0]
 8017cf4:	4621      	mov	r1, r4
 8017cf6:	4628      	mov	r0, r5
 8017cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017cfa:	4798      	blx	r3
 8017cfc:	6038      	str	r0, [r7, #0]
 8017cfe:	682b      	ldr	r3, [r5, #0]
 8017d00:	4628      	mov	r0, r5
 8017d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017d04:	4798      	blx	r3
 8017d06:	7030      	strb	r0, [r6, #0]
 8017d08:	e7e4      	b.n	8017cd4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 8017d0a:	4604      	mov	r4, r0
 8017d0c:	e7f1      	b.n	8017cf2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

08017d0e <_ZN8touchgfx6memsetEPvhm>:
 8017d0e:	4402      	add	r2, r0
 8017d10:	4290      	cmp	r0, r2
 8017d12:	d002      	beq.n	8017d1a <_ZN8touchgfx6memsetEPvhm+0xc>
 8017d14:	f800 1b01 	strb.w	r1, [r0], #1
 8017d18:	e7fa      	b.n	8017d10 <_ZN8touchgfx6memsetEPvhm+0x2>
 8017d1a:	4770      	bx	lr

08017d1c <_ZN8touchgfx3clzEl>:
 8017d1c:	b1e8      	cbz	r0, 8017d5a <_ZN8touchgfx3clzEl+0x3e>
 8017d1e:	2800      	cmp	r0, #0
 8017d20:	bfb8      	it	lt
 8017d22:	4240      	neglt	r0, r0
 8017d24:	0c03      	lsrs	r3, r0, #16
 8017d26:	041b      	lsls	r3, r3, #16
 8017d28:	b9ab      	cbnz	r3, 8017d56 <_ZN8touchgfx3clzEl+0x3a>
 8017d2a:	0400      	lsls	r0, r0, #16
 8017d2c:	2310      	movs	r3, #16
 8017d2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017d32:	bf04      	itt	eq
 8017d34:	0200      	lsleq	r0, r0, #8
 8017d36:	3308      	addeq	r3, #8
 8017d38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017d3c:	bf04      	itt	eq
 8017d3e:	0100      	lsleq	r0, r0, #4
 8017d40:	3304      	addeq	r3, #4
 8017d42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8017d46:	bf04      	itt	eq
 8017d48:	0080      	lsleq	r0, r0, #2
 8017d4a:	3302      	addeq	r3, #2
 8017d4c:	2800      	cmp	r0, #0
 8017d4e:	bfa8      	it	ge
 8017d50:	3301      	addge	r3, #1
 8017d52:	1e58      	subs	r0, r3, #1
 8017d54:	4770      	bx	lr
 8017d56:	2300      	movs	r3, #0
 8017d58:	e7e9      	b.n	8017d2e <_ZN8touchgfx3clzEl+0x12>
 8017d5a:	201f      	movs	r0, #31
 8017d5c:	4770      	bx	lr

08017d5e <_ZN8touchgfx6muldivElllRl>:
 8017d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d62:	4604      	mov	r4, r0
 8017d64:	4698      	mov	r8, r3
 8017d66:	2601      	movs	r6, #1
 8017d68:	f7ff ffd8 	bl	8017d1c <_ZN8touchgfx3clzEl>
 8017d6c:	2c00      	cmp	r4, #0
 8017d6e:	fa04 f500 	lsl.w	r5, r4, r0
 8017d72:	fa06 f600 	lsl.w	r6, r6, r0
 8017d76:	bfba      	itte	lt
 8017d78:	f04f 37ff 	movlt.w	r7, #4294967295
 8017d7c:	4264      	neglt	r4, r4
 8017d7e:	2701      	movge	r7, #1
 8017d80:	2900      	cmp	r1, #0
 8017d82:	f106 36ff 	add.w	r6, r6, #4294967295
 8017d86:	bfbc      	itt	lt
 8017d88:	4249      	neglt	r1, r1
 8017d8a:	427f      	neglt	r7, r7
 8017d8c:	2a00      	cmp	r2, #0
 8017d8e:	fa41 fc00 	asr.w	ip, r1, r0
 8017d92:	ea01 0106 	and.w	r1, r1, r6
 8017d96:	bfb8      	it	lt
 8017d98:	427f      	neglt	r7, r7
 8017d9a:	fb04 f401 	mul.w	r4, r4, r1
 8017d9e:	fb95 f3f2 	sdiv	r3, r5, r2
 8017da2:	fb02 5513 	mls	r5, r2, r3, r5
 8017da6:	bfb8      	it	lt
 8017da8:	4252      	neglt	r2, r2
 8017daa:	fb94 f0f2 	sdiv	r0, r4, r2
 8017dae:	fb02 4410 	mls	r4, r2, r0, r4
 8017db2:	fb0c 4405 	mla	r4, ip, r5, r4
 8017db6:	fb94 f1f2 	sdiv	r1, r4, r2
 8017dba:	4408      	add	r0, r1
 8017dbc:	fb02 4211 	mls	r2, r2, r1, r4
 8017dc0:	fb0c 0003 	mla	r0, ip, r3, r0
 8017dc4:	f8c8 2000 	str.w	r2, [r8]
 8017dc8:	4378      	muls	r0, r7
 8017dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017dce <_ZN8touchgfx10ClickEventD1Ev>:
 8017dce:	4770      	bx	lr

08017dd0 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8017dd0:	2000      	movs	r0, #0
 8017dd2:	4770      	bx	lr

08017dd4 <_ZN8touchgfx9DragEventD1Ev>:
 8017dd4:	4770      	bx	lr

08017dd6 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8017dd6:	2001      	movs	r0, #1
 8017dd8:	4770      	bx	lr

08017dda <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8017dda:	2002      	movs	r0, #2
 8017ddc:	4770      	bx	lr

08017dde <_ZN8touchgfx12GestureEventD1Ev>:
 8017dde:	4770      	bx	lr

08017de0 <_ZN8touchgfx10ClickEventD0Ev>:
 8017de0:	b510      	push	{r4, lr}
 8017de2:	4604      	mov	r4, r0
 8017de4:	210c      	movs	r1, #12
 8017de6:	f00b f932 	bl	802304e <_ZdlPvj>
 8017dea:	4620      	mov	r0, r4
 8017dec:	bd10      	pop	{r4, pc}

08017dee <_ZN8touchgfx9DragEventD0Ev>:
 8017dee:	b510      	push	{r4, lr}
 8017df0:	4604      	mov	r4, r0
 8017df2:	2110      	movs	r1, #16
 8017df4:	f00b f92b 	bl	802304e <_ZdlPvj>
 8017df8:	4620      	mov	r0, r4
 8017dfa:	bd10      	pop	{r4, pc}

08017dfc <_ZN8touchgfx12GestureEventD0Ev>:
 8017dfc:	b510      	push	{r4, lr}
 8017dfe:	4604      	mov	r4, r0
 8017e00:	210c      	movs	r1, #12
 8017e02:	f00b f924 	bl	802304e <_ZdlPvj>
 8017e06:	4620      	mov	r0, r4
 8017e08:	bd10      	pop	{r4, pc}
	...

08017e0c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8017e0c:	b530      	push	{r4, r5, lr}
 8017e0e:	460d      	mov	r5, r1
 8017e10:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8017e12:	b087      	sub	sp, #28
 8017e14:	4604      	mov	r4, r0
 8017e16:	b301      	cbz	r1, 8017e5a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8017e18:	a801      	add	r0, sp, #4
 8017e1a:	f7ff ff06 	bl	8017c2a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017e1e:	892a      	ldrh	r2, [r5, #8]
 8017e20:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017e24:	7928      	ldrb	r0, [r5, #4]
 8017e26:	1ad2      	subs	r2, r2, r3
 8017e28:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8017e2a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8017e2e:	441a      	add	r2, r3
 8017e30:	896b      	ldrh	r3, [r5, #10]
 8017e32:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8017e36:	f88d 0010 	strb.w	r0, [sp, #16]
 8017e3a:	1b5b      	subs	r3, r3, r5
 8017e3c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8017e3e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8017e40:	442b      	add	r3, r5
 8017e42:	4d07      	ldr	r5, [pc, #28]	; (8017e60 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8017e44:	f8ad 1012 	strh.w	r1, [sp, #18]
 8017e48:	a903      	add	r1, sp, #12
 8017e4a:	9503      	str	r5, [sp, #12]
 8017e4c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017e50:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017e54:	6803      	ldr	r3, [r0, #0]
 8017e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017e58:	4798      	blx	r3
 8017e5a:	b007      	add	sp, #28
 8017e5c:	bd30      	pop	{r4, r5, pc}
 8017e5e:	bf00      	nop
 8017e60:	08028524 	.word	0x08028524

08017e64 <_ZNK8touchgfx4Rect9intersectEss>:
 8017e64:	b510      	push	{r4, lr}
 8017e66:	f9b0 3000 	ldrsh.w	r3, [r0]
 8017e6a:	428b      	cmp	r3, r1
 8017e6c:	dc10      	bgt.n	8017e90 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8017e6e:	8884      	ldrh	r4, [r0, #4]
 8017e70:	4423      	add	r3, r4
 8017e72:	b21b      	sxth	r3, r3
 8017e74:	4299      	cmp	r1, r3
 8017e76:	da0b      	bge.n	8017e90 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8017e78:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8017e7c:	4293      	cmp	r3, r2
 8017e7e:	dc07      	bgt.n	8017e90 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8017e80:	88c0      	ldrh	r0, [r0, #6]
 8017e82:	4418      	add	r0, r3
 8017e84:	b200      	sxth	r0, r0
 8017e86:	4282      	cmp	r2, r0
 8017e88:	bfac      	ite	ge
 8017e8a:	2000      	movge	r0, #0
 8017e8c:	2001      	movlt	r0, #1
 8017e8e:	bd10      	pop	{r4, pc}
 8017e90:	2000      	movs	r0, #0
 8017e92:	e7fc      	b.n	8017e8e <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08017e94 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8017e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e96:	460c      	mov	r4, r1
 8017e98:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8017e9a:	b089      	sub	sp, #36	; 0x24
 8017e9c:	4605      	mov	r5, r0
 8017e9e:	2900      	cmp	r1, #0
 8017ea0:	d054      	beq.n	8017f4c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 8017ea2:	4668      	mov	r0, sp
 8017ea4:	f7ff fec1 	bl	8017c2a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017ea8:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8017eaa:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8017eac:	4668      	mov	r0, sp
 8017eae:	8922      	ldrh	r2, [r4, #8]
 8017eb0:	88e1      	ldrh	r1, [r4, #6]
 8017eb2:	443a      	add	r2, r7
 8017eb4:	4431      	add	r1, r6
 8017eb6:	b212      	sxth	r2, r2
 8017eb8:	b209      	sxth	r1, r1
 8017eba:	f7ff ffd3 	bl	8017e64 <_ZNK8touchgfx4Rect9intersectEss>
 8017ebe:	b1d0      	cbz	r0, 8017ef6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8017ec0:	89a2      	ldrh	r2, [r4, #12]
 8017ec2:	4668      	mov	r0, sp
 8017ec4:	8961      	ldrh	r1, [r4, #10]
 8017ec6:	443a      	add	r2, r7
 8017ec8:	4431      	add	r1, r6
 8017eca:	b212      	sxth	r2, r2
 8017ecc:	b209      	sxth	r1, r1
 8017ece:	f7ff ffc9 	bl	8017e64 <_ZNK8touchgfx4Rect9intersectEss>
 8017ed2:	4603      	mov	r3, r0
 8017ed4:	b978      	cbnz	r0, 8017ef6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8017ed6:	4a1e      	ldr	r2, [pc, #120]	; (8017f50 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8017ed8:	a904      	add	r1, sp, #16
 8017eda:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017edc:	9204      	str	r2, [sp, #16]
 8017ede:	2202      	movs	r2, #2
 8017ee0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017ee4:	f88d 2014 	strb.w	r2, [sp, #20]
 8017ee8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017eec:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017ef0:	6803      	ldr	r3, [r0, #0]
 8017ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ef4:	4798      	blx	r3
 8017ef6:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8017ef8:	a802      	add	r0, sp, #8
 8017efa:	f7ff fe96 	bl	8017c2a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017efe:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8017f02:	88e0      	ldrh	r0, [r4, #6]
 8017f04:	8961      	ldrh	r1, [r4, #10]
 8017f06:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8017f0a:	1a80      	subs	r0, r0, r2
 8017f0c:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8017f10:	1a89      	subs	r1, r1, r2
 8017f12:	8923      	ldrh	r3, [r4, #8]
 8017f14:	4460      	add	r0, ip
 8017f16:	89a2      	ldrh	r2, [r4, #12]
 8017f18:	4461      	add	r1, ip
 8017f1a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8017f1c:	eba3 030e 	sub.w	r3, r3, lr
 8017f20:	eba2 020e 	sub.w	r2, r2, lr
 8017f24:	f8ad 0016 	strh.w	r0, [sp, #22]
 8017f28:	7927      	ldrb	r7, [r4, #4]
 8017f2a:	4433      	add	r3, r6
 8017f2c:	4432      	add	r2, r6
 8017f2e:	4c09      	ldr	r4, [pc, #36]	; (8017f54 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 8017f30:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017f32:	f8ad 101a 	strh.w	r1, [sp, #26]
 8017f36:	a904      	add	r1, sp, #16
 8017f38:	9404      	str	r4, [sp, #16]
 8017f3a:	f88d 7014 	strb.w	r7, [sp, #20]
 8017f3e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017f42:	f8ad 201c 	strh.w	r2, [sp, #28]
 8017f46:	6803      	ldr	r3, [r0, #0]
 8017f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017f4a:	4798      	blx	r3
 8017f4c:	b009      	add	sp, #36	; 0x24
 8017f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f50:	080284fc 	.word	0x080284fc
 8017f54:	08028510 	.word	0x08028510

08017f58 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8017f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f5c:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8017f60:	b0a1      	sub	sp, #132	; 0x84
 8017f62:	4604      	mov	r4, r0
 8017f64:	460d      	mov	r5, r1
 8017f66:	790b      	ldrb	r3, [r1, #4]
 8017f68:	f1b9 0f00 	cmp.w	r9, #0
 8017f6c:	d00f      	beq.n	8017f8e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	f040 80a2 	bne.w	80180b8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8017f74:	b021      	add	sp, #132	; 0x84
 8017f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f7a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8017f7e:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8017f82:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8017f86:	1d20      	adds	r0, r4, #4
 8017f88:	f7fb fab2 	bl	80134f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017f8c:	e094      	b.n	80180b8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d1f0      	bne.n	8017f74 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8017f92:	4b5f      	ldr	r3, [pc, #380]	; (8018110 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8017f9a:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8017f9e:	f1ba 0f03 	cmp.w	sl, #3
 8017fa2:	ddea      	ble.n	8017f7a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8017fa4:	f1ba 0f0c 	cmp.w	sl, #12
 8017fa8:	f04f 0303 	mov.w	r3, #3
 8017fac:	f04f 0600 	mov.w	r6, #0
 8017fb0:	4958      	ldr	r1, [pc, #352]	; (8018114 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8017fb2:	bfd8      	it	le
 8017fb4:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8017fb8:	960a      	str	r6, [sp, #40]	; 0x28
 8017fba:	bfd8      	it	le
 8017fbc:	fb92 f3f3 	sdivle	r3, r2, r3
 8017fc0:	9301      	str	r3, [sp, #4]
 8017fc2:	4b55      	ldr	r3, [pc, #340]	; (8018118 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8017fc4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017fc8:	4b54      	ldr	r3, [pc, #336]	; (801811c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 8017fca:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8017fce:	2248      	movs	r2, #72	; 0x48
 8017fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017fd4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8017fd8:	ab0e      	add	r3, sp, #56	; 0x38
 8017fda:	4618      	mov	r0, r3
 8017fdc:	f00b f8e0 	bl	80231a0 <memcpy>
 8017fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8017fe4:	f8cd a008 	str.w	sl, [sp, #8]
 8017fe8:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8017fec:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8017ff0:	46b3      	mov	fp, r6
 8017ff2:	fb93 f3f2 	sdiv	r3, r3, r2
 8017ff6:	b29b      	uxth	r3, r3
 8017ff8:	9303      	str	r3, [sp, #12]
 8017ffa:	2300      	movs	r3, #0
 8017ffc:	9a03      	ldr	r2, [sp, #12]
 8017ffe:	88ef      	ldrh	r7, [r5, #6]
 8018000:	a80a      	add	r0, sp, #40	; 0x28
 8018002:	9309      	str	r3, [sp, #36]	; 0x24
 8018004:	9b07      	ldr	r3, [sp, #28]
 8018006:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801800a:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 801800e:	fb13 f302 	smulbb	r3, r3, r2
 8018012:	b29b      	uxth	r3, r3
 8018014:	9304      	str	r3, [sp, #16]
 8018016:	9b07      	ldr	r3, [sp, #28]
 8018018:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801801c:	685b      	ldr	r3, [r3, #4]
 801801e:	fb13 f302 	smulbb	r3, r3, r2
 8018022:	b29b      	uxth	r3, r3
 8018024:	9305      	str	r3, [sp, #20]
 8018026:	9b04      	ldr	r3, [sp, #16]
 8018028:	441f      	add	r7, r3
 801802a:	9b05      	ldr	r3, [sp, #20]
 801802c:	4498      	add	r8, r3
 801802e:	b23f      	sxth	r7, r7
 8018030:	fa0f f888 	sxth.w	r8, r8
 8018034:	4639      	mov	r1, r7
 8018036:	4642      	mov	r2, r8
 8018038:	f7ff ff14 	bl	8017e64 <_ZNK8touchgfx4Rect9intersectEss>
 801803c:	b380      	cbz	r0, 80180a0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801803e:	4639      	mov	r1, r7
 8018040:	ab09      	add	r3, sp, #36	; 0x24
 8018042:	4642      	mov	r2, r8
 8018044:	1d20      	adds	r0, r4, #4
 8018046:	f7fb fa53 	bl	80134f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801804a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801804c:	b341      	cbz	r1, 80180a0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801804e:	4549      	cmp	r1, r9
 8018050:	d026      	beq.n	80180a0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8018052:	a80c      	add	r0, sp, #48	; 0x30
 8018054:	f7ff fde9 	bl	8017c2a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018058:	2002      	movs	r0, #2
 801805a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801805e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8018062:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8018066:	fb92 f2f0 	sdiv	r2, r2, r0
 801806a:	440a      	add	r2, r1
 801806c:	1a99      	subs	r1, r3, r2
 801806e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8018072:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8018076:	fb93 f3f0 	sdiv	r3, r3, r0
 801807a:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801807e:	4403      	add	r3, r0
 8018080:	1ad3      	subs	r3, r2, r3
 8018082:	9a06      	ldr	r2, [sp, #24]
 8018084:	435b      	muls	r3, r3
 8018086:	fb01 3301 	mla	r3, r1, r1, r3
 801808a:	4293      	cmp	r3, r2
 801808c:	d208      	bcs.n	80180a0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 801808e:	9a04      	ldr	r2, [sp, #16]
 8018090:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018094:	86a2      	strh	r2, [r4, #52]	; 0x34
 8018096:	9a05      	ldr	r2, [sp, #20]
 8018098:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801809c:	86e2      	strh	r2, [r4, #54]	; 0x36
 801809e:	9306      	str	r3, [sp, #24]
 80180a0:	f10b 0b02 	add.w	fp, fp, #2
 80180a4:	f1bb 0f08 	cmp.w	fp, #8
 80180a8:	dda7      	ble.n	8017ffa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 80180aa:	9b02      	ldr	r3, [sp, #8]
 80180ac:	3601      	adds	r6, #1
 80180ae:	4453      	add	r3, sl
 80180b0:	9302      	str	r3, [sp, #8]
 80180b2:	9b01      	ldr	r3, [sp, #4]
 80180b4:	42b3      	cmp	r3, r6
 80180b6:	d199      	bne.n	8017fec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 80180b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80180ba:	2900      	cmp	r1, #0
 80180bc:	f43f af5a 	beq.w	8017f74 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80180c0:	a80c      	add	r0, sp, #48	; 0x30
 80180c2:	2600      	movs	r6, #0
 80180c4:	f7ff fdb1 	bl	8017c2a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80180c8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80180cc:	88ea      	ldrh	r2, [r5, #6]
 80180ce:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 80180d2:	1ad2      	subs	r2, r2, r3
 80180d4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80180d6:	7929      	ldrb	r1, [r5, #4]
 80180d8:	441a      	add	r2, r3
 80180da:	892b      	ldrh	r3, [r5, #8]
 80180dc:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 80180e0:	a90e      	add	r1, sp, #56	; 0x38
 80180e2:	1a1b      	subs	r3, r3, r0
 80180e4:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80180e6:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 80180ea:	4403      	add	r3, r0
 80180ec:	480c      	ldr	r0, [pc, #48]	; (8018120 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 80180ee:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 80180f2:	900e      	str	r0, [sp, #56]	; 0x38
 80180f4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80180f6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80180fa:	6803      	ldr	r3, [r0, #0]
 80180fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180fe:	4798      	blx	r3
 8018100:	792b      	ldrb	r3, [r5, #4]
 8018102:	2b00      	cmp	r3, #0
 8018104:	f43f af36 	beq.w	8017f74 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8018108:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801810c:	e732      	b.n	8017f74 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801810e:	bf00      	nop
 8018110:	2000b1ac 	.word	0x2000b1ac
 8018114:	080248f4 	.word	0x080248f4
 8018118:	2000b1a0 	.word	0x2000b1a0
 801811c:	2000b1a2 	.word	0x2000b1a2
 8018120:	080284fc 	.word	0x080284fc

08018124 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8018124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018126:	4604      	mov	r4, r0
 8018128:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801812c:	3201      	adds	r2, #1
 801812e:	d112      	bne.n	8018156 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8018130:	2500      	movs	r5, #0
 8018132:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8018136:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801813a:	6803      	ldr	r3, [r0, #0]
 801813c:	9500      	str	r5, [sp, #0]
 801813e:	466d      	mov	r5, sp
 8018140:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018144:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018148:	4629      	mov	r1, r5
 801814a:	6a1b      	ldr	r3, [r3, #32]
 801814c:	4798      	blx	r3
 801814e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018152:	e884 0003 	stmia.w	r4, {r0, r1}
 8018156:	4620      	mov	r0, r4
 8018158:	b003      	add	sp, #12
 801815a:	bd30      	pop	{r4, r5, pc}

0801815c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801815c:	b513      	push	{r0, r1, r4, lr}
 801815e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8018162:	4604      	mov	r4, r0
 8018164:	3301      	adds	r3, #1
 8018166:	d109      	bne.n	801817c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8018168:	4601      	mov	r1, r0
 801816a:	4668      	mov	r0, sp
 801816c:	f7ff fd5d 	bl	8017c2a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018170:	f8bd 3000 	ldrh.w	r3, [sp]
 8018174:	8423      	strh	r3, [r4, #32]
 8018176:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801817a:	8463      	strh	r3, [r4, #34]	; 0x22
 801817c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8018180:	b002      	add	sp, #8
 8018182:	bd10      	pop	{r4, pc}

08018184 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8018184:	b513      	push	{r0, r1, r4, lr}
 8018186:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801818a:	4604      	mov	r4, r0
 801818c:	3301      	adds	r3, #1
 801818e:	d109      	bne.n	80181a4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8018190:	4601      	mov	r1, r0
 8018192:	4668      	mov	r0, sp
 8018194:	f7ff fd49 	bl	8017c2a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018198:	f8bd 3000 	ldrh.w	r3, [sp]
 801819c:	8423      	strh	r3, [r4, #32]
 801819e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80181a2:	8463      	strh	r3, [r4, #34]	; 0x22
 80181a4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80181a8:	b002      	add	sp, #8
 80181aa:	bd10      	pop	{r4, pc}

080181ac <_ZN8touchgfx6ScreenC1Ev>:
 80181ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181ae:	4605      	mov	r5, r0
 80181b0:	4b17      	ldr	r3, [pc, #92]	; (8018210 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80181b2:	2200      	movs	r2, #0
 80181b4:	4917      	ldr	r1, [pc, #92]	; (8018214 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80181b6:	f845 3b04 	str.w	r3, [r5], #4
 80181ba:	2301      	movs	r3, #1
 80181bc:	8102      	strh	r2, [r0, #8]
 80181be:	4604      	mov	r4, r0
 80181c0:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 80181c4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80181c8:	4b13      	ldr	r3, [pc, #76]	; (8018218 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80181ca:	8142      	strh	r2, [r0, #10]
 80181cc:	f9b3 7000 	ldrsh.w	r7, [r3]
 80181d0:	4b12      	ldr	r3, [pc, #72]	; (801821c <_ZN8touchgfx6ScreenC1Ev+0x70>)
 80181d2:	8182      	strh	r2, [r0, #12]
 80181d4:	81c2      	strh	r2, [r0, #14]
 80181d6:	8202      	strh	r2, [r0, #16]
 80181d8:	8242      	strh	r2, [r0, #18]
 80181da:	8282      	strh	r2, [r0, #20]
 80181dc:	82c2      	strh	r2, [r0, #22]
 80181de:	6202      	str	r2, [r0, #32]
 80181e0:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 80181e4:	6342      	str	r2, [r0, #52]	; 0x34
 80181e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80181ea:	6041      	str	r1, [r0, #4]
 80181ec:	4611      	mov	r1, r2
 80181ee:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80181f2:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80181f6:	4628      	mov	r0, r5
 80181f8:	f7f3 ff98 	bl	800c12c <_ZN8touchgfx8Drawable5setXYEss>
 80181fc:	4639      	mov	r1, r7
 80181fe:	4628      	mov	r0, r5
 8018200:	f7f3 ffb2 	bl	800c168 <_ZN8touchgfx8Drawable8setWidthEs>
 8018204:	4628      	mov	r0, r5
 8018206:	4631      	mov	r1, r6
 8018208:	f7f3 ffbd 	bl	800c186 <_ZN8touchgfx8Drawable9setHeightEs>
 801820c:	4620      	mov	r0, r4
 801820e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018210:	08028538 	.word	0x08028538
 8018214:	08026c84 	.word	0x08026c84
 8018218:	2000b1a0 	.word	0x2000b1a0
 801821c:	2000b1a2 	.word	0x2000b1a2

08018220 <_ZN8touchgfx6Screen4drawEv>:
 8018220:	4b09      	ldr	r3, [pc, #36]	; (8018248 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8018222:	b507      	push	{r0, r1, r2, lr}
 8018224:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018228:	2100      	movs	r1, #0
 801822a:	4b08      	ldr	r3, [pc, #32]	; (801824c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801822c:	9100      	str	r1, [sp, #0]
 801822e:	4669      	mov	r1, sp
 8018230:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018234:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018238:	f8ad 3006 	strh.w	r3, [sp, #6]
 801823c:	6803      	ldr	r3, [r0, #0]
 801823e:	689b      	ldr	r3, [r3, #8]
 8018240:	4798      	blx	r3
 8018242:	b003      	add	sp, #12
 8018244:	f85d fb04 	ldr.w	pc, [sp], #4
 8018248:	2000b1a0 	.word	0x2000b1a0
 801824c:	2000b1a2 	.word	0x2000b1a2

08018250 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8018250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018254:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8018258:	b089      	sub	sp, #36	; 0x24
 801825a:	4680      	mov	r8, r0
 801825c:	460c      	mov	r4, r1
 801825e:	4615      	mov	r5, r2
 8018260:	b16b      	cbz	r3, 801827e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8018262:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8018266:	b153      	cbz	r3, 801827e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8018268:	4628      	mov	r0, r5
 801826a:	f7ff ff5b 	bl	8018124 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801826e:	4621      	mov	r1, r4
 8018270:	f7fe ff34 	bl	80170dc <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018274:	69eb      	ldr	r3, [r5, #28]
 8018276:	b928      	cbnz	r0, 8018284 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 8018278:	461d      	mov	r5, r3
 801827a:	2b00      	cmp	r3, #0
 801827c:	d1f4      	bne.n	8018268 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801827e:	b009      	add	sp, #36	; 0x24
 8018280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018284:	ae04      	add	r6, sp, #16
 8018286:	2b00      	cmp	r3, #0
 8018288:	d051      	beq.n	801832e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801828a:	682b      	ldr	r3, [r5, #0]
 801828c:	4629      	mov	r1, r5
 801828e:	a802      	add	r0, sp, #8
 8018290:	68db      	ldr	r3, [r3, #12]
 8018292:	4798      	blx	r3
 8018294:	4628      	mov	r0, r5
 8018296:	f7ff ff61 	bl	801815c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801829a:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801829e:	4407      	add	r7, r0
 80182a0:	4628      	mov	r0, r5
 80182a2:	f7ff ff6f 	bl	8018184 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80182a6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80182aa:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80182ae:	b23f      	sxth	r7, r7
 80182b0:	4418      	add	r0, r3
 80182b2:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80182b6:	4621      	mov	r1, r4
 80182b8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80182bc:	f8ad 0012 	strh.w	r0, [sp, #18]
 80182c0:	4630      	mov	r0, r6
 80182c2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80182c6:	f8ad 7010 	strh.w	r7, [sp, #16]
 80182ca:	f7fb f9c3 	bl	8013654 <_ZN8touchgfx4RectaNERKS0_>
 80182ce:	4628      	mov	r0, r5
 80182d0:	f7ff ff28 	bl	8018124 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80182d4:	ab06      	add	r3, sp, #24
 80182d6:	4602      	mov	r2, r0
 80182d8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80182dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80182e0:	4611      	mov	r1, r2
 80182e2:	4618      	mov	r0, r3
 80182e4:	f7fb f9b6 	bl	8013654 <_ZN8touchgfx4RectaNERKS0_>
 80182e8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80182ec:	f9b4 1000 	ldrsh.w	r1, [r4]
 80182f0:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80182f4:	4299      	cmp	r1, r3
 80182f6:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80182fa:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80182fe:	d10b      	bne.n	8018318 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8018300:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018304:	4552      	cmp	r2, sl
 8018306:	d107      	bne.n	8018318 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8018308:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801830c:	455a      	cmp	r2, fp
 801830e:	d103      	bne.n	8018318 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8018310:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018314:	454a      	cmp	r2, r9
 8018316:	d00a      	beq.n	801832e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8018318:	f1bb 0f00 	cmp.w	fp, #0
 801831c:	d002      	beq.n	8018324 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 801831e:	f1b9 0f00 	cmp.w	r9, #0
 8018322:	d12e      	bne.n	8018382 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 8018324:	69ea      	ldr	r2, [r5, #28]
 8018326:	4621      	mov	r1, r4
 8018328:	4640      	mov	r0, r8
 801832a:	f7ff ff91 	bl	8018250 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801832e:	4628      	mov	r0, r5
 8018330:	f7ff fef8 	bl	8018124 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018334:	6861      	ldr	r1, [r4, #4]
 8018336:	4602      	mov	r2, r0
 8018338:	4633      	mov	r3, r6
 801833a:	6820      	ldr	r0, [r4, #0]
 801833c:	c303      	stmia	r3!, {r0, r1}
 801833e:	4611      	mov	r1, r2
 8018340:	4630      	mov	r0, r6
 8018342:	f7fb f987 	bl	8013654 <_ZN8touchgfx4RectaNERKS0_>
 8018346:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801834a:	2b00      	cmp	r3, #0
 801834c:	d097      	beq.n	801827e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801834e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018352:	2b00      	cmp	r3, #0
 8018354:	d093      	beq.n	801827e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8018356:	4628      	mov	r0, r5
 8018358:	f7ff ff00 	bl	801815c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801835c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8018360:	1a18      	subs	r0, r3, r0
 8018362:	f8ad 0010 	strh.w	r0, [sp, #16]
 8018366:	4628      	mov	r0, r5
 8018368:	f7ff ff0c 	bl	8018184 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801836c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018370:	4631      	mov	r1, r6
 8018372:	1a18      	subs	r0, r3, r0
 8018374:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018378:	4628      	mov	r0, r5
 801837a:	682b      	ldr	r3, [r5, #0]
 801837c:	689b      	ldr	r3, [r3, #8]
 801837e:	4798      	blx	r3
 8018380:	e77d      	b.n	801827e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8018382:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018386:	fa1f f08a 	uxth.w	r0, sl
 801838a:	4552      	cmp	r2, sl
 801838c:	9000      	str	r0, [sp, #0]
 801838e:	da12      	bge.n	80183b6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 8018390:	9301      	str	r3, [sp, #4]
 8018392:	9b00      	ldr	r3, [sp, #0]
 8018394:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018398:	f8ad 2012 	strh.w	r2, [sp, #18]
 801839c:	1a9a      	subs	r2, r3, r2
 801839e:	f8ad 1010 	strh.w	r1, [sp, #16]
 80183a2:	4631      	mov	r1, r6
 80183a4:	f8ad 0014 	strh.w	r0, [sp, #20]
 80183a8:	4640      	mov	r0, r8
 80183aa:	f8ad 2016 	strh.w	r2, [sp, #22]
 80183ae:	69ea      	ldr	r2, [r5, #28]
 80183b0:	f7ff ff4e 	bl	8018250 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80183b4:	9b01      	ldr	r3, [sp, #4]
 80183b6:	f9b4 2000 	ldrsh.w	r2, [r4]
 80183ba:	b29f      	uxth	r7, r3
 80183bc:	429a      	cmp	r2, r3
 80183be:	da0d      	bge.n	80183dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 80183c0:	f8ad 2010 	strh.w	r2, [sp, #16]
 80183c4:	1aba      	subs	r2, r7, r2
 80183c6:	f8ad a012 	strh.w	sl, [sp, #18]
 80183ca:	4631      	mov	r1, r6
 80183cc:	f8ad 2014 	strh.w	r2, [sp, #20]
 80183d0:	4640      	mov	r0, r8
 80183d2:	f8ad 9016 	strh.w	r9, [sp, #22]
 80183d6:	69ea      	ldr	r2, [r5, #28]
 80183d8:	f7ff ff3a 	bl	8018250 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80183dc:	8822      	ldrh	r2, [r4, #0]
 80183de:	445f      	add	r7, fp
 80183e0:	88a3      	ldrh	r3, [r4, #4]
 80183e2:	b2bf      	uxth	r7, r7
 80183e4:	4413      	add	r3, r2
 80183e6:	b23a      	sxth	r2, r7
 80183e8:	b29b      	uxth	r3, r3
 80183ea:	b219      	sxth	r1, r3
 80183ec:	4291      	cmp	r1, r2
 80183ee:	dd0d      	ble.n	801840c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 80183f0:	1bdb      	subs	r3, r3, r7
 80183f2:	f8ad 2010 	strh.w	r2, [sp, #16]
 80183f6:	f8ad a012 	strh.w	sl, [sp, #18]
 80183fa:	4631      	mov	r1, r6
 80183fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018400:	4640      	mov	r0, r8
 8018402:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018406:	69ea      	ldr	r2, [r5, #28]
 8018408:	f7ff ff22 	bl	8018250 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801840c:	88e2      	ldrh	r2, [r4, #6]
 801840e:	8863      	ldrh	r3, [r4, #2]
 8018410:	4413      	add	r3, r2
 8018412:	9a00      	ldr	r2, [sp, #0]
 8018414:	444a      	add	r2, r9
 8018416:	b29b      	uxth	r3, r3
 8018418:	fa1f f982 	uxth.w	r9, r2
 801841c:	b219      	sxth	r1, r3
 801841e:	fa0f f289 	sxth.w	r2, r9
 8018422:	428a      	cmp	r2, r1
 8018424:	da83      	bge.n	801832e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8018426:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801842a:	eba3 0309 	sub.w	r3, r3, r9
 801842e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018432:	f8ad 1014 	strh.w	r1, [sp, #20]
 8018436:	4631      	mov	r1, r6
 8018438:	f8ad 0010 	strh.w	r0, [sp, #16]
 801843c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018440:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018444:	69ea      	ldr	r2, [r5, #28]
 8018446:	e76f      	b.n	8018328 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

08018448 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8018448:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801844a:	2300      	movs	r3, #0
 801844c:	aa02      	add	r2, sp, #8
 801844e:	4604      	mov	r4, r0
 8018450:	3004      	adds	r0, #4
 8018452:	f842 3d04 	str.w	r3, [r2, #-4]!
 8018456:	460d      	mov	r5, r1
 8018458:	f7fb f9d3 	bl	8013802 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801845c:	9a01      	ldr	r2, [sp, #4]
 801845e:	b11a      	cbz	r2, 8018468 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 8018460:	4629      	mov	r1, r5
 8018462:	4620      	mov	r0, r4
 8018464:	f7ff fef4 	bl	8018250 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018468:	b003      	add	sp, #12
 801846a:	bd30      	pop	{r4, r5, pc}

0801846c <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801846c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801846e:	4602      	mov	r2, r0
 8018470:	4604      	mov	r4, r0
 8018472:	460d      	mov	r5, r1
 8018474:	466b      	mov	r3, sp
 8018476:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801847a:	6851      	ldr	r1, [r2, #4]
 801847c:	c303      	stmia	r3!, {r0, r1}
 801847e:	4629      	mov	r1, r5
 8018480:	4668      	mov	r0, sp
 8018482:	f7fb f8e7 	bl	8013654 <_ZN8touchgfx4RectaNERKS0_>
 8018486:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801848a:	4669      	mov	r1, sp
 801848c:	b123      	cbz	r3, 8018498 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801848e:	4620      	mov	r0, r4
 8018490:	f7ff ffda 	bl	8018448 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8018494:	b003      	add	sp, #12
 8018496:	bd30      	pop	{r4, r5, pc}
 8018498:	1d20      	adds	r0, r4, #4
 801849a:	f7fb f979 	bl	8013790 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801849e:	e7f9      	b.n	8018494 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

080184a0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80184a0:	460b      	mov	r3, r1
 80184a2:	680a      	ldr	r2, [r1, #0]
 80184a4:	1d01      	adds	r1, r0, #4
 80184a6:	6952      	ldr	r2, [r2, #20]
 80184a8:	4618      	mov	r0, r3
 80184aa:	4710      	bx	r2

080184ac <_ZN8touchgfx15EasingEquations16roundRespectSignEf>:
 80184ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80184b0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80184b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184b8:	bfcc      	ite	gt
 80184ba:	ee30 0a27 	vaddgt.f32	s0, s0, s15
 80184be:	ee30 0a67 	vsuble.f32	s0, s0, s15
 80184c2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80184c6:	ee10 3a10 	vmov	r3, s0
 80184ca:	b218      	sxth	r0, r3
 80184cc:	4770      	bx	lr
	...

080184d0 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>:
 80184d0:	b510      	push	{r4, lr}
 80184d2:	4298      	cmp	r0, r3
 80184d4:	eb01 0402 	add.w	r4, r1, r2
 80184d8:	b224      	sxth	r4, r4
 80184da:	d225      	bcs.n	8018528 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x58>
 80184dc:	b323      	cbz	r3, 8018528 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x58>
 80184de:	ee07 0a90 	vmov	s15, r0
 80184e2:	ee06 1a10 	vmov	s12, r1
 80184e6:	ed9f 5a11 	vldr	s10, [pc, #68]	; 801852c <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x5c>
 80184ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80184ee:	ee07 3a90 	vmov	s15, r3
 80184f2:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 80184f6:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8018530 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x60>
 80184fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80184fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018502:	ee06 2a90 	vmov	s13, r2
 8018506:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801850a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801850e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018512:	eea7 6a85 	vfma.f32	s12, s15, s10
 8018516:	ee67 5aa7 	vmul.f32	s11, s15, s15
 801851a:	eea5 7a86 	vfma.f32	s14, s11, s12
 801851e:	eea6 0a87 	vfma.f32	s0, s13, s14
 8018522:	f7ff ffc3 	bl	80184ac <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 8018526:	4604      	mov	r4, r0
 8018528:	4620      	mov	r0, r4
 801852a:	bd10      	pop	{r4, pc}
 801852c:	402ce6b0 	.word	0x402ce6b0
 8018530:	3fd9cd60 	.word	0x3fd9cd60

08018534 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 8018534:	b510      	push	{r4, lr}
 8018536:	4298      	cmp	r0, r3
 8018538:	eb01 0402 	add.w	r4, r1, r2
 801853c:	b224      	sxth	r4, r4
 801853e:	d21f      	bcs.n	8018580 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 8018540:	b1f3      	cbz	r3, 8018580 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 8018542:	ee07 0a90 	vmov	s15, r0
 8018546:	ee06 1a10 	vmov	s12, r1
 801854a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801854e:	ee07 3a90 	vmov	s15, r3
 8018552:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 8018556:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801855a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801855e:	ee06 2a90 	vmov	s13, r2
 8018562:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018566:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801856a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801856e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8018572:	eea6 7a27 	vfma.f32	s14, s12, s15
 8018576:	eea6 0a87 	vfma.f32	s0, s13, s14
 801857a:	f7ff ff97 	bl	80184ac <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801857e:	4604      	mov	r4, r0
 8018580:	4620      	mov	r0, r4
 8018582:	bd10      	pop	{r4, pc}

08018584 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 8018584:	b510      	push	{r4, lr}
 8018586:	4298      	cmp	r0, r3
 8018588:	eb01 0402 	add.w	r4, r1, r2
 801858c:	b224      	sxth	r4, r4
 801858e:	d219      	bcs.n	80185c4 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x40>
 8018590:	b1c3      	cbz	r3, 80185c4 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x40>
 8018592:	ee07 2a90 	vmov	s15, r2
 8018596:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801859a:	ee07 0a90 	vmov	s15, r0
 801859e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80185a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80185a6:	ee07 3a10 	vmov	s14, r3
 80185aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80185ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80185b2:	ee07 1a90 	vmov	s15, r1
 80185b6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80185ba:	ee36 0a80 	vadd.f32	s0, s13, s0
 80185be:	f7ff ff75 	bl	80184ac <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 80185c2:	4604      	mov	r4, r0
 80185c4:	4620      	mov	r0, r4
 80185c6:	bd10      	pop	{r4, pc}

080185c8 <_ZN8touchgfx15EasingEquations13linearEaseOutEtsst>:
 80185c8:	f7ff bfdc 	b.w	8018584 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>

080185cc <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 80185cc:	f011 0f40 	tst.w	r1, #64	; 0x40
 80185d0:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 80185d4:	4b03      	ldr	r3, [pc, #12]	; (80185e4 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 80185d6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80185da:	bf08      	it	eq
 80185dc:	2300      	moveq	r3, #0
 80185de:	4308      	orrs	r0, r1
 80185e0:	4318      	orrs	r0, r3
 80185e2:	4770      	bx	lr
 80185e4:	fffffe00 	.word	0xfffffe00

080185e8 <_ZN8touchgfx9GlyphNode6setTopEs>:
 80185e8:	7b43      	ldrb	r3, [r0, #13]
 80185ea:	7201      	strb	r1, [r0, #8]
 80185ec:	b289      	uxth	r1, r1
 80185ee:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80185f2:	05ca      	lsls	r2, r1, #23
 80185f4:	bf48      	it	mi
 80185f6:	f043 0320 	orrmi.w	r3, r3, #32
 80185fa:	7343      	strb	r3, [r0, #13]
 80185fc:	058b      	lsls	r3, r1, #22
 80185fe:	bf42      	ittt	mi
 8018600:	7b43      	ldrbmi	r3, [r0, #13]
 8018602:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8018606:	7343      	strbmi	r3, [r0, #13]
 8018608:	4770      	bx	lr

0801860a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801860a:	b530      	push	{r4, r5, lr}
 801860c:	2500      	movs	r5, #0
 801860e:	2401      	movs	r4, #1
 8018610:	6843      	ldr	r3, [r0, #4]
 8018612:	b913      	cbnz	r3, 801861a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8018614:	6803      	ldr	r3, [r0, #0]
 8018616:	b1f3      	cbz	r3, 8018656 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8018618:	6043      	str	r3, [r0, #4]
 801861a:	7c03      	ldrb	r3, [r0, #16]
 801861c:	b143      	cbz	r3, 8018630 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801861e:	68c3      	ldr	r3, [r0, #12]
 8018620:	b12b      	cbz	r3, 801862e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018622:	881a      	ldrh	r2, [r3, #0]
 8018624:	b11a      	cbz	r2, 801862e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018626:	1c9a      	adds	r2, r3, #2
 8018628:	60c2      	str	r2, [r0, #12]
 801862a:	8818      	ldrh	r0, [r3, #0]
 801862c:	bd30      	pop	{r4, r5, pc}
 801862e:	7405      	strb	r5, [r0, #16]
 8018630:	6843      	ldr	r3, [r0, #4]
 8018632:	8819      	ldrh	r1, [r3, #0]
 8018634:	b179      	cbz	r1, 8018656 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8018636:	1c9a      	adds	r2, r3, #2
 8018638:	2902      	cmp	r1, #2
 801863a:	6042      	str	r2, [r0, #4]
 801863c:	d1f5      	bne.n	801862a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801863e:	6883      	ldr	r3, [r0, #8]
 8018640:	1d1a      	adds	r2, r3, #4
 8018642:	6082      	str	r2, [r0, #8]
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	60c3      	str	r3, [r0, #12]
 8018648:	2b00      	cmp	r3, #0
 801864a:	d0e1      	beq.n	8018610 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801864c:	881b      	ldrh	r3, [r3, #0]
 801864e:	2b00      	cmp	r3, #0
 8018650:	d0de      	beq.n	8018610 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018652:	7404      	strb	r4, [r0, #16]
 8018654:	e7dc      	b.n	8018610 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018656:	2000      	movs	r0, #0
 8018658:	e7e8      	b.n	801862c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801865a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801865a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801865c:	4605      	mov	r5, r0
 801865e:	4608      	mov	r0, r1
 8018660:	b1f1      	cbz	r1, 80186a0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8018662:	f105 0440 	add.w	r4, r5, #64	; 0x40
 8018666:	460b      	mov	r3, r1
 8018668:	f101 0708 	add.w	r7, r1, #8
 801866c:	4622      	mov	r2, r4
 801866e:	6818      	ldr	r0, [r3, #0]
 8018670:	3308      	adds	r3, #8
 8018672:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018676:	4626      	mov	r6, r4
 8018678:	42bb      	cmp	r3, r7
 801867a:	c603      	stmia	r6!, {r0, r1}
 801867c:	4634      	mov	r4, r6
 801867e:	d1f6      	bne.n	801866e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8018680:	6818      	ldr	r0, [r3, #0]
 8018682:	6030      	str	r0, [r6, #0]
 8018684:	4610      	mov	r0, r2
 8018686:	889b      	ldrh	r3, [r3, #4]
 8018688:	80b3      	strh	r3, [r6, #4]
 801868a:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801868e:	015b      	lsls	r3, r3, #5
 8018690:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018694:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8018698:	430b      	orrs	r3, r1
 801869a:	425b      	negs	r3, r3
 801869c:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 80186a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080186a2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80186a2:	b538      	push	{r3, r4, r5, lr}
 80186a4:	460c      	mov	r4, r1
 80186a6:	6811      	ldr	r1, [r2, #0]
 80186a8:	4610      	mov	r0, r2
 80186aa:	68cd      	ldr	r5, [r1, #12]
 80186ac:	4619      	mov	r1, r3
 80186ae:	47a8      	blx	r5
 80186b0:	2800      	cmp	r0, #0
 80186b2:	bf08      	it	eq
 80186b4:	4620      	moveq	r0, r4
 80186b6:	bd38      	pop	{r3, r4, r5, pc}

080186b8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80186b8:	b570      	push	{r4, r5, r6, lr}
 80186ba:	8810      	ldrh	r0, [r2, #0]
 80186bc:	4298      	cmp	r0, r3
 80186be:	d817      	bhi.n	80186f0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80186c0:	1e48      	subs	r0, r1, #1
 80186c2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80186c6:	4298      	cmp	r0, r3
 80186c8:	d312      	bcc.n	80186f0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80186ca:	2400      	movs	r4, #0
 80186cc:	428c      	cmp	r4, r1
 80186ce:	d20f      	bcs.n	80186f0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80186d0:	1860      	adds	r0, r4, r1
 80186d2:	1040      	asrs	r0, r0, #1
 80186d4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80186d8:	0085      	lsls	r5, r0, #2
 80186da:	42b3      	cmp	r3, r6
 80186dc:	d902      	bls.n	80186e4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80186de:	3001      	adds	r0, #1
 80186e0:	b284      	uxth	r4, r0
 80186e2:	e7f3      	b.n	80186cc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80186e4:	d102      	bne.n	80186ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 80186e6:	442a      	add	r2, r5
 80186e8:	8850      	ldrh	r0, [r2, #2]
 80186ea:	bd70      	pop	{r4, r5, r6, pc}
 80186ec:	b281      	uxth	r1, r0
 80186ee:	e7ed      	b.n	80186cc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80186f0:	2000      	movs	r0, #0
 80186f2:	e7fa      	b.n	80186ea <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

080186f4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 80186f4:	b510      	push	{r4, lr}
 80186f6:	8ac3      	ldrh	r3, [r0, #22]
 80186f8:	428b      	cmp	r3, r1
 80186fa:	d805      	bhi.n	8018708 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 80186fc:	4b07      	ldr	r3, [pc, #28]	; (801871c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 80186fe:	21fd      	movs	r1, #253	; 0xfd
 8018700:	4a07      	ldr	r2, [pc, #28]	; (8018720 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 8018702:	4808      	ldr	r0, [pc, #32]	; (8018724 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 8018704:	f00a fcce 	bl	80230a4 <__assert_func>
 8018708:	8a83      	ldrh	r3, [r0, #20]
 801870a:	240a      	movs	r4, #10
 801870c:	4419      	add	r1, r3
 801870e:	fbb1 f3f4 	udiv	r3, r1, r4
 8018712:	fb04 1113 	mls	r1, r4, r3, r1
 8018716:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801871a:	bd10      	pop	{r4, pc}
 801871c:	08028585 	.word	0x08028585
 8018720:	080289b4 	.word	0x080289b4
 8018724:	08028593 	.word	0x08028593

08018728 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 8018728:	b508      	push	{r3, lr}
 801872a:	8ac3      	ldrh	r3, [r0, #22]
 801872c:	428b      	cmp	r3, r1
 801872e:	d805      	bhi.n	801873c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 8018730:	4b07      	ldr	r3, [pc, #28]	; (8018750 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 8018732:	21d3      	movs	r1, #211	; 0xd3
 8018734:	4a07      	ldr	r2, [pc, #28]	; (8018754 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 8018736:	4808      	ldr	r0, [pc, #32]	; (8018758 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 8018738:	f00a fcb4 	bl	80230a4 <__assert_func>
 801873c:	8a83      	ldrh	r3, [r0, #20]
 801873e:	220a      	movs	r2, #10
 8018740:	4419      	add	r1, r3
 8018742:	fbb1 f3f2 	udiv	r3, r1, r2
 8018746:	fb02 1113 	mls	r1, r2, r3, r1
 801874a:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801874e:	bd08      	pop	{r3, pc}
 8018750:	08028585 	.word	0x08028585
 8018754:	08028704 	.word	0x08028704
 8018758:	08028593 	.word	0x08028593

0801875c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801875c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018760:	4604      	mov	r4, r0
 8018762:	4688      	mov	r8, r1
 8018764:	4615      	mov	r5, r2
 8018766:	b94a      	cbnz	r2, 801877c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 8018768:	4691      	mov	r9, r2
 801876a:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801876e:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 8018772:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8018776:	4648      	mov	r0, r9
 8018778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801877c:	f100 0640 	add.w	r6, r0, #64	; 0x40
 8018780:	8892      	ldrh	r2, [r2, #4]
 8018782:	462b      	mov	r3, r5
 8018784:	f105 0c08 	add.w	ip, r5, #8
 8018788:	46b3      	mov	fp, r6
 801878a:	6818      	ldr	r0, [r3, #0]
 801878c:	3308      	adds	r3, #8
 801878e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018792:	4637      	mov	r7, r6
 8018794:	4563      	cmp	r3, ip
 8018796:	c703      	stmia	r7!, {r0, r1}
 8018798:	463e      	mov	r6, r7
 801879a:	d1f6      	bne.n	801878a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 801879c:	6818      	ldr	r0, [r3, #0]
 801879e:	46d9      	mov	r9, fp
 80187a0:	6038      	str	r0, [r7, #0]
 80187a2:	889b      	ldrh	r3, [r3, #4]
 80187a4:	80bb      	strh	r3, [r7, #4]
 80187a6:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 80187aa:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 80187ae:	18d3      	adds	r3, r2, r3
 80187b0:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 80187b4:	b298      	uxth	r0, r3
 80187b6:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 80187ba:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 80187be:	281d      	cmp	r0, #29
 80187c0:	ea4a 0a01 	orr.w	sl, sl, r1
 80187c4:	fa1f f68a 	uxth.w	r6, sl
 80187c8:	d842      	bhi.n	8018850 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 80187ca:	2301      	movs	r3, #1
 80187cc:	4950      	ldr	r1, [pc, #320]	; (8018910 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 80187ce:	ea4f 0aea 	mov.w	sl, sl, asr #3
 80187d2:	4083      	lsls	r3, r0
 80187d4:	420b      	tst	r3, r1
 80187d6:	d114      	bne.n	8018802 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 80187d8:	f413 7f60 	tst.w	r3, #896	; 0x380
 80187dc:	d03c      	beq.n	8018858 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 80187de:	fa1f fa8a 	uxth.w	sl, sl
 80187e2:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 80187e6:	4658      	mov	r0, fp
 80187e8:	eba1 010a 	sub.w	r1, r1, sl
 80187ec:	b209      	sxth	r1, r1
 80187ee:	f7ff fefb 	bl	80185e8 <_ZN8touchgfx9GlyphNode6setTopEs>
 80187f2:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 80187f6:	1b86      	subs	r6, r0, r6
 80187f8:	eba6 0a0a 	sub.w	sl, r6, sl
 80187fc:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 8018800:	e7b9      	b.n	8018776 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8018802:	2100      	movs	r1, #0
 8018804:	f104 001a 	add.w	r0, r4, #26
 8018808:	f7ff ff8e 	bl	8018728 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801880c:	f640 6333 	movw	r3, #3635	; 0xe33
 8018810:	4601      	mov	r1, r0
 8018812:	4298      	cmp	r0, r3
 8018814:	d10a      	bne.n	801882c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 8018816:	f8d8 3000 	ldr.w	r3, [r8]
 801881a:	4640      	mov	r0, r8
 801881c:	68db      	ldr	r3, [r3, #12]
 801881e:	4798      	blx	r3
 8018820:	7b41      	ldrb	r1, [r0, #13]
 8018822:	7a00      	ldrb	r0, [r0, #8]
 8018824:	f7ff fed2 	bl	80185cc <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8018828:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801882c:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 8018830:	4658      	mov	r0, fp
 8018832:	4431      	add	r1, r6
 8018834:	4451      	add	r1, sl
 8018836:	b209      	sxth	r1, r1
 8018838:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 801883c:	f7ff fed4 	bl	80185e8 <_ZN8touchgfx9GlyphNode6setTopEs>
 8018840:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8018844:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8018848:	1a9b      	subs	r3, r3, r2
 801884a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801884e:	e792      	b.n	8018776 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8018850:	f640 631b 	movw	r3, #3611	; 0xe1b
 8018854:	429a      	cmp	r2, r3
 8018856:	d005      	beq.n	8018864 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 8018858:	f022 0302 	bic.w	r3, r2, #2
 801885c:	f640 611d 	movw	r1, #3613	; 0xe1d
 8018860:	428b      	cmp	r3, r1
 8018862:	d119      	bne.n	8018898 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 8018864:	1e53      	subs	r3, r2, #1
 8018866:	4629      	mov	r1, r5
 8018868:	4642      	mov	r2, r8
 801886a:	4620      	mov	r0, r4
 801886c:	b29b      	uxth	r3, r3
 801886e:	f7ff ff18 	bl	80186a2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018872:	7b41      	ldrb	r1, [r0, #13]
 8018874:	7a00      	ldrb	r0, [r0, #8]
 8018876:	f7ff fea9 	bl	80185cc <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801887a:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801887e:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8018882:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018886:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801888a:	4313      	orrs	r3, r2
 801888c:	115a      	asrs	r2, r3, #5
 801888e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8018892:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8018896:	e02e      	b.n	80188f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8018898:	4639      	mov	r1, r7
 801889a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801889e:	f7ff fe95 	bl	80185cc <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 80188a2:	f640 6109 	movw	r1, #3593	; 0xe09
 80188a6:	f022 0310 	bic.w	r3, r2, #16
 80188aa:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 80188ae:	428b      	cmp	r3, r1
 80188b0:	d003      	beq.n	80188ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 80188b2:	f640 6313 	movw	r3, #3603	; 0xe13
 80188b6:	429a      	cmp	r2, r3
 80188b8:	d127      	bne.n	801890a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 80188ba:	b27f      	sxtb	r7, r7
 80188bc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80188c0:	4629      	mov	r1, r5
 80188c2:	4620      	mov	r0, r4
 80188c4:	f407 7780 	and.w	r7, r7, #256	; 0x100
 80188c8:	431f      	orrs	r7, r3
 80188ca:	f640 6313 	movw	r3, #3603	; 0xe13
 80188ce:	429a      	cmp	r2, r3
 80188d0:	bf14      	ite	ne
 80188d2:	f102 33ff 	addne.w	r3, r2, #4294967295
 80188d6:	f640 630c 	movweq	r3, #3596	; 0xe0c
 80188da:	4642      	mov	r2, r8
 80188dc:	bf18      	it	ne
 80188de:	b29b      	uxthne	r3, r3
 80188e0:	f7ff fedf 	bl	80186a2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80188e4:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80188e8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80188ec:	7a83      	ldrb	r3, [r0, #10]
 80188ee:	4313      	orrs	r3, r2
 80188f0:	1aff      	subs	r7, r7, r3
 80188f2:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 80188f6:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 80188fa:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80188fe:	f7ff fe65 	bl	80185cc <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8018902:	1b80      	subs	r0, r0, r6
 8018904:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 8018908:	e735      	b.n	8018776 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801890a:	2300      	movs	r3, #0
 801890c:	e7c1      	b.n	8018892 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801890e:	bf00      	nop
 8018910:	3fc00079 	.word	0x3fc00079

08018914 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8018914:	3a01      	subs	r2, #1
 8018916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801891a:	b292      	uxth	r2, r2
 801891c:	460c      	mov	r4, r1
 801891e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8018922:	42b2      	cmp	r2, r6
 8018924:	d018      	beq.n	8018958 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 8018926:	8b01      	ldrh	r1, [r0, #24]
 8018928:	f834 5b02 	ldrh.w	r5, [r4], #2
 801892c:	4291      	cmp	r1, r2
 801892e:	d805      	bhi.n	801893c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 8018930:	4b13      	ldr	r3, [pc, #76]	; (8018980 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 8018932:	21d3      	movs	r1, #211	; 0xd3
 8018934:	4a13      	ldr	r2, [pc, #76]	; (8018984 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 8018936:	4814      	ldr	r0, [pc, #80]	; (8018988 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 8018938:	f00a fbb4 	bl	80230a4 <__assert_func>
 801893c:	8ac1      	ldrh	r1, [r0, #22]
 801893e:	4411      	add	r1, r2
 8018940:	3a01      	subs	r2, #1
 8018942:	f001 0101 	and.w	r1, r1, #1
 8018946:	b292      	uxth	r2, r2
 8018948:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801894c:	8a49      	ldrh	r1, [r1, #18]
 801894e:	428d      	cmp	r5, r1
 8018950:	d0e7      	beq.n	8018922 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 8018952:	2000      	movs	r0, #0
 8018954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018958:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801895c:	2600      	movs	r6, #0
 801895e:	f100 051a 	add.w	r5, r0, #26
 8018962:	441f      	add	r7, r3
 8018964:	b2b1      	uxth	r1, r6
 8018966:	42b9      	cmp	r1, r7
 8018968:	da08      	bge.n	801897c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 801896a:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 801896e:	4628      	mov	r0, r5
 8018970:	f7ff feda 	bl	8018728 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8018974:	3601      	adds	r6, #1
 8018976:	4540      	cmp	r0, r8
 8018978:	d0f4      	beq.n	8018964 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 801897a:	e7ea      	b.n	8018952 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801897c:	2001      	movs	r0, #1
 801897e:	e7e9      	b.n	8018954 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8018980:	08028585 	.word	0x08028585
 8018984:	08028b14 	.word	0x08028b14
 8018988:	08028593 	.word	0x08028593

0801898c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801898c:	b538      	push	{r3, r4, r5, lr}
 801898e:	8ac3      	ldrh	r3, [r0, #22]
 8018990:	428b      	cmp	r3, r1
 8018992:	d205      	bcs.n	80189a0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 8018994:	4b08      	ldr	r3, [pc, #32]	; (80189b8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 8018996:	21d8      	movs	r1, #216	; 0xd8
 8018998:	4a08      	ldr	r2, [pc, #32]	; (80189bc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801899a:	4809      	ldr	r0, [pc, #36]	; (80189c0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801899c:	f00a fb82 	bl	80230a4 <__assert_func>
 80189a0:	8a82      	ldrh	r2, [r0, #20]
 80189a2:	250a      	movs	r5, #10
 80189a4:	1a5b      	subs	r3, r3, r1
 80189a6:	440a      	add	r2, r1
 80189a8:	82c3      	strh	r3, [r0, #22]
 80189aa:	fbb2 f4f5 	udiv	r4, r2, r5
 80189ae:	fb05 2214 	mls	r2, r5, r4, r2
 80189b2:	8282      	strh	r2, [r0, #20]
 80189b4:	bd38      	pop	{r3, r4, r5, pc}
 80189b6:	bf00      	nop
 80189b8:	08028579 	.word	0x08028579
 80189bc:	08028930 	.word	0x08028930
 80189c0:	08028593 	.word	0x08028593

080189c4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 80189c4:	b538      	push	{r3, r4, r5, lr}
 80189c6:	8ac3      	ldrh	r3, [r0, #22]
 80189c8:	2b09      	cmp	r3, #9
 80189ca:	d905      	bls.n	80189d8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 80189cc:	4b08      	ldr	r3, [pc, #32]	; (80189f0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 80189ce:	21f7      	movs	r1, #247	; 0xf7
 80189d0:	4a08      	ldr	r2, [pc, #32]	; (80189f4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 80189d2:	4809      	ldr	r0, [pc, #36]	; (80189f8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 80189d4:	f00a fb66 	bl	80230a4 <__assert_func>
 80189d8:	8a82      	ldrh	r2, [r0, #20]
 80189da:	250a      	movs	r5, #10
 80189dc:	441a      	add	r2, r3
 80189de:	3301      	adds	r3, #1
 80189e0:	fbb2 f4f5 	udiv	r4, r2, r5
 80189e4:	fb05 2214 	mls	r2, r5, r4, r2
 80189e8:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 80189ec:	82c3      	strh	r3, [r0, #22]
 80189ee:	bd38      	pop	{r3, r4, r5, pc}
 80189f0:	0802856d 	.word	0x0802856d
 80189f4:	08028881 	.word	0x08028881
 80189f8:	08028593 	.word	0x08028593

080189fc <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80189fc:	b538      	push	{r3, r4, r5, lr}
 80189fe:	4604      	mov	r4, r0
 8018a00:	f100 051a 	add.w	r5, r0, #26
 8018a04:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8018a06:	2b0a      	cmp	r3, #10
 8018a08:	d01c      	beq.n	8018a44 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8018a0a:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8018a0c:	b962      	cbnz	r2, 8018a28 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 8018a0e:	f104 051a 	add.w	r5, r4, #26
 8018a12:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8018a14:	2b0a      	cmp	r3, #10
 8018a16:	d015      	beq.n	8018a44 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8018a18:	4620      	mov	r0, r4
 8018a1a:	f7ff fdf6 	bl	801860a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8018a1e:	4601      	mov	r1, r0
 8018a20:	4628      	mov	r0, r5
 8018a22:	f7ff ffcf 	bl	80189c4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 8018a26:	e7f4      	b.n	8018a12 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 8018a28:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8018a2a:	3a01      	subs	r2, #1
 8018a2c:	4628      	mov	r0, r5
 8018a2e:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 8018a32:	3301      	adds	r3, #1
 8018a34:	f003 0301 	and.w	r3, r3, #1
 8018a38:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 8018a3a:	8722      	strh	r2, [r4, #56]	; 0x38
 8018a3c:	86e3      	strh	r3, [r4, #54]	; 0x36
 8018a3e:	f7ff ffc1 	bl	80189c4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 8018a42:	e7df      	b.n	8018a04 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 8018a44:	bd38      	pop	{r3, r4, r5, pc}
	...

08018a48 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 8018a48:	2300      	movs	r3, #0
 8018a4a:	b510      	push	{r4, lr}
 8018a4c:	6043      	str	r3, [r0, #4]
 8018a4e:	4604      	mov	r4, r0
 8018a50:	60c3      	str	r3, [r0, #12]
 8018a52:	7403      	strb	r3, [r0, #16]
 8018a54:	8603      	strh	r3, [r0, #48]	; 0x30
 8018a56:	8303      	strh	r3, [r0, #24]
 8018a58:	8703      	strh	r3, [r0, #56]	; 0x38
 8018a5a:	f7ff ffcf 	bl	80189fc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018a5e:	4a0a      	ldr	r2, [pc, #40]	; (8018a88 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 8018a60:	6813      	ldr	r3, [r2, #0]
 8018a62:	4611      	mov	r1, r2
 8018a64:	b913      	cbnz	r3, 8018a6c <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 8018a66:	6852      	ldr	r2, [r2, #4]
 8018a68:	07d0      	lsls	r0, r2, #31
 8018a6a:	d50b      	bpl.n	8018a84 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 8018a6c:	6849      	ldr	r1, [r1, #4]
 8018a6e:	104a      	asrs	r2, r1, #1
 8018a70:	07c9      	lsls	r1, r1, #31
 8018a72:	eb04 0002 	add.w	r0, r4, r2
 8018a76:	bf48      	it	mi
 8018a78:	58a2      	ldrmi	r2, [r4, r2]
 8018a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a7e:	bf48      	it	mi
 8018a80:	58d3      	ldrmi	r3, [r2, r3]
 8018a82:	4718      	bx	r3
 8018a84:	bd10      	pop	{r4, pc}
 8018a86:	bf00      	nop
 8018a88:	2000835c 	.word	0x2000835c

08018a8c <_ZN8touchgfx12TextProviderC1Ev>:
 8018a8c:	2300      	movs	r3, #0
 8018a8e:	2201      	movs	r2, #1
 8018a90:	b510      	push	{r4, lr}
 8018a92:	4604      	mov	r4, r0
 8018a94:	60c3      	str	r3, [r0, #12]
 8018a96:	7403      	strb	r3, [r0, #16]
 8018a98:	82c3      	strh	r3, [r0, #22]
 8018a9a:	8303      	strh	r3, [r0, #24]
 8018a9c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8018a9e:	8603      	strh	r3, [r0, #48]	; 0x30
 8018aa0:	86c3      	strh	r3, [r0, #54]	; 0x36
 8018aa2:	8703      	strh	r3, [r0, #56]	; 0x38
 8018aa4:	63c3      	str	r3, [r0, #60]	; 0x3c
 8018aa6:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8018aaa:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8018aae:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8018ab2:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 8018ab6:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 8018aba:	e9c0 3300 	strd	r3, r3, [r0]
 8018abe:	f7ff ffc3 	bl	8018a48 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8018ac2:	4620      	mov	r0, r4
 8018ac4:	bd10      	pop	{r4, pc}

08018ac6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 8018ac6:	b410      	push	{r4}
 8018ac8:	6082      	str	r2, [r0, #8]
 8018aca:	6001      	str	r1, [r0, #0]
 8018acc:	63c3      	str	r3, [r0, #60]	; 0x3c
 8018ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ad2:	f7ff bfb9 	b.w	8018a48 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

08018ad8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 8018ad8:	b508      	push	{r3, lr}
 8018ada:	88c2      	ldrh	r2, [r0, #6]
 8018adc:	440a      	add	r2, r1
 8018ade:	2a02      	cmp	r2, #2
 8018ae0:	dd05      	ble.n	8018aee <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 8018ae2:	4b06      	ldr	r3, [pc, #24]	; (8018afc <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 8018ae4:	21ec      	movs	r1, #236	; 0xec
 8018ae6:	4a06      	ldr	r2, [pc, #24]	; (8018b00 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 8018ae8:	4806      	ldr	r0, [pc, #24]	; (8018b04 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 8018aea:	f00a fadb 	bl	80230a4 <__assert_func>
 8018aee:	8883      	ldrh	r3, [r0, #4]
 8018af0:	80c2      	strh	r2, [r0, #6]
 8018af2:	1a59      	subs	r1, r3, r1
 8018af4:	f001 0101 	and.w	r1, r1, #1
 8018af8:	8081      	strh	r1, [r0, #4]
 8018afa:	bd08      	pop	{r3, pc}
 8018afc:	080285bf 	.word	0x080285bf
 8018b00:	08028a8d 	.word	0x08028a8d
 8018b04:	08028593 	.word	0x08028593

08018b08 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 8018b08:	b508      	push	{r3, lr}
 8018b0a:	88c3      	ldrh	r3, [r0, #6]
 8018b0c:	428b      	cmp	r3, r1
 8018b0e:	d805      	bhi.n	8018b1c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 8018b10:	4b06      	ldr	r3, [pc, #24]	; (8018b2c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 8018b12:	21fd      	movs	r1, #253	; 0xfd
 8018b14:	4a06      	ldr	r2, [pc, #24]	; (8018b30 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 8018b16:	4807      	ldr	r0, [pc, #28]	; (8018b34 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 8018b18:	f00a fac4 	bl	80230a4 <__assert_func>
 8018b1c:	8883      	ldrh	r3, [r0, #4]
 8018b1e:	4419      	add	r1, r3
 8018b20:	f001 0101 	and.w	r1, r1, #1
 8018b24:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8018b28:	bd08      	pop	{r3, pc}
 8018b2a:	bf00      	nop
 8018b2c:	08028585 	.word	0x08028585
 8018b30:	08028be5 	.word	0x08028be5
 8018b34:	08028593 	.word	0x08028593

08018b38 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8018b38:	b570      	push	{r4, r5, r6, lr}
 8018b3a:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8018b3c:	4604      	mov	r4, r0
 8018b3e:	b92a      	cbnz	r2, 8018b4c <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8018b40:	4b12      	ldr	r3, [pc, #72]	; (8018b8c <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 8018b42:	21de      	movs	r1, #222	; 0xde
 8018b44:	4a12      	ldr	r2, [pc, #72]	; (8018b90 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8018b46:	4813      	ldr	r0, [pc, #76]	; (8018b94 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8018b48:	f00a faac 	bl	80230a4 <__assert_func>
 8018b4c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8018b4e:	260a      	movs	r6, #10
 8018b50:	3a01      	subs	r2, #1
 8018b52:	3412      	adds	r4, #18
 8018b54:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8018b58:	3301      	adds	r3, #1
 8018b5a:	8b4d      	ldrh	r5, [r1, #26]
 8018b5c:	8602      	strh	r2, [r0, #48]	; 0x30
 8018b5e:	fbb3 f1f6 	udiv	r1, r3, r6
 8018b62:	fb06 3311 	mls	r3, r6, r1, r3
 8018b66:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8018b68:	f7ff ff48 	bl	80189fc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018b6c:	88e3      	ldrh	r3, [r4, #6]
 8018b6e:	2101      	movs	r1, #1
 8018b70:	2b02      	cmp	r3, #2
 8018b72:	bf04      	itt	eq
 8018b74:	2301      	moveq	r3, #1
 8018b76:	80e3      	strheq	r3, [r4, #6]
 8018b78:	4620      	mov	r0, r4
 8018b7a:	f7ff ffad 	bl	8018ad8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 8018b7e:	4620      	mov	r0, r4
 8018b80:	462a      	mov	r2, r5
 8018b82:	2100      	movs	r1, #0
 8018b84:	f7ff ffc0 	bl	8018b08 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8018b88:	4628      	mov	r0, r5
 8018b8a:	bd70      	pop	{r4, r5, r6, pc}
 8018b8c:	08028564 	.word	0x08028564
 8018b90:	080287d6 	.word	0x080287d6
 8018b94:	08028593 	.word	0x08028593

08018b98 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8018b98:	428a      	cmp	r2, r1
 8018b9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b9e:	4604      	mov	r4, r0
 8018ba0:	460e      	mov	r6, r1
 8018ba2:	4615      	mov	r5, r2
 8018ba4:	469a      	mov	sl, r3
 8018ba6:	d92b      	bls.n	8018c00 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 8018ba8:	1a57      	subs	r7, r2, r1
 8018baa:	f04f 0800 	mov.w	r8, #0
 8018bae:	f100 0932 	add.w	r9, r0, #50	; 0x32
 8018bb2:	f04f 0b0a 	mov.w	fp, #10
 8018bb6:	b2bf      	uxth	r7, r7
 8018bb8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8018bba:	b92b      	cbnz	r3, 8018bc8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 8018bbc:	4b24      	ldr	r3, [pc, #144]	; (8018c50 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 8018bbe:	21e6      	movs	r1, #230	; 0xe6
 8018bc0:	4a24      	ldr	r2, [pc, #144]	; (8018c54 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 8018bc2:	4825      	ldr	r0, [pc, #148]	; (8018c58 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 8018bc4:	f00a fa6e 	bl	80230a4 <__assert_func>
 8018bc8:	3b01      	subs	r3, #1
 8018bca:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8018bcc:	2101      	movs	r1, #1
 8018bce:	4648      	mov	r0, r9
 8018bd0:	b29b      	uxth	r3, r3
 8018bd2:	f108 0801 	add.w	r8, r8, #1
 8018bd6:	441a      	add	r2, r3
 8018bd8:	8623      	strh	r3, [r4, #48]	; 0x30
 8018bda:	fbb2 f3fb 	udiv	r3, r2, fp
 8018bde:	fb0b 2313 	mls	r3, fp, r3, r2
 8018be2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018be6:	8b5a      	ldrh	r2, [r3, #26]
 8018be8:	9201      	str	r2, [sp, #4]
 8018bea:	f7ff ff75 	bl	8018ad8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 8018bee:	9a01      	ldr	r2, [sp, #4]
 8018bf0:	2100      	movs	r1, #0
 8018bf2:	4648      	mov	r0, r9
 8018bf4:	f7ff ff88 	bl	8018b08 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8018bf8:	fa1f f388 	uxth.w	r3, r8
 8018bfc:	429f      	cmp	r7, r3
 8018bfe:	d8db      	bhi.n	8018bb8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 8018c00:	f104 071a 	add.w	r7, r4, #26
 8018c04:	4631      	mov	r1, r6
 8018c06:	260a      	movs	r6, #10
 8018c08:	4638      	mov	r0, r7
 8018c0a:	f7ff febf 	bl	801898c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 8018c0e:	b1c5      	cbz	r5, 8018c42 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8018c10:	3d01      	subs	r5, #1
 8018c12:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8018c14:	b2ad      	uxth	r5, r5
 8018c16:	2b09      	cmp	r3, #9
 8018c18:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 8018c1c:	d903      	bls.n	8018c26 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 8018c1e:	4b0f      	ldr	r3, [pc, #60]	; (8018c5c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 8018c20:	21ec      	movs	r1, #236	; 0xec
 8018c22:	4a0f      	ldr	r2, [pc, #60]	; (8018c60 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 8018c24:	e7cd      	b.n	8018bc2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 8018c26:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8018c28:	3301      	adds	r3, #1
 8018c2a:	3109      	adds	r1, #9
 8018c2c:	8623      	strh	r3, [r4, #48]	; 0x30
 8018c2e:	fbb1 f0f6 	udiv	r0, r1, r6
 8018c32:	fb06 1110 	mls	r1, r6, r0, r1
 8018c36:	4638      	mov	r0, r7
 8018c38:	85e1      	strh	r1, [r4, #46]	; 0x2e
 8018c3a:	2100      	movs	r1, #0
 8018c3c:	f7ff fd5a 	bl	80186f4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8018c40:	e7e5      	b.n	8018c0e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 8018c42:	4620      	mov	r0, r4
 8018c44:	b003      	add	sp, #12
 8018c46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c4a:	f7ff bed7 	b.w	80189fc <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018c4e:	bf00      	nop
 8018c50:	08028564 	.word	0x08028564
 8018c54:	0802865a 	.word	0x0802865a
 8018c58:	08028593 	.word	0x08028593
 8018c5c:	080285bf 	.word	0x080285bf
 8018c60:	080285d2 	.word	0x080285d2

08018c64 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8018c64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c68:	4605      	mov	r5, r0
 8018c6a:	4616      	mov	r6, r2
 8018c6c:	1c8c      	adds	r4, r1, #2
 8018c6e:	8809      	ldrh	r1, [r1, #0]
 8018c70:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8018c74:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8018c78:	42b3      	cmp	r3, r6
 8018c7a:	d124      	bne.n	8018cc6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8018c7c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8018c80:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8018c84:	f001 070f 	and.w	r7, r1, #15
 8018c88:	4652      	mov	r2, sl
 8018c8a:	f8cd 8000 	str.w	r8, [sp]
 8018c8e:	464b      	mov	r3, r9
 8018c90:	4621      	mov	r1, r4
 8018c92:	4628      	mov	r0, r5
 8018c94:	f7ff fe3e 	bl	8018914 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8018c98:	4683      	mov	fp, r0
 8018c9a:	b168      	cbz	r0, 8018cb8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8018c9c:	eb0a 0109 	add.w	r1, sl, r9
 8018ca0:	463a      	mov	r2, r7
 8018ca2:	4628      	mov	r0, r5
 8018ca4:	4441      	add	r1, r8
 8018ca6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8018caa:	4649      	mov	r1, r9
 8018cac:	f7ff ff74 	bl	8018b98 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8018cb0:	4658      	mov	r0, fp
 8018cb2:	b003      	add	sp, #12
 8018cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cb8:	eb07 010a 	add.w	r1, r7, sl
 8018cbc:	4449      	add	r1, r9
 8018cbe:	4441      	add	r1, r8
 8018cc0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8018cc4:	e7d2      	b.n	8018c6c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8018cc6:	f04f 0b00 	mov.w	fp, #0
 8018cca:	e7f1      	b.n	8018cb0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08018ccc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8018ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018cd0:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8018cd2:	4604      	mov	r4, r0
 8018cd4:	260b      	movs	r6, #11
 8018cd6:	f100 091a 	add.w	r9, r0, #26
 8018cda:	886f      	ldrh	r7, [r5, #2]
 8018cdc:	087f      	lsrs	r7, r7, #1
 8018cde:	3e01      	subs	r6, #1
 8018ce0:	d013      	beq.n	8018d0a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 8018ce2:	2100      	movs	r1, #0
 8018ce4:	4648      	mov	r0, r9
 8018ce6:	f7ff fd1f 	bl	8018728 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8018cea:	462a      	mov	r2, r5
 8018cec:	4680      	mov	r8, r0
 8018cee:	4603      	mov	r3, r0
 8018cf0:	4639      	mov	r1, r7
 8018cf2:	4620      	mov	r0, r4
 8018cf4:	f7ff fce0 	bl	80186b8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8018cf8:	b138      	cbz	r0, 8018d0a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 8018cfa:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8018cfe:	4642      	mov	r2, r8
 8018d00:	4620      	mov	r0, r4
 8018d02:	f7ff ffaf 	bl	8018c64 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8018d06:	2800      	cmp	r0, #0
 8018d08:	d1e9      	bne.n	8018cde <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 8018d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08018d10 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 8018d10:	4b1e      	ldr	r3, [pc, #120]	; (8018d8c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8018d12:	b570      	push	{r4, r5, r6, lr}
 8018d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d18:	4604      	mov	r4, r0
 8018d1a:	f003 0501 	and.w	r5, r3, #1
 8018d1e:	b902      	cbnz	r2, 8018d22 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 8018d20:	b165      	cbz	r5, 8018d3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 8018d22:	105b      	asrs	r3, r3, #1
 8018d24:	f104 061a 	add.w	r6, r4, #26
 8018d28:	18e0      	adds	r0, r4, r3
 8018d2a:	b10d      	cbz	r5, 8018d30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 8018d2c:	58e3      	ldr	r3, [r4, r3]
 8018d2e:	589a      	ldr	r2, [r3, r2]
 8018d30:	4790      	blx	r2
 8018d32:	2100      	movs	r1, #0
 8018d34:	4602      	mov	r2, r0
 8018d36:	4630      	mov	r0, r6
 8018d38:	f7ff fcdc 	bl	80186f4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8018d3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018d3e:	b303      	cbz	r3, 8018d82 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8018d40:	f104 051a 	add.w	r5, r4, #26
 8018d44:	2100      	movs	r1, #0
 8018d46:	4628      	mov	r0, r5
 8018d48:	f7ff fcee 	bl	8018728 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8018d4c:	b1c8      	cbz	r0, 8018d82 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8018d4e:	4620      	mov	r0, r4
 8018d50:	f7ff ffbc 	bl	8018ccc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 8018d54:	2101      	movs	r1, #1
 8018d56:	4628      	mov	r0, r5
 8018d58:	f7ff fce6 	bl	8018728 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8018d5c:	f640 133f 	movw	r3, #2367	; 0x93f
 8018d60:	4606      	mov	r6, r0
 8018d62:	4298      	cmp	r0, r3
 8018d64:	d10d      	bne.n	8018d82 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8018d66:	2100      	movs	r1, #0
 8018d68:	4628      	mov	r0, r5
 8018d6a:	f7ff fcdd 	bl	8018728 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8018d6e:	2101      	movs	r1, #1
 8018d70:	4602      	mov	r2, r0
 8018d72:	4628      	mov	r0, r5
 8018d74:	f7ff fcbe 	bl	80186f4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8018d78:	4632      	mov	r2, r6
 8018d7a:	2100      	movs	r1, #0
 8018d7c:	4628      	mov	r0, r5
 8018d7e:	f7ff fcb9 	bl	80186f4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8018d82:	4620      	mov	r0, r4
 8018d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018d88:	f7ff bed6 	b.w	8018b38 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018d8c:	20008364 	.word	0x20008364

08018d90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8018d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d92:	4617      	mov	r7, r2
 8018d94:	461e      	mov	r6, r3
 8018d96:	4605      	mov	r5, r0
 8018d98:	f7ff ffba 	bl	8018d10 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018d9c:	683b      	ldr	r3, [r7, #0]
 8018d9e:	4604      	mov	r4, r0
 8018da0:	4601      	mov	r1, r0
 8018da2:	4638      	mov	r0, r7
 8018da4:	68db      	ldr	r3, [r3, #12]
 8018da6:	4798      	blx	r3
 8018da8:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 8018dac:	4602      	mov	r2, r0
 8018dae:	6030      	str	r0, [r6, #0]
 8018db0:	b29b      	uxth	r3, r3
 8018db2:	2b7f      	cmp	r3, #127	; 0x7f
 8018db4:	d813      	bhi.n	8018dde <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 8018db6:	4639      	mov	r1, r7
 8018db8:	4628      	mov	r0, r5
 8018dba:	f7ff fccf 	bl	801875c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018dbe:	6030      	str	r0, [r6, #0]
 8018dc0:	6833      	ldr	r3, [r6, #0]
 8018dc2:	b143      	cbz	r3, 8018dd6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8018dc4:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8018dc8:	7a9b      	ldrb	r3, [r3, #10]
 8018dca:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018dce:	4313      	orrs	r3, r2
 8018dd0:	bf0c      	ite	eq
 8018dd2:	2301      	moveq	r3, #1
 8018dd4:	2300      	movne	r3, #0
 8018dd6:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8018dda:	4620      	mov	r0, r4
 8018ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018dde:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d0ec      	beq.n	8018dc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 8018de6:	f640 1302 	movw	r3, #2306	; 0x902
 8018dea:	429c      	cmp	r4, r3
 8018dec:	d1e8      	bne.n	8018dc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 8018dee:	4601      	mov	r1, r0
 8018df0:	4628      	mov	r0, r5
 8018df2:	f7ff fc32 	bl	801865a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018df6:	e7e2      	b.n	8018dbe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

08018df8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8018df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dfc:	4617      	mov	r7, r2
 8018dfe:	461e      	mov	r6, r3
 8018e00:	4605      	mov	r5, r0
 8018e02:	f7ff ff85 	bl	8018d10 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018e06:	683b      	ldr	r3, [r7, #0]
 8018e08:	4604      	mov	r4, r0
 8018e0a:	4601      	mov	r1, r0
 8018e0c:	4638      	mov	r0, r7
 8018e0e:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8018e12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018e16:	47c0      	blx	r8
 8018e18:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 8018e1c:	4602      	mov	r2, r0
 8018e1e:	6030      	str	r0, [r6, #0]
 8018e20:	b29b      	uxth	r3, r3
 8018e22:	2b7f      	cmp	r3, #127	; 0x7f
 8018e24:	d814      	bhi.n	8018e50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 8018e26:	4639      	mov	r1, r7
 8018e28:	4628      	mov	r0, r5
 8018e2a:	f7ff fc97 	bl	801875c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018e2e:	6030      	str	r0, [r6, #0]
 8018e30:	6833      	ldr	r3, [r6, #0]
 8018e32:	b143      	cbz	r3, 8018e46 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8018e34:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8018e38:	7a9b      	ldrb	r3, [r3, #10]
 8018e3a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018e3e:	4313      	orrs	r3, r2
 8018e40:	bf0c      	ite	eq
 8018e42:	2301      	moveq	r3, #1
 8018e44:	2300      	movne	r3, #0
 8018e46:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8018e4a:	4620      	mov	r0, r4
 8018e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e50:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 8018e54:	2b00      	cmp	r3, #0
 8018e56:	d0eb      	beq.n	8018e30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 8018e58:	f640 1302 	movw	r3, #2306	; 0x902
 8018e5c:	429c      	cmp	r4, r3
 8018e5e:	d1e7      	bne.n	8018e30 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 8018e60:	4601      	mov	r1, r0
 8018e62:	4628      	mov	r0, r5
 8018e64:	f7ff fbf9 	bl	801865a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018e68:	e7e1      	b.n	8018e2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

08018e6a <_ZN8touchgfx7Unicode6strlenEPKt>:
 8018e6a:	4602      	mov	r2, r0
 8018e6c:	b148      	cbz	r0, 8018e82 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8018e6e:	2300      	movs	r3, #0
 8018e70:	b298      	uxth	r0, r3
 8018e72:	3301      	adds	r3, #1
 8018e74:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8018e78:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8018e7c:	2900      	cmp	r1, #0
 8018e7e:	d1f7      	bne.n	8018e70 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8018e80:	4770      	bx	lr
 8018e82:	4770      	bx	lr

08018e84 <_ZN8touchgfx7Unicode6strlenEPKc>:
 8018e84:	b140      	cbz	r0, 8018e98 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 8018e86:	4602      	mov	r2, r0
 8018e88:	1a13      	subs	r3, r2, r0
 8018e8a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8018e8e:	b29b      	uxth	r3, r3
 8018e90:	2900      	cmp	r1, #0
 8018e92:	d1f9      	bne.n	8018e88 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 8018e94:	4618      	mov	r0, r3
 8018e96:	4770      	bx	lr
 8018e98:	4603      	mov	r3, r0
 8018e9a:	e7fb      	b.n	8018e94 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

08018e9c <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8018e9c:	b530      	push	{r4, r5, lr}
 8018e9e:	4604      	mov	r4, r0
 8018ea0:	b159      	cbz	r1, 8018eba <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8018ea2:	b148      	cbz	r0, 8018eb8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8018ea4:	2300      	movs	r3, #0
 8018ea6:	b298      	uxth	r0, r3
 8018ea8:	4282      	cmp	r2, r0
 8018eaa:	d905      	bls.n	8018eb8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8018eac:	5ccd      	ldrb	r5, [r1, r3]
 8018eae:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8018eb2:	3301      	adds	r3, #1
 8018eb4:	2d00      	cmp	r5, #0
 8018eb6:	d1f6      	bne.n	8018ea6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8018eb8:	bd30      	pop	{r4, r5, pc}
 8018eba:	4608      	mov	r0, r1
 8018ebc:	e7fc      	b.n	8018eb8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08018ebe <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 8018ebe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ec0:	468c      	mov	ip, r1
 8018ec2:	b08b      	sub	sp, #44	; 0x2c
 8018ec4:	2100      	movs	r1, #0
 8018ec6:	ae01      	add	r6, sp, #4
 8018ec8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8018ecc:	211f      	movs	r1, #31
 8018ece:	fbb0 f7f3 	udiv	r7, r0, r3
 8018ed2:	fb03 0517 	mls	r5, r3, r7, r0
 8018ed6:	4638      	mov	r0, r7
 8018ed8:	b2ec      	uxtb	r4, r5
 8018eda:	2d09      	cmp	r5, #9
 8018edc:	bfd4      	ite	le
 8018ede:	3430      	addle	r4, #48	; 0x30
 8018ee0:	3457      	addgt	r4, #87	; 0x57
 8018ee2:	b2e4      	uxtb	r4, r4
 8018ee4:	558c      	strb	r4, [r1, r6]
 8018ee6:	1e4c      	subs	r4, r1, #1
 8018ee8:	b92f      	cbnz	r7, 8018ef6 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 8018eea:	4431      	add	r1, r6
 8018eec:	4660      	mov	r0, ip
 8018eee:	f7ff ffd5 	bl	8018e9c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8018ef2:	b00b      	add	sp, #44	; 0x2c
 8018ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ef6:	4621      	mov	r1, r4
 8018ef8:	e7e9      	b.n	8018ece <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

08018efa <_ZN8touchgfx7Unicode4itoaElPtti>:
 8018efa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018efc:	4607      	mov	r7, r0
 8018efe:	b08b      	sub	sp, #44	; 0x2c
 8018f00:	4608      	mov	r0, r1
 8018f02:	b341      	cbz	r1, 8018f56 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8018f04:	1e99      	subs	r1, r3, #2
 8018f06:	290e      	cmp	r1, #14
 8018f08:	d825      	bhi.n	8018f56 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8018f0a:	2100      	movs	r1, #0
 8018f0c:	463c      	mov	r4, r7
 8018f0e:	261f      	movs	r6, #31
 8018f10:	f10d 0c04 	add.w	ip, sp, #4
 8018f14:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8018f18:	1e71      	subs	r1, r6, #1
 8018f1a:	fb94 fef3 	sdiv	lr, r4, r3
 8018f1e:	fb03 441e 	mls	r4, r3, lr, r4
 8018f22:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8018f26:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8018f2a:	b2ec      	uxtb	r4, r5
 8018f2c:	2d09      	cmp	r5, #9
 8018f2e:	bfd4      	ite	le
 8018f30:	3430      	addle	r4, #48	; 0x30
 8018f32:	3457      	addgt	r4, #87	; 0x57
 8018f34:	b2e4      	uxtb	r4, r4
 8018f36:	f80c 4006 	strb.w	r4, [ip, r6]
 8018f3a:	4674      	mov	r4, lr
 8018f3c:	b96c      	cbnz	r4, 8018f5a <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8018f3e:	2f00      	cmp	r7, #0
 8018f40:	da05      	bge.n	8018f4e <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8018f42:	ab0a      	add	r3, sp, #40	; 0x28
 8018f44:	4419      	add	r1, r3
 8018f46:	232d      	movs	r3, #45	; 0x2d
 8018f48:	f801 3c24 	strb.w	r3, [r1, #-36]
 8018f4c:	1eb1      	subs	r1, r6, #2
 8018f4e:	3101      	adds	r1, #1
 8018f50:	4461      	add	r1, ip
 8018f52:	f7ff ffa3 	bl	8018e9c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8018f56:	b00b      	add	sp, #44	; 0x2c
 8018f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f5a:	460e      	mov	r6, r1
 8018f5c:	e7dc      	b.n	8018f18 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08018f5e <_ZN8touchgfx7Unicode4atoiEPKt>:
 8018f5e:	b510      	push	{r4, lr}
 8018f60:	b158      	cbz	r0, 8018f7a <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 8018f62:	1e82      	subs	r2, r0, #2
 8018f64:	210a      	movs	r1, #10
 8018f66:	2000      	movs	r0, #0
 8018f68:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8018f6c:	3b30      	subs	r3, #48	; 0x30
 8018f6e:	b29c      	uxth	r4, r3
 8018f70:	2c09      	cmp	r4, #9
 8018f72:	d802      	bhi.n	8018f7a <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 8018f74:	fb01 3000 	mla	r0, r1, r0, r3
 8018f78:	e7f6      	b.n	8018f68 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 8018f7a:	bd10      	pop	{r4, pc}

08018f7c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 8018f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f80:	b085      	sub	sp, #20
 8018f82:	f8d0 8000 	ldr.w	r8, [r0]
 8018f86:	468a      	mov	sl, r1
 8018f88:	461c      	mov	r4, r3
 8018f8a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8018f8e:	4681      	mov	r9, r0
 8018f90:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8018f94:	4640      	mov	r0, r8
 8018f96:	9203      	str	r2, [sp, #12]
 8018f98:	9102      	str	r1, [sp, #8]
 8018f9a:	9301      	str	r3, [sp, #4]
 8018f9c:	f7ff ff65 	bl	8018e6a <_ZN8touchgfx7Unicode6strlenEPKt>
 8018fa0:	9a03      	ldr	r2, [sp, #12]
 8018fa2:	f1ba 0f00 	cmp.w	sl, #0
 8018fa6:	bf0c      	ite	eq
 8018fa8:	4684      	moveq	ip, r0
 8018faa:	f100 0c01 	addne.w	ip, r0, #1
 8018fae:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8018fb2:	8812      	ldrh	r2, [r2, #0]
 8018fb4:	fa1f fc8c 	uxth.w	ip, ip
 8018fb8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8018fba:	2a69      	cmp	r2, #105	; 0x69
 8018fbc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018fbe:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8018fc0:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 8018fc4:	d004      	beq.n	8018fd0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 8018fc6:	d844      	bhi.n	8019052 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 8018fc8:	2a58      	cmp	r2, #88	; 0x58
 8018fca:	d001      	beq.n	8018fd0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 8018fcc:	2a64      	cmp	r2, #100	; 0x64
 8018fce:	d14b      	bne.n	8019068 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 8018fd0:	b1a4      	cbz	r4, 8018ffc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 8018fd2:	b956      	cbnz	r6, 8018fea <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 8018fd4:	2801      	cmp	r0, #1
 8018fd6:	d108      	bne.n	8018fea <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 8018fd8:	f8b8 2000 	ldrh.w	r2, [r8]
 8018fdc:	2a30      	cmp	r2, #48	; 0x30
 8018fde:	bf02      	ittt	eq
 8018fe0:	f108 0202 	addeq.w	r2, r8, #2
 8018fe4:	4630      	moveq	r0, r6
 8018fe6:	f8c9 2000 	streq.w	r2, [r9]
 8018fea:	45b4      	cmp	ip, r6
 8018fec:	da3e      	bge.n	801906c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 8018fee:	b2b6      	uxth	r6, r6
 8018ff0:	eba6 040c 	sub.w	r4, r6, ip
 8018ff4:	46b4      	mov	ip, r6
 8018ff6:	b2a4      	uxth	r4, r4
 8018ff8:	f04f 0b00 	mov.w	fp, #0
 8018ffc:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8019000:	3a01      	subs	r2, #1
 8019002:	b169      	cbz	r1, 8019020 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8019004:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019006:	458c      	cmp	ip, r1
 8019008:	da09      	bge.n	801901e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801900a:	eba1 010c 	sub.w	r1, r1, ip
 801900e:	b289      	uxth	r1, r1
 8019010:	b933      	cbnz	r3, 8019020 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8019012:	f1bb 0f00 	cmp.w	fp, #0
 8019016:	d02b      	beq.n	8019070 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 8019018:	b350      	cbz	r0, 8019070 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801901a:	440c      	add	r4, r1
 801901c:	b2a4      	uxth	r4, r4
 801901e:	2100      	movs	r1, #0
 8019020:	682b      	ldr	r3, [r5, #0]
 8019022:	4293      	cmp	r3, r2
 8019024:	da07      	bge.n	8019036 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 8019026:	f1ba 0f00 	cmp.w	sl, #0
 801902a:	d004      	beq.n	8019036 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801902c:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 8019030:	682b      	ldr	r3, [r5, #0]
 8019032:	3301      	adds	r3, #1
 8019034:	602b      	str	r3, [r5, #0]
 8019036:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801903a:	b354      	cbz	r4, 8019092 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801903c:	682e      	ldr	r6, [r5, #0]
 801903e:	3c01      	subs	r4, #1
 8019040:	42b2      	cmp	r2, r6
 8019042:	b2a4      	uxth	r4, r4
 8019044:	dd25      	ble.n	8019092 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 8019046:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801904a:	682b      	ldr	r3, [r5, #0]
 801904c:	3301      	adds	r3, #1
 801904e:	602b      	str	r3, [r5, #0]
 8019050:	e7f3      	b.n	801903a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 8019052:	2a73      	cmp	r2, #115	; 0x73
 8019054:	d003      	beq.n	801905e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 8019056:	2a78      	cmp	r2, #120	; 0x78
 8019058:	d0ba      	beq.n	8018fd0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801905a:	2a6f      	cmp	r2, #111	; 0x6f
 801905c:	e7b7      	b.n	8018fce <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801905e:	2c00      	cmp	r4, #0
 8019060:	d0cc      	beq.n	8018ffc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 8019062:	42b0      	cmp	r0, r6
 8019064:	dd00      	ble.n	8019068 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 8019066:	b2b0      	uxth	r0, r6
 8019068:	2400      	movs	r4, #0
 801906a:	e7c7      	b.n	8018ffc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801906c:	2400      	movs	r4, #0
 801906e:	e7c3      	b.n	8018ff8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 8019070:	2900      	cmp	r1, #0
 8019072:	d0d5      	beq.n	8019020 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8019074:	f04f 0c20 	mov.w	ip, #32
 8019078:	682e      	ldr	r6, [r5, #0]
 801907a:	2900      	cmp	r1, #0
 801907c:	d0d0      	beq.n	8019020 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801907e:	3901      	subs	r1, #1
 8019080:	4296      	cmp	r6, r2
 8019082:	b289      	uxth	r1, r1
 8019084:	dacb      	bge.n	801901e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 8019086:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801908a:	682b      	ldr	r3, [r5, #0]
 801908c:	3301      	adds	r3, #1
 801908e:	602b      	str	r3, [r5, #0]
 8019090:	e7f2      	b.n	8019078 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 8019092:	b198      	cbz	r0, 80190bc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 8019094:	f8d9 3000 	ldr.w	r3, [r9]
 8019098:	881c      	ldrh	r4, [r3, #0]
 801909a:	b17c      	cbz	r4, 80190bc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801909c:	682c      	ldr	r4, [r5, #0]
 801909e:	3801      	subs	r0, #1
 80190a0:	42a2      	cmp	r2, r4
 80190a2:	b280      	uxth	r0, r0
 80190a4:	dd0a      	ble.n	80190bc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 80190a6:	1c9c      	adds	r4, r3, #2
 80190a8:	f8c9 4000 	str.w	r4, [r9]
 80190ac:	881c      	ldrh	r4, [r3, #0]
 80190ae:	682b      	ldr	r3, [r5, #0]
 80190b0:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 80190b4:	682b      	ldr	r3, [r5, #0]
 80190b6:	3301      	adds	r3, #1
 80190b8:	602b      	str	r3, [r5, #0]
 80190ba:	e7ea      	b.n	8019092 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 80190bc:	2620      	movs	r6, #32
 80190be:	b151      	cbz	r1, 80190d6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 80190c0:	6828      	ldr	r0, [r5, #0]
 80190c2:	3901      	subs	r1, #1
 80190c4:	4282      	cmp	r2, r0
 80190c6:	b289      	uxth	r1, r1
 80190c8:	dd05      	ble.n	80190d6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 80190ca:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 80190ce:	682b      	ldr	r3, [r5, #0]
 80190d0:	3301      	adds	r3, #1
 80190d2:	602b      	str	r3, [r5, #0]
 80190d4:	e7f3      	b.n	80190be <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 80190d6:	b005      	add	sp, #20
 80190d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080190dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 80190dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80190e2:	4604      	mov	r4, r0
 80190e4:	f04f 0801 	mov.w	r8, #1
 80190e8:	2000      	movs	r0, #0
 80190ea:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 80190ee:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80190f2:	8008      	strh	r0, [r1, #0]
 80190f4:	7010      	strb	r0, [r2, #0]
 80190f6:	7018      	strb	r0, [r3, #0]
 80190f8:	f88c 0000 	strb.w	r0, [ip]
 80190fc:	f88e 0000 	strb.w	r0, [lr]
 8019100:	7030      	strb	r0, [r6, #0]
 8019102:	6820      	ldr	r0, [r4, #0]
 8019104:	8800      	ldrh	r0, [r0, #0]
 8019106:	b190      	cbz	r0, 801912e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 8019108:	282b      	cmp	r0, #43	; 0x2b
 801910a:	d001      	beq.n	8019110 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 801910c:	2820      	cmp	r0, #32
 801910e:	d104      	bne.n	801911a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 8019110:	8008      	strh	r0, [r1, #0]
 8019112:	6820      	ldr	r0, [r4, #0]
 8019114:	3002      	adds	r0, #2
 8019116:	6020      	str	r0, [r4, #0]
 8019118:	e7f3      	b.n	8019102 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 801911a:	282d      	cmp	r0, #45	; 0x2d
 801911c:	d102      	bne.n	8019124 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 801911e:	f882 8000 	strb.w	r8, [r2]
 8019122:	e7f6      	b.n	8019112 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 8019124:	2823      	cmp	r0, #35	; 0x23
 8019126:	d102      	bne.n	801912e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 8019128:	f883 8000 	strb.w	r8, [r3]
 801912c:	e7f1      	b.n	8019112 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801912e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8019132:	2b09      	cmp	r3, #9
 8019134:	d901      	bls.n	801913a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 8019136:	282a      	cmp	r0, #42	; 0x2a
 8019138:	d114      	bne.n	8019164 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801913a:	2201      	movs	r2, #1
 801913c:	f88e 2000 	strb.w	r2, [lr]
 8019140:	6823      	ldr	r3, [r4, #0]
 8019142:	8819      	ldrh	r1, [r3, #0]
 8019144:	2930      	cmp	r1, #48	; 0x30
 8019146:	bf02      	ittt	eq
 8019148:	3302      	addeq	r3, #2
 801914a:	6023      	streq	r3, [r4, #0]
 801914c:	f88c 2000 	strbeq.w	r2, [ip]
 8019150:	6820      	ldr	r0, [r4, #0]
 8019152:	8803      	ldrh	r3, [r0, #0]
 8019154:	2b2a      	cmp	r3, #42	; 0x2a
 8019156:	d11e      	bne.n	8019196 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 8019158:	f04f 33ff 	mov.w	r3, #4294967295
 801915c:	603b      	str	r3, [r7, #0]
 801915e:	6823      	ldr	r3, [r4, #0]
 8019160:	3302      	adds	r3, #2
 8019162:	6023      	str	r3, [r4, #0]
 8019164:	6823      	ldr	r3, [r4, #0]
 8019166:	881b      	ldrh	r3, [r3, #0]
 8019168:	2b2e      	cmp	r3, #46	; 0x2e
 801916a:	d112      	bne.n	8019192 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 801916c:	2301      	movs	r3, #1
 801916e:	7033      	strb	r3, [r6, #0]
 8019170:	6823      	ldr	r3, [r4, #0]
 8019172:	1c98      	adds	r0, r3, #2
 8019174:	6020      	str	r0, [r4, #0]
 8019176:	885b      	ldrh	r3, [r3, #2]
 8019178:	2b2a      	cmp	r3, #42	; 0x2a
 801917a:	d117      	bne.n	80191ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 801917c:	f04f 33ff 	mov.w	r3, #4294967295
 8019180:	602b      	str	r3, [r5, #0]
 8019182:	6823      	ldr	r3, [r4, #0]
 8019184:	3302      	adds	r3, #2
 8019186:	6023      	str	r3, [r4, #0]
 8019188:	682b      	ldr	r3, [r5, #0]
 801918a:	2b06      	cmp	r3, #6
 801918c:	bfa8      	it	ge
 801918e:	2306      	movge	r3, #6
 8019190:	602b      	str	r3, [r5, #0]
 8019192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019196:	f7ff fee2 	bl	8018f5e <_ZN8touchgfx7Unicode4atoiEPKt>
 801919a:	6038      	str	r0, [r7, #0]
 801919c:	6823      	ldr	r3, [r4, #0]
 801919e:	881a      	ldrh	r2, [r3, #0]
 80191a0:	3a30      	subs	r2, #48	; 0x30
 80191a2:	2a09      	cmp	r2, #9
 80191a4:	d8de      	bhi.n	8019164 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 80191a6:	3302      	adds	r3, #2
 80191a8:	6023      	str	r3, [r4, #0]
 80191aa:	e7f7      	b.n	801919c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 80191ac:	f7ff fed7 	bl	8018f5e <_ZN8touchgfx7Unicode4atoiEPKt>
 80191b0:	6028      	str	r0, [r5, #0]
 80191b2:	6823      	ldr	r3, [r4, #0]
 80191b4:	881a      	ldrh	r2, [r3, #0]
 80191b6:	3a30      	subs	r2, #48	; 0x30
 80191b8:	2a09      	cmp	r2, #9
 80191ba:	d8e5      	bhi.n	8019188 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 80191bc:	3302      	adds	r3, #2
 80191be:	6023      	str	r3, [r4, #0]
 80191c0:	e7f7      	b.n	80191b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

080191c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 80191c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191c6:	b0a2      	sub	sp, #136	; 0x88
 80191c8:	2500      	movs	r5, #0
 80191ca:	4606      	mov	r6, r0
 80191cc:	460f      	mov	r7, r1
 80191ce:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 80191d2:	9209      	str	r2, [sp, #36]	; 0x24
 80191d4:	4629      	mov	r1, r5
 80191d6:	2242      	movs	r2, #66	; 0x42
 80191d8:	4640      	mov	r0, r8
 80191da:	461c      	mov	r4, r3
 80191dc:	950d      	str	r5, [sp, #52]	; 0x34
 80191de:	f7fe fd96 	bl	8017d0e <_ZN8touchgfx6memsetEPvhm>
 80191e2:	b30e      	cbz	r6, 8019228 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 80191e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191e6:	b1f3      	cbz	r3, 8019226 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 80191e8:	f107 3aff 	add.w	sl, r7, #4294967295
 80191ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80191ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80191f0:	8812      	ldrh	r2, [r2, #0]
 80191f2:	2a00      	cmp	r2, #0
 80191f4:	f000 80b3 	beq.w	801935e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 80191f8:	459a      	cmp	sl, r3
 80191fa:	f340 80b0 	ble.w	801935e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 80191fe:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019204:	f8b9 2000 	ldrh.w	r2, [r9]
 8019208:	2a00      	cmp	r2, #0
 801920a:	d0ef      	beq.n	80191ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801920c:	2a25      	cmp	r2, #37	; 0x25
 801920e:	f000 80aa 	beq.w	8019366 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 8019212:	459a      	cmp	sl, r3
 8019214:	ddea      	ble.n	80191ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8019216:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801921a:	f109 0202 	add.w	r2, r9, #2
 801921e:	3301      	adds	r3, #1
 8019220:	9209      	str	r2, [sp, #36]	; 0x24
 8019222:	930d      	str	r3, [sp, #52]	; 0x34
 8019224:	e7eb      	b.n	80191fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 8019226:	8033      	strh	r3, [r6, #0]
 8019228:	4630      	mov	r0, r6
 801922a:	b022      	add	sp, #136	; 0x88
 801922c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019230:	3b63      	subs	r3, #99	; 0x63
 8019232:	2b01      	cmp	r3, #1
 8019234:	f200 80df 	bhi.w	80193f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 8019238:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801923c:	8813      	ldrh	r3, [r2, #0]
 801923e:	2b69      	cmp	r3, #105	; 0x69
 8019240:	d058      	beq.n	80192f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 8019242:	d81b      	bhi.n	801927c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 8019244:	2b63      	cmp	r3, #99	; 0x63
 8019246:	d02e      	beq.n	80192a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 8019248:	2b64      	cmp	r3, #100	; 0x64
 801924a:	d053      	beq.n	80192f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801924c:	2b58      	cmp	r3, #88	; 0x58
 801924e:	d06f      	beq.n	8019330 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 8019250:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8019254:	46a1      	mov	r9, r4
 8019256:	e02d      	b.n	80192b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8019258:	2b73      	cmp	r3, #115	; 0x73
 801925a:	d0ed      	beq.n	8019238 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801925c:	d803      	bhi.n	8019266 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801925e:	2b6f      	cmp	r3, #111	; 0x6f
 8019260:	f040 80c9 	bne.w	80193f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 8019264:	e7e8      	b.n	8019238 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8019266:	2b75      	cmp	r3, #117	; 0x75
 8019268:	d0e6      	beq.n	8019238 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801926a:	2b78      	cmp	r3, #120	; 0x78
 801926c:	e7f8      	b.n	8019260 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801926e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019270:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 8019274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019276:	3302      	adds	r3, #2
 8019278:	9309      	str	r3, [sp, #36]	; 0x24
 801927a:	e7b7      	b.n	80191ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801927c:	2b73      	cmp	r3, #115	; 0x73
 801927e:	d034      	beq.n	80192ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 8019280:	d807      	bhi.n	8019292 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 8019282:	2b6f      	cmp	r3, #111	; 0x6f
 8019284:	d1e4      	bne.n	8019250 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 8019286:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019288:	f104 0904 	add.w	r9, r4, #4
 801928c:	2308      	movs	r3, #8
 801928e:	1aba      	subs	r2, r7, r2
 8019290:	e048      	b.n	8019324 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 8019292:	2b75      	cmp	r3, #117	; 0x75
 8019294:	d041      	beq.n	801931a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 8019296:	2b78      	cmp	r3, #120	; 0x78
 8019298:	d1da      	bne.n	8019250 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801929a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801929c:	f104 0904 	add.w	r9, r4, #4
 80192a0:	2310      	movs	r3, #16
 80192a2:	1aba      	subs	r2, r7, r2
 80192a4:	e03e      	b.n	8019324 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 80192a6:	7823      	ldrb	r3, [r4, #0]
 80192a8:	f104 0904 	add.w	r9, r4, #4
 80192ac:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 80192b0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80192b4:	aa0d      	add	r2, sp, #52	; 0x34
 80192b6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80192ba:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80192be:	a810      	add	r0, sp, #64	; 0x40
 80192c0:	9205      	str	r2, [sp, #20]
 80192c2:	464c      	mov	r4, r9
 80192c4:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80192c8:	9204      	str	r2, [sp, #16]
 80192ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80192cc:	9203      	str	r2, [sp, #12]
 80192ce:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80192d2:	9202      	str	r2, [sp, #8]
 80192d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80192d6:	9201      	str	r2, [sp, #4]
 80192d8:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 80192dc:	e9cd 7606 	strd	r7, r6, [sp, #24]
 80192e0:	9200      	str	r2, [sp, #0]
 80192e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80192e4:	f7ff fe4a 	bl	8018f7c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 80192e8:	e7c4      	b.n	8019274 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 80192ea:	f104 0904 	add.w	r9, r4, #4
 80192ee:	6823      	ldr	r3, [r4, #0]
 80192f0:	9310      	str	r3, [sp, #64]	; 0x40
 80192f2:	e7df      	b.n	80192b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 80192f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80192f6:	230a      	movs	r3, #10
 80192f8:	4641      	mov	r1, r8
 80192fa:	6820      	ldr	r0, [r4, #0]
 80192fc:	1aba      	subs	r2, r7, r2
 80192fe:	f104 0904 	add.w	r9, r4, #4
 8019302:	b292      	uxth	r2, r2
 8019304:	f7ff fdf9 	bl	8018efa <_ZN8touchgfx7Unicode4itoaElPtti>
 8019308:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801930c:	2b2d      	cmp	r3, #45	; 0x2d
 801930e:	d1d1      	bne.n	80192b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8019310:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8019314:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019316:	3302      	adds	r3, #2
 8019318:	e7ea      	b.n	80192f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 801931a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801931c:	f104 0904 	add.w	r9, r4, #4
 8019320:	230a      	movs	r3, #10
 8019322:	1aba      	subs	r2, r7, r2
 8019324:	b292      	uxth	r2, r2
 8019326:	4641      	mov	r1, r8
 8019328:	6820      	ldr	r0, [r4, #0]
 801932a:	f7ff fdc8 	bl	8018ebe <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801932e:	e7c1      	b.n	80192b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8019330:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019332:	2310      	movs	r3, #16
 8019334:	4641      	mov	r1, r8
 8019336:	6820      	ldr	r0, [r4, #0]
 8019338:	1aba      	subs	r2, r7, r2
 801933a:	f104 0904 	add.w	r9, r4, #4
 801933e:	b292      	uxth	r2, r2
 8019340:	f7ff fdbd 	bl	8018ebe <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8019344:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8019348:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801934c:	2b00      	cmp	r3, #0
 801934e:	d0b1      	beq.n	80192b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8019350:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8019354:	2919      	cmp	r1, #25
 8019356:	d8f7      	bhi.n	8019348 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 8019358:	3b20      	subs	r3, #32
 801935a:	8013      	strh	r3, [r2, #0]
 801935c:	e7f4      	b.n	8019348 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801935e:	2200      	movs	r2, #0
 8019360:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8019364:	e760      	b.n	8019228 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 8019366:	459a      	cmp	sl, r3
 8019368:	f77f af40 	ble.w	80191ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801936c:	f109 0302 	add.w	r3, r9, #2
 8019370:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 8019374:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 8019378:	a809      	add	r0, sp, #36	; 0x24
 801937a:	9309      	str	r3, [sp, #36]	; 0x24
 801937c:	ab0f      	add	r3, sp, #60	; 0x3c
 801937e:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 8019382:	9304      	str	r3, [sp, #16]
 8019384:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8019388:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801938c:	9303      	str	r3, [sp, #12]
 801938e:	ab0e      	add	r3, sp, #56	; 0x38
 8019390:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 8019394:	9302      	str	r3, [sp, #8]
 8019396:	ab0c      	add	r3, sp, #48	; 0x30
 8019398:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801939c:	9301      	str	r3, [sp, #4]
 801939e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80193a2:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 80193a6:	9300      	str	r3, [sp, #0]
 80193a8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80193ac:	950e      	str	r5, [sp, #56]	; 0x38
 80193ae:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 80193b2:	950f      	str	r5, [sp, #60]	; 0x3c
 80193b4:	f7ff fe92 	bl	80190dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 80193b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80193ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80193bc:	2b00      	cmp	r3, #0
 80193be:	bfbf      	itttt	lt
 80193c0:	6823      	ldrlt	r3, [r4, #0]
 80193c2:	3404      	addlt	r4, #4
 80193c4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80193c8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80193ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	bfbf      	itttt	lt
 80193d0:	6823      	ldrlt	r3, [r4, #0]
 80193d2:	3404      	addlt	r4, #4
 80193d4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80193d8:	930f      	strlt	r3, [sp, #60]	; 0x3c
 80193da:	8813      	ldrh	r3, [r2, #0]
 80193dc:	2b69      	cmp	r3, #105	; 0x69
 80193de:	f43f af2b 	beq.w	8019238 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 80193e2:	f63f af39 	bhi.w	8019258 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 80193e6:	2b58      	cmp	r3, #88	; 0x58
 80193e8:	f43f af26 	beq.w	8019238 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 80193ec:	f63f af20 	bhi.w	8019230 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 80193f0:	2b25      	cmp	r3, #37	; 0x25
 80193f2:	f43f af3c 	beq.w	801926e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 80193f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80193f8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80193fc:	f8b9 2000 	ldrh.w	r2, [r9]
 8019400:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8019404:	3301      	adds	r3, #1
 8019406:	930d      	str	r3, [sp, #52]	; 0x34
 8019408:	e734      	b.n	8019274 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

0801940c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801940c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801940e:	4605      	mov	r5, r0
 8019410:	b0a1      	sub	sp, #132	; 0x84
 8019412:	4610      	mov	r0, r2
 8019414:	460e      	mov	r6, r1
 8019416:	4614      	mov	r4, r2
 8019418:	461f      	mov	r7, r3
 801941a:	f7ff fd33 	bl	8018e84 <_ZN8touchgfx7Unicode6strlenEPKc>
 801941e:	283f      	cmp	r0, #63	; 0x3f
 8019420:	d906      	bls.n	8019430 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 8019422:	4b0a      	ldr	r3, [pc, #40]	; (801944c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 8019424:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8019428:	4a09      	ldr	r2, [pc, #36]	; (8019450 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801942a:	480a      	ldr	r0, [pc, #40]	; (8019454 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801942c:	f009 fe3a 	bl	80230a4 <__assert_func>
 8019430:	4621      	mov	r1, r4
 8019432:	2240      	movs	r2, #64	; 0x40
 8019434:	4668      	mov	r0, sp
 8019436:	f7ff fd31 	bl	8018e9c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801943a:	463b      	mov	r3, r7
 801943c:	466a      	mov	r2, sp
 801943e:	4631      	mov	r1, r6
 8019440:	4628      	mov	r0, r5
 8019442:	f7ff febe 	bl	80191c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 8019446:	b021      	add	sp, #132	; 0x84
 8019448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801944a:	bf00      	nop
 801944c:	08028cbd 	.word	0x08028cbd
 8019450:	08028d00 	.word	0x08028d00
 8019454:	08028cda 	.word	0x08028cda

08019458 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8019458:	b40c      	push	{r2, r3}
 801945a:	b507      	push	{r0, r1, r2, lr}
 801945c:	ab04      	add	r3, sp, #16
 801945e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019462:	9301      	str	r3, [sp, #4]
 8019464:	f7ff ffd2 	bl	801940c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8019468:	b003      	add	sp, #12
 801946a:	f85d eb04 	ldr.w	lr, [sp], #4
 801946e:	b002      	add	sp, #8
 8019470:	4770      	bx	lr
	...

08019474 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8019474:	4b01      	ldr	r3, [pc, #4]	; (801947c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8019476:	6018      	str	r0, [r3, #0]
 8019478:	4770      	bx	lr
 801947a:	bf00      	nop
 801947c:	2000b24c 	.word	0x2000b24c

08019480 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8019480:	4b07      	ldr	r3, [pc, #28]	; (80194a0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 8019482:	881a      	ldrh	r2, [r3, #0]
 8019484:	4282      	cmp	r2, r0
 8019486:	d809      	bhi.n	801949c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8019488:	4b06      	ldr	r3, [pc, #24]	; (80194a4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801948a:	881b      	ldrh	r3, [r3, #0]
 801948c:	4413      	add	r3, r2
 801948e:	4298      	cmp	r0, r3
 8019490:	da04      	bge.n	801949c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8019492:	4b05      	ldr	r3, [pc, #20]	; (80194a8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801949a:	4770      	bx	lr
 801949c:	2000      	movs	r0, #0
 801949e:	4770      	bx	lr
 80194a0:	2000b26c 	.word	0x2000b26c
 80194a4:	2000b270 	.word	0x2000b270
 80194a8:	2000b250 	.word	0x2000b250

080194ac <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80194ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194b0:	4d26      	ldr	r5, [pc, #152]	; (801954c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80194b2:	682b      	ldr	r3, [r5, #0]
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	d046      	beq.n	8019546 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 80194b8:	4a25      	ldr	r2, [pc, #148]	; (8019550 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 80194ba:	4f26      	ldr	r7, [pc, #152]	; (8019554 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80194bc:	8810      	ldrh	r0, [r2, #0]
 80194be:	883c      	ldrh	r4, [r7, #0]
 80194c0:	4e25      	ldr	r6, [pc, #148]	; (8019558 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80194c2:	4420      	add	r0, r4
 80194c4:	1c42      	adds	r2, r0, #1
 80194c6:	ea4f 0880 	mov.w	r8, r0, lsl #2
 80194ca:	f022 0201 	bic.w	r2, r2, #1
 80194ce:	0412      	lsls	r2, r2, #16
 80194d0:	0c12      	lsrs	r2, r2, #16
 80194d2:	0051      	lsls	r1, r2, #1
 80194d4:	220e      	movs	r2, #14
 80194d6:	eb08 0e01 	add.w	lr, r8, r1
 80194da:	fb02 fc04 	mul.w	ip, r2, r4
 80194de:	eb03 0208 	add.w	r2, r3, r8
 80194e2:	4c1e      	ldr	r4, [pc, #120]	; (801955c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80194e4:	6022      	str	r2, [r4, #0]
 80194e6:	eb03 020e 	add.w	r2, r3, lr
 80194ea:	44e6      	add	lr, ip
 80194ec:	6032      	str	r2, [r6, #0]
 80194ee:	4473      	add	r3, lr
 80194f0:	4a1b      	ldr	r2, [pc, #108]	; (8019560 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80194f2:	6013      	str	r3, [r2, #0]
 80194f4:	2300      	movs	r3, #0
 80194f6:	4a1b      	ldr	r2, [pc, #108]	; (8019564 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80194f8:	8013      	strh	r3, [r2, #0]
 80194fa:	4a1b      	ldr	r2, [pc, #108]	; (8019568 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 80194fc:	6812      	ldr	r2, [r2, #0]
 80194fe:	eba2 0208 	sub.w	r2, r2, r8
 8019502:	1a52      	subs	r2, r2, r1
 8019504:	4919      	ldr	r1, [pc, #100]	; (801956c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 8019506:	eba2 020c 	sub.w	r2, r2, ip
 801950a:	469c      	mov	ip, r3
 801950c:	600a      	str	r2, [r1, #0]
 801950e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019512:	4a17      	ldr	r2, [pc, #92]	; (8019570 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8019514:	8013      	strh	r3, [r2, #0]
 8019516:	4283      	cmp	r3, r0
 8019518:	d10d      	bne.n	8019536 <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801951a:	883d      	ldrh	r5, [r7, #0]
 801951c:	2300      	movs	r3, #0
 801951e:	6830      	ldr	r0, [r6, #0]
 8019520:	240e      	movs	r4, #14
 8019522:	429d      	cmp	r5, r3
 8019524:	d90f      	bls.n	8019546 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 8019526:	fb04 0203 	mla	r2, r4, r3, r0
 801952a:	3301      	adds	r3, #1
 801952c:	7b11      	ldrb	r1, [r2, #12]
 801952e:	f36f 1145 	bfc	r1, #5, #1
 8019532:	7311      	strb	r1, [r2, #12]
 8019534:	e7f5      	b.n	8019522 <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 8019536:	682a      	ldr	r2, [r5, #0]
 8019538:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801953c:	6822      	ldr	r2, [r4, #0]
 801953e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8019542:	3301      	adds	r3, #1
 8019544:	e7e7      	b.n	8019516 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 8019546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801954a:	bf00      	nop
 801954c:	2000b250 	.word	0x2000b250
 8019550:	2000b26c 	.word	0x2000b26c
 8019554:	2000b270 	.word	0x2000b270
 8019558:	2000b254 	.word	0x2000b254
 801955c:	2000b264 	.word	0x2000b264
 8019560:	2000b25c 	.word	0x2000b25c
 8019564:	2000b26e 	.word	0x2000b26e
 8019568:	2000b258 	.word	0x2000b258
 801956c:	2000b268 	.word	0x2000b268
 8019570:	2000b260 	.word	0x2000b260

08019574 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8019574:	4b10      	ldr	r3, [pc, #64]	; (80195b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8019576:	b510      	push	{r4, lr}
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	b9db      	cbnz	r3, 80195b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801957c:	b1d1      	cbz	r1, 80195b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801957e:	4b0f      	ldr	r3, [pc, #60]	; (80195bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8019580:	240e      	movs	r4, #14
 8019582:	801a      	strh	r2, [r3, #0]
 8019584:	b292      	uxth	r2, r2
 8019586:	4b0e      	ldr	r3, [pc, #56]	; (80195c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8019588:	881b      	ldrh	r3, [r3, #0]
 801958a:	4413      	add	r3, r2
 801958c:	4362      	muls	r2, r4
 801958e:	2406      	movs	r4, #6
 8019590:	fb04 2203 	mla	r2, r4, r3, r2
 8019594:	428a      	cmp	r2, r1
 8019596:	d305      	bcc.n	80195a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8019598:	4b0a      	ldr	r3, [pc, #40]	; (80195c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801959a:	2137      	movs	r1, #55	; 0x37
 801959c:	4a0a      	ldr	r2, [pc, #40]	; (80195c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801959e:	480b      	ldr	r0, [pc, #44]	; (80195cc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 80195a0:	f009 fd80 	bl	80230a4 <__assert_func>
 80195a4:	4b0a      	ldr	r3, [pc, #40]	; (80195d0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 80195a6:	6019      	str	r1, [r3, #0]
 80195a8:	4b0a      	ldr	r3, [pc, #40]	; (80195d4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 80195aa:	6018      	str	r0, [r3, #0]
 80195ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80195b0:	f7ff bf7c 	b.w	80194ac <_ZN8touchgfx6Bitmap10clearCacheEv>
 80195b4:	bd10      	pop	{r4, pc}
 80195b6:	bf00      	nop
 80195b8:	2000b25c 	.word	0x2000b25c
 80195bc:	2000b270 	.word	0x2000b270
 80195c0:	2000b26c 	.word	0x2000b26c
 80195c4:	08028de2 	.word	0x08028de2
 80195c8:	08028e3b 	.word	0x08028e3b
 80195cc:	08028dbd 	.word	0x08028dbd
 80195d0:	2000b258 	.word	0x2000b258
 80195d4:	2000b250 	.word	0x2000b250

080195d8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80195d8:	b470      	push	{r4, r5, r6}
 80195da:	4c07      	ldr	r4, [pc, #28]	; (80195f8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80195dc:	4605      	mov	r5, r0
 80195de:	4610      	mov	r0, r2
 80195e0:	9a03      	ldr	r2, [sp, #12]
 80195e2:	6826      	ldr	r6, [r4, #0]
 80195e4:	b936      	cbnz	r6, 80195f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80195e6:	6025      	str	r5, [r4, #0]
 80195e8:	4c04      	ldr	r4, [pc, #16]	; (80195fc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80195ea:	8021      	strh	r1, [r4, #0]
 80195ec:	4619      	mov	r1, r3
 80195ee:	bc70      	pop	{r4, r5, r6}
 80195f0:	f7ff bfc0 	b.w	8019574 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80195f4:	bc70      	pop	{r4, r5, r6}
 80195f6:	4770      	bx	lr
 80195f8:	2000b274 	.word	0x2000b274
 80195fc:	2000b26c 	.word	0x2000b26c

08019600 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8019600:	b508      	push	{r3, lr}
 8019602:	4b14      	ldr	r3, [pc, #80]	; (8019654 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8019604:	6819      	ldr	r1, [r3, #0]
 8019606:	b931      	cbnz	r1, 8019616 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8019608:	4b13      	ldr	r3, [pc, #76]	; (8019658 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801960a:	f240 21e6 	movw	r1, #742	; 0x2e6
 801960e:	4a13      	ldr	r2, [pc, #76]	; (801965c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8019610:	4813      	ldr	r0, [pc, #76]	; (8019660 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8019612:	f009 fd47 	bl	80230a4 <__assert_func>
 8019616:	4a13      	ldr	r2, [pc, #76]	; (8019664 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8019618:	8803      	ldrh	r3, [r0, #0]
 801961a:	8812      	ldrh	r2, [r2, #0]
 801961c:	4293      	cmp	r3, r2
 801961e:	d204      	bcs.n	801962a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8019620:	2214      	movs	r2, #20
 8019622:	fb02 1303 	mla	r3, r2, r3, r1
 8019626:	8918      	ldrh	r0, [r3, #8]
 8019628:	bd08      	pop	{r3, pc}
 801962a:	490f      	ldr	r1, [pc, #60]	; (8019668 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801962c:	8809      	ldrh	r1, [r1, #0]
 801962e:	4411      	add	r1, r2
 8019630:	428b      	cmp	r3, r1
 8019632:	da06      	bge.n	8019642 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8019634:	1a9b      	subs	r3, r3, r2
 8019636:	4a0d      	ldr	r2, [pc, #52]	; (801966c <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8019638:	210e      	movs	r1, #14
 801963a:	6812      	ldr	r2, [r2, #0]
 801963c:	fb01 2303 	mla	r3, r1, r3, r2
 8019640:	e7f1      	b.n	8019626 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8019642:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019646:	4293      	cmp	r3, r2
 8019648:	bf0a      	itet	eq
 801964a:	4b09      	ldreq	r3, [pc, #36]	; (8019670 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801964c:	2000      	movne	r0, #0
 801964e:	8818      	ldrheq	r0, [r3, #0]
 8019650:	e7ea      	b.n	8019628 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8019652:	bf00      	nop
 8019654:	2000b274 	.word	0x2000b274
 8019658:	08027e0c 	.word	0x08027e0c
 801965c:	08028ee8 	.word	0x08028ee8
 8019660:	08028dbd 	.word	0x08028dbd
 8019664:	2000b26c 	.word	0x2000b26c
 8019668:	2000b270 	.word	0x2000b270
 801966c:	2000b254 	.word	0x2000b254
 8019670:	2000b1a0 	.word	0x2000b1a0

08019674 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8019674:	b508      	push	{r3, lr}
 8019676:	4b14      	ldr	r3, [pc, #80]	; (80196c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8019678:	6819      	ldr	r1, [r3, #0]
 801967a:	b931      	cbnz	r1, 801968a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801967c:	4b13      	ldr	r3, [pc, #76]	; (80196cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801967e:	f240 21fa 	movw	r1, #762	; 0x2fa
 8019682:	4a13      	ldr	r2, [pc, #76]	; (80196d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8019684:	4813      	ldr	r0, [pc, #76]	; (80196d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8019686:	f009 fd0d 	bl	80230a4 <__assert_func>
 801968a:	4a13      	ldr	r2, [pc, #76]	; (80196d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801968c:	8803      	ldrh	r3, [r0, #0]
 801968e:	8812      	ldrh	r2, [r2, #0]
 8019690:	4293      	cmp	r3, r2
 8019692:	d204      	bcs.n	801969e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8019694:	2214      	movs	r2, #20
 8019696:	fb02 1303 	mla	r3, r2, r3, r1
 801969a:	8958      	ldrh	r0, [r3, #10]
 801969c:	bd08      	pop	{r3, pc}
 801969e:	490f      	ldr	r1, [pc, #60]	; (80196dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 80196a0:	8809      	ldrh	r1, [r1, #0]
 80196a2:	4411      	add	r1, r2
 80196a4:	428b      	cmp	r3, r1
 80196a6:	da06      	bge.n	80196b6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 80196a8:	1a9b      	subs	r3, r3, r2
 80196aa:	4a0d      	ldr	r2, [pc, #52]	; (80196e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 80196ac:	210e      	movs	r1, #14
 80196ae:	6812      	ldr	r2, [r2, #0]
 80196b0:	fb01 2303 	mla	r3, r1, r3, r2
 80196b4:	e7f1      	b.n	801969a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 80196b6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80196ba:	4293      	cmp	r3, r2
 80196bc:	bf0a      	itet	eq
 80196be:	4b09      	ldreq	r3, [pc, #36]	; (80196e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 80196c0:	2000      	movne	r0, #0
 80196c2:	8818      	ldrheq	r0, [r3, #0]
 80196c4:	e7ea      	b.n	801969c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 80196c6:	bf00      	nop
 80196c8:	2000b274 	.word	0x2000b274
 80196cc:	08027e0c 	.word	0x08027e0c
 80196d0:	08028f14 	.word	0x08028f14
 80196d4:	08028dbd 	.word	0x08028dbd
 80196d8:	2000b26c 	.word	0x2000b26c
 80196dc:	2000b270 	.word	0x2000b270
 80196e0:	2000b254 	.word	0x2000b254
 80196e4:	2000b1a2 	.word	0x2000b1a2

080196e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80196e8:	4b23      	ldr	r3, [pc, #140]	; (8019778 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80196ea:	b510      	push	{r4, lr}
 80196ec:	681c      	ldr	r4, [r3, #0]
 80196ee:	b934      	cbnz	r4, 80196fe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 80196f0:	4b22      	ldr	r3, [pc, #136]	; (801977c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80196f2:	f240 310e 	movw	r1, #782	; 0x30e
 80196f6:	4a22      	ldr	r2, [pc, #136]	; (8019780 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 80196f8:	4822      	ldr	r0, [pc, #136]	; (8019784 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 80196fa:	f009 fcd3 	bl	80230a4 <__assert_func>
 80196fe:	4a22      	ldr	r2, [pc, #136]	; (8019788 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8019700:	880b      	ldrh	r3, [r1, #0]
 8019702:	8812      	ldrh	r2, [r2, #0]
 8019704:	4293      	cmp	r3, r2
 8019706:	d211      	bcs.n	801972c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8019708:	2214      	movs	r2, #20
 801970a:	fb02 4303 	mla	r3, r2, r3, r4
 801970e:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8019712:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8019716:	8a1a      	ldrh	r2, [r3, #16]
 8019718:	8a5b      	ldrh	r3, [r3, #18]
 801971a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801971e:	8004      	strh	r4, [r0, #0]
 8019720:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019724:	8041      	strh	r1, [r0, #2]
 8019726:	8082      	strh	r2, [r0, #4]
 8019728:	80c3      	strh	r3, [r0, #6]
 801972a:	e00e      	b.n	801974a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801972c:	4917      	ldr	r1, [pc, #92]	; (801978c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801972e:	8809      	ldrh	r1, [r1, #0]
 8019730:	4411      	add	r1, r2
 8019732:	428b      	cmp	r3, r1
 8019734:	da0a      	bge.n	801974c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8019736:	1a9b      	subs	r3, r3, r2
 8019738:	4a15      	ldr	r2, [pc, #84]	; (8019790 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801973a:	210e      	movs	r1, #14
 801973c:	6812      	ldr	r2, [r2, #0]
 801973e:	fb01 2303 	mla	r3, r1, r3, r2
 8019742:	681a      	ldr	r2, [r3, #0]
 8019744:	6002      	str	r2, [r0, #0]
 8019746:	685a      	ldr	r2, [r3, #4]
 8019748:	6042      	str	r2, [r0, #4]
 801974a:	bd10      	pop	{r4, pc}
 801974c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019750:	4293      	cmp	r3, r2
 8019752:	d10b      	bne.n	801976c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8019754:	4b0f      	ldr	r3, [pc, #60]	; (8019794 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8019756:	f9b3 1000 	ldrsh.w	r1, [r3]
 801975a:	4b0f      	ldr	r3, [pc, #60]	; (8019798 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801975c:	8081      	strh	r1, [r0, #4]
 801975e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019762:	2300      	movs	r3, #0
 8019764:	80c2      	strh	r2, [r0, #6]
 8019766:	8003      	strh	r3, [r0, #0]
 8019768:	8043      	strh	r3, [r0, #2]
 801976a:	e7ee      	b.n	801974a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801976c:	2300      	movs	r3, #0
 801976e:	8003      	strh	r3, [r0, #0]
 8019770:	8043      	strh	r3, [r0, #2]
 8019772:	8083      	strh	r3, [r0, #4]
 8019774:	e7d8      	b.n	8019728 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8019776:	bf00      	nop
 8019778:	2000b274 	.word	0x2000b274
 801977c:	08027e0c 	.word	0x08027e0c
 8019780:	08028e81 	.word	0x08028e81
 8019784:	08028dbd 	.word	0x08028dbd
 8019788:	2000b26c 	.word	0x2000b26c
 801978c:	2000b270 	.word	0x2000b270
 8019790:	2000b254 	.word	0x2000b254
 8019794:	2000b1a0 	.word	0x2000b1a0
 8019798:	2000b1a2 	.word	0x2000b1a2

0801979c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801979c:	4b18      	ldr	r3, [pc, #96]	; (8019800 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	b34b      	cbz	r3, 80197f6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80197a2:	4a18      	ldr	r2, [pc, #96]	; (8019804 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80197a4:	8800      	ldrh	r0, [r0, #0]
 80197a6:	8812      	ldrh	r2, [r2, #0]
 80197a8:	4290      	cmp	r0, r2
 80197aa:	d211      	bcs.n	80197d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 80197ac:	2214      	movs	r2, #20
 80197ae:	fb02 3300 	mla	r3, r2, r0, r3
 80197b2:	8a1a      	ldrh	r2, [r3, #16]
 80197b4:	8919      	ldrh	r1, [r3, #8]
 80197b6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80197ba:	428a      	cmp	r2, r1
 80197bc:	db1d      	blt.n	80197fa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 80197be:	8a58      	ldrh	r0, [r3, #18]
 80197c0:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80197c4:	895b      	ldrh	r3, [r3, #10]
 80197c6:	4298      	cmp	r0, r3
 80197c8:	bfac      	ite	ge
 80197ca:	2000      	movge	r0, #0
 80197cc:	2001      	movlt	r0, #1
 80197ce:	4770      	bx	lr
 80197d0:	4b0d      	ldr	r3, [pc, #52]	; (8019808 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80197d2:	881b      	ldrh	r3, [r3, #0]
 80197d4:	4413      	add	r3, r2
 80197d6:	4298      	cmp	r0, r3
 80197d8:	da0d      	bge.n	80197f6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80197da:	4b0c      	ldr	r3, [pc, #48]	; (801980c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 80197dc:	1a80      	subs	r0, r0, r2
 80197de:	220e      	movs	r2, #14
 80197e0:	681b      	ldr	r3, [r3, #0]
 80197e2:	fb02 3300 	mla	r3, r2, r0, r3
 80197e6:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80197ea:	891a      	ldrh	r2, [r3, #8]
 80197ec:	4291      	cmp	r1, r2
 80197ee:	db04      	blt.n	80197fa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 80197f0:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80197f4:	e7e6      	b.n	80197c4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 80197f6:	2000      	movs	r0, #0
 80197f8:	4770      	bx	lr
 80197fa:	2001      	movs	r0, #1
 80197fc:	4770      	bx	lr
 80197fe:	bf00      	nop
 8019800:	2000b274 	.word	0x2000b274
 8019804:	2000b26c 	.word	0x2000b26c
 8019808:	2000b270 	.word	0x2000b270
 801980c:	2000b254 	.word	0x2000b254

08019810 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8019810:	b508      	push	{r3, lr}
 8019812:	4b12      	ldr	r3, [pc, #72]	; (801985c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8019814:	6819      	ldr	r1, [r3, #0]
 8019816:	b931      	cbnz	r1, 8019826 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8019818:	4b11      	ldr	r3, [pc, #68]	; (8019860 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801981a:	f240 3132 	movw	r1, #818	; 0x332
 801981e:	4a11      	ldr	r2, [pc, #68]	; (8019864 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8019820:	4811      	ldr	r0, [pc, #68]	; (8019868 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8019822:	f009 fc3f 	bl	80230a4 <__assert_func>
 8019826:	8803      	ldrh	r3, [r0, #0]
 8019828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801982c:	4293      	cmp	r3, r2
 801982e:	d012      	beq.n	8019856 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8019830:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019834:	4293      	cmp	r3, r2
 8019836:	d103      	bne.n	8019840 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8019838:	4b0c      	ldr	r3, [pc, #48]	; (801986c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801983e:	bd08      	pop	{r3, pc}
 8019840:	4a0b      	ldr	r2, [pc, #44]	; (8019870 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8019842:	6812      	ldr	r2, [r2, #0]
 8019844:	b11a      	cbz	r2, 801984e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8019846:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801984a:	2800      	cmp	r0, #0
 801984c:	d1f7      	bne.n	801983e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801984e:	2214      	movs	r2, #20
 8019850:	4353      	muls	r3, r2
 8019852:	58c8      	ldr	r0, [r1, r3]
 8019854:	e7f3      	b.n	801983e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8019856:	2000      	movs	r0, #0
 8019858:	e7f1      	b.n	801983e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801985a:	bf00      	nop
 801985c:	2000b274 	.word	0x2000b274
 8019860:	08027e0c 	.word	0x08027e0c
 8019864:	08028eb7 	.word	0x08028eb7
 8019868:	08028dbd 	.word	0x08028dbd
 801986c:	2000b1ac 	.word	0x2000b1ac
 8019870:	2000b250 	.word	0x2000b250

08019874 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8019874:	8802      	ldrh	r2, [r0, #0]
 8019876:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801987a:	429a      	cmp	r2, r3
 801987c:	d840      	bhi.n	8019900 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801987e:	4b21      	ldr	r3, [pc, #132]	; (8019904 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 8019880:	881b      	ldrh	r3, [r3, #0]
 8019882:	429a      	cmp	r2, r3
 8019884:	d220      	bcs.n	80198c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 8019886:	4b20      	ldr	r3, [pc, #128]	; (8019908 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8019888:	6819      	ldr	r1, [r3, #0]
 801988a:	2314      	movs	r3, #20
 801988c:	fb03 1302 	mla	r3, r3, r2, r1
 8019890:	6858      	ldr	r0, [r3, #4]
 8019892:	2800      	cmp	r0, #0
 8019894:	d035      	beq.n	8019902 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019896:	491d      	ldr	r1, [pc, #116]	; (801990c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8019898:	6809      	ldr	r1, [r1, #0]
 801989a:	2900      	cmp	r1, #0
 801989c:	d031      	beq.n	8019902 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801989e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80198a2:	b371      	cbz	r1, 8019902 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80198a4:	895a      	ldrh	r2, [r3, #10]
 80198a6:	8918      	ldrh	r0, [r3, #8]
 80198a8:	4350      	muls	r0, r2
 80198aa:	7c5a      	ldrb	r2, [r3, #17]
 80198ac:	7cdb      	ldrb	r3, [r3, #19]
 80198ae:	0952      	lsrs	r2, r2, #5
 80198b0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80198b4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80198b8:	2b0b      	cmp	r3, #11
 80198ba:	bf18      	it	ne
 80198bc:	0040      	lslne	r0, r0, #1
 80198be:	3003      	adds	r0, #3
 80198c0:	f020 0003 	bic.w	r0, r0, #3
 80198c4:	4408      	add	r0, r1
 80198c6:	4770      	bx	lr
 80198c8:	4911      	ldr	r1, [pc, #68]	; (8019910 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80198ca:	8809      	ldrh	r1, [r1, #0]
 80198cc:	4419      	add	r1, r3
 80198ce:	428a      	cmp	r2, r1
 80198d0:	da16      	bge.n	8019900 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 80198d2:	4910      	ldr	r1, [pc, #64]	; (8019914 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80198d4:	1ad3      	subs	r3, r2, r3
 80198d6:	200e      	movs	r0, #14
 80198d8:	6809      	ldr	r1, [r1, #0]
 80198da:	fb00 1303 	mla	r3, r0, r3, r1
 80198de:	7b19      	ldrb	r1, [r3, #12]
 80198e0:	f001 011f 	and.w	r1, r1, #31
 80198e4:	290b      	cmp	r1, #11
 80198e6:	d10b      	bne.n	8019900 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 80198e8:	8919      	ldrh	r1, [r3, #8]
 80198ea:	8958      	ldrh	r0, [r3, #10]
 80198ec:	4b07      	ldr	r3, [pc, #28]	; (801990c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80198ee:	4348      	muls	r0, r1
 80198f0:	6819      	ldr	r1, [r3, #0]
 80198f2:	3003      	adds	r0, #3
 80198f4:	f020 0303 	bic.w	r3, r0, #3
 80198f8:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80198fc:	4418      	add	r0, r3
 80198fe:	4770      	bx	lr
 8019900:	2000      	movs	r0, #0
 8019902:	4770      	bx	lr
 8019904:	2000b26c 	.word	0x2000b26c
 8019908:	2000b274 	.word	0x2000b274
 801990c:	2000b250 	.word	0x2000b250
 8019910:	2000b270 	.word	0x2000b270
 8019914:	2000b254 	.word	0x2000b254

08019918 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8019918:	4b19      	ldr	r3, [pc, #100]	; (8019980 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801991a:	6819      	ldr	r1, [r3, #0]
 801991c:	8803      	ldrh	r3, [r0, #0]
 801991e:	b1e9      	cbz	r1, 801995c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8019920:	4a18      	ldr	r2, [pc, #96]	; (8019984 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8019922:	8812      	ldrh	r2, [r2, #0]
 8019924:	429a      	cmp	r2, r3
 8019926:	d90a      	bls.n	801993e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8019928:	2214      	movs	r2, #20
 801992a:	fb02 1303 	mla	r3, r2, r3, r1
 801992e:	7c58      	ldrb	r0, [r3, #17]
 8019930:	0942      	lsrs	r2, r0, #5
 8019932:	7cd8      	ldrb	r0, [r3, #19]
 8019934:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8019938:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801993c:	4770      	bx	lr
 801993e:	4912      	ldr	r1, [pc, #72]	; (8019988 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8019940:	8809      	ldrh	r1, [r1, #0]
 8019942:	4411      	add	r1, r2
 8019944:	428b      	cmp	r3, r1
 8019946:	da09      	bge.n	801995c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8019948:	1a9b      	subs	r3, r3, r2
 801994a:	4a10      	ldr	r2, [pc, #64]	; (801998c <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801994c:	210e      	movs	r1, #14
 801994e:	6812      	ldr	r2, [r2, #0]
 8019950:	fb01 2303 	mla	r3, r1, r3, r2
 8019954:	7b18      	ldrb	r0, [r3, #12]
 8019956:	f000 001f 	and.w	r0, r0, #31
 801995a:	4770      	bx	lr
 801995c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019960:	4293      	cmp	r3, r2
 8019962:	d10a      	bne.n	801997a <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 8019964:	4b0a      	ldr	r3, [pc, #40]	; (8019990 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 8019966:	681b      	ldr	r3, [r3, #0]
 8019968:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801996c:	b10a      	cbz	r2, 8019972 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801996e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019970:	b900      	cbnz	r0, 8019974 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8019972:	6898      	ldr	r0, [r3, #8]
 8019974:	6803      	ldr	r3, [r0, #0]
 8019976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019978:	4718      	bx	r3
 801997a:	2000      	movs	r0, #0
 801997c:	4770      	bx	lr
 801997e:	bf00      	nop
 8019980:	2000b274 	.word	0x2000b274
 8019984:	2000b26c 	.word	0x2000b26c
 8019988:	2000b270 	.word	0x2000b270
 801998c:	2000b254 	.word	0x2000b254
 8019990:	2000b1ac 	.word	0x2000b1ac

08019994 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8019994:	2018      	movs	r0, #24
 8019996:	4770      	bx	lr

08019998 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8019998:	2001      	movs	r0, #1
 801999a:	4770      	bx	lr

0801999c <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801999c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80199a0:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 80199a4:	4770      	bx	lr

080199a6 <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 80199a6:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80199aa:	4770      	bx	lr

080199ac <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 80199ac:	f3c1 2007 	ubfx	r0, r1, #8, #8
 80199b0:	4770      	bx	lr

080199b2 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 80199b2:	b2c8      	uxtb	r0, r1
 80199b4:	4770      	bx	lr

080199b6 <_ZN8touchgfx8LCD24bpp4initEv>:
 80199b6:	4770      	bx	lr

080199b8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80199b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199bc:	b085      	sub	sp, #20
 80199be:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80199c0:	9203      	str	r2, [sp, #12]
 80199c2:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 80199c6:	6878      	ldr	r0, [r7, #4]
 80199c8:	9201      	str	r2, [sp, #4]
 80199ca:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80199cc:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 80199d0:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 80199d4:	fa1f fc84 	uxth.w	ip, r4
 80199d8:	43e4      	mvns	r4, r4
 80199da:	9100      	str	r1, [sp, #0]
 80199dc:	b2e4      	uxtb	r4, r4
 80199de:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80199e2:	fb00 2505 	mla	r5, r0, r5, r2
 80199e6:	683a      	ldr	r2, [r7, #0]
 80199e8:	6877      	ldr	r7, [r6, #4]
 80199ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80199ee:	3704      	adds	r7, #4
 80199f0:	4415      	add	r5, r2
 80199f2:	6832      	ldr	r2, [r6, #0]
 80199f4:	9202      	str	r2, [sp, #8]
 80199f6:	9a00      	ldr	r2, [sp, #0]
 80199f8:	2a00      	cmp	r2, #0
 80199fa:	dc03      	bgt.n	8019a04 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 80199fc:	9a03      	ldr	r2, [sp, #12]
 80199fe:	2a00      	cmp	r2, #0
 8019a00:	f340 8116 	ble.w	8019c30 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8019a04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019a06:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019a0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019a0c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	dd0f      	ble.n	8019a34 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8019a14:	1406      	asrs	r6, r0, #16
 8019a16:	d406      	bmi.n	8019a26 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019a18:	4546      	cmp	r6, r8
 8019a1a:	da04      	bge.n	8019a26 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019a1c:	1416      	asrs	r6, r2, #16
 8019a1e:	d402      	bmi.n	8019a26 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019a20:	9901      	ldr	r1, [sp, #4]
 8019a22:	428e      	cmp	r6, r1
 8019a24:	db07      	blt.n	8019a36 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8019a26:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019a28:	3b01      	subs	r3, #1
 8019a2a:	3503      	adds	r5, #3
 8019a2c:	4408      	add	r0, r1
 8019a2e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019a30:	440a      	add	r2, r1
 8019a32:	e7ed      	b.n	8019a10 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8019a34:	d011      	beq.n	8019a5a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8019a36:	1e5e      	subs	r6, r3, #1
 8019a38:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019a3a:	fb01 0e06 	mla	lr, r1, r6, r0
 8019a3e:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8019a42:	d548      	bpl.n	8019ad6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8019a44:	4699      	mov	r9, r3
 8019a46:	462e      	mov	r6, r5
 8019a48:	f1b9 0f00 	cmp.w	r9, #0
 8019a4c:	f300 809e 	bgt.w	8019b8c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 8019a50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019a54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019a58:	441d      	add	r5, r3
 8019a5a:	9b00      	ldr	r3, [sp, #0]
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	f340 80e7 	ble.w	8019c30 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8019a62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019a66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019a68:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019a6c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019a70:	eef0 6a62 	vmov.f32	s13, s5
 8019a74:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019a78:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019a7c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019a80:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8019a84:	eef0 6a43 	vmov.f32	s13, s6
 8019a88:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019a8c:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8019a90:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019a94:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019a98:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019a9c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019aa0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019aa4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019aa8:	ee12 2a90 	vmov	r2, s5
 8019aac:	eef0 2a47 	vmov.f32	s5, s14
 8019ab0:	fb92 f3f3 	sdiv	r3, r2, r3
 8019ab4:	ee13 2a10 	vmov	r2, s6
 8019ab8:	9311      	str	r3, [sp, #68]	; 0x44
 8019aba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019abc:	eeb0 3a67 	vmov.f32	s6, s15
 8019ac0:	fb92 f3f3 	sdiv	r3, r2, r3
 8019ac4:	9312      	str	r3, [sp, #72]	; 0x48
 8019ac6:	9b00      	ldr	r3, [sp, #0]
 8019ac8:	9a03      	ldr	r2, [sp, #12]
 8019aca:	3b01      	subs	r3, #1
 8019acc:	9300      	str	r3, [sp, #0]
 8019ace:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019ad0:	bf08      	it	eq
 8019ad2:	4613      	moveq	r3, r2
 8019ad4:	e78f      	b.n	80199f6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8019ad6:	45c6      	cmp	lr, r8
 8019ad8:	dab4      	bge.n	8019a44 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8019ada:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019adc:	fb01 2606 	mla	r6, r1, r6, r2
 8019ae0:	1436      	asrs	r6, r6, #16
 8019ae2:	d4af      	bmi.n	8019a44 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8019ae4:	9901      	ldr	r1, [sp, #4]
 8019ae6:	428e      	cmp	r6, r1
 8019ae8:	daac      	bge.n	8019a44 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8019aea:	1cee      	adds	r6, r5, #3
 8019aec:	4699      	mov	r9, r3
 8019aee:	f1b9 0f00 	cmp.w	r9, #0
 8019af2:	f106 0603 	add.w	r6, r6, #3
 8019af6:	ddab      	ble.n	8019a50 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8019af8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8019afc:	9902      	ldr	r1, [sp, #8]
 8019afe:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8019b02:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8019b06:	fb08 1e0e 	mla	lr, r8, lr, r1
 8019b0a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019b0c:	fb1b fb04 	smulbb	fp, fp, r4
 8019b10:	f109 39ff 	add.w	r9, r9, #4294967295
 8019b14:	f81e e00a 	ldrb.w	lr, [lr, sl]
 8019b18:	4408      	add	r0, r1
 8019b1a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019b1c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019b20:	440a      	add	r2, r1
 8019b22:	eb07 0a0e 	add.w	sl, r7, lr
 8019b26:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8019b2a:	fb0e be0c 	mla	lr, lr, ip, fp
 8019b2e:	fa1f fe8e 	uxth.w	lr, lr
 8019b32:	f10e 0b01 	add.w	fp, lr, #1
 8019b36:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8019b3a:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8019b3e:	fb1b fb04 	smulbb	fp, fp, r4
 8019b42:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019b46:	f806 ec06 	strb.w	lr, [r6, #-6]
 8019b4a:	f89a e001 	ldrb.w	lr, [sl, #1]
 8019b4e:	fb0e be0c 	mla	lr, lr, ip, fp
 8019b52:	fa1f fe8e 	uxth.w	lr, lr
 8019b56:	f10e 0b01 	add.w	fp, lr, #1
 8019b5a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8019b5e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019b62:	f806 ec05 	strb.w	lr, [r6, #-5]
 8019b66:	f89a e002 	ldrb.w	lr, [sl, #2]
 8019b6a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8019b6e:	fb1a fa04 	smulbb	sl, sl, r4
 8019b72:	fb0e ae0c 	mla	lr, lr, ip, sl
 8019b76:	fa1f fe8e 	uxth.w	lr, lr
 8019b7a:	f10e 0a01 	add.w	sl, lr, #1
 8019b7e:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8019b82:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019b86:	f806 ec04 	strb.w	lr, [r6, #-4]
 8019b8a:	e7b0      	b.n	8019aee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8019b8c:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8019b90:	d446      	bmi.n	8019c20 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8019b92:	45c2      	cmp	sl, r8
 8019b94:	da44      	bge.n	8019c20 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8019b96:	ea5f 4e22 	movs.w	lr, r2, asr #16
 8019b9a:	d441      	bmi.n	8019c20 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8019b9c:	9901      	ldr	r1, [sp, #4]
 8019b9e:	458e      	cmp	lr, r1
 8019ba0:	da3e      	bge.n	8019c20 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8019ba2:	9902      	ldr	r1, [sp, #8]
 8019ba4:	f896 b000 	ldrb.w	fp, [r6]
 8019ba8:	fb08 1e0e 	mla	lr, r8, lr, r1
 8019bac:	fb1b fb04 	smulbb	fp, fp, r4
 8019bb0:	f81e e00a 	ldrb.w	lr, [lr, sl]
 8019bb4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019bb8:	eb07 0a0e 	add.w	sl, r7, lr
 8019bbc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8019bc0:	fb0e be0c 	mla	lr, lr, ip, fp
 8019bc4:	fa1f fe8e 	uxth.w	lr, lr
 8019bc8:	f10e 0b01 	add.w	fp, lr, #1
 8019bcc:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8019bd0:	f896 b001 	ldrb.w	fp, [r6, #1]
 8019bd4:	fb1b fb04 	smulbb	fp, fp, r4
 8019bd8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019bdc:	f886 e000 	strb.w	lr, [r6]
 8019be0:	f89a e001 	ldrb.w	lr, [sl, #1]
 8019be4:	fb0e be0c 	mla	lr, lr, ip, fp
 8019be8:	fa1f fe8e 	uxth.w	lr, lr
 8019bec:	f10e 0b01 	add.w	fp, lr, #1
 8019bf0:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8019bf4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019bf8:	f886 e001 	strb.w	lr, [r6, #1]
 8019bfc:	f89a e002 	ldrb.w	lr, [sl, #2]
 8019c00:	f896 a002 	ldrb.w	sl, [r6, #2]
 8019c04:	fb1a fa04 	smulbb	sl, sl, r4
 8019c08:	fb0e ae0c 	mla	lr, lr, ip, sl
 8019c0c:	fa1f fe8e 	uxth.w	lr, lr
 8019c10:	f10e 0a01 	add.w	sl, lr, #1
 8019c14:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8019c18:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019c1c:	f886 e002 	strb.w	lr, [r6, #2]
 8019c20:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019c22:	3603      	adds	r6, #3
 8019c24:	f109 39ff 	add.w	r9, r9, #4294967295
 8019c28:	4408      	add	r0, r1
 8019c2a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019c2c:	440a      	add	r2, r1
 8019c2e:	e70b      	b.n	8019a48 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8019c30:	b005      	add	sp, #20
 8019c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019c36 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019c36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c3a:	b085      	sub	sp, #20
 8019c3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019c40:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019c42:	9203      	str	r2, [sp, #12]
 8019c44:	6870      	ldr	r0, [r6, #4]
 8019c46:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8019c48:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8019c4c:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8019c50:	9101      	str	r1, [sp, #4]
 8019c52:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019c56:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 8019c5a:	fb00 2404 	mla	r4, r0, r4, r2
 8019c5e:	6832      	ldr	r2, [r6, #0]
 8019c60:	686e      	ldr	r6, [r5, #4]
 8019c62:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019c66:	3604      	adds	r6, #4
 8019c68:	4414      	add	r4, r2
 8019c6a:	682a      	ldr	r2, [r5, #0]
 8019c6c:	9202      	str	r2, [sp, #8]
 8019c6e:	9a01      	ldr	r2, [sp, #4]
 8019c70:	2a00      	cmp	r2, #0
 8019c72:	dc03      	bgt.n	8019c7c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 8019c74:	9a03      	ldr	r2, [sp, #12]
 8019c76:	2a00      	cmp	r2, #0
 8019c78:	f340 80b2 	ble.w	8019de0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 8019c7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019c7e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019c82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019c84:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	dd0c      	ble.n	8019ca6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8019c8c:	1405      	asrs	r5, r0, #16
 8019c8e:	d405      	bmi.n	8019c9c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8019c90:	4575      	cmp	r5, lr
 8019c92:	da03      	bge.n	8019c9c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8019c94:	1415      	asrs	r5, r2, #16
 8019c96:	d401      	bmi.n	8019c9c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8019c98:	4545      	cmp	r5, r8
 8019c9a:	db05      	blt.n	8019ca8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8019c9c:	4460      	add	r0, ip
 8019c9e:	443a      	add	r2, r7
 8019ca0:	3b01      	subs	r3, #1
 8019ca2:	3403      	adds	r4, #3
 8019ca4:	e7f0      	b.n	8019c88 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 8019ca6:	d03d      	beq.n	8019d24 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8019ca8:	1e5d      	subs	r5, r3, #1
 8019caa:	fb0c 0905 	mla	r9, ip, r5, r0
 8019cae:	ea5f 4929 	movs.w	r9, r9, asr #16
 8019cb2:	d42c      	bmi.n	8019d0e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8019cb4:	45f1      	cmp	r9, lr
 8019cb6:	da2a      	bge.n	8019d0e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8019cb8:	fb07 2505 	mla	r5, r7, r5, r2
 8019cbc:	142d      	asrs	r5, r5, #16
 8019cbe:	d426      	bmi.n	8019d0e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8019cc0:	4545      	cmp	r5, r8
 8019cc2:	da24      	bge.n	8019d0e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8019cc4:	1ce5      	adds	r5, r4, #3
 8019cc6:	469a      	mov	sl, r3
 8019cc8:	f1ba 0f00 	cmp.w	sl, #0
 8019ccc:	f105 0503 	add.w	r5, r5, #3
 8019cd0:	dd23      	ble.n	8019d1a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8019cd2:	ea4f 4922 	mov.w	r9, r2, asr #16
 8019cd6:	9902      	ldr	r1, [sp, #8]
 8019cd8:	ea4f 4b20 	mov.w	fp, r0, asr #16
 8019cdc:	443a      	add	r2, r7
 8019cde:	fb0e 1909 	mla	r9, lr, r9, r1
 8019ce2:	4460      	add	r0, ip
 8019ce4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019ce8:	f819 900b 	ldrb.w	r9, [r9, fp]
 8019cec:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8019cf0:	eb06 0b09 	add.w	fp, r6, r9
 8019cf4:	f816 9009 	ldrb.w	r9, [r6, r9]
 8019cf8:	f805 9c06 	strb.w	r9, [r5, #-6]
 8019cfc:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8019d00:	f805 9c05 	strb.w	r9, [r5, #-5]
 8019d04:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8019d08:	f805 9c04 	strb.w	r9, [r5, #-4]
 8019d0c:	e7dc      	b.n	8019cc8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8019d0e:	2500      	movs	r5, #0
 8019d10:	eba3 0905 	sub.w	r9, r3, r5
 8019d14:	f1b9 0f00 	cmp.w	r9, #0
 8019d18:	dc3c      	bgt.n	8019d94 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 8019d1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019d1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019d22:	441c      	add	r4, r3
 8019d24:	9b01      	ldr	r3, [sp, #4]
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	dd5a      	ble.n	8019de0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 8019d2a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019d2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d30:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019d34:	eeb0 6a62 	vmov.f32	s12, s5
 8019d38:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019d3c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019d40:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019d44:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019d48:	eeb0 6a43 	vmov.f32	s12, s6
 8019d4c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019d50:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019d54:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019d58:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019d5c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019d60:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019d64:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019d68:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019d6c:	ee12 2a90 	vmov	r2, s5
 8019d70:	eef0 2a47 	vmov.f32	s5, s14
 8019d74:	fb92 fcf3 	sdiv	ip, r2, r3
 8019d78:	ee13 2a10 	vmov	r2, s6
 8019d7c:	eeb0 3a67 	vmov.f32	s6, s15
 8019d80:	fb92 f7f3 	sdiv	r7, r2, r3
 8019d84:	9b01      	ldr	r3, [sp, #4]
 8019d86:	9a03      	ldr	r2, [sp, #12]
 8019d88:	3b01      	subs	r3, #1
 8019d8a:	9301      	str	r3, [sp, #4]
 8019d8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d8e:	bf08      	it	eq
 8019d90:	4613      	moveq	r3, r2
 8019d92:	e76c      	b.n	8019c6e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 8019d94:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8019d98:	d41e      	bmi.n	8019dd8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 8019d9a:	45f2      	cmp	sl, lr
 8019d9c:	da1c      	bge.n	8019dd8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 8019d9e:	ea5f 4922 	movs.w	r9, r2, asr #16
 8019da2:	d419      	bmi.n	8019dd8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 8019da4:	45c1      	cmp	r9, r8
 8019da6:	da17      	bge.n	8019dd8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 8019da8:	9902      	ldr	r1, [sp, #8]
 8019daa:	fb0e 1909 	mla	r9, lr, r9, r1
 8019dae:	f819 900a 	ldrb.w	r9, [r9, sl]
 8019db2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8019db6:	f816 b009 	ldrb.w	fp, [r6, r9]
 8019dba:	eb06 0a09 	add.w	sl, r6, r9
 8019dbe:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 8019dc2:	f804 b009 	strb.w	fp, [r4, r9]
 8019dc6:	44a1      	add	r9, r4
 8019dc8:	f89a b001 	ldrb.w	fp, [sl, #1]
 8019dcc:	f889 b001 	strb.w	fp, [r9, #1]
 8019dd0:	f89a a002 	ldrb.w	sl, [sl, #2]
 8019dd4:	f889 a002 	strb.w	sl, [r9, #2]
 8019dd8:	4460      	add	r0, ip
 8019dda:	443a      	add	r2, r7
 8019ddc:	3501      	adds	r5, #1
 8019dde:	e797      	b.n	8019d10 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8019de0:	b005      	add	sp, #20
 8019de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019de6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019de6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dea:	b087      	sub	sp, #28
 8019dec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019df0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8019df2:	9204      	str	r2, [sp, #16]
 8019df4:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8019df8:	6870      	ldr	r0, [r6, #4]
 8019dfa:	9205      	str	r2, [sp, #20]
 8019dfc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8019dfe:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 8019e02:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 8019e06:	9101      	str	r1, [sp, #4]
 8019e08:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8019e0c:	fb00 2505 	mla	r5, r0, r5, r2
 8019e10:	6832      	ldr	r2, [r6, #0]
 8019e12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019e16:	4415      	add	r5, r2
 8019e18:	6822      	ldr	r2, [r4, #0]
 8019e1a:	9202      	str	r2, [sp, #8]
 8019e1c:	6862      	ldr	r2, [r4, #4]
 8019e1e:	3204      	adds	r2, #4
 8019e20:	9203      	str	r2, [sp, #12]
 8019e22:	9a01      	ldr	r2, [sp, #4]
 8019e24:	2a00      	cmp	r2, #0
 8019e26:	dc03      	bgt.n	8019e30 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 8019e28:	9a04      	ldr	r2, [sp, #16]
 8019e2a:	2a00      	cmp	r2, #0
 8019e2c:	f340 8124 	ble.w	801a078 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8019e30:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019e32:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8019e36:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019e38:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	dd0e      	ble.n	8019e5e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8019e40:	1422      	asrs	r2, r4, #16
 8019e42:	d405      	bmi.n	8019e50 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8019e44:	4572      	cmp	r2, lr
 8019e46:	da03      	bge.n	8019e50 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8019e48:	1402      	asrs	r2, r0, #16
 8019e4a:	d401      	bmi.n	8019e50 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8019e4c:	4542      	cmp	r2, r8
 8019e4e:	db07      	blt.n	8019e60 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8019e50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019e52:	3b01      	subs	r3, #1
 8019e54:	3503      	adds	r5, #3
 8019e56:	4414      	add	r4, r2
 8019e58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019e5a:	4410      	add	r0, r2
 8019e5c:	e7ee      	b.n	8019e3c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 8019e5e:	d010      	beq.n	8019e82 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8019e60:	1e5a      	subs	r2, r3, #1
 8019e62:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019e64:	fb06 4602 	mla	r6, r6, r2, r4
 8019e68:	1436      	asrs	r6, r6, #16
 8019e6a:	d546      	bpl.n	8019efa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8019e6c:	4699      	mov	r9, r3
 8019e6e:	462f      	mov	r7, r5
 8019e70:	f1b9 0f00 	cmp.w	r9, #0
 8019e74:	f300 80a5 	bgt.w	8019fc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 8019e78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019e7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019e80:	441d      	add	r5, r3
 8019e82:	9b01      	ldr	r3, [sp, #4]
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	f340 80f7 	ble.w	801a078 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8019e8a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019e8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019e90:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019e94:	eeb0 6a62 	vmov.f32	s12, s5
 8019e98:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019e9c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019ea0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019ea4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8019ea8:	eeb0 6a43 	vmov.f32	s12, s6
 8019eac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019eb0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8019eb4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019eb8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019ebc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019ec0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019ec4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019ec8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019ecc:	ee12 2a90 	vmov	r2, s5
 8019ed0:	eef0 2a47 	vmov.f32	s5, s14
 8019ed4:	fb92 f3f3 	sdiv	r3, r2, r3
 8019ed8:	ee13 2a10 	vmov	r2, s6
 8019edc:	9313      	str	r3, [sp, #76]	; 0x4c
 8019ede:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019ee0:	eeb0 3a67 	vmov.f32	s6, s15
 8019ee4:	fb92 f3f3 	sdiv	r3, r2, r3
 8019ee8:	9314      	str	r3, [sp, #80]	; 0x50
 8019eea:	9b01      	ldr	r3, [sp, #4]
 8019eec:	9a04      	ldr	r2, [sp, #16]
 8019eee:	3b01      	subs	r3, #1
 8019ef0:	9301      	str	r3, [sp, #4]
 8019ef2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019ef4:	bf08      	it	eq
 8019ef6:	4613      	moveq	r3, r2
 8019ef8:	e793      	b.n	8019e22 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 8019efa:	4576      	cmp	r6, lr
 8019efc:	dab6      	bge.n	8019e6c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8019efe:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8019f00:	fb06 0202 	mla	r2, r6, r2, r0
 8019f04:	1412      	asrs	r2, r2, #16
 8019f06:	d4b1      	bmi.n	8019e6c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8019f08:	4542      	cmp	r2, r8
 8019f0a:	daaf      	bge.n	8019e6c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8019f0c:	1cef      	adds	r7, r5, #3
 8019f0e:	4699      	mov	r9, r3
 8019f10:	f1b9 0f00 	cmp.w	r9, #0
 8019f14:	ddb0      	ble.n	8019e78 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8019f16:	9902      	ldr	r1, [sp, #8]
 8019f18:	1402      	asrs	r2, r0, #16
 8019f1a:	1426      	asrs	r6, r4, #16
 8019f1c:	fb0e 1202 	mla	r2, lr, r2, r1
 8019f20:	9903      	ldr	r1, [sp, #12]
 8019f22:	5d92      	ldrb	r2, [r2, r6]
 8019f24:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8019f28:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 8019f2c:	d041      	beq.n	8019fb2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 8019f2e:	9a05      	ldr	r2, [sp, #20]
 8019f30:	fa5f fb86 	uxtb.w	fp, r6
 8019f34:	fb02 fc0c 	mul.w	ip, r2, ip
 8019f38:	f10c 0201 	add.w	r2, ip, #1
 8019f3c:	eb02 222c 	add.w	r2, r2, ip, asr #8
 8019f40:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 8019f44:	1212      	asrs	r2, r2, #8
 8019f46:	fa1f fa82 	uxth.w	sl, r2
 8019f4a:	43d2      	mvns	r2, r2
 8019f4c:	fb1b fb0a 	smulbb	fp, fp, sl
 8019f50:	b2d2      	uxtb	r2, r2
 8019f52:	fb0c bc02 	mla	ip, ip, r2, fp
 8019f56:	fa1f fc8c 	uxth.w	ip, ip
 8019f5a:	f10c 0b01 	add.w	fp, ip, #1
 8019f5e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8019f62:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8019f66:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8019f6a:	fb1b fb0a 	smulbb	fp, fp, sl
 8019f6e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019f72:	fb16 fa0a 	smulbb	sl, r6, sl
 8019f76:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8019f7a:	f807 cc03 	strb.w	ip, [r7, #-3]
 8019f7e:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 8019f82:	fb06 aa02 	mla	sl, r6, r2, sl
 8019f86:	fb0c bc02 	mla	ip, ip, r2, fp
 8019f8a:	fa1f fa8a 	uxth.w	sl, sl
 8019f8e:	fa1f fc8c 	uxth.w	ip, ip
 8019f92:	f10a 0601 	add.w	r6, sl, #1
 8019f96:	f10c 0b01 	add.w	fp, ip, #1
 8019f9a:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8019f9e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8019fa2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019fa6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019faa:	f807 ac01 	strb.w	sl, [r7, #-1]
 8019fae:	f807 cc02 	strb.w	ip, [r7, #-2]
 8019fb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019fb4:	3703      	adds	r7, #3
 8019fb6:	f109 39ff 	add.w	r9, r9, #4294967295
 8019fba:	4414      	add	r4, r2
 8019fbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019fbe:	4410      	add	r0, r2
 8019fc0:	e7a6      	b.n	8019f10 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 8019fc2:	1426      	asrs	r6, r4, #16
 8019fc4:	d450      	bmi.n	801a068 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8019fc6:	4576      	cmp	r6, lr
 8019fc8:	da4e      	bge.n	801a068 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8019fca:	1402      	asrs	r2, r0, #16
 8019fcc:	d44c      	bmi.n	801a068 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8019fce:	4542      	cmp	r2, r8
 8019fd0:	da4a      	bge.n	801a068 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8019fd2:	9902      	ldr	r1, [sp, #8]
 8019fd4:	fb0e 1202 	mla	r2, lr, r2, r1
 8019fd8:	9903      	ldr	r1, [sp, #12]
 8019fda:	5d92      	ldrb	r2, [r2, r6]
 8019fdc:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8019fe0:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 8019fe4:	d040      	beq.n	801a068 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8019fe6:	9a05      	ldr	r2, [sp, #20]
 8019fe8:	fa5f fb86 	uxtb.w	fp, r6
 8019fec:	fb02 fc0c 	mul.w	ip, r2, ip
 8019ff0:	f10c 0201 	add.w	r2, ip, #1
 8019ff4:	eb02 222c 	add.w	r2, r2, ip, asr #8
 8019ff8:	f897 c000 	ldrb.w	ip, [r7]
 8019ffc:	1212      	asrs	r2, r2, #8
 8019ffe:	fa1f fa82 	uxth.w	sl, r2
 801a002:	43d2      	mvns	r2, r2
 801a004:	fb1b fb0a 	smulbb	fp, fp, sl
 801a008:	b2d2      	uxtb	r2, r2
 801a00a:	fb0c bc02 	mla	ip, ip, r2, fp
 801a00e:	fa1f fc8c 	uxth.w	ip, ip
 801a012:	f10c 0b01 	add.w	fp, ip, #1
 801a016:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801a01a:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801a01e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801a022:	fb1b fb0a 	smulbb	fp, fp, sl
 801a026:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a02a:	fb16 fa0a 	smulbb	sl, r6, sl
 801a02e:	78be      	ldrb	r6, [r7, #2]
 801a030:	f887 c000 	strb.w	ip, [r7]
 801a034:	f897 c001 	ldrb.w	ip, [r7, #1]
 801a038:	fb06 aa02 	mla	sl, r6, r2, sl
 801a03c:	fb0c bc02 	mla	ip, ip, r2, fp
 801a040:	fa1f fa8a 	uxth.w	sl, sl
 801a044:	fa1f fc8c 	uxth.w	ip, ip
 801a048:	f10a 0601 	add.w	r6, sl, #1
 801a04c:	f10c 0b01 	add.w	fp, ip, #1
 801a050:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801a054:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801a058:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a05c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a060:	f887 a002 	strb.w	sl, [r7, #2]
 801a064:	f887 c001 	strb.w	ip, [r7, #1]
 801a068:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a06a:	3703      	adds	r7, #3
 801a06c:	f109 39ff 	add.w	r9, r9, #4294967295
 801a070:	4414      	add	r4, r2
 801a072:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a074:	4410      	add	r0, r2
 801a076:	e6fb      	b.n	8019e70 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801a078:	b007      	add	sp, #28
 801a07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a07e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a07e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a082:	b085      	sub	sp, #20
 801a084:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a088:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a08a:	9203      	str	r2, [sp, #12]
 801a08c:	6870      	ldr	r0, [r6, #4]
 801a08e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801a090:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801a094:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801a098:	9100      	str	r1, [sp, #0]
 801a09a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a09e:	fb00 2404 	mla	r4, r0, r4, r2
 801a0a2:	6832      	ldr	r2, [r6, #0]
 801a0a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a0a8:	4414      	add	r4, r2
 801a0aa:	682a      	ldr	r2, [r5, #0]
 801a0ac:	9201      	str	r2, [sp, #4]
 801a0ae:	686a      	ldr	r2, [r5, #4]
 801a0b0:	3204      	adds	r2, #4
 801a0b2:	9202      	str	r2, [sp, #8]
 801a0b4:	9a00      	ldr	r2, [sp, #0]
 801a0b6:	2a00      	cmp	r2, #0
 801a0b8:	dc03      	bgt.n	801a0c2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801a0ba:	9a03      	ldr	r2, [sp, #12]
 801a0bc:	2a00      	cmp	r2, #0
 801a0be:	f340 8131 	ble.w	801a324 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801a0c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a0c4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a0c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a0ca:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	dd0e      	ble.n	801a0f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801a0d2:	1405      	asrs	r5, r0, #16
 801a0d4:	d405      	bmi.n	801a0e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801a0d6:	4575      	cmp	r5, lr
 801a0d8:	da03      	bge.n	801a0e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801a0da:	1415      	asrs	r5, r2, #16
 801a0dc:	d401      	bmi.n	801a0e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801a0de:	4545      	cmp	r5, r8
 801a0e0:	db07      	blt.n	801a0f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801a0e2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a0e4:	3b01      	subs	r3, #1
 801a0e6:	3403      	adds	r4, #3
 801a0e8:	4428      	add	r0, r5
 801a0ea:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a0ec:	442a      	add	r2, r5
 801a0ee:	e7ee      	b.n	801a0ce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801a0f0:	d06f      	beq.n	801a1d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801a0f2:	1e5d      	subs	r5, r3, #1
 801a0f4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a0f6:	fb06 0605 	mla	r6, r6, r5, r0
 801a0fa:	1436      	asrs	r6, r6, #16
 801a0fc:	d460      	bmi.n	801a1c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801a0fe:	4576      	cmp	r6, lr
 801a100:	da5e      	bge.n	801a1c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801a102:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801a104:	fb06 2505 	mla	r5, r6, r5, r2
 801a108:	142d      	asrs	r5, r5, #16
 801a10a:	d459      	bmi.n	801a1c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801a10c:	4545      	cmp	r5, r8
 801a10e:	da57      	bge.n	801a1c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801a110:	1ce5      	adds	r5, r4, #3
 801a112:	469a      	mov	sl, r3
 801a114:	f1ba 0f00 	cmp.w	sl, #0
 801a118:	dd56      	ble.n	801a1c8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801a11a:	9901      	ldr	r1, [sp, #4]
 801a11c:	1416      	asrs	r6, r2, #16
 801a11e:	1407      	asrs	r7, r0, #16
 801a120:	fb0e 1606 	mla	r6, lr, r6, r1
 801a124:	9902      	ldr	r1, [sp, #8]
 801a126:	5df6      	ldrb	r6, [r6, r7]
 801a128:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801a12c:	0e37      	lsrs	r7, r6, #24
 801a12e:	2fff      	cmp	r7, #255	; 0xff
 801a130:	f000 80ef 	beq.w	801a312 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801a134:	fa5f fc87 	uxtb.w	ip, r7
 801a138:	b3d7      	cbz	r7, 801a1b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801a13a:	fa1f f78c 	uxth.w	r7, ip
 801a13e:	ea6f 0c0c 	mvn.w	ip, ip
 801a142:	fa5f fb86 	uxtb.w	fp, r6
 801a146:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801a14a:	fa5f fc8c 	uxtb.w	ip, ip
 801a14e:	fb1b fb07 	smulbb	fp, fp, r7
 801a152:	fb09 b90c 	mla	r9, r9, ip, fp
 801a156:	fa1f f989 	uxth.w	r9, r9
 801a15a:	f109 0b01 	add.w	fp, r9, #1
 801a15e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a162:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801a166:	fb1b fb0c 	smulbb	fp, fp, ip
 801a16a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a16e:	f805 9c03 	strb.w	r9, [r5, #-3]
 801a172:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801a176:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801a17a:	fb09 b907 	mla	r9, r9, r7, fp
 801a17e:	fa1f f989 	uxth.w	r9, r9
 801a182:	f109 0b01 	add.w	fp, r9, #1
 801a186:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a18a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a18e:	f805 9c02 	strb.w	r9, [r5, #-2]
 801a192:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801a196:	fb19 fc0c 	smulbb	ip, r9, ip
 801a19a:	fb06 c607 	mla	r6, r6, r7, ip
 801a19e:	b2b6      	uxth	r6, r6
 801a1a0:	f106 0c01 	add.w	ip, r6, #1
 801a1a4:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801a1a8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a1ac:	f805 cc01 	strb.w	ip, [r5, #-1]
 801a1b0:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a1b2:	3503      	adds	r5, #3
 801a1b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a1b8:	4408      	add	r0, r1
 801a1ba:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a1bc:	440a      	add	r2, r1
 801a1be:	e7a9      	b.n	801a114 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801a1c0:	2600      	movs	r6, #0
 801a1c2:	1b9d      	subs	r5, r3, r6
 801a1c4:	2d00      	cmp	r5, #0
 801a1c6:	dc40      	bgt.n	801a24a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801a1c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a1cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a1d0:	441c      	add	r4, r3
 801a1d2:	9b00      	ldr	r3, [sp, #0]
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	f340 80a5 	ble.w	801a324 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801a1da:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a1de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a1e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a1e4:	eeb0 6a62 	vmov.f32	s12, s5
 801a1e8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a1ec:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a1f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a1f4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a1f8:	eeb0 6a43 	vmov.f32	s12, s6
 801a1fc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a200:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a204:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a208:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a20c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a210:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a214:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a218:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a21c:	ee12 2a90 	vmov	r2, s5
 801a220:	eef0 2a47 	vmov.f32	s5, s14
 801a224:	fb92 f3f3 	sdiv	r3, r2, r3
 801a228:	ee13 2a10 	vmov	r2, s6
 801a22c:	9311      	str	r3, [sp, #68]	; 0x44
 801a22e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a230:	eeb0 3a67 	vmov.f32	s6, s15
 801a234:	fb92 f3f3 	sdiv	r3, r2, r3
 801a238:	9312      	str	r3, [sp, #72]	; 0x48
 801a23a:	9b00      	ldr	r3, [sp, #0]
 801a23c:	9a03      	ldr	r2, [sp, #12]
 801a23e:	3b01      	subs	r3, #1
 801a240:	9300      	str	r3, [sp, #0]
 801a242:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a244:	bf08      	it	eq
 801a246:	4613      	moveq	r3, r2
 801a248:	e734      	b.n	801a0b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801a24a:	1407      	asrs	r7, r0, #16
 801a24c:	d450      	bmi.n	801a2f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801a24e:	4577      	cmp	r7, lr
 801a250:	da4e      	bge.n	801a2f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801a252:	1415      	asrs	r5, r2, #16
 801a254:	d44c      	bmi.n	801a2f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801a256:	4545      	cmp	r5, r8
 801a258:	da4a      	bge.n	801a2f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801a25a:	9901      	ldr	r1, [sp, #4]
 801a25c:	fb0e 1505 	mla	r5, lr, r5, r1
 801a260:	9902      	ldr	r1, [sp, #8]
 801a262:	5ded      	ldrb	r5, [r5, r7]
 801a264:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801a268:	0e2f      	lsrs	r7, r5, #24
 801a26a:	2fff      	cmp	r7, #255	; 0xff
 801a26c:	d046      	beq.n	801a2fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801a26e:	fa5f f987 	uxtb.w	r9, r7
 801a272:	b3ef      	cbz	r7, 801a2f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801a274:	fa1f fc89 	uxth.w	ip, r9
 801a278:	ea6f 0909 	mvn.w	r9, r9
 801a27c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801a280:	fa5f fb85 	uxtb.w	fp, r5
 801a284:	f814 a007 	ldrb.w	sl, [r4, r7]
 801a288:	fa5f f989 	uxtb.w	r9, r9
 801a28c:	fb1b fb0c 	smulbb	fp, fp, ip
 801a290:	fb0a ba09 	mla	sl, sl, r9, fp
 801a294:	fa1f fa8a 	uxth.w	sl, sl
 801a298:	f10a 0b01 	add.w	fp, sl, #1
 801a29c:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801a2a0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a2a4:	f804 a007 	strb.w	sl, [r4, r7]
 801a2a8:	4427      	add	r7, r4
 801a2aa:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a2ae:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801a2b2:	f897 b001 	ldrb.w	fp, [r7, #1]
 801a2b6:	fb1b fb09 	smulbb	fp, fp, r9
 801a2ba:	fb0a ba0c 	mla	sl, sl, ip, fp
 801a2be:	fa1f fa8a 	uxth.w	sl, sl
 801a2c2:	f10a 0b01 	add.w	fp, sl, #1
 801a2c6:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801a2ca:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a2ce:	f887 a001 	strb.w	sl, [r7, #1]
 801a2d2:	f897 a002 	ldrb.w	sl, [r7, #2]
 801a2d6:	fb1a f909 	smulbb	r9, sl, r9
 801a2da:	fb05 950c 	mla	r5, r5, ip, r9
 801a2de:	b2ad      	uxth	r5, r5
 801a2e0:	f105 0901 	add.w	r9, r5, #1
 801a2e4:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801a2e8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a2ec:	f887 9002 	strb.w	r9, [r7, #2]
 801a2f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 801a2f2:	3601      	adds	r6, #1
 801a2f4:	4408      	add	r0, r1
 801a2f6:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a2f8:	440a      	add	r2, r1
 801a2fa:	e762      	b.n	801a1c2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801a2fc:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801a300:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801a304:	55e5      	strb	r5, [r4, r7]
 801a306:	4427      	add	r7, r4
 801a308:	0c2d      	lsrs	r5, r5, #16
 801a30a:	f887 c001 	strb.w	ip, [r7, #1]
 801a30e:	70bd      	strb	r5, [r7, #2]
 801a310:	e7ee      	b.n	801a2f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801a312:	0a37      	lsrs	r7, r6, #8
 801a314:	f805 6c03 	strb.w	r6, [r5, #-3]
 801a318:	0c36      	lsrs	r6, r6, #16
 801a31a:	f805 7c02 	strb.w	r7, [r5, #-2]
 801a31e:	f805 6c01 	strb.w	r6, [r5, #-1]
 801a322:	e745      	b.n	801a1b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801a324:	b005      	add	sp, #20
 801a326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a32a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a32a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a32e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a330:	9201      	str	r2, [sp, #4]
 801a332:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801a336:	6870      	ldr	r0, [r6, #4]
 801a338:	9200      	str	r2, [sp, #0]
 801a33a:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801a33e:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801a342:	fa1f fc85 	uxth.w	ip, r5
 801a346:	43ed      	mvns	r5, r5
 801a348:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801a34c:	b2ed      	uxtb	r5, r5
 801a34e:	fb00 2404 	mla	r4, r0, r4, r2
 801a352:	6832      	ldr	r2, [r6, #0]
 801a354:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a358:	4414      	add	r4, r2
 801a35a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a35c:	f8d2 8000 	ldr.w	r8, [r2]
 801a360:	2900      	cmp	r1, #0
 801a362:	dc03      	bgt.n	801a36c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801a364:	9a01      	ldr	r2, [sp, #4]
 801a366:	2a00      	cmp	r2, #0
 801a368:	f340 8104 	ble.w	801a574 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801a36c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a36e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a372:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a374:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a378:	2b00      	cmp	r3, #0
 801a37a:	dd0f      	ble.n	801a39c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801a37c:	1406      	asrs	r6, r0, #16
 801a37e:	d406      	bmi.n	801a38e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801a380:	4576      	cmp	r6, lr
 801a382:	da04      	bge.n	801a38e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801a384:	1416      	asrs	r6, r2, #16
 801a386:	d402      	bmi.n	801a38e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801a388:	9f00      	ldr	r7, [sp, #0]
 801a38a:	42be      	cmp	r6, r7
 801a38c:	db07      	blt.n	801a39e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801a38e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801a390:	3b01      	subs	r3, #1
 801a392:	3403      	adds	r4, #3
 801a394:	4430      	add	r0, r6
 801a396:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801a398:	4432      	add	r2, r6
 801a39a:	e7ed      	b.n	801a378 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801a39c:	d05f      	beq.n	801a45e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801a39e:	1e5e      	subs	r6, r3, #1
 801a3a0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801a3a2:	fb07 0706 	mla	r7, r7, r6, r0
 801a3a6:	143f      	asrs	r7, r7, #16
 801a3a8:	d450      	bmi.n	801a44c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801a3aa:	4577      	cmp	r7, lr
 801a3ac:	da4e      	bge.n	801a44c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801a3ae:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801a3b0:	fb07 2606 	mla	r6, r7, r6, r2
 801a3b4:	1436      	asrs	r6, r6, #16
 801a3b6:	d449      	bmi.n	801a44c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801a3b8:	9f00      	ldr	r7, [sp, #0]
 801a3ba:	42be      	cmp	r6, r7
 801a3bc:	da46      	bge.n	801a44c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801a3be:	1ce6      	adds	r6, r4, #3
 801a3c0:	4699      	mov	r9, r3
 801a3c2:	f1b9 0f00 	cmp.w	r9, #0
 801a3c6:	f106 0603 	add.w	r6, r6, #3
 801a3ca:	dd43      	ble.n	801a454 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801a3cc:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801a3d0:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801a3d4:	1417      	asrs	r7, r2, #16
 801a3d6:	f109 39ff 	add.w	r9, r9, #4294967295
 801a3da:	fb1b fb05 	smulbb	fp, fp, r5
 801a3de:	fb0e a707 	mla	r7, lr, r7, sl
 801a3e2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a3e6:	eb08 0a07 	add.w	sl, r8, r7
 801a3ea:	f818 7007 	ldrb.w	r7, [r8, r7]
 801a3ee:	fb07 b70c 	mla	r7, r7, ip, fp
 801a3f2:	b2bf      	uxth	r7, r7
 801a3f4:	f107 0b01 	add.w	fp, r7, #1
 801a3f8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801a3fc:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801a400:	fb1b fb05 	smulbb	fp, fp, r5
 801a404:	123f      	asrs	r7, r7, #8
 801a406:	f806 7c06 	strb.w	r7, [r6, #-6]
 801a40a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801a40e:	fb07 b70c 	mla	r7, r7, ip, fp
 801a412:	b2bf      	uxth	r7, r7
 801a414:	f107 0b01 	add.w	fp, r7, #1
 801a418:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801a41c:	123f      	asrs	r7, r7, #8
 801a41e:	f806 7c05 	strb.w	r7, [r6, #-5]
 801a422:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801a426:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801a42a:	fb1a fa05 	smulbb	sl, sl, r5
 801a42e:	fb07 a70c 	mla	r7, r7, ip, sl
 801a432:	b2bf      	uxth	r7, r7
 801a434:	f107 0a01 	add.w	sl, r7, #1
 801a438:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801a43c:	123f      	asrs	r7, r7, #8
 801a43e:	f806 7c04 	strb.w	r7, [r6, #-4]
 801a442:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801a444:	4438      	add	r0, r7
 801a446:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801a448:	443a      	add	r2, r7
 801a44a:	e7ba      	b.n	801a3c2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801a44c:	2700      	movs	r7, #0
 801a44e:	1bde      	subs	r6, r3, r7
 801a450:	2e00      	cmp	r6, #0
 801a452:	dc3f      	bgt.n	801a4d4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801a454:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a458:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a45c:	441c      	add	r4, r3
 801a45e:	2900      	cmp	r1, #0
 801a460:	f340 8088 	ble.w	801a574 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801a464:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a46a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a46e:	3901      	subs	r1, #1
 801a470:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a474:	eef0 6a62 	vmov.f32	s13, s5
 801a478:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a47c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a480:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a484:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801a488:	eef0 6a43 	vmov.f32	s13, s6
 801a48c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a490:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801a494:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a498:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a49c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a4a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a4a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a4a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a4ac:	ee12 2a90 	vmov	r2, s5
 801a4b0:	eef0 2a47 	vmov.f32	s5, s14
 801a4b4:	fb92 f3f3 	sdiv	r3, r2, r3
 801a4b8:	ee13 2a10 	vmov	r2, s6
 801a4bc:	930f      	str	r3, [sp, #60]	; 0x3c
 801a4be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a4c0:	eeb0 3a67 	vmov.f32	s6, s15
 801a4c4:	fb92 f3f3 	sdiv	r3, r2, r3
 801a4c8:	9a01      	ldr	r2, [sp, #4]
 801a4ca:	9310      	str	r3, [sp, #64]	; 0x40
 801a4cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a4ce:	bf08      	it	eq
 801a4d0:	4613      	moveq	r3, r2
 801a4d2:	e745      	b.n	801a360 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801a4d4:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801a4d8:	d446      	bmi.n	801a568 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801a4da:	45f2      	cmp	sl, lr
 801a4dc:	da44      	bge.n	801a568 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801a4de:	ea5f 4922 	movs.w	r9, r2, asr #16
 801a4e2:	d441      	bmi.n	801a568 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801a4e4:	9e00      	ldr	r6, [sp, #0]
 801a4e6:	45b1      	cmp	r9, r6
 801a4e8:	da3e      	bge.n	801a568 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801a4ea:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801a4ee:	fb0e a909 	mla	r9, lr, r9, sl
 801a4f2:	f814 b006 	ldrb.w	fp, [r4, r6]
 801a4f6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801a4fa:	fb1b fb05 	smulbb	fp, fp, r5
 801a4fe:	eb08 0a09 	add.w	sl, r8, r9
 801a502:	f818 9009 	ldrb.w	r9, [r8, r9]
 801a506:	fb09 b90c 	mla	r9, r9, ip, fp
 801a50a:	fa1f f989 	uxth.w	r9, r9
 801a50e:	f109 0b01 	add.w	fp, r9, #1
 801a512:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a516:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a51a:	f804 9006 	strb.w	r9, [r4, r6]
 801a51e:	4426      	add	r6, r4
 801a520:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801a524:	f896 b001 	ldrb.w	fp, [r6, #1]
 801a528:	fb1b fb05 	smulbb	fp, fp, r5
 801a52c:	fb09 b90c 	mla	r9, r9, ip, fp
 801a530:	fa1f f989 	uxth.w	r9, r9
 801a534:	f109 0b01 	add.w	fp, r9, #1
 801a538:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a53c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a540:	f886 9001 	strb.w	r9, [r6, #1]
 801a544:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801a548:	f896 a002 	ldrb.w	sl, [r6, #2]
 801a54c:	fb1a fa05 	smulbb	sl, sl, r5
 801a550:	fb09 a90c 	mla	r9, r9, ip, sl
 801a554:	fa1f f989 	uxth.w	r9, r9
 801a558:	f109 0a01 	add.w	sl, r9, #1
 801a55c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801a560:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a564:	f886 9002 	strb.w	r9, [r6, #2]
 801a568:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801a56a:	3701      	adds	r7, #1
 801a56c:	4430      	add	r0, r6
 801a56e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801a570:	4432      	add	r2, r6
 801a572:	e76c      	b.n	801a44e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801a574:	b003      	add	sp, #12
 801a576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a57a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a57a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a57e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a580:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a584:	9201      	str	r2, [sp, #4]
 801a586:	6868      	ldr	r0, [r5, #4]
 801a588:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801a58c:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801a590:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801a594:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801a598:	fb00 2404 	mla	r4, r0, r4, r2
 801a59c:	682a      	ldr	r2, [r5, #0]
 801a59e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a5a2:	4414      	add	r4, r2
 801a5a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a5a6:	f8d2 9000 	ldr.w	r9, [r2]
 801a5aa:	2900      	cmp	r1, #0
 801a5ac:	dc03      	bgt.n	801a5b6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801a5ae:	9a01      	ldr	r2, [sp, #4]
 801a5b0:	2a00      	cmp	r2, #0
 801a5b2:	f340 80a8 	ble.w	801a706 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801a5b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a5b8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a5bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a5be:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	dd0c      	ble.n	801a5e0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801a5c6:	1405      	asrs	r5, r0, #16
 801a5c8:	d405      	bmi.n	801a5d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801a5ca:	4565      	cmp	r5, ip
 801a5cc:	da03      	bge.n	801a5d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801a5ce:	1415      	asrs	r5, r2, #16
 801a5d0:	d401      	bmi.n	801a5d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801a5d2:	4575      	cmp	r5, lr
 801a5d4:	db05      	blt.n	801a5e2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801a5d6:	4438      	add	r0, r7
 801a5d8:	4432      	add	r2, r6
 801a5da:	3b01      	subs	r3, #1
 801a5dc:	3403      	adds	r4, #3
 801a5de:	e7f0      	b.n	801a5c2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801a5e0:	d03a      	beq.n	801a658 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801a5e2:	1e5d      	subs	r5, r3, #1
 801a5e4:	fb07 0805 	mla	r8, r7, r5, r0
 801a5e8:	ea5f 4828 	movs.w	r8, r8, asr #16
 801a5ec:	d429      	bmi.n	801a642 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801a5ee:	45e0      	cmp	r8, ip
 801a5f0:	da27      	bge.n	801a642 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801a5f2:	fb06 2505 	mla	r5, r6, r5, r2
 801a5f6:	142d      	asrs	r5, r5, #16
 801a5f8:	d423      	bmi.n	801a642 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801a5fa:	4575      	cmp	r5, lr
 801a5fc:	da21      	bge.n	801a642 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801a5fe:	f104 0803 	add.w	r8, r4, #3
 801a602:	469a      	mov	sl, r3
 801a604:	f1ba 0f00 	cmp.w	sl, #0
 801a608:	f108 0803 	add.w	r8, r8, #3
 801a60c:	dd1f      	ble.n	801a64e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801a60e:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801a612:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a616:	1415      	asrs	r5, r2, #16
 801a618:	4438      	add	r0, r7
 801a61a:	4432      	add	r2, r6
 801a61c:	fb0c b505 	mla	r5, ip, r5, fp
 801a620:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a624:	eb09 0b05 	add.w	fp, r9, r5
 801a628:	f819 5005 	ldrb.w	r5, [r9, r5]
 801a62c:	f808 5c06 	strb.w	r5, [r8, #-6]
 801a630:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801a634:	f808 5c05 	strb.w	r5, [r8, #-5]
 801a638:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801a63c:	f808 5c04 	strb.w	r5, [r8, #-4]
 801a640:	e7e0      	b.n	801a604 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801a642:	2500      	movs	r5, #0
 801a644:	eba3 0805 	sub.w	r8, r3, r5
 801a648:	f1b8 0f00 	cmp.w	r8, #0
 801a64c:	dc38      	bgt.n	801a6c0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801a64e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a652:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a656:	441c      	add	r4, r3
 801a658:	2900      	cmp	r1, #0
 801a65a:	dd54      	ble.n	801a706 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801a65c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a662:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a666:	3901      	subs	r1, #1
 801a668:	eeb0 6a62 	vmov.f32	s12, s5
 801a66c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a670:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a674:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a678:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801a67c:	eeb0 6a43 	vmov.f32	s12, s6
 801a680:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a684:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801a688:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a68c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a690:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a694:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a698:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a69c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a6a0:	ee12 2a90 	vmov	r2, s5
 801a6a4:	eef0 2a47 	vmov.f32	s5, s14
 801a6a8:	fb92 f7f3 	sdiv	r7, r2, r3
 801a6ac:	ee13 2a10 	vmov	r2, s6
 801a6b0:	eeb0 3a67 	vmov.f32	s6, s15
 801a6b4:	fb92 f6f3 	sdiv	r6, r2, r3
 801a6b8:	9a01      	ldr	r2, [sp, #4]
 801a6ba:	bf08      	it	eq
 801a6bc:	4613      	moveq	r3, r2
 801a6be:	e774      	b.n	801a5aa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801a6c0:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801a6c4:	d41b      	bmi.n	801a6fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801a6c6:	45e2      	cmp	sl, ip
 801a6c8:	da19      	bge.n	801a6fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801a6ca:	ea5f 4822 	movs.w	r8, r2, asr #16
 801a6ce:	d416      	bmi.n	801a6fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801a6d0:	45f0      	cmp	r8, lr
 801a6d2:	da14      	bge.n	801a6fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801a6d4:	fb0c a808 	mla	r8, ip, r8, sl
 801a6d8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a6dc:	f819 b008 	ldrb.w	fp, [r9, r8]
 801a6e0:	eb09 0a08 	add.w	sl, r9, r8
 801a6e4:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801a6e8:	f804 b008 	strb.w	fp, [r4, r8]
 801a6ec:	44a0      	add	r8, r4
 801a6ee:	f89a b001 	ldrb.w	fp, [sl, #1]
 801a6f2:	f888 b001 	strb.w	fp, [r8, #1]
 801a6f6:	f89a a002 	ldrb.w	sl, [sl, #2]
 801a6fa:	f888 a002 	strb.w	sl, [r8, #2]
 801a6fe:	4438      	add	r0, r7
 801a700:	4432      	add	r2, r6
 801a702:	3501      	adds	r5, #1
 801a704:	e79e      	b.n	801a644 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801a706:	b003      	add	sp, #12
 801a708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a70c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a710:	b085      	sub	sp, #20
 801a712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a716:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a718:	9202      	str	r2, [sp, #8]
 801a71a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a71e:	6860      	ldr	r0, [r4, #4]
 801a720:	9203      	str	r2, [sp, #12]
 801a722:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801a726:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801a72a:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801a72e:	fb00 2505 	mla	r5, r0, r5, r2
 801a732:	6822      	ldr	r2, [r4, #0]
 801a734:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a738:	4415      	add	r5, r2
 801a73a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a73c:	6812      	ldr	r2, [r2, #0]
 801a73e:	9201      	str	r2, [sp, #4]
 801a740:	2900      	cmp	r1, #0
 801a742:	dc03      	bgt.n	801a74c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801a744:	9a02      	ldr	r2, [sp, #8]
 801a746:	2a00      	cmp	r2, #0
 801a748:	f340 811c 	ble.w	801a984 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801a74c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a74e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801a752:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a754:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a758:	2b00      	cmp	r3, #0
 801a75a:	dd0e      	ble.n	801a77a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801a75c:	1422      	asrs	r2, r4, #16
 801a75e:	d405      	bmi.n	801a76c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801a760:	4572      	cmp	r2, lr
 801a762:	da03      	bge.n	801a76c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801a764:	1402      	asrs	r2, r0, #16
 801a766:	d401      	bmi.n	801a76c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801a768:	4542      	cmp	r2, r8
 801a76a:	db07      	blt.n	801a77c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801a76c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a76e:	3b01      	subs	r3, #1
 801a770:	3503      	adds	r5, #3
 801a772:	4414      	add	r4, r2
 801a774:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a776:	4410      	add	r0, r2
 801a778:	e7ee      	b.n	801a758 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801a77a:	d072      	beq.n	801a862 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801a77c:	1e5a      	subs	r2, r3, #1
 801a77e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a780:	fb06 4602 	mla	r6, r6, r2, r4
 801a784:	1436      	asrs	r6, r6, #16
 801a786:	d461      	bmi.n	801a84c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801a788:	4576      	cmp	r6, lr
 801a78a:	da5f      	bge.n	801a84c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801a78c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801a78e:	fb06 0202 	mla	r2, r6, r2, r0
 801a792:	1412      	asrs	r2, r2, #16
 801a794:	d45a      	bmi.n	801a84c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801a796:	4542      	cmp	r2, r8
 801a798:	da58      	bge.n	801a84c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801a79a:	1cef      	adds	r7, r5, #3
 801a79c:	4699      	mov	r9, r3
 801a79e:	f1b9 0f00 	cmp.w	r9, #0
 801a7a2:	dd59      	ble.n	801a858 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801a7a4:	1426      	asrs	r6, r4, #16
 801a7a6:	1402      	asrs	r2, r0, #16
 801a7a8:	fb0e 6202 	mla	r2, lr, r2, r6
 801a7ac:	9e01      	ldr	r6, [sp, #4]
 801a7ae:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801a7b2:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801a7b6:	d041      	beq.n	801a83c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801a7b8:	9a03      	ldr	r2, [sp, #12]
 801a7ba:	fa5f fb86 	uxtb.w	fp, r6
 801a7be:	fb02 fc0c 	mul.w	ip, r2, ip
 801a7c2:	f10c 0201 	add.w	r2, ip, #1
 801a7c6:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801a7ca:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801a7ce:	1212      	asrs	r2, r2, #8
 801a7d0:	fa1f fa82 	uxth.w	sl, r2
 801a7d4:	43d2      	mvns	r2, r2
 801a7d6:	fb1b fb0a 	smulbb	fp, fp, sl
 801a7da:	b2d2      	uxtb	r2, r2
 801a7dc:	fb0c bc02 	mla	ip, ip, r2, fp
 801a7e0:	fa1f fc8c 	uxth.w	ip, ip
 801a7e4:	f10c 0b01 	add.w	fp, ip, #1
 801a7e8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801a7ec:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801a7f0:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801a7f4:	fb1b fb0a 	smulbb	fp, fp, sl
 801a7f8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a7fc:	fb16 fa0a 	smulbb	sl, r6, sl
 801a800:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801a804:	f807 cc03 	strb.w	ip, [r7, #-3]
 801a808:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801a80c:	fb06 aa02 	mla	sl, r6, r2, sl
 801a810:	fb0c bc02 	mla	ip, ip, r2, fp
 801a814:	fa1f fa8a 	uxth.w	sl, sl
 801a818:	fa1f fc8c 	uxth.w	ip, ip
 801a81c:	f10a 0601 	add.w	r6, sl, #1
 801a820:	f10c 0b01 	add.w	fp, ip, #1
 801a824:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801a828:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801a82c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a830:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a834:	f807 ac01 	strb.w	sl, [r7, #-1]
 801a838:	f807 cc02 	strb.w	ip, [r7, #-2]
 801a83c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a83e:	3703      	adds	r7, #3
 801a840:	f109 39ff 	add.w	r9, r9, #4294967295
 801a844:	4414      	add	r4, r2
 801a846:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a848:	4410      	add	r0, r2
 801a84a:	e7a8      	b.n	801a79e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801a84c:	f04f 0c00 	mov.w	ip, #0
 801a850:	eba3 020c 	sub.w	r2, r3, ip
 801a854:	2a00      	cmp	r2, #0
 801a856:	dc3d      	bgt.n	801a8d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801a858:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a85c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a860:	441d      	add	r5, r3
 801a862:	2900      	cmp	r1, #0
 801a864:	f340 808e 	ble.w	801a984 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801a868:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a86c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a86e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a872:	3901      	subs	r1, #1
 801a874:	eeb0 6a62 	vmov.f32	s12, s5
 801a878:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a87c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a880:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a884:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a888:	eeb0 6a43 	vmov.f32	s12, s6
 801a88c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a890:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a894:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a898:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a89c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a8a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a8a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a8a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a8ac:	ee12 2a90 	vmov	r2, s5
 801a8b0:	eef0 2a47 	vmov.f32	s5, s14
 801a8b4:	fb92 f3f3 	sdiv	r3, r2, r3
 801a8b8:	ee13 2a10 	vmov	r2, s6
 801a8bc:	9311      	str	r3, [sp, #68]	; 0x44
 801a8be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a8c0:	eeb0 3a67 	vmov.f32	s6, s15
 801a8c4:	fb92 f3f3 	sdiv	r3, r2, r3
 801a8c8:	9a02      	ldr	r2, [sp, #8]
 801a8ca:	9312      	str	r3, [sp, #72]	; 0x48
 801a8cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a8ce:	bf08      	it	eq
 801a8d0:	4613      	moveq	r3, r2
 801a8d2:	e735      	b.n	801a740 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801a8d4:	1426      	asrs	r6, r4, #16
 801a8d6:	d44e      	bmi.n	801a976 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801a8d8:	4576      	cmp	r6, lr
 801a8da:	da4c      	bge.n	801a976 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801a8dc:	1402      	asrs	r2, r0, #16
 801a8de:	d44a      	bmi.n	801a976 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801a8e0:	4542      	cmp	r2, r8
 801a8e2:	da48      	bge.n	801a976 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801a8e4:	fb0e 6202 	mla	r2, lr, r2, r6
 801a8e8:	9e01      	ldr	r6, [sp, #4]
 801a8ea:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801a8ee:	0e3a      	lsrs	r2, r7, #24
 801a8f0:	d041      	beq.n	801a976 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801a8f2:	9e03      	ldr	r6, [sp, #12]
 801a8f4:	fa5f fb87 	uxtb.w	fp, r7
 801a8f8:	4372      	muls	r2, r6
 801a8fa:	1c56      	adds	r6, r2, #1
 801a8fc:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801a900:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801a904:	1212      	asrs	r2, r2, #8
 801a906:	f815 9006 	ldrb.w	r9, [r5, r6]
 801a90a:	fa1f fa82 	uxth.w	sl, r2
 801a90e:	43d2      	mvns	r2, r2
 801a910:	fb1b fb0a 	smulbb	fp, fp, sl
 801a914:	b2d2      	uxtb	r2, r2
 801a916:	fb09 b902 	mla	r9, r9, r2, fp
 801a91a:	fa1f f989 	uxth.w	r9, r9
 801a91e:	f109 0b01 	add.w	fp, r9, #1
 801a922:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a926:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801a92a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801a92e:	fb1b fb0a 	smulbb	fp, fp, sl
 801a932:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a936:	fb17 fa0a 	smulbb	sl, r7, sl
 801a93a:	f805 9006 	strb.w	r9, [r5, r6]
 801a93e:	442e      	add	r6, r5
 801a940:	78b7      	ldrb	r7, [r6, #2]
 801a942:	f896 9001 	ldrb.w	r9, [r6, #1]
 801a946:	fb07 aa02 	mla	sl, r7, r2, sl
 801a94a:	fb09 b902 	mla	r9, r9, r2, fp
 801a94e:	fa1f fa8a 	uxth.w	sl, sl
 801a952:	fa1f f989 	uxth.w	r9, r9
 801a956:	f10a 0701 	add.w	r7, sl, #1
 801a95a:	f109 0b01 	add.w	fp, r9, #1
 801a95e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a962:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a966:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a96a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a96e:	f886 a002 	strb.w	sl, [r6, #2]
 801a972:	f886 9001 	strb.w	r9, [r6, #1]
 801a976:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a978:	f10c 0c01 	add.w	ip, ip, #1
 801a97c:	4414      	add	r4, r2
 801a97e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a980:	4410      	add	r0, r2
 801a982:	e765      	b.n	801a850 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801a984:	b005      	add	sp, #20
 801a986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a98a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a98a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a98e:	b085      	sub	sp, #20
 801a990:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a994:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a996:	9203      	str	r2, [sp, #12]
 801a998:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801a99c:	6860      	ldr	r0, [r4, #4]
 801a99e:	9201      	str	r2, [sp, #4]
 801a9a0:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801a9a4:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801a9a8:	fb00 2505 	mla	r5, r0, r5, r2
 801a9ac:	6822      	ldr	r2, [r4, #0]
 801a9ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a9b2:	4415      	add	r5, r2
 801a9b4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a9b6:	6812      	ldr	r2, [r2, #0]
 801a9b8:	9202      	str	r2, [sp, #8]
 801a9ba:	2900      	cmp	r1, #0
 801a9bc:	dc03      	bgt.n	801a9c6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801a9be:	9a03      	ldr	r2, [sp, #12]
 801a9c0:	2a00      	cmp	r2, #0
 801a9c2:	f340 8122 	ble.w	801ac0a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801a9c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a9c8:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801a9cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a9ce:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a9d2:	2b00      	cmp	r3, #0
 801a9d4:	dd0f      	ble.n	801a9f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801a9d6:	1422      	asrs	r2, r4, #16
 801a9d8:	d406      	bmi.n	801a9e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801a9da:	4572      	cmp	r2, lr
 801a9dc:	da04      	bge.n	801a9e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801a9de:	1402      	asrs	r2, r0, #16
 801a9e0:	d402      	bmi.n	801a9e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801a9e2:	9e01      	ldr	r6, [sp, #4]
 801a9e4:	42b2      	cmp	r2, r6
 801a9e6:	db07      	blt.n	801a9f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801a9e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a9ea:	3b01      	subs	r3, #1
 801a9ec:	3503      	adds	r5, #3
 801a9ee:	4414      	add	r4, r2
 801a9f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a9f2:	4410      	add	r0, r2
 801a9f4:	e7ed      	b.n	801a9d2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801a9f6:	d06e      	beq.n	801aad6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801a9f8:	1e5a      	subs	r2, r3, #1
 801a9fa:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a9fc:	fb06 4602 	mla	r6, r6, r2, r4
 801aa00:	1436      	asrs	r6, r6, #16
 801aa02:	d45d      	bmi.n	801aac0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801aa04:	4576      	cmp	r6, lr
 801aa06:	da5b      	bge.n	801aac0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801aa08:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801aa0a:	fb06 0202 	mla	r2, r6, r2, r0
 801aa0e:	1412      	asrs	r2, r2, #16
 801aa10:	d456      	bmi.n	801aac0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801aa12:	9e01      	ldr	r6, [sp, #4]
 801aa14:	42b2      	cmp	r2, r6
 801aa16:	da53      	bge.n	801aac0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801aa18:	1cee      	adds	r6, r5, #3
 801aa1a:	469a      	mov	sl, r3
 801aa1c:	f1ba 0f00 	cmp.w	sl, #0
 801aa20:	dd54      	ble.n	801aacc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801aa22:	1427      	asrs	r7, r4, #16
 801aa24:	1402      	asrs	r2, r0, #16
 801aa26:	fb0e 7202 	mla	r2, lr, r2, r7
 801aa2a:	9f02      	ldr	r7, [sp, #8]
 801aa2c:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801aa30:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801aa34:	d03c      	beq.n	801aab0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801aa36:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801aa3a:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801aa3e:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801aa42:	fa5f f28c 	uxtb.w	r2, ip
 801aa46:	b2ff      	uxtb	r7, r7
 801aa48:	f000 80d8 	beq.w	801abfc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801aa4c:	fa1f f882 	uxth.w	r8, r2
 801aa50:	43d2      	mvns	r2, r2
 801aa52:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801aa56:	fb17 f708 	smulbb	r7, r7, r8
 801aa5a:	b2d2      	uxtb	r2, r2
 801aa5c:	fb19 f908 	smulbb	r9, r9, r8
 801aa60:	fb0c 7702 	mla	r7, ip, r2, r7
 801aa64:	fb1b f808 	smulbb	r8, fp, r8
 801aa68:	b2bf      	uxth	r7, r7
 801aa6a:	f107 0c01 	add.w	ip, r7, #1
 801aa6e:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801aa72:	123f      	asrs	r7, r7, #8
 801aa74:	f806 7c03 	strb.w	r7, [r6, #-3]
 801aa78:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801aa7c:	fb07 9902 	mla	r9, r7, r2, r9
 801aa80:	fa1f f989 	uxth.w	r9, r9
 801aa84:	f109 0701 	add.w	r7, r9, #1
 801aa88:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801aa8c:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801aa90:	fb07 8802 	mla	r8, r7, r2, r8
 801aa94:	ea4f 2929 	mov.w	r9, r9, asr #8
 801aa98:	fa1f f888 	uxth.w	r8, r8
 801aa9c:	f806 9c02 	strb.w	r9, [r6, #-2]
 801aaa0:	f108 0201 	add.w	r2, r8, #1
 801aaa4:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801aaa8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801aaac:	f806 8c01 	strb.w	r8, [r6, #-1]
 801aab0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801aab2:	3603      	adds	r6, #3
 801aab4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801aab8:	4414      	add	r4, r2
 801aaba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801aabc:	4410      	add	r0, r2
 801aabe:	e7ad      	b.n	801aa1c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801aac0:	f04f 0c00 	mov.w	ip, #0
 801aac4:	eba3 020c 	sub.w	r2, r3, ip
 801aac8:	2a00      	cmp	r2, #0
 801aaca:	dc3d      	bgt.n	801ab48 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801aacc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aad0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aad4:	441d      	add	r5, r3
 801aad6:	2900      	cmp	r1, #0
 801aad8:	f340 8097 	ble.w	801ac0a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801aadc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801aae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aae2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801aae6:	3901      	subs	r1, #1
 801aae8:	eeb0 6a62 	vmov.f32	s12, s5
 801aaec:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801aaf0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801aaf4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801aaf8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801aafc:	eeb0 6a43 	vmov.f32	s12, s6
 801ab00:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ab04:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ab08:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ab0c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ab10:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ab14:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ab18:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ab1c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ab20:	ee12 2a90 	vmov	r2, s5
 801ab24:	eef0 2a47 	vmov.f32	s5, s14
 801ab28:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab2c:	ee13 2a10 	vmov	r2, s6
 801ab30:	9311      	str	r3, [sp, #68]	; 0x44
 801ab32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ab34:	eeb0 3a67 	vmov.f32	s6, s15
 801ab38:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab3c:	9a03      	ldr	r2, [sp, #12]
 801ab3e:	9312      	str	r3, [sp, #72]	; 0x48
 801ab40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ab42:	bf08      	it	eq
 801ab44:	4613      	moveq	r3, r2
 801ab46:	e738      	b.n	801a9ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801ab48:	1426      	asrs	r6, r4, #16
 801ab4a:	d448      	bmi.n	801abde <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801ab4c:	4576      	cmp	r6, lr
 801ab4e:	da46      	bge.n	801abde <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801ab50:	1402      	asrs	r2, r0, #16
 801ab52:	d444      	bmi.n	801abde <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801ab54:	9f01      	ldr	r7, [sp, #4]
 801ab56:	42ba      	cmp	r2, r7
 801ab58:	da41      	bge.n	801abde <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801ab5a:	fb0e 6202 	mla	r2, lr, r2, r6
 801ab5e:	9e02      	ldr	r6, [sp, #8]
 801ab60:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801ab64:	0e3a      	lsrs	r2, r7, #24
 801ab66:	d03a      	beq.n	801abde <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801ab68:	2aff      	cmp	r2, #255	; 0xff
 801ab6a:	b2d6      	uxtb	r6, r2
 801ab6c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801ab70:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801ab74:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801ab78:	b2ff      	uxtb	r7, r7
 801ab7a:	d037      	beq.n	801abec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801ab7c:	fa1f f986 	uxth.w	r9, r6
 801ab80:	4462      	add	r2, ip
 801ab82:	43f6      	mvns	r6, r6
 801ab84:	f815 8002 	ldrb.w	r8, [r5, r2]
 801ab88:	fb17 f709 	smulbb	r7, r7, r9
 801ab8c:	fb1a fa09 	smulbb	sl, sl, r9
 801ab90:	b2f6      	uxtb	r6, r6
 801ab92:	fb1b f909 	smulbb	r9, fp, r9
 801ab96:	fb08 7706 	mla	r7, r8, r6, r7
 801ab9a:	b2bf      	uxth	r7, r7
 801ab9c:	f107 0801 	add.w	r8, r7, #1
 801aba0:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801aba4:	123f      	asrs	r7, r7, #8
 801aba6:	54af      	strb	r7, [r5, r2]
 801aba8:	442a      	add	r2, r5
 801abaa:	7857      	ldrb	r7, [r2, #1]
 801abac:	fb07 aa06 	mla	sl, r7, r6, sl
 801abb0:	fa1f fa8a 	uxth.w	sl, sl
 801abb4:	f10a 0701 	add.w	r7, sl, #1
 801abb8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801abbc:	7897      	ldrb	r7, [r2, #2]
 801abbe:	fb07 9906 	mla	r9, r7, r6, r9
 801abc2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801abc6:	fa1f f989 	uxth.w	r9, r9
 801abca:	f882 a001 	strb.w	sl, [r2, #1]
 801abce:	f109 0601 	add.w	r6, r9, #1
 801abd2:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801abd6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801abda:	f882 9002 	strb.w	r9, [r2, #2]
 801abde:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801abe0:	f10c 0c01 	add.w	ip, ip, #1
 801abe4:	4414      	add	r4, r2
 801abe6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801abe8:	4410      	add	r0, r2
 801abea:	e76b      	b.n	801aac4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801abec:	4462      	add	r2, ip
 801abee:	54af      	strb	r7, [r5, r2]
 801abf0:	442a      	add	r2, r5
 801abf2:	f882 a001 	strb.w	sl, [r2, #1]
 801abf6:	f882 b002 	strb.w	fp, [r2, #2]
 801abfa:	e7f0      	b.n	801abde <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801abfc:	f806 7c03 	strb.w	r7, [r6, #-3]
 801ac00:	f806 9c02 	strb.w	r9, [r6, #-2]
 801ac04:	f806 bc01 	strb.w	fp, [r6, #-1]
 801ac08:	e752      	b.n	801aab0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801ac0a:	b005      	add	sp, #20
 801ac0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ac10 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ac10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac14:	b087      	sub	sp, #28
 801ac16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ac1a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ac1c:	9204      	str	r2, [sp, #16]
 801ac1e:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801ac22:	6860      	ldr	r0, [r4, #4]
 801ac24:	9205      	str	r2, [sp, #20]
 801ac26:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801ac2a:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801ac2e:	9101      	str	r1, [sp, #4]
 801ac30:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801ac34:	fb00 2505 	mla	r5, r0, r5, r2
 801ac38:	6822      	ldr	r2, [r4, #0]
 801ac3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ac3e:	4415      	add	r5, r2
 801ac40:	f10e 0201 	add.w	r2, lr, #1
 801ac44:	f022 0201 	bic.w	r2, r2, #1
 801ac48:	9202      	str	r2, [sp, #8]
 801ac4a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ac4c:	6812      	ldr	r2, [r2, #0]
 801ac4e:	9203      	str	r2, [sp, #12]
 801ac50:	9a01      	ldr	r2, [sp, #4]
 801ac52:	2a00      	cmp	r2, #0
 801ac54:	dc03      	bgt.n	801ac5e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801ac56:	9a04      	ldr	r2, [sp, #16]
 801ac58:	2a00      	cmp	r2, #0
 801ac5a:	f340 8132 	ble.w	801aec2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801ac5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ac60:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801ac64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ac66:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	dd0e      	ble.n	801ac8c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801ac6e:	1422      	asrs	r2, r4, #16
 801ac70:	d405      	bmi.n	801ac7e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ac72:	4596      	cmp	lr, r2
 801ac74:	dd03      	ble.n	801ac7e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ac76:	1402      	asrs	r2, r0, #16
 801ac78:	d401      	bmi.n	801ac7e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801ac7a:	4542      	cmp	r2, r8
 801ac7c:	db07      	blt.n	801ac8e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801ac7e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ac80:	3b01      	subs	r3, #1
 801ac82:	3503      	adds	r5, #3
 801ac84:	4414      	add	r4, r2
 801ac86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ac88:	4410      	add	r0, r2
 801ac8a:	e7ee      	b.n	801ac6a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801ac8c:	d010      	beq.n	801acb0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801ac8e:	1e5a      	subs	r2, r3, #1
 801ac90:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ac92:	fb06 4602 	mla	r6, r6, r2, r4
 801ac96:	1436      	asrs	r6, r6, #16
 801ac98:	d546      	bpl.n	801ad28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801ac9a:	4699      	mov	r9, r3
 801ac9c:	462e      	mov	r6, r5
 801ac9e:	f1b9 0f00 	cmp.w	r9, #0
 801aca2:	f300 80ac 	bgt.w	801adfe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801aca6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801acaa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801acae:	441d      	add	r5, r3
 801acb0:	9b01      	ldr	r3, [sp, #4]
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	f340 8105 	ble.w	801aec2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801acb8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801acbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801acbe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801acc2:	eeb0 6a62 	vmov.f32	s12, s5
 801acc6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801acca:	ee31 1a05 	vadd.f32	s2, s2, s10
 801acce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801acd2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801acd6:	eeb0 6a43 	vmov.f32	s12, s6
 801acda:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801acde:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ace2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ace6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801acea:	ee77 2a62 	vsub.f32	s5, s14, s5
 801acee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801acf2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801acf6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801acfa:	ee12 2a90 	vmov	r2, s5
 801acfe:	eef0 2a47 	vmov.f32	s5, s14
 801ad02:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad06:	ee13 2a10 	vmov	r2, s6
 801ad0a:	9313      	str	r3, [sp, #76]	; 0x4c
 801ad0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ad0e:	eeb0 3a67 	vmov.f32	s6, s15
 801ad12:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad16:	9314      	str	r3, [sp, #80]	; 0x50
 801ad18:	9b01      	ldr	r3, [sp, #4]
 801ad1a:	9a04      	ldr	r2, [sp, #16]
 801ad1c:	3b01      	subs	r3, #1
 801ad1e:	9301      	str	r3, [sp, #4]
 801ad20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ad22:	bf08      	it	eq
 801ad24:	4613      	moveq	r3, r2
 801ad26:	e793      	b.n	801ac50 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801ad28:	45b6      	cmp	lr, r6
 801ad2a:	ddb6      	ble.n	801ac9a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801ad2c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801ad2e:	fb06 0202 	mla	r2, r6, r2, r0
 801ad32:	1412      	asrs	r2, r2, #16
 801ad34:	d4b1      	bmi.n	801ac9a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801ad36:	4542      	cmp	r2, r8
 801ad38:	daaf      	bge.n	801ac9a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801ad3a:	1cee      	adds	r6, r5, #3
 801ad3c:	4699      	mov	r9, r3
 801ad3e:	f1b9 0f00 	cmp.w	r9, #0
 801ad42:	ddb0      	ble.n	801aca6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801ad44:	1422      	asrs	r2, r4, #16
 801ad46:	9902      	ldr	r1, [sp, #8]
 801ad48:	1407      	asrs	r7, r0, #16
 801ad4a:	fb01 2707 	mla	r7, r1, r7, r2
 801ad4e:	9903      	ldr	r1, [sp, #12]
 801ad50:	087a      	lsrs	r2, r7, #1
 801ad52:	5c8a      	ldrb	r2, [r1, r2]
 801ad54:	07f9      	lsls	r1, r7, #31
 801ad56:	bf54      	ite	pl
 801ad58:	f002 020f 	andpl.w	r2, r2, #15
 801ad5c:	1112      	asrmi	r2, r2, #4
 801ad5e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ad62:	b2d2      	uxtb	r2, r2
 801ad64:	2a00      	cmp	r2, #0
 801ad66:	d042      	beq.n	801adee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801ad68:	4957      	ldr	r1, [pc, #348]	; (801aec8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801ad6a:	680f      	ldr	r7, [r1, #0]
 801ad6c:	9905      	ldr	r1, [sp, #20]
 801ad6e:	fa5f fb87 	uxtb.w	fp, r7
 801ad72:	434a      	muls	r2, r1
 801ad74:	f102 0c01 	add.w	ip, r2, #1
 801ad78:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801ad7c:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801ad80:	1212      	asrs	r2, r2, #8
 801ad82:	fa1f fa82 	uxth.w	sl, r2
 801ad86:	43d2      	mvns	r2, r2
 801ad88:	fb1b fb0a 	smulbb	fp, fp, sl
 801ad8c:	b2d2      	uxtb	r2, r2
 801ad8e:	fb0c bc02 	mla	ip, ip, r2, fp
 801ad92:	fa1f fc8c 	uxth.w	ip, ip
 801ad96:	f10c 0b01 	add.w	fp, ip, #1
 801ad9a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ad9e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801ada2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801ada6:	fb1b fb0a 	smulbb	fp, fp, sl
 801adaa:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801adae:	fb17 fa0a 	smulbb	sl, r7, sl
 801adb2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801adb6:	f806 cc03 	strb.w	ip, [r6, #-3]
 801adba:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801adbe:	fb07 aa02 	mla	sl, r7, r2, sl
 801adc2:	fb0c bc02 	mla	ip, ip, r2, fp
 801adc6:	fa1f fa8a 	uxth.w	sl, sl
 801adca:	fa1f fc8c 	uxth.w	ip, ip
 801adce:	f10a 0701 	add.w	r7, sl, #1
 801add2:	f10c 0b01 	add.w	fp, ip, #1
 801add6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801adda:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801adde:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ade2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ade6:	f806 ac01 	strb.w	sl, [r6, #-1]
 801adea:	f806 cc02 	strb.w	ip, [r6, #-2]
 801adee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801adf0:	3603      	adds	r6, #3
 801adf2:	f109 39ff 	add.w	r9, r9, #4294967295
 801adf6:	4414      	add	r4, r2
 801adf8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801adfa:	4410      	add	r0, r2
 801adfc:	e79f      	b.n	801ad3e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801adfe:	1422      	asrs	r2, r4, #16
 801ae00:	d457      	bmi.n	801aeb2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801ae02:	4596      	cmp	lr, r2
 801ae04:	dd55      	ble.n	801aeb2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801ae06:	1407      	asrs	r7, r0, #16
 801ae08:	d453      	bmi.n	801aeb2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801ae0a:	4547      	cmp	r7, r8
 801ae0c:	da51      	bge.n	801aeb2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801ae0e:	9902      	ldr	r1, [sp, #8]
 801ae10:	fb07 2701 	mla	r7, r7, r1, r2
 801ae14:	9903      	ldr	r1, [sp, #12]
 801ae16:	087a      	lsrs	r2, r7, #1
 801ae18:	07ff      	lsls	r7, r7, #31
 801ae1a:	5c8a      	ldrb	r2, [r1, r2]
 801ae1c:	bf54      	ite	pl
 801ae1e:	f002 020f 	andpl.w	r2, r2, #15
 801ae22:	1112      	asrmi	r2, r2, #4
 801ae24:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ae28:	b2d2      	uxtb	r2, r2
 801ae2a:	2a00      	cmp	r2, #0
 801ae2c:	d041      	beq.n	801aeb2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801ae2e:	4926      	ldr	r1, [pc, #152]	; (801aec8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801ae30:	680f      	ldr	r7, [r1, #0]
 801ae32:	9905      	ldr	r1, [sp, #20]
 801ae34:	fa5f fb87 	uxtb.w	fp, r7
 801ae38:	434a      	muls	r2, r1
 801ae3a:	f102 0c01 	add.w	ip, r2, #1
 801ae3e:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801ae42:	f896 c000 	ldrb.w	ip, [r6]
 801ae46:	1212      	asrs	r2, r2, #8
 801ae48:	fa1f fa82 	uxth.w	sl, r2
 801ae4c:	43d2      	mvns	r2, r2
 801ae4e:	fb1b fb0a 	smulbb	fp, fp, sl
 801ae52:	b2d2      	uxtb	r2, r2
 801ae54:	fb0c bc02 	mla	ip, ip, r2, fp
 801ae58:	fa1f fc8c 	uxth.w	ip, ip
 801ae5c:	f10c 0b01 	add.w	fp, ip, #1
 801ae60:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ae64:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801ae68:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801ae6c:	fb1b fb0a 	smulbb	fp, fp, sl
 801ae70:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ae74:	fb17 fa0a 	smulbb	sl, r7, sl
 801ae78:	78b7      	ldrb	r7, [r6, #2]
 801ae7a:	f886 c000 	strb.w	ip, [r6]
 801ae7e:	f896 c001 	ldrb.w	ip, [r6, #1]
 801ae82:	fb07 aa02 	mla	sl, r7, r2, sl
 801ae86:	fb0c bc02 	mla	ip, ip, r2, fp
 801ae8a:	fa1f fa8a 	uxth.w	sl, sl
 801ae8e:	fa1f fc8c 	uxth.w	ip, ip
 801ae92:	f10a 0701 	add.w	r7, sl, #1
 801ae96:	f10c 0b01 	add.w	fp, ip, #1
 801ae9a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ae9e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801aea2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801aea6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801aeaa:	f886 a002 	strb.w	sl, [r6, #2]
 801aeae:	f886 c001 	strb.w	ip, [r6, #1]
 801aeb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801aeb4:	3603      	adds	r6, #3
 801aeb6:	f109 39ff 	add.w	r9, r9, #4294967295
 801aeba:	4414      	add	r4, r2
 801aebc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801aebe:	4410      	add	r0, r2
 801aec0:	e6ed      	b.n	801ac9e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801aec2:	b007      	add	sp, #28
 801aec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aec8:	2000b1d4 	.word	0x2000b1d4

0801aecc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801aecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aed0:	b087      	sub	sp, #28
 801aed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801aed6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801aed8:	9205      	str	r2, [sp, #20]
 801aeda:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801aede:	6860      	ldr	r0, [r4, #4]
 801aee0:	9202      	str	r2, [sp, #8]
 801aee2:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801aee6:	9101      	str	r1, [sp, #4]
 801aee8:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801aeec:	fb00 2606 	mla	r6, r0, r6, r2
 801aef0:	6822      	ldr	r2, [r4, #0]
 801aef2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801aef6:	4416      	add	r6, r2
 801aef8:	f108 0201 	add.w	r2, r8, #1
 801aefc:	f022 0201 	bic.w	r2, r2, #1
 801af00:	9203      	str	r2, [sp, #12]
 801af02:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801af04:	6812      	ldr	r2, [r2, #0]
 801af06:	9204      	str	r2, [sp, #16]
 801af08:	9a01      	ldr	r2, [sp, #4]
 801af0a:	2a00      	cmp	r2, #0
 801af0c:	dc03      	bgt.n	801af16 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801af0e:	9a05      	ldr	r2, [sp, #20]
 801af10:	2a00      	cmp	r2, #0
 801af12:	f340 813a 	ble.w	801b18a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801af16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801af18:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801af1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801af1e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801af22:	2b00      	cmp	r3, #0
 801af24:	dd0f      	ble.n	801af46 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801af26:	142a      	asrs	r2, r5, #16
 801af28:	d406      	bmi.n	801af38 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801af2a:	4590      	cmp	r8, r2
 801af2c:	dd04      	ble.n	801af38 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801af2e:	1422      	asrs	r2, r4, #16
 801af30:	d402      	bmi.n	801af38 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801af32:	9802      	ldr	r0, [sp, #8]
 801af34:	4282      	cmp	r2, r0
 801af36:	db07      	blt.n	801af48 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801af38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801af3a:	3b01      	subs	r3, #1
 801af3c:	3603      	adds	r6, #3
 801af3e:	4415      	add	r5, r2
 801af40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801af42:	4414      	add	r4, r2
 801af44:	e7ed      	b.n	801af22 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801af46:	d073      	beq.n	801b030 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801af48:	1e5a      	subs	r2, r3, #1
 801af4a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801af4c:	fb00 5002 	mla	r0, r0, r2, r5
 801af50:	1400      	asrs	r0, r0, #16
 801af52:	d464      	bmi.n	801b01e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801af54:	4580      	cmp	r8, r0
 801af56:	dd62      	ble.n	801b01e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801af58:	9814      	ldr	r0, [sp, #80]	; 0x50
 801af5a:	fb00 4202 	mla	r2, r0, r2, r4
 801af5e:	1412      	asrs	r2, r2, #16
 801af60:	d45d      	bmi.n	801b01e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801af62:	9802      	ldr	r0, [sp, #8]
 801af64:	4282      	cmp	r2, r0
 801af66:	da5a      	bge.n	801b01e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801af68:	1cf0      	adds	r0, r6, #3
 801af6a:	469a      	mov	sl, r3
 801af6c:	f1ba 0f00 	cmp.w	sl, #0
 801af70:	dd59      	ble.n	801b026 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801af72:	142a      	asrs	r2, r5, #16
 801af74:	9903      	ldr	r1, [sp, #12]
 801af76:	1427      	asrs	r7, r4, #16
 801af78:	fb01 2707 	mla	r7, r1, r7, r2
 801af7c:	9904      	ldr	r1, [sp, #16]
 801af7e:	087a      	lsrs	r2, r7, #1
 801af80:	5c8a      	ldrb	r2, [r1, r2]
 801af82:	07f9      	lsls	r1, r7, #31
 801af84:	bf54      	ite	pl
 801af86:	f002 020f 	andpl.w	r2, r2, #15
 801af8a:	1112      	asrmi	r2, r2, #4
 801af8c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801af90:	b2d2      	uxtb	r2, r2
 801af92:	2a00      	cmp	r2, #0
 801af94:	d03b      	beq.n	801b00e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801af96:	497e      	ldr	r1, [pc, #504]	; (801b190 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801af98:	2aff      	cmp	r2, #255	; 0xff
 801af9a:	680f      	ldr	r7, [r1, #0]
 801af9c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801afa0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801afa4:	b2ff      	uxtb	r7, r7
 801afa6:	f000 80e9 	beq.w	801b17c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801afaa:	fa1f fe82 	uxth.w	lr, r2
 801afae:	43d2      	mvns	r2, r2
 801afb0:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801afb4:	fb17 f70e 	smulbb	r7, r7, lr
 801afb8:	b2d2      	uxtb	r2, r2
 801afba:	fb19 f90e 	smulbb	r9, r9, lr
 801afbe:	fb0c 7702 	mla	r7, ip, r2, r7
 801afc2:	fb1b fe0e 	smulbb	lr, fp, lr
 801afc6:	b2bf      	uxth	r7, r7
 801afc8:	f107 0c01 	add.w	ip, r7, #1
 801afcc:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801afd0:	123f      	asrs	r7, r7, #8
 801afd2:	f800 7c03 	strb.w	r7, [r0, #-3]
 801afd6:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801afda:	fb07 9902 	mla	r9, r7, r2, r9
 801afde:	fa1f f989 	uxth.w	r9, r9
 801afe2:	f109 0701 	add.w	r7, r9, #1
 801afe6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801afea:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801afee:	fb07 ee02 	mla	lr, r7, r2, lr
 801aff2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801aff6:	fa1f fe8e 	uxth.w	lr, lr
 801affa:	f800 9c02 	strb.w	r9, [r0, #-2]
 801affe:	f10e 0201 	add.w	r2, lr, #1
 801b002:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801b006:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b00a:	f800 ec01 	strb.w	lr, [r0, #-1]
 801b00e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b010:	3003      	adds	r0, #3
 801b012:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b016:	4415      	add	r5, r2
 801b018:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b01a:	4414      	add	r4, r2
 801b01c:	e7a6      	b.n	801af6c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801b01e:	2700      	movs	r7, #0
 801b020:	1bda      	subs	r2, r3, r7
 801b022:	2a00      	cmp	r2, #0
 801b024:	dc40      	bgt.n	801b0a8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801b026:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b02a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b02e:	441e      	add	r6, r3
 801b030:	9b01      	ldr	r3, [sp, #4]
 801b032:	2b00      	cmp	r3, #0
 801b034:	f340 80a9 	ble.w	801b18a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801b038:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b03c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b03e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b042:	eeb0 6a62 	vmov.f32	s12, s5
 801b046:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b04a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b04e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b052:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b056:	eeb0 6a43 	vmov.f32	s12, s6
 801b05a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b05e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b062:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b066:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b06a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b06e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b072:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b076:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b07a:	ee12 2a90 	vmov	r2, s5
 801b07e:	eef0 2a47 	vmov.f32	s5, s14
 801b082:	fb92 f3f3 	sdiv	r3, r2, r3
 801b086:	ee13 2a10 	vmov	r2, s6
 801b08a:	9313      	str	r3, [sp, #76]	; 0x4c
 801b08c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b08e:	eeb0 3a67 	vmov.f32	s6, s15
 801b092:	fb92 f3f3 	sdiv	r3, r2, r3
 801b096:	9314      	str	r3, [sp, #80]	; 0x50
 801b098:	9b01      	ldr	r3, [sp, #4]
 801b09a:	9a05      	ldr	r2, [sp, #20]
 801b09c:	3b01      	subs	r3, #1
 801b09e:	9301      	str	r3, [sp, #4]
 801b0a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b0a2:	bf08      	it	eq
 801b0a4:	4613      	moveq	r3, r2
 801b0a6:	e72f      	b.n	801af08 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801b0a8:	142a      	asrs	r2, r5, #16
 801b0aa:	d458      	bmi.n	801b15e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801b0ac:	4590      	cmp	r8, r2
 801b0ae:	dd56      	ble.n	801b15e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801b0b0:	1420      	asrs	r0, r4, #16
 801b0b2:	d454      	bmi.n	801b15e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801b0b4:	9902      	ldr	r1, [sp, #8]
 801b0b6:	4288      	cmp	r0, r1
 801b0b8:	da51      	bge.n	801b15e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801b0ba:	9903      	ldr	r1, [sp, #12]
 801b0bc:	fb00 2001 	mla	r0, r0, r1, r2
 801b0c0:	9904      	ldr	r1, [sp, #16]
 801b0c2:	0842      	lsrs	r2, r0, #1
 801b0c4:	07c0      	lsls	r0, r0, #31
 801b0c6:	5c8a      	ldrb	r2, [r1, r2]
 801b0c8:	bf54      	ite	pl
 801b0ca:	f002 020f 	andpl.w	r2, r2, #15
 801b0ce:	1112      	asrmi	r2, r2, #4
 801b0d0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b0d4:	b2d2      	uxtb	r2, r2
 801b0d6:	2a00      	cmp	r2, #0
 801b0d8:	d041      	beq.n	801b15e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801b0da:	492d      	ldr	r1, [pc, #180]	; (801b190 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801b0dc:	2aff      	cmp	r2, #255	; 0xff
 801b0de:	6808      	ldr	r0, [r1, #0]
 801b0e0:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801b0e4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801b0e8:	fa5f fc80 	uxtb.w	ip, r0
 801b0ec:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801b0f0:	d03b      	beq.n	801b16a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801b0f2:	fa1f f982 	uxth.w	r9, r2
 801b0f6:	4438      	add	r0, r7
 801b0f8:	43d2      	mvns	r2, r2
 801b0fa:	f816 e000 	ldrb.w	lr, [r6, r0]
 801b0fe:	fb1c fc09 	smulbb	ip, ip, r9
 801b102:	fb1a fa09 	smulbb	sl, sl, r9
 801b106:	b2d2      	uxtb	r2, r2
 801b108:	fb1b f909 	smulbb	r9, fp, r9
 801b10c:	fb0e cc02 	mla	ip, lr, r2, ip
 801b110:	fa1f fc8c 	uxth.w	ip, ip
 801b114:	f10c 0e01 	add.w	lr, ip, #1
 801b118:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801b11c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b120:	f806 c000 	strb.w	ip, [r6, r0]
 801b124:	4430      	add	r0, r6
 801b126:	f890 c001 	ldrb.w	ip, [r0, #1]
 801b12a:	fb0c aa02 	mla	sl, ip, r2, sl
 801b12e:	fa1f fa8a 	uxth.w	sl, sl
 801b132:	f10a 0c01 	add.w	ip, sl, #1
 801b136:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b13a:	f890 c002 	ldrb.w	ip, [r0, #2]
 801b13e:	fb0c 9902 	mla	r9, ip, r2, r9
 801b142:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b146:	fa1f f989 	uxth.w	r9, r9
 801b14a:	f880 a001 	strb.w	sl, [r0, #1]
 801b14e:	f109 0201 	add.w	r2, r9, #1
 801b152:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801b156:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b15a:	f880 9002 	strb.w	r9, [r0, #2]
 801b15e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b160:	3701      	adds	r7, #1
 801b162:	4415      	add	r5, r2
 801b164:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b166:	4414      	add	r4, r2
 801b168:	e75a      	b.n	801b020 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801b16a:	4438      	add	r0, r7
 801b16c:	f806 c000 	strb.w	ip, [r6, r0]
 801b170:	4430      	add	r0, r6
 801b172:	f880 a001 	strb.w	sl, [r0, #1]
 801b176:	f880 b002 	strb.w	fp, [r0, #2]
 801b17a:	e7f0      	b.n	801b15e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801b17c:	f800 7c03 	strb.w	r7, [r0, #-3]
 801b180:	f800 9c02 	strb.w	r9, [r0, #-2]
 801b184:	f800 bc01 	strb.w	fp, [r0, #-1]
 801b188:	e741      	b.n	801b00e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801b18a:	b007      	add	sp, #28
 801b18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b190:	2000b1d4 	.word	0x2000b1d4

0801b194 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801b194:	4770      	bx	lr

0801b196 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801b196:	4770      	bx	lr

0801b198 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801b198:	4770      	bx	lr

0801b19a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801b19a:	4770      	bx	lr

0801b19c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801b19c:	4770      	bx	lr

0801b19e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801b19e:	4770      	bx	lr

0801b1a0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801b1a0:	4770      	bx	lr

0801b1a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801b1a2:	4770      	bx	lr

0801b1a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801b1a4:	4770      	bx	lr

0801b1a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801b1a6:	4770      	bx	lr

0801b1a8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801b1a8:	4770      	bx	lr

0801b1aa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801b1aa:	4770      	bx	lr

0801b1ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801b1ac:	4770      	bx	lr

0801b1ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801b1ae:	4770      	bx	lr

0801b1b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801b1b0:	4770      	bx	lr

0801b1b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801b1b2:	4770      	bx	lr

0801b1b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801b1b4:	4770      	bx	lr

0801b1b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801b1b6:	4770      	bx	lr

0801b1b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801b1b8:	4770      	bx	lr

0801b1ba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801b1ba:	4770      	bx	lr

0801b1bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801b1bc:	2bff      	cmp	r3, #255	; 0xff
 801b1be:	b508      	push	{r3, lr}
 801b1c0:	d04f      	beq.n	801b262 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801b1c2:	2a2c      	cmp	r2, #44	; 0x2c
 801b1c4:	d032      	beq.n	801b22c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801b1c6:	d80f      	bhi.n	801b1e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801b1c8:	2a08      	cmp	r2, #8
 801b1ca:	d046      	beq.n	801b25a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801b1cc:	d805      	bhi.n	801b1da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801b1ce:	2a04      	cmp	r2, #4
 801b1d0:	d041      	beq.n	801b256 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801b1d2:	2a05      	cmp	r2, #5
 801b1d4:	d03d      	beq.n	801b252 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801b1d6:	2000      	movs	r0, #0
 801b1d8:	e027      	b.n	801b22a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b1da:	2a0a      	cmp	r2, #10
 801b1dc:	d03d      	beq.n	801b25a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801b1de:	d301      	bcc.n	801b1e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801b1e0:	2a0b      	cmp	r2, #11
 801b1e2:	d1f8      	bne.n	801b1d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b1e4:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801b1e6:	e020      	b.n	801b22a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b1e8:	2a30      	cmp	r2, #48	; 0x30
 801b1ea:	d038      	beq.n	801b25e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801b1ec:	d808      	bhi.n	801b200 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801b1ee:	2a2e      	cmp	r2, #46	; 0x2e
 801b1f0:	684b      	ldr	r3, [r1, #4]
 801b1f2:	d029      	beq.n	801b248 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801b1f4:	d90b      	bls.n	801b20e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801b1f6:	781b      	ldrb	r3, [r3, #0]
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	d1ec      	bne.n	801b1d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b1fc:	6a00      	ldr	r0, [r0, #32]
 801b1fe:	e014      	b.n	801b22a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b200:	2a32      	cmp	r2, #50	; 0x32
 801b202:	d02c      	beq.n	801b25e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801b204:	d301      	bcc.n	801b20a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801b206:	2a33      	cmp	r2, #51	; 0x33
 801b208:	d1e5      	bne.n	801b1d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b20a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801b20c:	e00d      	b.n	801b22a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b20e:	781b      	ldrb	r3, [r3, #0]
 801b210:	2b01      	cmp	r3, #1
 801b212:	d009      	beq.n	801b228 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801b214:	d3f2      	bcc.n	801b1fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801b216:	2b02      	cmp	r3, #2
 801b218:	d1dd      	bne.n	801b1d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b21a:	4b39      	ldr	r3, [pc, #228]	; (801b300 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801b21c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 801b220:	4a38      	ldr	r2, [pc, #224]	; (801b304 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801b222:	4839      	ldr	r0, [pc, #228]	; (801b308 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801b224:	f007 ff3e 	bl	80230a4 <__assert_func>
 801b228:	6900      	ldr	r0, [r0, #16]
 801b22a:	bd08      	pop	{r3, pc}
 801b22c:	684b      	ldr	r3, [r1, #4]
 801b22e:	781b      	ldrb	r3, [r3, #0]
 801b230:	2b01      	cmp	r3, #1
 801b232:	d007      	beq.n	801b244 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801b234:	d30b      	bcc.n	801b24e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801b236:	2b02      	cmp	r3, #2
 801b238:	d1cd      	bne.n	801b1d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b23a:	4b31      	ldr	r3, [pc, #196]	; (801b300 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801b23c:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801b240:	4a30      	ldr	r2, [pc, #192]	; (801b304 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801b242:	e7ee      	b.n	801b222 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b244:	6880      	ldr	r0, [r0, #8]
 801b246:	e7f0      	b.n	801b22a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b248:	781b      	ldrb	r3, [r3, #0]
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	d1c3      	bne.n	801b1d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b24e:	6980      	ldr	r0, [r0, #24]
 801b250:	e7eb      	b.n	801b22a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b252:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801b254:	e7e9      	b.n	801b22a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b256:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801b258:	e7e7      	b.n	801b22a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b25a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801b25c:	e7e5      	b.n	801b22a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b25e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801b260:	e7e3      	b.n	801b22a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b262:	2a2c      	cmp	r2, #44	; 0x2c
 801b264:	d030      	beq.n	801b2c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801b266:	d80f      	bhi.n	801b288 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801b268:	2a08      	cmp	r2, #8
 801b26a:	d044      	beq.n	801b2f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801b26c:	d805      	bhi.n	801b27a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801b26e:	2a04      	cmp	r2, #4
 801b270:	d03f      	beq.n	801b2f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801b272:	2a05      	cmp	r2, #5
 801b274:	d1af      	bne.n	801b1d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b276:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801b278:	e7d7      	b.n	801b22a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b27a:	2a0a      	cmp	r2, #10
 801b27c:	d03b      	beq.n	801b2f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801b27e:	d301      	bcc.n	801b284 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801b280:	2a0b      	cmp	r2, #11
 801b282:	d1a8      	bne.n	801b1d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b284:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801b286:	e7d0      	b.n	801b22a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b288:	2a30      	cmp	r2, #48	; 0x30
 801b28a:	d036      	beq.n	801b2fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801b28c:	d808      	bhi.n	801b2a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801b28e:	2a2e      	cmp	r2, #46	; 0x2e
 801b290:	684b      	ldr	r3, [r1, #4]
 801b292:	d028      	beq.n	801b2e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801b294:	d90b      	bls.n	801b2ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801b296:	781b      	ldrb	r3, [r3, #0]
 801b298:	2b00      	cmp	r3, #0
 801b29a:	d19c      	bne.n	801b1d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b29c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801b29e:	e7c4      	b.n	801b22a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b2a0:	2a32      	cmp	r2, #50	; 0x32
 801b2a2:	d02a      	beq.n	801b2fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801b2a4:	d301      	bcc.n	801b2aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801b2a6:	2a33      	cmp	r2, #51	; 0x33
 801b2a8:	d195      	bne.n	801b1d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b2aa:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801b2ac:	e7bd      	b.n	801b22a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b2ae:	781b      	ldrb	r3, [r3, #0]
 801b2b0:	2b01      	cmp	r3, #1
 801b2b2:	d007      	beq.n	801b2c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801b2b4:	d3f2      	bcc.n	801b29c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801b2b6:	2b02      	cmp	r3, #2
 801b2b8:	d18d      	bne.n	801b1d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b2ba:	4b11      	ldr	r3, [pc, #68]	; (801b300 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801b2bc:	f240 31e1 	movw	r1, #993	; 0x3e1
 801b2c0:	4a10      	ldr	r2, [pc, #64]	; (801b304 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801b2c2:	e7ae      	b.n	801b222 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b2c4:	6940      	ldr	r0, [r0, #20]
 801b2c6:	e7b0      	b.n	801b22a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b2c8:	684b      	ldr	r3, [r1, #4]
 801b2ca:	781b      	ldrb	r3, [r3, #0]
 801b2cc:	2b01      	cmp	r3, #1
 801b2ce:	d008      	beq.n	801b2e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801b2d0:	d30d      	bcc.n	801b2ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801b2d2:	2b02      	cmp	r3, #2
 801b2d4:	f47f af7f 	bne.w	801b1d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b2d8:	4b09      	ldr	r3, [pc, #36]	; (801b300 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801b2da:	f240 31ed 	movw	r1, #1005	; 0x3ed
 801b2de:	4a09      	ldr	r2, [pc, #36]	; (801b304 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801b2e0:	e79f      	b.n	801b222 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801b2e2:	68c0      	ldr	r0, [r0, #12]
 801b2e4:	e7a1      	b.n	801b22a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b2e6:	781b      	ldrb	r3, [r3, #0]
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	f47f af74 	bne.w	801b1d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801b2ee:	69c0      	ldr	r0, [r0, #28]
 801b2f0:	e79b      	b.n	801b22a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b2f2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801b2f4:	e799      	b.n	801b22a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b2f6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801b2f8:	e797      	b.n	801b22a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b2fa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801b2fc:	e795      	b.n	801b22a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801b2fe:	bf00      	nop
 801b300:	080290d0 	.word	0x080290d0
 801b304:	08029883 	.word	0x08029883
 801b308:	0802911c 	.word	0x0802911c

0801b30c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801b30c:	b508      	push	{r3, lr}
 801b30e:	4b06      	ldr	r3, [pc, #24]	; (801b328 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801b310:	8818      	ldrh	r0, [r3, #0]
 801b312:	b928      	cbnz	r0, 801b320 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801b314:	4b05      	ldr	r3, [pc, #20]	; (801b32c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801b316:	21d7      	movs	r1, #215	; 0xd7
 801b318:	4a05      	ldr	r2, [pc, #20]	; (801b330 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801b31a:	4806      	ldr	r0, [pc, #24]	; (801b334 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801b31c:	f007 fec2 	bl	80230a4 <__assert_func>
 801b320:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b324:	b280      	uxth	r0, r0
 801b326:	bd08      	pop	{r3, pc}
 801b328:	2000b1a6 	.word	0x2000b1a6
 801b32c:	0802936b 	.word	0x0802936b
 801b330:	08029848 	.word	0x08029848
 801b334:	080293ad 	.word	0x080293ad

0801b338 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801b338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b33c:	4616      	mov	r6, r2
 801b33e:	b087      	sub	sp, #28
 801b340:	461f      	mov	r7, r3
 801b342:	b33b      	cbz	r3, 801b394 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801b344:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b348:	b323      	cbz	r3, 801b394 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801b34a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b34e:	b30b      	cbz	r3, 801b394 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801b350:	6808      	ldr	r0, [r1, #0]
 801b352:	ab04      	add	r3, sp, #16
 801b354:	6849      	ldr	r1, [r1, #4]
 801b356:	4c5a      	ldr	r4, [pc, #360]	; (801b4c0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801b358:	c303      	stmia	r3!, {r0, r1}
 801b35a:	a804      	add	r0, sp, #16
 801b35c:	f7fb fdc2 	bl	8016ee4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b360:	6820      	ldr	r0, [r4, #0]
 801b362:	6803      	ldr	r3, [r0, #0]
 801b364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b366:	4798      	blx	r3
 801b368:	2fff      	cmp	r7, #255	; 0xff
 801b36a:	4623      	mov	r3, r4
 801b36c:	d015      	beq.n	801b39a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801b36e:	f010 0f08 	tst.w	r0, #8
 801b372:	d015      	beq.n	801b3a0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801b374:	6818      	ldr	r0, [r3, #0]
 801b376:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801b37a:	6801      	ldr	r1, [r0, #0]
 801b37c:	9401      	str	r4, [sp, #4]
 801b37e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801b382:	9702      	str	r7, [sp, #8]
 801b384:	9400      	str	r4, [sp, #0]
 801b386:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801b38a:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801b38c:	4631      	mov	r1, r6
 801b38e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b392:	47a0      	blx	r4
 801b394:	b007      	add	sp, #28
 801b396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b39a:	f010 0f02 	tst.w	r0, #2
 801b39e:	e7e8      	b.n	801b372 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 801b3a0:	6818      	ldr	r0, [r3, #0]
 801b3a2:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801b3a6:	6803      	ldr	r3, [r0, #0]
 801b3a8:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801b3ac:	6a1b      	ldr	r3, [r3, #32]
 801b3ae:	4798      	blx	r3
 801b3b0:	4944      	ldr	r1, [pc, #272]	; (801b4c4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801b3b2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b3b6:	2fff      	cmp	r7, #255	; 0xff
 801b3b8:	f8b1 c000 	ldrh.w	ip, [r1]
 801b3bc:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801b3c0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b3c4:	4688      	mov	r8, r1
 801b3c6:	fb0c 2303 	mla	r3, ip, r3, r2
 801b3ca:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801b3ce:	b2f2      	uxtb	r2, r6
 801b3d0:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801b3d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b3d8:	4418      	add	r0, r3
 801b3da:	d112      	bne.n	801b402 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 801b3dc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b3e0:	2100      	movs	r1, #0
 801b3e2:	42a9      	cmp	r1, r5
 801b3e4:	da66      	bge.n	801b4b4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801b3e6:	4603      	mov	r3, r0
 801b3e8:	2700      	movs	r7, #0
 801b3ea:	42a7      	cmp	r7, r4
 801b3ec:	f103 0303 	add.w	r3, r3, #3
 801b3f0:	da57      	bge.n	801b4a2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 801b3f2:	f803 2c03 	strb.w	r2, [r3, #-3]
 801b3f6:	3701      	adds	r7, #1
 801b3f8:	f803 ec02 	strb.w	lr, [r3, #-2]
 801b3fc:	f803 cc01 	strb.w	ip, [r3, #-1]
 801b400:	e7f3      	b.n	801b3ea <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801b402:	b2bb      	uxth	r3, r7
 801b404:	f04f 0800 	mov.w	r8, #0
 801b408:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b40c:	fb0c fc03 	mul.w	ip, ip, r3
 801b410:	fb0e fe03 	mul.w	lr, lr, r3
 801b414:	435a      	muls	r2, r3
 801b416:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801b41a:	460f      	mov	r7, r1
 801b41c:	b29b      	uxth	r3, r3
 801b41e:	45a8      	cmp	r8, r5
 801b420:	da48      	bge.n	801b4b4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801b422:	4601      	mov	r1, r0
 801b424:	f04f 0a00 	mov.w	sl, #0
 801b428:	45a2      	cmp	sl, r4
 801b42a:	f101 0103 	add.w	r1, r1, #3
 801b42e:	da2f      	bge.n	801b490 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 801b430:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801b434:	f10a 0a01 	add.w	sl, sl, #1
 801b438:	fb19 f903 	smulbb	r9, r9, r3
 801b43c:	4491      	add	r9, r2
 801b43e:	fa1f f989 	uxth.w	r9, r9
 801b442:	f109 0b01 	add.w	fp, r9, #1
 801b446:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b44a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b44e:	f801 9c03 	strb.w	r9, [r1, #-3]
 801b452:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801b456:	fb19 f903 	smulbb	r9, r9, r3
 801b45a:	44f1      	add	r9, lr
 801b45c:	fa1f f989 	uxth.w	r9, r9
 801b460:	f109 0b01 	add.w	fp, r9, #1
 801b464:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b468:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b46c:	f801 9c02 	strb.w	r9, [r1, #-2]
 801b470:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801b474:	fb19 f903 	smulbb	r9, r9, r3
 801b478:	44e1      	add	r9, ip
 801b47a:	fa1f f989 	uxth.w	r9, r9
 801b47e:	f109 0b01 	add.w	fp, r9, #1
 801b482:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b486:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b48a:	f801 9c01 	strb.w	r9, [r1, #-1]
 801b48e:	e7cb      	b.n	801b428 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 801b490:	8839      	ldrh	r1, [r7, #0]
 801b492:	f108 0801 	add.w	r8, r8, #1
 801b496:	1b09      	subs	r1, r1, r4
 801b498:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b49c:	4431      	add	r1, r6
 801b49e:	4408      	add	r0, r1
 801b4a0:	e7bd      	b.n	801b41e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 801b4a2:	f8b8 3000 	ldrh.w	r3, [r8]
 801b4a6:	3101      	adds	r1, #1
 801b4a8:	1b1b      	subs	r3, r3, r4
 801b4aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b4ae:	4433      	add	r3, r6
 801b4b0:	4418      	add	r0, r3
 801b4b2:	e796      	b.n	801b3e2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801b4b4:	4b02      	ldr	r3, [pc, #8]	; (801b4c0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801b4b6:	6818      	ldr	r0, [r3, #0]
 801b4b8:	6803      	ldr	r3, [r0, #0]
 801b4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b4bc:	4798      	blx	r3
 801b4be:	e769      	b.n	801b394 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801b4c0:	2000b1ac 	.word	0x2000b1ac
 801b4c4:	2000b1a6 	.word	0x2000b1a6

0801b4c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801b4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4cc:	b08d      	sub	sp, #52	; 0x34
 801b4ce:	460c      	mov	r4, r1
 801b4d0:	4617      	mov	r7, r2
 801b4d2:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801b4d6:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801b4da:	2e00      	cmp	r6, #0
 801b4dc:	d04a      	beq.n	801b574 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801b4de:	6810      	ldr	r0, [r2, #0]
 801b4e0:	ad08      	add	r5, sp, #32
 801b4e2:	6851      	ldr	r1, [r2, #4]
 801b4e4:	c503      	stmia	r5!, {r0, r1}
 801b4e6:	6818      	ldr	r0, [r3, #0]
 801b4e8:	ad0a      	add	r5, sp, #40	; 0x28
 801b4ea:	6859      	ldr	r1, [r3, #4]
 801b4ec:	c503      	stmia	r5!, {r0, r1}
 801b4ee:	a808      	add	r0, sp, #32
 801b4f0:	f7fb fcf8 	bl	8016ee4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b4f4:	4639      	mov	r1, r7
 801b4f6:	a80a      	add	r0, sp, #40	; 0x28
 801b4f8:	4f59      	ldr	r7, [pc, #356]	; (801b660 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801b4fa:	f7fb fcdb 	bl	8016eb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b4fe:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801b502:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801b506:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801b50a:	6838      	ldr	r0, [r7, #0]
 801b50c:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b510:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801b514:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801b518:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b51c:	440c      	add	r4, r1
 801b51e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801b522:	440a      	add	r2, r1
 801b524:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801b528:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801b52c:	4413      	add	r3, r2
 801b52e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801b532:	6803      	ldr	r3, [r0, #0]
 801b534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b536:	4798      	blx	r3
 801b538:	2eff      	cmp	r6, #255	; 0xff
 801b53a:	f000 8089 	beq.w	801b650 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801b53e:	0743      	lsls	r3, r0, #29
 801b540:	d405      	bmi.n	801b54e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801b542:	f1b9 0f00 	cmp.w	r9, #0
 801b546:	d018      	beq.n	801b57a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801b548:	f010 0f10 	tst.w	r0, #16
 801b54c:	d015      	beq.n	801b57a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801b54e:	6838      	ldr	r0, [r7, #0]
 801b550:	b2ad      	uxth	r5, r5
 801b552:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801b556:	6801      	ldr	r1, [r0, #0]
 801b558:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801b55c:	9500      	str	r5, [sp, #0]
 801b55e:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801b562:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801b566:	9602      	str	r6, [sp, #8]
 801b568:	fa1f f688 	uxth.w	r6, r8
 801b56c:	9601      	str	r6, [sp, #4]
 801b56e:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801b570:	4621      	mov	r1, r4
 801b572:	47a8      	blx	r5
 801b574:	b00d      	add	sp, #52	; 0x34
 801b576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b57a:	6838      	ldr	r0, [r7, #0]
 801b57c:	6803      	ldr	r3, [r0, #0]
 801b57e:	6a1b      	ldr	r3, [r3, #32]
 801b580:	4798      	blx	r3
 801b582:	4a38      	ldr	r2, [pc, #224]	; (801b664 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801b584:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801b588:	2eff      	cmp	r6, #255	; 0xff
 801b58a:	8813      	ldrh	r3, [r2, #0]
 801b58c:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801b590:	fb0c 1303 	mla	r3, ip, r3, r1
 801b594:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801b598:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b59c:	4418      	add	r0, r3
 801b59e:	d032      	beq.n	801b606 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801b5a0:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801b5a4:	f04f 0c00 	mov.w	ip, #0
 801b5a8:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801b5ac:	9306      	str	r3, [sp, #24]
 801b5ae:	45c4      	cmp	ip, r8
 801b5b0:	da49      	bge.n	801b646 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801b5b2:	4686      	mov	lr, r0
 801b5b4:	46a1      	mov	r9, r4
 801b5b6:	eba9 0304 	sub.w	r3, r9, r4
 801b5ba:	428b      	cmp	r3, r1
 801b5bc:	da13      	bge.n	801b5e6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801b5be:	f819 3b01 	ldrb.w	r3, [r9], #1
 801b5c2:	f89e b000 	ldrb.w	fp, [lr]
 801b5c6:	9307      	str	r3, [sp, #28]
 801b5c8:	9b06      	ldr	r3, [sp, #24]
 801b5ca:	fb1b fb03 	smulbb	fp, fp, r3
 801b5ce:	9b07      	ldr	r3, [sp, #28]
 801b5d0:	fb03 b306 	mla	r3, r3, r6, fp
 801b5d4:	b29b      	uxth	r3, r3
 801b5d6:	f103 0b01 	add.w	fp, r3, #1
 801b5da:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801b5de:	121b      	asrs	r3, r3, #8
 801b5e0:	f80e 3b01 	strb.w	r3, [lr], #1
 801b5e4:	e7e7      	b.n	801b5b6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801b5e6:	8813      	ldrh	r3, [r2, #0]
 801b5e8:	f10c 0c01 	add.w	ip, ip, #1
 801b5ec:	1b5b      	subs	r3, r3, r5
 801b5ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b5f2:	4453      	add	r3, sl
 801b5f4:	4418      	add	r0, r3
 801b5f6:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801b5fa:	1b5b      	subs	r3, r3, r5
 801b5fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b600:	4453      	add	r3, sl
 801b602:	441c      	add	r4, r3
 801b604:	e7d3      	b.n	801b5ae <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801b606:	2600      	movs	r6, #0
 801b608:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801b60c:	4546      	cmp	r6, r8
 801b60e:	da1a      	bge.n	801b646 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801b610:	f100 3eff 	add.w	lr, r0, #4294967295
 801b614:	4623      	mov	r3, r4
 801b616:	eba3 0904 	sub.w	r9, r3, r4
 801b61a:	4589      	cmp	r9, r1
 801b61c:	da04      	bge.n	801b628 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801b61e:	f813 9b01 	ldrb.w	r9, [r3], #1
 801b622:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801b626:	e7f6      	b.n	801b616 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801b628:	8813      	ldrh	r3, [r2, #0]
 801b62a:	3601      	adds	r6, #1
 801b62c:	1b5b      	subs	r3, r3, r5
 801b62e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b632:	4463      	add	r3, ip
 801b634:	4418      	add	r0, r3
 801b636:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801b63a:	1b5b      	subs	r3, r3, r5
 801b63c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b640:	4463      	add	r3, ip
 801b642:	441c      	add	r4, r3
 801b644:	e7e2      	b.n	801b60c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801b646:	6838      	ldr	r0, [r7, #0]
 801b648:	6803      	ldr	r3, [r0, #0]
 801b64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b64c:	4798      	blx	r3
 801b64e:	e791      	b.n	801b574 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801b650:	f1b9 0f00 	cmp.w	r9, #0
 801b654:	f47f af78 	bne.w	801b548 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801b658:	f010 0f01 	tst.w	r0, #1
 801b65c:	e776      	b.n	801b54c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801b65e:	bf00      	nop
 801b660:	2000b1ac 	.word	0x2000b1ac
 801b664:	2000b1a6 	.word	0x2000b1a6

0801b668 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801b668:	b510      	push	{r4, lr}
 801b66a:	4604      	mov	r4, r0
 801b66c:	2104      	movs	r1, #4
 801b66e:	f007 fcee 	bl	802304e <_ZdlPvj>
 801b672:	4620      	mov	r0, r4
 801b674:	bd10      	pop	{r4, pc}

0801b676 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801b676:	b510      	push	{r4, lr}
 801b678:	4604      	mov	r4, r0
 801b67a:	2104      	movs	r1, #4
 801b67c:	f007 fce7 	bl	802304e <_ZdlPvj>
 801b680:	4620      	mov	r0, r4
 801b682:	bd10      	pop	{r4, pc}

0801b684 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801b684:	b510      	push	{r4, lr}
 801b686:	4604      	mov	r4, r0
 801b688:	2104      	movs	r1, #4
 801b68a:	f007 fce0 	bl	802304e <_ZdlPvj>
 801b68e:	4620      	mov	r0, r4
 801b690:	bd10      	pop	{r4, pc}

0801b692 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801b692:	b510      	push	{r4, lr}
 801b694:	4604      	mov	r4, r0
 801b696:	2104      	movs	r1, #4
 801b698:	f007 fcd9 	bl	802304e <_ZdlPvj>
 801b69c:	4620      	mov	r0, r4
 801b69e:	bd10      	pop	{r4, pc}

0801b6a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801b6a0:	b510      	push	{r4, lr}
 801b6a2:	4604      	mov	r4, r0
 801b6a4:	2104      	movs	r1, #4
 801b6a6:	f007 fcd2 	bl	802304e <_ZdlPvj>
 801b6aa:	4620      	mov	r0, r4
 801b6ac:	bd10      	pop	{r4, pc}

0801b6ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801b6ae:	b510      	push	{r4, lr}
 801b6b0:	4604      	mov	r4, r0
 801b6b2:	2104      	movs	r1, #4
 801b6b4:	f007 fccb 	bl	802304e <_ZdlPvj>
 801b6b8:	4620      	mov	r0, r4
 801b6ba:	bd10      	pop	{r4, pc}

0801b6bc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801b6bc:	b510      	push	{r4, lr}
 801b6be:	4604      	mov	r4, r0
 801b6c0:	2104      	movs	r1, #4
 801b6c2:	f007 fcc4 	bl	802304e <_ZdlPvj>
 801b6c6:	4620      	mov	r0, r4
 801b6c8:	bd10      	pop	{r4, pc}

0801b6ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801b6ca:	b510      	push	{r4, lr}
 801b6cc:	4604      	mov	r4, r0
 801b6ce:	2104      	movs	r1, #4
 801b6d0:	f007 fcbd 	bl	802304e <_ZdlPvj>
 801b6d4:	4620      	mov	r0, r4
 801b6d6:	bd10      	pop	{r4, pc}

0801b6d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801b6d8:	b510      	push	{r4, lr}
 801b6da:	4604      	mov	r4, r0
 801b6dc:	2104      	movs	r1, #4
 801b6de:	f007 fcb6 	bl	802304e <_ZdlPvj>
 801b6e2:	4620      	mov	r0, r4
 801b6e4:	bd10      	pop	{r4, pc}

0801b6e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801b6e6:	b510      	push	{r4, lr}
 801b6e8:	4604      	mov	r4, r0
 801b6ea:	2104      	movs	r1, #4
 801b6ec:	f007 fcaf 	bl	802304e <_ZdlPvj>
 801b6f0:	4620      	mov	r0, r4
 801b6f2:	bd10      	pop	{r4, pc}

0801b6f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801b6f4:	b510      	push	{r4, lr}
 801b6f6:	4604      	mov	r4, r0
 801b6f8:	2104      	movs	r1, #4
 801b6fa:	f007 fca8 	bl	802304e <_ZdlPvj>
 801b6fe:	4620      	mov	r0, r4
 801b700:	bd10      	pop	{r4, pc}

0801b702 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801b702:	b510      	push	{r4, lr}
 801b704:	4604      	mov	r4, r0
 801b706:	2104      	movs	r1, #4
 801b708:	f007 fca1 	bl	802304e <_ZdlPvj>
 801b70c:	4620      	mov	r0, r4
 801b70e:	bd10      	pop	{r4, pc}

0801b710 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801b710:	b510      	push	{r4, lr}
 801b712:	4604      	mov	r4, r0
 801b714:	2104      	movs	r1, #4
 801b716:	f007 fc9a 	bl	802304e <_ZdlPvj>
 801b71a:	4620      	mov	r0, r4
 801b71c:	bd10      	pop	{r4, pc}

0801b71e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801b71e:	b510      	push	{r4, lr}
 801b720:	4604      	mov	r4, r0
 801b722:	2104      	movs	r1, #4
 801b724:	f007 fc93 	bl	802304e <_ZdlPvj>
 801b728:	4620      	mov	r0, r4
 801b72a:	bd10      	pop	{r4, pc}

0801b72c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801b72c:	b510      	push	{r4, lr}
 801b72e:	4604      	mov	r4, r0
 801b730:	2104      	movs	r1, #4
 801b732:	f007 fc8c 	bl	802304e <_ZdlPvj>
 801b736:	4620      	mov	r0, r4
 801b738:	bd10      	pop	{r4, pc}

0801b73a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801b73a:	b510      	push	{r4, lr}
 801b73c:	4604      	mov	r4, r0
 801b73e:	2104      	movs	r1, #4
 801b740:	f007 fc85 	bl	802304e <_ZdlPvj>
 801b744:	4620      	mov	r0, r4
 801b746:	bd10      	pop	{r4, pc}

0801b748 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801b748:	b510      	push	{r4, lr}
 801b74a:	4604      	mov	r4, r0
 801b74c:	2104      	movs	r1, #4
 801b74e:	f007 fc7e 	bl	802304e <_ZdlPvj>
 801b752:	4620      	mov	r0, r4
 801b754:	bd10      	pop	{r4, pc}

0801b756 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801b756:	b510      	push	{r4, lr}
 801b758:	4604      	mov	r4, r0
 801b75a:	2104      	movs	r1, #4
 801b75c:	f007 fc77 	bl	802304e <_ZdlPvj>
 801b760:	4620      	mov	r0, r4
 801b762:	bd10      	pop	{r4, pc}

0801b764 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801b764:	b510      	push	{r4, lr}
 801b766:	4604      	mov	r4, r0
 801b768:	2104      	movs	r1, #4
 801b76a:	f007 fc70 	bl	802304e <_ZdlPvj>
 801b76e:	4620      	mov	r0, r4
 801b770:	bd10      	pop	{r4, pc}

0801b772 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801b772:	b510      	push	{r4, lr}
 801b774:	4604      	mov	r4, r0
 801b776:	2104      	movs	r1, #4
 801b778:	f007 fc69 	bl	802304e <_ZdlPvj>
 801b77c:	4620      	mov	r0, r4
 801b77e:	bd10      	pop	{r4, pc}

0801b780 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801b780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b784:	4d9e      	ldr	r5, [pc, #632]	; (801ba00 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801b786:	4690      	mov	r8, r2
 801b788:	b08f      	sub	sp, #60	; 0x3c
 801b78a:	4604      	mov	r4, r0
 801b78c:	682a      	ldr	r2, [r5, #0]
 801b78e:	4689      	mov	r9, r1
 801b790:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801b794:	2a02      	cmp	r2, #2
 801b796:	d106      	bne.n	801b7a6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801b798:	4b9a      	ldr	r3, [pc, #616]	; (801ba04 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801b79a:	f44f 71cc 	mov.w	r1, #408	; 0x198
 801b79e:	4a9a      	ldr	r2, [pc, #616]	; (801ba08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801b7a0:	489a      	ldr	r0, [pc, #616]	; (801ba0c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801b7a2:	f007 fc7f 	bl	80230a4 <__assert_func>
 801b7a6:	ae0e      	add	r6, sp, #56	; 0x38
 801b7a8:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801b7ac:	4630      	mov	r0, r6
 801b7ae:	f7fe f8b3 	bl	8019918 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b7b2:	6823      	ldr	r3, [r4, #0]
 801b7b4:	4607      	mov	r7, r0
 801b7b6:	4620      	mov	r0, r4
 801b7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b7ba:	4798      	blx	r3
 801b7bc:	4287      	cmp	r7, r0
 801b7be:	d004      	beq.n	801b7ca <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801b7c0:	4b93      	ldr	r3, [pc, #588]	; (801ba10 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801b7c2:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801b7c6:	4a90      	ldr	r2, [pc, #576]	; (801ba08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801b7c8:	e7ea      	b.n	801b7a0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801b7ca:	4630      	mov	r0, r6
 801b7cc:	f7fe f820 	bl	8019810 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b7d0:	4607      	mov	r7, r0
 801b7d2:	b920      	cbnz	r0, 801b7de <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801b7d4:	4b8f      	ldr	r3, [pc, #572]	; (801ba14 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801b7d6:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801b7da:	4a8b      	ldr	r2, [pc, #556]	; (801ba08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801b7dc:	e7e0      	b.n	801b7a0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801b7de:	f8d8 0000 	ldr.w	r0, [r8]
 801b7e2:	ab06      	add	r3, sp, #24
 801b7e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b7e8:	f9b8 a000 	ldrsh.w	sl, [r8]
 801b7ec:	c303      	stmia	r3!, {r0, r1}
 801b7ee:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801b7f2:	ab08      	add	r3, sp, #32
 801b7f4:	f8d9 0000 	ldr.w	r0, [r9]
 801b7f8:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801b7fc:	c303      	stmia	r3!, {r0, r1}
 801b7fe:	4630      	mov	r0, r6
 801b800:	f7fd fefe 	bl	8019600 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b804:	4680      	mov	r8, r0
 801b806:	4630      	mov	r0, r6
 801b808:	4e83      	ldr	r6, [pc, #524]	; (801ba18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801b80a:	f7fd ff33 	bl	8019674 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b80e:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801b812:	f10d 0920 	add.w	r9, sp, #32
 801b816:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801b81a:	a806      	add	r0, sp, #24
 801b81c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801b820:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801b824:	f7fb fb5e 	bl	8016ee4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b828:	4648      	mov	r0, r9
 801b82a:	f7fb fb5b 	bl	8016ee4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b82e:	a80a      	add	r0, sp, #40	; 0x28
 801b830:	f7fb fb58 	bl	8016ee4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b834:	4b79      	ldr	r3, [pc, #484]	; (801ba1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801b836:	2100      	movs	r1, #0
 801b838:	f9b6 2000 	ldrsh.w	r2, [r6]
 801b83c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b840:	4648      	mov	r0, r9
 801b842:	910c      	str	r1, [sp, #48]	; 0x30
 801b844:	a90c      	add	r1, sp, #48	; 0x30
 801b846:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801b84a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801b84e:	f7f7 ff01 	bl	8013654 <_ZN8touchgfx4RectaNERKS0_>
 801b852:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801b856:	9602      	str	r6, [sp, #8]
 801b858:	f1bc 0f00 	cmp.w	ip, #0
 801b85c:	f000 80a4 	beq.w	801b9a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801b860:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801b864:	2e00      	cmp	r6, #0
 801b866:	f000 809f 	beq.w	801b9a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801b86a:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801b86e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801b872:	4288      	cmp	r0, r1
 801b874:	db36      	blt.n	801b8e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801b876:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801b87a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801b87e:	429a      	cmp	r2, r3
 801b880:	db30      	blt.n	801b8e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801b882:	4460      	add	r0, ip
 801b884:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801b888:	4461      	add	r1, ip
 801b88a:	b200      	sxth	r0, r0
 801b88c:	b209      	sxth	r1, r1
 801b88e:	4288      	cmp	r0, r1
 801b890:	dc28      	bgt.n	801b8e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801b892:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801b896:	4432      	add	r2, r6
 801b898:	440b      	add	r3, r1
 801b89a:	b212      	sxth	r2, r2
 801b89c:	b21b      	sxth	r3, r3
 801b89e:	429a      	cmp	r2, r3
 801b8a0:	dc20      	bgt.n	801b8e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801b8a2:	6823      	ldr	r3, [r4, #0]
 801b8a4:	4620      	mov	r0, r4
 801b8a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b8a8:	4798      	blx	r3
 801b8aa:	4682      	mov	sl, r0
 801b8ac:	6828      	ldr	r0, [r5, #0]
 801b8ae:	6803      	ldr	r3, [r0, #0]
 801b8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b8b2:	4798      	blx	r3
 801b8b4:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801b8b8:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801b8bc:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801b8c0:	9303      	str	r3, [sp, #12]
 801b8c2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b8c6:	1a9b      	subs	r3, r3, r2
 801b8c8:	b29b      	uxth	r3, r3
 801b8ca:	b21c      	sxth	r4, r3
 801b8cc:	2c00      	cmp	r4, #0
 801b8ce:	dc0e      	bgt.n	801b8ee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801b8d0:	b134      	cbz	r4, 801b8e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801b8d2:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b8d6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801b8da:	4413      	add	r3, r2
 801b8dc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801b8e0:	463c      	mov	r4, r7
 801b8e2:	e00b      	b.n	801b8fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801b8e4:	4b4e      	ldr	r3, [pc, #312]	; (801ba20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801b8e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b8ea:	4a47      	ldr	r2, [pc, #284]	; (801ba08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801b8ec:	e758      	b.n	801b7a0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801b8ee:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b8f2:	ebab 0303 	sub.w	r3, fp, r3
 801b8f6:	443c      	add	r4, r7
 801b8f8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801b8fc:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801b900:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801b904:	1a9b      	subs	r3, r3, r2
 801b906:	b29b      	uxth	r3, r3
 801b908:	b219      	sxth	r1, r3
 801b90a:	2900      	cmp	r1, #0
 801b90c:	dd50      	ble.n	801b9b0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801b90e:	9a03      	ldr	r2, [sp, #12]
 801b910:	fb02 4401 	mla	r4, r2, r1, r4
 801b914:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801b918:	1ad3      	subs	r3, r2, r3
 801b91a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b91e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801b922:	f1bc 0f00 	cmp.w	ip, #0
 801b926:	dd3f      	ble.n	801b9a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801b928:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801b92c:	2e00      	cmp	r6, #0
 801b92e:	dd3b      	ble.n	801b9a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801b930:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801b934:	2203      	movs	r2, #3
 801b936:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b93a:	fb0a f801 	mul.w	r8, sl, r1
 801b93e:	fb13 8802 	smlabb	r8, r3, r2, r8
 801b942:	9a02      	ldr	r2, [sp, #8]
 801b944:	4480      	add	r8, r0
 801b946:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801b94a:	8812      	ldrh	r2, [r2, #0]
 801b94c:	4584      	cmp	ip, r0
 801b94e:	eba2 0303 	sub.w	r3, r2, r3
 801b952:	bfa8      	it	ge
 801b954:	4684      	movge	ip, r0
 801b956:	459c      	cmp	ip, r3
 801b958:	bfa8      	it	ge
 801b95a:	469c      	movge	ip, r3
 801b95c:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801b960:	429e      	cmp	r6, r3
 801b962:	bfa8      	it	ge
 801b964:	461e      	movge	r6, r3
 801b966:	4b2d      	ldr	r3, [pc, #180]	; (801ba1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801b968:	881b      	ldrh	r3, [r3, #0]
 801b96a:	1a59      	subs	r1, r3, r1
 801b96c:	4633      	mov	r3, r6
 801b96e:	428e      	cmp	r6, r1
 801b970:	bfa8      	it	ge
 801b972:	460b      	movge	r3, r1
 801b974:	4562      	cmp	r2, ip
 801b976:	9302      	str	r3, [sp, #8]
 801b978:	d12d      	bne.n	801b9d6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801b97a:	455a      	cmp	r2, fp
 801b97c:	d12b      	bne.n	801b9d6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801b97e:	6828      	ldr	r0, [r5, #0]
 801b980:	6803      	ldr	r3, [r0, #0]
 801b982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b984:	4798      	blx	r3
 801b986:	07c3      	lsls	r3, r0, #31
 801b988:	d51b      	bpl.n	801b9c2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801b98a:	6828      	ldr	r0, [r5, #0]
 801b98c:	9b02      	ldr	r3, [sp, #8]
 801b98e:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801b992:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801b996:	6803      	ldr	r3, [r0, #0]
 801b998:	f8cd b000 	str.w	fp, [sp]
 801b99c:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801b99e:	4623      	mov	r3, r4
 801b9a0:	e899 0006 	ldmia.w	r9, {r1, r2}
 801b9a4:	47a8      	blx	r5
 801b9a6:	4607      	mov	r7, r0
 801b9a8:	4638      	mov	r0, r7
 801b9aa:	b00f      	add	sp, #60	; 0x3c
 801b9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9b0:	bf1f      	itttt	ne
 801b9b2:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801b9b6:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801b9ba:	189b      	addne	r3, r3, r2
 801b9bc:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801b9c0:	e7ad      	b.n	801b91e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801b9c2:	6828      	ldr	r0, [r5, #0]
 801b9c4:	4642      	mov	r2, r8
 801b9c6:	4621      	mov	r1, r4
 801b9c8:	6803      	ldr	r3, [r0, #0]
 801b9ca:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801b9cc:	9b02      	ldr	r3, [sp, #8]
 801b9ce:	fb03 f30a 	mul.w	r3, r3, sl
 801b9d2:	47a8      	blx	r5
 801b9d4:	e7e8      	b.n	801b9a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801b9d6:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801b9da:	f04f 0900 	mov.w	r9, #0
 801b9de:	9b02      	ldr	r3, [sp, #8]
 801b9e0:	454b      	cmp	r3, r9
 801b9e2:	dde1      	ble.n	801b9a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801b9e4:	6828      	ldr	r0, [r5, #0]
 801b9e6:	4642      	mov	r2, r8
 801b9e8:	4621      	mov	r1, r4
 801b9ea:	44d0      	add	r8, sl
 801b9ec:	6803      	ldr	r3, [r0, #0]
 801b9ee:	f109 0901 	add.w	r9, r9, #1
 801b9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b9f4:	461e      	mov	r6, r3
 801b9f6:	465b      	mov	r3, fp
 801b9f8:	47b0      	blx	r6
 801b9fa:	9b03      	ldr	r3, [sp, #12]
 801b9fc:	441c      	add	r4, r3
 801b9fe:	e7ee      	b.n	801b9de <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801ba00:	2000b1ac 	.word	0x2000b1ac
 801ba04:	0802914e 	.word	0x0802914e
 801ba08:	0802992d 	.word	0x0802992d
 801ba0c:	0802911c 	.word	0x0802911c
 801ba10:	08029202 	.word	0x08029202
 801ba14:	08029257 	.word	0x08029257
 801ba18:	2000b1a6 	.word	0x2000b1a6
 801ba1c:	2000b1a8 	.word	0x2000b1a8
 801ba20:	08029295 	.word	0x08029295

0801ba24 <_ZN8touchgfx8LCD24bppC1Ev>:
 801ba24:	4a0b      	ldr	r2, [pc, #44]	; (801ba54 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801ba26:	6002      	str	r2, [r0, #0]
 801ba28:	2200      	movs	r2, #0
 801ba2a:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801ba2e:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801ba32:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801ba36:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801ba3a:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801ba3e:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801ba42:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801ba46:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801ba4a:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801ba4e:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801ba52:	4770      	bx	lr
 801ba54:	08029578 	.word	0x08029578

0801ba58 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801ba58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba5c:	b093      	sub	sp, #76	; 0x4c
 801ba5e:	880c      	ldrh	r4, [r1, #0]
 801ba60:	4605      	mov	r5, r0
 801ba62:	460f      	mov	r7, r1
 801ba64:	4691      	mov	r9, r2
 801ba66:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801ba6a:	b12c      	cbz	r4, 801ba78 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801ba6c:	4b71      	ldr	r3, [pc, #452]	; (801bc34 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801ba6e:	2167      	movs	r1, #103	; 0x67
 801ba70:	4a71      	ldr	r2, [pc, #452]	; (801bc38 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801ba72:	4872      	ldr	r0, [pc, #456]	; (801bc3c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801ba74:	f007 fb16 	bl	80230a4 <__assert_func>
 801ba78:	6810      	ldr	r0, [r2, #0]
 801ba7a:	ae0e      	add	r6, sp, #56	; 0x38
 801ba7c:	6851      	ldr	r1, [r2, #4]
 801ba7e:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801bc44 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801ba82:	c603      	stmia	r6!, {r0, r1}
 801ba84:	6818      	ldr	r0, [r3, #0]
 801ba86:	ae10      	add	r6, sp, #64	; 0x40
 801ba88:	6859      	ldr	r1, [r3, #4]
 801ba8a:	c603      	stmia	r6!, {r0, r1}
 801ba8c:	a80e      	add	r0, sp, #56	; 0x38
 801ba8e:	f7fb fa29 	bl	8016ee4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ba92:	4649      	mov	r1, r9
 801ba94:	a810      	add	r0, sp, #64	; 0x40
 801ba96:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801bc40 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801ba9a:	f7fb fa0b 	bl	8016eb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ba9e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801baa2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801baa6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801baaa:	f8d9 0000 	ldr.w	r0, [r9]
 801baae:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bab2:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801bab6:	440d      	add	r5, r1
 801bab8:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801babc:	440a      	add	r2, r1
 801babe:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801bac2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801bac6:	4413      	add	r3, r2
 801bac8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801bacc:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801bad0:	930b      	str	r3, [sp, #44]	; 0x2c
 801bad2:	6803      	ldr	r3, [r0, #0]
 801bad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801bad8:	4798      	blx	r3
 801bada:	2801      	cmp	r0, #1
 801badc:	d11e      	bne.n	801bb1c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801bade:	220b      	movs	r2, #11
 801bae0:	9008      	str	r0, [sp, #32]
 801bae2:	b2b6      	uxth	r6, r6
 801bae4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801bae8:	9207      	str	r2, [sp, #28]
 801baea:	4629      	mov	r1, r5
 801baec:	f8ba 2000 	ldrh.w	r2, [sl]
 801baf0:	f8cd 8010 	str.w	r8, [sp, #16]
 801baf4:	9601      	str	r6, [sp, #4]
 801baf6:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801bafa:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801bafe:	9203      	str	r2, [sp, #12]
 801bb00:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801bb04:	9202      	str	r2, [sp, #8]
 801bb06:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801bb0a:	9200      	str	r2, [sp, #0]
 801bb0c:	463a      	mov	r2, r7
 801bb0e:	f8d9 0000 	ldr.w	r0, [r9]
 801bb12:	f7f8 fcc7 	bl	80144a4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801bb16:	b013      	add	sp, #76	; 0x4c
 801bb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb1c:	f8d9 0000 	ldr.w	r0, [r9]
 801bb20:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801bb24:	6803      	ldr	r3, [r0, #0]
 801bb26:	6a1b      	ldr	r3, [r3, #32]
 801bb28:	4798      	blx	r3
 801bb2a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801bb2e:	f8ba 3000 	ldrh.w	r3, [sl]
 801bb32:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801bb36:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801bb3a:	fb01 2303 	mla	r3, r1, r3, r2
 801bb3e:	4621      	mov	r1, r4
 801bb40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bb44:	4418      	add	r0, r3
 801bb46:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801bb4a:	930c      	str	r3, [sp, #48]	; 0x30
 801bb4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bb4e:	4299      	cmp	r1, r3
 801bb50:	da6a      	bge.n	801bc28 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801bb52:	1cc2      	adds	r2, r0, #3
 801bb54:	46aa      	mov	sl, r5
 801bb56:	ebaa 0305 	sub.w	r3, sl, r5
 801bb5a:	429e      	cmp	r6, r3
 801bb5c:	dd55      	ble.n	801bc0a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801bb5e:	2404      	movs	r4, #4
 801bb60:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801bb64:	fb14 4303 	smlabb	r3, r4, r3, r4
 801bb68:	eb07 0e03 	add.w	lr, r7, r3
 801bb6c:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801bb70:	b184      	cbz	r4, 801bb94 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801bb72:	2cff      	cmp	r4, #255	; 0xff
 801bb74:	f817 b003 	ldrb.w	fp, [r7, r3]
 801bb78:	d10e      	bne.n	801bb98 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801bb7a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801bb7e:	d10b      	bne.n	801bb98 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801bb80:	f802 bc03 	strb.w	fp, [r2, #-3]
 801bb84:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801bb88:	f802 3c02 	strb.w	r3, [r2, #-2]
 801bb8c:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801bb90:	f802 3c01 	strb.w	r3, [r2, #-1]
 801bb94:	3203      	adds	r2, #3
 801bb96:	e7de      	b.n	801bb56 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801bb98:	fb08 f404 	mul.w	r4, r8, r4
 801bb9c:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801bba0:	1c63      	adds	r3, r4, #1
 801bba2:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801bba6:	121b      	asrs	r3, r3, #8
 801bba8:	b29c      	uxth	r4, r3
 801bbaa:	43db      	mvns	r3, r3
 801bbac:	fb1b fb04 	smulbb	fp, fp, r4
 801bbb0:	b2db      	uxtb	r3, r3
 801bbb2:	fb0c bc03 	mla	ip, ip, r3, fp
 801bbb6:	fa1f fc8c 	uxth.w	ip, ip
 801bbba:	f10c 0b01 	add.w	fp, ip, #1
 801bbbe:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bbc2:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801bbc6:	fb1b fb03 	smulbb	fp, fp, r3
 801bbca:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bbce:	f802 cc03 	strb.w	ip, [r2, #-3]
 801bbd2:	f89e c001 	ldrb.w	ip, [lr, #1]
 801bbd6:	fb0c bc04 	mla	ip, ip, r4, fp
 801bbda:	fa1f fc8c 	uxth.w	ip, ip
 801bbde:	f10c 0b01 	add.w	fp, ip, #1
 801bbe2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bbe6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bbea:	f802 cc02 	strb.w	ip, [r2, #-2]
 801bbee:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801bbf2:	f89e e002 	ldrb.w	lr, [lr, #2]
 801bbf6:	fb1c f303 	smulbb	r3, ip, r3
 801bbfa:	fb0e 3304 	mla	r3, lr, r4, r3
 801bbfe:	b29b      	uxth	r3, r3
 801bc00:	1c5c      	adds	r4, r3, #1
 801bc02:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801bc06:	121b      	asrs	r3, r3, #8
 801bc08:	e7c2      	b.n	801bb90 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801bc0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bc0c:	3101      	adds	r1, #1
 801bc0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bc10:	881b      	ldrh	r3, [r3, #0]
 801bc12:	1b9b      	subs	r3, r3, r6
 801bc14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bc18:	4413      	add	r3, r2
 801bc1a:	4418      	add	r0, r3
 801bc1c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801bc20:	1b9b      	subs	r3, r3, r6
 801bc22:	444b      	add	r3, r9
 801bc24:	441d      	add	r5, r3
 801bc26:	e791      	b.n	801bb4c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801bc28:	4b05      	ldr	r3, [pc, #20]	; (801bc40 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801bc2a:	6818      	ldr	r0, [r3, #0]
 801bc2c:	6803      	ldr	r3, [r0, #0]
 801bc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc30:	4798      	blx	r3
 801bc32:	e770      	b.n	801bb16 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801bc34:	08029080 	.word	0x08029080
 801bc38:	0802974f 	.word	0x0802974f
 801bc3c:	0802911c 	.word	0x0802911c
 801bc40:	2000b1ac 	.word	0x2000b1ac
 801bc44:	2000b1a6 	.word	0x2000b1a6

0801bc48 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801bc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc4c:	4614      	mov	r4, r2
 801bc4e:	880a      	ldrh	r2, [r1, #0]
 801bc50:	b091      	sub	sp, #68	; 0x44
 801bc52:	4680      	mov	r8, r0
 801bc54:	2a01      	cmp	r2, #1
 801bc56:	460e      	mov	r6, r1
 801bc58:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801bc5c:	d005      	beq.n	801bc6a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801bc5e:	4b6d      	ldr	r3, [pc, #436]	; (801be14 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801bc60:	21b5      	movs	r1, #181	; 0xb5
 801bc62:	4a6d      	ldr	r2, [pc, #436]	; (801be18 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801bc64:	486d      	ldr	r0, [pc, #436]	; (801be1c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801bc66:	f007 fa1d 	bl	80230a4 <__assert_func>
 801bc6a:	6820      	ldr	r0, [r4, #0]
 801bc6c:	ad0c      	add	r5, sp, #48	; 0x30
 801bc6e:	6861      	ldr	r1, [r4, #4]
 801bc70:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801be20 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801bc74:	c503      	stmia	r5!, {r0, r1}
 801bc76:	6818      	ldr	r0, [r3, #0]
 801bc78:	ad0e      	add	r5, sp, #56	; 0x38
 801bc7a:	6859      	ldr	r1, [r3, #4]
 801bc7c:	c503      	stmia	r5!, {r0, r1}
 801bc7e:	a80c      	add	r0, sp, #48	; 0x30
 801bc80:	f7fb f930 	bl	8016ee4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bc84:	4621      	mov	r1, r4
 801bc86:	a80e      	add	r0, sp, #56	; 0x38
 801bc88:	f7fb f914 	bl	8016eb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bc8c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801bc90:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801bc94:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801bc98:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801bc9c:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bca0:	eb08 0401 	add.w	r4, r8, r1
 801bca4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801bca8:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801be24 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801bcac:	440a      	add	r2, r1
 801bcae:	f8d8 0000 	ldr.w	r0, [r8]
 801bcb2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801bcb6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801bcba:	4413      	add	r3, r2
 801bcbc:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801bcc0:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801bcc4:	930a      	str	r3, [sp, #40]	; 0x28
 801bcc6:	6803      	ldr	r3, [r0, #0]
 801bcc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801bccc:	4798      	blx	r3
 801bcce:	2801      	cmp	r0, #1
 801bcd0:	d11e      	bne.n	801bd10 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801bcd2:	220b      	movs	r2, #11
 801bcd4:	9008      	str	r0, [sp, #32]
 801bcd6:	b2ad      	uxth	r5, r5
 801bcd8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801bcdc:	9207      	str	r2, [sp, #28]
 801bcde:	4621      	mov	r1, r4
 801bce0:	f8b9 2000 	ldrh.w	r2, [r9]
 801bce4:	9501      	str	r5, [sp, #4]
 801bce6:	9206      	str	r2, [sp, #24]
 801bce8:	2200      	movs	r2, #0
 801bcea:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801bcee:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801bcf2:	9203      	str	r2, [sp, #12]
 801bcf4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801bcf8:	9202      	str	r2, [sp, #8]
 801bcfa:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801bcfe:	9200      	str	r2, [sp, #0]
 801bd00:	4632      	mov	r2, r6
 801bd02:	f8d8 0000 	ldr.w	r0, [r8]
 801bd06:	f7f8 fbcd 	bl	80144a4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801bd0a:	b011      	add	sp, #68	; 0x44
 801bd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd10:	f8d8 0000 	ldr.w	r0, [r8]
 801bd14:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801bd18:	6803      	ldr	r3, [r0, #0]
 801bd1a:	6a1b      	ldr	r3, [r3, #32]
 801bd1c:	4798      	blx	r3
 801bd1e:	f8b9 3000 	ldrh.w	r3, [r9]
 801bd22:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801bd26:	f04f 0e00 	mov.w	lr, #0
 801bd2a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801bd2e:	fa1f f987 	uxth.w	r9, r7
 801bd32:	fb01 2303 	mla	r3, r1, r3, r2
 801bd36:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801bd3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bd3e:	b289      	uxth	r1, r1
 801bd40:	4418      	add	r0, r3
 801bd42:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801bd46:	930b      	str	r3, [sp, #44]	; 0x2c
 801bd48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bd4a:	459e      	cmp	lr, r3
 801bd4c:	da5c      	bge.n	801be08 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801bd4e:	1cc3      	adds	r3, r0, #3
 801bd50:	46a2      	mov	sl, r4
 801bd52:	ebaa 0204 	sub.w	r2, sl, r4
 801bd56:	4295      	cmp	r5, r2
 801bd58:	dd46      	ble.n	801bde8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801bd5a:	f04f 0c03 	mov.w	ip, #3
 801bd5e:	f04f 0b04 	mov.w	fp, #4
 801bd62:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801bd66:	2fff      	cmp	r7, #255	; 0xff
 801bd68:	fb1c b202 	smlabb	r2, ip, r2, fp
 801bd6c:	eb06 0c02 	add.w	ip, r6, r2
 801bd70:	f816 b002 	ldrb.w	fp, [r6, r2]
 801bd74:	d02f      	beq.n	801bdd6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801bd76:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801bd7a:	fb12 f201 	smulbb	r2, r2, r1
 801bd7e:	fb0b 2209 	mla	r2, fp, r9, r2
 801bd82:	b292      	uxth	r2, r2
 801bd84:	f102 0b01 	add.w	fp, r2, #1
 801bd88:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801bd8c:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801bd90:	fb1b fb01 	smulbb	fp, fp, r1
 801bd94:	1212      	asrs	r2, r2, #8
 801bd96:	f803 2c03 	strb.w	r2, [r3, #-3]
 801bd9a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801bd9e:	fb02 b209 	mla	r2, r2, r9, fp
 801bda2:	b292      	uxth	r2, r2
 801bda4:	f102 0b01 	add.w	fp, r2, #1
 801bda8:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801bdac:	1212      	asrs	r2, r2, #8
 801bdae:	f803 2c02 	strb.w	r2, [r3, #-2]
 801bdb2:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801bdb6:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801bdba:	fb1c fc01 	smulbb	ip, ip, r1
 801bdbe:	fb02 c209 	mla	r2, r2, r9, ip
 801bdc2:	b292      	uxth	r2, r2
 801bdc4:	f102 0c01 	add.w	ip, r2, #1
 801bdc8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801bdcc:	1212      	asrs	r2, r2, #8
 801bdce:	f803 2c01 	strb.w	r2, [r3, #-1]
 801bdd2:	3303      	adds	r3, #3
 801bdd4:	e7bd      	b.n	801bd52 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801bdd6:	f803 bc03 	strb.w	fp, [r3, #-3]
 801bdda:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801bdde:	f803 2c02 	strb.w	r2, [r3, #-2]
 801bde2:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801bde6:	e7f2      	b.n	801bdce <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801bde8:	4b0d      	ldr	r3, [pc, #52]	; (801be20 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801bdea:	f10e 0e01 	add.w	lr, lr, #1
 801bdee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bdf0:	881b      	ldrh	r3, [r3, #0]
 801bdf2:	1b5b      	subs	r3, r3, r5
 801bdf4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bdf8:	4413      	add	r3, r2
 801bdfa:	4418      	add	r0, r3
 801bdfc:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801be00:	1b5b      	subs	r3, r3, r5
 801be02:	4443      	add	r3, r8
 801be04:	441c      	add	r4, r3
 801be06:	e79f      	b.n	801bd48 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801be08:	4b06      	ldr	r3, [pc, #24]	; (801be24 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801be0a:	6818      	ldr	r0, [r3, #0]
 801be0c:	6803      	ldr	r3, [r0, #0]
 801be0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be10:	4798      	blx	r3
 801be12:	e77a      	b.n	801bd0a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801be14:	08028f8c 	.word	0x08028f8c
 801be18:	08029642 	.word	0x08029642
 801be1c:	0802911c 	.word	0x0802911c
 801be20:	2000b1a6 	.word	0x2000b1a6
 801be24:	2000b1ac 	.word	0x2000b1ac

0801be28 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801be28:	b570      	push	{r4, r5, r6, lr}
 801be2a:	780d      	ldrb	r5, [r1, #0]
 801be2c:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801be30:	2d01      	cmp	r5, #1
 801be32:	d00d      	beq.n	801be50 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801be34:	d307      	bcc.n	801be46 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801be36:	2d02      	cmp	r5, #2
 801be38:	d10f      	bne.n	801be5a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801be3a:	4b08      	ldr	r3, [pc, #32]	; (801be5c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801be3c:	215a      	movs	r1, #90	; 0x5a
 801be3e:	4a08      	ldr	r2, [pc, #32]	; (801be60 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801be40:	4808      	ldr	r0, [pc, #32]	; (801be64 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801be42:	f007 f92f 	bl	80230a4 <__assert_func>
 801be46:	9404      	str	r4, [sp, #16]
 801be48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801be4c:	f7ff be04 	b.w	801ba58 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801be50:	9404      	str	r4, [sp, #16]
 801be52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801be56:	f7ff bef7 	b.w	801bc48 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801be5a:	bd70      	pop	{r4, r5, r6, pc}
 801be5c:	08028f41 	.word	0x08028f41
 801be60:	080295c0 	.word	0x080295c0
 801be64:	0802911c 	.word	0x0802911c

0801be68 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801be68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be6c:	b08b      	sub	sp, #44	; 0x2c
 801be6e:	460c      	mov	r4, r1
 801be70:	4680      	mov	r8, r0
 801be72:	469a      	mov	sl, r3
 801be74:	6808      	ldr	r0, [r1, #0]
 801be76:	ab06      	add	r3, sp, #24
 801be78:	6849      	ldr	r1, [r1, #4]
 801be7a:	c303      	stmia	r3!, {r0, r1}
 801be7c:	6810      	ldr	r0, [r2, #0]
 801be7e:	ab08      	add	r3, sp, #32
 801be80:	6851      	ldr	r1, [r2, #4]
 801be82:	c303      	stmia	r3!, {r0, r1}
 801be84:	a806      	add	r0, sp, #24
 801be86:	f7fb f82d 	bl	8016ee4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801be8a:	4621      	mov	r1, r4
 801be8c:	a808      	add	r0, sp, #32
 801be8e:	4c61      	ldr	r4, [pc, #388]	; (801c014 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801be90:	f7fb f810 	bl	8016eb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801be94:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801be98:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801be9c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801bea0:	6820      	ldr	r0, [r4, #0]
 801bea2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bea6:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801beaa:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801beae:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801beb2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801beb6:	440a      	add	r2, r1
 801beb8:	f8ad 2020 	strh.w	r2, [sp, #32]
 801bebc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801bec0:	4413      	add	r3, r2
 801bec2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801bec6:	6803      	ldr	r3, [r0, #0]
 801bec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801beca:	4798      	blx	r3
 801becc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801bed0:	d118      	bne.n	801bf04 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801bed2:	f010 0f20 	tst.w	r0, #32
 801bed6:	6820      	ldr	r0, [r4, #0]
 801bed8:	d017      	beq.n	801bf0a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801beda:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801bede:	b2bf      	uxth	r7, r7
 801bee0:	6801      	ldr	r1, [r0, #0]
 801bee2:	9402      	str	r4, [sp, #8]
 801bee4:	fa1f f489 	uxth.w	r4, r9
 801bee8:	f8cd a00c 	str.w	sl, [sp, #12]
 801beec:	9401      	str	r4, [sp, #4]
 801beee:	9700      	str	r7, [sp, #0]
 801bef0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801bef4:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801bef6:	4641      	mov	r1, r8
 801bef8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801befc:	47a0      	blx	r4
 801befe:	b00b      	add	sp, #44	; 0x2c
 801bf00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf04:	f010 0f40 	tst.w	r0, #64	; 0x40
 801bf08:	e7e5      	b.n	801bed6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801bf0a:	6803      	ldr	r3, [r0, #0]
 801bf0c:	6a1b      	ldr	r3, [r3, #32]
 801bf0e:	4798      	blx	r3
 801bf10:	4b41      	ldr	r3, [pc, #260]	; (801c018 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801bf12:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801bf16:	f04f 0c00 	mov.w	ip, #0
 801bf1a:	881a      	ldrh	r2, [r3, #0]
 801bf1c:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801bf20:	fb04 1202 	mla	r2, r4, r2, r1
 801bf24:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bf28:	4410      	add	r0, r2
 801bf2a:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801bf2e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801bf32:	0092      	lsls	r2, r2, #2
 801bf34:	9105      	str	r1, [sp, #20]
 801bf36:	9204      	str	r2, [sp, #16]
 801bf38:	45cc      	cmp	ip, r9
 801bf3a:	da65      	bge.n	801c008 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801bf3c:	1cc4      	adds	r4, r0, #3
 801bf3e:	f108 0504 	add.w	r5, r8, #4
 801bf42:	f04f 0e00 	mov.w	lr, #0
 801bf46:	45be      	cmp	lr, r7
 801bf48:	da4d      	bge.n	801bfe6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801bf4a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801bf4e:	b181      	cbz	r1, 801bf72 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801bf50:	29ff      	cmp	r1, #255	; 0xff
 801bf52:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801bf56:	d111      	bne.n	801bf7c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801bf58:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801bf5c:	d10e      	bne.n	801bf7c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801bf5e:	f804 bc03 	strb.w	fp, [r4, #-3]
 801bf62:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801bf66:	f804 2c02 	strb.w	r2, [r4, #-2]
 801bf6a:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801bf6e:	f804 2c01 	strb.w	r2, [r4, #-1]
 801bf72:	f10e 0e01 	add.w	lr, lr, #1
 801bf76:	3403      	adds	r4, #3
 801bf78:	3504      	adds	r5, #4
 801bf7a:	e7e4      	b.n	801bf46 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801bf7c:	fb0a f101 	mul.w	r1, sl, r1
 801bf80:	1c4a      	adds	r2, r1, #1
 801bf82:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801bf86:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801bf8a:	1212      	asrs	r2, r2, #8
 801bf8c:	b296      	uxth	r6, r2
 801bf8e:	43d2      	mvns	r2, r2
 801bf90:	fb1b fb06 	smulbb	fp, fp, r6
 801bf94:	b2d2      	uxtb	r2, r2
 801bf96:	fb01 b102 	mla	r1, r1, r2, fp
 801bf9a:	b289      	uxth	r1, r1
 801bf9c:	f101 0b01 	add.w	fp, r1, #1
 801bfa0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801bfa4:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801bfa8:	fb1b fb02 	smulbb	fp, fp, r2
 801bfac:	1209      	asrs	r1, r1, #8
 801bfae:	f804 1c03 	strb.w	r1, [r4, #-3]
 801bfb2:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801bfb6:	fb01 b106 	mla	r1, r1, r6, fp
 801bfba:	b289      	uxth	r1, r1
 801bfbc:	f101 0b01 	add.w	fp, r1, #1
 801bfc0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801bfc4:	1209      	asrs	r1, r1, #8
 801bfc6:	f804 1c02 	strb.w	r1, [r4, #-2]
 801bfca:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801bfce:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801bfd2:	fb11 f202 	smulbb	r2, r1, r2
 801bfd6:	fb0b 2206 	mla	r2, fp, r6, r2
 801bfda:	b292      	uxth	r2, r2
 801bfdc:	1c56      	adds	r6, r2, #1
 801bfde:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801bfe2:	1212      	asrs	r2, r2, #8
 801bfe4:	e7c3      	b.n	801bf6e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801bfe6:	881a      	ldrh	r2, [r3, #0]
 801bfe8:	f10c 0c01 	add.w	ip, ip, #1
 801bfec:	9905      	ldr	r1, [sp, #20]
 801bfee:	1bd2      	subs	r2, r2, r7
 801bff0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bff4:	440a      	add	r2, r1
 801bff6:	9904      	ldr	r1, [sp, #16]
 801bff8:	4410      	add	r0, r2
 801bffa:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801bffe:	1bd2      	subs	r2, r2, r7
 801c000:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801c004:	4490      	add	r8, r2
 801c006:	e797      	b.n	801bf38 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801c008:	4b02      	ldr	r3, [pc, #8]	; (801c014 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801c00a:	6818      	ldr	r0, [r3, #0]
 801c00c:	6803      	ldr	r3, [r0, #0]
 801c00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c010:	4798      	blx	r3
 801c012:	e774      	b.n	801befe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801c014:	2000b1ac 	.word	0x2000b1ac
 801c018:	2000b1a6 	.word	0x2000b1a6

0801c01c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801c01c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c020:	b085      	sub	sp, #20
 801c022:	4606      	mov	r6, r0
 801c024:	460c      	mov	r4, r1
 801c026:	4691      	mov	r9, r2
 801c028:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801c02c:	4698      	mov	r8, r3
 801c02e:	b385      	cbz	r5, 801c092 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801c030:	4608      	mov	r0, r1
 801c032:	f7fd fae5 	bl	8019600 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c036:	4607      	mov	r7, r0
 801c038:	4620      	mov	r0, r4
 801c03a:	f7fd fb1b 	bl	8019674 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c03e:	f8ad 000e 	strh.w	r0, [sp, #14]
 801c042:	4620      	mov	r0, r4
 801c044:	f8ad 9008 	strh.w	r9, [sp, #8]
 801c048:	f8ad 800a 	strh.w	r8, [sp, #10]
 801c04c:	f8ad 700c 	strh.w	r7, [sp, #12]
 801c050:	f7fd fc62 	bl	8019918 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c054:	2801      	cmp	r0, #1
 801c056:	d00f      	beq.n	801c078 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801c058:	4620      	mov	r0, r4
 801c05a:	f7fd fc5d 	bl	8019918 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c05e:	2802      	cmp	r0, #2
 801c060:	d00a      	beq.n	801c078 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801c062:	4620      	mov	r0, r4
 801c064:	f7fd fc58 	bl	8019918 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c068:	280b      	cmp	r0, #11
 801c06a:	d005      	beq.n	801c078 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801c06c:	4b1b      	ldr	r3, [pc, #108]	; (801c0dc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801c06e:	2142      	movs	r1, #66	; 0x42
 801c070:	4a1b      	ldr	r2, [pc, #108]	; (801c0e0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801c072:	481c      	ldr	r0, [pc, #112]	; (801c0e4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 801c074:	f007 f816 	bl	80230a4 <__assert_func>
 801c078:	4620      	mov	r0, r4
 801c07a:	f7fd fc4d 	bl	8019918 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c07e:	2802      	cmp	r0, #2
 801c080:	4620      	mov	r0, r4
 801c082:	d109      	bne.n	801c098 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 801c084:	f7fd fbc4 	bl	8019810 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c088:	462b      	mov	r3, r5
 801c08a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c08c:	a902      	add	r1, sp, #8
 801c08e:	f7ff feeb 	bl	801be68 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c092:	b005      	add	sp, #20
 801c094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c098:	f7fd fc3e 	bl	8019918 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c09c:	280b      	cmp	r0, #11
 801c09e:	d10e      	bne.n	801c0be <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801c0a0:	4620      	mov	r0, r4
 801c0a2:	f7fd fbb5 	bl	8019810 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c0a6:	4606      	mov	r6, r0
 801c0a8:	4620      	mov	r0, r4
 801c0aa:	f7fd fbe3 	bl	8019874 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801c0ae:	9500      	str	r5, [sp, #0]
 801c0b0:	4601      	mov	r1, r0
 801c0b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c0b4:	aa02      	add	r2, sp, #8
 801c0b6:	4630      	mov	r0, r6
 801c0b8:	f7ff feb6 	bl	801be28 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801c0bc:	e7e9      	b.n	801c092 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801c0be:	6833      	ldr	r3, [r6, #0]
 801c0c0:	4620      	mov	r0, r4
 801c0c2:	691f      	ldr	r7, [r3, #16]
 801c0c4:	f7fd fba4 	bl	8019810 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c0c8:	2300      	movs	r3, #0
 801c0ca:	4601      	mov	r1, r0
 801c0cc:	aa02      	add	r2, sp, #8
 801c0ce:	4630      	mov	r0, r6
 801c0d0:	e9cd 5300 	strd	r5, r3, [sp]
 801c0d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c0d6:	47b8      	blx	r7
 801c0d8:	e7db      	b.n	801c092 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801c0da:	bf00      	nop
 801c0dc:	08028fda 	.word	0x08028fda
 801c0e0:	080296cb 	.word	0x080296cb
 801c0e4:	0802911c 	.word	0x0802911c

0801c0e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801c0e8:	b570      	push	{r4, r5, r6, lr}
 801c0ea:	9d04      	ldr	r5, [sp, #16]
 801c0ec:	460c      	mov	r4, r1
 801c0ee:	4619      	mov	r1, r3
 801c0f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801c0f4:	2a0c      	cmp	r2, #12
 801c0f6:	d826      	bhi.n	801c146 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801c0f8:	e8df f002 	tbb	[pc, r2]
 801c0fc:	200e1407 	.word	0x200e1407
 801c100:	20202020 	.word	0x20202020
 801c104:	20202020 	.word	0x20202020
 801c108:	20          	.byte	0x20
 801c109:	00          	.byte	0x00
 801c10a:	4b0f      	ldr	r3, [pc, #60]	; (801c148 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801c10c:	f240 117f 	movw	r1, #383	; 0x17f
 801c110:	4a0e      	ldr	r2, [pc, #56]	; (801c14c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801c112:	480f      	ldr	r0, [pc, #60]	; (801c150 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801c114:	f006 ffc6 	bl	80230a4 <__assert_func>
 801c118:	462a      	mov	r2, r5
 801c11a:	4620      	mov	r0, r4
 801c11c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c120:	f7ff bea2 	b.w	801be68 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c124:	6802      	ldr	r2, [r0, #0]
 801c126:	2600      	movs	r6, #0
 801c128:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801c12c:	6916      	ldr	r6, [r2, #16]
 801c12e:	462b      	mov	r3, r5
 801c130:	460a      	mov	r2, r1
 801c132:	4621      	mov	r1, r4
 801c134:	46b4      	mov	ip, r6
 801c136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c13a:	4760      	bx	ip
 801c13c:	4b05      	ldr	r3, [pc, #20]	; (801c154 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801c13e:	f240 1191 	movw	r1, #401	; 0x191
 801c142:	4a02      	ldr	r2, [pc, #8]	; (801c14c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801c144:	e7e5      	b.n	801c112 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801c146:	bd70      	pop	{r4, r5, r6, pc}
 801c148:	080292f5 	.word	0x080292f5
 801c14c:	080299b3 	.word	0x080299b3
 801c150:	0802911c 	.word	0x0802911c
 801c154:	08029336 	.word	0x08029336

0801c158 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801c158:	b158      	cbz	r0, 801c172 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801c15a:	2902      	cmp	r1, #2
 801c15c:	d00f      	beq.n	801c17e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801c15e:	2903      	cmp	r1, #3
 801c160:	d010      	beq.n	801c184 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801c162:	2901      	cmp	r1, #1
 801c164:	d101      	bne.n	801c16a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801c166:	2001      	movs	r0, #1
 801c168:	4770      	bx	lr
 801c16a:	4b08      	ldr	r3, [pc, #32]	; (801c18c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801c16c:	8819      	ldrh	r1, [r3, #0]
 801c16e:	4248      	negs	r0, r1
 801c170:	4770      	bx	lr
 801c172:	2902      	cmp	r1, #2
 801c174:	d006      	beq.n	801c184 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801c176:	2903      	cmp	r1, #3
 801c178:	d0f7      	beq.n	801c16a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801c17a:	2901      	cmp	r1, #1
 801c17c:	d1f3      	bne.n	801c166 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801c17e:	4b03      	ldr	r3, [pc, #12]	; (801c18c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801c180:	8818      	ldrh	r0, [r3, #0]
 801c182:	4770      	bx	lr
 801c184:	f04f 30ff 	mov.w	r0, #4294967295
 801c188:	4770      	bx	lr
 801c18a:	bf00      	nop
 801c18c:	2000b1a6 	.word	0x2000b1a6

0801c190 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801c190:	b170      	cbz	r0, 801c1b0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801c192:	2902      	cmp	r1, #2
 801c194:	d012      	beq.n	801c1bc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801c196:	2903      	cmp	r1, #3
 801c198:	d006      	beq.n	801c1a8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801c19a:	2901      	cmp	r1, #1
 801c19c:	d001      	beq.n	801c1a2 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801c19e:	2001      	movs	r0, #1
 801c1a0:	4770      	bx	lr
 801c1a2:	4b08      	ldr	r3, [pc, #32]	; (801c1c4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801c1a4:	8818      	ldrh	r0, [r3, #0]
 801c1a6:	4770      	bx	lr
 801c1a8:	4b06      	ldr	r3, [pc, #24]	; (801c1c4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801c1aa:	8818      	ldrh	r0, [r3, #0]
 801c1ac:	4240      	negs	r0, r0
 801c1ae:	4770      	bx	lr
 801c1b0:	2902      	cmp	r1, #2
 801c1b2:	d0f9      	beq.n	801c1a8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801c1b4:	2903      	cmp	r1, #3
 801c1b6:	d0f2      	beq.n	801c19e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801c1b8:	2901      	cmp	r1, #1
 801c1ba:	d1f2      	bne.n	801c1a2 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801c1bc:	f04f 30ff 	mov.w	r0, #4294967295
 801c1c0:	4770      	bx	lr
 801c1c2:	bf00      	nop
 801c1c4:	2000b1a6 	.word	0x2000b1a6

0801c1c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801c1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1cc:	b095      	sub	sp, #84	; 0x54
 801c1ce:	9109      	str	r1, [sp, #36]	; 0x24
 801c1d0:	a910      	add	r1, sp, #64	; 0x40
 801c1d2:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 801c1d6:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 801c1da:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801c1de:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801c1e2:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801c1e6:	e881 000c 	stmia.w	r1, {r2, r3}
 801c1ea:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801c1ee:	9306      	str	r3, [sp, #24]
 801c1f0:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801c1f4:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801c1f8:	930e      	str	r3, [sp, #56]	; 0x38
 801c1fa:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801c1fe:	798f      	ldrb	r7, [r1, #6]
 801c200:	930a      	str	r3, [sp, #40]	; 0x28
 801c202:	7b4b      	ldrb	r3, [r1, #13]
 801c204:	0158      	lsls	r0, r3, #5
 801c206:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801c20a:	4338      	orrs	r0, r7
 801c20c:	9008      	str	r0, [sp, #32]
 801c20e:	f000 8174 	beq.w	801c4fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801c212:	011b      	lsls	r3, r3, #4
 801c214:	79c8      	ldrb	r0, [r1, #7]
 801c216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c21a:	4303      	orrs	r3, r0
 801c21c:	9307      	str	r3, [sp, #28]
 801c21e:	f000 816c 	beq.w	801c4fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801c222:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801c226:	b29b      	uxth	r3, r3
 801c228:	2e00      	cmp	r6, #0
 801c22a:	f000 8112 	beq.w	801c452 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 801c22e:	1af6      	subs	r6, r6, r3
 801c230:	b2b6      	uxth	r6, r6
 801c232:	0433      	lsls	r3, r6, #16
 801c234:	d502      	bpl.n	801c23c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801c236:	1bad      	subs	r5, r5, r6
 801c238:	2600      	movs	r6, #0
 801c23a:	b22d      	sxth	r5, r5
 801c23c:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c240:	a810      	add	r0, sp, #64	; 0x40
 801c242:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801c246:	428d      	cmp	r5, r1
 801c248:	b28b      	uxth	r3, r1
 801c24a:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801c24e:	bfbf      	itttt	lt
 801c250:	18f6      	addlt	r6, r6, r3
 801c252:	1b75      	sublt	r5, r6, r5
 801c254:	b2ae      	uxthlt	r6, r5
 801c256:	460d      	movlt	r5, r1
 801c258:	8891      	ldrh	r1, [r2, #4]
 801c25a:	440b      	add	r3, r1
 801c25c:	4629      	mov	r1, r5
 801c25e:	b21b      	sxth	r3, r3
 801c260:	930d      	str	r3, [sp, #52]	; 0x34
 801c262:	88d3      	ldrh	r3, [r2, #6]
 801c264:	9a06      	ldr	r2, [sp, #24]
 801c266:	449a      	add	sl, r3
 801c268:	fa0f f38a 	sxth.w	r3, sl
 801c26c:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801c270:	930c      	str	r3, [sp, #48]	; 0x30
 801c272:	4bb8      	ldr	r3, [pc, #736]	; (801c554 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801c274:	f893 b000 	ldrb.w	fp, [r3]
 801c278:	f10b 3cff 	add.w	ip, fp, #4294967295
 801c27c:	f1dc 0300 	rsbs	r3, ip, #0
 801c280:	eb43 030c 	adc.w	r3, r3, ip
 801c284:	930b      	str	r3, [sp, #44]	; 0x2c
 801c286:	464b      	mov	r3, r9
 801c288:	f7fa fd06 	bl	8016c98 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801c28c:	4629      	mov	r1, r5
 801c28e:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801c292:	464b      	mov	r3, r9
 801c294:	9a06      	ldr	r2, [sp, #24]
 801c296:	a810      	add	r0, sp, #64	; 0x40
 801c298:	f7fa fd16 	bl	8016cc8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801c29c:	a914      	add	r1, sp, #80	; 0x50
 801c29e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801c2a2:	a813      	add	r0, sp, #76	; 0x4c
 801c2a4:	f7fa fdf0 	bl	8016e88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801c2a8:	f1b9 0f00 	cmp.w	r9, #0
 801c2ac:	f040 80d4 	bne.w	801c458 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 801c2b0:	f1bb 0f01 	cmp.w	fp, #1
 801c2b4:	f040 80d8 	bne.w	801c468 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 801c2b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c2ba:	2b00      	cmp	r3, #0
 801c2bc:	f040 8122 	bne.w	801c504 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 801c2c0:	4ba5      	ldr	r3, [pc, #660]	; (801c558 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801c2c2:	6818      	ldr	r0, [r3, #0]
 801c2c4:	6803      	ldr	r3, [r0, #0]
 801c2c6:	6a1b      	ldr	r3, [r3, #32]
 801c2c8:	4798      	blx	r3
 801c2ca:	4aa4      	ldr	r2, [pc, #656]	; (801c55c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801c2cc:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801c2d0:	8811      	ldrh	r1, [r2, #0]
 801c2d2:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801c2d6:	fb01 2303 	mla	r3, r1, r3, r2
 801c2da:	2201      	movs	r2, #1
 801c2dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c2e0:	4590      	cmp	r8, r2
 801c2e2:	4403      	add	r3, r0
 801c2e4:	9307      	str	r3, [sp, #28]
 801c2e6:	fa02 f308 	lsl.w	r3, r2, r8
 801c2ea:	f103 33ff 	add.w	r3, r3, #4294967295
 801c2ee:	b2db      	uxtb	r3, r3
 801c2f0:	930f      	str	r3, [sp, #60]	; 0x3c
 801c2f2:	f000 8109 	beq.w	801c508 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 801c2f6:	f1b8 0f02 	cmp.w	r8, #2
 801c2fa:	f000 813e 	beq.w	801c57a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801c2fe:	f1b8 0f04 	cmp.w	r8, #4
 801c302:	f000 8132 	beq.w	801c56a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801c306:	b906      	cbnz	r6, 801c30a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 801c308:	b174      	cbz	r4, 801c328 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801c30a:	fb17 6304 	smlabb	r3, r7, r4, r6
 801c30e:	9924      	ldr	r1, [sp, #144]	; 0x90
 801c310:	ebaa 0a04 	sub.w	sl, sl, r4
 801c314:	fb13 f308 	smulbb	r3, r3, r8
 801c318:	fa1f fa8a 	uxth.w	sl, sl
 801c31c:	b29b      	uxth	r3, r3
 801c31e:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801c322:	f003 0407 	and.w	r4, r3, #7
 801c326:	9124      	str	r1, [sp, #144]	; 0x90
 801c328:	4649      	mov	r1, r9
 801c32a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c32c:	f7ff ff14 	bl	801c158 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801c330:	4649      	mov	r1, r9
 801c332:	4683      	mov	fp, r0
 801c334:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c336:	f7ff ff2b 	bl	801c190 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801c33a:	9906      	ldr	r1, [sp, #24]
 801c33c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c33e:	1bad      	subs	r5, r5, r6
 801c340:	1a5b      	subs	r3, r3, r1
 801c342:	459a      	cmp	sl, r3
 801c344:	bfa8      	it	ge
 801c346:	469a      	movge	sl, r3
 801c348:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c34a:	1b5d      	subs	r5, r3, r5
 801c34c:	9b08      	ldr	r3, [sp, #32]
 801c34e:	429d      	cmp	r5, r3
 801c350:	bfd4      	ite	le
 801c352:	ebc6 0605 	rsble	r6, r6, r5
 801c356:	ebc6 0603 	rsbgt	r6, r6, r3
 801c35a:	1bbf      	subs	r7, r7, r6
 801c35c:	fb0b 0016 	mls	r0, fp, r6, r0
 801c360:	fb08 f307 	mul.w	r3, r8, r7
 801c364:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c368:	9308      	str	r3, [sp, #32]
 801c36a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c36c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801c370:	930b      	str	r3, [sp, #44]	; 0x2c
 801c372:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c374:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c378:	930c      	str	r3, [sp, #48]	; 0x30
 801c37a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c37c:	b2db      	uxtb	r3, r3
 801c37e:	930d      	str	r3, [sp, #52]	; 0x34
 801c380:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c382:	7819      	ldrb	r1, [r3, #0]
 801c384:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801c388:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 801c38c:	4121      	asrs	r1, r4
 801c38e:	9306      	str	r3, [sp, #24]
 801c390:	fb03 0b0b 	mla	fp, r3, fp, r0
 801c394:	b2c9      	uxtb	r1, r1
 801c396:	f1ba 0f00 	cmp.w	sl, #0
 801c39a:	f340 80d1 	ble.w	801c540 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801c39e:	46b6      	mov	lr, r6
 801c3a0:	9807      	ldr	r0, [sp, #28]
 801c3a2:	f1be 0f00 	cmp.w	lr, #0
 801c3a6:	f340 80b8 	ble.w	801c51a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801c3aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c3ac:	400b      	ands	r3, r1
 801c3ae:	d03e      	beq.n	801c42e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801c3b0:	fb13 f302 	smulbb	r3, r3, r2
 801c3b4:	2bfe      	cmp	r3, #254	; 0xfe
 801c3b6:	dd03      	ble.n	801c3c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 801c3b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801c3ba:	2dff      	cmp	r5, #255	; 0xff
 801c3bc:	f000 80a6 	beq.w	801c50c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801c3c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801c3c2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801c3c4:	fb15 f303 	smulbb	r3, r5, r3
 801c3c8:	b29b      	uxth	r3, r3
 801c3ca:	1c5d      	adds	r5, r3, #1
 801c3cc:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801c3d0:	7805      	ldrb	r5, [r0, #0]
 801c3d2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c3d6:	fa1f fc83 	uxth.w	ip, r3
 801c3da:	43db      	mvns	r3, r3
 801c3dc:	fb17 f90c 	smulbb	r9, r7, ip
 801c3e0:	b2db      	uxtb	r3, r3
 801c3e2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801c3e4:	fb05 9503 	mla	r5, r5, r3, r9
 801c3e8:	b2ad      	uxth	r5, r5
 801c3ea:	f105 0901 	add.w	r9, r5, #1
 801c3ee:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801c3f2:	fb17 f90c 	smulbb	r9, r7, ip
 801c3f6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801c3f8:	122d      	asrs	r5, r5, #8
 801c3fa:	fb17 fc0c 	smulbb	ip, r7, ip
 801c3fe:	7005      	strb	r5, [r0, #0]
 801c400:	7845      	ldrb	r5, [r0, #1]
 801c402:	fb05 9503 	mla	r5, r5, r3, r9
 801c406:	b2ad      	uxth	r5, r5
 801c408:	f105 0901 	add.w	r9, r5, #1
 801c40c:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801c410:	122d      	asrs	r5, r5, #8
 801c412:	7045      	strb	r5, [r0, #1]
 801c414:	7885      	ldrb	r5, [r0, #2]
 801c416:	fb05 cc03 	mla	ip, r5, r3, ip
 801c41a:	fa1f fc8c 	uxth.w	ip, ip
 801c41e:	f10c 0301 	add.w	r3, ip, #1
 801c422:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c426:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c42a:	f880 c002 	strb.w	ip, [r0, #2]
 801c42e:	4444      	add	r4, r8
 801c430:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c434:	b2a4      	uxth	r4, r4
 801c436:	2c07      	cmp	r4, #7
 801c438:	bf89      	itett	hi
 801c43a:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801c43c:	fa41 f108 	asrls.w	r1, r1, r8
 801c440:	2400      	movhi	r4, #0
 801c442:	7859      	ldrbhi	r1, [r3, #1]
 801c444:	bf8a      	itet	hi
 801c446:	3301      	addhi	r3, #1
 801c448:	b2c9      	uxtbls	r1, r1
 801c44a:	9324      	strhi	r3, [sp, #144]	; 0x90
 801c44c:	9b06      	ldr	r3, [sp, #24]
 801c44e:	4418      	add	r0, r3
 801c450:	e7a7      	b.n	801c3a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 801c452:	441d      	add	r5, r3
 801c454:	b22d      	sxth	r5, r5
 801c456:	e6f1      	b.n	801c23c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801c458:	f1b9 0f01 	cmp.w	r9, #1
 801c45c:	f47f af2c 	bne.w	801c2b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c460:	f1bb 0f01 	cmp.w	fp, #1
 801c464:	f47f af28 	bne.w	801c2b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c468:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 801c558 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801c46c:	f8db 0000 	ldr.w	r0, [fp]
 801c470:	6803      	ldr	r3, [r0, #0]
 801c472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c474:	4798      	blx	r3
 801c476:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801c47a:	465a      	mov	r2, fp
 801c47c:	d006      	beq.n	801c48c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801c47e:	f1b8 0f04 	cmp.w	r8, #4
 801c482:	d13d      	bne.n	801c500 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 801c484:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c486:	3300      	adds	r3, #0
 801c488:	bf18      	it	ne
 801c48a:	2301      	movne	r3, #1
 801c48c:	05c0      	lsls	r0, r0, #23
 801c48e:	d567      	bpl.n	801c560 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801c490:	f1b8 0f08 	cmp.w	r8, #8
 801c494:	d164      	bne.n	801c560 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801c496:	2b00      	cmp	r3, #0
 801c498:	bf0c      	ite	eq
 801c49a:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801c49e:	2180      	movne	r1, #128	; 0x80
 801c4a0:	2e00      	cmp	r6, #0
 801c4a2:	f47f af09 	bne.w	801c2b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c4a6:	2c00      	cmp	r4, #0
 801c4a8:	f47f af06 	bne.w	801c2b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c4ac:	9b08      	ldr	r3, [sp, #32]
 801c4ae:	980d      	ldr	r0, [sp, #52]	; 0x34
 801c4b0:	442b      	add	r3, r5
 801c4b2:	4283      	cmp	r3, r0
 801c4b4:	f73f af00 	bgt.w	801c2b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c4b8:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 801c4bc:	4403      	add	r3, r0
 801c4be:	980c      	ldr	r0, [sp, #48]	; 0x30
 801c4c0:	4283      	cmp	r3, r0
 801c4c2:	f73f aef9 	bgt.w	801c2b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c4c6:	f1b8 0f08 	cmp.w	r8, #8
 801c4ca:	6810      	ldr	r0, [r2, #0]
 801c4cc:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801c4d0:	bf18      	it	ne
 801c4d2:	3701      	addne	r7, #1
 801c4d4:	6804      	ldr	r4, [r0, #0]
 801c4d6:	9105      	str	r1, [sp, #20]
 801c4d8:	bf18      	it	ne
 801c4da:	f027 0701 	bicne.w	r7, r7, #1
 801c4de:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c4e0:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801c4e4:	bf18      	it	ne
 801c4e6:	b2bf      	uxthne	r7, r7
 801c4e8:	9104      	str	r1, [sp, #16]
 801c4ea:	9926      	ldr	r1, [sp, #152]	; 0x98
 801c4ec:	e9cd 7a00 	strd	r7, sl, [sp]
 801c4f0:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801c4f4:	9924      	ldr	r1, [sp, #144]	; 0x90
 801c4f6:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801c4f8:	47a0      	blx	r4
 801c4fa:	b015      	add	sp, #84	; 0x54
 801c4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c500:	2300      	movs	r3, #0
 801c502:	e7c3      	b.n	801c48c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801c504:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c506:	e6e0      	b.n	801c2ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801c508:	22ff      	movs	r2, #255	; 0xff
 801c50a:	e6fc      	b.n	801c306 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801c50c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c50e:	7003      	strb	r3, [r0, #0]
 801c510:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c512:	7043      	strb	r3, [r0, #1]
 801c514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c516:	7083      	strb	r3, [r0, #2]
 801c518:	e789      	b.n	801c42e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801c51a:	9b08      	ldr	r3, [sp, #32]
 801c51c:	b153      	cbz	r3, 801c534 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801c51e:	441c      	add	r4, r3
 801c520:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c522:	b2a4      	uxth	r4, r4
 801c524:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801c528:	f004 0407 	and.w	r4, r4, #7
 801c52c:	7819      	ldrb	r1, [r3, #0]
 801c52e:	9324      	str	r3, [sp, #144]	; 0x90
 801c530:	4121      	asrs	r1, r4
 801c532:	b2c9      	uxtb	r1, r1
 801c534:	9b07      	ldr	r3, [sp, #28]
 801c536:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c53a:	445b      	add	r3, fp
 801c53c:	9307      	str	r3, [sp, #28]
 801c53e:	e72a      	b.n	801c396 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 801c540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c542:	2b00      	cmp	r3, #0
 801c544:	d1d9      	bne.n	801c4fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801c546:	4b04      	ldr	r3, [pc, #16]	; (801c558 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801c548:	6818      	ldr	r0, [r3, #0]
 801c54a:	6803      	ldr	r3, [r0, #0]
 801c54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c54e:	4798      	blx	r3
 801c550:	e7d3      	b.n	801c4fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801c552:	bf00      	nop
 801c554:	2000b1a4 	.word	0x2000b1a4
 801c558:	2000b1ac 	.word	0x2000b1ac
 801c55c:	2000b1a6 	.word	0x2000b1a6
 801c560:	2b00      	cmp	r3, #0
 801c562:	f43f aea9 	beq.w	801c2b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c566:	2180      	movs	r1, #128	; 0x80
 801c568:	e79a      	b.n	801c4a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 801c56a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c56c:	b11b      	cbz	r3, 801c576 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801c56e:	07fb      	lsls	r3, r7, #31
 801c570:	d501      	bpl.n	801c576 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801c572:	3701      	adds	r7, #1
 801c574:	b2bf      	uxth	r7, r7
 801c576:	2211      	movs	r2, #17
 801c578:	e6c5      	b.n	801c306 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801c57a:	2255      	movs	r2, #85	; 0x55
 801c57c:	e6c3      	b.n	801c306 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801c57e:	bf00      	nop

0801c580 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801c580:	b538      	push	{r3, r4, r5, lr}
 801c582:	4c15      	ldr	r4, [pc, #84]	; (801c5d8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801c584:	4605      	mov	r5, r0
 801c586:	7823      	ldrb	r3, [r4, #0]
 801c588:	f3bf 8f5b 	dmb	ish
 801c58c:	07da      	lsls	r2, r3, #31
 801c58e:	d40b      	bmi.n	801c5a8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801c590:	4620      	mov	r0, r4
 801c592:	f006 fd5e 	bl	8023052 <__cxa_guard_acquire>
 801c596:	b138      	cbz	r0, 801c5a8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801c598:	4620      	mov	r0, r4
 801c59a:	f006 fd66 	bl	802306a <__cxa_guard_release>
 801c59e:	4a0f      	ldr	r2, [pc, #60]	; (801c5dc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801c5a0:	490f      	ldr	r1, [pc, #60]	; (801c5e0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801c5a2:	4810      	ldr	r0, [pc, #64]	; (801c5e4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801c5a4:	f006 fd4b 	bl	802303e <__aeabi_atexit>
 801c5a8:	4c0f      	ldr	r4, [pc, #60]	; (801c5e8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801c5aa:	7823      	ldrb	r3, [r4, #0]
 801c5ac:	f3bf 8f5b 	dmb	ish
 801c5b0:	07db      	lsls	r3, r3, #31
 801c5b2:	d40b      	bmi.n	801c5cc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801c5b4:	4620      	mov	r0, r4
 801c5b6:	f006 fd4c 	bl	8023052 <__cxa_guard_acquire>
 801c5ba:	b138      	cbz	r0, 801c5cc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801c5bc:	4620      	mov	r0, r4
 801c5be:	f006 fd54 	bl	802306a <__cxa_guard_release>
 801c5c2:	4a06      	ldr	r2, [pc, #24]	; (801c5dc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801c5c4:	4909      	ldr	r1, [pc, #36]	; (801c5ec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801c5c6:	480a      	ldr	r0, [pc, #40]	; (801c5f0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801c5c8:	f006 fd39 	bl	802303e <__aeabi_atexit>
 801c5cc:	4b05      	ldr	r3, [pc, #20]	; (801c5e4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801c5ce:	612b      	str	r3, [r5, #16]
 801c5d0:	4b07      	ldr	r3, [pc, #28]	; (801c5f0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801c5d2:	616b      	str	r3, [r5, #20]
 801c5d4:	bd38      	pop	{r3, r4, r5, pc}
 801c5d6:	bf00      	nop
 801c5d8:	2000b2b8 	.word	0x2000b2b8
 801c5dc:	20000000 	.word	0x20000000
 801c5e0:	0801b1b7 	.word	0x0801b1b7
 801c5e4:	20000094 	.word	0x20000094
 801c5e8:	2000b2bc 	.word	0x2000b2bc
 801c5ec:	0801b1b5 	.word	0x0801b1b5
 801c5f0:	20000098 	.word	0x20000098

0801c5f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801c5f4:	b538      	push	{r3, r4, r5, lr}
 801c5f6:	4c15      	ldr	r4, [pc, #84]	; (801c64c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801c5f8:	4605      	mov	r5, r0
 801c5fa:	7823      	ldrb	r3, [r4, #0]
 801c5fc:	f3bf 8f5b 	dmb	ish
 801c600:	07da      	lsls	r2, r3, #31
 801c602:	d40b      	bmi.n	801c61c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801c604:	4620      	mov	r0, r4
 801c606:	f006 fd24 	bl	8023052 <__cxa_guard_acquire>
 801c60a:	b138      	cbz	r0, 801c61c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801c60c:	4620      	mov	r0, r4
 801c60e:	f006 fd2c 	bl	802306a <__cxa_guard_release>
 801c612:	4a0f      	ldr	r2, [pc, #60]	; (801c650 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801c614:	490f      	ldr	r1, [pc, #60]	; (801c654 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801c616:	4810      	ldr	r0, [pc, #64]	; (801c658 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801c618:	f006 fd11 	bl	802303e <__aeabi_atexit>
 801c61c:	4c0f      	ldr	r4, [pc, #60]	; (801c65c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801c61e:	7823      	ldrb	r3, [r4, #0]
 801c620:	f3bf 8f5b 	dmb	ish
 801c624:	07db      	lsls	r3, r3, #31
 801c626:	d40b      	bmi.n	801c640 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801c628:	4620      	mov	r0, r4
 801c62a:	f006 fd12 	bl	8023052 <__cxa_guard_acquire>
 801c62e:	b138      	cbz	r0, 801c640 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801c630:	4620      	mov	r0, r4
 801c632:	f006 fd1a 	bl	802306a <__cxa_guard_release>
 801c636:	4a06      	ldr	r2, [pc, #24]	; (801c650 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801c638:	4909      	ldr	r1, [pc, #36]	; (801c660 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801c63a:	480a      	ldr	r0, [pc, #40]	; (801c664 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801c63c:	f006 fcff 	bl	802303e <__aeabi_atexit>
 801c640:	4b05      	ldr	r3, [pc, #20]	; (801c658 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801c642:	60ab      	str	r3, [r5, #8]
 801c644:	4b07      	ldr	r3, [pc, #28]	; (801c664 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801c646:	60eb      	str	r3, [r5, #12]
 801c648:	bd38      	pop	{r3, r4, r5, pc}
 801c64a:	bf00      	nop
 801c64c:	2000b298 	.word	0x2000b298
 801c650:	20000000 	.word	0x20000000
 801c654:	0801b1bb 	.word	0x0801b1bb
 801c658:	20000074 	.word	0x20000074
 801c65c:	2000b29c 	.word	0x2000b29c
 801c660:	0801b1b9 	.word	0x0801b1b9
 801c664:	20000078 	.word	0x20000078

0801c668 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801c668:	b510      	push	{r4, lr}
 801c66a:	4604      	mov	r4, r0
 801c66c:	f7ff ff88 	bl	801c580 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801c670:	4620      	mov	r0, r4
 801c672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c676:	f7ff bfbd 	b.w	801c5f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801c67c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801c67c:	b538      	push	{r3, r4, r5, lr}
 801c67e:	4c15      	ldr	r4, [pc, #84]	; (801c6d4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801c680:	4605      	mov	r5, r0
 801c682:	7823      	ldrb	r3, [r4, #0]
 801c684:	f3bf 8f5b 	dmb	ish
 801c688:	07da      	lsls	r2, r3, #31
 801c68a:	d40b      	bmi.n	801c6a4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801c68c:	4620      	mov	r0, r4
 801c68e:	f006 fce0 	bl	8023052 <__cxa_guard_acquire>
 801c692:	b138      	cbz	r0, 801c6a4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801c694:	4620      	mov	r0, r4
 801c696:	f006 fce8 	bl	802306a <__cxa_guard_release>
 801c69a:	4a0f      	ldr	r2, [pc, #60]	; (801c6d8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801c69c:	490f      	ldr	r1, [pc, #60]	; (801c6dc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801c69e:	4810      	ldr	r0, [pc, #64]	; (801c6e0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801c6a0:	f006 fccd 	bl	802303e <__aeabi_atexit>
 801c6a4:	4c0f      	ldr	r4, [pc, #60]	; (801c6e4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801c6a6:	7823      	ldrb	r3, [r4, #0]
 801c6a8:	f3bf 8f5b 	dmb	ish
 801c6ac:	07db      	lsls	r3, r3, #31
 801c6ae:	d40b      	bmi.n	801c6c8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801c6b0:	4620      	mov	r0, r4
 801c6b2:	f006 fcce 	bl	8023052 <__cxa_guard_acquire>
 801c6b6:	b138      	cbz	r0, 801c6c8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801c6b8:	4620      	mov	r0, r4
 801c6ba:	f006 fcd6 	bl	802306a <__cxa_guard_release>
 801c6be:	4a06      	ldr	r2, [pc, #24]	; (801c6d8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801c6c0:	4909      	ldr	r1, [pc, #36]	; (801c6e8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801c6c2:	480a      	ldr	r0, [pc, #40]	; (801c6ec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801c6c4:	f006 fcbb 	bl	802303e <__aeabi_atexit>
 801c6c8:	4b05      	ldr	r3, [pc, #20]	; (801c6e0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801c6ca:	622b      	str	r3, [r5, #32]
 801c6cc:	4b07      	ldr	r3, [pc, #28]	; (801c6ec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801c6ce:	626b      	str	r3, [r5, #36]	; 0x24
 801c6d0:	bd38      	pop	{r3, r4, r5, pc}
 801c6d2:	bf00      	nop
 801c6d4:	2000b2c0 	.word	0x2000b2c0
 801c6d8:	20000000 	.word	0x20000000
 801c6dc:	0801b1af 	.word	0x0801b1af
 801c6e0:	2000009c 	.word	0x2000009c
 801c6e4:	2000b2c4 	.word	0x2000b2c4
 801c6e8:	0801b1ad 	.word	0x0801b1ad
 801c6ec:	200000a0 	.word	0x200000a0

0801c6f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801c6f0:	b538      	push	{r3, r4, r5, lr}
 801c6f2:	4c15      	ldr	r4, [pc, #84]	; (801c748 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801c6f4:	4605      	mov	r5, r0
 801c6f6:	7823      	ldrb	r3, [r4, #0]
 801c6f8:	f3bf 8f5b 	dmb	ish
 801c6fc:	07da      	lsls	r2, r3, #31
 801c6fe:	d40b      	bmi.n	801c718 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801c700:	4620      	mov	r0, r4
 801c702:	f006 fca6 	bl	8023052 <__cxa_guard_acquire>
 801c706:	b138      	cbz	r0, 801c718 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801c708:	4620      	mov	r0, r4
 801c70a:	f006 fcae 	bl	802306a <__cxa_guard_release>
 801c70e:	4a0f      	ldr	r2, [pc, #60]	; (801c74c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801c710:	490f      	ldr	r1, [pc, #60]	; (801c750 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801c712:	4810      	ldr	r0, [pc, #64]	; (801c754 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801c714:	f006 fc93 	bl	802303e <__aeabi_atexit>
 801c718:	4c0f      	ldr	r4, [pc, #60]	; (801c758 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801c71a:	7823      	ldrb	r3, [r4, #0]
 801c71c:	f3bf 8f5b 	dmb	ish
 801c720:	07db      	lsls	r3, r3, #31
 801c722:	d40b      	bmi.n	801c73c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801c724:	4620      	mov	r0, r4
 801c726:	f006 fc94 	bl	8023052 <__cxa_guard_acquire>
 801c72a:	b138      	cbz	r0, 801c73c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801c72c:	4620      	mov	r0, r4
 801c72e:	f006 fc9c 	bl	802306a <__cxa_guard_release>
 801c732:	4a06      	ldr	r2, [pc, #24]	; (801c74c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801c734:	4909      	ldr	r1, [pc, #36]	; (801c75c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801c736:	480a      	ldr	r0, [pc, #40]	; (801c760 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801c738:	f006 fc81 	bl	802303e <__aeabi_atexit>
 801c73c:	4b05      	ldr	r3, [pc, #20]	; (801c754 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801c73e:	61ab      	str	r3, [r5, #24]
 801c740:	4b07      	ldr	r3, [pc, #28]	; (801c760 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801c742:	61eb      	str	r3, [r5, #28]
 801c744:	bd38      	pop	{r3, r4, r5, pc}
 801c746:	bf00      	nop
 801c748:	2000b2a0 	.word	0x2000b2a0
 801c74c:	20000000 	.word	0x20000000
 801c750:	0801b1b3 	.word	0x0801b1b3
 801c754:	2000007c 	.word	0x2000007c
 801c758:	2000b2a4 	.word	0x2000b2a4
 801c75c:	0801b1b1 	.word	0x0801b1b1
 801c760:	20000080 	.word	0x20000080

0801c764 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801c764:	b510      	push	{r4, lr}
 801c766:	4604      	mov	r4, r0
 801c768:	f7ff ff88 	bl	801c67c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801c76c:	4620      	mov	r0, r4
 801c76e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c772:	f7ff bfbd 	b.w	801c6f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801c778 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801c778:	b538      	push	{r3, r4, r5, lr}
 801c77a:	4c15      	ldr	r4, [pc, #84]	; (801c7d0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801c77c:	4605      	mov	r5, r0
 801c77e:	7823      	ldrb	r3, [r4, #0]
 801c780:	f3bf 8f5b 	dmb	ish
 801c784:	07da      	lsls	r2, r3, #31
 801c786:	d40b      	bmi.n	801c7a0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801c788:	4620      	mov	r0, r4
 801c78a:	f006 fc62 	bl	8023052 <__cxa_guard_acquire>
 801c78e:	b138      	cbz	r0, 801c7a0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801c790:	4620      	mov	r0, r4
 801c792:	f006 fc6a 	bl	802306a <__cxa_guard_release>
 801c796:	4a0f      	ldr	r2, [pc, #60]	; (801c7d4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801c798:	490f      	ldr	r1, [pc, #60]	; (801c7d8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801c79a:	4810      	ldr	r0, [pc, #64]	; (801c7dc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801c79c:	f006 fc4f 	bl	802303e <__aeabi_atexit>
 801c7a0:	4c0f      	ldr	r4, [pc, #60]	; (801c7e0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801c7a2:	7823      	ldrb	r3, [r4, #0]
 801c7a4:	f3bf 8f5b 	dmb	ish
 801c7a8:	07db      	lsls	r3, r3, #31
 801c7aa:	d40b      	bmi.n	801c7c4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801c7ac:	4620      	mov	r0, r4
 801c7ae:	f006 fc50 	bl	8023052 <__cxa_guard_acquire>
 801c7b2:	b138      	cbz	r0, 801c7c4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801c7b4:	4620      	mov	r0, r4
 801c7b6:	f006 fc58 	bl	802306a <__cxa_guard_release>
 801c7ba:	4a06      	ldr	r2, [pc, #24]	; (801c7d4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801c7bc:	4909      	ldr	r1, [pc, #36]	; (801c7e4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801c7be:	480a      	ldr	r0, [pc, #40]	; (801c7e8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801c7c0:	f006 fc3d 	bl	802303e <__aeabi_atexit>
 801c7c4:	4b05      	ldr	r3, [pc, #20]	; (801c7dc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801c7c6:	632b      	str	r3, [r5, #48]	; 0x30
 801c7c8:	4b07      	ldr	r3, [pc, #28]	; (801c7e8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801c7ca:	636b      	str	r3, [r5, #52]	; 0x34
 801c7cc:	bd38      	pop	{r3, r4, r5, pc}
 801c7ce:	bf00      	nop
 801c7d0:	2000b2a8 	.word	0x2000b2a8
 801c7d4:	20000000 	.word	0x20000000
 801c7d8:	0801b1a7 	.word	0x0801b1a7
 801c7dc:	20000084 	.word	0x20000084
 801c7e0:	2000b2ac 	.word	0x2000b2ac
 801c7e4:	0801b1a5 	.word	0x0801b1a5
 801c7e8:	20000088 	.word	0x20000088

0801c7ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801c7ec:	b538      	push	{r3, r4, r5, lr}
 801c7ee:	4c15      	ldr	r4, [pc, #84]	; (801c844 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801c7f0:	4605      	mov	r5, r0
 801c7f2:	7823      	ldrb	r3, [r4, #0]
 801c7f4:	f3bf 8f5b 	dmb	ish
 801c7f8:	07da      	lsls	r2, r3, #31
 801c7fa:	d40b      	bmi.n	801c814 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801c7fc:	4620      	mov	r0, r4
 801c7fe:	f006 fc28 	bl	8023052 <__cxa_guard_acquire>
 801c802:	b138      	cbz	r0, 801c814 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801c804:	4620      	mov	r0, r4
 801c806:	f006 fc30 	bl	802306a <__cxa_guard_release>
 801c80a:	4a0f      	ldr	r2, [pc, #60]	; (801c848 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801c80c:	490f      	ldr	r1, [pc, #60]	; (801c84c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801c80e:	4810      	ldr	r0, [pc, #64]	; (801c850 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801c810:	f006 fc15 	bl	802303e <__aeabi_atexit>
 801c814:	4c0f      	ldr	r4, [pc, #60]	; (801c854 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801c816:	7823      	ldrb	r3, [r4, #0]
 801c818:	f3bf 8f5b 	dmb	ish
 801c81c:	07db      	lsls	r3, r3, #31
 801c81e:	d40b      	bmi.n	801c838 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801c820:	4620      	mov	r0, r4
 801c822:	f006 fc16 	bl	8023052 <__cxa_guard_acquire>
 801c826:	b138      	cbz	r0, 801c838 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801c828:	4620      	mov	r0, r4
 801c82a:	f006 fc1e 	bl	802306a <__cxa_guard_release>
 801c82e:	4a06      	ldr	r2, [pc, #24]	; (801c848 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801c830:	4909      	ldr	r1, [pc, #36]	; (801c858 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801c832:	480a      	ldr	r0, [pc, #40]	; (801c85c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801c834:	f006 fc03 	bl	802303e <__aeabi_atexit>
 801c838:	4b05      	ldr	r3, [pc, #20]	; (801c850 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801c83a:	62ab      	str	r3, [r5, #40]	; 0x28
 801c83c:	4b07      	ldr	r3, [pc, #28]	; (801c85c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801c83e:	62eb      	str	r3, [r5, #44]	; 0x2c
 801c840:	bd38      	pop	{r3, r4, r5, pc}
 801c842:	bf00      	nop
 801c844:	2000b280 	.word	0x2000b280
 801c848:	20000000 	.word	0x20000000
 801c84c:	0801b1ab 	.word	0x0801b1ab
 801c850:	2000005c 	.word	0x2000005c
 801c854:	2000b284 	.word	0x2000b284
 801c858:	0801b1a9 	.word	0x0801b1a9
 801c85c:	20000060 	.word	0x20000060

0801c860 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801c860:	b510      	push	{r4, lr}
 801c862:	4604      	mov	r4, r0
 801c864:	f7ff ff88 	bl	801c778 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801c868:	4620      	mov	r0, r4
 801c86a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c86e:	f7ff bfbd 	b.w	801c7ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801c874 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801c874:	b538      	push	{r3, r4, r5, lr}
 801c876:	4c15      	ldr	r4, [pc, #84]	; (801c8cc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801c878:	4605      	mov	r5, r0
 801c87a:	7823      	ldrb	r3, [r4, #0]
 801c87c:	f3bf 8f5b 	dmb	ish
 801c880:	07da      	lsls	r2, r3, #31
 801c882:	d40b      	bmi.n	801c89c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c884:	4620      	mov	r0, r4
 801c886:	f006 fbe4 	bl	8023052 <__cxa_guard_acquire>
 801c88a:	b138      	cbz	r0, 801c89c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c88c:	4620      	mov	r0, r4
 801c88e:	f006 fbec 	bl	802306a <__cxa_guard_release>
 801c892:	4a0f      	ldr	r2, [pc, #60]	; (801c8d0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c894:	490f      	ldr	r1, [pc, #60]	; (801c8d4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801c896:	4810      	ldr	r0, [pc, #64]	; (801c8d8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c898:	f006 fbd1 	bl	802303e <__aeabi_atexit>
 801c89c:	4c0f      	ldr	r4, [pc, #60]	; (801c8dc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801c89e:	7823      	ldrb	r3, [r4, #0]
 801c8a0:	f3bf 8f5b 	dmb	ish
 801c8a4:	07db      	lsls	r3, r3, #31
 801c8a6:	d40b      	bmi.n	801c8c0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c8a8:	4620      	mov	r0, r4
 801c8aa:	f006 fbd2 	bl	8023052 <__cxa_guard_acquire>
 801c8ae:	b138      	cbz	r0, 801c8c0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c8b0:	4620      	mov	r0, r4
 801c8b2:	f006 fbda 	bl	802306a <__cxa_guard_release>
 801c8b6:	4a06      	ldr	r2, [pc, #24]	; (801c8d0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c8b8:	4909      	ldr	r1, [pc, #36]	; (801c8e0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801c8ba:	480a      	ldr	r0, [pc, #40]	; (801c8e4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c8bc:	f006 fbbf 	bl	802303e <__aeabi_atexit>
 801c8c0:	4b05      	ldr	r3, [pc, #20]	; (801c8d8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c8c2:	642b      	str	r3, [r5, #64]	; 0x40
 801c8c4:	4b07      	ldr	r3, [pc, #28]	; (801c8e4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c8c6:	646b      	str	r3, [r5, #68]	; 0x44
 801c8c8:	bd38      	pop	{r3, r4, r5, pc}
 801c8ca:	bf00      	nop
 801c8cc:	2000b2b0 	.word	0x2000b2b0
 801c8d0:	20000000 	.word	0x20000000
 801c8d4:	0801b19f 	.word	0x0801b19f
 801c8d8:	2000008c 	.word	0x2000008c
 801c8dc:	2000b2b4 	.word	0x2000b2b4
 801c8e0:	0801b19d 	.word	0x0801b19d
 801c8e4:	20000090 	.word	0x20000090

0801c8e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801c8e8:	b538      	push	{r3, r4, r5, lr}
 801c8ea:	4c15      	ldr	r4, [pc, #84]	; (801c940 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801c8ec:	4605      	mov	r5, r0
 801c8ee:	7823      	ldrb	r3, [r4, #0]
 801c8f0:	f3bf 8f5b 	dmb	ish
 801c8f4:	07da      	lsls	r2, r3, #31
 801c8f6:	d40b      	bmi.n	801c910 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c8f8:	4620      	mov	r0, r4
 801c8fa:	f006 fbaa 	bl	8023052 <__cxa_guard_acquire>
 801c8fe:	b138      	cbz	r0, 801c910 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c900:	4620      	mov	r0, r4
 801c902:	f006 fbb2 	bl	802306a <__cxa_guard_release>
 801c906:	4a0f      	ldr	r2, [pc, #60]	; (801c944 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c908:	490f      	ldr	r1, [pc, #60]	; (801c948 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801c90a:	4810      	ldr	r0, [pc, #64]	; (801c94c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c90c:	f006 fb97 	bl	802303e <__aeabi_atexit>
 801c910:	4c0f      	ldr	r4, [pc, #60]	; (801c950 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801c912:	7823      	ldrb	r3, [r4, #0]
 801c914:	f3bf 8f5b 	dmb	ish
 801c918:	07db      	lsls	r3, r3, #31
 801c91a:	d40b      	bmi.n	801c934 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c91c:	4620      	mov	r0, r4
 801c91e:	f006 fb98 	bl	8023052 <__cxa_guard_acquire>
 801c922:	b138      	cbz	r0, 801c934 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c924:	4620      	mov	r0, r4
 801c926:	f006 fba0 	bl	802306a <__cxa_guard_release>
 801c92a:	4a06      	ldr	r2, [pc, #24]	; (801c944 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c92c:	4909      	ldr	r1, [pc, #36]	; (801c954 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801c92e:	480a      	ldr	r0, [pc, #40]	; (801c958 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c930:	f006 fb85 	bl	802303e <__aeabi_atexit>
 801c934:	4b05      	ldr	r3, [pc, #20]	; (801c94c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c936:	63ab      	str	r3, [r5, #56]	; 0x38
 801c938:	4b07      	ldr	r3, [pc, #28]	; (801c958 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c93a:	63eb      	str	r3, [r5, #60]	; 0x3c
 801c93c:	bd38      	pop	{r3, r4, r5, pc}
 801c93e:	bf00      	nop
 801c940:	2000b290 	.word	0x2000b290
 801c944:	20000000 	.word	0x20000000
 801c948:	0801b1a3 	.word	0x0801b1a3
 801c94c:	2000006c 	.word	0x2000006c
 801c950:	2000b294 	.word	0x2000b294
 801c954:	0801b1a1 	.word	0x0801b1a1
 801c958:	20000070 	.word	0x20000070

0801c95c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801c95c:	b510      	push	{r4, lr}
 801c95e:	4604      	mov	r4, r0
 801c960:	f7ff ff88 	bl	801c874 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801c964:	4620      	mov	r0, r4
 801c966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c96a:	f7ff bfbd 	b.w	801c8e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801c970 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801c970:	b538      	push	{r3, r4, r5, lr}
 801c972:	4c15      	ldr	r4, [pc, #84]	; (801c9c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801c974:	4605      	mov	r5, r0
 801c976:	7823      	ldrb	r3, [r4, #0]
 801c978:	f3bf 8f5b 	dmb	ish
 801c97c:	07da      	lsls	r2, r3, #31
 801c97e:	d40b      	bmi.n	801c998 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801c980:	4620      	mov	r0, r4
 801c982:	f006 fb66 	bl	8023052 <__cxa_guard_acquire>
 801c986:	b138      	cbz	r0, 801c998 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801c988:	4620      	mov	r0, r4
 801c98a:	f006 fb6e 	bl	802306a <__cxa_guard_release>
 801c98e:	4a0f      	ldr	r2, [pc, #60]	; (801c9cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801c990:	490f      	ldr	r1, [pc, #60]	; (801c9d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801c992:	4810      	ldr	r0, [pc, #64]	; (801c9d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801c994:	f006 fb53 	bl	802303e <__aeabi_atexit>
 801c998:	4c0f      	ldr	r4, [pc, #60]	; (801c9d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801c99a:	7823      	ldrb	r3, [r4, #0]
 801c99c:	f3bf 8f5b 	dmb	ish
 801c9a0:	07db      	lsls	r3, r3, #31
 801c9a2:	d40b      	bmi.n	801c9bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801c9a4:	4620      	mov	r0, r4
 801c9a6:	f006 fb54 	bl	8023052 <__cxa_guard_acquire>
 801c9aa:	b138      	cbz	r0, 801c9bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801c9ac:	4620      	mov	r0, r4
 801c9ae:	f006 fb5c 	bl	802306a <__cxa_guard_release>
 801c9b2:	4a06      	ldr	r2, [pc, #24]	; (801c9cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801c9b4:	4909      	ldr	r1, [pc, #36]	; (801c9dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801c9b6:	480a      	ldr	r0, [pc, #40]	; (801c9e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801c9b8:	f006 fb41 	bl	802303e <__aeabi_atexit>
 801c9bc:	4b05      	ldr	r3, [pc, #20]	; (801c9d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801c9be:	652b      	str	r3, [r5, #80]	; 0x50
 801c9c0:	4b07      	ldr	r3, [pc, #28]	; (801c9e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801c9c2:	656b      	str	r3, [r5, #84]	; 0x54
 801c9c4:	bd38      	pop	{r3, r4, r5, pc}
 801c9c6:	bf00      	nop
 801c9c8:	2000b288 	.word	0x2000b288
 801c9cc:	20000000 	.word	0x20000000
 801c9d0:	0801b197 	.word	0x0801b197
 801c9d4:	20000064 	.word	0x20000064
 801c9d8:	2000b28c 	.word	0x2000b28c
 801c9dc:	0801b195 	.word	0x0801b195
 801c9e0:	20000068 	.word	0x20000068

0801c9e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801c9e4:	b538      	push	{r3, r4, r5, lr}
 801c9e6:	4c15      	ldr	r4, [pc, #84]	; (801ca3c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801c9e8:	4605      	mov	r5, r0
 801c9ea:	7823      	ldrb	r3, [r4, #0]
 801c9ec:	f3bf 8f5b 	dmb	ish
 801c9f0:	07da      	lsls	r2, r3, #31
 801c9f2:	d40b      	bmi.n	801ca0c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c9f4:	4620      	mov	r0, r4
 801c9f6:	f006 fb2c 	bl	8023052 <__cxa_guard_acquire>
 801c9fa:	b138      	cbz	r0, 801ca0c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c9fc:	4620      	mov	r0, r4
 801c9fe:	f006 fb34 	bl	802306a <__cxa_guard_release>
 801ca02:	4a0f      	ldr	r2, [pc, #60]	; (801ca40 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ca04:	490f      	ldr	r1, [pc, #60]	; (801ca44 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801ca06:	4810      	ldr	r0, [pc, #64]	; (801ca48 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ca08:	f006 fb19 	bl	802303e <__aeabi_atexit>
 801ca0c:	4c0f      	ldr	r4, [pc, #60]	; (801ca4c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801ca0e:	7823      	ldrb	r3, [r4, #0]
 801ca10:	f3bf 8f5b 	dmb	ish
 801ca14:	07db      	lsls	r3, r3, #31
 801ca16:	d40b      	bmi.n	801ca30 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801ca18:	4620      	mov	r0, r4
 801ca1a:	f006 fb1a 	bl	8023052 <__cxa_guard_acquire>
 801ca1e:	b138      	cbz	r0, 801ca30 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801ca20:	4620      	mov	r0, r4
 801ca22:	f006 fb22 	bl	802306a <__cxa_guard_release>
 801ca26:	4a06      	ldr	r2, [pc, #24]	; (801ca40 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ca28:	4909      	ldr	r1, [pc, #36]	; (801ca50 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801ca2a:	480a      	ldr	r0, [pc, #40]	; (801ca54 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801ca2c:	f006 fb07 	bl	802303e <__aeabi_atexit>
 801ca30:	4b05      	ldr	r3, [pc, #20]	; (801ca48 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ca32:	64ab      	str	r3, [r5, #72]	; 0x48
 801ca34:	4b07      	ldr	r3, [pc, #28]	; (801ca54 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801ca36:	64eb      	str	r3, [r5, #76]	; 0x4c
 801ca38:	bd38      	pop	{r3, r4, r5, pc}
 801ca3a:	bf00      	nop
 801ca3c:	2000b278 	.word	0x2000b278
 801ca40:	20000000 	.word	0x20000000
 801ca44:	0801b19b 	.word	0x0801b19b
 801ca48:	20000054 	.word	0x20000054
 801ca4c:	2000b27c 	.word	0x2000b27c
 801ca50:	0801b199 	.word	0x0801b199
 801ca54:	20000058 	.word	0x20000058

0801ca58 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801ca58:	b510      	push	{r4, lr}
 801ca5a:	4604      	mov	r4, r0
 801ca5c:	f7ff ff88 	bl	801c970 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801ca60:	4620      	mov	r0, r4
 801ca62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ca66:	f7ff bfbd 	b.w	801c9e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801ca6a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801ca6a:	b510      	push	{r4, lr}
 801ca6c:	4604      	mov	r4, r0
 801ca6e:	f7ff fff3 	bl	801ca58 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801ca72:	4620      	mov	r0, r4
 801ca74:	f7ff ff72 	bl	801c95c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801ca78:	4620      	mov	r0, r4
 801ca7a:	f7ff fe73 	bl	801c764 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801ca7e:	4620      	mov	r0, r4
 801ca80:	f7ff fdf2 	bl	801c668 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801ca84:	4620      	mov	r0, r4
 801ca86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ca8a:	f7ff bee9 	b.w	801c860 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801ca90 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801ca90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca94:	b087      	sub	sp, #28
 801ca96:	7888      	ldrb	r0, [r1, #2]
 801ca98:	4616      	mov	r6, r2
 801ca9a:	9001      	str	r0, [sp, #4]
 801ca9c:	7848      	ldrb	r0, [r1, #1]
 801ca9e:	9100      	str	r1, [sp, #0]
 801caa0:	9002      	str	r0, [sp, #8]
 801caa2:	7808      	ldrb	r0, [r1, #0]
 801caa4:	9901      	ldr	r1, [sp, #4]
 801caa6:	9003      	str	r0, [sp, #12]
 801caa8:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801caac:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801cab0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801cab4:	9902      	ldr	r1, [sp, #8]
 801cab6:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801caba:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801cabe:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801cac2:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801cac6:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801caca:	9005      	str	r0, [sp, #20]
 801cacc:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801cad0:	fb05 ca0e 	mla	sl, r5, lr, ip
 801cad4:	2d00      	cmp	r5, #0
 801cad6:	eb06 080a 	add.w	r8, r6, sl
 801cada:	db4a      	blt.n	801cb72 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801cadc:	45a9      	cmp	r9, r5
 801cade:	dd48      	ble.n	801cb72 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801cae0:	f1bc 0f00 	cmp.w	ip, #0
 801cae4:	db43      	blt.n	801cb6e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801cae6:	45e6      	cmp	lr, ip
 801cae8:	dd41      	ble.n	801cb6e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801caea:	f816 600a 	ldrb.w	r6, [r6, sl]
 801caee:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801caf2:	441e      	add	r6, r3
 801caf4:	f11c 0001 	adds.w	r0, ip, #1
 801caf8:	d43e      	bmi.n	801cb78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801cafa:	4586      	cmp	lr, r0
 801cafc:	dd3c      	ble.n	801cb78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801cafe:	2a00      	cmp	r2, #0
 801cb00:	d03a      	beq.n	801cb78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801cb02:	f898 0001 	ldrb.w	r0, [r8, #1]
 801cb06:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cb0a:	4418      	add	r0, r3
 801cb0c:	3501      	adds	r5, #1
 801cb0e:	d437      	bmi.n	801cb80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801cb10:	45a9      	cmp	r9, r5
 801cb12:	dd35      	ble.n	801cb80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801cb14:	b3a4      	cbz	r4, 801cb80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801cb16:	f1bc 0f00 	cmp.w	ip, #0
 801cb1a:	db2f      	blt.n	801cb7c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801cb1c:	45e6      	cmp	lr, ip
 801cb1e:	dd2d      	ble.n	801cb7c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801cb20:	f818 500e 	ldrb.w	r5, [r8, lr]
 801cb24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cb28:	441d      	add	r5, r3
 801cb2a:	f11c 0c01 	adds.w	ip, ip, #1
 801cb2e:	d42a      	bmi.n	801cb86 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801cb30:	45e6      	cmp	lr, ip
 801cb32:	dd28      	ble.n	801cb86 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801cb34:	b33a      	cbz	r2, 801cb86 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801cb36:	44c6      	add	lr, r8
 801cb38:	f89e c001 	ldrb.w	ip, [lr, #1]
 801cb3c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801cb40:	4463      	add	r3, ip
 801cb42:	ea6f 0c07 	mvn.w	ip, r7
 801cb46:	2a0f      	cmp	r2, #15
 801cb48:	f896 a000 	ldrb.w	sl, [r6]
 801cb4c:	fa5f fc8c 	uxtb.w	ip, ip
 801cb50:	f890 b000 	ldrb.w	fp, [r0]
 801cb54:	f895 9000 	ldrb.w	r9, [r5]
 801cb58:	7819      	ldrb	r1, [r3, #0]
 801cb5a:	d801      	bhi.n	801cb60 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 801cb5c:	2c0f      	cmp	r4, #15
 801cb5e:	d914      	bls.n	801cb8a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 801cb60:	4b40      	ldr	r3, [pc, #256]	; (801cc64 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801cb62:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801cb66:	4a40      	ldr	r2, [pc, #256]	; (801cc68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801cb68:	4840      	ldr	r0, [pc, #256]	; (801cc6c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 801cb6a:	f006 fa9b 	bl	80230a4 <__assert_func>
 801cb6e:	ae05      	add	r6, sp, #20
 801cb70:	e7c0      	b.n	801caf4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 801cb72:	a805      	add	r0, sp, #20
 801cb74:	4606      	mov	r6, r0
 801cb76:	e7c9      	b.n	801cb0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801cb78:	a805      	add	r0, sp, #20
 801cb7a:	e7c7      	b.n	801cb0c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801cb7c:	ad05      	add	r5, sp, #20
 801cb7e:	e7d4      	b.n	801cb2a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 801cb80:	ab05      	add	r3, sp, #20
 801cb82:	461d      	mov	r5, r3
 801cb84:	e7dd      	b.n	801cb42 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801cb86:	ab05      	add	r3, sp, #20
 801cb88:	e7db      	b.n	801cb42 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801cb8a:	b292      	uxth	r2, r2
 801cb8c:	b2a4      	uxth	r4, r4
 801cb8e:	fa1f fc8c 	uxth.w	ip, ip
 801cb92:	fb02 f804 	mul.w	r8, r2, r4
 801cb96:	0112      	lsls	r2, r2, #4
 801cb98:	b2bf      	uxth	r7, r7
 801cb9a:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801cb9e:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801cba2:	eba2 0208 	sub.w	r2, r2, r8
 801cba6:	b2a4      	uxth	r4, r4
 801cba8:	b292      	uxth	r2, r2
 801cbaa:	ebae 0e04 	sub.w	lr, lr, r4
 801cbae:	fb02 fb0b 	mul.w	fp, r2, fp
 801cbb2:	fa1f fe8e 	uxth.w	lr, lr
 801cbb6:	fb0e ba0a 	mla	sl, lr, sl, fp
 801cbba:	fb04 aa09 	mla	sl, r4, r9, sl
 801cbbe:	fb08 aa01 	mla	sl, r8, r1, sl
 801cbc2:	9903      	ldr	r1, [sp, #12]
 801cbc4:	fb11 f90c 	smulbb	r9, r1, ip
 801cbc8:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801cbcc:	9900      	ldr	r1, [sp, #0]
 801cbce:	fb0a 9a07 	mla	sl, sl, r7, r9
 801cbd2:	fa1f fa8a 	uxth.w	sl, sl
 801cbd6:	f10a 0901 	add.w	r9, sl, #1
 801cbda:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801cbde:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cbe2:	f881 a000 	strb.w	sl, [r1]
 801cbe6:	f890 a001 	ldrb.w	sl, [r0, #1]
 801cbea:	f896 9001 	ldrb.w	r9, [r6, #1]
 801cbee:	fb02 fa0a 	mul.w	sl, r2, sl
 801cbf2:	9902      	ldr	r1, [sp, #8]
 801cbf4:	fb0e aa09 	mla	sl, lr, r9, sl
 801cbf8:	f895 9001 	ldrb.w	r9, [r5, #1]
 801cbfc:	fb04 aa09 	mla	sl, r4, r9, sl
 801cc00:	f893 9001 	ldrb.w	r9, [r3, #1]
 801cc04:	fb08 a909 	mla	r9, r8, r9, sl
 801cc08:	fb11 fa0c 	smulbb	sl, r1, ip
 801cc0c:	9900      	ldr	r1, [sp, #0]
 801cc0e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801cc12:	fb09 a907 	mla	r9, r9, r7, sl
 801cc16:	fa1f f989 	uxth.w	r9, r9
 801cc1a:	f109 0a01 	add.w	sl, r9, #1
 801cc1e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801cc22:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cc26:	f881 9001 	strb.w	r9, [r1, #1]
 801cc2a:	7880      	ldrb	r0, [r0, #2]
 801cc2c:	78b6      	ldrb	r6, [r6, #2]
 801cc2e:	4342      	muls	r2, r0
 801cc30:	78a8      	ldrb	r0, [r5, #2]
 801cc32:	789b      	ldrb	r3, [r3, #2]
 801cc34:	fb0e 2206 	mla	r2, lr, r6, r2
 801cc38:	fb04 2400 	mla	r4, r4, r0, r2
 801cc3c:	fb08 4803 	mla	r8, r8, r3, r4
 801cc40:	9b01      	ldr	r3, [sp, #4]
 801cc42:	fb13 fc0c 	smulbb	ip, r3, ip
 801cc46:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801cc4a:	fb08 c707 	mla	r7, r8, r7, ip
 801cc4e:	b2bf      	uxth	r7, r7
 801cc50:	f107 0c01 	add.w	ip, r7, #1
 801cc54:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801cc58:	123f      	asrs	r7, r7, #8
 801cc5a:	708f      	strb	r7, [r1, #2]
 801cc5c:	b007      	add	sp, #28
 801cc5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc62:	bf00      	nop
 801cc64:	080292e4 	.word	0x080292e4
 801cc68:	080297da 	.word	0x080297da
 801cc6c:	080293ad 	.word	0x080293ad

0801cc70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801cc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc74:	ed2d 8b08 	vpush	{d8-d11}
 801cc78:	b095      	sub	sp, #84	; 0x54
 801cc7a:	eeb0 aa40 	vmov.f32	s20, s0
 801cc7e:	eef0 9a60 	vmov.f32	s19, s1
 801cc82:	930a      	str	r3, [sp, #40]	; 0x28
 801cc84:	eeb0 9a41 	vmov.f32	s18, s2
 801cc88:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801cc8c:	eeb0 8a62 	vmov.f32	s16, s5
 801cc90:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801cc92:	eef0 8a43 	vmov.f32	s17, s6
 801cc96:	930c      	str	r3, [sp, #48]	; 0x30
 801cc98:	eef0 ba44 	vmov.f32	s23, s8
 801cc9c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801cca0:	eeb0 ba64 	vmov.f32	s22, s9
 801cca4:	9013      	str	r0, [sp, #76]	; 0x4c
 801cca6:	eef0 aa45 	vmov.f32	s21, s10
 801ccaa:	9310      	str	r3, [sp, #64]	; 0x40
 801ccac:	6860      	ldr	r0, [r4, #4]
 801ccae:	910f      	str	r1, [sp, #60]	; 0x3c
 801ccb0:	9212      	str	r2, [sp, #72]	; 0x48
 801ccb2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801ccb4:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801ccb8:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801ccbc:	fb00 1303 	mla	r3, r0, r3, r1
 801ccc0:	6821      	ldr	r1, [r4, #0]
 801ccc2:	6854      	ldr	r4, [r2, #4]
 801ccc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ccc8:	18cb      	adds	r3, r1, r3
 801ccca:	930b      	str	r3, [sp, #44]	; 0x2c
 801cccc:	6813      	ldr	r3, [r2, #0]
 801ccce:	930e      	str	r3, [sp, #56]	; 0x38
 801ccd0:	1d23      	adds	r3, r4, #4
 801ccd2:	9309      	str	r3, [sp, #36]	; 0x24
 801ccd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ccd6:	43db      	mvns	r3, r3
 801ccd8:	b2db      	uxtb	r3, r3
 801ccda:	930d      	str	r3, [sp, #52]	; 0x34
 801ccdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ccde:	2b00      	cmp	r3, #0
 801cce0:	dc03      	bgt.n	801ccea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801cce2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cce4:	2b00      	cmp	r3, #0
 801cce6:	f340 823c 	ble.w	801d162 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801ccea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ccec:	2b00      	cmp	r3, #0
 801ccee:	f340 8115 	ble.w	801cf1c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801ccf2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801ccf4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ccf6:	1412      	asrs	r2, r2, #16
 801ccf8:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ccfc:	d431      	bmi.n	801cd62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801ccfe:	1c51      	adds	r1, r2, #1
 801cd00:	428d      	cmp	r5, r1
 801cd02:	dd31      	ble.n	801cd68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801cd04:	2b00      	cmp	r3, #0
 801cd06:	db2f      	blt.n	801cd68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801cd08:	1c59      	adds	r1, r3, #1
 801cd0a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801cd0c:	4288      	cmp	r0, r1
 801cd0e:	dd2b      	ble.n	801cd68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801cd10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cd12:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801cd14:	3b01      	subs	r3, #1
 801cd16:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801cd18:	fb02 1203 	mla	r2, r2, r3, r1
 801cd1c:	1412      	asrs	r2, r2, #16
 801cd1e:	d42d      	bmi.n	801cd7c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801cd20:	3201      	adds	r2, #1
 801cd22:	4295      	cmp	r5, r2
 801cd24:	dd2a      	ble.n	801cd7c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801cd26:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801cd28:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801cd2a:	fb02 1303 	mla	r3, r2, r3, r1
 801cd2e:	141b      	asrs	r3, r3, #16
 801cd30:	d424      	bmi.n	801cd7c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801cd32:	3301      	adds	r3, #1
 801cd34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cd36:	429a      	cmp	r2, r3
 801cd38:	dd20      	ble.n	801cd7c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801cd3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cd3c:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801cd40:	f103 0c03 	add.w	ip, r3, #3
 801cd44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cd46:	9311      	str	r3, [sp, #68]	; 0x44
 801cd48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cd4a:	2b00      	cmp	r3, #0
 801cd4c:	f300 814f 	bgt.w	801cfee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801cd50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cd52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cd54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cd58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cd5c:	441a      	add	r2, r3
 801cd5e:	920b      	str	r2, [sp, #44]	; 0x2c
 801cd60:	e0de      	b.n	801cf20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801cd62:	1c51      	adds	r1, r2, #1
 801cd64:	f040 80cb 	bne.w	801cefe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801cd68:	42aa      	cmp	r2, r5
 801cd6a:	f280 80c8 	bge.w	801cefe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801cd6e:	1c5f      	adds	r7, r3, #1
 801cd70:	f2c0 80c5 	blt.w	801cefe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801cd74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cd76:	4293      	cmp	r3, r2
 801cd78:	f280 80c1 	bge.w	801cefe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801cd7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cd7e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801cd80:	9311      	str	r3, [sp, #68]	; 0x44
 801cd82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cd84:	2b00      	cmp	r3, #0
 801cd86:	dde3      	ble.n	801cd50 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801cd88:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cd8a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801cd8c:	141a      	asrs	r2, r3, #16
 801cd8e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801cd90:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801cd92:	1400      	asrs	r0, r0, #16
 801cd94:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801cd98:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801cd9c:	f100 810e 	bmi.w	801cfbc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801cda0:	1c46      	adds	r6, r0, #1
 801cda2:	42b5      	cmp	r5, r6
 801cda4:	f340 810c 	ble.w	801cfc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801cda8:	2a00      	cmp	r2, #0
 801cdaa:	f2c0 8109 	blt.w	801cfc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801cdae:	1c56      	adds	r6, r2, #1
 801cdb0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801cdb2:	42b4      	cmp	r4, r6
 801cdb4:	f340 8104 	ble.w	801cfc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801cdb8:	fb02 0005 	mla	r0, r2, r5, r0
 801cdbc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801cdbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cdc0:	f814 e000 	ldrb.w	lr, [r4, r0]
 801cdc4:	4402      	add	r2, r0
 801cdc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cdc8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801cdcc:	eb00 080e 	add.w	r8, r0, lr
 801cdd0:	2b00      	cmp	r3, #0
 801cdd2:	f000 80e4 	beq.w	801cf9e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 801cdd6:	f892 c001 	ldrb.w	ip, [r2, #1]
 801cdda:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801cdde:	4484      	add	ip, r0
 801cde0:	2900      	cmp	r1, #0
 801cde2:	f000 80e5 	beq.w	801cfb0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801cde6:	1950      	adds	r0, r2, r5
 801cde8:	5d52      	ldrb	r2, [r2, r5]
 801cdea:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801cdec:	7840      	ldrb	r0, [r0, #1]
 801cdee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cdf2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cdf6:	4422      	add	r2, r4
 801cdf8:	4420      	add	r0, r4
 801cdfa:	b29b      	uxth	r3, r3
 801cdfc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801cdfe:	b289      	uxth	r1, r1
 801ce00:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801ce04:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801ce08:	fb03 fa01 	mul.w	sl, r3, r1
 801ce0c:	011b      	lsls	r3, r3, #4
 801ce0e:	f89c e000 	ldrb.w	lr, [ip]
 801ce12:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801ce16:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801ce1a:	eba3 030a 	sub.w	r3, r3, sl
 801ce1e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ce20:	b289      	uxth	r1, r1
 801ce22:	b29b      	uxth	r3, r3
 801ce24:	eba9 0901 	sub.w	r9, r9, r1
 801ce28:	fb03 fe0e 	mul.w	lr, r3, lr
 801ce2c:	fa1f f989 	uxth.w	r9, r9
 801ce30:	fb09 ee0b 	mla	lr, r9, fp, lr
 801ce34:	f892 b000 	ldrb.w	fp, [r2]
 801ce38:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ce3c:	f890 b000 	ldrb.w	fp, [r0]
 801ce40:	fb0a ee0b 	mla	lr, sl, fp, lr
 801ce44:	f897 b000 	ldrb.w	fp, [r7]
 801ce48:	fb1b fb04 	smulbb	fp, fp, r4
 801ce4c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ce50:	fb0e be06 	mla	lr, lr, r6, fp
 801ce54:	fa1f fe8e 	uxth.w	lr, lr
 801ce58:	f10e 0b01 	add.w	fp, lr, #1
 801ce5c:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801ce60:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801ce64:	f887 b000 	strb.w	fp, [r7]
 801ce68:	f89c e001 	ldrb.w	lr, [ip, #1]
 801ce6c:	f898 b001 	ldrb.w	fp, [r8, #1]
 801ce70:	fb03 fe0e 	mul.w	lr, r3, lr
 801ce74:	fb09 ee0b 	mla	lr, r9, fp, lr
 801ce78:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ce7c:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ce80:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ce84:	fb0a ee0b 	mla	lr, sl, fp, lr
 801ce88:	f897 b001 	ldrb.w	fp, [r7, #1]
 801ce8c:	fb1b fb04 	smulbb	fp, fp, r4
 801ce90:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ce94:	fb0e be06 	mla	lr, lr, r6, fp
 801ce98:	fa1f fe8e 	uxth.w	lr, lr
 801ce9c:	f10e 0b01 	add.w	fp, lr, #1
 801cea0:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801cea4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801cea8:	f887 e001 	strb.w	lr, [r7, #1]
 801ceac:	f89c c002 	ldrb.w	ip, [ip, #2]
 801ceb0:	f898 e002 	ldrb.w	lr, [r8, #2]
 801ceb4:	fb03 f30c 	mul.w	r3, r3, ip
 801ceb8:	fb09 330e 	mla	r3, r9, lr, r3
 801cebc:	f892 e002 	ldrb.w	lr, [r2, #2]
 801cec0:	7882      	ldrb	r2, [r0, #2]
 801cec2:	fb01 310e 	mla	r1, r1, lr, r3
 801cec6:	fb0a 1a02 	mla	sl, sl, r2, r1
 801ceca:	78b9      	ldrb	r1, [r7, #2]
 801cecc:	fb11 f104 	smulbb	r1, r1, r4
 801ced0:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801ced4:	fb0a 1606 	mla	r6, sl, r6, r1
 801ced8:	b2b6      	uxth	r6, r6
 801ceda:	1c73      	adds	r3, r6, #1
 801cedc:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801cee0:	1236      	asrs	r6, r6, #8
 801cee2:	70be      	strb	r6, [r7, #2]
 801cee4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801cee6:	3703      	adds	r7, #3
 801cee8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ceea:	4413      	add	r3, r2
 801ceec:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ceee:	9327      	str	r3, [sp, #156]	; 0x9c
 801cef0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cef2:	4413      	add	r3, r2
 801cef4:	9328      	str	r3, [sp, #160]	; 0xa0
 801cef6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cef8:	3b01      	subs	r3, #1
 801cefa:	9311      	str	r3, [sp, #68]	; 0x44
 801cefc:	e741      	b.n	801cd82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801cefe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801cf00:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801cf02:	4413      	add	r3, r2
 801cf04:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801cf06:	9327      	str	r3, [sp, #156]	; 0x9c
 801cf08:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cf0a:	4413      	add	r3, r2
 801cf0c:	9328      	str	r3, [sp, #160]	; 0xa0
 801cf0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cf10:	3b01      	subs	r3, #1
 801cf12:	930a      	str	r3, [sp, #40]	; 0x28
 801cf14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cf16:	3303      	adds	r3, #3
 801cf18:	930b      	str	r3, [sp, #44]	; 0x2c
 801cf1a:	e6e6      	b.n	801ccea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801cf1c:	f47f aef8 	bne.w	801cd10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801cf20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cf22:	2b00      	cmp	r3, #0
 801cf24:	f340 811d 	ble.w	801d162 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801cf28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cf2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cf2e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801cf32:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801cf36:	eef0 6a48 	vmov.f32	s13, s16
 801cf3a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801cf3e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801cf42:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cf46:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801cf4a:	eef0 6a68 	vmov.f32	s13, s17
 801cf4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cf52:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801cf56:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801cf5a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801cf5e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801cf62:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801cf66:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801cf6a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801cf6e:	ee18 2a10 	vmov	r2, s16
 801cf72:	eeb0 8a47 	vmov.f32	s16, s14
 801cf76:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf7a:	ee18 2a90 	vmov	r2, s17
 801cf7e:	9329      	str	r3, [sp, #164]	; 0xa4
 801cf80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cf82:	eef0 8a67 	vmov.f32	s17, s15
 801cf86:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf8a:	932a      	str	r3, [sp, #168]	; 0xa8
 801cf8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cf8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cf90:	3b01      	subs	r3, #1
 801cf92:	930f      	str	r3, [sp, #60]	; 0x3c
 801cf94:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cf96:	bf08      	it	eq
 801cf98:	4613      	moveq	r3, r2
 801cf9a:	930a      	str	r3, [sp, #40]	; 0x28
 801cf9c:	e69e      	b.n	801ccdc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801cf9e:	b151      	cbz	r1, 801cfb6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801cfa0:	5d52      	ldrb	r2, [r2, r5]
 801cfa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cfa4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cfa8:	4402      	add	r2, r0
 801cfaa:	4640      	mov	r0, r8
 801cfac:	46c4      	mov	ip, r8
 801cfae:	e724      	b.n	801cdfa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801cfb0:	4640      	mov	r0, r8
 801cfb2:	4642      	mov	r2, r8
 801cfb4:	e721      	b.n	801cdfa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801cfb6:	4640      	mov	r0, r8
 801cfb8:	4642      	mov	r2, r8
 801cfba:	e7f7      	b.n	801cfac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801cfbc:	1c46      	adds	r6, r0, #1
 801cfbe:	d191      	bne.n	801cee4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801cfc0:	4285      	cmp	r5, r0
 801cfc2:	dd8f      	ble.n	801cee4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801cfc4:	1c54      	adds	r4, r2, #1
 801cfc6:	db8d      	blt.n	801cee4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801cfc8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801cfca:	4294      	cmp	r4, r2
 801cfcc:	dd8a      	ble.n	801cee4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801cfce:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cfd0:	9002      	str	r0, [sp, #8]
 801cfd2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801cfd4:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801cfd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cfda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cfdc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801cfe0:	e9cd 5300 	strd	r5, r3, [sp]
 801cfe4:	4639      	mov	r1, r7
 801cfe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cfe8:	f7ff fd52 	bl	801ca90 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801cfec:	e77a      	b.n	801cee4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801cfee:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801cff0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801cff2:	1410      	asrs	r0, r2, #16
 801cff4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801cff8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801cffa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801cffc:	1412      	asrs	r2, r2, #16
 801cffe:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d002:	fb05 2000 	mla	r0, r5, r0, r2
 801d006:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d008:	f814 8000 	ldrb.w	r8, [r4, r0]
 801d00c:	4402      	add	r2, r0
 801d00e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d010:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d014:	eb00 0708 	add.w	r7, r0, r8
 801d018:	2b00      	cmp	r3, #0
 801d01a:	f000 8093 	beq.w	801d144 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801d01e:	7856      	ldrb	r6, [r2, #1]
 801d020:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d024:	4406      	add	r6, r0
 801d026:	2900      	cmp	r1, #0
 801d028:	f000 8095 	beq.w	801d156 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801d02c:	1950      	adds	r0, r2, r5
 801d02e:	5d52      	ldrb	r2, [r2, r5]
 801d030:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801d032:	7840      	ldrb	r0, [r0, #1]
 801d034:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d038:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d03c:	4422      	add	r2, r4
 801d03e:	4420      	add	r0, r4
 801d040:	b29b      	uxth	r3, r3
 801d042:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801d044:	b289      	uxth	r1, r1
 801d046:	f10c 0c03 	add.w	ip, ip, #3
 801d04a:	f814 b008 	ldrb.w	fp, [r4, r8]
 801d04e:	fb03 f901 	mul.w	r9, r3, r1
 801d052:	011b      	lsls	r3, r3, #4
 801d054:	f896 8000 	ldrb.w	r8, [r6]
 801d058:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d05c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801d060:	eba3 0309 	sub.w	r3, r3, r9
 801d064:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d066:	b289      	uxth	r1, r1
 801d068:	b29b      	uxth	r3, r3
 801d06a:	ebae 0e01 	sub.w	lr, lr, r1
 801d06e:	fb03 f808 	mul.w	r8, r3, r8
 801d072:	fa1f fe8e 	uxth.w	lr, lr
 801d076:	fb0e 880b 	mla	r8, lr, fp, r8
 801d07a:	f892 b000 	ldrb.w	fp, [r2]
 801d07e:	fb01 880b 	mla	r8, r1, fp, r8
 801d082:	f890 b000 	ldrb.w	fp, [r0]
 801d086:	fb09 880b 	mla	r8, r9, fp, r8
 801d08a:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 801d08e:	fb1b fb04 	smulbb	fp, fp, r4
 801d092:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801d096:	fb08 b80a 	mla	r8, r8, sl, fp
 801d09a:	fa1f f888 	uxth.w	r8, r8
 801d09e:	f108 0b01 	add.w	fp, r8, #1
 801d0a2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d0a6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d0aa:	f80c 8c06 	strb.w	r8, [ip, #-6]
 801d0ae:	f896 8001 	ldrb.w	r8, [r6, #1]
 801d0b2:	f897 b001 	ldrb.w	fp, [r7, #1]
 801d0b6:	fb03 f808 	mul.w	r8, r3, r8
 801d0ba:	fb0e 880b 	mla	r8, lr, fp, r8
 801d0be:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d0c2:	fb01 880b 	mla	r8, r1, fp, r8
 801d0c6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d0ca:	fb09 880b 	mla	r8, r9, fp, r8
 801d0ce:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 801d0d2:	fb1b fb04 	smulbb	fp, fp, r4
 801d0d6:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801d0da:	fb08 b80a 	mla	r8, r8, sl, fp
 801d0de:	fa1f f888 	uxth.w	r8, r8
 801d0e2:	f108 0b01 	add.w	fp, r8, #1
 801d0e6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d0ea:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d0ee:	f80c 8c05 	strb.w	r8, [ip, #-5]
 801d0f2:	78b6      	ldrb	r6, [r6, #2]
 801d0f4:	78bf      	ldrb	r7, [r7, #2]
 801d0f6:	4373      	muls	r3, r6
 801d0f8:	7896      	ldrb	r6, [r2, #2]
 801d0fa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d0fc:	fb0e 3307 	mla	r3, lr, r7, r3
 801d100:	fb01 3306 	mla	r3, r1, r6, r3
 801d104:	7886      	ldrb	r6, [r0, #2]
 801d106:	fb09 3906 	mla	r9, r9, r6, r3
 801d10a:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801d10e:	fb13 f304 	smulbb	r3, r3, r4
 801d112:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801d116:	fb09 390a 	mla	r9, r9, sl, r3
 801d11a:	fa1f f989 	uxth.w	r9, r9
 801d11e:	f109 0301 	add.w	r3, r9, #1
 801d122:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801d126:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d128:	4413      	add	r3, r2
 801d12a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801d12c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d130:	9327      	str	r3, [sp, #156]	; 0x9c
 801d132:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d134:	f80c 9c04 	strb.w	r9, [ip, #-4]
 801d138:	4413      	add	r3, r2
 801d13a:	9328      	str	r3, [sp, #160]	; 0xa0
 801d13c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d13e:	3b01      	subs	r3, #1
 801d140:	9311      	str	r3, [sp, #68]	; 0x44
 801d142:	e601      	b.n	801cd48 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801d144:	b151      	cbz	r1, 801d15c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801d146:	5d52      	ldrb	r2, [r2, r5]
 801d148:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d14a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d14e:	4402      	add	r2, r0
 801d150:	4638      	mov	r0, r7
 801d152:	463e      	mov	r6, r7
 801d154:	e774      	b.n	801d040 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801d156:	4638      	mov	r0, r7
 801d158:	463a      	mov	r2, r7
 801d15a:	e771      	b.n	801d040 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801d15c:	4638      	mov	r0, r7
 801d15e:	463a      	mov	r2, r7
 801d160:	e7f7      	b.n	801d152 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801d162:	b015      	add	sp, #84	; 0x54
 801d164:	ecbd 8b08 	vpop	{d8-d11}
 801d168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d16c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801d16c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d170:	780d      	ldrb	r5, [r1, #0]
 801d172:	f891 9002 	ldrb.w	r9, [r1, #2]
 801d176:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 801d17a:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801d17e:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801d182:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801d186:	f891 9001 	ldrb.w	r9, [r1, #1]
 801d18a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801d18e:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801d192:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801d196:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801d19a:	9501      	str	r5, [sp, #4]
 801d19c:	fb06 470c 	mla	r7, r6, ip, r4
 801d1a0:	2e00      	cmp	r6, #0
 801d1a2:	eb02 0e07 	add.w	lr, r2, r7
 801d1a6:	db46      	blt.n	801d236 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801d1a8:	45b0      	cmp	r8, r6
 801d1aa:	dd44      	ble.n	801d236 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801d1ac:	2c00      	cmp	r4, #0
 801d1ae:	db40      	blt.n	801d232 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801d1b0:	45a4      	cmp	ip, r4
 801d1b2:	dd3e      	ble.n	801d232 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801d1b4:	5dd7      	ldrb	r7, [r2, r7]
 801d1b6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d1ba:	441f      	add	r7, r3
 801d1bc:	1c62      	adds	r2, r4, #1
 801d1be:	d43d      	bmi.n	801d23c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801d1c0:	4594      	cmp	ip, r2
 801d1c2:	dd3b      	ble.n	801d23c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801d1c4:	f1ba 0f00 	cmp.w	sl, #0
 801d1c8:	d038      	beq.n	801d23c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801d1ca:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801d1ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d1d2:	441d      	add	r5, r3
 801d1d4:	3601      	adds	r6, #1
 801d1d6:	d435      	bmi.n	801d244 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801d1d8:	45b0      	cmp	r8, r6
 801d1da:	dd33      	ble.n	801d244 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801d1dc:	b390      	cbz	r0, 801d244 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801d1de:	2c00      	cmp	r4, #0
 801d1e0:	db2e      	blt.n	801d240 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801d1e2:	45a4      	cmp	ip, r4
 801d1e4:	dd2c      	ble.n	801d240 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801d1e6:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801d1ea:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d1ee:	441e      	add	r6, r3
 801d1f0:	1c62      	adds	r2, r4, #1
 801d1f2:	d42a      	bmi.n	801d24a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801d1f4:	4594      	cmp	ip, r2
 801d1f6:	dd28      	ble.n	801d24a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801d1f8:	f1ba 0f00 	cmp.w	sl, #0
 801d1fc:	d025      	beq.n	801d24a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801d1fe:	44f4      	add	ip, lr
 801d200:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801d204:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d208:	4413      	add	r3, r2
 801d20a:	f1ba 0f0f 	cmp.w	sl, #15
 801d20e:	f897 8000 	ldrb.w	r8, [r7]
 801d212:	f895 9000 	ldrb.w	r9, [r5]
 801d216:	f896 e000 	ldrb.w	lr, [r6]
 801d21a:	f893 c000 	ldrb.w	ip, [r3]
 801d21e:	d801      	bhi.n	801d224 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 801d220:	280f      	cmp	r0, #15
 801d222:	d914      	bls.n	801d24e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 801d224:	4b29      	ldr	r3, [pc, #164]	; (801d2cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801d226:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801d22a:	4a29      	ldr	r2, [pc, #164]	; (801d2d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801d22c:	4829      	ldr	r0, [pc, #164]	; (801d2d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801d22e:	f005 ff39 	bl	80230a4 <__assert_func>
 801d232:	af01      	add	r7, sp, #4
 801d234:	e7c2      	b.n	801d1bc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801d236:	ad01      	add	r5, sp, #4
 801d238:	462f      	mov	r7, r5
 801d23a:	e7cb      	b.n	801d1d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801d23c:	ad01      	add	r5, sp, #4
 801d23e:	e7c9      	b.n	801d1d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801d240:	ae01      	add	r6, sp, #4
 801d242:	e7d5      	b.n	801d1f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 801d244:	ab01      	add	r3, sp, #4
 801d246:	461e      	mov	r6, r3
 801d248:	e7df      	b.n	801d20a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801d24a:	ab01      	add	r3, sp, #4
 801d24c:	e7dd      	b.n	801d20a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801d24e:	fa1f f48a 	uxth.w	r4, sl
 801d252:	b280      	uxth	r0, r0
 801d254:	fb04 fa00 	mul.w	sl, r4, r0
 801d258:	0124      	lsls	r4, r4, #4
 801d25a:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801d25e:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801d262:	b282      	uxth	r2, r0
 801d264:	eba4 000a 	sub.w	r0, r4, sl
 801d268:	ebab 0b02 	sub.w	fp, fp, r2
 801d26c:	b280      	uxth	r0, r0
 801d26e:	fa1f fb8b 	uxth.w	fp, fp
 801d272:	fb00 f909 	mul.w	r9, r0, r9
 801d276:	fb0b 9808 	mla	r8, fp, r8, r9
 801d27a:	fb02 8e0e 	mla	lr, r2, lr, r8
 801d27e:	fb0a ec0c 	mla	ip, sl, ip, lr
 801d282:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d286:	f881 c000 	strb.w	ip, [r1]
 801d28a:	786c      	ldrb	r4, [r5, #1]
 801d28c:	f897 c001 	ldrb.w	ip, [r7, #1]
 801d290:	4344      	muls	r4, r0
 801d292:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801d296:	7874      	ldrb	r4, [r6, #1]
 801d298:	fb02 cc04 	mla	ip, r2, r4, ip
 801d29c:	785c      	ldrb	r4, [r3, #1]
 801d29e:	fb0a c404 	mla	r4, sl, r4, ip
 801d2a2:	1224      	asrs	r4, r4, #8
 801d2a4:	704c      	strb	r4, [r1, #1]
 801d2a6:	78ad      	ldrb	r5, [r5, #2]
 801d2a8:	78bc      	ldrb	r4, [r7, #2]
 801d2aa:	4368      	muls	r0, r5
 801d2ac:	fb0b 0b04 	mla	fp, fp, r4, r0
 801d2b0:	78b0      	ldrb	r0, [r6, #2]
 801d2b2:	fb02 b000 	mla	r0, r2, r0, fp
 801d2b6:	789a      	ldrb	r2, [r3, #2]
 801d2b8:	fb0a 0a02 	mla	sl, sl, r2, r0
 801d2bc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d2c0:	f881 a002 	strb.w	sl, [r1, #2]
 801d2c4:	b003      	add	sp, #12
 801d2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2ca:	bf00      	nop
 801d2cc:	080292e4 	.word	0x080292e4
 801d2d0:	080297da 	.word	0x080297da
 801d2d4:	080293ad 	.word	0x080293ad

0801d2d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2dc:	ed2d 8b0a 	vpush	{d8-d12}
 801d2e0:	b08f      	sub	sp, #60	; 0x3c
 801d2e2:	eeb0 aa40 	vmov.f32	s20, s0
 801d2e6:	eef0 9a60 	vmov.f32	s19, s1
 801d2ea:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801d2ec:	eeb0 9a41 	vmov.f32	s18, s2
 801d2f0:	9307      	str	r3, [sp, #28]
 801d2f2:	eeb0 8a62 	vmov.f32	s16, s5
 801d2f6:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801d2fa:	eef0 8a43 	vmov.f32	s17, s6
 801d2fe:	900d      	str	r0, [sp, #52]	; 0x34
 801d300:	eeb0 ca44 	vmov.f32	s24, s8
 801d304:	6860      	ldr	r0, [r4, #4]
 801d306:	eef0 ba64 	vmov.f32	s23, s9
 801d30a:	9309      	str	r3, [sp, #36]	; 0x24
 801d30c:	eeb0 ba45 	vmov.f32	s22, s10
 801d310:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801d314:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 801d318:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 801d31c:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801d320:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801d322:	fb00 1303 	mla	r3, r0, r3, r1
 801d326:	6821      	ldr	r1, [r4, #0]
 801d328:	6854      	ldr	r4, [r2, #4]
 801d32a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d32e:	3404      	adds	r4, #4
 801d330:	18cb      	adds	r3, r1, r3
 801d332:	9308      	str	r3, [sp, #32]
 801d334:	6813      	ldr	r3, [r2, #0]
 801d336:	930a      	str	r3, [sp, #40]	; 0x28
 801d338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d33a:	2b00      	cmp	r3, #0
 801d33c:	dc03      	bgt.n	801d346 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d33e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d340:	2b00      	cmp	r3, #0
 801d342:	f340 81d2 	ble.w	801d6ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801d346:	9b07      	ldr	r3, [sp, #28]
 801d348:	2b00      	cmp	r3, #0
 801d34a:	f340 80e3 	ble.w	801d514 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801d34e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801d350:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d352:	1412      	asrs	r2, r2, #16
 801d354:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d358:	d42f      	bmi.n	801d3ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801d35a:	1c51      	adds	r1, r2, #1
 801d35c:	428d      	cmp	r5, r1
 801d35e:	dd2f      	ble.n	801d3c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801d360:	2b00      	cmp	r3, #0
 801d362:	db2d      	blt.n	801d3c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801d364:	1c59      	adds	r1, r3, #1
 801d366:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d368:	4288      	cmp	r0, r1
 801d36a:	dd29      	ble.n	801d3c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801d36c:	9b07      	ldr	r3, [sp, #28]
 801d36e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801d370:	3b01      	subs	r3, #1
 801d372:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801d374:	fb02 1203 	mla	r2, r2, r3, r1
 801d378:	1412      	asrs	r2, r2, #16
 801d37a:	d42b      	bmi.n	801d3d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801d37c:	3201      	adds	r2, #1
 801d37e:	4295      	cmp	r5, r2
 801d380:	dd28      	ble.n	801d3d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801d382:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801d384:	9924      	ldr	r1, [sp, #144]	; 0x90
 801d386:	fb02 1303 	mla	r3, r2, r3, r1
 801d38a:	141b      	asrs	r3, r3, #16
 801d38c:	d422      	bmi.n	801d3d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801d38e:	3301      	adds	r3, #1
 801d390:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d392:	429a      	cmp	r2, r3
 801d394:	dd1e      	ble.n	801d3d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801d396:	9b08      	ldr	r3, [sp, #32]
 801d398:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801d39c:	f103 0803 	add.w	r8, r3, #3
 801d3a0:	f1ba 0f00 	cmp.w	sl, #0
 801d3a4:	f300 8119 	bgt.w	801d5da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 801d3a8:	9b07      	ldr	r3, [sp, #28]
 801d3aa:	9a08      	ldr	r2, [sp, #32]
 801d3ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d3b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d3b4:	441a      	add	r2, r3
 801d3b6:	9208      	str	r2, [sp, #32]
 801d3b8:	e0ae      	b.n	801d518 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801d3ba:	1c51      	adds	r1, r2, #1
 801d3bc:	f040 809b 	bne.w	801d4f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801d3c0:	42aa      	cmp	r2, r5
 801d3c2:	f280 8098 	bge.w	801d4f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801d3c6:	1c5a      	adds	r2, r3, #1
 801d3c8:	f2c0 8095 	blt.w	801d4f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801d3cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d3ce:	4293      	cmp	r3, r2
 801d3d0:	f280 8091 	bge.w	801d4f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801d3d4:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 801d3d8:	f1bb 0f00 	cmp.w	fp, #0
 801d3dc:	dde4      	ble.n	801d3a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801d3de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d3e0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801d3e2:	141a      	asrs	r2, r3, #16
 801d3e4:	9924      	ldr	r1, [sp, #144]	; 0x90
 801d3e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d3e8:	1400      	asrs	r0, r0, #16
 801d3ea:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801d3ee:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d3f2:	f100 80dc 	bmi.w	801d5ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 801d3f6:	1c47      	adds	r7, r0, #1
 801d3f8:	42bd      	cmp	r5, r7
 801d3fa:	f340 80da 	ble.w	801d5b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801d3fe:	2a00      	cmp	r2, #0
 801d400:	f2c0 80d7 	blt.w	801d5b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801d404:	f102 0c01 	add.w	ip, r2, #1
 801d408:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801d40a:	4567      	cmp	r7, ip
 801d40c:	f340 80d1 	ble.w	801d5b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801d410:	fb02 0005 	mla	r0, r2, r5, r0
 801d414:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801d416:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d418:	f817 8000 	ldrb.w	r8, [r7, r0]
 801d41c:	4402      	add	r2, r0
 801d41e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d422:	eb04 0c08 	add.w	ip, r4, r8
 801d426:	2b00      	cmp	r3, #0
 801d428:	f000 80b3 	beq.w	801d592 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801d42c:	7857      	ldrb	r7, [r2, #1]
 801d42e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d432:	4427      	add	r7, r4
 801d434:	2900      	cmp	r1, #0
 801d436:	f000 80b4 	beq.w	801d5a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 801d43a:	1950      	adds	r0, r2, r5
 801d43c:	5d52      	ldrb	r2, [r2, r5]
 801d43e:	7840      	ldrb	r0, [r0, #1]
 801d440:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d444:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d448:	4422      	add	r2, r4
 801d44a:	4420      	add	r0, r4
 801d44c:	b29b      	uxth	r3, r3
 801d44e:	f814 a008 	ldrb.w	sl, [r4, r8]
 801d452:	b289      	uxth	r1, r1
 801d454:	f897 8000 	ldrb.w	r8, [r7]
 801d458:	fb03 f901 	mul.w	r9, r3, r1
 801d45c:	011b      	lsls	r3, r3, #4
 801d45e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d462:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801d466:	eba3 0309 	sub.w	r3, r3, r9
 801d46a:	b289      	uxth	r1, r1
 801d46c:	b29b      	uxth	r3, r3
 801d46e:	ebae 0e01 	sub.w	lr, lr, r1
 801d472:	fb03 f808 	mul.w	r8, r3, r8
 801d476:	fa1f fe8e 	uxth.w	lr, lr
 801d47a:	fb0e 880a 	mla	r8, lr, sl, r8
 801d47e:	f892 a000 	ldrb.w	sl, [r2]
 801d482:	fb01 880a 	mla	r8, r1, sl, r8
 801d486:	f890 a000 	ldrb.w	sl, [r0]
 801d48a:	fb09 880a 	mla	r8, r9, sl, r8
 801d48e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d492:	f886 8000 	strb.w	r8, [r6]
 801d496:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d49a:	f89c a001 	ldrb.w	sl, [ip, #1]
 801d49e:	fb03 f808 	mul.w	r8, r3, r8
 801d4a2:	fb0e 880a 	mla	r8, lr, sl, r8
 801d4a6:	f892 a001 	ldrb.w	sl, [r2, #1]
 801d4aa:	fb01 880a 	mla	r8, r1, sl, r8
 801d4ae:	f890 a001 	ldrb.w	sl, [r0, #1]
 801d4b2:	fb09 880a 	mla	r8, r9, sl, r8
 801d4b6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d4ba:	f886 8001 	strb.w	r8, [r6, #1]
 801d4be:	78bf      	ldrb	r7, [r7, #2]
 801d4c0:	f89c c002 	ldrb.w	ip, [ip, #2]
 801d4c4:	437b      	muls	r3, r7
 801d4c6:	7892      	ldrb	r2, [r2, #2]
 801d4c8:	fb0e 330c 	mla	r3, lr, ip, r3
 801d4cc:	fb01 3102 	mla	r1, r1, r2, r3
 801d4d0:	7882      	ldrb	r2, [r0, #2]
 801d4d2:	fb09 1902 	mla	r9, r9, r2, r1
 801d4d6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d4da:	f886 9002 	strb.w	r9, [r6, #2]
 801d4de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d4e0:	3603      	adds	r6, #3
 801d4e2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801d4e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d4e8:	4413      	add	r3, r2
 801d4ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801d4ec:	9323      	str	r3, [sp, #140]	; 0x8c
 801d4ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d4f0:	4413      	add	r3, r2
 801d4f2:	9324      	str	r3, [sp, #144]	; 0x90
 801d4f4:	e770      	b.n	801d3d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801d4f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d4f8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801d4fa:	4413      	add	r3, r2
 801d4fc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801d4fe:	9323      	str	r3, [sp, #140]	; 0x8c
 801d500:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d502:	4413      	add	r3, r2
 801d504:	9324      	str	r3, [sp, #144]	; 0x90
 801d506:	9b07      	ldr	r3, [sp, #28]
 801d508:	3b01      	subs	r3, #1
 801d50a:	9307      	str	r3, [sp, #28]
 801d50c:	9b08      	ldr	r3, [sp, #32]
 801d50e:	3303      	adds	r3, #3
 801d510:	9308      	str	r3, [sp, #32]
 801d512:	e718      	b.n	801d346 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801d514:	f47f af2a 	bne.w	801d36c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801d518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d51a:	2b00      	cmp	r3, #0
 801d51c:	f340 80e5 	ble.w	801d6ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801d520:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801d524:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d526:	ee79 9aab 	vadd.f32	s19, s19, s23
 801d52a:	eef0 6a48 	vmov.f32	s13, s16
 801d52e:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801d532:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801d536:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d53a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801d53e:	eef0 6a68 	vmov.f32	s13, s17
 801d542:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d546:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 801d54a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801d54e:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d552:	ee37 8a48 	vsub.f32	s16, s14, s16
 801d556:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801d55a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801d55e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d562:	ee18 2a10 	vmov	r2, s16
 801d566:	eeb0 8a47 	vmov.f32	s16, s14
 801d56a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d56e:	ee18 2a90 	vmov	r2, s17
 801d572:	9325      	str	r3, [sp, #148]	; 0x94
 801d574:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d576:	eef0 8a67 	vmov.f32	s17, s15
 801d57a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d57e:	9326      	str	r3, [sp, #152]	; 0x98
 801d580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d582:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d584:	3b01      	subs	r3, #1
 801d586:	930b      	str	r3, [sp, #44]	; 0x2c
 801d588:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d58a:	bf08      	it	eq
 801d58c:	4613      	moveq	r3, r2
 801d58e:	9307      	str	r3, [sp, #28]
 801d590:	e6d2      	b.n	801d338 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801d592:	b149      	cbz	r1, 801d5a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801d594:	5d52      	ldrb	r2, [r2, r5]
 801d596:	4660      	mov	r0, ip
 801d598:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d59c:	4422      	add	r2, r4
 801d59e:	4667      	mov	r7, ip
 801d5a0:	e754      	b.n	801d44c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801d5a2:	4660      	mov	r0, ip
 801d5a4:	4662      	mov	r2, ip
 801d5a6:	e751      	b.n	801d44c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801d5a8:	4660      	mov	r0, ip
 801d5aa:	4662      	mov	r2, ip
 801d5ac:	e7f7      	b.n	801d59e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801d5ae:	1c47      	adds	r7, r0, #1
 801d5b0:	d195      	bne.n	801d4de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801d5b2:	4285      	cmp	r5, r0
 801d5b4:	dd93      	ble.n	801d4de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801d5b6:	1c57      	adds	r7, r2, #1
 801d5b8:	db91      	blt.n	801d4de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801d5ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801d5bc:	4297      	cmp	r7, r2
 801d5be:	dd8e      	ble.n	801d4de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801d5c0:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801d5c4:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801d5c8:	e9cd 5700 	strd	r5, r7, [sp]
 801d5cc:	4623      	mov	r3, r4
 801d5ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d5d0:	4631      	mov	r1, r6
 801d5d2:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d5d4:	f7ff fdca 	bl	801d16c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801d5d8:	e781      	b.n	801d4de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801d5da:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801d5dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801d5de:	1410      	asrs	r0, r2, #16
 801d5e0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d5e4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801d5e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d5e8:	1412      	asrs	r2, r2, #16
 801d5ea:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d5ee:	fb05 2000 	mla	r0, r5, r0, r2
 801d5f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d5f4:	f816 e000 	ldrb.w	lr, [r6, r0]
 801d5f8:	4402      	add	r2, r0
 801d5fa:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d5fe:	eb04 070e 	add.w	r7, r4, lr
 801d602:	2b00      	cmp	r3, #0
 801d604:	d063      	beq.n	801d6ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801d606:	7856      	ldrb	r6, [r2, #1]
 801d608:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d60c:	4426      	add	r6, r4
 801d60e:	2900      	cmp	r1, #0
 801d610:	d065      	beq.n	801d6de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801d612:	1950      	adds	r0, r2, r5
 801d614:	5d52      	ldrb	r2, [r2, r5]
 801d616:	7840      	ldrb	r0, [r0, #1]
 801d618:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d61c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d620:	4422      	add	r2, r4
 801d622:	4420      	add	r0, r4
 801d624:	b29b      	uxth	r3, r3
 801d626:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801d62a:	b289      	uxth	r1, r1
 801d62c:	f896 e000 	ldrb.w	lr, [r6]
 801d630:	f108 0803 	add.w	r8, r8, #3
 801d634:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d638:	fb03 f901 	mul.w	r9, r3, r1
 801d63c:	011b      	lsls	r3, r3, #4
 801d63e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d642:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801d646:	eba3 0309 	sub.w	r3, r3, r9
 801d64a:	b289      	uxth	r1, r1
 801d64c:	b29b      	uxth	r3, r3
 801d64e:	ebac 0c01 	sub.w	ip, ip, r1
 801d652:	fb03 fe0e 	mul.w	lr, r3, lr
 801d656:	fa1f fc8c 	uxth.w	ip, ip
 801d65a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d65e:	f892 b000 	ldrb.w	fp, [r2]
 801d662:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d666:	f890 b000 	ldrb.w	fp, [r0]
 801d66a:	fb09 ee0b 	mla	lr, r9, fp, lr
 801d66e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d672:	f808 ec06 	strb.w	lr, [r8, #-6]
 801d676:	f896 e001 	ldrb.w	lr, [r6, #1]
 801d67a:	f897 b001 	ldrb.w	fp, [r7, #1]
 801d67e:	fb03 fe0e 	mul.w	lr, r3, lr
 801d682:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d686:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d68a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d68e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d692:	fb09 ee0b 	mla	lr, r9, fp, lr
 801d696:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d69a:	f808 ec05 	strb.w	lr, [r8, #-5]
 801d69e:	78b6      	ldrb	r6, [r6, #2]
 801d6a0:	78bf      	ldrb	r7, [r7, #2]
 801d6a2:	4373      	muls	r3, r6
 801d6a4:	7896      	ldrb	r6, [r2, #2]
 801d6a6:	7882      	ldrb	r2, [r0, #2]
 801d6a8:	fb0c 3307 	mla	r3, ip, r7, r3
 801d6ac:	fb01 3306 	mla	r3, r1, r6, r3
 801d6b0:	fb09 3902 	mla	r9, r9, r2, r3
 801d6b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d6b6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801d6b8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d6bc:	4413      	add	r3, r2
 801d6be:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801d6c0:	f808 9c04 	strb.w	r9, [r8, #-4]
 801d6c4:	9323      	str	r3, [sp, #140]	; 0x8c
 801d6c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d6c8:	4413      	add	r3, r2
 801d6ca:	9324      	str	r3, [sp, #144]	; 0x90
 801d6cc:	e668      	b.n	801d3a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801d6ce:	b149      	cbz	r1, 801d6e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 801d6d0:	5d52      	ldrb	r2, [r2, r5]
 801d6d2:	4638      	mov	r0, r7
 801d6d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d6d8:	4422      	add	r2, r4
 801d6da:	463e      	mov	r6, r7
 801d6dc:	e7a2      	b.n	801d624 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801d6de:	4638      	mov	r0, r7
 801d6e0:	463a      	mov	r2, r7
 801d6e2:	e79f      	b.n	801d624 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801d6e4:	4638      	mov	r0, r7
 801d6e6:	463a      	mov	r2, r7
 801d6e8:	e7f7      	b.n	801d6da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 801d6ea:	b00f      	add	sp, #60	; 0x3c
 801d6ec:	ecbd 8b0a 	vpop	{d8-d12}
 801d6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d6f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801d6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6f8:	b087      	sub	sp, #28
 801d6fa:	7888      	ldrb	r0, [r1, #2]
 801d6fc:	9002      	str	r0, [sp, #8]
 801d6fe:	7848      	ldrb	r0, [r1, #1]
 801d700:	9e02      	ldr	r6, [sp, #8]
 801d702:	9003      	str	r0, [sp, #12]
 801d704:	7808      	ldrb	r0, [r1, #0]
 801d706:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801d70a:	9004      	str	r0, [sp, #16]
 801d70c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801d710:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 801d714:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801d718:	9e03      	ldr	r6, [sp, #12]
 801d71a:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 801d71e:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801d722:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 801d726:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 801d72a:	fb04 7508 	mla	r5, r4, r8, r7
 801d72e:	2c00      	cmp	r4, #0
 801d730:	eb02 0905 	add.w	r9, r2, r5
 801d734:	db45      	blt.n	801d7c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801d736:	45a2      	cmp	sl, r4
 801d738:	dd43      	ble.n	801d7c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801d73a:	2f00      	cmp	r7, #0
 801d73c:	db3f      	blt.n	801d7be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801d73e:	45b8      	cmp	r8, r7
 801d740:	dd3d      	ble.n	801d7be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801d742:	5d52      	ldrb	r2, [r2, r5]
 801d744:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801d748:	1c7a      	adds	r2, r7, #1
 801d74a:	d43d      	bmi.n	801d7c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801d74c:	4590      	cmp	r8, r2
 801d74e:	dd3b      	ble.n	801d7c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801d750:	f1bc 0f00 	cmp.w	ip, #0
 801d754:	d038      	beq.n	801d7c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801d756:	f899 2001 	ldrb.w	r2, [r9, #1]
 801d75a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801d75e:	3401      	adds	r4, #1
 801d760:	d436      	bmi.n	801d7d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801d762:	45a2      	cmp	sl, r4
 801d764:	dd34      	ble.n	801d7d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801d766:	f1be 0f00 	cmp.w	lr, #0
 801d76a:	d031      	beq.n	801d7d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801d76c:	2f00      	cmp	r7, #0
 801d76e:	db2d      	blt.n	801d7cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801d770:	45b8      	cmp	r8, r7
 801d772:	dd2b      	ble.n	801d7cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801d774:	f819 2008 	ldrb.w	r2, [r9, r8]
 801d778:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801d77c:	3701      	adds	r7, #1
 801d77e:	d409      	bmi.n	801d794 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801d780:	45b8      	cmp	r8, r7
 801d782:	dd07      	ble.n	801d794 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801d784:	f1bc 0f00 	cmp.w	ip, #0
 801d788:	d004      	beq.n	801d794 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801d78a:	44c8      	add	r8, r9
 801d78c:	f898 2001 	ldrb.w	r2, [r8, #1]
 801d790:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801d794:	f1bc 0f0f 	cmp.w	ip, #15
 801d798:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801d79c:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801d7a0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801d7a4:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801d7a8:	d802      	bhi.n	801d7b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 801d7aa:	f1be 0f0f 	cmp.w	lr, #15
 801d7ae:	d911      	bls.n	801d7d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 801d7b0:	4b77      	ldr	r3, [pc, #476]	; (801d990 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 801d7b2:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801d7b6:	4a77      	ldr	r2, [pc, #476]	; (801d994 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 801d7b8:	4877      	ldr	r0, [pc, #476]	; (801d998 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 801d7ba:	f005 fc73 	bl	80230a4 <__assert_func>
 801d7be:	4606      	mov	r6, r0
 801d7c0:	e7c2      	b.n	801d748 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 801d7c2:	4605      	mov	r5, r0
 801d7c4:	4606      	mov	r6, r0
 801d7c6:	e7ca      	b.n	801d75e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801d7c8:	4605      	mov	r5, r0
 801d7ca:	e7c8      	b.n	801d75e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801d7cc:	4604      	mov	r4, r0
 801d7ce:	e7d5      	b.n	801d77c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 801d7d0:	4604      	mov	r4, r0
 801d7d2:	e7df      	b.n	801d794 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801d7d4:	fa1f fc8c 	uxth.w	ip, ip
 801d7d8:	fa1f f28e 	uxth.w	r2, lr
 801d7dc:	fb02 fe0c 	mul.w	lr, r2, ip
 801d7e0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801d7e4:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 801d7e8:	ebac 070e 	sub.w	r7, ip, lr
 801d7ec:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801d7f0:	b292      	uxth	r2, r2
 801d7f2:	b2bf      	uxth	r7, r7
 801d7f4:	1a9b      	subs	r3, r3, r2
 801d7f6:	fb07 fc0a 	mul.w	ip, r7, sl
 801d7fa:	b29b      	uxth	r3, r3
 801d7fc:	fb03 cc0b 	mla	ip, r3, fp, ip
 801d800:	9301      	str	r3, [sp, #4]
 801d802:	fb02 cc09 	mla	ip, r2, r9, ip
 801d806:	fb0e cc08 	mla	ip, lr, r8, ip
 801d80a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801d80e:	9305      	str	r3, [sp, #20]
 801d810:	2b00      	cmp	r3, #0
 801d812:	f000 80b9 	beq.w	801d988 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 801d816:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801d81a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d81e:	fb0b fc0c 	mul.w	ip, fp, ip
 801d822:	fb0b f606 	mul.w	r6, fp, r6
 801d826:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801d82a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d82e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801d832:	44dc      	add	ip, fp
 801d834:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801d838:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801d83c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d840:	fb0a fb0b 	mul.w	fp, sl, fp
 801d844:	fb0a fa05 	mul.w	sl, sl, r5
 801d848:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801d84c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801d850:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 801d854:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801d858:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801d85c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d860:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801d864:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d868:	0a36      	lsrs	r6, r6, #8
 801d86a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d86e:	44dc      	add	ip, fp
 801d870:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d874:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801d878:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d87c:	fb09 fb0b 	mul.w	fp, r9, fp
 801d880:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d884:	fb09 f904 	mul.w	r9, r9, r4
 801d888:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d88c:	ea4f 251b 	mov.w	r5, fp, lsr #8
 801d890:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d894:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801d898:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d89c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d8a0:	fb0c fc07 	mul.w	ip, ip, r7
 801d8a4:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801d8a8:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 801d8ac:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801d8b0:	445d      	add	r5, fp
 801d8b2:	fb08 f404 	mul.w	r4, r8, r4
 801d8b6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d8ba:	fb08 f800 	mul.w	r8, r8, r0
 801d8be:	0a2d      	lsrs	r5, r5, #8
 801d8c0:	0a20      	lsrs	r0, r4, #8
 801d8c2:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801d8c6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d8ca:	fb07 f70a 	mul.w	r7, r7, sl
 801d8ce:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801d8d2:	4404      	add	r4, r0
 801d8d4:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801d8d8:	0a24      	lsrs	r4, r4, #8
 801d8da:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 801d8de:	9801      	ldr	r0, [sp, #4]
 801d8e0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801d8e4:	fb03 cc00 	mla	ip, r3, r0, ip
 801d8e8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801d8ec:	fb00 7606 	mla	r6, r0, r6, r7
 801d8f0:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 801d8f4:	fb04 cc0e 	mla	ip, r4, lr, ip
 801d8f8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801d8fc:	b280      	uxth	r0, r0
 801d8fe:	9c04      	ldr	r4, [sp, #16]
 801d900:	fb05 cc02 	mla	ip, r5, r2, ip
 801d904:	fb0e 6e08 	mla	lr, lr, r8, r6
 801d908:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d90c:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801d910:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 801d914:	fb02 ec0c 	mla	ip, r2, ip, lr
 801d918:	9a05      	ldr	r2, [sp, #20]
 801d91a:	4342      	muls	r2, r0
 801d91c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d920:	1c53      	adds	r3, r2, #1
 801d922:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d926:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d92a:	ea45 0c0c 	orr.w	ip, r5, ip
 801d92e:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801d932:	fa5f f28c 	uxtb.w	r2, ip
 801d936:	b2db      	uxtb	r3, r3
 801d938:	fb14 f403 	smulbb	r4, r4, r3
 801d93c:	fb02 4200 	mla	r2, r2, r0, r4
 801d940:	b292      	uxth	r2, r2
 801d942:	1c54      	adds	r4, r2, #1
 801d944:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801d948:	9c03      	ldr	r4, [sp, #12]
 801d94a:	fb14 f403 	smulbb	r4, r4, r3
 801d94e:	1212      	asrs	r2, r2, #8
 801d950:	700a      	strb	r2, [r1, #0]
 801d952:	f3cc 2207 	ubfx	r2, ip, #8, #8
 801d956:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801d95a:	fb02 4200 	mla	r2, r2, r0, r4
 801d95e:	b292      	uxth	r2, r2
 801d960:	1c54      	adds	r4, r2, #1
 801d962:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801d966:	1212      	asrs	r2, r2, #8
 801d968:	704a      	strb	r2, [r1, #1]
 801d96a:	9a02      	ldr	r2, [sp, #8]
 801d96c:	fb12 f303 	smulbb	r3, r2, r3
 801d970:	fb0c 3c00 	mla	ip, ip, r0, r3
 801d974:	fa1f fc8c 	uxth.w	ip, ip
 801d978:	f10c 0301 	add.w	r3, ip, #1
 801d97c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801d980:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d984:	f881 c002 	strb.w	ip, [r1, #2]
 801d988:	b007      	add	sp, #28
 801d98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d98e:	bf00      	nop
 801d990:	080292e4 	.word	0x080292e4
 801d994:	080297da 	.word	0x080297da
 801d998:	080293ad 	.word	0x080293ad

0801d99c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9a0:	ed2d 8b08 	vpush	{d8-d11}
 801d9a4:	b09b      	sub	sp, #108	; 0x6c
 801d9a6:	eeb0 aa40 	vmov.f32	s20, s0
 801d9aa:	eef0 9a60 	vmov.f32	s19, s1
 801d9ae:	930a      	str	r3, [sp, #40]	; 0x28
 801d9b0:	eeb0 9a41 	vmov.f32	s18, s2
 801d9b4:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801d9b8:	eeb0 8a62 	vmov.f32	s16, s5
 801d9bc:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 801d9be:	eef0 8a43 	vmov.f32	s17, s6
 801d9c2:	9312      	str	r3, [sp, #72]	; 0x48
 801d9c4:	eef0 ba44 	vmov.f32	s23, s8
 801d9c8:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801d9cc:	eeb0 ba64 	vmov.f32	s22, s9
 801d9d0:	9019      	str	r0, [sp, #100]	; 0x64
 801d9d2:	eef0 aa45 	vmov.f32	s21, s10
 801d9d6:	9114      	str	r1, [sp, #80]	; 0x50
 801d9d8:	9317      	str	r3, [sp, #92]	; 0x5c
 801d9da:	6868      	ldr	r0, [r5, #4]
 801d9dc:	9218      	str	r2, [sp, #96]	; 0x60
 801d9de:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801d9e0:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801d9e4:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801d9e8:	fb00 1303 	mla	r3, r0, r3, r1
 801d9ec:	6829      	ldr	r1, [r5, #0]
 801d9ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d9f2:	18cb      	adds	r3, r1, r3
 801d9f4:	930d      	str	r3, [sp, #52]	; 0x34
 801d9f6:	6813      	ldr	r3, [r2, #0]
 801d9f8:	9313      	str	r3, [sp, #76]	; 0x4c
 801d9fa:	6853      	ldr	r3, [r2, #4]
 801d9fc:	3304      	adds	r3, #4
 801d9fe:	9309      	str	r3, [sp, #36]	; 0x24
 801da00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801da02:	2b00      	cmp	r3, #0
 801da04:	dc03      	bgt.n	801da0e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801da06:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801da08:	2b00      	cmp	r3, #0
 801da0a:	f340 8352 	ble.w	801e0b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801da0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da10:	2b00      	cmp	r3, #0
 801da12:	f340 81a2 	ble.w	801dd5a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 801da16:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801da18:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801da1a:	1412      	asrs	r2, r2, #16
 801da1c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801da20:	d431      	bmi.n	801da86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801da22:	1c51      	adds	r1, r2, #1
 801da24:	428c      	cmp	r4, r1
 801da26:	dd31      	ble.n	801da8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801da28:	2b00      	cmp	r3, #0
 801da2a:	db2f      	blt.n	801da8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801da2c:	1c59      	adds	r1, r3, #1
 801da2e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801da30:	4288      	cmp	r0, r1
 801da32:	dd2b      	ble.n	801da8c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801da34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da36:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801da38:	3b01      	subs	r3, #1
 801da3a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801da3c:	fb02 1203 	mla	r2, r2, r3, r1
 801da40:	1412      	asrs	r2, r2, #16
 801da42:	d42d      	bmi.n	801daa0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801da44:	3201      	adds	r2, #1
 801da46:	4294      	cmp	r4, r2
 801da48:	dd2a      	ble.n	801daa0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801da4a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801da4c:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801da4e:	fb02 1303 	mla	r3, r2, r3, r1
 801da52:	141b      	asrs	r3, r3, #16
 801da54:	d424      	bmi.n	801daa0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801da56:	3301      	adds	r3, #1
 801da58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801da5a:	429a      	cmp	r2, r3
 801da5c:	dd20      	ble.n	801daa0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801da5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801da60:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 801da64:	f103 0e03 	add.w	lr, r3, #3
 801da68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da6a:	9315      	str	r3, [sp, #84]	; 0x54
 801da6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801da6e:	2b00      	cmp	r3, #0
 801da70:	f300 81de 	bgt.w	801de30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 801da74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801da78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801da7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801da80:	441a      	add	r2, r3
 801da82:	920d      	str	r2, [sp, #52]	; 0x34
 801da84:	e16b      	b.n	801dd5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 801da86:	1c51      	adds	r1, r2, #1
 801da88:	f040 8158 	bne.w	801dd3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801da8c:	42a2      	cmp	r2, r4
 801da8e:	f280 8155 	bge.w	801dd3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801da92:	1c5a      	adds	r2, r3, #1
 801da94:	f2c0 8152 	blt.w	801dd3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801da98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801da9a:	4293      	cmp	r3, r2
 801da9c:	f280 814e 	bge.w	801dd3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801daa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801daa2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801daa4:	9316      	str	r3, [sp, #88]	; 0x58
 801daa6:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801daaa:	9315      	str	r3, [sp, #84]	; 0x54
 801daac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801daae:	2b00      	cmp	r3, #0
 801dab0:	dde0      	ble.n	801da74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801dab2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801dab4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801dab6:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801daba:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801dabc:	141b      	asrs	r3, r3, #16
 801dabe:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801dac2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801dac4:	1412      	asrs	r2, r2, #16
 801dac6:	f100 819a 	bmi.w	801ddfe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 801daca:	1c55      	adds	r5, r2, #1
 801dacc:	42ac      	cmp	r4, r5
 801dace:	f340 8198 	ble.w	801de02 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801dad2:	2b00      	cmp	r3, #0
 801dad4:	f2c0 8195 	blt.w	801de02 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801dad8:	1c5d      	adds	r5, r3, #1
 801dada:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801dadc:	42af      	cmp	r7, r5
 801dade:	f340 8190 	ble.w	801de02 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801dae2:	fb03 2304 	mla	r3, r3, r4, r2
 801dae6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801dae8:	18d5      	adds	r5, r2, r3
 801daea:	5cd3      	ldrb	r3, [r2, r3]
 801daec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801daee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801daf2:	0e1f      	lsrs	r7, r3, #24
 801daf4:	2800      	cmp	r0, #0
 801daf6:	f000 8171 	beq.w	801dddc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801dafa:	f895 c001 	ldrb.w	ip, [r5, #1]
 801dafe:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801db02:	920e      	str	r2, [sp, #56]	; 0x38
 801db04:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801db08:	2900      	cmp	r1, #0
 801db0a:	f000 8172 	beq.w	801ddf2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 801db0e:	eb05 0c04 	add.w	ip, r5, r4
 801db12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801db14:	5d2d      	ldrb	r5, [r5, r4]
 801db16:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801db1a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801db1e:	950b      	str	r5, [sp, #44]	; 0x2c
 801db20:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801db24:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801db26:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801db2a:	0e15      	lsrs	r5, r2, #24
 801db2c:	920f      	str	r2, [sp, #60]	; 0x3c
 801db2e:	b280      	uxth	r0, r0
 801db30:	b289      	uxth	r1, r1
 801db32:	fb00 fa01 	mul.w	sl, r0, r1
 801db36:	0100      	lsls	r0, r0, #4
 801db38:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801db3c:	eba0 080a 	sub.w	r8, r0, sl
 801db40:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801db44:	b289      	uxth	r1, r1
 801db46:	fa1f f888 	uxth.w	r8, r8
 801db4a:	1a52      	subs	r2, r2, r1
 801db4c:	fb08 f00e 	mul.w	r0, r8, lr
 801db50:	b292      	uxth	r2, r2
 801db52:	fb02 0007 	mla	r0, r2, r7, r0
 801db56:	fb01 0009 	mla	r0, r1, r9, r0
 801db5a:	fb0a 0005 	mla	r0, sl, r5, r0
 801db5e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801db62:	2800      	cmp	r0, #0
 801db64:	f000 80dd 	beq.w	801dd22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801db68:	2fff      	cmp	r7, #255	; 0xff
 801db6a:	d01a      	beq.n	801dba2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801db6c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801db70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801db74:	fb07 fc0c 	mul.w	ip, r7, ip
 801db78:	435f      	muls	r7, r3
 801db7a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801db7e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801db82:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801db86:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801db8a:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801db8e:	4463      	add	r3, ip
 801db90:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801db94:	0a1b      	lsrs	r3, r3, #8
 801db96:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801db9a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801db9e:	ea43 030b 	orr.w	r3, r3, fp
 801dba2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801dba6:	d01e      	beq.n	801dbe6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801dba8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801dbaa:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 801dbae:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801dbb2:	fb0e fb0b 	mul.w	fp, lr, fp
 801dbb6:	fb0e fe07 	mul.w	lr, lr, r7
 801dbba:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801dbbe:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801dbc2:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801dbc6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dbca:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801dbce:	44dc      	add	ip, fp
 801dbd0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dbd4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dbd8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801dbdc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dbe0:	ea4c 070e 	orr.w	r7, ip, lr
 801dbe4:	970e      	str	r7, [sp, #56]	; 0x38
 801dbe6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801dbea:	d01e      	beq.n	801dc2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801dbec:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801dbee:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801dbf2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801dbf6:	fb09 fe0e 	mul.w	lr, r9, lr
 801dbfa:	fb09 f907 	mul.w	r9, r9, r7
 801dbfe:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801dc02:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801dc06:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801dc0a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dc0e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801dc12:	44f4      	add	ip, lr
 801dc14:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801dc18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dc1c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801dc20:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dc24:	ea4c 0709 	orr.w	r7, ip, r9
 801dc28:	970b      	str	r7, [sp, #44]	; 0x2c
 801dc2a:	2dff      	cmp	r5, #255	; 0xff
 801dc2c:	d01c      	beq.n	801dc68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 801dc2e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801dc30:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801dc34:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801dc38:	fb05 fe0e 	mul.w	lr, r5, lr
 801dc3c:	437d      	muls	r5, r7
 801dc3e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801dc42:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801dc46:	f505 7780 	add.w	r7, r5, #256	; 0x100
 801dc4a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dc4e:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801dc52:	44f4      	add	ip, lr
 801dc54:	0a2d      	lsrs	r5, r5, #8
 801dc56:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dc5a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801dc5e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dc62:	ea4c 0505 	orr.w	r5, ip, r5
 801dc66:	950f      	str	r5, [sp, #60]	; 0x3c
 801dc68:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801dc6a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801dc6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dc72:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801dc76:	fb08 f505 	mul.w	r5, r8, r5
 801dc7a:	fb02 5507 	mla	r5, r2, r7, r5
 801dc7e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801dc80:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801dc84:	fb01 5507 	mla	r5, r1, r7, r5
 801dc88:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801dc8a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801dc8e:	fb0a 5507 	mla	r5, sl, r7, r5
 801dc92:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801dc94:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801dc98:	0a2d      	lsrs	r5, r5, #8
 801dc9a:	fb08 f807 	mul.w	r8, r8, r7
 801dc9e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801dca2:	fb02 8303 	mla	r3, r2, r3, r8
 801dca6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801dca8:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801dcac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dcae:	fb01 330c 	mla	r3, r1, ip, r3
 801dcb2:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801dcb6:	fb0a 3a01 	mla	sl, sl, r1, r3
 801dcba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dcbc:	9915      	ldr	r1, [sp, #84]	; 0x54
 801dcbe:	4343      	muls	r3, r0
 801dcc0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dcc4:	1c58      	adds	r0, r3, #1
 801dcc6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dcca:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801dcce:	ea45 050a 	orr.w	r5, r5, sl
 801dcd2:	7833      	ldrb	r3, [r6, #0]
 801dcd4:	b2ea      	uxtb	r2, r5
 801dcd6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801dcda:	fb12 f201 	smulbb	r2, r2, r1
 801dcde:	b2c0      	uxtb	r0, r0
 801dce0:	fb03 2300 	mla	r3, r3, r0, r2
 801dce4:	b29b      	uxth	r3, r3
 801dce6:	1c5a      	adds	r2, r3, #1
 801dce8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801dcec:	7872      	ldrb	r2, [r6, #1]
 801dcee:	fb12 f200 	smulbb	r2, r2, r0
 801dcf2:	121b      	asrs	r3, r3, #8
 801dcf4:	7033      	strb	r3, [r6, #0]
 801dcf6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801dcfa:	0c2d      	lsrs	r5, r5, #16
 801dcfc:	fb03 2301 	mla	r3, r3, r1, r2
 801dd00:	b29b      	uxth	r3, r3
 801dd02:	1c5a      	adds	r2, r3, #1
 801dd04:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801dd08:	121b      	asrs	r3, r3, #8
 801dd0a:	7073      	strb	r3, [r6, #1]
 801dd0c:	78b3      	ldrb	r3, [r6, #2]
 801dd0e:	fb13 f000 	smulbb	r0, r3, r0
 801dd12:	fb05 0501 	mla	r5, r5, r1, r0
 801dd16:	b2ad      	uxth	r5, r5
 801dd18:	1c6b      	adds	r3, r5, #1
 801dd1a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801dd1e:	122d      	asrs	r5, r5, #8
 801dd20:	70b5      	strb	r5, [r6, #2]
 801dd22:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801dd24:	3603      	adds	r6, #3
 801dd26:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801dd28:	4413      	add	r3, r2
 801dd2a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801dd2c:	932d      	str	r3, [sp, #180]	; 0xb4
 801dd2e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801dd30:	4413      	add	r3, r2
 801dd32:	932e      	str	r3, [sp, #184]	; 0xb8
 801dd34:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801dd36:	3b01      	subs	r3, #1
 801dd38:	9316      	str	r3, [sp, #88]	; 0x58
 801dd3a:	e6b7      	b.n	801daac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801dd3c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801dd3e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801dd40:	4413      	add	r3, r2
 801dd42:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801dd44:	932d      	str	r3, [sp, #180]	; 0xb4
 801dd46:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801dd48:	4413      	add	r3, r2
 801dd4a:	932e      	str	r3, [sp, #184]	; 0xb8
 801dd4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dd4e:	3b01      	subs	r3, #1
 801dd50:	930a      	str	r3, [sp, #40]	; 0x28
 801dd52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dd54:	3303      	adds	r3, #3
 801dd56:	930d      	str	r3, [sp, #52]	; 0x34
 801dd58:	e659      	b.n	801da0e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801dd5a:	f47f ae6b 	bne.w	801da34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801dd5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801dd60:	2b00      	cmp	r3, #0
 801dd62:	f340 81a6 	ble.w	801e0b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801dd66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dd6a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801dd6c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801dd70:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801dd74:	eef0 6a48 	vmov.f32	s13, s16
 801dd78:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801dd7c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801dd80:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dd84:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801dd88:	eef0 6a68 	vmov.f32	s13, s17
 801dd8c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dd90:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 801dd94:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801dd98:	ee69 7a27 	vmul.f32	s15, s18, s15
 801dd9c:	ee37 8a48 	vsub.f32	s16, s14, s16
 801dda0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801dda4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801dda8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ddac:	ee18 2a10 	vmov	r2, s16
 801ddb0:	eeb0 8a47 	vmov.f32	s16, s14
 801ddb4:	fb92 f3f3 	sdiv	r3, r2, r3
 801ddb8:	ee18 2a90 	vmov	r2, s17
 801ddbc:	932f      	str	r3, [sp, #188]	; 0xbc
 801ddbe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ddc0:	eef0 8a67 	vmov.f32	s17, s15
 801ddc4:	fb92 f3f3 	sdiv	r3, r2, r3
 801ddc8:	9330      	str	r3, [sp, #192]	; 0xc0
 801ddca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ddcc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ddce:	3b01      	subs	r3, #1
 801ddd0:	9314      	str	r3, [sp, #80]	; 0x50
 801ddd2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ddd4:	bf08      	it	eq
 801ddd6:	4613      	moveq	r3, r2
 801ddd8:	930a      	str	r3, [sp, #40]	; 0x28
 801ddda:	e611      	b.n	801da00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801dddc:	b161      	cbz	r1, 801ddf8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 801ddde:	5d2a      	ldrb	r2, [r5, r4]
 801dde0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801dde2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801dde6:	25ff      	movs	r5, #255	; 0xff
 801dde8:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801ddec:	920b      	str	r2, [sp, #44]	; 0x2c
 801ddee:	46ae      	mov	lr, r5
 801ddf0:	e69d      	b.n	801db2e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801ddf2:	25ff      	movs	r5, #255	; 0xff
 801ddf4:	46a9      	mov	r9, r5
 801ddf6:	e69a      	b.n	801db2e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801ddf8:	25ff      	movs	r5, #255	; 0xff
 801ddfa:	46a9      	mov	r9, r5
 801ddfc:	e7f7      	b.n	801ddee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 801ddfe:	1c57      	adds	r7, r2, #1
 801de00:	d18f      	bne.n	801dd22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801de02:	4294      	cmp	r4, r2
 801de04:	dd8d      	ble.n	801dd22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801de06:	1c5d      	adds	r5, r3, #1
 801de08:	db8b      	blt.n	801dd22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801de0a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801de0c:	429d      	cmp	r5, r3
 801de0e:	dd88      	ble.n	801dd22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801de10:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801de12:	9202      	str	r2, [sp, #8]
 801de14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801de16:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801de1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801de1c:	9819      	ldr	r0, [sp, #100]	; 0x64
 801de1e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801de22:	e9cd 4300 	strd	r4, r3, [sp]
 801de26:	4631      	mov	r1, r6
 801de28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de2a:	f7ff fc63 	bl	801d6f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801de2e:	e778      	b.n	801dd22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801de30:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801de32:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801de34:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801de38:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801de3a:	1412      	asrs	r2, r2, #16
 801de3c:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801de40:	141b      	asrs	r3, r3, #16
 801de42:	fb04 2303 	mla	r3, r4, r3, r2
 801de46:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801de48:	18d5      	adds	r5, r2, r3
 801de4a:	5cd3      	ldrb	r3, [r2, r3]
 801de4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801de4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801de52:	0e1e      	lsrs	r6, r3, #24
 801de54:	2900      	cmp	r1, #0
 801de56:	f000 811b 	beq.w	801e090 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 801de5a:	786a      	ldrb	r2, [r5, #1]
 801de5c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801de5e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801de62:	9210      	str	r2, [sp, #64]	; 0x40
 801de64:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801de68:	2800      	cmp	r0, #0
 801de6a:	f000 811c 	beq.w	801e0a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 801de6e:	192a      	adds	r2, r5, r4
 801de70:	5d2d      	ldrb	r5, [r5, r4]
 801de72:	7852      	ldrb	r2, [r2, #1]
 801de74:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801de78:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801de7c:	950c      	str	r5, [sp, #48]	; 0x30
 801de7e:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801de82:	0e15      	lsrs	r5, r2, #24
 801de84:	9211      	str	r2, [sp, #68]	; 0x44
 801de86:	b289      	uxth	r1, r1
 801de88:	b280      	uxth	r0, r0
 801de8a:	fb01 fa00 	mul.w	sl, r1, r0
 801de8e:	0109      	lsls	r1, r1, #4
 801de90:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801de94:	eba1 080a 	sub.w	r8, r1, sl
 801de98:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801de9c:	b280      	uxth	r0, r0
 801de9e:	fa1f f888 	uxth.w	r8, r8
 801dea2:	1a12      	subs	r2, r2, r0
 801dea4:	fb08 f10c 	mul.w	r1, r8, ip
 801dea8:	b292      	uxth	r2, r2
 801deaa:	fb02 1106 	mla	r1, r2, r6, r1
 801deae:	fb00 1109 	mla	r1, r0, r9, r1
 801deb2:	fb0a 1105 	mla	r1, sl, r5, r1
 801deb6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801deba:	2900      	cmp	r1, #0
 801debc:	f000 80da 	beq.w	801e074 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 801dec0:	2eff      	cmp	r6, #255	; 0xff
 801dec2:	d016      	beq.n	801def2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 801dec4:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801dec8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801decc:	4377      	muls	r7, r6
 801dece:	435e      	muls	r6, r3
 801ded0:	0a3b      	lsrs	r3, r7, #8
 801ded2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ded6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801deda:	443b      	add	r3, r7
 801dedc:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801dee0:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801dee4:	0a1b      	lsrs	r3, r3, #8
 801dee6:	0a3f      	lsrs	r7, r7, #8
 801dee8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801deec:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801def0:	433b      	orrs	r3, r7
 801def2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801def6:	d01d      	beq.n	801df34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 801def8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801defa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801defc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801df00:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801df04:	fb0c f606 	mul.w	r6, ip, r6
 801df08:	fb0c fc07 	mul.w	ip, ip, r7
 801df0c:	0a37      	lsrs	r7, r6, #8
 801df0e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801df12:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801df16:	4437      	add	r7, r6
 801df18:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801df1c:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801df20:	0a3f      	lsrs	r7, r7, #8
 801df22:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801df26:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801df2a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801df2e:	ea47 060c 	orr.w	r6, r7, ip
 801df32:	9610      	str	r6, [sp, #64]	; 0x40
 801df34:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801df38:	d01d      	beq.n	801df76 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 801df3a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801df3c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801df40:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801df44:	fb09 fc0c 	mul.w	ip, r9, ip
 801df48:	fb09 f906 	mul.w	r9, r9, r6
 801df4c:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801df50:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801df54:	f509 7680 	add.w	r6, r9, #256	; 0x100
 801df58:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801df5c:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801df60:	4467      	add	r7, ip
 801df62:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801df66:	0a3f      	lsrs	r7, r7, #8
 801df68:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801df6c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801df70:	ea47 0609 	orr.w	r6, r7, r9
 801df74:	960c      	str	r6, [sp, #48]	; 0x30
 801df76:	2dff      	cmp	r5, #255	; 0xff
 801df78:	d01a      	beq.n	801dfb0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 801df7a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801df7c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801df80:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801df84:	fb05 fc0c 	mul.w	ip, r5, ip
 801df88:	4375      	muls	r5, r6
 801df8a:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801df8e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801df92:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801df96:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801df9a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801df9e:	4467      	add	r7, ip
 801dfa0:	0a2d      	lsrs	r5, r5, #8
 801dfa2:	0a3f      	lsrs	r7, r7, #8
 801dfa4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801dfa8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801dfac:	433d      	orrs	r5, r7
 801dfae:	9511      	str	r5, [sp, #68]	; 0x44
 801dfb0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801dfb2:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801dfb6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dfba:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801dfbe:	fb08 f505 	mul.w	r5, r8, r5
 801dfc2:	fb02 5506 	mla	r5, r2, r6, r5
 801dfc6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801dfc8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801dfcc:	fb00 5506 	mla	r5, r0, r6, r5
 801dfd0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801dfd2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801dfd6:	fb0a 5506 	mla	r5, sl, r6, r5
 801dfda:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801dfdc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801dfe0:	0a2d      	lsrs	r5, r5, #8
 801dfe2:	fb08 f806 	mul.w	r8, r8, r6
 801dfe6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801dfea:	fb02 8303 	mla	r3, r2, r3, r8
 801dfee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dff0:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801dff4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dff6:	fb00 3307 	mla	r3, r0, r7, r3
 801dffa:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801dffe:	fb0a 3c0c 	mla	ip, sl, ip, r3
 801e002:	fb01 f30b 	mul.w	r3, r1, fp
 801e006:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e00a:	1c59      	adds	r1, r3, #1
 801e00c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e010:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e014:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801e018:	ea45 050c 	orr.w	r5, r5, ip
 801e01c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801e020:	b2ea      	uxtb	r2, r5
 801e022:	b2c9      	uxtb	r1, r1
 801e024:	fb12 f20b 	smulbb	r2, r2, fp
 801e028:	fb03 2301 	mla	r3, r3, r1, r2
 801e02c:	b29b      	uxth	r3, r3
 801e02e:	1c5a      	adds	r2, r3, #1
 801e030:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e034:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801e038:	fb12 f201 	smulbb	r2, r2, r1
 801e03c:	121b      	asrs	r3, r3, #8
 801e03e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801e042:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801e046:	0c2d      	lsrs	r5, r5, #16
 801e048:	fb03 230b 	mla	r3, r3, fp, r2
 801e04c:	b29b      	uxth	r3, r3
 801e04e:	1c5a      	adds	r2, r3, #1
 801e050:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e054:	121b      	asrs	r3, r3, #8
 801e056:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801e05a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801e05e:	fb13 f101 	smulbb	r1, r3, r1
 801e062:	fb05 150b 	mla	r5, r5, fp, r1
 801e066:	b2ad      	uxth	r5, r5
 801e068:	1c69      	adds	r1, r5, #1
 801e06a:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801e06e:	122d      	asrs	r5, r5, #8
 801e070:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801e074:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e076:	f10e 0e03 	add.w	lr, lr, #3
 801e07a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801e07c:	4413      	add	r3, r2
 801e07e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801e080:	932d      	str	r3, [sp, #180]	; 0xb4
 801e082:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e084:	4413      	add	r3, r2
 801e086:	932e      	str	r3, [sp, #184]	; 0xb8
 801e088:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e08a:	3b01      	subs	r3, #1
 801e08c:	9315      	str	r3, [sp, #84]	; 0x54
 801e08e:	e4ed      	b.n	801da6c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801e090:	b160      	cbz	r0, 801e0ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 801e092:	5d2a      	ldrb	r2, [r5, r4]
 801e094:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801e096:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801e09a:	25ff      	movs	r5, #255	; 0xff
 801e09c:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801e0a0:	920c      	str	r2, [sp, #48]	; 0x30
 801e0a2:	46ac      	mov	ip, r5
 801e0a4:	e6ef      	b.n	801de86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801e0a6:	25ff      	movs	r5, #255	; 0xff
 801e0a8:	46a9      	mov	r9, r5
 801e0aa:	e6ec      	b.n	801de86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801e0ac:	25ff      	movs	r5, #255	; 0xff
 801e0ae:	46a9      	mov	r9, r5
 801e0b0:	e7f7      	b.n	801e0a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 801e0b2:	b01b      	add	sp, #108	; 0x6c
 801e0b4:	ecbd 8b08 	vpop	{d8-d11}
 801e0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e0bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801e0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0c0:	b085      	sub	sp, #20
 801e0c2:	7888      	ldrb	r0, [r1, #2]
 801e0c4:	4692      	mov	sl, r2
 801e0c6:	4698      	mov	r8, r3
 801e0c8:	9000      	str	r0, [sp, #0]
 801e0ca:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801e0ce:	7848      	ldrb	r0, [r1, #1]
 801e0d0:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801e0d4:	9001      	str	r0, [sp, #4]
 801e0d6:	7808      	ldrb	r0, [r1, #0]
 801e0d8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801e0dc:	9002      	str	r0, [sp, #8]
 801e0de:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801e0e2:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801e0e6:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801e0ea:	fb04 560c 	mla	r6, r4, ip, r5
 801e0ee:	2c00      	cmp	r4, #0
 801e0f0:	eb02 0e06 	add.w	lr, r2, r6
 801e0f4:	9a00      	ldr	r2, [sp, #0]
 801e0f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801e0fa:	9a01      	ldr	r2, [sp, #4]
 801e0fc:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801e100:	db3e      	blt.n	801e180 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801e102:	45a1      	cmp	r9, r4
 801e104:	dd3c      	ble.n	801e180 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801e106:	2d00      	cmp	r5, #0
 801e108:	db38      	blt.n	801e17c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801e10a:	45ac      	cmp	ip, r5
 801e10c:	dd36      	ble.n	801e17c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801e10e:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801e112:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801e116:	1c6e      	adds	r6, r5, #1
 801e118:	d435      	bmi.n	801e186 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801e11a:	45b4      	cmp	ip, r6
 801e11c:	dd33      	ble.n	801e186 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801e11e:	b393      	cbz	r3, 801e186 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801e120:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801e124:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 801e128:	3401      	adds	r4, #1
 801e12a:	d430      	bmi.n	801e18e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801e12c:	45a1      	cmp	r9, r4
 801e12e:	dd2e      	ble.n	801e18e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801e130:	b36f      	cbz	r7, 801e18e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801e132:	2d00      	cmp	r5, #0
 801e134:	db29      	blt.n	801e18a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801e136:	45ac      	cmp	ip, r5
 801e138:	dd27      	ble.n	801e18a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801e13a:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801e13e:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801e142:	3501      	adds	r5, #1
 801e144:	d407      	bmi.n	801e156 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801e146:	45ac      	cmp	ip, r5
 801e148:	dd05      	ble.n	801e156 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801e14a:	b123      	cbz	r3, 801e156 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801e14c:	44f4      	add	ip, lr
 801e14e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801e152:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801e156:	2b0f      	cmp	r3, #15
 801e158:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801e15c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801e160:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801e164:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801e168:	d801      	bhi.n	801e16e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801e16a:	2f0f      	cmp	r7, #15
 801e16c:	d911      	bls.n	801e192 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 801e16e:	4b76      	ldr	r3, [pc, #472]	; (801e348 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 801e170:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801e174:	4a75      	ldr	r2, [pc, #468]	; (801e34c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801e176:	4876      	ldr	r0, [pc, #472]	; (801e350 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 801e178:	f004 ff94 	bl	80230a4 <__assert_func>
 801e17c:	4602      	mov	r2, r0
 801e17e:	e7ca      	b.n	801e116 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 801e180:	4606      	mov	r6, r0
 801e182:	4602      	mov	r2, r0
 801e184:	e7d0      	b.n	801e128 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801e186:	4606      	mov	r6, r0
 801e188:	e7ce      	b.n	801e128 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801e18a:	4604      	mov	r4, r0
 801e18c:	e7d9      	b.n	801e142 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 801e18e:	4604      	mov	r4, r0
 801e190:	e7e1      	b.n	801e156 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801e192:	b29b      	uxth	r3, r3
 801e194:	b2bf      	uxth	r7, r7
 801e196:	fb07 fe03 	mul.w	lr, r7, r3
 801e19a:	011b      	lsls	r3, r3, #4
 801e19c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801e1a0:	eba3 0c0e 	sub.w	ip, r3, lr
 801e1a4:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801e1a8:	b2bf      	uxth	r7, r7
 801e1aa:	fa1f fc8c 	uxth.w	ip, ip
 801e1ae:	1bed      	subs	r5, r5, r7
 801e1b0:	fb0c f30a 	mul.w	r3, ip, sl
 801e1b4:	b2ad      	uxth	r5, r5
 801e1b6:	fb05 330b 	mla	r3, r5, fp, r3
 801e1ba:	fb07 3309 	mla	r3, r7, r9, r3
 801e1be:	fb0e 3308 	mla	r3, lr, r8, r3
 801e1c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e1c6:	9303      	str	r3, [sp, #12]
 801e1c8:	2b00      	cmp	r3, #0
 801e1ca:	f000 80b9 	beq.w	801e340 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 801e1ce:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801e1d2:	d018      	beq.n	801e206 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 801e1d4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801e1d8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e1dc:	fb0b f303 	mul.w	r3, fp, r3
 801e1e0:	fb0b fb02 	mul.w	fp, fp, r2
 801e1e4:	0a1a      	lsrs	r2, r3, #8
 801e1e6:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801e1ea:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e1ee:	441a      	add	r2, r3
 801e1f0:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801e1f4:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801e1f8:	0a12      	lsrs	r2, r2, #8
 801e1fa:	0a1b      	lsrs	r3, r3, #8
 801e1fc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e200:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e204:	431a      	orrs	r2, r3
 801e206:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e20a:	d019      	beq.n	801e240 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 801e20c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801e210:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e214:	fb0a fb0b 	mul.w	fp, sl, fp
 801e218:	fb0a fa06 	mul.w	sl, sl, r6
 801e21c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801e220:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e224:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801e228:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e22c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801e230:	445e      	add	r6, fp
 801e232:	0a1b      	lsrs	r3, r3, #8
 801e234:	0a36      	lsrs	r6, r6, #8
 801e236:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e23a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e23e:	431e      	orrs	r6, r3
 801e240:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e244:	d019      	beq.n	801e27a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 801e246:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801e24a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801e24e:	fb09 fa0a 	mul.w	sl, r9, sl
 801e252:	fb09 f904 	mul.w	r9, r9, r4
 801e256:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801e25a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e25e:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801e262:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801e266:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801e26a:	4454      	add	r4, sl
 801e26c:	0a1b      	lsrs	r3, r3, #8
 801e26e:	0a24      	lsrs	r4, r4, #8
 801e270:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e274:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801e278:	431c      	orrs	r4, r3
 801e27a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e27e:	d019      	beq.n	801e2b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 801e280:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801e284:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e288:	fb08 f909 	mul.w	r9, r8, r9
 801e28c:	fb08 f800 	mul.w	r8, r8, r0
 801e290:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801e294:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801e298:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801e29c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e2a0:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801e2a4:	4448      	add	r0, r9
 801e2a6:	0a1b      	lsrs	r3, r3, #8
 801e2a8:	0a00      	lsrs	r0, r0, #8
 801e2aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e2ae:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e2b2:	4318      	orrs	r0, r3
 801e2b4:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801e2b8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801e2bc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e2c0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e2c4:	fb0c f808 	mul.w	r8, ip, r8
 801e2c8:	fb0c f606 	mul.w	r6, ip, r6
 801e2cc:	fb05 8803 	mla	r8, r5, r3, r8
 801e2d0:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801e2d4:	fb05 6202 	mla	r2, r5, r2, r6
 801e2d8:	fb07 8803 	mla	r8, r7, r3, r8
 801e2dc:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801e2e0:	fb0e 8303 	mla	r3, lr, r3, r8
 801e2e4:	0a1b      	lsrs	r3, r3, #8
 801e2e6:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801e2ea:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 801e2ee:	9c02      	ldr	r4, [sp, #8]
 801e2f0:	fb07 2703 	mla	r7, r7, r3, r2
 801e2f4:	9a03      	ldr	r2, [sp, #12]
 801e2f6:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801e2fa:	43d2      	mvns	r2, r2
 801e2fc:	fb0e 7303 	mla	r3, lr, r3, r7
 801e300:	b2d2      	uxtb	r2, r2
 801e302:	0a1b      	lsrs	r3, r3, #8
 801e304:	4354      	muls	r4, r2
 801e306:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e30a:	1c60      	adds	r0, r4, #1
 801e30c:	ea48 0303 	orr.w	r3, r8, r3
 801e310:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801e314:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e318:	7008      	strb	r0, [r1, #0]
 801e31a:	9801      	ldr	r0, [sp, #4]
 801e31c:	4350      	muls	r0, r2
 801e31e:	1c44      	adds	r4, r0, #1
 801e320:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 801e324:	0a18      	lsrs	r0, r3, #8
 801e326:	0c1b      	lsrs	r3, r3, #16
 801e328:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801e32c:	7048      	strb	r0, [r1, #1]
 801e32e:	9800      	ldr	r0, [sp, #0]
 801e330:	4350      	muls	r0, r2
 801e332:	4602      	mov	r2, r0
 801e334:	3001      	adds	r0, #1
 801e336:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801e33a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e33e:	708b      	strb	r3, [r1, #2]
 801e340:	b005      	add	sp, #20
 801e342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e346:	bf00      	nop
 801e348:	080292e4 	.word	0x080292e4
 801e34c:	080297da 	.word	0x080297da
 801e350:	080293ad 	.word	0x080293ad

0801e354 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e358:	ed2d 8b08 	vpush	{d8-d11}
 801e35c:	b097      	sub	sp, #92	; 0x5c
 801e35e:	eeb0 aa40 	vmov.f32	s20, s0
 801e362:	eef0 9a60 	vmov.f32	s19, s1
 801e366:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 801e368:	eeb0 9a41 	vmov.f32	s18, s2
 801e36c:	9308      	str	r3, [sp, #32]
 801e36e:	eeb0 8a62 	vmov.f32	s16, s5
 801e372:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801e376:	eef0 8a43 	vmov.f32	s17, s6
 801e37a:	9015      	str	r0, [sp, #84]	; 0x54
 801e37c:	eef0 ba44 	vmov.f32	s23, s8
 801e380:	6868      	ldr	r0, [r5, #4]
 801e382:	eeb0 ba64 	vmov.f32	s22, s9
 801e386:	9112      	str	r1, [sp, #72]	; 0x48
 801e388:	eef0 aa45 	vmov.f32	s21, s10
 801e38c:	9310      	str	r3, [sp, #64]	; 0x40
 801e38e:	9214      	str	r2, [sp, #80]	; 0x50
 801e390:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801e392:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 801e396:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801e39a:	fb00 1303 	mla	r3, r0, r3, r1
 801e39e:	6829      	ldr	r1, [r5, #0]
 801e3a0:	6855      	ldr	r5, [r2, #4]
 801e3a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e3a6:	3504      	adds	r5, #4
 801e3a8:	18cb      	adds	r3, r1, r3
 801e3aa:	930b      	str	r3, [sp, #44]	; 0x2c
 801e3ac:	6813      	ldr	r3, [r2, #0]
 801e3ae:	9311      	str	r3, [sp, #68]	; 0x44
 801e3b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e3b2:	2b00      	cmp	r3, #0
 801e3b4:	dc03      	bgt.n	801e3be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801e3b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e3b8:	2b00      	cmp	r3, #0
 801e3ba:	f340 8333 	ble.w	801ea24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 801e3be:	9b08      	ldr	r3, [sp, #32]
 801e3c0:	2b00      	cmp	r3, #0
 801e3c2:	f340 8190 	ble.w	801e6e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801e3c6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e3c8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e3ca:	1412      	asrs	r2, r2, #16
 801e3cc:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e3d0:	d42f      	bmi.n	801e432 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801e3d2:	1c51      	adds	r1, r2, #1
 801e3d4:	428c      	cmp	r4, r1
 801e3d6:	dd2f      	ble.n	801e438 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801e3d8:	2b00      	cmp	r3, #0
 801e3da:	db2d      	blt.n	801e438 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801e3dc:	1c59      	adds	r1, r3, #1
 801e3de:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e3e0:	4288      	cmp	r0, r1
 801e3e2:	dd29      	ble.n	801e438 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801e3e4:	9b08      	ldr	r3, [sp, #32]
 801e3e6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801e3e8:	3b01      	subs	r3, #1
 801e3ea:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801e3ec:	fb02 1203 	mla	r2, r2, r3, r1
 801e3f0:	1412      	asrs	r2, r2, #16
 801e3f2:	d42b      	bmi.n	801e44c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e3f4:	3201      	adds	r2, #1
 801e3f6:	4294      	cmp	r4, r2
 801e3f8:	dd28      	ble.n	801e44c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e3fa:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801e3fc:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801e3fe:	fb02 1303 	mla	r3, r2, r3, r1
 801e402:	141b      	asrs	r3, r3, #16
 801e404:	d422      	bmi.n	801e44c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e406:	3301      	adds	r3, #1
 801e408:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e40a:	429a      	cmp	r2, r3
 801e40c:	dd1e      	ble.n	801e44c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e40e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e410:	f103 0803 	add.w	r8, r3, #3
 801e414:	9b08      	ldr	r3, [sp, #32]
 801e416:	9307      	str	r3, [sp, #28]
 801e418:	9b07      	ldr	r3, [sp, #28]
 801e41a:	2b00      	cmp	r3, #0
 801e41c:	f300 81ca 	bgt.w	801e7b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 801e420:	9b08      	ldr	r3, [sp, #32]
 801e422:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e424:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e428:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e42c:	441a      	add	r2, r3
 801e42e:	920b      	str	r2, [sp, #44]	; 0x2c
 801e430:	e15b      	b.n	801e6ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801e432:	1c51      	adds	r1, r2, #1
 801e434:	f040 8148 	bne.w	801e6c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801e438:	42a2      	cmp	r2, r4
 801e43a:	f280 8145 	bge.w	801e6c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801e43e:	1c5a      	adds	r2, r3, #1
 801e440:	f2c0 8142 	blt.w	801e6c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801e444:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e446:	4293      	cmp	r3, r2
 801e448:	f280 813e 	bge.w	801e6c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801e44c:	9b08      	ldr	r3, [sp, #32]
 801e44e:	9313      	str	r3, [sp, #76]	; 0x4c
 801e450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e452:	9307      	str	r3, [sp, #28]
 801e454:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e456:	2b00      	cmp	r3, #0
 801e458:	dde2      	ble.n	801e420 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801e45a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e45c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e45e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e462:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e464:	141b      	asrs	r3, r3, #16
 801e466:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801e46a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e46c:	1412      	asrs	r2, r2, #16
 801e46e:	f100 818b 	bmi.w	801e788 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 801e472:	1c56      	adds	r6, r2, #1
 801e474:	42b4      	cmp	r4, r6
 801e476:	f340 8189 	ble.w	801e78c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801e47a:	2b00      	cmp	r3, #0
 801e47c:	f2c0 8186 	blt.w	801e78c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801e480:	1c5e      	adds	r6, r3, #1
 801e482:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801e484:	42b7      	cmp	r7, r6
 801e486:	f340 8181 	ble.w	801e78c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801e48a:	fb03 2304 	mla	r3, r3, r4, r2
 801e48e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e490:	18d6      	adds	r6, r2, r3
 801e492:	5cd3      	ldrb	r3, [r2, r3]
 801e494:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801e498:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e49c:	2900      	cmp	r1, #0
 801e49e:	f000 8163 	beq.w	801e768 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 801e4a2:	7872      	ldrb	r2, [r6, #1]
 801e4a4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801e4a8:	920c      	str	r2, [sp, #48]	; 0x30
 801e4aa:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801e4ae:	2800      	cmp	r0, #0
 801e4b0:	f000 8164 	beq.w	801e77c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 801e4b4:	1932      	adds	r2, r6, r4
 801e4b6:	5d36      	ldrb	r6, [r6, r4]
 801e4b8:	7852      	ldrb	r2, [r2, #1]
 801e4ba:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801e4be:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801e4c2:	9609      	str	r6, [sp, #36]	; 0x24
 801e4c4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801e4c8:	0e16      	lsrs	r6, r2, #24
 801e4ca:	920d      	str	r2, [sp, #52]	; 0x34
 801e4cc:	b289      	uxth	r1, r1
 801e4ce:	b280      	uxth	r0, r0
 801e4d0:	fb01 fb00 	mul.w	fp, r1, r0
 801e4d4:	0109      	lsls	r1, r1, #4
 801e4d6:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801e4da:	eba1 090b 	sub.w	r9, r1, fp
 801e4de:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801e4e2:	b280      	uxth	r0, r0
 801e4e4:	fa1f f989 	uxth.w	r9, r9
 801e4e8:	1a12      	subs	r2, r2, r0
 801e4ea:	fb09 f108 	mul.w	r1, r9, r8
 801e4ee:	b292      	uxth	r2, r2
 801e4f0:	fb02 110c 	mla	r1, r2, ip, r1
 801e4f4:	fb00 110a 	mla	r1, r0, sl, r1
 801e4f8:	fb0b 1106 	mla	r1, fp, r6, r1
 801e4fc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e500:	2900      	cmp	r1, #0
 801e502:	f000 80d2 	beq.w	801e6aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801e506:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e50a:	d01b      	beq.n	801e544 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 801e50c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801e510:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e514:	fb0c fe0e 	mul.w	lr, ip, lr
 801e518:	fb0c fc03 	mul.w	ip, ip, r3
 801e51c:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801e520:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801e524:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e528:	4473      	add	r3, lr
 801e52a:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801e52e:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801e532:	0a1b      	lsrs	r3, r3, #8
 801e534:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e538:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e53c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801e540:	ea43 030e 	orr.w	r3, r3, lr
 801e544:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e548:	d01e      	beq.n	801e588 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 801e54a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e54c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801e550:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 801e554:	fb08 fc0c 	mul.w	ip, r8, ip
 801e558:	fb08 f80e 	mul.w	r8, r8, lr
 801e55c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801e560:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e564:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e568:	44e6      	add	lr, ip
 801e56a:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801e56e:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801e572:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e576:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801e57a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e57e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801e582:	ea4e 0708 	orr.w	r7, lr, r8
 801e586:	970c      	str	r7, [sp, #48]	; 0x30
 801e588:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e58c:	d01e      	beq.n	801e5cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801e58e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e590:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801e594:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801e598:	fb0a f808 	mul.w	r8, sl, r8
 801e59c:	fb0a fa0c 	mul.w	sl, sl, ip
 801e5a0:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801e5a4:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801e5a8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e5ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e5b0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e5b4:	44c6      	add	lr, r8
 801e5b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e5ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e5be:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e5c2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e5c6:	ea4e 070a 	orr.w	r7, lr, sl
 801e5ca:	9709      	str	r7, [sp, #36]	; 0x24
 801e5cc:	2eff      	cmp	r6, #255	; 0xff
 801e5ce:	d01d      	beq.n	801e60c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 801e5d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801e5d2:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801e5d6:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801e5da:	fb06 f808 	mul.w	r8, r6, r8
 801e5de:	fb06 f60c 	mul.w	r6, r6, ip
 801e5e2:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801e5e6:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801e5ea:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801e5ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e5f2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801e5f6:	44c6      	add	lr, r8
 801e5f8:	0a36      	lsrs	r6, r6, #8
 801e5fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e5fe:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e602:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e606:	ea4e 0606 	orr.w	r6, lr, r6
 801e60a:	960d      	str	r6, [sp, #52]	; 0x34
 801e60c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e60e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801e612:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801e614:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e618:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e61c:	43c9      	mvns	r1, r1
 801e61e:	fb09 f606 	mul.w	r6, r9, r6
 801e622:	b2c9      	uxtb	r1, r1
 801e624:	fb02 660c 	mla	r6, r2, ip, r6
 801e628:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801e62c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801e62e:	fb00 660c 	mla	r6, r0, ip, r6
 801e632:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801e636:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e638:	fb0b 660c 	mla	r6, fp, ip, r6
 801e63c:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801e640:	fb09 f90c 	mul.w	r9, r9, ip
 801e644:	0a36      	lsrs	r6, r6, #8
 801e646:	fb02 9303 	mla	r3, r2, r3, r9
 801e64a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e64c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e650:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801e654:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e656:	fb00 330e 	mla	r3, r0, lr, r3
 801e65a:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801e65e:	fb0b 3b00 	mla	fp, fp, r0, r3
 801e662:	9b07      	ldr	r3, [sp, #28]
 801e664:	781b      	ldrb	r3, [r3, #0]
 801e666:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801e66a:	fb03 f201 	mul.w	r2, r3, r1
 801e66e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801e672:	1c53      	adds	r3, r2, #1
 801e674:	ea46 060b 	orr.w	r6, r6, fp
 801e678:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e67c:	9a07      	ldr	r2, [sp, #28]
 801e67e:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801e682:	7013      	strb	r3, [r2, #0]
 801e684:	7853      	ldrb	r3, [r2, #1]
 801e686:	434b      	muls	r3, r1
 801e688:	1c5a      	adds	r2, r3, #1
 801e68a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801e68e:	0a33      	lsrs	r3, r6, #8
 801e690:	0c36      	lsrs	r6, r6, #16
 801e692:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e696:	9a07      	ldr	r2, [sp, #28]
 801e698:	7053      	strb	r3, [r2, #1]
 801e69a:	7893      	ldrb	r3, [r2, #2]
 801e69c:	4359      	muls	r1, r3
 801e69e:	1c4b      	adds	r3, r1, #1
 801e6a0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801e6a4:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 801e6a8:	7096      	strb	r6, [r2, #2]
 801e6aa:	9b07      	ldr	r3, [sp, #28]
 801e6ac:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801e6ae:	3303      	adds	r3, #3
 801e6b0:	9307      	str	r3, [sp, #28]
 801e6b2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e6b4:	4413      	add	r3, r2
 801e6b6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801e6b8:	9329      	str	r3, [sp, #164]	; 0xa4
 801e6ba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e6bc:	4413      	add	r3, r2
 801e6be:	932a      	str	r3, [sp, #168]	; 0xa8
 801e6c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e6c2:	3b01      	subs	r3, #1
 801e6c4:	9313      	str	r3, [sp, #76]	; 0x4c
 801e6c6:	e6c5      	b.n	801e454 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801e6c8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e6ca:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801e6cc:	4413      	add	r3, r2
 801e6ce:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801e6d0:	9329      	str	r3, [sp, #164]	; 0xa4
 801e6d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e6d4:	4413      	add	r3, r2
 801e6d6:	932a      	str	r3, [sp, #168]	; 0xa8
 801e6d8:	9b08      	ldr	r3, [sp, #32]
 801e6da:	3b01      	subs	r3, #1
 801e6dc:	9308      	str	r3, [sp, #32]
 801e6de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e6e0:	3303      	adds	r3, #3
 801e6e2:	930b      	str	r3, [sp, #44]	; 0x2c
 801e6e4:	e66b      	b.n	801e3be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801e6e6:	f47f ae7d 	bne.w	801e3e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801e6ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e6ec:	2b00      	cmp	r3, #0
 801e6ee:	f340 8199 	ble.w	801ea24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 801e6f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e6f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e6f8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801e6fc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801e700:	eef0 6a48 	vmov.f32	s13, s16
 801e704:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801e708:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801e70c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e710:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801e714:	eef0 6a68 	vmov.f32	s13, s17
 801e718:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e71c:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 801e720:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e724:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e728:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e72c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e730:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e734:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e738:	ee18 2a10 	vmov	r2, s16
 801e73c:	eeb0 8a47 	vmov.f32	s16, s14
 801e740:	fb92 f3f3 	sdiv	r3, r2, r3
 801e744:	ee18 2a90 	vmov	r2, s17
 801e748:	932b      	str	r3, [sp, #172]	; 0xac
 801e74a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e74c:	eef0 8a67 	vmov.f32	s17, s15
 801e750:	fb92 f3f3 	sdiv	r3, r2, r3
 801e754:	932c      	str	r3, [sp, #176]	; 0xb0
 801e756:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e758:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e75a:	3b01      	subs	r3, #1
 801e75c:	9312      	str	r3, [sp, #72]	; 0x48
 801e75e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e760:	bf08      	it	eq
 801e762:	4613      	moveq	r3, r2
 801e764:	9308      	str	r3, [sp, #32]
 801e766:	e623      	b.n	801e3b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801e768:	b158      	cbz	r0, 801e782 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 801e76a:	5d32      	ldrb	r2, [r6, r4]
 801e76c:	26ff      	movs	r6, #255	; 0xff
 801e76e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801e772:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 801e776:	9209      	str	r2, [sp, #36]	; 0x24
 801e778:	46b0      	mov	r8, r6
 801e77a:	e6a7      	b.n	801e4cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 801e77c:	26ff      	movs	r6, #255	; 0xff
 801e77e:	46b2      	mov	sl, r6
 801e780:	e6a4      	b.n	801e4cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 801e782:	26ff      	movs	r6, #255	; 0xff
 801e784:	46b2      	mov	sl, r6
 801e786:	e7f7      	b.n	801e778 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 801e788:	1c57      	adds	r7, r2, #1
 801e78a:	d18e      	bne.n	801e6aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801e78c:	4294      	cmp	r4, r2
 801e78e:	dd8c      	ble.n	801e6aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801e790:	1c5e      	adds	r6, r3, #1
 801e792:	db8a      	blt.n	801e6aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801e794:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801e796:	429e      	cmp	r6, r3
 801e798:	dd87      	ble.n	801e6aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801e79a:	e9cd 1004 	strd	r1, r0, [sp, #16]
 801e79e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e7a2:	e9cd 4600 	strd	r4, r6, [sp]
 801e7a6:	462b      	mov	r3, r5
 801e7a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e7aa:	9907      	ldr	r1, [sp, #28]
 801e7ac:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e7ae:	f7ff fc85 	bl	801e0bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801e7b2:	e77a      	b.n	801e6aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801e7b4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e7b6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801e7b8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e7bc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e7be:	1409      	asrs	r1, r1, #16
 801e7c0:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801e7c4:	141b      	asrs	r3, r3, #16
 801e7c6:	fb04 1303 	mla	r3, r4, r3, r1
 801e7ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e7cc:	18ce      	adds	r6, r1, r3
 801e7ce:	5ccb      	ldrb	r3, [r1, r3]
 801e7d0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801e7d4:	0e1f      	lsrs	r7, r3, #24
 801e7d6:	2a00      	cmp	r2, #0
 801e7d8:	f000 8114 	beq.w	801ea04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 801e7dc:	7871      	ldrb	r1, [r6, #1]
 801e7de:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801e7e2:	910e      	str	r1, [sp, #56]	; 0x38
 801e7e4:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801e7e8:	2800      	cmp	r0, #0
 801e7ea:	f000 8115 	beq.w	801ea18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 801e7ee:	1931      	adds	r1, r6, r4
 801e7f0:	5d36      	ldrb	r6, [r6, r4]
 801e7f2:	7849      	ldrb	r1, [r1, #1]
 801e7f4:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801e7f8:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801e7fc:	960a      	str	r6, [sp, #40]	; 0x28
 801e7fe:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801e802:	0e0e      	lsrs	r6, r1, #24
 801e804:	910f      	str	r1, [sp, #60]	; 0x3c
 801e806:	b292      	uxth	r2, r2
 801e808:	b280      	uxth	r0, r0
 801e80a:	fb02 fb00 	mul.w	fp, r2, r0
 801e80e:	0112      	lsls	r2, r2, #4
 801e810:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801e814:	eba2 090b 	sub.w	r9, r2, fp
 801e818:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801e81c:	b280      	uxth	r0, r0
 801e81e:	fa1f f989 	uxth.w	r9, r9
 801e822:	1a09      	subs	r1, r1, r0
 801e824:	fb09 f20e 	mul.w	r2, r9, lr
 801e828:	b289      	uxth	r1, r1
 801e82a:	fb01 2207 	mla	r2, r1, r7, r2
 801e82e:	fb00 220a 	mla	r2, r0, sl, r2
 801e832:	fb0b 2206 	mla	r2, fp, r6, r2
 801e836:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801e83a:	9213      	str	r2, [sp, #76]	; 0x4c
 801e83c:	2a00      	cmp	r2, #0
 801e83e:	f000 80d4 	beq.w	801e9ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 801e842:	2fff      	cmp	r7, #255	; 0xff
 801e844:	d01a      	beq.n	801e87c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 801e846:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801e84a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e84e:	fb07 fc0c 	mul.w	ip, r7, ip
 801e852:	435f      	muls	r7, r3
 801e854:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801e858:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e85c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e860:	4463      	add	r3, ip
 801e862:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 801e866:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 801e86a:	0a1b      	lsrs	r3, r3, #8
 801e86c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e870:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e874:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e878:	ea43 030c 	orr.w	r3, r3, ip
 801e87c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801e880:	d01f      	beq.n	801e8c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 801e882:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801e884:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e886:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e88a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801e88e:	fb0e f707 	mul.w	r7, lr, r7
 801e892:	fb0e fe0c 	mul.w	lr, lr, ip
 801e896:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e89a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e89e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e8a2:	44bc      	add	ip, r7
 801e8a4:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801e8a8:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801e8ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e8b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e8b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e8b8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801e8bc:	ea4c 020e 	orr.w	r2, ip, lr
 801e8c0:	920e      	str	r2, [sp, #56]	; 0x38
 801e8c2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e8c6:	d01e      	beq.n	801e906 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 801e8c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e8ca:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801e8ce:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801e8d2:	fb0a fe0e 	mul.w	lr, sl, lr
 801e8d6:	fb0a fa07 	mul.w	sl, sl, r7
 801e8da:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801e8de:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801e8e2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e8e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e8ea:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e8ee:	44f4      	add	ip, lr
 801e8f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e8f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e8f8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e8fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e900:	ea4c 020a 	orr.w	r2, ip, sl
 801e904:	920a      	str	r2, [sp, #40]	; 0x28
 801e906:	2eff      	cmp	r6, #255	; 0xff
 801e908:	d01c      	beq.n	801e944 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 801e90a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e90c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801e910:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801e914:	fb06 fe0e 	mul.w	lr, r6, lr
 801e918:	437e      	muls	r6, r7
 801e91a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801e91e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801e922:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801e926:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e92a:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801e92e:	44f4      	add	ip, lr
 801e930:	0a36      	lsrs	r6, r6, #8
 801e932:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e936:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e93a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e93e:	ea4c 0206 	orr.w	r2, ip, r6
 801e942:	920f      	str	r2, [sp, #60]	; 0x3c
 801e944:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e946:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801e94a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e94e:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801e952:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e954:	fb09 f606 	mul.w	r6, r9, r6
 801e958:	fb01 6607 	mla	r6, r1, r7, r6
 801e95c:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801e960:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e962:	fb00 6607 	mla	r6, r0, r7, r6
 801e966:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801e96a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e96c:	fb0b 6607 	mla	r6, fp, r7, r6
 801e970:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801e974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e976:	fb09 f907 	mul.w	r9, r9, r7
 801e97a:	0a36      	lsrs	r6, r6, #8
 801e97c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801e980:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e982:	fb01 9303 	mla	r3, r1, r3, r9
 801e986:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e98a:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801e98e:	fb00 330c 	mla	r3, r0, ip, r3
 801e992:	fb0b 3e0e 	mla	lr, fp, lr, r3
 801e996:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e998:	43da      	mvns	r2, r3
 801e99a:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 801e99e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e9a2:	b2d2      	uxtb	r2, r2
 801e9a4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801e9a8:	fb03 f102 	mul.w	r1, r3, r2
 801e9ac:	ea46 060e 	orr.w	r6, r6, lr
 801e9b0:	1c4b      	adds	r3, r1, #1
 801e9b2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e9b6:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801e9ba:	f808 3c03 	strb.w	r3, [r8, #-3]
 801e9be:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 801e9c2:	4353      	muls	r3, r2
 801e9c4:	1c59      	adds	r1, r3, #1
 801e9c6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e9ca:	0a33      	lsrs	r3, r6, #8
 801e9cc:	0c36      	lsrs	r6, r6, #16
 801e9ce:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e9d2:	f808 3c02 	strb.w	r3, [r8, #-2]
 801e9d6:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801e9da:	435a      	muls	r2, r3
 801e9dc:	1c53      	adds	r3, r2, #1
 801e9de:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801e9e2:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801e9e6:	f808 6c01 	strb.w	r6, [r8, #-1]
 801e9ea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e9ec:	f108 0803 	add.w	r8, r8, #3
 801e9f0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801e9f2:	4413      	add	r3, r2
 801e9f4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801e9f6:	9329      	str	r3, [sp, #164]	; 0xa4
 801e9f8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e9fa:	4413      	add	r3, r2
 801e9fc:	932a      	str	r3, [sp, #168]	; 0xa8
 801e9fe:	9b07      	ldr	r3, [sp, #28]
 801ea00:	3b01      	subs	r3, #1
 801ea02:	e508      	b.n	801e416 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 801ea04:	b158      	cbz	r0, 801ea1e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 801ea06:	5d31      	ldrb	r1, [r6, r4]
 801ea08:	26ff      	movs	r6, #255	; 0xff
 801ea0a:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801ea0e:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801ea12:	910a      	str	r1, [sp, #40]	; 0x28
 801ea14:	46b6      	mov	lr, r6
 801ea16:	e6f6      	b.n	801e806 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 801ea18:	26ff      	movs	r6, #255	; 0xff
 801ea1a:	46b2      	mov	sl, r6
 801ea1c:	e6f3      	b.n	801e806 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 801ea1e:	26ff      	movs	r6, #255	; 0xff
 801ea20:	46b2      	mov	sl, r6
 801ea22:	e7f7      	b.n	801ea14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 801ea24:	b017      	add	sp, #92	; 0x5c
 801ea26:	ecbd 8b08 	vpop	{d8-d11}
 801ea2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ea30 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801ea30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea34:	b08d      	sub	sp, #52	; 0x34
 801ea36:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 801ea3a:	9103      	str	r1, [sp, #12]
 801ea3c:	fb07 5803 	mla	r8, r7, r3, r5
 801ea40:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801ea44:	9803      	ldr	r0, [sp, #12]
 801ea46:	2f00      	cmp	r7, #0
 801ea48:	910b      	str	r1, [sp, #44]	; 0x2c
 801ea4a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ea4e:	9903      	ldr	r1, [sp, #12]
 801ea50:	9c03      	ldr	r4, [sp, #12]
 801ea52:	eb02 0608 	add.w	r6, r2, r8
 801ea56:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801ea5a:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 801ea5e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801ea62:	7809      	ldrb	r1, [r1, #0]
 801ea64:	7840      	ldrb	r0, [r0, #1]
 801ea66:	78a4      	ldrb	r4, [r4, #2]
 801ea68:	db51      	blt.n	801eb0e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801ea6a:	45be      	cmp	lr, r7
 801ea6c:	dd4f      	ble.n	801eb0e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801ea6e:	2d00      	cmp	r5, #0
 801ea70:	db49      	blt.n	801eb06 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801ea72:	42ab      	cmp	r3, r5
 801ea74:	dd47      	ble.n	801eb06 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801ea76:	f812 2008 	ldrb.w	r2, [r2, r8]
 801ea7a:	9204      	str	r2, [sp, #16]
 801ea7c:	7872      	ldrb	r2, [r6, #1]
 801ea7e:	9205      	str	r2, [sp, #20]
 801ea80:	78b2      	ldrb	r2, [r6, #2]
 801ea82:	9206      	str	r2, [sp, #24]
 801ea84:	1c6a      	adds	r2, r5, #1
 801ea86:	d449      	bmi.n	801eb1c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801ea88:	4293      	cmp	r3, r2
 801ea8a:	dd47      	ble.n	801eb1c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801ea8c:	f1bc 0f00 	cmp.w	ip, #0
 801ea90:	d044      	beq.n	801eb1c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801ea92:	7972      	ldrb	r2, [r6, #5]
 801ea94:	f896 b003 	ldrb.w	fp, [r6, #3]
 801ea98:	f896 a004 	ldrb.w	sl, [r6, #4]
 801ea9c:	9201      	str	r2, [sp, #4]
 801ea9e:	3701      	adds	r7, #1
 801eaa0:	d444      	bmi.n	801eb2c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801eaa2:	45be      	cmp	lr, r7
 801eaa4:	dd42      	ble.n	801eb2c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801eaa6:	f1b9 0f00 	cmp.w	r9, #0
 801eaaa:	f000 80c1 	beq.w	801ec30 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 801eaae:	2d00      	cmp	r5, #0
 801eab0:	db38      	blt.n	801eb24 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801eab2:	42ab      	cmp	r3, r5
 801eab4:	dd36      	ble.n	801eb24 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801eab6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801eaba:	f816 8002 	ldrb.w	r8, [r6, r2]
 801eabe:	2203      	movs	r2, #3
 801eac0:	fb03 6702 	mla	r7, r3, r2, r6
 801eac4:	fb03 6202 	mla	r2, r3, r2, r6
 801eac8:	787f      	ldrb	r7, [r7, #1]
 801eaca:	f892 e002 	ldrb.w	lr, [r2, #2]
 801eace:	9702      	str	r7, [sp, #8]
 801ead0:	3501      	adds	r5, #1
 801ead2:	d432      	bmi.n	801eb3a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 801ead4:	42ab      	cmp	r3, r5
 801ead6:	dd30      	ble.n	801eb3a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 801ead8:	f1bc 0f00 	cmp.w	ip, #0
 801eadc:	d031      	beq.n	801eb42 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 801eade:	2703      	movs	r7, #3
 801eae0:	fb13 7207 	smlabb	r2, r3, r7, r7
 801eae4:	5cb5      	ldrb	r5, [r6, r2]
 801eae6:	fb03 6207 	mla	r2, r3, r7, r6
 801eaea:	fb03 6307 	mla	r3, r3, r7, r6
 801eaee:	7912      	ldrb	r2, [r2, #4]
 801eaf0:	795e      	ldrb	r6, [r3, #5]
 801eaf2:	f1bc 0f0f 	cmp.w	ip, #15
 801eaf6:	d927      	bls.n	801eb48 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 801eaf8:	4b53      	ldr	r3, [pc, #332]	; (801ec48 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 801eafa:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801eafe:	4a53      	ldr	r2, [pc, #332]	; (801ec4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 801eb00:	4853      	ldr	r0, [pc, #332]	; (801ec50 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 801eb02:	f004 facf 	bl	80230a4 <__assert_func>
 801eb06:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801eb0a:	9104      	str	r1, [sp, #16]
 801eb0c:	e7ba      	b.n	801ea84 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 801eb0e:	9401      	str	r4, [sp, #4]
 801eb10:	4682      	mov	sl, r0
 801eb12:	468b      	mov	fp, r1
 801eb14:	9104      	str	r1, [sp, #16]
 801eb16:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801eb1a:	e7c0      	b.n	801ea9e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 801eb1c:	9401      	str	r4, [sp, #4]
 801eb1e:	4682      	mov	sl, r0
 801eb20:	468b      	mov	fp, r1
 801eb22:	e7bc      	b.n	801ea9e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 801eb24:	46a6      	mov	lr, r4
 801eb26:	9002      	str	r0, [sp, #8]
 801eb28:	4688      	mov	r8, r1
 801eb2a:	e7d1      	b.n	801ead0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 801eb2c:	4626      	mov	r6, r4
 801eb2e:	4602      	mov	r2, r0
 801eb30:	460d      	mov	r5, r1
 801eb32:	46a6      	mov	lr, r4
 801eb34:	9002      	str	r0, [sp, #8]
 801eb36:	4688      	mov	r8, r1
 801eb38:	e7db      	b.n	801eaf2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801eb3a:	4626      	mov	r6, r4
 801eb3c:	4602      	mov	r2, r0
 801eb3e:	460d      	mov	r5, r1
 801eb40:	e7d7      	b.n	801eaf2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801eb42:	4626      	mov	r6, r4
 801eb44:	4602      	mov	r2, r0
 801eb46:	460d      	mov	r5, r1
 801eb48:	f1b9 0f0f 	cmp.w	r9, #15
 801eb4c:	d8d4      	bhi.n	801eaf8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801eb4e:	fa1f f38c 	uxth.w	r3, ip
 801eb52:	fa1f fc89 	uxth.w	ip, r9
 801eb56:	fb03 f70c 	mul.w	r7, r3, ip
 801eb5a:	011b      	lsls	r3, r3, #4
 801eb5c:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801eb60:	9707      	str	r7, [sp, #28]
 801eb62:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801eb66:	fa1f fc8c 	uxth.w	ip, ip
 801eb6a:	eba7 070c 	sub.w	r7, r7, ip
 801eb6e:	b2bf      	uxth	r7, r7
 801eb70:	9709      	str	r7, [sp, #36]	; 0x24
 801eb72:	9f07      	ldr	r7, [sp, #28]
 801eb74:	1bdb      	subs	r3, r3, r7
 801eb76:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801eb7a:	b29b      	uxth	r3, r3
 801eb7c:	9708      	str	r7, [sp, #32]
 801eb7e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801eb80:	930a      	str	r3, [sp, #40]	; 0x28
 801eb82:	ea6f 0907 	mvn.w	r9, r7
 801eb86:	fb03 fb0b 	mul.w	fp, r3, fp
 801eb8a:	9f04      	ldr	r7, [sp, #16]
 801eb8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb8e:	fa5f f989 	uxtb.w	r9, r9
 801eb92:	fb03 bb07 	mla	fp, r3, r7, fp
 801eb96:	9f07      	ldr	r7, [sp, #28]
 801eb98:	fb11 f109 	smulbb	r1, r1, r9
 801eb9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb9e:	fb0c b808 	mla	r8, ip, r8, fp
 801eba2:	fb10 f009 	smulbb	r0, r0, r9
 801eba6:	fb14 f409 	smulbb	r4, r4, r9
 801ebaa:	fb07 8805 	mla	r8, r7, r5, r8
 801ebae:	9d08      	ldr	r5, [sp, #32]
 801ebb0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ebb2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801ebb6:	fb08 1805 	mla	r8, r8, r5, r1
 801ebba:	9d05      	ldr	r5, [sp, #20]
 801ebbc:	fa1f f888 	uxth.w	r8, r8
 801ebc0:	f108 0101 	add.w	r1, r8, #1
 801ebc4:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801ebc8:	9903      	ldr	r1, [sp, #12]
 801ebca:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ebce:	f881 8000 	strb.w	r8, [r1]
 801ebd2:	fb03 f10a 	mul.w	r1, r3, sl
 801ebd6:	fb07 1105 	mla	r1, r7, r5, r1
 801ebda:	9d02      	ldr	r5, [sp, #8]
 801ebdc:	fb0c 1105 	mla	r1, ip, r5, r1
 801ebe0:	9d07      	ldr	r5, [sp, #28]
 801ebe2:	fb05 1102 	mla	r1, r5, r2, r1
 801ebe6:	9a08      	ldr	r2, [sp, #32]
 801ebe8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ebec:	fb01 0102 	mla	r1, r1, r2, r0
 801ebf0:	9a03      	ldr	r2, [sp, #12]
 801ebf2:	b289      	uxth	r1, r1
 801ebf4:	1c48      	adds	r0, r1, #1
 801ebf6:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801ebfa:	1209      	asrs	r1, r1, #8
 801ebfc:	7051      	strb	r1, [r2, #1]
 801ebfe:	9a01      	ldr	r2, [sp, #4]
 801ec00:	4353      	muls	r3, r2
 801ec02:	9a06      	ldr	r2, [sp, #24]
 801ec04:	fb07 3702 	mla	r7, r7, r2, r3
 801ec08:	9b08      	ldr	r3, [sp, #32]
 801ec0a:	fb0c 7c0e 	mla	ip, ip, lr, r7
 801ec0e:	fb05 c606 	mla	r6, r5, r6, ip
 801ec12:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801ec16:	fb06 4603 	mla	r6, r6, r3, r4
 801ec1a:	9b03      	ldr	r3, [sp, #12]
 801ec1c:	b2b6      	uxth	r6, r6
 801ec1e:	f106 0e01 	add.w	lr, r6, #1
 801ec22:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801ec26:	1236      	asrs	r6, r6, #8
 801ec28:	709e      	strb	r6, [r3, #2]
 801ec2a:	b00d      	add	sp, #52	; 0x34
 801ec2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec30:	f1bc 0f0f 	cmp.w	ip, #15
 801ec34:	f63f af60 	bhi.w	801eaf8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801ec38:	4626      	mov	r6, r4
 801ec3a:	4602      	mov	r2, r0
 801ec3c:	460d      	mov	r5, r1
 801ec3e:	46a6      	mov	lr, r4
 801ec40:	9002      	str	r0, [sp, #8]
 801ec42:	4688      	mov	r8, r1
 801ec44:	e783      	b.n	801eb4e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 801ec46:	bf00      	nop
 801ec48:	080292e4 	.word	0x080292e4
 801ec4c:	080297da 	.word	0x080297da
 801ec50:	080293ad 	.word	0x080293ad

0801ec54 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ec54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec58:	ed2d 8b08 	vpush	{d8-d11}
 801ec5c:	b0a1      	sub	sp, #132	; 0x84
 801ec5e:	eeb0 aa40 	vmov.f32	s20, s0
 801ec62:	eef0 9a60 	vmov.f32	s19, s1
 801ec66:	9307      	str	r3, [sp, #28]
 801ec68:	eeb0 9a41 	vmov.f32	s18, s2
 801ec6c:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 801ec70:	eeb0 8a62 	vmov.f32	s16, s5
 801ec74:	9210      	str	r2, [sp, #64]	; 0x40
 801ec76:	eef0 8a43 	vmov.f32	s17, s6
 801ec7a:	9308      	str	r3, [sp, #32]
 801ec7c:	eef0 ba44 	vmov.f32	s23, s8
 801ec80:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 801ec84:	eeb0 ba64 	vmov.f32	s22, s9
 801ec88:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 801ec8a:	eef0 aa45 	vmov.f32	s21, s10
 801ec8e:	930a      	str	r3, [sp, #40]	; 0x28
 801ec90:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 801ec94:	901f      	str	r0, [sp, #124]	; 0x7c
 801ec96:	930f      	str	r3, [sp, #60]	; 0x3c
 801ec98:	6850      	ldr	r0, [r2, #4]
 801ec9a:	910e      	str	r1, [sp, #56]	; 0x38
 801ec9c:	6812      	ldr	r2, [r2, #0]
 801ec9e:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 801eca2:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 801eca6:	fb00 1303 	mla	r3, r0, r3, r1
 801ecaa:	9908      	ldr	r1, [sp, #32]
 801ecac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ecb0:	18d3      	adds	r3, r2, r3
 801ecb2:	2203      	movs	r2, #3
 801ecb4:	9309      	str	r3, [sp, #36]	; 0x24
 801ecb6:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 801ecb8:	681b      	ldr	r3, [r3, #0]
 801ecba:	930c      	str	r3, [sp, #48]	; 0x30
 801ecbc:	f06f 0304 	mvn.w	r3, #4
 801ecc0:	fb11 3302 	smlabb	r3, r1, r2, r3
 801ecc4:	930d      	str	r3, [sp, #52]	; 0x34
 801ecc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ecc8:	43db      	mvns	r3, r3
 801ecca:	b2db      	uxtb	r3, r3
 801eccc:	930b      	str	r3, [sp, #44]	; 0x2c
 801ecce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ecd0:	2b00      	cmp	r3, #0
 801ecd2:	dc03      	bgt.n	801ecdc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 801ecd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ecd6:	2b00      	cmp	r3, #0
 801ecd8:	f340 81df 	ble.w	801f09a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 801ecdc:	9b07      	ldr	r3, [sp, #28]
 801ecde:	2b00      	cmp	r3, #0
 801ece0:	f340 80f2 	ble.w	801eec8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801ece4:	ea5f 4228 	movs.w	r2, r8, asr #16
 801ece8:	ea4f 432b 	mov.w	r3, fp, asr #16
 801ecec:	d430      	bmi.n	801ed50 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801ecee:	1c51      	adds	r1, r2, #1
 801ecf0:	9808      	ldr	r0, [sp, #32]
 801ecf2:	4281      	cmp	r1, r0
 801ecf4:	da2f      	bge.n	801ed56 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801ecf6:	2b00      	cmp	r3, #0
 801ecf8:	db2d      	blt.n	801ed56 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801ecfa:	1c59      	adds	r1, r3, #1
 801ecfc:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ecfe:	4288      	cmp	r0, r1
 801ed00:	dd29      	ble.n	801ed56 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801ed02:	9b07      	ldr	r3, [sp, #28]
 801ed04:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801ed06:	3b01      	subs	r3, #1
 801ed08:	fb02 8203 	mla	r2, r2, r3, r8
 801ed0c:	1412      	asrs	r2, r2, #16
 801ed0e:	d42d      	bmi.n	801ed6c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801ed10:	3201      	adds	r2, #1
 801ed12:	9908      	ldr	r1, [sp, #32]
 801ed14:	4291      	cmp	r1, r2
 801ed16:	dd29      	ble.n	801ed6c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801ed18:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801ed1a:	fb02 b303 	mla	r3, r2, r3, fp
 801ed1e:	141b      	asrs	r3, r3, #16
 801ed20:	d424      	bmi.n	801ed6c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801ed22:	3301      	adds	r3, #1
 801ed24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ed26:	429a      	cmp	r2, r3
 801ed28:	dd20      	ble.n	801ed6c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801ed2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed2c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801ed30:	1cde      	adds	r6, r3, #3
 801ed32:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 801ed36:	f1bc 0f00 	cmp.w	ip, #0
 801ed3a:	f300 811f 	bgt.w	801ef7c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 801ed3e:	9b07      	ldr	r3, [sp, #28]
 801ed40:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ed44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed46:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ed4a:	4423      	add	r3, r4
 801ed4c:	9309      	str	r3, [sp, #36]	; 0x24
 801ed4e:	e0bd      	b.n	801eecc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801ed50:	1c57      	adds	r7, r2, #1
 801ed52:	f040 80ae 	bne.w	801eeb2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801ed56:	9908      	ldr	r1, [sp, #32]
 801ed58:	428a      	cmp	r2, r1
 801ed5a:	f280 80aa 	bge.w	801eeb2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801ed5e:	1c5e      	adds	r6, r3, #1
 801ed60:	f2c0 80a7 	blt.w	801eeb2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801ed64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ed66:	4293      	cmp	r3, r2
 801ed68:	f280 80a3 	bge.w	801eeb2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801ed6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801ed70:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801ed72:	f1ba 0f00 	cmp.w	sl, #0
 801ed76:	dde2      	ble.n	801ed3e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801ed78:	ea5f 4028 	movs.w	r0, r8, asr #16
 801ed7c:	f3c8 3303 	ubfx	r3, r8, #12, #4
 801ed80:	ea4f 412b 	mov.w	r1, fp, asr #16
 801ed84:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801ed88:	f100 80df 	bmi.w	801ef4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 801ed8c:	1c45      	adds	r5, r0, #1
 801ed8e:	9f08      	ldr	r7, [sp, #32]
 801ed90:	42af      	cmp	r7, r5
 801ed92:	f340 80dc 	ble.w	801ef4e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801ed96:	2900      	cmp	r1, #0
 801ed98:	f2c0 80d9 	blt.w	801ef4e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801ed9c:	1c4d      	adds	r5, r1, #1
 801ed9e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801eda0:	42af      	cmp	r7, r5
 801eda2:	f340 80d4 	ble.w	801ef4e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801eda6:	9d08      	ldr	r5, [sp, #32]
 801eda8:	fb05 0101 	mla	r1, r5, r1, r0
 801edac:	980c      	ldr	r0, [sp, #48]	; 0x30
 801edae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801edb2:	1845      	adds	r5, r0, r1
 801edb4:	5c40      	ldrb	r0, [r0, r1]
 801edb6:	792f      	ldrb	r7, [r5, #4]
 801edb8:	7869      	ldrb	r1, [r5, #1]
 801edba:	9711      	str	r7, [sp, #68]	; 0x44
 801edbc:	796f      	ldrb	r7, [r5, #5]
 801edbe:	f895 e002 	ldrb.w	lr, [r5, #2]
 801edc2:	f895 9003 	ldrb.w	r9, [r5, #3]
 801edc6:	9712      	str	r7, [sp, #72]	; 0x48
 801edc8:	b17a      	cbz	r2, 801edea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 801edca:	3505      	adds	r5, #5
 801edcc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801edce:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801edd0:	19ef      	adds	r7, r5, r7
 801edd2:	5d2d      	ldrb	r5, [r5, r4]
 801edd4:	787c      	ldrb	r4, [r7, #1]
 801edd6:	9513      	str	r5, [sp, #76]	; 0x4c
 801edd8:	9415      	str	r4, [sp, #84]	; 0x54
 801edda:	78bc      	ldrb	r4, [r7, #2]
 801eddc:	9417      	str	r4, [sp, #92]	; 0x5c
 801edde:	78fc      	ldrb	r4, [r7, #3]
 801ede0:	9414      	str	r4, [sp, #80]	; 0x50
 801ede2:	793c      	ldrb	r4, [r7, #4]
 801ede4:	9416      	str	r4, [sp, #88]	; 0x58
 801ede6:	797c      	ldrb	r4, [r7, #5]
 801ede8:	9418      	str	r4, [sp, #96]	; 0x60
 801edea:	b29b      	uxth	r3, r3
 801edec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801edee:	b292      	uxth	r2, r2
 801edf0:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801edf4:	fb03 f702 	mul.w	r7, r3, r2
 801edf8:	011b      	lsls	r3, r3, #4
 801edfa:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 801edfe:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801ee02:	1bdb      	subs	r3, r3, r7
 801ee04:	b292      	uxth	r2, r2
 801ee06:	b29b      	uxth	r3, r3
 801ee08:	ebac 0c02 	sub.w	ip, ip, r2
 801ee0c:	fb03 f909 	mul.w	r9, r3, r9
 801ee10:	fa1f fc8c 	uxth.w	ip, ip
 801ee14:	fb0c 9000 	mla	r0, ip, r0, r9
 801ee18:	f896 9000 	ldrb.w	r9, [r6]
 801ee1c:	fb02 0004 	mla	r0, r2, r4, r0
 801ee20:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ee22:	fb07 0004 	mla	r0, r7, r4, r0
 801ee26:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ee28:	fb19 f904 	smulbb	r9, r9, r4
 801ee2c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ee30:	fb00 9005 	mla	r0, r0, r5, r9
 801ee34:	b280      	uxth	r0, r0
 801ee36:	f100 0901 	add.w	r9, r0, #1
 801ee3a:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801ee3e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ee40:	4358      	muls	r0, r3
 801ee42:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ee46:	fb0c 0101 	mla	r1, ip, r1, r0
 801ee4a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ee4c:	f886 9000 	strb.w	r9, [r6]
 801ee50:	fb02 1100 	mla	r1, r2, r0, r1
 801ee54:	9816      	ldr	r0, [sp, #88]	; 0x58
 801ee56:	fb07 1100 	mla	r1, r7, r0, r1
 801ee5a:	7870      	ldrb	r0, [r6, #1]
 801ee5c:	fb10 f004 	smulbb	r0, r0, r4
 801ee60:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ee64:	fb01 0105 	mla	r1, r1, r5, r0
 801ee68:	b289      	uxth	r1, r1
 801ee6a:	1c48      	adds	r0, r1, #1
 801ee6c:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801ee70:	1209      	asrs	r1, r1, #8
 801ee72:	7071      	strb	r1, [r6, #1]
 801ee74:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ee76:	434b      	muls	r3, r1
 801ee78:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801ee7a:	fb0c 330e 	mla	r3, ip, lr, r3
 801ee7e:	fb02 3201 	mla	r2, r2, r1, r3
 801ee82:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ee84:	fb07 2703 	mla	r7, r7, r3, r2
 801ee88:	78b2      	ldrb	r2, [r6, #2]
 801ee8a:	fb12 f204 	smulbb	r2, r2, r4
 801ee8e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801ee92:	fb07 2505 	mla	r5, r7, r5, r2
 801ee96:	b2ad      	uxth	r5, r5
 801ee98:	1c6f      	adds	r7, r5, #1
 801ee9a:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801ee9e:	122d      	asrs	r5, r5, #8
 801eea0:	70b5      	strb	r5, [r6, #2]
 801eea2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801eea4:	3603      	adds	r6, #3
 801eea6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801eeaa:	4498      	add	r8, r3
 801eeac:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801eeae:	449b      	add	fp, r3
 801eeb0:	e75f      	b.n	801ed72 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801eeb2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801eeb4:	4498      	add	r8, r3
 801eeb6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801eeb8:	449b      	add	fp, r3
 801eeba:	9b07      	ldr	r3, [sp, #28]
 801eebc:	3b01      	subs	r3, #1
 801eebe:	9307      	str	r3, [sp, #28]
 801eec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eec2:	3303      	adds	r3, #3
 801eec4:	9309      	str	r3, [sp, #36]	; 0x24
 801eec6:	e709      	b.n	801ecdc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 801eec8:	f47f af1b 	bne.w	801ed02 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 801eecc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eece:	2b00      	cmp	r3, #0
 801eed0:	f340 80e3 	ble.w	801f09a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 801eed4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801eed8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801eeda:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801eede:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801eee2:	eef0 6a48 	vmov.f32	s13, s16
 801eee6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801eeea:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801eeee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eef2:	ee16 8a90 	vmov	r8, s13
 801eef6:	eef0 6a68 	vmov.f32	s13, s17
 801eefa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eefe:	ee16 ba90 	vmov	fp, s13
 801ef02:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ef06:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ef0a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ef0e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ef12:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ef16:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ef1a:	ee18 2a10 	vmov	r2, s16
 801ef1e:	eeb0 8a47 	vmov.f32	s16, s14
 801ef22:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef26:	ee18 2a90 	vmov	r2, s17
 801ef2a:	9335      	str	r3, [sp, #212]	; 0xd4
 801ef2c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801ef2e:	eef0 8a67 	vmov.f32	s17, s15
 801ef32:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef36:	9336      	str	r3, [sp, #216]	; 0xd8
 801ef38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ef3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ef3c:	3b01      	subs	r3, #1
 801ef3e:	930e      	str	r3, [sp, #56]	; 0x38
 801ef40:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801ef42:	bf08      	it	eq
 801ef44:	4613      	moveq	r3, r2
 801ef46:	9307      	str	r3, [sp, #28]
 801ef48:	e6c1      	b.n	801ecce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801ef4a:	1c45      	adds	r5, r0, #1
 801ef4c:	d1a9      	bne.n	801eea2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801ef4e:	9c08      	ldr	r4, [sp, #32]
 801ef50:	42a0      	cmp	r0, r4
 801ef52:	daa6      	bge.n	801eea2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801ef54:	1c4c      	adds	r4, r1, #1
 801ef56:	dba4      	blt.n	801eea2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801ef58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ef5a:	428c      	cmp	r4, r1
 801ef5c:	dda1      	ble.n	801eea2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801ef5e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ef60:	9001      	str	r0, [sp, #4]
 801ef62:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801ef64:	e9cd 1302 	strd	r1, r3, [sp, #8]
 801ef68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ef6a:	4631      	mov	r1, r6
 801ef6c:	e9cd 2404 	strd	r2, r4, [sp, #16]
 801ef70:	9300      	str	r3, [sp, #0]
 801ef72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ef74:	9b08      	ldr	r3, [sp, #32]
 801ef76:	f7ff fd5b 	bl	801ea30 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801ef7a:	e792      	b.n	801eea2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801ef7c:	ea4f 4228 	mov.w	r2, r8, asr #16
 801ef80:	9c08      	ldr	r4, [sp, #32]
 801ef82:	ea4f 402b 	mov.w	r0, fp, asr #16
 801ef86:	f3cb 3103 	ubfx	r1, fp, #12, #4
 801ef8a:	f3c8 3303 	ubfx	r3, r8, #12, #4
 801ef8e:	fb04 2000 	mla	r0, r4, r0, r2
 801ef92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ef94:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ef96:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ef9a:	4402      	add	r2, r0
 801ef9c:	5c25      	ldrb	r5, [r4, r0]
 801ef9e:	7894      	ldrb	r4, [r2, #2]
 801efa0:	7850      	ldrb	r0, [r2, #1]
 801efa2:	9411      	str	r4, [sp, #68]	; 0x44
 801efa4:	7954      	ldrb	r4, [r2, #5]
 801efa6:	f892 a003 	ldrb.w	sl, [r2, #3]
 801efaa:	f892 9004 	ldrb.w	r9, [r2, #4]
 801efae:	9412      	str	r4, [sp, #72]	; 0x48
 801efb0:	b171      	cbz	r1, 801efd0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801efb2:	3205      	adds	r2, #5
 801efb4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801efb6:	1917      	adds	r7, r2, r4
 801efb8:	5d12      	ldrb	r2, [r2, r4]
 801efba:	9219      	str	r2, [sp, #100]	; 0x64
 801efbc:	787a      	ldrb	r2, [r7, #1]
 801efbe:	921b      	str	r2, [sp, #108]	; 0x6c
 801efc0:	78ba      	ldrb	r2, [r7, #2]
 801efc2:	921d      	str	r2, [sp, #116]	; 0x74
 801efc4:	78fa      	ldrb	r2, [r7, #3]
 801efc6:	921a      	str	r2, [sp, #104]	; 0x68
 801efc8:	793a      	ldrb	r2, [r7, #4]
 801efca:	921c      	str	r2, [sp, #112]	; 0x70
 801efcc:	797a      	ldrb	r2, [r7, #5]
 801efce:	921e      	str	r2, [sp, #120]	; 0x78
 801efd0:	b29b      	uxth	r3, r3
 801efd2:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801efd4:	b289      	uxth	r1, r1
 801efd6:	3603      	adds	r6, #3
 801efd8:	f10c 3cff 	add.w	ip, ip, #4294967295
 801efdc:	fb03 f201 	mul.w	r2, r3, r1
 801efe0:	011b      	lsls	r3, r3, #4
 801efe2:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 801efe6:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801efea:	1a9b      	subs	r3, r3, r2
 801efec:	b289      	uxth	r1, r1
 801efee:	b29b      	uxth	r3, r3
 801eff0:	1a7f      	subs	r7, r7, r1
 801eff2:	fb03 fa0a 	mul.w	sl, r3, sl
 801eff6:	b2bf      	uxth	r7, r7
 801eff8:	fb03 f909 	mul.w	r9, r3, r9
 801effc:	fb07 a505 	mla	r5, r7, r5, sl
 801f000:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 801f004:	fb07 9000 	mla	r0, r7, r0, r9
 801f008:	fb01 5504 	mla	r5, r1, r4, r5
 801f00c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801f00e:	fb02 5504 	mla	r5, r2, r4, r5
 801f012:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f014:	fb1a fa04 	smulbb	sl, sl, r4
 801f018:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801f01c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 801f01e:	fb05 a50e 	mla	r5, r5, lr, sl
 801f022:	fb01 0004 	mla	r0, r1, r4, r0
 801f026:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801f028:	b2ad      	uxth	r5, r5
 801f02a:	fb02 0004 	mla	r0, r2, r4, r0
 801f02e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f030:	f105 0a01 	add.w	sl, r5, #1
 801f034:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f038:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801f03c:	122d      	asrs	r5, r5, #8
 801f03e:	f806 5c06 	strb.w	r5, [r6, #-6]
 801f042:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 801f046:	fb15 f504 	smulbb	r5, r5, r4
 801f04a:	fb00 500e 	mla	r0, r0, lr, r5
 801f04e:	b280      	uxth	r0, r0
 801f050:	1c45      	adds	r5, r0, #1
 801f052:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801f056:	1200      	asrs	r0, r0, #8
 801f058:	f806 0c05 	strb.w	r0, [r6, #-5]
 801f05c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f05e:	4343      	muls	r3, r0
 801f060:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f062:	fb07 3300 	mla	r3, r7, r0, r3
 801f066:	981d      	ldr	r0, [sp, #116]	; 0x74
 801f068:	fb01 3100 	mla	r1, r1, r0, r3
 801f06c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f06e:	fb02 1203 	mla	r2, r2, r3, r1
 801f072:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 801f076:	fb11 f104 	smulbb	r1, r1, r4
 801f07a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801f07e:	fb02 120e 	mla	r2, r2, lr, r1
 801f082:	b292      	uxth	r2, r2
 801f084:	1c53      	adds	r3, r2, #1
 801f086:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801f08a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801f08c:	1212      	asrs	r2, r2, #8
 801f08e:	4498      	add	r8, r3
 801f090:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801f092:	f806 2c04 	strb.w	r2, [r6, #-4]
 801f096:	449b      	add	fp, r3
 801f098:	e64d      	b.n	801ed36 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801f09a:	b021      	add	sp, #132	; 0x84
 801f09c:	ecbd 8b08 	vpop	{d8-d11}
 801f0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f0a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801f0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0a8:	b085      	sub	sp, #20
 801f0aa:	784d      	ldrb	r5, [r1, #1]
 801f0ac:	788e      	ldrb	r6, [r1, #2]
 801f0ae:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801f0b2:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 801f0b6:	9403      	str	r4, [sp, #12]
 801f0b8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801f0bc:	780c      	ldrb	r4, [r1, #0]
 801f0be:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 801f0c2:	fb07 ce03 	mla	lr, r7, r3, ip
 801f0c6:	2f00      	cmp	r7, #0
 801f0c8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f0cc:	eb02 0b0e 	add.w	fp, r2, lr
 801f0d0:	db56      	blt.n	801f180 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801f0d2:	45b9      	cmp	r9, r7
 801f0d4:	dd54      	ble.n	801f180 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801f0d6:	f1bc 0f00 	cmp.w	ip, #0
 801f0da:	db4d      	blt.n	801f178 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 801f0dc:	4563      	cmp	r3, ip
 801f0de:	dd4b      	ble.n	801f178 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 801f0e0:	f812 200e 	ldrb.w	r2, [r2, lr]
 801f0e4:	9200      	str	r2, [sp, #0]
 801f0e6:	f89b 2001 	ldrb.w	r2, [fp, #1]
 801f0ea:	9201      	str	r2, [sp, #4]
 801f0ec:	f89b 2002 	ldrb.w	r2, [fp, #2]
 801f0f0:	9202      	str	r2, [sp, #8]
 801f0f2:	f11c 0201 	adds.w	r2, ip, #1
 801f0f6:	d44a      	bmi.n	801f18e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801f0f8:	4293      	cmp	r3, r2
 801f0fa:	dd48      	ble.n	801f18e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801f0fc:	2800      	cmp	r0, #0
 801f0fe:	d046      	beq.n	801f18e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801f100:	f89b e003 	ldrb.w	lr, [fp, #3]
 801f104:	f89b 8004 	ldrb.w	r8, [fp, #4]
 801f108:	f89b a005 	ldrb.w	sl, [fp, #5]
 801f10c:	3701      	adds	r7, #1
 801f10e:	d446      	bmi.n	801f19e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 801f110:	45b9      	cmp	r9, r7
 801f112:	dd44      	ble.n	801f19e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 801f114:	9a03      	ldr	r2, [sp, #12]
 801f116:	2a00      	cmp	r2, #0
 801f118:	d045      	beq.n	801f1a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 801f11a:	f1bc 0f00 	cmp.w	ip, #0
 801f11e:	db3a      	blt.n	801f196 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 801f120:	4563      	cmp	r3, ip
 801f122:	dd38      	ble.n	801f196 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 801f124:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801f128:	f04f 0903 	mov.w	r9, #3
 801f12c:	f81b 7002 	ldrb.w	r7, [fp, r2]
 801f130:	fb03 b209 	mla	r2, r3, r9, fp
 801f134:	fb03 b909 	mla	r9, r3, r9, fp
 801f138:	7852      	ldrb	r2, [r2, #1]
 801f13a:	f899 9002 	ldrb.w	r9, [r9, #2]
 801f13e:	f11c 0c01 	adds.w	ip, ip, #1
 801f142:	d40d      	bmi.n	801f160 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801f144:	4563      	cmp	r3, ip
 801f146:	dd0b      	ble.n	801f160 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801f148:	b160      	cbz	r0, 801f164 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 801f14a:	2603      	movs	r6, #3
 801f14c:	fb13 6406 	smlabb	r4, r3, r6, r6
 801f150:	fb03 b506 	mla	r5, r3, r6, fp
 801f154:	fb03 b306 	mla	r3, r3, r6, fp
 801f158:	f81b 4004 	ldrb.w	r4, [fp, r4]
 801f15c:	792d      	ldrb	r5, [r5, #4]
 801f15e:	795e      	ldrb	r6, [r3, #5]
 801f160:	280f      	cmp	r0, #15
 801f162:	d802      	bhi.n	801f16a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801f164:	9b03      	ldr	r3, [sp, #12]
 801f166:	2b0f      	cmp	r3, #15
 801f168:	d922      	bls.n	801f1b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 801f16a:	4b2f      	ldr	r3, [pc, #188]	; (801f228 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 801f16c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f170:	4a2e      	ldr	r2, [pc, #184]	; (801f22c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 801f172:	482f      	ldr	r0, [pc, #188]	; (801f230 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 801f174:	f003 ff96 	bl	80230a4 <__assert_func>
 801f178:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801f17c:	9400      	str	r4, [sp, #0]
 801f17e:	e7b8      	b.n	801f0f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 801f180:	46b2      	mov	sl, r6
 801f182:	46a8      	mov	r8, r5
 801f184:	46a6      	mov	lr, r4
 801f186:	9400      	str	r4, [sp, #0]
 801f188:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801f18c:	e7be      	b.n	801f10c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801f18e:	46b2      	mov	sl, r6
 801f190:	46a8      	mov	r8, r5
 801f192:	46a6      	mov	lr, r4
 801f194:	e7ba      	b.n	801f10c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801f196:	46b1      	mov	r9, r6
 801f198:	462a      	mov	r2, r5
 801f19a:	4627      	mov	r7, r4
 801f19c:	e7cf      	b.n	801f13e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801f19e:	46b1      	mov	r9, r6
 801f1a0:	462a      	mov	r2, r5
 801f1a2:	4627      	mov	r7, r4
 801f1a4:	e7dc      	b.n	801f160 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801f1a6:	280f      	cmp	r0, #15
 801f1a8:	d8df      	bhi.n	801f16a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801f1aa:	46b1      	mov	r9, r6
 801f1ac:	462a      	mov	r2, r5
 801f1ae:	4627      	mov	r7, r4
 801f1b0:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 801f1b4:	b280      	uxth	r0, r0
 801f1b6:	fb00 f30b 	mul.w	r3, r0, fp
 801f1ba:	0100      	lsls	r0, r0, #4
 801f1bc:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 801f1c0:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 801f1c4:	1ac0      	subs	r0, r0, r3
 801f1c6:	fa1f fb8b 	uxth.w	fp, fp
 801f1ca:	b280      	uxth	r0, r0
 801f1cc:	ebac 0c0b 	sub.w	ip, ip, fp
 801f1d0:	9003      	str	r0, [sp, #12]
 801f1d2:	fa1f fc8c 	uxth.w	ip, ip
 801f1d6:	fb00 fe0e 	mul.w	lr, r0, lr
 801f1da:	9800      	ldr	r0, [sp, #0]
 801f1dc:	fb0c ee00 	mla	lr, ip, r0, lr
 801f1e0:	9803      	ldr	r0, [sp, #12]
 801f1e2:	fb00 f808 	mul.w	r8, r0, r8
 801f1e6:	9801      	ldr	r0, [sp, #4]
 801f1e8:	fb0b ee07 	mla	lr, fp, r7, lr
 801f1ec:	fb0c 8800 	mla	r8, ip, r0, r8
 801f1f0:	fb03 ee04 	mla	lr, r3, r4, lr
 801f1f4:	fb0b 8202 	mla	r2, fp, r2, r8
 801f1f8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f1fc:	fb03 2505 	mla	r5, r3, r5, r2
 801f200:	9a03      	ldr	r2, [sp, #12]
 801f202:	f881 e000 	strb.w	lr, [r1]
 801f206:	fb02 f00a 	mul.w	r0, r2, sl
 801f20a:	9a02      	ldr	r2, [sp, #8]
 801f20c:	122d      	asrs	r5, r5, #8
 801f20e:	fb0c 0c02 	mla	ip, ip, r2, r0
 801f212:	704d      	strb	r5, [r1, #1]
 801f214:	fb0b c909 	mla	r9, fp, r9, ip
 801f218:	fb03 9606 	mla	r6, r3, r6, r9
 801f21c:	1236      	asrs	r6, r6, #8
 801f21e:	708e      	strb	r6, [r1, #2]
 801f220:	b005      	add	sp, #20
 801f222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f226:	bf00      	nop
 801f228:	080292e4 	.word	0x080292e4
 801f22c:	080297da 	.word	0x080297da
 801f230:	080293ad 	.word	0x080293ad

0801f234 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f238:	ed2d 8b0a 	vpush	{d8-d12}
 801f23c:	b09d      	sub	sp, #116	; 0x74
 801f23e:	eeb0 aa40 	vmov.f32	s20, s0
 801f242:	eef0 9a60 	vmov.f32	s19, s1
 801f246:	9306      	str	r3, [sp, #24]
 801f248:	eeb0 9a41 	vmov.f32	s18, s2
 801f24c:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 801f250:	eeb0 8a62 	vmov.f32	s16, s5
 801f254:	901b      	str	r0, [sp, #108]	; 0x6c
 801f256:	eef0 8a43 	vmov.f32	s17, s6
 801f25a:	9307      	str	r3, [sp, #28]
 801f25c:	eeb0 ca44 	vmov.f32	s24, s8
 801f260:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 801f264:	eef0 ba64 	vmov.f32	s23, s9
 801f268:	eeb0 ba45 	vmov.f32	s22, s10
 801f26c:	9309      	str	r3, [sp, #36]	; 0x24
 801f26e:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801f272:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 801f276:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801f278:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 801f27c:	6850      	ldr	r0, [r2, #4]
 801f27e:	6812      	ldr	r2, [r2, #0]
 801f280:	fb00 1303 	mla	r3, r0, r3, r1
 801f284:	9907      	ldr	r1, [sp, #28]
 801f286:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f28a:	18d3      	adds	r3, r2, r3
 801f28c:	2203      	movs	r2, #3
 801f28e:	9308      	str	r3, [sp, #32]
 801f290:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 801f292:	681b      	ldr	r3, [r3, #0]
 801f294:	930a      	str	r3, [sp, #40]	; 0x28
 801f296:	f06f 0304 	mvn.w	r3, #4
 801f29a:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 801f29e:	fb11 3302 	smlabb	r3, r1, r2, r3
 801f2a2:	930b      	str	r3, [sp, #44]	; 0x2c
 801f2a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f2a6:	2b00      	cmp	r3, #0
 801f2a8:	dc03      	bgt.n	801f2b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801f2aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f2ac:	2b00      	cmp	r3, #0
 801f2ae:	f340 8193 	ble.w	801f5d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 801f2b2:	9b06      	ldr	r3, [sp, #24]
 801f2b4:	2b00      	cmp	r3, #0
 801f2b6:	f340 80d0 	ble.w	801f45a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 801f2ba:	1432      	asrs	r2, r6, #16
 801f2bc:	ea4f 4325 	mov.w	r3, r5, asr #16
 801f2c0:	d42f      	bmi.n	801f322 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801f2c2:	1c51      	adds	r1, r2, #1
 801f2c4:	9807      	ldr	r0, [sp, #28]
 801f2c6:	4281      	cmp	r1, r0
 801f2c8:	da2e      	bge.n	801f328 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801f2ca:	2b00      	cmp	r3, #0
 801f2cc:	db2c      	blt.n	801f328 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801f2ce:	1c59      	adds	r1, r3, #1
 801f2d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f2d2:	4288      	cmp	r0, r1
 801f2d4:	dd28      	ble.n	801f328 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801f2d6:	9b06      	ldr	r3, [sp, #24]
 801f2d8:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801f2da:	3b01      	subs	r3, #1
 801f2dc:	fb02 6203 	mla	r2, r2, r3, r6
 801f2e0:	1412      	asrs	r2, r2, #16
 801f2e2:	d42c      	bmi.n	801f33e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801f2e4:	3201      	adds	r2, #1
 801f2e6:	9907      	ldr	r1, [sp, #28]
 801f2e8:	4291      	cmp	r1, r2
 801f2ea:	dd28      	ble.n	801f33e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801f2ec:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 801f2ee:	fb02 5303 	mla	r3, r2, r3, r5
 801f2f2:	141b      	asrs	r3, r3, #16
 801f2f4:	d423      	bmi.n	801f33e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801f2f6:	3301      	adds	r3, #1
 801f2f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f2fa:	429a      	cmp	r2, r3
 801f2fc:	dd1f      	ble.n	801f33e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801f2fe:	9b08      	ldr	r3, [sp, #32]
 801f300:	f8dd e018 	ldr.w	lr, [sp, #24]
 801f304:	f103 0c03 	add.w	ip, r3, #3
 801f308:	f1be 0f00 	cmp.w	lr, #0
 801f30c:	f300 80fa 	bgt.w	801f504 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801f310:	9b06      	ldr	r3, [sp, #24]
 801f312:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f316:	9b08      	ldr	r3, [sp, #32]
 801f318:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f31c:	4423      	add	r3, r4
 801f31e:	9308      	str	r3, [sp, #32]
 801f320:	e09d      	b.n	801f45e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 801f322:	1c51      	adds	r1, r2, #1
 801f324:	f040 808e 	bne.w	801f444 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801f328:	9907      	ldr	r1, [sp, #28]
 801f32a:	428a      	cmp	r2, r1
 801f32c:	f280 808a 	bge.w	801f444 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801f330:	1c5f      	adds	r7, r3, #1
 801f332:	f2c0 8087 	blt.w	801f444 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801f336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f338:	4293      	cmp	r3, r2
 801f33a:	f280 8083 	bge.w	801f444 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801f33e:	9f06      	ldr	r7, [sp, #24]
 801f340:	f8dd a020 	ldr.w	sl, [sp, #32]
 801f344:	2f00      	cmp	r7, #0
 801f346:	dde3      	ble.n	801f310 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 801f348:	1432      	asrs	r2, r6, #16
 801f34a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801f34e:	ea4f 4325 	mov.w	r3, r5, asr #16
 801f352:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 801f356:	f100 80bf 	bmi.w	801f4d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 801f35a:	1c50      	adds	r0, r2, #1
 801f35c:	9c07      	ldr	r4, [sp, #28]
 801f35e:	4284      	cmp	r4, r0
 801f360:	f340 80bc 	ble.w	801f4dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801f364:	2b00      	cmp	r3, #0
 801f366:	f2c0 80b9 	blt.w	801f4dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801f36a:	1c58      	adds	r0, r3, #1
 801f36c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f36e:	4284      	cmp	r4, r0
 801f370:	f340 80b4 	ble.w	801f4dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801f374:	9807      	ldr	r0, [sp, #28]
 801f376:	fb00 2303 	mla	r3, r0, r3, r2
 801f37a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f37c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f37e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f382:	441a      	add	r2, r3
 801f384:	f810 c003 	ldrb.w	ip, [r0, r3]
 801f388:	7953      	ldrb	r3, [r2, #5]
 801f38a:	7850      	ldrb	r0, [r2, #1]
 801f38c:	f892 e002 	ldrb.w	lr, [r2, #2]
 801f390:	f892 9003 	ldrb.w	r9, [r2, #3]
 801f394:	f892 8004 	ldrb.w	r8, [r2, #4]
 801f398:	930e      	str	r3, [sp, #56]	; 0x38
 801f39a:	f1bb 0f00 	cmp.w	fp, #0
 801f39e:	d00f      	beq.n	801f3c0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801f3a0:	3205      	adds	r2, #5
 801f3a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f3a4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f3a6:	18d3      	adds	r3, r2, r3
 801f3a8:	5d12      	ldrb	r2, [r2, r4]
 801f3aa:	920f      	str	r2, [sp, #60]	; 0x3c
 801f3ac:	785a      	ldrb	r2, [r3, #1]
 801f3ae:	9211      	str	r2, [sp, #68]	; 0x44
 801f3b0:	789a      	ldrb	r2, [r3, #2]
 801f3b2:	9213      	str	r2, [sp, #76]	; 0x4c
 801f3b4:	78da      	ldrb	r2, [r3, #3]
 801f3b6:	9210      	str	r2, [sp, #64]	; 0x40
 801f3b8:	791a      	ldrb	r2, [r3, #4]
 801f3ba:	795b      	ldrb	r3, [r3, #5]
 801f3bc:	9212      	str	r2, [sp, #72]	; 0x48
 801f3be:	9314      	str	r3, [sp, #80]	; 0x50
 801f3c0:	b28b      	uxth	r3, r1
 801f3c2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f3c4:	fa1f f28b 	uxth.w	r2, fp
 801f3c8:	fb03 fb02 	mul.w	fp, r3, r2
 801f3cc:	011b      	lsls	r3, r3, #4
 801f3ce:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801f3d2:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 801f3d6:	eba3 030b 	sub.w	r3, r3, fp
 801f3da:	b292      	uxth	r2, r2
 801f3dc:	b29b      	uxth	r3, r3
 801f3de:	1a89      	subs	r1, r1, r2
 801f3e0:	fb03 f808 	mul.w	r8, r3, r8
 801f3e4:	b289      	uxth	r1, r1
 801f3e6:	fb03 f909 	mul.w	r9, r3, r9
 801f3ea:	fb01 8800 	mla	r8, r1, r0, r8
 801f3ee:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f3f0:	fb01 990c 	mla	r9, r1, ip, r9
 801f3f4:	fb02 8800 	mla	r8, r2, r0, r8
 801f3f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f3fa:	fb02 9904 	mla	r9, r2, r4, r9
 801f3fe:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f400:	fb0b 8800 	mla	r8, fp, r0, r8
 801f404:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f406:	fb0b 9904 	mla	r9, fp, r4, r9
 801f40a:	4343      	muls	r3, r0
 801f40c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f410:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f414:	fb01 330e 	mla	r3, r1, lr, r3
 801f418:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801f41a:	f88a 9000 	strb.w	r9, [sl]
 801f41e:	fb02 3201 	mla	r2, r2, r1, r3
 801f422:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f424:	f88a 8001 	strb.w	r8, [sl, #1]
 801f428:	fb0b 2b03 	mla	fp, fp, r3, r2
 801f42c:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801f430:	f88a b002 	strb.w	fp, [sl, #2]
 801f434:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801f436:	f10a 0a03 	add.w	sl, sl, #3
 801f43a:	3f01      	subs	r7, #1
 801f43c:	441e      	add	r6, r3
 801f43e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801f440:	441d      	add	r5, r3
 801f442:	e77f      	b.n	801f344 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801f444:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801f446:	441e      	add	r6, r3
 801f448:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801f44a:	441d      	add	r5, r3
 801f44c:	9b06      	ldr	r3, [sp, #24]
 801f44e:	3b01      	subs	r3, #1
 801f450:	9306      	str	r3, [sp, #24]
 801f452:	9b08      	ldr	r3, [sp, #32]
 801f454:	3303      	adds	r3, #3
 801f456:	9308      	str	r3, [sp, #32]
 801f458:	e72b      	b.n	801f2b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801f45a:	f47f af3c 	bne.w	801f2d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801f45e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f460:	2b00      	cmp	r3, #0
 801f462:	f340 80b9 	ble.w	801f5d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 801f466:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801f46a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f46c:	ee79 9aab 	vadd.f32	s19, s19, s23
 801f470:	eef0 6a48 	vmov.f32	s13, s16
 801f474:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801f478:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801f47c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f480:	ee16 6a90 	vmov	r6, s13
 801f484:	eef0 6a68 	vmov.f32	s13, s17
 801f488:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f48c:	ee16 5a90 	vmov	r5, s13
 801f490:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f494:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f498:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f49c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f4a0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f4a4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f4a8:	ee18 2a10 	vmov	r2, s16
 801f4ac:	eeb0 8a47 	vmov.f32	s16, s14
 801f4b0:	fb92 f3f3 	sdiv	r3, r2, r3
 801f4b4:	ee18 2a90 	vmov	r2, s17
 801f4b8:	9333      	str	r3, [sp, #204]	; 0xcc
 801f4ba:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f4bc:	eef0 8a67 	vmov.f32	s17, s15
 801f4c0:	fb92 f3f3 	sdiv	r3, r2, r3
 801f4c4:	9334      	str	r3, [sp, #208]	; 0xd0
 801f4c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f4c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f4ca:	3b01      	subs	r3, #1
 801f4cc:	930c      	str	r3, [sp, #48]	; 0x30
 801f4ce:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f4d0:	bf08      	it	eq
 801f4d2:	4613      	moveq	r3, r2
 801f4d4:	9306      	str	r3, [sp, #24]
 801f4d6:	e6e5      	b.n	801f2a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801f4d8:	1c54      	adds	r4, r2, #1
 801f4da:	d1ab      	bne.n	801f434 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801f4dc:	9807      	ldr	r0, [sp, #28]
 801f4de:	4282      	cmp	r2, r0
 801f4e0:	daa8      	bge.n	801f434 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801f4e2:	1c58      	adds	r0, r3, #1
 801f4e4:	dba6      	blt.n	801f434 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801f4e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f4e8:	4298      	cmp	r0, r3
 801f4ea:	dda3      	ble.n	801f434 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801f4ec:	9000      	str	r0, [sp, #0]
 801f4ee:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801f4f0:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801f4f4:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 801f4f8:	9b07      	ldr	r3, [sp, #28]
 801f4fa:	4651      	mov	r1, sl
 801f4fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f4fe:	f7ff fdd1 	bl	801f0a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801f502:	e797      	b.n	801f434 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801f504:	1431      	asrs	r1, r6, #16
 801f506:	9c07      	ldr	r4, [sp, #28]
 801f508:	1428      	asrs	r0, r5, #16
 801f50a:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801f50e:	f3c6 3303 	ubfx	r3, r6, #12, #4
 801f512:	fb04 1000 	mla	r0, r4, r0, r1
 801f516:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f518:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f51a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f51e:	4401      	add	r1, r0
 801f520:	5c20      	ldrb	r0, [r4, r0]
 801f522:	f891 8002 	ldrb.w	r8, [r1, #2]
 801f526:	900e      	str	r0, [sp, #56]	; 0x38
 801f528:	f891 a003 	ldrb.w	sl, [r1, #3]
 801f52c:	7848      	ldrb	r0, [r1, #1]
 801f52e:	f891 9004 	ldrb.w	r9, [r1, #4]
 801f532:	f891 b005 	ldrb.w	fp, [r1, #5]
 801f536:	b172      	cbz	r2, 801f556 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 801f538:	3105      	adds	r1, #5
 801f53a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f53c:	190f      	adds	r7, r1, r4
 801f53e:	5d09      	ldrb	r1, [r1, r4]
 801f540:	9115      	str	r1, [sp, #84]	; 0x54
 801f542:	7879      	ldrb	r1, [r7, #1]
 801f544:	9117      	str	r1, [sp, #92]	; 0x5c
 801f546:	78b9      	ldrb	r1, [r7, #2]
 801f548:	9119      	str	r1, [sp, #100]	; 0x64
 801f54a:	78f9      	ldrb	r1, [r7, #3]
 801f54c:	9116      	str	r1, [sp, #88]	; 0x58
 801f54e:	7939      	ldrb	r1, [r7, #4]
 801f550:	9118      	str	r1, [sp, #96]	; 0x60
 801f552:	7979      	ldrb	r1, [r7, #5]
 801f554:	911a      	str	r1, [sp, #104]	; 0x68
 801f556:	b29b      	uxth	r3, r3
 801f558:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f55a:	b292      	uxth	r2, r2
 801f55c:	f10c 0c03 	add.w	ip, ip, #3
 801f560:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f564:	fb03 f102 	mul.w	r1, r3, r2
 801f568:	011b      	lsls	r3, r3, #4
 801f56a:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 801f56e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801f572:	1a5b      	subs	r3, r3, r1
 801f574:	b292      	uxth	r2, r2
 801f576:	b29b      	uxth	r3, r3
 801f578:	1abf      	subs	r7, r7, r2
 801f57a:	fb03 f909 	mul.w	r9, r3, r9
 801f57e:	b2bf      	uxth	r7, r7
 801f580:	fb03 fa0a 	mul.w	sl, r3, sl
 801f584:	fb03 f30b 	mul.w	r3, r3, fp
 801f588:	fb07 9900 	mla	r9, r7, r0, r9
 801f58c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801f58e:	fb07 aa04 	mla	sl, r7, r4, sl
 801f592:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f594:	fb02 9900 	mla	r9, r2, r0, r9
 801f598:	9818      	ldr	r0, [sp, #96]	; 0x60
 801f59a:	fb07 3308 	mla	r3, r7, r8, r3
 801f59e:	fb01 9900 	mla	r9, r1, r0, r9
 801f5a2:	9819      	ldr	r0, [sp, #100]	; 0x64
 801f5a4:	fb02 aa04 	mla	sl, r2, r4, sl
 801f5a8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f5aa:	fb02 3200 	mla	r2, r2, r0, r3
 801f5ae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f5b0:	fb01 aa04 	mla	sl, r1, r4, sl
 801f5b4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f5b8:	fb01 2103 	mla	r1, r1, r3, r2
 801f5bc:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801f5be:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f5c2:	f80c 9c05 	strb.w	r9, [ip, #-5]
 801f5c6:	1209      	asrs	r1, r1, #8
 801f5c8:	441e      	add	r6, r3
 801f5ca:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801f5cc:	f80c ac06 	strb.w	sl, [ip, #-6]
 801f5d0:	f80c 1c04 	strb.w	r1, [ip, #-4]
 801f5d4:	441d      	add	r5, r3
 801f5d6:	e697      	b.n	801f308 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801f5d8:	b01d      	add	sp, #116	; 0x74
 801f5da:	ecbd 8b0a 	vpop	{d8-d12}
 801f5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f5e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801f5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5e8:	b085      	sub	sp, #20
 801f5ea:	7888      	ldrb	r0, [r1, #2]
 801f5ec:	4691      	mov	r9, r2
 801f5ee:	9000      	str	r0, [sp, #0]
 801f5f0:	7848      	ldrb	r0, [r1, #1]
 801f5f2:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 801f5f6:	9001      	str	r0, [sp, #4]
 801f5f8:	7808      	ldrb	r0, [r1, #0]
 801f5fa:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801f5fe:	9002      	str	r0, [sp, #8]
 801f600:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801f604:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 801f608:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 801f60c:	fb04 c603 	mla	r6, r4, r3, ip
 801f610:	2c00      	cmp	r4, #0
 801f612:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 801f616:	9a00      	ldr	r2, [sp, #0]
 801f618:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801f61c:	9a01      	ldr	r2, [sp, #4]
 801f61e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801f622:	db3a      	blt.n	801f69a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 801f624:	45a0      	cmp	r8, r4
 801f626:	dd38      	ble.n	801f69a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 801f628:	f1bc 0f00 	cmp.w	ip, #0
 801f62c:	db33      	blt.n	801f696 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 801f62e:	4563      	cmp	r3, ip
 801f630:	dd31      	ble.n	801f696 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 801f632:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 801f636:	f11c 0601 	adds.w	r6, ip, #1
 801f63a:	d431      	bmi.n	801f6a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 801f63c:	42b3      	cmp	r3, r6
 801f63e:	dd2f      	ble.n	801f6a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 801f640:	b375      	cbz	r5, 801f6a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 801f642:	f8de 6004 	ldr.w	r6, [lr, #4]
 801f646:	3401      	adds	r4, #1
 801f648:	d42e      	bmi.n	801f6a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 801f64a:	45a0      	cmp	r8, r4
 801f64c:	dd2c      	ble.n	801f6a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 801f64e:	b35f      	cbz	r7, 801f6a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 801f650:	f1bc 0f00 	cmp.w	ip, #0
 801f654:	db26      	blt.n	801f6a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 801f656:	4563      	cmp	r3, ip
 801f658:	dd24      	ble.n	801f6a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 801f65a:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 801f65e:	f11c 0c01 	adds.w	ip, ip, #1
 801f662:	d405      	bmi.n	801f670 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801f664:	4563      	cmp	r3, ip
 801f666:	dd03      	ble.n	801f670 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801f668:	b115      	cbz	r5, 801f670 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801f66a:	3301      	adds	r3, #1
 801f66c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 801f670:	2d0f      	cmp	r5, #15
 801f672:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801f676:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f67a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801f67e:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801f682:	d801      	bhi.n	801f688 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 801f684:	2f0f      	cmp	r7, #15
 801f686:	d911      	bls.n	801f6ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 801f688:	4b80      	ldr	r3, [pc, #512]	; (801f88c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 801f68a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f68e:	4a80      	ldr	r2, [pc, #512]	; (801f890 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 801f690:	4880      	ldr	r0, [pc, #512]	; (801f894 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 801f692:	f003 fd07 	bl	80230a4 <__assert_func>
 801f696:	4602      	mov	r2, r0
 801f698:	e7cd      	b.n	801f636 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 801f69a:	4606      	mov	r6, r0
 801f69c:	4602      	mov	r2, r0
 801f69e:	e7d2      	b.n	801f646 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 801f6a0:	4606      	mov	r6, r0
 801f6a2:	e7d0      	b.n	801f646 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 801f6a4:	4604      	mov	r4, r0
 801f6a6:	e7da      	b.n	801f65e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 801f6a8:	4604      	mov	r4, r0
 801f6aa:	e7e1      	b.n	801f670 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801f6ac:	b2ab      	uxth	r3, r5
 801f6ae:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801f6b2:	b2bf      	uxth	r7, r7
 801f6b4:	fb03 fe07 	mul.w	lr, r3, r7
 801f6b8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801f6bc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801f6c0:	eba3 0c0e 	sub.w	ip, r3, lr
 801f6c4:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801f6c8:	b2bf      	uxth	r7, r7
 801f6ca:	fa1f fc8c 	uxth.w	ip, ip
 801f6ce:	eba5 0507 	sub.w	r5, r5, r7
 801f6d2:	fb0c f30a 	mul.w	r3, ip, sl
 801f6d6:	b2ad      	uxth	r5, r5
 801f6d8:	fb05 330b 	mla	r3, r5, fp, r3
 801f6dc:	fb07 3309 	mla	r3, r7, r9, r3
 801f6e0:	fb0e 3308 	mla	r3, lr, r8, r3
 801f6e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f6e8:	9303      	str	r3, [sp, #12]
 801f6ea:	d018      	beq.n	801f71e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 801f6ec:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801f6f0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f6f4:	fb0b f303 	mul.w	r3, fp, r3
 801f6f8:	fb0b fb02 	mul.w	fp, fp, r2
 801f6fc:	0a1a      	lsrs	r2, r3, #8
 801f6fe:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801f702:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f706:	441a      	add	r2, r3
 801f708:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801f70c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801f710:	0a12      	lsrs	r2, r2, #8
 801f712:	0a1b      	lsrs	r3, r3, #8
 801f714:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f718:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f71c:	431a      	orrs	r2, r3
 801f71e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801f722:	d019      	beq.n	801f758 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 801f724:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801f728:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f72c:	fb0a fb0b 	mul.w	fp, sl, fp
 801f730:	fb0a fa06 	mul.w	sl, sl, r6
 801f734:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801f738:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f73c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801f740:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f744:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801f748:	445e      	add	r6, fp
 801f74a:	0a1b      	lsrs	r3, r3, #8
 801f74c:	0a36      	lsrs	r6, r6, #8
 801f74e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f752:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f756:	431e      	orrs	r6, r3
 801f758:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f75c:	d019      	beq.n	801f792 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 801f75e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801f762:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f766:	fb09 fa0a 	mul.w	sl, r9, sl
 801f76a:	fb09 f904 	mul.w	r9, r9, r4
 801f76e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801f772:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f776:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801f77a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f77e:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801f782:	4454      	add	r4, sl
 801f784:	0a1b      	lsrs	r3, r3, #8
 801f786:	0a24      	lsrs	r4, r4, #8
 801f788:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f78c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f790:	431c      	orrs	r4, r3
 801f792:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f796:	d019      	beq.n	801f7cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 801f798:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801f79c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f7a0:	fb08 f909 	mul.w	r9, r8, r9
 801f7a4:	fb08 f800 	mul.w	r8, r8, r0
 801f7a8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801f7ac:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801f7b0:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801f7b4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f7b8:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801f7bc:	4448      	add	r0, r9
 801f7be:	0a1b      	lsrs	r3, r3, #8
 801f7c0:	0a00      	lsrs	r0, r0, #8
 801f7c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f7c6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f7ca:	4318      	orrs	r0, r3
 801f7cc:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801f7d0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f7d4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801f7d8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f7dc:	fb0c f808 	mul.w	r8, ip, r8
 801f7e0:	fb0c f606 	mul.w	r6, ip, r6
 801f7e4:	fb05 8803 	mla	r8, r5, r3, r8
 801f7e8:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801f7ec:	fb05 6202 	mla	r2, r5, r2, r6
 801f7f0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f7f4:	fb07 8803 	mla	r8, r7, r3, r8
 801f7f8:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801f7fc:	fb07 2704 	mla	r7, r7, r4, r2
 801f800:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f804:	fb0e 8303 	mla	r3, lr, r3, r8
 801f808:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 801f80c:	fb0e 7e00 	mla	lr, lr, r0, r7
 801f810:	9803      	ldr	r0, [sp, #12]
 801f812:	b292      	uxth	r2, r2
 801f814:	9c02      	ldr	r4, [sp, #8]
 801f816:	0a1b      	lsrs	r3, r3, #8
 801f818:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f81c:	4350      	muls	r0, r2
 801f81e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f822:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f826:	ea43 0e0e 	orr.w	lr, r3, lr
 801f82a:	1c43      	adds	r3, r0, #1
 801f82c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801f830:	fa5f f08e 	uxtb.w	r0, lr
 801f834:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801f838:	b2db      	uxtb	r3, r3
 801f83a:	fb14 f403 	smulbb	r4, r4, r3
 801f83e:	fb00 4002 	mla	r0, r0, r2, r4
 801f842:	b280      	uxth	r0, r0
 801f844:	1c44      	adds	r4, r0, #1
 801f846:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801f84a:	9c01      	ldr	r4, [sp, #4]
 801f84c:	fb14 f403 	smulbb	r4, r4, r3
 801f850:	1200      	asrs	r0, r0, #8
 801f852:	7008      	strb	r0, [r1, #0]
 801f854:	f3ce 2007 	ubfx	r0, lr, #8, #8
 801f858:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801f85c:	fb00 4002 	mla	r0, r0, r2, r4
 801f860:	b280      	uxth	r0, r0
 801f862:	1c44      	adds	r4, r0, #1
 801f864:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801f868:	1200      	asrs	r0, r0, #8
 801f86a:	7048      	strb	r0, [r1, #1]
 801f86c:	9800      	ldr	r0, [sp, #0]
 801f86e:	fb10 f303 	smulbb	r3, r0, r3
 801f872:	fb0e 3202 	mla	r2, lr, r2, r3
 801f876:	b292      	uxth	r2, r2
 801f878:	f102 0e01 	add.w	lr, r2, #1
 801f87c:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801f880:	1212      	asrs	r2, r2, #8
 801f882:	708a      	strb	r2, [r1, #2]
 801f884:	b005      	add	sp, #20
 801f886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f88a:	bf00      	nop
 801f88c:	080292e4 	.word	0x080292e4
 801f890:	080297da 	.word	0x080297da
 801f894:	080293ad 	.word	0x080293ad

0801f898 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f89c:	ed2d 8b08 	vpush	{d8-d11}
 801f8a0:	b099      	sub	sp, #100	; 0x64
 801f8a2:	eeb0 aa40 	vmov.f32	s20, s0
 801f8a6:	eef0 9a60 	vmov.f32	s19, s1
 801f8aa:	9306      	str	r3, [sp, #24]
 801f8ac:	eeb0 9a41 	vmov.f32	s18, s2
 801f8b0:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 801f8b4:	eeb0 8a62 	vmov.f32	s16, s5
 801f8b8:	9216      	str	r2, [sp, #88]	; 0x58
 801f8ba:	eef0 8a43 	vmov.f32	s17, s6
 801f8be:	9307      	str	r3, [sp, #28]
 801f8c0:	eef0 ba44 	vmov.f32	s23, s8
 801f8c4:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 801f8c8:	eeb0 ba64 	vmov.f32	s22, s9
 801f8cc:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f8ce:	eef0 aa45 	vmov.f32	s21, s10
 801f8d2:	9310      	str	r3, [sp, #64]	; 0x40
 801f8d4:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 801f8d8:	9017      	str	r0, [sp, #92]	; 0x5c
 801f8da:	9112      	str	r1, [sp, #72]	; 0x48
 801f8dc:	6850      	ldr	r0, [r2, #4]
 801f8de:	9315      	str	r3, [sp, #84]	; 0x54
 801f8e0:	6812      	ldr	r2, [r2, #0]
 801f8e2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801f8e4:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801f8e8:	fb00 1303 	mla	r3, r0, r3, r1
 801f8ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f8f0:	18d3      	adds	r3, r2, r3
 801f8f2:	930a      	str	r3, [sp, #40]	; 0x28
 801f8f4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801f8f6:	681b      	ldr	r3, [r3, #0]
 801f8f8:	9311      	str	r3, [sp, #68]	; 0x44
 801f8fa:	9b07      	ldr	r3, [sp, #28]
 801f8fc:	009b      	lsls	r3, r3, #2
 801f8fe:	930e      	str	r3, [sp, #56]	; 0x38
 801f900:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f902:	2b00      	cmp	r3, #0
 801f904:	dc03      	bgt.n	801f90e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801f906:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f908:	2b00      	cmp	r3, #0
 801f90a:	f340 833b 	ble.w	801ff84 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 801f90e:	9b06      	ldr	r3, [sp, #24]
 801f910:	2b00      	cmp	r3, #0
 801f912:	f340 8197 	ble.w	801fc44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 801f916:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f918:	1423      	asrs	r3, r4, #16
 801f91a:	1412      	asrs	r2, r2, #16
 801f91c:	d432      	bmi.n	801f984 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 801f91e:	1c51      	adds	r1, r2, #1
 801f920:	9807      	ldr	r0, [sp, #28]
 801f922:	4288      	cmp	r0, r1
 801f924:	dd31      	ble.n	801f98a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801f926:	2b00      	cmp	r3, #0
 801f928:	db2f      	blt.n	801f98a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801f92a:	1c59      	adds	r1, r3, #1
 801f92c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f92e:	4288      	cmp	r0, r1
 801f930:	dd2b      	ble.n	801f98a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801f932:	9b06      	ldr	r3, [sp, #24]
 801f934:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f936:	3b01      	subs	r3, #1
 801f938:	992b      	ldr	r1, [sp, #172]	; 0xac
 801f93a:	fb02 1203 	mla	r2, r2, r3, r1
 801f93e:	1412      	asrs	r2, r2, #16
 801f940:	d42e      	bmi.n	801f9a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801f942:	3201      	adds	r2, #1
 801f944:	9907      	ldr	r1, [sp, #28]
 801f946:	4291      	cmp	r1, r2
 801f948:	dd2a      	ble.n	801f9a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801f94a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f94c:	fb02 4303 	mla	r3, r2, r3, r4
 801f950:	141b      	asrs	r3, r3, #16
 801f952:	d425      	bmi.n	801f9a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801f954:	3301      	adds	r3, #1
 801f956:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f958:	429a      	cmp	r2, r3
 801f95a:	dd21      	ble.n	801f9a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801f95c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f95e:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 801f962:	f103 0e03 	add.w	lr, r3, #3
 801f966:	9b06      	ldr	r3, [sp, #24]
 801f968:	9313      	str	r3, [sp, #76]	; 0x4c
 801f96a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f96c:	2b00      	cmp	r3, #0
 801f96e:	f300 81d2 	bgt.w	801fd16 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 801f972:	9b06      	ldr	r3, [sp, #24]
 801f974:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f97a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f97e:	4423      	add	r3, r4
 801f980:	930a      	str	r3, [sp, #40]	; 0x28
 801f982:	e161      	b.n	801fc48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 801f984:	1c51      	adds	r1, r2, #1
 801f986:	f040 8150 	bne.w	801fc2a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801f98a:	9907      	ldr	r1, [sp, #28]
 801f98c:	428a      	cmp	r2, r1
 801f98e:	f280 814c 	bge.w	801fc2a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801f992:	1c5a      	adds	r2, r3, #1
 801f994:	f2c0 8149 	blt.w	801fc2a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801f998:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f99a:	4293      	cmp	r3, r2
 801f99c:	f280 8145 	bge.w	801fc2a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801f9a0:	9b06      	ldr	r3, [sp, #24]
 801f9a2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801f9a4:	9314      	str	r3, [sp, #80]	; 0x50
 801f9a6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801f9aa:	9313      	str	r3, [sp, #76]	; 0x4c
 801f9ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f9ae:	2b00      	cmp	r3, #0
 801f9b0:	dddf      	ble.n	801f972 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801f9b2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f9b4:	1423      	asrs	r3, r4, #16
 801f9b6:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801f9ba:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801f9be:	1412      	asrs	r2, r2, #16
 801f9c0:	f100 8190 	bmi.w	801fce4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 801f9c4:	1c55      	adds	r5, r2, #1
 801f9c6:	9f07      	ldr	r7, [sp, #28]
 801f9c8:	42af      	cmp	r7, r5
 801f9ca:	f340 818d 	ble.w	801fce8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 801f9ce:	2b00      	cmp	r3, #0
 801f9d0:	f2c0 818a 	blt.w	801fce8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 801f9d4:	1c5d      	adds	r5, r3, #1
 801f9d6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801f9d8:	42af      	cmp	r7, r5
 801f9da:	f340 8185 	ble.w	801fce8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 801f9de:	9d07      	ldr	r5, [sp, #28]
 801f9e0:	fb03 2305 	mla	r3, r3, r5, r2
 801f9e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f9e6:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801f9ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f9ee:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801f9f2:	2800      	cmp	r0, #0
 801f9f4:	f000 8167 	beq.w	801fcc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 801f9f8:	686a      	ldr	r2, [r5, #4]
 801f9fa:	920b      	str	r2, [sp, #44]	; 0x2c
 801f9fc:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801fa00:	2900      	cmp	r1, #0
 801fa02:	f000 8169 	beq.w	801fcd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801fa06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fa08:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801fa0a:	18aa      	adds	r2, r5, r2
 801fa0c:	59ed      	ldr	r5, [r5, r7]
 801fa0e:	6852      	ldr	r2, [r2, #4]
 801fa10:	9508      	str	r5, [sp, #32]
 801fa12:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801fa16:	0e15      	lsrs	r5, r2, #24
 801fa18:	920c      	str	r2, [sp, #48]	; 0x30
 801fa1a:	b280      	uxth	r0, r0
 801fa1c:	b289      	uxth	r1, r1
 801fa1e:	fb00 fb01 	mul.w	fp, r0, r1
 801fa22:	0100      	lsls	r0, r0, #4
 801fa24:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 801fa28:	eba0 090b 	sub.w	r9, r0, fp
 801fa2c:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801fa30:	b289      	uxth	r1, r1
 801fa32:	fa1f f989 	uxth.w	r9, r9
 801fa36:	1a52      	subs	r2, r2, r1
 801fa38:	fb09 f008 	mul.w	r0, r9, r8
 801fa3c:	b292      	uxth	r2, r2
 801fa3e:	fb02 000c 	mla	r0, r2, ip, r0
 801fa42:	fb01 000a 	mla	r0, r1, sl, r0
 801fa46:	fb0b 0005 	mla	r0, fp, r5, r0
 801fa4a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801fa4e:	2800      	cmp	r0, #0
 801fa50:	f000 80e0 	beq.w	801fc14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801fa54:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fa58:	d01b      	beq.n	801fa92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 801fa5a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801fa5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fa62:	fb0c fe0e 	mul.w	lr, ip, lr
 801fa66:	fb0c fc03 	mul.w	ip, ip, r3
 801fa6a:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801fa6e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801fa72:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fa76:	4473      	add	r3, lr
 801fa78:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801fa7c:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801fa80:	0a1b      	lsrs	r3, r3, #8
 801fa82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fa86:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fa8a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801fa8e:	ea43 030e 	orr.w	r3, r3, lr
 801fa92:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801fa96:	d01e      	beq.n	801fad6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801fa98:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801fa9a:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801fa9e:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 801faa2:	fb08 fc0c 	mul.w	ip, r8, ip
 801faa6:	fb08 f80e 	mul.w	r8, r8, lr
 801faaa:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801faae:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fab2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fab6:	44e6      	add	lr, ip
 801fab8:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801fabc:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801fac0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fac4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801fac8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801facc:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801fad0:	ea4e 0708 	orr.w	r7, lr, r8
 801fad4:	970b      	str	r7, [sp, #44]	; 0x2c
 801fad6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801fada:	d01e      	beq.n	801fb1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801fadc:	9f08      	ldr	r7, [sp, #32]
 801fade:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801fae2:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801fae6:	fb0a f808 	mul.w	r8, sl, r8
 801faea:	fb0a fa0c 	mul.w	sl, sl, ip
 801faee:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801faf2:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801faf6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fafa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fafe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fb02:	44c6      	add	lr, r8
 801fb04:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb08:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb0c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fb10:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fb14:	ea4e 070a 	orr.w	r7, lr, sl
 801fb18:	9708      	str	r7, [sp, #32]
 801fb1a:	2dff      	cmp	r5, #255	; 0xff
 801fb1c:	d01d      	beq.n	801fb5a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 801fb1e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801fb20:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801fb24:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801fb28:	fb05 f808 	mul.w	r8, r5, r8
 801fb2c:	fb05 f50c 	mul.w	r5, r5, ip
 801fb30:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801fb34:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801fb38:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801fb3c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fb40:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801fb44:	44c6      	add	lr, r8
 801fb46:	0a2d      	lsrs	r5, r5, #8
 801fb48:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb4c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801fb50:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fb54:	ea4e 0505 	orr.w	r5, lr, r5
 801fb58:	950c      	str	r5, [sp, #48]	; 0x30
 801fb5a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801fb5c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801fb60:	9f08      	ldr	r7, [sp, #32]
 801fb62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fb66:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fb6a:	fb09 f505 	mul.w	r5, r9, r5
 801fb6e:	fb02 550c 	mla	r5, r2, ip, r5
 801fb72:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801fb76:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801fb78:	fb01 550c 	mla	r5, r1, ip, r5
 801fb7c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801fb80:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801fb82:	fb0b 550c 	mla	r5, fp, ip, r5
 801fb86:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801fb8a:	fb09 f90c 	mul.w	r9, r9, ip
 801fb8e:	0a2d      	lsrs	r5, r5, #8
 801fb90:	fb02 9303 	mla	r3, r2, r3, r9
 801fb94:	9a08      	ldr	r2, [sp, #32]
 801fb96:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fb9a:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801fb9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fba0:	fb01 330e 	mla	r3, r1, lr, r3
 801fba4:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801fba8:	fb0b 3b01 	mla	fp, fp, r1, r3
 801fbac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fbae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801fbb0:	4343      	muls	r3, r0
 801fbb2:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801fbb6:	1c58      	adds	r0, r3, #1
 801fbb8:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801fbbc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801fbc0:	ea45 050b 	orr.w	r5, r5, fp
 801fbc4:	7833      	ldrb	r3, [r6, #0]
 801fbc6:	b2ea      	uxtb	r2, r5
 801fbc8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801fbcc:	fb12 f201 	smulbb	r2, r2, r1
 801fbd0:	b2c0      	uxtb	r0, r0
 801fbd2:	fb03 2300 	mla	r3, r3, r0, r2
 801fbd6:	b29b      	uxth	r3, r3
 801fbd8:	1c5a      	adds	r2, r3, #1
 801fbda:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fbde:	7872      	ldrb	r2, [r6, #1]
 801fbe0:	fb12 f200 	smulbb	r2, r2, r0
 801fbe4:	121b      	asrs	r3, r3, #8
 801fbe6:	7033      	strb	r3, [r6, #0]
 801fbe8:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801fbec:	0c2d      	lsrs	r5, r5, #16
 801fbee:	fb03 2301 	mla	r3, r3, r1, r2
 801fbf2:	b29b      	uxth	r3, r3
 801fbf4:	1c5a      	adds	r2, r3, #1
 801fbf6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fbfa:	121b      	asrs	r3, r3, #8
 801fbfc:	7073      	strb	r3, [r6, #1]
 801fbfe:	78b3      	ldrb	r3, [r6, #2]
 801fc00:	fb13 f000 	smulbb	r0, r3, r0
 801fc04:	fb05 0501 	mla	r5, r5, r1, r0
 801fc08:	b2ad      	uxth	r5, r5
 801fc0a:	1c6b      	adds	r3, r5, #1
 801fc0c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801fc10:	122d      	asrs	r5, r5, #8
 801fc12:	70b5      	strb	r5, [r6, #2]
 801fc14:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801fc16:	3603      	adds	r6, #3
 801fc18:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801fc1a:	4413      	add	r3, r2
 801fc1c:	932b      	str	r3, [sp, #172]	; 0xac
 801fc1e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fc20:	441c      	add	r4, r3
 801fc22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fc24:	3b01      	subs	r3, #1
 801fc26:	9314      	str	r3, [sp, #80]	; 0x50
 801fc28:	e6c0      	b.n	801f9ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801fc2a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801fc2c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801fc2e:	4413      	add	r3, r2
 801fc30:	932b      	str	r3, [sp, #172]	; 0xac
 801fc32:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fc34:	441c      	add	r4, r3
 801fc36:	9b06      	ldr	r3, [sp, #24]
 801fc38:	3b01      	subs	r3, #1
 801fc3a:	9306      	str	r3, [sp, #24]
 801fc3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fc3e:	3303      	adds	r3, #3
 801fc40:	930a      	str	r3, [sp, #40]	; 0x28
 801fc42:	e664      	b.n	801f90e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801fc44:	f47f ae75 	bne.w	801f932 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 801fc48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fc4a:	2b00      	cmp	r3, #0
 801fc4c:	f340 819a 	ble.w	801ff84 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 801fc50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fc54:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fc56:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801fc5a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801fc5e:	eef0 6a48 	vmov.f32	s13, s16
 801fc62:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801fc66:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801fc6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc6e:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 801fc72:	eef0 6a68 	vmov.f32	s13, s17
 801fc76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc7a:	ee16 4a90 	vmov	r4, s13
 801fc7e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fc82:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fc86:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fc8a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fc8e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fc92:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fc96:	ee18 2a10 	vmov	r2, s16
 801fc9a:	eeb0 8a47 	vmov.f32	s16, s14
 801fc9e:	fb92 f3f3 	sdiv	r3, r2, r3
 801fca2:	ee18 2a90 	vmov	r2, s17
 801fca6:	932d      	str	r3, [sp, #180]	; 0xb4
 801fca8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fcaa:	eef0 8a67 	vmov.f32	s17, s15
 801fcae:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcb2:	932e      	str	r3, [sp, #184]	; 0xb8
 801fcb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fcb6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801fcb8:	3b01      	subs	r3, #1
 801fcba:	9312      	str	r3, [sp, #72]	; 0x48
 801fcbc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fcbe:	bf08      	it	eq
 801fcc0:	4613      	moveq	r3, r2
 801fcc2:	9306      	str	r3, [sp, #24]
 801fcc4:	e61c      	b.n	801f900 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801fcc6:	b151      	cbz	r1, 801fcde <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 801fcc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fcca:	58aa      	ldr	r2, [r5, r2]
 801fccc:	25ff      	movs	r5, #255	; 0xff
 801fcce:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 801fcd2:	9208      	str	r2, [sp, #32]
 801fcd4:	46a8      	mov	r8, r5
 801fcd6:	e6a0      	b.n	801fa1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 801fcd8:	25ff      	movs	r5, #255	; 0xff
 801fcda:	46aa      	mov	sl, r5
 801fcdc:	e69d      	b.n	801fa1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 801fcde:	25ff      	movs	r5, #255	; 0xff
 801fce0:	46aa      	mov	sl, r5
 801fce2:	e7f7      	b.n	801fcd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 801fce4:	1c57      	adds	r7, r2, #1
 801fce6:	d195      	bne.n	801fc14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801fce8:	9d07      	ldr	r5, [sp, #28]
 801fcea:	4295      	cmp	r5, r2
 801fcec:	dd92      	ble.n	801fc14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801fcee:	1c5d      	adds	r5, r3, #1
 801fcf0:	db90      	blt.n	801fc14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801fcf2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801fcf4:	429d      	cmp	r5, r3
 801fcf6:	dd8d      	ble.n	801fc14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801fcf8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801fcfa:	9201      	str	r2, [sp, #4]
 801fcfc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fcfe:	e9cd 3002 	strd	r3, r0, [sp, #8]
 801fd02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fd04:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801fd06:	9300      	str	r3, [sp, #0]
 801fd08:	9b07      	ldr	r3, [sp, #28]
 801fd0a:	e9cd 1504 	strd	r1, r5, [sp, #16]
 801fd0e:	4631      	mov	r1, r6
 801fd10:	f7ff fc68 	bl	801f5e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801fd14:	e77e      	b.n	801fc14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801fd16:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801fd18:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801fd1c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801fd1e:	9d07      	ldr	r5, [sp, #28]
 801fd20:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801fd24:	1412      	asrs	r2, r2, #16
 801fd26:	1423      	asrs	r3, r4, #16
 801fd28:	fb05 2303 	mla	r3, r5, r3, r2
 801fd2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fd2e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801fd32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801fd36:	0e1e      	lsrs	r6, r3, #24
 801fd38:	2900      	cmp	r1, #0
 801fd3a:	f000 8114 	beq.w	801ff66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 801fd3e:	686a      	ldr	r2, [r5, #4]
 801fd40:	920d      	str	r2, [sp, #52]	; 0x34
 801fd42:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801fd46:	2800      	cmp	r0, #0
 801fd48:	f000 8116 	beq.w	801ff78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 801fd4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fd4e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801fd50:	18aa      	adds	r2, r5, r2
 801fd52:	59ed      	ldr	r5, [r5, r7]
 801fd54:	6852      	ldr	r2, [r2, #4]
 801fd56:	9509      	str	r5, [sp, #36]	; 0x24
 801fd58:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801fd5c:	0e15      	lsrs	r5, r2, #24
 801fd5e:	920f      	str	r2, [sp, #60]	; 0x3c
 801fd60:	b289      	uxth	r1, r1
 801fd62:	b280      	uxth	r0, r0
 801fd64:	fb01 fa00 	mul.w	sl, r1, r0
 801fd68:	0109      	lsls	r1, r1, #4
 801fd6a:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801fd6e:	eba1 080a 	sub.w	r8, r1, sl
 801fd72:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801fd76:	b280      	uxth	r0, r0
 801fd78:	fa1f f888 	uxth.w	r8, r8
 801fd7c:	1a12      	subs	r2, r2, r0
 801fd7e:	fb08 f10c 	mul.w	r1, r8, ip
 801fd82:	b292      	uxth	r2, r2
 801fd84:	fb02 1106 	mla	r1, r2, r6, r1
 801fd88:	fb00 1109 	mla	r1, r0, r9, r1
 801fd8c:	fb0a 1105 	mla	r1, sl, r5, r1
 801fd90:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fd94:	2900      	cmp	r1, #0
 801fd96:	f000 80da 	beq.w	801ff4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 801fd9a:	2eff      	cmp	r6, #255	; 0xff
 801fd9c:	d016      	beq.n	801fdcc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 801fd9e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801fda2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fda6:	4377      	muls	r7, r6
 801fda8:	435e      	muls	r6, r3
 801fdaa:	0a3b      	lsrs	r3, r7, #8
 801fdac:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fdb0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fdb4:	443b      	add	r3, r7
 801fdb6:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801fdba:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801fdbe:	0a1b      	lsrs	r3, r3, #8
 801fdc0:	0a3f      	lsrs	r7, r7, #8
 801fdc2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fdc6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fdca:	433b      	orrs	r3, r7
 801fdcc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fdd0:	d01d      	beq.n	801fe0e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 801fdd2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801fdd4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801fdd6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fdda:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fdde:	fb0c f606 	mul.w	r6, ip, r6
 801fde2:	fb0c fc07 	mul.w	ip, ip, r7
 801fde6:	0a37      	lsrs	r7, r6, #8
 801fde8:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801fdec:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fdf0:	4437      	add	r7, r6
 801fdf2:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801fdf6:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801fdfa:	0a3f      	lsrs	r7, r7, #8
 801fdfc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fe00:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fe04:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fe08:	ea47 060c 	orr.w	r6, r7, ip
 801fe0c:	960d      	str	r6, [sp, #52]	; 0x34
 801fe0e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fe12:	d01d      	beq.n	801fe50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 801fe14:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801fe16:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801fe1a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fe1e:	fb09 fc0c 	mul.w	ip, r9, ip
 801fe22:	fb09 f906 	mul.w	r9, r9, r6
 801fe26:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801fe2a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fe2e:	f509 7680 	add.w	r6, r9, #256	; 0x100
 801fe32:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fe36:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801fe3a:	4467      	add	r7, ip
 801fe3c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fe40:	0a3f      	lsrs	r7, r7, #8
 801fe42:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801fe46:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fe4a:	ea47 0609 	orr.w	r6, r7, r9
 801fe4e:	9609      	str	r6, [sp, #36]	; 0x24
 801fe50:	2dff      	cmp	r5, #255	; 0xff
 801fe52:	d01a      	beq.n	801fe8a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 801fe54:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801fe56:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801fe5a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fe5e:	fb05 fc0c 	mul.w	ip, r5, ip
 801fe62:	4375      	muls	r5, r6
 801fe64:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801fe68:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fe6c:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801fe70:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fe74:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801fe78:	4467      	add	r7, ip
 801fe7a:	0a2d      	lsrs	r5, r5, #8
 801fe7c:	0a3f      	lsrs	r7, r7, #8
 801fe7e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801fe82:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fe86:	433d      	orrs	r5, r7
 801fe88:	950f      	str	r5, [sp, #60]	; 0x3c
 801fe8a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801fe8c:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801fe90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fe94:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fe98:	fb08 f505 	mul.w	r5, r8, r5
 801fe9c:	fb02 5506 	mla	r5, r2, r6, r5
 801fea0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801fea2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fea6:	fb00 5506 	mla	r5, r0, r6, r5
 801feaa:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801feac:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801feb0:	fb0a 5506 	mla	r5, sl, r6, r5
 801feb4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801feb6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801feba:	0a2d      	lsrs	r5, r5, #8
 801febc:	fb08 f806 	mul.w	r8, r8, r6
 801fec0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fec4:	fb02 8303 	mla	r3, r2, r3, r8
 801fec8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801feca:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801fece:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fed0:	fb00 3307 	mla	r3, r0, r7, r3
 801fed4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801fed8:	fb0a 3c0c 	mla	ip, sl, ip, r3
 801fedc:	fb01 f30b 	mul.w	r3, r1, fp
 801fee0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fee4:	1c59      	adds	r1, r3, #1
 801fee6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801feea:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801feee:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801fef2:	ea45 050c 	orr.w	r5, r5, ip
 801fef6:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801fefa:	b2ea      	uxtb	r2, r5
 801fefc:	b2c9      	uxtb	r1, r1
 801fefe:	fb12 f20b 	smulbb	r2, r2, fp
 801ff02:	fb03 2301 	mla	r3, r3, r1, r2
 801ff06:	b29b      	uxth	r3, r3
 801ff08:	1c5a      	adds	r2, r3, #1
 801ff0a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ff0e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801ff12:	fb12 f201 	smulbb	r2, r2, r1
 801ff16:	121b      	asrs	r3, r3, #8
 801ff18:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801ff1c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801ff20:	0c2d      	lsrs	r5, r5, #16
 801ff22:	fb03 230b 	mla	r3, r3, fp, r2
 801ff26:	b29b      	uxth	r3, r3
 801ff28:	1c5a      	adds	r2, r3, #1
 801ff2a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ff2e:	121b      	asrs	r3, r3, #8
 801ff30:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801ff34:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801ff38:	fb13 f101 	smulbb	r1, r3, r1
 801ff3c:	fb05 150b 	mla	r5, r5, fp, r1
 801ff40:	b2ad      	uxth	r5, r5
 801ff42:	1c69      	adds	r1, r5, #1
 801ff44:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801ff48:	122d      	asrs	r5, r5, #8
 801ff4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801ff4e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ff50:	f10e 0e03 	add.w	lr, lr, #3
 801ff54:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ff56:	4413      	add	r3, r2
 801ff58:	932b      	str	r3, [sp, #172]	; 0xac
 801ff5a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ff5c:	441c      	add	r4, r3
 801ff5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ff60:	3b01      	subs	r3, #1
 801ff62:	9313      	str	r3, [sp, #76]	; 0x4c
 801ff64:	e501      	b.n	801f96a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 801ff66:	b150      	cbz	r0, 801ff7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 801ff68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ff6a:	58aa      	ldr	r2, [r5, r2]
 801ff6c:	25ff      	movs	r5, #255	; 0xff
 801ff6e:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801ff72:	9209      	str	r2, [sp, #36]	; 0x24
 801ff74:	46ac      	mov	ip, r5
 801ff76:	e6f3      	b.n	801fd60 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 801ff78:	25ff      	movs	r5, #255	; 0xff
 801ff7a:	46a9      	mov	r9, r5
 801ff7c:	e6f0      	b.n	801fd60 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 801ff7e:	25ff      	movs	r5, #255	; 0xff
 801ff80:	46a9      	mov	r9, r5
 801ff82:	e7f7      	b.n	801ff74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 801ff84:	b019      	add	sp, #100	; 0x64
 801ff86:	ecbd 8b08 	vpop	{d8-d11}
 801ff8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ff90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801ff90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff94:	b085      	sub	sp, #20
 801ff96:	7888      	ldrb	r0, [r1, #2]
 801ff98:	4691      	mov	r9, r2
 801ff9a:	9000      	str	r0, [sp, #0]
 801ff9c:	7848      	ldrb	r0, [r1, #1]
 801ff9e:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 801ffa2:	9001      	str	r0, [sp, #4]
 801ffa4:	7808      	ldrb	r0, [r1, #0]
 801ffa6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801ffaa:	9002      	str	r0, [sp, #8]
 801ffac:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801ffb0:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 801ffb4:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 801ffb8:	fb04 c603 	mla	r6, r4, r3, ip
 801ffbc:	2c00      	cmp	r4, #0
 801ffbe:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 801ffc2:	9a00      	ldr	r2, [sp, #0]
 801ffc4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801ffc8:	9a01      	ldr	r2, [sp, #4]
 801ffca:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801ffce:	db3a      	blt.n	8020046 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 801ffd0:	45a0      	cmp	r8, r4
 801ffd2:	dd38      	ble.n	8020046 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 801ffd4:	f1bc 0f00 	cmp.w	ip, #0
 801ffd8:	db33      	blt.n	8020042 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 801ffda:	4563      	cmp	r3, ip
 801ffdc:	dd31      	ble.n	8020042 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 801ffde:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 801ffe2:	f11c 0601 	adds.w	r6, ip, #1
 801ffe6:	d431      	bmi.n	802004c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 801ffe8:	42b3      	cmp	r3, r6
 801ffea:	dd2f      	ble.n	802004c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 801ffec:	b375      	cbz	r5, 802004c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 801ffee:	f8de 6004 	ldr.w	r6, [lr, #4]
 801fff2:	3401      	adds	r4, #1
 801fff4:	d42e      	bmi.n	8020054 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 801fff6:	45a0      	cmp	r8, r4
 801fff8:	dd2c      	ble.n	8020054 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 801fffa:	b35f      	cbz	r7, 8020054 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 801fffc:	f1bc 0f00 	cmp.w	ip, #0
 8020000:	db26      	blt.n	8020050 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8020002:	4563      	cmp	r3, ip
 8020004:	dd24      	ble.n	8020050 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8020006:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 802000a:	f11c 0c01 	adds.w	ip, ip, #1
 802000e:	d405      	bmi.n	802001c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8020010:	4563      	cmp	r3, ip
 8020012:	dd03      	ble.n	802001c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8020014:	b115      	cbz	r5, 802001c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8020016:	3301      	adds	r3, #1
 8020018:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 802001c:	2d0f      	cmp	r5, #15
 802001e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8020022:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020026:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802002a:	ea4f 6810 	mov.w	r8, r0, lsr #24
 802002e:	d801      	bhi.n	8020034 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8020030:	2f0f      	cmp	r7, #15
 8020032:	d911      	bls.n	8020058 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 8020034:	4b77      	ldr	r3, [pc, #476]	; (8020214 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 8020036:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802003a:	4a77      	ldr	r2, [pc, #476]	; (8020218 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 802003c:	4877      	ldr	r0, [pc, #476]	; (802021c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 802003e:	f003 f831 	bl	80230a4 <__assert_func>
 8020042:	4602      	mov	r2, r0
 8020044:	e7cd      	b.n	801ffe2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 8020046:	4606      	mov	r6, r0
 8020048:	4602      	mov	r2, r0
 802004a:	e7d2      	b.n	801fff2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 802004c:	4606      	mov	r6, r0
 802004e:	e7d0      	b.n	801fff2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8020050:	4604      	mov	r4, r0
 8020052:	e7da      	b.n	802000a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 8020054:	4604      	mov	r4, r0
 8020056:	e7e1      	b.n	802001c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8020058:	b2ab      	uxth	r3, r5
 802005a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802005e:	b2bf      	uxth	r7, r7
 8020060:	fb03 fe07 	mul.w	lr, r3, r7
 8020064:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8020068:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802006c:	eba3 0c0e 	sub.w	ip, r3, lr
 8020070:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8020074:	b2bf      	uxth	r7, r7
 8020076:	fa1f fc8c 	uxth.w	ip, ip
 802007a:	eba5 0507 	sub.w	r5, r5, r7
 802007e:	fb0c f30a 	mul.w	r3, ip, sl
 8020082:	b2ad      	uxth	r5, r5
 8020084:	fb05 330b 	mla	r3, r5, fp, r3
 8020088:	fb07 3309 	mla	r3, r7, r9, r3
 802008c:	fb0e 3308 	mla	r3, lr, r8, r3
 8020090:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020094:	9303      	str	r3, [sp, #12]
 8020096:	d018      	beq.n	80200ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 8020098:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802009c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80200a0:	fb0b f303 	mul.w	r3, fp, r3
 80200a4:	fb0b fb02 	mul.w	fp, fp, r2
 80200a8:	0a1a      	lsrs	r2, r3, #8
 80200aa:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80200ae:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80200b2:	441a      	add	r2, r3
 80200b4:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80200b8:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80200bc:	0a12      	lsrs	r2, r2, #8
 80200be:	0a1b      	lsrs	r3, r3, #8
 80200c0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80200c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80200c8:	431a      	orrs	r2, r3
 80200ca:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80200ce:	d019      	beq.n	8020104 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 80200d0:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80200d4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80200d8:	fb0a fb0b 	mul.w	fp, sl, fp
 80200dc:	fb0a fa06 	mul.w	sl, sl, r6
 80200e0:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80200e4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80200e8:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 80200ec:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80200f0:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80200f4:	445e      	add	r6, fp
 80200f6:	0a1b      	lsrs	r3, r3, #8
 80200f8:	0a36      	lsrs	r6, r6, #8
 80200fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80200fe:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020102:	431e      	orrs	r6, r3
 8020104:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020108:	d019      	beq.n	802013e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 802010a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802010e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020112:	fb09 fa0a 	mul.w	sl, r9, sl
 8020116:	fb09 f904 	mul.w	r9, r9, r4
 802011a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802011e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020122:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8020126:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802012a:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 802012e:	4454      	add	r4, sl
 8020130:	0a1b      	lsrs	r3, r3, #8
 8020132:	0a24      	lsrs	r4, r4, #8
 8020134:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020138:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802013c:	431c      	orrs	r4, r3
 802013e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020142:	d019      	beq.n	8020178 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 8020144:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8020148:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802014c:	fb08 f909 	mul.w	r9, r8, r9
 8020150:	fb08 f800 	mul.w	r8, r8, r0
 8020154:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8020158:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802015c:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8020160:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020164:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8020168:	4448      	add	r0, r9
 802016a:	0a1b      	lsrs	r3, r3, #8
 802016c:	0a00      	lsrs	r0, r0, #8
 802016e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020172:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020176:	4318      	orrs	r0, r3
 8020178:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802017c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020180:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8020184:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020188:	fb0c f808 	mul.w	r8, ip, r8
 802018c:	fb0c f606 	mul.w	r6, ip, r6
 8020190:	fb05 8803 	mla	r8, r5, r3, r8
 8020194:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8020198:	fb05 6202 	mla	r2, r5, r2, r6
 802019c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80201a0:	fb07 8803 	mla	r8, r7, r3, r8
 80201a4:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80201a8:	fb07 2704 	mla	r7, r7, r4, r2
 80201ac:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80201b0:	fb0e 8303 	mla	r3, lr, r3, r8
 80201b4:	fb0e 7e00 	mla	lr, lr, r0, r7
 80201b8:	9802      	ldr	r0, [sp, #8]
 80201ba:	0a1b      	lsrs	r3, r3, #8
 80201bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80201c0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80201c4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80201c8:	ea43 0e0e 	orr.w	lr, r3, lr
 80201cc:	9b03      	ldr	r3, [sp, #12]
 80201ce:	43db      	mvns	r3, r3
 80201d0:	b2db      	uxtb	r3, r3
 80201d2:	4358      	muls	r0, r3
 80201d4:	1c42      	adds	r2, r0, #1
 80201d6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80201da:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 80201de:	700a      	strb	r2, [r1, #0]
 80201e0:	9a01      	ldr	r2, [sp, #4]
 80201e2:	435a      	muls	r2, r3
 80201e4:	1c50      	adds	r0, r2, #1
 80201e6:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80201ea:	ea4f 221e 	mov.w	r2, lr, lsr #8
 80201ee:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80201f2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80201f6:	704a      	strb	r2, [r1, #1]
 80201f8:	9a00      	ldr	r2, [sp, #0]
 80201fa:	435a      	muls	r2, r3
 80201fc:	4613      	mov	r3, r2
 80201fe:	3201      	adds	r2, #1
 8020200:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020204:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8020208:	f881 e002 	strb.w	lr, [r1, #2]
 802020c:	b005      	add	sp, #20
 802020e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020212:	bf00      	nop
 8020214:	080292e4 	.word	0x080292e4
 8020218:	080297da 	.word	0x080297da
 802021c:	080293ad 	.word	0x080293ad

08020220 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020224:	ed2d 8b08 	vpush	{d8-d11}
 8020228:	b097      	sub	sp, #92	; 0x5c
 802022a:	eeb0 aa40 	vmov.f32	s20, s0
 802022e:	eef0 9a60 	vmov.f32	s19, s1
 8020232:	9306      	str	r3, [sp, #24]
 8020234:	eeb0 9a41 	vmov.f32	s18, s2
 8020238:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 802023c:	eeb0 8a62 	vmov.f32	s16, s5
 8020240:	9214      	str	r2, [sp, #80]	; 0x50
 8020242:	eef0 8a43 	vmov.f32	s17, s6
 8020246:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020248:	eef0 ba44 	vmov.f32	s23, s8
 802024c:	9307      	str	r3, [sp, #28]
 802024e:	eeb0 ba64 	vmov.f32	s22, s9
 8020252:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8020256:	eef0 aa45 	vmov.f32	s21, s10
 802025a:	9015      	str	r0, [sp, #84]	; 0x54
 802025c:	9112      	str	r1, [sp, #72]	; 0x48
 802025e:	6850      	ldr	r0, [r2, #4]
 8020260:	9310      	str	r3, [sp, #64]	; 0x40
 8020262:	6812      	ldr	r2, [r2, #0]
 8020264:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8020266:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802026a:	fb00 1303 	mla	r3, r0, r3, r1
 802026e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020272:	18d3      	adds	r3, r2, r3
 8020274:	930a      	str	r3, [sp, #40]	; 0x28
 8020276:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020278:	681b      	ldr	r3, [r3, #0]
 802027a:	9311      	str	r3, [sp, #68]	; 0x44
 802027c:	9b07      	ldr	r3, [sp, #28]
 802027e:	009b      	lsls	r3, r3, #2
 8020280:	930e      	str	r3, [sp, #56]	; 0x38
 8020282:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020284:	2b00      	cmp	r3, #0
 8020286:	dc03      	bgt.n	8020290 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8020288:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802028a:	2b00      	cmp	r3, #0
 802028c:	f340 832e 	ble.w	80208ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8020290:	9b06      	ldr	r3, [sp, #24]
 8020292:	2b00      	cmp	r3, #0
 8020294:	f340 8186 	ble.w	80205a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 8020298:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802029a:	1423      	asrs	r3, r4, #16
 802029c:	1412      	asrs	r2, r2, #16
 802029e:	d42f      	bmi.n	8020300 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 80202a0:	1c51      	adds	r1, r2, #1
 80202a2:	9807      	ldr	r0, [sp, #28]
 80202a4:	4288      	cmp	r0, r1
 80202a6:	dd2e      	ble.n	8020306 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80202a8:	2b00      	cmp	r3, #0
 80202aa:	db2c      	blt.n	8020306 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80202ac:	1c59      	adds	r1, r3, #1
 80202ae:	9810      	ldr	r0, [sp, #64]	; 0x40
 80202b0:	4288      	cmp	r0, r1
 80202b2:	dd28      	ble.n	8020306 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 80202b4:	9b06      	ldr	r3, [sp, #24]
 80202b6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80202b8:	3b01      	subs	r3, #1
 80202ba:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80202bc:	fb02 1203 	mla	r2, r2, r3, r1
 80202c0:	1412      	asrs	r2, r2, #16
 80202c2:	d42b      	bmi.n	802031c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80202c4:	3201      	adds	r2, #1
 80202c6:	9907      	ldr	r1, [sp, #28]
 80202c8:	4291      	cmp	r1, r2
 80202ca:	dd27      	ble.n	802031c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80202cc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80202ce:	fb02 4303 	mla	r3, r2, r3, r4
 80202d2:	141b      	asrs	r3, r3, #16
 80202d4:	d422      	bmi.n	802031c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80202d6:	3301      	adds	r3, #1
 80202d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80202da:	429a      	cmp	r2, r3
 80202dc:	dd1e      	ble.n	802031c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80202de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80202e0:	f8dd b018 	ldr.w	fp, [sp, #24]
 80202e4:	1cdd      	adds	r5, r3, #3
 80202e6:	f1bb 0f00 	cmp.w	fp, #0
 80202ea:	f300 81c4 	bgt.w	8020676 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 80202ee:	9b06      	ldr	r3, [sp, #24]
 80202f0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80202f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80202f6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80202fa:	4423      	add	r3, r4
 80202fc:	930a      	str	r3, [sp, #40]	; 0x28
 80202fe:	e153      	b.n	80205a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8020300:	1c51      	adds	r1, r2, #1
 8020302:	f040 8142 	bne.w	802058a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8020306:	9907      	ldr	r1, [sp, #28]
 8020308:	428a      	cmp	r2, r1
 802030a:	f280 813e 	bge.w	802058a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802030e:	1c5a      	adds	r2, r3, #1
 8020310:	f2c0 813b 	blt.w	802058a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8020314:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020316:	4293      	cmp	r3, r2
 8020318:	f280 8137 	bge.w	802058a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 802031c:	9b06      	ldr	r3, [sp, #24]
 802031e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8020320:	9313      	str	r3, [sp, #76]	; 0x4c
 8020322:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020324:	2b00      	cmp	r3, #0
 8020326:	dde2      	ble.n	80202ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8020328:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802032a:	1423      	asrs	r3, r4, #16
 802032c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802032e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8020332:	1409      	asrs	r1, r1, #16
 8020334:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8020338:	f100 8187 	bmi.w	802064a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 802033c:	1c4e      	adds	r6, r1, #1
 802033e:	9f07      	ldr	r7, [sp, #28]
 8020340:	42b7      	cmp	r7, r6
 8020342:	f340 8184 	ble.w	802064e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8020346:	2b00      	cmp	r3, #0
 8020348:	f2c0 8181 	blt.w	802064e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802034c:	1c5e      	adds	r6, r3, #1
 802034e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020350:	42b7      	cmp	r7, r6
 8020352:	f340 817c 	ble.w	802064e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8020356:	9e07      	ldr	r6, [sp, #28]
 8020358:	fb03 1306 	mla	r3, r3, r6, r1
 802035c:	9911      	ldr	r1, [sp, #68]	; 0x44
 802035e:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8020362:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8020366:	0e1f      	lsrs	r7, r3, #24
 8020368:	2a00      	cmp	r2, #0
 802036a:	f000 815c 	beq.w	8020626 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 802036e:	6871      	ldr	r1, [r6, #4]
 8020370:	910b      	str	r1, [sp, #44]	; 0x2c
 8020372:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8020376:	2800      	cmp	r0, #0
 8020378:	f000 815e 	beq.w	8020638 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 802037c:	990e      	ldr	r1, [sp, #56]	; 0x38
 802037e:	eb06 0c01 	add.w	ip, r6, r1
 8020382:	5876      	ldr	r6, [r6, r1]
 8020384:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8020388:	ea4f 6916 	mov.w	r9, r6, lsr #24
 802038c:	9608      	str	r6, [sp, #32]
 802038e:	0e0e      	lsrs	r6, r1, #24
 8020390:	910c      	str	r1, [sp, #48]	; 0x30
 8020392:	b292      	uxth	r2, r2
 8020394:	b280      	uxth	r0, r0
 8020396:	fb02 fa00 	mul.w	sl, r2, r0
 802039a:	0112      	lsls	r2, r2, #4
 802039c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80203a0:	eba2 080a 	sub.w	r8, r2, sl
 80203a4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80203a8:	b280      	uxth	r0, r0
 80203aa:	fa1f f888 	uxth.w	r8, r8
 80203ae:	1a09      	subs	r1, r1, r0
 80203b0:	fb08 f20e 	mul.w	r2, r8, lr
 80203b4:	b289      	uxth	r1, r1
 80203b6:	fb01 2207 	mla	r2, r1, r7, r2
 80203ba:	fb00 2209 	mla	r2, r0, r9, r2
 80203be:	fb0a 2206 	mla	r2, sl, r6, r2
 80203c2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80203c6:	2a00      	cmp	r2, #0
 80203c8:	f000 80d4 	beq.w	8020574 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 80203cc:	2fff      	cmp	r7, #255	; 0xff
 80203ce:	d01a      	beq.n	8020406 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 80203d0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80203d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80203d8:	fb07 fc0c 	mul.w	ip, r7, ip
 80203dc:	435f      	muls	r7, r3
 80203de:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80203e2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80203e6:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 80203ea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80203ee:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 80203f2:	4463      	add	r3, ip
 80203f4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80203f8:	0a1b      	lsrs	r3, r3, #8
 80203fa:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80203fe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020402:	ea43 030b 	orr.w	r3, r3, fp
 8020406:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802040a:	d01e      	beq.n	802044a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 802040c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802040e:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8020412:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020416:	fb0e fb0b 	mul.w	fp, lr, fp
 802041a:	fb0e fe07 	mul.w	lr, lr, r7
 802041e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8020422:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020426:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802042a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802042e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8020432:	44dc      	add	ip, fp
 8020434:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020438:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802043c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020440:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020444:	ea4c 070e 	orr.w	r7, ip, lr
 8020448:	970b      	str	r7, [sp, #44]	; 0x2c
 802044a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802044e:	d01e      	beq.n	802048e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8020450:	9f08      	ldr	r7, [sp, #32]
 8020452:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8020456:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802045a:	fb09 fe0e 	mul.w	lr, r9, lr
 802045e:	fb09 f907 	mul.w	r9, r9, r7
 8020462:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020466:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802046a:	f509 7780 	add.w	r7, r9, #256	; 0x100
 802046e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020472:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8020476:	44f4      	add	ip, lr
 8020478:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802047c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020480:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020484:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020488:	ea4c 0709 	orr.w	r7, ip, r9
 802048c:	9708      	str	r7, [sp, #32]
 802048e:	2eff      	cmp	r6, #255	; 0xff
 8020490:	d01c      	beq.n	80204cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8020492:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020494:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8020498:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802049c:	fb06 fe0e 	mul.w	lr, r6, lr
 80204a0:	437e      	muls	r6, r7
 80204a2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80204a6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80204aa:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80204ae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80204b2:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80204b6:	44f4      	add	ip, lr
 80204b8:	0a36      	lsrs	r6, r6, #8
 80204ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80204be:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80204c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80204c6:	ea4c 0606 	orr.w	r6, ip, r6
 80204ca:	960c      	str	r6, [sp, #48]	; 0x30
 80204cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80204ce:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80204d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80204d6:	2aff      	cmp	r2, #255	; 0xff
 80204d8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80204dc:	fb08 f606 	mul.w	r6, r8, r6
 80204e0:	fb01 6607 	mla	r6, r1, r7, r6
 80204e4:	9f08      	ldr	r7, [sp, #32]
 80204e6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80204ea:	fb00 6607 	mla	r6, r0, r7, r6
 80204ee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80204f0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80204f4:	fb0a 6607 	mla	r6, sl, r7, r6
 80204f8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80204fa:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80204fe:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8020502:	fb08 f807 	mul.w	r8, r8, r7
 8020506:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802050a:	fb01 8303 	mla	r3, r1, r3, r8
 802050e:	9908      	ldr	r1, [sp, #32]
 8020510:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8020514:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020516:	fb00 330c 	mla	r3, r0, ip, r3
 802051a:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802051e:	fb0a 3a00 	mla	sl, sl, r0, r3
 8020522:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020526:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802052a:	ea46 060a 	orr.w	r6, r6, sl
 802052e:	b2f0      	uxtb	r0, r6
 8020530:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8020534:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8020538:	f000 8084 	beq.w	8020644 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 802053c:	43d2      	mvns	r2, r2
 802053e:	782b      	ldrb	r3, [r5, #0]
 8020540:	b2d2      	uxtb	r2, r2
 8020542:	fb03 f702 	mul.w	r7, r3, r2
 8020546:	1c7b      	adds	r3, r7, #1
 8020548:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 802054c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020550:	702b      	strb	r3, [r5, #0]
 8020552:	786b      	ldrb	r3, [r5, #1]
 8020554:	fb03 f002 	mul.w	r0, r3, r2
 8020558:	1c43      	adds	r3, r0, #1
 802055a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802055e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8020562:	706b      	strb	r3, [r5, #1]
 8020564:	78ab      	ldrb	r3, [r5, #2]
 8020566:	4353      	muls	r3, r2
 8020568:	1c5a      	adds	r2, r3, #1
 802056a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802056e:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8020572:	70ae      	strb	r6, [r5, #2]
 8020574:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020576:	3503      	adds	r5, #3
 8020578:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802057a:	4413      	add	r3, r2
 802057c:	9329      	str	r3, [sp, #164]	; 0xa4
 802057e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020580:	441c      	add	r4, r3
 8020582:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020584:	3b01      	subs	r3, #1
 8020586:	9313      	str	r3, [sp, #76]	; 0x4c
 8020588:	e6cb      	b.n	8020322 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802058a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802058c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802058e:	4413      	add	r3, r2
 8020590:	9329      	str	r3, [sp, #164]	; 0xa4
 8020592:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020594:	441c      	add	r4, r3
 8020596:	9b06      	ldr	r3, [sp, #24]
 8020598:	3b01      	subs	r3, #1
 802059a:	9306      	str	r3, [sp, #24]
 802059c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802059e:	3303      	adds	r3, #3
 80205a0:	930a      	str	r3, [sp, #40]	; 0x28
 80205a2:	e675      	b.n	8020290 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80205a4:	f47f ae86 	bne.w	80202b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80205a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80205aa:	2b00      	cmp	r3, #0
 80205ac:	f340 819e 	ble.w	80208ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 80205b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80205b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80205b6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80205ba:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80205be:	eef0 6a48 	vmov.f32	s13, s16
 80205c2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80205c6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80205ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80205ce:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80205d2:	eef0 6a68 	vmov.f32	s13, s17
 80205d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80205da:	ee16 4a90 	vmov	r4, s13
 80205de:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80205e2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80205e6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80205ea:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80205ee:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80205f2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80205f6:	ee18 2a10 	vmov	r2, s16
 80205fa:	eeb0 8a47 	vmov.f32	s16, s14
 80205fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8020602:	ee18 2a90 	vmov	r2, s17
 8020606:	932b      	str	r3, [sp, #172]	; 0xac
 8020608:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802060a:	eef0 8a67 	vmov.f32	s17, s15
 802060e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020612:	932c      	str	r3, [sp, #176]	; 0xb0
 8020614:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020616:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020618:	3b01      	subs	r3, #1
 802061a:	9312      	str	r3, [sp, #72]	; 0x48
 802061c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802061e:	bf08      	it	eq
 8020620:	4613      	moveq	r3, r2
 8020622:	9306      	str	r3, [sp, #24]
 8020624:	e62d      	b.n	8020282 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8020626:	b150      	cbz	r0, 802063e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 8020628:	990e      	ldr	r1, [sp, #56]	; 0x38
 802062a:	5871      	ldr	r1, [r6, r1]
 802062c:	26ff      	movs	r6, #255	; 0xff
 802062e:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8020632:	9108      	str	r1, [sp, #32]
 8020634:	46b6      	mov	lr, r6
 8020636:	e6ac      	b.n	8020392 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 8020638:	26ff      	movs	r6, #255	; 0xff
 802063a:	46b1      	mov	r9, r6
 802063c:	e6a9      	b.n	8020392 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 802063e:	26ff      	movs	r6, #255	; 0xff
 8020640:	46b1      	mov	r9, r6
 8020642:	e7f7      	b.n	8020634 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8020644:	7028      	strb	r0, [r5, #0]
 8020646:	7069      	strb	r1, [r5, #1]
 8020648:	e793      	b.n	8020572 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 802064a:	1c4f      	adds	r7, r1, #1
 802064c:	d192      	bne.n	8020574 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 802064e:	9e07      	ldr	r6, [sp, #28]
 8020650:	428e      	cmp	r6, r1
 8020652:	dd8f      	ble.n	8020574 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8020654:	1c5e      	adds	r6, r3, #1
 8020656:	db8d      	blt.n	8020574 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8020658:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802065a:	429e      	cmp	r6, r3
 802065c:	dd8a      	ble.n	8020574 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 802065e:	9600      	str	r6, [sp, #0]
 8020660:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8020664:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8020668:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802066a:	4629      	mov	r1, r5
 802066c:	9b07      	ldr	r3, [sp, #28]
 802066e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020670:	f7ff fc8e 	bl	801ff90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8020674:	e77e      	b.n	8020574 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8020676:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020678:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802067c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802067e:	9e07      	ldr	r6, [sp, #28]
 8020680:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020684:	1409      	asrs	r1, r1, #16
 8020686:	1423      	asrs	r3, r4, #16
 8020688:	fb06 1303 	mla	r3, r6, r3, r1
 802068c:	9911      	ldr	r1, [sp, #68]	; 0x44
 802068e:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8020692:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8020696:	0e1f      	lsrs	r7, r3, #24
 8020698:	2a00      	cmp	r2, #0
 802069a:	f000 8113 	beq.w	80208c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 802069e:	6871      	ldr	r1, [r6, #4]
 80206a0:	910d      	str	r1, [sp, #52]	; 0x34
 80206a2:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80206a6:	2800      	cmp	r0, #0
 80206a8:	f000 8115 	beq.w	80208d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 80206ac:	990e      	ldr	r1, [sp, #56]	; 0x38
 80206ae:	eb06 0c01 	add.w	ip, r6, r1
 80206b2:	5876      	ldr	r6, [r6, r1]
 80206b4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80206b8:	ea4f 6916 	mov.w	r9, r6, lsr #24
 80206bc:	9609      	str	r6, [sp, #36]	; 0x24
 80206be:	0e0e      	lsrs	r6, r1, #24
 80206c0:	910f      	str	r1, [sp, #60]	; 0x3c
 80206c2:	b292      	uxth	r2, r2
 80206c4:	b280      	uxth	r0, r0
 80206c6:	fb02 fa00 	mul.w	sl, r2, r0
 80206ca:	0112      	lsls	r2, r2, #4
 80206cc:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80206d0:	eba2 080a 	sub.w	r8, r2, sl
 80206d4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80206d8:	b280      	uxth	r0, r0
 80206da:	fa1f f888 	uxth.w	r8, r8
 80206de:	1a09      	subs	r1, r1, r0
 80206e0:	fb08 f20e 	mul.w	r2, r8, lr
 80206e4:	b289      	uxth	r1, r1
 80206e6:	fb01 2207 	mla	r2, r1, r7, r2
 80206ea:	fb00 2209 	mla	r2, r0, r9, r2
 80206ee:	fb0a 2206 	mla	r2, sl, r6, r2
 80206f2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80206f6:	2a00      	cmp	r2, #0
 80206f8:	f000 80da 	beq.w	80208b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 80206fc:	2fff      	cmp	r7, #255	; 0xff
 80206fe:	d01a      	beq.n	8020736 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 8020700:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8020704:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020708:	fb07 fc0c 	mul.w	ip, r7, ip
 802070c:	435f      	muls	r7, r3
 802070e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020712:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020716:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802071a:	4463      	add	r3, ip
 802071c:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 8020720:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 8020724:	0a1b      	lsrs	r3, r3, #8
 8020726:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802072a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802072e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020732:	ea43 030c 	orr.w	r3, r3, ip
 8020736:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802073a:	d021      	beq.n	8020780 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 802073c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802073e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020742:	fb0e f707 	mul.w	r7, lr, r7
 8020746:	9713      	str	r7, [sp, #76]	; 0x4c
 8020748:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802074a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802074e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8020750:	fb0e fe0c 	mul.w	lr, lr, ip
 8020754:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020758:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802075c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020760:	44bc      	add	ip, r7
 8020762:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8020766:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 802076a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802076e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020772:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020776:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802077a:	ea4c 070e 	orr.w	r7, ip, lr
 802077e:	970d      	str	r7, [sp, #52]	; 0x34
 8020780:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020784:	d01e      	beq.n	80207c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 8020786:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020788:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802078c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020790:	fb09 fe0e 	mul.w	lr, r9, lr
 8020794:	fb09 f907 	mul.w	r9, r9, r7
 8020798:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802079c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80207a0:	f509 7780 	add.w	r7, r9, #256	; 0x100
 80207a4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80207a8:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80207ac:	44f4      	add	ip, lr
 80207ae:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80207b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80207b6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80207ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80207be:	ea4c 0709 	orr.w	r7, ip, r9
 80207c2:	9709      	str	r7, [sp, #36]	; 0x24
 80207c4:	2eff      	cmp	r6, #255	; 0xff
 80207c6:	d01c      	beq.n	8020802 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 80207c8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80207ca:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 80207ce:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80207d2:	fb06 fe0e 	mul.w	lr, r6, lr
 80207d6:	437e      	muls	r6, r7
 80207d8:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80207dc:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80207e0:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80207e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80207e8:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80207ec:	44f4      	add	ip, lr
 80207ee:	0a36      	lsrs	r6, r6, #8
 80207f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80207f4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80207f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80207fc:	ea4c 0606 	orr.w	r6, ip, r6
 8020800:	960f      	str	r6, [sp, #60]	; 0x3c
 8020802:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8020804:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8020808:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802080c:	2aff      	cmp	r2, #255	; 0xff
 802080e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020812:	fb08 f606 	mul.w	r6, r8, r6
 8020816:	fb01 6607 	mla	r6, r1, r7, r6
 802081a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802081c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020820:	fb00 6607 	mla	r6, r0, r7, r6
 8020824:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8020826:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802082a:	fb0a 6607 	mla	r6, sl, r7, r6
 802082e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020830:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020834:	ea4f 2616 	mov.w	r6, r6, lsr #8
 8020838:	fb08 f807 	mul.w	r8, r8, r7
 802083c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020840:	fb01 8303 	mla	r3, r1, r3, r8
 8020844:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020846:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802084a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802084c:	fb00 330c 	mla	r3, r0, ip, r3
 8020850:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8020854:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8020858:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802085c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020860:	ea46 060e 	orr.w	r6, r6, lr
 8020864:	b2f0      	uxtb	r0, r6
 8020866:	f3c6 2107 	ubfx	r1, r6, #8, #8
 802086a:	ea4f 4616 	mov.w	r6, r6, lsr #16
 802086e:	d038      	beq.n	80208e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8020870:	43d2      	mvns	r2, r2
 8020872:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8020876:	b2d2      	uxtb	r2, r2
 8020878:	4357      	muls	r7, r2
 802087a:	1c7b      	adds	r3, r7, #1
 802087c:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8020880:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020884:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 8020888:	4350      	muls	r0, r2
 802088a:	f805 3c03 	strb.w	r3, [r5, #-3]
 802088e:	1c43      	adds	r3, r0, #1
 8020890:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020894:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020898:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802089c:	4353      	muls	r3, r2
 802089e:	f805 1c02 	strb.w	r1, [r5, #-2]
 80208a2:	1c5a      	adds	r2, r3, #1
 80208a4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80208a8:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 80208ac:	f805 6c01 	strb.w	r6, [r5, #-1]
 80208b0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80208b2:	3503      	adds	r5, #3
 80208b4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80208b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80208ba:	4413      	add	r3, r2
 80208bc:	9329      	str	r3, [sp, #164]	; 0xa4
 80208be:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80208c0:	441c      	add	r4, r3
 80208c2:	e510      	b.n	80202e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 80208c4:	b150      	cbz	r0, 80208dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 80208c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80208c8:	5871      	ldr	r1, [r6, r1]
 80208ca:	26ff      	movs	r6, #255	; 0xff
 80208cc:	ea4f 6911 	mov.w	r9, r1, lsr #24
 80208d0:	9109      	str	r1, [sp, #36]	; 0x24
 80208d2:	46b6      	mov	lr, r6
 80208d4:	e6f5      	b.n	80206c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80208d6:	26ff      	movs	r6, #255	; 0xff
 80208d8:	46b1      	mov	r9, r6
 80208da:	e6f2      	b.n	80206c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80208dc:	26ff      	movs	r6, #255	; 0xff
 80208de:	46b1      	mov	r9, r6
 80208e0:	e7f7      	b.n	80208d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 80208e2:	f805 0c03 	strb.w	r0, [r5, #-3]
 80208e6:	f805 1c02 	strb.w	r1, [r5, #-2]
 80208ea:	e7df      	b.n	80208ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 80208ec:	b017      	add	sp, #92	; 0x5c
 80208ee:	ecbd 8b08 	vpop	{d8-d11}
 80208f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080208f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 80208f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208fc:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8020900:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8020904:	2800      	cmp	r0, #0
 8020906:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 802090a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 802090e:	fb0c 0e03 	mla	lr, ip, r3, r0
 8020912:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8020916:	db6b      	blt.n	80209f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8020918:	4580      	cmp	r8, r0
 802091a:	dd69      	ble.n	80209f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 802091c:	f1bc 0f00 	cmp.w	ip, #0
 8020920:	db66      	blt.n	80209f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8020922:	45e1      	cmp	r9, ip
 8020924:	dd64      	ble.n	80209f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 8020926:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802092a:	f01e 0f01 	tst.w	lr, #1
 802092e:	5d16      	ldrb	r6, [r2, r4]
 8020930:	bf0c      	ite	eq
 8020932:	f006 060f 	andeq.w	r6, r6, #15
 8020936:	1136      	asrne	r6, r6, #4
 8020938:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802093c:	b2f6      	uxtb	r6, r6
 802093e:	f110 0a01 	adds.w	sl, r0, #1
 8020942:	d457      	bmi.n	80209f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8020944:	45d0      	cmp	r8, sl
 8020946:	dd55      	ble.n	80209f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8020948:	f1bc 0f00 	cmp.w	ip, #0
 802094c:	db52      	blt.n	80209f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 802094e:	45e1      	cmp	r9, ip
 8020950:	dd50      	ble.n	80209f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8020952:	2f00      	cmp	r7, #0
 8020954:	f000 80ac 	beq.w	8020ab0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 8020958:	f10e 0b01 	add.w	fp, lr, #1
 802095c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8020960:	f01b 0f01 	tst.w	fp, #1
 8020964:	5d14      	ldrb	r4, [r2, r4]
 8020966:	bf0c      	ite	eq
 8020968:	f004 040f 	andeq.w	r4, r4, #15
 802096c:	1124      	asrne	r4, r4, #4
 802096e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8020972:	b2e4      	uxtb	r4, r4
 8020974:	2d00      	cmp	r5, #0
 8020976:	f000 8096 	beq.w	8020aa6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 802097a:	2800      	cmp	r0, #0
 802097c:	f10c 0c01 	add.w	ip, ip, #1
 8020980:	db3c      	blt.n	80209fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8020982:	4580      	cmp	r8, r0
 8020984:	dd3a      	ble.n	80209fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8020986:	f1bc 0f00 	cmp.w	ip, #0
 802098a:	db37      	blt.n	80209fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802098c:	45e1      	cmp	r9, ip
 802098e:	dd35      	ble.n	80209fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8020990:	eb03 0b0e 	add.w	fp, r3, lr
 8020994:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8020998:	f01b 0f01 	tst.w	fp, #1
 802099c:	5c10      	ldrb	r0, [r2, r0]
 802099e:	bf0c      	ite	eq
 80209a0:	f000 000f 	andeq.w	r0, r0, #15
 80209a4:	1100      	asrne	r0, r0, #4
 80209a6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80209aa:	b2c0      	uxtb	r0, r0
 80209ac:	f1ba 0f00 	cmp.w	sl, #0
 80209b0:	db26      	blt.n	8020a00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80209b2:	45d0      	cmp	r8, sl
 80209b4:	dd24      	ble.n	8020a00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80209b6:	f1bc 0f00 	cmp.w	ip, #0
 80209ba:	db21      	blt.n	8020a00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80209bc:	45e1      	cmp	r9, ip
 80209be:	dd1f      	ble.n	8020a00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 80209c0:	b307      	cbz	r7, 8020a04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 80209c2:	3301      	adds	r3, #1
 80209c4:	449e      	add	lr, r3
 80209c6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80209ca:	f01e 0f01 	tst.w	lr, #1
 80209ce:	5cd3      	ldrb	r3, [r2, r3]
 80209d0:	bf0c      	ite	eq
 80209d2:	f003 030f 	andeq.w	r3, r3, #15
 80209d6:	111b      	asrne	r3, r3, #4
 80209d8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80209dc:	b2db      	uxtb	r3, r3
 80209de:	2f0f      	cmp	r7, #15
 80209e0:	d911      	bls.n	8020a06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 80209e2:	4b35      	ldr	r3, [pc, #212]	; (8020ab8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 80209e4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80209e8:	4a34      	ldr	r2, [pc, #208]	; (8020abc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 80209ea:	4835      	ldr	r0, [pc, #212]	; (8020ac0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 80209ec:	f002 fb5a 	bl	80230a4 <__assert_func>
 80209f0:	2600      	movs	r6, #0
 80209f2:	e7a4      	b.n	802093e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 80209f4:	2400      	movs	r4, #0
 80209f6:	e7bd      	b.n	8020974 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 80209f8:	463c      	mov	r4, r7
 80209fa:	e7be      	b.n	802097a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 80209fc:	2000      	movs	r0, #0
 80209fe:	e7d5      	b.n	80209ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 8020a00:	2300      	movs	r3, #0
 8020a02:	e7ec      	b.n	80209de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 8020a04:	463b      	mov	r3, r7
 8020a06:	2d0f      	cmp	r5, #15
 8020a08:	d8eb      	bhi.n	80209e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8020a0a:	b2bf      	uxth	r7, r7
 8020a0c:	b2ad      	uxth	r5, r5
 8020a0e:	fb07 f205 	mul.w	r2, r7, r5
 8020a12:	013f      	lsls	r7, r7, #4
 8020a14:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8020a18:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8020a1c:	1abf      	subs	r7, r7, r2
 8020a1e:	b2ad      	uxth	r5, r5
 8020a20:	b2bf      	uxth	r7, r7
 8020a22:	ebac 0c05 	sub.w	ip, ip, r5
 8020a26:	437c      	muls	r4, r7
 8020a28:	fa1f fc8c 	uxth.w	ip, ip
 8020a2c:	fb06 440c 	mla	r4, r6, ip, r4
 8020a30:	fb05 4400 	mla	r4, r5, r0, r4
 8020a34:	fb02 4203 	mla	r2, r2, r3, r4
 8020a38:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020a3c:	b38a      	cbz	r2, 8020aa2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 8020a3e:	4b21      	ldr	r3, [pc, #132]	; (8020ac4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 8020a40:	681c      	ldr	r4, [r3, #0]
 8020a42:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8020a46:	b2e5      	uxtb	r5, r4
 8020a48:	4353      	muls	r3, r2
 8020a4a:	1c5a      	adds	r2, r3, #1
 8020a4c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020a50:	1212      	asrs	r2, r2, #8
 8020a52:	b290      	uxth	r0, r2
 8020a54:	43d2      	mvns	r2, r2
 8020a56:	fb15 f500 	smulbb	r5, r5, r0
 8020a5a:	b2d3      	uxtb	r3, r2
 8020a5c:	780a      	ldrb	r2, [r1, #0]
 8020a5e:	fb02 5203 	mla	r2, r2, r3, r5
 8020a62:	b292      	uxth	r2, r2
 8020a64:	1c55      	adds	r5, r2, #1
 8020a66:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8020a6a:	784d      	ldrb	r5, [r1, #1]
 8020a6c:	fb15 f503 	smulbb	r5, r5, r3
 8020a70:	1212      	asrs	r2, r2, #8
 8020a72:	700a      	strb	r2, [r1, #0]
 8020a74:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8020a78:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8020a7c:	fb02 5200 	mla	r2, r2, r0, r5
 8020a80:	b292      	uxth	r2, r2
 8020a82:	1c55      	adds	r5, r2, #1
 8020a84:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8020a88:	1212      	asrs	r2, r2, #8
 8020a8a:	704a      	strb	r2, [r1, #1]
 8020a8c:	788a      	ldrb	r2, [r1, #2]
 8020a8e:	fb12 f303 	smulbb	r3, r2, r3
 8020a92:	fb04 3300 	mla	r3, r4, r0, r3
 8020a96:	b29b      	uxth	r3, r3
 8020a98:	1c5a      	adds	r2, r3, #1
 8020a9a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020a9e:	121b      	asrs	r3, r3, #8
 8020aa0:	708b      	strb	r3, [r1, #2]
 8020aa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020aa6:	2f0f      	cmp	r7, #15
 8020aa8:	d89b      	bhi.n	80209e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 8020aaa:	462b      	mov	r3, r5
 8020aac:	4628      	mov	r0, r5
 8020aae:	e7ac      	b.n	8020a0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8020ab0:	2d00      	cmp	r5, #0
 8020ab2:	d1a1      	bne.n	80209f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8020ab4:	462c      	mov	r4, r5
 8020ab6:	e7f8      	b.n	8020aaa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 8020ab8:	080292e4 	.word	0x080292e4
 8020abc:	080297da 	.word	0x080297da
 8020ac0:	080293ad 	.word	0x080293ad
 8020ac4:	2000b1d4 	.word	0x2000b1d4

08020ac8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020acc:	ed2d 8b08 	vpush	{d8-d11}
 8020ad0:	b097      	sub	sp, #92	; 0x5c
 8020ad2:	eeb0 aa40 	vmov.f32	s20, s0
 8020ad6:	eef0 9a60 	vmov.f32	s19, s1
 8020ada:	9308      	str	r3, [sp, #32]
 8020adc:	eeb0 9a41 	vmov.f32	s18, s2
 8020ae0:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8020ae4:	eeb0 8a62 	vmov.f32	s16, s5
 8020ae8:	9214      	str	r2, [sp, #80]	; 0x50
 8020aea:	eef0 8a43 	vmov.f32	s17, s6
 8020aee:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020af0:	eef0 ba44 	vmov.f32	s23, s8
 8020af4:	9309      	str	r3, [sp, #36]	; 0x24
 8020af6:	eeb0 ba64 	vmov.f32	s22, s9
 8020afa:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8020afe:	eef0 aa45 	vmov.f32	s21, s10
 8020b02:	9015      	str	r0, [sp, #84]	; 0x54
 8020b04:	910c      	str	r1, [sp, #48]	; 0x30
 8020b06:	930e      	str	r3, [sp, #56]	; 0x38
 8020b08:	6850      	ldr	r0, [r2, #4]
 8020b0a:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 8020b0e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8020b12:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 8020b16:	fb00 1803 	mla	r8, r0, r3, r1
 8020b1a:	6813      	ldr	r3, [r2, #0]
 8020b1c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020b20:	4498      	add	r8, r3
 8020b22:	f10b 0301 	add.w	r3, fp, #1
 8020b26:	f023 0301 	bic.w	r3, r3, #1
 8020b2a:	930f      	str	r3, [sp, #60]	; 0x3c
 8020b2c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020b2e:	681f      	ldr	r7, [r3, #0]
 8020b30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020b32:	2b00      	cmp	r3, #0
 8020b34:	dc03      	bgt.n	8020b3e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8020b36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020b38:	2b00      	cmp	r3, #0
 8020b3a:	f340 8238 	ble.w	8020fae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8020b3e:	9b08      	ldr	r3, [sp, #32]
 8020b40:	2b00      	cmp	r3, #0
 8020b42:	f340 810c 	ble.w	8020d5e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 8020b46:	142a      	asrs	r2, r5, #16
 8020b48:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020b4c:	d42c      	bmi.n	8020ba8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8020b4e:	1c51      	adds	r1, r2, #1
 8020b50:	458b      	cmp	fp, r1
 8020b52:	dd2c      	ble.n	8020bae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8020b54:	2b00      	cmp	r3, #0
 8020b56:	db2a      	blt.n	8020bae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8020b58:	1c59      	adds	r1, r3, #1
 8020b5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020b5c:	4288      	cmp	r0, r1
 8020b5e:	dd26      	ble.n	8020bae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8020b60:	9b08      	ldr	r3, [sp, #32]
 8020b62:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020b64:	3b01      	subs	r3, #1
 8020b66:	fb02 5203 	mla	r2, r2, r3, r5
 8020b6a:	1412      	asrs	r2, r2, #16
 8020b6c:	d429      	bmi.n	8020bc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8020b6e:	3201      	adds	r2, #1
 8020b70:	4593      	cmp	fp, r2
 8020b72:	dd26      	ble.n	8020bc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8020b74:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020b76:	fb02 6303 	mla	r3, r2, r3, r6
 8020b7a:	141b      	asrs	r3, r3, #16
 8020b7c:	d421      	bmi.n	8020bc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8020b7e:	3301      	adds	r3, #1
 8020b80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020b82:	429a      	cmp	r2, r3
 8020b84:	dd1d      	ble.n	8020bc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8020b86:	f108 0e03 	add.w	lr, r8, #3
 8020b8a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8020b8e:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8020b92:	f1b9 0f00 	cmp.w	r9, #0
 8020b96:	f300 814f 	bgt.w	8020e38 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 8020b9a:	9b08      	ldr	r3, [sp, #32]
 8020b9c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020ba0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020ba4:	44a0      	add	r8, r4
 8020ba6:	e0dc      	b.n	8020d62 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 8020ba8:	1c51      	adds	r1, r2, #1
 8020baa:	f040 80ce 	bne.w	8020d4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8020bae:	4593      	cmp	fp, r2
 8020bb0:	f340 80cb 	ble.w	8020d4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8020bb4:	1c5a      	adds	r2, r3, #1
 8020bb6:	f2c0 80c8 	blt.w	8020d4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8020bba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020bbc:	4293      	cmp	r3, r2
 8020bbe:	f280 80c4 	bge.w	8020d4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8020bc2:	9b08      	ldr	r3, [sp, #32]
 8020bc4:	46c1      	mov	r9, r8
 8020bc6:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8020bca:	930d      	str	r3, [sp, #52]	; 0x34
 8020bcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020bce:	2b00      	cmp	r3, #0
 8020bd0:	dde3      	ble.n	8020b9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8020bd2:	1428      	asrs	r0, r5, #16
 8020bd4:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8020bd8:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020bdc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020be0:	f100 8111 	bmi.w	8020e06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8020be4:	f100 0c01 	add.w	ip, r0, #1
 8020be8:	45e3      	cmp	fp, ip
 8020bea:	f340 810e 	ble.w	8020e0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8020bee:	2b00      	cmp	r3, #0
 8020bf0:	f2c0 810b 	blt.w	8020e0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8020bf4:	f103 0c01 	add.w	ip, r3, #1
 8020bf8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020bfa:	4564      	cmp	r4, ip
 8020bfc:	f340 8105 	ble.w	8020e0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8020c00:	fb03 030a 	mla	r3, r3, sl, r0
 8020c04:	0858      	lsrs	r0, r3, #1
 8020c06:	07dc      	lsls	r4, r3, #31
 8020c08:	5c38      	ldrb	r0, [r7, r0]
 8020c0a:	bf54      	ite	pl
 8020c0c:	f000 000f 	andpl.w	r0, r0, #15
 8020c10:	1100      	asrmi	r0, r0, #4
 8020c12:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020c16:	b2c0      	uxtb	r0, r0
 8020c18:	2a00      	cmp	r2, #0
 8020c1a:	f000 80e1 	beq.w	8020de0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 8020c1e:	f103 0e01 	add.w	lr, r3, #1
 8020c22:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8020c26:	f01e 0f01 	tst.w	lr, #1
 8020c2a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020c2e:	bf0c      	ite	eq
 8020c30:	f00c 0c0f 	andeq.w	ip, ip, #15
 8020c34:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8020c38:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020c3c:	fa5f f48c 	uxtb.w	r4, ip
 8020c40:	9410      	str	r4, [sp, #64]	; 0x40
 8020c42:	b1f9      	cbz	r1, 8020c84 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8020c44:	4453      	add	r3, sl
 8020c46:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020c4a:	07dc      	lsls	r4, r3, #31
 8020c4c:	f103 0301 	add.w	r3, r3, #1
 8020c50:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020c54:	bf54      	ite	pl
 8020c56:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020c5a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020c5e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020c62:	fa5f f48c 	uxtb.w	r4, ip
 8020c66:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020c6a:	940a      	str	r4, [sp, #40]	; 0x28
 8020c6c:	07dc      	lsls	r4, r3, #31
 8020c6e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020c72:	bf54      	ite	pl
 8020c74:	f00c 030f 	andpl.w	r3, ip, #15
 8020c78:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8020c7c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020c80:	b2db      	uxtb	r3, r3
 8020c82:	9311      	str	r3, [sp, #68]	; 0x44
 8020c84:	b292      	uxth	r2, r2
 8020c86:	b289      	uxth	r1, r1
 8020c88:	0113      	lsls	r3, r2, #4
 8020c8a:	fb02 fc01 	mul.w	ip, r2, r1
 8020c8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020c90:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8020c94:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 8020c98:	eba3 030c 	sub.w	r3, r3, ip
 8020c9c:	b289      	uxth	r1, r1
 8020c9e:	b29b      	uxth	r3, r3
 8020ca0:	ebae 0e01 	sub.w	lr, lr, r1
 8020ca4:	4353      	muls	r3, r2
 8020ca6:	fa1f fe8e 	uxth.w	lr, lr
 8020caa:	fb00 320e 	mla	r2, r0, lr, r3
 8020cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020cb0:	fb01 2203 	mla	r2, r1, r3, r2
 8020cb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020cb6:	fb0c 2203 	mla	r2, ip, r3, r2
 8020cba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020cbe:	2a00      	cmp	r2, #0
 8020cc0:	d039      	beq.n	8020d36 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8020cc2:	4bbd      	ldr	r3, [pc, #756]	; (8020fb8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8020cc4:	6819      	ldr	r1, [r3, #0]
 8020cc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020cc8:	fa5f fc81 	uxtb.w	ip, r1
 8020ccc:	435a      	muls	r2, r3
 8020cce:	1c53      	adds	r3, r2, #1
 8020cd0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020cd4:	1212      	asrs	r2, r2, #8
 8020cd6:	b290      	uxth	r0, r2
 8020cd8:	43d2      	mvns	r2, r2
 8020cda:	fb1c fc00 	smulbb	ip, ip, r0
 8020cde:	b2d3      	uxtb	r3, r2
 8020ce0:	f899 2000 	ldrb.w	r2, [r9]
 8020ce4:	fb02 c203 	mla	r2, r2, r3, ip
 8020ce8:	b292      	uxth	r2, r2
 8020cea:	f102 0c01 	add.w	ip, r2, #1
 8020cee:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020cf2:	f899 c001 	ldrb.w	ip, [r9, #1]
 8020cf6:	fb1c fc03 	smulbb	ip, ip, r3
 8020cfa:	1212      	asrs	r2, r2, #8
 8020cfc:	f889 2000 	strb.w	r2, [r9]
 8020d00:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8020d04:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8020d08:	fb02 c200 	mla	r2, r2, r0, ip
 8020d0c:	b292      	uxth	r2, r2
 8020d0e:	f102 0c01 	add.w	ip, r2, #1
 8020d12:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020d16:	1212      	asrs	r2, r2, #8
 8020d18:	f889 2001 	strb.w	r2, [r9, #1]
 8020d1c:	f899 2002 	ldrb.w	r2, [r9, #2]
 8020d20:	fb12 f303 	smulbb	r3, r2, r3
 8020d24:	fb01 3300 	mla	r3, r1, r0, r3
 8020d28:	b29b      	uxth	r3, r3
 8020d2a:	1c5a      	adds	r2, r3, #1
 8020d2c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020d30:	121b      	asrs	r3, r3, #8
 8020d32:	f889 3002 	strb.w	r3, [r9, #2]
 8020d36:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020d38:	f109 0903 	add.w	r9, r9, #3
 8020d3c:	441d      	add	r5, r3
 8020d3e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020d40:	441e      	add	r6, r3
 8020d42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020d44:	3b01      	subs	r3, #1
 8020d46:	930d      	str	r3, [sp, #52]	; 0x34
 8020d48:	e740      	b.n	8020bcc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8020d4a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020d4c:	f108 0803 	add.w	r8, r8, #3
 8020d50:	441d      	add	r5, r3
 8020d52:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020d54:	441e      	add	r6, r3
 8020d56:	9b08      	ldr	r3, [sp, #32]
 8020d58:	3b01      	subs	r3, #1
 8020d5a:	9308      	str	r3, [sp, #32]
 8020d5c:	e6ef      	b.n	8020b3e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8020d5e:	f47f aeff 	bne.w	8020b60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8020d62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020d64:	2b00      	cmp	r3, #0
 8020d66:	f340 8122 	ble.w	8020fae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 8020d6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020d6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020d70:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020d74:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020d78:	eef0 6a48 	vmov.f32	s13, s16
 8020d7c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020d80:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020d84:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020d88:	ee16 5a90 	vmov	r5, s13
 8020d8c:	eef0 6a68 	vmov.f32	s13, s17
 8020d90:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020d94:	ee16 6a90 	vmov	r6, s13
 8020d98:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020d9c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020da0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020da4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020da8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020dac:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020db0:	ee18 2a10 	vmov	r2, s16
 8020db4:	eeb0 8a47 	vmov.f32	s16, s14
 8020db8:	fb92 f3f3 	sdiv	r3, r2, r3
 8020dbc:	ee18 2a90 	vmov	r2, s17
 8020dc0:	932b      	str	r3, [sp, #172]	; 0xac
 8020dc2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020dc4:	eef0 8a67 	vmov.f32	s17, s15
 8020dc8:	fb92 f3f3 	sdiv	r3, r2, r3
 8020dcc:	932c      	str	r3, [sp, #176]	; 0xb0
 8020dce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020dd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020dd2:	3b01      	subs	r3, #1
 8020dd4:	930c      	str	r3, [sp, #48]	; 0x30
 8020dd6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020dd8:	bf08      	it	eq
 8020dda:	4613      	moveq	r3, r2
 8020ddc:	9308      	str	r3, [sp, #32]
 8020dde:	e6a7      	b.n	8020b30 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8020de0:	2900      	cmp	r1, #0
 8020de2:	f43f af4f 	beq.w	8020c84 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8020de6:	4453      	add	r3, sl
 8020de8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020dec:	07db      	lsls	r3, r3, #31
 8020dee:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020df2:	bf54      	ite	pl
 8020df4:	f00c 030f 	andpl.w	r3, ip, #15
 8020df8:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8020dfc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020e00:	b2db      	uxtb	r3, r3
 8020e02:	930a      	str	r3, [sp, #40]	; 0x28
 8020e04:	e73e      	b.n	8020c84 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 8020e06:	1c44      	adds	r4, r0, #1
 8020e08:	d195      	bne.n	8020d36 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8020e0a:	4583      	cmp	fp, r0
 8020e0c:	dd93      	ble.n	8020d36 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8020e0e:	1c5c      	adds	r4, r3, #1
 8020e10:	db91      	blt.n	8020d36 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8020e12:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020e14:	429c      	cmp	r4, r3
 8020e16:	dd8e      	ble.n	8020d36 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8020e18:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020e1a:	9002      	str	r0, [sp, #8]
 8020e1c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020e1e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8020e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e24:	463a      	mov	r2, r7
 8020e26:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020e2a:	e9cd b300 	strd	fp, r3, [sp]
 8020e2e:	4649      	mov	r1, r9
 8020e30:	4653      	mov	r3, sl
 8020e32:	f7ff fd61 	bl	80208f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8020e36:	e77e      	b.n	8020d36 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8020e38:	142a      	asrs	r2, r5, #16
 8020e3a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020e3e:	1433      	asrs	r3, r6, #16
 8020e40:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020e44:	fb0a 2303 	mla	r3, sl, r3, r2
 8020e48:	085a      	lsrs	r2, r3, #1
 8020e4a:	07dc      	lsls	r4, r3, #31
 8020e4c:	5cba      	ldrb	r2, [r7, r2]
 8020e4e:	bf54      	ite	pl
 8020e50:	f002 020f 	andpl.w	r2, r2, #15
 8020e54:	1112      	asrmi	r2, r2, #4
 8020e56:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020e5a:	b2d2      	uxtb	r2, r2
 8020e5c:	2900      	cmp	r1, #0
 8020e5e:	f000 8093 	beq.w	8020f88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 8020e62:	1c5c      	adds	r4, r3, #1
 8020e64:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8020e68:	07e4      	lsls	r4, r4, #31
 8020e6a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020e6e:	bf54      	ite	pl
 8020e70:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020e74:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020e78:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020e7c:	fa5f f48c 	uxtb.w	r4, ip
 8020e80:	9412      	str	r4, [sp, #72]	; 0x48
 8020e82:	b300      	cbz	r0, 8020ec6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8020e84:	4453      	add	r3, sl
 8020e86:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020e8a:	07dc      	lsls	r4, r3, #31
 8020e8c:	f103 0301 	add.w	r3, r3, #1
 8020e90:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020e94:	bf54      	ite	pl
 8020e96:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020e9a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020e9e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020ea2:	fa5f f48c 	uxtb.w	r4, ip
 8020ea6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020eaa:	940b      	str	r4, [sp, #44]	; 0x2c
 8020eac:	07dc      	lsls	r4, r3, #31
 8020eae:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020eb2:	bf54      	ite	pl
 8020eb4:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020eb8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020ebc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020ec0:	fa5f f38c 	uxtb.w	r3, ip
 8020ec4:	9313      	str	r3, [sp, #76]	; 0x4c
 8020ec6:	b289      	uxth	r1, r1
 8020ec8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020eca:	b280      	uxth	r0, r0
 8020ecc:	fb01 f300 	mul.w	r3, r1, r0
 8020ed0:	0109      	lsls	r1, r1, #4
 8020ed2:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8020ed6:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8020eda:	1ac9      	subs	r1, r1, r3
 8020edc:	b280      	uxth	r0, r0
 8020ede:	b289      	uxth	r1, r1
 8020ee0:	ebac 0c00 	sub.w	ip, ip, r0
 8020ee4:	4361      	muls	r1, r4
 8020ee6:	fa1f fc8c 	uxth.w	ip, ip
 8020eea:	fb02 120c 	mla	r2, r2, ip, r1
 8020eee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8020ef0:	fb00 2001 	mla	r0, r0, r1, r2
 8020ef4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020ef6:	fb03 0302 	mla	r3, r3, r2, r0
 8020efa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020efe:	2b00      	cmp	r3, #0
 8020f00:	d039      	beq.n	8020f76 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8020f02:	4a2d      	ldr	r2, [pc, #180]	; (8020fb8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8020f04:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8020f08:	6810      	ldr	r0, [r2, #0]
 8020f0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020f0c:	fa5f fc80 	uxtb.w	ip, r0
 8020f10:	4353      	muls	r3, r2
 8020f12:	1c5a      	adds	r2, r3, #1
 8020f14:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020f18:	121b      	asrs	r3, r3, #8
 8020f1a:	b29a      	uxth	r2, r3
 8020f1c:	43db      	mvns	r3, r3
 8020f1e:	fb1c fc02 	smulbb	ip, ip, r2
 8020f22:	b2db      	uxtb	r3, r3
 8020f24:	fb01 c103 	mla	r1, r1, r3, ip
 8020f28:	b289      	uxth	r1, r1
 8020f2a:	f101 0c01 	add.w	ip, r1, #1
 8020f2e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8020f32:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8020f36:	fb1c fc03 	smulbb	ip, ip, r3
 8020f3a:	1209      	asrs	r1, r1, #8
 8020f3c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8020f40:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8020f44:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8020f48:	fb01 c102 	mla	r1, r1, r2, ip
 8020f4c:	b289      	uxth	r1, r1
 8020f4e:	f101 0c01 	add.w	ip, r1, #1
 8020f52:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8020f56:	1209      	asrs	r1, r1, #8
 8020f58:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8020f5c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8020f60:	fb11 f303 	smulbb	r3, r1, r3
 8020f64:	fb00 3002 	mla	r0, r0, r2, r3
 8020f68:	b280      	uxth	r0, r0
 8020f6a:	1c42      	adds	r2, r0, #1
 8020f6c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020f70:	1200      	asrs	r0, r0, #8
 8020f72:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8020f76:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8020f78:	f10e 0e03 	add.w	lr, lr, #3
 8020f7c:	f109 39ff 	add.w	r9, r9, #4294967295
 8020f80:	441d      	add	r5, r3
 8020f82:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020f84:	441e      	add	r6, r3
 8020f86:	e604      	b.n	8020b92 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8020f88:	2800      	cmp	r0, #0
 8020f8a:	d09c      	beq.n	8020ec6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8020f8c:	4453      	add	r3, sl
 8020f8e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020f92:	07db      	lsls	r3, r3, #31
 8020f94:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020f98:	bf54      	ite	pl
 8020f9a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020f9e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020fa2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020fa6:	fa5f f38c 	uxtb.w	r3, ip
 8020faa:	930b      	str	r3, [sp, #44]	; 0x2c
 8020fac:	e78b      	b.n	8020ec6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8020fae:	b017      	add	sp, #92	; 0x5c
 8020fb0:	ecbd 8b08 	vpop	{d8-d11}
 8020fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fb8:	2000b1d4 	.word	0x2000b1d4

08020fbc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8020fbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fc0:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8020fc4:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8020fc8:	2800      	cmp	r0, #0
 8020fca:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8020fce:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8020fd2:	fb0c 0e03 	mla	lr, ip, r3, r0
 8020fd6:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8020fda:	db6b      	blt.n	80210b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8020fdc:	4580      	cmp	r8, r0
 8020fde:	dd69      	ble.n	80210b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8020fe0:	f1bc 0f00 	cmp.w	ip, #0
 8020fe4:	db66      	blt.n	80210b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8020fe6:	45e1      	cmp	r9, ip
 8020fe8:	dd64      	ble.n	80210b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8020fea:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8020fee:	f01e 0f01 	tst.w	lr, #1
 8020ff2:	5d16      	ldrb	r6, [r2, r4]
 8020ff4:	bf0c      	ite	eq
 8020ff6:	f006 060f 	andeq.w	r6, r6, #15
 8020ffa:	1136      	asrne	r6, r6, #4
 8020ffc:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8021000:	b2f6      	uxtb	r6, r6
 8021002:	f110 0a01 	adds.w	sl, r0, #1
 8021006:	d457      	bmi.n	80210b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8021008:	45d0      	cmp	r8, sl
 802100a:	dd55      	ble.n	80210b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 802100c:	f1bc 0f00 	cmp.w	ip, #0
 8021010:	db52      	blt.n	80210b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8021012:	45e1      	cmp	r9, ip
 8021014:	dd50      	ble.n	80210b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8021016:	2f00      	cmp	r7, #0
 8021018:	f000 80a5 	beq.w	8021166 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 802101c:	f10e 0b01 	add.w	fp, lr, #1
 8021020:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8021024:	f01b 0f01 	tst.w	fp, #1
 8021028:	5d14      	ldrb	r4, [r2, r4]
 802102a:	bf0c      	ite	eq
 802102c:	f004 040f 	andeq.w	r4, r4, #15
 8021030:	1124      	asrne	r4, r4, #4
 8021032:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8021036:	b2e4      	uxtb	r4, r4
 8021038:	2d00      	cmp	r5, #0
 802103a:	f000 808f 	beq.w	802115c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 802103e:	2800      	cmp	r0, #0
 8021040:	f10c 0c01 	add.w	ip, ip, #1
 8021044:	db3c      	blt.n	80210c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8021046:	4580      	cmp	r8, r0
 8021048:	dd3a      	ble.n	80210c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 802104a:	f1bc 0f00 	cmp.w	ip, #0
 802104e:	db37      	blt.n	80210c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8021050:	45e1      	cmp	r9, ip
 8021052:	dd35      	ble.n	80210c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8021054:	eb03 0b0e 	add.w	fp, r3, lr
 8021058:	ea4f 005b 	mov.w	r0, fp, lsr #1
 802105c:	f01b 0f01 	tst.w	fp, #1
 8021060:	5c10      	ldrb	r0, [r2, r0]
 8021062:	bf0c      	ite	eq
 8021064:	f000 000f 	andeq.w	r0, r0, #15
 8021068:	1100      	asrne	r0, r0, #4
 802106a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802106e:	b2c0      	uxtb	r0, r0
 8021070:	f1ba 0f00 	cmp.w	sl, #0
 8021074:	db26      	blt.n	80210c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8021076:	45d0      	cmp	r8, sl
 8021078:	dd24      	ble.n	80210c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 802107a:	f1bc 0f00 	cmp.w	ip, #0
 802107e:	db21      	blt.n	80210c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8021080:	45e1      	cmp	r9, ip
 8021082:	dd1f      	ble.n	80210c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8021084:	b307      	cbz	r7, 80210c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8021086:	3301      	adds	r3, #1
 8021088:	449e      	add	lr, r3
 802108a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802108e:	f01e 0f01 	tst.w	lr, #1
 8021092:	5cd3      	ldrb	r3, [r2, r3]
 8021094:	bf0c      	ite	eq
 8021096:	f003 030f 	andeq.w	r3, r3, #15
 802109a:	111b      	asrne	r3, r3, #4
 802109c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80210a0:	b2db      	uxtb	r3, r3
 80210a2:	2f0f      	cmp	r7, #15
 80210a4:	d911      	bls.n	80210ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 80210a6:	4b32      	ldr	r3, [pc, #200]	; (8021170 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 80210a8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80210ac:	4a31      	ldr	r2, [pc, #196]	; (8021174 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 80210ae:	4832      	ldr	r0, [pc, #200]	; (8021178 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 80210b0:	f001 fff8 	bl	80230a4 <__assert_func>
 80210b4:	2600      	movs	r6, #0
 80210b6:	e7a4      	b.n	8021002 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 80210b8:	2400      	movs	r4, #0
 80210ba:	e7bd      	b.n	8021038 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 80210bc:	463c      	mov	r4, r7
 80210be:	e7be      	b.n	802103e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 80210c0:	2000      	movs	r0, #0
 80210c2:	e7d5      	b.n	8021070 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 80210c4:	2300      	movs	r3, #0
 80210c6:	e7ec      	b.n	80210a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 80210c8:	463b      	mov	r3, r7
 80210ca:	2d0f      	cmp	r5, #15
 80210cc:	d8eb      	bhi.n	80210a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 80210ce:	b2bf      	uxth	r7, r7
 80210d0:	b2ad      	uxth	r5, r5
 80210d2:	fb07 f205 	mul.w	r2, r7, r5
 80210d6:	013f      	lsls	r7, r7, #4
 80210d8:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80210dc:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80210e0:	1abf      	subs	r7, r7, r2
 80210e2:	b2ad      	uxth	r5, r5
 80210e4:	b2bf      	uxth	r7, r7
 80210e6:	ebac 0c05 	sub.w	ip, ip, r5
 80210ea:	437c      	muls	r4, r7
 80210ec:	fa1f fc8c 	uxth.w	ip, ip
 80210f0:	fb06 440c 	mla	r4, r6, ip, r4
 80210f4:	fb05 4400 	mla	r4, r5, r0, r4
 80210f8:	fb02 4303 	mla	r3, r2, r3, r4
 80210fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021100:	b353      	cbz	r3, 8021158 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8021102:	4a1e      	ldr	r2, [pc, #120]	; (802117c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8021104:	7808      	ldrb	r0, [r1, #0]
 8021106:	6814      	ldr	r4, [r2, #0]
 8021108:	b29a      	uxth	r2, r3
 802110a:	43db      	mvns	r3, r3
 802110c:	b2e5      	uxtb	r5, r4
 802110e:	b2db      	uxtb	r3, r3
 8021110:	fb15 f502 	smulbb	r5, r5, r2
 8021114:	fb00 5003 	mla	r0, r0, r3, r5
 8021118:	b280      	uxth	r0, r0
 802111a:	1c45      	adds	r5, r0, #1
 802111c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8021120:	784d      	ldrb	r5, [r1, #1]
 8021122:	fb15 f503 	smulbb	r5, r5, r3
 8021126:	1200      	asrs	r0, r0, #8
 8021128:	7008      	strb	r0, [r1, #0]
 802112a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 802112e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8021132:	fb00 5002 	mla	r0, r0, r2, r5
 8021136:	b280      	uxth	r0, r0
 8021138:	1c45      	adds	r5, r0, #1
 802113a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802113e:	1200      	asrs	r0, r0, #8
 8021140:	7048      	strb	r0, [r1, #1]
 8021142:	7888      	ldrb	r0, [r1, #2]
 8021144:	fb10 f303 	smulbb	r3, r0, r3
 8021148:	fb04 3202 	mla	r2, r4, r2, r3
 802114c:	b292      	uxth	r2, r2
 802114e:	1c53      	adds	r3, r2, #1
 8021150:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021154:	1212      	asrs	r2, r2, #8
 8021156:	708a      	strb	r2, [r1, #2]
 8021158:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802115c:	2f0f      	cmp	r7, #15
 802115e:	d8a2      	bhi.n	80210a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8021160:	462b      	mov	r3, r5
 8021162:	4628      	mov	r0, r5
 8021164:	e7b3      	b.n	80210ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8021166:	2d00      	cmp	r5, #0
 8021168:	d1a8      	bne.n	80210bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 802116a:	462c      	mov	r4, r5
 802116c:	e7f8      	b.n	8021160 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 802116e:	bf00      	nop
 8021170:	080292e4 	.word	0x080292e4
 8021174:	080297da 	.word	0x080297da
 8021178:	080293ad 	.word	0x080293ad
 802117c:	2000b1d4 	.word	0x2000b1d4

08021180 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021184:	ed2d 8b08 	vpush	{d8-d11}
 8021188:	b095      	sub	sp, #84	; 0x54
 802118a:	461c      	mov	r4, r3
 802118c:	eeb0 aa40 	vmov.f32	s20, s0
 8021190:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8021194:	eef0 9a60 	vmov.f32	s19, s1
 8021198:	920e      	str	r2, [sp, #56]	; 0x38
 802119a:	eeb0 9a41 	vmov.f32	s18, s2
 802119e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80211a0:	eeb0 8a62 	vmov.f32	s16, s5
 80211a4:	9307      	str	r3, [sp, #28]
 80211a6:	eef0 8a43 	vmov.f32	s17, s6
 80211aa:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 80211ae:	eef0 ba44 	vmov.f32	s23, s8
 80211b2:	9013      	str	r0, [sp, #76]	; 0x4c
 80211b4:	eeb0 ba64 	vmov.f32	s22, s9
 80211b8:	9109      	str	r1, [sp, #36]	; 0x24
 80211ba:	eef0 aa45 	vmov.f32	s21, s10
 80211be:	9308      	str	r3, [sp, #32]
 80211c0:	6850      	ldr	r0, [r2, #4]
 80211c2:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80211c6:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 80211ca:	fb00 1803 	mla	r8, r0, r3, r1
 80211ce:	6813      	ldr	r3, [r2, #0]
 80211d0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80211d4:	4498      	add	r8, r3
 80211d6:	9b07      	ldr	r3, [sp, #28]
 80211d8:	3301      	adds	r3, #1
 80211da:	f023 0301 	bic.w	r3, r3, #1
 80211de:	930b      	str	r3, [sp, #44]	; 0x2c
 80211e0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80211e2:	681f      	ldr	r7, [r3, #0]
 80211e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80211e6:	2b00      	cmp	r3, #0
 80211e8:	dc03      	bgt.n	80211f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80211ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80211ec:	2b00      	cmp	r3, #0
 80211ee:	f340 8238 	ble.w	8021662 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 80211f2:	2c00      	cmp	r4, #0
 80211f4:	f340 8109 	ble.w	802140a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 80211f8:	142a      	asrs	r2, r5, #16
 80211fa:	ea4f 4326 	mov.w	r3, r6, asr #16
 80211fe:	d42b      	bmi.n	8021258 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8021200:	1c51      	adds	r1, r2, #1
 8021202:	9807      	ldr	r0, [sp, #28]
 8021204:	4288      	cmp	r0, r1
 8021206:	dd2a      	ble.n	802125e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8021208:	2b00      	cmp	r3, #0
 802120a:	db28      	blt.n	802125e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 802120c:	1c59      	adds	r1, r3, #1
 802120e:	9808      	ldr	r0, [sp, #32]
 8021210:	4288      	cmp	r0, r1
 8021212:	dd24      	ble.n	802125e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8021214:	1e63      	subs	r3, r4, #1
 8021216:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021218:	fb02 5203 	mla	r2, r2, r3, r5
 802121c:	1412      	asrs	r2, r2, #16
 802121e:	d429      	bmi.n	8021274 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8021220:	3201      	adds	r2, #1
 8021222:	9907      	ldr	r1, [sp, #28]
 8021224:	4291      	cmp	r1, r2
 8021226:	dd25      	ble.n	8021274 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8021228:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802122a:	fb02 6303 	mla	r3, r2, r3, r6
 802122e:	141b      	asrs	r3, r3, #16
 8021230:	d420      	bmi.n	8021274 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8021232:	3301      	adds	r3, #1
 8021234:	9a08      	ldr	r2, [sp, #32]
 8021236:	429a      	cmp	r2, r3
 8021238:	dd1c      	ble.n	8021274 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 802123a:	f108 0e03 	add.w	lr, r8, #3
 802123e:	46a1      	mov	r9, r4
 8021240:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8021244:	f1b9 0f00 	cmp.w	r9, #0
 8021248:	f300 8155 	bgt.w	80214f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 802124c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8021250:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021254:	44a0      	add	r8, r4
 8021256:	e0da      	b.n	802140e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8021258:	1c50      	adds	r0, r2, #1
 802125a:	f040 80ce 	bne.w	80213fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 802125e:	9907      	ldr	r1, [sp, #28]
 8021260:	4291      	cmp	r1, r2
 8021262:	f340 80ca 	ble.w	80213fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8021266:	1c59      	adds	r1, r3, #1
 8021268:	f2c0 80c7 	blt.w	80213fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 802126c:	9a08      	ldr	r2, [sp, #32]
 802126e:	4293      	cmp	r3, r2
 8021270:	f280 80c3 	bge.w	80213fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8021274:	46a3      	mov	fp, r4
 8021276:	46c1      	mov	r9, r8
 8021278:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 802127c:	f1bb 0f00 	cmp.w	fp, #0
 8021280:	dde4      	ble.n	802124c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8021282:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8021286:	1428      	asrs	r0, r5, #16
 8021288:	ea4f 4326 	mov.w	r3, r6, asr #16
 802128c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021290:	920a      	str	r2, [sp, #40]	; 0x28
 8021292:	f100 8116 	bmi.w	80214c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8021296:	f100 0c01 	add.w	ip, r0, #1
 802129a:	9a07      	ldr	r2, [sp, #28]
 802129c:	4562      	cmp	r2, ip
 802129e:	f340 8112 	ble.w	80214c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80212a2:	2b00      	cmp	r3, #0
 80212a4:	f2c0 810f 	blt.w	80214c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80212a8:	f103 0c01 	add.w	ip, r3, #1
 80212ac:	9a08      	ldr	r2, [sp, #32]
 80212ae:	4562      	cmp	r2, ip
 80212b0:	f340 8109 	ble.w	80214c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 80212b4:	fb03 030a 	mla	r3, r3, sl, r0
 80212b8:	0858      	lsrs	r0, r3, #1
 80212ba:	07da      	lsls	r2, r3, #31
 80212bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80212be:	5c38      	ldrb	r0, [r7, r0]
 80212c0:	bf54      	ite	pl
 80212c2:	f000 000f 	andpl.w	r0, r0, #15
 80212c6:	1100      	asrmi	r0, r0, #4
 80212c8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80212cc:	b2c0      	uxtb	r0, r0
 80212ce:	2a00      	cmp	r2, #0
 80212d0:	f000 80dd 	beq.w	802148e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 80212d4:	f103 0e01 	add.w	lr, r3, #1
 80212d8:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80212dc:	f01e 0f01 	tst.w	lr, #1
 80212e0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80212e4:	bf0c      	ite	eq
 80212e6:	f00c 0c0f 	andeq.w	ip, ip, #15
 80212ea:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80212ee:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80212f2:	fa5f fc8c 	uxtb.w	ip, ip
 80212f6:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80212fa:	b301      	cbz	r1, 802133e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80212fc:	4453      	add	r3, sl
 80212fe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021302:	07da      	lsls	r2, r3, #31
 8021304:	f103 0301 	add.w	r3, r3, #1
 8021308:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802130c:	bf54      	ite	pl
 802130e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021312:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8021316:	07da      	lsls	r2, r3, #31
 8021318:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802131c:	fa5f fc8c 	uxtb.w	ip, ip
 8021320:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8021324:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8021328:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802132c:	bf54      	ite	pl
 802132e:	f00c 030f 	andpl.w	r3, ip, #15
 8021332:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8021336:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802133a:	b2db      	uxtb	r3, r3
 802133c:	9310      	str	r3, [sp, #64]	; 0x40
 802133e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8021342:	b289      	uxth	r1, r1
 8021344:	fb02 f301 	mul.w	r3, r2, r1
 8021348:	0112      	lsls	r2, r2, #4
 802134a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802134e:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8021352:	1ad2      	subs	r2, r2, r3
 8021354:	fa1f fe81 	uxth.w	lr, r1
 8021358:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802135a:	b292      	uxth	r2, r2
 802135c:	ebac 0c0e 	sub.w	ip, ip, lr
 8021360:	434a      	muls	r2, r1
 8021362:	fa1f fc8c 	uxth.w	ip, ip
 8021366:	fb00 200c 	mla	r0, r0, ip, r2
 802136a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802136c:	fb0e 0002 	mla	r0, lr, r2, r0
 8021370:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021372:	fb03 0002 	mla	r0, r3, r2, r0
 8021376:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802137a:	b3a8      	cbz	r0, 80213e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802137c:	4bbb      	ldr	r3, [pc, #748]	; (802166c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 802137e:	28ff      	cmp	r0, #255	; 0xff
 8021380:	681b      	ldr	r3, [r3, #0]
 8021382:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8021386:	f3c3 2107 	ubfx	r1, r3, #8, #8
 802138a:	b2db      	uxtb	r3, r3
 802138c:	f000 8092 	beq.w	80214b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 8021390:	b282      	uxth	r2, r0
 8021392:	43c0      	mvns	r0, r0
 8021394:	f899 e000 	ldrb.w	lr, [r9]
 8021398:	fb13 f302 	smulbb	r3, r3, r2
 802139c:	b2c0      	uxtb	r0, r0
 802139e:	fb11 f102 	smulbb	r1, r1, r2
 80213a2:	fb0e 3300 	mla	r3, lr, r0, r3
 80213a6:	fb1c f202 	smulbb	r2, ip, r2
 80213aa:	b29b      	uxth	r3, r3
 80213ac:	f103 0e01 	add.w	lr, r3, #1
 80213b0:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80213b4:	121b      	asrs	r3, r3, #8
 80213b6:	f889 3000 	strb.w	r3, [r9]
 80213ba:	f899 3001 	ldrb.w	r3, [r9, #1]
 80213be:	fb03 1100 	mla	r1, r3, r0, r1
 80213c2:	b289      	uxth	r1, r1
 80213c4:	1c4b      	adds	r3, r1, #1
 80213c6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80213ca:	f899 3002 	ldrb.w	r3, [r9, #2]
 80213ce:	fb03 2000 	mla	r0, r3, r0, r2
 80213d2:	1209      	asrs	r1, r1, #8
 80213d4:	b280      	uxth	r0, r0
 80213d6:	f889 1001 	strb.w	r1, [r9, #1]
 80213da:	f100 0c01 	add.w	ip, r0, #1
 80213de:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 80213e2:	1200      	asrs	r0, r0, #8
 80213e4:	f889 0002 	strb.w	r0, [r9, #2]
 80213e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80213ea:	f109 0903 	add.w	r9, r9, #3
 80213ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80213f2:	441d      	add	r5, r3
 80213f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80213f6:	441e      	add	r6, r3
 80213f8:	e740      	b.n	802127c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80213fa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80213fc:	3c01      	subs	r4, #1
 80213fe:	f108 0803 	add.w	r8, r8, #3
 8021402:	441d      	add	r5, r3
 8021404:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021406:	441e      	add	r6, r3
 8021408:	e6f3      	b.n	80211f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 802140a:	f47f af03 	bne.w	8021214 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 802140e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021410:	2b00      	cmp	r3, #0
 8021412:	f340 8126 	ble.w	8021662 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8021416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802141a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802141c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8021420:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021424:	eef0 6a48 	vmov.f32	s13, s16
 8021428:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802142c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8021430:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021434:	ee16 5a90 	vmov	r5, s13
 8021438:	eef0 6a68 	vmov.f32	s13, s17
 802143c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021440:	ee16 6a90 	vmov	r6, s13
 8021444:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021448:	ee69 7a27 	vmul.f32	s15, s18, s15
 802144c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021450:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021454:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021458:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802145c:	ee18 2a10 	vmov	r2, s16
 8021460:	eeb0 8a47 	vmov.f32	s16, s14
 8021464:	fb92 f3f3 	sdiv	r3, r2, r3
 8021468:	ee18 2a90 	vmov	r2, s17
 802146c:	9329      	str	r3, [sp, #164]	; 0xa4
 802146e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021470:	eef0 8a67 	vmov.f32	s17, s15
 8021474:	fb92 f3f3 	sdiv	r3, r2, r3
 8021478:	932a      	str	r3, [sp, #168]	; 0xa8
 802147a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802147c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802147e:	3b01      	subs	r3, #1
 8021480:	9309      	str	r3, [sp, #36]	; 0x24
 8021482:	bf08      	it	eq
 8021484:	4614      	moveq	r4, r2
 8021486:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021488:	bf18      	it	ne
 802148a:	461c      	movne	r4, r3
 802148c:	e6aa      	b.n	80211e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 802148e:	2900      	cmp	r1, #0
 8021490:	f43f af55 	beq.w	802133e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8021494:	4453      	add	r3, sl
 8021496:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802149a:	07db      	lsls	r3, r3, #31
 802149c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80214a0:	bf54      	ite	pl
 80214a2:	f00c 030f 	andpl.w	r3, ip, #15
 80214a6:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80214aa:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80214ae:	b2db      	uxtb	r3, r3
 80214b0:	930c      	str	r3, [sp, #48]	; 0x30
 80214b2:	e744      	b.n	802133e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80214b4:	f889 3000 	strb.w	r3, [r9]
 80214b8:	f889 1001 	strb.w	r1, [r9, #1]
 80214bc:	f889 c002 	strb.w	ip, [r9, #2]
 80214c0:	e792      	b.n	80213e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80214c2:	1c42      	adds	r2, r0, #1
 80214c4:	d190      	bne.n	80213e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80214c6:	9a07      	ldr	r2, [sp, #28]
 80214c8:	4282      	cmp	r2, r0
 80214ca:	dd8d      	ble.n	80213e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80214cc:	1c5a      	adds	r2, r3, #1
 80214ce:	db8b      	blt.n	80213e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80214d0:	9a08      	ldr	r2, [sp, #32]
 80214d2:	429a      	cmp	r2, r3
 80214d4:	dd88      	ble.n	80213e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80214d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80214d8:	9105      	str	r1, [sp, #20]
 80214da:	4649      	mov	r1, r9
 80214dc:	9002      	str	r0, [sp, #8]
 80214de:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80214e0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80214e4:	9b08      	ldr	r3, [sp, #32]
 80214e6:	463a      	mov	r2, r7
 80214e8:	9301      	str	r3, [sp, #4]
 80214ea:	9b07      	ldr	r3, [sp, #28]
 80214ec:	9300      	str	r3, [sp, #0]
 80214ee:	4653      	mov	r3, sl
 80214f0:	f7ff fd64 	bl	8020fbc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80214f4:	e778      	b.n	80213e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80214f6:	142a      	asrs	r2, r5, #16
 80214f8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80214fc:	1433      	asrs	r3, r6, #16
 80214fe:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8021502:	fb0a 2303 	mla	r3, sl, r3, r2
 8021506:	085a      	lsrs	r2, r3, #1
 8021508:	07d9      	lsls	r1, r3, #31
 802150a:	5cba      	ldrb	r2, [r7, r2]
 802150c:	bf54      	ite	pl
 802150e:	f002 020f 	andpl.w	r2, r2, #15
 8021512:	1112      	asrmi	r2, r2, #4
 8021514:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021518:	b2d2      	uxtb	r2, r2
 802151a:	2800      	cmp	r0, #0
 802151c:	f000 808a 	beq.w	8021634 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 8021520:	f103 0b01 	add.w	fp, r3, #1
 8021524:	ea4f 015b 	mov.w	r1, fp, lsr #1
 8021528:	f01b 0f01 	tst.w	fp, #1
 802152c:	5c79      	ldrb	r1, [r7, r1]
 802152e:	bf0c      	ite	eq
 8021530:	f001 010f 	andeq.w	r1, r1, #15
 8021534:	1109      	asrne	r1, r1, #4
 8021536:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802153a:	b2c9      	uxtb	r1, r1
 802153c:	9111      	str	r1, [sp, #68]	; 0x44
 802153e:	f1bc 0f00 	cmp.w	ip, #0
 8021542:	d019      	beq.n	8021578 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8021544:	4453      	add	r3, sl
 8021546:	0859      	lsrs	r1, r3, #1
 8021548:	f013 0f01 	tst.w	r3, #1
 802154c:	f103 0301 	add.w	r3, r3, #1
 8021550:	5c79      	ldrb	r1, [r7, r1]
 8021552:	bf0c      	ite	eq
 8021554:	f001 010f 	andeq.w	r1, r1, #15
 8021558:	1109      	asrne	r1, r1, #4
 802155a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802155e:	b2c9      	uxtb	r1, r1
 8021560:	910d      	str	r1, [sp, #52]	; 0x34
 8021562:	0859      	lsrs	r1, r3, #1
 8021564:	07db      	lsls	r3, r3, #31
 8021566:	5c79      	ldrb	r1, [r7, r1]
 8021568:	bf54      	ite	pl
 802156a:	f001 010f 	andpl.w	r1, r1, #15
 802156e:	1109      	asrmi	r1, r1, #4
 8021570:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8021574:	b2c9      	uxtb	r1, r1
 8021576:	9112      	str	r1, [sp, #72]	; 0x48
 8021578:	b280      	uxth	r0, r0
 802157a:	fa1f fc8c 	uxth.w	ip, ip
 802157e:	fb00 f30c 	mul.w	r3, r0, ip
 8021582:	0100      	lsls	r0, r0, #4
 8021584:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8021588:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802158c:	1ac0      	subs	r0, r0, r3
 802158e:	fa1f fc8c 	uxth.w	ip, ip
 8021592:	b280      	uxth	r0, r0
 8021594:	eba1 010c 	sub.w	r1, r1, ip
 8021598:	fa1f fb81 	uxth.w	fp, r1
 802159c:	9911      	ldr	r1, [sp, #68]	; 0x44
 802159e:	4348      	muls	r0, r1
 80215a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80215a2:	fb02 020b 	mla	r2, r2, fp, r0
 80215a6:	fb0c 2c01 	mla	ip, ip, r1, r2
 80215aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80215ac:	fb03 c302 	mla	r3, r3, r2, ip
 80215b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80215b4:	b3ab      	cbz	r3, 8021622 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80215b6:	4a2d      	ldr	r2, [pc, #180]	; (802166c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 80215b8:	2bff      	cmp	r3, #255	; 0xff
 80215ba:	6811      	ldr	r1, [r2, #0]
 80215bc:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 80215c0:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 80215c4:	b2c9      	uxtb	r1, r1
 80215c6:	d045      	beq.n	8021654 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 80215c8:	b298      	uxth	r0, r3
 80215ca:	43db      	mvns	r3, r3
 80215cc:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 80215d0:	fb11 f100 	smulbb	r1, r1, r0
 80215d4:	b2db      	uxtb	r3, r3
 80215d6:	fb1c fc00 	smulbb	ip, ip, r0
 80215da:	fb02 1103 	mla	r1, r2, r3, r1
 80215de:	fb1b f000 	smulbb	r0, fp, r0
 80215e2:	b289      	uxth	r1, r1
 80215e4:	1c4a      	adds	r2, r1, #1
 80215e6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80215ea:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80215ee:	fb02 cc03 	mla	ip, r2, r3, ip
 80215f2:	1209      	asrs	r1, r1, #8
 80215f4:	fa1f fc8c 	uxth.w	ip, ip
 80215f8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80215fc:	f10c 0201 	add.w	r2, ip, #1
 8021600:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021604:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 8021608:	fb02 0303 	mla	r3, r2, r3, r0
 802160c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8021610:	b29b      	uxth	r3, r3
 8021612:	f80e cc02 	strb.w	ip, [lr, #-2]
 8021616:	1c5a      	adds	r2, r3, #1
 8021618:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802161c:	121b      	asrs	r3, r3, #8
 802161e:	f80e 3c01 	strb.w	r3, [lr, #-1]
 8021622:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021624:	f10e 0e03 	add.w	lr, lr, #3
 8021628:	f109 39ff 	add.w	r9, r9, #4294967295
 802162c:	441d      	add	r5, r3
 802162e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021630:	441e      	add	r6, r3
 8021632:	e607      	b.n	8021244 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8021634:	f1bc 0f00 	cmp.w	ip, #0
 8021638:	d09e      	beq.n	8021578 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 802163a:	4453      	add	r3, sl
 802163c:	0859      	lsrs	r1, r3, #1
 802163e:	07db      	lsls	r3, r3, #31
 8021640:	5c79      	ldrb	r1, [r7, r1]
 8021642:	bf54      	ite	pl
 8021644:	f001 010f 	andpl.w	r1, r1, #15
 8021648:	1109      	asrmi	r1, r1, #4
 802164a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802164e:	b2c9      	uxtb	r1, r1
 8021650:	910d      	str	r1, [sp, #52]	; 0x34
 8021652:	e791      	b.n	8021578 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8021654:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8021658:	f80e cc02 	strb.w	ip, [lr, #-2]
 802165c:	f80e bc01 	strb.w	fp, [lr, #-1]
 8021660:	e7df      	b.n	8021622 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8021662:	b015      	add	sp, #84	; 0x54
 8021664:	ecbd 8b08 	vpop	{d8-d11}
 8021668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802166c:	2000b1d4 	.word	0x2000b1d4

08021670 <CRC_Lock>:
 8021670:	4a1d      	ldr	r2, [pc, #116]	; (80216e8 <CRC_Lock+0x78>)
 8021672:	b530      	push	{r4, r5, lr}
 8021674:	6813      	ldr	r3, [r2, #0]
 8021676:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802167a:	f24c 2540 	movw	r5, #49728	; 0xc240
 802167e:	f023 0301 	bic.w	r3, r3, #1
 8021682:	6013      	str	r3, [r2, #0]
 8021684:	4b19      	ldr	r3, [pc, #100]	; (80216ec <CRC_Lock+0x7c>)
 8021686:	681a      	ldr	r2, [r3, #0]
 8021688:	4022      	ands	r2, r4
 802168a:	42aa      	cmp	r2, r5
 802168c:	d005      	beq.n	802169a <CRC_Lock+0x2a>
 802168e:	681b      	ldr	r3, [r3, #0]
 8021690:	f24c 2270 	movw	r2, #49776	; 0xc270
 8021694:	4023      	ands	r3, r4
 8021696:	4293      	cmp	r3, r2
 8021698:	d11d      	bne.n	80216d6 <CRC_Lock+0x66>
 802169a:	4b15      	ldr	r3, [pc, #84]	; (80216f0 <CRC_Lock+0x80>)
 802169c:	681b      	ldr	r3, [r3, #0]
 802169e:	b9d3      	cbnz	r3, 80216d6 <CRC_Lock+0x66>
 80216a0:	4a14      	ldr	r2, [pc, #80]	; (80216f4 <CRC_Lock+0x84>)
 80216a2:	6813      	ldr	r3, [r2, #0]
 80216a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80216a8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80216ac:	d006      	beq.n	80216bc <CRC_Lock+0x4c>
 80216ae:	6813      	ldr	r3, [r2, #0]
 80216b0:	f240 4283 	movw	r2, #1155	; 0x483
 80216b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80216b8:	4293      	cmp	r3, r2
 80216ba:	d10c      	bne.n	80216d6 <CRC_Lock+0x66>
 80216bc:	4b0e      	ldr	r3, [pc, #56]	; (80216f8 <CRC_Lock+0x88>)
 80216be:	2201      	movs	r2, #1
 80216c0:	601a      	str	r2, [r3, #0]
 80216c2:	681a      	ldr	r2, [r3, #0]
 80216c4:	2a00      	cmp	r2, #0
 80216c6:	d1fc      	bne.n	80216c2 <CRC_Lock+0x52>
 80216c8:	4b0c      	ldr	r3, [pc, #48]	; (80216fc <CRC_Lock+0x8c>)
 80216ca:	6018      	str	r0, [r3, #0]
 80216cc:	6818      	ldr	r0, [r3, #0]
 80216ce:	1a43      	subs	r3, r0, r1
 80216d0:	4258      	negs	r0, r3
 80216d2:	4158      	adcs	r0, r3
 80216d4:	bd30      	pop	{r4, r5, pc}
 80216d6:	4b0a      	ldr	r3, [pc, #40]	; (8021700 <CRC_Lock+0x90>)
 80216d8:	2201      	movs	r2, #1
 80216da:	601a      	str	r2, [r3, #0]
 80216dc:	681a      	ldr	r2, [r3, #0]
 80216de:	2a00      	cmp	r2, #0
 80216e0:	d1fc      	bne.n	80216dc <CRC_Lock+0x6c>
 80216e2:	4b08      	ldr	r3, [pc, #32]	; (8021704 <CRC_Lock+0x94>)
 80216e4:	e7f1      	b.n	80216ca <CRC_Lock+0x5a>
 80216e6:	bf00      	nop
 80216e8:	e0002000 	.word	0xe0002000
 80216ec:	e000ed00 	.word	0xe000ed00
 80216f0:	e0042000 	.word	0xe0042000
 80216f4:	5c001000 	.word	0x5c001000
 80216f8:	58024c08 	.word	0x58024c08
 80216fc:	58024c00 	.word	0x58024c00
 8021700:	40023008 	.word	0x40023008
 8021704:	40023000 	.word	0x40023000

08021708 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8021708:	6101      	str	r1, [r0, #16]
 802170a:	4770      	bx	lr

0802170c <_ZN8touchgfx8Gestures4tickEv>:
 802170c:	7b83      	ldrb	r3, [r0, #14]
 802170e:	b14b      	cbz	r3, 8021724 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8021710:	8903      	ldrh	r3, [r0, #8]
 8021712:	3301      	adds	r3, #1
 8021714:	b29b      	uxth	r3, r3
 8021716:	2b07      	cmp	r3, #7
 8021718:	8103      	strh	r3, [r0, #8]
 802171a:	bf81      	itttt	hi
 802171c:	2300      	movhi	r3, #0
 802171e:	8143      	strhhi	r3, [r0, #10]
 8021720:	8183      	strhhi	r3, [r0, #12]
 8021722:	7383      	strbhi	r3, [r0, #14]
 8021724:	4770      	bx	lr
	...

08021728 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8021728:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802172c:	4604      	mov	r4, r0
 802172e:	4698      	mov	r8, r3
 8021730:	8880      	ldrh	r0, [r0, #4]
 8021732:	4617      	mov	r7, r2
 8021734:	4b1d      	ldr	r3, [pc, #116]	; (80217ac <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8021736:	460e      	mov	r6, r1
 8021738:	f8ad 0006 	strh.w	r0, [sp, #6]
 802173c:	eba8 0000 	sub.w	r0, r8, r0
 8021740:	9300      	str	r3, [sp, #0]
 8021742:	2300      	movs	r3, #0
 8021744:	b280      	uxth	r0, r0
 8021746:	8aa2      	ldrh	r2, [r4, #20]
 8021748:	f88d 3004 	strb.w	r3, [sp, #4]
 802174c:	b203      	sxth	r3, r0
 802174e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8021752:	88e1      	ldrh	r1, [r4, #6]
 8021754:	2b00      	cmp	r3, #0
 8021756:	f8ad 800a 	strh.w	r8, [sp, #10]
 802175a:	f8ad 1008 	strh.w	r1, [sp, #8]
 802175e:	bfb8      	it	lt
 8021760:	4240      	neglt	r0, r0
 8021762:	f8ad 500c 	strh.w	r5, [sp, #12]
 8021766:	bfb8      	it	lt
 8021768:	b203      	sxthlt	r3, r0
 802176a:	4293      	cmp	r3, r2
 802176c:	dc08      	bgt.n	8021780 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 802176e:	1a69      	subs	r1, r5, r1
 8021770:	b289      	uxth	r1, r1
 8021772:	b20b      	sxth	r3, r1
 8021774:	2b00      	cmp	r3, #0
 8021776:	bfbc      	itt	lt
 8021778:	4249      	neglt	r1, r1
 802177a:	b20b      	sxthlt	r3, r1
 802177c:	429a      	cmp	r2, r3
 802177e:	da13      	bge.n	80217a8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8021780:	6920      	ldr	r0, [r4, #16]
 8021782:	4669      	mov	r1, sp
 8021784:	eba8 0606 	sub.w	r6, r8, r6
 8021788:	1bef      	subs	r7, r5, r7
 802178a:	6803      	ldr	r3, [r0, #0]
 802178c:	685b      	ldr	r3, [r3, #4]
 802178e:	4798      	blx	r3
 8021790:	2300      	movs	r3, #0
 8021792:	2001      	movs	r0, #1
 8021794:	8166      	strh	r6, [r4, #10]
 8021796:	8123      	strh	r3, [r4, #8]
 8021798:	81a7      	strh	r7, [r4, #12]
 802179a:	f8a4 8004 	strh.w	r8, [r4, #4]
 802179e:	80e5      	strh	r5, [r4, #6]
 80217a0:	73a0      	strb	r0, [r4, #14]
 80217a2:	b004      	add	sp, #16
 80217a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80217a8:	2000      	movs	r0, #0
 80217aa:	e7fa      	b.n	80217a2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 80217ac:	08028510 	.word	0x08028510

080217b0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80217b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80217b2:	461e      	mov	r6, r3
 80217b4:	1e4b      	subs	r3, r1, #1
 80217b6:	b085      	sub	sp, #20
 80217b8:	4604      	mov	r4, r0
 80217ba:	2b01      	cmp	r3, #1
 80217bc:	460d      	mov	r5, r1
 80217be:	4617      	mov	r7, r2
 80217c0:	d84b      	bhi.n	802185a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80217c2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80217c6:	1cd3      	adds	r3, r2, #3
 80217c8:	b29b      	uxth	r3, r3
 80217ca:	2b06      	cmp	r3, #6
 80217cc:	d916      	bls.n	80217fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80217ce:	f8df c098 	ldr.w	ip, [pc, #152]	; 8021868 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 80217d2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80217d6:	f8cd c004 	str.w	ip, [sp, #4]
 80217da:	f04f 0c00 	mov.w	ip, #0
 80217de:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80217e2:	6900      	ldr	r0, [r0, #16]
 80217e4:	f8ad 100c 	strh.w	r1, [sp, #12]
 80217e8:	a901      	add	r1, sp, #4
 80217ea:	f88d c008 	strb.w	ip, [sp, #8]
 80217ee:	f8ad 200a 	strh.w	r2, [sp, #10]
 80217f2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80217f6:	6803      	ldr	r3, [r0, #0]
 80217f8:	689b      	ldr	r3, [r3, #8]
 80217fa:	4798      	blx	r3
 80217fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021800:	1cd3      	adds	r3, r2, #3
 8021802:	b29b      	uxth	r3, r3
 8021804:	2b06      	cmp	r3, #6
 8021806:	d916      	bls.n	8021836 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021808:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8021868 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 802180c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021810:	f8cd c004 	str.w	ip, [sp, #4]
 8021814:	f04f 0c01 	mov.w	ip, #1
 8021818:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802181c:	6920      	ldr	r0, [r4, #16]
 802181e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8021822:	a901      	add	r1, sp, #4
 8021824:	f88d c008 	strb.w	ip, [sp, #8]
 8021828:	f8ad 200a 	strh.w	r2, [sp, #10]
 802182c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021830:	6803      	ldr	r3, [r0, #0]
 8021832:	689b      	ldr	r3, [r3, #8]
 8021834:	4798      	blx	r3
 8021836:	4b0b      	ldr	r3, [pc, #44]	; (8021864 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8021838:	a901      	add	r1, sp, #4
 802183a:	6920      	ldr	r0, [r4, #16]
 802183c:	9301      	str	r3, [sp, #4]
 802183e:	2300      	movs	r3, #0
 8021840:	f88d 5008 	strb.w	r5, [sp, #8]
 8021844:	f8ad 700a 	strh.w	r7, [sp, #10]
 8021848:	f8ad 600c 	strh.w	r6, [sp, #12]
 802184c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021850:	6803      	ldr	r3, [r0, #0]
 8021852:	681b      	ldr	r3, [r3, #0]
 8021854:	4798      	blx	r3
 8021856:	b005      	add	sp, #20
 8021858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802185a:	2900      	cmp	r1, #0
 802185c:	d1eb      	bne.n	8021836 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802185e:	80a2      	strh	r2, [r4, #4]
 8021860:	80c6      	strh	r6, [r0, #6]
 8021862:	e7e8      	b.n	8021836 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021864:	080284fc 	.word	0x080284fc
 8021868:	08028524 	.word	0x08028524

0802186c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 802186c:	10c9      	asrs	r1, r1, #3
 802186e:	2900      	cmp	r1, #0
 8021870:	bfb8      	it	lt
 8021872:	4249      	neglt	r1, r1
 8021874:	2801      	cmp	r0, #1
 8021876:	d108      	bne.n	802188a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8021878:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802187c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8021880:	4601      	mov	r1, r0
 8021882:	dd02      	ble.n	802188a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8021884:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8021888:	4770      	bx	lr
 802188a:	29ff      	cmp	r1, #255	; 0xff
 802188c:	bfa8      	it	ge
 802188e:	21ff      	movge	r1, #255	; 0xff
 8021890:	4608      	mov	r0, r1
 8021892:	4770      	bx	lr

08021894 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8021894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021898:	688c      	ldr	r4, [r1, #8]
 802189a:	b087      	sub	sp, #28
 802189c:	4607      	mov	r7, r0
 802189e:	2c00      	cmp	r4, #0
 80218a0:	db2b      	blt.n	80218fa <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 80218a2:	6803      	ldr	r3, [r0, #0]
 80218a4:	68da      	ldr	r2, [r3, #12]
 80218a6:	42a2      	cmp	r2, r4
 80218a8:	dd27      	ble.n	80218fa <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 80218aa:	681a      	ldr	r2, [r3, #0]
 80218ac:	691e      	ldr	r6, [r3, #16]
 80218ae:	68cd      	ldr	r5, [r1, #12]
 80218b0:	fb06 2604 	mla	r6, r6, r4, r2
 80218b4:	f8d1 901c 	ldr.w	r9, [r1, #28]
 80218b8:	698a      	ldr	r2, [r1, #24]
 80218ba:	f893 a004 	ldrb.w	sl, [r3, #4]
 80218be:	f8d1 8020 	ldr.w	r8, [r1, #32]
 80218c2:	9205      	str	r2, [sp, #20]
 80218c4:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 80218c8:	9b05      	ldr	r3, [sp, #20]
 80218ca:	6839      	ldr	r1, [r7, #0]
 80218cc:	eb03 0c02 	add.w	ip, r3, r2
 80218d0:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 80218d4:	6889      	ldr	r1, [r1, #8]
 80218d6:	1898      	adds	r0, r3, r2
 80218d8:	4288      	cmp	r0, r1
 80218da:	db02      	blt.n	80218e2 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 80218dc:	1a8b      	subs	r3, r1, r2
 80218de:	2b00      	cmp	r3, #0
 80218e0:	dd09      	ble.n	80218f6 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 80218e2:	6878      	ldr	r0, [r7, #4]
 80218e4:	6801      	ldr	r1, [r0, #0]
 80218e6:	9400      	str	r4, [sp, #0]
 80218e8:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 80218ec:	4653      	mov	r3, sl
 80218ee:	f8d1 b008 	ldr.w	fp, [r1, #8]
 80218f2:	4631      	mov	r1, r6
 80218f4:	47d8      	blx	fp
 80218f6:	3d01      	subs	r5, #1
 80218f8:	d1e4      	bne.n	80218c4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 80218fa:	b007      	add	sp, #28
 80218fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021900 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8021900:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8021904:	b90b      	cbnz	r3, 802190a <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8021906:	f001 b974 	b.w	8022bf2 <_ZN8touchgfx7Outline6lineToEii>
 802190a:	4770      	bx	lr

0802190c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 802190c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021910:	4604      	mov	r4, r0
 8021912:	2600      	movs	r6, #0
 8021914:	4b8e      	ldr	r3, [pc, #568]	; (8021b50 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 8021916:	f100 0518 	add.w	r5, r0, #24
 802191a:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 802191e:	b086      	sub	sp, #24
 8021920:	4690      	mov	r8, r2
 8021922:	e9c0 3100 	strd	r3, r1, [r0]
 8021926:	e9c0 6602 	strd	r6, r6, [r0, #8]
 802192a:	e9c0 6604 	strd	r6, r6, [r0, #16]
 802192e:	4628      	mov	r0, r5
 8021930:	f001 fb75 	bl	802301e <_ZN8touchgfx15RenderingBufferC1Ev>
 8021934:	4638      	mov	r0, r7
 8021936:	f000 fb45 	bl	8021fc4 <_ZN8touchgfx7OutlineC1Ev>
 802193a:	f104 0074 	add.w	r0, r4, #116	; 0x74
 802193e:	f001 fb23 	bl	8022f88 <_ZN8touchgfx8ScanlineC1Ev>
 8021942:	2301      	movs	r3, #1
 8021944:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 8021948:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 802194c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8021950:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 8021954:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 8021958:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 802195c:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 8021960:	f7f4 fc3a 	bl	80161d8 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8021964:	b928      	cbnz	r0, 8021972 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 8021966:	4b7b      	ldr	r3, [pc, #492]	; (8021b54 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8021968:	2118      	movs	r1, #24
 802196a:	4a7b      	ldr	r2, [pc, #492]	; (8021b58 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 802196c:	487b      	ldr	r0, [pc, #492]	; (8021b5c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 802196e:	f001 fb99 	bl	80230a4 <__assert_func>
 8021972:	f9b8 2000 	ldrsh.w	r2, [r8]
 8021976:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802197a:	f8d4 c004 	ldr.w	ip, [r4, #4]
 802197e:	4410      	add	r0, r2
 8021980:	9602      	str	r6, [sp, #8]
 8021982:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8021986:	b280      	uxth	r0, r0
 8021988:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 802198c:	fa0f fa80 	sxth.w	sl, r0
 8021990:	f1ba 0f00 	cmp.w	sl, #0
 8021994:	dd70      	ble.n	8021a78 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8021996:	4591      	cmp	r9, r2
 8021998:	dd6e      	ble.n	8021a78 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 802199a:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 802199e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80219a2:	440b      	add	r3, r1
 80219a4:	b29b      	uxth	r3, r3
 80219a6:	b21e      	sxth	r6, r3
 80219a8:	2e00      	cmp	r6, #0
 80219aa:	dd65      	ble.n	8021a78 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80219ac:	458e      	cmp	lr, r1
 80219ae:	dd63      	ble.n	8021a78 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80219b0:	45d1      	cmp	r9, sl
 80219b2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80219b6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80219ba:	bfb8      	it	lt
 80219bc:	fa1f f089 	uxthlt.w	r0, r9
 80219c0:	45b6      	cmp	lr, r6
 80219c2:	f8ad 2008 	strh.w	r2, [sp, #8]
 80219c6:	bfb8      	it	lt
 80219c8:	fa1f f38e 	uxthlt.w	r3, lr
 80219cc:	1a80      	subs	r0, r0, r2
 80219ce:	f8ad 100a 	strh.w	r1, [sp, #10]
 80219d2:	1a5b      	subs	r3, r3, r1
 80219d4:	f8ad 000c 	strh.w	r0, [sp, #12]
 80219d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80219dc:	f10d 0808 	add.w	r8, sp, #8
 80219e0:	ae04      	add	r6, sp, #16
 80219e2:	e898 0003 	ldmia.w	r8, {r0, r1}
 80219e6:	e886 0003 	stmia.w	r6, {r0, r1}
 80219ea:	f8dc 3000 	ldr.w	r3, [ip]
 80219ee:	4660      	mov	r0, ip
 80219f0:	4631      	mov	r1, r6
 80219f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80219f4:	4798      	blx	r3
 80219f6:	6861      	ldr	r1, [r4, #4]
 80219f8:	4640      	mov	r0, r8
 80219fa:	3104      	adds	r1, #4
 80219fc:	f7f5 fa5a 	bl	8016eb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021a00:	4630      	mov	r0, r6
 8021a02:	f7f5 fa6f 	bl	8016ee4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021a06:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8021a0a:	f7f4 fb75 	bl	80160f8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 8021a0e:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 8021a12:	4638      	mov	r0, r7
 8021a14:	f000 fab2 	bl	8021f7c <_ZN8touchgfx7Outline5resetEv>
 8021a18:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8021a1c:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8021a20:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8021a24:	015b      	lsls	r3, r3, #5
 8021a26:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 8021a2a:	0152      	lsls	r2, r2, #5
 8021a2c:	60e3      	str	r3, [r4, #12]
 8021a2e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8021a32:	60a2      	str	r2, [r4, #8]
 8021a34:	015b      	lsls	r3, r3, #5
 8021a36:	6123      	str	r3, [r4, #16]
 8021a38:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8021a3c:	015b      	lsls	r3, r3, #5
 8021a3e:	6163      	str	r3, [r4, #20]
 8021a40:	4b47      	ldr	r3, [pc, #284]	; (8021b60 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8021a42:	6818      	ldr	r0, [r3, #0]
 8021a44:	6803      	ldr	r3, [r0, #0]
 8021a46:	6a1b      	ldr	r3, [r3, #32]
 8021a48:	4798      	blx	r3
 8021a4a:	4606      	mov	r6, r0
 8021a4c:	f7e8 faf2 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8021a50:	6803      	ldr	r3, [r0, #0]
 8021a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021a54:	4798      	blx	r3
 8021a56:	4607      	mov	r7, r0
 8021a58:	f7e8 faec 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8021a5c:	6803      	ldr	r3, [r0, #0]
 8021a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021a60:	4798      	blx	r3
 8021a62:	280c      	cmp	r0, #12
 8021a64:	d854      	bhi.n	8021b10 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 8021a66:	e8df f000 	tbb	[pc, r0]
 8021a6a:	554b      	.short	0x554b
 8021a6c:	2b6e0a66 	.word	0x2b6e0a66
 8021a70:	5f5f5f3b 	.word	0x5f5f5f3b
 8021a74:	5f5f      	.short	0x5f5f
 8021a76:	6e          	.byte	0x6e
 8021a77:	00          	.byte	0x00
 8021a78:	2300      	movs	r3, #0
 8021a7a:	9303      	str	r3, [sp, #12]
 8021a7c:	e7ae      	b.n	80219dc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8021a7e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021a82:	2108      	movs	r1, #8
 8021a84:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021a88:	fb92 f1f1 	sdiv	r1, r2, r1
 8021a8c:	fb07 1303 	mla	r3, r7, r3, r1
 8021a90:	441e      	add	r6, r3
 8021a92:	4253      	negs	r3, r2
 8021a94:	f002 0207 	and.w	r2, r2, #7
 8021a98:	f003 0307 	and.w	r3, r3, #7
 8021a9c:	bf58      	it	pl
 8021a9e:	425a      	negpl	r2, r3
 8021aa0:	b2d2      	uxtb	r2, r2
 8021aa2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8021aa6:	4628      	mov	r0, r5
 8021aa8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8021aac:	66e1      	str	r1, [r4, #108]	; 0x6c
 8021aae:	e9cd 1700 	strd	r1, r7, [sp]
 8021ab2:	4631      	mov	r1, r6
 8021ab4:	f001 fabb 	bl	802302e <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 8021ab8:	4620      	mov	r0, r4
 8021aba:	b006      	add	sp, #24
 8021abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021ac0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021ac4:	2104      	movs	r1, #4
 8021ac6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021aca:	fb92 f1f1 	sdiv	r1, r2, r1
 8021ace:	fb07 1303 	mla	r3, r7, r3, r1
 8021ad2:	441e      	add	r6, r3
 8021ad4:	4253      	negs	r3, r2
 8021ad6:	f002 0203 	and.w	r2, r2, #3
 8021ada:	f003 0303 	and.w	r3, r3, #3
 8021ade:	e7dd      	b.n	8021a9c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8021ae0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021ae4:	2102      	movs	r1, #2
 8021ae6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021aea:	2a00      	cmp	r2, #0
 8021aec:	fb92 f1f1 	sdiv	r1, r2, r1
 8021af0:	f002 0201 	and.w	r2, r2, #1
 8021af4:	fb07 1303 	mla	r3, r7, r3, r1
 8021af8:	bfb8      	it	lt
 8021afa:	4252      	neglt	r2, r2
 8021afc:	441e      	add	r6, r3
 8021afe:	e7cf      	b.n	8021aa0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8021b00:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021b04:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021b08:	437b      	muls	r3, r7
 8021b0a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8021b0e:	441e      	add	r6, r3
 8021b10:	2200      	movs	r2, #0
 8021b12:	e7c6      	b.n	8021aa2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 8021b14:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021b18:	2103      	movs	r1, #3
 8021b1a:	fb07 f203 	mul.w	r2, r7, r3
 8021b1e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8021b22:	fb13 2301 	smlabb	r3, r3, r1, r2
 8021b26:	e7f2      	b.n	8021b0e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8021b28:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021b2c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021b30:	fb07 2303 	mla	r3, r7, r3, r2
 8021b34:	e7eb      	b.n	8021b0e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8021b36:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021b3a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021b3e:	437b      	muls	r3, r7
 8021b40:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8021b44:	e7e3      	b.n	8021b0e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8021b46:	4b07      	ldr	r3, [pc, #28]	; (8021b64 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8021b48:	2156      	movs	r1, #86	; 0x56
 8021b4a:	4a03      	ldr	r2, [pc, #12]	; (8021b58 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8021b4c:	e70e      	b.n	802196c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 8021b4e:	bf00      	nop
 8021b50:	08029b00 	.word	0x08029b00
 8021b54:	08029a4a 	.word	0x08029a4a
 8021b58:	08029b08 	.word	0x08029b08
 8021b5c:	08029aa6 	.word	0x08029aa6
 8021b60:	2000b1ac 	.word	0x2000b1ac
 8021b64:	08029ada 	.word	0x08029ada

08021b68 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8021b68:	6812      	ldr	r2, [r2, #0]
 8021b6a:	2a00      	cmp	r2, #0
 8021b6c:	db0b      	blt.n	8021b86 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8021b6e:	9800      	ldr	r0, [sp, #0]
 8021b70:	6800      	ldr	r0, [r0, #0]
 8021b72:	4290      	cmp	r0, r2
 8021b74:	bfd4      	ite	le
 8021b76:	2002      	movle	r0, #2
 8021b78:	2000      	movgt	r0, #0
 8021b7a:	680a      	ldr	r2, [r1, #0]
 8021b7c:	2a00      	cmp	r2, #0
 8021b7e:	da04      	bge.n	8021b8a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8021b80:	f040 0004 	orr.w	r0, r0, #4
 8021b84:	4770      	bx	lr
 8021b86:	2001      	movs	r0, #1
 8021b88:	e7f7      	b.n	8021b7a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 8021b8a:	681b      	ldr	r3, [r3, #0]
 8021b8c:	4293      	cmp	r3, r2
 8021b8e:	bfd8      	it	le
 8021b90:	f040 0008 	orrle.w	r0, r0, #8
 8021b94:	4770      	bx	lr
	...

08021b98 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8021b98:	4b07      	ldr	r3, [pc, #28]	; (8021bb8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8021b9a:	b510      	push	{r4, lr}
 8021b9c:	781b      	ldrb	r3, [r3, #0]
 8021b9e:	2b01      	cmp	r3, #1
 8021ba0:	d108      	bne.n	8021bb4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8021ba2:	6843      	ldr	r3, [r0, #4]
 8021ba4:	6814      	ldr	r4, [r2, #0]
 8021ba6:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8021baa:	680b      	ldr	r3, [r1, #0]
 8021bac:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8021bb0:	6013      	str	r3, [r2, #0]
 8021bb2:	600c      	str	r4, [r1, #0]
 8021bb4:	bd10      	pop	{r4, pc}
 8021bb6:	bf00      	nop
 8021bb8:	2000b1a4 	.word	0x2000b1a4

08021bbc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8021bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021bbe:	b085      	sub	sp, #20
 8021bc0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8021bc4:	4604      	mov	r4, r0
 8021bc6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8021bca:	b33b      	cbz	r3, 8021c1c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8021bcc:	aa02      	add	r2, sp, #8
 8021bce:	a903      	add	r1, sp, #12
 8021bd0:	f7ff ffe2 	bl	8021b98 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8021bd4:	68a3      	ldr	r3, [r4, #8]
 8021bd6:	9e03      	ldr	r6, [sp, #12]
 8021bd8:	aa02      	add	r2, sp, #8
 8021bda:	9f02      	ldr	r7, [sp, #8]
 8021bdc:	a903      	add	r1, sp, #12
 8021bde:	1af6      	subs	r6, r6, r3
 8021be0:	68e3      	ldr	r3, [r4, #12]
 8021be2:	4620      	mov	r0, r4
 8021be4:	1aff      	subs	r7, r7, r3
 8021be6:	f104 0314 	add.w	r3, r4, #20
 8021bea:	9603      	str	r6, [sp, #12]
 8021bec:	9300      	str	r3, [sp, #0]
 8021bee:	f104 0310 	add.w	r3, r4, #16
 8021bf2:	9702      	str	r7, [sp, #8]
 8021bf4:	f7ff ffb8 	bl	8021b68 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8021bf8:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 8021bfc:	4605      	mov	r5, r0
 8021bfe:	b97b      	cbnz	r3, 8021c20 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8021c00:	463a      	mov	r2, r7
 8021c02:	4631      	mov	r1, r6
 8021c04:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8021c08:	f7ff fe7a 	bl	8021900 <_ZN8touchgfx10Rasterizer6lineToEii>
 8021c0c:	9b03      	ldr	r3, [sp, #12]
 8021c0e:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 8021c12:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8021c16:	9b02      	ldr	r3, [sp, #8]
 8021c18:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8021c1c:	b005      	add	sp, #20
 8021c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021c20:	b110      	cbz	r0, 8021c28 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8021c22:	ea13 0200 	ands.w	r2, r3, r0
 8021c26:	d11c      	bne.n	8021c62 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8021c28:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 8021c2c:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8021c30:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 8021c34:	b188      	cbz	r0, 8021c5a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8021c36:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8021c3a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8021c3e:	b913      	cbnz	r3, 8021c46 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8021c40:	4630      	mov	r0, r6
 8021c42:	f001 f806 	bl	8022c52 <_ZN8touchgfx7Outline6moveToEii>
 8021c46:	2300      	movs	r3, #0
 8021c48:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8021c4c:	2301      	movs	r3, #1
 8021c4e:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8021c52:	4630      	mov	r0, r6
 8021c54:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8021c58:	e7d6      	b.n	8021c08 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 8021c5a:	4630      	mov	r0, r6
 8021c5c:	f7ff fe50 	bl	8021900 <_ZN8touchgfx10Rasterizer6lineToEii>
 8021c60:	e7f7      	b.n	8021c52 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8021c62:	4615      	mov	r5, r2
 8021c64:	e7d2      	b.n	8021c0c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

08021c66 <_ZN8touchgfx6Canvas5closeEv>:
 8021c66:	b538      	push	{r3, r4, r5, lr}
 8021c68:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8021c6c:	4604      	mov	r4, r0
 8021c6e:	b993      	cbnz	r3, 8021c96 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8021c70:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8021c74:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 8021c78:	4213      	tst	r3, r2
 8021c7a:	d10c      	bne.n	8021c96 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8021c7c:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 8021c80:	b123      	cbz	r3, 8021c8c <_ZN8touchgfx6Canvas5closeEv+0x26>
 8021c82:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 8021c86:	4628      	mov	r0, r5
 8021c88:	f7ff fe3a 	bl	8021900 <_ZN8touchgfx10Rasterizer6lineToEii>
 8021c8c:	4628      	mov	r0, r5
 8021c8e:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 8021c92:	f7ff fe35 	bl	8021900 <_ZN8touchgfx10Rasterizer6lineToEii>
 8021c96:	2300      	movs	r3, #0
 8021c98:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8021c9c:	bd38      	pop	{r3, r4, r5, pc}

08021c9e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8021c9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021ca0:	b085      	sub	sp, #20
 8021ca2:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8021ca6:	4604      	mov	r4, r0
 8021ca8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8021cac:	b353      	cbz	r3, 8021d04 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8021cae:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8021cb2:	b90b      	cbnz	r3, 8021cb8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8021cb4:	f7ff ffd7 	bl	8021c66 <_ZN8touchgfx6Canvas5closeEv>
 8021cb8:	aa02      	add	r2, sp, #8
 8021cba:	a903      	add	r1, sp, #12
 8021cbc:	4620      	mov	r0, r4
 8021cbe:	f7ff ff6b 	bl	8021b98 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8021cc2:	68a3      	ldr	r3, [r4, #8]
 8021cc4:	9d03      	ldr	r5, [sp, #12]
 8021cc6:	aa02      	add	r2, sp, #8
 8021cc8:	9e02      	ldr	r6, [sp, #8]
 8021cca:	a903      	add	r1, sp, #12
 8021ccc:	1aed      	subs	r5, r5, r3
 8021cce:	68e3      	ldr	r3, [r4, #12]
 8021cd0:	4620      	mov	r0, r4
 8021cd2:	1af6      	subs	r6, r6, r3
 8021cd4:	f104 0314 	add.w	r3, r4, #20
 8021cd8:	9503      	str	r5, [sp, #12]
 8021cda:	9300      	str	r3, [sp, #0]
 8021cdc:	f104 0310 	add.w	r3, r4, #16
 8021ce0:	9602      	str	r6, [sp, #8]
 8021ce2:	f7ff ff41 	bl	8021b68 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 8021ce6:	4607      	mov	r7, r0
 8021ce8:	b170      	cbz	r0, 8021d08 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 8021cea:	2301      	movs	r3, #1
 8021cec:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8021cf0:	9a03      	ldr	r2, [sp, #12]
 8021cf2:	9b02      	ldr	r3, [sp, #8]
 8021cf4:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 8021cf8:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 8021cfc:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8021d00:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 8021d04:	b005      	add	sp, #20
 8021d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021d08:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8021d0c:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 8021d10:	b92b      	cbnz	r3, 8021d1e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8021d12:	4632      	mov	r2, r6
 8021d14:	4629      	mov	r1, r5
 8021d16:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8021d1a:	f000 ff9a 	bl	8022c52 <_ZN8touchgfx7Outline6moveToEii>
 8021d1e:	2300      	movs	r3, #0
 8021d20:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8021d24:	2301      	movs	r3, #1
 8021d26:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8021d2a:	e7e1      	b.n	8021cf0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

08021d2c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 8021d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d30:	4604      	mov	r4, r0
 8021d32:	b087      	sub	sp, #28
 8021d34:	9105      	str	r1, [sp, #20]
 8021d36:	f001 f8d0 	bl	8022eda <_ZN8touchgfx7Outline8getCellsEv>
 8021d3a:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8021d3e:	4605      	mov	r5, r0
 8021d40:	f1b9 0f00 	cmp.w	r9, #0
 8021d44:	d103      	bne.n	8021d4e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 8021d46:	2001      	movs	r0, #1
 8021d48:	b007      	add	sp, #28
 8021d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d4e:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8021d52:	2e00      	cmp	r6, #0
 8021d54:	d139      	bne.n	8021dca <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 8021d56:	f104 0848 	add.w	r8, r4, #72	; 0x48
 8021d5a:	f105 0708 	add.w	r7, r5, #8
 8021d5e:	4640      	mov	r0, r8
 8021d60:	f001 f8fd 	bl	8022f5e <_ZN8touchgfx8Scanline5resetEv>
 8021d64:	f109 33ff 	add.w	r3, r9, #4294967295
 8021d68:	9303      	str	r3, [sp, #12]
 8021d6a:	f9b5 b000 	ldrsh.w	fp, [r5]
 8021d6e:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8021d72:	46da      	mov	sl, fp
 8021d74:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8021d78:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8021d7c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8021d80:	9b03      	ldr	r3, [sp, #12]
 8021d82:	4416      	add	r6, r2
 8021d84:	9504      	str	r5, [sp, #16]
 8021d86:	463d      	mov	r5, r7
 8021d88:	3b01      	subs	r3, #1
 8021d8a:	9303      	str	r3, [sp, #12]
 8021d8c:	3301      	adds	r3, #1
 8021d8e:	d01e      	beq.n	8021dce <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8021d90:	3708      	adds	r7, #8
 8021d92:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 8021d96:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 8021d9a:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8021d9e:	4290      	cmp	r0, r2
 8021da0:	d11e      	bne.n	8021de0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8021da2:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 8021da6:	4411      	add	r1, r2
 8021da8:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8021dac:	e7e8      	b.n	8021d80 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8021dae:	1c91      	adds	r1, r2, #2
 8021db0:	f04f 0301 	mov.w	r3, #1
 8021db4:	65e1      	str	r1, [r4, #92]	; 0x5c
 8021db6:	8053      	strh	r3, [r2, #2]
 8021db8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8021dba:	1c91      	adds	r1, r2, #2
 8021dbc:	65a1      	str	r1, [r4, #88]	; 0x58
 8021dbe:	f8a2 b002 	strh.w	fp, [r2, #2]
 8021dc2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8021dc4:	3201      	adds	r2, #1
 8021dc6:	6562      	str	r2, [r4, #84]	; 0x54
 8021dc8:	e03a      	b.n	8021e40 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 8021dca:	2000      	movs	r0, #0
 8021dcc:	e7bc      	b.n	8021d48 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8021dce:	b951      	cbnz	r1, 8021de6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8021dd0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8021dd2:	2b00      	cmp	r3, #0
 8021dd4:	d0b7      	beq.n	8021d46 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8021dd6:	4641      	mov	r1, r8
 8021dd8:	9805      	ldr	r0, [sp, #20]
 8021dda:	f7ff fd5b 	bl	8021894 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8021dde:	e7b2      	b.n	8021d46 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8021de0:	2900      	cmp	r1, #0
 8021de2:	d035      	beq.n	8021e50 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8021de4:	9504      	str	r5, [sp, #16]
 8021de6:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 8021dea:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8021dee:	f7ff fd3d 	bl	802186c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8021df2:	4605      	mov	r5, r0
 8021df4:	b330      	cbz	r0, 8021e44 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8021df6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8021df8:	b182      	cbz	r2, 8021e1c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8021dfa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8021dfc:	454a      	cmp	r2, r9
 8021dfe:	d00d      	beq.n	8021e1c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8021e00:	4641      	mov	r1, r8
 8021e02:	9805      	ldr	r0, [sp, #20]
 8021e04:	f7ff fd46 	bl	8021894 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8021e08:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8021e0c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8021e0e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8021e12:	65e2      	str	r2, [r4, #92]	; 0x5c
 8021e14:	2300      	movs	r3, #0
 8021e16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021e18:	6563      	str	r3, [r4, #84]	; 0x54
 8021e1a:	65a2      	str	r2, [r4, #88]	; 0x58
 8021e1c:	f1bb 0f00 	cmp.w	fp, #0
 8021e20:	db10      	blt.n	8021e44 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8021e22:	f7f4 f9e7 	bl	80161f4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8021e26:	4583      	cmp	fp, r0
 8021e28:	d20c      	bcs.n	8021e44 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8021e2a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8021e2c:	f802 500b 	strb.w	r5, [r2, fp]
 8021e30:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8021e32:	3201      	adds	r2, #1
 8021e34:	455a      	cmp	r2, fp
 8021e36:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8021e38:	d1b9      	bne.n	8021dae <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 8021e3a:	8811      	ldrh	r1, [r2, #0]
 8021e3c:	3101      	adds	r1, #1
 8021e3e:	8011      	strh	r1, [r2, #0]
 8021e40:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8021e44:	9b03      	ldr	r3, [sp, #12]
 8021e46:	3301      	adds	r3, #1
 8021e48:	d0c2      	beq.n	8021dd0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 8021e4a:	f10b 0a01 	add.w	sl, fp, #1
 8021e4e:	9d04      	ldr	r5, [sp, #16]
 8021e50:	f9b5 3000 	ldrsh.w	r3, [r5]
 8021e54:	4553      	cmp	r3, sl
 8021e56:	dd88      	ble.n	8021d6a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8021e58:	01b1      	lsls	r1, r6, #6
 8021e5a:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8021e5e:	f7ff fd05 	bl	802186c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8021e62:	4683      	mov	fp, r0
 8021e64:	2800      	cmp	r0, #0
 8021e66:	d080      	beq.n	8021d6a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8021e68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8021e6a:	b183      	cbz	r3, 8021e8e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8021e6c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8021e6e:	454b      	cmp	r3, r9
 8021e70:	d00d      	beq.n	8021e8e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8021e72:	4641      	mov	r1, r8
 8021e74:	9805      	ldr	r0, [sp, #20]
 8021e76:	f7ff fd0d 	bl	8021894 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8021e7a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8021e7e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8021e82:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8021e84:	65e3      	str	r3, [r4, #92]	; 0x5c
 8021e86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021e88:	65a3      	str	r3, [r4, #88]	; 0x58
 8021e8a:	2300      	movs	r3, #0
 8021e8c:	6563      	str	r3, [r4, #84]	; 0x54
 8021e8e:	f9b5 3000 	ldrsh.w	r3, [r5]
 8021e92:	464a      	mov	r2, r9
 8021e94:	f8cd b000 	str.w	fp, [sp]
 8021e98:	4651      	mov	r1, sl
 8021e9a:	eba3 030a 	sub.w	r3, r3, sl
 8021e9e:	4640      	mov	r0, r8
 8021ea0:	f001 f884 	bl	8022fac <_ZN8touchgfx8Scanline7addSpanEiijj>
 8021ea4:	e761      	b.n	8021d6a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

08021ea6 <_ZN8touchgfx6Canvas6renderEv>:
 8021ea6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021ea8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8021eac:	4604      	mov	r4, r0
 8021eae:	b913      	cbnz	r3, 8021eb6 <_ZN8touchgfx6Canvas6renderEv+0x10>
 8021eb0:	2001      	movs	r0, #1
 8021eb2:	b003      	add	sp, #12
 8021eb4:	bd30      	pop	{r4, r5, pc}
 8021eb6:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8021eba:	2b00      	cmp	r3, #0
 8021ebc:	d131      	bne.n	8021f22 <_ZN8touchgfx6Canvas6renderEv+0x7c>
 8021ebe:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 8021ec2:	2b00      	cmp	r3, #0
 8021ec4:	d0f4      	beq.n	8021eb0 <_ZN8touchgfx6Canvas6renderEv+0xa>
 8021ec6:	6840      	ldr	r0, [r0, #4]
 8021ec8:	6803      	ldr	r3, [r0, #0]
 8021eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021ecc:	4798      	blx	r3
 8021ece:	2800      	cmp	r0, #0
 8021ed0:	d0ee      	beq.n	8021eb0 <_ZN8touchgfx6Canvas6renderEv+0xa>
 8021ed2:	4620      	mov	r0, r4
 8021ed4:	f7ff fec7 	bl	8021c66 <_ZN8touchgfx6Canvas5closeEv>
 8021ed8:	6860      	ldr	r0, [r4, #4]
 8021eda:	6803      	ldr	r3, [r0, #0]
 8021edc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021ede:	4798      	blx	r3
 8021ee0:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 8021ee4:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8021ee8:	f7f3 fbc3 	bl	8015672 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 8021eec:	6860      	ldr	r0, [r4, #4]
 8021eee:	6803      	ldr	r3, [r0, #0]
 8021ef0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021ef2:	4798      	blx	r3
 8021ef4:	4605      	mov	r5, r0
 8021ef6:	6860      	ldr	r0, [r4, #4]
 8021ef8:	6803      	ldr	r3, [r0, #0]
 8021efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021efc:	4798      	blx	r3
 8021efe:	4601      	mov	r1, r0
 8021f00:	4628      	mov	r0, r5
 8021f02:	f7f3 fbb9 	bl	8015678 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 8021f06:	6860      	ldr	r0, [r4, #4]
 8021f08:	6803      	ldr	r3, [r0, #0]
 8021f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021f0c:	4798      	blx	r3
 8021f0e:	f104 0318 	add.w	r3, r4, #24
 8021f12:	4669      	mov	r1, sp
 8021f14:	e9cd 3000 	strd	r3, r0, [sp]
 8021f18:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8021f1c:	f7ff ff06 	bl	8021d2c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8021f20:	e7c7      	b.n	8021eb2 <_ZN8touchgfx6Canvas6renderEv+0xc>
 8021f22:	2000      	movs	r0, #0
 8021f24:	e7c5      	b.n	8021eb2 <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

08021f28 <_ZN8touchgfx6CanvasD1Ev>:
 8021f28:	b538      	push	{r3, r4, r5, lr}
 8021f2a:	4605      	mov	r5, r0
 8021f2c:	4b08      	ldr	r3, [pc, #32]	; (8021f50 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8021f2e:	4604      	mov	r4, r0
 8021f30:	f845 3b2c 	str.w	r3, [r5], #44
 8021f34:	4b07      	ldr	r3, [pc, #28]	; (8021f54 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8021f36:	6818      	ldr	r0, [r3, #0]
 8021f38:	6803      	ldr	r3, [r0, #0]
 8021f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021f3c:	4798      	blx	r3
 8021f3e:	4628      	mov	r0, r5
 8021f40:	f000 f814 	bl	8021f6c <_ZN8touchgfx7OutlineD1Ev>
 8021f44:	f104 0018 	add.w	r0, r4, #24
 8021f48:	f001 f870 	bl	802302c <_ZN8touchgfx15RenderingBufferD1Ev>
 8021f4c:	4620      	mov	r0, r4
 8021f4e:	bd38      	pop	{r3, r4, r5, pc}
 8021f50:	08029b00 	.word	0x08029b00
 8021f54:	2000b1ac 	.word	0x2000b1ac

08021f58 <_ZN8touchgfx6CanvasD0Ev>:
 8021f58:	b510      	push	{r4, lr}
 8021f5a:	4604      	mov	r4, r0
 8021f5c:	f7ff ffe4 	bl	8021f28 <_ZN8touchgfx6CanvasD1Ev>
 8021f60:	21b8      	movs	r1, #184	; 0xb8
 8021f62:	4620      	mov	r0, r4
 8021f64:	f001 f873 	bl	802304e <_ZdlPvj>
 8021f68:	4620      	mov	r0, r4
 8021f6a:	bd10      	pop	{r4, pc}

08021f6c <_ZN8touchgfx7OutlineD1Ev>:
 8021f6c:	4770      	bx	lr

08021f6e <_ZN8touchgfx7OutlineD0Ev>:
 8021f6e:	b510      	push	{r4, lr}
 8021f70:	4604      	mov	r4, r0
 8021f72:	2148      	movs	r1, #72	; 0x48
 8021f74:	f001 f86b 	bl	802304e <_ZdlPvj>
 8021f78:	4620      	mov	r0, r4
 8021f7a:	bd10      	pop	{r4, pc}

08021f7c <_ZN8touchgfx7Outline5resetEv>:
 8021f7c:	b510      	push	{r4, lr}
 8021f7e:	4604      	mov	r4, r0
 8021f80:	f7f4 f950 	bl	8016224 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8021f84:	60e0      	str	r0, [r4, #12]
 8021f86:	f7f4 f953 	bl	8016230 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8021f8a:	68e3      	ldr	r3, [r4, #12]
 8021f8c:	2200      	movs	r2, #0
 8021f8e:	08c0      	lsrs	r0, r0, #3
 8021f90:	6123      	str	r3, [r4, #16]
 8021f92:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8021f96:	6060      	str	r0, [r4, #4]
 8021f98:	82a3      	strh	r3, [r4, #20]
 8021f9a:	82e3      	strh	r3, [r4, #22]
 8021f9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8021f9e:	60a2      	str	r2, [r4, #8]
 8021fa0:	f023 0301 	bic.w	r3, r3, #1
 8021fa4:	8322      	strh	r2, [r4, #24]
 8021fa6:	8362      	strh	r2, [r4, #26]
 8021fa8:	f043 0302 	orr.w	r3, r3, #2
 8021fac:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8021fb0:	63e3      	str	r3, [r4, #60]	; 0x3c
 8021fb2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021fb6:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8021fba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8021fbe:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8021fc2:	bd10      	pop	{r4, pc}

08021fc4 <_ZN8touchgfx7OutlineC1Ev>:
 8021fc4:	4b0f      	ldr	r3, [pc, #60]	; (8022004 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8021fc6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8021fca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8021fce:	b510      	push	{r4, lr}
 8021fd0:	6003      	str	r3, [r0, #0]
 8021fd2:	2300      	movs	r3, #0
 8021fd4:	4604      	mov	r4, r0
 8021fd6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8021fda:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8021fde:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021fe2:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8021fe6:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8021fea:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8021fee:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8021ff2:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 8021ff6:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8021ffa:	f7ff ffbf 	bl	8021f7c <_ZN8touchgfx7Outline5resetEv>
 8021ffe:	4620      	mov	r0, r4
 8022000:	bd10      	pop	{r4, pc}
 8022002:	bf00      	nop
 8022004:	08029b60 	.word	0x08029b60

08022008 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8022008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802200c:	b093      	sub	sp, #76	; 0x4c
 802200e:	4604      	mov	r4, r0
 8022010:	1156      	asrs	r6, r2, #5
 8022012:	f002 0e1f 	and.w	lr, r2, #31
 8022016:	981c      	ldr	r0, [sp, #112]	; 0x70
 8022018:	9305      	str	r3, [sp, #20]
 802201a:	1143      	asrs	r3, r0, #5
 802201c:	1145      	asrs	r5, r0, #5
 802201e:	930c      	str	r3, [sp, #48]	; 0x30
 8022020:	f000 031f 	and.w	r3, r0, #31
 8022024:	9303      	str	r3, [sp, #12]
 8022026:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8022028:	42b3      	cmp	r3, r6
 802202a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802202c:	bfc8      	it	gt
 802202e:	6326      	strgt	r6, [r4, #48]	; 0x30
 8022030:	42b3      	cmp	r3, r6
 8022032:	bfdc      	itt	le
 8022034:	1c73      	addle	r3, r6, #1
 8022036:	63a3      	strle	r3, [r4, #56]	; 0x38
 8022038:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802203a:	42ab      	cmp	r3, r5
 802203c:	bfc8      	it	gt
 802203e:	462b      	movgt	r3, r5
 8022040:	ea4f 1560 	mov.w	r5, r0, asr #5
 8022044:	bfc8      	it	gt
 8022046:	6323      	strgt	r3, [r4, #48]	; 0x30
 8022048:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802204a:	42ab      	cmp	r3, r5
 802204c:	bfd8      	it	le
 802204e:	462b      	movle	r3, r5
 8022050:	ea4f 1561 	mov.w	r5, r1, asr #5
 8022054:	bfdc      	itt	le
 8022056:	3301      	addle	r3, #1
 8022058:	63a3      	strle	r3, [r4, #56]	; 0x38
 802205a:	9b05      	ldr	r3, [sp, #20]
 802205c:	eba3 0a01 	sub.w	sl, r3, r1
 8022060:	1143      	asrs	r3, r0, #5
 8022062:	429e      	cmp	r6, r3
 8022064:	f040 8119 	bne.w	802229a <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 8022068:	9b05      	ldr	r3, [sp, #20]
 802206a:	ea4f 1c63 	mov.w	ip, r3, asr #5
 802206e:	9b03      	ldr	r3, [sp, #12]
 8022070:	459e      	cmp	lr, r3
 8022072:	d12c      	bne.n	80220ce <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8022074:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8022078:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 802207c:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8022080:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8022084:	4291      	cmp	r1, r2
 8022086:	d037      	beq.n	80220f8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8022088:	8b61      	ldrh	r1, [r4, #26]
 802208a:	8b22      	ldrh	r2, [r4, #24]
 802208c:	430a      	orrs	r2, r1
 802208e:	d00b      	beq.n	80220a8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8022090:	2b00      	cmp	r3, #0
 8022092:	db09      	blt.n	80220a8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8022094:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8022096:	429a      	cmp	r2, r3
 8022098:	dd06      	ble.n	80220a8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 802209a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802209e:	429a      	cmp	r2, r3
 80220a0:	d308      	bcc.n	80220b4 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 80220a2:	2301      	movs	r3, #1
 80220a4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80220a8:	f8a4 c014 	strh.w	ip, [r4, #20]
 80220ac:	82e6      	strh	r6, [r4, #22]
 80220ae:	2300      	movs	r3, #0
 80220b0:	8323      	strh	r3, [r4, #24]
 80220b2:	e0c6      	b.n	8022242 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 80220b4:	f104 0314 	add.w	r3, r4, #20
 80220b8:	6922      	ldr	r2, [r4, #16]
 80220ba:	cb03      	ldmia	r3!, {r0, r1}
 80220bc:	6010      	str	r0, [r2, #0]
 80220be:	6051      	str	r1, [r2, #4]
 80220c0:	6923      	ldr	r3, [r4, #16]
 80220c2:	3308      	adds	r3, #8
 80220c4:	6123      	str	r3, [r4, #16]
 80220c6:	68a3      	ldr	r3, [r4, #8]
 80220c8:	3301      	adds	r3, #1
 80220ca:	60a3      	str	r3, [r4, #8]
 80220cc:	e7ec      	b.n	80220a8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80220ce:	9b05      	ldr	r3, [sp, #20]
 80220d0:	45ac      	cmp	ip, r5
 80220d2:	f001 011f 	and.w	r1, r1, #31
 80220d6:	8b20      	ldrh	r0, [r4, #24]
 80220d8:	f003 031f 	and.w	r3, r3, #31
 80220dc:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80220e0:	9304      	str	r3, [sp, #16]
 80220e2:	9b03      	ldr	r3, [sp, #12]
 80220e4:	eba3 020e 	sub.w	r2, r3, lr
 80220e8:	d109      	bne.n	80220fe <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 80220ea:	9b04      	ldr	r3, [sp, #16]
 80220ec:	4410      	add	r0, r2
 80220ee:	4419      	add	r1, r3
 80220f0:	8320      	strh	r0, [r4, #24]
 80220f2:	fb02 8201 	mla	r2, r2, r1, r8
 80220f6:	8362      	strh	r2, [r4, #26]
 80220f8:	b013      	add	sp, #76	; 0x4c
 80220fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220fe:	f1ba 0f00 	cmp.w	sl, #0
 8022102:	f2c0 80a0 	blt.w	8022246 <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 8022106:	f1c1 0320 	rsb	r3, r1, #32
 802210a:	f04f 0b20 	mov.w	fp, #32
 802210e:	435a      	muls	r2, r3
 8022110:	2301      	movs	r3, #1
 8022112:	9302      	str	r3, [sp, #8]
 8022114:	4459      	add	r1, fp
 8022116:	fb92 f7fa 	sdiv	r7, r2, sl
 802211a:	fb0a 2217 	mls	r2, sl, r7, r2
 802211e:	2a00      	cmp	r2, #0
 8022120:	bfbc      	itt	lt
 8022122:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8022126:	4452      	addlt	r2, sl
 8022128:	fb07 8101 	mla	r1, r7, r1, r8
 802212c:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8022130:	4438      	add	r0, r7
 8022132:	b20b      	sxth	r3, r1
 8022134:	9902      	ldr	r1, [sp, #8]
 8022136:	b200      	sxth	r0, r0
 8022138:	9301      	str	r3, [sp, #4]
 802213a:	8363      	strh	r3, [r4, #26]
 802213c:	186b      	adds	r3, r5, r1
 802213e:	0435      	lsls	r5, r6, #16
 8022140:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8022144:	8320      	strh	r0, [r4, #24]
 8022146:	eb03 0905 	add.w	r9, r3, r5
 802214a:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 802214e:	9300      	str	r3, [sp, #0]
 8022150:	45c1      	cmp	r9, r8
 8022152:	9505      	str	r5, [sp, #20]
 8022154:	d014      	beq.n	8022180 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 8022156:	9b01      	ldr	r3, [sp, #4]
 8022158:	4303      	orrs	r3, r0
 802215a:	d00b      	beq.n	8022174 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802215c:	2900      	cmp	r1, #0
 802215e:	db09      	blt.n	8022174 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8022160:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022162:	428b      	cmp	r3, r1
 8022164:	dd06      	ble.n	8022174 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8022166:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802216a:	4299      	cmp	r1, r3
 802216c:	d374      	bcc.n	8022258 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 802216e:	2301      	movs	r3, #1
 8022170:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8022174:	9b00      	ldr	r3, [sp, #0]
 8022176:	82e6      	strh	r6, [r4, #22]
 8022178:	82a3      	strh	r3, [r4, #20]
 802217a:	2300      	movs	r3, #0
 802217c:	8323      	strh	r3, [r4, #24]
 802217e:	8363      	strh	r3, [r4, #26]
 8022180:	9900      	ldr	r1, [sp, #0]
 8022182:	eb0e 0307 	add.w	r3, lr, r7
 8022186:	458c      	cmp	ip, r1
 8022188:	d04e      	beq.n	8022228 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 802218a:	9903      	ldr	r1, [sp, #12]
 802218c:	eba2 020a 	sub.w	r2, r2, sl
 8022190:	1ac9      	subs	r1, r1, r3
 8022192:	9201      	str	r2, [sp, #4]
 8022194:	440f      	add	r7, r1
 8022196:	017f      	lsls	r7, r7, #5
 8022198:	fb97 fefa 	sdiv	lr, r7, sl
 802219c:	fb0a 771e 	mls	r7, sl, lr, r7
 80221a0:	2f00      	cmp	r7, #0
 80221a2:	bfbc      	itt	lt
 80221a4:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80221a8:	4457      	addlt	r7, sl
 80221aa:	f10e 0101 	add.w	r1, lr, #1
 80221ae:	9106      	str	r1, [sp, #24]
 80221b0:	9a01      	ldr	r2, [sp, #4]
 80221b2:	8b20      	ldrh	r0, [r4, #24]
 80221b4:	19d2      	adds	r2, r2, r7
 80221b6:	8b61      	ldrh	r1, [r4, #26]
 80221b8:	9d02      	ldr	r5, [sp, #8]
 80221ba:	9201      	str	r2, [sp, #4]
 80221bc:	bf5b      	ittet	pl
 80221be:	eba2 020a 	subpl.w	r2, r2, sl
 80221c2:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 80221c6:	46f0      	movmi	r8, lr
 80221c8:	9201      	strpl	r2, [sp, #4]
 80221ca:	9a00      	ldr	r2, [sp, #0]
 80221cc:	4440      	add	r0, r8
 80221ce:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 80221d2:	4443      	add	r3, r8
 80221d4:	442a      	add	r2, r5
 80221d6:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80221da:	9d05      	ldr	r5, [sp, #20]
 80221dc:	b200      	sxth	r0, r0
 80221de:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80221e2:	b209      	sxth	r1, r1
 80221e4:	4415      	add	r5, r2
 80221e6:	8320      	strh	r0, [r4, #24]
 80221e8:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80221ec:	8361      	strh	r1, [r4, #26]
 80221ee:	9200      	str	r2, [sp, #0]
 80221f0:	454d      	cmp	r5, r9
 80221f2:	d016      	beq.n	8022222 <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 80221f4:	4301      	orrs	r1, r0
 80221f6:	d00d      	beq.n	8022214 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80221f8:	f1b8 0f00 	cmp.w	r8, #0
 80221fc:	db0a      	blt.n	8022214 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80221fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022200:	4541      	cmp	r1, r8
 8022202:	dd07      	ble.n	8022214 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8022204:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8022208:	4288      	cmp	r0, r1
 802220a:	d335      	bcc.n	8022278 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 802220c:	f04f 0101 	mov.w	r1, #1
 8022210:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8022214:	9900      	ldr	r1, [sp, #0]
 8022216:	82e6      	strh	r6, [r4, #22]
 8022218:	82a1      	strh	r1, [r4, #20]
 802221a:	f04f 0100 	mov.w	r1, #0
 802221e:	8321      	strh	r1, [r4, #24]
 8022220:	8361      	strh	r1, [r4, #26]
 8022222:	9a00      	ldr	r2, [sp, #0]
 8022224:	4594      	cmp	ip, r2
 8022226:	d1c3      	bne.n	80221b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8022228:	9a03      	ldr	r2, [sp, #12]
 802222a:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 802222e:	1ad3      	subs	r3, r2, r3
 8022230:	8b22      	ldrh	r2, [r4, #24]
 8022232:	441a      	add	r2, r3
 8022234:	8322      	strh	r2, [r4, #24]
 8022236:	9a04      	ldr	r2, [sp, #16]
 8022238:	3220      	adds	r2, #32
 802223a:	eba2 020b 	sub.w	r2, r2, fp
 802223e:	fb03 c302 	mla	r3, r3, r2, ip
 8022242:	8363      	strh	r3, [r4, #26]
 8022244:	e758      	b.n	80220f8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8022246:	f04f 33ff 	mov.w	r3, #4294967295
 802224a:	434a      	muls	r2, r1
 802224c:	f1ca 0a00 	rsb	sl, sl, #0
 8022250:	f04f 0b00 	mov.w	fp, #0
 8022254:	9302      	str	r3, [sp, #8]
 8022256:	e75d      	b.n	8022114 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 8022258:	f104 0314 	add.w	r3, r4, #20
 802225c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8022260:	cb03      	ldmia	r3!, {r0, r1}
 8022262:	f8c8 0000 	str.w	r0, [r8]
 8022266:	f8c8 1004 	str.w	r1, [r8, #4]
 802226a:	6923      	ldr	r3, [r4, #16]
 802226c:	3308      	adds	r3, #8
 802226e:	6123      	str	r3, [r4, #16]
 8022270:	68a3      	ldr	r3, [r4, #8]
 8022272:	3301      	adds	r3, #1
 8022274:	60a3      	str	r3, [r4, #8]
 8022276:	e77d      	b.n	8022174 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8022278:	f104 0814 	add.w	r8, r4, #20
 802227c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8022280:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8022284:	f8c9 0000 	str.w	r0, [r9]
 8022288:	f8c9 1004 	str.w	r1, [r9, #4]
 802228c:	6921      	ldr	r1, [r4, #16]
 802228e:	3108      	adds	r1, #8
 8022290:	6121      	str	r1, [r4, #16]
 8022292:	68a1      	ldr	r1, [r4, #8]
 8022294:	3101      	adds	r1, #1
 8022296:	60a1      	str	r1, [r4, #8]
 8022298:	e7bc      	b.n	8022214 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 802229a:	1a83      	subs	r3, r0, r2
 802229c:	9301      	str	r3, [sp, #4]
 802229e:	f1ba 0f00 	cmp.w	sl, #0
 80222a2:	f040 8094 	bne.w	80223ce <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 80222a6:	9a01      	ldr	r2, [sp, #4]
 80222a8:	0049      	lsls	r1, r1, #1
 80222aa:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 80222ae:	2a00      	cmp	r2, #0
 80222b0:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 80222b4:	8b62      	ldrh	r2, [r4, #26]
 80222b6:	bfaa      	itet	ge
 80222b8:	f04f 0a20 	movge.w	sl, #32
 80222bc:	f04f 38ff 	movlt.w	r8, #4294967295
 80222c0:	f04f 0801 	movge.w	r8, #1
 80222c4:	8b21      	ldrh	r1, [r4, #24]
 80222c6:	ebaa 0e0e 	sub.w	lr, sl, lr
 80222ca:	4471      	add	r1, lr
 80222cc:	fb0e 2e03 	mla	lr, lr, r3, r2
 80222d0:	eb08 0206 	add.w	r2, r8, r6
 80222d4:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 80222d8:	b209      	sxth	r1, r1
 80222da:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 80222de:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 80222e2:	8321      	strh	r1, [r4, #24]
 80222e4:	fa0f fe8e 	sxth.w	lr, lr
 80222e8:	42b7      	cmp	r7, r6
 80222ea:	f8a4 e01a 	strh.w	lr, [r4, #26]
 80222ee:	d013      	beq.n	8022318 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 80222f0:	ea51 010e 	orrs.w	r1, r1, lr
 80222f4:	d00b      	beq.n	802230e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80222f6:	2800      	cmp	r0, #0
 80222f8:	db09      	blt.n	802230e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 80222fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80222fc:	4281      	cmp	r1, r0
 80222fe:	dd06      	ble.n	802230e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8022300:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8022304:	4288      	cmp	r0, r1
 8022306:	d339      	bcc.n	802237c <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8022308:	2101      	movs	r1, #1
 802230a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802230e:	2100      	movs	r1, #0
 8022310:	82a5      	strh	r5, [r4, #20]
 8022312:	82e2      	strh	r2, [r4, #22]
 8022314:	8321      	strh	r1, [r4, #24]
 8022316:	8361      	strh	r1, [r4, #26]
 8022318:	f1aa 0610 	sub.w	r6, sl, #16
 802231c:	f04f 0e00 	mov.w	lr, #0
 8022320:	f04f 0b01 	mov.w	fp, #1
 8022324:	0076      	lsls	r6, r6, #1
 8022326:	fb06 f703 	mul.w	r7, r6, r3
 802232a:	b236      	sxth	r6, r6
 802232c:	b23f      	sxth	r7, r7
 802232e:	ea46 0107 	orr.w	r1, r6, r7
 8022332:	9100      	str	r1, [sp, #0]
 8022334:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022336:	428a      	cmp	r2, r1
 8022338:	d03e      	beq.n	80223b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 802233a:	4442      	add	r2, r8
 802233c:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8022340:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8022344:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8022348:	8326      	strh	r6, [r4, #24]
 802234a:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 802234e:	8367      	strh	r7, [r4, #26]
 8022350:	4584      	cmp	ip, r0
 8022352:	d0ef      	beq.n	8022334 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8022354:	9800      	ldr	r0, [sp, #0]
 8022356:	b150      	cbz	r0, 802236e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8022358:	2900      	cmp	r1, #0
 802235a:	db08      	blt.n	802236e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 802235c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 802235e:	4288      	cmp	r0, r1
 8022360:	dd05      	ble.n	802236e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8022362:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8022366:	4288      	cmp	r0, r1
 8022368:	d315      	bcc.n	8022396 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 802236a:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 802236e:	82a5      	strh	r5, [r4, #20]
 8022370:	82e2      	strh	r2, [r4, #22]
 8022372:	f8a4 e018 	strh.w	lr, [r4, #24]
 8022376:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802237a:	e7db      	b.n	8022334 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 802237c:	f104 0614 	add.w	r6, r4, #20
 8022380:	6927      	ldr	r7, [r4, #16]
 8022382:	ce03      	ldmia	r6!, {r0, r1}
 8022384:	6038      	str	r0, [r7, #0]
 8022386:	6079      	str	r1, [r7, #4]
 8022388:	6921      	ldr	r1, [r4, #16]
 802238a:	3108      	adds	r1, #8
 802238c:	6121      	str	r1, [r4, #16]
 802238e:	68a1      	ldr	r1, [r4, #8]
 8022390:	3101      	adds	r1, #1
 8022392:	60a1      	str	r1, [r4, #8]
 8022394:	e7bb      	b.n	802230e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8022396:	f104 0c14 	add.w	ip, r4, #20
 802239a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802239e:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 80223a2:	f8c9 0000 	str.w	r0, [r9]
 80223a6:	f8c9 1004 	str.w	r1, [r9, #4]
 80223aa:	6921      	ldr	r1, [r4, #16]
 80223ac:	3108      	adds	r1, #8
 80223ae:	6121      	str	r1, [r4, #16]
 80223b0:	68a1      	ldr	r1, [r4, #8]
 80223b2:	3101      	adds	r1, #1
 80223b4:	60a1      	str	r1, [r4, #8]
 80223b6:	e7da      	b.n	802236e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 80223b8:	9a03      	ldr	r2, [sp, #12]
 80223ba:	8b61      	ldrh	r1, [r4, #26]
 80223bc:	f1a2 0c20 	sub.w	ip, r2, #32
 80223c0:	8b22      	ldrh	r2, [r4, #24]
 80223c2:	44d4      	add	ip, sl
 80223c4:	4462      	add	r2, ip
 80223c6:	fb0c 1303 	mla	r3, ip, r3, r1
 80223ca:	8322      	strh	r2, [r4, #24]
 80223cc:	e739      	b.n	8022242 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 80223ce:	9b01      	ldr	r3, [sp, #4]
 80223d0:	2b00      	cmp	r3, #0
 80223d2:	db3f      	blt.n	8022454 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 80223d4:	2201      	movs	r2, #1
 80223d6:	f1ce 0320 	rsb	r3, lr, #32
 80223da:	920b      	str	r2, [sp, #44]	; 0x2c
 80223dc:	2220      	movs	r2, #32
 80223de:	fb0a f303 	mul.w	r3, sl, r3
 80223e2:	9202      	str	r2, [sp, #8]
 80223e4:	9a01      	ldr	r2, [sp, #4]
 80223e6:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80223ea:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80223ee:	fb93 f7f2 	sdiv	r7, r3, r2
 80223f2:	fb02 3317 	mls	r3, r2, r7, r3
 80223f6:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80223fa:	2b00      	cmp	r3, #0
 80223fc:	9308      	str	r3, [sp, #32]
 80223fe:	bfbc      	itt	lt
 8022400:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8022404:	189b      	addlt	r3, r3, r2
 8022406:	eb07 0b01 	add.w	fp, r7, r1
 802240a:	bfb8      	it	lt
 802240c:	9308      	strlt	r3, [sp, #32]
 802240e:	ea4f 136b 	mov.w	r3, fp, asr #5
 8022412:	9304      	str	r3, [sp, #16]
 8022414:	9b02      	ldr	r3, [sp, #8]
 8022416:	4573      	cmp	r3, lr
 8022418:	d133      	bne.n	8022482 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 802241a:	9b04      	ldr	r3, [sp, #16]
 802241c:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8022420:	454b      	cmp	r3, r9
 8022422:	d045      	beq.n	80224b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8022424:	8b62      	ldrh	r2, [r4, #26]
 8022426:	8b23      	ldrh	r3, [r4, #24]
 8022428:	4313      	orrs	r3, r2
 802242a:	d00c      	beq.n	8022446 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 802242c:	f1b8 0f00 	cmp.w	r8, #0
 8022430:	db09      	blt.n	8022446 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8022432:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022434:	4543      	cmp	r3, r8
 8022436:	dd06      	ble.n	8022446 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8022438:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802243c:	429a      	cmp	r2, r3
 802243e:	d313      	bcc.n	8022468 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8022440:	2301      	movs	r3, #1
 8022442:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8022446:	9b04      	ldr	r3, [sp, #16]
 8022448:	82e6      	strh	r6, [r4, #22]
 802244a:	82a3      	strh	r3, [r4, #20]
 802244c:	2300      	movs	r3, #0
 802244e:	8323      	strh	r3, [r4, #24]
 8022450:	8363      	strh	r3, [r4, #26]
 8022452:	e02d      	b.n	80224b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8022454:	9a01      	ldr	r2, [sp, #4]
 8022456:	fb0a f30e 	mul.w	r3, sl, lr
 802245a:	4252      	negs	r2, r2
 802245c:	9201      	str	r2, [sp, #4]
 802245e:	f04f 32ff 	mov.w	r2, #4294967295
 8022462:	920b      	str	r2, [sp, #44]	; 0x2c
 8022464:	2200      	movs	r2, #0
 8022466:	e7bc      	b.n	80223e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8022468:	f104 0314 	add.w	r3, r4, #20
 802246c:	6922      	ldr	r2, [r4, #16]
 802246e:	cb03      	ldmia	r3!, {r0, r1}
 8022470:	6010      	str	r0, [r2, #0]
 8022472:	6051      	str	r1, [r2, #4]
 8022474:	6923      	ldr	r3, [r4, #16]
 8022476:	3308      	adds	r3, #8
 8022478:	6123      	str	r3, [r4, #16]
 802247a:	68a3      	ldr	r3, [r4, #8]
 802247c:	3301      	adds	r3, #1
 802247e:	60a3      	str	r3, [r4, #8]
 8022480:	e7e1      	b.n	8022446 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8022482:	f00b 031f 	and.w	r3, fp, #31
 8022486:	f001 011f 	and.w	r1, r1, #31
 802248a:	8b20      	ldrh	r0, [r4, #24]
 802248c:	9309      	str	r3, [sp, #36]	; 0x24
 802248e:	9b02      	ldr	r3, [sp, #8]
 8022490:	eba3 020e 	sub.w	r2, r3, lr
 8022494:	8b63      	ldrh	r3, [r4, #26]
 8022496:	9300      	str	r3, [sp, #0]
 8022498:	9b04      	ldr	r3, [sp, #16]
 802249a:	42ab      	cmp	r3, r5
 802249c:	f040 80ef 	bne.w	802267e <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 80224a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80224a2:	4410      	add	r0, r2
 80224a4:	4419      	add	r1, r3
 80224a6:	9b00      	ldr	r3, [sp, #0]
 80224a8:	8320      	strh	r0, [r4, #24]
 80224aa:	fb02 3101 	mla	r1, r2, r1, r3
 80224ae:	8361      	strh	r1, [r4, #26]
 80224b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80224b2:	9904      	ldr	r1, [sp, #16]
 80224b4:	4433      	add	r3, r6
 80224b6:	9300      	str	r3, [sp, #0]
 80224b8:	9a00      	ldr	r2, [sp, #0]
 80224ba:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80224be:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 80224c2:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80224c6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80224ca:	4288      	cmp	r0, r1
 80224cc:	d018      	beq.n	8022500 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 80224ce:	8b60      	ldrh	r0, [r4, #26]
 80224d0:	8b21      	ldrh	r1, [r4, #24]
 80224d2:	ea50 0201 	orrs.w	r2, r0, r1
 80224d6:	d00c      	beq.n	80224f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80224d8:	2b00      	cmp	r3, #0
 80224da:	db0a      	blt.n	80224f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80224dc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80224de:	4299      	cmp	r1, r3
 80224e0:	dd07      	ble.n	80224f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80224e2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80224e6:	4299      	cmp	r1, r3
 80224e8:	f0c0 818b 	bcc.w	8022802 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 80224ec:	2301      	movs	r3, #1
 80224ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80224f2:	9b04      	ldr	r3, [sp, #16]
 80224f4:	82a3      	strh	r3, [r4, #20]
 80224f6:	9b00      	ldr	r3, [sp, #0]
 80224f8:	82e3      	strh	r3, [r4, #22]
 80224fa:	2300      	movs	r3, #0
 80224fc:	8323      	strh	r3, [r4, #24]
 80224fe:	8363      	strh	r3, [r4, #26]
 8022500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022502:	9a00      	ldr	r2, [sp, #0]
 8022504:	4293      	cmp	r3, r2
 8022506:	f000 808d 	beq.w	8022624 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 802250a:	ea4f 134a 	mov.w	r3, sl, lsl #5
 802250e:	9901      	ldr	r1, [sp, #4]
 8022510:	9801      	ldr	r0, [sp, #4]
 8022512:	fb93 f1f1 	sdiv	r1, r3, r1
 8022516:	fb00 3311 	mls	r3, r0, r1, r3
 802251a:	9106      	str	r1, [sp, #24]
 802251c:	2b00      	cmp	r3, #0
 802251e:	9307      	str	r3, [sp, #28]
 8022520:	da04      	bge.n	802252c <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 8022522:	1e4b      	subs	r3, r1, #1
 8022524:	9306      	str	r3, [sp, #24]
 8022526:	9b07      	ldr	r3, [sp, #28]
 8022528:	4403      	add	r3, r0
 802252a:	9307      	str	r3, [sp, #28]
 802252c:	9b08      	ldr	r3, [sp, #32]
 802252e:	f04f 0c00 	mov.w	ip, #0
 8022532:	9901      	ldr	r1, [sp, #4]
 8022534:	1a5b      	subs	r3, r3, r1
 8022536:	4659      	mov	r1, fp
 8022538:	9308      	str	r3, [sp, #32]
 802253a:	9b02      	ldr	r3, [sp, #8]
 802253c:	f1c3 0320 	rsb	r3, r3, #32
 8022540:	930a      	str	r3, [sp, #40]	; 0x28
 8022542:	980a      	ldr	r0, [sp, #40]	; 0x28
 8022544:	9b02      	ldr	r3, [sp, #8]
 8022546:	1a1b      	subs	r3, r3, r0
 8022548:	9309      	str	r3, [sp, #36]	; 0x24
 802254a:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 802254e:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8022552:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8022556:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 802255a:	181b      	adds	r3, r3, r0
 802255c:	bf58      	it	pl
 802255e:	9801      	ldrpl	r0, [sp, #4]
 8022560:	9308      	str	r3, [sp, #32]
 8022562:	bf54      	ite	pl
 8022564:	1a1b      	subpl	r3, r3, r0
 8022566:	9d06      	ldrmi	r5, [sp, #24]
 8022568:	9802      	ldr	r0, [sp, #8]
 802256a:	bf5e      	ittt	pl
 802256c:	9308      	strpl	r3, [sp, #32]
 802256e:	9b06      	ldrpl	r3, [sp, #24]
 8022570:	1c5d      	addpl	r5, r3, #1
 8022572:	44ab      	add	fp, r5
 8022574:	ea4f 136b 	mov.w	r3, fp, asr #5
 8022578:	9304      	str	r3, [sp, #16]
 802257a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802257c:	4283      	cmp	r3, r0
 802257e:	f040 815a 	bne.w	8022836 <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8022582:	9b04      	ldr	r3, [sp, #16]
 8022584:	9a00      	ldr	r2, [sp, #0]
 8022586:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 802258a:	4543      	cmp	r3, r8
 802258c:	d01a      	beq.n	80225c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 802258e:	8b61      	ldrh	r1, [r4, #26]
 8022590:	8b23      	ldrh	r3, [r4, #24]
 8022592:	430b      	orrs	r3, r1
 8022594:	d00e      	beq.n	80225b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8022596:	f1be 0f00 	cmp.w	lr, #0
 802259a:	db0b      	blt.n	80225b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 802259c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802259e:	4573      	cmp	r3, lr
 80225a0:	dd08      	ble.n	80225b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 80225a2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80225a6:	4299      	cmp	r1, r3
 80225a8:	f0c0 8138 	bcc.w	802281c <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 80225ac:	f04f 0301 	mov.w	r3, #1
 80225b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80225b4:	9b04      	ldr	r3, [sp, #16]
 80225b6:	f8a4 c018 	strh.w	ip, [r4, #24]
 80225ba:	82a3      	strh	r3, [r4, #20]
 80225bc:	9b00      	ldr	r3, [sp, #0]
 80225be:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80225c2:	82e3      	strh	r3, [r4, #22]
 80225c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80225c6:	9a00      	ldr	r2, [sp, #0]
 80225c8:	441a      	add	r2, r3
 80225ca:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80225ce:	9200      	str	r2, [sp, #0]
 80225d0:	9900      	ldr	r1, [sp, #0]
 80225d2:	9a04      	ldr	r2, [sp, #16]
 80225d4:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 80225d8:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80225dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80225e0:	4288      	cmp	r0, r1
 80225e2:	d01a      	beq.n	802261a <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 80225e4:	8b60      	ldrh	r0, [r4, #26]
 80225e6:	8b21      	ldrh	r1, [r4, #24]
 80225e8:	ea50 0201 	orrs.w	r2, r0, r1
 80225ec:	d00d      	beq.n	802260a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 80225ee:	2b00      	cmp	r3, #0
 80225f0:	db0b      	blt.n	802260a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 80225f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80225f4:	4299      	cmp	r1, r3
 80225f6:	dd08      	ble.n	802260a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 80225f8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80225fc:	4299      	cmp	r1, r3
 80225fe:	f0c0 81f9 	bcc.w	80229f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8022602:	f04f 0301 	mov.w	r3, #1
 8022606:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802260a:	9b04      	ldr	r3, [sp, #16]
 802260c:	f8a4 c018 	strh.w	ip, [r4, #24]
 8022610:	82a3      	strh	r3, [r4, #20]
 8022612:	9b00      	ldr	r3, [sp, #0]
 8022614:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8022618:	82e3      	strh	r3, [r4, #22]
 802261a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802261c:	4659      	mov	r1, fp
 802261e:	9a00      	ldr	r2, [sp, #0]
 8022620:	4293      	cmp	r3, r2
 8022622:	d192      	bne.n	802254a <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8022624:	9b02      	ldr	r3, [sp, #8]
 8022626:	f1c3 0c20 	rsb	ip, r3, #32
 802262a:	9b05      	ldr	r3, [sp, #20]
 802262c:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8022630:	9b03      	ldr	r3, [sp, #12]
 8022632:	459c      	cmp	ip, r3
 8022634:	f040 81f8 	bne.w	8022a28 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8022638:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802263c:	9a00      	ldr	r2, [sp, #0]
 802263e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8022642:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8022646:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802264a:	4288      	cmp	r0, r1
 802264c:	f43f ad54 	beq.w	80220f8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8022650:	8b60      	ldrh	r0, [r4, #26]
 8022652:	8b21      	ldrh	r1, [r4, #24]
 8022654:	ea50 0201 	orrs.w	r2, r0, r1
 8022658:	d00c      	beq.n	8022674 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802265a:	2b00      	cmp	r3, #0
 802265c:	db0a      	blt.n	8022674 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802265e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022660:	4299      	cmp	r1, r3
 8022662:	dd07      	ble.n	8022674 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8022664:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8022668:	4299      	cmp	r1, r3
 802266a:	f0c0 81d0 	bcc.w	8022a0e <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 802266e:	2301      	movs	r3, #1
 8022670:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8022674:	9b00      	ldr	r3, [sp, #0]
 8022676:	f8a4 e014 	strh.w	lr, [r4, #20]
 802267a:	82e3      	strh	r3, [r4, #22]
 802267c:	e517      	b.n	80220ae <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 802267e:	2f00      	cmp	r7, #0
 8022680:	f2c0 8097 	blt.w	80227b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8022684:	2301      	movs	r3, #1
 8022686:	f1c1 0c20 	rsb	ip, r1, #32
 802268a:	9307      	str	r3, [sp, #28]
 802268c:	2320      	movs	r3, #32
 802268e:	fb02 f20c 	mul.w	r2, r2, ip
 8022692:	9306      	str	r3, [sp, #24]
 8022694:	9b06      	ldr	r3, [sp, #24]
 8022696:	fb92 fcf7 	sdiv	ip, r2, r7
 802269a:	fb07 221c 	mls	r2, r7, ip, r2
 802269e:	4419      	add	r1, r3
 80226a0:	9b00      	ldr	r3, [sp, #0]
 80226a2:	2a00      	cmp	r2, #0
 80226a4:	bfbc      	itt	lt
 80226a6:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80226aa:	19d2      	addlt	r2, r2, r7
 80226ac:	fb0c 3101 	mla	r1, ip, r1, r3
 80226b0:	9b07      	ldr	r3, [sp, #28]
 80226b2:	4460      	add	r0, ip
 80226b4:	441d      	add	r5, r3
 80226b6:	0433      	lsls	r3, r6, #16
 80226b8:	b200      	sxth	r0, r0
 80226ba:	930a      	str	r3, [sp, #40]	; 0x28
 80226bc:	18eb      	adds	r3, r5, r3
 80226be:	b209      	sxth	r1, r1
 80226c0:	8320      	strh	r0, [r4, #24]
 80226c2:	454b      	cmp	r3, r9
 80226c4:	8361      	strh	r1, [r4, #26]
 80226c6:	d014      	beq.n	80226f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 80226c8:	ea50 0301 	orrs.w	r3, r0, r1
 80226cc:	d00c      	beq.n	80226e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80226ce:	f1b8 0f00 	cmp.w	r8, #0
 80226d2:	db09      	blt.n	80226e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80226d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80226d6:	4543      	cmp	r3, r8
 80226d8:	dd06      	ble.n	80226e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80226da:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80226de:	4299      	cmp	r1, r3
 80226e0:	d36e      	bcc.n	80227c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 80226e2:	2301      	movs	r3, #1
 80226e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80226e8:	2300      	movs	r3, #0
 80226ea:	82a5      	strh	r5, [r4, #20]
 80226ec:	82e6      	strh	r6, [r4, #22]
 80226ee:	8323      	strh	r3, [r4, #24]
 80226f0:	8363      	strh	r3, [r4, #26]
 80226f2:	9904      	ldr	r1, [sp, #16]
 80226f4:	eb0e 030c 	add.w	r3, lr, ip
 80226f8:	42a9      	cmp	r1, r5
 80226fa:	d04d      	beq.n	8022798 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 80226fc:	9902      	ldr	r1, [sp, #8]
 80226fe:	1bd2      	subs	r2, r2, r7
 8022700:	1ac9      	subs	r1, r1, r3
 8022702:	9200      	str	r2, [sp, #0]
 8022704:	448c      	add	ip, r1
 8022706:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 802270a:	fb9c fef7 	sdiv	lr, ip, r7
 802270e:	fb07 cc1e 	mls	ip, r7, lr, ip
 8022712:	f1bc 0f00 	cmp.w	ip, #0
 8022716:	bfbc      	itt	lt
 8022718:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 802271c:	44bc      	addlt	ip, r7
 802271e:	f10e 0101 	add.w	r1, lr, #1
 8022722:	910d      	str	r1, [sp, #52]	; 0x34
 8022724:	9a00      	ldr	r2, [sp, #0]
 8022726:	8b20      	ldrh	r0, [r4, #24]
 8022728:	eb12 020c 	adds.w	r2, r2, ip
 802272c:	8b61      	ldrh	r1, [r4, #26]
 802272e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8022732:	9200      	str	r2, [sp, #0]
 8022734:	bf5b      	ittet	pl
 8022736:	1bd2      	subpl	r2, r2, r7
 8022738:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 802273c:	46f0      	movmi	r8, lr
 802273e:	9200      	strpl	r2, [sp, #0]
 8022740:	9a07      	ldr	r2, [sp, #28]
 8022742:	4440      	add	r0, r8
 8022744:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8022748:	4443      	add	r3, r8
 802274a:	4415      	add	r5, r2
 802274c:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8022750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022752:	b200      	sxth	r0, r0
 8022754:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8022758:	442a      	add	r2, r5
 802275a:	b209      	sxth	r1, r1
 802275c:	8320      	strh	r0, [r4, #24]
 802275e:	454a      	cmp	r2, r9
 8022760:	8361      	strh	r1, [r4, #26]
 8022762:	d016      	beq.n	8022792 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8022764:	ea50 0201 	orrs.w	r2, r0, r1
 8022768:	d00d      	beq.n	8022786 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802276a:	f1b8 0f00 	cmp.w	r8, #0
 802276e:	db0a      	blt.n	8022786 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8022770:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022772:	4541      	cmp	r1, r8
 8022774:	dd07      	ble.n	8022786 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8022776:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802277a:	4288      	cmp	r0, r1
 802277c:	d330      	bcc.n	80227e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 802277e:	f04f 0201 	mov.w	r2, #1
 8022782:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8022786:	f04f 0200 	mov.w	r2, #0
 802278a:	82a5      	strh	r5, [r4, #20]
 802278c:	82e6      	strh	r6, [r4, #22]
 802278e:	8322      	strh	r2, [r4, #24]
 8022790:	8362      	strh	r2, [r4, #26]
 8022792:	9904      	ldr	r1, [sp, #16]
 8022794:	42a9      	cmp	r1, r5
 8022796:	d1c5      	bne.n	8022724 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8022798:	9a02      	ldr	r2, [sp, #8]
 802279a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802279c:	1ad3      	subs	r3, r2, r3
 802279e:	8b22      	ldrh	r2, [r4, #24]
 80227a0:	3120      	adds	r1, #32
 80227a2:	441a      	add	r2, r3
 80227a4:	8322      	strh	r2, [r4, #24]
 80227a6:	9a06      	ldr	r2, [sp, #24]
 80227a8:	1a89      	subs	r1, r1, r2
 80227aa:	8b62      	ldrh	r2, [r4, #26]
 80227ac:	fb03 2301 	mla	r3, r3, r1, r2
 80227b0:	e64e      	b.n	8022450 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 80227b2:	f04f 33ff 	mov.w	r3, #4294967295
 80227b6:	434a      	muls	r2, r1
 80227b8:	427f      	negs	r7, r7
 80227ba:	9307      	str	r3, [sp, #28]
 80227bc:	2300      	movs	r3, #0
 80227be:	e768      	b.n	8022692 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 80227c0:	f104 0314 	add.w	r3, r4, #20
 80227c4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80227c8:	cb03      	ldmia	r3!, {r0, r1}
 80227ca:	f8c8 0000 	str.w	r0, [r8]
 80227ce:	f8c8 1004 	str.w	r1, [r8, #4]
 80227d2:	6923      	ldr	r3, [r4, #16]
 80227d4:	3308      	adds	r3, #8
 80227d6:	6123      	str	r3, [r4, #16]
 80227d8:	68a3      	ldr	r3, [r4, #8]
 80227da:	3301      	adds	r3, #1
 80227dc:	60a3      	str	r3, [r4, #8]
 80227de:	e783      	b.n	80226e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 80227e0:	f104 0814 	add.w	r8, r4, #20
 80227e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80227e8:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80227ec:	f8c9 0000 	str.w	r0, [r9]
 80227f0:	f8c9 1004 	str.w	r1, [r9, #4]
 80227f4:	6921      	ldr	r1, [r4, #16]
 80227f6:	3108      	adds	r1, #8
 80227f8:	6121      	str	r1, [r4, #16]
 80227fa:	68a1      	ldr	r1, [r4, #8]
 80227fc:	3101      	adds	r1, #1
 80227fe:	60a1      	str	r1, [r4, #8]
 8022800:	e7c1      	b.n	8022786 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8022802:	f104 0314 	add.w	r3, r4, #20
 8022806:	6925      	ldr	r5, [r4, #16]
 8022808:	cb03      	ldmia	r3!, {r0, r1}
 802280a:	6028      	str	r0, [r5, #0]
 802280c:	6069      	str	r1, [r5, #4]
 802280e:	6923      	ldr	r3, [r4, #16]
 8022810:	3308      	adds	r3, #8
 8022812:	6123      	str	r3, [r4, #16]
 8022814:	68a3      	ldr	r3, [r4, #8]
 8022816:	3301      	adds	r3, #1
 8022818:	60a3      	str	r3, [r4, #8]
 802281a:	e66a      	b.n	80224f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 802281c:	f104 0314 	add.w	r3, r4, #20
 8022820:	6925      	ldr	r5, [r4, #16]
 8022822:	cb03      	ldmia	r3!, {r0, r1}
 8022824:	6028      	str	r0, [r5, #0]
 8022826:	6069      	str	r1, [r5, #4]
 8022828:	6923      	ldr	r3, [r4, #16]
 802282a:	3308      	adds	r3, #8
 802282c:	6123      	str	r3, [r4, #16]
 802282e:	68a3      	ldr	r3, [r4, #8]
 8022830:	3301      	adds	r3, #1
 8022832:	60a3      	str	r3, [r4, #8]
 8022834:	e6be      	b.n	80225b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8022836:	f00b 031f 	and.w	r3, fp, #31
 802283a:	114f      	asrs	r7, r1, #5
 802283c:	8b20      	ldrh	r0, [r4, #24]
 802283e:	f001 011f 	and.w	r1, r1, #31
 8022842:	930f      	str	r3, [sp, #60]	; 0x3c
 8022844:	9b04      	ldr	r3, [sp, #16]
 8022846:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802284a:	429f      	cmp	r7, r3
 802284c:	d10a      	bne.n	8022864 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 802284e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022850:	4418      	add	r0, r3
 8022852:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022854:	4419      	add	r1, r3
 8022856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022858:	8320      	strh	r0, [r4, #24]
 802285a:	fb03 9901 	mla	r9, r3, r1, r9
 802285e:	f8a4 901a 	strh.w	r9, [r4, #26]
 8022862:	e6af      	b.n	80225c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8022864:	2d00      	cmp	r5, #0
 8022866:	f2c0 809b 	blt.w	80229a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 802286a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802286c:	f1c1 0320 	rsb	r3, r1, #32
 8022870:	4373      	muls	r3, r6
 8022872:	2601      	movs	r6, #1
 8022874:	960e      	str	r6, [sp, #56]	; 0x38
 8022876:	2620      	movs	r6, #32
 8022878:	960d      	str	r6, [sp, #52]	; 0x34
 802287a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802287c:	fb93 f6f5 	sdiv	r6, r3, r5
 8022880:	4411      	add	r1, r2
 8022882:	fb05 3316 	mls	r3, r5, r6, r3
 8022886:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022888:	2b00      	cmp	r3, #0
 802288a:	4417      	add	r7, r2
 802288c:	9a00      	ldr	r2, [sp, #0]
 802288e:	bfbc      	itt	lt
 8022890:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8022894:	195b      	addlt	r3, r3, r5
 8022896:	0412      	lsls	r2, r2, #16
 8022898:	fb06 9101 	mla	r1, r6, r1, r9
 802289c:	4430      	add	r0, r6
 802289e:	eb07 0902 	add.w	r9, r7, r2
 80228a2:	9210      	str	r2, [sp, #64]	; 0x40
 80228a4:	b200      	sxth	r0, r0
 80228a6:	b209      	sxth	r1, r1
 80228a8:	45c1      	cmp	r9, r8
 80228aa:	8320      	strh	r0, [r4, #24]
 80228ac:	8361      	strh	r1, [r4, #26]
 80228ae:	d017      	beq.n	80228e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 80228b0:	ea50 0201 	orrs.w	r2, r0, r1
 80228b4:	d00d      	beq.n	80228d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80228b6:	f1be 0f00 	cmp.w	lr, #0
 80228ba:	db0a      	blt.n	80228d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80228bc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80228be:	4571      	cmp	r1, lr
 80228c0:	dd07      	ble.n	80228d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80228c2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80228c6:	4288      	cmp	r0, r1
 80228c8:	d372      	bcc.n	80229b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 80228ca:	f04f 0201 	mov.w	r2, #1
 80228ce:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80228d2:	9a00      	ldr	r2, [sp, #0]
 80228d4:	82a7      	strh	r7, [r4, #20]
 80228d6:	82e2      	strh	r2, [r4, #22]
 80228d8:	f8a4 c018 	strh.w	ip, [r4, #24]
 80228dc:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80228e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80228e2:	eb02 0e06 	add.w	lr, r2, r6
 80228e6:	9a04      	ldr	r2, [sp, #16]
 80228e8:	42ba      	cmp	r2, r7
 80228ea:	d049      	beq.n	8022980 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 80228ec:	9a02      	ldr	r2, [sp, #8]
 80228ee:	1b5b      	subs	r3, r3, r5
 80228f0:	eba2 010e 	sub.w	r1, r2, lr
 80228f4:	440e      	add	r6, r1
 80228f6:	0176      	lsls	r6, r6, #5
 80228f8:	fb96 f8f5 	sdiv	r8, r6, r5
 80228fc:	fb05 6618 	mls	r6, r5, r8, r6
 8022900:	2e00      	cmp	r6, #0
 8022902:	bfbc      	itt	lt
 8022904:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8022908:	1976      	addlt	r6, r6, r5
 802290a:	f108 0201 	add.w	r2, r8, #1
 802290e:	9211      	str	r2, [sp, #68]	; 0x44
 8022910:	199b      	adds	r3, r3, r6
 8022912:	8b20      	ldrh	r0, [r4, #24]
 8022914:	8b61      	ldrh	r1, [r4, #26]
 8022916:	bf54      	ite	pl
 8022918:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 802291c:	46c1      	movmi	r9, r8
 802291e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022920:	bf58      	it	pl
 8022922:	1b5b      	subpl	r3, r3, r5
 8022924:	4448      	add	r0, r9
 8022926:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802292a:	4417      	add	r7, r2
 802292c:	44ce      	add	lr, r9
 802292e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022930:	b200      	sxth	r0, r0
 8022932:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8022936:	b209      	sxth	r1, r1
 8022938:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 802293c:	443a      	add	r2, r7
 802293e:	8320      	strh	r0, [r4, #24]
 8022940:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8022944:	8361      	strh	r1, [r4, #26]
 8022946:	4552      	cmp	r2, sl
 8022948:	d017      	beq.n	802297a <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 802294a:	ea50 0201 	orrs.w	r2, r0, r1
 802294e:	d00d      	beq.n	802296c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8022950:	f1b9 0f00 	cmp.w	r9, #0
 8022954:	db0a      	blt.n	802296c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8022956:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022958:	4549      	cmp	r1, r9
 802295a:	dd07      	ble.n	802296c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802295c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8022960:	4288      	cmp	r0, r1
 8022962:	d336      	bcc.n	80229d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8022964:	f04f 0201 	mov.w	r2, #1
 8022968:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802296c:	9a00      	ldr	r2, [sp, #0]
 802296e:	82a7      	strh	r7, [r4, #20]
 8022970:	82e2      	strh	r2, [r4, #22]
 8022972:	f8a4 c018 	strh.w	ip, [r4, #24]
 8022976:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802297a:	9a04      	ldr	r2, [sp, #16]
 802297c:	42ba      	cmp	r2, r7
 802297e:	d1c7      	bne.n	8022910 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8022980:	9b02      	ldr	r3, [sp, #8]
 8022982:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022984:	eba3 0e0e 	sub.w	lr, r3, lr
 8022988:	8b23      	ldrh	r3, [r4, #24]
 802298a:	3120      	adds	r1, #32
 802298c:	4473      	add	r3, lr
 802298e:	8323      	strh	r3, [r4, #24]
 8022990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022992:	1ac9      	subs	r1, r1, r3
 8022994:	8b63      	ldrh	r3, [r4, #26]
 8022996:	fb0e 3e01 	mla	lr, lr, r1, r3
 802299a:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802299e:	e611      	b.n	80225c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 80229a0:	f04f 36ff 	mov.w	r6, #4294967295
 80229a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80229a6:	426d      	negs	r5, r5
 80229a8:	960e      	str	r6, [sp, #56]	; 0x38
 80229aa:	2600      	movs	r6, #0
 80229ac:	434b      	muls	r3, r1
 80229ae:	e763      	b.n	8022878 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 80229b0:	f104 0e14 	add.w	lr, r4, #20
 80229b4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80229b8:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 80229bc:	f8c8 0000 	str.w	r0, [r8]
 80229c0:	f8c8 1004 	str.w	r1, [r8, #4]
 80229c4:	6921      	ldr	r1, [r4, #16]
 80229c6:	3108      	adds	r1, #8
 80229c8:	6121      	str	r1, [r4, #16]
 80229ca:	68a1      	ldr	r1, [r4, #8]
 80229cc:	3101      	adds	r1, #1
 80229ce:	60a1      	str	r1, [r4, #8]
 80229d0:	e77f      	b.n	80228d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80229d2:	f104 0914 	add.w	r9, r4, #20
 80229d6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80229da:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 80229de:	f8ca 0000 	str.w	r0, [sl]
 80229e2:	f8ca 1004 	str.w	r1, [sl, #4]
 80229e6:	6921      	ldr	r1, [r4, #16]
 80229e8:	3108      	adds	r1, #8
 80229ea:	6121      	str	r1, [r4, #16]
 80229ec:	68a1      	ldr	r1, [r4, #8]
 80229ee:	3101      	adds	r1, #1
 80229f0:	60a1      	str	r1, [r4, #8]
 80229f2:	e7bb      	b.n	802296c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80229f4:	f104 0314 	add.w	r3, r4, #20
 80229f8:	6925      	ldr	r5, [r4, #16]
 80229fa:	cb03      	ldmia	r3!, {r0, r1}
 80229fc:	6028      	str	r0, [r5, #0]
 80229fe:	6069      	str	r1, [r5, #4]
 8022a00:	6923      	ldr	r3, [r4, #16]
 8022a02:	3308      	adds	r3, #8
 8022a04:	6123      	str	r3, [r4, #16]
 8022a06:	68a3      	ldr	r3, [r4, #8]
 8022a08:	3301      	adds	r3, #1
 8022a0a:	60a3      	str	r3, [r4, #8]
 8022a0c:	e5fd      	b.n	802260a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8022a0e:	f104 0314 	add.w	r3, r4, #20
 8022a12:	6925      	ldr	r5, [r4, #16]
 8022a14:	cb03      	ldmia	r3!, {r0, r1}
 8022a16:	6028      	str	r0, [r5, #0]
 8022a18:	6069      	str	r1, [r5, #4]
 8022a1a:	6923      	ldr	r3, [r4, #16]
 8022a1c:	3308      	adds	r3, #8
 8022a1e:	6123      	str	r3, [r4, #16]
 8022a20:	68a3      	ldr	r3, [r4, #8]
 8022a22:	3301      	adds	r3, #1
 8022a24:	60a3      	str	r3, [r4, #8]
 8022a26:	e625      	b.n	8022674 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8022a28:	9b05      	ldr	r3, [sp, #20]
 8022a2a:	ea4f 176b 	mov.w	r7, fp, asr #5
 8022a2e:	f00b 081f 	and.w	r8, fp, #31
 8022a32:	8b20      	ldrh	r0, [r4, #24]
 8022a34:	f003 031f 	and.w	r3, r3, #31
 8022a38:	4577      	cmp	r7, lr
 8022a3a:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 8022a3e:	9302      	str	r3, [sp, #8]
 8022a40:	9b03      	ldr	r3, [sp, #12]
 8022a42:	eba3 050c 	sub.w	r5, r3, ip
 8022a46:	d108      	bne.n	8022a5a <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8022a48:	9b02      	ldr	r3, [sp, #8]
 8022a4a:	4428      	add	r0, r5
 8022a4c:	4498      	add	r8, r3
 8022a4e:	8320      	strh	r0, [r4, #24]
 8022a50:	fb05 9508 	mla	r5, r5, r8, r9
 8022a54:	8365      	strh	r5, [r4, #26]
 8022a56:	f7ff bb4f 	b.w	80220f8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8022a5a:	9b05      	ldr	r3, [sp, #20]
 8022a5c:	ebb3 030b 	subs.w	r3, r3, fp
 8022a60:	f100 809c 	bmi.w	8022b9c <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 8022a64:	f1c8 0120 	rsb	r1, r8, #32
 8022a68:	2201      	movs	r2, #1
 8022a6a:	f04f 0b20 	mov.w	fp, #32
 8022a6e:	434d      	muls	r5, r1
 8022a70:	9201      	str	r2, [sp, #4]
 8022a72:	9a01      	ldr	r2, [sp, #4]
 8022a74:	44d8      	add	r8, fp
 8022a76:	fb95 f6f3 	sdiv	r6, r5, r3
 8022a7a:	fb03 5516 	mls	r5, r3, r6, r5
 8022a7e:	4417      	add	r7, r2
 8022a80:	9a00      	ldr	r2, [sp, #0]
 8022a82:	2d00      	cmp	r5, #0
 8022a84:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8022a88:	bfbc      	itt	lt
 8022a8a:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8022a8e:	18ed      	addlt	r5, r5, r3
 8022a90:	eb07 0a02 	add.w	sl, r7, r2
 8022a94:	9204      	str	r2, [sp, #16]
 8022a96:	fb06 9808 	mla	r8, r6, r8, r9
 8022a9a:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8022a9e:	4430      	add	r0, r6
 8022aa0:	fa0f f188 	sxth.w	r1, r8
 8022aa4:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8022aa8:	b200      	sxth	r0, r0
 8022aaa:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8022aae:	8361      	strh	r1, [r4, #26]
 8022ab0:	8320      	strh	r0, [r4, #24]
 8022ab2:	45ca      	cmp	sl, r9
 8022ab4:	d015      	beq.n	8022ae2 <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 8022ab6:	ea50 0201 	orrs.w	r2, r0, r1
 8022aba:	d00c      	beq.n	8022ad6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8022abc:	f1b8 0f00 	cmp.w	r8, #0
 8022ac0:	db09      	blt.n	8022ad6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8022ac2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022ac4:	4541      	cmp	r1, r8
 8022ac6:	dd06      	ble.n	8022ad6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8022ac8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8022acc:	4288      	cmp	r0, r1
 8022ace:	d36e      	bcc.n	8022bae <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 8022ad0:	2101      	movs	r1, #1
 8022ad2:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8022ad6:	2100      	movs	r1, #0
 8022ad8:	9a00      	ldr	r2, [sp, #0]
 8022ada:	82a7      	strh	r7, [r4, #20]
 8022adc:	82e2      	strh	r2, [r4, #22]
 8022ade:	8321      	strh	r1, [r4, #24]
 8022ae0:	8361      	strh	r1, [r4, #26]
 8022ae2:	45be      	cmp	lr, r7
 8022ae4:	44b4      	add	ip, r6
 8022ae6:	d048      	beq.n	8022b7a <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 8022ae8:	9a03      	ldr	r2, [sp, #12]
 8022aea:	1aed      	subs	r5, r5, r3
 8022aec:	eba2 010c 	sub.w	r1, r2, ip
 8022af0:	440e      	add	r6, r1
 8022af2:	0176      	lsls	r6, r6, #5
 8022af4:	fb96 f8f3 	sdiv	r8, r6, r3
 8022af8:	fb03 6618 	mls	r6, r3, r8, r6
 8022afc:	2e00      	cmp	r6, #0
 8022afe:	bfbc      	itt	lt
 8022b00:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8022b04:	18f6      	addlt	r6, r6, r3
 8022b06:	f108 0201 	add.w	r2, r8, #1
 8022b0a:	9205      	str	r2, [sp, #20]
 8022b0c:	19ad      	adds	r5, r5, r6
 8022b0e:	8b20      	ldrh	r0, [r4, #24]
 8022b10:	8b61      	ldrh	r1, [r4, #26]
 8022b12:	bf54      	ite	pl
 8022b14:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8022b18:	46c1      	movmi	r9, r8
 8022b1a:	9a01      	ldr	r2, [sp, #4]
 8022b1c:	bf58      	it	pl
 8022b1e:	1aed      	subpl	r5, r5, r3
 8022b20:	4448      	add	r0, r9
 8022b22:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8022b26:	4417      	add	r7, r2
 8022b28:	44cc      	add	ip, r9
 8022b2a:	9a04      	ldr	r2, [sp, #16]
 8022b2c:	b200      	sxth	r0, r0
 8022b2e:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8022b32:	b209      	sxth	r1, r1
 8022b34:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8022b38:	443a      	add	r2, r7
 8022b3a:	8320      	strh	r0, [r4, #24]
 8022b3c:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8022b40:	8361      	strh	r1, [r4, #26]
 8022b42:	4552      	cmp	r2, sl
 8022b44:	d017      	beq.n	8022b76 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 8022b46:	ea50 0201 	orrs.w	r2, r0, r1
 8022b4a:	d00d      	beq.n	8022b68 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8022b4c:	f1b9 0f00 	cmp.w	r9, #0
 8022b50:	db0a      	blt.n	8022b68 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8022b52:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022b54:	4549      	cmp	r1, r9
 8022b56:	dd07      	ble.n	8022b68 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8022b58:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8022b5c:	4288      	cmp	r0, r1
 8022b5e:	d337      	bcc.n	8022bd0 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 8022b60:	f04f 0201 	mov.w	r2, #1
 8022b64:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8022b68:	9a00      	ldr	r2, [sp, #0]
 8022b6a:	82a7      	strh	r7, [r4, #20]
 8022b6c:	82e2      	strh	r2, [r4, #22]
 8022b6e:	f04f 0200 	mov.w	r2, #0
 8022b72:	8322      	strh	r2, [r4, #24]
 8022b74:	8362      	strh	r2, [r4, #26]
 8022b76:	45be      	cmp	lr, r7
 8022b78:	d1c8      	bne.n	8022b0c <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 8022b7a:	9b03      	ldr	r3, [sp, #12]
 8022b7c:	8b62      	ldrh	r2, [r4, #26]
 8022b7e:	eba3 0c0c 	sub.w	ip, r3, ip
 8022b82:	8b23      	ldrh	r3, [r4, #24]
 8022b84:	4463      	add	r3, ip
 8022b86:	8323      	strh	r3, [r4, #24]
 8022b88:	9b02      	ldr	r3, [sp, #8]
 8022b8a:	3320      	adds	r3, #32
 8022b8c:	eba3 030b 	sub.w	r3, r3, fp
 8022b90:	fb0c 2c03 	mla	ip, ip, r3, r2
 8022b94:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8022b98:	f7ff baae 	b.w	80220f8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8022b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8022ba0:	fb05 f508 	mul.w	r5, r5, r8
 8022ba4:	425b      	negs	r3, r3
 8022ba6:	f04f 0b00 	mov.w	fp, #0
 8022baa:	9201      	str	r2, [sp, #4]
 8022bac:	e761      	b.n	8022a72 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 8022bae:	f104 0814 	add.w	r8, r4, #20
 8022bb2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8022bb6:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8022bba:	f8c9 0000 	str.w	r0, [r9]
 8022bbe:	f8c9 1004 	str.w	r1, [r9, #4]
 8022bc2:	6921      	ldr	r1, [r4, #16]
 8022bc4:	3108      	adds	r1, #8
 8022bc6:	6121      	str	r1, [r4, #16]
 8022bc8:	68a1      	ldr	r1, [r4, #8]
 8022bca:	3101      	adds	r1, #1
 8022bcc:	60a1      	str	r1, [r4, #8]
 8022bce:	e782      	b.n	8022ad6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8022bd0:	f104 0914 	add.w	r9, r4, #20
 8022bd4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8022bd8:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8022bdc:	f8ca 0000 	str.w	r0, [sl]
 8022be0:	f8ca 1004 	str.w	r1, [sl, #4]
 8022be4:	6921      	ldr	r1, [r4, #16]
 8022be6:	3108      	adds	r1, #8
 8022be8:	6121      	str	r1, [r4, #16]
 8022bea:	68a1      	ldr	r1, [r4, #8]
 8022bec:	3101      	adds	r1, #1
 8022bee:	60a1      	str	r1, [r4, #8]
 8022bf0:	e7ba      	b.n	8022b68 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

08022bf2 <_ZN8touchgfx7Outline6lineToEii>:
 8022bf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022bf4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8022bf6:	4604      	mov	r4, r0
 8022bf8:	460d      	mov	r5, r1
 8022bfa:	4616      	mov	r6, r2
 8022bfc:	079b      	lsls	r3, r3, #30
 8022bfe:	d526      	bpl.n	8022c4e <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8022c00:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8022c04:	ea85 0001 	eor.w	r0, r5, r1
 8022c08:	ea86 0302 	eor.w	r3, r6, r2
 8022c0c:	4303      	orrs	r3, r0
 8022c0e:	d01e      	beq.n	8022c4e <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8022c10:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8022c12:	114b      	asrs	r3, r1, #5
 8022c14:	9600      	str	r6, [sp, #0]
 8022c16:	4283      	cmp	r3, r0
 8022c18:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8022c1a:	bfb8      	it	lt
 8022c1c:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8022c1e:	3301      	adds	r3, #1
 8022c20:	4283      	cmp	r3, r0
 8022c22:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8022c24:	bfc8      	it	gt
 8022c26:	6363      	strgt	r3, [r4, #52]	; 0x34
 8022c28:	116b      	asrs	r3, r5, #5
 8022c2a:	4283      	cmp	r3, r0
 8022c2c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8022c2e:	bfb8      	it	lt
 8022c30:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8022c32:	3301      	adds	r3, #1
 8022c34:	4283      	cmp	r3, r0
 8022c36:	4620      	mov	r0, r4
 8022c38:	bfc8      	it	gt
 8022c3a:	6363      	strgt	r3, [r4, #52]	; 0x34
 8022c3c:	462b      	mov	r3, r5
 8022c3e:	f7ff f9e3 	bl	8022008 <_ZN8touchgfx7Outline10renderLineEiiii>
 8022c42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022c44:	f043 0301 	orr.w	r3, r3, #1
 8022c48:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8022c4c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8022c4e:	b002      	add	sp, #8
 8022c50:	bd70      	pop	{r4, r5, r6, pc}

08022c52 <_ZN8touchgfx7Outline6moveToEii>:
 8022c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022c54:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8022c56:	4615      	mov	r5, r2
 8022c58:	4604      	mov	r4, r0
 8022c5a:	460e      	mov	r6, r1
 8022c5c:	079a      	lsls	r2, r3, #30
 8022c5e:	d401      	bmi.n	8022c64 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8022c60:	f7ff f98c 	bl	8021f7c <_ZN8touchgfx7Outline5resetEv>
 8022c64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022c66:	07db      	lsls	r3, r3, #31
 8022c68:	d504      	bpl.n	8022c74 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8022c6a:	4620      	mov	r0, r4
 8022c6c:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 8022c70:	f7ff ffbf 	bl	8022bf2 <_ZN8touchgfx7Outline6lineToEii>
 8022c74:	ea4f 1c66 	mov.w	ip, r6, asr #5
 8022c78:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8022c7c:	116f      	asrs	r7, r5, #5
 8022c7e:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8022c82:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 8022c86:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8022c8a:	4291      	cmp	r1, r2
 8022c8c:	d015      	beq.n	8022cba <_ZN8touchgfx7Outline6moveToEii+0x68>
 8022c8e:	8b61      	ldrh	r1, [r4, #26]
 8022c90:	8b22      	ldrh	r2, [r4, #24]
 8022c92:	430a      	orrs	r2, r1
 8022c94:	d00b      	beq.n	8022cae <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8022c96:	2b00      	cmp	r3, #0
 8022c98:	db09      	blt.n	8022cae <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8022c9a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8022c9c:	429a      	cmp	r2, r3
 8022c9e:	dd06      	ble.n	8022cae <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8022ca0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8022ca4:	429a      	cmp	r2, r3
 8022ca6:	d30d      	bcc.n	8022cc4 <_ZN8touchgfx7Outline6moveToEii+0x72>
 8022ca8:	2301      	movs	r3, #1
 8022caa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8022cae:	2300      	movs	r3, #0
 8022cb0:	f8a4 c014 	strh.w	ip, [r4, #20]
 8022cb4:	82e7      	strh	r7, [r4, #22]
 8022cb6:	8323      	strh	r3, [r4, #24]
 8022cb8:	8363      	strh	r3, [r4, #26]
 8022cba:	61e6      	str	r6, [r4, #28]
 8022cbc:	62a5      	str	r5, [r4, #40]	; 0x28
 8022cbe:	e9c4 5608 	strd	r5, r6, [r4, #32]
 8022cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022cc4:	f104 0314 	add.w	r3, r4, #20
 8022cc8:	6922      	ldr	r2, [r4, #16]
 8022cca:	cb03      	ldmia	r3!, {r0, r1}
 8022ccc:	6010      	str	r0, [r2, #0]
 8022cce:	6051      	str	r1, [r2, #4]
 8022cd0:	6923      	ldr	r3, [r4, #16]
 8022cd2:	3308      	adds	r3, #8
 8022cd4:	6123      	str	r3, [r4, #16]
 8022cd6:	68a3      	ldr	r3, [r4, #8]
 8022cd8:	3301      	adds	r3, #1
 8022cda:	60a3      	str	r3, [r4, #8]
 8022cdc:	e7e7      	b.n	8022cae <_ZN8touchgfx7Outline6moveToEii+0x5c>

08022cde <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8022cde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ce2:	b0d1      	sub	sp, #324	; 0x144
 8022ce4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8022ce8:	466c      	mov	r4, sp
 8022cea:	1a0d      	subs	r5, r1, r0
 8022cec:	f100 0208 	add.w	r2, r0, #8
 8022cf0:	2d48      	cmp	r5, #72	; 0x48
 8022cf2:	f340 80ba 	ble.w	8022e6a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8022cf6:	112d      	asrs	r5, r5, #4
 8022cf8:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 8022cfc:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8022d00:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8022d04:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8022d08:	f9b0 8000 	ldrsh.w	r8, [r0]
 8022d0c:	681e      	ldr	r6, [r3, #0]
 8022d0e:	6006      	str	r6, [r0, #0]
 8022d10:	685e      	ldr	r6, [r3, #4]
 8022d12:	6046      	str	r6, [r0, #4]
 8022d14:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8022d18:	f8a3 c004 	strh.w	ip, [r3, #4]
 8022d1c:	f8a3 e002 	strh.w	lr, [r3, #2]
 8022d20:	80df      	strh	r7, [r3, #6]
 8022d22:	f1a1 0308 	sub.w	r3, r1, #8
 8022d26:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8022d2a:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 8022d2e:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8022d32:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8022d36:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8022d3a:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8022d3e:	45ac      	cmp	ip, r5
 8022d40:	dd0f      	ble.n	8022d62 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8022d42:	681d      	ldr	r5, [r3, #0]
 8022d44:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8022d48:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8022d4c:	6015      	str	r5, [r2, #0]
 8022d4e:	685d      	ldr	r5, [r3, #4]
 8022d50:	6055      	str	r5, [r2, #4]
 8022d52:	f821 7c08 	strh.w	r7, [r1, #-8]
 8022d56:	f821 6c06 	strh.w	r6, [r1, #-6]
 8022d5a:	f821 ec04 	strh.w	lr, [r1, #-4]
 8022d5e:	f821 cc02 	strh.w	ip, [r1, #-2]
 8022d62:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8022d66:	f9b0 7000 	ldrsh.w	r7, [r0]
 8022d6a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8022d6e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8022d72:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8022d76:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8022d7a:	4565      	cmp	r5, ip
 8022d7c:	dd0d      	ble.n	8022d9a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 8022d7e:	6815      	ldr	r5, [r2, #0]
 8022d80:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8022d84:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8022d88:	6005      	str	r5, [r0, #0]
 8022d8a:	6855      	ldr	r5, [r2, #4]
 8022d8c:	8107      	strh	r7, [r0, #8]
 8022d8e:	6045      	str	r5, [r0, #4]
 8022d90:	8146      	strh	r6, [r0, #10]
 8022d92:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8022d96:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8022d9a:	f9b0 7000 	ldrsh.w	r7, [r0]
 8022d9e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8022da2:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8022da6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8022daa:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8022dae:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8022db2:	45ac      	cmp	ip, r5
 8022db4:	dd0f      	ble.n	8022dd6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8022db6:	681d      	ldr	r5, [r3, #0]
 8022db8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8022dbc:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8022dc0:	6005      	str	r5, [r0, #0]
 8022dc2:	685d      	ldr	r5, [r3, #4]
 8022dc4:	6045      	str	r5, [r0, #4]
 8022dc6:	f821 7c08 	strh.w	r7, [r1, #-8]
 8022dca:	f821 6c06 	strh.w	r6, [r1, #-6]
 8022dce:	f821 ec04 	strh.w	lr, [r1, #-4]
 8022dd2:	f821 cc02 	strh.w	ip, [r1, #-2]
 8022dd6:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 8022dda:	f102 0508 	add.w	r5, r2, #8
 8022dde:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8022de2:	f9b0 e000 	ldrsh.w	lr, [r0]
 8022de6:	462f      	mov	r7, r5
 8022de8:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8022dec:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 8022df0:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 8022df4:	45b2      	cmp	sl, r6
 8022df6:	dc18      	bgt.n	8022e2a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 8022df8:	3b08      	subs	r3, #8
 8022dfa:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 8022dfe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8022e02:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8022e06:	45b2      	cmp	sl, r6
 8022e08:	dbf6      	blt.n	8022df8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 8022e0a:	42ab      	cmp	r3, r5
 8022e0c:	681e      	ldr	r6, [r3, #0]
 8022e0e:	d30e      	bcc.n	8022e2e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8022e10:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8022e14:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8022e18:	602e      	str	r6, [r5, #0]
 8022e1a:	685e      	ldr	r6, [r3, #4]
 8022e1c:	606e      	str	r6, [r5, #4]
 8022e1e:	f8a3 9000 	strh.w	r9, [r3]
 8022e22:	f8a3 8002 	strh.w	r8, [r3, #2]
 8022e26:	809f      	strh	r7, [r3, #4]
 8022e28:	80da      	strh	r2, [r3, #6]
 8022e2a:	462a      	mov	r2, r5
 8022e2c:	e7d3      	b.n	8022dd6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 8022e2e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8022e32:	6006      	str	r6, [r0, #0]
 8022e34:	685e      	ldr	r6, [r3, #4]
 8022e36:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8022e3a:	6046      	str	r6, [r0, #4]
 8022e3c:	1a1e      	subs	r6, r3, r0
 8022e3e:	80da      	strh	r2, [r3, #6]
 8022e40:	1b4a      	subs	r2, r1, r5
 8022e42:	f8a3 e000 	strh.w	lr, [r3]
 8022e46:	10d2      	asrs	r2, r2, #3
 8022e48:	f8a3 c002 	strh.w	ip, [r3, #2]
 8022e4c:	f8a3 8004 	strh.w	r8, [r3, #4]
 8022e50:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8022e54:	bfb5      	itete	lt
 8022e56:	e9c4 0300 	strdlt	r0, r3, [r4]
 8022e5a:	4607      	movge	r7, r0
 8022e5c:	460b      	movlt	r3, r1
 8022e5e:	e9c4 5100 	strdge	r5, r1, [r4]
 8022e62:	4638      	mov	r0, r7
 8022e64:	3408      	adds	r4, #8
 8022e66:	4619      	mov	r1, r3
 8022e68:	e73f      	b.n	8022cea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8022e6a:	4291      	cmp	r1, r2
 8022e6c:	d925      	bls.n	8022eba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 8022e6e:	f1a2 0310 	sub.w	r3, r2, #16
 8022e72:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 8022e76:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 8022e7a:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8022e7e:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8022e82:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8022e86:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 8022e8a:	42b5      	cmp	r5, r6
 8022e8c:	dd13      	ble.n	8022eb6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 8022e8e:	461d      	mov	r5, r3
 8022e90:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8022e94:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8022e98:	3b08      	subs	r3, #8
 8022e9a:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8022e9e:	619e      	str	r6, [r3, #24]
 8022ea0:	42a8      	cmp	r0, r5
 8022ea2:	686e      	ldr	r6, [r5, #4]
 8022ea4:	f8a3 c010 	strh.w	ip, [r3, #16]
 8022ea8:	61de      	str	r6, [r3, #28]
 8022eaa:	825f      	strh	r7, [r3, #18]
 8022eac:	f8a3 8014 	strh.w	r8, [r3, #20]
 8022eb0:	f8a3 e016 	strh.w	lr, [r3, #22]
 8022eb4:	d1dd      	bne.n	8022e72 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 8022eb6:	3208      	adds	r2, #8
 8022eb8:	e7d7      	b.n	8022e6a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8022eba:	466b      	mov	r3, sp
 8022ebc:	429c      	cmp	r4, r3
 8022ebe:	d903      	bls.n	8022ec8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8022ec0:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8022ec4:	3c08      	subs	r4, #8
 8022ec6:	e710      	b.n	8022cea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8022ec8:	b051      	add	sp, #324	; 0x144
 8022eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022ece <_ZN8touchgfx7Outline9sortCellsEv>:
 8022ece:	6881      	ldr	r1, [r0, #8]
 8022ed0:	b111      	cbz	r1, 8022ed8 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8022ed2:	68c0      	ldr	r0, [r0, #12]
 8022ed4:	f7ff bf03 	b.w	8022cde <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8022ed8:	4770      	bx	lr

08022eda <_ZN8touchgfx7Outline8getCellsEv>:
 8022eda:	b510      	push	{r4, lr}
 8022edc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8022ede:	4604      	mov	r4, r0
 8022ee0:	07da      	lsls	r2, r3, #31
 8022ee2:	d507      	bpl.n	8022ef4 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8022ee4:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8022ee8:	f7ff fe83 	bl	8022bf2 <_ZN8touchgfx7Outline6lineToEii>
 8022eec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022eee:	f023 0301 	bic.w	r3, r3, #1
 8022ef2:	63e3      	str	r3, [r4, #60]	; 0x3c
 8022ef4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022ef6:	079b      	lsls	r3, r3, #30
 8022ef8:	d51a      	bpl.n	8022f30 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8022efa:	8b62      	ldrh	r2, [r4, #26]
 8022efc:	8b23      	ldrh	r3, [r4, #24]
 8022efe:	4313      	orrs	r3, r2
 8022f00:	d00d      	beq.n	8022f1e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8022f02:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8022f06:	2b00      	cmp	r3, #0
 8022f08:	db09      	blt.n	8022f1e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8022f0a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8022f0c:	4293      	cmp	r3, r2
 8022f0e:	da06      	bge.n	8022f1e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8022f10:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8022f14:	429a      	cmp	r2, r3
 8022f16:	d80d      	bhi.n	8022f34 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8022f18:	2301      	movs	r3, #1
 8022f1a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8022f1e:	68a0      	ldr	r0, [r4, #8]
 8022f20:	b138      	cbz	r0, 8022f32 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8022f22:	4620      	mov	r0, r4
 8022f24:	f7ff ffd3 	bl	8022ece <_ZN8touchgfx7Outline9sortCellsEv>
 8022f28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022f2a:	f023 0302 	bic.w	r3, r3, #2
 8022f2e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8022f30:	68e0      	ldr	r0, [r4, #12]
 8022f32:	bd10      	pop	{r4, pc}
 8022f34:	f104 0314 	add.w	r3, r4, #20
 8022f38:	6922      	ldr	r2, [r4, #16]
 8022f3a:	cb03      	ldmia	r3!, {r0, r1}
 8022f3c:	6010      	str	r0, [r2, #0]
 8022f3e:	6051      	str	r1, [r2, #4]
 8022f40:	6923      	ldr	r3, [r4, #16]
 8022f42:	3308      	adds	r3, #8
 8022f44:	6123      	str	r3, [r4, #16]
 8022f46:	68a3      	ldr	r3, [r4, #8]
 8022f48:	3301      	adds	r3, #1
 8022f4a:	60a3      	str	r3, [r4, #8]
 8022f4c:	e7e7      	b.n	8022f1e <_ZN8touchgfx7Outline8getCellsEv+0x44>

08022f4e <_ZN8touchgfx8ScanlineD1Ev>:
 8022f4e:	4770      	bx	lr

08022f50 <_ZN8touchgfx8ScanlineD0Ev>:
 8022f50:	b510      	push	{r4, lr}
 8022f52:	4604      	mov	r4, r0
 8022f54:	2124      	movs	r1, #36	; 0x24
 8022f56:	f000 f87a 	bl	802304e <_ZdlPvj>
 8022f5a:	4620      	mov	r0, r4
 8022f5c:	bd10      	pop	{r4, pc}

08022f5e <_ZN8touchgfx8Scanline5resetEv>:
 8022f5e:	b510      	push	{r4, lr}
 8022f60:	4604      	mov	r4, r0
 8022f62:	f7f3 f94d 	bl	8016200 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8022f66:	61a0      	str	r0, [r4, #24]
 8022f68:	f7f3 f950 	bl	801620c <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8022f6c:	61e0      	str	r0, [r4, #28]
 8022f6e:	f7f3 f953 	bl	8016218 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8022f72:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8022f76:	6220      	str	r0, [r4, #32]
 8022f78:	6160      	str	r0, [r4, #20]
 8022f7a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8022f7e:	69e3      	ldr	r3, [r4, #28]
 8022f80:	6123      	str	r3, [r4, #16]
 8022f82:	2300      	movs	r3, #0
 8022f84:	60e3      	str	r3, [r4, #12]
 8022f86:	bd10      	pop	{r4, pc}

08022f88 <_ZN8touchgfx8ScanlineC1Ev>:
 8022f88:	4b07      	ldr	r3, [pc, #28]	; (8022fa8 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 8022f8a:	b510      	push	{r4, lr}
 8022f8c:	6003      	str	r3, [r0, #0]
 8022f8e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8022f92:	4604      	mov	r4, r0
 8022f94:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8022f98:	2300      	movs	r3, #0
 8022f9a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8022f9e:	6143      	str	r3, [r0, #20]
 8022fa0:	f7ff ffdd 	bl	8022f5e <_ZN8touchgfx8Scanline5resetEv>
 8022fa4:	4620      	mov	r0, r4
 8022fa6:	bd10      	pop	{r4, pc}
 8022fa8:	08029b70 	.word	0x08029b70

08022fac <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8022fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022fb0:	1e0c      	subs	r4, r1, #0
 8022fb2:	4605      	mov	r5, r0
 8022fb4:	4617      	mov	r7, r2
 8022fb6:	461e      	mov	r6, r3
 8022fb8:	da03      	bge.n	8022fc2 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8022fba:	4426      	add	r6, r4
 8022fbc:	2e01      	cmp	r6, #1
 8022fbe:	d421      	bmi.n	8023004 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8022fc0:	2400      	movs	r4, #0
 8022fc2:	f7f3 f917 	bl	80161f4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8022fc6:	42a0      	cmp	r0, r4
 8022fc8:	d91c      	bls.n	8023004 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8022fca:	eb04 0806 	add.w	r8, r4, r6
 8022fce:	f7f3 f911 	bl	80161f4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8022fd2:	4580      	cmp	r8, r0
 8022fd4:	d902      	bls.n	8022fdc <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8022fd6:	f7f3 f90d 	bl	80161f4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8022fda:	1b06      	subs	r6, r0, r4
 8022fdc:	69a8      	ldr	r0, [r5, #24]
 8022fde:	4632      	mov	r2, r6
 8022fe0:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8022fe4:	4420      	add	r0, r4
 8022fe6:	f7f4 fe92 	bl	8017d0e <_ZN8touchgfx6memsetEPvhm>
 8022fea:	686b      	ldr	r3, [r5, #4]
 8022fec:	b2b2      	uxth	r2, r6
 8022fee:	3301      	adds	r3, #1
 8022ff0:	42a3      	cmp	r3, r4
 8022ff2:	696b      	ldr	r3, [r5, #20]
 8022ff4:	d108      	bne.n	8023008 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 8022ff6:	8819      	ldrh	r1, [r3, #0]
 8022ff8:	440a      	add	r2, r1
 8022ffa:	801a      	strh	r2, [r3, #0]
 8022ffc:	3c01      	subs	r4, #1
 8022ffe:	4434      	add	r4, r6
 8023000:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8023004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023008:	1c99      	adds	r1, r3, #2
 802300a:	6169      	str	r1, [r5, #20]
 802300c:	805a      	strh	r2, [r3, #2]
 802300e:	692b      	ldr	r3, [r5, #16]
 8023010:	1c9a      	adds	r2, r3, #2
 8023012:	612a      	str	r2, [r5, #16]
 8023014:	805c      	strh	r4, [r3, #2]
 8023016:	68eb      	ldr	r3, [r5, #12]
 8023018:	3301      	adds	r3, #1
 802301a:	60eb      	str	r3, [r5, #12]
 802301c:	e7ee      	b.n	8022ffc <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0802301e <_ZN8touchgfx15RenderingBufferC1Ev>:
 802301e:	2200      	movs	r2, #0
 8023020:	6002      	str	r2, [r0, #0]
 8023022:	7102      	strb	r2, [r0, #4]
 8023024:	6102      	str	r2, [r0, #16]
 8023026:	e9c0 2202 	strd	r2, r2, [r0, #8]
 802302a:	4770      	bx	lr

0802302c <_ZN8touchgfx15RenderingBufferD1Ev>:
 802302c:	4770      	bx	lr

0802302e <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802302e:	6083      	str	r3, [r0, #8]
 8023030:	9b00      	ldr	r3, [sp, #0]
 8023032:	6001      	str	r1, [r0, #0]
 8023034:	60c3      	str	r3, [r0, #12]
 8023036:	9b01      	ldr	r3, [sp, #4]
 8023038:	7102      	strb	r2, [r0, #4]
 802303a:	6103      	str	r3, [r0, #16]
 802303c:	4770      	bx	lr

0802303e <__aeabi_atexit>:
 802303e:	460b      	mov	r3, r1
 8023040:	4601      	mov	r1, r0
 8023042:	4618      	mov	r0, r3
 8023044:	f000 b852 	b.w	80230ec <__cxa_atexit>

08023048 <__cxa_pure_virtual>:
 8023048:	b508      	push	{r3, lr}
 802304a:	f000 f81f 	bl	802308c <_ZSt9terminatev>

0802304e <_ZdlPvj>:
 802304e:	f000 b80f 	b.w	8023070 <_ZdlPv>

08023052 <__cxa_guard_acquire>:
 8023052:	6803      	ldr	r3, [r0, #0]
 8023054:	07db      	lsls	r3, r3, #31
 8023056:	d406      	bmi.n	8023066 <__cxa_guard_acquire+0x14>
 8023058:	7843      	ldrb	r3, [r0, #1]
 802305a:	b103      	cbz	r3, 802305e <__cxa_guard_acquire+0xc>
 802305c:	deff      	udf	#255	; 0xff
 802305e:	2301      	movs	r3, #1
 8023060:	7043      	strb	r3, [r0, #1]
 8023062:	4618      	mov	r0, r3
 8023064:	4770      	bx	lr
 8023066:	2000      	movs	r0, #0
 8023068:	4770      	bx	lr

0802306a <__cxa_guard_release>:
 802306a:	2301      	movs	r3, #1
 802306c:	6003      	str	r3, [r0, #0]
 802306e:	4770      	bx	lr

08023070 <_ZdlPv>:
 8023070:	f000 b88e 	b.w	8023190 <free>

08023074 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8023074:	b508      	push	{r3, lr}
 8023076:	4780      	blx	r0
 8023078:	f000 f80d 	bl	8023096 <abort>

0802307c <_ZSt13get_terminatev>:
 802307c:	4b02      	ldr	r3, [pc, #8]	; (8023088 <_ZSt13get_terminatev+0xc>)
 802307e:	6818      	ldr	r0, [r3, #0]
 8023080:	f3bf 8f5b 	dmb	ish
 8023084:	4770      	bx	lr
 8023086:	bf00      	nop
 8023088:	200000a4 	.word	0x200000a4

0802308c <_ZSt9terminatev>:
 802308c:	b508      	push	{r3, lr}
 802308e:	f7ff fff5 	bl	802307c <_ZSt13get_terminatev>
 8023092:	f7ff ffef 	bl	8023074 <_ZN10__cxxabiv111__terminateEPFvvE>

08023096 <abort>:
 8023096:	b508      	push	{r3, lr}
 8023098:	2006      	movs	r0, #6
 802309a:	f000 fc3d 	bl	8023918 <raise>
 802309e:	2001      	movs	r0, #1
 80230a0:	f7de fd70 	bl	8001b84 <_exit>

080230a4 <__assert_func>:
 80230a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80230a6:	461c      	mov	r4, r3
 80230a8:	4b09      	ldr	r3, [pc, #36]	; (80230d0 <__assert_func+0x2c>)
 80230aa:	681b      	ldr	r3, [r3, #0]
 80230ac:	4605      	mov	r5, r0
 80230ae:	68d8      	ldr	r0, [r3, #12]
 80230b0:	b152      	cbz	r2, 80230c8 <__assert_func+0x24>
 80230b2:	4b08      	ldr	r3, [pc, #32]	; (80230d4 <__assert_func+0x30>)
 80230b4:	9100      	str	r1, [sp, #0]
 80230b6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80230ba:	4907      	ldr	r1, [pc, #28]	; (80230d8 <__assert_func+0x34>)
 80230bc:	462b      	mov	r3, r5
 80230be:	4622      	mov	r2, r4
 80230c0:	f000 f828 	bl	8023114 <fiprintf>
 80230c4:	f7ff ffe7 	bl	8023096 <abort>
 80230c8:	4b04      	ldr	r3, [pc, #16]	; (80230dc <__assert_func+0x38>)
 80230ca:	461a      	mov	r2, r3
 80230cc:	e7f2      	b.n	80230b4 <__assert_func+0x10>
 80230ce:	bf00      	nop
 80230d0:	200000a8 	.word	0x200000a8
 80230d4:	08029b78 	.word	0x08029b78
 80230d8:	08029b85 	.word	0x08029b85
 80230dc:	08029bb3 	.word	0x08029bb3

080230e0 <atexit>:
 80230e0:	2300      	movs	r3, #0
 80230e2:	4601      	mov	r1, r0
 80230e4:	461a      	mov	r2, r3
 80230e6:	4618      	mov	r0, r3
 80230e8:	f000 bcf2 	b.w	8023ad0 <__register_exitproc>

080230ec <__cxa_atexit>:
 80230ec:	b510      	push	{r4, lr}
 80230ee:	4c05      	ldr	r4, [pc, #20]	; (8023104 <__cxa_atexit+0x18>)
 80230f0:	4613      	mov	r3, r2
 80230f2:	b12c      	cbz	r4, 8023100 <__cxa_atexit+0x14>
 80230f4:	460a      	mov	r2, r1
 80230f6:	4601      	mov	r1, r0
 80230f8:	2002      	movs	r0, #2
 80230fa:	f000 fce9 	bl	8023ad0 <__register_exitproc>
 80230fe:	bd10      	pop	{r4, pc}
 8023100:	4620      	mov	r0, r4
 8023102:	e7fc      	b.n	80230fe <__cxa_atexit+0x12>
 8023104:	08023ad1 	.word	0x08023ad1

08023108 <__errno>:
 8023108:	4b01      	ldr	r3, [pc, #4]	; (8023110 <__errno+0x8>)
 802310a:	6818      	ldr	r0, [r3, #0]
 802310c:	4770      	bx	lr
 802310e:	bf00      	nop
 8023110:	200000a8 	.word	0x200000a8

08023114 <fiprintf>:
 8023114:	b40e      	push	{r1, r2, r3}
 8023116:	b503      	push	{r0, r1, lr}
 8023118:	4601      	mov	r1, r0
 802311a:	ab03      	add	r3, sp, #12
 802311c:	4805      	ldr	r0, [pc, #20]	; (8023134 <fiprintf+0x20>)
 802311e:	f853 2b04 	ldr.w	r2, [r3], #4
 8023122:	6800      	ldr	r0, [r0, #0]
 8023124:	9301      	str	r3, [sp, #4]
 8023126:	f000 f921 	bl	802336c <_vfiprintf_r>
 802312a:	b002      	add	sp, #8
 802312c:	f85d eb04 	ldr.w	lr, [sp], #4
 8023130:	b003      	add	sp, #12
 8023132:	4770      	bx	lr
 8023134:	200000a8 	.word	0x200000a8

08023138 <__libc_init_array>:
 8023138:	b570      	push	{r4, r5, r6, lr}
 802313a:	4e0d      	ldr	r6, [pc, #52]	; (8023170 <__libc_init_array+0x38>)
 802313c:	4c0d      	ldr	r4, [pc, #52]	; (8023174 <__libc_init_array+0x3c>)
 802313e:	1ba4      	subs	r4, r4, r6
 8023140:	10a4      	asrs	r4, r4, #2
 8023142:	2500      	movs	r5, #0
 8023144:	42a5      	cmp	r5, r4
 8023146:	d109      	bne.n	802315c <__libc_init_array+0x24>
 8023148:	4e0b      	ldr	r6, [pc, #44]	; (8023178 <__libc_init_array+0x40>)
 802314a:	4c0c      	ldr	r4, [pc, #48]	; (802317c <__libc_init_array+0x44>)
 802314c:	f000 ffb0 	bl	80240b0 <_init>
 8023150:	1ba4      	subs	r4, r4, r6
 8023152:	10a4      	asrs	r4, r4, #2
 8023154:	2500      	movs	r5, #0
 8023156:	42a5      	cmp	r5, r4
 8023158:	d105      	bne.n	8023166 <__libc_init_array+0x2e>
 802315a:	bd70      	pop	{r4, r5, r6, pc}
 802315c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8023160:	4798      	blx	r3
 8023162:	3501      	adds	r5, #1
 8023164:	e7ee      	b.n	8023144 <__libc_init_array+0xc>
 8023166:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802316a:	4798      	blx	r3
 802316c:	3501      	adds	r5, #1
 802316e:	e7f2      	b.n	8023156 <__libc_init_array+0x1e>
 8023170:	08029c58 	.word	0x08029c58
 8023174:	08029c58 	.word	0x08029c58
 8023178:	08029c58 	.word	0x08029c58
 802317c:	08029c6c 	.word	0x08029c6c

08023180 <malloc>:
 8023180:	4b02      	ldr	r3, [pc, #8]	; (802318c <malloc+0xc>)
 8023182:	4601      	mov	r1, r0
 8023184:	6818      	ldr	r0, [r3, #0]
 8023186:	f000 b86d 	b.w	8023264 <_malloc_r>
 802318a:	bf00      	nop
 802318c:	200000a8 	.word	0x200000a8

08023190 <free>:
 8023190:	4b02      	ldr	r3, [pc, #8]	; (802319c <free+0xc>)
 8023192:	4601      	mov	r1, r0
 8023194:	6818      	ldr	r0, [r3, #0]
 8023196:	f000 b817 	b.w	80231c8 <_free_r>
 802319a:	bf00      	nop
 802319c:	200000a8 	.word	0x200000a8

080231a0 <memcpy>:
 80231a0:	b510      	push	{r4, lr}
 80231a2:	1e43      	subs	r3, r0, #1
 80231a4:	440a      	add	r2, r1
 80231a6:	4291      	cmp	r1, r2
 80231a8:	d100      	bne.n	80231ac <memcpy+0xc>
 80231aa:	bd10      	pop	{r4, pc}
 80231ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80231b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80231b4:	e7f7      	b.n	80231a6 <memcpy+0x6>

080231b6 <memset>:
 80231b6:	4402      	add	r2, r0
 80231b8:	4603      	mov	r3, r0
 80231ba:	4293      	cmp	r3, r2
 80231bc:	d100      	bne.n	80231c0 <memset+0xa>
 80231be:	4770      	bx	lr
 80231c0:	f803 1b01 	strb.w	r1, [r3], #1
 80231c4:	e7f9      	b.n	80231ba <memset+0x4>
	...

080231c8 <_free_r>:
 80231c8:	b538      	push	{r3, r4, r5, lr}
 80231ca:	4605      	mov	r5, r0
 80231cc:	2900      	cmp	r1, #0
 80231ce:	d045      	beq.n	802325c <_free_r+0x94>
 80231d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80231d4:	1f0c      	subs	r4, r1, #4
 80231d6:	2b00      	cmp	r3, #0
 80231d8:	bfb8      	it	lt
 80231da:	18e4      	addlt	r4, r4, r3
 80231dc:	f000 feba 	bl	8023f54 <__malloc_lock>
 80231e0:	4a1f      	ldr	r2, [pc, #124]	; (8023260 <_free_r+0x98>)
 80231e2:	6813      	ldr	r3, [r2, #0]
 80231e4:	4610      	mov	r0, r2
 80231e6:	b933      	cbnz	r3, 80231f6 <_free_r+0x2e>
 80231e8:	6063      	str	r3, [r4, #4]
 80231ea:	6014      	str	r4, [r2, #0]
 80231ec:	4628      	mov	r0, r5
 80231ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80231f2:	f000 beb0 	b.w	8023f56 <__malloc_unlock>
 80231f6:	42a3      	cmp	r3, r4
 80231f8:	d90c      	bls.n	8023214 <_free_r+0x4c>
 80231fa:	6821      	ldr	r1, [r4, #0]
 80231fc:	1862      	adds	r2, r4, r1
 80231fe:	4293      	cmp	r3, r2
 8023200:	bf04      	itt	eq
 8023202:	681a      	ldreq	r2, [r3, #0]
 8023204:	685b      	ldreq	r3, [r3, #4]
 8023206:	6063      	str	r3, [r4, #4]
 8023208:	bf04      	itt	eq
 802320a:	1852      	addeq	r2, r2, r1
 802320c:	6022      	streq	r2, [r4, #0]
 802320e:	6004      	str	r4, [r0, #0]
 8023210:	e7ec      	b.n	80231ec <_free_r+0x24>
 8023212:	4613      	mov	r3, r2
 8023214:	685a      	ldr	r2, [r3, #4]
 8023216:	b10a      	cbz	r2, 802321c <_free_r+0x54>
 8023218:	42a2      	cmp	r2, r4
 802321a:	d9fa      	bls.n	8023212 <_free_r+0x4a>
 802321c:	6819      	ldr	r1, [r3, #0]
 802321e:	1858      	adds	r0, r3, r1
 8023220:	42a0      	cmp	r0, r4
 8023222:	d10b      	bne.n	802323c <_free_r+0x74>
 8023224:	6820      	ldr	r0, [r4, #0]
 8023226:	4401      	add	r1, r0
 8023228:	1858      	adds	r0, r3, r1
 802322a:	4282      	cmp	r2, r0
 802322c:	6019      	str	r1, [r3, #0]
 802322e:	d1dd      	bne.n	80231ec <_free_r+0x24>
 8023230:	6810      	ldr	r0, [r2, #0]
 8023232:	6852      	ldr	r2, [r2, #4]
 8023234:	605a      	str	r2, [r3, #4]
 8023236:	4401      	add	r1, r0
 8023238:	6019      	str	r1, [r3, #0]
 802323a:	e7d7      	b.n	80231ec <_free_r+0x24>
 802323c:	d902      	bls.n	8023244 <_free_r+0x7c>
 802323e:	230c      	movs	r3, #12
 8023240:	602b      	str	r3, [r5, #0]
 8023242:	e7d3      	b.n	80231ec <_free_r+0x24>
 8023244:	6820      	ldr	r0, [r4, #0]
 8023246:	1821      	adds	r1, r4, r0
 8023248:	428a      	cmp	r2, r1
 802324a:	bf04      	itt	eq
 802324c:	6811      	ldreq	r1, [r2, #0]
 802324e:	6852      	ldreq	r2, [r2, #4]
 8023250:	6062      	str	r2, [r4, #4]
 8023252:	bf04      	itt	eq
 8023254:	1809      	addeq	r1, r1, r0
 8023256:	6021      	streq	r1, [r4, #0]
 8023258:	605c      	str	r4, [r3, #4]
 802325a:	e7c7      	b.n	80231ec <_free_r+0x24>
 802325c:	bd38      	pop	{r3, r4, r5, pc}
 802325e:	bf00      	nop
 8023260:	2000b2c8 	.word	0x2000b2c8

08023264 <_malloc_r>:
 8023264:	b570      	push	{r4, r5, r6, lr}
 8023266:	1ccd      	adds	r5, r1, #3
 8023268:	f025 0503 	bic.w	r5, r5, #3
 802326c:	3508      	adds	r5, #8
 802326e:	2d0c      	cmp	r5, #12
 8023270:	bf38      	it	cc
 8023272:	250c      	movcc	r5, #12
 8023274:	2d00      	cmp	r5, #0
 8023276:	4606      	mov	r6, r0
 8023278:	db01      	blt.n	802327e <_malloc_r+0x1a>
 802327a:	42a9      	cmp	r1, r5
 802327c:	d903      	bls.n	8023286 <_malloc_r+0x22>
 802327e:	230c      	movs	r3, #12
 8023280:	6033      	str	r3, [r6, #0]
 8023282:	2000      	movs	r0, #0
 8023284:	bd70      	pop	{r4, r5, r6, pc}
 8023286:	f000 fe65 	bl	8023f54 <__malloc_lock>
 802328a:	4a21      	ldr	r2, [pc, #132]	; (8023310 <_malloc_r+0xac>)
 802328c:	6814      	ldr	r4, [r2, #0]
 802328e:	4621      	mov	r1, r4
 8023290:	b991      	cbnz	r1, 80232b8 <_malloc_r+0x54>
 8023292:	4c20      	ldr	r4, [pc, #128]	; (8023314 <_malloc_r+0xb0>)
 8023294:	6823      	ldr	r3, [r4, #0]
 8023296:	b91b      	cbnz	r3, 80232a0 <_malloc_r+0x3c>
 8023298:	4630      	mov	r0, r6
 802329a:	f000 fb05 	bl	80238a8 <_sbrk_r>
 802329e:	6020      	str	r0, [r4, #0]
 80232a0:	4629      	mov	r1, r5
 80232a2:	4630      	mov	r0, r6
 80232a4:	f000 fb00 	bl	80238a8 <_sbrk_r>
 80232a8:	1c43      	adds	r3, r0, #1
 80232aa:	d124      	bne.n	80232f6 <_malloc_r+0x92>
 80232ac:	230c      	movs	r3, #12
 80232ae:	6033      	str	r3, [r6, #0]
 80232b0:	4630      	mov	r0, r6
 80232b2:	f000 fe50 	bl	8023f56 <__malloc_unlock>
 80232b6:	e7e4      	b.n	8023282 <_malloc_r+0x1e>
 80232b8:	680b      	ldr	r3, [r1, #0]
 80232ba:	1b5b      	subs	r3, r3, r5
 80232bc:	d418      	bmi.n	80232f0 <_malloc_r+0x8c>
 80232be:	2b0b      	cmp	r3, #11
 80232c0:	d90f      	bls.n	80232e2 <_malloc_r+0x7e>
 80232c2:	600b      	str	r3, [r1, #0]
 80232c4:	50cd      	str	r5, [r1, r3]
 80232c6:	18cc      	adds	r4, r1, r3
 80232c8:	4630      	mov	r0, r6
 80232ca:	f000 fe44 	bl	8023f56 <__malloc_unlock>
 80232ce:	f104 000b 	add.w	r0, r4, #11
 80232d2:	1d23      	adds	r3, r4, #4
 80232d4:	f020 0007 	bic.w	r0, r0, #7
 80232d8:	1ac3      	subs	r3, r0, r3
 80232da:	d0d3      	beq.n	8023284 <_malloc_r+0x20>
 80232dc:	425a      	negs	r2, r3
 80232de:	50e2      	str	r2, [r4, r3]
 80232e0:	e7d0      	b.n	8023284 <_malloc_r+0x20>
 80232e2:	428c      	cmp	r4, r1
 80232e4:	684b      	ldr	r3, [r1, #4]
 80232e6:	bf16      	itet	ne
 80232e8:	6063      	strne	r3, [r4, #4]
 80232ea:	6013      	streq	r3, [r2, #0]
 80232ec:	460c      	movne	r4, r1
 80232ee:	e7eb      	b.n	80232c8 <_malloc_r+0x64>
 80232f0:	460c      	mov	r4, r1
 80232f2:	6849      	ldr	r1, [r1, #4]
 80232f4:	e7cc      	b.n	8023290 <_malloc_r+0x2c>
 80232f6:	1cc4      	adds	r4, r0, #3
 80232f8:	f024 0403 	bic.w	r4, r4, #3
 80232fc:	42a0      	cmp	r0, r4
 80232fe:	d005      	beq.n	802330c <_malloc_r+0xa8>
 8023300:	1a21      	subs	r1, r4, r0
 8023302:	4630      	mov	r0, r6
 8023304:	f000 fad0 	bl	80238a8 <_sbrk_r>
 8023308:	3001      	adds	r0, #1
 802330a:	d0cf      	beq.n	80232ac <_malloc_r+0x48>
 802330c:	6025      	str	r5, [r4, #0]
 802330e:	e7db      	b.n	80232c8 <_malloc_r+0x64>
 8023310:	2000b2c8 	.word	0x2000b2c8
 8023314:	2000b2cc 	.word	0x2000b2cc

08023318 <__sfputc_r>:
 8023318:	6893      	ldr	r3, [r2, #8]
 802331a:	3b01      	subs	r3, #1
 802331c:	2b00      	cmp	r3, #0
 802331e:	b410      	push	{r4}
 8023320:	6093      	str	r3, [r2, #8]
 8023322:	da08      	bge.n	8023336 <__sfputc_r+0x1e>
 8023324:	6994      	ldr	r4, [r2, #24]
 8023326:	42a3      	cmp	r3, r4
 8023328:	db01      	blt.n	802332e <__sfputc_r+0x16>
 802332a:	290a      	cmp	r1, #10
 802332c:	d103      	bne.n	8023336 <__sfputc_r+0x1e>
 802332e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023332:	f000 bb0d 	b.w	8023950 <__swbuf_r>
 8023336:	6813      	ldr	r3, [r2, #0]
 8023338:	1c58      	adds	r0, r3, #1
 802333a:	6010      	str	r0, [r2, #0]
 802333c:	7019      	strb	r1, [r3, #0]
 802333e:	4608      	mov	r0, r1
 8023340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023344:	4770      	bx	lr

08023346 <__sfputs_r>:
 8023346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023348:	4606      	mov	r6, r0
 802334a:	460f      	mov	r7, r1
 802334c:	4614      	mov	r4, r2
 802334e:	18d5      	adds	r5, r2, r3
 8023350:	42ac      	cmp	r4, r5
 8023352:	d101      	bne.n	8023358 <__sfputs_r+0x12>
 8023354:	2000      	movs	r0, #0
 8023356:	e007      	b.n	8023368 <__sfputs_r+0x22>
 8023358:	463a      	mov	r2, r7
 802335a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802335e:	4630      	mov	r0, r6
 8023360:	f7ff ffda 	bl	8023318 <__sfputc_r>
 8023364:	1c43      	adds	r3, r0, #1
 8023366:	d1f3      	bne.n	8023350 <__sfputs_r+0xa>
 8023368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802336c <_vfiprintf_r>:
 802336c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023370:	460c      	mov	r4, r1
 8023372:	b09d      	sub	sp, #116	; 0x74
 8023374:	4617      	mov	r7, r2
 8023376:	461d      	mov	r5, r3
 8023378:	4606      	mov	r6, r0
 802337a:	b118      	cbz	r0, 8023384 <_vfiprintf_r+0x18>
 802337c:	6983      	ldr	r3, [r0, #24]
 802337e:	b90b      	cbnz	r3, 8023384 <_vfiprintf_r+0x18>
 8023380:	f000 fcfa 	bl	8023d78 <__sinit>
 8023384:	4b7c      	ldr	r3, [pc, #496]	; (8023578 <_vfiprintf_r+0x20c>)
 8023386:	429c      	cmp	r4, r3
 8023388:	d158      	bne.n	802343c <_vfiprintf_r+0xd0>
 802338a:	6874      	ldr	r4, [r6, #4]
 802338c:	89a3      	ldrh	r3, [r4, #12]
 802338e:	0718      	lsls	r0, r3, #28
 8023390:	d55e      	bpl.n	8023450 <_vfiprintf_r+0xe4>
 8023392:	6923      	ldr	r3, [r4, #16]
 8023394:	2b00      	cmp	r3, #0
 8023396:	d05b      	beq.n	8023450 <_vfiprintf_r+0xe4>
 8023398:	2300      	movs	r3, #0
 802339a:	9309      	str	r3, [sp, #36]	; 0x24
 802339c:	2320      	movs	r3, #32
 802339e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80233a2:	2330      	movs	r3, #48	; 0x30
 80233a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80233a8:	9503      	str	r5, [sp, #12]
 80233aa:	f04f 0b01 	mov.w	fp, #1
 80233ae:	46b8      	mov	r8, r7
 80233b0:	4645      	mov	r5, r8
 80233b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80233b6:	b10b      	cbz	r3, 80233bc <_vfiprintf_r+0x50>
 80233b8:	2b25      	cmp	r3, #37	; 0x25
 80233ba:	d154      	bne.n	8023466 <_vfiprintf_r+0xfa>
 80233bc:	ebb8 0a07 	subs.w	sl, r8, r7
 80233c0:	d00b      	beq.n	80233da <_vfiprintf_r+0x6e>
 80233c2:	4653      	mov	r3, sl
 80233c4:	463a      	mov	r2, r7
 80233c6:	4621      	mov	r1, r4
 80233c8:	4630      	mov	r0, r6
 80233ca:	f7ff ffbc 	bl	8023346 <__sfputs_r>
 80233ce:	3001      	adds	r0, #1
 80233d0:	f000 80c2 	beq.w	8023558 <_vfiprintf_r+0x1ec>
 80233d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80233d6:	4453      	add	r3, sl
 80233d8:	9309      	str	r3, [sp, #36]	; 0x24
 80233da:	f898 3000 	ldrb.w	r3, [r8]
 80233de:	2b00      	cmp	r3, #0
 80233e0:	f000 80ba 	beq.w	8023558 <_vfiprintf_r+0x1ec>
 80233e4:	2300      	movs	r3, #0
 80233e6:	f04f 32ff 	mov.w	r2, #4294967295
 80233ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80233ee:	9304      	str	r3, [sp, #16]
 80233f0:	9307      	str	r3, [sp, #28]
 80233f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80233f6:	931a      	str	r3, [sp, #104]	; 0x68
 80233f8:	46a8      	mov	r8, r5
 80233fa:	2205      	movs	r2, #5
 80233fc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8023400:	485e      	ldr	r0, [pc, #376]	; (802357c <_vfiprintf_r+0x210>)
 8023402:	f7dc ff05 	bl	8000210 <memchr>
 8023406:	9b04      	ldr	r3, [sp, #16]
 8023408:	bb78      	cbnz	r0, 802346a <_vfiprintf_r+0xfe>
 802340a:	06d9      	lsls	r1, r3, #27
 802340c:	bf44      	itt	mi
 802340e:	2220      	movmi	r2, #32
 8023410:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8023414:	071a      	lsls	r2, r3, #28
 8023416:	bf44      	itt	mi
 8023418:	222b      	movmi	r2, #43	; 0x2b
 802341a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802341e:	782a      	ldrb	r2, [r5, #0]
 8023420:	2a2a      	cmp	r2, #42	; 0x2a
 8023422:	d02a      	beq.n	802347a <_vfiprintf_r+0x10e>
 8023424:	9a07      	ldr	r2, [sp, #28]
 8023426:	46a8      	mov	r8, r5
 8023428:	2000      	movs	r0, #0
 802342a:	250a      	movs	r5, #10
 802342c:	4641      	mov	r1, r8
 802342e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023432:	3b30      	subs	r3, #48	; 0x30
 8023434:	2b09      	cmp	r3, #9
 8023436:	d969      	bls.n	802350c <_vfiprintf_r+0x1a0>
 8023438:	b360      	cbz	r0, 8023494 <_vfiprintf_r+0x128>
 802343a:	e024      	b.n	8023486 <_vfiprintf_r+0x11a>
 802343c:	4b50      	ldr	r3, [pc, #320]	; (8023580 <_vfiprintf_r+0x214>)
 802343e:	429c      	cmp	r4, r3
 8023440:	d101      	bne.n	8023446 <_vfiprintf_r+0xda>
 8023442:	68b4      	ldr	r4, [r6, #8]
 8023444:	e7a2      	b.n	802338c <_vfiprintf_r+0x20>
 8023446:	4b4f      	ldr	r3, [pc, #316]	; (8023584 <_vfiprintf_r+0x218>)
 8023448:	429c      	cmp	r4, r3
 802344a:	bf08      	it	eq
 802344c:	68f4      	ldreq	r4, [r6, #12]
 802344e:	e79d      	b.n	802338c <_vfiprintf_r+0x20>
 8023450:	4621      	mov	r1, r4
 8023452:	4630      	mov	r0, r6
 8023454:	f000 face 	bl	80239f4 <__swsetup_r>
 8023458:	2800      	cmp	r0, #0
 802345a:	d09d      	beq.n	8023398 <_vfiprintf_r+0x2c>
 802345c:	f04f 30ff 	mov.w	r0, #4294967295
 8023460:	b01d      	add	sp, #116	; 0x74
 8023462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023466:	46a8      	mov	r8, r5
 8023468:	e7a2      	b.n	80233b0 <_vfiprintf_r+0x44>
 802346a:	4a44      	ldr	r2, [pc, #272]	; (802357c <_vfiprintf_r+0x210>)
 802346c:	1a80      	subs	r0, r0, r2
 802346e:	fa0b f000 	lsl.w	r0, fp, r0
 8023472:	4318      	orrs	r0, r3
 8023474:	9004      	str	r0, [sp, #16]
 8023476:	4645      	mov	r5, r8
 8023478:	e7be      	b.n	80233f8 <_vfiprintf_r+0x8c>
 802347a:	9a03      	ldr	r2, [sp, #12]
 802347c:	1d11      	adds	r1, r2, #4
 802347e:	6812      	ldr	r2, [r2, #0]
 8023480:	9103      	str	r1, [sp, #12]
 8023482:	2a00      	cmp	r2, #0
 8023484:	db01      	blt.n	802348a <_vfiprintf_r+0x11e>
 8023486:	9207      	str	r2, [sp, #28]
 8023488:	e004      	b.n	8023494 <_vfiprintf_r+0x128>
 802348a:	4252      	negs	r2, r2
 802348c:	f043 0302 	orr.w	r3, r3, #2
 8023490:	9207      	str	r2, [sp, #28]
 8023492:	9304      	str	r3, [sp, #16]
 8023494:	f898 3000 	ldrb.w	r3, [r8]
 8023498:	2b2e      	cmp	r3, #46	; 0x2e
 802349a:	d10e      	bne.n	80234ba <_vfiprintf_r+0x14e>
 802349c:	f898 3001 	ldrb.w	r3, [r8, #1]
 80234a0:	2b2a      	cmp	r3, #42	; 0x2a
 80234a2:	d138      	bne.n	8023516 <_vfiprintf_r+0x1aa>
 80234a4:	9b03      	ldr	r3, [sp, #12]
 80234a6:	1d1a      	adds	r2, r3, #4
 80234a8:	681b      	ldr	r3, [r3, #0]
 80234aa:	9203      	str	r2, [sp, #12]
 80234ac:	2b00      	cmp	r3, #0
 80234ae:	bfb8      	it	lt
 80234b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80234b4:	f108 0802 	add.w	r8, r8, #2
 80234b8:	9305      	str	r3, [sp, #20]
 80234ba:	4d33      	ldr	r5, [pc, #204]	; (8023588 <_vfiprintf_r+0x21c>)
 80234bc:	f898 1000 	ldrb.w	r1, [r8]
 80234c0:	2203      	movs	r2, #3
 80234c2:	4628      	mov	r0, r5
 80234c4:	f7dc fea4 	bl	8000210 <memchr>
 80234c8:	b140      	cbz	r0, 80234dc <_vfiprintf_r+0x170>
 80234ca:	2340      	movs	r3, #64	; 0x40
 80234cc:	1b40      	subs	r0, r0, r5
 80234ce:	fa03 f000 	lsl.w	r0, r3, r0
 80234d2:	9b04      	ldr	r3, [sp, #16]
 80234d4:	4303      	orrs	r3, r0
 80234d6:	f108 0801 	add.w	r8, r8, #1
 80234da:	9304      	str	r3, [sp, #16]
 80234dc:	f898 1000 	ldrb.w	r1, [r8]
 80234e0:	482a      	ldr	r0, [pc, #168]	; (802358c <_vfiprintf_r+0x220>)
 80234e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80234e6:	2206      	movs	r2, #6
 80234e8:	f108 0701 	add.w	r7, r8, #1
 80234ec:	f7dc fe90 	bl	8000210 <memchr>
 80234f0:	2800      	cmp	r0, #0
 80234f2:	d037      	beq.n	8023564 <_vfiprintf_r+0x1f8>
 80234f4:	4b26      	ldr	r3, [pc, #152]	; (8023590 <_vfiprintf_r+0x224>)
 80234f6:	bb1b      	cbnz	r3, 8023540 <_vfiprintf_r+0x1d4>
 80234f8:	9b03      	ldr	r3, [sp, #12]
 80234fa:	3307      	adds	r3, #7
 80234fc:	f023 0307 	bic.w	r3, r3, #7
 8023500:	3308      	adds	r3, #8
 8023502:	9303      	str	r3, [sp, #12]
 8023504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023506:	444b      	add	r3, r9
 8023508:	9309      	str	r3, [sp, #36]	; 0x24
 802350a:	e750      	b.n	80233ae <_vfiprintf_r+0x42>
 802350c:	fb05 3202 	mla	r2, r5, r2, r3
 8023510:	2001      	movs	r0, #1
 8023512:	4688      	mov	r8, r1
 8023514:	e78a      	b.n	802342c <_vfiprintf_r+0xc0>
 8023516:	2300      	movs	r3, #0
 8023518:	f108 0801 	add.w	r8, r8, #1
 802351c:	9305      	str	r3, [sp, #20]
 802351e:	4619      	mov	r1, r3
 8023520:	250a      	movs	r5, #10
 8023522:	4640      	mov	r0, r8
 8023524:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023528:	3a30      	subs	r2, #48	; 0x30
 802352a:	2a09      	cmp	r2, #9
 802352c:	d903      	bls.n	8023536 <_vfiprintf_r+0x1ca>
 802352e:	2b00      	cmp	r3, #0
 8023530:	d0c3      	beq.n	80234ba <_vfiprintf_r+0x14e>
 8023532:	9105      	str	r1, [sp, #20]
 8023534:	e7c1      	b.n	80234ba <_vfiprintf_r+0x14e>
 8023536:	fb05 2101 	mla	r1, r5, r1, r2
 802353a:	2301      	movs	r3, #1
 802353c:	4680      	mov	r8, r0
 802353e:	e7f0      	b.n	8023522 <_vfiprintf_r+0x1b6>
 8023540:	ab03      	add	r3, sp, #12
 8023542:	9300      	str	r3, [sp, #0]
 8023544:	4622      	mov	r2, r4
 8023546:	4b13      	ldr	r3, [pc, #76]	; (8023594 <_vfiprintf_r+0x228>)
 8023548:	a904      	add	r1, sp, #16
 802354a:	4630      	mov	r0, r6
 802354c:	f3af 8000 	nop.w
 8023550:	f1b0 3fff 	cmp.w	r0, #4294967295
 8023554:	4681      	mov	r9, r0
 8023556:	d1d5      	bne.n	8023504 <_vfiprintf_r+0x198>
 8023558:	89a3      	ldrh	r3, [r4, #12]
 802355a:	065b      	lsls	r3, r3, #25
 802355c:	f53f af7e 	bmi.w	802345c <_vfiprintf_r+0xf0>
 8023560:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023562:	e77d      	b.n	8023460 <_vfiprintf_r+0xf4>
 8023564:	ab03      	add	r3, sp, #12
 8023566:	9300      	str	r3, [sp, #0]
 8023568:	4622      	mov	r2, r4
 802356a:	4b0a      	ldr	r3, [pc, #40]	; (8023594 <_vfiprintf_r+0x228>)
 802356c:	a904      	add	r1, sp, #16
 802356e:	4630      	mov	r0, r6
 8023570:	f000 f888 	bl	8023684 <_printf_i>
 8023574:	e7ec      	b.n	8023550 <_vfiprintf_r+0x1e4>
 8023576:	bf00      	nop
 8023578:	08029c10 	.word	0x08029c10
 802357c:	08029bb8 	.word	0x08029bb8
 8023580:	08029c30 	.word	0x08029c30
 8023584:	08029bf0 	.word	0x08029bf0
 8023588:	08029bbe 	.word	0x08029bbe
 802358c:	08029bc2 	.word	0x08029bc2
 8023590:	00000000 	.word	0x00000000
 8023594:	08023347 	.word	0x08023347

08023598 <_printf_common>:
 8023598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802359c:	4691      	mov	r9, r2
 802359e:	461f      	mov	r7, r3
 80235a0:	688a      	ldr	r2, [r1, #8]
 80235a2:	690b      	ldr	r3, [r1, #16]
 80235a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80235a8:	4293      	cmp	r3, r2
 80235aa:	bfb8      	it	lt
 80235ac:	4613      	movlt	r3, r2
 80235ae:	f8c9 3000 	str.w	r3, [r9]
 80235b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80235b6:	4606      	mov	r6, r0
 80235b8:	460c      	mov	r4, r1
 80235ba:	b112      	cbz	r2, 80235c2 <_printf_common+0x2a>
 80235bc:	3301      	adds	r3, #1
 80235be:	f8c9 3000 	str.w	r3, [r9]
 80235c2:	6823      	ldr	r3, [r4, #0]
 80235c4:	0699      	lsls	r1, r3, #26
 80235c6:	bf42      	ittt	mi
 80235c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80235cc:	3302      	addmi	r3, #2
 80235ce:	f8c9 3000 	strmi.w	r3, [r9]
 80235d2:	6825      	ldr	r5, [r4, #0]
 80235d4:	f015 0506 	ands.w	r5, r5, #6
 80235d8:	d107      	bne.n	80235ea <_printf_common+0x52>
 80235da:	f104 0a19 	add.w	sl, r4, #25
 80235de:	68e3      	ldr	r3, [r4, #12]
 80235e0:	f8d9 2000 	ldr.w	r2, [r9]
 80235e4:	1a9b      	subs	r3, r3, r2
 80235e6:	42ab      	cmp	r3, r5
 80235e8:	dc28      	bgt.n	802363c <_printf_common+0xa4>
 80235ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80235ee:	6822      	ldr	r2, [r4, #0]
 80235f0:	3300      	adds	r3, #0
 80235f2:	bf18      	it	ne
 80235f4:	2301      	movne	r3, #1
 80235f6:	0692      	lsls	r2, r2, #26
 80235f8:	d42d      	bmi.n	8023656 <_printf_common+0xbe>
 80235fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80235fe:	4639      	mov	r1, r7
 8023600:	4630      	mov	r0, r6
 8023602:	47c0      	blx	r8
 8023604:	3001      	adds	r0, #1
 8023606:	d020      	beq.n	802364a <_printf_common+0xb2>
 8023608:	6823      	ldr	r3, [r4, #0]
 802360a:	68e5      	ldr	r5, [r4, #12]
 802360c:	f8d9 2000 	ldr.w	r2, [r9]
 8023610:	f003 0306 	and.w	r3, r3, #6
 8023614:	2b04      	cmp	r3, #4
 8023616:	bf08      	it	eq
 8023618:	1aad      	subeq	r5, r5, r2
 802361a:	68a3      	ldr	r3, [r4, #8]
 802361c:	6922      	ldr	r2, [r4, #16]
 802361e:	bf0c      	ite	eq
 8023620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023624:	2500      	movne	r5, #0
 8023626:	4293      	cmp	r3, r2
 8023628:	bfc4      	itt	gt
 802362a:	1a9b      	subgt	r3, r3, r2
 802362c:	18ed      	addgt	r5, r5, r3
 802362e:	f04f 0900 	mov.w	r9, #0
 8023632:	341a      	adds	r4, #26
 8023634:	454d      	cmp	r5, r9
 8023636:	d11a      	bne.n	802366e <_printf_common+0xd6>
 8023638:	2000      	movs	r0, #0
 802363a:	e008      	b.n	802364e <_printf_common+0xb6>
 802363c:	2301      	movs	r3, #1
 802363e:	4652      	mov	r2, sl
 8023640:	4639      	mov	r1, r7
 8023642:	4630      	mov	r0, r6
 8023644:	47c0      	blx	r8
 8023646:	3001      	adds	r0, #1
 8023648:	d103      	bne.n	8023652 <_printf_common+0xba>
 802364a:	f04f 30ff 	mov.w	r0, #4294967295
 802364e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023652:	3501      	adds	r5, #1
 8023654:	e7c3      	b.n	80235de <_printf_common+0x46>
 8023656:	18e1      	adds	r1, r4, r3
 8023658:	1c5a      	adds	r2, r3, #1
 802365a:	2030      	movs	r0, #48	; 0x30
 802365c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8023660:	4422      	add	r2, r4
 8023662:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023666:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802366a:	3302      	adds	r3, #2
 802366c:	e7c5      	b.n	80235fa <_printf_common+0x62>
 802366e:	2301      	movs	r3, #1
 8023670:	4622      	mov	r2, r4
 8023672:	4639      	mov	r1, r7
 8023674:	4630      	mov	r0, r6
 8023676:	47c0      	blx	r8
 8023678:	3001      	adds	r0, #1
 802367a:	d0e6      	beq.n	802364a <_printf_common+0xb2>
 802367c:	f109 0901 	add.w	r9, r9, #1
 8023680:	e7d8      	b.n	8023634 <_printf_common+0x9c>
	...

08023684 <_printf_i>:
 8023684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023688:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 802368c:	460c      	mov	r4, r1
 802368e:	7e09      	ldrb	r1, [r1, #24]
 8023690:	b085      	sub	sp, #20
 8023692:	296e      	cmp	r1, #110	; 0x6e
 8023694:	4617      	mov	r7, r2
 8023696:	4606      	mov	r6, r0
 8023698:	4698      	mov	r8, r3
 802369a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802369c:	f000 80b3 	beq.w	8023806 <_printf_i+0x182>
 80236a0:	d822      	bhi.n	80236e8 <_printf_i+0x64>
 80236a2:	2963      	cmp	r1, #99	; 0x63
 80236a4:	d036      	beq.n	8023714 <_printf_i+0x90>
 80236a6:	d80a      	bhi.n	80236be <_printf_i+0x3a>
 80236a8:	2900      	cmp	r1, #0
 80236aa:	f000 80b9 	beq.w	8023820 <_printf_i+0x19c>
 80236ae:	2958      	cmp	r1, #88	; 0x58
 80236b0:	f000 8083 	beq.w	80237ba <_printf_i+0x136>
 80236b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80236b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80236bc:	e032      	b.n	8023724 <_printf_i+0xa0>
 80236be:	2964      	cmp	r1, #100	; 0x64
 80236c0:	d001      	beq.n	80236c6 <_printf_i+0x42>
 80236c2:	2969      	cmp	r1, #105	; 0x69
 80236c4:	d1f6      	bne.n	80236b4 <_printf_i+0x30>
 80236c6:	6820      	ldr	r0, [r4, #0]
 80236c8:	6813      	ldr	r3, [r2, #0]
 80236ca:	0605      	lsls	r5, r0, #24
 80236cc:	f103 0104 	add.w	r1, r3, #4
 80236d0:	d52a      	bpl.n	8023728 <_printf_i+0xa4>
 80236d2:	681b      	ldr	r3, [r3, #0]
 80236d4:	6011      	str	r1, [r2, #0]
 80236d6:	2b00      	cmp	r3, #0
 80236d8:	da03      	bge.n	80236e2 <_printf_i+0x5e>
 80236da:	222d      	movs	r2, #45	; 0x2d
 80236dc:	425b      	negs	r3, r3
 80236de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80236e2:	486f      	ldr	r0, [pc, #444]	; (80238a0 <_printf_i+0x21c>)
 80236e4:	220a      	movs	r2, #10
 80236e6:	e039      	b.n	802375c <_printf_i+0xd8>
 80236e8:	2973      	cmp	r1, #115	; 0x73
 80236ea:	f000 809d 	beq.w	8023828 <_printf_i+0x1a4>
 80236ee:	d808      	bhi.n	8023702 <_printf_i+0x7e>
 80236f0:	296f      	cmp	r1, #111	; 0x6f
 80236f2:	d020      	beq.n	8023736 <_printf_i+0xb2>
 80236f4:	2970      	cmp	r1, #112	; 0x70
 80236f6:	d1dd      	bne.n	80236b4 <_printf_i+0x30>
 80236f8:	6823      	ldr	r3, [r4, #0]
 80236fa:	f043 0320 	orr.w	r3, r3, #32
 80236fe:	6023      	str	r3, [r4, #0]
 8023700:	e003      	b.n	802370a <_printf_i+0x86>
 8023702:	2975      	cmp	r1, #117	; 0x75
 8023704:	d017      	beq.n	8023736 <_printf_i+0xb2>
 8023706:	2978      	cmp	r1, #120	; 0x78
 8023708:	d1d4      	bne.n	80236b4 <_printf_i+0x30>
 802370a:	2378      	movs	r3, #120	; 0x78
 802370c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023710:	4864      	ldr	r0, [pc, #400]	; (80238a4 <_printf_i+0x220>)
 8023712:	e055      	b.n	80237c0 <_printf_i+0x13c>
 8023714:	6813      	ldr	r3, [r2, #0]
 8023716:	1d19      	adds	r1, r3, #4
 8023718:	681b      	ldr	r3, [r3, #0]
 802371a:	6011      	str	r1, [r2, #0]
 802371c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023720:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023724:	2301      	movs	r3, #1
 8023726:	e08c      	b.n	8023842 <_printf_i+0x1be>
 8023728:	681b      	ldr	r3, [r3, #0]
 802372a:	6011      	str	r1, [r2, #0]
 802372c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8023730:	bf18      	it	ne
 8023732:	b21b      	sxthne	r3, r3
 8023734:	e7cf      	b.n	80236d6 <_printf_i+0x52>
 8023736:	6813      	ldr	r3, [r2, #0]
 8023738:	6825      	ldr	r5, [r4, #0]
 802373a:	1d18      	adds	r0, r3, #4
 802373c:	6010      	str	r0, [r2, #0]
 802373e:	0628      	lsls	r0, r5, #24
 8023740:	d501      	bpl.n	8023746 <_printf_i+0xc2>
 8023742:	681b      	ldr	r3, [r3, #0]
 8023744:	e002      	b.n	802374c <_printf_i+0xc8>
 8023746:	0668      	lsls	r0, r5, #25
 8023748:	d5fb      	bpl.n	8023742 <_printf_i+0xbe>
 802374a:	881b      	ldrh	r3, [r3, #0]
 802374c:	4854      	ldr	r0, [pc, #336]	; (80238a0 <_printf_i+0x21c>)
 802374e:	296f      	cmp	r1, #111	; 0x6f
 8023750:	bf14      	ite	ne
 8023752:	220a      	movne	r2, #10
 8023754:	2208      	moveq	r2, #8
 8023756:	2100      	movs	r1, #0
 8023758:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802375c:	6865      	ldr	r5, [r4, #4]
 802375e:	60a5      	str	r5, [r4, #8]
 8023760:	2d00      	cmp	r5, #0
 8023762:	f2c0 8095 	blt.w	8023890 <_printf_i+0x20c>
 8023766:	6821      	ldr	r1, [r4, #0]
 8023768:	f021 0104 	bic.w	r1, r1, #4
 802376c:	6021      	str	r1, [r4, #0]
 802376e:	2b00      	cmp	r3, #0
 8023770:	d13d      	bne.n	80237ee <_printf_i+0x16a>
 8023772:	2d00      	cmp	r5, #0
 8023774:	f040 808e 	bne.w	8023894 <_printf_i+0x210>
 8023778:	4665      	mov	r5, ip
 802377a:	2a08      	cmp	r2, #8
 802377c:	d10b      	bne.n	8023796 <_printf_i+0x112>
 802377e:	6823      	ldr	r3, [r4, #0]
 8023780:	07db      	lsls	r3, r3, #31
 8023782:	d508      	bpl.n	8023796 <_printf_i+0x112>
 8023784:	6923      	ldr	r3, [r4, #16]
 8023786:	6862      	ldr	r2, [r4, #4]
 8023788:	429a      	cmp	r2, r3
 802378a:	bfde      	ittt	le
 802378c:	2330      	movle	r3, #48	; 0x30
 802378e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8023792:	f105 35ff 	addle.w	r5, r5, #4294967295
 8023796:	ebac 0305 	sub.w	r3, ip, r5
 802379a:	6123      	str	r3, [r4, #16]
 802379c:	f8cd 8000 	str.w	r8, [sp]
 80237a0:	463b      	mov	r3, r7
 80237a2:	aa03      	add	r2, sp, #12
 80237a4:	4621      	mov	r1, r4
 80237a6:	4630      	mov	r0, r6
 80237a8:	f7ff fef6 	bl	8023598 <_printf_common>
 80237ac:	3001      	adds	r0, #1
 80237ae:	d14d      	bne.n	802384c <_printf_i+0x1c8>
 80237b0:	f04f 30ff 	mov.w	r0, #4294967295
 80237b4:	b005      	add	sp, #20
 80237b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80237ba:	4839      	ldr	r0, [pc, #228]	; (80238a0 <_printf_i+0x21c>)
 80237bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80237c0:	6813      	ldr	r3, [r2, #0]
 80237c2:	6821      	ldr	r1, [r4, #0]
 80237c4:	1d1d      	adds	r5, r3, #4
 80237c6:	681b      	ldr	r3, [r3, #0]
 80237c8:	6015      	str	r5, [r2, #0]
 80237ca:	060a      	lsls	r2, r1, #24
 80237cc:	d50b      	bpl.n	80237e6 <_printf_i+0x162>
 80237ce:	07ca      	lsls	r2, r1, #31
 80237d0:	bf44      	itt	mi
 80237d2:	f041 0120 	orrmi.w	r1, r1, #32
 80237d6:	6021      	strmi	r1, [r4, #0]
 80237d8:	b91b      	cbnz	r3, 80237e2 <_printf_i+0x15e>
 80237da:	6822      	ldr	r2, [r4, #0]
 80237dc:	f022 0220 	bic.w	r2, r2, #32
 80237e0:	6022      	str	r2, [r4, #0]
 80237e2:	2210      	movs	r2, #16
 80237e4:	e7b7      	b.n	8023756 <_printf_i+0xd2>
 80237e6:	064d      	lsls	r5, r1, #25
 80237e8:	bf48      	it	mi
 80237ea:	b29b      	uxthmi	r3, r3
 80237ec:	e7ef      	b.n	80237ce <_printf_i+0x14a>
 80237ee:	4665      	mov	r5, ip
 80237f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80237f4:	fb02 3311 	mls	r3, r2, r1, r3
 80237f8:	5cc3      	ldrb	r3, [r0, r3]
 80237fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80237fe:	460b      	mov	r3, r1
 8023800:	2900      	cmp	r1, #0
 8023802:	d1f5      	bne.n	80237f0 <_printf_i+0x16c>
 8023804:	e7b9      	b.n	802377a <_printf_i+0xf6>
 8023806:	6813      	ldr	r3, [r2, #0]
 8023808:	6825      	ldr	r5, [r4, #0]
 802380a:	6961      	ldr	r1, [r4, #20]
 802380c:	1d18      	adds	r0, r3, #4
 802380e:	6010      	str	r0, [r2, #0]
 8023810:	0628      	lsls	r0, r5, #24
 8023812:	681b      	ldr	r3, [r3, #0]
 8023814:	d501      	bpl.n	802381a <_printf_i+0x196>
 8023816:	6019      	str	r1, [r3, #0]
 8023818:	e002      	b.n	8023820 <_printf_i+0x19c>
 802381a:	066a      	lsls	r2, r5, #25
 802381c:	d5fb      	bpl.n	8023816 <_printf_i+0x192>
 802381e:	8019      	strh	r1, [r3, #0]
 8023820:	2300      	movs	r3, #0
 8023822:	6123      	str	r3, [r4, #16]
 8023824:	4665      	mov	r5, ip
 8023826:	e7b9      	b.n	802379c <_printf_i+0x118>
 8023828:	6813      	ldr	r3, [r2, #0]
 802382a:	1d19      	adds	r1, r3, #4
 802382c:	6011      	str	r1, [r2, #0]
 802382e:	681d      	ldr	r5, [r3, #0]
 8023830:	6862      	ldr	r2, [r4, #4]
 8023832:	2100      	movs	r1, #0
 8023834:	4628      	mov	r0, r5
 8023836:	f7dc fceb 	bl	8000210 <memchr>
 802383a:	b108      	cbz	r0, 8023840 <_printf_i+0x1bc>
 802383c:	1b40      	subs	r0, r0, r5
 802383e:	6060      	str	r0, [r4, #4]
 8023840:	6863      	ldr	r3, [r4, #4]
 8023842:	6123      	str	r3, [r4, #16]
 8023844:	2300      	movs	r3, #0
 8023846:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802384a:	e7a7      	b.n	802379c <_printf_i+0x118>
 802384c:	6923      	ldr	r3, [r4, #16]
 802384e:	462a      	mov	r2, r5
 8023850:	4639      	mov	r1, r7
 8023852:	4630      	mov	r0, r6
 8023854:	47c0      	blx	r8
 8023856:	3001      	adds	r0, #1
 8023858:	d0aa      	beq.n	80237b0 <_printf_i+0x12c>
 802385a:	6823      	ldr	r3, [r4, #0]
 802385c:	079b      	lsls	r3, r3, #30
 802385e:	d413      	bmi.n	8023888 <_printf_i+0x204>
 8023860:	68e0      	ldr	r0, [r4, #12]
 8023862:	9b03      	ldr	r3, [sp, #12]
 8023864:	4298      	cmp	r0, r3
 8023866:	bfb8      	it	lt
 8023868:	4618      	movlt	r0, r3
 802386a:	e7a3      	b.n	80237b4 <_printf_i+0x130>
 802386c:	2301      	movs	r3, #1
 802386e:	464a      	mov	r2, r9
 8023870:	4639      	mov	r1, r7
 8023872:	4630      	mov	r0, r6
 8023874:	47c0      	blx	r8
 8023876:	3001      	adds	r0, #1
 8023878:	d09a      	beq.n	80237b0 <_printf_i+0x12c>
 802387a:	3501      	adds	r5, #1
 802387c:	68e3      	ldr	r3, [r4, #12]
 802387e:	9a03      	ldr	r2, [sp, #12]
 8023880:	1a9b      	subs	r3, r3, r2
 8023882:	42ab      	cmp	r3, r5
 8023884:	dcf2      	bgt.n	802386c <_printf_i+0x1e8>
 8023886:	e7eb      	b.n	8023860 <_printf_i+0x1dc>
 8023888:	2500      	movs	r5, #0
 802388a:	f104 0919 	add.w	r9, r4, #25
 802388e:	e7f5      	b.n	802387c <_printf_i+0x1f8>
 8023890:	2b00      	cmp	r3, #0
 8023892:	d1ac      	bne.n	80237ee <_printf_i+0x16a>
 8023894:	7803      	ldrb	r3, [r0, #0]
 8023896:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802389a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802389e:	e76c      	b.n	802377a <_printf_i+0xf6>
 80238a0:	08029bc9 	.word	0x08029bc9
 80238a4:	08029bda 	.word	0x08029bda

080238a8 <_sbrk_r>:
 80238a8:	b538      	push	{r3, r4, r5, lr}
 80238aa:	4c06      	ldr	r4, [pc, #24]	; (80238c4 <_sbrk_r+0x1c>)
 80238ac:	2300      	movs	r3, #0
 80238ae:	4605      	mov	r5, r0
 80238b0:	4608      	mov	r0, r1
 80238b2:	6023      	str	r3, [r4, #0]
 80238b4:	f7de f9de 	bl	8001c74 <_sbrk>
 80238b8:	1c43      	adds	r3, r0, #1
 80238ba:	d102      	bne.n	80238c2 <_sbrk_r+0x1a>
 80238bc:	6823      	ldr	r3, [r4, #0]
 80238be:	b103      	cbz	r3, 80238c2 <_sbrk_r+0x1a>
 80238c0:	602b      	str	r3, [r5, #0]
 80238c2:	bd38      	pop	{r3, r4, r5, pc}
 80238c4:	2000b6d4 	.word	0x2000b6d4

080238c8 <_raise_r>:
 80238c8:	291f      	cmp	r1, #31
 80238ca:	b538      	push	{r3, r4, r5, lr}
 80238cc:	4604      	mov	r4, r0
 80238ce:	460d      	mov	r5, r1
 80238d0:	d904      	bls.n	80238dc <_raise_r+0x14>
 80238d2:	2316      	movs	r3, #22
 80238d4:	6003      	str	r3, [r0, #0]
 80238d6:	f04f 30ff 	mov.w	r0, #4294967295
 80238da:	bd38      	pop	{r3, r4, r5, pc}
 80238dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80238de:	b112      	cbz	r2, 80238e6 <_raise_r+0x1e>
 80238e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80238e4:	b94b      	cbnz	r3, 80238fa <_raise_r+0x32>
 80238e6:	4620      	mov	r0, r4
 80238e8:	f000 f830 	bl	802394c <_getpid_r>
 80238ec:	462a      	mov	r2, r5
 80238ee:	4601      	mov	r1, r0
 80238f0:	4620      	mov	r0, r4
 80238f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80238f6:	f000 b817 	b.w	8023928 <_kill_r>
 80238fa:	2b01      	cmp	r3, #1
 80238fc:	d00a      	beq.n	8023914 <_raise_r+0x4c>
 80238fe:	1c59      	adds	r1, r3, #1
 8023900:	d103      	bne.n	802390a <_raise_r+0x42>
 8023902:	2316      	movs	r3, #22
 8023904:	6003      	str	r3, [r0, #0]
 8023906:	2001      	movs	r0, #1
 8023908:	e7e7      	b.n	80238da <_raise_r+0x12>
 802390a:	2400      	movs	r4, #0
 802390c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023910:	4628      	mov	r0, r5
 8023912:	4798      	blx	r3
 8023914:	2000      	movs	r0, #0
 8023916:	e7e0      	b.n	80238da <_raise_r+0x12>

08023918 <raise>:
 8023918:	4b02      	ldr	r3, [pc, #8]	; (8023924 <raise+0xc>)
 802391a:	4601      	mov	r1, r0
 802391c:	6818      	ldr	r0, [r3, #0]
 802391e:	f7ff bfd3 	b.w	80238c8 <_raise_r>
 8023922:	bf00      	nop
 8023924:	200000a8 	.word	0x200000a8

08023928 <_kill_r>:
 8023928:	b538      	push	{r3, r4, r5, lr}
 802392a:	4c07      	ldr	r4, [pc, #28]	; (8023948 <_kill_r+0x20>)
 802392c:	2300      	movs	r3, #0
 802392e:	4605      	mov	r5, r0
 8023930:	4608      	mov	r0, r1
 8023932:	4611      	mov	r1, r2
 8023934:	6023      	str	r3, [r4, #0]
 8023936:	f7de f915 	bl	8001b64 <_kill>
 802393a:	1c43      	adds	r3, r0, #1
 802393c:	d102      	bne.n	8023944 <_kill_r+0x1c>
 802393e:	6823      	ldr	r3, [r4, #0]
 8023940:	b103      	cbz	r3, 8023944 <_kill_r+0x1c>
 8023942:	602b      	str	r3, [r5, #0]
 8023944:	bd38      	pop	{r3, r4, r5, pc}
 8023946:	bf00      	nop
 8023948:	2000b6d4 	.word	0x2000b6d4

0802394c <_getpid_r>:
 802394c:	f7de b902 	b.w	8001b54 <_getpid>

08023950 <__swbuf_r>:
 8023950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023952:	460e      	mov	r6, r1
 8023954:	4614      	mov	r4, r2
 8023956:	4605      	mov	r5, r0
 8023958:	b118      	cbz	r0, 8023962 <__swbuf_r+0x12>
 802395a:	6983      	ldr	r3, [r0, #24]
 802395c:	b90b      	cbnz	r3, 8023962 <__swbuf_r+0x12>
 802395e:	f000 fa0b 	bl	8023d78 <__sinit>
 8023962:	4b21      	ldr	r3, [pc, #132]	; (80239e8 <__swbuf_r+0x98>)
 8023964:	429c      	cmp	r4, r3
 8023966:	d12a      	bne.n	80239be <__swbuf_r+0x6e>
 8023968:	686c      	ldr	r4, [r5, #4]
 802396a:	69a3      	ldr	r3, [r4, #24]
 802396c:	60a3      	str	r3, [r4, #8]
 802396e:	89a3      	ldrh	r3, [r4, #12]
 8023970:	071a      	lsls	r2, r3, #28
 8023972:	d52e      	bpl.n	80239d2 <__swbuf_r+0x82>
 8023974:	6923      	ldr	r3, [r4, #16]
 8023976:	b363      	cbz	r3, 80239d2 <__swbuf_r+0x82>
 8023978:	6923      	ldr	r3, [r4, #16]
 802397a:	6820      	ldr	r0, [r4, #0]
 802397c:	1ac0      	subs	r0, r0, r3
 802397e:	6963      	ldr	r3, [r4, #20]
 8023980:	b2f6      	uxtb	r6, r6
 8023982:	4283      	cmp	r3, r0
 8023984:	4637      	mov	r7, r6
 8023986:	dc04      	bgt.n	8023992 <__swbuf_r+0x42>
 8023988:	4621      	mov	r1, r4
 802398a:	4628      	mov	r0, r5
 802398c:	f000 f98a 	bl	8023ca4 <_fflush_r>
 8023990:	bb28      	cbnz	r0, 80239de <__swbuf_r+0x8e>
 8023992:	68a3      	ldr	r3, [r4, #8]
 8023994:	3b01      	subs	r3, #1
 8023996:	60a3      	str	r3, [r4, #8]
 8023998:	6823      	ldr	r3, [r4, #0]
 802399a:	1c5a      	adds	r2, r3, #1
 802399c:	6022      	str	r2, [r4, #0]
 802399e:	701e      	strb	r6, [r3, #0]
 80239a0:	6963      	ldr	r3, [r4, #20]
 80239a2:	3001      	adds	r0, #1
 80239a4:	4283      	cmp	r3, r0
 80239a6:	d004      	beq.n	80239b2 <__swbuf_r+0x62>
 80239a8:	89a3      	ldrh	r3, [r4, #12]
 80239aa:	07db      	lsls	r3, r3, #31
 80239ac:	d519      	bpl.n	80239e2 <__swbuf_r+0x92>
 80239ae:	2e0a      	cmp	r6, #10
 80239b0:	d117      	bne.n	80239e2 <__swbuf_r+0x92>
 80239b2:	4621      	mov	r1, r4
 80239b4:	4628      	mov	r0, r5
 80239b6:	f000 f975 	bl	8023ca4 <_fflush_r>
 80239ba:	b190      	cbz	r0, 80239e2 <__swbuf_r+0x92>
 80239bc:	e00f      	b.n	80239de <__swbuf_r+0x8e>
 80239be:	4b0b      	ldr	r3, [pc, #44]	; (80239ec <__swbuf_r+0x9c>)
 80239c0:	429c      	cmp	r4, r3
 80239c2:	d101      	bne.n	80239c8 <__swbuf_r+0x78>
 80239c4:	68ac      	ldr	r4, [r5, #8]
 80239c6:	e7d0      	b.n	802396a <__swbuf_r+0x1a>
 80239c8:	4b09      	ldr	r3, [pc, #36]	; (80239f0 <__swbuf_r+0xa0>)
 80239ca:	429c      	cmp	r4, r3
 80239cc:	bf08      	it	eq
 80239ce:	68ec      	ldreq	r4, [r5, #12]
 80239d0:	e7cb      	b.n	802396a <__swbuf_r+0x1a>
 80239d2:	4621      	mov	r1, r4
 80239d4:	4628      	mov	r0, r5
 80239d6:	f000 f80d 	bl	80239f4 <__swsetup_r>
 80239da:	2800      	cmp	r0, #0
 80239dc:	d0cc      	beq.n	8023978 <__swbuf_r+0x28>
 80239de:	f04f 37ff 	mov.w	r7, #4294967295
 80239e2:	4638      	mov	r0, r7
 80239e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80239e6:	bf00      	nop
 80239e8:	08029c10 	.word	0x08029c10
 80239ec:	08029c30 	.word	0x08029c30
 80239f0:	08029bf0 	.word	0x08029bf0

080239f4 <__swsetup_r>:
 80239f4:	4b32      	ldr	r3, [pc, #200]	; (8023ac0 <__swsetup_r+0xcc>)
 80239f6:	b570      	push	{r4, r5, r6, lr}
 80239f8:	681d      	ldr	r5, [r3, #0]
 80239fa:	4606      	mov	r6, r0
 80239fc:	460c      	mov	r4, r1
 80239fe:	b125      	cbz	r5, 8023a0a <__swsetup_r+0x16>
 8023a00:	69ab      	ldr	r3, [r5, #24]
 8023a02:	b913      	cbnz	r3, 8023a0a <__swsetup_r+0x16>
 8023a04:	4628      	mov	r0, r5
 8023a06:	f000 f9b7 	bl	8023d78 <__sinit>
 8023a0a:	4b2e      	ldr	r3, [pc, #184]	; (8023ac4 <__swsetup_r+0xd0>)
 8023a0c:	429c      	cmp	r4, r3
 8023a0e:	d10f      	bne.n	8023a30 <__swsetup_r+0x3c>
 8023a10:	686c      	ldr	r4, [r5, #4]
 8023a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023a16:	b29a      	uxth	r2, r3
 8023a18:	0715      	lsls	r5, r2, #28
 8023a1a:	d42c      	bmi.n	8023a76 <__swsetup_r+0x82>
 8023a1c:	06d0      	lsls	r0, r2, #27
 8023a1e:	d411      	bmi.n	8023a44 <__swsetup_r+0x50>
 8023a20:	2209      	movs	r2, #9
 8023a22:	6032      	str	r2, [r6, #0]
 8023a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023a28:	81a3      	strh	r3, [r4, #12]
 8023a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8023a2e:	e03e      	b.n	8023aae <__swsetup_r+0xba>
 8023a30:	4b25      	ldr	r3, [pc, #148]	; (8023ac8 <__swsetup_r+0xd4>)
 8023a32:	429c      	cmp	r4, r3
 8023a34:	d101      	bne.n	8023a3a <__swsetup_r+0x46>
 8023a36:	68ac      	ldr	r4, [r5, #8]
 8023a38:	e7eb      	b.n	8023a12 <__swsetup_r+0x1e>
 8023a3a:	4b24      	ldr	r3, [pc, #144]	; (8023acc <__swsetup_r+0xd8>)
 8023a3c:	429c      	cmp	r4, r3
 8023a3e:	bf08      	it	eq
 8023a40:	68ec      	ldreq	r4, [r5, #12]
 8023a42:	e7e6      	b.n	8023a12 <__swsetup_r+0x1e>
 8023a44:	0751      	lsls	r1, r2, #29
 8023a46:	d512      	bpl.n	8023a6e <__swsetup_r+0x7a>
 8023a48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023a4a:	b141      	cbz	r1, 8023a5e <__swsetup_r+0x6a>
 8023a4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023a50:	4299      	cmp	r1, r3
 8023a52:	d002      	beq.n	8023a5a <__swsetup_r+0x66>
 8023a54:	4630      	mov	r0, r6
 8023a56:	f7ff fbb7 	bl	80231c8 <_free_r>
 8023a5a:	2300      	movs	r3, #0
 8023a5c:	6363      	str	r3, [r4, #52]	; 0x34
 8023a5e:	89a3      	ldrh	r3, [r4, #12]
 8023a60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8023a64:	81a3      	strh	r3, [r4, #12]
 8023a66:	2300      	movs	r3, #0
 8023a68:	6063      	str	r3, [r4, #4]
 8023a6a:	6923      	ldr	r3, [r4, #16]
 8023a6c:	6023      	str	r3, [r4, #0]
 8023a6e:	89a3      	ldrh	r3, [r4, #12]
 8023a70:	f043 0308 	orr.w	r3, r3, #8
 8023a74:	81a3      	strh	r3, [r4, #12]
 8023a76:	6923      	ldr	r3, [r4, #16]
 8023a78:	b94b      	cbnz	r3, 8023a8e <__swsetup_r+0x9a>
 8023a7a:	89a3      	ldrh	r3, [r4, #12]
 8023a7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023a84:	d003      	beq.n	8023a8e <__swsetup_r+0x9a>
 8023a86:	4621      	mov	r1, r4
 8023a88:	4630      	mov	r0, r6
 8023a8a:	f000 fa23 	bl	8023ed4 <__smakebuf_r>
 8023a8e:	89a2      	ldrh	r2, [r4, #12]
 8023a90:	f012 0301 	ands.w	r3, r2, #1
 8023a94:	d00c      	beq.n	8023ab0 <__swsetup_r+0xbc>
 8023a96:	2300      	movs	r3, #0
 8023a98:	60a3      	str	r3, [r4, #8]
 8023a9a:	6963      	ldr	r3, [r4, #20]
 8023a9c:	425b      	negs	r3, r3
 8023a9e:	61a3      	str	r3, [r4, #24]
 8023aa0:	6923      	ldr	r3, [r4, #16]
 8023aa2:	b953      	cbnz	r3, 8023aba <__swsetup_r+0xc6>
 8023aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023aa8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8023aac:	d1ba      	bne.n	8023a24 <__swsetup_r+0x30>
 8023aae:	bd70      	pop	{r4, r5, r6, pc}
 8023ab0:	0792      	lsls	r2, r2, #30
 8023ab2:	bf58      	it	pl
 8023ab4:	6963      	ldrpl	r3, [r4, #20]
 8023ab6:	60a3      	str	r3, [r4, #8]
 8023ab8:	e7f2      	b.n	8023aa0 <__swsetup_r+0xac>
 8023aba:	2000      	movs	r0, #0
 8023abc:	e7f7      	b.n	8023aae <__swsetup_r+0xba>
 8023abe:	bf00      	nop
 8023ac0:	200000a8 	.word	0x200000a8
 8023ac4:	08029c10 	.word	0x08029c10
 8023ac8:	08029c30 	.word	0x08029c30
 8023acc:	08029bf0 	.word	0x08029bf0

08023ad0 <__register_exitproc>:
 8023ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023ad4:	4d2c      	ldr	r5, [pc, #176]	; (8023b88 <__register_exitproc+0xb8>)
 8023ad6:	682c      	ldr	r4, [r5, #0]
 8023ad8:	4607      	mov	r7, r0
 8023ada:	460e      	mov	r6, r1
 8023adc:	4691      	mov	r9, r2
 8023ade:	4698      	mov	r8, r3
 8023ae0:	b934      	cbnz	r4, 8023af0 <__register_exitproc+0x20>
 8023ae2:	4b2a      	ldr	r3, [pc, #168]	; (8023b8c <__register_exitproc+0xbc>)
 8023ae4:	4c2a      	ldr	r4, [pc, #168]	; (8023b90 <__register_exitproc+0xc0>)
 8023ae6:	602c      	str	r4, [r5, #0]
 8023ae8:	b113      	cbz	r3, 8023af0 <__register_exitproc+0x20>
 8023aea:	681b      	ldr	r3, [r3, #0]
 8023aec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8023af0:	6863      	ldr	r3, [r4, #4]
 8023af2:	2b1f      	cmp	r3, #31
 8023af4:	dd3d      	ble.n	8023b72 <__register_exitproc+0xa2>
 8023af6:	4b27      	ldr	r3, [pc, #156]	; (8023b94 <__register_exitproc+0xc4>)
 8023af8:	b91b      	cbnz	r3, 8023b02 <__register_exitproc+0x32>
 8023afa:	f04f 30ff 	mov.w	r0, #4294967295
 8023afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023b02:	208c      	movs	r0, #140	; 0x8c
 8023b04:	f7ff fb3c 	bl	8023180 <malloc>
 8023b08:	4604      	mov	r4, r0
 8023b0a:	2800      	cmp	r0, #0
 8023b0c:	d0f5      	beq.n	8023afa <__register_exitproc+0x2a>
 8023b0e:	2300      	movs	r3, #0
 8023b10:	682a      	ldr	r2, [r5, #0]
 8023b12:	6002      	str	r2, [r0, #0]
 8023b14:	6043      	str	r3, [r0, #4]
 8023b16:	6028      	str	r0, [r5, #0]
 8023b18:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8023b1c:	b30f      	cbz	r7, 8023b62 <__register_exitproc+0x92>
 8023b1e:	f44f 7084 	mov.w	r0, #264	; 0x108
 8023b22:	f7ff fb2d 	bl	8023180 <malloc>
 8023b26:	2800      	cmp	r0, #0
 8023b28:	d0e7      	beq.n	8023afa <__register_exitproc+0x2a>
 8023b2a:	2300      	movs	r3, #0
 8023b2c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8023b30:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8023b34:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8023b38:	6862      	ldr	r2, [r4, #4]
 8023b3a:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8023b3e:	2301      	movs	r3, #1
 8023b40:	4093      	lsls	r3, r2
 8023b42:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8023b46:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8023b4a:	431a      	orrs	r2, r3
 8023b4c:	2f02      	cmp	r7, #2
 8023b4e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8023b52:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 8023b56:	bf02      	ittt	eq
 8023b58:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8023b5c:	4313      	orreq	r3, r2
 8023b5e:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8023b62:	6863      	ldr	r3, [r4, #4]
 8023b64:	1c5a      	adds	r2, r3, #1
 8023b66:	3302      	adds	r3, #2
 8023b68:	6062      	str	r2, [r4, #4]
 8023b6a:	2000      	movs	r0, #0
 8023b6c:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8023b70:	e7c5      	b.n	8023afe <__register_exitproc+0x2e>
 8023b72:	2f00      	cmp	r7, #0
 8023b74:	d0f5      	beq.n	8023b62 <__register_exitproc+0x92>
 8023b76:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8023b7a:	2800      	cmp	r0, #0
 8023b7c:	d1dc      	bne.n	8023b38 <__register_exitproc+0x68>
 8023b7e:	4b05      	ldr	r3, [pc, #20]	; (8023b94 <__register_exitproc+0xc4>)
 8023b80:	2b00      	cmp	r3, #0
 8023b82:	d0ba      	beq.n	8023afa <__register_exitproc+0x2a>
 8023b84:	e7cb      	b.n	8023b1e <__register_exitproc+0x4e>
 8023b86:	bf00      	nop
 8023b88:	2000b464 	.word	0x2000b464
 8023b8c:	08029bec 	.word	0x08029bec
 8023b90:	2000b3d8 	.word	0x2000b3d8
 8023b94:	08023181 	.word	0x08023181

08023b98 <__sflush_r>:
 8023b98:	898a      	ldrh	r2, [r1, #12]
 8023b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023b9e:	4605      	mov	r5, r0
 8023ba0:	0710      	lsls	r0, r2, #28
 8023ba2:	460c      	mov	r4, r1
 8023ba4:	d458      	bmi.n	8023c58 <__sflush_r+0xc0>
 8023ba6:	684b      	ldr	r3, [r1, #4]
 8023ba8:	2b00      	cmp	r3, #0
 8023baa:	dc05      	bgt.n	8023bb8 <__sflush_r+0x20>
 8023bac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8023bae:	2b00      	cmp	r3, #0
 8023bb0:	dc02      	bgt.n	8023bb8 <__sflush_r+0x20>
 8023bb2:	2000      	movs	r0, #0
 8023bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023bb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023bba:	2e00      	cmp	r6, #0
 8023bbc:	d0f9      	beq.n	8023bb2 <__sflush_r+0x1a>
 8023bbe:	2300      	movs	r3, #0
 8023bc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023bc4:	682f      	ldr	r7, [r5, #0]
 8023bc6:	6a21      	ldr	r1, [r4, #32]
 8023bc8:	602b      	str	r3, [r5, #0]
 8023bca:	d032      	beq.n	8023c32 <__sflush_r+0x9a>
 8023bcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8023bce:	89a3      	ldrh	r3, [r4, #12]
 8023bd0:	075a      	lsls	r2, r3, #29
 8023bd2:	d505      	bpl.n	8023be0 <__sflush_r+0x48>
 8023bd4:	6863      	ldr	r3, [r4, #4]
 8023bd6:	1ac0      	subs	r0, r0, r3
 8023bd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023bda:	b10b      	cbz	r3, 8023be0 <__sflush_r+0x48>
 8023bdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023bde:	1ac0      	subs	r0, r0, r3
 8023be0:	2300      	movs	r3, #0
 8023be2:	4602      	mov	r2, r0
 8023be4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023be6:	6a21      	ldr	r1, [r4, #32]
 8023be8:	4628      	mov	r0, r5
 8023bea:	47b0      	blx	r6
 8023bec:	1c43      	adds	r3, r0, #1
 8023bee:	89a3      	ldrh	r3, [r4, #12]
 8023bf0:	d106      	bne.n	8023c00 <__sflush_r+0x68>
 8023bf2:	6829      	ldr	r1, [r5, #0]
 8023bf4:	291d      	cmp	r1, #29
 8023bf6:	d848      	bhi.n	8023c8a <__sflush_r+0xf2>
 8023bf8:	4a29      	ldr	r2, [pc, #164]	; (8023ca0 <__sflush_r+0x108>)
 8023bfa:	40ca      	lsrs	r2, r1
 8023bfc:	07d6      	lsls	r6, r2, #31
 8023bfe:	d544      	bpl.n	8023c8a <__sflush_r+0xf2>
 8023c00:	2200      	movs	r2, #0
 8023c02:	6062      	str	r2, [r4, #4]
 8023c04:	04d9      	lsls	r1, r3, #19
 8023c06:	6922      	ldr	r2, [r4, #16]
 8023c08:	6022      	str	r2, [r4, #0]
 8023c0a:	d504      	bpl.n	8023c16 <__sflush_r+0x7e>
 8023c0c:	1c42      	adds	r2, r0, #1
 8023c0e:	d101      	bne.n	8023c14 <__sflush_r+0x7c>
 8023c10:	682b      	ldr	r3, [r5, #0]
 8023c12:	b903      	cbnz	r3, 8023c16 <__sflush_r+0x7e>
 8023c14:	6560      	str	r0, [r4, #84]	; 0x54
 8023c16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023c18:	602f      	str	r7, [r5, #0]
 8023c1a:	2900      	cmp	r1, #0
 8023c1c:	d0c9      	beq.n	8023bb2 <__sflush_r+0x1a>
 8023c1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023c22:	4299      	cmp	r1, r3
 8023c24:	d002      	beq.n	8023c2c <__sflush_r+0x94>
 8023c26:	4628      	mov	r0, r5
 8023c28:	f7ff face 	bl	80231c8 <_free_r>
 8023c2c:	2000      	movs	r0, #0
 8023c2e:	6360      	str	r0, [r4, #52]	; 0x34
 8023c30:	e7c0      	b.n	8023bb4 <__sflush_r+0x1c>
 8023c32:	2301      	movs	r3, #1
 8023c34:	4628      	mov	r0, r5
 8023c36:	47b0      	blx	r6
 8023c38:	1c41      	adds	r1, r0, #1
 8023c3a:	d1c8      	bne.n	8023bce <__sflush_r+0x36>
 8023c3c:	682b      	ldr	r3, [r5, #0]
 8023c3e:	2b00      	cmp	r3, #0
 8023c40:	d0c5      	beq.n	8023bce <__sflush_r+0x36>
 8023c42:	2b1d      	cmp	r3, #29
 8023c44:	d001      	beq.n	8023c4a <__sflush_r+0xb2>
 8023c46:	2b16      	cmp	r3, #22
 8023c48:	d101      	bne.n	8023c4e <__sflush_r+0xb6>
 8023c4a:	602f      	str	r7, [r5, #0]
 8023c4c:	e7b1      	b.n	8023bb2 <__sflush_r+0x1a>
 8023c4e:	89a3      	ldrh	r3, [r4, #12]
 8023c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023c54:	81a3      	strh	r3, [r4, #12]
 8023c56:	e7ad      	b.n	8023bb4 <__sflush_r+0x1c>
 8023c58:	690f      	ldr	r7, [r1, #16]
 8023c5a:	2f00      	cmp	r7, #0
 8023c5c:	d0a9      	beq.n	8023bb2 <__sflush_r+0x1a>
 8023c5e:	0793      	lsls	r3, r2, #30
 8023c60:	680e      	ldr	r6, [r1, #0]
 8023c62:	bf08      	it	eq
 8023c64:	694b      	ldreq	r3, [r1, #20]
 8023c66:	600f      	str	r7, [r1, #0]
 8023c68:	bf18      	it	ne
 8023c6a:	2300      	movne	r3, #0
 8023c6c:	eba6 0807 	sub.w	r8, r6, r7
 8023c70:	608b      	str	r3, [r1, #8]
 8023c72:	f1b8 0f00 	cmp.w	r8, #0
 8023c76:	dd9c      	ble.n	8023bb2 <__sflush_r+0x1a>
 8023c78:	4643      	mov	r3, r8
 8023c7a:	463a      	mov	r2, r7
 8023c7c:	6a21      	ldr	r1, [r4, #32]
 8023c7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023c80:	4628      	mov	r0, r5
 8023c82:	47b0      	blx	r6
 8023c84:	2800      	cmp	r0, #0
 8023c86:	dc06      	bgt.n	8023c96 <__sflush_r+0xfe>
 8023c88:	89a3      	ldrh	r3, [r4, #12]
 8023c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023c8e:	81a3      	strh	r3, [r4, #12]
 8023c90:	f04f 30ff 	mov.w	r0, #4294967295
 8023c94:	e78e      	b.n	8023bb4 <__sflush_r+0x1c>
 8023c96:	4407      	add	r7, r0
 8023c98:	eba8 0800 	sub.w	r8, r8, r0
 8023c9c:	e7e9      	b.n	8023c72 <__sflush_r+0xda>
 8023c9e:	bf00      	nop
 8023ca0:	20400001 	.word	0x20400001

08023ca4 <_fflush_r>:
 8023ca4:	b538      	push	{r3, r4, r5, lr}
 8023ca6:	690b      	ldr	r3, [r1, #16]
 8023ca8:	4605      	mov	r5, r0
 8023caa:	460c      	mov	r4, r1
 8023cac:	b1db      	cbz	r3, 8023ce6 <_fflush_r+0x42>
 8023cae:	b118      	cbz	r0, 8023cb8 <_fflush_r+0x14>
 8023cb0:	6983      	ldr	r3, [r0, #24]
 8023cb2:	b90b      	cbnz	r3, 8023cb8 <_fflush_r+0x14>
 8023cb4:	f000 f860 	bl	8023d78 <__sinit>
 8023cb8:	4b0c      	ldr	r3, [pc, #48]	; (8023cec <_fflush_r+0x48>)
 8023cba:	429c      	cmp	r4, r3
 8023cbc:	d109      	bne.n	8023cd2 <_fflush_r+0x2e>
 8023cbe:	686c      	ldr	r4, [r5, #4]
 8023cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023cc4:	b17b      	cbz	r3, 8023ce6 <_fflush_r+0x42>
 8023cc6:	4621      	mov	r1, r4
 8023cc8:	4628      	mov	r0, r5
 8023cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023cce:	f7ff bf63 	b.w	8023b98 <__sflush_r>
 8023cd2:	4b07      	ldr	r3, [pc, #28]	; (8023cf0 <_fflush_r+0x4c>)
 8023cd4:	429c      	cmp	r4, r3
 8023cd6:	d101      	bne.n	8023cdc <_fflush_r+0x38>
 8023cd8:	68ac      	ldr	r4, [r5, #8]
 8023cda:	e7f1      	b.n	8023cc0 <_fflush_r+0x1c>
 8023cdc:	4b05      	ldr	r3, [pc, #20]	; (8023cf4 <_fflush_r+0x50>)
 8023cde:	429c      	cmp	r4, r3
 8023ce0:	bf08      	it	eq
 8023ce2:	68ec      	ldreq	r4, [r5, #12]
 8023ce4:	e7ec      	b.n	8023cc0 <_fflush_r+0x1c>
 8023ce6:	2000      	movs	r0, #0
 8023ce8:	bd38      	pop	{r3, r4, r5, pc}
 8023cea:	bf00      	nop
 8023cec:	08029c10 	.word	0x08029c10
 8023cf0:	08029c30 	.word	0x08029c30
 8023cf4:	08029bf0 	.word	0x08029bf0

08023cf8 <std>:
 8023cf8:	2300      	movs	r3, #0
 8023cfa:	b510      	push	{r4, lr}
 8023cfc:	4604      	mov	r4, r0
 8023cfe:	e9c0 3300 	strd	r3, r3, [r0]
 8023d02:	6083      	str	r3, [r0, #8]
 8023d04:	8181      	strh	r1, [r0, #12]
 8023d06:	6643      	str	r3, [r0, #100]	; 0x64
 8023d08:	81c2      	strh	r2, [r0, #14]
 8023d0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023d0e:	6183      	str	r3, [r0, #24]
 8023d10:	4619      	mov	r1, r3
 8023d12:	2208      	movs	r2, #8
 8023d14:	305c      	adds	r0, #92	; 0x5c
 8023d16:	f7ff fa4e 	bl	80231b6 <memset>
 8023d1a:	4b05      	ldr	r3, [pc, #20]	; (8023d30 <std+0x38>)
 8023d1c:	6263      	str	r3, [r4, #36]	; 0x24
 8023d1e:	4b05      	ldr	r3, [pc, #20]	; (8023d34 <std+0x3c>)
 8023d20:	62a3      	str	r3, [r4, #40]	; 0x28
 8023d22:	4b05      	ldr	r3, [pc, #20]	; (8023d38 <std+0x40>)
 8023d24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023d26:	4b05      	ldr	r3, [pc, #20]	; (8023d3c <std+0x44>)
 8023d28:	6224      	str	r4, [r4, #32]
 8023d2a:	6323      	str	r3, [r4, #48]	; 0x30
 8023d2c:	bd10      	pop	{r4, pc}
 8023d2e:	bf00      	nop
 8023d30:	08023f59 	.word	0x08023f59
 8023d34:	08023f7b 	.word	0x08023f7b
 8023d38:	08023fb3 	.word	0x08023fb3
 8023d3c:	08023fd7 	.word	0x08023fd7

08023d40 <_cleanup_r>:
 8023d40:	4901      	ldr	r1, [pc, #4]	; (8023d48 <_cleanup_r+0x8>)
 8023d42:	f000 b885 	b.w	8023e50 <_fwalk_reent>
 8023d46:	bf00      	nop
 8023d48:	08023ca5 	.word	0x08023ca5

08023d4c <__sfmoreglue>:
 8023d4c:	b570      	push	{r4, r5, r6, lr}
 8023d4e:	1e4a      	subs	r2, r1, #1
 8023d50:	2568      	movs	r5, #104	; 0x68
 8023d52:	4355      	muls	r5, r2
 8023d54:	460e      	mov	r6, r1
 8023d56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8023d5a:	f7ff fa83 	bl	8023264 <_malloc_r>
 8023d5e:	4604      	mov	r4, r0
 8023d60:	b140      	cbz	r0, 8023d74 <__sfmoreglue+0x28>
 8023d62:	2100      	movs	r1, #0
 8023d64:	e9c0 1600 	strd	r1, r6, [r0]
 8023d68:	300c      	adds	r0, #12
 8023d6a:	60a0      	str	r0, [r4, #8]
 8023d6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023d70:	f7ff fa21 	bl	80231b6 <memset>
 8023d74:	4620      	mov	r0, r4
 8023d76:	bd70      	pop	{r4, r5, r6, pc}

08023d78 <__sinit>:
 8023d78:	6983      	ldr	r3, [r0, #24]
 8023d7a:	b510      	push	{r4, lr}
 8023d7c:	4604      	mov	r4, r0
 8023d7e:	bb33      	cbnz	r3, 8023dce <__sinit+0x56>
 8023d80:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8023d84:	6503      	str	r3, [r0, #80]	; 0x50
 8023d86:	4b12      	ldr	r3, [pc, #72]	; (8023dd0 <__sinit+0x58>)
 8023d88:	4a12      	ldr	r2, [pc, #72]	; (8023dd4 <__sinit+0x5c>)
 8023d8a:	681b      	ldr	r3, [r3, #0]
 8023d8c:	6282      	str	r2, [r0, #40]	; 0x28
 8023d8e:	4298      	cmp	r0, r3
 8023d90:	bf04      	itt	eq
 8023d92:	2301      	moveq	r3, #1
 8023d94:	6183      	streq	r3, [r0, #24]
 8023d96:	f000 f81f 	bl	8023dd8 <__sfp>
 8023d9a:	6060      	str	r0, [r4, #4]
 8023d9c:	4620      	mov	r0, r4
 8023d9e:	f000 f81b 	bl	8023dd8 <__sfp>
 8023da2:	60a0      	str	r0, [r4, #8]
 8023da4:	4620      	mov	r0, r4
 8023da6:	f000 f817 	bl	8023dd8 <__sfp>
 8023daa:	2200      	movs	r2, #0
 8023dac:	60e0      	str	r0, [r4, #12]
 8023dae:	2104      	movs	r1, #4
 8023db0:	6860      	ldr	r0, [r4, #4]
 8023db2:	f7ff ffa1 	bl	8023cf8 <std>
 8023db6:	2201      	movs	r2, #1
 8023db8:	2109      	movs	r1, #9
 8023dba:	68a0      	ldr	r0, [r4, #8]
 8023dbc:	f7ff ff9c 	bl	8023cf8 <std>
 8023dc0:	2202      	movs	r2, #2
 8023dc2:	2112      	movs	r1, #18
 8023dc4:	68e0      	ldr	r0, [r4, #12]
 8023dc6:	f7ff ff97 	bl	8023cf8 <std>
 8023dca:	2301      	movs	r3, #1
 8023dcc:	61a3      	str	r3, [r4, #24]
 8023dce:	bd10      	pop	{r4, pc}
 8023dd0:	08029bb4 	.word	0x08029bb4
 8023dd4:	08023d41 	.word	0x08023d41

08023dd8 <__sfp>:
 8023dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023dda:	4b1b      	ldr	r3, [pc, #108]	; (8023e48 <__sfp+0x70>)
 8023ddc:	681e      	ldr	r6, [r3, #0]
 8023dde:	69b3      	ldr	r3, [r6, #24]
 8023de0:	4607      	mov	r7, r0
 8023de2:	b913      	cbnz	r3, 8023dea <__sfp+0x12>
 8023de4:	4630      	mov	r0, r6
 8023de6:	f7ff ffc7 	bl	8023d78 <__sinit>
 8023dea:	3648      	adds	r6, #72	; 0x48
 8023dec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023df0:	3b01      	subs	r3, #1
 8023df2:	d503      	bpl.n	8023dfc <__sfp+0x24>
 8023df4:	6833      	ldr	r3, [r6, #0]
 8023df6:	b133      	cbz	r3, 8023e06 <__sfp+0x2e>
 8023df8:	6836      	ldr	r6, [r6, #0]
 8023dfa:	e7f7      	b.n	8023dec <__sfp+0x14>
 8023dfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023e00:	b16d      	cbz	r5, 8023e1e <__sfp+0x46>
 8023e02:	3468      	adds	r4, #104	; 0x68
 8023e04:	e7f4      	b.n	8023df0 <__sfp+0x18>
 8023e06:	2104      	movs	r1, #4
 8023e08:	4638      	mov	r0, r7
 8023e0a:	f7ff ff9f 	bl	8023d4c <__sfmoreglue>
 8023e0e:	6030      	str	r0, [r6, #0]
 8023e10:	2800      	cmp	r0, #0
 8023e12:	d1f1      	bne.n	8023df8 <__sfp+0x20>
 8023e14:	230c      	movs	r3, #12
 8023e16:	603b      	str	r3, [r7, #0]
 8023e18:	4604      	mov	r4, r0
 8023e1a:	4620      	mov	r0, r4
 8023e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023e1e:	4b0b      	ldr	r3, [pc, #44]	; (8023e4c <__sfp+0x74>)
 8023e20:	6665      	str	r5, [r4, #100]	; 0x64
 8023e22:	e9c4 5500 	strd	r5, r5, [r4]
 8023e26:	60a5      	str	r5, [r4, #8]
 8023e28:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8023e2c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8023e30:	2208      	movs	r2, #8
 8023e32:	4629      	mov	r1, r5
 8023e34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023e38:	f7ff f9bd 	bl	80231b6 <memset>
 8023e3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023e40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023e44:	e7e9      	b.n	8023e1a <__sfp+0x42>
 8023e46:	bf00      	nop
 8023e48:	08029bb4 	.word	0x08029bb4
 8023e4c:	ffff0001 	.word	0xffff0001

08023e50 <_fwalk_reent>:
 8023e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023e54:	4680      	mov	r8, r0
 8023e56:	4689      	mov	r9, r1
 8023e58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8023e5c:	2600      	movs	r6, #0
 8023e5e:	b914      	cbnz	r4, 8023e66 <_fwalk_reent+0x16>
 8023e60:	4630      	mov	r0, r6
 8023e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023e66:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8023e6a:	3f01      	subs	r7, #1
 8023e6c:	d501      	bpl.n	8023e72 <_fwalk_reent+0x22>
 8023e6e:	6824      	ldr	r4, [r4, #0]
 8023e70:	e7f5      	b.n	8023e5e <_fwalk_reent+0xe>
 8023e72:	89ab      	ldrh	r3, [r5, #12]
 8023e74:	2b01      	cmp	r3, #1
 8023e76:	d907      	bls.n	8023e88 <_fwalk_reent+0x38>
 8023e78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023e7c:	3301      	adds	r3, #1
 8023e7e:	d003      	beq.n	8023e88 <_fwalk_reent+0x38>
 8023e80:	4629      	mov	r1, r5
 8023e82:	4640      	mov	r0, r8
 8023e84:	47c8      	blx	r9
 8023e86:	4306      	orrs	r6, r0
 8023e88:	3568      	adds	r5, #104	; 0x68
 8023e8a:	e7ee      	b.n	8023e6a <_fwalk_reent+0x1a>

08023e8c <__swhatbuf_r>:
 8023e8c:	b570      	push	{r4, r5, r6, lr}
 8023e8e:	460e      	mov	r6, r1
 8023e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023e94:	2900      	cmp	r1, #0
 8023e96:	b096      	sub	sp, #88	; 0x58
 8023e98:	4614      	mov	r4, r2
 8023e9a:	461d      	mov	r5, r3
 8023e9c:	da07      	bge.n	8023eae <__swhatbuf_r+0x22>
 8023e9e:	2300      	movs	r3, #0
 8023ea0:	602b      	str	r3, [r5, #0]
 8023ea2:	89b3      	ldrh	r3, [r6, #12]
 8023ea4:	061a      	lsls	r2, r3, #24
 8023ea6:	d410      	bmi.n	8023eca <__swhatbuf_r+0x3e>
 8023ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023eac:	e00e      	b.n	8023ecc <__swhatbuf_r+0x40>
 8023eae:	466a      	mov	r2, sp
 8023eb0:	f000 f8b8 	bl	8024024 <_fstat_r>
 8023eb4:	2800      	cmp	r0, #0
 8023eb6:	dbf2      	blt.n	8023e9e <__swhatbuf_r+0x12>
 8023eb8:	9a01      	ldr	r2, [sp, #4]
 8023eba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8023ebe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8023ec2:	425a      	negs	r2, r3
 8023ec4:	415a      	adcs	r2, r3
 8023ec6:	602a      	str	r2, [r5, #0]
 8023ec8:	e7ee      	b.n	8023ea8 <__swhatbuf_r+0x1c>
 8023eca:	2340      	movs	r3, #64	; 0x40
 8023ecc:	2000      	movs	r0, #0
 8023ece:	6023      	str	r3, [r4, #0]
 8023ed0:	b016      	add	sp, #88	; 0x58
 8023ed2:	bd70      	pop	{r4, r5, r6, pc}

08023ed4 <__smakebuf_r>:
 8023ed4:	898b      	ldrh	r3, [r1, #12]
 8023ed6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023ed8:	079d      	lsls	r5, r3, #30
 8023eda:	4606      	mov	r6, r0
 8023edc:	460c      	mov	r4, r1
 8023ede:	d507      	bpl.n	8023ef0 <__smakebuf_r+0x1c>
 8023ee0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023ee4:	6023      	str	r3, [r4, #0]
 8023ee6:	6123      	str	r3, [r4, #16]
 8023ee8:	2301      	movs	r3, #1
 8023eea:	6163      	str	r3, [r4, #20]
 8023eec:	b002      	add	sp, #8
 8023eee:	bd70      	pop	{r4, r5, r6, pc}
 8023ef0:	ab01      	add	r3, sp, #4
 8023ef2:	466a      	mov	r2, sp
 8023ef4:	f7ff ffca 	bl	8023e8c <__swhatbuf_r>
 8023ef8:	9900      	ldr	r1, [sp, #0]
 8023efa:	4605      	mov	r5, r0
 8023efc:	4630      	mov	r0, r6
 8023efe:	f7ff f9b1 	bl	8023264 <_malloc_r>
 8023f02:	b948      	cbnz	r0, 8023f18 <__smakebuf_r+0x44>
 8023f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023f08:	059a      	lsls	r2, r3, #22
 8023f0a:	d4ef      	bmi.n	8023eec <__smakebuf_r+0x18>
 8023f0c:	f023 0303 	bic.w	r3, r3, #3
 8023f10:	f043 0302 	orr.w	r3, r3, #2
 8023f14:	81a3      	strh	r3, [r4, #12]
 8023f16:	e7e3      	b.n	8023ee0 <__smakebuf_r+0xc>
 8023f18:	4b0d      	ldr	r3, [pc, #52]	; (8023f50 <__smakebuf_r+0x7c>)
 8023f1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8023f1c:	89a3      	ldrh	r3, [r4, #12]
 8023f1e:	6020      	str	r0, [r4, #0]
 8023f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023f24:	81a3      	strh	r3, [r4, #12]
 8023f26:	9b00      	ldr	r3, [sp, #0]
 8023f28:	6163      	str	r3, [r4, #20]
 8023f2a:	9b01      	ldr	r3, [sp, #4]
 8023f2c:	6120      	str	r0, [r4, #16]
 8023f2e:	b15b      	cbz	r3, 8023f48 <__smakebuf_r+0x74>
 8023f30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023f34:	4630      	mov	r0, r6
 8023f36:	f000 f887 	bl	8024048 <_isatty_r>
 8023f3a:	b128      	cbz	r0, 8023f48 <__smakebuf_r+0x74>
 8023f3c:	89a3      	ldrh	r3, [r4, #12]
 8023f3e:	f023 0303 	bic.w	r3, r3, #3
 8023f42:	f043 0301 	orr.w	r3, r3, #1
 8023f46:	81a3      	strh	r3, [r4, #12]
 8023f48:	89a3      	ldrh	r3, [r4, #12]
 8023f4a:	431d      	orrs	r5, r3
 8023f4c:	81a5      	strh	r5, [r4, #12]
 8023f4e:	e7cd      	b.n	8023eec <__smakebuf_r+0x18>
 8023f50:	08023d41 	.word	0x08023d41

08023f54 <__malloc_lock>:
 8023f54:	4770      	bx	lr

08023f56 <__malloc_unlock>:
 8023f56:	4770      	bx	lr

08023f58 <__sread>:
 8023f58:	b510      	push	{r4, lr}
 8023f5a:	460c      	mov	r4, r1
 8023f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023f60:	f000 f894 	bl	802408c <_read_r>
 8023f64:	2800      	cmp	r0, #0
 8023f66:	bfab      	itete	ge
 8023f68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023f6a:	89a3      	ldrhlt	r3, [r4, #12]
 8023f6c:	181b      	addge	r3, r3, r0
 8023f6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023f72:	bfac      	ite	ge
 8023f74:	6563      	strge	r3, [r4, #84]	; 0x54
 8023f76:	81a3      	strhlt	r3, [r4, #12]
 8023f78:	bd10      	pop	{r4, pc}

08023f7a <__swrite>:
 8023f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023f7e:	461f      	mov	r7, r3
 8023f80:	898b      	ldrh	r3, [r1, #12]
 8023f82:	05db      	lsls	r3, r3, #23
 8023f84:	4605      	mov	r5, r0
 8023f86:	460c      	mov	r4, r1
 8023f88:	4616      	mov	r6, r2
 8023f8a:	d505      	bpl.n	8023f98 <__swrite+0x1e>
 8023f8c:	2302      	movs	r3, #2
 8023f8e:	2200      	movs	r2, #0
 8023f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023f94:	f000 f868 	bl	8024068 <_lseek_r>
 8023f98:	89a3      	ldrh	r3, [r4, #12]
 8023f9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023f9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023fa2:	81a3      	strh	r3, [r4, #12]
 8023fa4:	4632      	mov	r2, r6
 8023fa6:	463b      	mov	r3, r7
 8023fa8:	4628      	mov	r0, r5
 8023faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023fae:	f000 b817 	b.w	8023fe0 <_write_r>

08023fb2 <__sseek>:
 8023fb2:	b510      	push	{r4, lr}
 8023fb4:	460c      	mov	r4, r1
 8023fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023fba:	f000 f855 	bl	8024068 <_lseek_r>
 8023fbe:	1c43      	adds	r3, r0, #1
 8023fc0:	89a3      	ldrh	r3, [r4, #12]
 8023fc2:	bf15      	itete	ne
 8023fc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8023fc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023fca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8023fce:	81a3      	strheq	r3, [r4, #12]
 8023fd0:	bf18      	it	ne
 8023fd2:	81a3      	strhne	r3, [r4, #12]
 8023fd4:	bd10      	pop	{r4, pc}

08023fd6 <__sclose>:
 8023fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023fda:	f000 b813 	b.w	8024004 <_close_r>
	...

08023fe0 <_write_r>:
 8023fe0:	b538      	push	{r3, r4, r5, lr}
 8023fe2:	4c07      	ldr	r4, [pc, #28]	; (8024000 <_write_r+0x20>)
 8023fe4:	4605      	mov	r5, r0
 8023fe6:	4608      	mov	r0, r1
 8023fe8:	4611      	mov	r1, r2
 8023fea:	2200      	movs	r2, #0
 8023fec:	6022      	str	r2, [r4, #0]
 8023fee:	461a      	mov	r2, r3
 8023ff0:	f7dd fdef 	bl	8001bd2 <_write>
 8023ff4:	1c43      	adds	r3, r0, #1
 8023ff6:	d102      	bne.n	8023ffe <_write_r+0x1e>
 8023ff8:	6823      	ldr	r3, [r4, #0]
 8023ffa:	b103      	cbz	r3, 8023ffe <_write_r+0x1e>
 8023ffc:	602b      	str	r3, [r5, #0]
 8023ffe:	bd38      	pop	{r3, r4, r5, pc}
 8024000:	2000b6d4 	.word	0x2000b6d4

08024004 <_close_r>:
 8024004:	b538      	push	{r3, r4, r5, lr}
 8024006:	4c06      	ldr	r4, [pc, #24]	; (8024020 <_close_r+0x1c>)
 8024008:	2300      	movs	r3, #0
 802400a:	4605      	mov	r5, r0
 802400c:	4608      	mov	r0, r1
 802400e:	6023      	str	r3, [r4, #0]
 8024010:	f7dd fdfb 	bl	8001c0a <_close>
 8024014:	1c43      	adds	r3, r0, #1
 8024016:	d102      	bne.n	802401e <_close_r+0x1a>
 8024018:	6823      	ldr	r3, [r4, #0]
 802401a:	b103      	cbz	r3, 802401e <_close_r+0x1a>
 802401c:	602b      	str	r3, [r5, #0]
 802401e:	bd38      	pop	{r3, r4, r5, pc}
 8024020:	2000b6d4 	.word	0x2000b6d4

08024024 <_fstat_r>:
 8024024:	b538      	push	{r3, r4, r5, lr}
 8024026:	4c07      	ldr	r4, [pc, #28]	; (8024044 <_fstat_r+0x20>)
 8024028:	2300      	movs	r3, #0
 802402a:	4605      	mov	r5, r0
 802402c:	4608      	mov	r0, r1
 802402e:	4611      	mov	r1, r2
 8024030:	6023      	str	r3, [r4, #0]
 8024032:	f7dd fdf6 	bl	8001c22 <_fstat>
 8024036:	1c43      	adds	r3, r0, #1
 8024038:	d102      	bne.n	8024040 <_fstat_r+0x1c>
 802403a:	6823      	ldr	r3, [r4, #0]
 802403c:	b103      	cbz	r3, 8024040 <_fstat_r+0x1c>
 802403e:	602b      	str	r3, [r5, #0]
 8024040:	bd38      	pop	{r3, r4, r5, pc}
 8024042:	bf00      	nop
 8024044:	2000b6d4 	.word	0x2000b6d4

08024048 <_isatty_r>:
 8024048:	b538      	push	{r3, r4, r5, lr}
 802404a:	4c06      	ldr	r4, [pc, #24]	; (8024064 <_isatty_r+0x1c>)
 802404c:	2300      	movs	r3, #0
 802404e:	4605      	mov	r5, r0
 8024050:	4608      	mov	r0, r1
 8024052:	6023      	str	r3, [r4, #0]
 8024054:	f7dd fdf5 	bl	8001c42 <_isatty>
 8024058:	1c43      	adds	r3, r0, #1
 802405a:	d102      	bne.n	8024062 <_isatty_r+0x1a>
 802405c:	6823      	ldr	r3, [r4, #0]
 802405e:	b103      	cbz	r3, 8024062 <_isatty_r+0x1a>
 8024060:	602b      	str	r3, [r5, #0]
 8024062:	bd38      	pop	{r3, r4, r5, pc}
 8024064:	2000b6d4 	.word	0x2000b6d4

08024068 <_lseek_r>:
 8024068:	b538      	push	{r3, r4, r5, lr}
 802406a:	4c07      	ldr	r4, [pc, #28]	; (8024088 <_lseek_r+0x20>)
 802406c:	4605      	mov	r5, r0
 802406e:	4608      	mov	r0, r1
 8024070:	4611      	mov	r1, r2
 8024072:	2200      	movs	r2, #0
 8024074:	6022      	str	r2, [r4, #0]
 8024076:	461a      	mov	r2, r3
 8024078:	f7dd fdee 	bl	8001c58 <_lseek>
 802407c:	1c43      	adds	r3, r0, #1
 802407e:	d102      	bne.n	8024086 <_lseek_r+0x1e>
 8024080:	6823      	ldr	r3, [r4, #0]
 8024082:	b103      	cbz	r3, 8024086 <_lseek_r+0x1e>
 8024084:	602b      	str	r3, [r5, #0]
 8024086:	bd38      	pop	{r3, r4, r5, pc}
 8024088:	2000b6d4 	.word	0x2000b6d4

0802408c <_read_r>:
 802408c:	b538      	push	{r3, r4, r5, lr}
 802408e:	4c07      	ldr	r4, [pc, #28]	; (80240ac <_read_r+0x20>)
 8024090:	4605      	mov	r5, r0
 8024092:	4608      	mov	r0, r1
 8024094:	4611      	mov	r1, r2
 8024096:	2200      	movs	r2, #0
 8024098:	6022      	str	r2, [r4, #0]
 802409a:	461a      	mov	r2, r3
 802409c:	f7dd fd7c 	bl	8001b98 <_read>
 80240a0:	1c43      	adds	r3, r0, #1
 80240a2:	d102      	bne.n	80240aa <_read_r+0x1e>
 80240a4:	6823      	ldr	r3, [r4, #0]
 80240a6:	b103      	cbz	r3, 80240aa <_read_r+0x1e>
 80240a8:	602b      	str	r3, [r5, #0]
 80240aa:	bd38      	pop	{r3, r4, r5, pc}
 80240ac:	2000b6d4 	.word	0x2000b6d4

080240b0 <_init>:
 80240b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80240b2:	bf00      	nop
 80240b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80240b6:	bc08      	pop	{r3}
 80240b8:	469e      	mov	lr, r3
 80240ba:	4770      	bx	lr

080240bc <_fini>:
 80240bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80240be:	bf00      	nop
 80240c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80240c2:	bc08      	pop	{r3}
 80240c4:	469e      	mov	lr, r3
 80240c6:	4770      	bx	lr
