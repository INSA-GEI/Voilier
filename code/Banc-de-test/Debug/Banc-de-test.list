
Banc-de-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025aac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000636c  08025c7c  08025c7c  00035c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802bfe8  0802bfe8  001fa660  2**0
                  CONTENTS
  4 .ARM          00000008  0802bfe8  0802bfe8  0003bfe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802bff0  0802bff0  001fa660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0802bff0  0802bff0  0003bff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0802c004  0802c004  0003c004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0802c00c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b6f4  2000010c  0802c118  0004010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b800  0802c118  0004b800  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  001fa660  2**0
                  CONTENTS, READONLY
 12 ExtFlashSection 001a3070  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 FontFlashSection 0000731c  901a3070  901a3070  001f3070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 000002d4  901aa38c  901aa38c  001fa38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .debug_info   00093d01  00000000  00000000  001fa690  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00017431  00000000  00000000  0028e391  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000063b0  00000000  00000000  002a57c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00005a58  00000000  00000000  002abb78  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0003b03e  00000000  00000000  002b15d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   000569a8  00000000  00000000  002ec60e  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    00116164  00000000  00000000  00342fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  0045911a  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0001a7f8  00000000  00000000  00459214  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000010c 	.word	0x2000010c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08025c64 	.word	0x08025c64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000110 	.word	0x20000110
 800020c:	08025c64 	.word	0x08025c64

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005ec:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <SCB_EnableICache+0x3c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005fc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <SCB_EnableICache+0x3c>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <SCB_EnableICache+0x3c>)
 8000606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800060c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000610:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800062a:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <SCB_EnableDCache+0x7c>)
 800062c:	2200      	movs	r2, #0
 800062e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000632:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000636:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <SCB_EnableDCache+0x7c>)
 8000638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800063c:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	0b5b      	lsrs	r3, r3, #13
 8000642:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000646:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	08db      	lsrs	r3, r3, #3
 800064c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000650:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	015a      	lsls	r2, r3, #5
 8000656:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800065a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800065c:	68ba      	ldr	r2, [r7, #8]
 800065e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000660:	490f      	ldr	r1, [pc, #60]	; (80006a0 <SCB_EnableDCache+0x7c>)
 8000662:	4313      	orrs	r3, r2
 8000664:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	1e5a      	subs	r2, r3, #1
 800066c:	60ba      	str	r2, [r7, #8]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1ef      	bne.n	8000652 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	1e5a      	subs	r2, r3, #1
 8000676:	60fa      	str	r2, [r7, #12]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1e5      	bne.n	8000648 <SCB_EnableDCache+0x24>
 800067c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <SCB_EnableDCache+0x7c>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <SCB_EnableDCache+0x7c>)
 8000686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800068a:	6153      	str	r3, [r2, #20]
 800068c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000690:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000694:	bf00      	nop
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b5b0      	push	{r4, r5, r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006aa:	f000 fe5b 	bl	8001364 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006ae:	f7ff ff99 	bl	80005e4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006b2:	f7ff ffb7 	bl	8000624 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b6:	f001 ffa1 	bl	80025fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 f827 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006be:	f000 fabb 	bl	8000c38 <MX_GPIO_Init>
  MX_CRC_Init();
 80006c2:	f000 f8c3 	bl	800084c <MX_CRC_Init>
  MX_QUADSPI_Init();
 80006c6:	f000 f9d7 	bl	8000a78 <MX_QUADSPI_Init>
  MX_DMA2D_Init();
 80006ca:	f000 f8e1 	bl	8000890 <MX_DMA2D_Init>
  MX_FMC_Init();
 80006ce:	f000 fa07 	bl	8000ae0 <MX_FMC_Init>
  MX_LTDC_Init();
 80006d2:	f000 f94f 	bl	8000974 <MX_LTDC_Init>
  MX_I2C3_Init();
 80006d6:	f000 f90d 	bl	80008f4 <MX_I2C3_Init>
  MX_TouchGFX_Init();
 80006da:	f008 ffb3 	bl	8009644 <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTaskHand */
  osThreadDef(defaultTaskHand, StartDefaultTask, osPriorityNormal, 0, 4096);
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <main+0x60>)
 80006e0:	1d3c      	adds	r4, r7, #4
 80006e2:	461d      	mov	r5, r3
 80006e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e8:	682b      	ldr	r3, [r5, #0]
 80006ea:	6023      	str	r3, [r4, #0]
  defaultTaskHandHandle = osThreadCreate(osThread(defaultTaskHand), NULL);
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f006 fce4 	bl	80070be <osThreadCreate>
 80006f6:	4602      	mov	r2, r0
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <main+0x64>)
 80006fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006fc:	f006 fcd8 	bl	80070b0 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000700:	e7fe      	b.n	8000700 <main+0x5c>
 8000702:	bf00      	nop
 8000704:	08025c8c 	.word	0x08025c8c
 8000708:	2000b600 	.word	0x2000b600

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b0b4      	sub	sp, #208	; 0xd0
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000716:	2230      	movs	r2, #48	; 0x30
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f024 fb25 	bl	8024d6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	2284      	movs	r2, #132	; 0x84
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f024 fb16 	bl	8024d6a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	4b40      	ldr	r3, [pc, #256]	; (8000840 <SystemClock_Config+0x134>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	4a3f      	ldr	r2, [pc, #252]	; (8000840 <SystemClock_Config+0x134>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000748:	6413      	str	r3, [r2, #64]	; 0x40
 800074a:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <SystemClock_Config+0x134>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000756:	4b3b      	ldr	r3, [pc, #236]	; (8000844 <SystemClock_Config+0x138>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a3a      	ldr	r2, [pc, #232]	; (8000844 <SystemClock_Config+0x138>)
 800075c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000760:	6013      	str	r3, [r2, #0]
 8000762:	4b38      	ldr	r3, [pc, #224]	; (8000844 <SystemClock_Config+0x138>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800076e:	2301      	movs	r3, #1
 8000770:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000778:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077c:	2302      	movs	r3, #2
 800077e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000782:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000786:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800078a:	2319      	movs	r3, #25
 800078c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000790:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000794:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000798:	2302      	movs	r3, #2
 800079a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800079e:	2309      	movs	r3, #9
 80007a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f005 f815 	bl	80057d8 <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80007b4:	f000 fe30 	bl	8001418 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007b8:	f004 fa62 	bl	8004c80 <HAL_PWREx_EnableOverDrive>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007c2:	f000 fe29 	bl	8001418 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c6:	230f      	movs	r3, #15
 80007c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007cc:	2302      	movs	r3, #2
 80007ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80007e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007ec:	2106      	movs	r1, #6
 80007ee:	4618      	mov	r0, r3
 80007f0:	f005 fa62 	bl	8005cb8 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80007fa:	f000 fe0d 	bl	8001418 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_I2C3;
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <SystemClock_Config+0x13c>)
 8000800:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000802:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000806:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000808:	2305      	movs	r3, #5
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000810:	2303      	movs	r3, #3
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000814:	2301      	movs	r3, #1
 8000816:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000818:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800081c:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800081e:	2300      	movs	r3, #0
 8000820:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000822:	f107 0308 	add.w	r3, r7, #8
 8000826:	4618      	mov	r0, r3
 8000828:	f005 fc32 	bl	8006090 <HAL_RCCEx_PeriphCLKConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x12a>
  {
    Error_Handler();
 8000832:	f000 fdf1 	bl	8001418 <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	37d0      	adds	r7, #208	; 0xd0
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000
 8000848:	00010008 	.word	0x00010008

0800084c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000850:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <MX_CRC_Init+0x3c>)
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <MX_CRC_Init+0x40>)
 8000854:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_CRC_Init+0x3c>)
 8000858:	2200      	movs	r2, #0
 800085a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_CRC_Init+0x3c>)
 800085e:	2200      	movs	r2, #0
 8000860:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_CRC_Init+0x3c>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_CRC_Init+0x3c>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_CRC_Init+0x3c>)
 8000870:	2201      	movs	r2, #1
 8000872:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_CRC_Init+0x3c>)
 8000876:	f002 f8a9 	bl	80029cc <HAL_CRC_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000880:	f000 fdca 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	2000b5dc 	.word	0x2000b5dc
 800088c:	40023000 	.word	0x40023000

08000890 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_DMA2D_Init+0x5c>)
 8000896:	4a16      	ldr	r2, [pc, #88]	; (80008f0 <MX_DMA2D_Init+0x60>)
 8000898:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_DMA2D_Init+0x5c>)
 800089c:	2200      	movs	r2, #0
 800089e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_DMA2D_Init+0x5c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_DMA2D_Init+0x5c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_DMA2D_Init+0x5c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_DMA2D_Init+0x5c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_DMA2D_Init+0x5c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_DMA2D_Init+0x5c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008c4:	4809      	ldr	r0, [pc, #36]	; (80008ec <MX_DMA2D_Init+0x5c>)
 80008c6:	f002 f9db 	bl	8002c80 <HAL_DMA2D_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008d0:	f000 fda2 	bl	8001418 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008d4:	2101      	movs	r1, #1
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_DMA2D_Init+0x5c>)
 80008d8:	f002 fc9c 	bl	8003214 <HAL_DMA2D_ConfigLayer>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008e2:	f000 fd99 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000b6ac 	.word	0x2000b6ac
 80008f0:	4002b000 	.word	0x4002b000

080008f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <MX_I2C3_Init+0x74>)
 80008fa:	4a1c      	ldr	r2, [pc, #112]	; (800096c <MX_I2C3_Init+0x78>)
 80008fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_I2C3_Init+0x74>)
 8000900:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <MX_I2C3_Init+0x7c>)
 8000902:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_I2C3_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_I2C3_Init+0x74>)
 800090c:	2201      	movs	r2, #1
 800090e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_I2C3_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_I2C3_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_I2C3_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_I2C3_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_I2C3_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800092e:	480e      	ldr	r0, [pc, #56]	; (8000968 <MX_I2C3_Init+0x74>)
 8000930:	f003 f86c 	bl	8003a0c <HAL_I2C_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800093a:	f000 fd6d 	bl	8001418 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800093e:	2100      	movs	r1, #0
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <MX_I2C3_Init+0x74>)
 8000942:	f003 fd6d 	bl	8004420 <HAL_I2CEx_ConfigAnalogFilter>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800094c:	f000 fd64 	bl	8001418 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000950:	2100      	movs	r1, #0
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_I2C3_Init+0x74>)
 8000954:	f003 fdaf 	bl	80044b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800095e:	f000 fd5b 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000b590 	.word	0x2000b590
 800096c:	40005c00 	.word	0x40005c00
 8000970:	00c0eaff 	.word	0x00c0eaff

08000974 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08e      	sub	sp, #56	; 0x38
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2234      	movs	r2, #52	; 0x34
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f024 f9f2 	bl	8024d6a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000986:	4b3a      	ldr	r3, [pc, #232]	; (8000a70 <MX_LTDC_Init+0xfc>)
 8000988:	4a3a      	ldr	r2, [pc, #232]	; (8000a74 <MX_LTDC_Init+0x100>)
 800098a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800098c:	4b38      	ldr	r3, [pc, #224]	; (8000a70 <MX_LTDC_Init+0xfc>)
 800098e:	2200      	movs	r2, #0
 8000990:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000992:	4b37      	ldr	r3, [pc, #220]	; (8000a70 <MX_LTDC_Init+0xfc>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000998:	4b35      	ldr	r3, [pc, #212]	; (8000a70 <MX_LTDC_Init+0xfc>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800099e:	4b34      	ldr	r3, [pc, #208]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80009a4:	4b32      	ldr	r3, [pc, #200]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009a6:	2228      	movs	r2, #40	; 0x28
 80009a8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80009aa:	4b31      	ldr	r3, [pc, #196]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009ac:	2209      	movs	r2, #9
 80009ae:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80009b0:	4b2f      	ldr	r3, [pc, #188]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009b2:	2235      	movs	r2, #53	; 0x35
 80009b4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80009b6:	4b2e      	ldr	r3, [pc, #184]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009b8:	220b      	movs	r2, #11
 80009ba:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80009bc:	4b2c      	ldr	r3, [pc, #176]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009be:	f240 2215 	movw	r2, #533	; 0x215
 80009c2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80009c4:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009c6:	f240 121b 	movw	r2, #283	; 0x11b
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80009cc:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009ce:	f240 2235 	movw	r2, #565	; 0x235
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80009d4:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009d6:	f240 121d 	movw	r2, #285	; 0x11d
 80009da:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80009dc:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009de:	2200      	movs	r2, #0
 80009e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80009e4:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80009ec:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80009f4:	481e      	ldr	r0, [pc, #120]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009f6:	f003 fdab 	bl	8004550 <HAL_LTDC_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000a00:	f000 fd0a 	bl	8001418 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000a08:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a0c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000a12:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a16:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000a1c:	23ff      	movs	r3, #255	; 0xff
 8000a1e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a28:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a2a:	2305      	movs	r3, #5
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000a2e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000a34:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000a3a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a3e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2200      	movs	r2, #0
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_LTDC_Init+0xfc>)
 8000a5a:	f003 ff01 	bl	8004860 <HAL_LTDC_ConfigLayer>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000a64:	f000 fcd8 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	3738      	adds	r7, #56	; 0x38
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	2000b604 	.word	0x2000b604
 8000a74:	40016800 	.word	0x40016800

08000a78 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000a7e:	4a17      	ldr	r2, [pc, #92]	; (8000adc <MX_QUADSPI_Init+0x64>)
 8000a80:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a8e:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000a90:	2210      	movs	r2, #16
 8000a92:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000a94:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000a96:	2218      	movs	r2, #24
 8000a98:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000a9c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000aa0:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ab4:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000ab6:	f004 f933 	bl	8004d20 <HAL_QSPI_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000ac0:	f000 fcaa 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  BSP_QSPI_Init();
 8000ac4:	f001 f942 	bl	8001d4c <BSP_QSPI_Init>

  BSP_QSPI_MemoryMappedMode();
 8000ac8:	f001 f998 	bl	8001dfc <BSP_QSPI_EnableMemoryMappedMode>
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8000acc:	205c      	movs	r0, #92	; 0x5c
 8000ace:	f001 fef7 	bl	80028c0 <HAL_NVIC_DisableIRQ>

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000b720 	.word	0x2000b720
 8000adc:	a0001000 	.word	0xa0001000

08000ae0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
 8000af4:	615a      	str	r2, [r3, #20]
 8000af6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000af8:	4b4c      	ldr	r3, [pc, #304]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000afa:	4a4d      	ldr	r2, [pc, #308]	; (8000c30 <MX_FMC_Init+0x150>)
 8000afc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000afe:	4b4b      	ldr	r3, [pc, #300]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b04:	4b49      	ldr	r3, [pc, #292]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b0a:	4b48      	ldr	r3, [pc, #288]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b10:	4b46      	ldr	r3, [pc, #280]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b12:	2210      	movs	r2, #16
 8000b14:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b16:	4b45      	ldr	r3, [pc, #276]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b18:	2240      	movs	r2, #64	; 0x40
 8000b1a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b1c:	4b43      	ldr	r3, [pc, #268]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b1e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000b22:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b24:	4b41      	ldr	r3, [pc, #260]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b2a:	4b40      	ldr	r3, [pc, #256]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b30:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000b32:	4b3e      	ldr	r3, [pc, #248]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000b3a:	4b3c      	ldr	r3, [pc, #240]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b44:	2307      	movs	r3, #7
 8000b46:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b4c:	2307      	movs	r3, #7
 8000b4e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b50:	2303      	movs	r3, #3
 8000b52:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b54:	2302      	movs	r3, #2
 8000b56:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4832      	ldr	r0, [pc, #200]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b62:	f005 fe83 	bl	800686c <HAL_SDRAM_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b6c:	f000 fc54 	bl	8001418 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
    __IO uint32_t tmpmrd = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000b74:	4b2f      	ldr	r3, [pc, #188]	; (8000c34 <MX_FMC_Init+0x154>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8000b7a:	4b2e      	ldr	r3, [pc, #184]	; (8000c34 <MX_FMC_Init+0x154>)
 8000b7c:	2210      	movs	r2, #16
 8000b7e:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8000b80:	4b2c      	ldr	r3, [pc, #176]	; (8000c34 <MX_FMC_Init+0x154>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8000b86:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <MX_FMC_Init+0x154>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b90:	4928      	ldr	r1, [pc, #160]	; (8000c34 <MX_FMC_Init+0x154>)
 8000b92:	4826      	ldr	r0, [pc, #152]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b94:	f005 fe9e 	bl	80068d4 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f001 fd6b 	bl	8002674 <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000b9e:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <MX_FMC_Init+0x154>)
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000ba4:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <MX_FMC_Init+0x154>)
 8000ba6:	2210      	movs	r2, #16
 8000ba8:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8000baa:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8000bb0:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bba:	491e      	ldr	r1, [pc, #120]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bbc:	481b      	ldr	r0, [pc, #108]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000bbe:	f005 fe89 	bl	80068d4 <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bca:	2210      	movs	r2, #16
 8000bcc:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bd0:	2208      	movs	r2, #8
 8000bd2:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000bda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bde:	4915      	ldr	r1, [pc, #84]	; (8000c34 <MX_FMC_Init+0x154>)
 8000be0:	4812      	ldr	r0, [pc, #72]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000be2:	f005 fe77 	bl	80068d4 <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8000be6:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000bea:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bee:	2204      	movs	r2, #4
 8000bf0:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bf4:	2210      	movs	r2, #16
 8000bf6:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <MX_FMC_Init+0x154>)
 8000c02:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c08:	490a      	ldr	r1, [pc, #40]	; (8000c34 <MX_FMC_Init+0x154>)
 8000c0a:	4808      	ldr	r0, [pc, #32]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000c0c:	f005 fe62 	bl	80068d4 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8000c10:	f240 712b 	movw	r1, #1835	; 0x72b
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000c16:	f005 fe88 	bl	800692a <HAL_SDRAM_ProgramRefreshRate>
    
    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 8000c1a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8000c1e:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c22:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8000c24:	bf00      	nop
 8000c26:	3720      	adds	r7, #32
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	2000b6ec 	.word	0x2000b6ec
 8000c30:	a0000140 	.word	0xa0000140
 8000c34:	20000128 	.word	0x20000128

08000c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b090      	sub	sp, #64	; 0x40
 8000c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c4e:	4bae      	ldr	r3, [pc, #696]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4aad      	ldr	r2, [pc, #692]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c54:	f043 0310 	orr.w	r3, r3, #16
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4bab      	ldr	r3, [pc, #684]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0310 	and.w	r3, r3, #16
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c66:	4ba8      	ldr	r3, [pc, #672]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4aa7      	ldr	r2, [pc, #668]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4ba5      	ldr	r3, [pc, #660]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	4ba2      	ldr	r3, [pc, #648]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4aa1      	ldr	r2, [pc, #644]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b9f      	ldr	r3, [pc, #636]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	623b      	str	r3, [r7, #32]
 8000c94:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c96:	4b9c      	ldr	r3, [pc, #624]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a9b      	ldr	r2, [pc, #620]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c9c:	f043 0308 	orr.w	r3, r3, #8
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b99      	ldr	r3, [pc, #612]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0308 	and.w	r3, r3, #8
 8000caa:	61fb      	str	r3, [r7, #28]
 8000cac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	4b96      	ldr	r3, [pc, #600]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a95      	ldr	r2, [pc, #596]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000cb4:	f043 0304 	orr.w	r3, r3, #4
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b93      	ldr	r3, [pc, #588]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	61bb      	str	r3, [r7, #24]
 8000cc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	4b90      	ldr	r3, [pc, #576]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a8f      	ldr	r2, [pc, #572]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b8d      	ldr	r3, [pc, #564]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000cde:	4b8a      	ldr	r3, [pc, #552]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a89      	ldr	r2, [pc, #548]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000ce4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b87      	ldr	r3, [pc, #540]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cf6:	4b84      	ldr	r3, [pc, #528]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a83      	ldr	r2, [pc, #524]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b81      	ldr	r3, [pc, #516]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d0e:	4b7e      	ldr	r3, [pc, #504]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a7d      	ldr	r2, [pc, #500]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b7b      	ldr	r3, [pc, #492]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d26:	4b78      	ldr	r3, [pc, #480]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a77      	ldr	r2, [pc, #476]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d2c:	f043 0320 	orr.w	r3, r3, #32
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b75      	ldr	r3, [pc, #468]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0320 	and.w	r3, r3, #32
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3e:	4b72      	ldr	r3, [pc, #456]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a71      	ldr	r2, [pc, #452]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b6f      	ldr	r3, [pc, #444]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d56:	2201      	movs	r2, #1
 8000d58:	2120      	movs	r1, #32
 8000d5a:	486c      	ldr	r0, [pc, #432]	; (8000f0c <MX_GPIO_Init+0x2d4>)
 8000d5c:	f002 fe3c 	bl	80039d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	210c      	movs	r1, #12
 8000d64:	486a      	ldr	r0, [pc, #424]	; (8000f10 <MX_GPIO_Init+0x2d8>)
 8000d66:	f002 fe37 	bl	80039d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2108      	movs	r1, #8
 8000d6e:	4869      	ldr	r0, [pc, #420]	; (8000f14 <MX_GPIO_Init+0x2dc>)
 8000d70:	f002 fe32 	bl	80039d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d7a:	4865      	ldr	r0, [pc, #404]	; (8000f10 <MX_GPIO_Init+0x2d8>)
 8000d7c:	f002 fe2c 	bl	80039d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d86:	4864      	ldr	r0, [pc, #400]	; (8000f18 <MX_GPIO_Init+0x2e0>)
 8000d88:	f002 fe26 	bl	80039d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	21c8      	movs	r1, #200	; 0xc8
 8000d90:	4862      	ldr	r0, [pc, #392]	; (8000f1c <MX_GPIO_Init+0x2e4>)
 8000d92:	f002 fe21 	bl	80039d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000d96:	2308      	movs	r3, #8
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da6:	4619      	mov	r1, r3
 8000da8:	485d      	ldr	r0, [pc, #372]	; (8000f20 <MX_GPIO_Init+0x2e8>)
 8000daa:	f002 fb61 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000dae:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dc0:	230b      	movs	r3, #11
 8000dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4854      	ldr	r0, [pc, #336]	; (8000f1c <MX_GPIO_Init+0x2e4>)
 8000dcc:	f002 fb50 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000dd0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd6:	2312      	movs	r3, #18
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000de2:	2304      	movs	r3, #4
 8000de4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dea:	4619      	mov	r1, r3
 8000dec:	484d      	ldr	r0, [pc, #308]	; (8000f24 <MX_GPIO_Init+0x2ec>)
 8000dee:	f002 fb3f 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8000df2:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e04:	230a      	movs	r3, #10
 8000e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4845      	ldr	r0, [pc, #276]	; (8000f24 <MX_GPIO_Init+0x2ec>)
 8000e10:	f002 fb2e 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000e14:	2310      	movs	r3, #16
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e24:	2302      	movs	r3, #2
 8000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	483d      	ldr	r0, [pc, #244]	; (8000f24 <MX_GPIO_Init+0x2ec>)
 8000e30:	f002 fb1e 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000e44:	2308      	movs	r3, #8
 8000e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	482f      	ldr	r0, [pc, #188]	; (8000f0c <MX_GPIO_Init+0x2d4>)
 8000e50:	f002 fb0e 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9 
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8000e54:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e66:	230c      	movs	r3, #12
 8000e68:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e6e:	4619      	mov	r1, r3
 8000e70:	482d      	ldr	r0, [pc, #180]	; (8000f28 <MX_GPIO_Init+0x2f0>)
 8000e72:	f002 fafd 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e90:	4619      	mov	r1, r3
 8000e92:	4826      	ldr	r0, [pc, #152]	; (8000f2c <MX_GPIO_Init+0x2f4>)
 8000e94:	f002 faec 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000e98:	2360      	movs	r3, #96	; 0x60
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ea8:	230d      	movs	r3, #13
 8000eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	481b      	ldr	r0, [pc, #108]	; (8000f20 <MX_GPIO_Init+0x2e8>)
 8000eb4:	f002 fadc 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ec8:	2307      	movs	r3, #7
 8000eca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4814      	ldr	r0, [pc, #80]	; (8000f24 <MX_GPIO_Init+0x2ec>)
 8000ed4:	f002 facc 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eea:	4619      	mov	r1, r3
 8000eec:	4810      	ldr	r0, [pc, #64]	; (8000f30 <MX_GPIO_Init+0x2f8>)
 8000eee:	f002 fabf 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000ef2:	2340      	movs	r3, #64	; 0x40
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_GPIO_Init+0x2fc>)
 8000ef8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000efe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f02:	4619      	mov	r1, r3
 8000f04:	e018      	b.n	8000f38 <MX_GPIO_Init+0x300>
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020c00 	.word	0x40020c00
 8000f10:	40022000 	.word	0x40022000
 8000f14:	40022800 	.word	0x40022800
 8000f18:	40021c00 	.word	0x40021c00
 8000f1c:	40021800 	.word	0x40021800
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40020400 	.word	0x40020400
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	40022400 	.word	0x40022400
 8000f34:	10120000 	.word	0x10120000
 8000f38:	48bb      	ldr	r0, [pc, #748]	; (8001228 <MX_GPIO_Init+0x5f0>)
 8000f3a:	f002 fa99 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000f3e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f50:	230a      	movs	r3, #10
 8000f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f58:	4619      	mov	r1, r3
 8000f5a:	48b4      	ldr	r0, [pc, #720]	; (800122c <MX_GPIO_Init+0x5f4>)
 8000f5c:	f002 fa88 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000f60:	23f0      	movs	r3, #240	; 0xf0
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000f70:	230a      	movs	r3, #10
 8000f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	48ad      	ldr	r0, [pc, #692]	; (8001230 <MX_GPIO_Init+0x5f8>)
 8000f7c:	f002 fa78 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000f80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000f92:	230a      	movs	r3, #10
 8000f94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	48a5      	ldr	r0, [pc, #660]	; (8001234 <MX_GPIO_Init+0x5fc>)
 8000f9e:	f002 fa67 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fa2:	2320      	movs	r3, #32
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	489b      	ldr	r0, [pc, #620]	; (8001228 <MX_GPIO_Init+0x5f0>)
 8000fba:	f002 fa59 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000fbe:	2308      	movs	r3, #8
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000fce:	230d      	movs	r3, #13
 8000fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4893      	ldr	r0, [pc, #588]	; (8001228 <MX_GPIO_Init+0x5f0>)
 8000fda:	f002 fa49 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000fde:	f241 030c 	movw	r3, #4108	; 0x100c
 8000fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ff0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	488e      	ldr	r0, [pc, #568]	; (8001230 <MX_GPIO_Init+0x5f8>)
 8000ff8:	f002 fa3a 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000ffc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001002:	2300      	movs	r3, #0
 8001004:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800100e:	4619      	mov	r1, r3
 8001010:	4889      	ldr	r0, [pc, #548]	; (8001238 <MX_GPIO_Init+0x600>)
 8001012:	f002 fa2d 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001016:	2308      	movs	r3, #8
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2301      	movs	r3, #1
 800101c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800102a:	4619      	mov	r1, r3
 800102c:	4883      	ldr	r0, [pc, #524]	; (800123c <MX_GPIO_Init+0x604>)
 800102e:	f002 fa1f 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001032:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001044:	230d      	movs	r3, #13
 8001046:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001048:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800104c:	4619      	mov	r1, r3
 800104e:	4879      	ldr	r0, [pc, #484]	; (8001234 <MX_GPIO_Init+0x5fc>)
 8001050:	f002 fa0e 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001054:	2310      	movs	r3, #16
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001058:	2300      	movs	r3, #0
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001064:	4619      	mov	r1, r3
 8001066:	4870      	ldr	r0, [pc, #448]	; (8001228 <MX_GPIO_Init+0x5f0>)
 8001068:	f002 fa02 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800106c:	2304      	movs	r3, #4
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800107c:	230c      	movs	r3, #12
 800107e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001084:	4619      	mov	r1, r3
 8001086:	4868      	ldr	r0, [pc, #416]	; (8001228 <MX_GPIO_Init+0x5f0>)
 8001088:	f002 f9f2 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800108c:	f248 0304 	movw	r3, #32772	; 0x8004
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001092:	2300      	movs	r3, #0
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800109a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800109e:	4619      	mov	r1, r3
 80010a0:	4867      	ldr	r0, [pc, #412]	; (8001240 <MX_GPIO_Init+0x608>)
 80010a2:	f002 f9e5 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80010a6:	2302      	movs	r3, #2
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010b6:	2305      	movs	r3, #5
 80010b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010be:	4619      	mov	r1, r3
 80010c0:	485b      	ldr	r0, [pc, #364]	; (8001230 <MX_GPIO_Init+0x5f8>)
 80010c2:	f002 f9d5 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80010c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010dc:	4619      	mov	r1, r3
 80010de:	4858      	ldr	r0, [pc, #352]	; (8001240 <MX_GPIO_Init+0x608>)
 80010e0:	f002 f9c6 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin 
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80010e4:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010f6:	230d      	movs	r3, #13
 80010f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010fe:	4619      	mov	r1, r3
 8001100:	484f      	ldr	r0, [pc, #316]	; (8001240 <MX_GPIO_Init+0x608>)
 8001102:	f002 f9b5 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001106:	2301      	movs	r3, #1
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001116:	2302      	movs	r3, #2
 8001118:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800111e:	4619      	mov	r1, r3
 8001120:	4843      	ldr	r0, [pc, #268]	; (8001230 <MX_GPIO_Init+0x5f8>)
 8001122:	f002 f9a5 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001138:	2307      	movs	r3, #7
 800113a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001140:	4619      	mov	r1, r3
 8001142:	483a      	ldr	r0, [pc, #232]	; (800122c <MX_GPIO_Init+0x5f4>)
 8001144:	f002 f994 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001148:	f44f 7380 	mov.w	r3, #256	; 0x100
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800115a:	2301      	movs	r3, #1
 800115c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001162:	4619      	mov	r1, r3
 8001164:	4831      	ldr	r0, [pc, #196]	; (800122c <MX_GPIO_Init+0x5f4>)
 8001166:	f002 f983 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800116a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001170:	4b34      	ldr	r3, [pc, #208]	; (8001244 <MX_GPIO_Init+0x60c>)
 8001172:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117c:	4619      	mov	r1, r3
 800117e:	482c      	ldr	r0, [pc, #176]	; (8001230 <MX_GPIO_Init+0x5f8>)
 8001180:	f002 f976 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001184:	23c0      	movs	r3, #192	; 0xc0
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001194:	2308      	movs	r3, #8
 8001196:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800119c:	4619      	mov	r1, r3
 800119e:	4826      	ldr	r0, [pc, #152]	; (8001238 <MX_GPIO_Init+0x600>)
 80011a0:	f002 f966 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80011a4:	2310      	movs	r3, #16
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80011b4:	230a      	movs	r3, #10
 80011b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011bc:	4619      	mov	r1, r3
 80011be:	4820      	ldr	r0, [pc, #128]	; (8001240 <MX_GPIO_Init+0x608>)
 80011c0:	f002 f956 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80011c4:	23c8      	movs	r3, #200	; 0xc8
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d8:	4619      	mov	r1, r3
 80011da:	4816      	ldr	r0, [pc, #88]	; (8001234 <MX_GPIO_Init+0x5fc>)
 80011dc:	f002 f948 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin 
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 80011e0:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e6:	2303      	movs	r3, #3
 80011e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f2:	4619      	mov	r1, r3
 80011f4:	4814      	ldr	r0, [pc, #80]	; (8001248 <MX_GPIO_Init+0x610>)
 80011f6:	f002 f93b 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80011fa:	2305      	movs	r3, #5
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800120a:	230a      	movs	r3, #10
 800120c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001212:	4619      	mov	r1, r3
 8001214:	4808      	ldr	r0, [pc, #32]	; (8001238 <MX_GPIO_Init+0x600>)
 8001216:	f002 f92b 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800121a:	2332      	movs	r3, #50	; 0x32
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	e012      	b.n	800124c <MX_GPIO_Init+0x614>
 8001226:	bf00      	nop
 8001228:	40020c00 	.word	0x40020c00
 800122c:	40020000 	.word	0x40020000
 8001230:	40022000 	.word	0x40022000
 8001234:	40021800 	.word	0x40021800
 8001238:	40020800 	.word	0x40020800
 800123c:	40022800 	.word	0x40022800
 8001240:	40021c00 	.word	0x40021c00
 8001244:	10120000 	.word	0x10120000
 8001248:	40021400 	.word	0x40021400
 800124c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001252:	230b      	movs	r3, #11
 8001254:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001256:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800125a:	4619      	mov	r1, r3
 800125c:	4837      	ldr	r0, [pc, #220]	; (800133c <MX_GPIO_Init+0x704>)
 800125e:	f002 f907 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001262:	2304      	movs	r3, #4
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001266:	2300      	movs	r3, #0
 8001268:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800126e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001272:	4619      	mov	r1, r3
 8001274:	4832      	ldr	r0, [pc, #200]	; (8001340 <MX_GPIO_Init+0x708>)
 8001276:	f002 f8fb 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800127a:	2386      	movs	r3, #134	; 0x86
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800128a:	230b      	movs	r3, #11
 800128c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001292:	4619      	mov	r1, r3
 8001294:	482b      	ldr	r0, [pc, #172]	; (8001344 <MX_GPIO_Init+0x70c>)
 8001296:	f002 f8eb 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800129a:	2301      	movs	r3, #1
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129e:	2303      	movs	r3, #3
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012aa:	4619      	mov	r1, r3
 80012ac:	4825      	ldr	r0, [pc, #148]	; (8001344 <MX_GPIO_Init+0x70c>)
 80012ae:	f002 f8df 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80012b2:	2350      	movs	r3, #80	; 0x50
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012c2:	230d      	movs	r3, #13
 80012c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ca:	4619      	mov	r1, r3
 80012cc:	481d      	ldr	r0, [pc, #116]	; (8001344 <MX_GPIO_Init+0x70c>)
 80012ce:	f002 f8cf 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80012d2:	2328      	movs	r3, #40	; 0x28
 80012d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80012e2:	230a      	movs	r3, #10
 80012e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ea:	4619      	mov	r1, r3
 80012ec:	4815      	ldr	r0, [pc, #84]	; (8001344 <MX_GPIO_Init+0x70c>)
 80012ee:	f002 f8bf 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80012f2:	2340      	movs	r3, #64	; 0x40
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001302:	2309      	movs	r3, #9
 8001304:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800130a:	4619      	mov	r1, r3
 800130c:	480e      	ldr	r0, [pc, #56]	; (8001348 <MX_GPIO_Init+0x710>)
 800130e:	f002 f8af 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001312:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001324:	2305      	movs	r3, #5
 8001326:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001328:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800132c:	4619      	mov	r1, r3
 800132e:	4807      	ldr	r0, [pc, #28]	; (800134c <MX_GPIO_Init+0x714>)
 8001330:	f002 f89e 	bl	8003470 <HAL_GPIO_Init>

}
 8001334:	bf00      	nop
 8001336:	3740      	adds	r7, #64	; 0x40
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40020800 	.word	0x40020800
 8001340:	40021800 	.word	0x40021800
 8001344:	40020000 	.word	0x40020000
 8001348:	40021c00 	.word	0x40021c00
 800134c:	40020400 	.word	0x40020400

08001350 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8001358:	f008 f97a 	bl	8009650 <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    
    osDelay(1);
 800135c:	2001      	movs	r0, #1
 800135e:	f005 fed5 	bl	800710c <osDelay>
 8001362:	e7fb      	b.n	800135c <StartDefaultTask+0xc>

08001364 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800136a:	463b      	mov	r3, r7
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001376:	f001 fab1 	bl	80028dc <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800137a:	2301      	movs	r3, #1
 800137c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800137e:	2300      	movs	r3, #0
 8001380:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8001382:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8001386:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8001388:	231b      	movs	r3, #27
 800138a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800138c:	2300      	movs	r3, #0
 800138e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001390:	2300      	movs	r3, #0
 8001392:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001394:	2303      	movs	r3, #3
 8001396:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013a8:	463b      	mov	r3, r7
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 faca 	bl	8002944 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80013b0:	2301      	movs	r3, #1
 80013b2:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80013b4:	2301      	movs	r3, #1
 80013b6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80013b8:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80013bc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80013be:	2317      	movs	r3, #23
 80013c0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80013ca:	2303      	movs	r3, #3
 80013cc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80013d6:	2301      	movs	r3, #1
 80013d8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013de:	463b      	mov	r3, r7
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 faaf 	bl	8002944 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80013e6:	2004      	movs	r0, #4
 80013e8:	f001 fa8e 	bl	8002908 <HAL_MPU_Enable>

}
 80013ec:	bf00      	nop
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d101      	bne.n	800140a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001406:	f001 f915 	bl	8002634 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40001000 	.word	0x40001000

08001418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <HAL_MspInit+0x4c>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a10      	ldr	r2, [pc, #64]	; (8001474 <HAL_MspInit+0x4c>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <HAL_MspInit+0x4c>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_MspInit+0x4c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <HAL_MspInit+0x4c>)
 800144c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001450:	6453      	str	r3, [r2, #68]	; 0x44
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <HAL_MspInit+0x4c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	210f      	movs	r1, #15
 8001462:	f06f 0001 	mvn.w	r0, #1
 8001466:	f001 fa01 	bl	800286c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800

08001478 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <HAL_CRC_MspInit+0x38>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d10b      	bne.n	80014a2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_CRC_MspInit+0x3c>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <HAL_CRC_MspInit+0x3c>)
 8001490:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <HAL_CRC_MspInit+0x3c>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40023000 	.word	0x40023000
 80014b4:	40023800 	.word	0x40023800

080014b8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <HAL_DMA2D_MspInit+0x44>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d113      	bne.n	80014f2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <HAL_DMA2D_MspInit+0x48>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a0c      	ldr	r2, [pc, #48]	; (8001500 <HAL_DMA2D_MspInit+0x48>)
 80014d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_DMA2D_MspInit+0x48>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2105      	movs	r1, #5
 80014e6:	205a      	movs	r0, #90	; 0x5a
 80014e8:	f001 f9c0 	bl	800286c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80014ec:	205a      	movs	r0, #90	; 0x5a
 80014ee:	f001 f9d9 	bl	80028a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	4002b000 	.word	0x4002b000
 8001500:	40023800 	.word	0x40023800

08001504 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a07      	ldr	r2, [pc, #28]	; (8001530 <HAL_DMA2D_MspDeInit+0x2c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d108      	bne.n	8001528 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <HAL_DMA2D_MspDeInit+0x30>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a06      	ldr	r2, [pc, #24]	; (8001534 <HAL_DMA2D_MspDeInit+0x30>)
 800151c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001520:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8001522:	205a      	movs	r0, #90	; 0x5a
 8001524:	f001 f9cc 	bl	80028c0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	4002b000 	.word	0x4002b000
 8001534:	40023800 	.word	0x40023800

08001538 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a17      	ldr	r2, [pc, #92]	; (80015b4 <HAL_I2C_MspInit+0x7c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d128      	bne.n	80015ac <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_I2C_MspInit+0x80>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a16      	ldr	r2, [pc, #88]	; (80015b8 <HAL_I2C_MspInit+0x80>)
 8001560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_I2C_MspInit+0x80>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001572:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001578:	2312      	movs	r3, #18
 800157a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800157c:	2301      	movs	r3, #1
 800157e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001584:	2304      	movs	r3, #4
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	480b      	ldr	r0, [pc, #44]	; (80015bc <HAL_I2C_MspInit+0x84>)
 8001590:	f001 ff6e 	bl	8003470 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <HAL_I2C_MspInit+0x80>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	4a07      	ldr	r2, [pc, #28]	; (80015b8 <HAL_I2C_MspInit+0x80>)
 800159a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800159e:	6413      	str	r3, [r2, #64]	; 0x40
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_I2C_MspInit+0x80>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80015ac:	bf00      	nop
 80015ae:	3728      	adds	r7, #40	; 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40005c00 	.word	0x40005c00
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40021c00 	.word	0x40021c00

080015c0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <HAL_I2C_MspDeInit+0x30>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d10a      	bne.n	80015e8 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <HAL_I2C_MspDeInit+0x34>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <HAL_I2C_MspDeInit+0x34>)
 80015d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 80015de:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <HAL_I2C_MspDeInit+0x38>)
 80015e4:	f002 f8ee 	bl	80037c4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40005c00 	.word	0x40005c00
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40021c00 	.word	0x40021c00

080015fc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08e      	sub	sp, #56	; 0x38
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a55      	ldr	r2, [pc, #340]	; (8001770 <HAL_LTDC_MspInit+0x174>)
 800161a:	4293      	cmp	r3, r2
 800161c:	f040 80a3 	bne.w	8001766 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001620:	4b54      	ldr	r3, [pc, #336]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 8001622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001624:	4a53      	ldr	r2, [pc, #332]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 8001626:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800162a:	6453      	str	r3, [r2, #68]	; 0x44
 800162c:	4b51      	ldr	r3, [pc, #324]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800162e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001630:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001634:	623b      	str	r3, [r7, #32]
 8001636:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001638:	4b4e      	ldr	r3, [pc, #312]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	4a4d      	ldr	r2, [pc, #308]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800163e:	f043 0310 	orr.w	r3, r3, #16
 8001642:	6313      	str	r3, [r2, #48]	; 0x30
 8001644:	4b4b      	ldr	r3, [pc, #300]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001650:	4b48      	ldr	r3, [pc, #288]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	4a47      	ldr	r2, [pc, #284]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 8001656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800165a:	6313      	str	r3, [r2, #48]	; 0x30
 800165c:	4b45      	ldr	r3, [pc, #276]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001664:	61bb      	str	r3, [r7, #24]
 8001666:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001668:	4b42      	ldr	r3, [pc, #264]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	4a41      	ldr	r2, [pc, #260]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800166e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001672:	6313      	str	r3, [r2, #48]	; 0x30
 8001674:	4b3f      	ldr	r3, [pc, #252]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001680:	4b3c      	ldr	r3, [pc, #240]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	4a3b      	ldr	r2, [pc, #236]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 8001686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800168a:	6313      	str	r3, [r2, #48]	; 0x30
 800168c:	4b39      	ldr	r3, [pc, #228]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001698:	4b36      	ldr	r3, [pc, #216]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169c:	4a35      	ldr	r2, [pc, #212]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800169e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a2:	6313      	str	r3, [r2, #48]	; 0x30
 80016a4:	4b33      	ldr	r3, [pc, #204]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 80016a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80016b0:	2310      	movs	r3, #16
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016c0:	230e      	movs	r3, #14
 80016c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80016c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c8:	4619      	mov	r1, r3
 80016ca:	482b      	ldr	r0, [pc, #172]	; (8001778 <HAL_LTDC_MspInit+0x17c>)
 80016cc:	f001 fed0 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 80016d0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016e2:	230e      	movs	r3, #14
 80016e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80016e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ea:	4619      	mov	r1, r3
 80016ec:	4823      	ldr	r0, [pc, #140]	; (800177c <HAL_LTDC_MspInit+0x180>)
 80016ee:	f001 febf 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80016f2:	23f7      	movs	r3, #247	; 0xf7
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001702:	230e      	movs	r3, #14
 8001704:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170a:	4619      	mov	r1, r3
 800170c:	481c      	ldr	r0, [pc, #112]	; (8001780 <HAL_LTDC_MspInit+0x184>)
 800170e:	f001 feaf 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001724:	2309      	movs	r3, #9
 8001726:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172c:	4619      	mov	r1, r3
 800172e:	4815      	ldr	r0, [pc, #84]	; (8001784 <HAL_LTDC_MspInit+0x188>)
 8001730:	f001 fe9e 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001734:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001746:	230e      	movs	r3, #14
 8001748:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800174a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174e:	4619      	mov	r1, r3
 8001750:	480d      	ldr	r0, [pc, #52]	; (8001788 <HAL_LTDC_MspInit+0x18c>)
 8001752:	f001 fe8d 	bl	8003470 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2105      	movs	r1, #5
 800175a:	2058      	movs	r0, #88	; 0x58
 800175c:	f001 f886 	bl	800286c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001760:	2058      	movs	r0, #88	; 0x58
 8001762:	f001 f89f 	bl	80028a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001766:	bf00      	nop
 8001768:	3738      	adds	r7, #56	; 0x38
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40016800 	.word	0x40016800
 8001774:	40023800 	.word	0x40023800
 8001778:	40021000 	.word	0x40021000
 800177c:	40022400 	.word	0x40022400
 8001780:	40022800 	.word	0x40022800
 8001784:	40021800 	.word	0x40021800
 8001788:	40022000 	.word	0x40022000

0800178c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08c      	sub	sp, #48	; 0x30
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 031c 	add.w	r3, r7, #28
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a3b      	ldr	r2, [pc, #236]	; (8001898 <HAL_QSPI_MspInit+0x10c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d170      	bne.n	8001890 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80017ae:	4b3b      	ldr	r3, [pc, #236]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b2:	4a3a      	ldr	r2, [pc, #232]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	6393      	str	r3, [r2, #56]	; 0x38
 80017ba:	4b38      	ldr	r3, [pc, #224]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	61bb      	str	r3, [r7, #24]
 80017c4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017c6:	4b35      	ldr	r3, [pc, #212]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a34      	ldr	r2, [pc, #208]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017cc:	f043 0310 	orr.w	r3, r3, #16
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b32      	ldr	r3, [pc, #200]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017de:	4b2f      	ldr	r3, [pc, #188]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a2e      	ldr	r2, [pc, #184]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017e4:	f043 0302 	orr.w	r3, r3, #2
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b2c      	ldr	r3, [pc, #176]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f6:	4b29      	ldr	r3, [pc, #164]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a28      	ldr	r2, [pc, #160]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017fc:	f043 0308 	orr.w	r3, r3, #8
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b26      	ldr	r3, [pc, #152]	; (800189c <HAL_QSPI_MspInit+0x110>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800180e:	2304      	movs	r3, #4
 8001810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800181e:	2309      	movs	r3, #9
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	4619      	mov	r1, r3
 8001828:	481d      	ldr	r0, [pc, #116]	; (80018a0 <HAL_QSPI_MspInit+0x114>)
 800182a:	f001 fe21 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800182e:	2340      	movs	r3, #64	; 0x40
 8001830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183a:	2303      	movs	r3, #3
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800183e:	230a      	movs	r3, #10
 8001840:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	4619      	mov	r1, r3
 8001848:	4816      	ldr	r0, [pc, #88]	; (80018a4 <HAL_QSPI_MspInit+0x118>)
 800184a:	f001 fe11 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800184e:	2304      	movs	r3, #4
 8001850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185a:	2303      	movs	r3, #3
 800185c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800185e:	2309      	movs	r3, #9
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001862:	f107 031c 	add.w	r3, r7, #28
 8001866:	4619      	mov	r1, r3
 8001868:	480e      	ldr	r0, [pc, #56]	; (80018a4 <HAL_QSPI_MspInit+0x118>)
 800186a:	f001 fe01 	bl	8003470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800186e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001880:	2309      	movs	r3, #9
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	4619      	mov	r1, r3
 800188a:	4807      	ldr	r0, [pc, #28]	; (80018a8 <HAL_QSPI_MspInit+0x11c>)
 800188c:	f001 fdf0 	bl	8003470 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001890:	bf00      	nop
 8001892:	3730      	adds	r7, #48	; 0x30
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	a0001000 	.word	0xa0001000
 800189c:	40023800 	.word	0x40023800
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40020400 	.word	0x40020400
 80018a8:	40020c00 	.word	0x40020c00

080018ac <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0c      	ldr	r2, [pc, #48]	; (80018ec <HAL_QSPI_MspDeInit+0x40>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d112      	bne.n	80018e4 <HAL_QSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_QSPI_MspDeInit+0x44>)
 80018c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c2:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <HAL_QSPI_MspDeInit+0x44>)
 80018c4:	f023 0302 	bic.w	r3, r3, #2
 80018c8:	6393      	str	r3, [r2, #56]	; 0x38
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    HAL_GPIO_DeInit(QSPI_D2_GPIO_Port, QSPI_D2_Pin);
 80018ca:	2104      	movs	r1, #4
 80018cc:	4809      	ldr	r0, [pc, #36]	; (80018f4 <HAL_QSPI_MspDeInit+0x48>)
 80018ce:	f001 ff79 	bl	80037c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, QSPI_NCS_Pin|GPIO_PIN_2);
 80018d2:	2144      	movs	r1, #68	; 0x44
 80018d4:	4808      	ldr	r0, [pc, #32]	; (80018f8 <HAL_QSPI_MspDeInit+0x4c>)
 80018d6:	f001 ff75 	bl	80037c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin);
 80018da:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80018de:	4807      	ldr	r0, [pc, #28]	; (80018fc <HAL_QSPI_MspDeInit+0x50>)
 80018e0:	f001 ff70 	bl	80037c4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	a0001000 	.word	0xa0001000
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40020400 	.word	0x40020400
 80018fc:	40020c00 	.word	0x40020c00

08001900 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001914:	4b3a      	ldr	r3, [pc, #232]	; (8001a00 <HAL_FMC_MspInit+0x100>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d16d      	bne.n	80019f8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800191c:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <HAL_FMC_MspInit+0x100>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001922:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HAL_FMC_MspInit+0x104>)
 8001924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001926:	4a37      	ldr	r2, [pc, #220]	; (8001a04 <HAL_FMC_MspInit+0x104>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6393      	str	r3, [r2, #56]	; 0x38
 800192e:	4b35      	ldr	r3, [pc, #212]	; (8001a04 <HAL_FMC_MspInit+0x104>)
 8001930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800193a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800193e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800194c:	230c      	movs	r3, #12
 800194e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	4619      	mov	r1, r3
 8001954:	482c      	ldr	r0, [pc, #176]	; (8001a08 <HAL_FMC_MspInit+0x108>)
 8001956:	f001 fd8b 	bl	8003470 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800195a:	f248 1333 	movw	r3, #33075	; 0x8133
 800195e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800196c:	230c      	movs	r3, #12
 800196e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	4619      	mov	r1, r3
 8001974:	4825      	ldr	r0, [pc, #148]	; (8001a0c <HAL_FMC_MspInit+0x10c>)
 8001976:	f001 fd7b 	bl	8003470 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800197a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800197e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800198c:	230c      	movs	r3, #12
 800198e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	4619      	mov	r1, r3
 8001994:	481e      	ldr	r0, [pc, #120]	; (8001a10 <HAL_FMC_MspInit+0x110>)
 8001996:	f001 fd6b 	bl	8003470 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800199a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800199e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a8:	2303      	movs	r3, #3
 80019aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019ac:	230c      	movs	r3, #12
 80019ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	4619      	mov	r1, r3
 80019b4:	4817      	ldr	r0, [pc, #92]	; (8001a14 <HAL_FMC_MspInit+0x114>)
 80019b6:	f001 fd5b 	bl	8003470 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80019ba:	2328      	movs	r3, #40	; 0x28
 80019bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c6:	2303      	movs	r3, #3
 80019c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019ca:	230c      	movs	r3, #12
 80019cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	4619      	mov	r1, r3
 80019d2:	4811      	ldr	r0, [pc, #68]	; (8001a18 <HAL_FMC_MspInit+0x118>)
 80019d4:	f001 fd4c 	bl	8003470 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80019d8:	2308      	movs	r3, #8
 80019da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019e8:	230c      	movs	r3, #12
 80019ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	4619      	mov	r1, r3
 80019f0:	480a      	ldr	r0, [pc, #40]	; (8001a1c <HAL_FMC_MspInit+0x11c>)
 80019f2:	f001 fd3d 	bl	8003470 <HAL_GPIO_Init>
 80019f6:	e000      	b.n	80019fa <HAL_FMC_MspInit+0xfa>
    return;
 80019f8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000138 	.word	0x20000138
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40021800 	.word	0x40021800
 8001a10:	40020c00 	.word	0x40020c00
 8001a14:	40021400 	.word	0x40021400
 8001a18:	40021c00 	.word	0x40021c00
 8001a1c:	40020800 	.word	0x40020800

08001a20 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001a28:	f7ff ff6a 	bl	8001900 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08c      	sub	sp, #48	; 0x30
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001a44:	2200      	movs	r2, #0
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	2036      	movs	r0, #54	; 0x36
 8001a4a:	f000 ff0f 	bl	800286c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001a4e:	2036      	movs	r0, #54	; 0x36
 8001a50:	f000 ff28 	bl	80028a4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <HAL_InitTick+0xa0>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	4a1e      	ldr	r2, [pc, #120]	; (8001ad4 <HAL_InitTick+0xa0>)
 8001a5a:	f043 0310 	orr.w	r3, r3, #16
 8001a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a60:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <HAL_InitTick+0xa0>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	f003 0310 	and.w	r3, r3, #16
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a6c:	f107 0210 	add.w	r2, r7, #16
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f004 fad8 	bl	800602c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001a7c:	f004 fac2 	bl	8006004 <HAL_RCC_GetPCLK1Freq>
 8001a80:	4603      	mov	r3, r0
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a88:	4a13      	ldr	r2, [pc, #76]	; (8001ad8 <HAL_InitTick+0xa4>)
 8001a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8e:	0c9b      	lsrs	r3, r3, #18
 8001a90:	3b01      	subs	r3, #1
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_InitTick+0xa8>)
 8001a96:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <HAL_InitTick+0xac>)
 8001a98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <HAL_InitTick+0xa8>)
 8001a9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aa0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001aa2:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <HAL_InitTick+0xa8>)
 8001aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <HAL_InitTick+0xa8>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_InitTick+0xa8>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001ab4:	4809      	ldr	r0, [pc, #36]	; (8001adc <HAL_InitTick+0xa8>)
 8001ab6:	f004 ff58 	bl	800696a <HAL_TIM_Base_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d104      	bne.n	8001aca <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001ac0:	4806      	ldr	r0, [pc, #24]	; (8001adc <HAL_InitTick+0xa8>)
 8001ac2:	f004 ff87 	bl	80069d4 <HAL_TIM_Base_Start_IT>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	e000      	b.n	8001acc <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3730      	adds	r7, #48	; 0x30
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	431bde83 	.word	0x431bde83
 8001adc:	2000b76c 	.word	0x2000b76c
 8001ae0:	40001000 	.word	0x40001000

08001ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <HardFault_Handler+0x4>

08001af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <MemManage_Handler+0x4>

08001afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <BusFault_Handler+0x4>

08001b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <UsageFault_Handler+0x4>

08001b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <TIM6_DAC_IRQHandler+0x10>)
 8001b1e:	f004 ff83 	bl	8006a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2000b76c 	.word	0x2000b76c

08001b2c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <LTDC_IRQHandler+0x10>)
 8001b32:	f002 fddd 	bl	80046f0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2000b604 	.word	0x2000b604

08001b40 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <DMA2D_IRQHandler+0x10>)
 8001b46:	f001 fa54 	bl	8002ff2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2000b6ac 	.word	0x2000b6ac

08001b54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
	return 1;
 8001b58:	2301      	movs	r3, #1
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <_kill>:

int _kill(int pid, int sig)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b6e:	f023 f8a5 	bl	8024cbc <__errno>
 8001b72:	4602      	mov	r2, r0
 8001b74:	2316      	movs	r3, #22
 8001b76:	6013      	str	r3, [r2, #0]
	return -1;
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_exit>:

void _exit (int status)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ffe7 	bl	8001b64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b96:	e7fe      	b.n	8001b96 <_exit+0x12>

08001b98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	e00a      	b.n	8001bc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001baa:	f3af 8000 	nop.w
 8001bae:	4601      	mov	r1, r0
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	60ba      	str	r2, [r7, #8]
 8001bb6:	b2ca      	uxtb	r2, r1
 8001bb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	dbf0      	blt.n	8001baa <_read+0x12>
	}

return len;
 8001bc8:	687b      	ldr	r3, [r7, #4]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	e009      	b.n	8001bf8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	60ba      	str	r2, [r7, #8]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	dbf1      	blt.n	8001be4 <_write+0x12>
	}
	return len;
 8001c00:	687b      	ldr	r3, [r7, #4]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <_close>:

int _close(int file)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
	return -1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c32:	605a      	str	r2, [r3, #4]
	return 0;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <_isatty>:

int _isatty(int file)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
	return 1;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
	return 0;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <_sbrk+0x50>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <_sbrk+0x16>
		heap_end = &end;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <_sbrk+0x50>)
 8001c86:	4a10      	ldr	r2, [pc, #64]	; (8001cc8 <_sbrk+0x54>)
 8001c88:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <_sbrk+0x50>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <_sbrk+0x50>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4413      	add	r3, r2
 8001c98:	466a      	mov	r2, sp
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d907      	bls.n	8001cae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001c9e:	f023 f80d 	bl	8024cbc <__errno>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	230c      	movs	r3, #12
 8001ca6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cac:	e006      	b.n	8001cbc <_sbrk+0x48>
	}

	heap_end += incr;
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <_sbrk+0x50>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a03      	ldr	r2, [pc, #12]	; (8001cc4 <_sbrk+0x50>)
 8001cb8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001cba:	68fb      	ldr	r3, [r7, #12]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	2000013c 	.word	0x2000013c
 8001cc8:	2000b800 	.word	0x2000b800

08001ccc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <SystemInit+0x28>)
 8001cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd6:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <SystemInit+0x28>)
 8001cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <SystemInit+0x28>)
 8001ce2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ce6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cfc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cfe:	e003      	b.n	8001d08 <LoopCopyDataInit>

08001d00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d06:	3104      	adds	r1, #4

08001d08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d08:	480b      	ldr	r0, [pc, #44]	; (8001d38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d10:	d3f6      	bcc.n	8001d00 <CopyDataInit>
  ldr  r2, =_sbss
 8001d12:	4a0b      	ldr	r2, [pc, #44]	; (8001d40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d14:	e002      	b.n	8001d1c <LoopFillZerobss>

08001d16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d18:	f842 3b04 	str.w	r3, [r2], #4

08001d1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d20:	d3f9      	bcc.n	8001d16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d22:	f7ff ffd3 	bl	8001ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d26:	f022 ffe1 	bl	8024cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d2a:	f7fe fcbb 	bl	80006a4 <main>
  bx  lr    
 8001d2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d30:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001d34:	0802c00c 	.word	0x0802c00c
  ldr  r0, =_sdata
 8001d38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d3c:	2000010c 	.word	0x2000010c
  ldr  r2, =_sbss
 8001d40:	2000010c 	.word	0x2000010c
  ldr  r3, = _ebss
 8001d44:	2000b800 	.word	0x2000b800

08001d48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d48:	e7fe      	b.n	8001d48 <ADC_IRQHandler>
	...

08001d4c <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8001d52:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001d54:	4a28      	ldr	r2, [pc, #160]	; (8001df8 <BSP_QSPI_Init+0xac>)
 8001d56:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8001d58:	4826      	ldr	r0, [pc, #152]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001d5a:	f003 f86b 	bl	8004e34 <HAL_QSPI_DeInit>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e041      	b.n	8001dec <BSP_QSPI_Init+0xa0>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4822      	ldr	r0, [pc, #136]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001d6c:	f000 f878 	bl	8001e60 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI freq = 216 MHz/(1+1) = 108 Mhz */
 8001d70:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8001d76:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001d78:	2204      	movs	r2, #4
 8001d7a:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001d7e:	2210      	movs	r2, #16
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d86:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d90:	683b      	ldr	r3, [r7, #0]
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8001d92:	fab3 f383 	clz	r3, r3
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001d9e:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001da2:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001da6:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	621a      	str	r2, [r3, #32]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8001dba:	480e      	ldr	r0, [pc, #56]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001dbc:	f002 ffb0 	bl	8004d20 <HAL_QSPI_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <BSP_QSPI_Init+0x7e>
  {
    return QSPI_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e010      	b.n	8001dec <BSP_QSPI_Init+0xa0>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8001dca:	480a      	ldr	r0, [pc, #40]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001dcc:	f000 f908 	bl	8001fe0 <QSPI_ResetMemory>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <BSP_QSPI_Init+0x8e>
  {
    return QSPI_NOT_SUPPORTED;
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	e008      	b.n	8001dec <BSP_QSPI_Init+0xa0>
  }
 
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 8001dda:	4806      	ldr	r0, [pc, #24]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001ddc:	f000 f942 	bl	8002064 <QSPI_DummyCyclesCfg>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <BSP_QSPI_Init+0x9e>
  {
    return QSPI_NOT_SUPPORTED;
 8001de6:	2304      	movs	r3, #4
 8001de8:	e000      	b.n	8001dec <BSP_QSPI_Init+0xa0>
  }
  
  return QSPI_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	2000b7ac 	.word	0x2000b7ac
 8001df8:	a0001000 	.word	0xa0001000

08001dfc <BSP_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_EnableMemoryMappedMode(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b090      	sub	sp, #64	; 0x40
 8001e00:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001e02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e06:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8001e08:	23eb      	movs	r3, #235	; 0xeb
 8001e0a:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001e0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001e12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e16:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001e1c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8001e22:	230a      	movs	r3, #10
 8001e24:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	603b      	str	r3, [r7, #0]
  
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8001e3a:	463a      	mov	r2, r7
 8001e3c:	f107 0308 	add.w	r3, r7, #8
 8001e40:	4619      	mov	r1, r3
 8001e42:	4806      	ldr	r0, [pc, #24]	; (8001e5c <BSP_QSPI_EnableMemoryMappedMode+0x60>)
 8001e44:	f003 fa34 	bl	80052b0 <HAL_QSPI_MemoryMapped>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <BSP_QSPI_EnableMemoryMappedMode+0x56>
  {
    return QSPI_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <BSP_QSPI_EnableMemoryMappedMode+0x58>
  }

  return QSPI_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3740      	adds	r7, #64	; 0x40
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	2000b7ac 	.word	0x2000b7ac

08001e60 <BSP_QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08e      	sub	sp, #56	; 0x38
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8001e6a:	4b59      	ldr	r3, [pc, #356]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6e:	4a58      	ldr	r2, [pc, #352]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	6393      	str	r3, [r2, #56]	; 0x38
 8001e76:	4b56      	ldr	r3, [pc, #344]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	623b      	str	r3, [r7, #32]
 8001e80:	6a3b      	ldr	r3, [r7, #32]
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8001e82:	4b53      	ldr	r3, [pc, #332]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	4a52      	ldr	r2, [pc, #328]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 8001e8e:	4b50      	ldr	r3, [pc, #320]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	4a4f      	ldr	r2, [pc, #316]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001e94:	f023 0302 	bic.w	r3, r3, #2
 8001e98:	6193      	str	r3, [r2, #24]
  /* Enable GPIO clocks */
  QSPI_CS_GPIO_CLK_ENABLE();
 8001e9a:	4b4d      	ldr	r3, [pc, #308]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a4c      	ldr	r2, [pc, #304]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b4a      	ldr	r3, [pc, #296]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	61fb      	str	r3, [r7, #28]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8001eb2:	4b47      	ldr	r3, [pc, #284]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a46      	ldr	r2, [pc, #280]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b44      	ldr	r3, [pc, #272]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	61bb      	str	r3, [r7, #24]
 8001ec8:	69bb      	ldr	r3, [r7, #24]
  QSPI_D0_GPIO_CLK_ENABLE();
 8001eca:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a40      	ldr	r2, [pc, #256]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ed0:	f043 0308 	orr.w	r3, r3, #8
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b3e      	ldr	r3, [pc, #248]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697b      	ldr	r3, [r7, #20]
  QSPI_D1_GPIO_CLK_ENABLE();
 8001ee2:	4b3b      	ldr	r3, [pc, #236]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a3a      	ldr	r2, [pc, #232]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ee8:	f043 0308 	orr.w	r3, r3, #8
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b38      	ldr	r3, [pc, #224]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8001efa:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a34      	ldr	r2, [pc, #208]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001f00:	f043 0310 	orr.w	r3, r3, #16
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b32      	ldr	r3, [pc, #200]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
  QSPI_D3_GPIO_CLK_ENABLE();
 8001f12:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a2e      	ldr	r2, [pc, #184]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001f18:	f043 0308 	orr.w	r3, r3, #8
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b2c      	ldr	r3, [pc, #176]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 8001f2a:	2340      	movs	r3, #64	; 0x40
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001f32:	2301      	movs	r3, #1
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8001f36:	2303      	movs	r3, #3
 8001f38:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8001f3a:	230a      	movs	r3, #10
 8001f3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8001f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f42:	4619      	mov	r1, r3
 8001f44:	4823      	ldr	r0, [pc, #140]	; (8001fd4 <BSP_QSPI_MspInit+0x174>)
 8001f46:	f001 fa93 	bl	8003470 <HAL_GPIO_Init>

  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001f52:	2309      	movs	r3, #9
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8001f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	481d      	ldr	r0, [pc, #116]	; (8001fd4 <BSP_QSPI_MspInit+0x174>)
 8001f5e:	f001 fa87 	bl	8003470 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8001f62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001f68:	2309      	movs	r3, #9
 8001f6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8001f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f70:	4619      	mov	r1, r3
 8001f72:	4819      	ldr	r0, [pc, #100]	; (8001fd8 <BSP_QSPI_MspInit+0x178>)
 8001f74:	f001 fa7c 	bl	8003470 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8001f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001f7e:	2309      	movs	r3, #9
 8001f80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8001f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f86:	4619      	mov	r1, r3
 8001f88:	4813      	ldr	r0, [pc, #76]	; (8001fd8 <BSP_QSPI_MspInit+0x178>)
 8001f8a:	f001 fa71 	bl	8003470 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8001f8e:	2304      	movs	r3, #4
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001f92:	2309      	movs	r3, #9
 8001f94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8001f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	480f      	ldr	r0, [pc, #60]	; (8001fdc <BSP_QSPI_MspInit+0x17c>)
 8001f9e:	f001 fa67 	bl	8003470 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8001fa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001fa8:	2309      	movs	r3, #9
 8001faa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8001fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4809      	ldr	r0, [pc, #36]	; (8001fd8 <BSP_QSPI_MspInit+0x178>)
 8001fb4:	f001 fa5c 	bl	8003470 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	210f      	movs	r1, #15
 8001fbc:	205c      	movs	r0, #92	; 0x5c
 8001fbe:	f000 fc55 	bl	800286c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8001fc2:	205c      	movs	r0, #92	; 0x5c
 8001fc4:	f000 fc6e 	bl	80028a4 <HAL_NVIC_EnableIRQ>
}
 8001fc8:	bf00      	nop
 8001fca:	3738      	adds	r7, #56	; 0x38
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020400 	.word	0x40020400
 8001fd8:	40020c00 	.word	0x40020c00
 8001fdc:	40021000 	.word	0x40021000

08001fe0 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b090      	sub	sp, #64	; 0x40
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fec:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8001fee:	2366      	movs	r3, #102	; 0x66
 8001ff0:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002006:	2300      	movs	r3, #0
 8002008:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800200a:	2300      	movs	r3, #0
 800200c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800200e:	f107 0308 	add.w	r3, r7, #8
 8002012:	f241 3288 	movw	r2, #5000	; 0x1388
 8002016:	4619      	mov	r1, r3
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f002 ff3b 	bl	8004e94 <HAL_QSPI_Command>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e019      	b.n	800205c <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8002028:	2399      	movs	r3, #153	; 0x99
 800202a:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800202c:	f107 0308 	add.w	r3, r7, #8
 8002030:	f241 3288 	movw	r2, #5000	; 0x1388
 8002034:	4619      	mov	r1, r3
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f002 ff2c 	bl	8004e94 <HAL_QSPI_Command>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e00a      	b.n	800205c <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002046:	f241 3188 	movw	r1, #5000	; 0x1388
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8c7 	bl	80021de <QSPI_AutoPollingMemReady>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3740      	adds	r7, #64	; 0x40
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b094      	sub	sp, #80	; 0x50
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800206c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8002072:	2385      	movs	r3, #133	; 0x85
 8002074:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002076:	2300      	movs	r3, #0
 8002078:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800207a:	2300      	movs	r3, #0
 800207c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800207e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002082:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8002088:	2301      	movs	r3, #1
 800208a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002090:	2300      	movs	r3, #0
 8002092:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002094:	2300      	movs	r3, #0
 8002096:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a0:	4619      	mov	r1, r3
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f002 fef6 	bl	8004e94 <HAL_QSPI_Command>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e048      	b.n	8002144 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80020b2:	f107 030f 	add.w	r3, r7, #15
 80020b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ba:	4619      	mov	r1, r3
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f002 ffde 	bl	800507e <HAL_QSPI_Receive>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e03b      	b.n	8002144 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f83d 	bl	800214c <QSPI_WriteEnable>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e033      	b.n	8002144 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */  
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 80020dc:	2381      	movs	r3, #129	; 0x81
 80020de:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	b25b      	sxtb	r3, r3
 80020e4:	f003 030f 	and.w	r3, r3, #15
 80020e8:	b25a      	sxtb	r2, r3
 80020ea:	23f0      	movs	r3, #240	; 0xf0
 80020ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80020f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020f8:	fab3 f383 	clz	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	4619      	mov	r1, r3
 8002100:	230a      	movs	r3, #10
 8002102:	408b      	lsls	r3, r1
 8002104:	b25b      	sxtb	r3, r3
 8002106:	4313      	orrs	r3, r2
 8002108:	b25b      	sxtb	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	73fb      	strb	r3, [r7, #15]
      
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800210e:	f107 0310 	add.w	r3, r7, #16
 8002112:	f241 3288 	movw	r2, #5000	; 0x1388
 8002116:	4619      	mov	r1, r3
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f002 febb 	bl	8004e94 <HAL_QSPI_Command>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <QSPI_DummyCyclesCfg+0xc4>
  {
    return QSPI_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e00d      	b.n	8002144 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002128:	f107 030f 	add.w	r3, r7, #15
 800212c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002130:	4619      	mov	r1, r3
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f002 ff0e 	bl	8004f54 <HAL_QSPI_Transmit>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <QSPI_DummyCyclesCfg+0xde>
  {
    return QSPI_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <QSPI_DummyCyclesCfg+0xe0>
  }
  
  return QSPI_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3750      	adds	r7, #80	; 0x50
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b096      	sub	sp, #88	; 0x58
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002154:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002158:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800215a:	2306      	movs	r3, #6
 800215c:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800215e:	2300      	movs	r3, #0
 8002160:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002162:	2300      	movs	r3, #0
 8002164:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8002166:	2300      	movs	r3, #0
 8002168:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800216e:	2300      	movs	r3, #0
 8002170:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002172:	2300      	movs	r3, #0
 8002174:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002176:	2300      	movs	r3, #0
 8002178:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800217a:	f107 0320 	add.w	r3, r7, #32
 800217e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002182:	4619      	mov	r1, r3
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f002 fe85 	bl	8004e94 <HAL_QSPI_Command>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e020      	b.n	80021d6 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = N25Q128A_SR_WREN;
 8002194:	2302      	movs	r3, #2
 8002196:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 8002198:	2302      	movs	r3, #2
 800219a:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800219c:	2300      	movs	r3, #0
 800219e:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80021a0:	2301      	movs	r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80021a4:	2310      	movs	r3, #16
 80021a6:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80021a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021ac:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 80021ae:	2305      	movs	r3, #5
 80021b0:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 80021b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021b8:	f107 0208 	add.w	r2, r7, #8
 80021bc:	f107 0120 	add.w	r1, r7, #32
 80021c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f002 fffa 	bl	80051be <HAL_QSPI_AutoPolling>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3758      	adds	r7, #88	; 0x58
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b096      	sub	sp, #88	; 0x58
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80021e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ec:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80021ee:	2305      	movs	r3, #5
 80021f0:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80021fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021fe:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002204:	2300      	movs	r3, #0
 8002206:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002208:	2300      	movs	r3, #0
 800220a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800220c:	2300      	movs	r3, #0
 800220e:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 8002214:	2301      	movs	r3, #1
 8002216:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002218:	2300      	movs	r3, #0
 800221a:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 800221c:	2301      	movs	r3, #1
 800221e:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8002220:	2310      	movs	r3, #16
 8002222:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002224:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002228:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800222a:	f107 0208 	add.w	r2, r7, #8
 800222e:	f107 0120 	add.w	r1, r7, #32
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f002 ffc2 	bl	80051be <HAL_QSPI_AutoPolling>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3758      	adds	r7, #88	; 0x58
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  //TS_IO_Delay(200);

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002258:	f000 f9b4 	bl	80025c4 <ft5336_I2C_InitializeIfRequired>
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b084      	sub	sp, #16
 800227e:	af00      	add	r7, sp, #0
 8002280:	4603      	mov	r3, r0
 8002282:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800228c:	2300      	movs	r3, #0
 800228e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002290:	f000 f998 	bl	80025c4 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8002294:	2300      	movs	r3, #0
 8002296:	73fb      	strb	r3, [r7, #15]
 8002298:	e010      	b.n	80022bc <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	21a8      	movs	r1, #168	; 0xa8
 80022a0:	4618      	mov	r0, r3
 80022a2:	f00f ffcb 	bl	801223c <TS_IO_Read>
 80022a6:	4603      	mov	r3, r0
 80022a8:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80022aa:	7b7b      	ldrb	r3, [r7, #13]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b51      	cmp	r3, #81	; 0x51
 80022b0:	d101      	bne.n	80022b6 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	3301      	adds	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d802      	bhi.n	80022c8 <ft5336_ReadID+0x4e>
 80022c2:	7bbb      	ldrb	r3, [r7, #14]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0e8      	beq.n	800229a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80022c8:	7b7b      	ldrb	r3, [r7, #13]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	b29b      	uxth	r3, r3
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	4603      	mov	r3, r0
 80022de:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 f97c 	bl	80025e0 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f932 	bl	8002554 <ft5336_TS_DisableIT>
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8002306:	88fb      	ldrh	r3, [r7, #6]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2102      	movs	r1, #2
 800230c:	4618      	mov	r0, r3
 800230e:	f00f ff95 	bl	801223c <TS_IO_Read>
 8002312:	4603      	mov	r3, r0
 8002314:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	b2db      	uxtb	r3, r3
 8002320:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b05      	cmp	r3, #5
 8002328:	d901      	bls.n	800232e <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4b05      	ldr	r3, [pc, #20]	; (8002348 <ft5336_TS_DetectTouch+0x50>)
 8002334:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8002336:	4b04      	ldr	r3, [pc, #16]	; (8002348 <ft5336_TS_DetectTouch+0x50>)
 8002338:	2200      	movs	r2, #0
 800233a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	b2db      	uxtb	r3, r3
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20000140 	.word	0x20000140

0800234c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
 8002358:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800236e:	4b6d      	ldr	r3, [pc, #436]	; (8002524 <ft5336_TS_GetXY+0x1d8>)
 8002370:	789a      	ldrb	r2, [r3, #2]
 8002372:	4b6c      	ldr	r3, [pc, #432]	; (8002524 <ft5336_TS_GetXY+0x1d8>)
 8002374:	785b      	ldrb	r3, [r3, #1]
 8002376:	429a      	cmp	r2, r3
 8002378:	f080 80cf 	bcs.w	800251a <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800237c:	4b69      	ldr	r3, [pc, #420]	; (8002524 <ft5336_TS_GetXY+0x1d8>)
 800237e:	789b      	ldrb	r3, [r3, #2]
 8002380:	2b09      	cmp	r3, #9
 8002382:	d871      	bhi.n	8002468 <ft5336_TS_GetXY+0x11c>
 8002384:	a201      	add	r2, pc, #4	; (adr r2, 800238c <ft5336_TS_GetXY+0x40>)
 8002386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238a:	bf00      	nop
 800238c:	080023b5 	.word	0x080023b5
 8002390:	080023c7 	.word	0x080023c7
 8002394:	080023d9 	.word	0x080023d9
 8002398:	080023eb 	.word	0x080023eb
 800239c:	080023fd 	.word	0x080023fd
 80023a0:	0800240f 	.word	0x0800240f
 80023a4:	08002421 	.word	0x08002421
 80023a8:	08002433 	.word	0x08002433
 80023ac:	08002445 	.word	0x08002445
 80023b0:	08002457 	.word	0x08002457
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80023b4:	2304      	movs	r3, #4
 80023b6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80023b8:	2303      	movs	r3, #3
 80023ba:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80023bc:	2306      	movs	r3, #6
 80023be:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80023c0:	2305      	movs	r3, #5
 80023c2:	753b      	strb	r3, [r7, #20]
      break;
 80023c4:	e051      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80023c6:	230a      	movs	r3, #10
 80023c8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80023ca:	2309      	movs	r3, #9
 80023cc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80023ce:	230c      	movs	r3, #12
 80023d0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80023d2:	230b      	movs	r3, #11
 80023d4:	753b      	strb	r3, [r7, #20]
      break;
 80023d6:	e048      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80023d8:	2310      	movs	r3, #16
 80023da:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80023dc:	230f      	movs	r3, #15
 80023de:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80023e0:	2312      	movs	r3, #18
 80023e2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80023e4:	2311      	movs	r3, #17
 80023e6:	753b      	strb	r3, [r7, #20]
      break;
 80023e8:	e03f      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80023ea:	2316      	movs	r3, #22
 80023ec:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80023ee:	2315      	movs	r3, #21
 80023f0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80023f2:	2318      	movs	r3, #24
 80023f4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80023f6:	2317      	movs	r3, #23
 80023f8:	753b      	strb	r3, [r7, #20]
      break;
 80023fa:	e036      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80023fc:	231c      	movs	r3, #28
 80023fe:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8002400:	231b      	movs	r3, #27
 8002402:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8002404:	231e      	movs	r3, #30
 8002406:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8002408:	231d      	movs	r3, #29
 800240a:	753b      	strb	r3, [r7, #20]
      break;
 800240c:	e02d      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800240e:	2322      	movs	r3, #34	; 0x22
 8002410:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8002412:	2321      	movs	r3, #33	; 0x21
 8002414:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8002416:	2324      	movs	r3, #36	; 0x24
 8002418:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800241a:	2323      	movs	r3, #35	; 0x23
 800241c:	753b      	strb	r3, [r7, #20]
      break;
 800241e:	e024      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8002420:	2328      	movs	r3, #40	; 0x28
 8002422:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8002424:	2327      	movs	r3, #39	; 0x27
 8002426:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8002428:	232a      	movs	r3, #42	; 0x2a
 800242a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 800242c:	2329      	movs	r3, #41	; 0x29
 800242e:	753b      	strb	r3, [r7, #20]
      break;
 8002430:	e01b      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8002432:	232e      	movs	r3, #46	; 0x2e
 8002434:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8002436:	232d      	movs	r3, #45	; 0x2d
 8002438:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800243a:	2330      	movs	r3, #48	; 0x30
 800243c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800243e:	232f      	movs	r3, #47	; 0x2f
 8002440:	753b      	strb	r3, [r7, #20]
      break;
 8002442:	e012      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8002444:	2334      	movs	r3, #52	; 0x34
 8002446:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8002448:	2333      	movs	r3, #51	; 0x33
 800244a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 800244c:	2336      	movs	r3, #54	; 0x36
 800244e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8002450:	2335      	movs	r3, #53	; 0x35
 8002452:	753b      	strb	r3, [r7, #20]
      break;
 8002454:	e009      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8002456:	233a      	movs	r3, #58	; 0x3a
 8002458:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800245a:	2339      	movs	r3, #57	; 0x39
 800245c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800245e:	233c      	movs	r3, #60	; 0x3c
 8002460:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8002462:	233b      	movs	r3, #59	; 0x3b
 8002464:	753b      	strb	r3, [r7, #20]
      break;
 8002466:	e000      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8002468:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800246a:	89fb      	ldrh	r3, [r7, #14]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	7dfa      	ldrb	r2, [r7, #23]
 8002470:	4611      	mov	r1, r2
 8002472:	4618      	mov	r0, r3
 8002474:	f00f fee2 	bl	801223c <TS_IO_Read>
 8002478:	4603      	mov	r3, r0
 800247a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	b29a      	uxth	r2, r3
 8002482:	4b29      	ldr	r3, [pc, #164]	; (8002528 <ft5336_TS_GetXY+0x1dc>)
 8002484:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8002486:	89fb      	ldrh	r3, [r7, #14]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	7dba      	ldrb	r2, [r7, #22]
 800248c:	4611      	mov	r1, r2
 800248e:	4618      	mov	r0, r3
 8002490:	f00f fed4 	bl	801223c <TS_IO_Read>
 8002494:	4603      	mov	r3, r0
 8002496:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	021b      	lsls	r3, r3, #8
 800249e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80024a2:	b21a      	sxth	r2, r3
 80024a4:	4b20      	ldr	r3, [pc, #128]	; (8002528 <ft5336_TS_GetXY+0x1dc>)
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	b21b      	sxth	r3, r3
 80024aa:	4313      	orrs	r3, r2
 80024ac:	b21b      	sxth	r3, r3
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	4b1d      	ldr	r3, [pc, #116]	; (8002528 <ft5336_TS_GetXY+0x1dc>)
 80024b2:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80024b4:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <ft5336_TS_GetXY+0x1dc>)
 80024b6:	881a      	ldrh	r2, [r3, #0]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80024bc:	89fb      	ldrh	r3, [r7, #14]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	7d7a      	ldrb	r2, [r7, #21]
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f00f feb9 	bl	801223c <TS_IO_Read>
 80024ca:	4603      	mov	r3, r0
 80024cc:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80024ce:	7cfb      	ldrb	r3, [r7, #19]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	4b14      	ldr	r3, [pc, #80]	; (8002528 <ft5336_TS_GetXY+0x1dc>)
 80024d6:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80024d8:	89fb      	ldrh	r3, [r7, #14]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	7d3a      	ldrb	r2, [r7, #20]
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f00f feab 	bl	801223c <TS_IO_Read>
 80024e6:	4603      	mov	r3, r0
 80024e8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80024ea:	7cfb      	ldrb	r3, [r7, #19]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	021b      	lsls	r3, r3, #8
 80024f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80024f4:	b21a      	sxth	r2, r3
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <ft5336_TS_GetXY+0x1dc>)
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	b21b      	sxth	r3, r3
 80024fc:	4313      	orrs	r3, r2
 80024fe:	b21b      	sxth	r3, r3
 8002500:	b29a      	uxth	r2, r3
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <ft5336_TS_GetXY+0x1dc>)
 8002504:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8002506:	4b08      	ldr	r3, [pc, #32]	; (8002528 <ft5336_TS_GetXY+0x1dc>)
 8002508:	881a      	ldrh	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800250e:	4b05      	ldr	r3, [pc, #20]	; (8002524 <ft5336_TS_GetXY+0x1d8>)
 8002510:	789b      	ldrb	r3, [r3, #2]
 8002512:	3301      	adds	r3, #1
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4b03      	ldr	r3, [pc, #12]	; (8002524 <ft5336_TS_GetXY+0x1d8>)
 8002518:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800251a:	bf00      	nop
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000140 	.word	0x20000140
 8002528:	20000144 	.word	0x20000144

0800252c <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	7bfa      	ldrb	r2, [r7, #15]
 8002544:	21a4      	movs	r1, #164	; 0xa4
 8002546:	4618      	mov	r0, r3
 8002548:	f00f fe5e 	bl	8012208 <TS_IO_Write>
}
 800254c:	bf00      	nop
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8002562:	2300      	movs	r3, #0
 8002564:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	7bfa      	ldrb	r2, [r7, #15]
 800256c:	21a4      	movs	r1, #164	; 0xa4
 800256e:	4618      	mov	r0, r3
 8002570:	f00f fe4a 	bl	8012208 <TS_IO_Write>
}
 8002574:	bf00      	nop
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80025b0:	4b03      	ldr	r3, [pc, #12]	; (80025c0 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	20000140 	.word	0x20000140

080025c4 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80025c8:	f7ff fff0 	bl	80025ac <ft5336_Get_I2C_InitializedStatus>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d102      	bne.n	80025d8 <ft5336_I2C_InitializeIfRequired+0x14>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80025d2:	4b02      	ldr	r3, [pc, #8]	; (80025dc <ft5336_I2C_InitializeIfRequired+0x18>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	701a      	strb	r2, [r3, #0]
  }
}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20000140 	.word	0x20000140

080025e0 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80025ee:	68fb      	ldr	r3, [r7, #12]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_Init+0x34>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <HAL_Init+0x34>)
 8002606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800260a:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800260c:	4b08      	ldr	r3, [pc, #32]	; (8002630 <HAL_Init+0x34>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a07      	ldr	r2, [pc, #28]	; (8002630 <HAL_Init+0x34>)
 8002612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002616:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002618:	2003      	movs	r0, #3
 800261a:	f000 f91c 	bl	8002856 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800261e:	2000      	movs	r0, #0
 8002620:	f7ff fa08 	bl	8001a34 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002624:	f7fe ff00 	bl	8001428 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023c00 	.word	0x40023c00

08002634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002638:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_IncTick+0x20>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_IncTick+0x24>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4413      	add	r3, r2
 8002644:	4a04      	ldr	r2, [pc, #16]	; (8002658 <HAL_IncTick+0x24>)
 8002646:	6013      	str	r3, [r2, #0]
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	20000030 	.word	0x20000030
 8002658:	2000b7f8 	.word	0x2000b7f8

0800265c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return uwTick;
 8002660:	4b03      	ldr	r3, [pc, #12]	; (8002670 <HAL_GetTick+0x14>)
 8002662:	681b      	ldr	r3, [r3, #0]
}
 8002664:	4618      	mov	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	2000b7f8 	.word	0x2000b7f8

08002674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800267c:	f7ff ffee 	bl	800265c <HAL_GetTick>
 8002680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d005      	beq.n	800269a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_Delay+0x40>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4413      	add	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800269a:	bf00      	nop
 800269c:	f7ff ffde 	bl	800265c <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d8f7      	bhi.n	800269c <HAL_Delay+0x28>
  {
  }
}
 80026ac:	bf00      	nop
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20000030 	.word	0x20000030

080026b8 <__NVIC_SetPriorityGrouping>:
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <__NVIC_SetPriorityGrouping+0x40>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026d4:	4013      	ands	r3, r2
 80026d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <__NVIC_SetPriorityGrouping+0x44>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026e6:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <__NVIC_SetPriorityGrouping+0x40>)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	60d3      	str	r3, [r2, #12]
}
 80026ec:	bf00      	nop
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000ed00 	.word	0xe000ed00
 80026fc:	05fa0000 	.word	0x05fa0000

08002700 <__NVIC_GetPriorityGrouping>:
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <__NVIC_GetPriorityGrouping+0x18>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	0a1b      	lsrs	r3, r3, #8
 800270a:	f003 0307 	and.w	r3, r3, #7
}
 800270e:	4618      	mov	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <__NVIC_EnableIRQ>:
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	2b00      	cmp	r3, #0
 800272c:	db0b      	blt.n	8002746 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	f003 021f 	and.w	r2, r3, #31
 8002734:	4907      	ldr	r1, [pc, #28]	; (8002754 <__NVIC_EnableIRQ+0x38>)
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	2001      	movs	r0, #1
 800273e:	fa00 f202 	lsl.w	r2, r0, r2
 8002742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000e100 	.word	0xe000e100

08002758 <__NVIC_DisableIRQ>:
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	2b00      	cmp	r3, #0
 8002768:	db10      	blt.n	800278c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	f003 021f 	and.w	r2, r3, #31
 8002770:	4909      	ldr	r1, [pc, #36]	; (8002798 <__NVIC_DisableIRQ+0x40>)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	2001      	movs	r0, #1
 800277a:	fa00 f202 	lsl.w	r2, r0, r2
 800277e:	3320      	adds	r3, #32
 8002780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002784:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002788:	f3bf 8f6f 	isb	sy
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000e100 	.word	0xe000e100

0800279c <__NVIC_SetPriority>:
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	6039      	str	r1, [r7, #0]
 80027a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	db0a      	blt.n	80027c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	490c      	ldr	r1, [pc, #48]	; (80027e8 <__NVIC_SetPriority+0x4c>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	0112      	lsls	r2, r2, #4
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	440b      	add	r3, r1
 80027c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027c4:	e00a      	b.n	80027dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	4908      	ldr	r1, [pc, #32]	; (80027ec <__NVIC_SetPriority+0x50>)
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	3b04      	subs	r3, #4
 80027d4:	0112      	lsls	r2, r2, #4
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	440b      	add	r3, r1
 80027da:	761a      	strb	r2, [r3, #24]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000e100 	.word	0xe000e100
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <NVIC_EncodePriority>:
{
 80027f0:	b480      	push	{r7}
 80027f2:	b089      	sub	sp, #36	; 0x24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f1c3 0307 	rsb	r3, r3, #7
 800280a:	2b04      	cmp	r3, #4
 800280c:	bf28      	it	cs
 800280e:	2304      	movcs	r3, #4
 8002810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3304      	adds	r3, #4
 8002816:	2b06      	cmp	r3, #6
 8002818:	d902      	bls.n	8002820 <NVIC_EncodePriority+0x30>
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3b03      	subs	r3, #3
 800281e:	e000      	b.n	8002822 <NVIC_EncodePriority+0x32>
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002824:	f04f 32ff 	mov.w	r2, #4294967295
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43da      	mvns	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	401a      	ands	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002838:	f04f 31ff 	mov.w	r1, #4294967295
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	fa01 f303 	lsl.w	r3, r1, r3
 8002842:	43d9      	mvns	r1, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002848:	4313      	orrs	r3, r2
}
 800284a:	4618      	mov	r0, r3
 800284c:	3724      	adds	r7, #36	; 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff ff2a 	bl	80026b8 <__NVIC_SetPriorityGrouping>
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800287e:	f7ff ff3f 	bl	8002700 <__NVIC_GetPriorityGrouping>
 8002882:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	68b9      	ldr	r1, [r7, #8]
 8002888:	6978      	ldr	r0, [r7, #20]
 800288a:	f7ff ffb1 	bl	80027f0 <NVIC_EncodePriority>
 800288e:	4602      	mov	r2, r0
 8002890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002894:	4611      	mov	r1, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff ff80 	bl	800279c <__NVIC_SetPriority>
}
 800289c:	bf00      	nop
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ff32 	bl	800271c <__NVIC_EnableIRQ>
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ff42 	bl	8002758 <__NVIC_DisableIRQ>
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80028e0:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_MPU_Disable+0x24>)
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	4a05      	ldr	r2, [pc, #20]	; (8002900 <HAL_MPU_Disable+0x24>)
 80028ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ee:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <HAL_MPU_Disable+0x28>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	605a      	str	r2, [r3, #4]
}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	e000ed00 	.word	0xe000ed00
 8002904:	e000ed90 	.word	0xe000ed90

08002908 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002910:	4a0a      	ldr	r2, [pc, #40]	; (800293c <HAL_MPU_Enable+0x34>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_MPU_Enable+0x38>)
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	4a08      	ldr	r2, [pc, #32]	; (8002940 <HAL_MPU_Enable+0x38>)
 8002920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002924:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002926:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800292a:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	e000ed90 	.word	0xe000ed90
 8002940:	e000ed00 	.word	0xe000ed00

08002944 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	785a      	ldrb	r2, [r3, #1]
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <HAL_MPU_ConfigRegion+0x84>)
 8002952:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d029      	beq.n	80029b0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 800295c:	4a1a      	ldr	r2, [pc, #104]	; (80029c8 <HAL_MPU_ConfigRegion+0x84>)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	7b1b      	ldrb	r3, [r3, #12]
 8002968:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	7adb      	ldrb	r3, [r3, #11]
 800296e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002970:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	7a9b      	ldrb	r3, [r3, #10]
 8002976:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002978:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	7b5b      	ldrb	r3, [r3, #13]
 800297e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002980:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7b9b      	ldrb	r3, [r3, #14]
 8002986:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002988:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	7bdb      	ldrb	r3, [r3, #15]
 800298e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002990:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7a5b      	ldrb	r3, [r3, #9]
 8002996:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002998:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	7a1b      	ldrb	r3, [r3, #8]
 800299e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80029a0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	7812      	ldrb	r2, [r2, #0]
 80029a6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029a8:	4a07      	ldr	r2, [pc, #28]	; (80029c8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029aa:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029ac:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80029ae:	e005      	b.n	80029bc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_MPU_ConfigRegion+0x84>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80029b6:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <HAL_MPU_ConfigRegion+0x84>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	611a      	str	r2, [r3, #16]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000ed90 	.word	0xe000ed90

080029cc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e054      	b.n	8002a88 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7f5b      	ldrb	r3, [r3, #29]
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d105      	bne.n	80029f4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7fe fd42 	bl	8001478 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	791b      	ldrb	r3, [r3, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10c      	bne.n	8002a1c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a22      	ldr	r2, [pc, #136]	; (8002a90 <HAL_CRC_Init+0xc4>)
 8002a08:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0218 	bic.w	r2, r2, #24
 8002a18:	609a      	str	r2, [r3, #8]
 8002a1a:	e00c      	b.n	8002a36 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6899      	ldr	r1, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	461a      	mov	r2, r3
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f834 	bl	8002a94 <HAL_CRCEx_Polynomial_Set>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e028      	b.n	8002a88 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	795b      	ldrb	r3, [r3, #5]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d105      	bne.n	8002a4a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f04f 32ff 	mov.w	r2, #4294967295
 8002a46:	611a      	str	r2, [r3, #16]
 8002a48:	e004      	b.n	8002a54 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6912      	ldr	r2, [r2, #16]
 8002a52:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695a      	ldr	r2, [r3, #20]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699a      	ldr	r2, [r3, #24]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	04c11db7 	.word	0x04c11db7

08002a94 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002aa4:	231f      	movs	r3, #31
 8002aa6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002aa8:	bf00      	nop
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1e5a      	subs	r2, r3, #1
 8002aae:	613a      	str	r2, [r7, #16]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d009      	beq.n	8002ac8 <HAL_CRCEx_Polynomial_Set+0x34>
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f003 031f 	and.w	r3, r3, #31
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b18      	cmp	r3, #24
 8002acc:	d846      	bhi.n	8002b5c <HAL_CRCEx_Polynomial_Set+0xc8>
 8002ace:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad4:	08002b63 	.word	0x08002b63
 8002ad8:	08002b5d 	.word	0x08002b5d
 8002adc:	08002b5d 	.word	0x08002b5d
 8002ae0:	08002b5d 	.word	0x08002b5d
 8002ae4:	08002b5d 	.word	0x08002b5d
 8002ae8:	08002b5d 	.word	0x08002b5d
 8002aec:	08002b5d 	.word	0x08002b5d
 8002af0:	08002b5d 	.word	0x08002b5d
 8002af4:	08002b51 	.word	0x08002b51
 8002af8:	08002b5d 	.word	0x08002b5d
 8002afc:	08002b5d 	.word	0x08002b5d
 8002b00:	08002b5d 	.word	0x08002b5d
 8002b04:	08002b5d 	.word	0x08002b5d
 8002b08:	08002b5d 	.word	0x08002b5d
 8002b0c:	08002b5d 	.word	0x08002b5d
 8002b10:	08002b5d 	.word	0x08002b5d
 8002b14:	08002b45 	.word	0x08002b45
 8002b18:	08002b5d 	.word	0x08002b5d
 8002b1c:	08002b5d 	.word	0x08002b5d
 8002b20:	08002b5d 	.word	0x08002b5d
 8002b24:	08002b5d 	.word	0x08002b5d
 8002b28:	08002b5d 	.word	0x08002b5d
 8002b2c:	08002b5d 	.word	0x08002b5d
 8002b30:	08002b5d 	.word	0x08002b5d
 8002b34:	08002b39 	.word	0x08002b39
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	2b06      	cmp	r3, #6
 8002b3c:	d913      	bls.n	8002b66 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002b42:	e010      	b.n	8002b66 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	2b07      	cmp	r3, #7
 8002b48:	d90f      	bls.n	8002b6a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002b4e:	e00c      	b.n	8002b6a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	2b0f      	cmp	r3, #15
 8002b54:	d90b      	bls.n	8002b6e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002b5a:	e008      	b.n	8002b6e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b60:	e006      	b.n	8002b70 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b62:	bf00      	nop
 8002b64:	e004      	b.n	8002b70 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b66:	bf00      	nop
 8002b68:	e002      	b.n	8002b70 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b6a:	bf00      	nop
 8002b6c:	e000      	b.n	8002b70 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b6e:	bf00      	nop
  }
  if (status == HAL_OK)
 8002b70:	7dfb      	ldrb	r3, [r7, #23]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10d      	bne.n	8002b92 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f023 0118 	bic.w	r1, r3, #24
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	371c      	adds	r7, #28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bae:	f7ff fd55 	bl	800265c <HAL_GetTick>
 8002bb2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d008      	beq.n	8002bd2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2280      	movs	r2, #128	; 0x80
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e052      	b.n	8002c78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0216 	bic.w	r2, r2, #22
 8002be0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bf0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d103      	bne.n	8002c02 <HAL_DMA_Abort+0x62>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d007      	beq.n	8002c12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0208 	bic.w	r2, r2, #8
 8002c10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0201 	bic.w	r2, r2, #1
 8002c20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c22:	e013      	b.n	8002c4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c24:	f7ff fd1a 	bl	800265c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b05      	cmp	r3, #5
 8002c30:	d90c      	bls.n	8002c4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2220      	movs	r2, #32
 8002c36:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2203      	movs	r2, #3
 8002c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e015      	b.n	8002c78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1e4      	bne.n	8002c24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5e:	223f      	movs	r2, #63	; 0x3f
 8002c60:	409a      	lsls	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e039      	b.n	8002d06 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d106      	bne.n	8002cac <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7fe fc06 	bl	80014b8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd0:	f023 0107 	bic.w	r1, r3, #7
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <HAL_DMA2D_Init+0x90>)
 8002ce8:	4013      	ands	r3, r2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68d1      	ldr	r1, [r2, #12]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	430b      	orrs	r3, r1
 8002cf4:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	ffffc000 	.word	0xffffc000

08002d14 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e05f      	b.n	8002de6 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8002d26:	4b32      	ldr	r3, [pc, #200]	; (8002df0 <HAL_DMA2D_DeInit+0xdc>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d02e      	beq.n	8002d90 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d107      	bne.n	8002d50 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f8c1 	bl	8002ec8 <HAL_DMA2D_Abort>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d021      	beq.n	8002d90 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e04a      	b.n	8002de6 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b20      	cmp	r3, #32
 8002d5c:	d108      	bne.n	8002d70 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8002d5e:	2100      	movs	r1, #0
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f8f7 	bl	8002f54 <HAL_DMA2D_CLUTLoading_Abort>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d011      	beq.n	8002d90 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e03a      	b.n	8002de6 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	f003 0320 	and.w	r3, r3, #32
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	d108      	bne.n	8002d90 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8002d7e:	2101      	movs	r1, #1
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f8e7 	bl	8002f54 <HAL_DMA2D_CLUTLoading_Abort>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e02a      	b.n	8002de6 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	223f      	movs	r2, #63	; 0x3f
 8002d9e:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2200      	movs	r2, #0
 8002da6:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2200      	movs	r2, #0
 8002dae:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2200      	movs	r2, #0
 8002db6:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7fe fb9b 	bl	8001504 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40023800 	.word	0x40023800

08002df4 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_DMA2D_Start_IT+0x1c>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e020      	b.n	8002e52 <HAL_DMA2D_Start_IT+0x5e>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 fa84 	bl	8003338 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8002e3e:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b086      	sub	sp, #24
 8002e5e:	af02      	add	r7, sp, #8
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_DMA2D_BlendingStart_IT+0x1c>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e024      	b.n	8002ec0 <HAL_DMA2D_BlendingStart_IT+0x66>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2202      	movs	r2, #2
 8002e82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	68b9      	ldr	r1, [r7, #8]
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 fa4d 	bl	8003338 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8002eac:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f042 0201 	orr.w	r2, r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 0205 	bic.w	r2, r3, #5
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0204 	orr.w	r2, r2, #4
 8002ee2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ee4:	f7ff fbba 	bl	800265c <HAL_GetTick>
 8002ee8:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002eea:	e017      	b.n	8002f1c <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8002eec:	f7ff fbb6 	bl	800265c <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002efa:	d90f      	bls.n	8002f1c <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f00:	f043 0220 	orr.w	r2, r3, #32
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e017      	b.n	8002f4c <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1e0      	bne.n	8002eec <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8002f38:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3324      	adds	r3, #36	; 0x24
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0204 	orr.w	r2, r2, #4
 8002f74:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d103      	bne.n	8002f84 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	331c      	adds	r3, #28
 8002f82:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8002f84:	f7ff fb6a 	bl	800265c <HAL_GetTick>
 8002f88:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8002f8a:	e017      	b.n	8002fbc <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8002f8c:	f7ff fb66 	bl	800265c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f9a:	d90f      	bls.n	8002fbc <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa0:	f043 0220 	orr.w	r2, r3, #32
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2203      	movs	r2, #3
 8002fac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e016      	b.n	8002fea <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0320 	and.w	r3, r3, #32
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e1      	bne.n	8002f8c <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8002fd6:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d026      	beq.n	8003062 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301a:	2b00      	cmp	r3, #0
 800301c:	d021      	beq.n	8003062 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800302c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003032:	f043 0201 	orr.w	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2201      	movs	r2, #1
 8003040:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2204      	movs	r2, #4
 8003046:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b00      	cmp	r3, #0
 800306a:	d026      	beq.n	80030ba <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d021      	beq.n	80030ba <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003084:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2220      	movs	r2, #32
 800308c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003092:	f043 0202 	orr.w	r2, r3, #2
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2204      	movs	r2, #4
 800309e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d026      	beq.n	8003112 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d021      	beq.n	8003112 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030dc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2208      	movs	r2, #8
 80030e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ea:	f043 0204 	orr.w	r2, r3, #4
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2204      	movs	r2, #4
 80030f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d013      	beq.n	8003144 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00e      	beq.n	8003144 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003134:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2204      	movs	r2, #4
 800313c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f853 	bl	80031ea <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d024      	beq.n	8003198 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003154:	2b00      	cmp	r3, #0
 8003156:	d01f      	beq.n	8003198 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003166:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2202      	movs	r2, #2
 800316e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f003 0310 	and.w	r3, r3, #16
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d01f      	beq.n	80031e2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d01a      	beq.n	80031e2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031ba:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2210      	movs	r2, #16
 80031c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f80e 	bl	80031fe <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80031e2:	bf00      	nop
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
	...

08003214 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_DMA2D_ConfigLayer+0x20>
 8003230:	2302      	movs	r3, #2
 8003232:	e079      	b.n	8003328 <HAL_DMA2D_ConfigLayer+0x114>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	3318      	adds	r3, #24
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	4413      	add	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	041b      	lsls	r3, r3, #16
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800325e:	4b35      	ldr	r3, [pc, #212]	; (8003334 <HAL_DMA2D_ConfigLayer+0x120>)
 8003260:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b0a      	cmp	r3, #10
 8003268:	d003      	beq.n	8003272 <HAL_DMA2D_ConfigLayer+0x5e>
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b09      	cmp	r3, #9
 8003270:	d107      	bne.n	8003282 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	4313      	orrs	r3, r2
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	e005      	b.n	800328e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	061b      	lsls	r3, r3, #24
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d120      	bne.n	80032d6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	43db      	mvns	r3, r3
 800329e:	ea02 0103 	and.w	r1, r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b0a      	cmp	r3, #10
 80032bc:	d003      	beq.n	80032c6 <HAL_DMA2D_ConfigLayer+0xb2>
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b09      	cmp	r3, #9
 80032c4:	d127      	bne.n	8003316 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80032d2:	629a      	str	r2, [r3, #40]	; 0x28
 80032d4:	e01f      	b.n	8003316 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69da      	ldr	r2, [r3, #28]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	43db      	mvns	r3, r3
 80032e0:	ea02 0103 	and.w	r1, r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b0a      	cmp	r3, #10
 80032fe:	d003      	beq.n	8003308 <HAL_DMA2D_ConfigLayer+0xf4>
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2b09      	cmp	r3, #9
 8003306:	d106      	bne.n	8003316 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003314:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	371c      	adds	r7, #28
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	ff03000f 	.word	0xff03000f

08003338 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003338:	b480      	push	{r7}
 800333a:	b08b      	sub	sp, #44	; 0x2c
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	041a      	lsls	r2, r3, #16
 8003354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003356:	431a      	orrs	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003370:	d174      	bne.n	800345c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003378:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003380:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003388:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d108      	bne.n	80033aa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	431a      	orrs	r2, r3
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
 80033a8:	e053      	b.n	8003452 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d106      	bne.n	80033c0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
 80033be:	e048      	b.n	8003452 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d111      	bne.n	80033ec <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	0cdb      	lsrs	r3, r3, #19
 80033cc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	0a9b      	lsrs	r3, r3, #10
 80033d2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	08db      	lsrs	r3, r3, #3
 80033d8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	02db      	lsls	r3, r3, #11
 80033e2:	4313      	orrs	r3, r2
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ea:	e032      	b.n	8003452 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d117      	bne.n	8003424 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	0fdb      	lsrs	r3, r3, #31
 80033f8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	0cdb      	lsrs	r3, r3, #19
 80033fe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	0adb      	lsrs	r3, r3, #11
 8003404:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	08db      	lsrs	r3, r3, #3
 800340a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	029b      	lsls	r3, r3, #10
 8003414:	431a      	orrs	r2, r3
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	03db      	lsls	r3, r3, #15
 800341a:	4313      	orrs	r3, r2
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	4313      	orrs	r3, r2
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
 8003422:	e016      	b.n	8003452 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	0f1b      	lsrs	r3, r3, #28
 8003428:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	0d1b      	lsrs	r3, r3, #20
 800342e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	0b1b      	lsrs	r3, r3, #12
 8003434:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	091b      	lsrs	r3, r3, #4
 800343a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	011a      	lsls	r2, r3, #4
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	431a      	orrs	r2, r3
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	031b      	lsls	r3, r3, #12
 800344a:	4313      	orrs	r3, r2
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003458:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800345a:	e003      	b.n	8003464 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	60da      	str	r2, [r3, #12]
}
 8003464:	bf00      	nop
 8003466:	372c      	adds	r7, #44	; 0x2c
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003470:	b480      	push	{r7}
 8003472:	b089      	sub	sp, #36	; 0x24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003482:	2300      	movs	r3, #0
 8003484:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003486:	2300      	movs	r3, #0
 8003488:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
 800348e:	e175      	b.n	800377c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003490:	2201      	movs	r2, #1
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	4013      	ands	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	f040 8164 	bne.w	8003776 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d003      	beq.n	80034be <HAL_GPIO_Init+0x4e>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b12      	cmp	r3, #18
 80034bc:	d123      	bne.n	8003506 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	08da      	lsrs	r2, r3, #3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3208      	adds	r2, #8
 80034c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	220f      	movs	r2, #15
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4013      	ands	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	691a      	ldr	r2, [r3, #16]
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	08da      	lsrs	r2, r3, #3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3208      	adds	r2, #8
 8003500:	69b9      	ldr	r1, [r7, #24]
 8003502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	2203      	movs	r2, #3
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43db      	mvns	r3, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4013      	ands	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 0203 	and.w	r2, r3, #3
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4313      	orrs	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d00b      	beq.n	800355a <HAL_GPIO_Init+0xea>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d007      	beq.n	800355a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800354e:	2b11      	cmp	r3, #17
 8003550:	d003      	beq.n	800355a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b12      	cmp	r3, #18
 8003558:	d130      	bne.n	80035bc <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	2203      	movs	r2, #3
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43db      	mvns	r3, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4013      	ands	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4313      	orrs	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003590:	2201      	movs	r2, #1
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f003 0201 	and.w	r2, r3, #1
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	2203      	movs	r2, #3
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	43db      	mvns	r3, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4013      	ands	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 80be 	beq.w	8003776 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035fa:	4b65      	ldr	r3, [pc, #404]	; (8003790 <HAL_GPIO_Init+0x320>)
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	4a64      	ldr	r2, [pc, #400]	; (8003790 <HAL_GPIO_Init+0x320>)
 8003600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003604:	6453      	str	r3, [r2, #68]	; 0x44
 8003606:	4b62      	ldr	r3, [pc, #392]	; (8003790 <HAL_GPIO_Init+0x320>)
 8003608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003612:	4a60      	ldr	r2, [pc, #384]	; (8003794 <HAL_GPIO_Init+0x324>)
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	089b      	lsrs	r3, r3, #2
 8003618:	3302      	adds	r3, #2
 800361a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800361e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	220f      	movs	r2, #15
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4013      	ands	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a57      	ldr	r2, [pc, #348]	; (8003798 <HAL_GPIO_Init+0x328>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d037      	beq.n	80036ae <HAL_GPIO_Init+0x23e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a56      	ldr	r2, [pc, #344]	; (800379c <HAL_GPIO_Init+0x32c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d031      	beq.n	80036aa <HAL_GPIO_Init+0x23a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a55      	ldr	r2, [pc, #340]	; (80037a0 <HAL_GPIO_Init+0x330>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d02b      	beq.n	80036a6 <HAL_GPIO_Init+0x236>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a54      	ldr	r2, [pc, #336]	; (80037a4 <HAL_GPIO_Init+0x334>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d025      	beq.n	80036a2 <HAL_GPIO_Init+0x232>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a53      	ldr	r2, [pc, #332]	; (80037a8 <HAL_GPIO_Init+0x338>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01f      	beq.n	800369e <HAL_GPIO_Init+0x22e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a52      	ldr	r2, [pc, #328]	; (80037ac <HAL_GPIO_Init+0x33c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d019      	beq.n	800369a <HAL_GPIO_Init+0x22a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a51      	ldr	r2, [pc, #324]	; (80037b0 <HAL_GPIO_Init+0x340>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d013      	beq.n	8003696 <HAL_GPIO_Init+0x226>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a50      	ldr	r2, [pc, #320]	; (80037b4 <HAL_GPIO_Init+0x344>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00d      	beq.n	8003692 <HAL_GPIO_Init+0x222>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a4f      	ldr	r2, [pc, #316]	; (80037b8 <HAL_GPIO_Init+0x348>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d007      	beq.n	800368e <HAL_GPIO_Init+0x21e>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a4e      	ldr	r2, [pc, #312]	; (80037bc <HAL_GPIO_Init+0x34c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d101      	bne.n	800368a <HAL_GPIO_Init+0x21a>
 8003686:	2309      	movs	r3, #9
 8003688:	e012      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 800368a:	230a      	movs	r3, #10
 800368c:	e010      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 800368e:	2308      	movs	r3, #8
 8003690:	e00e      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 8003692:	2307      	movs	r3, #7
 8003694:	e00c      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 8003696:	2306      	movs	r3, #6
 8003698:	e00a      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 800369a:	2305      	movs	r3, #5
 800369c:	e008      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 800369e:	2304      	movs	r3, #4
 80036a0:	e006      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 80036a2:	2303      	movs	r3, #3
 80036a4:	e004      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e002      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <HAL_GPIO_Init+0x240>
 80036ae:	2300      	movs	r3, #0
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	f002 0203 	and.w	r2, r2, #3
 80036b6:	0092      	lsls	r2, r2, #2
 80036b8:	4093      	lsls	r3, r2
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80036c0:	4934      	ldr	r1, [pc, #208]	; (8003794 <HAL_GPIO_Init+0x324>)
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	089b      	lsrs	r3, r3, #2
 80036c6:	3302      	adds	r3, #2
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036ce:	4b3c      	ldr	r3, [pc, #240]	; (80037c0 <HAL_GPIO_Init+0x350>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	43db      	mvns	r3, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4013      	ands	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036f2:	4a33      	ldr	r2, [pc, #204]	; (80037c0 <HAL_GPIO_Init+0x350>)
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80036f8:	4b31      	ldr	r3, [pc, #196]	; (80037c0 <HAL_GPIO_Init+0x350>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	43db      	mvns	r3, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800371c:	4a28      	ldr	r2, [pc, #160]	; (80037c0 <HAL_GPIO_Init+0x350>)
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003722:	4b27      	ldr	r3, [pc, #156]	; (80037c0 <HAL_GPIO_Init+0x350>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	43db      	mvns	r3, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4013      	ands	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003746:	4a1e      	ldr	r2, [pc, #120]	; (80037c0 <HAL_GPIO_Init+0x350>)
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800374c:	4b1c      	ldr	r3, [pc, #112]	; (80037c0 <HAL_GPIO_Init+0x350>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003770:	4a13      	ldr	r2, [pc, #76]	; (80037c0 <HAL_GPIO_Init+0x350>)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	3301      	adds	r3, #1
 800377a:	61fb      	str	r3, [r7, #28]
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	2b0f      	cmp	r3, #15
 8003780:	f67f ae86 	bls.w	8003490 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003784:	bf00      	nop
 8003786:	3724      	adds	r7, #36	; 0x24
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	40023800 	.word	0x40023800
 8003794:	40013800 	.word	0x40013800
 8003798:	40020000 	.word	0x40020000
 800379c:	40020400 	.word	0x40020400
 80037a0:	40020800 	.word	0x40020800
 80037a4:	40020c00 	.word	0x40020c00
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40021400 	.word	0x40021400
 80037b0:	40021800 	.word	0x40021800
 80037b4:	40021c00 	.word	0x40021c00
 80037b8:	40022000 	.word	0x40022000
 80037bc:	40022400 	.word	0x40022400
 80037c0:	40013c00 	.word	0x40013c00

080037c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	e0d9      	b.n	8003994 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80037e0:	2201      	movs	r2, #1
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4013      	ands	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	f040 80c9 	bne.w	800398e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80037fc:	4a6a      	ldr	r2, [pc, #424]	; (80039a8 <HAL_GPIO_DeInit+0x1e4>)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	089b      	lsrs	r3, r3, #2
 8003802:	3302      	adds	r3, #2
 8003804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003808:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	220f      	movs	r2, #15
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	4013      	ands	r3, r2
 800381c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a62      	ldr	r2, [pc, #392]	; (80039ac <HAL_GPIO_DeInit+0x1e8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d037      	beq.n	8003896 <HAL_GPIO_DeInit+0xd2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a61      	ldr	r2, [pc, #388]	; (80039b0 <HAL_GPIO_DeInit+0x1ec>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d031      	beq.n	8003892 <HAL_GPIO_DeInit+0xce>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a60      	ldr	r2, [pc, #384]	; (80039b4 <HAL_GPIO_DeInit+0x1f0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d02b      	beq.n	800388e <HAL_GPIO_DeInit+0xca>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a5f      	ldr	r2, [pc, #380]	; (80039b8 <HAL_GPIO_DeInit+0x1f4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d025      	beq.n	800388a <HAL_GPIO_DeInit+0xc6>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a5e      	ldr	r2, [pc, #376]	; (80039bc <HAL_GPIO_DeInit+0x1f8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d01f      	beq.n	8003886 <HAL_GPIO_DeInit+0xc2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a5d      	ldr	r2, [pc, #372]	; (80039c0 <HAL_GPIO_DeInit+0x1fc>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d019      	beq.n	8003882 <HAL_GPIO_DeInit+0xbe>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a5c      	ldr	r2, [pc, #368]	; (80039c4 <HAL_GPIO_DeInit+0x200>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d013      	beq.n	800387e <HAL_GPIO_DeInit+0xba>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a5b      	ldr	r2, [pc, #364]	; (80039c8 <HAL_GPIO_DeInit+0x204>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00d      	beq.n	800387a <HAL_GPIO_DeInit+0xb6>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a5a      	ldr	r2, [pc, #360]	; (80039cc <HAL_GPIO_DeInit+0x208>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d007      	beq.n	8003876 <HAL_GPIO_DeInit+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a59      	ldr	r2, [pc, #356]	; (80039d0 <HAL_GPIO_DeInit+0x20c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d101      	bne.n	8003872 <HAL_GPIO_DeInit+0xae>
 800386e:	2309      	movs	r3, #9
 8003870:	e012      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 8003872:	230a      	movs	r3, #10
 8003874:	e010      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 8003876:	2308      	movs	r3, #8
 8003878:	e00e      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 800387a:	2307      	movs	r3, #7
 800387c:	e00c      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 800387e:	2306      	movs	r3, #6
 8003880:	e00a      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 8003882:	2305      	movs	r3, #5
 8003884:	e008      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 8003886:	2304      	movs	r3, #4
 8003888:	e006      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 800388a:	2303      	movs	r3, #3
 800388c:	e004      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 800388e:	2302      	movs	r3, #2
 8003890:	e002      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 8003896:	2300      	movs	r3, #0
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	f002 0203 	and.w	r2, r2, #3
 800389e:	0092      	lsls	r2, r2, #2
 80038a0:	4093      	lsls	r3, r2
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d132      	bne.n	800390e <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	220f      	movs	r2, #15
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80038b8:	4a3b      	ldr	r2, [pc, #236]	; (80039a8 <HAL_GPIO_DeInit+0x1e4>)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	089b      	lsrs	r3, r3, #2
 80038be:	3302      	adds	r3, #2
 80038c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	43da      	mvns	r2, r3
 80038c8:	4837      	ldr	r0, [pc, #220]	; (80039a8 <HAL_GPIO_DeInit+0x1e4>)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	089b      	lsrs	r3, r3, #2
 80038ce:	400a      	ands	r2, r1
 80038d0:	3302      	adds	r3, #2
 80038d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80038d6:	4b3f      	ldr	r3, [pc, #252]	; (80039d4 <HAL_GPIO_DeInit+0x210>)
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	43db      	mvns	r3, r3
 80038de:	493d      	ldr	r1, [pc, #244]	; (80039d4 <HAL_GPIO_DeInit+0x210>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80038e4:	4b3b      	ldr	r3, [pc, #236]	; (80039d4 <HAL_GPIO_DeInit+0x210>)
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	43db      	mvns	r3, r3
 80038ec:	4939      	ldr	r1, [pc, #228]	; (80039d4 <HAL_GPIO_DeInit+0x210>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80038f2:	4b38      	ldr	r3, [pc, #224]	; (80039d4 <HAL_GPIO_DeInit+0x210>)
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	43db      	mvns	r3, r3
 80038fa:	4936      	ldr	r1, [pc, #216]	; (80039d4 <HAL_GPIO_DeInit+0x210>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003900:	4b34      	ldr	r3, [pc, #208]	; (80039d4 <HAL_GPIO_DeInit+0x210>)
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	43db      	mvns	r3, r3
 8003908:	4932      	ldr	r1, [pc, #200]	; (80039d4 <HAL_GPIO_DeInit+0x210>)
 800390a:	4013      	ands	r3, r2
 800390c:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	2103      	movs	r1, #3
 8003918:	fa01 f303 	lsl.w	r3, r1, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	401a      	ands	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	08da      	lsrs	r2, r3, #3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3208      	adds	r2, #8
 800392c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	220f      	movs	r2, #15
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43db      	mvns	r3, r3
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	08d2      	lsrs	r2, r2, #3
 8003944:	4019      	ands	r1, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3208      	adds	r2, #8
 800394a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	2103      	movs	r1, #3
 8003958:	fa01 f303 	lsl.w	r3, r1, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	401a      	ands	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	2101      	movs	r1, #1
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	fa01 f303 	lsl.w	r3, r1, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	401a      	ands	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	2103      	movs	r1, #3
 8003982:	fa01 f303 	lsl.w	r3, r1, r3
 8003986:	43db      	mvns	r3, r3
 8003988:	401a      	ands	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	3301      	adds	r3, #1
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	2b0f      	cmp	r3, #15
 8003998:	f67f af22 	bls.w	80037e0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800399c:	bf00      	nop
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	40013800 	.word	0x40013800
 80039ac:	40020000 	.word	0x40020000
 80039b0:	40020400 	.word	0x40020400
 80039b4:	40020800 	.word	0x40020800
 80039b8:	40020c00 	.word	0x40020c00
 80039bc:	40021000 	.word	0x40021000
 80039c0:	40021400 	.word	0x40021400
 80039c4:	40021800 	.word	0x40021800
 80039c8:	40021c00 	.word	0x40021c00
 80039cc:	40022000 	.word	0x40022000
 80039d0:	40022400 	.word	0x40022400
 80039d4:	40013c00 	.word	0x40013c00

080039d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	807b      	strh	r3, [r7, #2]
 80039e4:	4613      	mov	r3, r2
 80039e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039e8:	787b      	ldrb	r3, [r7, #1]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039ee:	887a      	ldrh	r2, [r7, #2]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80039f4:	e003      	b.n	80039fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80039f6:	887b      	ldrh	r3, [r7, #2]
 80039f8:	041a      	lsls	r2, r3, #16
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	619a      	str	r2, [r3, #24]
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
	...

08003a0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e07f      	b.n	8003b1e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fd fd80 	bl	8001538 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2224      	movs	r2, #36	; 0x24
 8003a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0201 	bic.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d107      	bne.n	8003a86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a82:	609a      	str	r2, [r3, #8]
 8003a84:	e006      	b.n	8003a94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d104      	bne.n	8003aa6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003aa4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6859      	ldr	r1, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4b1d      	ldr	r3, [pc, #116]	; (8003b28 <HAL_I2C_Init+0x11c>)
 8003ab2:	430b      	orrs	r3, r1
 8003ab4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ac4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691a      	ldr	r2, [r3, #16]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	ea42 0103 	orr.w	r1, r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	021a      	lsls	r2, r3, #8
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69d9      	ldr	r1, [r3, #28]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1a      	ldr	r2, [r3, #32]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	02008000 	.word	0x02008000

08003b2c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e021      	b.n	8003b82 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2224      	movs	r2, #36	; 0x24
 8003b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0201 	bic.w	r2, r2, #1
 8003b54:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7fd fd32 	bl	80015c0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	4608      	mov	r0, r1
 8003b96:	4611      	mov	r1, r2
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	817b      	strh	r3, [r7, #10]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	813b      	strh	r3, [r7, #8]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	f040 80f9 	bne.w	8003da6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <HAL_I2C_Mem_Write+0x34>
 8003bba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d105      	bne.n	8003bcc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bc6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0ed      	b.n	8003da8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <HAL_I2C_Mem_Write+0x4e>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e0e6      	b.n	8003da8 <HAL_I2C_Mem_Write+0x21c>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003be2:	f7fe fd3b 	bl	800265c <HAL_GetTick>
 8003be6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	2319      	movs	r3, #25
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 fac3 	bl	8004180 <I2C_WaitOnFlagUntilTimeout>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e0d1      	b.n	8003da8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2221      	movs	r2, #33	; 0x21
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2240      	movs	r2, #64	; 0x40
 8003c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a3a      	ldr	r2, [r7, #32]
 8003c1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c2c:	88f8      	ldrh	r0, [r7, #6]
 8003c2e:	893a      	ldrh	r2, [r7, #8]
 8003c30:	8979      	ldrh	r1, [r7, #10]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	9301      	str	r3, [sp, #4]
 8003c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f9d3 	bl	8003fe8 <I2C_RequestMemoryWrite>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e0a9      	b.n	8003da8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	2bff      	cmp	r3, #255	; 0xff
 8003c5c:	d90e      	bls.n	8003c7c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	22ff      	movs	r2, #255	; 0xff
 8003c62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	8979      	ldrh	r1, [r7, #10]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 fba5 	bl	80043c4 <I2C_TransferConfig>
 8003c7a:	e00f      	b.n	8003c9c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	8979      	ldrh	r1, [r7, #10]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fb94 	bl	80043c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 faad 	bl	8004200 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e07b      	b.n	8003da8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	781a      	ldrb	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d034      	beq.n	8003d54 <HAL_I2C_Mem_Write+0x1c8>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d130      	bne.n	8003d54 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2180      	movs	r1, #128	; 0x80
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 fa3f 	bl	8004180 <I2C_WaitOnFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e04d      	b.n	8003da8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	2bff      	cmp	r3, #255	; 0xff
 8003d14:	d90e      	bls.n	8003d34 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	22ff      	movs	r2, #255	; 0xff
 8003d1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	8979      	ldrh	r1, [r7, #10]
 8003d24:	2300      	movs	r3, #0
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 fb49 	bl	80043c4 <I2C_TransferConfig>
 8003d32:	e00f      	b.n	8003d54 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	8979      	ldrh	r1, [r7, #10]
 8003d46:	2300      	movs	r3, #0
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 fb38 	bl	80043c4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d19e      	bne.n	8003c9c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 fa8c 	bl	8004280 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e01a      	b.n	8003da8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2220      	movs	r2, #32
 8003d78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6859      	ldr	r1, [r3, #4]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <HAL_I2C_Mem_Write+0x224>)
 8003d86:	400b      	ands	r3, r1
 8003d88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	e000      	b.n	8003da8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003da6:	2302      	movs	r3, #2
  }
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	fe00e800 	.word	0xfe00e800

08003db4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	4608      	mov	r0, r1
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	817b      	strh	r3, [r7, #10]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	813b      	strh	r3, [r7, #8]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	f040 80fd 	bne.w	8003fd6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <HAL_I2C_Mem_Read+0x34>
 8003de2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d105      	bne.n	8003df4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0f1      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_I2C_Mem_Read+0x4e>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e0ea      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x224>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e0a:	f7fe fc27 	bl	800265c <HAL_GetTick>
 8003e0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	2319      	movs	r3, #25
 8003e16:	2201      	movs	r2, #1
 8003e18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 f9af 	bl	8004180 <I2C_WaitOnFlagUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0d5      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2222      	movs	r2, #34	; 0x22
 8003e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2240      	movs	r2, #64	; 0x40
 8003e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6a3a      	ldr	r2, [r7, #32]
 8003e46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e54:	88f8      	ldrh	r0, [r7, #6]
 8003e56:	893a      	ldrh	r2, [r7, #8]
 8003e58:	8979      	ldrh	r1, [r7, #10]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	9301      	str	r3, [sp, #4]
 8003e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	4603      	mov	r3, r0
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f913 	bl	8004090 <I2C_RequestMemoryRead>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0ad      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2bff      	cmp	r3, #255	; 0xff
 8003e84:	d90e      	bls.n	8003ea4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	22ff      	movs	r2, #255	; 0xff
 8003e8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	8979      	ldrh	r1, [r7, #10]
 8003e94:	4b52      	ldr	r3, [pc, #328]	; (8003fe0 <HAL_I2C_Mem_Read+0x22c>)
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 fa91 	bl	80043c4 <I2C_TransferConfig>
 8003ea2:	e00f      	b.n	8003ec4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	8979      	ldrh	r1, [r7, #10]
 8003eb6:	4b4a      	ldr	r3, [pc, #296]	; (8003fe0 <HAL_I2C_Mem_Read+0x22c>)
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 fa80 	bl	80043c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2104      	movs	r1, #4
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f956 	bl	8004180 <I2C_WaitOnFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e07c      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d034      	beq.n	8003f84 <HAL_I2C_Mem_Read+0x1d0>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d130      	bne.n	8003f84 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f28:	2200      	movs	r2, #0
 8003f2a:	2180      	movs	r1, #128	; 0x80
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 f927 	bl	8004180 <I2C_WaitOnFlagUntilTimeout>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e04d      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2bff      	cmp	r3, #255	; 0xff
 8003f44:	d90e      	bls.n	8003f64 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	22ff      	movs	r2, #255	; 0xff
 8003f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	8979      	ldrh	r1, [r7, #10]
 8003f54:	2300      	movs	r3, #0
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 fa31 	bl	80043c4 <I2C_TransferConfig>
 8003f62:	e00f      	b.n	8003f84 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	8979      	ldrh	r1, [r7, #10]
 8003f76:	2300      	movs	r3, #0
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 fa20 	bl	80043c4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d19a      	bne.n	8003ec4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f974 	bl	8004280 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e01a      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6859      	ldr	r1, [r3, #4]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <HAL_I2C_Mem_Read+0x230>)
 8003fb6:	400b      	ands	r3, r1
 8003fb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e000      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003fd6:	2302      	movs	r3, #2
  }
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	80002400 	.word	0x80002400
 8003fe4:	fe00e800 	.word	0xfe00e800

08003fe8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	817b      	strh	r3, [r7, #10]
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	813b      	strh	r3, [r7, #8]
 8003ffe:	4613      	mov	r3, r2
 8004000:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	b2da      	uxtb	r2, r3
 8004006:	8979      	ldrh	r1, [r7, #10]
 8004008:	4b20      	ldr	r3, [pc, #128]	; (800408c <I2C_RequestMemoryWrite+0xa4>)
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f9d7 	bl	80043c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004016:	69fa      	ldr	r2, [r7, #28]
 8004018:	69b9      	ldr	r1, [r7, #24]
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f8f0 	bl	8004200 <I2C_WaitOnTXISFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e02c      	b.n	8004084 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800402a:	88fb      	ldrh	r3, [r7, #6]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d105      	bne.n	800403c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004030:	893b      	ldrh	r3, [r7, #8]
 8004032:	b2da      	uxtb	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	629a      	str	r2, [r3, #40]	; 0x28
 800403a:	e015      	b.n	8004068 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800403c:	893b      	ldrh	r3, [r7, #8]
 800403e:	0a1b      	lsrs	r3, r3, #8
 8004040:	b29b      	uxth	r3, r3
 8004042:	b2da      	uxtb	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800404a:	69fa      	ldr	r2, [r7, #28]
 800404c:	69b9      	ldr	r1, [r7, #24]
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 f8d6 	bl	8004200 <I2C_WaitOnTXISFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e012      	b.n	8004084 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800405e:	893b      	ldrh	r3, [r7, #8]
 8004060:	b2da      	uxtb	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	2200      	movs	r2, #0
 8004070:	2180      	movs	r1, #128	; 0x80
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 f884 	bl	8004180 <I2C_WaitOnFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	80002000 	.word	0x80002000

08004090 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af02      	add	r7, sp, #8
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	4608      	mov	r0, r1
 800409a:	4611      	mov	r1, r2
 800409c:	461a      	mov	r2, r3
 800409e:	4603      	mov	r3, r0
 80040a0:	817b      	strh	r3, [r7, #10]
 80040a2:	460b      	mov	r3, r1
 80040a4:	813b      	strh	r3, [r7, #8]
 80040a6:	4613      	mov	r3, r2
 80040a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	8979      	ldrh	r1, [r7, #10]
 80040b0:	4b20      	ldr	r3, [pc, #128]	; (8004134 <I2C_RequestMemoryRead+0xa4>)
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	2300      	movs	r3, #0
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f984 	bl	80043c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	69b9      	ldr	r1, [r7, #24]
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f89d 	bl	8004200 <I2C_WaitOnTXISFlagUntilTimeout>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e02c      	b.n	800412a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040d0:	88fb      	ldrh	r3, [r7, #6]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d105      	bne.n	80040e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040d6:	893b      	ldrh	r3, [r7, #8]
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	629a      	str	r2, [r3, #40]	; 0x28
 80040e0:	e015      	b.n	800410e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040e2:	893b      	ldrh	r3, [r7, #8]
 80040e4:	0a1b      	lsrs	r3, r3, #8
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040f0:	69fa      	ldr	r2, [r7, #28]
 80040f2:	69b9      	ldr	r1, [r7, #24]
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f883 	bl	8004200 <I2C_WaitOnTXISFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e012      	b.n	800412a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004104:	893b      	ldrh	r3, [r7, #8]
 8004106:	b2da      	uxtb	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	2200      	movs	r2, #0
 8004116:	2140      	movs	r1, #64	; 0x40
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 f831 	bl	8004180 <I2C_WaitOnFlagUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	80002000 	.word	0x80002000

08004138 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b02      	cmp	r3, #2
 800414c:	d103      	bne.n	8004156 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2200      	movs	r2, #0
 8004154:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b01      	cmp	r3, #1
 8004162:	d007      	beq.n	8004174 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	619a      	str	r2, [r3, #24]
  }
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	603b      	str	r3, [r7, #0]
 800418c:	4613      	mov	r3, r2
 800418e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004190:	e022      	b.n	80041d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d01e      	beq.n	80041d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419a:	f7fe fa5f 	bl	800265c <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d302      	bcc.n	80041b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d113      	bne.n	80041d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b4:	f043 0220 	orr.w	r2, r3, #32
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e00f      	b.n	80041f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699a      	ldr	r2, [r3, #24]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	4013      	ands	r3, r2
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	bf0c      	ite	eq
 80041e8:	2301      	moveq	r3, #1
 80041ea:	2300      	movne	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	461a      	mov	r2, r3
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d0cd      	beq.n	8004192 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800420c:	e02c      	b.n	8004268 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	68b9      	ldr	r1, [r7, #8]
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 f870 	bl	80042f8 <I2C_IsAcknowledgeFailed>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e02a      	b.n	8004278 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d01e      	beq.n	8004268 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422a:	f7fe fa17 	bl	800265c <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	429a      	cmp	r2, r3
 8004238:	d302      	bcc.n	8004240 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d113      	bne.n	8004268 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004244:	f043 0220 	orr.w	r2, r3, #32
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e007      	b.n	8004278 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b02      	cmp	r3, #2
 8004274:	d1cb      	bne.n	800420e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800428c:	e028      	b.n	80042e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	68b9      	ldr	r1, [r7, #8]
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f830 	bl	80042f8 <I2C_IsAcknowledgeFailed>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e026      	b.n	80042f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a2:	f7fe f9db 	bl	800265c <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d302      	bcc.n	80042b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d113      	bne.n	80042e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042bc:	f043 0220 	orr.w	r2, r3, #32
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2220      	movs	r2, #32
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e007      	b.n	80042f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	d1cf      	bne.n	800428e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	f003 0310 	and.w	r3, r3, #16
 800430e:	2b10      	cmp	r3, #16
 8004310:	d151      	bne.n	80043b6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004312:	e022      	b.n	800435a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431a:	d01e      	beq.n	800435a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431c:	f7fe f99e 	bl	800265c <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	429a      	cmp	r2, r3
 800432a:	d302      	bcc.n	8004332 <I2C_IsAcknowledgeFailed+0x3a>
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d113      	bne.n	800435a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004336:	f043 0220 	orr.w	r2, r3, #32
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e02e      	b.n	80043b8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	f003 0320 	and.w	r3, r3, #32
 8004364:	2b20      	cmp	r3, #32
 8004366:	d1d5      	bne.n	8004314 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2210      	movs	r2, #16
 800436e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2220      	movs	r2, #32
 8004376:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f7ff fedd 	bl	8004138 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6859      	ldr	r1, [r3, #4]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	4b0d      	ldr	r3, [pc, #52]	; (80043c0 <I2C_IsAcknowledgeFailed+0xc8>)
 800438a:	400b      	ands	r3, r1
 800438c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004392:	f043 0204 	orr.w	r2, r3, #4
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	fe00e800 	.word	0xfe00e800

080043c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	607b      	str	r3, [r7, #4]
 80043ce:	460b      	mov	r3, r1
 80043d0:	817b      	strh	r3, [r7, #10]
 80043d2:	4613      	mov	r3, r2
 80043d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	0d5b      	lsrs	r3, r3, #21
 80043e0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80043e4:	4b0d      	ldr	r3, [pc, #52]	; (800441c <I2C_TransferConfig+0x58>)
 80043e6:	430b      	orrs	r3, r1
 80043e8:	43db      	mvns	r3, r3
 80043ea:	ea02 0103 	and.w	r1, r2, r3
 80043ee:	897b      	ldrh	r3, [r7, #10]
 80043f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80043f4:	7a7b      	ldrb	r3, [r7, #9]
 80043f6:	041b      	lsls	r3, r3, #16
 80043f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	431a      	orrs	r2, r3
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	431a      	orrs	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800440e:	bf00      	nop
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	03ff63ff 	.word	0x03ff63ff

08004420 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b20      	cmp	r3, #32
 8004434:	d138      	bne.n	80044a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004440:	2302      	movs	r3, #2
 8004442:	e032      	b.n	80044aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2224      	movs	r2, #36	; 0x24
 8004450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 0201 	bic.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004472:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6819      	ldr	r1, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044a4:	2300      	movs	r3, #0
 80044a6:	e000      	b.n	80044aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044a8:	2302      	movs	r3, #2
  }
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b085      	sub	sp, #20
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	d139      	bne.n	8004540 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e033      	b.n	8004542 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2224      	movs	r2, #36	; 0x24
 80044e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0201 	bic.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004508:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	021b      	lsls	r3, r3, #8
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	e000      	b.n	8004542 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004540:	2302      	movs	r3, #2
  }
}
 8004542:	4618      	mov	r0, r3
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
	...

08004550 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e0bf      	b.n	80046e2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d106      	bne.n	800457c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7fd f840 	bl	80015fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004592:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6999      	ldr	r1, [r3, #24]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80045a8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6899      	ldr	r1, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	4b4a      	ldr	r3, [pc, #296]	; (80046ec <HAL_LTDC_Init+0x19c>)
 80045c4:	400b      	ands	r3, r1
 80045c6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	041b      	lsls	r3, r3, #16
 80045ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6899      	ldr	r1, [r3, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68d9      	ldr	r1, [r3, #12]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	4b3e      	ldr	r3, [pc, #248]	; (80046ec <HAL_LTDC_Init+0x19c>)
 80045f2:	400b      	ands	r3, r1
 80045f4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	041b      	lsls	r3, r3, #16
 80045fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68d9      	ldr	r1, [r3, #12]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a1a      	ldr	r2, [r3, #32]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6919      	ldr	r1, [r3, #16]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	4b33      	ldr	r3, [pc, #204]	; (80046ec <HAL_LTDC_Init+0x19c>)
 8004620:	400b      	ands	r3, r1
 8004622:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	041b      	lsls	r3, r3, #16
 800462a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6919      	ldr	r1, [r3, #16]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	431a      	orrs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6959      	ldr	r1, [r3, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	4b27      	ldr	r3, [pc, #156]	; (80046ec <HAL_LTDC_Init+0x19c>)
 800464e:	400b      	ands	r3, r1
 8004650:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004656:	041b      	lsls	r3, r3, #16
 8004658:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6959      	ldr	r1, [r3, #20]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004676:	021b      	lsls	r3, r3, #8
 8004678:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004680:	041b      	lsls	r3, r3, #16
 8004682:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004692:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0206 	orr.w	r2, r2, #6
 80046be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	f000f800 	.word	0xf000f800

080046f0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004706:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d023      	beq.n	800475a <HAL_LTDC_IRQHandler+0x6a>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d01e      	beq.n	800475a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0204 	bic.w	r2, r2, #4
 800472a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2204      	movs	r2, #4
 8004732:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800473a:	f043 0201 	orr.w	r2, r3, #1
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2204      	movs	r2, #4
 8004748:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f86f 	bl	8004838 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d023      	beq.n	80047ac <HAL_LTDC_IRQHandler+0xbc>
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d01e      	beq.n	80047ac <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0202 	bic.w	r2, r2, #2
 800477c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2202      	movs	r2, #2
 8004784:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800478c:	f043 0202 	orr.w	r2, r3, #2
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2204      	movs	r2, #4
 800479a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f846 	bl	8004838 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d01b      	beq.n	80047ee <HAL_LTDC_IRQHandler+0xfe>
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d016      	beq.n	80047ee <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0201 	bic.w	r2, r2, #1
 80047ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2201      	movs	r2, #1
 80047d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f00f faeb 	bl	8013dc4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01b      	beq.n	8004830 <HAL_LTDC_IRQHandler+0x140>
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d016      	beq.n	8004830 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0208 	bic.w	r2, r2, #8
 8004810:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2208      	movs	r2, #8
 8004818:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f80e 	bl	800484c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004830:	bf00      	nop
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004860:	b5b0      	push	{r4, r5, r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_LTDC_ConfigLayer+0x1a>
 8004876:	2302      	movs	r3, #2
 8004878:	e02c      	b.n	80048d4 <HAL_LTDC_ConfigLayer+0x74>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2202      	movs	r2, #2
 8004886:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2134      	movs	r1, #52	; 0x34
 8004890:	fb01 f303 	mul.w	r3, r1, r3
 8004894:	4413      	add	r3, r2
 8004896:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4614      	mov	r4, r2
 800489e:	461d      	mov	r5, r3
 80048a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048ac:	682b      	ldr	r3, [r5, #0]
 80048ae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	68b9      	ldr	r1, [r7, #8]
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 f849 	bl	800494c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2201      	movs	r2, #1
 80048c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bdb0      	pop	{r4, r5, r7, pc}

080048dc <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_LTDC_ProgramLineEvent+0x18>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e023      	b.n	800493c <HAL_LTDC_ProgramLineEvent+0x60>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0201 	bic.w	r2, r2, #1
 8004912:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8004914:	4a0c      	ldr	r2, [pc, #48]	; (8004948 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f042 0201 	orr.w	r2, r2, #1
 8004928:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	40016800 	.word	0x40016800

0800494c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800494c:	b480      	push	{r7}
 800494e:	b089      	sub	sp, #36	; 0x24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	0c1b      	lsrs	r3, r3, #16
 8004964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004968:	4413      	add	r3, r2
 800496a:	041b      	lsls	r3, r3, #16
 800496c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	01db      	lsls	r3, r3, #7
 8004978:	4413      	add	r3, r2
 800497a:	3384      	adds	r3, #132	; 0x84
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	6812      	ldr	r2, [r2, #0]
 8004982:	4611      	mov	r1, r2
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	01d2      	lsls	r2, r2, #7
 8004988:	440a      	add	r2, r1
 800498a:	3284      	adds	r2, #132	; 0x84
 800498c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004990:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	0c1b      	lsrs	r3, r3, #16
 800499e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a2:	4413      	add	r3, r2
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4619      	mov	r1, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	01db      	lsls	r3, r3, #7
 80049b0:	440b      	add	r3, r1
 80049b2:	3384      	adds	r3, #132	; 0x84
 80049b4:	4619      	mov	r1, r3
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049ca:	4413      	add	r3, r2
 80049cc:	041b      	lsls	r3, r3, #16
 80049ce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	461a      	mov	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	01db      	lsls	r3, r3, #7
 80049da:	4413      	add	r3, r2
 80049dc:	3384      	adds	r3, #132	; 0x84
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	6812      	ldr	r2, [r2, #0]
 80049e4:	4611      	mov	r1, r2
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	01d2      	lsls	r2, r2, #7
 80049ea:	440a      	add	r2, r1
 80049ec:	3284      	adds	r2, #132	; 0x84
 80049ee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80049f2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a02:	4413      	add	r3, r2
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	01db      	lsls	r3, r3, #7
 8004a10:	440b      	add	r3, r1
 8004a12:	3384      	adds	r3, #132	; 0x84
 8004a14:	4619      	mov	r1, r3
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	461a      	mov	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	01db      	lsls	r3, r3, #7
 8004a26:	4413      	add	r3, r2
 8004a28:	3384      	adds	r3, #132	; 0x84
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	6812      	ldr	r2, [r2, #0]
 8004a30:	4611      	mov	r1, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	01d2      	lsls	r2, r2, #7
 8004a36:	440a      	add	r2, r1
 8004a38:	3284      	adds	r2, #132	; 0x84
 8004a3a:	f023 0307 	bic.w	r3, r3, #7
 8004a3e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	01db      	lsls	r3, r3, #7
 8004a4a:	4413      	add	r3, r2
 8004a4c:	3384      	adds	r3, #132	; 0x84
 8004a4e:	461a      	mov	r2, r3
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004a5c:	021b      	lsls	r3, r3, #8
 8004a5e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004a66:	041b      	lsls	r3, r3, #16
 8004a68:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	061b      	lsls	r3, r3, #24
 8004a70:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	01db      	lsls	r3, r3, #7
 8004a7c:	4413      	add	r3, r2
 8004a7e:	3384      	adds	r3, #132	; 0x84
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	01db      	lsls	r3, r3, #7
 8004a8c:	4413      	add	r3, r2
 8004a8e:	3384      	adds	r3, #132	; 0x84
 8004a90:	461a      	mov	r2, r3
 8004a92:	2300      	movs	r3, #0
 8004a94:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4619      	mov	r1, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	01db      	lsls	r3, r3, #7
 8004ab0:	440b      	add	r3, r1
 8004ab2:	3384      	adds	r3, #132	; 0x84
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	01db      	lsls	r3, r3, #7
 8004ac6:	4413      	add	r3, r2
 8004ac8:	3384      	adds	r3, #132	; 0x84
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	6812      	ldr	r2, [r2, #0]
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	01d2      	lsls	r2, r2, #7
 8004ad6:	440a      	add	r2, r1
 8004ad8:	3284      	adds	r2, #132	; 0x84
 8004ada:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ade:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	01db      	lsls	r3, r3, #7
 8004aea:	4413      	add	r3, r2
 8004aec:	3384      	adds	r3, #132	; 0x84
 8004aee:	461a      	mov	r2, r3
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	01db      	lsls	r3, r3, #7
 8004b00:	4413      	add	r3, r2
 8004b02:	3384      	adds	r3, #132	; 0x84
 8004b04:	69da      	ldr	r2, [r3, #28]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	01db      	lsls	r3, r3, #7
 8004b10:	440b      	add	r3, r1
 8004b12:	3384      	adds	r3, #132	; 0x84
 8004b14:	4619      	mov	r1, r3
 8004b16:	4b58      	ldr	r3, [pc, #352]	; (8004c78 <LTDC_SetConfig+0x32c>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	68f9      	ldr	r1, [r7, #12]
 8004b26:	6809      	ldr	r1, [r1, #0]
 8004b28:	4608      	mov	r0, r1
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	01c9      	lsls	r1, r1, #7
 8004b2e:	4401      	add	r1, r0
 8004b30:	3184      	adds	r1, #132	; 0x84
 8004b32:	4313      	orrs	r3, r2
 8004b34:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	01db      	lsls	r3, r3, #7
 8004b40:	4413      	add	r3, r2
 8004b42:	3384      	adds	r3, #132	; 0x84
 8004b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	01db      	lsls	r3, r3, #7
 8004b50:	4413      	add	r3, r2
 8004b52:	3384      	adds	r3, #132	; 0x84
 8004b54:	461a      	mov	r2, r3
 8004b56:	2300      	movs	r3, #0
 8004b58:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	01db      	lsls	r3, r3, #7
 8004b64:	4413      	add	r3, r2
 8004b66:	3384      	adds	r3, #132	; 0x84
 8004b68:	461a      	mov	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d102      	bne.n	8004b7e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004b78:	2304      	movs	r3, #4
 8004b7a:	61fb      	str	r3, [r7, #28]
 8004b7c:	e01b      	b.n	8004bb6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d102      	bne.n	8004b8c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004b86:	2303      	movs	r3, #3
 8004b88:	61fb      	str	r3, [r7, #28]
 8004b8a:	e014      	b.n	8004bb6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d00b      	beq.n	8004bac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d007      	beq.n	8004bac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	d003      	beq.n	8004bac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004ba8:	2b07      	cmp	r3, #7
 8004baa:	d102      	bne.n	8004bb2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004bac:	2302      	movs	r3, #2
 8004bae:	61fb      	str	r3, [r7, #28]
 8004bb0:	e001      	b.n	8004bb6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	01db      	lsls	r3, r3, #7
 8004bc0:	4413      	add	r3, r2
 8004bc2:	3384      	adds	r3, #132	; 0x84
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	6812      	ldr	r2, [r2, #0]
 8004bca:	4611      	mov	r1, r2
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	01d2      	lsls	r2, r2, #7
 8004bd0:	440a      	add	r2, r1
 8004bd2:	3284      	adds	r2, #132	; 0x84
 8004bd4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004bd8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bde:	69fa      	ldr	r2, [r7, #28]
 8004be0:	fb02 f303 	mul.w	r3, r2, r3
 8004be4:	041a      	lsls	r2, r3, #16
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	6859      	ldr	r1, [r3, #4]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	1acb      	subs	r3, r1, r3
 8004bf0:	69f9      	ldr	r1, [r7, #28]
 8004bf2:	fb01 f303 	mul.w	r3, r1, r3
 8004bf6:	3303      	adds	r3, #3
 8004bf8:	68f9      	ldr	r1, [r7, #12]
 8004bfa:	6809      	ldr	r1, [r1, #0]
 8004bfc:	4608      	mov	r0, r1
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	01c9      	lsls	r1, r1, #7
 8004c02:	4401      	add	r1, r0
 8004c04:	3184      	adds	r1, #132	; 0x84
 8004c06:	4313      	orrs	r3, r2
 8004c08:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	01db      	lsls	r3, r3, #7
 8004c14:	4413      	add	r3, r2
 8004c16:	3384      	adds	r3, #132	; 0x84
 8004c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4619      	mov	r1, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	01db      	lsls	r3, r3, #7
 8004c24:	440b      	add	r3, r1
 8004c26:	3384      	adds	r3, #132	; 0x84
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4b14      	ldr	r3, [pc, #80]	; (8004c7c <LTDC_SetConfig+0x330>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	01db      	lsls	r3, r3, #7
 8004c3a:	4413      	add	r3, r2
 8004c3c:	3384      	adds	r3, #132	; 0x84
 8004c3e:	461a      	mov	r2, r3
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	01db      	lsls	r3, r3, #7
 8004c50:	4413      	add	r3, r2
 8004c52:	3384      	adds	r3, #132	; 0x84
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	6812      	ldr	r2, [r2, #0]
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	01d2      	lsls	r2, r2, #7
 8004c60:	440a      	add	r2, r1
 8004c62:	3284      	adds	r2, #132	; 0x84
 8004c64:	f043 0301 	orr.w	r3, r3, #1
 8004c68:	6013      	str	r3, [r2, #0]
}
 8004c6a:	bf00      	nop
 8004c6c:	3724      	adds	r7, #36	; 0x24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	fffff8f8 	.word	0xfffff8f8
 8004c7c:	fffff800 	.word	0xfffff800

08004c80 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004c8a:	4b23      	ldr	r3, [pc, #140]	; (8004d18 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	4a22      	ldr	r2, [pc, #136]	; (8004d18 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c94:	6413      	str	r3, [r2, #64]	; 0x40
 8004c96:	4b20      	ldr	r3, [pc, #128]	; (8004d18 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004ca2:	4b1e      	ldr	r3, [pc, #120]	; (8004d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a1d      	ldr	r2, [pc, #116]	; (8004d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cae:	f7fd fcd5 	bl	800265c <HAL_GetTick>
 8004cb2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004cb4:	e009      	b.n	8004cca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004cb6:	f7fd fcd1 	bl	800265c <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cc4:	d901      	bls.n	8004cca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e022      	b.n	8004d10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004cca:	4b14      	ldr	r3, [pc, #80]	; (8004d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd6:	d1ee      	bne.n	8004cb6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004cd8:	4b10      	ldr	r3, [pc, #64]	; (8004d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a0f      	ldr	r2, [pc, #60]	; (8004d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ce2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ce4:	f7fd fcba 	bl	800265c <HAL_GetTick>
 8004ce8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004cea:	e009      	b.n	8004d00 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004cec:	f7fd fcb6 	bl	800265c <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cfa:	d901      	bls.n	8004d00 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e007      	b.n	8004d10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d00:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d0c:	d1ee      	bne.n	8004cec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	40007000 	.word	0x40007000

08004d20 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004d2c:	f7fd fc96 	bl	800265c <HAL_GetTick>
 8004d30:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e073      	b.n	8004e24 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_QSPI_Init+0x2c>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e06b      	b.n	8004e24 <HAL_QSPI_Init+0x104>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10b      	bne.n	8004d78 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7fc fd0f 	bl	800178c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8004d6e:	f241 3188 	movw	r1, #5000	; 0x1388
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fb65 	bl	8005442 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	021a      	lsls	r2, r3, #8
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	2120      	movs	r1, #32
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 fb5d 	bl	800545e <QSPI_WaitFlagStateUntilTimeout>
 8004da4:	4603      	mov	r3, r0
 8004da6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d135      	bne.n	8004e1a <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	4b1d      	ldr	r3, [pc, #116]	; (8004e2c <HAL_QSPI_Init+0x10c>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6852      	ldr	r2, [r2, #4]
 8004dbc:	0611      	lsls	r1, r2, #24
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	68d2      	ldr	r2, [r2, #12]
 8004dc2:	4311      	orrs	r1, r2
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	69d2      	ldr	r2, [r2, #28]
 8004dc8:	4311      	orrs	r1, r2
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6a12      	ldr	r2, [r2, #32]
 8004dce:	4311      	orrs	r1, r2
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6812      	ldr	r2, [r2, #0]
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	4b14      	ldr	r3, [pc, #80]	; (8004e30 <HAL_QSPI_Init+0x110>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6912      	ldr	r2, [r2, #16]
 8004de6:	0411      	lsls	r1, r2, #16
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6952      	ldr	r2, [r2, #20]
 8004dec:	4311      	orrs	r1, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6992      	ldr	r2, [r2, #24]
 8004df2:	4311      	orrs	r1, r2
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6812      	ldr	r2, [r2, #0]
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0201 	orr.w	r2, r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	00ffff2f 	.word	0x00ffff2f
 8004e30:	ffe0f8fe 	.word	0xffe0f8fe

08004e34 <HAL_QSPI_DeInit>:
  * @brief DeInitializes the QSPI peripheral 
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e022      	b.n	8004e8c <HAL_QSPI_DeInit+0x58>
  }

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_QSPI_DeInit+0x22>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e01a      	b.n	8004e8c <HAL_QSPI_DeInit+0x58>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0201 	bic.w	r2, r2, #1
 8004e6c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fc fd1c 	bl	80018ac <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_QSPI_Command>:
  * @param Timeout  Time out duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 8004ea4:	f7fd fbda 	bl	800265c <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d101      	bne.n	8004eba <HAL_QSPI_Command+0x26>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e048      	b.n	8004f4c <HAL_QSPI_Command+0xb8>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d137      	bne.n	8004f3e <HAL_QSPI_Command+0xaa>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;   
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2120      	movs	r1, #32
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 fab9 	bl	800545e <QSPI_WaitFlagStateUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 8004ef0:	7dfb      	ldrb	r3, [r7, #23]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d125      	bne.n	8004f42 <HAL_QSPI_Command+0xae>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	68b9      	ldr	r1, [r7, #8]
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 fae6 	bl	80054cc <QSPI_Config>
      
      if (cmd->DataMode == QSPI_DATA_NONE)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d115      	bne.n	8004f34 <HAL_QSPI_Command+0xa0>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done 
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	2102      	movs	r1, #2
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 faa3 	bl	800545e <QSPI_WaitFlagStateUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10f      	bne.n	8004f42 <HAL_QSPI_Command+0xae>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2202      	movs	r2, #2
 8004f28:	60da      	str	r2, [r3, #12]
          
          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;   
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f32:	e006      	b.n	8004f42 <HAL_QSPI_Command+0xae>
        
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;   
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f3c:	e001      	b.n	8004f42 <HAL_QSPI_Command+0xae>
      }
    }
  }
  else
  {
    status = HAL_BUSY;   
 8004f3e:	2302      	movs	r3, #2
 8004f40:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_QSPI_Transmit>:
  * @param Timeout  Time out duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08a      	sub	sp, #40	; 0x28
 8004f58:	af02      	add	r7, sp, #8
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
   HAL_StatusTypeDef status = HAL_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004f64:	f7fd fb7a 	bl	800265c <HAL_GetTick>
 8004f68:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3320      	adds	r3, #32
 8004f70:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <HAL_QSPI_Transmit+0x2e>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e079      	b.n	8005076 <HAL_QSPI_Transmit+0x122>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d168      	bne.n	8005068 <HAL_QSPI_Transmit+0x114>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d059      	beq.n	8005056 <HAL_QSPI_Transmit+0x102>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2212      	movs	r2, #18
 8004fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      
      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	625a      	str	r2, [r3, #36]	; 0x24
    
      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695a      	ldr	r2, [r3, #20]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004fd6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0)
 8004fd8:	e019      	b.n	800500e <HAL_QSPI_Transmit+0xba>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	2104      	movs	r1, #4
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 fa3a 	bl	800545e <QSPI_WaitFlagStateUntilTimeout>
 8004fea:	4603      	mov	r3, r0
 8004fec:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8004fee:	7ffb      	ldrb	r3, [r7, #31]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d111      	bne.n	8005018 <HAL_QSPI_Transmit+0xc4>
        { 
          break;
        }

        *(__IO uint8_t *)data_reg = *hqspi->pTxBuffPtr++;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	1c59      	adds	r1, r3, #1
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	6251      	str	r1, [r2, #36]	; 0x24
 8004ffe:	781a      	ldrb	r2, [r3, #0]
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	701a      	strb	r2, [r3, #0]
        hqspi->TxXferCount--;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	1e5a      	subs	r2, r3, #1
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e1      	bne.n	8004fda <HAL_QSPI_Transmit+0x86>
 8005016:	e000      	b.n	800501a <HAL_QSPI_Transmit+0xc6>
          break;
 8005018:	bf00      	nop
      }
    
      if (status == HAL_OK)
 800501a:	7ffb      	ldrb	r3, [r7, #31]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d115      	bne.n	800504c <HAL_QSPI_Transmit+0xf8>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	2201      	movs	r2, #1
 8005028:	2102      	movs	r1, #2
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 fa17 	bl	800545e <QSPI_WaitFlagStateUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005034:	7ffb      	ldrb	r3, [r7, #31]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d108      	bne.n	800504c <HAL_QSPI_Transmit+0xf8>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2202      	movs	r2, #2
 8005040:	60da      	str	r2, [r3, #12]
          
#if defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 f998 	bl	8005378 <HAL_QSPI_Abort>
 8005048:	4603      	mov	r3, r0
 800504a:	77fb      	strb	r3, [r7, #31]
#endif /* QSPI_V1_0 */ 
        }
      }
    
      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;    
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005054:	e00a      	b.n	800506c <HAL_QSPI_Transmit+0x118>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505a:	f043 0208 	orr.w	r2, r3, #8
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	77fb      	strb	r3, [r7, #31]
 8005066:	e001      	b.n	800506c <HAL_QSPI_Transmit+0x118>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005068:	2302      	movs	r3, #2
 800506a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005074:	7ffb      	ldrb	r3, [r7, #31]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3720      	adds	r7, #32
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_QSPI_Receive>:
  * @param Timeout  Time out duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b08a      	sub	sp, #40	; 0x28
 8005082:	af02      	add	r7, sp, #8
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800508e:	f7fd fae5 	bl	800265c <HAL_GetTick>
 8005092:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3320      	adds	r3, #32
 80050a2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d101      	bne.n	80050b4 <HAL_QSPI_Receive+0x36>
 80050b0:	2302      	movs	r3, #2
 80050b2:	e080      	b.n	80051b6 <HAL_QSPI_Receive+0x138>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d16f      	bne.n	80051a8 <HAL_QSPI_Receive+0x12a>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	645a      	str	r2, [r3, #68]	; 0x44
    if(pData != NULL )
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d060      	beq.n	8005196 <HAL_QSPI_Receive+0x118>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2222      	movs	r2, #34	; 0x22
 80050d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800510c:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	619a      	str	r2, [r3, #24]
      
      while(hqspi->RxXferCount > 0)
 8005116:	e01a      	b.n	800514e <HAL_QSPI_Receive+0xd0>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	2201      	movs	r2, #1
 8005120:	2106      	movs	r1, #6
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 f99b 	bl	800545e <QSPI_WaitFlagStateUntilTimeout>
 8005128:	4603      	mov	r3, r0
 800512a:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800512c:	7ffb      	ldrb	r3, [r7, #31]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d112      	bne.n	8005158 <HAL_QSPI_Receive+0xda>
        { 
          break;
        }

        *hqspi->pRxBuffPtr++ = *(__IO uint8_t *)data_reg;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	1c59      	adds	r1, r3, #1
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	6311      	str	r1, [r2, #48]	; 0x30
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	7812      	ldrb	r2, [r2, #0]
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	701a      	strb	r2, [r3, #0]
        hqspi->RxXferCount--;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005148:	1e5a      	subs	r2, r3, #1
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1e0      	bne.n	8005118 <HAL_QSPI_Receive+0x9a>
 8005156:	e000      	b.n	800515a <HAL_QSPI_Receive+0xdc>
          break;
 8005158:	bf00      	nop
      }
    
      if (status == HAL_OK)
 800515a:	7ffb      	ldrb	r3, [r7, #31]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d115      	bne.n	800518c <HAL_QSPI_Receive+0x10e>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	2201      	movs	r2, #1
 8005168:	2102      	movs	r1, #2
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f977 	bl	800545e <QSPI_WaitFlagStateUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8005174:	7ffb      	ldrb	r3, [r7, #31]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d108      	bne.n	800518c <HAL_QSPI_Receive+0x10e>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2202      	movs	r2, #2
 8005180:	60da      	str	r2, [r3, #12]
          
#if defined(QSPI1_V1_0)
         /* Workaround - Extra data written in the FIFO at the end of a read transfer */
         status = HAL_QSPI_Abort(hqspi);
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 f8f8 	bl	8005378 <HAL_QSPI_Abort>
 8005188:	4603      	mov	r3, r0
 800518a:	77fb      	strb	r3, [r7, #31]
#endif /* QSPI_V1_0 */  
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;    
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005194:	e00a      	b.n	80051ac <HAL_QSPI_Receive+0x12e>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519a:	f043 0208 	orr.w	r2, r3, #8
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	77fb      	strb	r3, [r7, #31]
 80051a6:	e001      	b.n	80051ac <HAL_QSPI_Receive+0x12e>
    }
  }
  else
  {
    status = HAL_BUSY;
 80051a8:	2302      	movs	r3, #2
 80051aa:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80051b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3720      	adds	r7, #32
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <HAL_QSPI_AutoPolling>:
  * @param  Timeout  Time out duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b088      	sub	sp, #32
 80051c2:	af02      	add	r7, sp, #8
 80051c4:	60f8      	str	r0, [r7, #12]
 80051c6:	60b9      	str	r1, [r7, #8]
 80051c8:	607a      	str	r2, [r7, #4]
 80051ca:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 80051d0:	f7fd fa44 	bl	800265c <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d101      	bne.n	80051e6 <HAL_QSPI_AutoPolling+0x28>
 80051e2:	2302      	movs	r3, #2
 80051e4:	e060      	b.n	80052a8 <HAL_QSPI_AutoPolling+0xea>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d14f      	bne.n	800529a <HAL_QSPI_AutoPolling+0xdc>
  {
    
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2242      	movs	r2, #66	; 0x42
 8005204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	2200      	movs	r2, #0
 8005210:	2120      	movs	r1, #32
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 f923 	bl	800545e <QSPI_WaitFlagStateUntilTimeout>
 8005218:	4603      	mov	r3, r0
 800521a:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 800521c:	7dfb      	ldrb	r3, [r7, #23]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d13d      	bne.n	800529e <HAL_QSPI_AutoPolling+0xe0>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	6812      	ldr	r2, [r2, #0]
 800522a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6852      	ldr	r2, [r2, #4]
 8005234:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6892      	ldr	r2, [r2, #8]
 800523e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Configure QSPI: CR register with Match mode and Automatic stop enabled 
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS), 
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	431a      	orrs	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005258:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));
      
      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005262:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005266:	68b9      	ldr	r1, [r7, #8]
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 f92f 	bl	80054cc <QSPI_Config>
      
      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	2201      	movs	r2, #1
 8005276:	2108      	movs	r1, #8
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 f8f0 	bl	800545e <QSPI_WaitFlagStateUntilTimeout>
 800527e:	4603      	mov	r3, r0
 8005280:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8005282:	7dfb      	ldrb	r3, [r7, #23]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10a      	bne.n	800529e <HAL_QSPI_AutoPolling+0xe0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2208      	movs	r2, #8
 800528e:	60da      	str	r2, [r3, #12]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005298:	e001      	b.n	800529e <HAL_QSPI_AutoPolling+0xe0>
      }
    }
  }
  else
  {
    status = HAL_BUSY;   
 800529a:	2302      	movs	r3, #2
 800529c:	75fb      	strb	r3, [r7, #23]
  }
  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return status;  
 80052a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b088      	sub	sp, #32
 80052b4:	af02      	add	r7, sp, #8
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 80052c0:	f7fd f9cc 	bl	800265c <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d101      	bne.n	80052d6 <HAL_QSPI_MemoryMapped+0x26>
 80052d2:	2302      	movs	r3, #2
 80052d4:	e04c      	b.n	8005370 <HAL_QSPI_MemoryMapped+0xc0>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d13b      	bne.n	8005362 <HAL_QSPI_MemoryMapped+0xb2>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2282      	movs	r2, #130	; 0x82
 80052f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	2200      	movs	r2, #0
 8005302:	2120      	movs	r1, #32
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f8aa 	bl	800545e <QSPI_WaitFlagStateUntilTimeout>
 800530a:	4603      	mov	r3, r0
 800530c:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 800530e:	7dfb      	ldrb	r3, [r7, #23]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d128      	bne.n	8005366 <HAL_QSPI_MemoryMapped+0xb6>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f023 0108 	bic.w	r1, r3, #8
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2b08      	cmp	r3, #8
 8005330:	d110      	bne.n	8005354 <HAL_QSPI_MemoryMapped+0xa4>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));
        
        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6812      	ldr	r2, [r2, #0]
 800533a:	631a      	str	r2, [r3, #48]	; 0x30
        
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2210      	movs	r2, #16
 8005342:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005352:	601a      	str	r2, [r3, #0]
      }
      
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8005354:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8005358:	68b9      	ldr	r1, [r7, #8]
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 f8b6 	bl	80054cc <QSPI_Config>
 8005360:	e001      	b.n	8005366 <HAL_QSPI_MemoryMapped+0xb6>
    }
  }
  else
  {
    status = HAL_BUSY;   
 8005362:	2302      	movs	r3, #2
 8005364:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return status;  
 800536e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af02      	add	r7, sp, #8
 800537e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005384:	f7fd f96a 	bl	800265c <HAL_GetTick>
 8005388:	60b8      	str	r0, [r7, #8]
  
  /* Check if the state is in one of the busy states */
  if ((hqspi->State & 0x2) != 0)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005390:	b2db      	uxtb	r3, r3
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d04e      	beq.n	8005438 <HAL_QSPI_Abort+0xc0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN)!= RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d017      	beq.n	80053e0 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 0204 	bic.w	r2, r2, #4
 80053be:	601a      	str	r2, [r3, #0]
      
      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7fd fbeb 	bl	8002ba0 <HAL_DMA_Abort>
 80053ca:	4603      	mov	r3, r0
 80053cc:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d8:	f043 0204 	orr.w	r2, r3, #4
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }  
    
    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0202 	orr.w	r2, r2, #2
 80053ee:	601a      	str	r2, [r3, #0]
    
    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2201      	movs	r2, #1
 80053fa:	2102      	movs	r1, #2
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f82e 	bl	800545e <QSPI_WaitFlagStateUntilTimeout>
 8005402:	4603      	mov	r3, r0
 8005404:	73fb      	strb	r3, [r7, #15]

    if(status == HAL_OK)
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10e      	bne.n	800542a <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2202      	movs	r2, #2
 8005412:	60da      	str	r2, [r3, #12]
      
      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2200      	movs	r2, #0
 800541e:	2120      	movs	r1, #32
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f81c 	bl	800545e <QSPI_WaitFlagStateUntilTimeout>
 8005426:	4603      	mov	r3, r0
 8005428:	73fb      	strb	r3, [r7, #15]
    }
    
    if (status == HAL_OK)
 800542a:	7bfb      	ldrb	r3, [r7, #15]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d103      	bne.n	8005438 <HAL_QSPI_Abort+0xc0>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8005438:	7bfb      	ldrb	r3, [r7, #15]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b084      	sub	sp, #16
 8005462:	af00      	add	r7, sp, #0
 8005464:	60f8      	str	r0, [r7, #12]
 8005466:	60b9      	str	r1, [r7, #8]
 8005468:	603b      	str	r3, [r7, #0]
 800546a:	4613      	mov	r3, r2
 800546c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800546e:	e01a      	b.n	80054a6 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005476:	d016      	beq.n	80054a6 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d007      	beq.n	800548e <QSPI_WaitFlagStateUntilTimeout+0x30>
 800547e:	f7fd f8ed 	bl	800265c <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	429a      	cmp	r2, r3
 800548c:	d20b      	bcs.n	80054a6 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2204      	movs	r2, #4
 8005492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549a:	f043 0201 	orr.w	r2, r3, #1
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e00e      	b.n	80054c4 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	4013      	ands	r3, r2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	bf14      	ite	ne
 80054b4:	2301      	movne	r3, #1
 80054b6:	2300      	moveq	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	461a      	mov	r2, r3
 80054bc:	79fb      	ldrb	r3, [r7, #7]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d1d6      	bne.n	8005470 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d009      	beq.n	80054f4 <QSPI_Config+0x28>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80054e6:	d005      	beq.n	80054f4 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1));
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3a01      	subs	r2, #1
 80054f2:	611a      	str	r2, [r3, #16]
  }
      
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 80b9 	beq.w	8005670 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d05f      	beq.n	80055c6 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	6892      	ldr	r2, [r2, #8]
 800550e:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d031      	beq.n	800557c <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005520:	431a      	orrs	r2, r3
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005526:	431a      	orrs	r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	431a      	orrs	r2, r3
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	049b      	lsls	r3, r3, #18
 8005534:	431a      	orrs	r2, r3
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	431a      	orrs	r2, r3
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	431a      	orrs	r2, r3
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	431a      	orrs	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	431a      	orrs	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	431a      	orrs	r2, r3
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	ea42 0103 	orr.w	r1, r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	430a      	orrs	r2, r1
 8005564:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << 18) | cmd->AlternateBytesSize |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800556c:	f000 812e 	beq.w	80057cc <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	6852      	ldr	r2, [r2, #4]
 8005578:	619a      	str	r2, [r3, #24]
                                           cmd->AddressMode | cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800557a:	e127      	b.n	80057cc <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005584:	431a      	orrs	r2, r3
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800558a:	431a      	orrs	r2, r3
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	431a      	orrs	r2, r3
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	049b      	lsls	r3, r3, #18
 8005598:	431a      	orrs	r2, r3
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	431a      	orrs	r2, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	431a      	orrs	r2, r3
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	431a      	orrs	r2, r3
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	431a      	orrs	r2, r3
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	ea42 0103 	orr.w	r1, r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	615a      	str	r2, [r3, #20]
}
 80055c4:	e102      	b.n	80057cc <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d02e      	beq.n	800562c <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d6:	431a      	orrs	r2, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055dc:	431a      	orrs	r2, r3
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	431a      	orrs	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	049b      	lsls	r3, r3, #18
 80055ea:	431a      	orrs	r2, r3
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	431a      	orrs	r2, r3
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	431a      	orrs	r2, r3
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	431a      	orrs	r2, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	ea42 0103 	orr.w	r1, r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	430a      	orrs	r2, r1
 8005614:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800561c:	f000 80d6 	beq.w	80057cc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	6852      	ldr	r2, [r2, #4]
 8005628:	619a      	str	r2, [r3, #24]
}
 800562a:	e0cf      	b.n	80057cc <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	431a      	orrs	r2, r3
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563a:	431a      	orrs	r2, r3
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005640:	431a      	orrs	r2, r3
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	049b      	lsls	r3, r3, #18
 8005648:	431a      	orrs	r2, r3
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	431a      	orrs	r2, r3
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	431a      	orrs	r2, r3
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	431a      	orrs	r2, r3
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	ea42 0103 	orr.w	r1, r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	430a      	orrs	r2, r1
 800566c:	615a      	str	r2, [r3, #20]
}
 800566e:	e0ad      	b.n	80057cc <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d058      	beq.n	800572a <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	6892      	ldr	r2, [r2, #8]
 8005680:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d02d      	beq.n	80056e6 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005692:	431a      	orrs	r2, r3
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005698:	431a      	orrs	r2, r3
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	431a      	orrs	r2, r3
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	049b      	lsls	r3, r3, #18
 80056a6:	431a      	orrs	r2, r3
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	431a      	orrs	r2, r3
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	431a      	orrs	r2, r3
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	431a      	orrs	r2, r3
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	431a      	orrs	r2, r3
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	ea42 0103 	orr.w	r1, r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80056d8:	d078      	beq.n	80057cc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	6852      	ldr	r2, [r2, #4]
 80056e2:	619a      	str	r2, [r3, #24]
}
 80056e4:	e072      	b.n	80057cc <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ee:	431a      	orrs	r2, r3
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f4:	431a      	orrs	r2, r3
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	431a      	orrs	r2, r3
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	049b      	lsls	r3, r3, #18
 8005702:	431a      	orrs	r2, r3
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	431a      	orrs	r2, r3
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	431a      	orrs	r2, r3
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	431a      	orrs	r2, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	ea42 0103 	orr.w	r1, r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	430a      	orrs	r2, r1
 8005726:	615a      	str	r2, [r3, #20]
}
 8005728:	e050      	b.n	80057cc <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d02a      	beq.n	8005788 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573a:	431a      	orrs	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005740:	431a      	orrs	r2, r3
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005746:	431a      	orrs	r2, r3
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	049b      	lsls	r3, r3, #18
 800574e:	431a      	orrs	r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	431a      	orrs	r2, r3
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	431a      	orrs	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	431a      	orrs	r2, r3
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	ea42 0103 	orr.w	r1, r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	430a      	orrs	r2, r1
 8005772:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800577a:	d027      	beq.n	80057cc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	6852      	ldr	r2, [r2, #4]
 8005784:	619a      	str	r2, [r3, #24]
}
 8005786:	e021      	b.n	80057cc <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01d      	beq.n	80057cc <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005798:	431a      	orrs	r2, r3
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579e:	431a      	orrs	r2, r3
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	431a      	orrs	r2, r3
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	049b      	lsls	r3, r3, #18
 80057ac:	431a      	orrs	r2, r3
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	431a      	orrs	r2, r3
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	431a      	orrs	r2, r3
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	ea42 0103 	orr.w	r1, r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	615a      	str	r2, [r3, #20]
}
 80057cc:	bf00      	nop
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80057e0:	2300      	movs	r3, #0
 80057e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e25c      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 8087 	beq.w	800590a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057fc:	4b96      	ldr	r3, [pc, #600]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 030c 	and.w	r3, r3, #12
 8005804:	2b04      	cmp	r3, #4
 8005806:	d00c      	beq.n	8005822 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005808:	4b93      	ldr	r3, [pc, #588]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f003 030c 	and.w	r3, r3, #12
 8005810:	2b08      	cmp	r3, #8
 8005812:	d112      	bne.n	800583a <HAL_RCC_OscConfig+0x62>
 8005814:	4b90      	ldr	r3, [pc, #576]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800581c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005820:	d10b      	bne.n	800583a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005822:	4b8d      	ldr	r3, [pc, #564]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d06c      	beq.n	8005908 <HAL_RCC_OscConfig+0x130>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d168      	bne.n	8005908 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e236      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005842:	d106      	bne.n	8005852 <HAL_RCC_OscConfig+0x7a>
 8005844:	4b84      	ldr	r3, [pc, #528]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a83      	ldr	r2, [pc, #524]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 800584a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	e02e      	b.n	80058b0 <HAL_RCC_OscConfig+0xd8>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10c      	bne.n	8005874 <HAL_RCC_OscConfig+0x9c>
 800585a:	4b7f      	ldr	r3, [pc, #508]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a7e      	ldr	r2, [pc, #504]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005864:	6013      	str	r3, [r2, #0]
 8005866:	4b7c      	ldr	r3, [pc, #496]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a7b      	ldr	r2, [pc, #492]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 800586c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	e01d      	b.n	80058b0 <HAL_RCC_OscConfig+0xd8>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800587c:	d10c      	bne.n	8005898 <HAL_RCC_OscConfig+0xc0>
 800587e:	4b76      	ldr	r3, [pc, #472]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a75      	ldr	r2, [pc, #468]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	4b73      	ldr	r3, [pc, #460]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a72      	ldr	r2, [pc, #456]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	e00b      	b.n	80058b0 <HAL_RCC_OscConfig+0xd8>
 8005898:	4b6f      	ldr	r3, [pc, #444]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a6e      	ldr	r2, [pc, #440]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 800589e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058a2:	6013      	str	r3, [r2, #0]
 80058a4:	4b6c      	ldr	r3, [pc, #432]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a6b      	ldr	r2, [pc, #428]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 80058aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d013      	beq.n	80058e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b8:	f7fc fed0 	bl	800265c <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058c0:	f7fc fecc 	bl	800265c <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b64      	cmp	r3, #100	; 0x64
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e1ea      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058d2:	4b61      	ldr	r3, [pc, #388]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0f0      	beq.n	80058c0 <HAL_RCC_OscConfig+0xe8>
 80058de:	e014      	b.n	800590a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e0:	f7fc febc 	bl	800265c <HAL_GetTick>
 80058e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058e6:	e008      	b.n	80058fa <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058e8:	f7fc feb8 	bl	800265c <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b64      	cmp	r3, #100	; 0x64
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e1d6      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058fa:	4b57      	ldr	r3, [pc, #348]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1f0      	bne.n	80058e8 <HAL_RCC_OscConfig+0x110>
 8005906:	e000      	b.n	800590a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d069      	beq.n	80059ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005916:	4b50      	ldr	r3, [pc, #320]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 030c 	and.w	r3, r3, #12
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00b      	beq.n	800593a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005922:	4b4d      	ldr	r3, [pc, #308]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 030c 	and.w	r3, r3, #12
 800592a:	2b08      	cmp	r3, #8
 800592c:	d11c      	bne.n	8005968 <HAL_RCC_OscConfig+0x190>
 800592e:	4b4a      	ldr	r3, [pc, #296]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d116      	bne.n	8005968 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800593a:	4b47      	ldr	r3, [pc, #284]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d005      	beq.n	8005952 <HAL_RCC_OscConfig+0x17a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d001      	beq.n	8005952 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e1aa      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005952:	4b41      	ldr	r3, [pc, #260]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	493d      	ldr	r1, [pc, #244]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005962:	4313      	orrs	r3, r2
 8005964:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005966:	e040      	b.n	80059ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d023      	beq.n	80059b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005970:	4b39      	ldr	r3, [pc, #228]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a38      	ldr	r2, [pc, #224]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005976:	f043 0301 	orr.w	r3, r3, #1
 800597a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597c:	f7fc fe6e 	bl	800265c <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005984:	f7fc fe6a 	bl	800265c <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e188      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005996:	4b30      	ldr	r3, [pc, #192]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0f0      	beq.n	8005984 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059a2:	4b2d      	ldr	r3, [pc, #180]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	4929      	ldr	r1, [pc, #164]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	600b      	str	r3, [r1, #0]
 80059b6:	e018      	b.n	80059ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059b8:	4b27      	ldr	r3, [pc, #156]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a26      	ldr	r2, [pc, #152]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 80059be:	f023 0301 	bic.w	r3, r3, #1
 80059c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c4:	f7fc fe4a 	bl	800265c <HAL_GetTick>
 80059c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059cc:	f7fc fe46 	bl	800265c <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e164      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059de:	4b1e      	ldr	r3, [pc, #120]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0302 	and.w	r3, r3, #2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1f0      	bne.n	80059cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d038      	beq.n	8005a68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d019      	beq.n	8005a32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059fe:	4b16      	ldr	r3, [pc, #88]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a02:	4a15      	ldr	r2, [pc, #84]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005a04:	f043 0301 	orr.w	r3, r3, #1
 8005a08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a0a:	f7fc fe27 	bl	800265c <HAL_GetTick>
 8005a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a10:	e008      	b.n	8005a24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a12:	f7fc fe23 	bl	800265c <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e141      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a24:	4b0c      	ldr	r3, [pc, #48]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0f0      	beq.n	8005a12 <HAL_RCC_OscConfig+0x23a>
 8005a30:	e01a      	b.n	8005a68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a32:	4b09      	ldr	r3, [pc, #36]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a36:	4a08      	ldr	r2, [pc, #32]	; (8005a58 <HAL_RCC_OscConfig+0x280>)
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a3e:	f7fc fe0d 	bl	800265c <HAL_GetTick>
 8005a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a44:	e00a      	b.n	8005a5c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a46:	f7fc fe09 	bl	800265c <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d903      	bls.n	8005a5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e127      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
 8005a58:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a5c:	4b94      	ldr	r3, [pc, #592]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1ee      	bne.n	8005a46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 80a4 	beq.w	8005bbe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a76:	4b8e      	ldr	r3, [pc, #568]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10d      	bne.n	8005a9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a82:	4b8b      	ldr	r3, [pc, #556]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	4a8a      	ldr	r2, [pc, #552]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a8e:	4b88      	ldr	r3, [pc, #544]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a9e:	4b85      	ldr	r3, [pc, #532]	; (8005cb4 <HAL_RCC_OscConfig+0x4dc>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d118      	bne.n	8005adc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005aaa:	4b82      	ldr	r3, [pc, #520]	; (8005cb4 <HAL_RCC_OscConfig+0x4dc>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a81      	ldr	r2, [pc, #516]	; (8005cb4 <HAL_RCC_OscConfig+0x4dc>)
 8005ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ab6:	f7fc fdd1 	bl	800265c <HAL_GetTick>
 8005aba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005abc:	e008      	b.n	8005ad0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005abe:	f7fc fdcd 	bl	800265c <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	2b64      	cmp	r3, #100	; 0x64
 8005aca:	d901      	bls.n	8005ad0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e0eb      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ad0:	4b78      	ldr	r3, [pc, #480]	; (8005cb4 <HAL_RCC_OscConfig+0x4dc>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0f0      	beq.n	8005abe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d106      	bne.n	8005af2 <HAL_RCC_OscConfig+0x31a>
 8005ae4:	4b72      	ldr	r3, [pc, #456]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae8:	4a71      	ldr	r2, [pc, #452]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005aea:	f043 0301 	orr.w	r3, r3, #1
 8005aee:	6713      	str	r3, [r2, #112]	; 0x70
 8005af0:	e02d      	b.n	8005b4e <HAL_RCC_OscConfig+0x376>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10c      	bne.n	8005b14 <HAL_RCC_OscConfig+0x33c>
 8005afa:	4b6d      	ldr	r3, [pc, #436]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afe:	4a6c      	ldr	r2, [pc, #432]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005b00:	f023 0301 	bic.w	r3, r3, #1
 8005b04:	6713      	str	r3, [r2, #112]	; 0x70
 8005b06:	4b6a      	ldr	r3, [pc, #424]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0a:	4a69      	ldr	r2, [pc, #420]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005b0c:	f023 0304 	bic.w	r3, r3, #4
 8005b10:	6713      	str	r3, [r2, #112]	; 0x70
 8005b12:	e01c      	b.n	8005b4e <HAL_RCC_OscConfig+0x376>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	2b05      	cmp	r3, #5
 8005b1a:	d10c      	bne.n	8005b36 <HAL_RCC_OscConfig+0x35e>
 8005b1c:	4b64      	ldr	r3, [pc, #400]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b20:	4a63      	ldr	r2, [pc, #396]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005b22:	f043 0304 	orr.w	r3, r3, #4
 8005b26:	6713      	str	r3, [r2, #112]	; 0x70
 8005b28:	4b61      	ldr	r3, [pc, #388]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2c:	4a60      	ldr	r2, [pc, #384]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005b2e:	f043 0301 	orr.w	r3, r3, #1
 8005b32:	6713      	str	r3, [r2, #112]	; 0x70
 8005b34:	e00b      	b.n	8005b4e <HAL_RCC_OscConfig+0x376>
 8005b36:	4b5e      	ldr	r3, [pc, #376]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3a:	4a5d      	ldr	r2, [pc, #372]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005b3c:	f023 0301 	bic.w	r3, r3, #1
 8005b40:	6713      	str	r3, [r2, #112]	; 0x70
 8005b42:	4b5b      	ldr	r3, [pc, #364]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b46:	4a5a      	ldr	r2, [pc, #360]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005b48:	f023 0304 	bic.w	r3, r3, #4
 8005b4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d015      	beq.n	8005b82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b56:	f7fc fd81 	bl	800265c <HAL_GetTick>
 8005b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b5c:	e00a      	b.n	8005b74 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b5e:	f7fc fd7d 	bl	800265c <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d901      	bls.n	8005b74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e099      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b74:	4b4e      	ldr	r3, [pc, #312]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0ee      	beq.n	8005b5e <HAL_RCC_OscConfig+0x386>
 8005b80:	e014      	b.n	8005bac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b82:	f7fc fd6b 	bl	800265c <HAL_GetTick>
 8005b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b88:	e00a      	b.n	8005ba0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b8a:	f7fc fd67 	bl	800265c <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e083      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ba0:	4b43      	ldr	r3, [pc, #268]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1ee      	bne.n	8005b8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bac:	7dfb      	ldrb	r3, [r7, #23]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d105      	bne.n	8005bbe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bb2:	4b3f      	ldr	r3, [pc, #252]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	4a3e      	ldr	r2, [pc, #248]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d06f      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bc6:	4b3a      	ldr	r3, [pc, #232]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 030c 	and.w	r3, r3, #12
 8005bce:	2b08      	cmp	r3, #8
 8005bd0:	d067      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d149      	bne.n	8005c6e <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bda:	4b35      	ldr	r3, [pc, #212]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a34      	ldr	r2, [pc, #208]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005be0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be6:	f7fc fd39 	bl	800265c <HAL_GetTick>
 8005bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bec:	e008      	b.n	8005c00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bee:	f7fc fd35 	bl	800265c <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e053      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c00:	4b2b      	ldr	r3, [pc, #172]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1f0      	bne.n	8005bee <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	69da      	ldr	r2, [r3, #28]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	431a      	orrs	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	019b      	lsls	r3, r3, #6
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c22:	085b      	lsrs	r3, r3, #1
 8005c24:	3b01      	subs	r3, #1
 8005c26:	041b      	lsls	r3, r3, #16
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2e:	061b      	lsls	r3, r3, #24
 8005c30:	4313      	orrs	r3, r2
 8005c32:	4a1f      	ldr	r2, [pc, #124]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005c34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c38:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c3a:	4b1d      	ldr	r3, [pc, #116]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a1c      	ldr	r2, [pc, #112]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005c40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c46:	f7fc fd09 	bl	800265c <HAL_GetTick>
 8005c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c4c:	e008      	b.n	8005c60 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c4e:	f7fc fd05 	bl	800265c <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e023      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c60:	4b13      	ldr	r3, [pc, #76]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0f0      	beq.n	8005c4e <HAL_RCC_OscConfig+0x476>
 8005c6c:	e01b      	b.n	8005ca6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c6e:	4b10      	ldr	r3, [pc, #64]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a0f      	ldr	r2, [pc, #60]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005c74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c7a:	f7fc fcef 	bl	800265c <HAL_GetTick>
 8005c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c80:	e008      	b.n	8005c94 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c82:	f7fc fceb 	bl	800265c <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d901      	bls.n	8005c94 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e009      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c94:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <HAL_RCC_OscConfig+0x4d8>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1f0      	bne.n	8005c82 <HAL_RCC_OscConfig+0x4aa>
 8005ca0:	e001      	b.n	8005ca6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3718      	adds	r7, #24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	40023800 	.word	0x40023800
 8005cb4:	40007000 	.word	0x40007000

08005cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e0ce      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cd0:	4b69      	ldr	r3, [pc, #420]	; (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 030f 	and.w	r3, r3, #15
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d910      	bls.n	8005d00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cde:	4b66      	ldr	r3, [pc, #408]	; (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f023 020f 	bic.w	r2, r3, #15
 8005ce6:	4964      	ldr	r1, [pc, #400]	; (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cee:	4b62      	ldr	r3, [pc, #392]	; (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 030f 	and.w	r3, r3, #15
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d001      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e0b6      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d020      	beq.n	8005d4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d18:	4b58      	ldr	r3, [pc, #352]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	4a57      	ldr	r2, [pc, #348]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0308 	and.w	r3, r3, #8
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d005      	beq.n	8005d3c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d30:	4b52      	ldr	r3, [pc, #328]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	4a51      	ldr	r2, [pc, #324]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d3c:	4b4f      	ldr	r3, [pc, #316]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	494c      	ldr	r1, [pc, #304]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d040      	beq.n	8005ddc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d107      	bne.n	8005d72 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d62:	4b46      	ldr	r3, [pc, #280]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d115      	bne.n	8005d9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e07d      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d107      	bne.n	8005d8a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d7a:	4b40      	ldr	r3, [pc, #256]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d109      	bne.n	8005d9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e071      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d8a:	4b3c      	ldr	r3, [pc, #240]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e069      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d9a:	4b38      	ldr	r3, [pc, #224]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f023 0203 	bic.w	r2, r3, #3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	4935      	ldr	r1, [pc, #212]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dac:	f7fc fc56 	bl	800265c <HAL_GetTick>
 8005db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005db2:	e00a      	b.n	8005dca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005db4:	f7fc fc52 	bl	800265c <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e051      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dca:	4b2c      	ldr	r3, [pc, #176]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 020c 	and.w	r2, r3, #12
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d1eb      	bne.n	8005db4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ddc:	4b26      	ldr	r3, [pc, #152]	; (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 030f 	and.w	r3, r3, #15
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d210      	bcs.n	8005e0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dea:	4b23      	ldr	r3, [pc, #140]	; (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f023 020f 	bic.w	r2, r3, #15
 8005df2:	4921      	ldr	r1, [pc, #132]	; (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dfa:	4b1f      	ldr	r3, [pc, #124]	; (8005e78 <HAL_RCC_ClockConfig+0x1c0>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 030f 	and.w	r3, r3, #15
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d001      	beq.n	8005e0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e030      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d008      	beq.n	8005e2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e18:	4b18      	ldr	r3, [pc, #96]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	4915      	ldr	r1, [pc, #84]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0308 	and.w	r3, r3, #8
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d009      	beq.n	8005e4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e36:	4b11      	ldr	r3, [pc, #68]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	490d      	ldr	r1, [pc, #52]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e4a:	f000 f81d 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8005e4e:	4601      	mov	r1, r0
 8005e50:	4b0a      	ldr	r3, [pc, #40]	; (8005e7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	091b      	lsrs	r3, r3, #4
 8005e56:	f003 030f 	and.w	r3, r3, #15
 8005e5a:	4a09      	ldr	r2, [pc, #36]	; (8005e80 <HAL_RCC_ClockConfig+0x1c8>)
 8005e5c:	5cd3      	ldrb	r3, [r2, r3]
 8005e5e:	fa21 f303 	lsr.w	r3, r1, r3
 8005e62:	4a08      	ldr	r2, [pc, #32]	; (8005e84 <HAL_RCC_ClockConfig+0x1cc>)
 8005e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005e66:	2000      	movs	r0, #0
 8005e68:	f7fb fde4 	bl	8001a34 <HAL_InitTick>

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	40023c00 	.word	0x40023c00
 8005e7c:	40023800 	.word	0x40023800
 8005e80:	080269b0 	.word	0x080269b0
 8005e84:	20000004 	.word	0x20000004

08005e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	607b      	str	r3, [r7, #4]
 8005e92:	2300      	movs	r3, #0
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	2300      	movs	r3, #0
 8005e98:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e9e:	4b50      	ldr	r3, [pc, #320]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 030c 	and.w	r3, r3, #12
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	d007      	beq.n	8005eba <HAL_RCC_GetSysClockFreq+0x32>
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d008      	beq.n	8005ec0 <HAL_RCC_GetSysClockFreq+0x38>
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f040 808d 	bne.w	8005fce <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005eb4:	4b4b      	ldr	r3, [pc, #300]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005eb6:	60bb      	str	r3, [r7, #8]
       break;
 8005eb8:	e08c      	b.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005eba:	4b4b      	ldr	r3, [pc, #300]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ebc:	60bb      	str	r3, [r7, #8]
      break;
 8005ebe:	e089      	b.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ec0:	4b47      	ldr	r3, [pc, #284]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ec8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005eca:	4b45      	ldr	r3, [pc, #276]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d023      	beq.n	8005f1e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ed6:	4b42      	ldr	r3, [pc, #264]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	099b      	lsrs	r3, r3, #6
 8005edc:	f04f 0400 	mov.w	r4, #0
 8005ee0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	ea03 0501 	and.w	r5, r3, r1
 8005eec:	ea04 0602 	and.w	r6, r4, r2
 8005ef0:	4a3d      	ldr	r2, [pc, #244]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ef2:	fb02 f106 	mul.w	r1, r2, r6
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	fb02 f205 	mul.w	r2, r2, r5
 8005efc:	440a      	add	r2, r1
 8005efe:	493a      	ldr	r1, [pc, #232]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005f00:	fba5 0101 	umull	r0, r1, r5, r1
 8005f04:	1853      	adds	r3, r2, r1
 8005f06:	4619      	mov	r1, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f04f 0400 	mov.w	r4, #0
 8005f0e:	461a      	mov	r2, r3
 8005f10:	4623      	mov	r3, r4
 8005f12:	f7fa f9cd 	bl	80002b0 <__aeabi_uldivmod>
 8005f16:	4603      	mov	r3, r0
 8005f18:	460c      	mov	r4, r1
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	e049      	b.n	8005fb2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f1e:	4b30      	ldr	r3, [pc, #192]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	099b      	lsrs	r3, r3, #6
 8005f24:	f04f 0400 	mov.w	r4, #0
 8005f28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	ea03 0501 	and.w	r5, r3, r1
 8005f34:	ea04 0602 	and.w	r6, r4, r2
 8005f38:	4629      	mov	r1, r5
 8005f3a:	4632      	mov	r2, r6
 8005f3c:	f04f 0300 	mov.w	r3, #0
 8005f40:	f04f 0400 	mov.w	r4, #0
 8005f44:	0154      	lsls	r4, r2, #5
 8005f46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f4a:	014b      	lsls	r3, r1, #5
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4622      	mov	r2, r4
 8005f50:	1b49      	subs	r1, r1, r5
 8005f52:	eb62 0206 	sbc.w	r2, r2, r6
 8005f56:	f04f 0300 	mov.w	r3, #0
 8005f5a:	f04f 0400 	mov.w	r4, #0
 8005f5e:	0194      	lsls	r4, r2, #6
 8005f60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005f64:	018b      	lsls	r3, r1, #6
 8005f66:	1a5b      	subs	r3, r3, r1
 8005f68:	eb64 0402 	sbc.w	r4, r4, r2
 8005f6c:	f04f 0100 	mov.w	r1, #0
 8005f70:	f04f 0200 	mov.w	r2, #0
 8005f74:	00e2      	lsls	r2, r4, #3
 8005f76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005f7a:	00d9      	lsls	r1, r3, #3
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4614      	mov	r4, r2
 8005f80:	195b      	adds	r3, r3, r5
 8005f82:	eb44 0406 	adc.w	r4, r4, r6
 8005f86:	f04f 0100 	mov.w	r1, #0
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	02a2      	lsls	r2, r4, #10
 8005f90:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005f94:	0299      	lsls	r1, r3, #10
 8005f96:	460b      	mov	r3, r1
 8005f98:	4614      	mov	r4, r2
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f04f 0400 	mov.w	r4, #0
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	4623      	mov	r3, r4
 8005fa8:	f7fa f982 	bl	80002b0 <__aeabi_uldivmod>
 8005fac:	4603      	mov	r3, r0
 8005fae:	460c      	mov	r4, r1
 8005fb0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8005fb2:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	0c1b      	lsrs	r3, r3, #16
 8005fb8:	f003 0303 	and.w	r3, r3, #3
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fca:	60bb      	str	r3, [r7, #8]
      break;
 8005fcc:	e002      	b.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fce:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005fd0:	60bb      	str	r3, [r7, #8]
      break;
 8005fd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fd4:	68bb      	ldr	r3, [r7, #8]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	40023800 	.word	0x40023800
 8005fe4:	00f42400 	.word	0x00f42400
 8005fe8:	017d7840 	.word	0x017d7840

08005fec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ff0:	4b03      	ldr	r3, [pc, #12]	; (8006000 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	20000004 	.word	0x20000004

08006004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006008:	f7ff fff0 	bl	8005fec <HAL_RCC_GetHCLKFreq>
 800600c:	4601      	mov	r1, r0
 800600e:	4b05      	ldr	r3, [pc, #20]	; (8006024 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	0a9b      	lsrs	r3, r3, #10
 8006014:	f003 0307 	and.w	r3, r3, #7
 8006018:	4a03      	ldr	r2, [pc, #12]	; (8006028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800601a:	5cd3      	ldrb	r3, [r2, r3]
 800601c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006020:	4618      	mov	r0, r3
 8006022:	bd80      	pop	{r7, pc}
 8006024:	40023800 	.word	0x40023800
 8006028:	080269c0 	.word	0x080269c0

0800602c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	220f      	movs	r2, #15
 800603a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800603c:	4b12      	ldr	r3, [pc, #72]	; (8006088 <HAL_RCC_GetClockConfig+0x5c>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f003 0203 	and.w	r2, r3, #3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006048:	4b0f      	ldr	r3, [pc, #60]	; (8006088 <HAL_RCC_GetClockConfig+0x5c>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006054:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <HAL_RCC_GetClockConfig+0x5c>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006060:	4b09      	ldr	r3, [pc, #36]	; (8006088 <HAL_RCC_GetClockConfig+0x5c>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	08db      	lsrs	r3, r3, #3
 8006066:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800606e:	4b07      	ldr	r3, [pc, #28]	; (800608c <HAL_RCC_GetClockConfig+0x60>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 020f 	and.w	r2, r3, #15
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	601a      	str	r2, [r3, #0]
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	40023800 	.word	0x40023800
 800608c:	40023c00 	.word	0x40023c00

08006090 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b088      	sub	sp, #32
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006098:	2300      	movs	r3, #0
 800609a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800609c:	2300      	movs	r3, #0
 800609e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80060a0:	2300      	movs	r3, #0
 80060a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80060a4:	2300      	movs	r3, #0
 80060a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80060a8:	2300      	movs	r3, #0
 80060aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d012      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060b8:	4b69      	ldr	r3, [pc, #420]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	4a68      	ldr	r2, [pc, #416]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80060c2:	6093      	str	r3, [r2, #8]
 80060c4:	4b66      	ldr	r3, [pc, #408]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060cc:	4964      	ldr	r1, [pc, #400]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80060da:	2301      	movs	r3, #1
 80060dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d017      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060ea:	4b5d      	ldr	r3, [pc, #372]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f8:	4959      	ldr	r1, [pc, #356]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006108:	d101      	bne.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800610a:	2301      	movs	r3, #1
 800610c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006116:	2301      	movs	r3, #1
 8006118:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d017      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006126:	4b4e      	ldr	r3, [pc, #312]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800612c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006134:	494a      	ldr	r1, [pc, #296]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006136:	4313      	orrs	r3, r2
 8006138:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006144:	d101      	bne.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006146:	2301      	movs	r3, #1
 8006148:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006152:	2301      	movs	r3, #1
 8006154:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006162:	2301      	movs	r3, #1
 8006164:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 808b 	beq.w	800628a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006174:	4b3a      	ldr	r3, [pc, #232]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006178:	4a39      	ldr	r2, [pc, #228]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800617a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800617e:	6413      	str	r3, [r2, #64]	; 0x40
 8006180:	4b37      	ldr	r3, [pc, #220]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006188:	60bb      	str	r3, [r7, #8]
 800618a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800618c:	4b35      	ldr	r3, [pc, #212]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a34      	ldr	r2, [pc, #208]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006196:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006198:	f7fc fa60 	bl	800265c <HAL_GetTick>
 800619c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800619e:	e008      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061a0:	f7fc fa5c 	bl	800265c <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b64      	cmp	r3, #100	; 0x64
 80061ac:	d901      	bls.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e355      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80061b2:	4b2c      	ldr	r3, [pc, #176]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0f0      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061be:	4b28      	ldr	r3, [pc, #160]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d035      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d02e      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061dc:	4b20      	ldr	r3, [pc, #128]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061e6:	4b1e      	ldr	r3, [pc, #120]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ea:	4a1d      	ldr	r2, [pc, #116]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061f2:	4b1b      	ldr	r3, [pc, #108]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f6:	4a1a      	ldr	r2, [pc, #104]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80061fe:	4a18      	ldr	r2, [pc, #96]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006204:	4b16      	ldr	r3, [pc, #88]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b01      	cmp	r3, #1
 800620e:	d114      	bne.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006210:	f7fc fa24 	bl	800265c <HAL_GetTick>
 8006214:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006216:	e00a      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006218:	f7fc fa20 	bl	800265c <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	f241 3288 	movw	r2, #5000	; 0x1388
 8006226:	4293      	cmp	r3, r2
 8006228:	d901      	bls.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e317      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800622e:	4b0c      	ldr	r3, [pc, #48]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0ee      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006246:	d111      	bne.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006248:	4b05      	ldr	r3, [pc, #20]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006254:	4b04      	ldr	r3, [pc, #16]	; (8006268 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006256:	400b      	ands	r3, r1
 8006258:	4901      	ldr	r1, [pc, #4]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800625a:	4313      	orrs	r3, r2
 800625c:	608b      	str	r3, [r1, #8]
 800625e:	e00b      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006260:	40023800 	.word	0x40023800
 8006264:	40007000 	.word	0x40007000
 8006268:	0ffffcff 	.word	0x0ffffcff
 800626c:	4bb0      	ldr	r3, [pc, #704]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	4aaf      	ldr	r2, [pc, #700]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006272:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006276:	6093      	str	r3, [r2, #8]
 8006278:	4bad      	ldr	r3, [pc, #692]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800627a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006284:	49aa      	ldr	r1, [pc, #680]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006286:	4313      	orrs	r3, r2
 8006288:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0310 	and.w	r3, r3, #16
 8006292:	2b00      	cmp	r3, #0
 8006294:	d010      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006296:	4ba6      	ldr	r3, [pc, #664]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800629c:	4aa4      	ldr	r2, [pc, #656]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800629e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80062a6:	4ba2      	ldr	r3, [pc, #648]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b0:	499f      	ldr	r1, [pc, #636]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00a      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062c4:	4b9a      	ldr	r3, [pc, #616]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062d2:	4997      	ldr	r1, [pc, #604]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00a      	beq.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062e6:	4b92      	ldr	r3, [pc, #584]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062f4:	498e      	ldr	r1, [pc, #568]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00a      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006308:	4b89      	ldr	r3, [pc, #548]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800630a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006316:	4986      	ldr	r1, [pc, #536]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006318:	4313      	orrs	r3, r2
 800631a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00a      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800632a:	4b81      	ldr	r3, [pc, #516]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800632c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006330:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006338:	497d      	ldr	r1, [pc, #500]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800633a:	4313      	orrs	r3, r2
 800633c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00a      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800634c:	4b78      	ldr	r3, [pc, #480]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800634e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006352:	f023 0203 	bic.w	r2, r3, #3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635a:	4975      	ldr	r1, [pc, #468]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800635c:	4313      	orrs	r3, r2
 800635e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00a      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800636e:	4b70      	ldr	r3, [pc, #448]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006374:	f023 020c 	bic.w	r2, r3, #12
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800637c:	496c      	ldr	r1, [pc, #432]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800637e:	4313      	orrs	r3, r2
 8006380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00a      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006390:	4b67      	ldr	r3, [pc, #412]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006396:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800639e:	4964      	ldr	r1, [pc, #400]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00a      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063b2:	4b5f      	ldr	r3, [pc, #380]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c0:	495b      	ldr	r1, [pc, #364]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00a      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063d4:	4b56      	ldr	r3, [pc, #344]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e2:	4953      	ldr	r1, [pc, #332]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80063f6:	4b4e      	ldr	r3, [pc, #312]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006404:	494a      	ldr	r1, [pc, #296]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006406:	4313      	orrs	r3, r2
 8006408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006418:	4b45      	ldr	r3, [pc, #276]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800641a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800641e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006426:	4942      	ldr	r1, [pc, #264]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006428:	4313      	orrs	r3, r2
 800642a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800643a:	4b3d      	ldr	r3, [pc, #244]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800643c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006440:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006448:	4939      	ldr	r1, [pc, #228]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800644a:	4313      	orrs	r3, r2
 800644c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800645c:	4b34      	ldr	r3, [pc, #208]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800645e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006462:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800646a:	4931      	ldr	r1, [pc, #196]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800646c:	4313      	orrs	r3, r2
 800646e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d011      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800647e:	4b2c      	ldr	r3, [pc, #176]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006484:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800648c:	4928      	ldr	r1, [pc, #160]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800648e:	4313      	orrs	r3, r2
 8006490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800649c:	d101      	bne.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800649e:	2301      	movs	r3, #1
 80064a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0308 	and.w	r3, r3, #8
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80064ae:	2301      	movs	r3, #1
 80064b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00a      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064be:	4b1c      	ldr	r3, [pc, #112]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064cc:	4918      	ldr	r1, [pc, #96]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00b      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80064e0:	4b13      	ldr	r3, [pc, #76]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064f0:	490f      	ldr	r1, [pc, #60]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d005      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006506:	f040 80d8 	bne.w	80066ba <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800650a:	4b09      	ldr	r3, [pc, #36]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a08      	ldr	r2, [pc, #32]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006510:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006516:	f7fc f8a1 	bl	800265c <HAL_GetTick>
 800651a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800651c:	e00a      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800651e:	f7fc f89d 	bl	800265c <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b64      	cmp	r3, #100	; 0x64
 800652a:	d903      	bls.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e196      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006530:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006534:	4b6c      	ldr	r3, [pc, #432]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1ee      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b00      	cmp	r3, #0
 800654a:	d021      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006550:	2b00      	cmp	r3, #0
 8006552:	d11d      	bne.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006554:	4b64      	ldr	r3, [pc, #400]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800655a:	0c1b      	lsrs	r3, r3, #16
 800655c:	f003 0303 	and.w	r3, r3, #3
 8006560:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006562:	4b61      	ldr	r3, [pc, #388]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006568:	0e1b      	lsrs	r3, r3, #24
 800656a:	f003 030f 	and.w	r3, r3, #15
 800656e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	019a      	lsls	r2, r3, #6
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	041b      	lsls	r3, r3, #16
 800657a:	431a      	orrs	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	061b      	lsls	r3, r3, #24
 8006580:	431a      	orrs	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	071b      	lsls	r3, r3, #28
 8006588:	4957      	ldr	r1, [pc, #348]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800658a:	4313      	orrs	r3, r2
 800658c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d004      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065a4:	d00a      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d02e      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065ba:	d129      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80065bc:	4b4a      	ldr	r3, [pc, #296]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065c2:	0c1b      	lsrs	r3, r3, #16
 80065c4:	f003 0303 	and.w	r3, r3, #3
 80065c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80065ca:	4b47      	ldr	r3, [pc, #284]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065d0:	0f1b      	lsrs	r3, r3, #28
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	019a      	lsls	r2, r3, #6
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	041b      	lsls	r3, r3, #16
 80065e2:	431a      	orrs	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	061b      	lsls	r3, r3, #24
 80065ea:	431a      	orrs	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	071b      	lsls	r3, r3, #28
 80065f0:	493d      	ldr	r1, [pc, #244]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80065f8:	4b3b      	ldr	r3, [pc, #236]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065fe:	f023 021f 	bic.w	r2, r3, #31
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	3b01      	subs	r3, #1
 8006608:	4937      	ldr	r1, [pc, #220]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800660a:	4313      	orrs	r3, r2
 800660c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d01d      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800661c:	4b32      	ldr	r3, [pc, #200]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800661e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006622:	0e1b      	lsrs	r3, r3, #24
 8006624:	f003 030f 	and.w	r3, r3, #15
 8006628:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800662a:	4b2f      	ldr	r3, [pc, #188]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800662c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006630:	0f1b      	lsrs	r3, r3, #28
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	019a      	lsls	r2, r3, #6
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	041b      	lsls	r3, r3, #16
 8006644:	431a      	orrs	r2, r3
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	061b      	lsls	r3, r3, #24
 800664a:	431a      	orrs	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	071b      	lsls	r3, r3, #28
 8006650:	4925      	ldr	r1, [pc, #148]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006652:	4313      	orrs	r3, r2
 8006654:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d011      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	019a      	lsls	r2, r3, #6
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	041b      	lsls	r3, r3, #16
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	061b      	lsls	r3, r3, #24
 8006678:	431a      	orrs	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	071b      	lsls	r3, r3, #28
 8006680:	4919      	ldr	r1, [pc, #100]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006682:	4313      	orrs	r3, r2
 8006684:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006688:	4b17      	ldr	r3, [pc, #92]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a16      	ldr	r2, [pc, #88]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800668e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006694:	f7fb ffe2 	bl	800265c <HAL_GetTick>
 8006698:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800669a:	e008      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800669c:	f7fb ffde 	bl	800265c <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b64      	cmp	r3, #100	; 0x64
 80066a8:	d901      	bls.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e0d7      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066ae:	4b0e      	ldr	r3, [pc, #56]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d0f0      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	f040 80cd 	bne.w	800685c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80066c2:	4b09      	ldr	r3, [pc, #36]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a08      	ldr	r2, [pc, #32]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066ce:	f7fb ffc5 	bl	800265c <HAL_GetTick>
 80066d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066d4:	e00a      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80066d6:	f7fb ffc1 	bl	800265c <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b64      	cmp	r3, #100	; 0x64
 80066e2:	d903      	bls.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e0ba      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80066e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066ec:	4b5e      	ldr	r3, [pc, #376]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066f8:	d0ed      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670a:	2b00      	cmp	r3, #0
 800670c:	d009      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006716:	2b00      	cmp	r3, #0
 8006718:	d02e      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	d12a      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006722:	4b51      	ldr	r3, [pc, #324]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006728:	0c1b      	lsrs	r3, r3, #16
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006730:	4b4d      	ldr	r3, [pc, #308]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006736:	0f1b      	lsrs	r3, r3, #28
 8006738:	f003 0307 	and.w	r3, r3, #7
 800673c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	019a      	lsls	r2, r3, #6
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	041b      	lsls	r3, r3, #16
 8006748:	431a      	orrs	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	061b      	lsls	r3, r3, #24
 8006750:	431a      	orrs	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	071b      	lsls	r3, r3, #28
 8006756:	4944      	ldr	r1, [pc, #272]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006758:	4313      	orrs	r3, r2
 800675a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800675e:	4b42      	ldr	r3, [pc, #264]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006764:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676c:	3b01      	subs	r3, #1
 800676e:	021b      	lsls	r3, r3, #8
 8006770:	493d      	ldr	r1, [pc, #244]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006772:	4313      	orrs	r3, r2
 8006774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d022      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006788:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800678c:	d11d      	bne.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800678e:	4b36      	ldr	r3, [pc, #216]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006794:	0e1b      	lsrs	r3, r3, #24
 8006796:	f003 030f 	and.w	r3, r3, #15
 800679a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800679c:	4b32      	ldr	r3, [pc, #200]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800679e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a2:	0f1b      	lsrs	r3, r3, #28
 80067a4:	f003 0307 	and.w	r3, r3, #7
 80067a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	019a      	lsls	r2, r3, #6
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	041b      	lsls	r3, r3, #16
 80067b6:	431a      	orrs	r2, r3
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	061b      	lsls	r3, r3, #24
 80067bc:	431a      	orrs	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	071b      	lsls	r3, r3, #28
 80067c2:	4929      	ldr	r1, [pc, #164]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0308 	and.w	r3, r3, #8
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d028      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067d6:	4b24      	ldr	r3, [pc, #144]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067dc:	0e1b      	lsrs	r3, r3, #24
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80067e4:	4b20      	ldr	r3, [pc, #128]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ea:	0c1b      	lsrs	r3, r3, #16
 80067ec:	f003 0303 	and.w	r3, r3, #3
 80067f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	019a      	lsls	r2, r3, #6
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	041b      	lsls	r3, r3, #16
 80067fc:	431a      	orrs	r2, r3
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	061b      	lsls	r3, r3, #24
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	071b      	lsls	r3, r3, #28
 800680a:	4917      	ldr	r1, [pc, #92]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800680c:	4313      	orrs	r3, r2
 800680e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006812:	4b15      	ldr	r3, [pc, #84]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006818:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	4911      	ldr	r1, [pc, #68]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006822:	4313      	orrs	r3, r2
 8006824:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006828:	4b0f      	ldr	r3, [pc, #60]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a0e      	ldr	r2, [pc, #56]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800682e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006832:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006834:	f7fb ff12 	bl	800265c <HAL_GetTick>
 8006838:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800683a:	e008      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800683c:	f7fb ff0e 	bl	800265c <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b64      	cmp	r3, #100	; 0x64
 8006848:	d901      	bls.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e007      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800684e:	4b06      	ldr	r3, [pc, #24]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800685a:	d1ef      	bne.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3720      	adds	r7, #32
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	40023800 	.word	0x40023800

0800686c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e025      	b.n	80068cc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d106      	bne.n	800689a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7fb f8c3 	bl	8001a20 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2202      	movs	r2, #2
 800689e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	3304      	adds	r3, #4
 80068aa:	4619      	mov	r1, r3
 80068ac:	4610      	mov	r0, r2
 80068ae:	f000 fac1 	bl	8006e34 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6818      	ldr	r0, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	461a      	mov	r2, r3
 80068bc:	6839      	ldr	r1, [r7, #0]
 80068be:	f000 fb2b 	bl	8006f18 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d101      	bne.n	80068f0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80068ec:	2302      	movs	r3, #2
 80068ee:	e018      	b.n	8006922 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	68b9      	ldr	r1, [r7, #8]
 8006900:	4618      	mov	r0, r3
 8006902:	f000 fb89 	bl	8007018 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b02      	cmp	r3, #2
 800690c:	d104      	bne.n	8006918 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2205      	movs	r2, #5
 8006912:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006916:	e003      	b.n	8006920 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b082      	sub	sp, #8
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800693a:	b2db      	uxtb	r3, r3
 800693c:	2b02      	cmp	r3, #2
 800693e:	d101      	bne.n	8006944 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006940:	2302      	movs	r3, #2
 8006942:	e00e      	b.n	8006962 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	4618      	mov	r0, r3
 8006954:	f000 fb81 	bl	800705a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b082      	sub	sp, #8
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e01d      	b.n	80069b8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b00      	cmp	r3, #0
 8006986:	d106      	bne.n	8006996 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f815 	bl	80069c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2202      	movs	r2, #2
 800699a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3304      	adds	r3, #4
 80069a6:	4619      	mov	r1, r3
 80069a8:	4610      	mov	r0, r2
 80069aa:	f000 f985 	bl	8006cb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68da      	ldr	r2, [r3, #12]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 0201 	orr.w	r2, r2, #1
 80069ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	4b0c      	ldr	r3, [pc, #48]	; (8006a24 <HAL_TIM_Base_Start_IT+0x50>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b06      	cmp	r3, #6
 80069fc:	d00b      	beq.n	8006a16 <HAL_TIM_Base_Start_IT+0x42>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a04:	d007      	beq.n	8006a16 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f042 0201 	orr.w	r2, r2, #1
 8006a14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	00010007 	.word	0x00010007

08006a28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d122      	bne.n	8006a84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f003 0302 	and.w	r3, r3, #2
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d11b      	bne.n	8006a84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f06f 0202 	mvn.w	r2, #2
 8006a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	f003 0303 	and.w	r3, r3, #3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d003      	beq.n	8006a72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f905 	bl	8006c7a <HAL_TIM_IC_CaptureCallback>
 8006a70:	e005      	b.n	8006a7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f8f7 	bl	8006c66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f908 	bl	8006c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	f003 0304 	and.w	r3, r3, #4
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d122      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f003 0304 	and.w	r3, r3, #4
 8006a9c:	2b04      	cmp	r3, #4
 8006a9e:	d11b      	bne.n	8006ad8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f06f 0204 	mvn.w	r2, #4
 8006aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2202      	movs	r2, #2
 8006aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f8db 	bl	8006c7a <HAL_TIM_IC_CaptureCallback>
 8006ac4:	e005      	b.n	8006ad2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f8cd 	bl	8006c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f8de 	bl	8006c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	f003 0308 	and.w	r3, r3, #8
 8006ae2:	2b08      	cmp	r3, #8
 8006ae4:	d122      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f003 0308 	and.w	r3, r3, #8
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d11b      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f06f 0208 	mvn.w	r2, #8
 8006afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2204      	movs	r2, #4
 8006b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	f003 0303 	and.w	r3, r3, #3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f8b1 	bl	8006c7a <HAL_TIM_IC_CaptureCallback>
 8006b18:	e005      	b.n	8006b26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f8a3 	bl	8006c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f8b4 	bl	8006c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f003 0310 	and.w	r3, r3, #16
 8006b36:	2b10      	cmp	r3, #16
 8006b38:	d122      	bne.n	8006b80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f003 0310 	and.w	r3, r3, #16
 8006b44:	2b10      	cmp	r3, #16
 8006b46:	d11b      	bne.n	8006b80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f06f 0210 	mvn.w	r2, #16
 8006b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2208      	movs	r2, #8
 8006b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f887 	bl	8006c7a <HAL_TIM_IC_CaptureCallback>
 8006b6c:	e005      	b.n	8006b7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f879 	bl	8006c66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f88a 	bl	8006c8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d10e      	bne.n	8006bac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d107      	bne.n	8006bac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f06f 0201 	mvn.w	r2, #1
 8006ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7fa fc24 	bl	80013f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb6:	2b80      	cmp	r3, #128	; 0x80
 8006bb8:	d10e      	bne.n	8006bd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc4:	2b80      	cmp	r3, #128	; 0x80
 8006bc6:	d107      	bne.n	8006bd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f91a 	bl	8006e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006be6:	d10e      	bne.n	8006c06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf2:	2b80      	cmp	r3, #128	; 0x80
 8006bf4:	d107      	bne.n	8006c06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f90d 	bl	8006e20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c10:	2b40      	cmp	r3, #64	; 0x40
 8006c12:	d10e      	bne.n	8006c32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1e:	2b40      	cmp	r3, #64	; 0x40
 8006c20:	d107      	bne.n	8006c32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f838 	bl	8006ca2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	f003 0320 	and.w	r3, r3, #32
 8006c3c:	2b20      	cmp	r3, #32
 8006c3e:	d10e      	bne.n	8006c5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	f003 0320 	and.w	r3, r3, #32
 8006c4a:	2b20      	cmp	r3, #32
 8006c4c:	d107      	bne.n	8006c5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f06f 0220 	mvn.w	r2, #32
 8006c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f8cd 	bl	8006df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c5e:	bf00      	nop
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b083      	sub	sp, #12
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c6e:	bf00      	nop
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c82:	bf00      	nop
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b083      	sub	sp, #12
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c96:	bf00      	nop
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b083      	sub	sp, #12
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006caa:	bf00      	nop
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
	...

08006cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a40      	ldr	r2, [pc, #256]	; (8006dcc <TIM_Base_SetConfig+0x114>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d013      	beq.n	8006cf8 <TIM_Base_SetConfig+0x40>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd6:	d00f      	beq.n	8006cf8 <TIM_Base_SetConfig+0x40>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a3d      	ldr	r2, [pc, #244]	; (8006dd0 <TIM_Base_SetConfig+0x118>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d00b      	beq.n	8006cf8 <TIM_Base_SetConfig+0x40>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a3c      	ldr	r2, [pc, #240]	; (8006dd4 <TIM_Base_SetConfig+0x11c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d007      	beq.n	8006cf8 <TIM_Base_SetConfig+0x40>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a3b      	ldr	r2, [pc, #236]	; (8006dd8 <TIM_Base_SetConfig+0x120>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d003      	beq.n	8006cf8 <TIM_Base_SetConfig+0x40>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a3a      	ldr	r2, [pc, #232]	; (8006ddc <TIM_Base_SetConfig+0x124>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d108      	bne.n	8006d0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a2f      	ldr	r2, [pc, #188]	; (8006dcc <TIM_Base_SetConfig+0x114>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d02b      	beq.n	8006d6a <TIM_Base_SetConfig+0xb2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d18:	d027      	beq.n	8006d6a <TIM_Base_SetConfig+0xb2>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a2c      	ldr	r2, [pc, #176]	; (8006dd0 <TIM_Base_SetConfig+0x118>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d023      	beq.n	8006d6a <TIM_Base_SetConfig+0xb2>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a2b      	ldr	r2, [pc, #172]	; (8006dd4 <TIM_Base_SetConfig+0x11c>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d01f      	beq.n	8006d6a <TIM_Base_SetConfig+0xb2>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a2a      	ldr	r2, [pc, #168]	; (8006dd8 <TIM_Base_SetConfig+0x120>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d01b      	beq.n	8006d6a <TIM_Base_SetConfig+0xb2>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a29      	ldr	r2, [pc, #164]	; (8006ddc <TIM_Base_SetConfig+0x124>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d017      	beq.n	8006d6a <TIM_Base_SetConfig+0xb2>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a28      	ldr	r2, [pc, #160]	; (8006de0 <TIM_Base_SetConfig+0x128>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d013      	beq.n	8006d6a <TIM_Base_SetConfig+0xb2>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a27      	ldr	r2, [pc, #156]	; (8006de4 <TIM_Base_SetConfig+0x12c>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00f      	beq.n	8006d6a <TIM_Base_SetConfig+0xb2>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a26      	ldr	r2, [pc, #152]	; (8006de8 <TIM_Base_SetConfig+0x130>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00b      	beq.n	8006d6a <TIM_Base_SetConfig+0xb2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a25      	ldr	r2, [pc, #148]	; (8006dec <TIM_Base_SetConfig+0x134>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d007      	beq.n	8006d6a <TIM_Base_SetConfig+0xb2>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a24      	ldr	r2, [pc, #144]	; (8006df0 <TIM_Base_SetConfig+0x138>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d003      	beq.n	8006d6a <TIM_Base_SetConfig+0xb2>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a23      	ldr	r2, [pc, #140]	; (8006df4 <TIM_Base_SetConfig+0x13c>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d108      	bne.n	8006d7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a0a      	ldr	r2, [pc, #40]	; (8006dcc <TIM_Base_SetConfig+0x114>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d003      	beq.n	8006db0 <TIM_Base_SetConfig+0xf8>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a0c      	ldr	r2, [pc, #48]	; (8006ddc <TIM_Base_SetConfig+0x124>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d103      	bne.n	8006db8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	691a      	ldr	r2, [r3, #16]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	615a      	str	r2, [r3, #20]
}
 8006dbe:	bf00      	nop
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	40010000 	.word	0x40010000
 8006dd0:	40000400 	.word	0x40000400
 8006dd4:	40000800 	.word	0x40000800
 8006dd8:	40000c00 	.word	0x40000c00
 8006ddc:	40010400 	.word	0x40010400
 8006de0:	40014000 	.word	0x40014000
 8006de4:	40014400 	.word	0x40014400
 8006de8:	40014800 	.word	0x40014800
 8006dec:	40001800 	.word	0x40001800
 8006df0:	40001c00 	.word	0x40001c00
 8006df4:	40002000 	.word	0x40002000

08006df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8006e42:	2300      	movs	r3, #0
 8006e44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d027      	beq.n	8006e9e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	4b2f      	ldr	r3, [pc, #188]	; (8006f14 <FMC_SDRAM_Init+0xe0>)
 8006e58:	4013      	ands	r3, r2
 8006e5a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006e64:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8006e6a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8006e70:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8006e76:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8006e7c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8006e82:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8006e88:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006e8e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	601a      	str	r2, [r3, #0]
 8006e9c:	e032      	b.n	8006f04 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006eaa:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006eb4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006eba:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	4b12      	ldr	r3, [pc, #72]	; (8006f14 <FMC_SDRAM_Init+0xe0>)
 8006ecc:	4013      	ands	r3, r2
 8006ece:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006ed8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8006ede:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8006ee4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8006eea:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8006ef0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	ffff8000 	.word	0xffff8000

08006f18 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8006f24:	2300      	movs	r3, #0
 8006f26:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d02e      	beq.n	8006f90 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006f3e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006f4e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	3b01      	subs	r3, #1
 8006f56:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006f58:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006f62:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8006f6c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006f76:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006f80:	4313      	orrs	r3, r2
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	609a      	str	r2, [r3, #8]
 8006f8e:	e039      	b.n	8007004 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	4b1e      	ldr	r3, [pc, #120]	; (8007014 <FMC_SDRAM_Timing_Init+0xfc>)
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006fc2:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006fd2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8006fdc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006fe6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	371c      	adds	r7, #28
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	ff0f0fff 	.word	0xff0f0fff

08007018 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8007024:	2300      	movs	r3, #0
 8007026:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007030:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	3b01      	subs	r3, #1
 8007038:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800703a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007042:	4313      	orrs	r3, r2
 8007044:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	371c      	adds	r7, #28
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800705a:	b480      	push	{r7}
 800705c:	b083      	sub	sp, #12
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	695a      	ldr	r2, [r3, #20]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	005b      	lsls	r3, r3, #1
 800706c:	431a      	orrs	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	4603      	mov	r3, r0
 8007088:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800708a:	2300      	movs	r3, #0
 800708c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800708e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007092:	2b84      	cmp	r3, #132	; 0x84
 8007094:	d005      	beq.n	80070a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007096:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	4413      	add	r3, r2
 800709e:	3303      	adds	r3, #3
 80070a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80070a2:	68fb      	ldr	r3, [r7, #12]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80070b4:	f001 f86c 	bl	8008190 <vTaskStartScheduler>
  
  return osOK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	bd80      	pop	{r7, pc}

080070be <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80070be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070c0:	b087      	sub	sp, #28
 80070c2:	af02      	add	r7, sp, #8
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685c      	ldr	r4, [r3, #4]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070d4:	b29e      	uxth	r6, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80070dc:	4618      	mov	r0, r3
 80070de:	f7ff ffcf 	bl	8007080 <makeFreeRtosPriority>
 80070e2:	4602      	mov	r2, r0
 80070e4:	f107 030c 	add.w	r3, r7, #12
 80070e8:	9301      	str	r3, [sp, #4]
 80070ea:	9200      	str	r2, [sp, #0]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	4632      	mov	r2, r6
 80070f0:	4629      	mov	r1, r5
 80070f2:	4620      	mov	r0, r4
 80070f4:	f000 fee0 	bl	8007eb8 <xTaskCreate>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d001      	beq.n	8007102 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80070fe:	2300      	movs	r3, #0
 8007100:	e000      	b.n	8007104 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8007102:	68fb      	ldr	r3, [r7, #12]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800710c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <osDelay+0x16>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	e000      	b.n	8007124 <osDelay+0x18>
 8007122:	2301      	movs	r3, #1
 8007124:	4618      	mov	r0, r3
 8007126:	f000 fffd 	bl	8008124 <vTaskDelay>
  
  return osOK;
 800712a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f103 0208 	add.w	r2, r3, #8
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f04f 32ff 	mov.w	r2, #4294967295
 800714c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f103 0208 	add.w	r2, r3, #8
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f103 0208 	add.w	r2, r3, #8
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007182:	bf00      	nop
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800718e:	b480      	push	{r7}
 8007190:	b085      	sub	sp, #20
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	689a      	ldr	r2, [r3, #8]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	1c5a      	adds	r2, r3, #1
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	601a      	str	r2, [r3, #0]
}
 80071ca:	bf00      	nop
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071d6:	b480      	push	{r7}
 80071d8:	b085      	sub	sp, #20
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ec:	d103      	bne.n	80071f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	60fb      	str	r3, [r7, #12]
 80071f4:	e00c      	b.n	8007210 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	3308      	adds	r3, #8
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	e002      	b.n	8007204 <vListInsert+0x2e>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	429a      	cmp	r2, r3
 800720e:	d2f6      	bcs.n	80071fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	685a      	ldr	r2, [r3, #4]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	1c5a      	adds	r2, r3, #1
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	601a      	str	r2, [r3, #0]
}
 800723c:	bf00      	nop
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	6892      	ldr	r2, [r2, #8]
 800725e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	6852      	ldr	r2, [r2, #4]
 8007268:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	429a      	cmp	r2, r3
 8007272:	d103      	bne.n	800727c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	689a      	ldr	r2, [r3, #8]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	1e5a      	subs	r2, r3, #1
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10b      	bne.n	80072c8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80072b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b4:	b672      	cpsid	i
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	b662      	cpsie	i
 80072c4:	60bb      	str	r3, [r7, #8]
 80072c6:	e7fe      	b.n	80072c6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80072c8:	f001 feb6 	bl	8009038 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d4:	68f9      	ldr	r1, [r7, #12]
 80072d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80072d8:	fb01 f303 	mul.w	r3, r1, r3
 80072dc:	441a      	add	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f8:	3b01      	subs	r3, #1
 80072fa:	68f9      	ldr	r1, [r7, #12]
 80072fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80072fe:	fb01 f303 	mul.w	r3, r1, r3
 8007302:	441a      	add	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	22ff      	movs	r2, #255	; 0xff
 800730c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	22ff      	movs	r2, #255	; 0xff
 8007314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d114      	bne.n	8007348 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d01a      	beq.n	800735c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	3310      	adds	r3, #16
 800732a:	4618      	mov	r0, r3
 800732c:	f001 f98c 	bl	8008648 <xTaskRemoveFromEventList>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d012      	beq.n	800735c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007336:	4b0d      	ldr	r3, [pc, #52]	; (800736c <xQueueGenericReset+0xd0>)
 8007338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	e009      	b.n	800735c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	3310      	adds	r3, #16
 800734c:	4618      	mov	r0, r3
 800734e:	f7ff fef1 	bl	8007134 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	3324      	adds	r3, #36	; 0x24
 8007356:	4618      	mov	r0, r3
 8007358:	f7ff feec 	bl	8007134 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800735c:	f001 fe9e 	bl	800909c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007360:	2301      	movs	r3, #1
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	e000ed04 	.word	0xe000ed04

08007370 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007370:	b580      	push	{r7, lr}
 8007372:	b08a      	sub	sp, #40	; 0x28
 8007374:	af02      	add	r7, sp, #8
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	4613      	mov	r3, r2
 800737c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10b      	bne.n	800739c <xQueueGenericCreate+0x2c>
 8007384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007388:	b672      	cpsid	i
 800738a:	f383 8811 	msr	BASEPRI, r3
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	f3bf 8f4f 	dsb	sy
 8007396:	b662      	cpsie	i
 8007398:	613b      	str	r3, [r7, #16]
 800739a:	e7fe      	b.n	800739a <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d102      	bne.n	80073a8 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	61fb      	str	r3, [r7, #28]
 80073a6:	e004      	b.n	80073b2 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	fb02 f303 	mul.w	r3, r2, r3
 80073b0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	3348      	adds	r3, #72	; 0x48
 80073b6:	4618      	mov	r0, r3
 80073b8:	f001 ff60 	bl	800927c <pvPortMalloc>
 80073bc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00b      	beq.n	80073dc <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	3348      	adds	r3, #72	; 0x48
 80073c8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073ca:	79fa      	ldrb	r2, [r7, #7]
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	4613      	mov	r3, r2
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	68b9      	ldr	r1, [r7, #8]
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f000 f805 	bl	80073e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80073dc:	69bb      	ldr	r3, [r7, #24]
	}
 80073de:	4618      	mov	r0, r3
 80073e0:	3720      	adds	r7, #32
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b084      	sub	sp, #16
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	60f8      	str	r0, [r7, #12]
 80073ee:	60b9      	str	r1, [r7, #8]
 80073f0:	607a      	str	r2, [r7, #4]
 80073f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d103      	bne.n	8007402 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	e002      	b.n	8007408 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007414:	2101      	movs	r1, #1
 8007416:	69b8      	ldr	r0, [r7, #24]
 8007418:	f7ff ff40 	bl	800729c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800741c:	bf00      	nop
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b08e      	sub	sp, #56	; 0x38
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
 8007430:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007432:	2300      	movs	r3, #0
 8007434:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10b      	bne.n	8007458 <xQueueGenericSend+0x34>
 8007440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007444:	b672      	cpsid	i
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	b662      	cpsie	i
 8007454:	62bb      	str	r3, [r7, #40]	; 0x28
 8007456:	e7fe      	b.n	8007456 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d103      	bne.n	8007466 <xQueueGenericSend+0x42>
 800745e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <xQueueGenericSend+0x46>
 8007466:	2301      	movs	r3, #1
 8007468:	e000      	b.n	800746c <xQueueGenericSend+0x48>
 800746a:	2300      	movs	r3, #0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10b      	bne.n	8007488 <xQueueGenericSend+0x64>
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	b672      	cpsid	i
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	b662      	cpsie	i
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
 8007486:	e7fe      	b.n	8007486 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	2b02      	cmp	r3, #2
 800748c:	d103      	bne.n	8007496 <xQueueGenericSend+0x72>
 800748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007492:	2b01      	cmp	r3, #1
 8007494:	d101      	bne.n	800749a <xQueueGenericSend+0x76>
 8007496:	2301      	movs	r3, #1
 8007498:	e000      	b.n	800749c <xQueueGenericSend+0x78>
 800749a:	2300      	movs	r3, #0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10b      	bne.n	80074b8 <xQueueGenericSend+0x94>
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	b672      	cpsid	i
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	b662      	cpsie	i
 80074b4:	623b      	str	r3, [r7, #32]
 80074b6:	e7fe      	b.n	80074b6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074b8:	f001 fa6c 	bl	8008994 <xTaskGetSchedulerState>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d102      	bne.n	80074c8 <xQueueGenericSend+0xa4>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <xQueueGenericSend+0xa8>
 80074c8:	2301      	movs	r3, #1
 80074ca:	e000      	b.n	80074ce <xQueueGenericSend+0xaa>
 80074cc:	2300      	movs	r3, #0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10b      	bne.n	80074ea <xQueueGenericSend+0xc6>
 80074d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d6:	b672      	cpsid	i
 80074d8:	f383 8811 	msr	BASEPRI, r3
 80074dc:	f3bf 8f6f 	isb	sy
 80074e0:	f3bf 8f4f 	dsb	sy
 80074e4:	b662      	cpsie	i
 80074e6:	61fb      	str	r3, [r7, #28]
 80074e8:	e7fe      	b.n	80074e8 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074ea:	f001 fda5 	bl	8009038 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d302      	bcc.n	8007500 <xQueueGenericSend+0xdc>
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d129      	bne.n	8007554 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007500:	683a      	ldr	r2, [r7, #0]
 8007502:	68b9      	ldr	r1, [r7, #8]
 8007504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007506:	f000 fbc7 	bl	8007c98 <prvCopyDataToQueue>
 800750a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800750c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007510:	2b00      	cmp	r3, #0
 8007512:	d010      	beq.n	8007536 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	3324      	adds	r3, #36	; 0x24
 8007518:	4618      	mov	r0, r3
 800751a:	f001 f895 	bl	8008648 <xTaskRemoveFromEventList>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d013      	beq.n	800754c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007524:	4b3f      	ldr	r3, [pc, #252]	; (8007624 <xQueueGenericSend+0x200>)
 8007526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800752a:	601a      	str	r2, [r3, #0]
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	e00a      	b.n	800754c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007538:	2b00      	cmp	r3, #0
 800753a:	d007      	beq.n	800754c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800753c:	4b39      	ldr	r3, [pc, #228]	; (8007624 <xQueueGenericSend+0x200>)
 800753e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800754c:	f001 fda6 	bl	800909c <vPortExitCritical>
				return pdPASS;
 8007550:	2301      	movs	r3, #1
 8007552:	e063      	b.n	800761c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d103      	bne.n	8007562 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800755a:	f001 fd9f 	bl	800909c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800755e:	2300      	movs	r3, #0
 8007560:	e05c      	b.n	800761c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007564:	2b00      	cmp	r3, #0
 8007566:	d106      	bne.n	8007576 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007568:	f107 0314 	add.w	r3, r7, #20
 800756c:	4618      	mov	r0, r3
 800756e:	f001 f8cf 	bl	8008710 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007572:	2301      	movs	r3, #1
 8007574:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007576:	f001 fd91 	bl	800909c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800757a:	f000 fe53 	bl	8008224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800757e:	f001 fd5b 	bl	8009038 <vPortEnterCritical>
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007588:	b25b      	sxtb	r3, r3
 800758a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758e:	d103      	bne.n	8007598 <xQueueGenericSend+0x174>
 8007590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007592:	2200      	movs	r2, #0
 8007594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800759e:	b25b      	sxtb	r3, r3
 80075a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a4:	d103      	bne.n	80075ae <xQueueGenericSend+0x18a>
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075ae:	f001 fd75 	bl	800909c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075b2:	1d3a      	adds	r2, r7, #4
 80075b4:	f107 0314 	add.w	r3, r7, #20
 80075b8:	4611      	mov	r1, r2
 80075ba:	4618      	mov	r0, r3
 80075bc:	f001 f8be 	bl	800873c <xTaskCheckForTimeOut>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d124      	bne.n	8007610 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80075c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075c8:	f000 fc5e 	bl	8007e88 <prvIsQueueFull>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d018      	beq.n	8007604 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d4:	3310      	adds	r3, #16
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	4611      	mov	r1, r2
 80075da:	4618      	mov	r0, r3
 80075dc:	f001 f80e 	bl	80085fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80075e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075e2:	f000 fbe9 	bl	8007db8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80075e6:	f000 fe2b 	bl	8008240 <xTaskResumeAll>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f47f af7c 	bne.w	80074ea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80075f2:	4b0c      	ldr	r3, [pc, #48]	; (8007624 <xQueueGenericSend+0x200>)
 80075f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075f8:	601a      	str	r2, [r3, #0]
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	e772      	b.n	80074ea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007606:	f000 fbd7 	bl	8007db8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800760a:	f000 fe19 	bl	8008240 <xTaskResumeAll>
 800760e:	e76c      	b.n	80074ea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007612:	f000 fbd1 	bl	8007db8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007616:	f000 fe13 	bl	8008240 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800761a:	2300      	movs	r3, #0
		}
	}
}
 800761c:	4618      	mov	r0, r3
 800761e:	3738      	adds	r7, #56	; 0x38
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	e000ed04 	.word	0xe000ed04

08007628 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08e      	sub	sp, #56	; 0x38
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
 8007634:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10b      	bne.n	8007658 <xQueueGenericSendFromISR+0x30>
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	b672      	cpsid	i
 8007646:	f383 8811 	msr	BASEPRI, r3
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	b662      	cpsie	i
 8007654:	627b      	str	r3, [r7, #36]	; 0x24
 8007656:	e7fe      	b.n	8007656 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d103      	bne.n	8007666 <xQueueGenericSendFromISR+0x3e>
 800765e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <xQueueGenericSendFromISR+0x42>
 8007666:	2301      	movs	r3, #1
 8007668:	e000      	b.n	800766c <xQueueGenericSendFromISR+0x44>
 800766a:	2300      	movs	r3, #0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10b      	bne.n	8007688 <xQueueGenericSendFromISR+0x60>
 8007670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007674:	b672      	cpsid	i
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	b662      	cpsie	i
 8007684:	623b      	str	r3, [r7, #32]
 8007686:	e7fe      	b.n	8007686 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b02      	cmp	r3, #2
 800768c:	d103      	bne.n	8007696 <xQueueGenericSendFromISR+0x6e>
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007692:	2b01      	cmp	r3, #1
 8007694:	d101      	bne.n	800769a <xQueueGenericSendFromISR+0x72>
 8007696:	2301      	movs	r3, #1
 8007698:	e000      	b.n	800769c <xQueueGenericSendFromISR+0x74>
 800769a:	2300      	movs	r3, #0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10b      	bne.n	80076b8 <xQueueGenericSendFromISR+0x90>
 80076a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a4:	b672      	cpsid	i
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	b662      	cpsie	i
 80076b4:	61fb      	str	r3, [r7, #28]
 80076b6:	e7fe      	b.n	80076b6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076b8:	f001 fd9e 	bl	80091f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80076bc:	f3ef 8211 	mrs	r2, BASEPRI
 80076c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c4:	b672      	cpsid	i
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	b662      	cpsie	i
 80076d4:	61ba      	str	r2, [r7, #24]
 80076d6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80076d8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076da:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d302      	bcc.n	80076ee <xQueueGenericSendFromISR+0xc6>
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d12c      	bne.n	8007748 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80076f8:	683a      	ldr	r2, [r7, #0]
 80076fa:	68b9      	ldr	r1, [r7, #8]
 80076fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076fe:	f000 facb 	bl	8007c98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007702:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800770a:	d112      	bne.n	8007732 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800770c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	2b00      	cmp	r3, #0
 8007712:	d016      	beq.n	8007742 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007716:	3324      	adds	r3, #36	; 0x24
 8007718:	4618      	mov	r0, r3
 800771a:	f000 ff95 	bl	8008648 <xTaskRemoveFromEventList>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00e      	beq.n	8007742 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00b      	beq.n	8007742 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	601a      	str	r2, [r3, #0]
 8007730:	e007      	b.n	8007742 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007732:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007736:	3301      	adds	r3, #1
 8007738:	b2db      	uxtb	r3, r3
 800773a:	b25a      	sxtb	r2, r3
 800773c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007742:	2301      	movs	r3, #1
 8007744:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007746:	e001      	b.n	800774c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007748:	2300      	movs	r3, #0
 800774a:	637b      	str	r3, [r7, #52]	; 0x34
 800774c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007758:	4618      	mov	r0, r3
 800775a:	3738      	adds	r7, #56	; 0x38
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b08e      	sub	sp, #56	; 0x38
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800776e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10b      	bne.n	800778c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007778:	b672      	cpsid	i
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	b662      	cpsie	i
 8007788:	623b      	str	r3, [r7, #32]
 800778a:	e7fe      	b.n	800778a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800778c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00b      	beq.n	80077ac <xQueueGiveFromISR+0x4c>
 8007794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007798:	b672      	cpsid	i
 800779a:	f383 8811 	msr	BASEPRI, r3
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	b662      	cpsie	i
 80077a8:	61fb      	str	r3, [r7, #28]
 80077aa:	e7fe      	b.n	80077aa <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80077ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d103      	bne.n	80077bc <xQueueGiveFromISR+0x5c>
 80077b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <xQueueGiveFromISR+0x60>
 80077bc:	2301      	movs	r3, #1
 80077be:	e000      	b.n	80077c2 <xQueueGiveFromISR+0x62>
 80077c0:	2300      	movs	r3, #0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10b      	bne.n	80077de <xQueueGiveFromISR+0x7e>
 80077c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ca:	b672      	cpsid	i
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	b662      	cpsie	i
 80077da:	61bb      	str	r3, [r7, #24]
 80077dc:	e7fe      	b.n	80077dc <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077de:	f001 fd0b 	bl	80091f8 <vPortValidateInterruptPriority>
	__asm volatile
 80077e2:	f3ef 8211 	mrs	r2, BASEPRI
 80077e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ea:	b672      	cpsid	i
 80077ec:	f383 8811 	msr	BASEPRI, r3
 80077f0:	f3bf 8f6f 	isb	sy
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	b662      	cpsie	i
 80077fa:	617a      	str	r2, [r7, #20]
 80077fc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80077fe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007800:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007806:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800780c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800780e:	429a      	cmp	r2, r3
 8007810:	d22b      	bcs.n	800786a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007814:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800781c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781e:	1c5a      	adds	r2, r3, #1
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007822:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007824:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782c:	d112      	bne.n	8007854 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007832:	2b00      	cmp	r3, #0
 8007834:	d016      	beq.n	8007864 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007838:	3324      	adds	r3, #36	; 0x24
 800783a:	4618      	mov	r0, r3
 800783c:	f000 ff04 	bl	8008648 <xTaskRemoveFromEventList>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00e      	beq.n	8007864 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00b      	beq.n	8007864 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2201      	movs	r2, #1
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	e007      	b.n	8007864 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007858:	3301      	adds	r3, #1
 800785a:	b2db      	uxtb	r3, r3
 800785c:	b25a      	sxtb	r2, r3
 800785e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007864:	2301      	movs	r3, #1
 8007866:	637b      	str	r3, [r7, #52]	; 0x34
 8007868:	e001      	b.n	800786e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800786a:	2300      	movs	r3, #0
 800786c:	637b      	str	r3, [r7, #52]	; 0x34
 800786e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007870:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800787a:	4618      	mov	r0, r3
 800787c:	3738      	adds	r7, #56	; 0x38
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
	...

08007884 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b08c      	sub	sp, #48	; 0x30
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007890:	2300      	movs	r3, #0
 8007892:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10b      	bne.n	80078b6 <xQueueReceive+0x32>
	__asm volatile
 800789e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a2:	b672      	cpsid	i
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	b662      	cpsie	i
 80078b2:	623b      	str	r3, [r7, #32]
 80078b4:	e7fe      	b.n	80078b4 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d103      	bne.n	80078c4 <xQueueReceive+0x40>
 80078bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <xQueueReceive+0x44>
 80078c4:	2301      	movs	r3, #1
 80078c6:	e000      	b.n	80078ca <xQueueReceive+0x46>
 80078c8:	2300      	movs	r3, #0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10b      	bne.n	80078e6 <xQueueReceive+0x62>
 80078ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d2:	b672      	cpsid	i
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	b662      	cpsie	i
 80078e2:	61fb      	str	r3, [r7, #28]
 80078e4:	e7fe      	b.n	80078e4 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078e6:	f001 f855 	bl	8008994 <xTaskGetSchedulerState>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d102      	bne.n	80078f6 <xQueueReceive+0x72>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <xQueueReceive+0x76>
 80078f6:	2301      	movs	r3, #1
 80078f8:	e000      	b.n	80078fc <xQueueReceive+0x78>
 80078fa:	2300      	movs	r3, #0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10b      	bne.n	8007918 <xQueueReceive+0x94>
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	b672      	cpsid	i
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	b662      	cpsie	i
 8007914:	61bb      	str	r3, [r7, #24]
 8007916:	e7fe      	b.n	8007916 <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007918:	f001 fb8e 	bl	8009038 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800791c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007920:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007924:	2b00      	cmp	r3, #0
 8007926:	d01f      	beq.n	8007968 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007928:	68b9      	ldr	r1, [r7, #8]
 800792a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800792c:	f000 fa1e 	bl	8007d6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	1e5a      	subs	r2, r3, #1
 8007934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007936:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00f      	beq.n	8007960 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007942:	3310      	adds	r3, #16
 8007944:	4618      	mov	r0, r3
 8007946:	f000 fe7f 	bl	8008648 <xTaskRemoveFromEventList>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d007      	beq.n	8007960 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007950:	4b3c      	ldr	r3, [pc, #240]	; (8007a44 <xQueueReceive+0x1c0>)
 8007952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007960:	f001 fb9c 	bl	800909c <vPortExitCritical>
				return pdPASS;
 8007964:	2301      	movs	r3, #1
 8007966:	e069      	b.n	8007a3c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d103      	bne.n	8007976 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800796e:	f001 fb95 	bl	800909c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007972:	2300      	movs	r3, #0
 8007974:	e062      	b.n	8007a3c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007978:	2b00      	cmp	r3, #0
 800797a:	d106      	bne.n	800798a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800797c:	f107 0310 	add.w	r3, r7, #16
 8007980:	4618      	mov	r0, r3
 8007982:	f000 fec5 	bl	8008710 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007986:	2301      	movs	r3, #1
 8007988:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800798a:	f001 fb87 	bl	800909c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800798e:	f000 fc49 	bl	8008224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007992:	f001 fb51 	bl	8009038 <vPortEnterCritical>
 8007996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800799c:	b25b      	sxtb	r3, r3
 800799e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a2:	d103      	bne.n	80079ac <xQueueReceive+0x128>
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079b2:	b25b      	sxtb	r3, r3
 80079b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b8:	d103      	bne.n	80079c2 <xQueueReceive+0x13e>
 80079ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079c2:	f001 fb6b 	bl	800909c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079c6:	1d3a      	adds	r2, r7, #4
 80079c8:	f107 0310 	add.w	r3, r7, #16
 80079cc:	4611      	mov	r1, r2
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 feb4 	bl	800873c <xTaskCheckForTimeOut>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d123      	bne.n	8007a22 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079dc:	f000 fa3e 	bl	8007e5c <prvIsQueueEmpty>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d017      	beq.n	8007a16 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80079e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e8:	3324      	adds	r3, #36	; 0x24
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	4611      	mov	r1, r2
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 fe04 	bl	80085fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80079f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079f6:	f000 f9df 	bl	8007db8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80079fa:	f000 fc21 	bl	8008240 <xTaskResumeAll>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d189      	bne.n	8007918 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007a04:	4b0f      	ldr	r3, [pc, #60]	; (8007a44 <xQueueReceive+0x1c0>)
 8007a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a0a:	601a      	str	r2, [r3, #0]
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	e780      	b.n	8007918 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007a16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a18:	f000 f9ce 	bl	8007db8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a1c:	f000 fc10 	bl	8008240 <xTaskResumeAll>
 8007a20:	e77a      	b.n	8007918 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a24:	f000 f9c8 	bl	8007db8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a28:	f000 fc0a 	bl	8008240 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a2e:	f000 fa15 	bl	8007e5c <prvIsQueueEmpty>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f43f af6f 	beq.w	8007918 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a3a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3730      	adds	r7, #48	; 0x30
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	e000ed04 	.word	0xe000ed04

08007a48 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b08e      	sub	sp, #56	; 0x38
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a52:	2300      	movs	r3, #0
 8007a54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10b      	bne.n	8007a7c <xQueueSemaphoreTake+0x34>
 8007a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a68:	b672      	cpsid	i
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	b662      	cpsie	i
 8007a78:	623b      	str	r3, [r7, #32]
 8007a7a:	e7fe      	b.n	8007a7a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00b      	beq.n	8007a9c <xQueueSemaphoreTake+0x54>
 8007a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a88:	b672      	cpsid	i
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	b662      	cpsie	i
 8007a98:	61fb      	str	r3, [r7, #28]
 8007a9a:	e7fe      	b.n	8007a9a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a9c:	f000 ff7a 	bl	8008994 <xTaskGetSchedulerState>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d102      	bne.n	8007aac <xQueueSemaphoreTake+0x64>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <xQueueSemaphoreTake+0x68>
 8007aac:	2301      	movs	r3, #1
 8007aae:	e000      	b.n	8007ab2 <xQueueSemaphoreTake+0x6a>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10b      	bne.n	8007ace <xQueueSemaphoreTake+0x86>
 8007ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aba:	b672      	cpsid	i
 8007abc:	f383 8811 	msr	BASEPRI, r3
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	b662      	cpsie	i
 8007aca:	61bb      	str	r3, [r7, #24]
 8007acc:	e7fe      	b.n	8007acc <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ace:	f001 fab3 	bl	8009038 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d024      	beq.n	8007b28 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae0:	1e5a      	subs	r2, r3, #1
 8007ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d104      	bne.n	8007af8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007aee:	f001 f91f 	bl	8008d30 <pvTaskIncrementMutexHeldCount>
 8007af2:	4602      	mov	r2, r0
 8007af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af6:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00f      	beq.n	8007b20 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b02:	3310      	adds	r3, #16
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 fd9f 	bl	8008648 <xTaskRemoveFromEventList>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d007      	beq.n	8007b20 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b10:	4b54      	ldr	r3, [pc, #336]	; (8007c64 <xQueueSemaphoreTake+0x21c>)
 8007b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b20:	f001 fabc 	bl	800909c <vPortExitCritical>
				return pdPASS;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e098      	b.n	8007c5a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d112      	bne.n	8007b54 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00b      	beq.n	8007b4c <xQueueSemaphoreTake+0x104>
 8007b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b38:	b672      	cpsid	i
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	b662      	cpsie	i
 8007b48:	617b      	str	r3, [r7, #20]
 8007b4a:	e7fe      	b.n	8007b4a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007b4c:	f001 faa6 	bl	800909c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b50:	2300      	movs	r3, #0
 8007b52:	e082      	b.n	8007c5a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d106      	bne.n	8007b68 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b5a:	f107 030c 	add.w	r3, r7, #12
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 fdd6 	bl	8008710 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b64:	2301      	movs	r3, #1
 8007b66:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b68:	f001 fa98 	bl	800909c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b6c:	f000 fb5a 	bl	8008224 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b70:	f001 fa62 	bl	8009038 <vPortEnterCritical>
 8007b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b7a:	b25b      	sxtb	r3, r3
 8007b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b80:	d103      	bne.n	8007b8a <xQueueSemaphoreTake+0x142>
 8007b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b90:	b25b      	sxtb	r3, r3
 8007b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b96:	d103      	bne.n	8007ba0 <xQueueSemaphoreTake+0x158>
 8007b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ba0:	f001 fa7c 	bl	800909c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ba4:	463a      	mov	r2, r7
 8007ba6:	f107 030c 	add.w	r3, r7, #12
 8007baa:	4611      	mov	r1, r2
 8007bac:	4618      	mov	r0, r3
 8007bae:	f000 fdc5 	bl	800873c <xTaskCheckForTimeOut>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d132      	bne.n	8007c1e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bba:	f000 f94f 	bl	8007e5c <prvIsQueueEmpty>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d026      	beq.n	8007c12 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d109      	bne.n	8007be0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007bcc:	f001 fa34 	bl	8009038 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 fefb 	bl	80089d0 <xTaskPriorityInherit>
 8007bda:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007bdc:	f001 fa5e 	bl	800909c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be2:	3324      	adds	r3, #36	; 0x24
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	4611      	mov	r1, r2
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 fd07 	bl	80085fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007bee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bf0:	f000 f8e2 	bl	8007db8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007bf4:	f000 fb24 	bl	8008240 <xTaskResumeAll>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f47f af67 	bne.w	8007ace <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007c00:	4b18      	ldr	r3, [pc, #96]	; (8007c64 <xQueueSemaphoreTake+0x21c>)
 8007c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c06:	601a      	str	r2, [r3, #0]
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	e75d      	b.n	8007ace <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007c12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c14:	f000 f8d0 	bl	8007db8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c18:	f000 fb12 	bl	8008240 <xTaskResumeAll>
 8007c1c:	e757      	b.n	8007ace <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007c1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c20:	f000 f8ca 	bl	8007db8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c24:	f000 fb0c 	bl	8008240 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c2a:	f000 f917 	bl	8007e5c <prvIsQueueEmpty>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f43f af4c 	beq.w	8007ace <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00d      	beq.n	8007c58 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007c3c:	f001 f9fc 	bl	8009038 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007c40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c42:	f000 f811 	bl	8007c68 <prvGetDisinheritPriorityAfterTimeout>
 8007c46:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8007c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 ffcc 	bl	8008bec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007c54:	f001 fa22 	bl	800909c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3738      	adds	r7, #56	; 0x38
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	e000ed04 	.word	0xe000ed04

08007c68 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d006      	beq.n	8007c86 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f1c3 0307 	rsb	r3, r3, #7
 8007c82:	60fb      	str	r3, [r7, #12]
 8007c84:	e001      	b.n	8007c8a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007c86:	2300      	movs	r3, #0
 8007c88:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
	}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10d      	bne.n	8007cd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d14d      	bne.n	8007d5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 ff0a 	bl	8008adc <xTaskPriorityDisinherit>
 8007cc8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	605a      	str	r2, [r3, #4]
 8007cd0:	e043      	b.n	8007d5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d119      	bne.n	8007d0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6898      	ldr	r0, [r3, #8]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	68b9      	ldr	r1, [r7, #8]
 8007ce4:	f01d f836 	bl	8024d54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	689a      	ldr	r2, [r3, #8]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf0:	441a      	add	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	689a      	ldr	r2, [r3, #8]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d32b      	bcc.n	8007d5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	609a      	str	r2, [r3, #8]
 8007d0a:	e026      	b.n	8007d5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	68d8      	ldr	r0, [r3, #12]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d14:	461a      	mov	r2, r3
 8007d16:	68b9      	ldr	r1, [r7, #8]
 8007d18:	f01d f81c 	bl	8024d54 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	68da      	ldr	r2, [r3, #12]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d24:	425b      	negs	r3, r3
 8007d26:	441a      	add	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	68da      	ldr	r2, [r3, #12]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d207      	bcs.n	8007d48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d40:	425b      	negs	r3, r3
 8007d42:	441a      	add	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d105      	bne.n	8007d5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	3b01      	subs	r3, #1
 8007d58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	1c5a      	adds	r2, r3, #1
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007d62:	697b      	ldr	r3, [r7, #20]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d018      	beq.n	8007db0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68da      	ldr	r2, [r3, #12]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d86:	441a      	add	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68da      	ldr	r2, [r3, #12]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d303      	bcc.n	8007da0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68d9      	ldr	r1, [r3, #12]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da8:	461a      	mov	r2, r3
 8007daa:	6838      	ldr	r0, [r7, #0]
 8007dac:	f01c ffd2 	bl	8024d54 <memcpy>
	}
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007dc0:	f001 f93a 	bl	8009038 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007dcc:	e011      	b.n	8007df2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d012      	beq.n	8007dfc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	3324      	adds	r3, #36	; 0x24
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f000 fc34 	bl	8008648 <xTaskRemoveFromEventList>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007de6:	f000 fd0d 	bl	8008804 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
 8007dec:	3b01      	subs	r3, #1
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	dce9      	bgt.n	8007dce <prvUnlockQueue+0x16>
 8007dfa:	e000      	b.n	8007dfe <prvUnlockQueue+0x46>
					break;
 8007dfc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	22ff      	movs	r2, #255	; 0xff
 8007e02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e06:	f001 f949 	bl	800909c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e0a:	f001 f915 	bl	8009038 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e16:	e011      	b.n	8007e3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d012      	beq.n	8007e46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	3310      	adds	r3, #16
 8007e24:	4618      	mov	r0, r3
 8007e26:	f000 fc0f 	bl	8008648 <xTaskRemoveFromEventList>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e30:	f000 fce8 	bl	8008804 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e34:	7bbb      	ldrb	r3, [r7, #14]
 8007e36:	3b01      	subs	r3, #1
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	dce9      	bgt.n	8007e18 <prvUnlockQueue+0x60>
 8007e44:	e000      	b.n	8007e48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	22ff      	movs	r2, #255	; 0xff
 8007e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007e50:	f001 f924 	bl	800909c <vPortExitCritical>
}
 8007e54:	bf00      	nop
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e64:	f001 f8e8 	bl	8009038 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d102      	bne.n	8007e76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e70:	2301      	movs	r3, #1
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	e001      	b.n	8007e7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e76:	2300      	movs	r3, #0
 8007e78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e7a:	f001 f90f 	bl	800909c <vPortExitCritical>

	return xReturn;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e90:	f001 f8d2 	bl	8009038 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d102      	bne.n	8007ea6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	e001      	b.n	8007eaa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007eaa:	f001 f8f7 	bl	800909c <vPortExitCritical>

	return xReturn;
 8007eae:	68fb      	ldr	r3, [r7, #12]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b08c      	sub	sp, #48	; 0x30
 8007ebc:	af04      	add	r7, sp, #16
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	603b      	str	r3, [r7, #0]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ec8:	88fb      	ldrh	r3, [r7, #6]
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f001 f9d5 	bl	800927c <pvPortMalloc>
 8007ed2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00e      	beq.n	8007ef8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007eda:	2058      	movs	r0, #88	; 0x58
 8007edc:	f001 f9ce 	bl	800927c <pvPortMalloc>
 8007ee0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d003      	beq.n	8007ef0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	631a      	str	r2, [r3, #48]	; 0x30
 8007eee:	e005      	b.n	8007efc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ef0:	6978      	ldr	r0, [r7, #20]
 8007ef2:	f001 fa8f 	bl	8009414 <vPortFree>
 8007ef6:	e001      	b.n	8007efc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d013      	beq.n	8007f2a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f02:	88fa      	ldrh	r2, [r7, #6]
 8007f04:	2300      	movs	r3, #0
 8007f06:	9303      	str	r3, [sp, #12]
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	9302      	str	r3, [sp, #8]
 8007f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0e:	9301      	str	r3, [sp, #4]
 8007f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	68b9      	ldr	r1, [r7, #8]
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f000 f80e 	bl	8007f3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f1e:	69f8      	ldr	r0, [r7, #28]
 8007f20:	f000 f896 	bl	8008050 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f24:	2301      	movs	r3, #1
 8007f26:	61bb      	str	r3, [r7, #24]
 8007f28:	e002      	b.n	8007f30 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f2e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f30:	69bb      	ldr	r3, [r7, #24]
	}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3720      	adds	r7, #32
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b088      	sub	sp, #32
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	60f8      	str	r0, [r7, #12]
 8007f42:	60b9      	str	r1, [r7, #8]
 8007f44:	607a      	str	r2, [r7, #4]
 8007f46:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	461a      	mov	r2, r3
 8007f52:	21a5      	movs	r1, #165	; 0xa5
 8007f54:	f01c ff09 	bl	8024d6a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f5c:	6879      	ldr	r1, [r7, #4]
 8007f5e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007f62:	440b      	add	r3, r1
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	f023 0307 	bic.w	r3, r3, #7
 8007f70:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	f003 0307 	and.w	r3, r3, #7
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00b      	beq.n	8007f94 <prvInitialiseNewTask+0x5a>
 8007f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f80:	b672      	cpsid	i
 8007f82:	f383 8811 	msr	BASEPRI, r3
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	b662      	cpsie	i
 8007f90:	617b      	str	r3, [r7, #20]
 8007f92:	e7fe      	b.n	8007f92 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f94:	2300      	movs	r3, #0
 8007f96:	61fb      	str	r3, [r7, #28]
 8007f98:	e012      	b.n	8007fc0 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	7819      	ldrb	r1, [r3, #0]
 8007fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	3334      	adds	r3, #52	; 0x34
 8007faa:	460a      	mov	r2, r1
 8007fac:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d006      	beq.n	8007fc8 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	61fb      	str	r3, [r7, #28]
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	2b0f      	cmp	r3, #15
 8007fc4:	d9e9      	bls.n	8007f9a <prvInitialiseNewTask+0x60>
 8007fc6:	e000      	b.n	8007fca <prvInitialiseNewTask+0x90>
		{
			break;
 8007fc8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd4:	2b06      	cmp	r3, #6
 8007fd6:	d901      	bls.n	8007fdc <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007fd8:	2306      	movs	r3, #6
 8007fda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fe0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fe6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fea:	2200      	movs	r2, #0
 8007fec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7ff f8be 	bl	8007174 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffa:	3318      	adds	r3, #24
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7ff f8b9 	bl	8007174 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008006:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800a:	f1c3 0207 	rsb	r2, r3, #7
 800800e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008010:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008016:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8008018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801a:	2200      	movs	r2, #0
 800801c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800801e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008020:	2200      	movs	r2, #0
 8008022:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	2200      	movs	r2, #0
 8008028:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	68f9      	ldr	r1, [r7, #12]
 8008030:	69b8      	ldr	r0, [r7, #24]
 8008032:	f000 fef7 	bl	8008e24 <pxPortInitialiseStack>
 8008036:	4602      	mov	r2, r0
 8008038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800803c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803e:	2b00      	cmp	r3, #0
 8008040:	d002      	beq.n	8008048 <prvInitialiseNewTask+0x10e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008046:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008048:	bf00      	nop
 800804a:	3720      	adds	r7, #32
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008058:	f000 ffee 	bl	8009038 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800805c:	4b2a      	ldr	r3, [pc, #168]	; (8008108 <prvAddNewTaskToReadyList+0xb8>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3301      	adds	r3, #1
 8008062:	4a29      	ldr	r2, [pc, #164]	; (8008108 <prvAddNewTaskToReadyList+0xb8>)
 8008064:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008066:	4b29      	ldr	r3, [pc, #164]	; (800810c <prvAddNewTaskToReadyList+0xbc>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d109      	bne.n	8008082 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800806e:	4a27      	ldr	r2, [pc, #156]	; (800810c <prvAddNewTaskToReadyList+0xbc>)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008074:	4b24      	ldr	r3, [pc, #144]	; (8008108 <prvAddNewTaskToReadyList+0xb8>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d110      	bne.n	800809e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800807c:	f000 fbe8 	bl	8008850 <prvInitialiseTaskLists>
 8008080:	e00d      	b.n	800809e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008082:	4b23      	ldr	r3, [pc, #140]	; (8008110 <prvAddNewTaskToReadyList+0xc0>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d109      	bne.n	800809e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800808a:	4b20      	ldr	r3, [pc, #128]	; (800810c <prvAddNewTaskToReadyList+0xbc>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008094:	429a      	cmp	r2, r3
 8008096:	d802      	bhi.n	800809e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008098:	4a1c      	ldr	r2, [pc, #112]	; (800810c <prvAddNewTaskToReadyList+0xbc>)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800809e:	4b1d      	ldr	r3, [pc, #116]	; (8008114 <prvAddNewTaskToReadyList+0xc4>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3301      	adds	r3, #1
 80080a4:	4a1b      	ldr	r2, [pc, #108]	; (8008114 <prvAddNewTaskToReadyList+0xc4>)
 80080a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ac:	2201      	movs	r2, #1
 80080ae:	409a      	lsls	r2, r3
 80080b0:	4b19      	ldr	r3, [pc, #100]	; (8008118 <prvAddNewTaskToReadyList+0xc8>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	4a18      	ldr	r2, [pc, #96]	; (8008118 <prvAddNewTaskToReadyList+0xc8>)
 80080b8:	6013      	str	r3, [r2, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080be:	4613      	mov	r3, r2
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4413      	add	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4a15      	ldr	r2, [pc, #84]	; (800811c <prvAddNewTaskToReadyList+0xcc>)
 80080c8:	441a      	add	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	3304      	adds	r3, #4
 80080ce:	4619      	mov	r1, r3
 80080d0:	4610      	mov	r0, r2
 80080d2:	f7ff f85c 	bl	800718e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080d6:	f000 ffe1 	bl	800909c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80080da:	4b0d      	ldr	r3, [pc, #52]	; (8008110 <prvAddNewTaskToReadyList+0xc0>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00e      	beq.n	8008100 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80080e2:	4b0a      	ldr	r3, [pc, #40]	; (800810c <prvAddNewTaskToReadyList+0xbc>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d207      	bcs.n	8008100 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80080f0:	4b0b      	ldr	r3, [pc, #44]	; (8008120 <prvAddNewTaskToReadyList+0xd0>)
 80080f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008100:	bf00      	nop
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	20000248 	.word	0x20000248
 800810c:	20000148 	.word	0x20000148
 8008110:	20000254 	.word	0x20000254
 8008114:	20000264 	.word	0x20000264
 8008118:	20000250 	.word	0x20000250
 800811c:	2000014c 	.word	0x2000014c
 8008120:	e000ed04 	.word	0xe000ed04

08008124 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800812c:	2300      	movs	r3, #0
 800812e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d018      	beq.n	8008168 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008136:	4b14      	ldr	r3, [pc, #80]	; (8008188 <vTaskDelay+0x64>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00b      	beq.n	8008156 <vTaskDelay+0x32>
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	b672      	cpsid	i
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	b662      	cpsie	i
 8008152:	60bb      	str	r3, [r7, #8]
 8008154:	e7fe      	b.n	8008154 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8008156:	f000 f865 	bl	8008224 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800815a:	2100      	movs	r1, #0
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fdfb 	bl	8008d58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008162:	f000 f86d 	bl	8008240 <xTaskResumeAll>
 8008166:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d107      	bne.n	800817e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800816e:	4b07      	ldr	r3, [pc, #28]	; (800818c <vTaskDelay+0x68>)
 8008170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800817e:	bf00      	nop
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20000270 	.word	0x20000270
 800818c:	e000ed04 	.word	0xe000ed04

08008190 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8008196:	4b1d      	ldr	r3, [pc, #116]	; (800820c <vTaskStartScheduler+0x7c>)
 8008198:	9301      	str	r3, [sp, #4]
 800819a:	2300      	movs	r3, #0
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	2300      	movs	r3, #0
 80081a0:	2280      	movs	r2, #128	; 0x80
 80081a2:	491b      	ldr	r1, [pc, #108]	; (8008210 <vTaskStartScheduler+0x80>)
 80081a4:	481b      	ldr	r0, [pc, #108]	; (8008214 <vTaskStartScheduler+0x84>)
 80081a6:	f7ff fe87 	bl	8007eb8 <xTaskCreate>
 80081aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d117      	bne.n	80081e2 <vTaskStartScheduler+0x52>
 80081b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b6:	b672      	cpsid	i
 80081b8:	f383 8811 	msr	BASEPRI, r3
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	b662      	cpsie	i
 80081c6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80081c8:	4b13      	ldr	r3, [pc, #76]	; (8008218 <vTaskStartScheduler+0x88>)
 80081ca:	f04f 32ff 	mov.w	r2, #4294967295
 80081ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80081d0:	4b12      	ldr	r3, [pc, #72]	; (800821c <vTaskStartScheduler+0x8c>)
 80081d2:	2201      	movs	r2, #1
 80081d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80081d6:	4b12      	ldr	r3, [pc, #72]	; (8008220 <vTaskStartScheduler+0x90>)
 80081d8:	2200      	movs	r2, #0
 80081da:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80081dc:	f000 feb0 	bl	8008f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80081e0:	e00f      	b.n	8008202 <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e8:	d10b      	bne.n	8008202 <vTaskStartScheduler+0x72>
 80081ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ee:	b672      	cpsid	i
 80081f0:	f383 8811 	msr	BASEPRI, r3
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	b662      	cpsie	i
 80081fe:	607b      	str	r3, [r7, #4]
 8008200:	e7fe      	b.n	8008200 <vTaskStartScheduler+0x70>
}
 8008202:	bf00      	nop
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	2000026c 	.word	0x2000026c
 8008210:	08025ca0 	.word	0x08025ca0
 8008214:	0800881d 	.word	0x0800881d
 8008218:	20000268 	.word	0x20000268
 800821c:	20000254 	.word	0x20000254
 8008220:	2000024c 	.word	0x2000024c

08008224 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008224:	b480      	push	{r7}
 8008226:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008228:	4b04      	ldr	r3, [pc, #16]	; (800823c <vTaskSuspendAll+0x18>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3301      	adds	r3, #1
 800822e:	4a03      	ldr	r2, [pc, #12]	; (800823c <vTaskSuspendAll+0x18>)
 8008230:	6013      	str	r3, [r2, #0]
}
 8008232:	bf00      	nop
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	20000270 	.word	0x20000270

08008240 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008246:	2300      	movs	r3, #0
 8008248:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800824a:	2300      	movs	r3, #0
 800824c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800824e:	4b42      	ldr	r3, [pc, #264]	; (8008358 <xTaskResumeAll+0x118>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10b      	bne.n	800826e <xTaskResumeAll+0x2e>
 8008256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825a:	b672      	cpsid	i
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	b662      	cpsie	i
 800826a:	603b      	str	r3, [r7, #0]
 800826c:	e7fe      	b.n	800826c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800826e:	f000 fee3 	bl	8009038 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008272:	4b39      	ldr	r3, [pc, #228]	; (8008358 <xTaskResumeAll+0x118>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3b01      	subs	r3, #1
 8008278:	4a37      	ldr	r2, [pc, #220]	; (8008358 <xTaskResumeAll+0x118>)
 800827a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800827c:	4b36      	ldr	r3, [pc, #216]	; (8008358 <xTaskResumeAll+0x118>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d161      	bne.n	8008348 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008284:	4b35      	ldr	r3, [pc, #212]	; (800835c <xTaskResumeAll+0x11c>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d05d      	beq.n	8008348 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800828c:	e02e      	b.n	80082ec <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800828e:	4b34      	ldr	r3, [pc, #208]	; (8008360 <xTaskResumeAll+0x120>)
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	3318      	adds	r3, #24
 800829a:	4618      	mov	r0, r3
 800829c:	f7fe ffd4 	bl	8007248 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	3304      	adds	r3, #4
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7fe ffcf 	bl	8007248 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ae:	2201      	movs	r2, #1
 80082b0:	409a      	lsls	r2, r3
 80082b2:	4b2c      	ldr	r3, [pc, #176]	; (8008364 <xTaskResumeAll+0x124>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	4a2a      	ldr	r2, [pc, #168]	; (8008364 <xTaskResumeAll+0x124>)
 80082ba:	6013      	str	r3, [r2, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c0:	4613      	mov	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4413      	add	r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4a27      	ldr	r2, [pc, #156]	; (8008368 <xTaskResumeAll+0x128>)
 80082ca:	441a      	add	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	3304      	adds	r3, #4
 80082d0:	4619      	mov	r1, r3
 80082d2:	4610      	mov	r0, r2
 80082d4:	f7fe ff5b 	bl	800718e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082dc:	4b23      	ldr	r3, [pc, #140]	; (800836c <xTaskResumeAll+0x12c>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d302      	bcc.n	80082ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80082e6:	4b22      	ldr	r3, [pc, #136]	; (8008370 <xTaskResumeAll+0x130>)
 80082e8:	2201      	movs	r2, #1
 80082ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082ec:	4b1c      	ldr	r3, [pc, #112]	; (8008360 <xTaskResumeAll+0x120>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1cc      	bne.n	800828e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80082fa:	f000 fb25 	bl	8008948 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80082fe:	4b1d      	ldr	r3, [pc, #116]	; (8008374 <xTaskResumeAll+0x134>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d010      	beq.n	800832c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800830a:	f000 f837 	bl	800837c <xTaskIncrementTick>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008314:	4b16      	ldr	r3, [pc, #88]	; (8008370 <xTaskResumeAll+0x130>)
 8008316:	2201      	movs	r2, #1
 8008318:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	3b01      	subs	r3, #1
 800831e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1f1      	bne.n	800830a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008326:	4b13      	ldr	r3, [pc, #76]	; (8008374 <xTaskResumeAll+0x134>)
 8008328:	2200      	movs	r2, #0
 800832a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800832c:	4b10      	ldr	r3, [pc, #64]	; (8008370 <xTaskResumeAll+0x130>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d009      	beq.n	8008348 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008334:	2301      	movs	r3, #1
 8008336:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008338:	4b0f      	ldr	r3, [pc, #60]	; (8008378 <xTaskResumeAll+0x138>)
 800833a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800833e:	601a      	str	r2, [r3, #0]
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008348:	f000 fea8 	bl	800909c <vPortExitCritical>

	return xAlreadyYielded;
 800834c:	68bb      	ldr	r3, [r7, #8]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	20000270 	.word	0x20000270
 800835c:	20000248 	.word	0x20000248
 8008360:	20000208 	.word	0x20000208
 8008364:	20000250 	.word	0x20000250
 8008368:	2000014c 	.word	0x2000014c
 800836c:	20000148 	.word	0x20000148
 8008370:	2000025c 	.word	0x2000025c
 8008374:	20000258 	.word	0x20000258
 8008378:	e000ed04 	.word	0xe000ed04

0800837c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008382:	2300      	movs	r3, #0
 8008384:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008386:	4b51      	ldr	r3, [pc, #324]	; (80084cc <xTaskIncrementTick+0x150>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	f040 808e 	bne.w	80084ac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008390:	4b4f      	ldr	r3, [pc, #316]	; (80084d0 <xTaskIncrementTick+0x154>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	3301      	adds	r3, #1
 8008396:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008398:	4a4d      	ldr	r2, [pc, #308]	; (80084d0 <xTaskIncrementTick+0x154>)
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d121      	bne.n	80083e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80083a4:	4b4b      	ldr	r3, [pc, #300]	; (80084d4 <xTaskIncrementTick+0x158>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00b      	beq.n	80083c6 <xTaskIncrementTick+0x4a>
 80083ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b2:	b672      	cpsid	i
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	b662      	cpsie	i
 80083c2:	603b      	str	r3, [r7, #0]
 80083c4:	e7fe      	b.n	80083c4 <xTaskIncrementTick+0x48>
 80083c6:	4b43      	ldr	r3, [pc, #268]	; (80084d4 <xTaskIncrementTick+0x158>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	60fb      	str	r3, [r7, #12]
 80083cc:	4b42      	ldr	r3, [pc, #264]	; (80084d8 <xTaskIncrementTick+0x15c>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a40      	ldr	r2, [pc, #256]	; (80084d4 <xTaskIncrementTick+0x158>)
 80083d2:	6013      	str	r3, [r2, #0]
 80083d4:	4a40      	ldr	r2, [pc, #256]	; (80084d8 <xTaskIncrementTick+0x15c>)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6013      	str	r3, [r2, #0]
 80083da:	4b40      	ldr	r3, [pc, #256]	; (80084dc <xTaskIncrementTick+0x160>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	3301      	adds	r3, #1
 80083e0:	4a3e      	ldr	r2, [pc, #248]	; (80084dc <xTaskIncrementTick+0x160>)
 80083e2:	6013      	str	r3, [r2, #0]
 80083e4:	f000 fab0 	bl	8008948 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80083e8:	4b3d      	ldr	r3, [pc, #244]	; (80084e0 <xTaskIncrementTick+0x164>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d34d      	bcc.n	800848e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083f2:	4b38      	ldr	r3, [pc, #224]	; (80084d4 <xTaskIncrementTick+0x158>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d101      	bne.n	8008400 <xTaskIncrementTick+0x84>
 80083fc:	2301      	movs	r3, #1
 80083fe:	e000      	b.n	8008402 <xTaskIncrementTick+0x86>
 8008400:	2300      	movs	r3, #0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d004      	beq.n	8008410 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008406:	4b36      	ldr	r3, [pc, #216]	; (80084e0 <xTaskIncrementTick+0x164>)
 8008408:	f04f 32ff 	mov.w	r2, #4294967295
 800840c:	601a      	str	r2, [r3, #0]
					break;
 800840e:	e03e      	b.n	800848e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008410:	4b30      	ldr	r3, [pc, #192]	; (80084d4 <xTaskIncrementTick+0x158>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	429a      	cmp	r2, r3
 8008426:	d203      	bcs.n	8008430 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008428:	4a2d      	ldr	r2, [pc, #180]	; (80084e0 <xTaskIncrementTick+0x164>)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6013      	str	r3, [r2, #0]
						break;
 800842e:	e02e      	b.n	800848e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	3304      	adds	r3, #4
 8008434:	4618      	mov	r0, r3
 8008436:	f7fe ff07 	bl	8007248 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843e:	2b00      	cmp	r3, #0
 8008440:	d004      	beq.n	800844c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	3318      	adds	r3, #24
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe fefe 	bl	8007248 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	2201      	movs	r2, #1
 8008452:	409a      	lsls	r2, r3
 8008454:	4b23      	ldr	r3, [pc, #140]	; (80084e4 <xTaskIncrementTick+0x168>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4313      	orrs	r3, r2
 800845a:	4a22      	ldr	r2, [pc, #136]	; (80084e4 <xTaskIncrementTick+0x168>)
 800845c:	6013      	str	r3, [r2, #0]
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008462:	4613      	mov	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4413      	add	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4a1f      	ldr	r2, [pc, #124]	; (80084e8 <xTaskIncrementTick+0x16c>)
 800846c:	441a      	add	r2, r3
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	3304      	adds	r3, #4
 8008472:	4619      	mov	r1, r3
 8008474:	4610      	mov	r0, r2
 8008476:	f7fe fe8a 	bl	800718e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800847e:	4b1b      	ldr	r3, [pc, #108]	; (80084ec <xTaskIncrementTick+0x170>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008484:	429a      	cmp	r2, r3
 8008486:	d3b4      	bcc.n	80083f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008488:	2301      	movs	r3, #1
 800848a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800848c:	e7b1      	b.n	80083f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800848e:	4b17      	ldr	r3, [pc, #92]	; (80084ec <xTaskIncrementTick+0x170>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008494:	4914      	ldr	r1, [pc, #80]	; (80084e8 <xTaskIncrementTick+0x16c>)
 8008496:	4613      	mov	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	440b      	add	r3, r1
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d907      	bls.n	80084b6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80084a6:	2301      	movs	r3, #1
 80084a8:	617b      	str	r3, [r7, #20]
 80084aa:	e004      	b.n	80084b6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80084ac:	4b10      	ldr	r3, [pc, #64]	; (80084f0 <xTaskIncrementTick+0x174>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	3301      	adds	r3, #1
 80084b2:	4a0f      	ldr	r2, [pc, #60]	; (80084f0 <xTaskIncrementTick+0x174>)
 80084b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80084b6:	4b0f      	ldr	r3, [pc, #60]	; (80084f4 <xTaskIncrementTick+0x178>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d001      	beq.n	80084c2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80084be:	2301      	movs	r3, #1
 80084c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80084c2:	697b      	ldr	r3, [r7, #20]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3718      	adds	r7, #24
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	20000270 	.word	0x20000270
 80084d0:	2000024c 	.word	0x2000024c
 80084d4:	20000200 	.word	0x20000200
 80084d8:	20000204 	.word	0x20000204
 80084dc:	20000260 	.word	0x20000260
 80084e0:	20000268 	.word	0x20000268
 80084e4:	20000250 	.word	0x20000250
 80084e8:	2000014c 	.word	0x2000014c
 80084ec:	20000148 	.word	0x20000148
 80084f0:	20000258 	.word	0x20000258
 80084f4:	2000025c 	.word	0x2000025c

080084f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b088      	sub	sp, #32
 80084fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80084fe:	4b3a      	ldr	r3, [pc, #232]	; (80085e8 <vTaskSwitchContext+0xf0>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d003      	beq.n	800850e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008506:	4b39      	ldr	r3, [pc, #228]	; (80085ec <vTaskSwitchContext+0xf4>)
 8008508:	2201      	movs	r2, #1
 800850a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800850c:	e067      	b.n	80085de <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800850e:	4b37      	ldr	r3, [pc, #220]	; (80085ec <vTaskSwitchContext+0xf4>)
 8008510:	2200      	movs	r2, #0
 8008512:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008514:	4b36      	ldr	r3, [pc, #216]	; (80085f0 <vTaskSwitchContext+0xf8>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851a:	61fb      	str	r3, [r7, #28]
 800851c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8008520:	61bb      	str	r3, [r7, #24]
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	429a      	cmp	r2, r3
 800852a:	d111      	bne.n	8008550 <vTaskSwitchContext+0x58>
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	3304      	adds	r3, #4
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	69ba      	ldr	r2, [r7, #24]
 8008534:	429a      	cmp	r2, r3
 8008536:	d10b      	bne.n	8008550 <vTaskSwitchContext+0x58>
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	3308      	adds	r3, #8
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	69ba      	ldr	r2, [r7, #24]
 8008540:	429a      	cmp	r2, r3
 8008542:	d105      	bne.n	8008550 <vTaskSwitchContext+0x58>
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	330c      	adds	r3, #12
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	69ba      	ldr	r2, [r7, #24]
 800854c:	429a      	cmp	r2, r3
 800854e:	d008      	beq.n	8008562 <vTaskSwitchContext+0x6a>
 8008550:	4b27      	ldr	r3, [pc, #156]	; (80085f0 <vTaskSwitchContext+0xf8>)
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	4b26      	ldr	r3, [pc, #152]	; (80085f0 <vTaskSwitchContext+0xf8>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	3334      	adds	r3, #52	; 0x34
 800855a:	4619      	mov	r1, r3
 800855c:	4610      	mov	r0, r2
 800855e:	f7f8 f82e 	bl	80005be <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008562:	4b24      	ldr	r3, [pc, #144]	; (80085f4 <vTaskSwitchContext+0xfc>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	fab3 f383 	clz	r3, r3
 800856e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008570:	7afb      	ldrb	r3, [r7, #11]
 8008572:	f1c3 031f 	rsb	r3, r3, #31
 8008576:	617b      	str	r3, [r7, #20]
 8008578:	491f      	ldr	r1, [pc, #124]	; (80085f8 <vTaskSwitchContext+0x100>)
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	4613      	mov	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4413      	add	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	440b      	add	r3, r1
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10b      	bne.n	80085a4 <vTaskSwitchContext+0xac>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008590:	b672      	cpsid	i
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	b662      	cpsie	i
 80085a0:	607b      	str	r3, [r7, #4]
 80085a2:	e7fe      	b.n	80085a2 <vTaskSwitchContext+0xaa>
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	4613      	mov	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4413      	add	r3, r2
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	4a12      	ldr	r2, [pc, #72]	; (80085f8 <vTaskSwitchContext+0x100>)
 80085b0:	4413      	add	r3, r2
 80085b2:	613b      	str	r3, [r7, #16]
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	685a      	ldr	r2, [r3, #4]
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	605a      	str	r2, [r3, #4]
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	685a      	ldr	r2, [r3, #4]
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	3308      	adds	r3, #8
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d104      	bne.n	80085d4 <vTaskSwitchContext+0xdc>
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	685a      	ldr	r2, [r3, #4]
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	605a      	str	r2, [r3, #4]
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	4a05      	ldr	r2, [pc, #20]	; (80085f0 <vTaskSwitchContext+0xf8>)
 80085dc:	6013      	str	r3, [r2, #0]
}
 80085de:	bf00      	nop
 80085e0:	3720      	adds	r7, #32
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	20000270 	.word	0x20000270
 80085ec:	2000025c 	.word	0x2000025c
 80085f0:	20000148 	.word	0x20000148
 80085f4:	20000250 	.word	0x20000250
 80085f8:	2000014c 	.word	0x2000014c

080085fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10b      	bne.n	8008624 <vTaskPlaceOnEventList+0x28>
 800860c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008610:	b672      	cpsid	i
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	b662      	cpsie	i
 8008620:	60fb      	str	r3, [r7, #12]
 8008622:	e7fe      	b.n	8008622 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008624:	4b07      	ldr	r3, [pc, #28]	; (8008644 <vTaskPlaceOnEventList+0x48>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	3318      	adds	r3, #24
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f7fe fdd2 	bl	80071d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008632:	2101      	movs	r1, #1
 8008634:	6838      	ldr	r0, [r7, #0]
 8008636:	f000 fb8f 	bl	8008d58 <prvAddCurrentTaskToDelayedList>
}
 800863a:	bf00      	nop
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	20000148 	.word	0x20000148

08008648 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10b      	bne.n	8008676 <xTaskRemoveFromEventList+0x2e>
 800865e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008662:	b672      	cpsid	i
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	b662      	cpsie	i
 8008672:	60fb      	str	r3, [r7, #12]
 8008674:	e7fe      	b.n	8008674 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	3318      	adds	r3, #24
 800867a:	4618      	mov	r0, r3
 800867c:	f7fe fde4 	bl	8007248 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008680:	4b1d      	ldr	r3, [pc, #116]	; (80086f8 <xTaskRemoveFromEventList+0xb0>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d11c      	bne.n	80086c2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	3304      	adds	r3, #4
 800868c:	4618      	mov	r0, r3
 800868e:	f7fe fddb 	bl	8007248 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008696:	2201      	movs	r2, #1
 8008698:	409a      	lsls	r2, r3
 800869a:	4b18      	ldr	r3, [pc, #96]	; (80086fc <xTaskRemoveFromEventList+0xb4>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4313      	orrs	r3, r2
 80086a0:	4a16      	ldr	r2, [pc, #88]	; (80086fc <xTaskRemoveFromEventList+0xb4>)
 80086a2:	6013      	str	r3, [r2, #0]
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a8:	4613      	mov	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4a13      	ldr	r2, [pc, #76]	; (8008700 <xTaskRemoveFromEventList+0xb8>)
 80086b2:	441a      	add	r2, r3
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	3304      	adds	r3, #4
 80086b8:	4619      	mov	r1, r3
 80086ba:	4610      	mov	r0, r2
 80086bc:	f7fe fd67 	bl	800718e <vListInsertEnd>
 80086c0:	e005      	b.n	80086ce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	3318      	adds	r3, #24
 80086c6:	4619      	mov	r1, r3
 80086c8:	480e      	ldr	r0, [pc, #56]	; (8008704 <xTaskRemoveFromEventList+0xbc>)
 80086ca:	f7fe fd60 	bl	800718e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d2:	4b0d      	ldr	r3, [pc, #52]	; (8008708 <xTaskRemoveFromEventList+0xc0>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d8:	429a      	cmp	r2, r3
 80086da:	d905      	bls.n	80086e8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80086dc:	2301      	movs	r3, #1
 80086de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80086e0:	4b0a      	ldr	r3, [pc, #40]	; (800870c <xTaskRemoveFromEventList+0xc4>)
 80086e2:	2201      	movs	r2, #1
 80086e4:	601a      	str	r2, [r3, #0]
 80086e6:	e001      	b.n	80086ec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80086e8:	2300      	movs	r3, #0
 80086ea:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80086ec:	697b      	ldr	r3, [r7, #20]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3718      	adds	r7, #24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	20000270 	.word	0x20000270
 80086fc:	20000250 	.word	0x20000250
 8008700:	2000014c 	.word	0x2000014c
 8008704:	20000208 	.word	0x20000208
 8008708:	20000148 	.word	0x20000148
 800870c:	2000025c 	.word	0x2000025c

08008710 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008718:	4b06      	ldr	r3, [pc, #24]	; (8008734 <vTaskInternalSetTimeOutState+0x24>)
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008720:	4b05      	ldr	r3, [pc, #20]	; (8008738 <vTaskInternalSetTimeOutState+0x28>)
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	605a      	str	r2, [r3, #4]
}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr
 8008734:	20000260 	.word	0x20000260
 8008738:	2000024c 	.word	0x2000024c

0800873c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b088      	sub	sp, #32
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10b      	bne.n	8008764 <xTaskCheckForTimeOut+0x28>
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	b672      	cpsid	i
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	b662      	cpsie	i
 8008760:	613b      	str	r3, [r7, #16]
 8008762:	e7fe      	b.n	8008762 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10b      	bne.n	8008782 <xTaskCheckForTimeOut+0x46>
 800876a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876e:	b672      	cpsid	i
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	b662      	cpsie	i
 800877e:	60fb      	str	r3, [r7, #12]
 8008780:	e7fe      	b.n	8008780 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8008782:	f000 fc59 	bl	8009038 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008786:	4b1d      	ldr	r3, [pc, #116]	; (80087fc <xTaskCheckForTimeOut+0xc0>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	69ba      	ldr	r2, [r7, #24]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800879e:	d102      	bne.n	80087a6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80087a0:	2300      	movs	r3, #0
 80087a2:	61fb      	str	r3, [r7, #28]
 80087a4:	e023      	b.n	80087ee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	4b15      	ldr	r3, [pc, #84]	; (8008800 <xTaskCheckForTimeOut+0xc4>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d007      	beq.n	80087c2 <xTaskCheckForTimeOut+0x86>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	69ba      	ldr	r2, [r7, #24]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d302      	bcc.n	80087c2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80087bc:	2301      	movs	r3, #1
 80087be:	61fb      	str	r3, [r7, #28]
 80087c0:	e015      	b.n	80087ee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d20b      	bcs.n	80087e4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	1ad2      	subs	r2, r2, r3
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7ff ff99 	bl	8008710 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80087de:	2300      	movs	r3, #0
 80087e0:	61fb      	str	r3, [r7, #28]
 80087e2:	e004      	b.n	80087ee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	2200      	movs	r2, #0
 80087e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80087ea:	2301      	movs	r3, #1
 80087ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80087ee:	f000 fc55 	bl	800909c <vPortExitCritical>

	return xReturn;
 80087f2:	69fb      	ldr	r3, [r7, #28]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3720      	adds	r7, #32
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	2000024c 	.word	0x2000024c
 8008800:	20000260 	.word	0x20000260

08008804 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008804:	b480      	push	{r7}
 8008806:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008808:	4b03      	ldr	r3, [pc, #12]	; (8008818 <vTaskMissedYield+0x14>)
 800880a:	2201      	movs	r2, #1
 800880c:	601a      	str	r2, [r3, #0]
}
 800880e:	bf00      	nop
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	2000025c 	.word	0x2000025c

0800881c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008824:	f000 f854 	bl	80088d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008828:	4b07      	ldr	r3, [pc, #28]	; (8008848 <prvIdleTask+0x2c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d907      	bls.n	8008840 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008830:	4b06      	ldr	r3, [pc, #24]	; (800884c <prvIdleTask+0x30>)
 8008832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008836:	601a      	str	r2, [r3, #0]
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008840:	f7f7 feb6 	bl	80005b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008844:	e7ee      	b.n	8008824 <prvIdleTask+0x8>
 8008846:	bf00      	nop
 8008848:	2000014c 	.word	0x2000014c
 800884c:	e000ed04 	.word	0xe000ed04

08008850 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008856:	2300      	movs	r3, #0
 8008858:	607b      	str	r3, [r7, #4]
 800885a:	e00c      	b.n	8008876 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	4613      	mov	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4a12      	ldr	r2, [pc, #72]	; (80088b0 <prvInitialiseTaskLists+0x60>)
 8008868:	4413      	add	r3, r2
 800886a:	4618      	mov	r0, r3
 800886c:	f7fe fc62 	bl	8007134 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	3301      	adds	r3, #1
 8008874:	607b      	str	r3, [r7, #4]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2b06      	cmp	r3, #6
 800887a:	d9ef      	bls.n	800885c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800887c:	480d      	ldr	r0, [pc, #52]	; (80088b4 <prvInitialiseTaskLists+0x64>)
 800887e:	f7fe fc59 	bl	8007134 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008882:	480d      	ldr	r0, [pc, #52]	; (80088b8 <prvInitialiseTaskLists+0x68>)
 8008884:	f7fe fc56 	bl	8007134 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008888:	480c      	ldr	r0, [pc, #48]	; (80088bc <prvInitialiseTaskLists+0x6c>)
 800888a:	f7fe fc53 	bl	8007134 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800888e:	480c      	ldr	r0, [pc, #48]	; (80088c0 <prvInitialiseTaskLists+0x70>)
 8008890:	f7fe fc50 	bl	8007134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008894:	480b      	ldr	r0, [pc, #44]	; (80088c4 <prvInitialiseTaskLists+0x74>)
 8008896:	f7fe fc4d 	bl	8007134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800889a:	4b0b      	ldr	r3, [pc, #44]	; (80088c8 <prvInitialiseTaskLists+0x78>)
 800889c:	4a05      	ldr	r2, [pc, #20]	; (80088b4 <prvInitialiseTaskLists+0x64>)
 800889e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80088a0:	4b0a      	ldr	r3, [pc, #40]	; (80088cc <prvInitialiseTaskLists+0x7c>)
 80088a2:	4a05      	ldr	r2, [pc, #20]	; (80088b8 <prvInitialiseTaskLists+0x68>)
 80088a4:	601a      	str	r2, [r3, #0]
}
 80088a6:	bf00      	nop
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	2000014c 	.word	0x2000014c
 80088b4:	200001d8 	.word	0x200001d8
 80088b8:	200001ec 	.word	0x200001ec
 80088bc:	20000208 	.word	0x20000208
 80088c0:	2000021c 	.word	0x2000021c
 80088c4:	20000234 	.word	0x20000234
 80088c8:	20000200 	.word	0x20000200
 80088cc:	20000204 	.word	0x20000204

080088d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088d6:	e019      	b.n	800890c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80088d8:	f000 fbae 	bl	8009038 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80088dc:	4b0f      	ldr	r3, [pc, #60]	; (800891c <prvCheckTasksWaitingTermination+0x4c>)
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	3304      	adds	r3, #4
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7fe fcad 	bl	8007248 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80088ee:	4b0c      	ldr	r3, [pc, #48]	; (8008920 <prvCheckTasksWaitingTermination+0x50>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	3b01      	subs	r3, #1
 80088f4:	4a0a      	ldr	r2, [pc, #40]	; (8008920 <prvCheckTasksWaitingTermination+0x50>)
 80088f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80088f8:	4b0a      	ldr	r3, [pc, #40]	; (8008924 <prvCheckTasksWaitingTermination+0x54>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	3b01      	subs	r3, #1
 80088fe:	4a09      	ldr	r2, [pc, #36]	; (8008924 <prvCheckTasksWaitingTermination+0x54>)
 8008900:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008902:	f000 fbcb 	bl	800909c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 f80e 	bl	8008928 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800890c:	4b05      	ldr	r3, [pc, #20]	; (8008924 <prvCheckTasksWaitingTermination+0x54>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1e1      	bne.n	80088d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008914:	bf00      	nop
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	2000021c 	.word	0x2000021c
 8008920:	20000248 	.word	0x20000248
 8008924:	20000230 	.word	0x20000230

08008928 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008934:	4618      	mov	r0, r3
 8008936:	f000 fd6d 	bl	8009414 <vPortFree>
			vPortFree( pxTCB );
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fd6a 	bl	8009414 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008940:	bf00      	nop
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800894e:	4b0f      	ldr	r3, [pc, #60]	; (800898c <prvResetNextTaskUnblockTime+0x44>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d101      	bne.n	800895c <prvResetNextTaskUnblockTime+0x14>
 8008958:	2301      	movs	r3, #1
 800895a:	e000      	b.n	800895e <prvResetNextTaskUnblockTime+0x16>
 800895c:	2300      	movs	r3, #0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d004      	beq.n	800896c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008962:	4b0b      	ldr	r3, [pc, #44]	; (8008990 <prvResetNextTaskUnblockTime+0x48>)
 8008964:	f04f 32ff 	mov.w	r2, #4294967295
 8008968:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800896a:	e008      	b.n	800897e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800896c:	4b07      	ldr	r3, [pc, #28]	; (800898c <prvResetNextTaskUnblockTime+0x44>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	4a05      	ldr	r2, [pc, #20]	; (8008990 <prvResetNextTaskUnblockTime+0x48>)
 800897c:	6013      	str	r3, [r2, #0]
}
 800897e:	bf00      	nop
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	20000200 	.word	0x20000200
 8008990:	20000268 	.word	0x20000268

08008994 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800899a:	4b0b      	ldr	r3, [pc, #44]	; (80089c8 <xTaskGetSchedulerState+0x34>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d102      	bne.n	80089a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80089a2:	2301      	movs	r3, #1
 80089a4:	607b      	str	r3, [r7, #4]
 80089a6:	e008      	b.n	80089ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089a8:	4b08      	ldr	r3, [pc, #32]	; (80089cc <xTaskGetSchedulerState+0x38>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d102      	bne.n	80089b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80089b0:	2302      	movs	r3, #2
 80089b2:	607b      	str	r3, [r7, #4]
 80089b4:	e001      	b.n	80089ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80089b6:	2300      	movs	r3, #0
 80089b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80089ba:	687b      	ldr	r3, [r7, #4]
	}
 80089bc:	4618      	mov	r0, r3
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr
 80089c8:	20000254 	.word	0x20000254
 80089cc:	20000270 	.word	0x20000270

080089d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80089dc:	2300      	movs	r3, #0
 80089de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d06e      	beq.n	8008ac4 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ea:	4b39      	ldr	r3, [pc, #228]	; (8008ad0 <xTaskPriorityInherit+0x100>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d25e      	bcs.n	8008ab2 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	db06      	blt.n	8008a0a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089fc:	4b34      	ldr	r3, [pc, #208]	; (8008ad0 <xTaskPriorityInherit+0x100>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a02:	f1c3 0207 	rsb	r2, r3, #7
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	6959      	ldr	r1, [r3, #20]
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a12:	4613      	mov	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4413      	add	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4a2e      	ldr	r2, [pc, #184]	; (8008ad4 <xTaskPriorityInherit+0x104>)
 8008a1c:	4413      	add	r3, r2
 8008a1e:	4299      	cmp	r1, r3
 8008a20:	d101      	bne.n	8008a26 <xTaskPriorityInherit+0x56>
 8008a22:	2301      	movs	r3, #1
 8008a24:	e000      	b.n	8008a28 <xTaskPriorityInherit+0x58>
 8008a26:	2300      	movs	r3, #0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d03a      	beq.n	8008aa2 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	3304      	adds	r3, #4
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7fe fc09 	bl	8007248 <uxListRemove>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d115      	bne.n	8008a68 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a40:	4924      	ldr	r1, [pc, #144]	; (8008ad4 <xTaskPriorityInherit+0x104>)
 8008a42:	4613      	mov	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4413      	add	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	440b      	add	r3, r1
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10a      	bne.n	8008a68 <xTaskPriorityInherit+0x98>
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a56:	2201      	movs	r2, #1
 8008a58:	fa02 f303 	lsl.w	r3, r2, r3
 8008a5c:	43da      	mvns	r2, r3
 8008a5e:	4b1e      	ldr	r3, [pc, #120]	; (8008ad8 <xTaskPriorityInherit+0x108>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4013      	ands	r3, r2
 8008a64:	4a1c      	ldr	r2, [pc, #112]	; (8008ad8 <xTaskPriorityInherit+0x108>)
 8008a66:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a68:	4b19      	ldr	r3, [pc, #100]	; (8008ad0 <xTaskPriorityInherit+0x100>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a76:	2201      	movs	r2, #1
 8008a78:	409a      	lsls	r2, r3
 8008a7a:	4b17      	ldr	r3, [pc, #92]	; (8008ad8 <xTaskPriorityInherit+0x108>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	4a15      	ldr	r2, [pc, #84]	; (8008ad8 <xTaskPriorityInherit+0x108>)
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a88:	4613      	mov	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4a10      	ldr	r2, [pc, #64]	; (8008ad4 <xTaskPriorityInherit+0x104>)
 8008a92:	441a      	add	r2, r3
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	3304      	adds	r3, #4
 8008a98:	4619      	mov	r1, r3
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	f7fe fb77 	bl	800718e <vListInsertEnd>
 8008aa0:	e004      	b.n	8008aac <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008aa2:	4b0b      	ldr	r3, [pc, #44]	; (8008ad0 <xTaskPriorityInherit+0x100>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008aac:	2301      	movs	r3, #1
 8008aae:	60fb      	str	r3, [r7, #12]
 8008ab0:	e008      	b.n	8008ac4 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ab6:	4b06      	ldr	r3, [pc, #24]	; (8008ad0 <xTaskPriorityInherit+0x100>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d201      	bcs.n	8008ac4 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
	}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	20000148 	.word	0x20000148
 8008ad4:	2000014c 	.word	0x2000014c
 8008ad8:	20000250 	.word	0x20000250

08008adc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d070      	beq.n	8008bd4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008af2:	4b3b      	ldr	r3, [pc, #236]	; (8008be0 <xTaskPriorityDisinherit+0x104>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d00b      	beq.n	8008b14 <xTaskPriorityDisinherit+0x38>
 8008afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b00:	b672      	cpsid	i
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	b662      	cpsie	i
 8008b10:	60fb      	str	r3, [r7, #12]
 8008b12:	e7fe      	b.n	8008b12 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d10b      	bne.n	8008b34 <xTaskPriorityDisinherit+0x58>
 8008b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b20:	b672      	cpsid	i
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	b662      	cpsie	i
 8008b30:	60bb      	str	r3, [r7, #8]
 8008b32:	e7fe      	b.n	8008b32 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b38:	1e5a      	subs	r2, r3, #1
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d044      	beq.n	8008bd4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d140      	bne.n	8008bd4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	3304      	adds	r3, #4
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fe fb76 	bl	8007248 <uxListRemove>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d115      	bne.n	8008b8e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b66:	491f      	ldr	r1, [pc, #124]	; (8008be4 <xTaskPriorityDisinherit+0x108>)
 8008b68:	4613      	mov	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	4413      	add	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	440b      	add	r3, r1
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10a      	bne.n	8008b8e <xTaskPriorityDisinherit+0xb2>
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b82:	43da      	mvns	r2, r3
 8008b84:	4b18      	ldr	r3, [pc, #96]	; (8008be8 <xTaskPriorityDisinherit+0x10c>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4013      	ands	r3, r2
 8008b8a:	4a17      	ldr	r2, [pc, #92]	; (8008be8 <xTaskPriorityDisinherit+0x10c>)
 8008b8c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9a:	f1c3 0207 	rsb	r2, r3, #7
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	409a      	lsls	r2, r3
 8008baa:	4b0f      	ldr	r3, [pc, #60]	; (8008be8 <xTaskPriorityDisinherit+0x10c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	4a0d      	ldr	r2, [pc, #52]	; (8008be8 <xTaskPriorityDisinherit+0x10c>)
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb8:	4613      	mov	r3, r2
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	4413      	add	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4a08      	ldr	r2, [pc, #32]	; (8008be4 <xTaskPriorityDisinherit+0x108>)
 8008bc2:	441a      	add	r2, r3
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	3304      	adds	r3, #4
 8008bc8:	4619      	mov	r1, r3
 8008bca:	4610      	mov	r0, r2
 8008bcc:	f7fe fadf 	bl	800718e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008bd4:	697b      	ldr	r3, [r7, #20]
	}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3718      	adds	r7, #24
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	20000148 	.word	0x20000148
 8008be4:	2000014c 	.word	0x2000014c
 8008be8:	20000250 	.word	0x20000250

08008bec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b088      	sub	sp, #32
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 808a 	beq.w	8008d1a <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10b      	bne.n	8008c26 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8008c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c12:	b672      	cpsid	i
 8008c14:	f383 8811 	msr	BASEPRI, r3
 8008c18:	f3bf 8f6f 	isb	sy
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	b662      	cpsie	i
 8008c22:	60fb      	str	r3, [r7, #12]
 8008c24:	e7fe      	b.n	8008c24 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d902      	bls.n	8008c36 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	61fb      	str	r3, [r7, #28]
 8008c34:	e002      	b.n	8008c3c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c3a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c40:	69fa      	ldr	r2, [r7, #28]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d069      	beq.n	8008d1a <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c4a:	697a      	ldr	r2, [r7, #20]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d164      	bne.n	8008d1a <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008c50:	4b34      	ldr	r3, [pc, #208]	; (8008d24 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	69ba      	ldr	r2, [r7, #24]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d10b      	bne.n	8008c72 <vTaskPriorityDisinheritAfterTimeout+0x86>
 8008c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5e:	b672      	cpsid	i
 8008c60:	f383 8811 	msr	BASEPRI, r3
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	b662      	cpsie	i
 8008c6e:	60bb      	str	r3, [r7, #8]
 8008c70:	e7fe      	b.n	8008c70 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c76:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	69fa      	ldr	r2, [r7, #28]
 8008c7c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	db04      	blt.n	8008c90 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	f1c3 0207 	rsb	r2, r3, #7
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	6959      	ldr	r1, [r3, #20]
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	4613      	mov	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4a22      	ldr	r2, [pc, #136]	; (8008d28 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008ca0:	4413      	add	r3, r2
 8008ca2:	4299      	cmp	r1, r3
 8008ca4:	d101      	bne.n	8008caa <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e000      	b.n	8008cac <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8008caa:	2300      	movs	r3, #0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d034      	beq.n	8008d1a <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	3304      	adds	r3, #4
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fe fac7 	bl	8007248 <uxListRemove>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d115      	bne.n	8008cec <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc4:	4918      	ldr	r1, [pc, #96]	; (8008d28 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4413      	add	r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	440b      	add	r3, r1
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10a      	bne.n	8008cec <vTaskPriorityDisinheritAfterTimeout+0x100>
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cda:	2201      	movs	r2, #1
 8008cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce0:	43da      	mvns	r2, r3
 8008ce2:	4b12      	ldr	r3, [pc, #72]	; (8008d2c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	4a10      	ldr	r2, [pc, #64]	; (8008d2c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8008cea:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	409a      	lsls	r2, r3
 8008cf4:	4b0d      	ldr	r3, [pc, #52]	; (8008d2c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	4a0c      	ldr	r2, [pc, #48]	; (8008d2c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8008cfc:	6013      	str	r3, [r2, #0]
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d02:	4613      	mov	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4413      	add	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4a07      	ldr	r2, [pc, #28]	; (8008d28 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008d0c:	441a      	add	r2, r3
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	3304      	adds	r3, #4
 8008d12:	4619      	mov	r1, r3
 8008d14:	4610      	mov	r0, r2
 8008d16:	f7fe fa3a 	bl	800718e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d1a:	bf00      	nop
 8008d1c:	3720      	adds	r7, #32
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	20000148 	.word	0x20000148
 8008d28:	2000014c 	.word	0x2000014c
 8008d2c:	20000250 	.word	0x20000250

08008d30 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008d30:	b480      	push	{r7}
 8008d32:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008d34:	4b07      	ldr	r3, [pc, #28]	; (8008d54 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d004      	beq.n	8008d46 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008d3c:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d42:	3201      	adds	r2, #1
 8008d44:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008d46:	4b03      	ldr	r3, [pc, #12]	; (8008d54 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d48:	681b      	ldr	r3, [r3, #0]
	}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr
 8008d54:	20000148 	.word	0x20000148

08008d58 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d62:	4b29      	ldr	r3, [pc, #164]	; (8008e08 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d68:	4b28      	ldr	r3, [pc, #160]	; (8008e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe fa6a 	bl	8007248 <uxListRemove>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10b      	bne.n	8008d92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008d7a:	4b24      	ldr	r3, [pc, #144]	; (8008e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d80:	2201      	movs	r2, #1
 8008d82:	fa02 f303 	lsl.w	r3, r2, r3
 8008d86:	43da      	mvns	r2, r3
 8008d88:	4b21      	ldr	r3, [pc, #132]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	4a20      	ldr	r2, [pc, #128]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d98:	d10a      	bne.n	8008db0 <prvAddCurrentTaskToDelayedList+0x58>
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d007      	beq.n	8008db0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008da0:	4b1a      	ldr	r3, [pc, #104]	; (8008e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	3304      	adds	r3, #4
 8008da6:	4619      	mov	r1, r3
 8008da8:	481a      	ldr	r0, [pc, #104]	; (8008e14 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008daa:	f7fe f9f0 	bl	800718e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008dae:	e026      	b.n	8008dfe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4413      	add	r3, r2
 8008db6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008db8:	4b14      	ldr	r3, [pc, #80]	; (8008e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d209      	bcs.n	8008ddc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dc8:	4b13      	ldr	r3, [pc, #76]	; (8008e18 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	4b0f      	ldr	r3, [pc, #60]	; (8008e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	f7fe f9fe 	bl	80071d6 <vListInsert>
}
 8008dda:	e010      	b.n	8008dfe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ddc:	4b0f      	ldr	r3, [pc, #60]	; (8008e1c <prvAddCurrentTaskToDelayedList+0xc4>)
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	4b0a      	ldr	r3, [pc, #40]	; (8008e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	3304      	adds	r3, #4
 8008de6:	4619      	mov	r1, r3
 8008de8:	4610      	mov	r0, r2
 8008dea:	f7fe f9f4 	bl	80071d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008dee:	4b0c      	ldr	r3, [pc, #48]	; (8008e20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68ba      	ldr	r2, [r7, #8]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d202      	bcs.n	8008dfe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008df8:	4a09      	ldr	r2, [pc, #36]	; (8008e20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	6013      	str	r3, [r2, #0]
}
 8008dfe:	bf00      	nop
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	2000024c 	.word	0x2000024c
 8008e0c:	20000148 	.word	0x20000148
 8008e10:	20000250 	.word	0x20000250
 8008e14:	20000234 	.word	0x20000234
 8008e18:	20000204 	.word	0x20000204
 8008e1c:	20000200 	.word	0x20000200
 8008e20:	20000268 	.word	0x20000268

08008e24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	3b04      	subs	r3, #4
 8008e34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	3b04      	subs	r3, #4
 8008e42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	f023 0201 	bic.w	r2, r3, #1
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	3b04      	subs	r3, #4
 8008e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e54:	4a0c      	ldr	r2, [pc, #48]	; (8008e88 <pxPortInitialiseStack+0x64>)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	3b14      	subs	r3, #20
 8008e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	3b04      	subs	r3, #4
 8008e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f06f 0202 	mvn.w	r2, #2
 8008e72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	3b20      	subs	r3, #32
 8008e78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3714      	adds	r7, #20
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr
 8008e88:	08008e8d 	.word	0x08008e8d

08008e8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e92:	2300      	movs	r3, #0
 8008e94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e96:	4b13      	ldr	r3, [pc, #76]	; (8008ee4 <prvTaskExitError+0x58>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9e:	d00b      	beq.n	8008eb8 <prvTaskExitError+0x2c>
 8008ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea4:	b672      	cpsid	i
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	b662      	cpsie	i
 8008eb4:	60fb      	str	r3, [r7, #12]
 8008eb6:	e7fe      	b.n	8008eb6 <prvTaskExitError+0x2a>
 8008eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebc:	b672      	cpsid	i
 8008ebe:	f383 8811 	msr	BASEPRI, r3
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	b662      	cpsie	i
 8008ecc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ece:	bf00      	nop
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d0fc      	beq.n	8008ed0 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ed6:	bf00      	nop
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	20000034 	.word	0x20000034
	...

08008ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ef0:	4b07      	ldr	r3, [pc, #28]	; (8008f10 <pxCurrentTCBConst2>)
 8008ef2:	6819      	ldr	r1, [r3, #0]
 8008ef4:	6808      	ldr	r0, [r1, #0]
 8008ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efa:	f380 8809 	msr	PSP, r0
 8008efe:	f3bf 8f6f 	isb	sy
 8008f02:	f04f 0000 	mov.w	r0, #0
 8008f06:	f380 8811 	msr	BASEPRI, r0
 8008f0a:	4770      	bx	lr
 8008f0c:	f3af 8000 	nop.w

08008f10 <pxCurrentTCBConst2>:
 8008f10:	20000148 	.word	0x20000148
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f14:	bf00      	nop
 8008f16:	bf00      	nop

08008f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f18:	4808      	ldr	r0, [pc, #32]	; (8008f3c <prvPortStartFirstTask+0x24>)
 8008f1a:	6800      	ldr	r0, [r0, #0]
 8008f1c:	6800      	ldr	r0, [r0, #0]
 8008f1e:	f380 8808 	msr	MSP, r0
 8008f22:	f04f 0000 	mov.w	r0, #0
 8008f26:	f380 8814 	msr	CONTROL, r0
 8008f2a:	b662      	cpsie	i
 8008f2c:	b661      	cpsie	f
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	f3bf 8f6f 	isb	sy
 8008f36:	df00      	svc	0
 8008f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f3a:	bf00      	nop
 8008f3c:	e000ed08 	.word	0xe000ed08

08008f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f46:	4b36      	ldr	r3, [pc, #216]	; (8009020 <xPortStartScheduler+0xe0>)
 8008f48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	22ff      	movs	r2, #255	; 0xff
 8008f56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f60:	78fb      	ldrb	r3, [r7, #3]
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	4b2e      	ldr	r3, [pc, #184]	; (8009024 <xPortStartScheduler+0xe4>)
 8008f6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f6e:	4b2e      	ldr	r3, [pc, #184]	; (8009028 <xPortStartScheduler+0xe8>)
 8008f70:	2207      	movs	r2, #7
 8008f72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f74:	e009      	b.n	8008f8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008f76:	4b2c      	ldr	r3, [pc, #176]	; (8009028 <xPortStartScheduler+0xe8>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	4a2a      	ldr	r2, [pc, #168]	; (8009028 <xPortStartScheduler+0xe8>)
 8008f7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f80:	78fb      	ldrb	r3, [r7, #3]
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	005b      	lsls	r3, r3, #1
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f8a:	78fb      	ldrb	r3, [r7, #3]
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f92:	2b80      	cmp	r3, #128	; 0x80
 8008f94:	d0ef      	beq.n	8008f76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f96:	4b24      	ldr	r3, [pc, #144]	; (8009028 <xPortStartScheduler+0xe8>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f1c3 0307 	rsb	r3, r3, #7
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d00b      	beq.n	8008fba <xPortStartScheduler+0x7a>
 8008fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa6:	b672      	cpsid	i
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	b662      	cpsie	i
 8008fb6:	60bb      	str	r3, [r7, #8]
 8008fb8:	e7fe      	b.n	8008fb8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008fba:	4b1b      	ldr	r3, [pc, #108]	; (8009028 <xPortStartScheduler+0xe8>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	021b      	lsls	r3, r3, #8
 8008fc0:	4a19      	ldr	r2, [pc, #100]	; (8009028 <xPortStartScheduler+0xe8>)
 8008fc2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008fc4:	4b18      	ldr	r3, [pc, #96]	; (8009028 <xPortStartScheduler+0xe8>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fcc:	4a16      	ldr	r2, [pc, #88]	; (8009028 <xPortStartScheduler+0xe8>)
 8008fce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fd8:	4b14      	ldr	r3, [pc, #80]	; (800902c <xPortStartScheduler+0xec>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a13      	ldr	r2, [pc, #76]	; (800902c <xPortStartScheduler+0xec>)
 8008fde:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008fe2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fe4:	4b11      	ldr	r3, [pc, #68]	; (800902c <xPortStartScheduler+0xec>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a10      	ldr	r2, [pc, #64]	; (800902c <xPortStartScheduler+0xec>)
 8008fea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008fee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ff0:	f000 f8d4 	bl	800919c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ff4:	4b0e      	ldr	r3, [pc, #56]	; (8009030 <xPortStartScheduler+0xf0>)
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ffa:	f000 f8f3 	bl	80091e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ffe:	4b0d      	ldr	r3, [pc, #52]	; (8009034 <xPortStartScheduler+0xf4>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a0c      	ldr	r2, [pc, #48]	; (8009034 <xPortStartScheduler+0xf4>)
 8009004:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009008:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800900a:	f7ff ff85 	bl	8008f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800900e:	f7ff fa73 	bl	80084f8 <vTaskSwitchContext>
	prvTaskExitError();
 8009012:	f7ff ff3b 	bl	8008e8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	e000e400 	.word	0xe000e400
 8009024:	20000274 	.word	0x20000274
 8009028:	20000278 	.word	0x20000278
 800902c:	e000ed20 	.word	0xe000ed20
 8009030:	20000034 	.word	0x20000034
 8009034:	e000ef34 	.word	0xe000ef34

08009038 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009042:	b672      	cpsid	i
 8009044:	f383 8811 	msr	BASEPRI, r3
 8009048:	f3bf 8f6f 	isb	sy
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	b662      	cpsie	i
 8009052:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009054:	4b0f      	ldr	r3, [pc, #60]	; (8009094 <vPortEnterCritical+0x5c>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	3301      	adds	r3, #1
 800905a:	4a0e      	ldr	r2, [pc, #56]	; (8009094 <vPortEnterCritical+0x5c>)
 800905c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800905e:	4b0d      	ldr	r3, [pc, #52]	; (8009094 <vPortEnterCritical+0x5c>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2b01      	cmp	r3, #1
 8009064:	d110      	bne.n	8009088 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009066:	4b0c      	ldr	r3, [pc, #48]	; (8009098 <vPortEnterCritical+0x60>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	b2db      	uxtb	r3, r3
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00b      	beq.n	8009088 <vPortEnterCritical+0x50>
 8009070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009074:	b672      	cpsid	i
 8009076:	f383 8811 	msr	BASEPRI, r3
 800907a:	f3bf 8f6f 	isb	sy
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	b662      	cpsie	i
 8009084:	603b      	str	r3, [r7, #0]
 8009086:	e7fe      	b.n	8009086 <vPortEnterCritical+0x4e>
	}
}
 8009088:	bf00      	nop
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr
 8009094:	20000034 	.word	0x20000034
 8009098:	e000ed04 	.word	0xe000ed04

0800909c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80090a2:	4b12      	ldr	r3, [pc, #72]	; (80090ec <vPortExitCritical+0x50>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d10b      	bne.n	80090c2 <vPortExitCritical+0x26>
 80090aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ae:	b672      	cpsid	i
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	b662      	cpsie	i
 80090be:	607b      	str	r3, [r7, #4]
 80090c0:	e7fe      	b.n	80090c0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80090c2:	4b0a      	ldr	r3, [pc, #40]	; (80090ec <vPortExitCritical+0x50>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	3b01      	subs	r3, #1
 80090c8:	4a08      	ldr	r2, [pc, #32]	; (80090ec <vPortExitCritical+0x50>)
 80090ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090cc:	4b07      	ldr	r3, [pc, #28]	; (80090ec <vPortExitCritical+0x50>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d104      	bne.n	80090de <vPortExitCritical+0x42>
 80090d4:	2300      	movs	r3, #0
 80090d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80090de:	bf00      	nop
 80090e0:	370c      	adds	r7, #12
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	20000034 	.word	0x20000034

080090f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090f0:	f3ef 8009 	mrs	r0, PSP
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	4b15      	ldr	r3, [pc, #84]	; (8009150 <pxCurrentTCBConst>)
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	f01e 0f10 	tst.w	lr, #16
 8009100:	bf08      	it	eq
 8009102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800910a:	6010      	str	r0, [r2, #0]
 800910c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009110:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009114:	b672      	cpsid	i
 8009116:	f380 8811 	msr	BASEPRI, r0
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	b662      	cpsie	i
 8009124:	f7ff f9e8 	bl	80084f8 <vTaskSwitchContext>
 8009128:	f04f 0000 	mov.w	r0, #0
 800912c:	f380 8811 	msr	BASEPRI, r0
 8009130:	bc09      	pop	{r0, r3}
 8009132:	6819      	ldr	r1, [r3, #0]
 8009134:	6808      	ldr	r0, [r1, #0]
 8009136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913a:	f01e 0f10 	tst.w	lr, #16
 800913e:	bf08      	it	eq
 8009140:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009144:	f380 8809 	msr	PSP, r0
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop

08009150 <pxCurrentTCBConst>:
 8009150:	20000148 	.word	0x20000148
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009154:	bf00      	nop
 8009156:	bf00      	nop

08009158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
	__asm volatile
 800915e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009162:	b672      	cpsid	i
 8009164:	f383 8811 	msr	BASEPRI, r3
 8009168:	f3bf 8f6f 	isb	sy
 800916c:	f3bf 8f4f 	dsb	sy
 8009170:	b662      	cpsie	i
 8009172:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009174:	f7ff f902 	bl	800837c <xTaskIncrementTick>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d003      	beq.n	8009186 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800917e:	4b06      	ldr	r3, [pc, #24]	; (8009198 <SysTick_Handler+0x40>)
 8009180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009184:	601a      	str	r2, [r3, #0]
 8009186:	2300      	movs	r3, #0
 8009188:	603b      	str	r3, [r7, #0]
	__asm volatile
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009190:	bf00      	nop
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	e000ed04 	.word	0xe000ed04

0800919c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800919c:	b480      	push	{r7}
 800919e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091a0:	4b0b      	ldr	r3, [pc, #44]	; (80091d0 <vPortSetupTimerInterrupt+0x34>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091a6:	4b0b      	ldr	r3, [pc, #44]	; (80091d4 <vPortSetupTimerInterrupt+0x38>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091ac:	4b0a      	ldr	r3, [pc, #40]	; (80091d8 <vPortSetupTimerInterrupt+0x3c>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a0a      	ldr	r2, [pc, #40]	; (80091dc <vPortSetupTimerInterrupt+0x40>)
 80091b2:	fba2 2303 	umull	r2, r3, r2, r3
 80091b6:	099b      	lsrs	r3, r3, #6
 80091b8:	4a09      	ldr	r2, [pc, #36]	; (80091e0 <vPortSetupTimerInterrupt+0x44>)
 80091ba:	3b01      	subs	r3, #1
 80091bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091be:	4b04      	ldr	r3, [pc, #16]	; (80091d0 <vPortSetupTimerInterrupt+0x34>)
 80091c0:	2207      	movs	r2, #7
 80091c2:	601a      	str	r2, [r3, #0]
}
 80091c4:	bf00      	nop
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	e000e010 	.word	0xe000e010
 80091d4:	e000e018 	.word	0xe000e018
 80091d8:	20000004 	.word	0x20000004
 80091dc:	10624dd3 	.word	0x10624dd3
 80091e0:	e000e014 	.word	0xe000e014

080091e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80091f4 <vPortEnableVFP+0x10>
 80091e8:	6801      	ldr	r1, [r0, #0]
 80091ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80091ee:	6001      	str	r1, [r0, #0]
 80091f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80091f2:	bf00      	nop
 80091f4:	e000ed88 	.word	0xe000ed88

080091f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80091fe:	f3ef 8305 	mrs	r3, IPSR
 8009202:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2b0f      	cmp	r3, #15
 8009208:	d915      	bls.n	8009236 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800920a:	4a18      	ldr	r2, [pc, #96]	; (800926c <vPortValidateInterruptPriority+0x74>)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	4413      	add	r3, r2
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009214:	4b16      	ldr	r3, [pc, #88]	; (8009270 <vPortValidateInterruptPriority+0x78>)
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	7afa      	ldrb	r2, [r7, #11]
 800921a:	429a      	cmp	r2, r3
 800921c:	d20b      	bcs.n	8009236 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800921e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009222:	b672      	cpsid	i
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	b662      	cpsie	i
 8009232:	607b      	str	r3, [r7, #4]
 8009234:	e7fe      	b.n	8009234 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009236:	4b0f      	ldr	r3, [pc, #60]	; (8009274 <vPortValidateInterruptPriority+0x7c>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800923e:	4b0e      	ldr	r3, [pc, #56]	; (8009278 <vPortValidateInterruptPriority+0x80>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	429a      	cmp	r2, r3
 8009244:	d90b      	bls.n	800925e <vPortValidateInterruptPriority+0x66>
 8009246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924a:	b672      	cpsid	i
 800924c:	f383 8811 	msr	BASEPRI, r3
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	b662      	cpsie	i
 800925a:	603b      	str	r3, [r7, #0]
 800925c:	e7fe      	b.n	800925c <vPortValidateInterruptPriority+0x64>
	}
 800925e:	bf00      	nop
 8009260:	3714      	adds	r7, #20
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	e000e3f0 	.word	0xe000e3f0
 8009270:	20000274 	.word	0x20000274
 8009274:	e000ed0c 	.word	0xe000ed0c
 8009278:	20000278 	.word	0x20000278

0800927c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b08a      	sub	sp, #40	; 0x28
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009284:	2300      	movs	r3, #0
 8009286:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009288:	f7fe ffcc 	bl	8008224 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800928c:	4b5c      	ldr	r3, [pc, #368]	; (8009400 <pvPortMalloc+0x184>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d101      	bne.n	8009298 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009294:	f000 f91a 	bl	80094cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009298:	4b5a      	ldr	r3, [pc, #360]	; (8009404 <pvPortMalloc+0x188>)
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4013      	ands	r3, r2
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f040 8090 	bne.w	80093c6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d01e      	beq.n	80092ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80092ac:	2208      	movs	r2, #8
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4413      	add	r3, r2
 80092b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f003 0307 	and.w	r3, r3, #7
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d015      	beq.n	80092ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f023 0307 	bic.w	r3, r3, #7
 80092c4:	3308      	adds	r3, #8
 80092c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f003 0307 	and.w	r3, r3, #7
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00b      	beq.n	80092ea <pvPortMalloc+0x6e>
 80092d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d6:	b672      	cpsid	i
 80092d8:	f383 8811 	msr	BASEPRI, r3
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	b662      	cpsie	i
 80092e6:	617b      	str	r3, [r7, #20]
 80092e8:	e7fe      	b.n	80092e8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d06a      	beq.n	80093c6 <pvPortMalloc+0x14a>
 80092f0:	4b45      	ldr	r3, [pc, #276]	; (8009408 <pvPortMalloc+0x18c>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d865      	bhi.n	80093c6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80092fa:	4b44      	ldr	r3, [pc, #272]	; (800940c <pvPortMalloc+0x190>)
 80092fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80092fe:	4b43      	ldr	r3, [pc, #268]	; (800940c <pvPortMalloc+0x190>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009304:	e004      	b.n	8009310 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009308:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800930a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	429a      	cmp	r2, r3
 8009318:	d903      	bls.n	8009322 <pvPortMalloc+0xa6>
 800931a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1f1      	bne.n	8009306 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009322:	4b37      	ldr	r3, [pc, #220]	; (8009400 <pvPortMalloc+0x184>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009328:	429a      	cmp	r2, r3
 800932a:	d04c      	beq.n	80093c6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800932c:	6a3b      	ldr	r3, [r7, #32]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2208      	movs	r2, #8
 8009332:	4413      	add	r3, r2
 8009334:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	6a3b      	ldr	r3, [r7, #32]
 800933c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800933e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009340:	685a      	ldr	r2, [r3, #4]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	1ad2      	subs	r2, r2, r3
 8009346:	2308      	movs	r3, #8
 8009348:	005b      	lsls	r3, r3, #1
 800934a:	429a      	cmp	r2, r3
 800934c:	d920      	bls.n	8009390 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800934e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4413      	add	r3, r2
 8009354:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	f003 0307 	and.w	r3, r3, #7
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00b      	beq.n	8009378 <pvPortMalloc+0xfc>
 8009360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009364:	b672      	cpsid	i
 8009366:	f383 8811 	msr	BASEPRI, r3
 800936a:	f3bf 8f6f 	isb	sy
 800936e:	f3bf 8f4f 	dsb	sy
 8009372:	b662      	cpsie	i
 8009374:	613b      	str	r3, [r7, #16]
 8009376:	e7fe      	b.n	8009376 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	1ad2      	subs	r2, r2, r3
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800938a:	69b8      	ldr	r0, [r7, #24]
 800938c:	f000 f900 	bl	8009590 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009390:	4b1d      	ldr	r3, [pc, #116]	; (8009408 <pvPortMalloc+0x18c>)
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	4a1b      	ldr	r2, [pc, #108]	; (8009408 <pvPortMalloc+0x18c>)
 800939c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800939e:	4b1a      	ldr	r3, [pc, #104]	; (8009408 <pvPortMalloc+0x18c>)
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	4b1b      	ldr	r3, [pc, #108]	; (8009410 <pvPortMalloc+0x194>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d203      	bcs.n	80093b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093aa:	4b17      	ldr	r3, [pc, #92]	; (8009408 <pvPortMalloc+0x18c>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a18      	ldr	r2, [pc, #96]	; (8009410 <pvPortMalloc+0x194>)
 80093b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b4:	685a      	ldr	r2, [r3, #4]
 80093b6:	4b13      	ldr	r3, [pc, #76]	; (8009404 <pvPortMalloc+0x188>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	431a      	orrs	r2, r3
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c2:	2200      	movs	r2, #0
 80093c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80093c6:	f7fe ff3b 	bl	8008240 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d101      	bne.n	80093d4 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80093d0:	f7f7 f900 	bl	80005d4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	f003 0307 	and.w	r3, r3, #7
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00b      	beq.n	80093f6 <pvPortMalloc+0x17a>
 80093de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e2:	b672      	cpsid	i
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	b662      	cpsie	i
 80093f2:	60fb      	str	r3, [r7, #12]
 80093f4:	e7fe      	b.n	80093f4 <pvPortMalloc+0x178>
	return pvReturn;
 80093f6:	69fb      	ldr	r3, [r7, #28]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3728      	adds	r7, #40	; 0x28
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	20008284 	.word	0x20008284
 8009404:	20008290 	.word	0x20008290
 8009408:	20008288 	.word	0x20008288
 800940c:	2000827c 	.word	0x2000827c
 8009410:	2000828c 	.word	0x2000828c

08009414 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d04a      	beq.n	80094bc <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009426:	2308      	movs	r3, #8
 8009428:	425b      	negs	r3, r3
 800942a:	697a      	ldr	r2, [r7, #20]
 800942c:	4413      	add	r3, r2
 800942e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	685a      	ldr	r2, [r3, #4]
 8009438:	4b22      	ldr	r3, [pc, #136]	; (80094c4 <vPortFree+0xb0>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4013      	ands	r3, r2
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10b      	bne.n	800945a <vPortFree+0x46>
 8009442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009446:	b672      	cpsid	i
 8009448:	f383 8811 	msr	BASEPRI, r3
 800944c:	f3bf 8f6f 	isb	sy
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	b662      	cpsie	i
 8009456:	60fb      	str	r3, [r7, #12]
 8009458:	e7fe      	b.n	8009458 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00b      	beq.n	800947a <vPortFree+0x66>
 8009462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009466:	b672      	cpsid	i
 8009468:	f383 8811 	msr	BASEPRI, r3
 800946c:	f3bf 8f6f 	isb	sy
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	b662      	cpsie	i
 8009476:	60bb      	str	r3, [r7, #8]
 8009478:	e7fe      	b.n	8009478 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	685a      	ldr	r2, [r3, #4]
 800947e:	4b11      	ldr	r3, [pc, #68]	; (80094c4 <vPortFree+0xb0>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4013      	ands	r3, r2
 8009484:	2b00      	cmp	r3, #0
 8009486:	d019      	beq.n	80094bc <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d115      	bne.n	80094bc <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	685a      	ldr	r2, [r3, #4]
 8009494:	4b0b      	ldr	r3, [pc, #44]	; (80094c4 <vPortFree+0xb0>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	43db      	mvns	r3, r3
 800949a:	401a      	ands	r2, r3
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80094a0:	f7fe fec0 	bl	8008224 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	685a      	ldr	r2, [r3, #4]
 80094a8:	4b07      	ldr	r3, [pc, #28]	; (80094c8 <vPortFree+0xb4>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4413      	add	r3, r2
 80094ae:	4a06      	ldr	r2, [pc, #24]	; (80094c8 <vPortFree+0xb4>)
 80094b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80094b2:	6938      	ldr	r0, [r7, #16]
 80094b4:	f000 f86c 	bl	8009590 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80094b8:	f7fe fec2 	bl	8008240 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80094bc:	bf00      	nop
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	20008290 	.word	0x20008290
 80094c8:	20008288 	.word	0x20008288

080094cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80094d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094d8:	4b27      	ldr	r3, [pc, #156]	; (8009578 <prvHeapInit+0xac>)
 80094da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f003 0307 	and.w	r3, r3, #7
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00c      	beq.n	8009500 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	3307      	adds	r3, #7
 80094ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f023 0307 	bic.w	r3, r3, #7
 80094f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	1ad3      	subs	r3, r2, r3
 80094fa:	4a1f      	ldr	r2, [pc, #124]	; (8009578 <prvHeapInit+0xac>)
 80094fc:	4413      	add	r3, r2
 80094fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009504:	4a1d      	ldr	r2, [pc, #116]	; (800957c <prvHeapInit+0xb0>)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800950a:	4b1c      	ldr	r3, [pc, #112]	; (800957c <prvHeapInit+0xb0>)
 800950c:	2200      	movs	r2, #0
 800950e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	68ba      	ldr	r2, [r7, #8]
 8009514:	4413      	add	r3, r2
 8009516:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009518:	2208      	movs	r2, #8
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	1a9b      	subs	r3, r3, r2
 800951e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f023 0307 	bic.w	r3, r3, #7
 8009526:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	4a15      	ldr	r2, [pc, #84]	; (8009580 <prvHeapInit+0xb4>)
 800952c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800952e:	4b14      	ldr	r3, [pc, #80]	; (8009580 <prvHeapInit+0xb4>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2200      	movs	r2, #0
 8009534:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009536:	4b12      	ldr	r3, [pc, #72]	; (8009580 <prvHeapInit+0xb4>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2200      	movs	r2, #0
 800953c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	1ad2      	subs	r2, r2, r3
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800954c:	4b0c      	ldr	r3, [pc, #48]	; (8009580 <prvHeapInit+0xb4>)
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	4a0a      	ldr	r2, [pc, #40]	; (8009584 <prvHeapInit+0xb8>)
 800955a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	4a09      	ldr	r2, [pc, #36]	; (8009588 <prvHeapInit+0xbc>)
 8009562:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009564:	4b09      	ldr	r3, [pc, #36]	; (800958c <prvHeapInit+0xc0>)
 8009566:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800956a:	601a      	str	r2, [r3, #0]
}
 800956c:	bf00      	nop
 800956e:	3714      	adds	r7, #20
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr
 8009578:	2000027c 	.word	0x2000027c
 800957c:	2000827c 	.word	0x2000827c
 8009580:	20008284 	.word	0x20008284
 8009584:	2000828c 	.word	0x2000828c
 8009588:	20008288 	.word	0x20008288
 800958c:	20008290 	.word	0x20008290

08009590 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009598:	4b28      	ldr	r3, [pc, #160]	; (800963c <prvInsertBlockIntoFreeList+0xac>)
 800959a:	60fb      	str	r3, [r7, #12]
 800959c:	e002      	b.n	80095a4 <prvInsertBlockIntoFreeList+0x14>
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d8f7      	bhi.n	800959e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	68ba      	ldr	r2, [r7, #8]
 80095b8:	4413      	add	r3, r2
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d108      	bne.n	80095d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	685a      	ldr	r2, [r3, #4]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	441a      	add	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	441a      	add	r2, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d118      	bne.n	8009618 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	4b15      	ldr	r3, [pc, #84]	; (8009640 <prvInsertBlockIntoFreeList+0xb0>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d00d      	beq.n	800960e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	685a      	ldr	r2, [r3, #4]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	441a      	add	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	e008      	b.n	8009620 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800960e:	4b0c      	ldr	r3, [pc, #48]	; (8009640 <prvInsertBlockIntoFreeList+0xb0>)
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	e003      	b.n	8009620 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	429a      	cmp	r2, r3
 8009626:	d002      	beq.n	800962e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800962e:	bf00      	nop
 8009630:	3714      	adds	r7, #20
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	2000827c 	.word	0x2000827c
 8009640:	20008284 	.word	0x20008284

08009644 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 8009648:	f00a f84c 	bl	80136e4 <touchgfx_init>
}
 800964c:	bf00      	nop
 800964e:	bd80      	pop	{r7, pc}

08009650 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 8009654:	f00a f870 	bl	8013738 <touchgfx_taskEntry>
}
 8009658:	bf00      	nop
 800965a:	bd80      	pop	{r7, pc}

0800965c <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
    {
 8009664:	4a04      	ldr	r2, [pc, #16]	; (8009678 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	601a      	str	r2, [r3, #0]
    }
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4618      	mov	r0, r3
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr
 8009678:	080269e4 	.word	0x080269e4

0800967c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
    }
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7ff ffe9 	bl	800965c <_ZN8touchgfx12FontProviderD1Ev>
 800968a:	2104      	movs	r1, #4
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f01b fab8 	bl	8024c02 <_ZdlPvj>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4618      	mov	r0, r3
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	460b      	mov	r3, r1
 80096a6:	807b      	strh	r3, [r7, #2]
    switch (typography)
 80096a8:	887b      	ldrh	r3, [r7, #2]
 80096aa:	2b04      	cmp	r3, #4
 80096ac:	d825      	bhi.n	80096fa <_ZN23ApplicationFontProvider7getFontEt+0x5e>
 80096ae:	a201      	add	r2, pc, #4	; (adr r2, 80096b4 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 80096b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b4:	080096c9 	.word	0x080096c9
 80096b8:	080096d3 	.word	0x080096d3
 80096bc:	080096dd 	.word	0x080096dd
 80096c0:	080096e7 	.word	0x080096e7
 80096c4:	080096f1 	.word	0x080096f1
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80096c8:	f007 fc9e 	bl	8011008 <_ZN17TypedTextDatabase8getFontsEv>
 80096cc:	4603      	mov	r3, r0
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	e014      	b.n	80096fc <_ZN23ApplicationFontProvider7getFontEt+0x60>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80096d2:	f007 fc99 	bl	8011008 <_ZN17TypedTextDatabase8getFontsEv>
 80096d6:	4603      	mov	r3, r0
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	e00f      	b.n	80096fc <_ZN23ApplicationFontProvider7getFontEt+0x60>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80096dc:	f007 fc94 	bl	8011008 <_ZN17TypedTextDatabase8getFontsEv>
 80096e0:	4603      	mov	r3, r0
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	e00a      	b.n	80096fc <_ZN23ApplicationFontProvider7getFontEt+0x60>
    case Typography::CANAL:
        // verdana_80_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 80096e6:	f007 fc8f 	bl	8011008 <_ZN17TypedTextDatabase8getFontsEv>
 80096ea:	4603      	mov	r3, r0
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	e005      	b.n	80096fc <_ZN23ApplicationFontProvider7getFontEt+0x60>
    case Typography::TYPOGRAPHY_15:
        // verdana_15_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 80096f0:	f007 fc8a 	bl	8011008 <_ZN17TypedTextDatabase8getFontsEv>
 80096f4:	4603      	mov	r3, r0
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	e000      	b.n	80096fc <_ZN23ApplicationFontProvider7getFontEt+0x60>
    default:
        return 0;
 80096fa:	2300      	movs	r3, #0
    }
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3708      	adds	r7, #8
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId CANAL = 3;         // verdana_80_4bpp
    static const touchgfx::FontId TYPOGRAPHY_15 = 4; // verdana_15_4bpp
    static const uint16_t NUMBER_OF_FONTS = 5;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	4a05      	ldr	r2, [pc, #20]	; (8009724 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	601a      	str	r2, [r3, #0]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4618      	mov	r0, r3
 8009716:	f7ff ffa1 	bl	800965c <_ZN8touchgfx12FontProviderD1Ev>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4618      	mov	r0, r3
 800971e:	3708      	adds	r7, #8
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	080269d0 	.word	0x080269d0

08009728 <_ZN23ApplicationFontProviderD0Ev>:
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f7ff ffe7 	bl	8009704 <_ZN23ApplicationFontProviderD1Ev>
 8009736:	2104      	movs	r1, #4
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f01b fa62 	bl	8024c02 <_ZdlPvj>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4618      	mov	r0, r3
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	4a04      	ldr	r2, [pc, #16]	; (8009764 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	601a      	str	r2, [r3, #0]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4618      	mov	r0, r3
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr
 8009764:	0802a788 	.word	0x0802a788

08009768 <_ZN8touchgfx4FontD0Ev>:
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f7ff ffe9 	bl	8009748 <_ZN8touchgfx4FontD1Ev>
 8009776:	2110      	movs	r1, #16
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f01b fa42 	bl	8024c02 <_ZdlPvj>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4618      	mov	r0, r3
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8009788:	b590      	push	{r4, r7, lr}
 800978a:	b087      	sub	sp, #28
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	460b      	mov	r3, r1
 8009792:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 8009794:	2300      	movs	r3, #0
 8009796:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8009798:	2300      	movs	r3, #0
 800979a:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	3308      	adds	r3, #8
 80097a2:	681c      	ldr	r4, [r3, #0]
 80097a4:	f107 030f 	add.w	r3, r7, #15
 80097a8:	f107 0210 	add.w	r2, r7, #16
 80097ac:	8879      	ldrh	r1, [r7, #2]
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	47a0      	blx	r4
 80097b2:	6178      	str	r0, [r7, #20]
        return glyph;
 80097b4:	697b      	ldr	r3, [r7, #20]
    }
 80097b6:	4618      	mov	r0, r3
 80097b8:	371c      	adds	r7, #28
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd90      	pop	{r4, r7, pc}

080097be <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80097be:	b480      	push	{r7}
 80097c0:	b083      	sub	sp, #12
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	895b      	ldrh	r3, [r3, #10]
    }
 80097ca:	4618      	mov	r0, r3
 80097cc:	370c      	adds	r7, #12
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 80097d6:	b480      	push	{r7}
 80097d8:	b083      	sub	sp, #12
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	899b      	ldrh	r3, [r3, #12]
    }
 80097e2:	4618      	mov	r0, r3
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 80097ee:	b480      	push	{r7}
 80097f0:	b083      	sub	sp, #12
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	889b      	ldrh	r3, [r3, #4]
    }
 80097fa:	4618      	mov	r0, r3
 80097fc:	370c      	adds	r7, #12
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 8009806:	b480      	push	{r7}
 8009808:	b083      	sub	sp, #12
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	889a      	ldrh	r2, [r3, #4]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	799b      	ldrb	r3, [r3, #6]
 8009816:	b29b      	uxth	r3, r3
 8009818:	4413      	add	r3, r2
 800981a:	b29b      	uxth	r3, r3
    }
 800981c:	4618      	mov	r0, r3
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	79db      	ldrb	r3, [r3, #7]
 8009834:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8009838:	b2db      	uxtb	r3, r3
    }
 800983a:	4618      	mov	r0, r3
 800983c:	370c      	adds	r7, #12
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 8009846:	b480      	push	{r7}
 8009848:	b083      	sub	sp, #12
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	79db      	ldrb	r3, [r3, #7]
 8009852:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009856:	b2db      	uxtb	r3, r3
    }
 8009858:	4618      	mov	r0, r3
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	4a05      	ldr	r2, [pc, #20]	; (8009884 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	601a      	str	r2, [r3, #0]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4618      	mov	r0, r3
 8009876:	f7ff ff67 	bl	8009748 <_ZN8touchgfx4FontD1Ev>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4618      	mov	r0, r3
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	0802a840 	.word	0x0802a840

08009888 <_ZN8touchgfx9ConstFontD0Ev>:
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f7ff ffe7 	bl	8009864 <_ZN8touchgfx9ConstFontD1Ev>
 8009896:	2118      	movs	r1, #24
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f01b f9b2 	bl	8024c02 <_ZdlPvj>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4618      	mov	r0, r3
 80098a2:	3708      	adds	r7, #8
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	4a05      	ldr	r2, [pc, #20]	; (80098c8 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	601a      	str	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7ff ffd3 	bl	8009864 <_ZN8touchgfx9ConstFontD1Ev>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4618      	mov	r0, r3
 80098c2:	3708      	adds	r7, #8
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	08026a28 	.word	0x08026a28

080098cc <_ZN8touchgfx13GeneratedFontD0Ev>:
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7ff ffe7 	bl	80098a8 <_ZN8touchgfx13GeneratedFontD1Ev>
 80098da:	2124      	movs	r1, #36	; 0x24
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f01b f990 	bl	8024c02 <_ZdlPvj>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4618      	mov	r0, r3
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 f82d 	bl	8009954 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 80098fa:	4b08      	ldr	r3, [pc, #32]	; (800991c <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	4b08      	ldr	r3, [pc, #32]	; (8009920 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 8009900:	6819      	ldr	r1, [r3, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	881b      	ldrh	r3, [r3, #0]
 8009906:	005b      	lsls	r3, r3, #1
 8009908:	440b      	add	r3, r1
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	4413      	add	r3, r2
 8009910:	681b      	ldr	r3, [r3, #0]
    }
 8009912:	4618      	mov	r0, r3
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	2000b36c 	.word	0x2000b36c
 8009920:	2000b364 	.word	0x2000b364

08009924 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 f811 	bl	8009954 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 8009932:	4b07      	ldr	r3, [pc, #28]	; (8009950 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	005b      	lsls	r3, r3, #1
 800993c:	4413      	add	r3, r2
 800993e:	785b      	ldrb	r3, [r3, #1]
 8009940:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009944:	b2db      	uxtb	r3, r3
    }
 8009946:	4618      	mov	r0, r3
 8009948:	3708      	adds	r7, #8
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	2000b364 	.word	0x2000b364

08009954 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800995c:	4b0c      	ldr	r3, [pc, #48]	; (8009990 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d105      	bne.n	8009970 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 8009964:	4b0b      	ldr	r3, [pc, #44]	; (8009994 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 8009966:	4a0c      	ldr	r2, [pc, #48]	; (8009998 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 8009968:	21de      	movs	r1, #222	; 0xde
 800996a:	480c      	ldr	r0, [pc, #48]	; (800999c <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800996c:	f01b f974 	bl	8024c58 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	881a      	ldrh	r2, [r3, #0]
 8009974:	4b0a      	ldr	r3, [pc, #40]	; (80099a0 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 8009976:	881b      	ldrh	r3, [r3, #0]
 8009978:	429a      	cmp	r2, r3
 800997a:	d305      	bcc.n	8009988 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800997c:	4b09      	ldr	r3, [pc, #36]	; (80099a4 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800997e:	4a06      	ldr	r2, [pc, #24]	; (8009998 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 8009980:	21df      	movs	r1, #223	; 0xdf
 8009982:	4806      	ldr	r0, [pc, #24]	; (800999c <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 8009984:	f01b f968 	bl	8024c58 <__assert_func>
    }
 8009988:	bf00      	nop
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	2000b364 	.word	0x2000b364
 8009994:	08025ca8 	.word	0x08025ca8
 8009998:	080269f0 	.word	0x080269f0
 800999c:	08025cec 	.word	0x08025cec
 80099a0:	2000b368 	.word	0x2000b368
 80099a4:	08025d30 	.word	0x08025d30

080099a8 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	7b5b      	ldrb	r3, [r3, #13]
 80099b4:	021b      	lsls	r3, r3, #8
 80099b6:	b21b      	sxth	r3, r3
 80099b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80099bc:	b21a      	sxth	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	7adb      	ldrb	r3, [r3, #11]
 80099c2:	b21b      	sxth	r3, r3
 80099c4:	4313      	orrs	r3, r2
 80099c6:	b21b      	sxth	r3, r3
 80099c8:	b29b      	uxth	r3, r3
    }
 80099ca:	4618      	mov	r0, r3
 80099cc:	370c      	adds	r7, #12
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr

080099d6 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 80099d6:	b480      	push	{r7}
 80099d8:	b083      	sub	sp, #12
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a1b      	ldr	r3, [r3, #32]
    }
 80099e2:	4618      	mov	r0, r3
 80099e4:	370c      	adds	r7, #12
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr
	...

080099f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b08c      	sub	sp, #48	; 0x30
 80099f4:	af08      	add	r7, sp, #32
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	4611      	mov	r1, r2
 80099fc:	461a      	mov	r2, r3
 80099fe:	460b      	mov	r3, r1
 8009a00:	80fb      	strh	r3, [r7, #6]
 8009a02:	4613      	mov	r3, r2
 8009a04:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	88b9      	ldrh	r1, [r7, #4]
 8009a0a:	88fa      	ldrh	r2, [r7, #6]
 8009a0c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009a0e:	9306      	str	r3, [sp, #24]
 8009a10:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009a12:	9305      	str	r3, [sp, #20]
 8009a14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a18:	9304      	str	r3, [sp, #16]
 8009a1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a1e:	9303      	str	r3, [sp, #12]
 8009a20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a24:	9302      	str	r3, [sp, #8]
 8009a26:	7f3b      	ldrb	r3, [r7, #28]
 8009a28:	9301      	str	r3, [sp, #4]
 8009a2a:	7e3b      	ldrb	r3, [r7, #24]
 8009a2c:	9300      	str	r3, [sp, #0]
 8009a2e:	460b      	mov	r3, r1
 8009a30:	68b9      	ldr	r1, [r7, #8]
 8009a32:	f00f fee7 	bl	8019804 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8009a36:	4a08      	ldr	r2, [pc, #32]	; (8009a58 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	601a      	str	r2, [r3, #0]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a40:	619a      	str	r2, [r3, #24]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a46:	61da      	str	r2, [r3, #28]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a4c:	621a      	str	r2, [r3, #32]
{
}
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	4618      	mov	r0, r3
 8009a52:	3710      	adds	r7, #16
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	08026a28 	.word	0x08026a28

08009a5c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	889b      	ldrh	r3, [r3, #4]
 8009a70:	0adb      	lsrs	r3, r3, #11
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	4413      	add	r3, r2
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4413      	add	r3, r2
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3714      	adds	r7, #20
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr

08009a8e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b086      	sub	sp, #24
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	60f8      	str	r0, [r7, #12]
 8009a96:	460b      	mov	r3, r1
 8009a98:	607a      	str	r2, [r7, #4]
 8009a9a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d003      	beq.n	8009aaa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	7b1b      	ldrb	r3, [r3, #12]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d101      	bne.n	8009aae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	e023      	b.n	8009af6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f7ff ff7a 	bl	80099a8 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 8009ab8:	8abb      	ldrh	r3, [r7, #20]
 8009aba:	82fb      	strh	r3, [r7, #22]
 8009abc:	8afa      	ldrh	r2, [r7, #22]
 8009abe:	8abb      	ldrh	r3, [r7, #20]
 8009ac0:	6879      	ldr	r1, [r7, #4]
 8009ac2:	7b09      	ldrb	r1, [r1, #12]
 8009ac4:	440b      	add	r3, r1
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	da14      	bge.n	8009af4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	69da      	ldr	r2, [r3, #28]
 8009ace:	8afb      	ldrh	r3, [r7, #22]
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	4413      	add	r3, r2
 8009ad4:	881b      	ldrh	r3, [r3, #0]
 8009ad6:	897a      	ldrh	r2, [r7, #10]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d107      	bne.n	8009aec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	69da      	ldr	r2, [r3, #28]
 8009ae0:	8afb      	ldrh	r3, [r7, #22]
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4413      	add	r3, r2
 8009ae6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8009aea:	e004      	b.n	8009af6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 8009aec:	8afb      	ldrh	r3, [r7, #22]
 8009aee:	3301      	adds	r3, #1
 8009af0:	82fb      	strh	r3, [r7, #22]
 8009af2:	e7e3      	b.n	8009abc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3718      	adds	r7, #24
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
	...

08009b00 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_10_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 104, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 95, 0, 0);
 8009b00:	b580      	push	{r7, lr}
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	4801      	ldr	r0, [pc, #4]	; (8009b0c <__tcf_0+0xc>)
 8009b06:	f7ff fecf 	bl	80098a8 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	20008294 	.word	0x20008294

08009b10 <_Z23getFont_verdana_10_4bppv>:
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b08a      	sub	sp, #40	; 0x28
 8009b14:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 104, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 95, 0, 0);
 8009b16:	4b15      	ldr	r3, [pc, #84]	; (8009b6c <_Z23getFont_verdana_10_4bppv+0x5c>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f003 0301 	and.w	r3, r3, #1
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d11f      	bne.n	8009b62 <_Z23getFont_verdana_10_4bppv+0x52>
 8009b22:	2300      	movs	r3, #0
 8009b24:	9309      	str	r3, [sp, #36]	; 0x24
 8009b26:	2300      	movs	r3, #0
 8009b28:	9308      	str	r3, [sp, #32]
 8009b2a:	235f      	movs	r3, #95	; 0x5f
 8009b2c:	9307      	str	r3, [sp, #28]
 8009b2e:	4b10      	ldr	r3, [pc, #64]	; (8009b70 <_Z23getFont_verdana_10_4bppv+0x60>)
 8009b30:	9306      	str	r3, [sp, #24]
 8009b32:	4b10      	ldr	r3, [pc, #64]	; (8009b74 <_Z23getFont_verdana_10_4bppv+0x64>)
 8009b34:	9305      	str	r3, [sp, #20]
 8009b36:	2301      	movs	r3, #1
 8009b38:	9304      	str	r3, [sp, #16]
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	9303      	str	r3, [sp, #12]
 8009b3e:	2301      	movs	r3, #1
 8009b40:	9302      	str	r3, [sp, #8]
 8009b42:	2304      	movs	r3, #4
 8009b44:	9301      	str	r3, [sp, #4]
 8009b46:	2302      	movs	r3, #2
 8009b48:	9300      	str	r3, [sp, #0]
 8009b4a:	230a      	movs	r3, #10
 8009b4c:	2268      	movs	r2, #104	; 0x68
 8009b4e:	490a      	ldr	r1, [pc, #40]	; (8009b78 <_Z23getFont_verdana_10_4bppv+0x68>)
 8009b50:	480a      	ldr	r0, [pc, #40]	; (8009b7c <_Z23getFont_verdana_10_4bppv+0x6c>)
 8009b52:	f7ff ff4d 	bl	80099f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8009b56:	4b05      	ldr	r3, [pc, #20]	; (8009b6c <_Z23getFont_verdana_10_4bppv+0x5c>)
 8009b58:	2201      	movs	r2, #1
 8009b5a:	601a      	str	r2, [r3, #0]
 8009b5c:	4808      	ldr	r0, [pc, #32]	; (8009b80 <_Z23getFont_verdana_10_4bppv+0x70>)
 8009b5e:	f01b f899 	bl	8024c94 <atexit>
    return verdana_10_4bpp;
 8009b62:	4b06      	ldr	r3, [pc, #24]	; (8009b7c <_Z23getFont_verdana_10_4bppv+0x6c>)
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	200082b8 	.word	0x200082b8
 8009b70:	901a9380 	.word	0x901a9380
 8009b74:	08026a74 	.word	0x08026a74
 8009b78:	901a94dc 	.word	0x901a94dc
 8009b7c:	20008294 	.word	0x20008294
 8009b80:	08009b01 	.word	0x08009b01

08009b84 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_15_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_15_4bpp();

touchgfx::GeneratedFont& getFont_verdana_15_4bpp()
{
    static touchgfx::GeneratedFont verdana_15_4bpp(glyphs_verdana_15_4bpp, 95, 15, 3, 4, 1, 1, 1, unicodes_verdana_15_4bpp, kerning_verdana_15_4bpp, 63, 0, 0);
 8009b84:	b580      	push	{r7, lr}
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	4801      	ldr	r0, [pc, #4]	; (8009b90 <__tcf_0+0xc>)
 8009b8a:	f7ff fe8d 	bl	80098a8 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	200082bc 	.word	0x200082bc

08009b94 <_Z23getFont_verdana_15_4bppv>:
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b08a      	sub	sp, #40	; 0x28
 8009b98:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_15_4bpp(glyphs_verdana_15_4bpp, 95, 15, 3, 4, 1, 1, 1, unicodes_verdana_15_4bpp, kerning_verdana_15_4bpp, 63, 0, 0);
 8009b9a:	4b15      	ldr	r3, [pc, #84]	; (8009bf0 <_Z23getFont_verdana_15_4bppv+0x5c>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d11f      	bne.n	8009be6 <_Z23getFont_verdana_15_4bppv+0x52>
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8009baa:	2300      	movs	r3, #0
 8009bac:	9308      	str	r3, [sp, #32]
 8009bae:	233f      	movs	r3, #63	; 0x3f
 8009bb0:	9307      	str	r3, [sp, #28]
 8009bb2:	4b10      	ldr	r3, [pc, #64]	; (8009bf4 <_Z23getFont_verdana_15_4bppv+0x60>)
 8009bb4:	9306      	str	r3, [sp, #24]
 8009bb6:	4b10      	ldr	r3, [pc, #64]	; (8009bf8 <_Z23getFont_verdana_15_4bppv+0x64>)
 8009bb8:	9305      	str	r3, [sp, #20]
 8009bba:	2301      	movs	r3, #1
 8009bbc:	9304      	str	r3, [sp, #16]
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	9303      	str	r3, [sp, #12]
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	9302      	str	r3, [sp, #8]
 8009bc6:	2304      	movs	r3, #4
 8009bc8:	9301      	str	r3, [sp, #4]
 8009bca:	2303      	movs	r3, #3
 8009bcc:	9300      	str	r3, [sp, #0]
 8009bce:	230f      	movs	r3, #15
 8009bd0:	225f      	movs	r2, #95	; 0x5f
 8009bd2:	490a      	ldr	r1, [pc, #40]	; (8009bfc <_Z23getFont_verdana_15_4bppv+0x68>)
 8009bd4:	480a      	ldr	r0, [pc, #40]	; (8009c00 <_Z23getFont_verdana_15_4bppv+0x6c>)
 8009bd6:	f7ff ff0b 	bl	80099f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8009bda:	4b05      	ldr	r3, [pc, #20]	; (8009bf0 <_Z23getFont_verdana_15_4bppv+0x5c>)
 8009bdc:	2201      	movs	r2, #1
 8009bde:	601a      	str	r2, [r3, #0]
 8009be0:	4808      	ldr	r0, [pc, #32]	; (8009c04 <_Z23getFont_verdana_15_4bppv+0x70>)
 8009be2:	f01b f857 	bl	8024c94 <atexit>
    return verdana_15_4bpp;
 8009be6:	4b06      	ldr	r3, [pc, #24]	; (8009c00 <_Z23getFont_verdana_15_4bppv+0x6c>)
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	200082e0 	.word	0x200082e0
 8009bf4:	901a93b4 	.word	0x901a93b4
 8009bf8:	08026a78 	.word	0x08026a78
 8009bfc:	901a9a8c 	.word	0x901a9a8c
 8009c00:	200082bc 	.word	0x200082bc
 8009c04:	08009b85 	.word	0x08009b85

08009c08 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 51, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	4801      	ldr	r0, [pc, #4]	; (8009c14 <__tcf_0+0xc>)
 8009c0e:	f7ff fe4b 	bl	80098a8 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	200082e4 	.word	0x200082e4

08009c18 <_Z23getFont_verdana_20_4bppv>:
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b08a      	sub	sp, #40	; 0x28
 8009c1c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 51, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8009c1e:	4b15      	ldr	r3, [pc, #84]	; (8009c74 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f003 0301 	and.w	r3, r3, #1
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d11f      	bne.n	8009c6a <_Z23getFont_verdana_20_4bppv+0x52>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c2e:	2300      	movs	r3, #0
 8009c30:	9308      	str	r3, [sp, #32]
 8009c32:	233f      	movs	r3, #63	; 0x3f
 8009c34:	9307      	str	r3, [sp, #28]
 8009c36:	4b10      	ldr	r3, [pc, #64]	; (8009c78 <_Z23getFont_verdana_20_4bppv+0x60>)
 8009c38:	9306      	str	r3, [sp, #24]
 8009c3a:	4b10      	ldr	r3, [pc, #64]	; (8009c7c <_Z23getFont_verdana_20_4bppv+0x64>)
 8009c3c:	9305      	str	r3, [sp, #20]
 8009c3e:	2301      	movs	r3, #1
 8009c40:	9304      	str	r3, [sp, #16]
 8009c42:	2301      	movs	r3, #1
 8009c44:	9303      	str	r3, [sp, #12]
 8009c46:	2301      	movs	r3, #1
 8009c48:	9302      	str	r3, [sp, #8]
 8009c4a:	2304      	movs	r3, #4
 8009c4c:	9301      	str	r3, [sp, #4]
 8009c4e:	2304      	movs	r3, #4
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	2314      	movs	r3, #20
 8009c54:	2233      	movs	r2, #51	; 0x33
 8009c56:	490a      	ldr	r1, [pc, #40]	; (8009c80 <_Z23getFont_verdana_20_4bppv+0x68>)
 8009c58:	480a      	ldr	r0, [pc, #40]	; (8009c84 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8009c5a:	f7ff fec9 	bl	80099f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8009c5e:	4b05      	ldr	r3, [pc, #20]	; (8009c74 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8009c60:	2201      	movs	r2, #1
 8009c62:	601a      	str	r2, [r3, #0]
 8009c64:	4808      	ldr	r0, [pc, #32]	; (8009c88 <_Z23getFont_verdana_20_4bppv+0x70>)
 8009c66:	f01b f815 	bl	8024c94 <atexit>
    return verdana_20_4bpp;
 8009c6a:	4b06      	ldr	r3, [pc, #24]	; (8009c84 <_Z23getFont_verdana_20_4bppv+0x6c>)
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	20008308 	.word	0x20008308
 8009c78:	901a9490 	.word	0x901a9490
 8009c7c:	08026a7c 	.word	0x08026a7c
 8009c80:	901a9fc0 	.word	0x901a9fc0
 8009c84:	200082e4 	.word	0x200082e4
 8009c88:	08009c09 	.word	0x08009c09

08009c8c <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 7, 40, 8, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	4801      	ldr	r0, [pc, #4]	; (8009c98 <__tcf_0+0xc>)
 8009c92:	f7ff fe09 	bl	80098a8 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	2000830c 	.word	0x2000830c

08009c9c <_Z23getFont_verdana_40_4bppv>:
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b08a      	sub	sp, #40	; 0x28
 8009ca0:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 7, 40, 8, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8009ca2:	4b15      	ldr	r3, [pc, #84]	; (8009cf8 <_Z23getFont_verdana_40_4bppv+0x5c>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f003 0301 	and.w	r3, r3, #1
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d11f      	bne.n	8009cee <_Z23getFont_verdana_40_4bppv+0x52>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	9308      	str	r3, [sp, #32]
 8009cb6:	233f      	movs	r3, #63	; 0x3f
 8009cb8:	9307      	str	r3, [sp, #28]
 8009cba:	4b10      	ldr	r3, [pc, #64]	; (8009cfc <_Z23getFont_verdana_40_4bppv+0x60>)
 8009cbc:	9306      	str	r3, [sp, #24]
 8009cbe:	4b10      	ldr	r3, [pc, #64]	; (8009d00 <_Z23getFont_verdana_40_4bppv+0x64>)
 8009cc0:	9305      	str	r3, [sp, #20]
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	9304      	str	r3, [sp, #16]
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	9303      	str	r3, [sp, #12]
 8009cca:	2301      	movs	r3, #1
 8009ccc:	9302      	str	r3, [sp, #8]
 8009cce:	2304      	movs	r3, #4
 8009cd0:	9301      	str	r3, [sp, #4]
 8009cd2:	2308      	movs	r3, #8
 8009cd4:	9300      	str	r3, [sp, #0]
 8009cd6:	2328      	movs	r3, #40	; 0x28
 8009cd8:	2207      	movs	r2, #7
 8009cda:	490a      	ldr	r1, [pc, #40]	; (8009d04 <_Z23getFont_verdana_40_4bppv+0x68>)
 8009cdc:	480a      	ldr	r0, [pc, #40]	; (8009d08 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8009cde:	f7ff fe87 	bl	80099f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8009ce2:	4b05      	ldr	r3, [pc, #20]	; (8009cf8 <_Z23getFont_verdana_40_4bppv+0x5c>)
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	601a      	str	r2, [r3, #0]
 8009ce8:	4808      	ldr	r0, [pc, #32]	; (8009d0c <_Z23getFont_verdana_40_4bppv+0x70>)
 8009cea:	f01a ffd3 	bl	8024c94 <atexit>
    return verdana_40_4bpp;
 8009cee:	4b06      	ldr	r3, [pc, #24]	; (8009d08 <_Z23getFont_verdana_40_4bppv+0x6c>)
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	20008330 	.word	0x20008330
 8009cfc:	901a94d4 	.word	0x901a94d4
 8009d00:	08026a80 	.word	0x08026a80
 8009d04:	901aa28c 	.word	0x901aa28c
 8009d08:	2000830c 	.word	0x2000830c
 8009d0c:	08009c8d 	.word	0x08009c8d

08009d10 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_80_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_80_4bpp();

touchgfx::GeneratedFont& getFont_verdana_80_4bpp()
{
    static touchgfx::GeneratedFont verdana_80_4bpp(glyphs_verdana_80_4bpp, 11, 80, 1, 4, 1, 0, 0, unicodes_verdana_80_4bpp, kerning_verdana_80_4bpp, 63, 0, 0);
 8009d10:	b580      	push	{r7, lr}
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	4801      	ldr	r0, [pc, #4]	; (8009d1c <__tcf_0+0xc>)
 8009d16:	f7ff fdc7 	bl	80098a8 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	20008334 	.word	0x20008334

08009d20 <_Z23getFont_verdana_80_4bppv>:
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b08a      	sub	sp, #40	; 0x28
 8009d24:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_80_4bpp(glyphs_verdana_80_4bpp, 11, 80, 1, 4, 1, 0, 0, unicodes_verdana_80_4bpp, kerning_verdana_80_4bpp, 63, 0, 0);
 8009d26:	4b15      	ldr	r3, [pc, #84]	; (8009d7c <_Z23getFont_verdana_80_4bppv+0x5c>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f003 0301 	and.w	r3, r3, #1
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d11f      	bne.n	8009d72 <_Z23getFont_verdana_80_4bppv+0x52>
 8009d32:	2300      	movs	r3, #0
 8009d34:	9309      	str	r3, [sp, #36]	; 0x24
 8009d36:	2300      	movs	r3, #0
 8009d38:	9308      	str	r3, [sp, #32]
 8009d3a:	233f      	movs	r3, #63	; 0x3f
 8009d3c:	9307      	str	r3, [sp, #28]
 8009d3e:	4b10      	ldr	r3, [pc, #64]	; (8009d80 <_Z23getFont_verdana_80_4bppv+0x60>)
 8009d40:	9306      	str	r3, [sp, #24]
 8009d42:	4b10      	ldr	r3, [pc, #64]	; (8009d84 <_Z23getFont_verdana_80_4bppv+0x64>)
 8009d44:	9305      	str	r3, [sp, #20]
 8009d46:	2300      	movs	r3, #0
 8009d48:	9304      	str	r3, [sp, #16]
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	9303      	str	r3, [sp, #12]
 8009d4e:	2301      	movs	r3, #1
 8009d50:	9302      	str	r3, [sp, #8]
 8009d52:	2304      	movs	r3, #4
 8009d54:	9301      	str	r3, [sp, #4]
 8009d56:	2301      	movs	r3, #1
 8009d58:	9300      	str	r3, [sp, #0]
 8009d5a:	2350      	movs	r3, #80	; 0x50
 8009d5c:	220b      	movs	r2, #11
 8009d5e:	490a      	ldr	r1, [pc, #40]	; (8009d88 <_Z23getFont_verdana_80_4bppv+0x68>)
 8009d60:	480a      	ldr	r0, [pc, #40]	; (8009d8c <_Z23getFont_verdana_80_4bppv+0x6c>)
 8009d62:	f7ff fe45 	bl	80099f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8009d66:	4b05      	ldr	r3, [pc, #20]	; (8009d7c <_Z23getFont_verdana_80_4bppv+0x5c>)
 8009d68:	2201      	movs	r2, #1
 8009d6a:	601a      	str	r2, [r3, #0]
 8009d6c:	4808      	ldr	r0, [pc, #32]	; (8009d90 <_Z23getFont_verdana_80_4bppv+0x70>)
 8009d6e:	f01a ff91 	bl	8024c94 <atexit>
    return verdana_80_4bpp;
 8009d72:	4b06      	ldr	r3, [pc, #24]	; (8009d8c <_Z23getFont_verdana_80_4bppv+0x6c>)
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	20008358 	.word	0x20008358
 8009d80:	901a94d8 	.word	0x901a94d8
 8009d84:	08026a84 	.word	0x08026a84
 8009d88:	901aa2f0 	.word	0x901aa2f0
 8009d8c:	20008334 	.word	0x20008334
 8009d90:	08009d11 	.word	0x08009d11

08009d94 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	4618      	mov	r0, r3
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
    {
    }
 8009db6:	bf00      	nop
 8009db8:	370c      	adds	r7, #12
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr

08009dc2 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8009dc2:	b480      	push	{r7}
 8009dc4:	b083      	sub	sp, #12
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	6039      	str	r1, [r7, #0]
    {
    }
 8009dcc:	bf00      	nop
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
    {
    }
 8009de2:	bf00      	nop
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8009dee:	b480      	push	{r7}
 8009df0:	b083      	sub	sp, #12
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
 8009df6:	460b      	mov	r3, r1
 8009df8:	70fb      	strb	r3, [r7, #3]
    {
    }
 8009dfa:	bf00      	nop
 8009dfc:	370c      	adds	r7, #12
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr

08009e06 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8009e06:	b480      	push	{r7}
 8009e08:	b083      	sub	sp, #12
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
    {
    }
 8009e0e:	bf00      	nop
 8009e10:	370c      	adds	r7, #12
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr

08009e1a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 8009e1a:	b480      	push	{r7}
 8009e1c:	b083      	sub	sp, #12
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
    {
    }
 8009e22:	bf00      	nop
 8009e24:	370c      	adds	r7, #12
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr
	...

08009e30 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
    {
 8009e38:	4a04      	ldr	r2, [pc, #16]	; (8009e4c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	601a      	str	r2, [r3, #0]
    }
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	4618      	mov	r0, r3
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr
 8009e4c:	08026c10 	.word	0x08026c10

08009e50 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
    }
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f7ff ffe9 	bl	8009e30 <_ZN8touchgfx15UIEventListenerD1Ev>
 8009e5e:	2104      	movs	r1, #4
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f01a fece 	bl	8024c02 <_ZdlPvj>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 8009e78:	4a07      	ldr	r2, [pc, #28]	; (8009e98 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	601a      	str	r2, [r3, #0]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	605a      	str	r2, [r3, #4]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	721a      	strb	r2, [r3, #8]
    {
    }
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr
 8009e98:	08026bf0 	.word	0x08026bf0

08009e9c <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
    {
 8009ea4:	4a04      	ldr	r2, [pc, #16]	; (8009eb8 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	601a      	str	r2, [r3, #0]
    }
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4618      	mov	r0, r3
 8009eae:	370c      	adds	r7, #12
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr
 8009eb8:	08026bf0 	.word	0x08026bf0

08009ebc <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
    }
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f7ff ffe9 	bl	8009e9c <_ZN8touchgfx10TransitionD1Ev>
 8009eca:	210c      	movs	r1, #12
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f01a fe98 	bl	8024c02 <_ZdlPvj>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	bf00      	nop
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	bf00      	nop
 8009efa:	370c      	adds	r7, #12
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	bf00      	nop
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	683a      	ldr	r2, [r7, #0]
 8009f26:	605a      	str	r2, [r3, #4]
    }
 8009f28:	bf00      	nop
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	70fb      	strb	r3, [r7, #3]
    {
    }
 8009f40:	bf00      	nop
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr

08009f4c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
    {
 8009f54:	4a04      	ldr	r2, [pc, #16]	; (8009f68 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	601a      	str	r2, [r3, #0]
    }
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr
 8009f68:	08026bd8 	.word	0x08026bd8

08009f6c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
    }
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f7ff ffe9 	bl	8009f4c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8009f7a:	2104      	movs	r1, #4
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f01a fe40 	bl	8024c02 <_ZdlPvj>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4618      	mov	r0, r3
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	4608      	mov	r0, r1
 8009f96:	4611      	mov	r1, r2
 8009f98:	461a      	mov	r2, r3
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	817b      	strh	r3, [r7, #10]
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	813b      	strh	r3, [r7, #8]
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	3334      	adds	r3, #52	; 0x34
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009fb2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	4798      	blx	r3
        setWidth(width);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	3338      	adds	r3, #56	; 0x38
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009fc6:	4611      	mov	r1, r2
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	4798      	blx	r3
        setHeight(height);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	333c      	adds	r3, #60	; 0x3c
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8009fd8:	4611      	mov	r1, r2
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	4798      	blx	r3
    }
 8009fde:	bf00      	nop
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <_ZNK8touchgfx8Drawable4getXEv>:
     *
     *        Gets the x coordinate of this drawable.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 8009fe6:	b480      	push	{r7}
 8009fe8:	b083      	sub	sp, #12
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	370c      	adds	r7, #12
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <_ZNK8touchgfx8Drawable4getYEv>:
     *
     *        Gets the y coordinate of this drawable.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800a00e:	4618      	mov	r0, r3
 800a010:	370c      	adds	r7, #12
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
	...

0800a01c <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800a01c:	b480      	push	{r7}
 800a01e:	af00      	add	r7, sp, #0
    {
        return instance;
 800a020:	4b03      	ldr	r3, [pc, #12]	; (800a030 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800a022:	681b      	ldr	r3, [r3, #0]
    }
 800a024:	4618      	mov	r0, r3
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop
 800a030:	2000b2d4 	.word	0x2000b2d4

0800a034 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800a034:	b480      	push	{r7}
 800a036:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800a038:	4b0b      	ldr	r3, [pc, #44]	; (800a068 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800a040:	2b00      	cmp	r3, #0
 800a042:	d008      	beq.n	800a056 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800a044:	4b08      	ldr	r3, [pc, #32]	; (800a068 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d003      	beq.n	800a056 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800a04e:	4b06      	ldr	r3, [pc, #24]	; (800a068 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a054:	e002      	b.n	800a05c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800a056:	4b04      	ldr	r3, [pc, #16]	; (800a068 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	689b      	ldr	r3, [r3, #8]
        }
    }
 800a05c:	4618      	mov	r0, r3
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop
 800a068:	2000b2d4 	.word	0x2000b2d4

0800a06c <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	4a05      	ldr	r2, [pc, #20]	; (800a08c <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	601a      	str	r2, [r3, #0]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7ff fed7 	bl	8009e30 <_ZN8touchgfx15UIEventListenerD1Ev>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	4618      	mov	r0, r3
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	0802a65c 	.word	0x0802a65c

0800a090 <_ZN8touchgfx11ApplicationD0Ev>:
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f7ff ffe7 	bl	800a06c <_ZN8touchgfx11ApplicationD1Ev>
 800a09e:	f44f 7198 	mov.w	r1, #304	; 0x130
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f01a fdad 	bl	8024c02 <_ZdlPvj>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
	...

0800a0b4 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f00e feda 	bl	8018e78 <_ZN8touchgfx11ApplicationC1Ev>
 800a0c4:	4a09      	ldr	r2, [pc, #36]	; (800a0ec <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	601a      	str	r2, [r3, #0]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4a04      	ldr	r2, [pc, #16]	; (800a0f0 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800a0de:	6013      	str	r3, [r2, #0]
    }
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3708      	adds	r7, #8
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	08026b9c 	.word	0x08026b9c
 800a0f0:	2000b360 	.word	0x2000b360

0800a0f4 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	4a05      	ldr	r2, [pc, #20]	; (800a114 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	601a      	str	r2, [r3, #0]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	4618      	mov	r0, r3
 800a106:	f7ff ffb1 	bl	800a06c <_ZN8touchgfx11ApplicationD1Ev>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4618      	mov	r0, r3
 800a10e:	3708      	adds	r7, #8
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	08026b9c 	.word	0x08026b9c

0800a118 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f7ff ffe7 	bl	800a0f4 <_ZN8touchgfx14MVPApplicationD1Ev>
 800a126:	f44f 719c 	mov.w	r1, #312	; 0x138
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f01a fd69 	bl	8024c02 <_ZdlPvj>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4618      	mov	r0, r3
 800a134:	3708      	adds	r7, #8
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b082      	sub	sp, #8
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 f804 	bl	800a150 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800a148:	bf00      	nop
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00f      	beq.n	800a182 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	330c      	adds	r3, #12
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4610      	mov	r0, r2
 800a176:	4798      	blx	r3
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800a17e:	2301      	movs	r3, #1
 800a180:	e000      	b.n	800a184 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800a182:	2300      	movs	r3, #0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00e      	beq.n	800a1a6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	3308      	adds	r3, #8
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4610      	mov	r0, r2
 800a19c:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 800a1a6:	bf00      	nop
 800a1a8:	3708      	adds	r7, #8
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b084      	sub	sp, #16
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	60f8      	str	r0, [r7, #12]
 800a1b6:	60b9      	str	r1, [r7, #8]
 800a1b8:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 800a1ba:	f00e fdf3 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f00e fe3d 	bl	8018e40 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d008      	beq.n	800a1e0 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	330c      	adds	r3, #12
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4610      	mov	r0, r2
 800a1de:	4798      	blx	r3
    }
    if (*currentTrans)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d007      	beq.n	800a1f8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4610      	mov	r0, r2
 800a1f6:	4798      	blx	r3
    }
    if (*currentScreen)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d008      	beq.n	800a212 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	3314      	adds	r3, #20
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4610      	mov	r0, r2
 800a210:	4798      	blx	r3
    }
    if (*currentPresenter)
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d008      	beq.n	800a22c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	3304      	adds	r3, #4
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4610      	mov	r0, r2
 800a22a:	4798      	blx	r3
    }
    if (*currentScreen)
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d007      	beq.n	800a244 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4610      	mov	r0, r2
 800a242:	4798      	blx	r3
    }
    if (*currentPresenter)
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d008      	beq.n	800a25e <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	3308      	adds	r3, #8
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4610      	mov	r0, r2
 800a25c:	4798      	blx	r3
    }
}
 800a25e:	bf00      	nop
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b084      	sub	sp, #16
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	60f8      	str	r0, [r7, #12]
 800a26e:	60b9      	str	r1, [r7, #8]
 800a270:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	330c      	adds	r3, #12
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	4798      	blx	r3
    newPresenter->activate();
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68b8      	ldr	r0, [r7, #8]
 800a286:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800a288:	6879      	ldr	r1, [r7, #4]
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f00f fee2 	bl	801a054 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	3310      	adds	r3, #16
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	4798      	blx	r3

    Application::getInstance()->draw();
 800a29c:	f00e fd82 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	6813      	ldr	r3, [r2, #0]
 800a2a4:	3328      	adds	r3, #40	; 0x28
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4610      	mov	r0, r2
 800a2aa:	4798      	blx	r3
}
 800a2ac:	bf00      	nop
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	683a      	ldr	r2, [r7, #0]
 800a2c2:	601a      	str	r2, [r3, #0]
    }
 800a2c4:	bf00      	nop
 800a2c6:	370c      	adds	r7, #12
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	4a08      	ldr	r2, [pc, #32]	; (800a2fc <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	601a      	str	r2, [r3, #0]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f001 fe4d 	bl	800bf84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7ff ff01 	bl	800a0f4 <_ZN8touchgfx14MVPApplicationD1Ev>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3708      	adds	r7, #8
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	08026b48 	.word	0x08026b48

0800a300 <_ZN23FrontendApplicationBaseD0Ev>:
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f7ff ffe1 	bl	800a2d0 <_ZN23FrontendApplicationBaseD1Ev>
 800a30e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f01a fc75 	bl	8024c02 <_ZdlPvj>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4618      	mov	r0, r3
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
	...

0800a324 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4618      	mov	r0, r3
 800a330:	f7ff fd9e 	bl	8009e70 <_ZN8touchgfx10TransitionC1Ev>
 800a334:	4a03      	ldr	r2, [pc, #12]	; (800a344 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	601a      	str	r2, [r3, #0]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4618      	mov	r0, r3
 800a33e:	3708      	adds	r7, #8
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	08026b28 	.word	0x08026b28

0800a348 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	4a05      	ldr	r2, [pc, #20]	; (800a368 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	601a      	str	r2, [r3, #0]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4618      	mov	r0, r3
 800a35a:	f7ff fd9f 	bl	8009e9c <_ZN8touchgfx10TransitionD1Ev>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	4618      	mov	r0, r3
 800a362:	3708      	adds	r7, #8
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	08026b28 	.word	0x08026b28

0800a36c <_ZN8touchgfx12NoTransitionD0Ev>:
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f7ff ffe7 	bl	800a348 <_ZN8touchgfx12NoTransitionD1Ev>
 800a37a:	210c      	movs	r1, #12
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f01a fc40 	bl	8024c02 <_ZdlPvj>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4618      	mov	r0, r3
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	721a      	strb	r2, [r3, #8]
    }
 800a39a:	bf00      	nop
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	683a      	ldr	r2, [r7, #0]
 800a3b4:	605a      	str	r2, [r3, #4]
    }
 800a3b6:	bf00      	nop
 800a3b8:	370c      	adds	r7, #12
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
	...

0800a3c4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/testgirouette_screen/TestGirouetteView.hpp>
#include <gui/testgirouette_screen/TestGirouettePresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7ff fe6e 	bl	800a0b4 <_ZN8touchgfx14MVPApplicationC1Ev>
 800a3d8:	4a13      	ldr	r2, [pc, #76]	; (800a428 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	601a      	str	r2, [r3, #0]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f000 facf 	bl	800a988 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	68ba      	ldr	r2, [r7, #8]
 800a3f6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800a3fa:	f7ff fe0f 	bl	800a01c <_ZN8touchgfx3HAL11getInstanceEv>
 800a3fe:	4602      	mov	r2, r0
 800a400:	6813      	ldr	r3, [r2, #0]
 800a402:	3308      	adds	r3, #8
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2100      	movs	r1, #0
 800a408:	4610      	mov	r0, r2
 800a40a:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800a40c:	2000      	movs	r0, #0
 800a40e:	f006 fd83 	bl	8010f18 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800a412:	f7ff fe0f 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 800a416:	4603      	mov	r3, r0
 800a418:	4618      	mov	r0, r3
 800a41a:	f014 f900 	bl	801e61e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	4618      	mov	r0, r3
 800a422:	3710      	adds	r7, #16
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	08026b48 	.word	0x08026b48

0800a42c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4618      	mov	r0, r3
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	683a      	ldr	r2, [r7, #0]
 800a452:	4611      	mov	r1, r2
 800a454:	4618      	mov	r0, r3
 800a456:	f7ff ffe9 	bl	800a42c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	685a      	ldr	r2, [r3, #4]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	605a      	str	r2, [r3, #4]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	683a      	ldr	r2, [r7, #0]
 800a466:	3308      	adds	r3, #8
 800a468:	3208      	adds	r2, #8
 800a46a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a46e:	e883 0003 	stmia.w	r3, {r0, r1}
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4618      	mov	r0, r3
 800a476:	3708      	adds	r7, #8
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <_ZN23FrontendApplicationBase26gotoMenuScreenNoTransitionEv>:
 */

// Menu

void FrontendApplicationBase::gotoMenuScreenNoTransition()
{
 800a47c:	b590      	push	{r4, r7, lr}
 800a47e:	b089      	sub	sp, #36	; 0x24
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMenuScreenNoTransitionImpl);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800a48a:	4b10      	ldr	r3, [pc, #64]	; (800a4cc <_ZN23FrontendApplicationBase26gotoMenuScreenNoTransitionEv+0x50>)
 800a48c:	61bb      	str	r3, [r7, #24]
 800a48e:	2300      	movs	r3, #0
 800a490:	61fb      	str	r3, [r7, #28]
 800a492:	f107 0008 	add.w	r0, r7, #8
 800a496:	f107 0318 	add.w	r3, r7, #24
 800a49a:	cb0c      	ldmia	r3, {r2, r3}
 800a49c:	6879      	ldr	r1, [r7, #4]
 800a49e:	f000 fa8f 	bl	800a9c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800a4a2:	f107 0308 	add.w	r3, r7, #8
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	f7ff ffcb 	bl	800a444 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800a4ae:	f107 0308 	add.w	r3, r7, #8
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f001 fd66 	bl	800bf84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800a4c4:	bf00      	nop
 800a4c6:	3724      	adds	r7, #36	; 0x24
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd90      	pop	{r4, r7, pc}
 800a4cc:	0800a4d1 	.word	0x0800a4d1

0800a4d0 <_ZN23FrontendApplicationBase30gotoMenuScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMenuScreenNoTransitionImpl()
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af02      	add	r7, sp, #8
 800a4d6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MenuView, MenuPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	4b04      	ldr	r3, [pc, #16]	; (800a500 <_ZN23FrontendApplicationBase30gotoMenuScreenNoTransitionImplEv+0x30>)
 800a4f0:	4804      	ldr	r0, [pc, #16]	; (800a504 <_ZN23FrontendApplicationBase30gotoMenuScreenNoTransitionImplEv+0x34>)
 800a4f2:	f000 fa85 	bl	800aa00 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800a4f6:	bf00      	nop
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	2000b354 	.word	0x2000b354
 800a504:	2000b350 	.word	0x2000b350

0800a508 <_ZN23FrontendApplicationBase33gotoMenuScreenSlideTransitionWestEv>:

void FrontendApplicationBase::gotoMenuScreenSlideTransitionWest()
{
 800a508:	b590      	push	{r4, r7, lr}
 800a50a:	b089      	sub	sp, #36	; 0x24
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMenuScreenSlideTransitionWestImpl);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800a516:	4b10      	ldr	r3, [pc, #64]	; (800a558 <_ZN23FrontendApplicationBase33gotoMenuScreenSlideTransitionWestEv+0x50>)
 800a518:	61bb      	str	r3, [r7, #24]
 800a51a:	2300      	movs	r3, #0
 800a51c:	61fb      	str	r3, [r7, #28]
 800a51e:	f107 0008 	add.w	r0, r7, #8
 800a522:	f107 0318 	add.w	r3, r7, #24
 800a526:	cb0c      	ldmia	r3, {r2, r3}
 800a528:	6879      	ldr	r1, [r7, #4]
 800a52a:	f000 fa49 	bl	800a9c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800a52e:	f107 0308 	add.w	r3, r7, #8
 800a532:	4619      	mov	r1, r3
 800a534:	4620      	mov	r0, r4
 800a536:	f7ff ff85 	bl	800a444 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800a53a:	f107 0308 	add.w	r3, r7, #8
 800a53e:	4618      	mov	r0, r3
 800a540:	f001 fd20 	bl	800bf84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800a550:	bf00      	nop
 800a552:	3724      	adds	r7, #36	; 0x24
 800a554:	46bd      	mov	sp, r7
 800a556:	bd90      	pop	{r4, r7, pc}
 800a558:	0800a55d 	.word	0x0800a55d

0800a55c <_ZN23FrontendApplicationBase37gotoMenuScreenSlideTransitionWestImplEv>:

void FrontendApplicationBase::gotoMenuScreenSlideTransitionWestImpl()
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af02      	add	r7, sp, #8
 800a562:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MenuView, MenuPresenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800a570:	461a      	mov	r2, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	4b04      	ldr	r3, [pc, #16]	; (800a58c <_ZN23FrontendApplicationBase37gotoMenuScreenSlideTransitionWestImplEv+0x30>)
 800a57c:	4804      	ldr	r0, [pc, #16]	; (800a590 <_ZN23FrontendApplicationBase37gotoMenuScreenSlideTransitionWestImplEv+0x34>)
 800a57e:	f000 faf9 	bl	800ab74 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800a582:	bf00      	nop
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	2000b354 	.word	0x2000b354
 800a590:	2000b350 	.word	0x2000b350

0800a594 <_ZN23FrontendApplicationBase48gotoTestRotationPlateauScreenSlideTransitionEastEv>:

// TestRotationPlateau

void FrontendApplicationBase::gotoTestRotationPlateauScreenSlideTransitionEast()
{
 800a594:	b590      	push	{r4, r7, lr}
 800a596:	b089      	sub	sp, #36	; 0x24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoTestRotationPlateauScreenSlideTransitionEastImpl);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800a5a2:	4b10      	ldr	r3, [pc, #64]	; (800a5e4 <_ZN23FrontendApplicationBase48gotoTestRotationPlateauScreenSlideTransitionEastEv+0x50>)
 800a5a4:	61bb      	str	r3, [r7, #24]
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	61fb      	str	r3, [r7, #28]
 800a5aa:	f107 0008 	add.w	r0, r7, #8
 800a5ae:	f107 0318 	add.w	r3, r7, #24
 800a5b2:	cb0c      	ldmia	r3, {r2, r3}
 800a5b4:	6879      	ldr	r1, [r7, #4]
 800a5b6:	f000 fa03 	bl	800a9c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800a5ba:	f107 0308 	add.w	r3, r7, #8
 800a5be:	4619      	mov	r1, r3
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f7ff ff3f 	bl	800a444 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800a5c6:	f107 0308 	add.w	r3, r7, #8
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f001 fcda 	bl	800bf84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800a5dc:	bf00      	nop
 800a5de:	3724      	adds	r7, #36	; 0x24
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd90      	pop	{r4, r7, pc}
 800a5e4:	0800a5e9 	.word	0x0800a5e9

0800a5e8 <_ZN23FrontendApplicationBase52gotoTestRotationPlateauScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoTestRotationPlateauScreenSlideTransitionEastImpl()
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af02      	add	r7, sp, #8
 800a5ee:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<TestRotationPlateauView, TestRotationPlateauPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a604:	9300      	str	r3, [sp, #0]
 800a606:	4b04      	ldr	r3, [pc, #16]	; (800a618 <_ZN23FrontendApplicationBase52gotoTestRotationPlateauScreenSlideTransitionEastImplEv+0x30>)
 800a608:	4804      	ldr	r0, [pc, #16]	; (800a61c <_ZN23FrontendApplicationBase52gotoTestRotationPlateauScreenSlideTransitionEastImplEv+0x34>)
 800a60a:	f000 fb6f 	bl	800acec <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800a60e:	bf00      	nop
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	2000b354 	.word	0x2000b354
 800a61c:	2000b350 	.word	0x2000b350

0800a620 <_ZN23FrontendApplicationBase37gotoTestUartScreenSlideTransitionEastEv>:

// TestUart

void FrontendApplicationBase::gotoTestUartScreenSlideTransitionEast()
{
 800a620:	b590      	push	{r4, r7, lr}
 800a622:	b089      	sub	sp, #36	; 0x24
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoTestUartScreenSlideTransitionEastImpl);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800a62e:	4b10      	ldr	r3, [pc, #64]	; (800a670 <_ZN23FrontendApplicationBase37gotoTestUartScreenSlideTransitionEastEv+0x50>)
 800a630:	61bb      	str	r3, [r7, #24]
 800a632:	2300      	movs	r3, #0
 800a634:	61fb      	str	r3, [r7, #28]
 800a636:	f107 0008 	add.w	r0, r7, #8
 800a63a:	f107 0318 	add.w	r3, r7, #24
 800a63e:	cb0c      	ldmia	r3, {r2, r3}
 800a640:	6879      	ldr	r1, [r7, #4]
 800a642:	f000 f9bd 	bl	800a9c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800a646:	f107 0308 	add.w	r3, r7, #8
 800a64a:	4619      	mov	r1, r3
 800a64c:	4620      	mov	r0, r4
 800a64e:	f7ff fef9 	bl	800a444 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800a652:	f107 0308 	add.w	r3, r7, #8
 800a656:	4618      	mov	r0, r3
 800a658:	f001 fc94 	bl	800bf84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800a668:	bf00      	nop
 800a66a:	3724      	adds	r7, #36	; 0x24
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd90      	pop	{r4, r7, pc}
 800a670:	0800a675 	.word	0x0800a675

0800a674 <_ZN23FrontendApplicationBase41gotoTestUartScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoTestUartScreenSlideTransitionEastImpl()
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af02      	add	r7, sp, #8
 800a67a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<TestUartView, TestUartPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800a688:	461a      	mov	r2, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a690:	9300      	str	r3, [sp, #0]
 800a692:	4b04      	ldr	r3, [pc, #16]	; (800a6a4 <_ZN23FrontendApplicationBase41gotoTestUartScreenSlideTransitionEastImplEv+0x30>)
 800a694:	4804      	ldr	r0, [pc, #16]	; (800a6a8 <_ZN23FrontendApplicationBase41gotoTestUartScreenSlideTransitionEastImplEv+0x34>)
 800a696:	f000 fbe5 	bl	800ae64 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800a69a:	bf00      	nop
 800a69c:	3708      	adds	r7, #8
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	2000b354 	.word	0x2000b354
 800a6a8:	2000b350 	.word	0x2000b350

0800a6ac <_ZN23FrontendApplicationBase39gotoTestI2CSPIScreenSlideTransitionEastEv>:

// TestI2CSPI

void FrontendApplicationBase::gotoTestI2CSPIScreenSlideTransitionEast()
{
 800a6ac:	b590      	push	{r4, r7, lr}
 800a6ae:	b089      	sub	sp, #36	; 0x24
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoTestI2CSPIScreenSlideTransitionEastImpl);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800a6ba:	4b10      	ldr	r3, [pc, #64]	; (800a6fc <_ZN23FrontendApplicationBase39gotoTestI2CSPIScreenSlideTransitionEastEv+0x50>)
 800a6bc:	61bb      	str	r3, [r7, #24]
 800a6be:	2300      	movs	r3, #0
 800a6c0:	61fb      	str	r3, [r7, #28]
 800a6c2:	f107 0008 	add.w	r0, r7, #8
 800a6c6:	f107 0318 	add.w	r3, r7, #24
 800a6ca:	cb0c      	ldmia	r3, {r2, r3}
 800a6cc:	6879      	ldr	r1, [r7, #4]
 800a6ce:	f000 f977 	bl	800a9c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800a6d2:	f107 0308 	add.w	r3, r7, #8
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	4620      	mov	r0, r4
 800a6da:	f7ff feb3 	bl	800a444 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800a6de:	f107 0308 	add.w	r3, r7, #8
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f001 fc4e 	bl	800bf84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800a6f4:	bf00      	nop
 800a6f6:	3724      	adds	r7, #36	; 0x24
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd90      	pop	{r4, r7, pc}
 800a6fc:	0800a701 	.word	0x0800a701

0800a700 <_ZN23FrontendApplicationBase43gotoTestI2CSPIScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoTestI2CSPIScreenSlideTransitionEastImpl()
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af02      	add	r7, sp, #8
 800a706:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<TestI2CSPIView, TestI2CSPIPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800a714:	461a      	mov	r2, r3
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	4b04      	ldr	r3, [pc, #16]	; (800a730 <_ZN23FrontendApplicationBase43gotoTestI2CSPIScreenSlideTransitionEastImplEv+0x30>)
 800a720:	4804      	ldr	r0, [pc, #16]	; (800a734 <_ZN23FrontendApplicationBase43gotoTestI2CSPIScreenSlideTransitionEastImplEv+0x34>)
 800a722:	f000 fc5b 	bl	800afdc <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800a726:	bf00      	nop
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	2000b354 	.word	0x2000b354
 800a734:	2000b350 	.word	0x2000b350

0800a738 <_ZN23FrontendApplicationBase49gotoTestOrientationVoileScreenSlideTransitionEastEv>:

// TestOrientationVoile

void FrontendApplicationBase::gotoTestOrientationVoileScreenSlideTransitionEast()
{
 800a738:	b590      	push	{r4, r7, lr}
 800a73a:	b089      	sub	sp, #36	; 0x24
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoTestOrientationVoileScreenSlideTransitionEastImpl);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800a746:	4b10      	ldr	r3, [pc, #64]	; (800a788 <_ZN23FrontendApplicationBase49gotoTestOrientationVoileScreenSlideTransitionEastEv+0x50>)
 800a748:	61bb      	str	r3, [r7, #24]
 800a74a:	2300      	movs	r3, #0
 800a74c:	61fb      	str	r3, [r7, #28]
 800a74e:	f107 0008 	add.w	r0, r7, #8
 800a752:	f107 0318 	add.w	r3, r7, #24
 800a756:	cb0c      	ldmia	r3, {r2, r3}
 800a758:	6879      	ldr	r1, [r7, #4]
 800a75a:	f000 f931 	bl	800a9c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800a75e:	f107 0308 	add.w	r3, r7, #8
 800a762:	4619      	mov	r1, r3
 800a764:	4620      	mov	r0, r4
 800a766:	f7ff fe6d 	bl	800a444 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800a76a:	f107 0308 	add.w	r3, r7, #8
 800a76e:	4618      	mov	r0, r3
 800a770:	f001 fc08 	bl	800bf84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800a780:	bf00      	nop
 800a782:	3724      	adds	r7, #36	; 0x24
 800a784:	46bd      	mov	sp, r7
 800a786:	bd90      	pop	{r4, r7, pc}
 800a788:	0800a78d 	.word	0x0800a78d

0800a78c <_ZN23FrontendApplicationBase53gotoTestOrientationVoileScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoTestOrientationVoileScreenSlideTransitionEastImpl()
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af02      	add	r7, sp, #8
 800a792:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<TestOrientationVoileView, TestOrientationVoilePresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	4b04      	ldr	r3, [pc, #16]	; (800a7bc <_ZN23FrontendApplicationBase53gotoTestOrientationVoileScreenSlideTransitionEastImplEv+0x30>)
 800a7ac:	4804      	ldr	r0, [pc, #16]	; (800a7c0 <_ZN23FrontendApplicationBase53gotoTestOrientationVoileScreenSlideTransitionEastImplEv+0x34>)
 800a7ae:	f000 fcd1 	bl	800b154 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800a7b2:	bf00      	nop
 800a7b4:	3708      	adds	r7, #8
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	2000b354 	.word	0x2000b354
 800a7c0:	2000b350 	.word	0x2000b350

0800a7c4 <_ZN23FrontendApplicationBase36gotoTestADCScreenSlideTransitionEastEv>:

// TestADC

void FrontendApplicationBase::gotoTestADCScreenSlideTransitionEast()
{
 800a7c4:	b590      	push	{r4, r7, lr}
 800a7c6:	b089      	sub	sp, #36	; 0x24
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoTestADCScreenSlideTransitionEastImpl);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800a7d2:	4b10      	ldr	r3, [pc, #64]	; (800a814 <_ZN23FrontendApplicationBase36gotoTestADCScreenSlideTransitionEastEv+0x50>)
 800a7d4:	61bb      	str	r3, [r7, #24]
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	61fb      	str	r3, [r7, #28]
 800a7da:	f107 0008 	add.w	r0, r7, #8
 800a7de:	f107 0318 	add.w	r3, r7, #24
 800a7e2:	cb0c      	ldmia	r3, {r2, r3}
 800a7e4:	6879      	ldr	r1, [r7, #4]
 800a7e6:	f000 f8eb 	bl	800a9c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800a7ea:	f107 0308 	add.w	r3, r7, #8
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f7ff fe27 	bl	800a444 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800a7f6:	f107 0308 	add.w	r3, r7, #8
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f001 fbc2 	bl	800bf84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800a80c:	bf00      	nop
 800a80e:	3724      	adds	r7, #36	; 0x24
 800a810:	46bd      	mov	sp, r7
 800a812:	bd90      	pop	{r4, r7, pc}
 800a814:	0800a819 	.word	0x0800a819

0800a818 <_ZN23FrontendApplicationBase40gotoTestADCScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoTestADCScreenSlideTransitionEastImpl()
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af02      	add	r7, sp, #8
 800a81e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<TestADCView, TestADCPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800a82c:	461a      	mov	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	4b04      	ldr	r3, [pc, #16]	; (800a848 <_ZN23FrontendApplicationBase40gotoTestADCScreenSlideTransitionEastImplEv+0x30>)
 800a838:	4804      	ldr	r0, [pc, #16]	; (800a84c <_ZN23FrontendApplicationBase40gotoTestADCScreenSlideTransitionEastImplEv+0x34>)
 800a83a:	f000 fd47 	bl	800b2cc <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800a83e:	bf00      	nop
 800a840:	3708      	adds	r7, #8
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	2000b354 	.word	0x2000b354
 800a84c:	2000b350 	.word	0x2000b350

0800a850 <_ZN23FrontendApplicationBase40gotoTestCompletScreenSlideTransitionEastEv>:

// TestComplet

void FrontendApplicationBase::gotoTestCompletScreenSlideTransitionEast()
{
 800a850:	b590      	push	{r4, r7, lr}
 800a852:	b089      	sub	sp, #36	; 0x24
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoTestCompletScreenSlideTransitionEastImpl);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800a85e:	4b10      	ldr	r3, [pc, #64]	; (800a8a0 <_ZN23FrontendApplicationBase40gotoTestCompletScreenSlideTransitionEastEv+0x50>)
 800a860:	61bb      	str	r3, [r7, #24]
 800a862:	2300      	movs	r3, #0
 800a864:	61fb      	str	r3, [r7, #28]
 800a866:	f107 0008 	add.w	r0, r7, #8
 800a86a:	f107 0318 	add.w	r3, r7, #24
 800a86e:	cb0c      	ldmia	r3, {r2, r3}
 800a870:	6879      	ldr	r1, [r7, #4]
 800a872:	f000 f8a5 	bl	800a9c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800a876:	f107 0308 	add.w	r3, r7, #8
 800a87a:	4619      	mov	r1, r3
 800a87c:	4620      	mov	r0, r4
 800a87e:	f7ff fde1 	bl	800a444 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800a882:	f107 0308 	add.w	r3, r7, #8
 800a886:	4618      	mov	r0, r3
 800a888:	f001 fb7c 	bl	800bf84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800a898:	bf00      	nop
 800a89a:	3724      	adds	r7, #36	; 0x24
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd90      	pop	{r4, r7, pc}
 800a8a0:	0800a8a5 	.word	0x0800a8a5

0800a8a4 <_ZN23FrontendApplicationBase44gotoTestCompletScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoTestCompletScreenSlideTransitionEastImpl()
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af02      	add	r7, sp, #8
 800a8aa:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<TestCompletView, TestCompletPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a8c0:	9300      	str	r3, [sp, #0]
 800a8c2:	4b04      	ldr	r3, [pc, #16]	; (800a8d4 <_ZN23FrontendApplicationBase44gotoTestCompletScreenSlideTransitionEastImplEv+0x30>)
 800a8c4:	4804      	ldr	r0, [pc, #16]	; (800a8d8 <_ZN23FrontendApplicationBase44gotoTestCompletScreenSlideTransitionEastImplEv+0x34>)
 800a8c6:	f000 fdbd 	bl	800b444 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800a8ca:	bf00      	nop
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	2000b354 	.word	0x2000b354
 800a8d8:	2000b350 	.word	0x2000b350

0800a8dc <_ZN23FrontendApplicationBase42gotoTestGirouetteScreenSlideTransitionEastEv>:

// TestGirouette

void FrontendApplicationBase::gotoTestGirouetteScreenSlideTransitionEast()
{
 800a8dc:	b590      	push	{r4, r7, lr}
 800a8de:	b089      	sub	sp, #36	; 0x24
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoTestGirouetteScreenSlideTransitionEastImpl);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800a8ea:	4b10      	ldr	r3, [pc, #64]	; (800a92c <_ZN23FrontendApplicationBase42gotoTestGirouetteScreenSlideTransitionEastEv+0x50>)
 800a8ec:	61bb      	str	r3, [r7, #24]
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	61fb      	str	r3, [r7, #28]
 800a8f2:	f107 0008 	add.w	r0, r7, #8
 800a8f6:	f107 0318 	add.w	r3, r7, #24
 800a8fa:	cb0c      	ldmia	r3, {r2, r3}
 800a8fc:	6879      	ldr	r1, [r7, #4]
 800a8fe:	f000 f85f 	bl	800a9c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800a902:	f107 0308 	add.w	r3, r7, #8
 800a906:	4619      	mov	r1, r3
 800a908:	4620      	mov	r0, r4
 800a90a:	f7ff fd9b 	bl	800a444 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800a90e:	f107 0308 	add.w	r3, r7, #8
 800a912:	4618      	mov	r0, r3
 800a914:	f001 fb36 	bl	800bf84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800a924:	bf00      	nop
 800a926:	3724      	adds	r7, #36	; 0x24
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd90      	pop	{r4, r7, pc}
 800a92c:	0800a931 	.word	0x0800a931

0800a930 <_ZN23FrontendApplicationBase46gotoTestGirouetteScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoTestGirouetteScreenSlideTransitionEastImpl()
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af02      	add	r7, sp, #8
 800a936:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<TestGirouetteView, TestGirouettePresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800a944:	461a      	mov	r2, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800a94c:	9300      	str	r3, [sp, #0]
 800a94e:	4b04      	ldr	r3, [pc, #16]	; (800a960 <_ZN23FrontendApplicationBase46gotoTestGirouetteScreenSlideTransitionEastImplEv+0x30>)
 800a950:	4804      	ldr	r0, [pc, #16]	; (800a964 <_ZN23FrontendApplicationBase46gotoTestGirouetteScreenSlideTransitionEastImplEv+0x34>)
 800a952:	f000 fe31 	bl	800b5b8 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800a956:	bf00      	nop
 800a958:	3708      	adds	r7, #8
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	2000b354 	.word	0x2000b354
 800a964:	2000b350 	.word	0x2000b350

0800a968 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	4a04      	ldr	r2, [pc, #16]	; (800a984 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	601a      	str	r2, [r3, #0]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4618      	mov	r0, r3
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr
 800a984:	08026bd8 	.word	0x08026bd8

0800a988 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	4618      	mov	r0, r3
 800a994:	f7ff ffe8 	bl	800a968 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800a998:	4a08      	ldr	r2, [pc, #32]	; (800a9bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	601a      	str	r2, [r3, #0]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	605a      	str	r2, [r3, #4]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	609a      	str	r2, [r3, #8]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	60da      	str	r2, [r3, #12]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3708      	adds	r7, #8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	08026b84 	.word	0x08026b84

0800a9c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	4639      	mov	r1, r7
 800a9cc:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7ff ffc8 	bl	800a968 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800a9d8:	4a08      	ldr	r2, [pc, #32]	; (800a9fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	68ba      	ldr	r2, [r7, #8]
 800a9e2:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	3308      	adds	r3, #8
 800a9e8:	463a      	mov	r2, r7
 800a9ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a9ee:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3710      	adds	r7, #16
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	08026b84 	.word	0x08026b84

0800aa00 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800aa00:	b590      	push	{r4, r7, lr}
 800aa02:	b089      	sub	sp, #36	; 0x24
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	60b9      	str	r1, [r7, #8]
 800aa0a:	607a      	str	r2, [r7, #4]
 800aa0c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	689a      	ldr	r2, [r3, #8]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	3320      	adds	r3, #32
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4610      	mov	r0, r2
 800aa1e:	4798      	blx	r3
 800aa20:	4603      	mov	r3, r0
 800aa22:	f5b3 6fcf 	cmp.w	r3, #1656	; 0x678
 800aa26:	d205      	bcs.n	800aa34 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800aa28:	4b4d      	ldr	r3, [pc, #308]	; (800ab60 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 800aa2a:	4a4e      	ldr	r2, [pc, #312]	; (800ab64 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800aa2c:	21c2      	movs	r1, #194	; 0xc2
 800aa2e:	484e      	ldr	r0, [pc, #312]	; (800ab68 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800aa30:	f01a f912 	bl	8024c58 <__assert_func>
 800aa34:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	685a      	ldr	r2, [r3, #4]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	3320      	adds	r3, #32
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4610      	mov	r0, r2
 800aa46:	4798      	blx	r3
 800aa48:	4603      	mov	r3, r0
 800aa4a:	2b0f      	cmp	r3, #15
 800aa4c:	d805      	bhi.n	800aa5a <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800aa4e:	4b47      	ldr	r3, [pc, #284]	; (800ab6c <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800aa50:	4a44      	ldr	r2, [pc, #272]	; (800ab64 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800aa52:	21c3      	movs	r1, #195	; 0xc3
 800aa54:	4844      	ldr	r0, [pc, #272]	; (800ab68 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800aa56:	f01a f8ff 	bl	8024c58 <__assert_func>
 800aa5a:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	68da      	ldr	r2, [r3, #12]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	3320      	adds	r3, #32
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4610      	mov	r0, r2
 800aa6c:	4798      	blx	r3
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b0b      	cmp	r3, #11
 800aa72:	d805      	bhi.n	800aa80 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800aa74:	4b3e      	ldr	r3, [pc, #248]	; (800ab70 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800aa76:	4a3b      	ldr	r2, [pc, #236]	; (800ab64 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800aa78:	21c4      	movs	r1, #196	; 0xc4
 800aa7a:	483b      	ldr	r0, [pc, #236]	; (800ab68 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800aa7c:	f01a f8ec 	bl	8024c58 <__assert_func>
 800aa80:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800aa82:	683a      	ldr	r2, [r7, #0]
 800aa84:	68b9      	ldr	r1, [r7, #8]
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	f7ff fb91 	bl	800a1ae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	2100      	movs	r1, #0
 800aa92:	4618      	mov	r0, r3
 800aa94:	f000 fe4c 	bl	800b730 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	200c      	movs	r0, #12
 800aa9e:	f7ff f979 	bl	8009d94 <_ZnwjPv>
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	2c00      	cmp	r4, #0
 800aaa6:	d004      	beq.n	800aab2 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f7ff fc3b 	bl	800a324 <_ZN8touchgfx12NoTransitionC1Ev>
 800aaae:	4623      	mov	r3, r4
 800aab0:	e000      	b.n	800aab4 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800aab2:	4623      	mov	r3, r4
 800aab4:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	2100      	movs	r1, #0
 800aabc:	4618      	mov	r0, r3
 800aabe:	f000 fe4a 	bl	800b756 <_ZN8touchgfx17AbstractPartition2atI8MenuViewEERT_t>
 800aac2:	4603      	mov	r3, r0
 800aac4:	4619      	mov	r1, r3
 800aac6:	f44f 60cf 	mov.w	r0, #1656	; 0x678
 800aaca:	f7ff f963 	bl	8009d94 <_ZnwjPv>
 800aace:	4604      	mov	r4, r0
 800aad0:	2c00      	cmp	r4, #0
 800aad2:	d004      	beq.n	800aade <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 800aad4:	4620      	mov	r0, r4
 800aad6:	f006 fd33 	bl	8011540 <_ZN8MenuViewC1Ev>
 800aada:	4623      	mov	r3, r4
 800aadc:	e000      	b.n	800aae0 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 800aade:	4623      	mov	r3, r4
 800aae0:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	2100      	movs	r1, #0
 800aae8:	4618      	mov	r0, r3
 800aaea:	f000 fe47 	bl	800b77c <_ZN8touchgfx17AbstractPartition2atI13MenuPresenterEERT_t>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	2010      	movs	r0, #16
 800aaf4:	f7ff f94e 	bl	8009d94 <_ZnwjPv>
 800aaf8:	4604      	mov	r4, r0
 800aafa:	2c00      	cmp	r4, #0
 800aafc:	d005      	beq.n	800ab0a <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 800aafe:	69b9      	ldr	r1, [r7, #24]
 800ab00:	4620      	mov	r0, r4
 800ab02:	f006 fbf7 	bl	80112f4 <_ZN13MenuPresenterC1ER8MenuView>
 800ab06:	4623      	mov	r3, r4
 800ab08:	e000      	b.n	800ab0c <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 800ab0a:	4623      	mov	r3, r4
 800ab0c:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	69fa      	ldr	r2, [r7, #28]
 800ab12:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	697a      	ldr	r2, [r7, #20]
 800ab18:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	69ba      	ldr	r2, [r7, #24]
 800ab1e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d002      	beq.n	800ab2c <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	3304      	adds	r3, #4
 800ab2a:	e000      	b.n	800ab2e <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	4619      	mov	r1, r3
 800ab30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab32:	f7ff fbbf 	bl	800a2b4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	3304      	adds	r3, #4
 800ab3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7ff fc32 	bl	800a3a6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800ab42:	69bb      	ldr	r3, [r7, #24]
 800ab44:	6979      	ldr	r1, [r7, #20]
 800ab46:	4618      	mov	r0, r3
 800ab48:	f000 fe2b 	bl	800b7a2 <_ZN8touchgfx4ViewI13MenuPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800ab4c:	69fa      	ldr	r2, [r7, #28]
 800ab4e:	6979      	ldr	r1, [r7, #20]
 800ab50:	69b8      	ldr	r0, [r7, #24]
 800ab52:	f7ff fb88 	bl	800a266 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 800ab56:	697b      	ldr	r3, [r7, #20]
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3724      	adds	r7, #36	; 0x24
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd90      	pop	{r4, r7, pc}
 800ab60:	08025d84 	.word	0x08025d84
 800ab64:	08026c30 	.word	0x08026c30
 800ab68:	08025e14 	.word	0x08025e14
 800ab6c:	08025e58 	.word	0x08025e58
 800ab70:	08025efc 	.word	0x08025efc

0800ab74 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ab74:	b590      	push	{r4, r7, lr}
 800ab76:	b089      	sub	sp, #36	; 0x24
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	607a      	str	r2, [r7, #4]
 800ab80:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	689a      	ldr	r2, [r3, #8]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	689b      	ldr	r3, [r3, #8]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	3320      	adds	r3, #32
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4610      	mov	r0, r2
 800ab92:	4798      	blx	r3
 800ab94:	4603      	mov	r3, r0
 800ab96:	f5b3 6fcf 	cmp.w	r3, #1656	; 0x678
 800ab9a:	d205      	bcs.n	800aba8 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800ab9c:	4b4e      	ldr	r3, [pc, #312]	; (800acd8 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800ab9e:	4a4f      	ldr	r2, [pc, #316]	; (800acdc <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800aba0:	21c2      	movs	r1, #194	; 0xc2
 800aba2:	484f      	ldr	r0, [pc, #316]	; (800ace0 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800aba4:	f01a f858 	bl	8024c58 <__assert_func>
 800aba8:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	685a      	ldr	r2, [r3, #4]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	3320      	adds	r3, #32
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4610      	mov	r0, r2
 800abba:	4798      	blx	r3
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b0f      	cmp	r3, #15
 800abc0:	d805      	bhi.n	800abce <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800abc2:	4b48      	ldr	r3, [pc, #288]	; (800ace4 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800abc4:	4a45      	ldr	r2, [pc, #276]	; (800acdc <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800abc6:	21c3      	movs	r1, #195	; 0xc3
 800abc8:	4845      	ldr	r0, [pc, #276]	; (800ace0 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800abca:	f01a f845 	bl	8024c58 <__assert_func>
 800abce:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	68da      	ldr	r2, [r3, #12]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	3320      	adds	r3, #32
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4610      	mov	r0, r2
 800abe0:	4798      	blx	r3
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b53      	cmp	r3, #83	; 0x53
 800abe6:	d805      	bhi.n	800abf4 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800abe8:	4b3f      	ldr	r3, [pc, #252]	; (800ace8 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 800abea:	4a3c      	ldr	r2, [pc, #240]	; (800acdc <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800abec:	21c4      	movs	r1, #196	; 0xc4
 800abee:	483c      	ldr	r0, [pc, #240]	; (800ace0 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800abf0:	f01a f832 	bl	8024c58 <__assert_func>
 800abf4:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800abf6:	683a      	ldr	r2, [r7, #0]
 800abf8:	68b9      	ldr	r1, [r7, #8]
 800abfa:	68f8      	ldr	r0, [r7, #12]
 800abfc:	f7ff fad7 	bl	800a1ae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	68db      	ldr	r3, [r3, #12]
 800ac04:	2100      	movs	r1, #0
 800ac06:	4618      	mov	r0, r3
 800ac08:	f000 fdd9 	bl	800b7be <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	4619      	mov	r1, r3
 800ac10:	2054      	movs	r0, #84	; 0x54
 800ac12:	f7ff f8bf 	bl	8009d94 <_ZnwjPv>
 800ac16:	4604      	mov	r4, r0
 800ac18:	2c00      	cmp	r4, #0
 800ac1a:	d005      	beq.n	800ac28 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800ac1c:	2114      	movs	r1, #20
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f000 fe02 	bl	800b828 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>
 800ac24:	4623      	mov	r3, r4
 800ac26:	e000      	b.n	800ac2a <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 800ac28:	4623      	mov	r3, r4
 800ac2a:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	2100      	movs	r1, #0
 800ac32:	4618      	mov	r0, r3
 800ac34:	f000 fd8f 	bl	800b756 <_ZN8touchgfx17AbstractPartition2atI8MenuViewEERT_t>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	f44f 60cf 	mov.w	r0, #1656	; 0x678
 800ac40:	f7ff f8a8 	bl	8009d94 <_ZnwjPv>
 800ac44:	4604      	mov	r4, r0
 800ac46:	2c00      	cmp	r4, #0
 800ac48:	d004      	beq.n	800ac54 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f006 fc78 	bl	8011540 <_ZN8MenuViewC1Ev>
 800ac50:	4623      	mov	r3, r4
 800ac52:	e000      	b.n	800ac56 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 800ac54:	4623      	mov	r3, r4
 800ac56:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	2100      	movs	r1, #0
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f000 fd8c 	bl	800b77c <_ZN8touchgfx17AbstractPartition2atI13MenuPresenterEERT_t>
 800ac64:	4603      	mov	r3, r0
 800ac66:	4619      	mov	r1, r3
 800ac68:	2010      	movs	r0, #16
 800ac6a:	f7ff f893 	bl	8009d94 <_ZnwjPv>
 800ac6e:	4604      	mov	r4, r0
 800ac70:	2c00      	cmp	r4, #0
 800ac72:	d005      	beq.n	800ac80 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 800ac74:	69b9      	ldr	r1, [r7, #24]
 800ac76:	4620      	mov	r0, r4
 800ac78:	f006 fb3c 	bl	80112f4 <_ZN13MenuPresenterC1ER8MenuView>
 800ac7c:	4623      	mov	r3, r4
 800ac7e:	e000      	b.n	800ac82 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 800ac80:	4623      	mov	r3, r4
 800ac82:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	69fa      	ldr	r2, [r7, #28]
 800ac88:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	697a      	ldr	r2, [r7, #20]
 800ac8e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	69ba      	ldr	r2, [r7, #24]
 800ac94:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d002      	beq.n	800aca2 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	3304      	adds	r3, #4
 800aca0:	e000      	b.n	800aca4 <_ZN8touchgfx14makeTransitionI8MenuView13MenuPresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 800aca2:	2300      	movs	r3, #0
 800aca4:	4619      	mov	r1, r3
 800aca6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aca8:	f7ff fb04 	bl	800a2b4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	3304      	adds	r3, #4
 800acb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7ff fb77 	bl	800a3a6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	6979      	ldr	r1, [r7, #20]
 800acbc:	4618      	mov	r0, r3
 800acbe:	f000 fd70 	bl	800b7a2 <_ZN8touchgfx4ViewI13MenuPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800acc2:	69fa      	ldr	r2, [r7, #28]
 800acc4:	6979      	ldr	r1, [r7, #20]
 800acc6:	69b8      	ldr	r0, [r7, #24]
 800acc8:	f7ff facd 	bl	800a266 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 800accc:	697b      	ldr	r3, [r7, #20]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3724      	adds	r7, #36	; 0x24
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd90      	pop	{r4, r7, pc}
 800acd6:	bf00      	nop
 800acd8:	08025d84 	.word	0x08025d84
 800acdc:	08026d30 	.word	0x08026d30
 800ace0:	08025e14 	.word	0x08025e14
 800ace4:	08025e58 	.word	0x08025e58
 800ace8:	08025efc 	.word	0x08025efc

0800acec <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800acec:	b590      	push	{r4, r7, lr}
 800acee:	b089      	sub	sp, #36	; 0x24
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
 800acf8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	689a      	ldr	r2, [r3, #8]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	3320      	adds	r3, #32
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4610      	mov	r0, r2
 800ad0a:	4798      	blx	r3
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	f641 7353 	movw	r3, #8019	; 0x1f53
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d805      	bhi.n	800ad22 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800ad16:	4b4e      	ldr	r3, [pc, #312]	; (800ae50 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800ad18:	4a4e      	ldr	r2, [pc, #312]	; (800ae54 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800ad1a:	21c2      	movs	r1, #194	; 0xc2
 800ad1c:	484e      	ldr	r0, [pc, #312]	; (800ae58 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800ad1e:	f019 ff9b 	bl	8024c58 <__assert_func>
 800ad22:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	685a      	ldr	r2, [r3, #4]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	3320      	adds	r3, #32
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4610      	mov	r0, r2
 800ad34:	4798      	blx	r3
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b0f      	cmp	r3, #15
 800ad3a:	d805      	bhi.n	800ad48 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800ad3c:	4b47      	ldr	r3, [pc, #284]	; (800ae5c <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800ad3e:	4a45      	ldr	r2, [pc, #276]	; (800ae54 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800ad40:	21c3      	movs	r1, #195	; 0xc3
 800ad42:	4845      	ldr	r0, [pc, #276]	; (800ae58 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800ad44:	f019 ff88 	bl	8024c58 <__assert_func>
 800ad48:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	68da      	ldr	r2, [r3, #12]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	68db      	ldr	r3, [r3, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	3320      	adds	r3, #32
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4610      	mov	r0, r2
 800ad5a:	4798      	blx	r3
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	2b53      	cmp	r3, #83	; 0x53
 800ad60:	d805      	bhi.n	800ad6e <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800ad62:	4b3f      	ldr	r3, [pc, #252]	; (800ae60 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 800ad64:	4a3b      	ldr	r2, [pc, #236]	; (800ae54 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800ad66:	21c4      	movs	r1, #196	; 0xc4
 800ad68:	483b      	ldr	r0, [pc, #236]	; (800ae58 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800ad6a:	f019 ff75 	bl	8024c58 <__assert_func>
 800ad6e:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800ad70:	683a      	ldr	r2, [r7, #0]
 800ad72:	68b9      	ldr	r1, [r7, #8]
 800ad74:	68f8      	ldr	r0, [r7, #12]
 800ad76:	f7ff fa1a 	bl	800a1ae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	68db      	ldr	r3, [r3, #12]
 800ad7e:	2100      	movs	r1, #0
 800ad80:	4618      	mov	r0, r3
 800ad82:	f000 fde5 	bl	800b950 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800ad86:	4603      	mov	r3, r0
 800ad88:	4619      	mov	r1, r3
 800ad8a:	2054      	movs	r0, #84	; 0x54
 800ad8c:	f7ff f802 	bl	8009d94 <_ZnwjPv>
 800ad90:	4604      	mov	r4, r0
 800ad92:	2c00      	cmp	r4, #0
 800ad94:	d005      	beq.n	800ada2 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 800ad96:	2114      	movs	r1, #20
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f000 fe0f 	bl	800b9bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800ad9e:	4623      	mov	r3, r4
 800ada0:	e000      	b.n	800ada4 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb8>
 800ada2:	4623      	mov	r3, r4
 800ada4:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	2100      	movs	r1, #0
 800adac:	4618      	mov	r0, r3
 800adae:	f000 fe99 	bl	800bae4 <_ZN8touchgfx17AbstractPartition2atI23TestRotationPlateauViewEERT_t>
 800adb2:	4603      	mov	r3, r0
 800adb4:	4619      	mov	r1, r3
 800adb6:	f641 7054 	movw	r0, #8020	; 0x1f54
 800adba:	f7fe ffeb 	bl	8009d94 <_ZnwjPv>
 800adbe:	4604      	mov	r4, r0
 800adc0:	2c00      	cmp	r4, #0
 800adc2:	d004      	beq.n	800adce <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 800adc4:	4620      	mov	r0, r4
 800adc6:	f007 f87b 	bl	8011ec0 <_ZN23TestRotationPlateauViewC1Ev>
 800adca:	4623      	mov	r3, r4
 800adcc:	e000      	b.n	800add0 <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
 800adce:	4623      	mov	r3, r4
 800add0:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	2100      	movs	r1, #0
 800add8:	4618      	mov	r0, r3
 800adda:	f000 fe96 	bl	800bb0a <_ZN8touchgfx17AbstractPartition2atI28TestRotationPlateauPresenterEERT_t>
 800adde:	4603      	mov	r3, r0
 800ade0:	4619      	mov	r1, r3
 800ade2:	2010      	movs	r0, #16
 800ade4:	f7fe ffd6 	bl	8009d94 <_ZnwjPv>
 800ade8:	4604      	mov	r4, r0
 800adea:	2c00      	cmp	r4, #0
 800adec:	d005      	beq.n	800adfa <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 800adee:	69b9      	ldr	r1, [r7, #24]
 800adf0:	4620      	mov	r0, r4
 800adf2:	f007 f80d 	bl	8011e10 <_ZN28TestRotationPlateauPresenterC1ER23TestRotationPlateauView>
 800adf6:	4623      	mov	r3, r4
 800adf8:	e000      	b.n	800adfc <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
 800adfa:	4623      	mov	r3, r4
 800adfc:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	69fa      	ldr	r2, [r7, #28]
 800ae02:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	697a      	ldr	r2, [r7, #20]
 800ae08:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	69ba      	ldr	r2, [r7, #24]
 800ae0e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d002      	beq.n	800ae1c <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	3304      	adds	r3, #4
 800ae1a:	e000      	b.n	800ae1e <_ZN8touchgfx14makeTransitionI23TestRotationPlateauView28TestRotationPlateauPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	4619      	mov	r1, r3
 800ae20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae22:	f7ff fa47 	bl	800a2b4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	3304      	adds	r3, #4
 800ae2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f7ff faba 	bl	800a3a6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800ae32:	69bb      	ldr	r3, [r7, #24]
 800ae34:	6979      	ldr	r1, [r7, #20]
 800ae36:	4618      	mov	r0, r3
 800ae38:	f000 fe7a 	bl	800bb30 <_ZN8touchgfx4ViewI28TestRotationPlateauPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800ae3c:	69fa      	ldr	r2, [r7, #28]
 800ae3e:	6979      	ldr	r1, [r7, #20]
 800ae40:	69b8      	ldr	r0, [r7, #24]
 800ae42:	f7ff fa10 	bl	800a266 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 800ae46:	697b      	ldr	r3, [r7, #20]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3724      	adds	r7, #36	; 0x24
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd90      	pop	{r4, r7, pc}
 800ae50:	08025d84 	.word	0x08025d84
 800ae54:	08026e4c 	.word	0x08026e4c
 800ae58:	08025e14 	.word	0x08025e14
 800ae5c:	08025e58 	.word	0x08025e58
 800ae60:	08025efc 	.word	0x08025efc

0800ae64 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ae64:	b590      	push	{r4, r7, lr}
 800ae66:	b089      	sub	sp, #36	; 0x24
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	607a      	str	r2, [r7, #4]
 800ae70:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	689a      	ldr	r2, [r3, #8]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	3320      	adds	r3, #32
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4610      	mov	r0, r2
 800ae82:	4798      	blx	r3
 800ae84:	4603      	mov	r3, r0
 800ae86:	f5b3 6f51 	cmp.w	r3, #3344	; 0xd10
 800ae8a:	d205      	bcs.n	800ae98 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800ae8c:	4b4e      	ldr	r3, [pc, #312]	; (800afc8 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800ae8e:	4a4f      	ldr	r2, [pc, #316]	; (800afcc <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800ae90:	21c2      	movs	r1, #194	; 0xc2
 800ae92:	484f      	ldr	r0, [pc, #316]	; (800afd0 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800ae94:	f019 fee0 	bl	8024c58 <__assert_func>
 800ae98:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	685a      	ldr	r2, [r3, #4]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	3320      	adds	r3, #32
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4610      	mov	r0, r2
 800aeaa:	4798      	blx	r3
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b0f      	cmp	r3, #15
 800aeb0:	d805      	bhi.n	800aebe <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800aeb2:	4b48      	ldr	r3, [pc, #288]	; (800afd4 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800aeb4:	4a45      	ldr	r2, [pc, #276]	; (800afcc <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800aeb6:	21c3      	movs	r1, #195	; 0xc3
 800aeb8:	4845      	ldr	r0, [pc, #276]	; (800afd0 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800aeba:	f019 fecd 	bl	8024c58 <__assert_func>
 800aebe:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	68da      	ldr	r2, [r3, #12]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	3320      	adds	r3, #32
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4610      	mov	r0, r2
 800aed0:	4798      	blx	r3
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b53      	cmp	r3, #83	; 0x53
 800aed6:	d805      	bhi.n	800aee4 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800aed8:	4b3f      	ldr	r3, [pc, #252]	; (800afd8 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 800aeda:	4a3c      	ldr	r2, [pc, #240]	; (800afcc <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800aedc:	21c4      	movs	r1, #196	; 0xc4
 800aede:	483c      	ldr	r0, [pc, #240]	; (800afd0 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800aee0:	f019 feba 	bl	8024c58 <__assert_func>
 800aee4:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800aee6:	683a      	ldr	r2, [r7, #0]
 800aee8:	68b9      	ldr	r1, [r7, #8]
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f7ff f95f 	bl	800a1ae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	2100      	movs	r1, #0
 800aef6:	4618      	mov	r0, r3
 800aef8:	f000 fd2a 	bl	800b950 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800aefc:	4603      	mov	r3, r0
 800aefe:	4619      	mov	r1, r3
 800af00:	2054      	movs	r0, #84	; 0x54
 800af02:	f7fe ff47 	bl	8009d94 <_ZnwjPv>
 800af06:	4604      	mov	r4, r0
 800af08:	2c00      	cmp	r4, #0
 800af0a:	d005      	beq.n	800af18 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800af0c:	2114      	movs	r1, #20
 800af0e:	4620      	mov	r0, r4
 800af10:	f000 fd54 	bl	800b9bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800af14:	4623      	mov	r3, r4
 800af16:	e000      	b.n	800af1a <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 800af18:	4623      	mov	r3, r4
 800af1a:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	2100      	movs	r1, #0
 800af22:	4618      	mov	r0, r3
 800af24:	f000 fe12 	bl	800bb4c <_ZN8touchgfx17AbstractPartition2atI12TestUartViewEERT_t>
 800af28:	4603      	mov	r3, r0
 800af2a:	4619      	mov	r1, r3
 800af2c:	f44f 6051 	mov.w	r0, #3344	; 0xd10
 800af30:	f7fe ff30 	bl	8009d94 <_ZnwjPv>
 800af34:	4604      	mov	r4, r0
 800af36:	2c00      	cmp	r4, #0
 800af38:	d004      	beq.n	800af44 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 800af3a:	4620      	mov	r0, r4
 800af3c:	f007 f876 	bl	801202c <_ZN12TestUartViewC1Ev>
 800af40:	4623      	mov	r3, r4
 800af42:	e000      	b.n	800af46 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 800af44:	4623      	mov	r3, r4
 800af46:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	2100      	movs	r1, #0
 800af4e:	4618      	mov	r0, r3
 800af50:	f000 fe0f 	bl	800bb72 <_ZN8touchgfx17AbstractPartition2atI17TestUartPresenterEERT_t>
 800af54:	4603      	mov	r3, r0
 800af56:	4619      	mov	r1, r3
 800af58:	2010      	movs	r0, #16
 800af5a:	f7fe ff1b 	bl	8009d94 <_ZnwjPv>
 800af5e:	4604      	mov	r4, r0
 800af60:	2c00      	cmp	r4, #0
 800af62:	d005      	beq.n	800af70 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 800af64:	69b9      	ldr	r1, [r7, #24]
 800af66:	4620      	mov	r0, r4
 800af68:	f007 f808 	bl	8011f7c <_ZN17TestUartPresenterC1ER12TestUartView>
 800af6c:	4623      	mov	r3, r4
 800af6e:	e000      	b.n	800af72 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 800af70:	4623      	mov	r3, r4
 800af72:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	69fa      	ldr	r2, [r7, #28]
 800af78:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	697a      	ldr	r2, [r7, #20]
 800af7e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	69ba      	ldr	r2, [r7, #24]
 800af84:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d002      	beq.n	800af92 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	3304      	adds	r3, #4
 800af90:	e000      	b.n	800af94 <_ZN8touchgfx14makeTransitionI12TestUartView17TestUartPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 800af92:	2300      	movs	r3, #0
 800af94:	4619      	mov	r1, r3
 800af96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af98:	f7ff f98c 	bl	800a2b4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	3304      	adds	r3, #4
 800afa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7ff f9ff 	bl	800a3a6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800afa8:	69bb      	ldr	r3, [r7, #24]
 800afaa:	6979      	ldr	r1, [r7, #20]
 800afac:	4618      	mov	r0, r3
 800afae:	f000 fdf3 	bl	800bb98 <_ZN8touchgfx4ViewI17TestUartPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800afb2:	69fa      	ldr	r2, [r7, #28]
 800afb4:	6979      	ldr	r1, [r7, #20]
 800afb6:	69b8      	ldr	r0, [r7, #24]
 800afb8:	f7ff f955 	bl	800a266 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 800afbc:	697b      	ldr	r3, [r7, #20]
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3724      	adds	r7, #36	; 0x24
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd90      	pop	{r4, r7, pc}
 800afc6:	bf00      	nop
 800afc8:	08025d84 	.word	0x08025d84
 800afcc:	08026f84 	.word	0x08026f84
 800afd0:	08025e14 	.word	0x08025e14
 800afd4:	08025e58 	.word	0x08025e58
 800afd8:	08025efc 	.word	0x08025efc

0800afdc <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800afdc:	b590      	push	{r4, r7, lr}
 800afde:	b089      	sub	sp, #36	; 0x24
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	60b9      	str	r1, [r7, #8]
 800afe6:	607a      	str	r2, [r7, #4]
 800afe8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	689a      	ldr	r2, [r3, #8]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	689b      	ldr	r3, [r3, #8]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	3320      	adds	r3, #32
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4610      	mov	r0, r2
 800affa:	4798      	blx	r3
 800affc:	4603      	mov	r3, r0
 800affe:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800b002:	d205      	bcs.n	800b010 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800b004:	4b4e      	ldr	r3, [pc, #312]	; (800b140 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800b006:	4a4f      	ldr	r2, [pc, #316]	; (800b144 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b008:	21c2      	movs	r1, #194	; 0xc2
 800b00a:	484f      	ldr	r0, [pc, #316]	; (800b148 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800b00c:	f019 fe24 	bl	8024c58 <__assert_func>
 800b010:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	685a      	ldr	r2, [r3, #4]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	3320      	adds	r3, #32
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4610      	mov	r0, r2
 800b022:	4798      	blx	r3
 800b024:	4603      	mov	r3, r0
 800b026:	2b0f      	cmp	r3, #15
 800b028:	d805      	bhi.n	800b036 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800b02a:	4b48      	ldr	r3, [pc, #288]	; (800b14c <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800b02c:	4a45      	ldr	r2, [pc, #276]	; (800b144 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b02e:	21c3      	movs	r1, #195	; 0xc3
 800b030:	4845      	ldr	r0, [pc, #276]	; (800b148 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800b032:	f019 fe11 	bl	8024c58 <__assert_func>
 800b036:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	68da      	ldr	r2, [r3, #12]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	3320      	adds	r3, #32
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4610      	mov	r0, r2
 800b048:	4798      	blx	r3
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b53      	cmp	r3, #83	; 0x53
 800b04e:	d805      	bhi.n	800b05c <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800b050:	4b3f      	ldr	r3, [pc, #252]	; (800b150 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 800b052:	4a3c      	ldr	r2, [pc, #240]	; (800b144 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b054:	21c4      	movs	r1, #196	; 0xc4
 800b056:	483c      	ldr	r0, [pc, #240]	; (800b148 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800b058:	f019 fdfe 	bl	8024c58 <__assert_func>
 800b05c:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800b05e:	683a      	ldr	r2, [r7, #0]
 800b060:	68b9      	ldr	r1, [r7, #8]
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f7ff f8a3 	bl	800a1ae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	2100      	movs	r1, #0
 800b06e:	4618      	mov	r0, r3
 800b070:	f000 fc6e 	bl	800b950 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800b074:	4603      	mov	r3, r0
 800b076:	4619      	mov	r1, r3
 800b078:	2054      	movs	r0, #84	; 0x54
 800b07a:	f7fe fe8b 	bl	8009d94 <_ZnwjPv>
 800b07e:	4604      	mov	r4, r0
 800b080:	2c00      	cmp	r4, #0
 800b082:	d005      	beq.n	800b090 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800b084:	2114      	movs	r1, #20
 800b086:	4620      	mov	r0, r4
 800b088:	f000 fc98 	bl	800b9bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800b08c:	4623      	mov	r3, r4
 800b08e:	e000      	b.n	800b092 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 800b090:	4623      	mov	r3, r4
 800b092:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	2100      	movs	r1, #0
 800b09a:	4618      	mov	r0, r3
 800b09c:	f000 fd8a 	bl	800bbb4 <_ZN8touchgfx17AbstractPartition2atI14TestI2CSPIViewEERT_t>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	f44f 708c 	mov.w	r0, #280	; 0x118
 800b0a8:	f7fe fe74 	bl	8009d94 <_ZnwjPv>
 800b0ac:	4604      	mov	r4, r0
 800b0ae:	2c00      	cmp	r4, #0
 800b0b0:	d004      	beq.n	800b0bc <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f006 fd98 	bl	8011be8 <_ZN14TestI2CSPIViewC1Ev>
 800b0b8:	4623      	mov	r3, r4
 800b0ba:	e000      	b.n	800b0be <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 800b0bc:	4623      	mov	r3, r4
 800b0be:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f000 fd87 	bl	800bbda <_ZN8touchgfx17AbstractPartition2atI19TestI2CSPIPresenterEERT_t>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	2010      	movs	r0, #16
 800b0d2:	f7fe fe5f 	bl	8009d94 <_ZnwjPv>
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	2c00      	cmp	r4, #0
 800b0da:	d005      	beq.n	800b0e8 <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 800b0dc:	69b9      	ldr	r1, [r7, #24]
 800b0de:	4620      	mov	r0, r4
 800b0e0:	f006 fd2a 	bl	8011b38 <_ZN19TestI2CSPIPresenterC1ER14TestI2CSPIView>
 800b0e4:	4623      	mov	r3, r4
 800b0e6:	e000      	b.n	800b0ea <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 800b0e8:	4623      	mov	r3, r4
 800b0ea:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	69fa      	ldr	r2, [r7, #28]
 800b0f0:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	697a      	ldr	r2, [r7, #20]
 800b0f6:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	69ba      	ldr	r2, [r7, #24]
 800b0fc:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d002      	beq.n	800b10a <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	3304      	adds	r3, #4
 800b108:	e000      	b.n	800b10c <_ZN8touchgfx14makeTransitionI14TestI2CSPIView19TestI2CSPIPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 800b10a:	2300      	movs	r3, #0
 800b10c:	4619      	mov	r1, r3
 800b10e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b110:	f7ff f8d0 	bl	800a2b4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	3304      	adds	r3, #4
 800b118:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7ff f943 	bl	800a3a6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800b120:	69bb      	ldr	r3, [r7, #24]
 800b122:	6979      	ldr	r1, [r7, #20]
 800b124:	4618      	mov	r0, r3
 800b126:	f000 fd6b 	bl	800bc00 <_ZN8touchgfx4ViewI19TestI2CSPIPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800b12a:	69fa      	ldr	r2, [r7, #28]
 800b12c:	6979      	ldr	r1, [r7, #20]
 800b12e:	69b8      	ldr	r0, [r7, #24]
 800b130:	f7ff f899 	bl	800a266 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 800b134:	697b      	ldr	r3, [r7, #20]
}
 800b136:	4618      	mov	r0, r3
 800b138:	3724      	adds	r7, #36	; 0x24
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd90      	pop	{r4, r7, pc}
 800b13e:	bf00      	nop
 800b140:	08025d84 	.word	0x08025d84
 800b144:	080270a8 	.word	0x080270a8
 800b148:	08025e14 	.word	0x08025e14
 800b14c:	08025e58 	.word	0x08025e58
 800b150:	08025efc 	.word	0x08025efc

0800b154 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800b154:	b590      	push	{r4, r7, lr}
 800b156:	b089      	sub	sp, #36	; 0x24
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
 800b160:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	689a      	ldr	r2, [r3, #8]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	689b      	ldr	r3, [r3, #8]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	3320      	adds	r3, #32
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4610      	mov	r0, r2
 800b172:	4798      	blx	r3
 800b174:	4602      	mov	r2, r0
 800b176:	f242 0347 	movw	r3, #8263	; 0x2047
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d805      	bhi.n	800b18a <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800b17e:	4b4e      	ldr	r3, [pc, #312]	; (800b2b8 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800b180:	4a4e      	ldr	r2, [pc, #312]	; (800b2bc <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b182:	21c2      	movs	r1, #194	; 0xc2
 800b184:	484e      	ldr	r0, [pc, #312]	; (800b2c0 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800b186:	f019 fd67 	bl	8024c58 <__assert_func>
 800b18a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	685a      	ldr	r2, [r3, #4]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	3320      	adds	r3, #32
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4610      	mov	r0, r2
 800b19c:	4798      	blx	r3
 800b19e:	4603      	mov	r3, r0
 800b1a0:	2b0f      	cmp	r3, #15
 800b1a2:	d805      	bhi.n	800b1b0 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800b1a4:	4b47      	ldr	r3, [pc, #284]	; (800b2c4 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800b1a6:	4a45      	ldr	r2, [pc, #276]	; (800b2bc <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b1a8:	21c3      	movs	r1, #195	; 0xc3
 800b1aa:	4845      	ldr	r0, [pc, #276]	; (800b2c0 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800b1ac:	f019 fd54 	bl	8024c58 <__assert_func>
 800b1b0:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	68da      	ldr	r2, [r3, #12]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	3320      	adds	r3, #32
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4610      	mov	r0, r2
 800b1c2:	4798      	blx	r3
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b53      	cmp	r3, #83	; 0x53
 800b1c8:	d805      	bhi.n	800b1d6 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800b1ca:	4b3f      	ldr	r3, [pc, #252]	; (800b2c8 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 800b1cc:	4a3b      	ldr	r2, [pc, #236]	; (800b2bc <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b1ce:	21c4      	movs	r1, #196	; 0xc4
 800b1d0:	483b      	ldr	r0, [pc, #236]	; (800b2c0 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800b1d2:	f019 fd41 	bl	8024c58 <__assert_func>
 800b1d6:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800b1d8:	683a      	ldr	r2, [r7, #0]
 800b1da:	68b9      	ldr	r1, [r7, #8]
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	f7fe ffe6 	bl	800a1ae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	68db      	ldr	r3, [r3, #12]
 800b1e6:	2100      	movs	r1, #0
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f000 fbb1 	bl	800b950 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	2054      	movs	r0, #84	; 0x54
 800b1f4:	f7fe fdce 	bl	8009d94 <_ZnwjPv>
 800b1f8:	4604      	mov	r4, r0
 800b1fa:	2c00      	cmp	r4, #0
 800b1fc:	d005      	beq.n	800b20a <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 800b1fe:	2114      	movs	r1, #20
 800b200:	4620      	mov	r0, r4
 800b202:	f000 fbdb 	bl	800b9bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800b206:	4623      	mov	r3, r4
 800b208:	e000      	b.n	800b20c <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb8>
 800b20a:	4623      	mov	r3, r4
 800b20c:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	2100      	movs	r1, #0
 800b214:	4618      	mov	r0, r3
 800b216:	f000 fd01 	bl	800bc1c <_ZN8touchgfx17AbstractPartition2atI24TestOrientationVoileViewEERT_t>
 800b21a:	4603      	mov	r3, r0
 800b21c:	4619      	mov	r1, r3
 800b21e:	f242 0048 	movw	r0, #8264	; 0x2048
 800b222:	f7fe fdb7 	bl	8009d94 <_ZnwjPv>
 800b226:	4604      	mov	r4, r0
 800b228:	2c00      	cmp	r4, #0
 800b22a:	d004      	beq.n	800b236 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 800b22c:	4620      	mov	r0, r4
 800b22e:	f006 fd91 	bl	8011d54 <_ZN24TestOrientationVoileViewC1Ev>
 800b232:	4623      	mov	r3, r4
 800b234:	e000      	b.n	800b238 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
 800b236:	4623      	mov	r3, r4
 800b238:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	2100      	movs	r1, #0
 800b240:	4618      	mov	r0, r3
 800b242:	f000 fcfe 	bl	800bc42 <_ZN8touchgfx17AbstractPartition2atI29TestOrientationVoilePresenterEERT_t>
 800b246:	4603      	mov	r3, r0
 800b248:	4619      	mov	r1, r3
 800b24a:	2010      	movs	r0, #16
 800b24c:	f7fe fda2 	bl	8009d94 <_ZnwjPv>
 800b250:	4604      	mov	r4, r0
 800b252:	2c00      	cmp	r4, #0
 800b254:	d005      	beq.n	800b262 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 800b256:	69b9      	ldr	r1, [r7, #24]
 800b258:	4620      	mov	r0, r4
 800b25a:	f006 fd23 	bl	8011ca4 <_ZN29TestOrientationVoilePresenterC1ER24TestOrientationVoileView>
 800b25e:	4623      	mov	r3, r4
 800b260:	e000      	b.n	800b264 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
 800b262:	4623      	mov	r3, r4
 800b264:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	69fa      	ldr	r2, [r7, #28]
 800b26a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	697a      	ldr	r2, [r7, #20]
 800b270:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	69ba      	ldr	r2, [r7, #24]
 800b276:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d002      	beq.n	800b284 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	3304      	adds	r3, #4
 800b282:	e000      	b.n	800b286 <_ZN8touchgfx14makeTransitionI24TestOrientationVoileView29TestOrientationVoilePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
 800b284:	2300      	movs	r3, #0
 800b286:	4619      	mov	r1, r3
 800b288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b28a:	f7ff f813 	bl	800a2b4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	3304      	adds	r3, #4
 800b292:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b294:	4618      	mov	r0, r3
 800b296:	f7ff f886 	bl	800a3a6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800b29a:	69bb      	ldr	r3, [r7, #24]
 800b29c:	6979      	ldr	r1, [r7, #20]
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f000 fce2 	bl	800bc68 <_ZN8touchgfx4ViewI29TestOrientationVoilePresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800b2a4:	69fa      	ldr	r2, [r7, #28]
 800b2a6:	6979      	ldr	r1, [r7, #20]
 800b2a8:	69b8      	ldr	r0, [r7, #24]
 800b2aa:	f7fe ffdc 	bl	800a266 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 800b2ae:	697b      	ldr	r3, [r7, #20]
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3724      	adds	r7, #36	; 0x24
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd90      	pop	{r4, r7, pc}
 800b2b8:	08025d84 	.word	0x08025d84
 800b2bc:	080271d0 	.word	0x080271d0
 800b2c0:	08025e14 	.word	0x08025e14
 800b2c4:	08025e58 	.word	0x08025e58
 800b2c8:	08025efc 	.word	0x08025efc

0800b2cc <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800b2cc:	b590      	push	{r4, r7, lr}
 800b2ce:	b089      	sub	sp, #36	; 0x24
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	607a      	str	r2, [r7, #4]
 800b2d8:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	689a      	ldr	r2, [r3, #8]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	689b      	ldr	r3, [r3, #8]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	3320      	adds	r3, #32
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4610      	mov	r0, r2
 800b2ea:	4798      	blx	r3
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b2f2:	d205      	bcs.n	800b300 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800b2f4:	4b4e      	ldr	r3, [pc, #312]	; (800b430 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800b2f6:	4a4f      	ldr	r2, [pc, #316]	; (800b434 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b2f8:	21c2      	movs	r1, #194	; 0xc2
 800b2fa:	484f      	ldr	r0, [pc, #316]	; (800b438 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800b2fc:	f019 fcac 	bl	8024c58 <__assert_func>
 800b300:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	685a      	ldr	r2, [r3, #4]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	3320      	adds	r3, #32
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4610      	mov	r0, r2
 800b312:	4798      	blx	r3
 800b314:	4603      	mov	r3, r0
 800b316:	2b0f      	cmp	r3, #15
 800b318:	d805      	bhi.n	800b326 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800b31a:	4b48      	ldr	r3, [pc, #288]	; (800b43c <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800b31c:	4a45      	ldr	r2, [pc, #276]	; (800b434 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b31e:	21c3      	movs	r1, #195	; 0xc3
 800b320:	4845      	ldr	r0, [pc, #276]	; (800b438 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800b322:	f019 fc99 	bl	8024c58 <__assert_func>
 800b326:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	68da      	ldr	r2, [r3, #12]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	3320      	adds	r3, #32
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4610      	mov	r0, r2
 800b338:	4798      	blx	r3
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b53      	cmp	r3, #83	; 0x53
 800b33e:	d805      	bhi.n	800b34c <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800b340:	4b3f      	ldr	r3, [pc, #252]	; (800b440 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 800b342:	4a3c      	ldr	r2, [pc, #240]	; (800b434 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b344:	21c4      	movs	r1, #196	; 0xc4
 800b346:	483c      	ldr	r0, [pc, #240]	; (800b438 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800b348:	f019 fc86 	bl	8024c58 <__assert_func>
 800b34c:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800b34e:	683a      	ldr	r2, [r7, #0]
 800b350:	68b9      	ldr	r1, [r7, #8]
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	f7fe ff2b 	bl	800a1ae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	2100      	movs	r1, #0
 800b35e:	4618      	mov	r0, r3
 800b360:	f000 faf6 	bl	800b950 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800b364:	4603      	mov	r3, r0
 800b366:	4619      	mov	r1, r3
 800b368:	2054      	movs	r0, #84	; 0x54
 800b36a:	f7fe fd13 	bl	8009d94 <_ZnwjPv>
 800b36e:	4604      	mov	r4, r0
 800b370:	2c00      	cmp	r4, #0
 800b372:	d005      	beq.n	800b380 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800b374:	2114      	movs	r1, #20
 800b376:	4620      	mov	r0, r4
 800b378:	f000 fb20 	bl	800b9bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800b37c:	4623      	mov	r3, r4
 800b37e:	e000      	b.n	800b382 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 800b380:	4623      	mov	r3, r4
 800b382:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	2100      	movs	r1, #0
 800b38a:	4618      	mov	r0, r3
 800b38c:	f000 fc7a 	bl	800bc84 <_ZN8touchgfx17AbstractPartition2atI11TestADCViewEERT_t>
 800b390:	4603      	mov	r3, r0
 800b392:	4619      	mov	r1, r3
 800b394:	f44f 7014 	mov.w	r0, #592	; 0x250
 800b398:	f7fe fcfc 	bl	8009d94 <_ZnwjPv>
 800b39c:	4604      	mov	r4, r0
 800b39e:	2c00      	cmp	r4, #0
 800b3a0:	d004      	beq.n	800b3ac <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	f006 fa00 	bl	80117a8 <_ZN11TestADCViewC1Ev>
 800b3a8:	4623      	mov	r3, r4
 800b3aa:	e000      	b.n	800b3ae <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 800b3ac:	4623      	mov	r3, r4
 800b3ae:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f000 fc77 	bl	800bcaa <_ZN8touchgfx17AbstractPartition2atI16TestADCPresenterEERT_t>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	4619      	mov	r1, r3
 800b3c0:	2010      	movs	r0, #16
 800b3c2:	f7fe fce7 	bl	8009d94 <_ZnwjPv>
 800b3c6:	4604      	mov	r4, r0
 800b3c8:	2c00      	cmp	r4, #0
 800b3ca:	d005      	beq.n	800b3d8 <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 800b3cc:	69b9      	ldr	r1, [r7, #24]
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f006 f992 	bl	80116f8 <_ZN16TestADCPresenterC1ER11TestADCView>
 800b3d4:	4623      	mov	r3, r4
 800b3d6:	e000      	b.n	800b3da <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 800b3d8:	4623      	mov	r3, r4
 800b3da:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	69fa      	ldr	r2, [r7, #28]
 800b3e0:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	697a      	ldr	r2, [r7, #20]
 800b3e6:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	69ba      	ldr	r2, [r7, #24]
 800b3ec:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d002      	beq.n	800b3fa <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	3304      	adds	r3, #4
 800b3f8:	e000      	b.n	800b3fc <_ZN8touchgfx14makeTransitionI11TestADCView16TestADCPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b400:	f7fe ff58 	bl	800a2b4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	3304      	adds	r3, #4
 800b408:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7fe ffcb 	bl	800a3a6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	6979      	ldr	r1, [r7, #20]
 800b414:	4618      	mov	r0, r3
 800b416:	f000 fc5b 	bl	800bcd0 <_ZN8touchgfx4ViewI16TestADCPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800b41a:	69fa      	ldr	r2, [r7, #28]
 800b41c:	6979      	ldr	r1, [r7, #20]
 800b41e:	69b8      	ldr	r0, [r7, #24]
 800b420:	f7fe ff21 	bl	800a266 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 800b424:	697b      	ldr	r3, [r7, #20]
}
 800b426:	4618      	mov	r0, r3
 800b428:	3724      	adds	r7, #36	; 0x24
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd90      	pop	{r4, r7, pc}
 800b42e:	bf00      	nop
 800b430:	08025d84 	.word	0x08025d84
 800b434:	0802730c 	.word	0x0802730c
 800b438:	08025e14 	.word	0x08025e14
 800b43c:	08025e58 	.word	0x08025e58
 800b440:	08025efc 	.word	0x08025efc

0800b444 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800b444:	b590      	push	{r4, r7, lr}
 800b446:	b089      	sub	sp, #36	; 0x24
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	607a      	str	r2, [r7, #4]
 800b450:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	689a      	ldr	r2, [r3, #8]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	3320      	adds	r3, #32
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4610      	mov	r0, r2
 800b462:	4798      	blx	r3
 800b464:	4603      	mov	r3, r0
 800b466:	2be3      	cmp	r3, #227	; 0xe3
 800b468:	d805      	bhi.n	800b476 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 800b46a:	4b4e      	ldr	r3, [pc, #312]	; (800b5a4 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 800b46c:	4a4e      	ldr	r2, [pc, #312]	; (800b5a8 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800b46e:	21c2      	movs	r1, #194	; 0xc2
 800b470:	484e      	ldr	r0, [pc, #312]	; (800b5ac <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b472:	f019 fbf1 	bl	8024c58 <__assert_func>
 800b476:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	685a      	ldr	r2, [r3, #4]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	3320      	adds	r3, #32
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4610      	mov	r0, r2
 800b488:	4798      	blx	r3
 800b48a:	4603      	mov	r3, r0
 800b48c:	2b0f      	cmp	r3, #15
 800b48e:	d805      	bhi.n	800b49c <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800b490:	4b47      	ldr	r3, [pc, #284]	; (800b5b0 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800b492:	4a45      	ldr	r2, [pc, #276]	; (800b5a8 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800b494:	21c3      	movs	r1, #195	; 0xc3
 800b496:	4845      	ldr	r0, [pc, #276]	; (800b5ac <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b498:	f019 fbde 	bl	8024c58 <__assert_func>
 800b49c:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	68da      	ldr	r2, [r3, #12]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	68db      	ldr	r3, [r3, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	3320      	adds	r3, #32
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4610      	mov	r0, r2
 800b4ae:	4798      	blx	r3
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b53      	cmp	r3, #83	; 0x53
 800b4b4:	d805      	bhi.n	800b4c2 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800b4b6:	4b3f      	ldr	r3, [pc, #252]	; (800b5b4 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800b4b8:	4a3b      	ldr	r2, [pc, #236]	; (800b5a8 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800b4ba:	21c4      	movs	r1, #196	; 0xc4
 800b4bc:	483b      	ldr	r0, [pc, #236]	; (800b5ac <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b4be:	f019 fbcb 	bl	8024c58 <__assert_func>
 800b4c2:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800b4c4:	683a      	ldr	r2, [r7, #0]
 800b4c6:	68b9      	ldr	r1, [r7, #8]
 800b4c8:	68f8      	ldr	r0, [r7, #12]
 800b4ca:	f7fe fe70 	bl	800a1ae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	68db      	ldr	r3, [r3, #12]
 800b4d2:	2100      	movs	r1, #0
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f000 fa3b 	bl	800b950 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	4619      	mov	r1, r3
 800b4de:	2054      	movs	r0, #84	; 0x54
 800b4e0:	f7fe fc58 	bl	8009d94 <_ZnwjPv>
 800b4e4:	4604      	mov	r4, r0
 800b4e6:	2c00      	cmp	r4, #0
 800b4e8:	d005      	beq.n	800b4f6 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 800b4ea:	2114      	movs	r1, #20
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f000 fa65 	bl	800b9bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800b4f2:	4623      	mov	r3, r4
 800b4f4:	e000      	b.n	800b4f8 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800b4f6:	4623      	mov	r3, r4
 800b4f8:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	689b      	ldr	r3, [r3, #8]
 800b4fe:	2100      	movs	r1, #0
 800b500:	4618      	mov	r0, r3
 800b502:	f000 fbf3 	bl	800bcec <_ZN8touchgfx17AbstractPartition2atI15TestCompletViewEERT_t>
 800b506:	4603      	mov	r3, r0
 800b508:	4619      	mov	r1, r3
 800b50a:	20e4      	movs	r0, #228	; 0xe4
 800b50c:	f7fe fc42 	bl	8009d94 <_ZnwjPv>
 800b510:	4604      	mov	r4, r0
 800b512:	2c00      	cmp	r4, #0
 800b514:	d004      	beq.n	800b520 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xdc>
 800b516:	4620      	mov	r0, r4
 800b518:	f006 f9fa 	bl	8011910 <_ZN15TestCompletViewC1Ev>
 800b51c:	4623      	mov	r3, r4
 800b51e:	e000      	b.n	800b522 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 800b520:	4623      	mov	r3, r4
 800b522:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	2100      	movs	r1, #0
 800b52a:	4618      	mov	r0, r3
 800b52c:	f000 fbf1 	bl	800bd12 <_ZN8touchgfx17AbstractPartition2atI20TestCompletPresenterEERT_t>
 800b530:	4603      	mov	r3, r0
 800b532:	4619      	mov	r1, r3
 800b534:	2010      	movs	r0, #16
 800b536:	f7fe fc2d 	bl	8009d94 <_ZnwjPv>
 800b53a:	4604      	mov	r4, r0
 800b53c:	2c00      	cmp	r4, #0
 800b53e:	d005      	beq.n	800b54c <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x108>
 800b540:	69b9      	ldr	r1, [r7, #24]
 800b542:	4620      	mov	r0, r4
 800b544:	f006 f98e 	bl	8011864 <_ZN20TestCompletPresenterC1ER15TestCompletView>
 800b548:	4623      	mov	r3, r4
 800b54a:	e000      	b.n	800b54e <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 800b54c:	4623      	mov	r3, r4
 800b54e:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	69fa      	ldr	r2, [r7, #28]
 800b554:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	697a      	ldr	r2, [r7, #20]
 800b55a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	69ba      	ldr	r2, [r7, #24]
 800b560:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d002      	beq.n	800b56e <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	3304      	adds	r3, #4
 800b56c:	e000      	b.n	800b570 <_ZN8touchgfx14makeTransitionI15TestCompletView20TestCompletPresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 800b56e:	2300      	movs	r3, #0
 800b570:	4619      	mov	r1, r3
 800b572:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b574:	f7fe fe9e 	bl	800a2b4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	3304      	adds	r3, #4
 800b57c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b57e:	4618      	mov	r0, r3
 800b580:	f7fe ff11 	bl	800a3a6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800b584:	69bb      	ldr	r3, [r7, #24]
 800b586:	6979      	ldr	r1, [r7, #20]
 800b588:	4618      	mov	r0, r3
 800b58a:	f000 fbd5 	bl	800bd38 <_ZN8touchgfx4ViewI20TestCompletPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800b58e:	69fa      	ldr	r2, [r7, #28]
 800b590:	6979      	ldr	r1, [r7, #20]
 800b592:	69b8      	ldr	r0, [r7, #24]
 800b594:	f7fe fe67 	bl	800a266 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 800b598:	697b      	ldr	r3, [r7, #20]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3724      	adds	r7, #36	; 0x24
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd90      	pop	{r4, r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	08025d84 	.word	0x08025d84
 800b5a8:	0802742c 	.word	0x0802742c
 800b5ac:	08025e14 	.word	0x08025e14
 800b5b0:	08025e58 	.word	0x08025e58
 800b5b4:	08025efc 	.word	0x08025efc

0800b5b8 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800b5b8:	b590      	push	{r4, r7, lr}
 800b5ba:	b089      	sub	sp, #36	; 0x24
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]
 800b5c4:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	689a      	ldr	r2, [r3, #8]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	689b      	ldr	r3, [r3, #8]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	3320      	adds	r3, #32
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4610      	mov	r0, r2
 800b5d6:	4798      	blx	r3
 800b5d8:	4602      	mov	r2, r0
 800b5da:	f641 7313 	movw	r3, #7955	; 0x1f13
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d805      	bhi.n	800b5ee <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800b5e2:	4b4e      	ldr	r3, [pc, #312]	; (800b71c <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800b5e4:	4a4e      	ldr	r2, [pc, #312]	; (800b720 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b5e6:	21c2      	movs	r1, #194	; 0xc2
 800b5e8:	484e      	ldr	r0, [pc, #312]	; (800b724 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800b5ea:	f019 fb35 	bl	8024c58 <__assert_func>
 800b5ee:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	685a      	ldr	r2, [r3, #4]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	3320      	adds	r3, #32
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4610      	mov	r0, r2
 800b600:	4798      	blx	r3
 800b602:	4603      	mov	r3, r0
 800b604:	2b0f      	cmp	r3, #15
 800b606:	d805      	bhi.n	800b614 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800b608:	4b47      	ldr	r3, [pc, #284]	; (800b728 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800b60a:	4a45      	ldr	r2, [pc, #276]	; (800b720 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b60c:	21c3      	movs	r1, #195	; 0xc3
 800b60e:	4845      	ldr	r0, [pc, #276]	; (800b724 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800b610:	f019 fb22 	bl	8024c58 <__assert_func>
 800b614:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	68da      	ldr	r2, [r3, #12]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	3320      	adds	r3, #32
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4610      	mov	r0, r2
 800b626:	4798      	blx	r3
 800b628:	4603      	mov	r3, r0
 800b62a:	2b53      	cmp	r3, #83	; 0x53
 800b62c:	d805      	bhi.n	800b63a <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800b62e:	4b3f      	ldr	r3, [pc, #252]	; (800b72c <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 800b630:	4a3b      	ldr	r2, [pc, #236]	; (800b720 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800b632:	21c4      	movs	r1, #196	; 0xc4
 800b634:	483b      	ldr	r0, [pc, #236]	; (800b724 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800b636:	f019 fb0f 	bl	8024c58 <__assert_func>
 800b63a:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800b63c:	683a      	ldr	r2, [r7, #0]
 800b63e:	68b9      	ldr	r1, [r7, #8]
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f7fe fdb4 	bl	800a1ae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	68db      	ldr	r3, [r3, #12]
 800b64a:	2100      	movs	r1, #0
 800b64c:	4618      	mov	r0, r3
 800b64e:	f000 f97f 	bl	800b950 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 800b652:	4603      	mov	r3, r0
 800b654:	4619      	mov	r1, r3
 800b656:	2054      	movs	r0, #84	; 0x54
 800b658:	f7fe fb9c 	bl	8009d94 <_ZnwjPv>
 800b65c:	4604      	mov	r4, r0
 800b65e:	2c00      	cmp	r4, #0
 800b660:	d005      	beq.n	800b66e <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 800b662:	2114      	movs	r1, #20
 800b664:	4620      	mov	r0, r4
 800b666:	f000 f9a9 	bl	800b9bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 800b66a:	4623      	mov	r3, r4
 800b66c:	e000      	b.n	800b670 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb8>
 800b66e:	4623      	mov	r3, r4
 800b670:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	2100      	movs	r1, #0
 800b678:	4618      	mov	r0, r3
 800b67a:	f000 fb6b 	bl	800bd54 <_ZN8touchgfx17AbstractPartition2atI17TestGirouetteViewEERT_t>
 800b67e:	4603      	mov	r3, r0
 800b680:	4619      	mov	r1, r3
 800b682:	f641 7014 	movw	r0, #7956	; 0x1f14
 800b686:	f7fe fb85 	bl	8009d94 <_ZnwjPv>
 800b68a:	4604      	mov	r4, r0
 800b68c:	2c00      	cmp	r4, #0
 800b68e:	d004      	beq.n	800b69a <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 800b690:	4620      	mov	r0, r4
 800b692:	f006 f9f3 	bl	8011a7c <_ZN17TestGirouetteViewC1Ev>
 800b696:	4623      	mov	r3, r4
 800b698:	e000      	b.n	800b69c <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
 800b69a:	4623      	mov	r3, r4
 800b69c:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	2100      	movs	r1, #0
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f000 fb68 	bl	800bd7a <_ZN8touchgfx17AbstractPartition2atI22TestGirouettePresenterEERT_t>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	2010      	movs	r0, #16
 800b6b0:	f7fe fb70 	bl	8009d94 <_ZnwjPv>
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	2c00      	cmp	r4, #0
 800b6b8:	d005      	beq.n	800b6c6 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 800b6ba:	69b9      	ldr	r1, [r7, #24]
 800b6bc:	4620      	mov	r0, r4
 800b6be:	f006 f985 	bl	80119cc <_ZN22TestGirouettePresenterC1ER17TestGirouetteView>
 800b6c2:	4623      	mov	r3, r4
 800b6c4:	e000      	b.n	800b6c8 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
 800b6c6:	4623      	mov	r3, r4
 800b6c8:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	69fa      	ldr	r2, [r7, #28]
 800b6ce:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	697a      	ldr	r2, [r7, #20]
 800b6d4:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	69ba      	ldr	r2, [r7, #24]
 800b6da:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d002      	beq.n	800b6e8 <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	3304      	adds	r3, #4
 800b6e6:	e000      	b.n	800b6ea <_ZN8touchgfx14makeTransitionI17TestGirouetteView22TestGirouettePresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6ee:	f7fe fde1 	bl	800a2b4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	3304      	adds	r3, #4
 800b6f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7fe fe54 	bl	800a3a6 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	6979      	ldr	r1, [r7, #20]
 800b702:	4618      	mov	r0, r3
 800b704:	f000 fb4c 	bl	800bda0 <_ZN8touchgfx4ViewI22TestGirouettePresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800b708:	69fa      	ldr	r2, [r7, #28]
 800b70a:	6979      	ldr	r1, [r7, #20]
 800b70c:	69b8      	ldr	r0, [r7, #24]
 800b70e:	f7fe fdaa 	bl	800a266 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 800b712:	697b      	ldr	r3, [r7, #20]
}
 800b714:	4618      	mov	r0, r3
 800b716:	3724      	adds	r7, #36	; 0x24
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd90      	pop	{r4, r7, pc}
 800b71c:	08025d84 	.word	0x08025d84
 800b720:	08027554 	.word	0x08027554
 800b724:	08025e14 	.word	0x08025e14
 800b728:	08025e58 	.word	0x08025e58
 800b72c:	08025efc 	.word	0x08025efc

0800b730 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	460b      	mov	r3, r1
 800b73a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3324      	adds	r3, #36	; 0x24
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	887a      	ldrh	r2, [r7, #2]
 800b746:	4611      	mov	r1, r2
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	4798      	blx	r3
 800b74c:	4603      	mov	r3, r0
    }
 800b74e:	4618      	mov	r0, r3
 800b750:	3708      	adds	r7, #8
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <_ZN8touchgfx17AbstractPartition2atI8MenuViewEERT_t>:
    T& at(const uint16_t index)
 800b756:	b580      	push	{r7, lr}
 800b758:	b082      	sub	sp, #8
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	460b      	mov	r3, r1
 800b760:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	3324      	adds	r3, #36	; 0x24
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	887a      	ldrh	r2, [r7, #2]
 800b76c:	4611      	mov	r1, r2
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	4798      	blx	r3
 800b772:	4603      	mov	r3, r0
    }
 800b774:	4618      	mov	r0, r3
 800b776:	3708      	adds	r7, #8
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <_ZN8touchgfx17AbstractPartition2atI13MenuPresenterEERT_t>:
    T& at(const uint16_t index)
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	460b      	mov	r3, r1
 800b786:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	3324      	adds	r3, #36	; 0x24
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	887a      	ldrh	r2, [r7, #2]
 800b792:	4611      	mov	r1, r2
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	4798      	blx	r3
 800b798:	4603      	mov	r3, r0
    }
 800b79a:	4618      	mov	r0, r3
 800b79c:	3708      	adds	r7, #8
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <_ZN8touchgfx4ViewI13MenuPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800b7a2:	b480      	push	{r7}
 800b7a4:	b083      	sub	sp, #12
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
 800b7aa:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	683a      	ldr	r2, [r7, #0]
 800b7b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800b7b2:	bf00      	nop
 800b7b4:	370c      	adds	r7, #12
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr

0800b7be <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>:
    T& at(const uint16_t index)
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b082      	sub	sp, #8
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	3324      	adds	r3, #36	; 0x24
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	887a      	ldrh	r2, [r7, #2]
 800b7d4:	4611      	mov	r1, r2
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	4798      	blx	r3
 800b7da:	4603      	mov	r3, r0
    }
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3708      	adds	r7, #8
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	4a05      	ldr	r2, [pc, #20]	; (800b804 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev+0x20>)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	601a      	str	r2, [r3, #0]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f000 fb4b 	bl	800be90 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3708      	adds	r7, #8
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}
 800b804:	08026ab8 	.word	0x08026ab8

0800b808 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED0Ev>:
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f7ff ffe7 	bl	800b7e4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 800b816:	2110      	movs	r1, #16
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f019 f9f2 	bl	8024c02 <_ZdlPvj>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	4618      	mov	r0, r3
 800b822:	3708      	adds	r7, #8
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>:
     *
     *        Constructor.
     *
     * @param transitionSteps Number of steps in the transition animation.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 800b828:	b590      	push	{r4, r7, lr}
 800b82a:	b087      	sub	sp, #28
 800b82c:	af02      	add	r7, sp, #8
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	460b      	mov	r3, r1
 800b832:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	4618      	mov	r0, r3
 800b838:	f7fe fb1a 	bl	8009e70 <_ZN8touchgfx10TransitionC1Ev>
 800b83c:	4a3f      	ldr	r2, [pc, #252]	; (800b93c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x114>)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	601a      	str	r2, [r3, #0]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	330c      	adds	r3, #12
 800b846:	4618      	mov	r0, r3
 800b848:	f00b fec4 	bl	80175d4 <_ZN8touchgfx14SnapshotWidgetC1Ev>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f103 020c 	add.w	r2, r3, #12
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	639a      	str	r2, [r3, #56]	; 0x38
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800b85c:	4a38      	ldr	r2, [pc, #224]	; (800b940 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x118>)
 800b85e:	f107 0308 	add.w	r3, r7, #8
 800b862:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b866:	e883 0003 	stmia.w	r3, {r0, r1}
 800b86a:	f107 0308 	add.w	r3, r7, #8
 800b86e:	cb0c      	ldmia	r3, {r2, r3}
 800b870:	6879      	ldr	r1, [r7, #4]
 800b872:	4620      	mov	r0, r4
 800b874:	f000 faec 	bl	800be50 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2203      	movs	r2, #3
 800b87c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	78fa      	ldrb	r2, [r7, #3]
 800b884:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    {
        if (HAL::USE_ANIMATION_STORAGE)
 800b898:	4b2a      	ldr	r3, [pc, #168]	; (800b944 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x11c>)
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d047      	beq.n	800b930 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f103 000c 	add.w	r0, r3, #12
 800b8a6:	4b28      	ldr	r3, [pc, #160]	; (800b948 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 800b8a8:	881b      	ldrh	r3, [r3, #0]
 800b8aa:	b21a      	sxth	r2, r3
 800b8ac:	4b27      	ldr	r3, [pc, #156]	; (800b94c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 800b8ae:	881b      	ldrh	r3, [r3, #0]
 800b8b0:	b21b      	sxth	r3, r3
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	2100      	movs	r1, #0
 800b8ba:	f7fe fb67 	bl	8009f8c <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	330c      	adds	r3, #12
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f00b fe03 	bl	80174ce <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b8ce:	2b03      	cmp	r3, #3
 800b8d0:	d82a      	bhi.n	800b928 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x100>
 800b8d2:	a201      	add	r2, pc, #4	; (adr r2, 800b8d8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xb0>)
 800b8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d8:	0800b909 	.word	0x0800b909
 800b8dc:	0800b917 	.word	0x0800b917
 800b8e0:	0800b8e9 	.word	0x0800b8e9
 800b8e4:	0800b8fb 	.word	0x0800b8fb
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 800b8e8:	4b17      	ldr	r3, [pc, #92]	; (800b948 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 800b8ea:	881b      	ldrh	r3, [r3, #0]
 800b8ec:	425b      	negs	r3, r3
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	b21a      	sxth	r2, r3
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800b8f8:	e01a      	b.n	800b930 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 800b8fa:	4b13      	ldr	r3, [pc, #76]	; (800b948 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 800b8fc:	881b      	ldrh	r3, [r3, #0]
 800b8fe:	b21a      	sxth	r2, r3
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800b906:	e013      	b.n	800b930 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 800b908:	4b10      	ldr	r3, [pc, #64]	; (800b94c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 800b90a:	881b      	ldrh	r3, [r3, #0]
 800b90c:	b21a      	sxth	r2, r3
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800b914:	e00c      	b.n	800b930 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 800b916:	4b0d      	ldr	r3, [pc, #52]	; (800b94c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 800b918:	881b      	ldrh	r3, [r3, #0]
 800b91a:	425b      	negs	r3, r3
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	b21a      	sxth	r2, r3
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800b926:	e003      	b.n	800b930 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            default:
                done = true;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2201      	movs	r2, #1
 800b92c:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 800b92e:	bf00      	nop
            }
        }
    }
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4618      	mov	r0, r3
 800b934:	3714      	adds	r7, #20
 800b936:	46bd      	mov	sp, r7
 800b938:	bd90      	pop	{r4, r7, pc}
 800b93a:	bf00      	nop
 800b93c:	08026a90 	.word	0x08026a90
 800b940:	08025fa0 	.word	0x08025fa0
 800b944:	2000b2d3 	.word	0x2000b2d3
 800b948:	2000b2c8 	.word	0x2000b2c8
 800b94c:	2000b2ca 	.word	0x2000b2ca

0800b950 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	460b      	mov	r3, r1
 800b95a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	3324      	adds	r3, #36	; 0x24
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	887a      	ldrh	r2, [r7, #2]
 800b966:	4611      	mov	r1, r2
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	4798      	blx	r3
 800b96c:	4603      	mov	r3, r0
    }
 800b96e:	4618      	mov	r0, r3
 800b970:	3708      	adds	r7, #8
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
	...

0800b978 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	4a05      	ldr	r2, [pc, #20]	; (800b998 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	601a      	str	r2, [r3, #0]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	4618      	mov	r0, r3
 800b98a:	f000 fa81 	bl	800be90 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	4618      	mov	r0, r3
 800b992:	3708      	adds	r7, #8
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	08026af8 	.word	0x08026af8

0800b99c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f7ff ffe7 	bl	800b978 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800b9aa:	2110      	movs	r1, #16
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f019 f928 	bl	8024c02 <_ZdlPvj>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3708      	adds	r7, #8
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
    SlideTransition(const uint8_t transitionSteps = 20)
 800b9bc:	b590      	push	{r4, r7, lr}
 800b9be:	b087      	sub	sp, #28
 800b9c0:	af02      	add	r7, sp, #8
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	70fb      	strb	r3, [r7, #3]
          calculatedValue(0)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f7fe fa50 	bl	8009e70 <_ZN8touchgfx10TransitionC1Ev>
 800b9d0:	4a3f      	ldr	r2, [pc, #252]	; (800bad0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x114>)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	601a      	str	r2, [r3, #0]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	330c      	adds	r3, #12
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f00b fdfa 	bl	80175d4 <_ZN8touchgfx14SnapshotWidgetC1Ev>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f103 020c 	add.w	r2, r3, #12
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	639a      	str	r2, [r3, #56]	; 0x38
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800b9f0:	4a38      	ldr	r2, [pc, #224]	; (800bad4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x118>)
 800b9f2:	f107 0308 	add.w	r3, r7, #8
 800b9f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b9fa:	e883 0003 	stmia.w	r3, {r0, r1}
 800b9fe:	f107 0308 	add.w	r3, r7, #8
 800ba02:	cb0c      	ldmia	r3, {r2, r3}
 800ba04:	6879      	ldr	r1, [r7, #4]
 800ba06:	4620      	mov	r0, r4
 800ba08:	f000 fa9c 	bl	800bf44 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2202      	movs	r2, #2
 800ba10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	78fa      	ldrb	r2, [r7, #3]
 800ba18:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2200      	movs	r2, #0
 800ba28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
        if (HAL::USE_ANIMATION_STORAGE)
 800ba2c:	4b2a      	ldr	r3, [pc, #168]	; (800bad8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x11c>)
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d047      	beq.n	800bac4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f103 000c 	add.w	r0, r3, #12
 800ba3a:	4b28      	ldr	r3, [pc, #160]	; (800badc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800ba3c:	881b      	ldrh	r3, [r3, #0]
 800ba3e:	b21a      	sxth	r2, r3
 800ba40:	4b27      	ldr	r3, [pc, #156]	; (800bae0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800ba42:	881b      	ldrh	r3, [r3, #0]
 800ba44:	b21b      	sxth	r3, r3
 800ba46:	9300      	str	r3, [sp, #0]
 800ba48:	4613      	mov	r3, r2
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	2100      	movs	r1, #0
 800ba4e:	f7fe fa9d 	bl	8009f8c <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	330c      	adds	r3, #12
 800ba56:	4618      	mov	r0, r3
 800ba58:	f00b fd39 	bl	80174ce <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>
            switch (direction)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ba62:	2b03      	cmp	r3, #3
 800ba64:	d82a      	bhi.n	800babc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x100>
 800ba66:	a201      	add	r2, pc, #4	; (adr r2, 800ba6c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 800ba68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba6c:	0800ba9d 	.word	0x0800ba9d
 800ba70:	0800baab 	.word	0x0800baab
 800ba74:	0800ba7d 	.word	0x0800ba7d
 800ba78:	0800ba8f 	.word	0x0800ba8f
                targetValue = -HAL::DISPLAY_WIDTH;
 800ba7c:	4b17      	ldr	r3, [pc, #92]	; (800badc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800ba7e:	881b      	ldrh	r3, [r3, #0]
 800ba80:	425b      	negs	r3, r3
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	b21a      	sxth	r2, r3
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800ba8c:	e01a      	b.n	800bac4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                targetValue = HAL::DISPLAY_WIDTH;
 800ba8e:	4b13      	ldr	r3, [pc, #76]	; (800badc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 800ba90:	881b      	ldrh	r3, [r3, #0]
 800ba92:	b21a      	sxth	r2, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800ba9a:	e013      	b.n	800bac4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                targetValue = HAL::DISPLAY_HEIGHT;
 800ba9c:	4b10      	ldr	r3, [pc, #64]	; (800bae0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800ba9e:	881b      	ldrh	r3, [r3, #0]
 800baa0:	b21a      	sxth	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800baa8:	e00c      	b.n	800bac4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                targetValue = -HAL::DISPLAY_HEIGHT;
 800baaa:	4b0d      	ldr	r3, [pc, #52]	; (800bae0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 800baac:	881b      	ldrh	r3, [r3, #0]
 800baae:	425b      	negs	r3, r3
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	b21a      	sxth	r2, r3
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                break;
 800baba:	e003      	b.n	800bac4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
                done = true;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2201      	movs	r2, #1
 800bac0:	721a      	strb	r2, [r3, #8]
                break;
 800bac2:	bf00      	nop
    }
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	4618      	mov	r0, r3
 800bac8:	3714      	adds	r7, #20
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd90      	pop	{r4, r7, pc}
 800bace:	bf00      	nop
 800bad0:	08026ad0 	.word	0x08026ad0
 800bad4:	08025fa8 	.word	0x08025fa8
 800bad8:	2000b2d3 	.word	0x2000b2d3
 800badc:	2000b2c8 	.word	0x2000b2c8
 800bae0:	2000b2ca 	.word	0x2000b2ca

0800bae4 <_ZN8touchgfx17AbstractPartition2atI23TestRotationPlateauViewEERT_t>:
    T& at(const uint16_t index)
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	460b      	mov	r3, r1
 800baee:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	3324      	adds	r3, #36	; 0x24
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	887a      	ldrh	r2, [r7, #2]
 800bafa:	4611      	mov	r1, r2
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	4798      	blx	r3
 800bb00:	4603      	mov	r3, r0
    }
 800bb02:	4618      	mov	r0, r3
 800bb04:	3708      	adds	r7, #8
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <_ZN8touchgfx17AbstractPartition2atI28TestRotationPlateauPresenterEERT_t>:
    T& at(const uint16_t index)
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b082      	sub	sp, #8
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
 800bb12:	460b      	mov	r3, r1
 800bb14:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	3324      	adds	r3, #36	; 0x24
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	887a      	ldrh	r2, [r7, #2]
 800bb20:	4611      	mov	r1, r2
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	4798      	blx	r3
 800bb26:	4603      	mov	r3, r0
    }
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3708      	adds	r7, #8
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <_ZN8touchgfx4ViewI28TestRotationPlateauPresenterE4bindERS1_>:
    void bind(T& presenter)
 800bb30:	b480      	push	{r7}
 800bb32:	b083      	sub	sp, #12
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	683a      	ldr	r2, [r7, #0]
 800bb3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800bb40:	bf00      	nop
 800bb42:	370c      	adds	r7, #12
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <_ZN8touchgfx17AbstractPartition2atI12TestUartViewEERT_t>:
    T& at(const uint16_t index)
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	460b      	mov	r3, r1
 800bb56:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	3324      	adds	r3, #36	; 0x24
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	887a      	ldrh	r2, [r7, #2]
 800bb62:	4611      	mov	r1, r2
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	4798      	blx	r3
 800bb68:	4603      	mov	r3, r0
    }
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3708      	adds	r7, #8
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <_ZN8touchgfx17AbstractPartition2atI17TestUartPresenterEERT_t>:
    T& at(const uint16_t index)
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b082      	sub	sp, #8
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	3324      	adds	r3, #36	; 0x24
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	887a      	ldrh	r2, [r7, #2]
 800bb88:	4611      	mov	r1, r2
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	4798      	blx	r3
 800bb8e:	4603      	mov	r3, r0
    }
 800bb90:	4618      	mov	r0, r3
 800bb92:	3708      	adds	r7, #8
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <_ZN8touchgfx4ViewI17TestUartPresenterE4bindERS1_>:
    void bind(T& presenter)
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	683a      	ldr	r2, [r7, #0]
 800bba6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800bba8:	bf00      	nop
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <_ZN8touchgfx17AbstractPartition2atI14TestI2CSPIViewEERT_t>:
    T& at(const uint16_t index)
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	3324      	adds	r3, #36	; 0x24
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	887a      	ldrh	r2, [r7, #2]
 800bbca:	4611      	mov	r1, r2
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	4798      	blx	r3
 800bbd0:	4603      	mov	r3, r0
    }
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3708      	adds	r7, #8
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <_ZN8touchgfx17AbstractPartition2atI19TestI2CSPIPresenterEERT_t>:
    T& at(const uint16_t index)
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b082      	sub	sp, #8
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	3324      	adds	r3, #36	; 0x24
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	887a      	ldrh	r2, [r7, #2]
 800bbf0:	4611      	mov	r1, r2
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	4798      	blx	r3
 800bbf6:	4603      	mov	r3, r0
    }
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <_ZN8touchgfx4ViewI19TestI2CSPIPresenterE4bindERS1_>:
    void bind(T& presenter)
 800bc00:	b480      	push	{r7}
 800bc02:	b083      	sub	sp, #12
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	683a      	ldr	r2, [r7, #0]
 800bc0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800bc10:	bf00      	nop
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr

0800bc1c <_ZN8touchgfx17AbstractPartition2atI24TestOrientationVoileViewEERT_t>:
    T& at(const uint16_t index)
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	460b      	mov	r3, r1
 800bc26:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	3324      	adds	r3, #36	; 0x24
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	887a      	ldrh	r2, [r7, #2]
 800bc32:	4611      	mov	r1, r2
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	4798      	blx	r3
 800bc38:	4603      	mov	r3, r0
    }
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3708      	adds	r7, #8
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}

0800bc42 <_ZN8touchgfx17AbstractPartition2atI29TestOrientationVoilePresenterEERT_t>:
    T& at(const uint16_t index)
 800bc42:	b580      	push	{r7, lr}
 800bc44:	b082      	sub	sp, #8
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	3324      	adds	r3, #36	; 0x24
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	887a      	ldrh	r2, [r7, #2]
 800bc58:	4611      	mov	r1, r2
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	4798      	blx	r3
 800bc5e:	4603      	mov	r3, r0
    }
 800bc60:	4618      	mov	r0, r3
 800bc62:	3708      	adds	r7, #8
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <_ZN8touchgfx4ViewI29TestOrientationVoilePresenterE4bindERS1_>:
    void bind(T& presenter)
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	683a      	ldr	r2, [r7, #0]
 800bc76:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800bc78:	bf00      	nop
 800bc7a:	370c      	adds	r7, #12
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <_ZN8touchgfx17AbstractPartition2atI11TestADCViewEERT_t>:
    T& at(const uint16_t index)
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	3324      	adds	r3, #36	; 0x24
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	887a      	ldrh	r2, [r7, #2]
 800bc9a:	4611      	mov	r1, r2
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	4798      	blx	r3
 800bca0:	4603      	mov	r3, r0
    }
 800bca2:	4618      	mov	r0, r3
 800bca4:	3708      	adds	r7, #8
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}

0800bcaa <_ZN8touchgfx17AbstractPartition2atI16TestADCPresenterEERT_t>:
    T& at(const uint16_t index)
 800bcaa:	b580      	push	{r7, lr}
 800bcac:	b082      	sub	sp, #8
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	3324      	adds	r3, #36	; 0x24
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	887a      	ldrh	r2, [r7, #2]
 800bcc0:	4611      	mov	r1, r2
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	4798      	blx	r3
 800bcc6:	4603      	mov	r3, r0
    }
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3708      	adds	r7, #8
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <_ZN8touchgfx4ViewI16TestADCPresenterE4bindERS1_>:
    void bind(T& presenter)
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	683a      	ldr	r2, [r7, #0]
 800bcde:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800bce0:	bf00      	nop
 800bce2:	370c      	adds	r7, #12
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <_ZN8touchgfx17AbstractPartition2atI15TestCompletViewEERT_t>:
    T& at(const uint16_t index)
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	3324      	adds	r3, #36	; 0x24
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	887a      	ldrh	r2, [r7, #2]
 800bd02:	4611      	mov	r1, r2
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	4798      	blx	r3
 800bd08:	4603      	mov	r3, r0
    }
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <_ZN8touchgfx17AbstractPartition2atI20TestCompletPresenterEERT_t>:
    T& at(const uint16_t index)
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b082      	sub	sp, #8
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	3324      	adds	r3, #36	; 0x24
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	887a      	ldrh	r2, [r7, #2]
 800bd28:	4611      	mov	r1, r2
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	4798      	blx	r3
 800bd2e:	4603      	mov	r3, r0
    }
 800bd30:	4618      	mov	r0, r3
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <_ZN8touchgfx4ViewI20TestCompletPresenterE4bindERS1_>:
    void bind(T& presenter)
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	683a      	ldr	r2, [r7, #0]
 800bd46:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800bd48:	bf00      	nop
 800bd4a:	370c      	adds	r7, #12
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <_ZN8touchgfx17AbstractPartition2atI17TestGirouetteViewEERT_t>:
    T& at(const uint16_t index)
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b082      	sub	sp, #8
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	3324      	adds	r3, #36	; 0x24
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	887a      	ldrh	r2, [r7, #2]
 800bd6a:	4611      	mov	r1, r2
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	4798      	blx	r3
 800bd70:	4603      	mov	r3, r0
    }
 800bd72:	4618      	mov	r0, r3
 800bd74:	3708      	adds	r7, #8
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}

0800bd7a <_ZN8touchgfx17AbstractPartition2atI22TestGirouettePresenterEERT_t>:
    T& at(const uint16_t index)
 800bd7a:	b580      	push	{r7, lr}
 800bd7c:	b082      	sub	sp, #8
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6078      	str	r0, [r7, #4]
 800bd82:	460b      	mov	r3, r1
 800bd84:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	3324      	adds	r3, #36	; 0x24
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	887a      	ldrh	r2, [r7, #2]
 800bd90:	4611      	mov	r1, r2
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	4798      	blx	r3
 800bd96:	4603      	mov	r3, r0
    }
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <_ZN8touchgfx4ViewI22TestGirouettePresenterE4bindERS1_>:
    void bind(T& presenter)
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	683a      	ldr	r2, [r7, #0]
 800bdae:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800bdb0:	bf00      	nop
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE>:
     *
     *        Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdca:	683a      	ldr	r2, [r7, #0]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d02a      	beq.n	800be26 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        {
            return;
        }

        switch (direction)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800bdd6:	2b03      	cmp	r3, #3
 800bdd8:	d820      	bhi.n	800be1c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x60>
 800bdda:	a201      	add	r2, pc, #4	; (adr r2, 800bde0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 800bddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde0:	0800be07 	.word	0x0800be07
 800bde4:	0800be07 	.word	0x0800be07
 800bde8:	0800bdf1 	.word	0x0800bdf1
 800bdec:	0800bdf1 	.word	0x0800bdf1
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	3354      	adds	r3, #84	; 0x54
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800bdfe:	2200      	movs	r2, #0
 800be00:	6838      	ldr	r0, [r7, #0]
 800be02:	4798      	blx	r3
            break;
 800be04:	e010      	b.n	800be28 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	3354      	adds	r3, #84	; 0x54
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 800be14:	2100      	movs	r1, #0
 800be16:	6838      	ldr	r0, [r7, #0]
 800be18:	4798      	blx	r3
            break;
 800be1a:	e005      	b.n	800be28 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2201      	movs	r2, #1
 800be20:	721a      	strb	r2, [r3, #8]
            break;
 800be22:	bf00      	nop
 800be24:	e000      	b.n	800be28 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 800be26:	bf00      	nop
        }
    }
 800be28:	3708      	adds	r7, #8
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop

0800be30 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800be30:	b480      	push	{r7}
 800be32:	b083      	sub	sp, #12
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	4a04      	ldr	r2, [pc, #16]	; (800be4c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	601a      	str	r2, [r3, #0]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4618      	mov	r0, r3
 800be42:	370c      	adds	r7, #12
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr
 800be4c:	08026b10 	.word	0x08026b10

0800be50 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	60b9      	str	r1, [r7, #8]
 800be5a:	4639      	mov	r1, r7
 800be5c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	4618      	mov	r0, r3
 800be64:	f7ff ffe4 	bl	800be30 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800be68:	4a08      	ldr	r2, [pc, #32]	; (800be8c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	68ba      	ldr	r2, [r7, #8]
 800be72:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	3308      	adds	r3, #8
 800be78:	463a      	mov	r2, r7
 800be7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800be7e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	4618      	mov	r0, r3
 800be86:	3710      	adds	r7, #16
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}
 800be8c:	08026ab8 	.word	0x08026ab8

0800be90 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
    }
 800be98:	4a04      	ldr	r2, [pc, #16]	; (800beac <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	601a      	str	r2, [r3, #0]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4618      	mov	r0, r3
 800bea2:	370c      	adds	r7, #12
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr
 800beac:	08026b10 	.word	0x08026b10

0800beb0 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
    }
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f7ff ffe9 	bl	800be90 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800bebe:	2104      	movs	r1, #4
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f018 fe9e 	bl	8024c02 <_ZdlPvj>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4618      	mov	r0, r3
 800beca:	3708      	adds	r7, #8
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    virtual void tickMoveDrawable(Drawable& d)
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
        if (&d == snapshotPtr)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bede:	683a      	ldr	r2, [r7, #0]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d02a      	beq.n	800bf3a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        switch (direction)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800beea:	2b03      	cmp	r3, #3
 800beec:	d820      	bhi.n	800bf30 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
 800beee:	a201      	add	r2, pc, #4	; (adr r2, 800bef4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 800bef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bef4:	0800bf1b 	.word	0x0800bf1b
 800bef8:	0800bf1b 	.word	0x0800bf1b
 800befc:	0800bf05 	.word	0x0800bf05
 800bf00:	0800bf05 	.word	0x0800bf05
            d.moveRelative(calculatedValue, 0);
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	3354      	adds	r3, #84	; 0x54
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	687a      	ldr	r2, [r7, #4]
 800bf0e:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800bf12:	2200      	movs	r2, #0
 800bf14:	6838      	ldr	r0, [r7, #0]
 800bf16:	4798      	blx	r3
            break;
 800bf18:	e010      	b.n	800bf3c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            d.moveRelative(0, calculatedValue);
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	3354      	adds	r3, #84	; 0x54
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 800bf28:	2100      	movs	r1, #0
 800bf2a:	6838      	ldr	r0, [r7, #0]
 800bf2c:	4798      	blx	r3
            break;
 800bf2e:	e005      	b.n	800bf3c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            done = true;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2201      	movs	r2, #1
 800bf34:	721a      	strb	r2, [r3, #8]
            break;
 800bf36:	bf00      	nop
 800bf38:	e000      	b.n	800bf3c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 800bf3a:	bf00      	nop
    }
 800bf3c:	3708      	adds	r7, #8
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop

0800bf44 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	4639      	mov	r1, r7
 800bf50:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7ff ff6a 	bl	800be30 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800bf5c:	4a08      	ldr	r2, [pc, #32]	; (800bf80 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	68ba      	ldr	r2, [r7, #8]
 800bf66:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	3308      	adds	r3, #8
 800bf6c:	463a      	mov	r2, r7
 800bf6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf72:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3710      	adds	r7, #16
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	08026af8 	.word	0x08026af8

0800bf84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	4a05      	ldr	r2, [pc, #20]	; (800bfa4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	601a      	str	r2, [r3, #0]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7fd ffd9 	bl	8009f4c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3708      	adds	r7, #8
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	08026b84 	.word	0x08026b84

0800bfa8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f7ff ffe7 	bl	800bf84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800bfb6:	2110      	movs	r1, #16
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f018 fe22 	bl	8024c02 <_ZdlPvj>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3708      	adds	r7, #8
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>:
    virtual ~SlideTransition()
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
    }
 800bfd0:	4a0a      	ldr	r2, [pc, #40]	; (800bffc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev+0x34>)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	601a      	str	r2, [r3, #0]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	333c      	adds	r3, #60	; 0x3c
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7ff fc02 	bl	800b7e4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	330c      	adds	r3, #12
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f00b fa71 	bl	80174cc <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7fd ff55 	bl	8009e9c <_ZN8touchgfx10TransitionD1Ev>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	4618      	mov	r0, r3
 800bff6:	3708      	adds	r7, #8
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	08026a90 	.word	0x08026a90

0800c000 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED0Ev>:
    virtual ~SlideTransition()
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
    }
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f7ff ffdd 	bl	800bfc8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>
 800c00e:	2154      	movs	r1, #84	; 0x54
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f018 fdf6 	bl	8024c02 <_ZdlPvj>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	4618      	mov	r0, r3
 800c01a:	3708      	adds	r7, #8
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 800c028:	4b59      	ldr	r3, [pc, #356]	; (800c190 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x170>)
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	f083 0301 	eor.w	r3, r3, #1
 800c030:	b2db      	uxtb	r3, r3
 800c032:	2b00      	cmp	r3, #0
 800c034:	d003      	beq.n	800c03e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1e>
            done = true;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2201      	movs	r2, #1
 800c03a:	721a      	strb	r2, [r3, #8]
            return;
 800c03c:	e0a5      	b.n	800c18a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	4618      	mov	r0, r3
 800c042:	f7fd ff4b 	bl	8009edc <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c04c:	3301      	adds	r3, #1
 800c04e:	b2da      	uxtb	r2, r3
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c062:	429a      	cmp	r2, r3
 800c064:	d82f      	bhi.n	800c0c6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c06c:	b298      	uxth	r0, r3
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	2100      	movs	r1, #0
 800c07e:	f00e f833 	bl	801a0e8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800c082:	4603      	mov	r3, r0
 800c084:	461a      	mov	r2, r3
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800c092:	b29b      	uxth	r3, r3
 800c094:	f003 0301 	and.w	r3, r3, #1
 800c098:	b29b      	uxth	r3, r3
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d01b      	beq.n	800c0d6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 800c0ac:	2a00      	cmp	r2, #0
 800c0ae:	dd01      	ble.n	800c0b4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x94>
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	e001      	b.n	800c0b8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x98>
 800c0b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0b8:	4413      	add	r3, r2
 800c0ba:	b29b      	uxth	r3, r3
 800c0bc:	b21a      	sxth	r2, r3
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800c0c4:	e007      	b.n	800c0d6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
            done = true;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 800c0d4:	e059      	b.n	800c18a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x16a>
        switch (direction)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c0dc:	2b03      	cmp	r3, #3
 800c0de:	d845      	bhi.n	800c16c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x14c>
 800c0e0:	a201      	add	r2, pc, #4	; (adr r2, 800c0e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xc8>)
 800c0e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0e6:	bf00      	nop
 800c0e8:	0800c133 	.word	0x0800c133
 800c0ec:	0800c133 	.word	0x0800c133
 800c0f0:	0800c0f9 	.word	0x0800c0f9
 800c0f4:	0800c0f9 	.word	0x0800c0f9
            calculatedValue -= snapshot.getX();
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	330c      	adds	r3, #12
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7fd ff72 	bl	8009fe6 <_ZNK8touchgfx8Drawable4getXEv>
 800c102:	4603      	mov	r3, r0
 800c104:	4619      	mov	r1, r3
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800c10c:	b29a      	uxth	r2, r3
 800c10e:	b28b      	uxth	r3, r1
 800c110:	1ad3      	subs	r3, r2, r3
 800c112:	b29b      	uxth	r3, r3
 800c114:	b21a      	sxth	r2, r3
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f103 000c 	add.w	r0, r3, #12
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800c128:	2200      	movs	r2, #0
 800c12a:	4619      	mov	r1, r3
 800c12c:	f00d fae0 	bl	80196f0 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800c130:	e020      	b.n	800c174 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	330c      	adds	r3, #12
 800c136:	4618      	mov	r0, r3
 800c138:	f7fd ff62 	bl	800a000 <_ZNK8touchgfx8Drawable4getYEv>
 800c13c:	4603      	mov	r3, r0
 800c13e:	4619      	mov	r1, r3
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800c146:	b29a      	uxth	r2, r3
 800c148:	b28b      	uxth	r3, r1
 800c14a:	1ad3      	subs	r3, r2, r3
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	b21a      	sxth	r2, r3
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f103 000c 	add.w	r0, r3, #12
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800c162:	461a      	mov	r2, r3
 800c164:	2100      	movs	r1, #0
 800c166:	f00d fac3 	bl	80196f0 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800c16a:	e003      	b.n	800c174 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x154>
            done = true;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2201      	movs	r2, #1
 800c170:	721a      	strb	r2, [r3, #8]
            break;
 800c172:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6858      	ldr	r0, [r3, #4]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	3378      	adds	r3, #120	; 0x78
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	323c      	adds	r2, #60	; 0x3c
 800c186:	4611      	mov	r1, r2
 800c188:	4798      	blx	r3
    }
 800c18a:	3708      	adds	r7, #8
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	2000b2d3 	.word	0x2000b2d3

0800c194 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv>:
    virtual void tearDown()
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 800c19c:	4b0b      	ldr	r3, [pc, #44]	; (800c1cc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x38>)
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d00e      	beq.n	800c1c2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d00a      	beq.n	800c1c2 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6858      	ldr	r0, [r3, #4]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	3364      	adds	r3, #100	; 0x64
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	320c      	adds	r2, #12
 800c1be:	4611      	mov	r1, r2
 800c1c0:	4798      	blx	r3
    }
 800c1c2:	bf00      	nop
 800c1c4:	3708      	adds	r7, #8
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
 800c1ca:	bf00      	nop
 800c1cc:	2000b2d3 	.word	0x2000b2d3

0800c1d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv>:
    virtual void init()
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b088      	sub	sp, #32
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 800c1d8:	4b1a      	ldr	r3, [pc, #104]	; (800c244 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x74>)
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d02d      	beq.n	800c23c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x6c>
            Transition::init();
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7fd fe8e 	bl	8009f04 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800c1e8:	4a17      	ldr	r2, [pc, #92]	; (800c248 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x78>)
 800c1ea:	f107 0318 	add.w	r3, r7, #24
 800c1ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c1f2:	e883 0003 	stmia.w	r3, {r0, r1}
 800c1f6:	f107 0008 	add.w	r0, r7, #8
 800c1fa:	f107 0318 	add.w	r3, r7, #24
 800c1fe:	cb0c      	ldmia	r3, {r2, r3}
 800c200:	6879      	ldr	r1, [r7, #4]
 800c202:	f7ff fe25 	bl	800be50 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	685a      	ldr	r2, [r3, #4]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	3378      	adds	r3, #120	; 0x78
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f107 0108 	add.w	r1, r7, #8
 800c218:	4610      	mov	r0, r2
 800c21a:	4798      	blx	r3
            screenContainer->add(snapshot);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6858      	ldr	r0, [r3, #4]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	3360      	adds	r3, #96	; 0x60
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	320c      	adds	r2, #12
 800c22e:	4611      	mov	r1, r2
 800c230:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800c232:	f107 0308 	add.w	r3, r7, #8
 800c236:	4618      	mov	r0, r3
 800c238:	f7ff fad4 	bl	800b7e4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
    }
 800c23c:	bf00      	nop
 800c23e:	3720      	adds	r7, #32
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}
 800c244:	2000b2d3 	.word	0x2000b2d3
 800c248:	08025fb0 	.word	0x08025fb0

0800c24c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
        switch (direction)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c25c:	2b03      	cmp	r3, #3
 800c25e:	d83b      	bhi.n	800c2d8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8c>
 800c260:	a201      	add	r2, pc, #4	; (adr r2, 800c268 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 800c262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c266:	bf00      	nop
 800c268:	0800c2a9 	.word	0x0800c2a9
 800c26c:	0800c2c3 	.word	0x0800c2c3
 800c270:	0800c279 	.word	0x0800c279
 800c274:	0800c28f 	.word	0x0800c28f
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	3354      	adds	r3, #84	; 0x54
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a18      	ldr	r2, [pc, #96]	; (800c2e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800c282:	8812      	ldrh	r2, [r2, #0]
 800c284:	b211      	sxth	r1, r2
 800c286:	2200      	movs	r2, #0
 800c288:	6838      	ldr	r0, [r7, #0]
 800c28a:	4798      	blx	r3
            break;
 800c28c:	e025      	b.n	800c2da <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	3354      	adds	r3, #84	; 0x54
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a13      	ldr	r2, [pc, #76]	; (800c2e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800c298:	8812      	ldrh	r2, [r2, #0]
 800c29a:	4252      	negs	r2, r2
 800c29c:	b292      	uxth	r2, r2
 800c29e:	b211      	sxth	r1, r2
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	6838      	ldr	r0, [r7, #0]
 800c2a4:	4798      	blx	r3
            break;
 800c2a6:	e018      	b.n	800c2da <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	3354      	adds	r3, #84	; 0x54
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a0d      	ldr	r2, [pc, #52]	; (800c2e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 800c2b2:	8812      	ldrh	r2, [r2, #0]
 800c2b4:	4252      	negs	r2, r2
 800c2b6:	b292      	uxth	r2, r2
 800c2b8:	b212      	sxth	r2, r2
 800c2ba:	2100      	movs	r1, #0
 800c2bc:	6838      	ldr	r0, [r7, #0]
 800c2be:	4798      	blx	r3
            break;
 800c2c0:	e00b      	b.n	800c2da <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	3354      	adds	r3, #84	; 0x54
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4a07      	ldr	r2, [pc, #28]	; (800c2e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 800c2cc:	8812      	ldrh	r2, [r2, #0]
 800c2ce:	b212      	sxth	r2, r2
 800c2d0:	2100      	movs	r1, #0
 800c2d2:	6838      	ldr	r0, [r7, #0]
 800c2d4:	4798      	blx	r3
            break;
 800c2d6:	e000      	b.n	800c2da <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 800c2d8:	bf00      	nop
    }
 800c2da:	bf00      	nop
 800c2dc:	3708      	adds	r7, #8
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	2000b2c8 	.word	0x2000b2c8
 800c2e8:	2000b2ca 	.word	0x2000b2ca

0800c2ec <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	68d2      	ldr	r2, [r2, #12]
 800c2fe:	1052      	asrs	r2, r2, #1
 800c300:	1898      	adds	r0, r3, r2
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	68db      	ldr	r3, [r3, #12]
 800c306:	f003 0301 	and.w	r3, r3, #1
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d102      	bne.n	800c314 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x28>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	689b      	ldr	r3, [r3, #8]
 800c312:	e00a      	b.n	800c32a <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x3e>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	68d2      	ldr	r2, [r2, #12]
 800c31c:	1052      	asrs	r2, r2, #1
 800c31e:	4413      	add	r3, r2
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	6892      	ldr	r2, [r2, #8]
 800c326:	4413      	add	r3, r2
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	6839      	ldr	r1, [r7, #0]
 800c32c:	4798      	blx	r3
    }
 800c32e:	bf00      	nop
 800c330:	3708      	adds	r7, #8
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 800c336:	b480      	push	{r7}
 800c338:	b083      	sub	sp, #12
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d010      	beq.n	800c368 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	689b      	ldr	r3, [r3, #8]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d107      	bne.n	800c35e <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	68db      	ldr	r3, [r3, #12]
 800c352:	f003 0301 	and.w	r3, r3, #1
 800c356:	2b00      	cmp	r3, #0
 800c358:	d101      	bne.n	800c35e <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 800c35a:	2301      	movs	r3, #1
 800c35c:	e000      	b.n	800c360 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x2a>
 800c35e:	2300      	movs	r3, #0
 800c360:	2b01      	cmp	r3, #1
 800c362:	d001      	beq.n	800c368 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 800c364:	2301      	movs	r3, #1
 800c366:	e000      	b.n	800c36a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x34>
 800c368:	2300      	movs	r3, #0
    }
 800c36a:	4618      	mov	r0, r3
 800c36c:	370c      	adds	r7, #12
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr
	...

0800c378 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
    virtual ~SlideTransition()
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
    }
 800c380:	4a0a      	ldr	r2, [pc, #40]	; (800c3ac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	601a      	str	r2, [r3, #0]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	333c      	adds	r3, #60	; 0x3c
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7ff faf4 	bl	800b978 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	330c      	adds	r3, #12
 800c394:	4618      	mov	r0, r3
 800c396:	f00b f899 	bl	80174cc <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7fd fd7d 	bl	8009e9c <_ZN8touchgfx10TransitionD1Ev>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3708      	adds	r7, #8
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	08026ad0 	.word	0x08026ad0

0800c3b0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
    virtual ~SlideTransition()
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
    }
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f7ff ffdd 	bl	800c378 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 800c3be:	2154      	movs	r1, #84	; 0x54
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f018 fc1e 	bl	8024c02 <_ZdlPvj>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3708      	adds	r7, #8
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 800c3d8:	4b59      	ldr	r3, [pc, #356]	; (800c540 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x170>)
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	f083 0301 	eor.w	r3, r3, #1
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d003      	beq.n	800c3ee <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	721a      	strb	r2, [r3, #8]
            return;
 800c3ec:	e0a5      	b.n	800c53a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7fd fd73 	bl	8009edc <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	b2da      	uxtb	r2, r3
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        if (animationCounter <= animationSteps)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c412:	429a      	cmp	r2, r3
 800c414:	d82f      	bhi.n	800c476 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c41c:	b298      	uxth	r0, r3
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	2100      	movs	r1, #0
 800c42e:	f00d fe5b 	bl	801a0e8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800c432:	4603      	mov	r3, r0
 800c434:	461a      	mov	r2, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (calculatedValue % 2)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800c442:	b29b      	uxth	r3, r3
 800c444:	f003 0301 	and.w	r3, r3, #1
 800c448:	b29b      	uxth	r3, r3
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d01b      	beq.n	800c486 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800c454:	b29b      	uxth	r3, r3
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	f9b2 2052 	ldrsh.w	r2, [r2, #82]	; 0x52
 800c45c:	2a00      	cmp	r2, #0
 800c45e:	dd01      	ble.n	800c464 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 800c460:	2201      	movs	r2, #1
 800c462:	e001      	b.n	800c468 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 800c464:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c468:	4413      	add	r3, r2
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	b21a      	sxth	r2, r3
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800c474:	e007      	b.n	800c486 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2201      	movs	r2, #1
 800c47a:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2200      	movs	r2, #0
 800c480:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
            return;
 800c484:	e059      	b.n	800c53a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        switch (direction)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c48c:	2b03      	cmp	r3, #3
 800c48e:	d845      	bhi.n	800c51c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x14c>
 800c490:	a201      	add	r2, pc, #4	; (adr r2, 800c498 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xc8>)
 800c492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c496:	bf00      	nop
 800c498:	0800c4e3 	.word	0x0800c4e3
 800c49c:	0800c4e3 	.word	0x0800c4e3
 800c4a0:	0800c4a9 	.word	0x0800c4a9
 800c4a4:	0800c4a9 	.word	0x0800c4a9
            calculatedValue -= snapshot.getX();
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	330c      	adds	r3, #12
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f7fd fd9a 	bl	8009fe6 <_ZNK8touchgfx8Drawable4getXEv>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800c4bc:	b29a      	uxth	r2, r3
 800c4be:	b28b      	uxth	r3, r1
 800c4c0:	1ad3      	subs	r3, r2, r3
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	b21a      	sxth	r2, r3
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(calculatedValue, 0);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f103 000c 	add.w	r0, r3, #12
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800c4d8:	2200      	movs	r2, #0
 800c4da:	4619      	mov	r1, r3
 800c4dc:	f00d f908 	bl	80196f0 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800c4e0:	e020      	b.n	800c524 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	330c      	adds	r3, #12
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7fd fd8a 	bl	800a000 <_ZNK8touchgfx8Drawable4getYEv>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800c4f6:	b29a      	uxth	r2, r3
 800c4f8:	b28b      	uxth	r3, r1
 800c4fa:	1ad3      	subs	r3, r2, r3
 800c4fc:	b29b      	uxth	r3, r3
 800c4fe:	b21a      	sxth	r2, r3
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            snapshot.moveRelative(0, calculatedValue);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f103 000c 	add.w	r0, r3, #12
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800c512:	461a      	mov	r2, r3
 800c514:	2100      	movs	r1, #0
 800c516:	f00d f8eb 	bl	80196f0 <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 800c51a:	e003      	b.n	800c524 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            done = true;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2201      	movs	r2, #1
 800c520:	721a      	strb	r2, [r3, #8]
            break;
 800c522:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6858      	ldr	r0, [r3, #4]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	3378      	adds	r3, #120	; 0x78
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	323c      	adds	r2, #60	; 0x3c
 800c536:	4611      	mov	r1, r2
 800c538:	4798      	blx	r3
    }
 800c53a:	3708      	adds	r7, #8
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	2000b2d3 	.word	0x2000b2d3

0800c544 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE && screenContainer)
 800c54c:	4b0b      	ldr	r3, [pc, #44]	; (800c57c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x38>)
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d00e      	beq.n	800c572 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d00a      	beq.n	800c572 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x2e>
            screenContainer->remove(snapshot);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6858      	ldr	r0, [r3, #4]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	3364      	adds	r3, #100	; 0x64
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	320c      	adds	r2, #12
 800c56e:	4611      	mov	r1, r2
 800c570:	4798      	blx	r3
    }
 800c572:	bf00      	nop
 800c574:	3708      	adds	r7, #8
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	2000b2d3 	.word	0x2000b2d3

0800c580 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 800c580:	b580      	push	{r7, lr}
 800c582:	b088      	sub	sp, #32
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 800c588:	4b1a      	ldr	r3, [pc, #104]	; (800c5f4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d02d      	beq.n	800c5ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	4618      	mov	r0, r3
 800c594:	f7fd fcb6 	bl	8009f04 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800c598:	4a17      	ldr	r2, [pc, #92]	; (800c5f8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 800c59a:	f107 0318 	add.w	r3, r7, #24
 800c59e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c5a2:	e883 0003 	stmia.w	r3, {r0, r1}
 800c5a6:	f107 0008 	add.w	r0, r7, #8
 800c5aa:	f107 0318 	add.w	r3, r7, #24
 800c5ae:	cb0c      	ldmia	r3, {r2, r3}
 800c5b0:	6879      	ldr	r1, [r7, #4]
 800c5b2:	f7ff fcc7 	bl	800bf44 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	685a      	ldr	r2, [r3, #4]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	3378      	adds	r3, #120	; 0x78
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f107 0108 	add.w	r1, r7, #8
 800c5c8:	4610      	mov	r0, r2
 800c5ca:	4798      	blx	r3
            screenContainer->add(snapshot);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6858      	ldr	r0, [r3, #4]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	3360      	adds	r3, #96	; 0x60
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	687a      	ldr	r2, [r7, #4]
 800c5dc:	320c      	adds	r2, #12
 800c5de:	4611      	mov	r1, r2
 800c5e0:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 800c5e2:	f107 0308 	add.w	r3, r7, #8
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7ff f9c6 	bl	800b978 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 800c5ec:	bf00      	nop
 800c5ee:	3720      	adds	r7, #32
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	2000b2d3 	.word	0x2000b2d3
 800c5f8:	08025fb8 	.word	0x08025fb8

0800c5fc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
        switch (direction)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c60c:	2b03      	cmp	r3, #3
 800c60e:	d83b      	bhi.n	800c688 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8c>
 800c610:	a201      	add	r2, pc, #4	; (adr r2, 800c618 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 800c612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c616:	bf00      	nop
 800c618:	0800c659 	.word	0x0800c659
 800c61c:	0800c673 	.word	0x0800c673
 800c620:	0800c629 	.word	0x0800c629
 800c624:	0800c63f 	.word	0x0800c63f
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	3354      	adds	r3, #84	; 0x54
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a18      	ldr	r2, [pc, #96]	; (800c694 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800c632:	8812      	ldrh	r2, [r2, #0]
 800c634:	b211      	sxth	r1, r2
 800c636:	2200      	movs	r2, #0
 800c638:	6838      	ldr	r0, [r7, #0]
 800c63a:	4798      	blx	r3
            break;
 800c63c:	e025      	b.n	800c68a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	3354      	adds	r3, #84	; 0x54
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4a13      	ldr	r2, [pc, #76]	; (800c694 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 800c648:	8812      	ldrh	r2, [r2, #0]
 800c64a:	4252      	negs	r2, r2
 800c64c:	b292      	uxth	r2, r2
 800c64e:	b211      	sxth	r1, r2
 800c650:	2200      	movs	r2, #0
 800c652:	6838      	ldr	r0, [r7, #0]
 800c654:	4798      	blx	r3
            break;
 800c656:	e018      	b.n	800c68a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	3354      	adds	r3, #84	; 0x54
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a0d      	ldr	r2, [pc, #52]	; (800c698 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 800c662:	8812      	ldrh	r2, [r2, #0]
 800c664:	4252      	negs	r2, r2
 800c666:	b292      	uxth	r2, r2
 800c668:	b212      	sxth	r2, r2
 800c66a:	2100      	movs	r1, #0
 800c66c:	6838      	ldr	r0, [r7, #0]
 800c66e:	4798      	blx	r3
            break;
 800c670:	e00b      	b.n	800c68a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	3354      	adds	r3, #84	; 0x54
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4a07      	ldr	r2, [pc, #28]	; (800c698 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 800c67c:	8812      	ldrh	r2, [r2, #0]
 800c67e:	b212      	sxth	r2, r2
 800c680:	2100      	movs	r1, #0
 800c682:	6838      	ldr	r0, [r7, #0]
 800c684:	4798      	blx	r3
            break;
 800c686:	e000      	b.n	800c68a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 800c688:	bf00      	nop
    }
 800c68a:	bf00      	nop
 800c68c:	3708      	adds	r7, #8
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
 800c692:	bf00      	nop
 800c694:	2000b2c8 	.word	0x2000b2c8
 800c698:	2000b2ca 	.word	0x2000b2ca

0800c69c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	687a      	ldr	r2, [r7, #4]
 800c6ac:	68d2      	ldr	r2, [r2, #12]
 800c6ae:	1052      	asrs	r2, r2, #1
 800c6b0:	1898      	adds	r0, r3, r2
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	f003 0301 	and.w	r3, r3, #1
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d102      	bne.n	800c6c4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	e00a      	b.n	800c6da <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	68d2      	ldr	r2, [r2, #12]
 800c6cc:	1052      	asrs	r2, r2, #1
 800c6ce:	4413      	add	r3, r2
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	6892      	ldr	r2, [r2, #8]
 800c6d6:	4413      	add	r3, r2
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	6839      	ldr	r1, [r7, #0]
 800c6dc:	4798      	blx	r3
    }
 800c6de:	bf00      	nop
 800c6e0:	3708      	adds	r7, #8
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 800c6e6:	b480      	push	{r7}
 800c6e8:	b083      	sub	sp, #12
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d010      	beq.n	800c718 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	689b      	ldr	r3, [r3, #8]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d107      	bne.n	800c70e <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	68db      	ldr	r3, [r3, #12]
 800c702:	f003 0301 	and.w	r3, r3, #1
 800c706:	2b00      	cmp	r3, #0
 800c708:	d101      	bne.n	800c70e <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 800c70a:	2301      	movs	r3, #1
 800c70c:	e000      	b.n	800c710 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 800c70e:	2300      	movs	r3, #0
 800c710:	2b01      	cmp	r3, #1
 800c712:	d001      	beq.n	800c718 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 800c714:	2301      	movs	r3, #1
 800c716:	e000      	b.n	800c71a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 800c718:	2300      	movs	r3, #0
    }
 800c71a:	4618      	mov	r0, r3
 800c71c:	370c      	adds	r7, #12
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr

0800c726 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 800c726:	b580      	push	{r7, lr}
 800c728:	b082      	sub	sp, #8
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	687a      	ldr	r2, [r7, #4]
 800c734:	68d2      	ldr	r2, [r2, #12]
 800c736:	1052      	asrs	r2, r2, #1
 800c738:	1899      	adds	r1, r3, r2
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	f003 0301 	and.w	r3, r3, #1
 800c742:	2b00      	cmp	r3, #0
 800c744:	d102      	bne.n	800c74c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	689b      	ldr	r3, [r3, #8]
 800c74a:	e00a      	b.n	800c762 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	68d2      	ldr	r2, [r2, #12]
 800c754:	1052      	asrs	r2, r2, #1
 800c756:	4413      	add	r3, r2
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	687a      	ldr	r2, [r7, #4]
 800c75c:	6892      	ldr	r2, [r2, #8]
 800c75e:	4413      	add	r3, r2
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4608      	mov	r0, r1
 800c764:	4798      	blx	r3
    }
 800c766:	bf00      	nop
 800c768:	3708      	adds	r7, #8
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}

0800c76e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800c76e:	b480      	push	{r7}
 800c770:	b083      	sub	sp, #12
 800c772:	af00      	add	r7, sp, #0
 800c774:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d010      	beq.n	800c7a0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d107      	bne.n	800c796 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	f003 0301 	and.w	r3, r3, #1
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d101      	bne.n	800c796 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800c792:	2301      	movs	r3, #1
 800c794:	e000      	b.n	800c798 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800c796:	2300      	movs	r3, #0
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d001      	beq.n	800c7a0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800c79c:	2301      	movs	r3, #1
 800c79e:	e000      	b.n	800c7a2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800c7a0:	2300      	movs	r3, #0
    }
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	370c      	adds	r7, #12
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr

0800c7ae <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 800c7ae:	b480      	push	{r7}
 800c7b0:	b083      	sub	sp, #12
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
 800c7b6:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	683a      	ldr	r2, [r7, #0]
 800c7bc:	601a      	str	r2, [r3, #0]
    }
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	370c      	adds	r7, #12
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 800c7cc:	b480      	push	{r7}
 800c7ce:	b083      	sub	sp, #12
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	80da      	strh	r2, [r3, #6]
    }
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	370c      	adds	r7, #12
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f8:	4770      	bx	lr

0800c7fa <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800c7fa:	b480      	push	{r7}
 800c7fc:	b085      	sub	sp, #20
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	60f8      	str	r0, [r7, #12]
 800c802:	4608      	mov	r0, r1
 800c804:	4611      	mov	r1, r2
 800c806:	461a      	mov	r2, r3
 800c808:	4603      	mov	r3, r0
 800c80a:	817b      	strh	r3, [r7, #10]
 800c80c:	460b      	mov	r3, r1
 800c80e:	813b      	strh	r3, [r7, #8]
 800c810:	4613      	mov	r3, r2
 800c812:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	897a      	ldrh	r2, [r7, #10]
 800c818:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	893a      	ldrh	r2, [r7, #8]
 800c81e:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	88fa      	ldrh	r2, [r7, #6]
 800c824:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	8b3a      	ldrh	r2, [r7, #24]
 800c82a:	80da      	strh	r2, [r3, #6]
    }
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	4618      	mov	r0, r3
 800c830:	3714      	adds	r7, #20
 800c832:	46bd      	mov	sp, r7
 800c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c838:	4770      	bx	lr

0800c83a <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 800c83a:	b480      	push	{r7}
 800c83c:	b083      	sub	sp, #12
 800c83e:	af00      	add	r7, sp, #0
 800c840:	6078      	str	r0, [r7, #4]
 800c842:	460b      	mov	r3, r1
 800c844:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	887a      	ldrh	r2, [r7, #2]
 800c84a:	801a      	strh	r2, [r3, #0]
    {
    }
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	4618      	mov	r0, r3
 800c850:	370c      	adds	r7, #12
 800c852:	46bd      	mov	sp, r7
 800c854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c858:	4770      	bx	lr
	...

0800c85c <_ZN8touchgfx8DrawableC1Ev>:
    Drawable() : rect(0, 0, 0, 0),
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af02      	add	r7, sp, #8
 800c862:	6078      	str	r0, [r7, #4]
        visible(true)
 800c864:	4a13      	ldr	r2, [pc, #76]	; (800c8b4 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	601a      	str	r2, [r3, #0]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	1d18      	adds	r0, r3, #4
 800c86e:	2300      	movs	r3, #0
 800c870:	9300      	str	r3, [sp, #0]
 800c872:	2300      	movs	r3, #0
 800c874:	2200      	movs	r2, #0
 800c876:	2100      	movs	r1, #0
 800c878:	f7ff ffbf 	bl	800c7fa <_ZN8touchgfx4RectC1Essss>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	330c      	adds	r3, #12
 800c880:	4618      	mov	r0, r3
 800c882:	f7ff ffa3 	bl	800c7cc <_ZN8touchgfx4RectC1Ev>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2200      	movs	r2, #0
 800c88a:	615a      	str	r2, [r3, #20]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2200      	movs	r2, #0
 800c890:	619a      	str	r2, [r3, #24]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	61da      	str	r2, [r3, #28]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2200      	movs	r2, #0
 800c89c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3708      	adds	r7, #8
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	bf00      	nop
 800c8b4:	0802a7d8 	.word	0x0802a7d8

0800c8b8 <_ZN8touchgfx8DrawableD1Ev>:
    virtual ~Drawable() { }
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	4a04      	ldr	r2, [pc, #16]	; (800c8d4 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	601a      	str	r2, [r3, #0]
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	370c      	adds	r7, #12
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr
 800c8d4:	0802a7d8 	.word	0x0802a7d8

0800c8d8 <_ZN8touchgfx8DrawableD0Ev>:
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b082      	sub	sp, #8
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f7ff ffe9 	bl	800c8b8 <_ZN8touchgfx8DrawableD1Ev>
 800c8e6:	2128      	movs	r1, #40	; 0x28
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f018 f98a 	bl	8024c02 <_ZdlPvj>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3708      	adds	r7, #8
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	460b      	mov	r3, r1
 800c902:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	887a      	ldrh	r2, [r7, #2]
 800c908:	809a      	strh	r2, [r3, #4]
    }
 800c90a:	bf00      	nop
 800c90c:	370c      	adds	r7, #12
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr

0800c916 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 800c916:	b480      	push	{r7}
 800c918:	b083      	sub	sp, #12
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
 800c91e:	460b      	mov	r3, r1
 800c920:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	887a      	ldrh	r2, [r7, #2]
 800c926:	80da      	strh	r2, [r3, #6]
    }
 800c928:	bf00      	nop
 800c92a:	370c      	adds	r7, #12
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr

0800c934 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 800c934:	b580      	push	{r7, lr}
 800c936:	b082      	sub	sp, #8
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	460b      	mov	r3, r1
 800c93e:	807b      	strh	r3, [r7, #2]
 800c940:	4613      	mov	r3, r2
 800c942:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	332c      	adds	r3, #44	; 0x2c
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c950:	4611      	mov	r1, r2
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	4798      	blx	r3
        setY(y);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	3330      	adds	r3, #48	; 0x30
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c962:	4611      	mov	r1, r2
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	4798      	blx	r3
    }
 800c968:	bf00      	nop
 800c96a:	3708      	adds	r7, #8
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 800c970:	b480      	push	{r7}
 800c972:	b083      	sub	sp, #12
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	460b      	mov	r3, r1
 800c97a:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	887a      	ldrh	r2, [r7, #2]
 800c980:	811a      	strh	r2, [r3, #8]
    }
 800c982:	bf00      	nop
 800c984:	370c      	adds	r7, #12
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr

0800c98e <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 800c98e:	b480      	push	{r7}
 800c990:	b083      	sub	sp, #12
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
 800c996:	460b      	mov	r3, r1
 800c998:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	887a      	ldrh	r2, [r7, #2]
 800c99e:	815a      	strh	r2, [r3, #10]
    }
 800c9a0:	bf00      	nop
 800c9a2:	370c      	adds	r7, #12
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr

0800c9ac <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 800c9ac:	b480      	push	{r7}
 800c9ae:	b083      	sub	sp, #12
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	bf00      	nop
 800c9b6:	370c      	adds	r7, #12
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr

0800c9c0 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 800c9c0:	b480      	push	{r7}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	6039      	str	r1, [r7, #0]
 800c9ca:	bf00      	nop
 800c9cc:	370c      	adds	r7, #12
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d4:	4770      	bx	lr

0800c9d6 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 800c9d6:	b480      	push	{r7}
 800c9d8:	b083      	sub	sp, #12
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
 800c9de:	6039      	str	r1, [r7, #0]
 800c9e0:	bf00      	nop
 800c9e2:	370c      	adds	r7, #12
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
 800c9f6:	bf00      	nop
 800c9f8:	370c      	adds	r7, #12
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr

0800ca02 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 800ca02:	b480      	push	{r7}
 800ca04:	b083      	sub	sp, #12
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
 800ca0a:	bf00      	nop
 800ca0c:	370c      	adds	r7, #12
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr

0800ca16 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800ca16:	b480      	push	{r7}
 800ca18:	b083      	sub	sp, #12
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800ca24:	4618      	mov	r0, r3
 800ca26:	370c      	adds	r7, #12
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800ca30:	b480      	push	{r7}
 800ca32:	b083      	sub	sp, #12
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800ca3e:	4618      	mov	r0, r3
 800ca40:	370c      	adds	r7, #12
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr

0800ca4a <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800ca4a:	b580      	push	{r7, lr}
 800ca4c:	b082      	sub	sp, #8
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
 800ca52:	460b      	mov	r3, r1
 800ca54:	807b      	strh	r3, [r7, #2]
 800ca56:	4613      	mov	r3, r2
 800ca58:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	3354      	adds	r3, #84	; 0x54
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	8879      	ldrh	r1, [r7, #2]
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ca6a:	b292      	uxth	r2, r2
 800ca6c:	1a8a      	subs	r2, r1, r2
 800ca6e:	b292      	uxth	r2, r2
 800ca70:	b210      	sxth	r0, r2
 800ca72:	8839      	ldrh	r1, [r7, #0]
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800ca7a:	b292      	uxth	r2, r2
 800ca7c:	1a8a      	subs	r2, r1, r2
 800ca7e:	b292      	uxth	r2, r2
 800ca80:	b212      	sxth	r2, r2
 800ca82:	4601      	mov	r1, r0
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	4798      	blx	r3
    }
 800ca88:	bf00      	nop
 800ca8a:	3708      	adds	r7, #8
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800ca90:	b480      	push	{r7}
 800ca92:	b083      	sub	sp, #12
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca9e:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800caa6:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800caae:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800cab0:	bf00      	nop
 800cab2:	370c      	adds	r7, #12
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr

0800cabc <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b084      	sub	sp, #16
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800cac8:	68f8      	ldr	r0, [r7, #12]
 800caca:	f7ff ffe1 	bl	800ca90 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681a      	ldr	r2, [r3, #0]
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	68fa      	ldr	r2, [r7, #12]
 800cada:	601a      	str	r2, [r3, #0]
    }
 800cadc:	bf00      	nop
 800cade:	3710      	adds	r7, #16
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <_ZN8touchgfx9ContainerC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Container() : Drawable(),
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
        firstChild(0)
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	4618      	mov	r0, r3
 800caf0:	f7ff feb4 	bl	800c85c <_ZN8touchgfx8DrawableC1Ev>
 800caf4:	4a05      	ldr	r2, [pc, #20]	; (800cb0c <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	601a      	str	r2, [r3, #0]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2200      	movs	r2, #0
 800cafe:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	4618      	mov	r0, r3
 800cb04:	3708      	adds	r7, #8
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
 800cb0a:	bf00      	nop
 800cb0c:	08028e90 	.word	0x08028e90

0800cb10 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b082      	sub	sp, #8
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	4a05      	ldr	r2, [pc, #20]	; (800cb30 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	601a      	str	r2, [r3, #0]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7ff fec9 	bl	800c8b8 <_ZN8touchgfx8DrawableD1Ev>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3708      	adds	r7, #8
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	08028e90 	.word	0x08028e90

0800cb34 <_ZN8touchgfx9ContainerD0Ev>:
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b082      	sub	sp, #8
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f7ff ffe7 	bl	800cb10 <_ZN8touchgfx9ContainerD1Ev>
 800cb42:	212c      	movs	r1, #44	; 0x2c
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f018 f85c 	bl	8024c02 <_ZdlPvj>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3708      	adds	r7, #8
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7ff fe7c 	bl	800c85c <_ZN8touchgfx8DrawableC1Ev>
 800cb64:	4a03      	ldr	r2, [pc, #12]	; (800cb74 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	601a      	str	r2, [r3, #0]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3708      	adds	r7, #8
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}
 800cb74:	08027794 	.word	0x08027794

0800cb78 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	4a05      	ldr	r2, [pc, #20]	; (800cb98 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	601a      	str	r2, [r3, #0]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f7ff fe95 	bl	800c8b8 <_ZN8touchgfx8DrawableD1Ev>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4618      	mov	r0, r3
 800cb92:	3708      	adds	r7, #8
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}
 800cb98:	08027794 	.word	0x08027794

0800cb9c <_ZN8touchgfx6WidgetD0Ev>:
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f7ff ffe7 	bl	800cb78 <_ZN8touchgfx6WidgetD1Ev>
 800cbaa:	2128      	movs	r1, #40	; 0x28
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f018 f828 	bl	8024c02 <_ZdlPvj>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3708      	adds	r7, #8
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	607b      	str	r3, [r7, #4]
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	817b      	strh	r3, [r7, #10]
 800cbca:	4613      	mov	r3, r2
 800cbcc:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7ff ff20 	bl	800ca16 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d008      	beq.n	800cbee <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7ff ff26 	bl	800ca30 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d001      	beq.n	800cbee <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800cbea:	2301      	movs	r3, #1
 800cbec:	e000      	b.n	800cbf0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800cbee:	2300      	movs	r3, #0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d002      	beq.n	800cbfa <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800cbf4:	68fa      	ldr	r2, [r7, #12]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	601a      	str	r2, [r3, #0]
        }
    }
 800cbfa:	bf00      	nop
 800cbfc:	3710      	adds	r7, #16
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
	...

0800cc04 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7ff ff9f 	bl	800cb54 <_ZN8touchgfx6WidgetC1Ev>
 800cc16:	4a0b      	ldr	r2, [pc, #44]	; (800cc44 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	601a      	str	r2, [r3, #0]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	3326      	adds	r3, #38	; 0x26
 800cc20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7ff fe08 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	22ff      	movs	r2, #255	; 0xff
 800cc2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 800cc32:	6839      	ldr	r1, [r7, #0]
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f00b f807 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	0802a3d8 	.word	0x0802a3d8

0800cc48 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 800cc48:	b480      	push	{r7}
 800cc4a:	b083      	sub	sp, #12
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	460b      	mov	r3, r1
 800cc52:	807b      	strh	r3, [r7, #2]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	887a      	ldrh	r2, [r7, #2]
 800cc58:	801a      	strh	r2, [r3, #0]
    }
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	370c      	adds	r7, #12
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr

0800cc68 <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
        assertValid();
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f7fc fe6f 	bl	8009954 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 800cc76:	4b06      	ldr	r3, [pc, #24]	; (800cc90 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	881b      	ldrh	r3, [r3, #0]
 800cc7e:	4619      	mov	r1, r3
 800cc80:	4610      	mov	r0, r2
 800cc82:	f004 f99f 	bl	8010fc4 <_ZNK8touchgfx5Texts7getTextEt>
 800cc86:	4603      	mov	r3, r0
    }
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3708      	adds	r7, #8
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}
 800cc90:	2000b370 	.word	0x2000b370

0800cc94 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b082      	sub	sp, #8
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7ff ff58 	bl	800cb54 <_ZN8touchgfx6WidgetC1Ev>
 800cca4:	4a13      	ldr	r2, [pc, #76]	; (800ccf4 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	601a      	str	r2, [r3, #0]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	3326      	adds	r3, #38	; 0x26
 800ccae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7ff ffc8 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	3328      	adds	r3, #40	; 0x28
 800ccbc:	2100      	movs	r1, #0
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f7ff fd75 	bl	800c7ae <_ZN8touchgfx9colortypeC1Em>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	859a      	strh	r2, [r3, #44]	; 0x2c
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	22ff      	movs	r2, #255	; 0xff
 800ccce:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2200      	movs	r2, #0
 800cce6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	4618      	mov	r0, r3
 800ccee:	3708      	adds	r7, #8
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	0802a130 	.word	0x0802a130

0800ccf8 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af02      	add	r7, sp, #8
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 800cd02:	2300      	movs	r3, #0
 800cd04:	9300      	str	r3, [sp, #0]
 800cd06:	2300      	movs	r3, #0
 800cd08:	2200      	movs	r2, #0
 800cd0a:	2100      	movs	r1, #0
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f7ff fd74 	bl	800c7fa <_ZN8touchgfx4RectC1Essss>
    }
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	3708      	adds	r7, #8
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}

0800cd1a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 800cd1a:	b480      	push	{r7}
 800cd1c:	b083      	sub	sp, #12
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	6078      	str	r0, [r7, #4]
 800cd22:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	683a      	ldr	r2, [r7, #0]
 800cd28:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800cd2a:	bf00      	nop
 800cd2c:	370c      	adds	r7, #12
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd34:	4770      	bx	lr

0800cd36 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800cd36:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd38:	b085      	sub	sp, #20
 800cd3a:	af00      	add	r7, sp, #0
 800cd3c:	6078      	str	r0, [r7, #4]
 800cd3e:	460b      	mov	r3, r1
 800cd40:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800cd42:	687e      	ldr	r6, [r7, #4]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	3330      	adds	r3, #48	; 0x30
 800cd4a:	681c      	ldr	r4, [r3, #0]
 800cd4c:	887d      	ldrh	r5, [r7, #2]
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f000 f845 	bl	800cdde <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800cd54:	4603      	mov	r3, r0
 800cd56:	81bb      	strh	r3, [r7, #12]
 800cd58:	f107 030c 	add.w	r3, r7, #12
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7fc fdc5 	bl	80098ec <_ZNK8touchgfx9TypedText7getFontEv>
 800cd62:	4602      	mov	r2, r0
 800cd64:	6813      	ldr	r3, [r2, #0]
 800cd66:	332c      	adds	r3, #44	; 0x2c
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4610      	mov	r0, r2
 800cd6c:	4798      	blx	r3
 800cd6e:	4603      	mov	r3, r0
 800cd70:	1aeb      	subs	r3, r5, r3
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	b21b      	sxth	r3, r3
 800cd76:	4619      	mov	r1, r3
 800cd78:	4630      	mov	r0, r6
 800cd7a:	47a0      	blx	r4
    }
 800cd7c:	bf00      	nop
 800cd7e:	3714      	adds	r7, #20
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cd84 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	460b      	mov	r3, r1
 800cd8e:	807b      	strh	r3, [r7, #2]
 800cd90:	4613      	mov	r3, r2
 800cd92:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	332c      	adds	r3, #44	; 0x2c
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800cda2:	4610      	mov	r0, r2
 800cda4:	4798      	blx	r3
        setBaselineY(baselineY);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	3360      	adds	r3, #96	; 0x60
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f9b7 2000 	ldrsh.w	r2, [r7]
 800cdb2:	4611      	mov	r1, r2
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	4798      	blx	r3
    }
 800cdb8:	bf00      	nop
 800cdba:	3708      	adds	r7, #8
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 800cdc0:	b480      	push	{r7}
 800cdc2:	b083      	sub	sp, #12
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	460b      	mov	r3, r1
 800cdca:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	887a      	ldrh	r2, [r7, #2]
 800cdd0:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 800cdd2:	bf00      	nop
 800cdd4:	370c      	adds	r7, #12
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr

0800cdde <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 800cdde:	b480      	push	{r7}
 800cde0:	b083      	sub	sp, #12
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 800cdea:	4618      	mov	r0, r3
 800cdec:	370c      	adds	r7, #12
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf4:	4770      	bx	lr
	...

0800cdf8 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	4a05      	ldr	r2, [pc, #20]	; (800ce18 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	601a      	str	r2, [r3, #0]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7ff feb5 	bl	800cb78 <_ZN8touchgfx6WidgetD1Ev>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	4618      	mov	r0, r3
 800ce12:	3708      	adds	r7, #8
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}
 800ce18:	0802a130 	.word	0x0802a130

0800ce1c <_ZN8touchgfx8TextAreaD0Ev>:
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f7ff ffe7 	bl	800cdf8 <_ZN8touchgfx8TextAreaD1Ev>
 800ce2a:	2134      	movs	r1, #52	; 0x34
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f017 fee8 	bl	8024c02 <_ZdlPvj>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	4618      	mov	r0, r3
 800ce36:	3708      	adds	r7, #8
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b082      	sub	sp, #8
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
        : TextArea()
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7ff ff24 	bl	800cc94 <_ZN8touchgfx8TextAreaC1Ev>
 800ce4c:	4a03      	ldr	r2, [pc, #12]	; (800ce5c <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	601a      	str	r2, [r3, #0]
    {
    }
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	4618      	mov	r0, r3
 800ce56:	3708      	adds	r7, #8
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	08027718 	.word	0x08027718

0800ce60 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b082      	sub	sp, #8
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	4a05      	ldr	r2, [pc, #20]	; (800ce80 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	601a      	str	r2, [r3, #0]
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	4618      	mov	r0, r3
 800ce72:	f7ff ffc1 	bl	800cdf8 <_ZN8touchgfx8TextAreaD1Ev>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3708      	adds	r7, #8
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	08027718 	.word	0x08027718

0800ce84 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f7ff ffe7 	bl	800ce60 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800ce92:	2134      	movs	r1, #52	; 0x34
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f017 feb4 	bl	8024c02 <_ZdlPvj>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3708      	adds	r7, #8
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7ff ffc4 	bl	800ce3c <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800ceb4:	4a05      	ldr	r2, [pc, #20]	; (800cecc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	601a      	str	r2, [r3, #0]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2200      	movs	r2, #0
 800cebe:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	4618      	mov	r0, r3
 800cec4:	3708      	adds	r7, #8
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	bf00      	nop
 800cecc:	0802a2b4 	.word	0x0802a2b4

0800ced0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800ced0:	b480      	push	{r7}
 800ced2:	b083      	sub	sp, #12
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	683a      	ldr	r2, [r7, #0]
 800cede:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800cee0:	bf00      	nop
 800cee2:	370c      	adds	r7, #12
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr

0800ceec <_ZN17MenuContainerBaseD1Ev>:

class MenuContainerBase : public touchgfx::Container
{
public:
    MenuContainerBase();
    virtual ~MenuContainerBase() {}
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	4a0a      	ldr	r2, [pc, #40]	; (800cf20 <_ZN17MenuContainerBaseD1Ev+0x34>)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	601a      	str	r2, [r3, #0]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	3358      	adds	r3, #88	; 0x58
 800cefe:	4618      	mov	r0, r3
 800cf00:	f000 f914 	bl	800d12c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	332c      	adds	r3, #44	; 0x2c
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f000 f8ed 	bl	800d0e8 <_ZN8touchgfx5ImageD1Ev>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7ff fdfd 	bl	800cb10 <_ZN8touchgfx9ContainerD1Ev>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3708      	adds	r7, #8
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}
 800cf20:	08027688 	.word	0x08027688

0800cf24 <_ZN17MenuContainerBaseD0Ev>:
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f7ff ffdd 	bl	800ceec <_ZN17MenuContainerBaseD1Ev>
 800cf32:	21e0      	movs	r1, #224	; 0xe0
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f017 fe64 	bl	8024c02 <_ZdlPvj>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3708      	adds	r7, #8
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 800cf44:	b590      	push	{r4, r7, lr}
 800cf46:	b083      	sub	sp, #12
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	71fb      	strb	r3, [r7, #7]
 800cf4e:	460b      	mov	r3, r1
 800cf50:	71bb      	strb	r3, [r7, #6]
 800cf52:	4613      	mov	r3, r2
 800cf54:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800cf56:	f7fd f861 	bl	800a01c <_ZN8touchgfx3HAL11getInstanceEv>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d105      	bne.n	800cf6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 800cf60:	4b0a      	ldr	r3, [pc, #40]	; (800cf8c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 800cf62:	4a0b      	ldr	r2, [pc, #44]	; (800cf90 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 800cf64:	2138      	movs	r1, #56	; 0x38
 800cf66:	480b      	ldr	r0, [pc, #44]	; (800cf94 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 800cf68:	f017 fe76 	bl	8024c58 <__assert_func>
 800cf6c:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 800cf6e:	f7fd f861 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 800cf72:	6803      	ldr	r3, [r0, #0]
 800cf74:	332c      	adds	r3, #44	; 0x2c
 800cf76:	681c      	ldr	r4, [r3, #0]
 800cf78:	797b      	ldrb	r3, [r7, #5]
 800cf7a:	79ba      	ldrb	r2, [r7, #6]
 800cf7c:	79f9      	ldrb	r1, [r7, #7]
 800cf7e:	47a0      	blx	r4
 800cf80:	4603      	mov	r3, r0
    }
 800cf82:	4618      	mov	r0, r3
 800cf84:	370c      	adds	r7, #12
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd90      	pop	{r4, r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	0802609c 	.word	0x0802609c
 800cf90:	080277f4 	.word	0x080277f4
 800cf94:	080260e0 	.word	0x080260e0

0800cf98 <_ZN17MenuContainerBaseC1Ev>:
#include <gui_generated/containers/MenuContainerBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

MenuContainerBase::MenuContainerBase()
 800cf98:	b590      	push	{r4, r7, lr}
 800cf9a:	b089      	sub	sp, #36	; 0x24
 800cf9c:	af02      	add	r7, sp, #8
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7ff fd9e 	bl	800cae4 <_ZN8touchgfx9ContainerC1Ev>
 800cfa8:	4a48      	ldr	r2, [pc, #288]	; (800d0cc <_ZN17MenuContainerBaseC1Ev+0x134>)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	601a      	str	r2, [r3, #0]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cfb4:	f107 0308 	add.w	r3, r7, #8
 800cfb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f7ff fc3c 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800cfc2:	f107 0308 	add.w	r3, r7, #8
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	4620      	mov	r0, r4
 800cfca:	f7ff fe1b 	bl	800cc04 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	3358      	adds	r3, #88	; 0x58
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7ff ff66 	bl	800cea4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{
    setWidth(120);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2178      	movs	r1, #120	; 0x78
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7ff fcc7 	bl	800c970 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(88);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2158      	movs	r1, #88	; 0x58
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7ff fcd1 	bl	800c98e <_ZN8touchgfx8Drawable9setHeightEs>
    image.setXY(36, 2);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	332c      	adds	r3, #44	; 0x2c
 800cff0:	2202      	movs	r2, #2
 800cff2:	2124      	movs	r1, #36	; 0x24
 800cff4:	4618      	mov	r0, r3
 800cff6:	f7ff fc9d 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    image.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_COMPASS_48_ID));
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d000:	f107 030c 	add.w	r3, r7, #12
 800d004:	2116      	movs	r1, #22
 800d006:	4618      	mov	r0, r3
 800d008:	f7ff fc17 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800d00c:	f107 030c 	add.w	r3, r7, #12
 800d010:	4619      	mov	r1, r3
 800d012:	4620      	mov	r0, r4
 800d014:	f00a fe18 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textArea.setPosition(0, 50, 120, 38);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800d01e:	2326      	movs	r3, #38	; 0x26
 800d020:	9300      	str	r3, [sp, #0]
 800d022:	2378      	movs	r3, #120	; 0x78
 800d024:	2232      	movs	r2, #50	; 0x32
 800d026:	2100      	movs	r1, #0
 800d028:	f7fc ffb0 	bl	8009f8c <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f103 0458 	add.w	r4, r3, #88	; 0x58
 800d032:	2200      	movs	r2, #0
 800d034:	2100      	movs	r1, #0
 800d036:	2000      	movs	r0, #0
 800d038:	f7ff ff84 	bl	800cf44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800d03c:	4603      	mov	r3, r0
 800d03e:	4619      	mov	r1, r3
 800d040:	4620      	mov	r0, r4
 800d042:	f7ff fe6a 	bl	800cd1a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea.setLinespacing(0);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	3358      	adds	r3, #88	; 0x58
 800d04a:	2100      	movs	r1, #0
 800d04c:	4618      	mov	r0, r3
 800d04e:	f7ff feb7 	bl	800cdc0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(textAreaBuffer, TEXTAREA_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID9).getText());
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f103 0490 	add.w	r4, r3, #144	; 0x90
 800d058:	f107 0310 	add.w	r3, r7, #16
 800d05c:	2104      	movs	r1, #4
 800d05e:	4618      	mov	r0, r3
 800d060:	f7ff fdf2 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 800d064:	f107 0310 	add.w	r3, r7, #16
 800d068:	4618      	mov	r0, r3
 800d06a:	f7ff fdfd 	bl	800cc68 <_ZNK8touchgfx9TypedText7getTextEv>
 800d06e:	4603      	mov	r3, r0
 800d070:	4a17      	ldr	r2, [pc, #92]	; (800d0d0 <_ZN17MenuContainerBaseC1Ev+0x138>)
 800d072:	2128      	movs	r1, #40	; 0x28
 800d074:	4620      	mov	r0, r4
 800d076:	f00d ffc9 	bl	801b00c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea.setWildcard(textAreaBuffer);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	3390      	adds	r3, #144	; 0x90
 800d084:	4619      	mov	r1, r3
 800d086:	4610      	mov	r0, r2
 800d088:	f7ff ff22 	bl	800ced0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f103 0458 	add.w	r4, r3, #88	; 0x58
 800d092:	f107 0314 	add.w	r3, r7, #20
 800d096:	2103      	movs	r1, #3
 800d098:	4618      	mov	r0, r3
 800d09a:	f7ff fdd5 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 800d09e:	8ab9      	ldrh	r1, [r7, #20]
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	f00a fbbd 	bl	8017820 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(image);
 800d0a6:	687a      	ldr	r2, [r7, #4]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	332c      	adds	r3, #44	; 0x2c
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	4610      	mov	r0, r2
 800d0b0:	f007 fe10 	bl	8014cd4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(textArea);
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	3358      	adds	r3, #88	; 0x58
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	4610      	mov	r0, r2
 800d0be:	f007 fe09 	bl	8014cd4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	371c      	adds	r7, #28
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd90      	pop	{r4, r7, pc}
 800d0cc:	08027688 	.word	0x08027688
 800d0d0:	08026120 	.word	0x08026120

0800d0d4 <_ZN17MenuContainerBase10initializeEv>:

void MenuContainerBase::initialize()
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b083      	sub	sp, #12
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]

}
 800d0dc:	bf00      	nop
 800d0de:	370c      	adds	r7, #12
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e6:	4770      	bx	lr

0800d0e8 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	4a05      	ldr	r2, [pc, #20]	; (800d108 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	601a      	str	r2, [r3, #0]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7ff fd3d 	bl	800cb78 <_ZN8touchgfx6WidgetD1Ev>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	4618      	mov	r0, r3
 800d102:	3708      	adds	r7, #8
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}
 800d108:	0802a3d8 	.word	0x0802a3d8

0800d10c <_ZN8touchgfx5ImageD0Ev>:
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b082      	sub	sp, #8
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f7ff ffe7 	bl	800d0e8 <_ZN8touchgfx5ImageD1Ev>
 800d11a:	212c      	movs	r1, #44	; 0x2c
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f017 fd70 	bl	8024c02 <_ZdlPvj>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	4618      	mov	r0, r3
 800d126:	3708      	adds	r7, #8
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	4a05      	ldr	r2, [pc, #20]	; (800d14c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	601a      	str	r2, [r3, #0]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7ff fe8f 	bl	800ce60 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	4618      	mov	r0, r3
 800d146:	3708      	adds	r7, #8
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	0802a2b4 	.word	0x0802a2b4

0800d150 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800d150:	b580      	push	{r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f7ff ffe7 	bl	800d12c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800d15e:	2138      	movs	r1, #56	; 0x38
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f017 fd4e 	bl	8024c02 <_ZdlPvj>
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	4618      	mov	r0, r3
 800d16a:	3708      	adds	r7, #8
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 800d170:	b580      	push	{r7, lr}
 800d172:	b082      	sub	sp, #8
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	4a06      	ldr	r2, [pc, #24]	; (800d194 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	601a      	str	r2, [r3, #0]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	3304      	adds	r3, #4
 800d182:	4618      	mov	r0, r3
 800d184:	f7ff fcc4 	bl	800cb10 <_ZN8touchgfx9ContainerD1Ev>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	4618      	mov	r0, r3
 800d18c:	3708      	adds	r7, #8
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
 800d192:	bf00      	nop
 800d194:	0802a8d0 	.word	0x0802a8d0

0800d198 <_ZN8touchgfx6ScreenD0Ev>:
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f7ff ffe5 	bl	800d170 <_ZN8touchgfx6ScreenD1Ev>
 800d1a6:	213c      	movs	r1, #60	; 0x3c
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f017 fd2a 	bl	8024c02 <_ZdlPvj>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3708      	adds	r7, #8
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 800d1b8:	b480      	push	{r7}
 800d1ba:	b083      	sub	sp, #12
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	bf00      	nop
 800d1c2:	370c      	adds	r7, #12
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ca:	4770      	bx	lr

0800d1cc <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	bf00      	nop
 800d1d6:	370c      	adds	r7, #12
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1de:	4770      	bx	lr

0800d1e0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 800d1e0:	b480      	push	{r7}
 800d1e2:	b083      	sub	sp, #12
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	bf00      	nop
 800d1ea:	370c      	adds	r7, #12
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr

0800d1f4 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800d1f4:	b480      	push	{r7}
 800d1f6:	b083      	sub	sp, #12
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
    {
    }
 800d1fc:	bf00      	nop
 800d1fe:	370c      	adds	r7, #12
 800d200:	46bd      	mov	sp, r7
 800d202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d206:	4770      	bx	lr

0800d208 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800d208:	b480      	push	{r7}
 800d20a:	b083      	sub	sp, #12
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	460b      	mov	r3, r1
 800d212:	70fb      	strb	r3, [r7, #3]
    {
    }
 800d214:	bf00      	nop
 800d216:	370c      	adds	r7, #12
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	3304      	adds	r3, #4
 800d22e:	6839      	ldr	r1, [r7, #0]
 800d230:	4618      	mov	r0, r3
 800d232:	f007 fd4f 	bl	8014cd4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800d236:	bf00      	nop
 800d238:	3708      	adds	r7, #8
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
	...

0800d240 <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destuctor.
     */
    virtual ~DrawableListItemsInterface()
 800d240:	b480      	push	{r7}
 800d242:	b083      	sub	sp, #12
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
    {
 800d248:	4a04      	ldr	r2, [pc, #16]	; (800d25c <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev+0x1c>)
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	601a      	str	r2, [r3, #0]
    }
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	4618      	mov	r0, r3
 800d252:	370c      	adds	r7, #12
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr
 800d25c:	08027940 	.word	0x08027940

0800d260 <_ZN8touchgfx26DrawableListItemsInterfaceD0Ev>:
    virtual ~DrawableListItemsInterface()
 800d260:	b580      	push	{r7, lr}
 800d262:	b082      	sub	sp, #8
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
    }
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f7ff ffe9 	bl	800d240 <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev>
 800d26e:	2104      	movs	r1, #4
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f017 fcc6 	bl	8024c02 <_ZdlPvj>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	4618      	mov	r0, r3
 800d27a:	3708      	adds	r7, #8
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <_ZN8touchgfx10ScrollBase10initializeEv>:
     *
     * @brief Initializes the contents of all drawables.
     *
     *        Initializes the contents of all drawables.
     */
    virtual void initialize()
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
    {
        list.refreshDrawables();
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	332c      	adds	r3, #44	; 0x2c
 800d28c:	4618      	mov	r0, r3
 800d28e:	f007 f80c 	bl	80142aa <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
    }
 800d292:	bf00      	nop
 800d294:	3708      	adds	r7, #8
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}

0800d29a <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the AbstractButton.
     *
     * @see GenericCallback
     */
    void setAction(GenericCallback< const AbstractButton& >& callback)
 800d29a:	b480      	push	{r7}
 800d29c:	b083      	sub	sp, #12
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	6078      	str	r0, [r7, #4]
 800d2a2:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	683a      	ldr	r2, [r7, #0]
 800d2a8:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800d2aa:	bf00      	nop
 800d2ac:	370c      	adds	r7, #12
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b4:	4770      	bx	lr
	...

0800d2b8 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b082      	sub	sp, #8
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	4a05      	ldr	r2, [pc, #20]	; (800d2d8 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	601a      	str	r2, [r3, #0]
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f7ff fc55 	bl	800cb78 <_ZN8touchgfx6WidgetD1Ev>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3708      	adds	r7, #8
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	0802a054 	.word	0x0802a054

0800d2dc <_ZN8touchgfx14AbstractButtonD0Ev>:
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b082      	sub	sp, #8
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f7ff ffe7 	bl	800d2b8 <_ZN8touchgfx14AbstractButtonD1Ev>
 800d2ea:	2130      	movs	r1, #48	; 0x30
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f017 fc88 	bl	8024c02 <_ZdlPvj>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3708      	adds	r7, #8
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <_ZN8touchgfx6ButtonD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Button() { }
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	4a05      	ldr	r2, [pc, #20]	; (800d31c <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	601a      	str	r2, [r3, #0]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7ff ffd3 	bl	800d2b8 <_ZN8touchgfx14AbstractButtonD1Ev>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	4618      	mov	r0, r3
 800d316:	3708      	adds	r7, #8
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}
 800d31c:	0802a210 	.word	0x0802a210

0800d320 <_ZN8touchgfx6ButtonD0Ev>:
 800d320:	b580      	push	{r7, lr}
 800d322:	b082      	sub	sp, #8
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f7ff ffe7 	bl	800d2fc <_ZN8touchgfx6ButtonD1Ev>
 800d32e:	2134      	movs	r1, #52	; 0x34
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f017 fc66 	bl	8024c02 <_ZdlPvj>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	4618      	mov	r0, r3
 800d33a:	3708      	adds	r7, #8
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>:
     * @note Changing this does not automatically yield a redraw.
     * @note The value will be overwritten by calling.
     *
     * @param x The new x value, relative to the background bitmap. A negative value is allowed.
     */
    void setIconX(int16_t x)
 800d340:	b480      	push	{r7}
 800d342:	b083      	sub	sp, #12
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	460b      	mov	r3, r1
 800d34a:	807b      	strh	r3, [r7, #2]
    {
        iconX = x;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	887a      	ldrh	r2, [r7, #2]
 800d350:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 800d352:	bf00      	nop
 800d354:	370c      	adds	r7, #12
 800d356:	46bd      	mov	sp, r7
 800d358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35c:	4770      	bx	lr

0800d35e <_ZN8touchgfx14ButtonWithIcon8setIconYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the background bitmap. A negative value is allowed.
     */
    void setIconY(int16_t y)
 800d35e:	b480      	push	{r7}
 800d360:	b083      	sub	sp, #12
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
 800d366:	460b      	mov	r3, r1
 800d368:	807b      	strh	r3, [r7, #2]
    {
        iconY = y;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	887a      	ldrh	r2, [r7, #2]
 800d36e:	875a      	strh	r2, [r3, #58]	; 0x3a
    }
 800d370:	bf00      	nop
 800d372:	370c      	adds	r7, #12
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr

0800d37c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the background bitmap. A negative value is allowed.
     * @param y The new y value, relative to the background bitmap. A negative value is allowed.
     */
    void setIconXY(int16_t x, int16_t y)
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b082      	sub	sp, #8
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	460b      	mov	r3, r1
 800d386:	807b      	strh	r3, [r7, #2]
 800d388:	4613      	mov	r3, r2
 800d38a:	803b      	strh	r3, [r7, #0]
    {
        setIconX(x);
 800d38c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d390:	4619      	mov	r1, r3
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f7ff ffd4 	bl	800d340 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>
        setIconY(y);
 800d398:	f9b7 3000 	ldrsh.w	r3, [r7]
 800d39c:	4619      	mov	r1, r3
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f7ff ffdd 	bl	800d35e <_ZN8touchgfx14ButtonWithIcon8setIconYEs>
    }
 800d3a4:	bf00      	nop
 800d3a6:	3708      	adds	r7, #8
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <_ZN8touchgfx4ViewI13MenuPresenterED1Ev>:
class View : public Screen
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b082      	sub	sp, #8
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	4a05      	ldr	r2, [pc, #20]	; (800d3cc <_ZN8touchgfx4ViewI13MenuPresenterED1Ev+0x20>)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	601a      	str	r2, [r3, #0]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7ff fed7 	bl	800d170 <_ZN8touchgfx6ScreenD1Ev>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3708      	adds	r7, #8
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}
 800d3cc:	080278f4 	.word	0x080278f4

0800d3d0 <_ZN8touchgfx4ViewI13MenuPresenterED0Ev>:
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b082      	sub	sp, #8
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f7ff ffe7 	bl	800d3ac <_ZN8touchgfx4ViewI13MenuPresenterED1Ev>
 800d3de:	2140      	movs	r1, #64	; 0x40
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f017 fc0e 	bl	8024c02 <_ZdlPvj>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	3708      	adds	r7, #8
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}

0800d3f0 <_ZN12MenuViewBaseD1Ev>:

class MenuViewBase : public touchgfx::View<MenuPresenter>
{
public:
    MenuViewBase();
    virtual ~MenuViewBase() {}
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	4a1e      	ldr	r2, [pc, #120]	; (800d474 <_ZN12MenuViewBaseD1Ev+0x84>)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	601a      	str	r2, [r3, #0]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 800d404:	4618      	mov	r0, r3
 800d406:	f000 fbbb 	bl	800db80 <_ZN8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssED1Ev>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 800d410:	4618      	mov	r0, r3
 800d412:	f000 fbd7 	bl	800dbc4 <_ZN8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800d41c:	4618      	mov	r0, r3
 800d41e:	f7ff fceb 	bl	800cdf8 <_ZN8touchgfx8TextAreaD1Ev>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 800d428:	4618      	mov	r0, r3
 800d42a:	f000 fbed 	bl	800dc08 <_ZN8touchgfx14ButtonWithIconD1Ev>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800d434:	4618      	mov	r0, r3
 800d436:	f000 fa59 	bl	800d8ec <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EED1Ev>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	33c4      	adds	r3, #196	; 0xc4
 800d43e:	4618      	mov	r0, r3
 800d440:	f007 fb83 	bl	8014b4a <_ZN8touchgfx11ScrollWheelD1Ev>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	3398      	adds	r3, #152	; 0x98
 800d448:	4618      	mov	r0, r3
 800d44a:	f7ff fe4d 	bl	800d0e8 <_ZN8touchgfx5ImageD1Ev>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	336c      	adds	r3, #108	; 0x6c
 800d452:	4618      	mov	r0, r3
 800d454:	f7ff fe48 	bl	800d0e8 <_ZN8touchgfx5ImageD1Ev>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	3340      	adds	r3, #64	; 0x40
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7ff fe43 	bl	800d0e8 <_ZN8touchgfx5ImageD1Ev>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	4618      	mov	r0, r3
 800d466:	f7ff ffa1 	bl	800d3ac <_ZN8touchgfx4ViewI13MenuPresenterED1Ev>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	4618      	mov	r0, r3
 800d46e:	3708      	adds	r7, #8
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}
 800d474:	08027858 	.word	0x08027858

0800d478 <_ZN12MenuViewBaseD0Ev>:
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f7ff ffb5 	bl	800d3f0 <_ZN12MenuViewBaseD1Ev>
 800d486:	f44f 61cf 	mov.w	r1, #1656	; 0x678
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f017 fbb9 	bl	8024c02 <_ZdlPvj>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	4618      	mov	r0, r3
 800d494:	3708      	adds	r7, #8
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}

0800d49a <_ZN12MenuViewBase21scrollWheelUpdateItemER13MenuContainers>:
    virtual void setupScreen();

    virtual void scrollWheelUpdateItem(MenuContainer& item, int16_t itemIndex)
 800d49a:	b480      	push	{r7}
 800d49c:	b085      	sub	sp, #20
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	60f8      	str	r0, [r7, #12]
 800d4a2:	60b9      	str	r1, [r7, #8]
 800d4a4:	4613      	mov	r3, r2
 800d4a6:	80fb      	strh	r3, [r7, #6]
    {
        // Override and implement this function in Menu
    }
 800d4a8:	bf00      	nop
 800d4aa:	3714      	adds	r7, #20
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <_ZN12MenuViewBase15ButtonOKClickedEv>:

    /*
     * Virtual Action Handlers
     */
    virtual void ButtonOKClicked()
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Menu
    }
 800d4bc:	bf00      	nop
 800d4be:	370c      	adds	r7, #12
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr

0800d4c8 <_ZN12MenuViewBaseC1Ev>:
#include <gui_generated/menu_screen/MenuViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

MenuViewBase::MenuViewBase() :
 800d4c8:	b590      	push	{r4, r7, lr}
 800d4ca:	b095      	sub	sp, #84	; 0x54
 800d4cc:	af02      	add	r7, sp, #8
 800d4ce:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &MenuViewBase::buttonCallbackHandler),
    updateItemCallback(this, &MenuViewBase::updateItemCallbackHandler)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f000 fa40 	bl	800d958 <_ZN8touchgfx4ViewI13MenuPresenterEC1Ev>
 800d4d8:	4ac8      	ldr	r2, [pc, #800]	; (800d7fc <_ZN12MenuViewBaseC1Ev+0x334>)
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	601a      	str	r2, [r3, #0]
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800d4e4:	f107 030c 	add.w	r3, r7, #12
 800d4e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7ff f9a4 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800d4f2:	f107 030c 	add.w	r3, r7, #12
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	4620      	mov	r0, r4
 800d4fa:	f7ff fb83 	bl	800cc04 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800d504:	f107 0310 	add.w	r3, r7, #16
 800d508:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d50c:	4618      	mov	r0, r3
 800d50e:	f7ff f994 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800d512:	f107 0310 	add.w	r3, r7, #16
 800d516:	4619      	mov	r1, r3
 800d518:	4620      	mov	r0, r4
 800d51a:	f7ff fb73 	bl	800cc04 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800d524:	f107 0314 	add.w	r3, r7, #20
 800d528:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7ff f984 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800d532:	f107 0314 	add.w	r3, r7, #20
 800d536:	4619      	mov	r1, r3
 800d538:	4620      	mov	r0, r4
 800d53a:	f7ff fb63 	bl	800cc04 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	33c4      	adds	r3, #196	; 0xc4
 800d542:	4618      	mov	r0, r3
 800d544:	f007 fb24 	bl	8014b90 <_ZN8touchgfx11ScrollWheelC1Ev>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800d54e:	4618      	mov	r0, r3
 800d550:	f000 fa28 	bl	800d9a4 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EEC1Ev>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 800d55a:	4618      	mov	r0, r3
 800d55c:	f00a fb50 	bl	8017c00 <_ZN8touchgfx14ButtonWithIconC1Ev>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800d566:	4618      	mov	r0, r3
 800d568:	f7ff fb94 	bl	800cc94 <_ZN8touchgfx8TextAreaC1Ev>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f503 60cb 	add.w	r0, r3, #1624	; 0x658
 800d572:	4ba3      	ldr	r3, [pc, #652]	; (800d800 <_ZN12MenuViewBaseC1Ev+0x338>)
 800d574:	61bb      	str	r3, [r7, #24]
 800d576:	2300      	movs	r3, #0
 800d578:	61fb      	str	r3, [r7, #28]
 800d57a:	f107 0318 	add.w	r3, r7, #24
 800d57e:	cb0c      	ldmia	r3, {r2, r3}
 800d580:	6879      	ldr	r1, [r7, #4]
 800d582:	f000 fa3d 	bl	800da00 <_ZN8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f503 60cd 	add.w	r0, r3, #1640	; 0x668
 800d58c:	4b9d      	ldr	r3, [pc, #628]	; (800d804 <_ZN12MenuViewBaseC1Ev+0x33c>)
 800d58e:	623b      	str	r3, [r7, #32]
 800d590:	2300      	movs	r3, #0
 800d592:	627b      	str	r3, [r7, #36]	; 0x24
 800d594:	f107 0320 	add.w	r3, r7, #32
 800d598:	cb0c      	ldmia	r3, {r2, r3}
 800d59a:	6879      	ldr	r1, [r7, #4]
 800d59c:	f000 fa60 	bl	800da60 <_ZN8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssEC1EPS1_MS1_FvS3_ssE>
{

    imageBg.setXY(0, 0);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	3340      	adds	r3, #64	; 0x40
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	2100      	movs	r1, #0
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7ff f9c3 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    imageBg.setBitmap(touchgfx::Bitmap(BITMAP_GREEN_POLYGONS_BACKGROUND_480X272_ID));
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800d5b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d5b8:	2111      	movs	r1, #17
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f7ff f93d 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800d5c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	4620      	mov	r0, r4
 800d5c8:	f00a fb3e 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    image1.setXY(50, 70);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	336c      	adds	r3, #108	; 0x6c
 800d5d0:	2246      	movs	r2, #70	; 0x46
 800d5d2:	2132      	movs	r1, #50	; 0x32
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f7ff f9ad 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_WHEEL_SELECTOR_BACKGROUND_380_GREEN_ID));
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800d5e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d5e4:	2121      	movs	r1, #33	; 0x21
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7ff f927 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800d5ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	f00a fb28 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    image2.setXY(180, 60);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	3398      	adds	r3, #152	; 0x98
 800d5fc:	223c      	movs	r2, #60	; 0x3c
 800d5fe:	21b4      	movs	r1, #180	; 0xb4
 800d600:	4618      	mov	r0, r3
 800d602:	f7ff f997 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_WHEEL_SELECTOR_OVERLAY_380_GREEN_ID));
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800d60c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d610:	2122      	movs	r1, #34	; 0x22
 800d612:	4618      	mov	r0, r3
 800d614:	f7ff f911 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800d618:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d61c:	4619      	mov	r1, r3
 800d61e:	4620      	mov	r0, r4
 800d620:	f00a fb12 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    scrollWheel.setPosition(50, 76, 380, 88);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 800d62a:	2358      	movs	r3, #88	; 0x58
 800d62c:	9300      	str	r3, [sp, #0]
 800d62e:	f44f 73be 	mov.w	r3, #380	; 0x17c
 800d632:	224c      	movs	r2, #76	; 0x4c
 800d634:	2132      	movs	r1, #50	; 0x32
 800d636:	f7fc fca9 	bl	8009f8c <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollWheel.setHorizontal(true);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	33c4      	adds	r3, #196	; 0xc4
 800d63e:	2101      	movs	r1, #1
 800d640:	4618      	mov	r0, r3
 800d642:	f007 fa12 	bl	8014a6a <_ZN8touchgfx10ScrollBase13setHorizontalEb>
    scrollWheel.setCircular(true);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	33c4      	adds	r3, #196	; 0xc4
 800d64a:	2101      	movs	r1, #1
 800d64c:	4618      	mov	r0, r3
 800d64e:	f007 fa65 	bl	8014b1c <_ZN8touchgfx10ScrollBase11setCircularEb>
    scrollWheel.setEasingEquation(touchgfx::EasingEquations::linearEaseOut);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	33c4      	adds	r3, #196	; 0xc4
 800d656:	496c      	ldr	r1, [pc, #432]	; (800d808 <_ZN12MenuViewBaseC1Ev+0x340>)
 800d658:	4618      	mov	r0, r3
 800d65a:	f007 f956 	bl	801490a <_ZN8touchgfx10ScrollBase17setEasingEquationEPFstsstE>
    scrollWheel.setSwipeAcceleration(10);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	33c4      	adds	r3, #196	; 0xc4
 800d662:	210a      	movs	r1, #10
 800d664:	4618      	mov	r0, r3
 800d666:	f007 f953 	bl	8014910 <_ZN8touchgfx10ScrollBase20setSwipeAccelerationEt>
    scrollWheel.setDragAcceleration(10);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	33c4      	adds	r3, #196	; 0xc4
 800d66e:	210a      	movs	r1, #10
 800d670:	4618      	mov	r0, r3
 800d672:	f007 f950 	bl	8014916 <_ZN8touchgfx10ScrollBase19setDragAccelerationEt>
    scrollWheel.setNumberOfItems(7);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	33c4      	adds	r3, #196	; 0xc4
 800d67a:	2107      	movs	r1, #7
 800d67c:	4618      	mov	r0, r3
 800d67e:	f007 f895 	bl	80147ac <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs>
    scrollWheel.setSelectedItemOffset(130);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	33c4      	adds	r3, #196	; 0xc4
 800d686:	2182      	movs	r1, #130	; 0x82
 800d688:	4618      	mov	r0, r3
 800d68a:	f006 fe9c 	bl	80143c6 <_ZN8touchgfx15ScrollWheelBase21setSelectedItemOffsetEs>
    scrollWheel.setDrawableSize(120, 0);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	33c4      	adds	r3, #196	; 0xc4
 800d692:	2200      	movs	r2, #0
 800d694:	2178      	movs	r1, #120	; 0x78
 800d696:	4618      	mov	r0, r3
 800d698:	f007 f930 	bl	80148fc <_ZN8touchgfx10ScrollBase15setDrawableSizeEss>
    scrollWheel.setDrawables(scrollWheelListItems, updateItemCallback);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f503 71c2 	add.w	r1, r3, #388	; 0x184
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	f007 fa53 	bl	8014b5a <_ZN8touchgfx11ScrollWheel12setDrawablesERNS_26DrawableListItemsInterfaceERNS_15GenericCallbackIPS1_ssEE>
    scrollWheel.animateToItem(1, 0);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	33c4      	adds	r3, #196	; 0xc4
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	2101      	movs	r1, #1
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f007 f821 	bl	8014704 <_ZN8touchgfx10ScrollBase13animateToItemEss>

    buttonOk.setXY(175, 194);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 800d6c8:	22c2      	movs	r2, #194	; 0xc2
 800d6ca:	21af      	movs	r1, #175	; 0xaf
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7ff f931 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    buttonOk.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_EMPTY_RELEASED_ID), touchgfx::Bitmap(BITMAP_BUTTON_EMPTY_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICONS8_OK_60_ID), touchgfx::Bitmap(BITMAP_ICONS8_OK_60_ID));
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f503 64bd 	add.w	r4, r3, #1512	; 0x5e8
 800d6d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d6dc:	210b      	movs	r1, #11
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7ff f8ab 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800d6e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d6e8:	210a      	movs	r1, #10
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7ff f8a5 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800d6f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d6f4:	2118      	movs	r1, #24
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f7ff f89f 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800d6fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d700:	2118      	movs	r1, #24
 800d702:	4618      	mov	r0, r3
 800d704:	f7ff f899 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800d708:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800d70c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800d710:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800d714:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d718:	9300      	str	r3, [sp, #0]
 800d71a:	4603      	mov	r3, r0
 800d71c:	4620      	mov	r0, r4
 800d71e:	f00a f9cd 	bl	8017abc <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    buttonOk.setIconXY(49, 12);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 800d728:	220c      	movs	r2, #12
 800d72a:	2131      	movs	r1, #49	; 0x31
 800d72c:	4618      	mov	r0, r3
 800d72e:	f7ff fe25 	bl	800d37c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    buttonOk.setAction(buttonCallback);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f503 62bd 	add.w	r2, r3, #1512	; 0x5e8
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f503 63cb 	add.w	r3, r3, #1624	; 0x658
 800d73e:	4619      	mov	r1, r3
 800d740:	4610      	mov	r0, r2
 800d742:	f7ff fdaa 	bl	800d29a <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textArea.setXY(172, 17);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800d74c:	2211      	movs	r2, #17
 800d74e:	21ac      	movs	r1, #172	; 0xac
 800d750:	4618      	mov	r0, r3
 800d752:	f7ff f8ef 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    textArea.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f203 6424 	addw	r4, r3, #1572	; 0x624
 800d75c:	22ff      	movs	r2, #255	; 0xff
 800d75e:	21ff      	movs	r1, #255	; 0xff
 800d760:	20ff      	movs	r0, #255	; 0xff
 800d762:	f7ff fbef 	bl	800cf44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800d766:	4603      	mov	r3, r0
 800d768:	4619      	mov	r1, r3
 800d76a:	4620      	mov	r0, r4
 800d76c:	f7ff fad5 	bl	800cd1a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea.setLinespacing(0);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800d776:	2100      	movs	r1, #0
 800d778:	4618      	mov	r0, r3
 800d77a:	f7ff fb21 	bl	800cdc0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f203 6424 	addw	r4, r3, #1572	; 0x624
 800d784:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d788:	210a      	movs	r1, #10
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7ff fa5c 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 800d790:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 800d794:	4620      	mov	r0, r4
 800d796:	f00a f843 	bl	8017820 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(imageBg);
 800d79a:	687a      	ldr	r2, [r7, #4]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	3340      	adds	r3, #64	; 0x40
 800d7a0:	4619      	mov	r1, r3
 800d7a2:	4610      	mov	r0, r2
 800d7a4:	f7ff fd3c 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 800d7a8:	687a      	ldr	r2, [r7, #4]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	336c      	adds	r3, #108	; 0x6c
 800d7ae:	4619      	mov	r1, r3
 800d7b0:	4610      	mov	r0, r2
 800d7b2:	f7ff fd35 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image2);
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	3398      	adds	r3, #152	; 0x98
 800d7bc:	4619      	mov	r1, r3
 800d7be:	4610      	mov	r0, r2
 800d7c0:	f7ff fd2e 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(scrollWheel);
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	33c4      	adds	r3, #196	; 0xc4
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	4610      	mov	r0, r2
 800d7ce:	f7ff fd27 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonOk);
 800d7d2:	687a      	ldr	r2, [r7, #4]
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 800d7da:	4619      	mov	r1, r3
 800d7dc:	4610      	mov	r0, r2
 800d7de:	f7ff fd1f 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea);
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800d7ea:	4619      	mov	r1, r3
 800d7ec:	4610      	mov	r0, r2
 800d7ee:	f7ff fd17 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	374c      	adds	r7, #76	; 0x4c
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd90      	pop	{r4, r7, pc}
 800d7fc:	08027858 	.word	0x08027858
 800d800:	0800d86d 	.word	0x0800d86d
 800d804:	0800d897 	.word	0x0800d897
 800d808:	0801a17d 	.word	0x0801a17d

0800d80c <_ZN12MenuViewBase11setupScreenEv>:

void MenuViewBase::setupScreen()
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b084      	sub	sp, #16
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
    scrollWheel.initialize();
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	33c4      	adds	r3, #196	; 0xc4
 800d818:	4618      	mov	r0, r3
 800d81a:	f7ff fd31 	bl	800d280 <_ZN8touchgfx10ScrollBase10initializeEv>
    for (int i = 0; i < scrollWheelListItems.getNumberOfDrawables(); i++)
 800d81e:	2300      	movs	r3, #0
 800d820:	60fb      	str	r3, [r7, #12]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800d828:	4618      	mov	r0, r3
 800d82a:	f000 f939 	bl	800daa0 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EE20getNumberOfDrawablesEv>
 800d82e:	4603      	mov	r3, r0
 800d830:	461a      	mov	r2, r3
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	4293      	cmp	r3, r2
 800d836:	bfb4      	ite	lt
 800d838:	2301      	movlt	r3, #1
 800d83a:	2300      	movge	r3, #0
 800d83c:	b2db      	uxtb	r3, r3
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d010      	beq.n	800d864 <_ZN12MenuViewBase11setupScreenEv+0x58>
    {
        scrollWheelListItems[i].initialize();
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800d848:	68f9      	ldr	r1, [r7, #12]
 800d84a:	4618      	mov	r0, r3
 800d84c:	f000 f934 	bl	800dab8 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EEixEi>
 800d850:	4602      	mov	r2, r0
 800d852:	6813      	ldr	r3, [r2, #0]
 800d854:	3384      	adds	r3, #132	; 0x84
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	4610      	mov	r0, r2
 800d85a:	4798      	blx	r3
    for (int i = 0; i < scrollWheelListItems.getNumberOfDrawables(); i++)
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	3301      	adds	r3, #1
 800d860:	60fb      	str	r3, [r7, #12]
 800d862:	e7de      	b.n	800d822 <_ZN12MenuViewBase11setupScreenEv+0x16>
    }
}
 800d864:	bf00      	nop
 800d866:	3710      	adds	r7, #16
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <_ZN12MenuViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MenuViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	6039      	str	r1, [r7, #0]
    if (&src == &buttonOk)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 800d87c:	683a      	ldr	r2, [r7, #0]
 800d87e:	429a      	cmp	r2, r3
 800d880:	d105      	bne.n	800d88e <_ZN12MenuViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //InteractionButtonOKClicked
        //When buttonOk clicked call virtual function
        //Call ButtonOKClicked
        ButtonOKClicked();
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	3330      	adds	r3, #48	; 0x30
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	4798      	blx	r3
    }
}
 800d88e:	bf00      	nop
 800d890:	3708      	adds	r7, #8
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}

0800d896 <_ZN12MenuViewBase25updateItemCallbackHandlerEPN8touchgfx26DrawableListItemsInterfaceEss>:

void MenuViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
 800d896:	b580      	push	{r7, lr}
 800d898:	b086      	sub	sp, #24
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	60f8      	str	r0, [r7, #12]
 800d89e:	60b9      	str	r1, [r7, #8]
 800d8a0:	4611      	mov	r1, r2
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	460b      	mov	r3, r1
 800d8a6:	80fb      	strh	r3, [r7, #6]
 800d8a8:	4613      	mov	r3, r2
 800d8aa:	80bb      	strh	r3, [r7, #4]
    if (items == &scrollWheelListItems)
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800d8b2:	68ba      	ldr	r2, [r7, #8]
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d114      	bne.n	800d8e2 <_ZN12MenuViewBase25updateItemCallbackHandlerEPN8touchgfx26DrawableListItemsInterfaceEss+0x4c>
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	3308      	adds	r3, #8
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d8c4:	4611      	mov	r1, r2
 800d8c6:	68b8      	ldr	r0, [r7, #8]
 800d8c8:	4798      	blx	r3
 800d8ca:	6178      	str	r0, [r7, #20]
        MenuContainer* cc = (MenuContainer*)d;
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	613b      	str	r3, [r7, #16]
        scrollWheelUpdateItem(*cc, itemIndex);
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	332c      	adds	r3, #44	; 0x2c
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d8dc:	6939      	ldr	r1, [r7, #16]
 800d8de:	68f8      	ldr	r0, [r7, #12]
 800d8e0:	4798      	blx	r3
    }
}
 800d8e2:	bf00      	nop
 800d8e4:	3718      	adds	r7, #24
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
	...

0800d8ec <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EED1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DrawableListItems()
 800d8ec:	b590      	push	{r4, r7, lr}
 800d8ee:	b083      	sub	sp, #12
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
    {
    }
 800d8f4:	4a0e      	ldr	r2, [pc, #56]	; (800d930 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EED1Ev+0x44>)
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	601a      	str	r2, [r3, #0]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	3304      	adds	r3, #4
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d00d      	beq.n	800d91e <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EED1Ev+0x32>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	3304      	adds	r3, #4
 800d906:	f503 648c 	add.w	r4, r3, #1120	; 0x460
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	3304      	adds	r3, #4
 800d90e:	429c      	cmp	r4, r3
 800d910:	d005      	beq.n	800d91e <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EED1Ev+0x32>
 800d912:	3ce0      	subs	r4, #224	; 0xe0
 800d914:	6823      	ldr	r3, [r4, #0]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	4620      	mov	r0, r4
 800d91a:	4798      	blx	r3
 800d91c:	e7f5      	b.n	800d90a <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EED1Ev+0x1e>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	4618      	mov	r0, r3
 800d922:	f7ff fc8d 	bl	800d240 <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	4618      	mov	r0, r3
 800d92a:	370c      	adds	r7, #12
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd90      	pop	{r4, r7, pc}
 800d930:	080278dc 	.word	0x080278dc

0800d934 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EED0Ev>:
    virtual ~DrawableListItems()
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
    }
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f7ff ffd5 	bl	800d8ec <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EED1Ev>
 800d942:	f240 4164 	movw	r1, #1124	; 0x464
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f017 f95b 	bl	8024c02 <_ZdlPvj>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	4618      	mov	r0, r3
 800d950:	3708      	adds	r7, #8
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
	...

0800d958 <_ZN8touchgfx4ViewI13MenuPresenterEC1Ev>:
    View() : presenter(0)
 800d958:	b580      	push	{r7, lr}
 800d95a:	b082      	sub	sp, #8
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	4618      	mov	r0, r3
 800d964:	f00c f9fc 	bl	8019d60 <_ZN8touchgfx6ScreenC1Ev>
 800d968:	4a05      	ldr	r2, [pc, #20]	; (800d980 <_ZN8touchgfx4ViewI13MenuPresenterEC1Ev+0x28>)
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	601a      	str	r2, [r3, #0]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2200      	movs	r2, #0
 800d972:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	4618      	mov	r0, r3
 800d978:	3708      	adds	r7, #8
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	080278f4 	.word	0x080278f4

0800d984 <_ZN8touchgfx26DrawableListItemsInterfaceC1Ev>:
class DrawableListItemsInterface
 800d984:	b480      	push	{r7}
 800d986:	b083      	sub	sp, #12
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	4a04      	ldr	r2, [pc, #16]	; (800d9a0 <_ZN8touchgfx26DrawableListItemsInterfaceC1Ev+0x1c>)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	601a      	str	r2, [r3, #0]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	4618      	mov	r0, r3
 800d996:	370c      	adds	r7, #12
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr
 800d9a0:	08027940 	.word	0x08027940

0800d9a4 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EEC1Ev>:
    DrawableListItems()
 800d9a4:	b5b0      	push	{r4, r5, r7, lr}
 800d9a6:	b082      	sub	sp, #8
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
        : DrawableListItemsInterface()
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7ff ffe8 	bl	800d984 <_ZN8touchgfx26DrawableListItemsInterfaceC1Ev>
 800d9b4:	4a09      	ldr	r2, [pc, #36]	; (800d9dc <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EEC1Ev+0x38>)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	601a      	str	r2, [r3, #0]
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	3304      	adds	r3, #4
 800d9be:	2404      	movs	r4, #4
 800d9c0:	461d      	mov	r5, r3
 800d9c2:	2c00      	cmp	r4, #0
 800d9c4:	db05      	blt.n	800d9d2 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EEC1Ev+0x2e>
 800d9c6:	4628      	mov	r0, r5
 800d9c8:	f003 fbca 	bl	8011160 <_ZN13MenuContainerC1Ev>
 800d9cc:	35e0      	adds	r5, #224	; 0xe0
 800d9ce:	3c01      	subs	r4, #1
 800d9d0:	e7f7      	b.n	800d9c2 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EEC1Ev+0x1e>
    }
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3708      	adds	r7, #8
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bdb0      	pop	{r4, r5, r7, pc}
 800d9dc:	080278dc 	.word	0x080278dc

0800d9e0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800d9e0:	b480      	push	{r7}
 800d9e2:	b083      	sub	sp, #12
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	4a04      	ldr	r2, [pc, #16]	; (800d9fc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	601a      	str	r2, [r3, #0]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	370c      	adds	r7, #12
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr
 800d9fc:	08027928 	.word	0x08027928

0800da00 <_ZN8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800da00:	b580      	push	{r7, lr}
 800da02:	b084      	sub	sp, #16
 800da04:	af00      	add	r7, sp, #0
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	60b9      	str	r1, [r7, #8]
 800da0a:	4639      	mov	r1, r7
 800da0c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	4618      	mov	r0, r3
 800da14:	f7ff ffe4 	bl	800d9e0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800da18:	4a08      	ldr	r2, [pc, #32]	; (800da3c <_ZN8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	68ba      	ldr	r2, [r7, #8]
 800da22:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	3308      	adds	r3, #8
 800da28:	463a      	mov	r2, r7
 800da2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800da2e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	4618      	mov	r0, r3
 800da36:	3710      	adds	r7, #16
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	080278c4 	.word	0x080278c4

0800da40 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssEC1Ev>:
class GenericCallback
 800da40:	b480      	push	{r7}
 800da42:	b083      	sub	sp, #12
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	4a04      	ldr	r2, [pc, #16]	; (800da5c <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssEC1Ev+0x1c>)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	601a      	str	r2, [r3, #0]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	4618      	mov	r0, r3
 800da52:	370c      	adds	r7, #12
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr
 800da5c:	080278ac 	.word	0x080278ac

0800da60 <_ZN8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssEC1EPS1_MS1_FvS3_ssE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_3)(T1, T2, T3))
 800da60:	b580      	push	{r7, lr}
 800da62:	b084      	sub	sp, #16
 800da64:	af00      	add	r7, sp, #0
 800da66:	60f8      	str	r0, [r7, #12]
 800da68:	60b9      	str	r1, [r7, #8]
 800da6a:	4639      	mov	r1, r7
 800da6c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	4618      	mov	r0, r3
 800da74:	f7ff ffe4 	bl	800da40 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssEC1Ev>
 800da78:	4a08      	ldr	r2, [pc, #32]	; (800da9c <_ZN8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssEC1EPS1_MS1_FvS3_ssE+0x3c>)
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	68ba      	ldr	r2, [r7, #8]
 800da82:	605a      	str	r2, [r3, #4]
        this->pmemfun_3 = pmemfun_3;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	3308      	adds	r3, #8
 800da88:	463a      	mov	r2, r7
 800da8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800da8e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	4618      	mov	r0, r3
 800da96:	3710      	adds	r7, #16
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	08027894 	.word	0x08027894

0800daa0 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EE20getNumberOfDrawablesEv>:
    {
        assert(index >= 0 && index < SIZE);
        return element[index];
    }

    virtual int16_t getNumberOfDrawables()
 800daa0:	b480      	push	{r7}
 800daa2:	b083      	sub	sp, #12
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
    {
        return SIZE;
 800daa8:	2305      	movs	r3, #5
    }
 800daaa:	4618      	mov	r0, r3
 800daac:	370c      	adds	r7, #12
 800daae:	46bd      	mov	sp, r7
 800dab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab4:	4770      	bx	lr
	...

0800dab8 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EEixEi>:
    TYPE& operator[](int index)
 800dab8:	b580      	push	{r7, lr}
 800daba:	b082      	sub	sp, #8
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	6039      	str	r1, [r7, #0]
        assert(index >= 0 && index < SIZE);
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	db02      	blt.n	800dace <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EEixEi+0x16>
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	2b04      	cmp	r3, #4
 800dacc:	dd05      	ble.n	800dada <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EEixEi+0x22>
 800dace:	4b09      	ldr	r3, [pc, #36]	; (800daf4 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EEixEi+0x3c>)
 800dad0:	4a09      	ldr	r2, [pc, #36]	; (800daf8 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EEixEi+0x40>)
 800dad2:	2198      	movs	r1, #152	; 0x98
 800dad4:	4809      	ldr	r0, [pc, #36]	; (800dafc <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EEixEi+0x44>)
 800dad6:	f017 f8bf 	bl	8024c58 <__assert_func>
        return element[index];
 800dada:	683a      	ldr	r2, [r7, #0]
 800dadc:	4613      	mov	r3, r2
 800dade:	00db      	lsls	r3, r3, #3
 800dae0:	1a9b      	subs	r3, r3, r2
 800dae2:	015b      	lsls	r3, r3, #5
 800dae4:	687a      	ldr	r2, [r7, #4]
 800dae6:	4413      	add	r3, r2
 800dae8:	3304      	adds	r3, #4
    }
 800daea:	4618      	mov	r0, r3
 800daec:	3708      	adds	r7, #8
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}
 800daf2:	bf00      	nop
 800daf4:	080261a8 	.word	0x080261a8
 800daf8:	080279e4 	.word	0x080279e4
 800dafc:	080261c4 	.word	0x080261c4

0800db00 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800db00:	b480      	push	{r7}
 800db02:	b083      	sub	sp, #12
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
    }
 800db08:	4a04      	ldr	r2, [pc, #16]	; (800db1c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	601a      	str	r2, [r3, #0]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	4618      	mov	r0, r3
 800db12:	370c      	adds	r7, #12
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr
 800db1c:	08027928 	.word	0x08027928

0800db20 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800db20:	b580      	push	{r7, lr}
 800db22:	b082      	sub	sp, #8
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
    }
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f7ff ffe9 	bl	800db00 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800db2e:	2104      	movs	r1, #4
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f017 f866 	bl	8024c02 <_ZdlPvj>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	4618      	mov	r0, r3
 800db3a:	3708      	adds	r7, #8
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev>:
    virtual ~GenericCallback()
 800db40:	b480      	push	{r7}
 800db42:	b083      	sub	sp, #12
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
    }
 800db48:	4a04      	ldr	r2, [pc, #16]	; (800db5c <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev+0x1c>)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	601a      	str	r2, [r3, #0]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	4618      	mov	r0, r3
 800db52:	370c      	adds	r7, #12
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr
 800db5c:	080278ac 	.word	0x080278ac

0800db60 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED0Ev>:
    virtual ~GenericCallback()
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
    }
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f7ff ffe9 	bl	800db40 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev>
 800db6e:	2104      	movs	r1, #4
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f017 f846 	bl	8024c02 <_ZdlPvj>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	4618      	mov	r0, r3
 800db7a:	3708      	adds	r7, #8
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}

0800db80 <_ZN8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssED1Ev>:
struct Callback : public GenericCallback<T1, T2, T3>
 800db80:	b580      	push	{r7, lr}
 800db82:	b082      	sub	sp, #8
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	4a05      	ldr	r2, [pc, #20]	; (800dba0 <_ZN8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssED1Ev+0x20>)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	601a      	str	r2, [r3, #0]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	4618      	mov	r0, r3
 800db92:	f7ff ffd5 	bl	800db40 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev>
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	4618      	mov	r0, r3
 800db9a:	3708      	adds	r7, #8
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}
 800dba0:	08027894 	.word	0x08027894

0800dba4 <_ZN8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssED0Ev>:
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f7ff ffe7 	bl	800db80 <_ZN8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssED1Ev>
 800dbb2:	2110      	movs	r1, #16
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f017 f824 	bl	8024c02 <_ZdlPvj>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3708      	adds	r7, #8
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <_ZN8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b082      	sub	sp, #8
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	4a05      	ldr	r2, [pc, #20]	; (800dbe4 <_ZN8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	601a      	str	r2, [r3, #0]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7ff ff93 	bl	800db00 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3708      	adds	r7, #8
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}
 800dbe4:	080278c4 	.word	0x080278c4

0800dbe8 <_ZN8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f7ff ffe7 	bl	800dbc4 <_ZN8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800dbf6:	2110      	movs	r1, #16
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f017 f802 	bl	8024c02 <_ZdlPvj>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	4618      	mov	r0, r3
 800dc02:	3708      	adds	r7, #8
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <_ZN8touchgfx14ButtonWithIconD1Ev>:
class ButtonWithIcon : public Button
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	4a05      	ldr	r2, [pc, #20]	; (800dc28 <_ZN8touchgfx14ButtonWithIconD1Ev+0x20>)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	601a      	str	r2, [r3, #0]
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7ff fb6f 	bl	800d2fc <_ZN8touchgfx6ButtonD1Ev>
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	4618      	mov	r0, r3
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	0802a330 	.word	0x0802a330

0800dc2c <_ZN8touchgfx14ButtonWithIconD0Ev>:
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f7ff ffe7 	bl	800dc08 <_ZN8touchgfx14ButtonWithIconD1Ev>
 800dc3a:	213c      	movs	r1, #60	; 0x3c
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f016 ffe0 	bl	8024c02 <_ZdlPvj>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	4618      	mov	r0, r3
 800dc46:	3708      	adds	r7, #8
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <_ZN8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssE7executeES3_ss>:
    virtual void execute(T1 t1, T2 t2, T3 t3)
 800dc4c:	b590      	push	{r4, r7, lr}
 800dc4e:	b085      	sub	sp, #20
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	4611      	mov	r1, r2
 800dc58:	461a      	mov	r2, r3
 800dc5a:	460b      	mov	r3, r1
 800dc5c:	80fb      	strh	r3, [r7, #6]
 800dc5e:	4613      	mov	r3, r2
 800dc60:	80bb      	strh	r3, [r7, #4]
        (pobject->*pmemfun_3)(t1, t2, t3);
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	685b      	ldr	r3, [r3, #4]
 800dc66:	68fa      	ldr	r2, [r7, #12]
 800dc68:	68d2      	ldr	r2, [r2, #12]
 800dc6a:	1052      	asrs	r2, r2, #1
 800dc6c:	1898      	adds	r0, r3, r2
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	68db      	ldr	r3, [r3, #12]
 800dc72:	f003 0301 	and.w	r3, r3, #1
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d102      	bne.n	800dc80 <_ZN8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssE7executeES3_ss+0x34>
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	689c      	ldr	r4, [r3, #8]
 800dc7e:	e00a      	b.n	800dc96 <_ZN8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssE7executeES3_ss+0x4a>
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	68fa      	ldr	r2, [r7, #12]
 800dc86:	68d2      	ldr	r2, [r2, #12]
 800dc88:	1052      	asrs	r2, r2, #1
 800dc8a:	4413      	add	r3, r2
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	68fa      	ldr	r2, [r7, #12]
 800dc90:	6892      	ldr	r2, [r2, #8]
 800dc92:	4413      	add	r3, r2
 800dc94:	681c      	ldr	r4, [r3, #0]
 800dc96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800dc9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800dc9e:	68b9      	ldr	r1, [r7, #8]
 800dca0:	47a0      	blx	r4
    }
 800dca2:	bf00      	nop
 800dca4:	3714      	adds	r7, #20
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd90      	pop	{r4, r7, pc}

0800dcaa <_ZNK8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv>:
    virtual bool isValid() const
 800dcaa:	b480      	push	{r7}
 800dcac:	b083      	sub	sp, #12
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_3 != 0);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	685b      	ldr	r3, [r3, #4]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d010      	beq.n	800dcdc <_ZNK8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x32>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	689b      	ldr	r3, [r3, #8]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d107      	bne.n	800dcd2 <_ZNK8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x28>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	68db      	ldr	r3, [r3, #12]
 800dcc6:	f003 0301 	and.w	r3, r3, #1
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d101      	bne.n	800dcd2 <_ZNK8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x28>
 800dcce:	2301      	movs	r3, #1
 800dcd0:	e000      	b.n	800dcd4 <_ZNK8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x2a>
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	2b01      	cmp	r3, #1
 800dcd6:	d001      	beq.n	800dcdc <_ZNK8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x32>
 800dcd8:	2301      	movs	r3, #1
 800dcda:	e000      	b.n	800dcde <_ZNK8touchgfx8CallbackI12MenuViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x34>
 800dcdc:	2300      	movs	r3, #0
    }
 800dcde:	4618      	mov	r0, r3
 800dce0:	370c      	adds	r7, #12
 800dce2:	46bd      	mov	sp, r7
 800dce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce8:	4770      	bx	lr

0800dcea <_ZN8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800dcea:	b580      	push	{r7, lr}
 800dcec:	b082      	sub	sp, #8
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	6078      	str	r0, [r7, #4]
 800dcf2:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	685b      	ldr	r3, [r3, #4]
 800dcf8:	687a      	ldr	r2, [r7, #4]
 800dcfa:	68d2      	ldr	r2, [r2, #12]
 800dcfc:	1052      	asrs	r2, r2, #1
 800dcfe:	1898      	adds	r0, r3, r2
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	68db      	ldr	r3, [r3, #12]
 800dd04:	f003 0301 	and.w	r3, r3, #1
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d102      	bne.n	800dd12 <_ZN8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	689b      	ldr	r3, [r3, #8]
 800dd10:	e00a      	b.n	800dd28 <_ZN8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	687a      	ldr	r2, [r7, #4]
 800dd18:	68d2      	ldr	r2, [r2, #12]
 800dd1a:	1052      	asrs	r2, r2, #1
 800dd1c:	4413      	add	r3, r2
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	687a      	ldr	r2, [r7, #4]
 800dd22:	6892      	ldr	r2, [r2, #8]
 800dd24:	4413      	add	r3, r2
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	6839      	ldr	r1, [r7, #0]
 800dd2a:	4798      	blx	r3
    }
 800dd2c:	bf00      	nop
 800dd2e:	3708      	adds	r7, #8
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}

0800dd34 <_ZNK8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800dd34:	b480      	push	{r7}
 800dd36:	b083      	sub	sp, #12
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	685b      	ldr	r3, [r3, #4]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d010      	beq.n	800dd66 <_ZNK8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	689b      	ldr	r3, [r3, #8]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d107      	bne.n	800dd5c <_ZNK8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	68db      	ldr	r3, [r3, #12]
 800dd50:	f003 0301 	and.w	r3, r3, #1
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d101      	bne.n	800dd5c <_ZNK8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800dd58:	2301      	movs	r3, #1
 800dd5a:	e000      	b.n	800dd5e <_ZNK8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	d001      	beq.n	800dd66 <_ZNK8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800dd62:	2301      	movs	r3, #1
 800dd64:	e000      	b.n	800dd68 <_ZNK8touchgfx8CallbackI12MenuViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800dd66:	2300      	movs	r3, #0
    }
 800dd68:	4618      	mov	r0, r3
 800dd6a:	370c      	adds	r7, #12
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd72:	4770      	bx	lr

0800dd74 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EE11getDrawableEs>:
    virtual Drawable* getDrawable(int16_t index)
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	807b      	strh	r3, [r7, #2]
        assert(index >= 0 && index < SIZE);
 800dd80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	db03      	blt.n	800dd90 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EE11getDrawableEs+0x1c>
 800dd88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd8c:	2b04      	cmp	r3, #4
 800dd8e:	dd05      	ble.n	800dd9c <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EE11getDrawableEs+0x28>
 800dd90:	4b09      	ldr	r3, [pc, #36]	; (800ddb8 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EE11getDrawableEs+0x44>)
 800dd92:	4a0a      	ldr	r2, [pc, #40]	; (800ddbc <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EE11getDrawableEs+0x48>)
 800dd94:	2187      	movs	r1, #135	; 0x87
 800dd96:	480a      	ldr	r0, [pc, #40]	; (800ddc0 <_ZN8touchgfx17DrawableListItemsI13MenuContainerLi5EE11getDrawableEs+0x4c>)
 800dd98:	f016 ff5e 	bl	8024c58 <__assert_func>
        return &element[index];
 800dd9c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800dda0:	4613      	mov	r3, r2
 800dda2:	00db      	lsls	r3, r3, #3
 800dda4:	1a9b      	subs	r3, r3, r2
 800dda6:	015b      	lsls	r3, r3, #5
 800dda8:	687a      	ldr	r2, [r7, #4]
 800ddaa:	4413      	add	r3, r2
 800ddac:	3304      	adds	r3, #4
    }
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3708      	adds	r7, #8
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	080261a8 	.word	0x080261a8
 800ddbc:	08027950 	.word	0x08027950
 800ddc0:	080261c4 	.word	0x080261c4

0800ddc4 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 800ddc4:	b480      	push	{r7}
 800ddc6:	b083      	sub	sp, #12
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	460b      	mov	r3, r1
 800ddce:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	78fa      	ldrb	r2, [r7, #3]
 800ddd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800ddd8:	bf00      	nop
 800ddda:	370c      	adds	r7, #12
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr

0800dde4 <_ZN8touchgfx14AbstractButtonC1Ev>:
    AbstractButton() : Widget(), action(), pressed(false)
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b082      	sub	sp, #8
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7fe feb0 	bl	800cb54 <_ZN8touchgfx6WidgetC1Ev>
 800ddf4:	4a09      	ldr	r2, [pc, #36]	; (800de1c <_ZN8touchgfx14AbstractButtonC1Ev+0x38>)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	601a      	str	r2, [r3, #0]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	629a      	str	r2, [r3, #40]	; 0x28
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2200      	movs	r2, #0
 800de04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        setTouchable(true);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2101      	movs	r1, #1
 800de0c:	4618      	mov	r0, r3
 800de0e:	f7ff ffd9 	bl	800ddc4 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	4618      	mov	r0, r3
 800de16:	3708      	adds	r7, #8
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}
 800de1c:	0802a054 	.word	0x0802a054

0800de20 <_ZN8touchgfx6ButtonC1Ev>:
    Button() : AbstractButton(), up(), down(), alpha(255) { }
 800de20:	b580      	push	{r7, lr}
 800de22:	b082      	sub	sp, #8
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7ff ffda 	bl	800dde4 <_ZN8touchgfx14AbstractButtonC1Ev>
 800de30:	4a0c      	ldr	r2, [pc, #48]	; (800de64 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	601a      	str	r2, [r3, #0]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	332e      	adds	r3, #46	; 0x2e
 800de3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800de3e:	4618      	mov	r0, r3
 800de40:	f7fe fcfb 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	3330      	adds	r3, #48	; 0x30
 800de48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800de4c:	4618      	mov	r0, r3
 800de4e:	f7fe fcf4 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	22ff      	movs	r2, #255	; 0xff
 800de56:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	4618      	mov	r0, r3
 800de5e:	3708      	adds	r7, #8
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	0802a210 	.word	0x0802a210

0800de68 <_ZN8touchgfx4ViewI16TestADCPresenterED1Ev>:
class View : public Screen
 800de68:	b580      	push	{r7, lr}
 800de6a:	b082      	sub	sp, #8
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	4a05      	ldr	r2, [pc, #20]	; (800de88 <_ZN8touchgfx4ViewI16TestADCPresenterED1Ev+0x20>)
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	601a      	str	r2, [r3, #0]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4618      	mov	r0, r3
 800de7a:	f7ff f979 	bl	800d170 <_ZN8touchgfx6ScreenD1Ev>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4618      	mov	r0, r3
 800de82:	3708      	adds	r7, #8
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}
 800de88:	08027aa8 	.word	0x08027aa8

0800de8c <_ZN8touchgfx4ViewI16TestADCPresenterED0Ev>:
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b082      	sub	sp, #8
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f7ff ffe7 	bl	800de68 <_ZN8touchgfx4ViewI16TestADCPresenterED1Ev>
 800de9a:	2140      	movs	r1, #64	; 0x40
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f016 feb0 	bl	8024c02 <_ZdlPvj>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	4618      	mov	r0, r3
 800dea6:	3708      	adds	r7, #8
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}

0800deac <_ZN15TestADCViewBaseD1Ev>:

class TestADCViewBase : public touchgfx::View<TestADCPresenter>
{
public:
    TestADCViewBase();
    virtual ~TestADCViewBase() {}
 800deac:	b580      	push	{r7, lr}
 800deae:	b082      	sub	sp, #8
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
 800deb4:	4a15      	ldr	r2, [pc, #84]	; (800df0c <_ZN15TestADCViewBaseD1Ev+0x60>)
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	601a      	str	r2, [r3, #0]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800dec0:	4618      	mov	r0, r3
 800dec2:	f000 f9ff 	bl	800e2c4 <_ZN8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 800decc:	4618      	mov	r0, r3
 800dece:	f7ff f92d 	bl	800d12c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	33d4      	adds	r3, #212	; 0xd4
 800ded6:	4618      	mov	r0, r3
 800ded8:	f007 f83a 	bl	8014f50 <_ZN8touchgfx6SliderD1Ev>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	33a0      	adds	r3, #160	; 0xa0
 800dee0:	4618      	mov	r0, r3
 800dee2:	f7ff fa0b 	bl	800d2fc <_ZN8touchgfx6ButtonD1Ev>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	336c      	adds	r3, #108	; 0x6c
 800deea:	4618      	mov	r0, r3
 800deec:	f7fe ff84 	bl	800cdf8 <_ZN8touchgfx8TextAreaD1Ev>
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	3340      	adds	r3, #64	; 0x40
 800def4:	4618      	mov	r0, r3
 800def6:	f7ff f8f7 	bl	800d0e8 <_ZN8touchgfx5ImageD1Ev>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	4618      	mov	r0, r3
 800defe:	f7ff ffb3 	bl	800de68 <_ZN8touchgfx4ViewI16TestADCPresenterED1Ev>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	4618      	mov	r0, r3
 800df06:	3708      	adds	r7, #8
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}
 800df0c:	08027a58 	.word	0x08027a58

0800df10 <_ZN15TestADCViewBaseD0Ev>:
 800df10:	b580      	push	{r7, lr}
 800df12:	b082      	sub	sp, #8
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f7ff ffc7 	bl	800deac <_ZN15TestADCViewBaseD1Ev>
 800df1e:	f44f 7114 	mov.w	r1, #592	; 0x250
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f016 fe6d 	bl	8024c02 <_ZdlPvj>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	4618      	mov	r0, r3
 800df2c:	3708      	adds	r7, #8
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}

0800df32 <_ZN15TestADCViewBase19buttonReturnClickedEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void buttonReturnClicked()
 800df32:	b480      	push	{r7}
 800df34:	b083      	sub	sp, #12
 800df36:	af00      	add	r7, sp, #0
 800df38:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in TestADC
    }
 800df3a:	bf00      	nop
 800df3c:	370c      	adds	r7, #12
 800df3e:	46bd      	mov	sp, r7
 800df40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df44:	4770      	bx	lr

0800df46 <_ZN15TestADCViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 800df46:	b580      	push	{r7, lr}
 800df48:	b082      	sub	sp, #8
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800df4e:	f00a ff29 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 800df52:	4603      	mov	r3, r0
    }
 800df54:	4618      	mov	r0, r3
 800df56:	3708      	adds	r7, #8
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}

0800df5c <_ZN15TestADCViewBaseC1Ev>:
#include <gui_generated/testadc_screen/TestADCViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

TestADCViewBase::TestADCViewBase() :
 800df5c:	b590      	push	{r4, r7, lr}
 800df5e:	b091      	sub	sp, #68	; 0x44
 800df60:	af02      	add	r7, sp, #8
 800df62:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &TestADCViewBase::buttonCallbackHandler)
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	4618      	mov	r0, r3
 800df68:	f000 f976 	bl	800e258 <_ZN8touchgfx4ViewI16TestADCPresenterEC1Ev>
 800df6c:	4aa4      	ldr	r2, [pc, #656]	; (800e200 <_ZN15TestADCViewBaseC1Ev+0x2a4>)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	601a      	str	r2, [r3, #0]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800df78:	f107 0308 	add.w	r3, r7, #8
 800df7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800df80:	4618      	mov	r0, r3
 800df82:	f7fe fc5a 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800df86:	f107 0308 	add.w	r3, r7, #8
 800df8a:	4619      	mov	r1, r3
 800df8c:	4620      	mov	r0, r4
 800df8e:	f7fe fe39 	bl	800cc04 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	336c      	adds	r3, #108	; 0x6c
 800df96:	4618      	mov	r0, r3
 800df98:	f7fe fe7c 	bl	800cc94 <_ZN8touchgfx8TextAreaC1Ev>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	33a0      	adds	r3, #160	; 0xa0
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7ff ff3d 	bl	800de20 <_ZN8touchgfx6ButtonC1Ev>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	33d4      	adds	r3, #212	; 0xd4
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f007 fa12 	bl	80153d4 <_ZN8touchgfx6SliderC1Ev>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f7fe ff74 	bl	800cea4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f503 7010 	add.w	r0, r3, #576	; 0x240
 800dfc2:	4b90      	ldr	r3, [pc, #576]	; (800e204 <_ZN15TestADCViewBaseC1Ev+0x2a8>)
 800dfc4:	60fb      	str	r3, [r7, #12]
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	613b      	str	r3, [r7, #16]
 800dfca:	f107 030c 	add.w	r3, r7, #12
 800dfce:	cb0c      	ldmia	r3, {r2, r3}
 800dfd0:	6879      	ldr	r1, [r7, #4]
 800dfd2:	f000 f957 	bl	800e284 <_ZN8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    imageBg.setXY(0, 0);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	3340      	adds	r3, #64	; 0x40
 800dfda:	2200      	movs	r2, #0
 800dfdc:	2100      	movs	r1, #0
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7fe fca8 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    imageBg.setBitmap(touchgfx::Bitmap(BITMAP_GREEN_POLYGONS_BACKGROUND_480X272_ID));
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800dfea:	f107 0314 	add.w	r3, r7, #20
 800dfee:	2111      	movs	r1, #17
 800dff0:	4618      	mov	r0, r3
 800dff2:	f7fe fc22 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800dff6:	f107 0314 	add.w	r3, r7, #20
 800dffa:	4619      	mov	r1, r3
 800dffc:	4620      	mov	r0, r4
 800dffe:	f009 fe23 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textArea1.setXY(10, 10);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	336c      	adds	r3, #108	; 0x6c
 800e006:	220a      	movs	r2, #10
 800e008:	210a      	movs	r1, #10
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7fe fc92 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800e016:	22ff      	movs	r2, #255	; 0xff
 800e018:	21ff      	movs	r1, #255	; 0xff
 800e01a:	20ff      	movs	r0, #255	; 0xff
 800e01c:	f7fe ff92 	bl	800cf44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800e020:	4603      	mov	r3, r0
 800e022:	4619      	mov	r1, r3
 800e024:	4620      	mov	r0, r4
 800e026:	f7fe fe78 	bl	800cd1a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	336c      	adds	r3, #108	; 0x6c
 800e02e:	2100      	movs	r1, #0
 800e030:	4618      	mov	r0, r3
 800e032:	f7fe fec5 	bl	800cdc0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800e03c:	f107 0318 	add.w	r3, r7, #24
 800e040:	2107      	movs	r1, #7
 800e042:	4618      	mov	r0, r3
 800e044:	f7fe fe00 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 800e048:	8b39      	ldrh	r1, [r7, #24]
 800e04a:	4620      	mov	r0, r4
 800e04c:	f009 fbe8 	bl	8017820 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    buttonReturn.setXY(10, 230);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	33a0      	adds	r3, #160	; 0xa0
 800e054:	22e6      	movs	r2, #230	; 0xe6
 800e056:	210a      	movs	r1, #10
 800e058:	4618      	mov	r0, r3
 800e05a:	f7fe fc6b 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    buttonReturn.setBitmaps(touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID), touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID));
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800e064:	f107 031c 	add.w	r3, r7, #28
 800e068:	2117      	movs	r1, #23
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7fe fbe5 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800e070:	f107 0320 	add.w	r3, r7, #32
 800e074:	2117      	movs	r1, #23
 800e076:	4618      	mov	r0, r3
 800e078:	f7fe fbdf 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800e07c:	f107 0220 	add.w	r2, r7, #32
 800e080:	f107 031c 	add.w	r3, r7, #28
 800e084:	4619      	mov	r1, r3
 800e086:	4620      	mov	r0, r4
 800e088:	f009 fbd4 	bl	8017834 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonReturn.setAction(buttonCallback);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800e098:	4619      	mov	r1, r3
 800e09a:	4610      	mov	r0, r2
 800e09c:	f7ff f8fd 	bl	800d29a <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    sliderVoltage.setXY(152, 67);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	33d4      	adds	r3, #212	; 0xd4
 800e0a4:	2243      	movs	r2, #67	; 0x43
 800e0a6:	2198      	movs	r1, #152	; 0x98
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7fe fc43 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    sliderVoltage.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_INDICATORS_SLIDER3_VERTICAL_ROUND_NOB_ID));
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 800e0b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e0b8:	2108      	movs	r1, #8
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f7fe fbbd 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800e0c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e0c4:	2109      	movs	r1, #9
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7fe fbb7 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800e0cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e0d0:	2107      	movs	r1, #7
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7fe fbb1 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800e0d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e0dc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e0e0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	f007 f9c9 	bl	801547c <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    sliderVoltage.setupVerticalSlider(7, 3, 0, 0, 125);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800e0f0:	237d      	movs	r3, #125	; 0x7d
 800e0f2:	9301      	str	r3, [sp, #4]
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	9300      	str	r3, [sp, #0]
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	2203      	movs	r2, #3
 800e0fc:	2107      	movs	r1, #7
 800e0fe:	f007 f89b 	bl	8015238 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>
    sliderVoltage.setValueRange(0, 100);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	33d4      	adds	r3, #212	; 0xd4
 800e106:	2264      	movs	r2, #100	; 0x64
 800e108:	2100      	movs	r1, #0
 800e10a:	4618      	mov	r0, r3
 800e10c:	f006 ff95 	bl	801503a <_ZN8touchgfx6Slider13setValueRangeEii>
    sliderVoltage.setValue(0);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	33d4      	adds	r3, #212	; 0xd4
 800e114:	2100      	movs	r1, #0
 800e116:	4618      	mov	r0, r3
 800e118:	f006 ff1b 	bl	8014f52 <_ZN8touchgfx6Slider8setValueEi>

    textAreaVoltage.setPosition(240, 104, 183, 105);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f503 70e8 	add.w	r0, r3, #464	; 0x1d0
 800e122:	2369      	movs	r3, #105	; 0x69
 800e124:	9300      	str	r3, [sp, #0]
 800e126:	23b7      	movs	r3, #183	; 0xb7
 800e128:	2268      	movs	r2, #104	; 0x68
 800e12a:	21f0      	movs	r1, #240	; 0xf0
 800e12c:	f7fb ff2e 	bl	8009f8c <_ZN8touchgfx8Drawable11setPositionEssss>
    textAreaVoltage.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f503 74e8 	add.w	r4, r3, #464	; 0x1d0
 800e136:	2200      	movs	r2, #0
 800e138:	2100      	movs	r1, #0
 800e13a:	2000      	movs	r0, #0
 800e13c:	f7fe ff02 	bl	800cf44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800e140:	4603      	mov	r3, r0
 800e142:	4619      	mov	r1, r3
 800e144:	4620      	mov	r0, r4
 800e146:	f7fe fde8 	bl	800cd1a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textAreaVoltage.setLinespacing(0);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 800e150:	2100      	movs	r1, #0
 800e152:	4618      	mov	r0, r3
 800e154:	f7fe fe34 	bl	800cdc0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(textAreaVoltageBuffer, TEXTAREAVOLTAGE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID22).getText());
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f503 7402 	add.w	r4, r3, #520	; 0x208
 800e15e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e162:	2111      	movs	r1, #17
 800e164:	4618      	mov	r0, r3
 800e166:	f7fe fd6f 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 800e16a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e16e:	4618      	mov	r0, r3
 800e170:	f7fe fd7a 	bl	800cc68 <_ZNK8touchgfx9TypedText7getTextEv>
 800e174:	4603      	mov	r3, r0
 800e176:	4a24      	ldr	r2, [pc, #144]	; (800e208 <_ZN15TestADCViewBaseC1Ev+0x2ac>)
 800e178:	211b      	movs	r1, #27
 800e17a:	4620      	mov	r0, r4
 800e17c:	f00c ff46 	bl	801b00c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textAreaVoltage.setWildcard(textAreaVoltageBuffer);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f503 72e8 	add.w	r2, r3, #464	; 0x1d0
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e18c:	4619      	mov	r1, r3
 800e18e:	4610      	mov	r0, r2
 800e190:	f7fe fe9e 	bl	800ced0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textAreaVoltage.setTypedText(touchgfx::TypedText(T_SINGLEUSEID21));
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f503 74e8 	add.w	r4, r3, #464	; 0x1d0
 800e19a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e19e:	2110      	movs	r1, #16
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7fe fd51 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 800e1a6:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	f009 fb39 	bl	8017820 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(imageBg);
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	3340      	adds	r3, #64	; 0x40
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	4610      	mov	r0, r2
 800e1b8:	f7ff f832 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 800e1bc:	687a      	ldr	r2, [r7, #4]
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	336c      	adds	r3, #108	; 0x6c
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	4610      	mov	r0, r2
 800e1c6:	f7ff f82b 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonReturn);
 800e1ca:	687a      	ldr	r2, [r7, #4]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	33a0      	adds	r3, #160	; 0xa0
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	4610      	mov	r0, r2
 800e1d4:	f7ff f824 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(sliderVoltage);
 800e1d8:	687a      	ldr	r2, [r7, #4]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	33d4      	adds	r3, #212	; 0xd4
 800e1de:	4619      	mov	r1, r3
 800e1e0:	4610      	mov	r0, r2
 800e1e2:	f7ff f81d 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textAreaVoltage);
 800e1e6:	687a      	ldr	r2, [r7, #4]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	4610      	mov	r0, r2
 800e1f2:	f7ff f815 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	373c      	adds	r7, #60	; 0x3c
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd90      	pop	{r4, r7, pc}
 800e200:	08027a58 	.word	0x08027a58
 800e204:	0800e221 	.word	0x0800e221
 800e208:	08026380 	.word	0x08026380

0800e20c <_ZN15TestADCViewBase11setupScreenEv>:

void TestADCViewBase::setupScreen()
{
 800e20c:	b480      	push	{r7}
 800e20e:	b083      	sub	sp, #12
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]

}
 800e214:	bf00      	nop
 800e216:	370c      	adds	r7, #12
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr

0800e220 <_ZN15TestADCViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void TestADCViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b082      	sub	sp, #8
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	6039      	str	r1, [r7, #0]
    if (&src == &buttonReturn)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	33a0      	adds	r3, #160	; 0xa0
 800e22e:	683a      	ldr	r2, [r7, #0]
 800e230:	429a      	cmp	r2, r3
 800e232:	d10c      	bne.n	800e24e <_ZN15TestADCViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2e>
    {
        //InteractionButtonReturnClicked
        //When buttonReturn clicked call virtual function
        //Call buttonReturnClicked
        buttonReturnClicked();
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	332c      	adds	r3, #44	; 0x2c
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	6878      	ldr	r0, [r7, #4]
 800e23e:	4798      	blx	r3

        //InteractionReturnToMenu
        //When InteractionButtonReturnClicked completed change screen to Menu
        //Go to Menu with screen transition towards West
        application().gotoMenuScreenSlideTransitionWest();
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f7ff fe80 	bl	800df46 <_ZN15TestADCViewBase11applicationEv>
 800e246:	4603      	mov	r3, r0
 800e248:	4618      	mov	r0, r3
 800e24a:	f7fc f95d 	bl	800a508 <_ZN23FrontendApplicationBase33gotoMenuScreenSlideTransitionWestEv>
    }
}
 800e24e:	bf00      	nop
 800e250:	3708      	adds	r7, #8
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
	...

0800e258 <_ZN8touchgfx4ViewI16TestADCPresenterEC1Ev>:
    View() : presenter(0)
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	4618      	mov	r0, r3
 800e264:	f00b fd7c 	bl	8019d60 <_ZN8touchgfx6ScreenC1Ev>
 800e268:	4a05      	ldr	r2, [pc, #20]	; (800e280 <_ZN8touchgfx4ViewI16TestADCPresenterEC1Ev+0x28>)
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	601a      	str	r2, [r3, #0]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2200      	movs	r2, #0
 800e272:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	4618      	mov	r0, r3
 800e278:	3708      	adds	r7, #8
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
 800e27e:	bf00      	nop
 800e280:	08027aa8 	.word	0x08027aa8

0800e284 <_ZN8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800e284:	b580      	push	{r7, lr}
 800e286:	b084      	sub	sp, #16
 800e288:	af00      	add	r7, sp, #0
 800e28a:	60f8      	str	r0, [r7, #12]
 800e28c:	60b9      	str	r1, [r7, #8]
 800e28e:	4639      	mov	r1, r7
 800e290:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	4618      	mov	r0, r3
 800e298:	f7ff fba2 	bl	800d9e0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800e29c:	4a08      	ldr	r2, [pc, #32]	; (800e2c0 <_ZN8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	68ba      	ldr	r2, [r7, #8]
 800e2a6:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	3308      	adds	r3, #8
 800e2ac:	463a      	mov	r2, r7
 800e2ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e2b2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3710      	adds	r7, #16
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}
 800e2c0:	08027a90 	.word	0x08027a90

0800e2c4 <_ZN8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	4a05      	ldr	r2, [pc, #20]	; (800e2e4 <_ZN8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	601a      	str	r2, [r3, #0]
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f7ff fc13 	bl	800db00 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3708      	adds	r7, #8
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}
 800e2e4:	08027a90 	.word	0x08027a90

0800e2e8 <_ZN8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b082      	sub	sp, #8
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f7ff ffe7 	bl	800e2c4 <_ZN8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800e2f6:	2110      	movs	r1, #16
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f016 fc82 	bl	8024c02 <_ZdlPvj>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	4618      	mov	r0, r3
 800e302:	3708      	adds	r7, #8
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}

0800e308 <_ZN8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800e308:	b580      	push	{r7, lr}
 800e30a:	b082      	sub	sp, #8
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
 800e310:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	687a      	ldr	r2, [r7, #4]
 800e318:	68d2      	ldr	r2, [r2, #12]
 800e31a:	1052      	asrs	r2, r2, #1
 800e31c:	1898      	adds	r0, r3, r2
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	68db      	ldr	r3, [r3, #12]
 800e322:	f003 0301 	and.w	r3, r3, #1
 800e326:	2b00      	cmp	r3, #0
 800e328:	d102      	bne.n	800e330 <_ZN8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	689b      	ldr	r3, [r3, #8]
 800e32e:	e00a      	b.n	800e346 <_ZN8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	685b      	ldr	r3, [r3, #4]
 800e334:	687a      	ldr	r2, [r7, #4]
 800e336:	68d2      	ldr	r2, [r2, #12]
 800e338:	1052      	asrs	r2, r2, #1
 800e33a:	4413      	add	r3, r2
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	6892      	ldr	r2, [r2, #8]
 800e342:	4413      	add	r3, r2
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	6839      	ldr	r1, [r7, #0]
 800e348:	4798      	blx	r3
    }
 800e34a:	bf00      	nop
 800e34c:	3708      	adds	r7, #8
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}

0800e352 <_ZNK8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800e352:	b480      	push	{r7}
 800e354:	b083      	sub	sp, #12
 800e356:	af00      	add	r7, sp, #0
 800e358:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	685b      	ldr	r3, [r3, #4]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d010      	beq.n	800e384 <_ZNK8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	689b      	ldr	r3, [r3, #8]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d107      	bne.n	800e37a <_ZNK8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	68db      	ldr	r3, [r3, #12]
 800e36e:	f003 0301 	and.w	r3, r3, #1
 800e372:	2b00      	cmp	r3, #0
 800e374:	d101      	bne.n	800e37a <_ZNK8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800e376:	2301      	movs	r3, #1
 800e378:	e000      	b.n	800e37c <_ZNK8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800e37a:	2300      	movs	r3, #0
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d001      	beq.n	800e384 <_ZNK8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800e380:	2301      	movs	r3, #1
 800e382:	e000      	b.n	800e386 <_ZNK8touchgfx8CallbackI15TestADCViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800e384:	2300      	movs	r3, #0
    }
 800e386:	4618      	mov	r0, r3
 800e388:	370c      	adds	r7, #12
 800e38a:	46bd      	mov	sp, r7
 800e38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e390:	4770      	bx	lr
	...

0800e394 <_ZN8touchgfx4ViewI20TestCompletPresenterED1Ev>:
class View : public Screen
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	4a05      	ldr	r2, [pc, #20]	; (800e3b4 <_ZN8touchgfx4ViewI20TestCompletPresenterED1Ev+0x20>)
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	601a      	str	r2, [r3, #0]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f7fe fee3 	bl	800d170 <_ZN8touchgfx6ScreenD1Ev>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3708      	adds	r7, #8
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}
 800e3b4:	08027b2c 	.word	0x08027b2c

0800e3b8 <_ZN8touchgfx4ViewI20TestCompletPresenterED0Ev>:
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b082      	sub	sp, #8
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f7ff ffe7 	bl	800e394 <_ZN8touchgfx4ViewI20TestCompletPresenterED1Ev>
 800e3c6:	2140      	movs	r1, #64	; 0x40
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f016 fc1a 	bl	8024c02 <_ZdlPvj>
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3708      	adds	r7, #8
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}

0800e3d8 <_ZN19TestCompletViewBaseD1Ev>:

class TestCompletViewBase : public touchgfx::View<TestCompletPresenter>
{
public:
    TestCompletViewBase();
    virtual ~TestCompletViewBase() {}
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b082      	sub	sp, #8
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	4a0f      	ldr	r2, [pc, #60]	; (800e420 <_ZN19TestCompletViewBaseD1Ev+0x48>)
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	601a      	str	r2, [r3, #0]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	33d4      	adds	r3, #212	; 0xd4
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f000 f950 	bl	800e690 <_ZN8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	33a0      	adds	r3, #160	; 0xa0
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f7fe ff81 	bl	800d2fc <_ZN8touchgfx6ButtonD1Ev>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	336c      	adds	r3, #108	; 0x6c
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7fe fcfa 	bl	800cdf8 <_ZN8touchgfx8TextAreaD1Ev>
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	3340      	adds	r3, #64	; 0x40
 800e408:	4618      	mov	r0, r3
 800e40a:	f7fe fe6d 	bl	800d0e8 <_ZN8touchgfx5ImageD1Ev>
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	4618      	mov	r0, r3
 800e412:	f7ff ffbf 	bl	800e394 <_ZN8touchgfx4ViewI20TestCompletPresenterED1Ev>
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	4618      	mov	r0, r3
 800e41a:	3708      	adds	r7, #8
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}
 800e420:	08027adc 	.word	0x08027adc

0800e424 <_ZN19TestCompletViewBaseD0Ev>:
 800e424:	b580      	push	{r7, lr}
 800e426:	b082      	sub	sp, #8
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f7ff ffd3 	bl	800e3d8 <_ZN19TestCompletViewBaseD1Ev>
 800e432:	21e4      	movs	r1, #228	; 0xe4
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f016 fbe4 	bl	8024c02 <_ZdlPvj>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	4618      	mov	r0, r3
 800e43e:	3708      	adds	r7, #8
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}

0800e444 <_ZN19TestCompletViewBase19buttonreturnClickedEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void buttonreturnClicked()
 800e444:	b480      	push	{r7}
 800e446:	b083      	sub	sp, #12
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in TestComplet
    }
 800e44c:	bf00      	nop
 800e44e:	370c      	adds	r7, #12
 800e450:	46bd      	mov	sp, r7
 800e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e456:	4770      	bx	lr

0800e458 <_ZN19TestCompletViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800e460:	f00a fca0 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 800e464:	4603      	mov	r3, r0
    }
 800e466:	4618      	mov	r0, r3
 800e468:	3708      	adds	r7, #8
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
	...

0800e470 <_ZN19TestCompletViewBaseC1Ev>:
#include <gui_generated/testcomplet_screen/TestCompletViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

TestCompletViewBase::TestCompletViewBase() :
 800e470:	b590      	push	{r4, r7, lr}
 800e472:	b08b      	sub	sp, #44	; 0x2c
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &TestCompletViewBase::buttonCallbackHandler)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	4618      	mov	r0, r3
 800e47c:	f000 f8d2 	bl	800e624 <_ZN8touchgfx4ViewI20TestCompletPresenterEC1Ev>
 800e480:	4a53      	ldr	r2, [pc, #332]	; (800e5d0 <_ZN19TestCompletViewBaseC1Ev+0x160>)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	601a      	str	r2, [r3, #0]
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800e48c:	f107 030c 	add.w	r3, r7, #12
 800e490:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e494:	4618      	mov	r0, r3
 800e496:	f7fe f9d0 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800e49a:	f107 030c 	add.w	r3, r7, #12
 800e49e:	4619      	mov	r1, r3
 800e4a0:	4620      	mov	r0, r4
 800e4a2:	f7fe fbaf 	bl	800cc04 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	336c      	adds	r3, #108	; 0x6c
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f7fe fbf2 	bl	800cc94 <_ZN8touchgfx8TextAreaC1Ev>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	33a0      	adds	r3, #160	; 0xa0
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7ff fcb3 	bl	800de20 <_ZN8touchgfx6ButtonC1Ev>
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800e4c0:	4b44      	ldr	r3, [pc, #272]	; (800e5d4 <_ZN19TestCompletViewBaseC1Ev+0x164>)
 800e4c2:	613b      	str	r3, [r7, #16]
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	617b      	str	r3, [r7, #20]
 800e4c8:	f107 0310 	add.w	r3, r7, #16
 800e4cc:	cb0c      	ldmia	r3, {r2, r3}
 800e4ce:	6879      	ldr	r1, [r7, #4]
 800e4d0:	f000 f8be 	bl	800e650 <_ZN8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    imageBg.setXY(0, 0);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	3340      	adds	r3, #64	; 0x40
 800e4d8:	2200      	movs	r2, #0
 800e4da:	2100      	movs	r1, #0
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f7fe fa29 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    imageBg.setBitmap(touchgfx::Bitmap(BITMAP_GREEN_POLYGONS_BACKGROUND_480X272_ID));
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800e4e8:	f107 0318 	add.w	r3, r7, #24
 800e4ec:	2111      	movs	r1, #17
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7fe f9a3 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800e4f4:	f107 0318 	add.w	r3, r7, #24
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	4620      	mov	r0, r4
 800e4fc:	f009 fba4 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textArea1.setXY(20, 20);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	336c      	adds	r3, #108	; 0x6c
 800e504:	2214      	movs	r2, #20
 800e506:	2114      	movs	r1, #20
 800e508:	4618      	mov	r0, r3
 800e50a:	f7fe fa13 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800e514:	22ff      	movs	r2, #255	; 0xff
 800e516:	21ff      	movs	r1, #255	; 0xff
 800e518:	20ff      	movs	r0, #255	; 0xff
 800e51a:	f7fe fd13 	bl	800cf44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800e51e:	4603      	mov	r3, r0
 800e520:	4619      	mov	r1, r3
 800e522:	4620      	mov	r0, r4
 800e524:	f7fe fbf9 	bl	800cd1a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	336c      	adds	r3, #108	; 0x6c
 800e52c:	2100      	movs	r1, #0
 800e52e:	4618      	mov	r0, r3
 800e530:	f7fe fc46 	bl	800cdc0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800e53a:	f107 031c 	add.w	r3, r7, #28
 800e53e:	2108      	movs	r1, #8
 800e540:	4618      	mov	r0, r3
 800e542:	f7fe fb81 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 800e546:	8bb9      	ldrh	r1, [r7, #28]
 800e548:	4620      	mov	r0, r4
 800e54a:	f009 f969 	bl	8017820 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    buttonReturn.setXY(10, 230);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	33a0      	adds	r3, #160	; 0xa0
 800e552:	22e6      	movs	r2, #230	; 0xe6
 800e554:	210a      	movs	r1, #10
 800e556:	4618      	mov	r0, r3
 800e558:	f7fe f9ec 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    buttonReturn.setBitmaps(touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID), touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID));
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800e562:	f107 0320 	add.w	r3, r7, #32
 800e566:	2117      	movs	r1, #23
 800e568:	4618      	mov	r0, r3
 800e56a:	f7fe f966 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800e56e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e572:	2117      	movs	r1, #23
 800e574:	4618      	mov	r0, r3
 800e576:	f7fe f960 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800e57a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e57e:	f107 0320 	add.w	r3, r7, #32
 800e582:	4619      	mov	r1, r3
 800e584:	4620      	mov	r0, r4
 800e586:	f009 f955 	bl	8017834 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonReturn.setAction(buttonCallback);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	33d4      	adds	r3, #212	; 0xd4
 800e594:	4619      	mov	r1, r3
 800e596:	4610      	mov	r0, r2
 800e598:	f7fe fe7f 	bl	800d29a <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(imageBg);
 800e59c:	687a      	ldr	r2, [r7, #4]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	3340      	adds	r3, #64	; 0x40
 800e5a2:	4619      	mov	r1, r3
 800e5a4:	4610      	mov	r0, r2
 800e5a6:	f7fe fe3b 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 800e5aa:	687a      	ldr	r2, [r7, #4]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	336c      	adds	r3, #108	; 0x6c
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	4610      	mov	r0, r2
 800e5b4:	f7fe fe34 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonReturn);
 800e5b8:	687a      	ldr	r2, [r7, #4]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	33a0      	adds	r3, #160	; 0xa0
 800e5be:	4619      	mov	r1, r3
 800e5c0:	4610      	mov	r0, r2
 800e5c2:	f7fe fe2d 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	372c      	adds	r7, #44	; 0x2c
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bd90      	pop	{r4, r7, pc}
 800e5d0:	08027adc 	.word	0x08027adc
 800e5d4:	0800e5ed 	.word	0x0800e5ed

0800e5d8 <_ZN19TestCompletViewBase11setupScreenEv>:

void TestCompletViewBase::setupScreen()
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]

}
 800e5e0:	bf00      	nop
 800e5e2:	370c      	adds	r7, #12
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ea:	4770      	bx	lr

0800e5ec <_ZN19TestCompletViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void TestCompletViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	6039      	str	r1, [r7, #0]
    if (&src == &buttonReturn)
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	33a0      	adds	r3, #160	; 0xa0
 800e5fa:	683a      	ldr	r2, [r7, #0]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d10c      	bne.n	800e61a <_ZN19TestCompletViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2e>
    {
        //InteractionbuttonreturnClicked
        //When buttonReturn clicked call virtual function
        //Call buttonreturnClicked
        buttonreturnClicked();
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	332c      	adds	r3, #44	; 0x2c
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	4798      	blx	r3

        //InteractionReturnToMenu
        //When InteractionbuttonreturnClicked completed change screen to Menu
        //Go to Menu with screen transition towards West
        application().gotoMenuScreenSlideTransitionWest();
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f7ff ff23 	bl	800e458 <_ZN19TestCompletViewBase11applicationEv>
 800e612:	4603      	mov	r3, r0
 800e614:	4618      	mov	r0, r3
 800e616:	f7fb ff77 	bl	800a508 <_ZN23FrontendApplicationBase33gotoMenuScreenSlideTransitionWestEv>
    }
}
 800e61a:	bf00      	nop
 800e61c:	3708      	adds	r7, #8
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}
	...

0800e624 <_ZN8touchgfx4ViewI20TestCompletPresenterEC1Ev>:
    View() : presenter(0)
 800e624:	b580      	push	{r7, lr}
 800e626:	b082      	sub	sp, #8
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	4618      	mov	r0, r3
 800e630:	f00b fb96 	bl	8019d60 <_ZN8touchgfx6ScreenC1Ev>
 800e634:	4a05      	ldr	r2, [pc, #20]	; (800e64c <_ZN8touchgfx4ViewI20TestCompletPresenterEC1Ev+0x28>)
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	601a      	str	r2, [r3, #0]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2200      	movs	r2, #0
 800e63e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	4618      	mov	r0, r3
 800e644:	3708      	adds	r7, #8
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}
 800e64a:	bf00      	nop
 800e64c:	08027b2c 	.word	0x08027b2c

0800e650 <_ZN8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800e650:	b580      	push	{r7, lr}
 800e652:	b084      	sub	sp, #16
 800e654:	af00      	add	r7, sp, #0
 800e656:	60f8      	str	r0, [r7, #12]
 800e658:	60b9      	str	r1, [r7, #8]
 800e65a:	4639      	mov	r1, r7
 800e65c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	4618      	mov	r0, r3
 800e664:	f7ff f9bc 	bl	800d9e0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800e668:	4a08      	ldr	r2, [pc, #32]	; (800e68c <_ZN8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	68ba      	ldr	r2, [r7, #8]
 800e672:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	3308      	adds	r3, #8
 800e678:	463a      	mov	r2, r7
 800e67a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e67e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	4618      	mov	r0, r3
 800e686:	3710      	adds	r7, #16
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}
 800e68c:	08027b14 	.word	0x08027b14

0800e690 <_ZN8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	4a05      	ldr	r2, [pc, #20]	; (800e6b0 <_ZN8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	601a      	str	r2, [r3, #0]
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7ff fa2d 	bl	800db00 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3708      	adds	r7, #8
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	08027b14 	.word	0x08027b14

0800e6b4 <_ZN8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f7ff ffe7 	bl	800e690 <_ZN8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800e6c2:	2110      	movs	r1, #16
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f016 fa9c 	bl	8024c02 <_ZdlPvj>
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3708      	adds	r7, #8
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <_ZN8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b082      	sub	sp, #8
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	685b      	ldr	r3, [r3, #4]
 800e6e2:	687a      	ldr	r2, [r7, #4]
 800e6e4:	68d2      	ldr	r2, [r2, #12]
 800e6e6:	1052      	asrs	r2, r2, #1
 800e6e8:	1898      	adds	r0, r3, r2
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	68db      	ldr	r3, [r3, #12]
 800e6ee:	f003 0301 	and.w	r3, r3, #1
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d102      	bne.n	800e6fc <_ZN8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	689b      	ldr	r3, [r3, #8]
 800e6fa:	e00a      	b.n	800e712 <_ZN8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	685b      	ldr	r3, [r3, #4]
 800e700:	687a      	ldr	r2, [r7, #4]
 800e702:	68d2      	ldr	r2, [r2, #12]
 800e704:	1052      	asrs	r2, r2, #1
 800e706:	4413      	add	r3, r2
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	687a      	ldr	r2, [r7, #4]
 800e70c:	6892      	ldr	r2, [r2, #8]
 800e70e:	4413      	add	r3, r2
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	6839      	ldr	r1, [r7, #0]
 800e714:	4798      	blx	r3
    }
 800e716:	bf00      	nop
 800e718:	3708      	adds	r7, #8
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}

0800e71e <_ZNK8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800e71e:	b480      	push	{r7}
 800e720:	b083      	sub	sp, #12
 800e722:	af00      	add	r7, sp, #0
 800e724:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	685b      	ldr	r3, [r3, #4]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d010      	beq.n	800e750 <_ZNK8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	689b      	ldr	r3, [r3, #8]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d107      	bne.n	800e746 <_ZNK8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	68db      	ldr	r3, [r3, #12]
 800e73a:	f003 0301 	and.w	r3, r3, #1
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d101      	bne.n	800e746 <_ZNK8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800e742:	2301      	movs	r3, #1
 800e744:	e000      	b.n	800e748 <_ZNK8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800e746:	2300      	movs	r3, #0
 800e748:	2b01      	cmp	r3, #1
 800e74a:	d001      	beq.n	800e750 <_ZNK8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800e74c:	2301      	movs	r3, #1
 800e74e:	e000      	b.n	800e752 <_ZNK8touchgfx8CallbackI19TestCompletViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800e750:	2300      	movs	r3, #0
    }
 800e752:	4618      	mov	r0, r3
 800e754:	370c      	adds	r7, #12
 800e756:	46bd      	mov	sp, r7
 800e758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75c:	4770      	bx	lr

0800e75e <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 800e75e:	b480      	push	{r7}
 800e760:	b083      	sub	sp, #12
 800e762:	af00      	add	r7, sp, #0
 800e764:	6078      	str	r0, [r7, #4]
 800e766:	6039      	str	r1, [r7, #0]
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	683a      	ldr	r2, [r7, #0]
 800e76c:	601a      	str	r2, [r3, #0]
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	4618      	mov	r0, r3
 800e772:	370c      	adds	r7, #12
 800e774:	46bd      	mov	sp, r7
 800e776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77a:	4770      	bx	lr

0800e77c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b082      	sub	sp, #8
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
 800e784:	4a05      	ldr	r2, [pc, #20]	; (800e79c <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	601a      	str	r2, [r3, #0]
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	4618      	mov	r0, r3
 800e78e:	f008 fadf 	bl	8016d50 <_ZN8touchgfx15AbstractPainterD1Ev>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	4618      	mov	r0, r3
 800e796:	3708      	adds	r7, #8
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}
 800e79c:	08029b28 	.word	0x08029b28

0800e7a0 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b082      	sub	sp, #8
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f7ff ffe7 	bl	800e77c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 800e7ae:	2114      	movs	r1, #20
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f016 fa26 	bl	8024c02 <_ZdlPvj>
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3708      	adds	r7, #8
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}

0800e7c0 <_ZN8touchgfx4ViewI22TestGirouettePresenterED1Ev>:
class View : public Screen
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b082      	sub	sp, #8
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	4a05      	ldr	r2, [pc, #20]	; (800e7e0 <_ZN8touchgfx4ViewI22TestGirouettePresenterED1Ev+0x20>)
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	601a      	str	r2, [r3, #0]
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f7fe fccd 	bl	800d170 <_ZN8touchgfx6ScreenD1Ev>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3708      	adds	r7, #8
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}
 800e7e0:	08027bb0 	.word	0x08027bb0

0800e7e4 <_ZN8touchgfx4ViewI22TestGirouettePresenterED0Ev>:
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b082      	sub	sp, #8
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f7ff ffe7 	bl	800e7c0 <_ZN8touchgfx4ViewI22TestGirouettePresenterED1Ev>
 800e7f2:	2140      	movs	r1, #64	; 0x40
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f016 fa04 	bl	8024c02 <_ZdlPvj>
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3708      	adds	r7, #8
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}

0800e804 <_ZN21TestGirouetteViewBaseD1Ev>:

class TestGirouetteViewBase : public touchgfx::View<TestGirouettePresenter>
{
public:
    TestGirouetteViewBase();
    virtual ~TestGirouetteViewBase() {}
 800e804:	b580      	push	{r7, lr}
 800e806:	b082      	sub	sp, #8
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
 800e80c:	4a21      	ldr	r2, [pc, #132]	; (800e894 <_ZN21TestGirouetteViewBaseD1Ev+0x90>)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	601a      	str	r2, [r3, #0]
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800e818:	4618      	mov	r0, r3
 800e81a:	f000 fb67 	bl	800eeec <_ZN8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 800e824:	4618      	mov	r0, r3
 800e826:	f006 fb93 	bl	8014f50 <_ZN8touchgfx6SliderD1Ev>
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e830:	4618      	mov	r0, r3
 800e832:	f000 fb9f 	bl	800ef74 <_ZN8touchgfx13PainterRGB888D1Ev>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800e83c:	4618      	mov	r0, r3
 800e83e:	f000 fb77 	bl	800ef30 <_ZN8touchgfx6CircleD1Ev>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800e848:	4618      	mov	r0, r3
 800e84a:	f000 fb93 	bl	800ef74 <_ZN8touchgfx13PainterRGB888D1Ev>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800e854:	4618      	mov	r0, r3
 800e856:	f000 fb6b 	bl	800ef30 <_ZN8touchgfx6CircleD1Ev>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	33d4      	adds	r3, #212	; 0xd4
 800e85e:	4618      	mov	r0, r3
 800e860:	f7fe fc64 	bl	800d12c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	33a0      	adds	r3, #160	; 0xa0
 800e868:	4618      	mov	r0, r3
 800e86a:	f7fe fd47 	bl	800d2fc <_ZN8touchgfx6ButtonD1Ev>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	336c      	adds	r3, #108	; 0x6c
 800e872:	4618      	mov	r0, r3
 800e874:	f7fe fac0 	bl	800cdf8 <_ZN8touchgfx8TextAreaD1Ev>
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	3340      	adds	r3, #64	; 0x40
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7fe fc33 	bl	800d0e8 <_ZN8touchgfx5ImageD1Ev>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	4618      	mov	r0, r3
 800e886:	f7ff ff9b 	bl	800e7c0 <_ZN8touchgfx4ViewI22TestGirouettePresenterED1Ev>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	4618      	mov	r0, r3
 800e88e:	3708      	adds	r7, #8
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}
 800e894:	08027b60 	.word	0x08027b60

0800e898 <_ZN21TestGirouetteViewBaseD0Ev>:
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f7ff ffaf 	bl	800e804 <_ZN21TestGirouetteViewBaseD1Ev>
 800e8a6:	f641 7114 	movw	r1, #7956	; 0x1f14
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f016 f9a9 	bl	8024c02 <_ZdlPvj>
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3708      	adds	r7, #8
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}

0800e8ba <_ZN21TestGirouetteViewBase19buttonreturnClickedEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void buttonreturnClicked()
 800e8ba:	b480      	push	{r7}
 800e8bc:	b083      	sub	sp, #12
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in TestGirouette
    }
 800e8c2:	bf00      	nop
 800e8c4:	370c      	adds	r7, #12
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8cc:	4770      	bx	lr

0800e8ce <_ZN21TestGirouetteViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 800e8ce:	b580      	push	{r7, lr}
 800e8d0:	b082      	sub	sp, #8
 800e8d2:	af00      	add	r7, sp, #0
 800e8d4:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800e8d6:	f00a fa65 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 800e8da:	4603      	mov	r3, r0
    }
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3708      	adds	r7, #8
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <_ZN21TestGirouetteViewBaseC1Ev>:
#include <gui_generated/testgirouette_screen/TestGirouetteViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

TestGirouetteViewBase::TestGirouetteViewBase() :
 800e8e4:	b590      	push	{r4, r7, lr}
 800e8e6:	b093      	sub	sp, #76	; 0x4c
 800e8e8:	af02      	add	r7, sp, #8
 800e8ea:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &TestGirouetteViewBase::buttonCallbackHandler)
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f000 fa98 	bl	800ee24 <_ZN8touchgfx4ViewI22TestGirouettePresenterEC1Ev>
 800e8f4:	4ade      	ldr	r2, [pc, #888]	; (800ec70 <_ZN21TestGirouetteViewBaseC1Ev+0x38c>)
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	601a      	str	r2, [r3, #0]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800e900:	f107 0308 	add.w	r3, r7, #8
 800e904:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e908:	4618      	mov	r0, r3
 800e90a:	f7fd ff96 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800e90e:	f107 0308 	add.w	r3, r7, #8
 800e912:	4619      	mov	r1, r3
 800e914:	4620      	mov	r0, r4
 800e916:	f7fe f975 	bl	800cc04 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	336c      	adds	r3, #108	; 0x6c
 800e91e:	4618      	mov	r0, r3
 800e920:	f7fe f9b8 	bl	800cc94 <_ZN8touchgfx8TextAreaC1Ev>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	33a0      	adds	r3, #160	; 0xa0
 800e928:	4618      	mov	r0, r3
 800e92a:	f7ff fa79 	bl	800de20 <_ZN8touchgfx6ButtonC1Ev>
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	33d4      	adds	r3, #212	; 0xd4
 800e932:	4618      	mov	r0, r3
 800e934:	f7fe fab6 	bl	800cea4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800e93e:	4618      	mov	r0, r3
 800e940:	f007 fd7a 	bl	8016438 <_ZN8touchgfx6CircleC1Ev>
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f503 74ac 	add.w	r4, r3, #344	; 0x158
 800e94a:	f107 030c 	add.w	r3, r7, #12
 800e94e:	2100      	movs	r1, #0
 800e950:	4618      	mov	r0, r3
 800e952:	f7fd ff2c 	bl	800c7ae <_ZN8touchgfx9colortypeC1Em>
 800e956:	22ff      	movs	r2, #255	; 0xff
 800e958:	68f9      	ldr	r1, [r7, #12]
 800e95a:	4620      	mov	r0, r4
 800e95c:	f008 f9b6 	bl	8016ccc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800e966:	4618      	mov	r0, r3
 800e968:	f007 fd66 	bl	8016438 <_ZN8touchgfx6CircleC1Ev>
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f503 74de 	add.w	r4, r3, #444	; 0x1bc
 800e972:	f107 0310 	add.w	r3, r7, #16
 800e976:	2100      	movs	r1, #0
 800e978:	4618      	mov	r0, r3
 800e97a:	f7fd ff18 	bl	800c7ae <_ZN8touchgfx9colortypeC1Em>
 800e97e:	22ff      	movs	r2, #255	; 0xff
 800e980:	6939      	ldr	r1, [r7, #16]
 800e982:	4620      	mov	r0, r4
 800e984:	f008 f9a2 	bl	8016ccc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 800e98e:	4618      	mov	r0, r3
 800e990:	f006 fd20 	bl	80153d4 <_ZN8touchgfx6SliderC1Ev>
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f503 7039 	add.w	r0, r3, #740	; 0x2e4
 800e99a:	4bb6      	ldr	r3, [pc, #728]	; (800ec74 <_ZN21TestGirouetteViewBaseC1Ev+0x390>)
 800e99c:	617b      	str	r3, [r7, #20]
 800e99e:	2300      	movs	r3, #0
 800e9a0:	61bb      	str	r3, [r7, #24]
 800e9a2:	f107 0314 	add.w	r3, r7, #20
 800e9a6:	cb0c      	ldmia	r3, {r2, r3}
 800e9a8:	6879      	ldr	r1, [r7, #4]
 800e9aa:	f000 fa51 	bl	800ee50 <_ZN8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800e9b4:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f009 f9b3 	bl	8017d24 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    imageBg.setXY(0, 0);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	3340      	adds	r3, #64	; 0x40
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	2100      	movs	r1, #0
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7fd ffb4 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    imageBg.setBitmap(touchgfx::Bitmap(BITMAP_GREEN_POLYGONS_BACKGROUND_480X272_ID));
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800e9d2:	f107 031c 	add.w	r3, r7, #28
 800e9d6:	2111      	movs	r1, #17
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7fd ff2e 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800e9de:	f107 031c 	add.w	r3, r7, #28
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	4620      	mov	r0, r4
 800e9e6:	f009 f92f 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textArea1.setXY(10, 10);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	336c      	adds	r3, #108	; 0x6c
 800e9ee:	220a      	movs	r2, #10
 800e9f0:	210a      	movs	r1, #10
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f7fd ff9e 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800e9fe:	22ff      	movs	r2, #255	; 0xff
 800ea00:	21ff      	movs	r1, #255	; 0xff
 800ea02:	20ff      	movs	r0, #255	; 0xff
 800ea04:	f7fe fa9e 	bl	800cf44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	4619      	mov	r1, r3
 800ea0c:	4620      	mov	r0, r4
 800ea0e:	f7fe f984 	bl	800cd1a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	336c      	adds	r3, #108	; 0x6c
 800ea16:	2100      	movs	r1, #0
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f7fe f9d1 	bl	800cdc0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800ea24:	f107 0320 	add.w	r3, r7, #32
 800ea28:	2109      	movs	r1, #9
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7fe f90c 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 800ea30:	8c39      	ldrh	r1, [r7, #32]
 800ea32:	4620      	mov	r0, r4
 800ea34:	f008 fef4 	bl	8017820 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    buttonReturn.setXY(10, 230);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	33a0      	adds	r3, #160	; 0xa0
 800ea3c:	22e6      	movs	r2, #230	; 0xe6
 800ea3e:	210a      	movs	r1, #10
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7fd ff77 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    buttonReturn.setBitmaps(touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID), touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID));
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800ea4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea50:	2117      	movs	r1, #23
 800ea52:	4618      	mov	r0, r3
 800ea54:	f7fd fef1 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800ea58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ea5c:	2117      	movs	r1, #23
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f7fd feeb 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800ea64:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ea68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea6c:	4619      	mov	r1, r3
 800ea6e:	4620      	mov	r0, r4
 800ea70:	f008 fee0 	bl	8017834 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonReturn.setAction(buttonCallback);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800ea80:	4619      	mov	r1, r3
 800ea82:	4610      	mov	r0, r2
 800ea84:	f7fe fc09 	bl	800d29a <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textAreaGirouette.setPosition(187, 92, 107, 49);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800ea8e:	2331      	movs	r3, #49	; 0x31
 800ea90:	9300      	str	r3, [sp, #0]
 800ea92:	236b      	movs	r3, #107	; 0x6b
 800ea94:	225c      	movs	r2, #92	; 0x5c
 800ea96:	21bb      	movs	r1, #187	; 0xbb
 800ea98:	f7fb fa78 	bl	8009f8c <_ZN8touchgfx8Drawable11setPositionEssss>
    textAreaGirouette.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	2100      	movs	r1, #0
 800eaa6:	2000      	movs	r0, #0
 800eaa8:	f7fe fa4c 	bl	800cf44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800eaac:	4603      	mov	r3, r0
 800eaae:	4619      	mov	r1, r3
 800eab0:	4620      	mov	r0, r4
 800eab2:	f7fe f932 	bl	800cd1a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textAreaGirouette.setLinespacing(0);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	33d4      	adds	r3, #212	; 0xd4
 800eaba:	2100      	movs	r1, #0
 800eabc:	4618      	mov	r0, r3
 800eabe:	f7fe f97f 	bl	800cdc0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(textAreaGirouetteBuffer, TEXTAREAGIROUETTE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID24).getText());
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f503 7434 	add.w	r4, r3, #720	; 0x2d0
 800eac8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eacc:	2113      	movs	r1, #19
 800eace:	4618      	mov	r0, r3
 800ead0:	f7fe f8ba 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 800ead4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ead8:	4618      	mov	r0, r3
 800eada:	f7fe f8c5 	bl	800cc68 <_ZNK8touchgfx9TypedText7getTextEv>
 800eade:	4603      	mov	r3, r0
 800eae0:	4a65      	ldr	r2, [pc, #404]	; (800ec78 <_ZN21TestGirouetteViewBaseC1Ev+0x394>)
 800eae2:	210a      	movs	r1, #10
 800eae4:	4620      	mov	r0, r4
 800eae6:	f00c fa91 	bl	801b00c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textAreaGirouette.setWildcard(textAreaGirouetteBuffer);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800eaf6:	4619      	mov	r1, r3
 800eaf8:	4610      	mov	r0, r2
 800eafa:	f7fe f9e9 	bl	800ced0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textAreaGirouette.setTypedText(touchgfx::TypedText(T_SINGLEUSEID23));
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 800eb04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800eb08:	2112      	movs	r1, #18
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7fe f89c 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 800eb10:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800eb12:	4620      	mov	r0, r4
 800eb14:	f008 fe84 	bl	8017820 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    circleBg.setPosition(150, 26, 180, 180);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f503 7086 	add.w	r0, r3, #268	; 0x10c
 800eb1e:	23b4      	movs	r3, #180	; 0xb4
 800eb20:	9300      	str	r3, [sp, #0]
 800eb22:	23b4      	movs	r3, #180	; 0xb4
 800eb24:	221a      	movs	r2, #26
 800eb26:	2196      	movs	r1, #150	; 0x96
 800eb28:	f7fb fa30 	bl	8009f8c <_ZN8touchgfx8Drawable11setPositionEssss>
    circleBg.setCenter(90, 90);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800eb32:	225a      	movs	r2, #90	; 0x5a
 800eb34:	215a      	movs	r1, #90	; 0x5a
 800eb36:	4618      	mov	r0, r3
 800eb38:	f000 f927 	bl	800ed8a <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>
    circleBg.setRadius(85);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800eb42:	2155      	movs	r1, #85	; 0x55
 800eb44:	4618      	mov	r0, r3
 800eb46:	f000 f9a3 	bl	800ee90 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>
    circleBg.setLineWidth(4);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800eb50:	2104      	movs	r1, #4
 800eb52:	4618      	mov	r0, r3
 800eb54:	f000 f9b3 	bl	800eebe <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>
    circleBg.setArc(0, 360);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800eb5e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800eb62:	2100      	movs	r1, #0
 800eb64:	4618      	mov	r0, r3
 800eb66:	f000 f936 	bl	800edd6 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>
    circleBg.setCapPrecision(10);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800eb70:	210a      	movs	r1, #10
 800eb72:	4618      	mov	r0, r3
 800eb74:	f007 fc78 	bl	8016468 <_ZN8touchgfx6Circle15setCapPrecisionEi>
    circleBgPainter.setColor(touchgfx::Color::getColorFrom24BitRGB(148, 148, 148));
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f503 74ac 	add.w	r4, r3, #344	; 0x158
 800eb7e:	2294      	movs	r2, #148	; 0x94
 800eb80:	2194      	movs	r1, #148	; 0x94
 800eb82:	2094      	movs	r0, #148	; 0x94
 800eb84:	f7fe f9de 	bl	800cf44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	22ff      	movs	r2, #255	; 0xff
 800eb8c:	4619      	mov	r1, r3
 800eb8e:	4620      	mov	r0, r4
 800eb90:	f008 f881 	bl	8016c96 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    circleBg.setPainter(circleBgPainter);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f503 7286 	add.w	r2, r3, #268	; 0x10c
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800eba0:	4619      	mov	r1, r3
 800eba2:	4610      	mov	r0, r2
 800eba4:	f008 f8da 	bl	8016d5c <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>

    circleGirouette.setPosition(150, 26, 180, 180);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f503 70b8 	add.w	r0, r3, #368	; 0x170
 800ebae:	23b4      	movs	r3, #180	; 0xb4
 800ebb0:	9300      	str	r3, [sp, #0]
 800ebb2:	23b4      	movs	r3, #180	; 0xb4
 800ebb4:	221a      	movs	r2, #26
 800ebb6:	2196      	movs	r1, #150	; 0x96
 800ebb8:	f7fb f9e8 	bl	8009f8c <_ZN8touchgfx8Drawable11setPositionEssss>
    circleGirouette.setCenter(90, 90);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800ebc2:	225a      	movs	r2, #90	; 0x5a
 800ebc4:	215a      	movs	r1, #90	; 0x5a
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f000 f8df 	bl	800ed8a <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>
    circleGirouette.setRadius(85);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800ebd2:	2155      	movs	r1, #85	; 0x55
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f000 f95b 	bl	800ee90 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>
    circleGirouette.setLineWidth(6);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800ebe0:	2106      	movs	r1, #6
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f000 f96b 	bl	800eebe <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>
    circleGirouette.setArc(260, 280);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800ebee:	f44f 728c 	mov.w	r2, #280	; 0x118
 800ebf2:	f44f 7182 	mov.w	r1, #260	; 0x104
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f000 f8ed 	bl	800edd6 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>
    circleGirouette.setCapPrecision(10);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800ec02:	210a      	movs	r1, #10
 800ec04:	4618      	mov	r0, r3
 800ec06:	f007 fc2f 	bl	8016468 <_ZN8touchgfx6Circle15setCapPrecisionEi>
    circleGirouettePainter.setColor(touchgfx::Color::getColorFrom24BitRGB(240, 12, 12));
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	f503 74de 	add.w	r4, r3, #444	; 0x1bc
 800ec10:	220c      	movs	r2, #12
 800ec12:	210c      	movs	r1, #12
 800ec14:	20f0      	movs	r0, #240	; 0xf0
 800ec16:	f7fe f995 	bl	800cf44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	22ff      	movs	r2, #255	; 0xff
 800ec1e:	4619      	mov	r1, r3
 800ec20:	4620      	mov	r0, r4
 800ec22:	f008 f838 	bl	8016c96 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    circleGirouette.setPainter(circleGirouettePainter);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	f503 72b8 	add.w	r2, r3, #368	; 0x170
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ec32:	4619      	mov	r1, r3
 800ec34:	4610      	mov	r0, r2
 800ec36:	f008 f891 	bl	8016d5c <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>

    sliderGirouette.setXY(87, 217);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 800ec40:	22d9      	movs	r2, #217	; 0xd9
 800ec42:	2157      	movs	r1, #87	; 0x57
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7fd fe75 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    sliderGirouette.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_MEDIUM_SLIDER2_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_MEDIUM_SLIDER2_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_MEDIUM_INDICATORS_SLIDER2_ROUND_NOB_ID));
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f503 74ea 	add.w	r4, r3, #468	; 0x1d4
 800ec50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ec54:	2102      	movs	r1, #2
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7fd fdef 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800ec5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ec60:	2103      	movs	r1, #3
 800ec62:	4618      	mov	r0, r3
 800ec64:	f7fd fde9 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800ec68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ec6c:	e006      	b.n	800ec7c <_ZN21TestGirouetteViewBaseC1Ev+0x398>
 800ec6e:	bf00      	nop
 800ec70:	08027b60 	.word	0x08027b60
 800ec74:	0800ed55 	.word	0x0800ed55
 800ec78:	080264e4 	.word	0x080264e4
 800ec7c:	2101      	movs	r1, #1
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f7fd fddb 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800ec84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ec88:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ec8c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800ec90:	4620      	mov	r0, r4
 800ec92:	f006 fbf3 	bl	801547c <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    sliderGirouette.setupHorizontalSlider(2, 6, 0, 0, 284);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f503 70ea 	add.w	r0, r3, #468	; 0x1d4
 800ec9c:	f44f 738e 	mov.w	r3, #284	; 0x11c
 800eca0:	9301      	str	r3, [sp, #4]
 800eca2:	2300      	movs	r3, #0
 800eca4:	9300      	str	r3, [sp, #0]
 800eca6:	2300      	movs	r3, #0
 800eca8:	2206      	movs	r2, #6
 800ecaa:	2102      	movs	r1, #2
 800ecac:	f006 fa60 	bl	8015170 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
    sliderGirouette.setValueRange(0, 100);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 800ecb6:	2264      	movs	r2, #100	; 0x64
 800ecb8:	2100      	movs	r1, #0
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f006 f9bd 	bl	801503a <_ZN8touchgfx6Slider13setValueRangeEii>
    sliderGirouette.setValue(0);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 800ecc6:	2100      	movs	r1, #0
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f006 f942 	bl	8014f52 <_ZN8touchgfx6Slider8setValueEi>

    add(imageBg);
 800ecce:	687a      	ldr	r2, [r7, #4]
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	3340      	adds	r3, #64	; 0x40
 800ecd4:	4619      	mov	r1, r3
 800ecd6:	4610      	mov	r0, r2
 800ecd8:	f7fe faa2 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 800ecdc:	687a      	ldr	r2, [r7, #4]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	336c      	adds	r3, #108	; 0x6c
 800ece2:	4619      	mov	r1, r3
 800ece4:	4610      	mov	r0, r2
 800ece6:	f7fe fa9b 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonReturn);
 800ecea:	687a      	ldr	r2, [r7, #4]
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	33a0      	adds	r3, #160	; 0xa0
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	4610      	mov	r0, r2
 800ecf4:	f7fe fa94 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textAreaGirouette);
 800ecf8:	687a      	ldr	r2, [r7, #4]
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	33d4      	adds	r3, #212	; 0xd4
 800ecfe:	4619      	mov	r1, r3
 800ed00:	4610      	mov	r0, r2
 800ed02:	f7fe fa8d 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(circleBg);
 800ed06:	687a      	ldr	r2, [r7, #4]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800ed0e:	4619      	mov	r1, r3
 800ed10:	4610      	mov	r0, r2
 800ed12:	f7fe fa85 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(circleGirouette);
 800ed16:	687a      	ldr	r2, [r7, #4]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800ed1e:	4619      	mov	r1, r3
 800ed20:	4610      	mov	r0, r2
 800ed22:	f7fe fa7d 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(sliderGirouette);
 800ed26:	687a      	ldr	r2, [r7, #4]
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 800ed2e:	4619      	mov	r1, r3
 800ed30:	4610      	mov	r0, r2
 800ed32:	f7fe fa75 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3744      	adds	r7, #68	; 0x44
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd90      	pop	{r4, r7, pc}

0800ed40 <_ZN21TestGirouetteViewBase11setupScreenEv>:

void TestGirouetteViewBase::setupScreen()
{
 800ed40:	b480      	push	{r7}
 800ed42:	b083      	sub	sp, #12
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]

}
 800ed48:	bf00      	nop
 800ed4a:	370c      	adds	r7, #12
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed52:	4770      	bx	lr

0800ed54 <_ZN21TestGirouetteViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void TestGirouetteViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b082      	sub	sp, #8
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
 800ed5c:	6039      	str	r1, [r7, #0]
    if (&src == &buttonReturn)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	33a0      	adds	r3, #160	; 0xa0
 800ed62:	683a      	ldr	r2, [r7, #0]
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d10c      	bne.n	800ed82 <_ZN21TestGirouetteViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2e>
    {
        //InteractionButtonReturnClicked
        //When buttonReturn clicked call virtual function
        //Call buttonreturnClicked
        buttonreturnClicked();
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	332c      	adds	r3, #44	; 0x2c
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	4798      	blx	r3

        //InteractionReturnToMenu
        //When InteractionButtonReturnClicked completed change screen to Menu
        //Go to Menu with screen transition towards West
        application().gotoMenuScreenSlideTransitionWest();
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f7ff fdaa 	bl	800e8ce <_ZN21TestGirouetteViewBase11applicationEv>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7fb fbc3 	bl	800a508 <_ZN23FrontendApplicationBase33gotoMenuScreenSlideTransitionWestEv>
    }
}
 800ed82:	bf00      	nop
 800ed84:	3708      	adds	r7, #8
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}

0800ed8a <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>:
     * @param y The y coordinate of center.
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setCenter(const T x, const T y)
 800ed8a:	b580      	push	{r7, lr}
 800ed8c:	b088      	sub	sp, #32
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	60f8      	str	r0, [r7, #12]
 800ed92:	60b9      	str	r1, [r7, #8]
 800ed94:	607a      	str	r2, [r7, #4]
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 800ed9a:	69bb      	ldr	r3, [r7, #24]
 800ed9c:	015a      	lsls	r2, r3, #5
 800ed9e:	f107 0314 	add.w	r3, r7, #20
 800eda2:	4611      	mov	r1, r2
 800eda4:	4618      	mov	r0, r3
 800eda6:	f7ff fcda 	bl	800e75e <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	461a      	mov	r2, r3
    {
        this->circleCenterX = CWRUtil::toQ5<T>(x);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	631a      	str	r2, [r3, #48]	; 0x30
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	61fb      	str	r3, [r7, #28]
 800edb6:	69fb      	ldr	r3, [r7, #28]
 800edb8:	015a      	lsls	r2, r3, #5
 800edba:	f107 0310 	add.w	r3, r7, #16
 800edbe:	4611      	mov	r1, r2
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7ff fccc 	bl	800e75e <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	461a      	mov	r2, r3
        this->circleCenterY = CWRUtil::toQ5<T>(y);
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800edce:	bf00      	nop
 800edd0:	3720      	adds	r7, #32
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}

0800edd6 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>:
     * @see updateArcStart
     * @see updateArcEnd
     * @see updateArc
     */
    template <typename T>
    void setArc(const T startAngle, const T endAngle)
 800edd6:	b580      	push	{r7, lr}
 800edd8:	b088      	sub	sp, #32
 800edda:	af00      	add	r7, sp, #0
 800eddc:	60f8      	str	r0, [r7, #12]
 800edde:	60b9      	str	r1, [r7, #8]
 800ede0:	607a      	str	r2, [r7, #4]
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	61bb      	str	r3, [r7, #24]
 800ede6:	69bb      	ldr	r3, [r7, #24]
 800ede8:	015a      	lsls	r2, r3, #5
 800edea:	f107 0314 	add.w	r3, r7, #20
 800edee:	4611      	mov	r1, r2
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7ff fcb4 	bl	800e75e <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	461a      	mov	r2, r3
    {
        circleArcAngleStart = CWRUtil::toQ5<T>(startAngle);
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	63da      	str	r2, [r3, #60]	; 0x3c
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	61fb      	str	r3, [r7, #28]
 800ee02:	69fb      	ldr	r3, [r7, #28]
 800ee04:	015a      	lsls	r2, r3, #5
 800ee06:	f107 0310 	add.w	r3, r7, #16
 800ee0a:	4611      	mov	r1, r2
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f7ff fca6 	bl	800e75e <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	461a      	mov	r2, r3
        circleArcAngleEnd = CWRUtil::toQ5<T>(endAngle);
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	641a      	str	r2, [r3, #64]	; 0x40
    }
 800ee1a:	bf00      	nop
 800ee1c:	3720      	adds	r7, #32
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}
	...

0800ee24 <_ZN8touchgfx4ViewI22TestGirouettePresenterEC1Ev>:
    View() : presenter(0)
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b082      	sub	sp, #8
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f00a ff96 	bl	8019d60 <_ZN8touchgfx6ScreenC1Ev>
 800ee34:	4a05      	ldr	r2, [pc, #20]	; (800ee4c <_ZN8touchgfx4ViewI22TestGirouettePresenterEC1Ev+0x28>)
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	601a      	str	r2, [r3, #0]
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	4618      	mov	r0, r3
 800ee44:	3708      	adds	r7, #8
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}
 800ee4a:	bf00      	nop
 800ee4c:	08027bb0 	.word	0x08027bb0

0800ee50 <_ZN8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b084      	sub	sp, #16
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	60f8      	str	r0, [r7, #12]
 800ee58:	60b9      	str	r1, [r7, #8]
 800ee5a:	4639      	mov	r1, r7
 800ee5c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	4618      	mov	r0, r3
 800ee64:	f7fe fdbc 	bl	800d9e0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800ee68:	4a08      	ldr	r2, [pc, #32]	; (800ee8c <_ZN8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	68ba      	ldr	r2, [r7, #8]
 800ee72:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	3308      	adds	r3, #8
 800ee78:	463a      	mov	r2, r7
 800ee7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee7e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	4618      	mov	r0, r3
 800ee86:	3710      	adds	r7, #16
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}
 800ee8c:	08027b98 	.word	0x08027b98

0800ee90 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>:
    void setRadius(const T r)
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b084      	sub	sp, #16
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
 800ee98:	6039      	str	r1, [r7, #0]
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	60fb      	str	r3, [r7, #12]
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	015a      	lsls	r2, r3, #5
 800eea2:	f107 0308 	add.w	r3, r7, #8
 800eea6:	4611      	mov	r1, r2
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7ff fc58 	bl	800e75e <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	461a      	mov	r2, r3
        this->circleRadius = CWRUtil::toQ5<T>(r);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	639a      	str	r2, [r3, #56]	; 0x38
    }
 800eeb6:	bf00      	nop
 800eeb8:	3710      	adds	r7, #16
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}

0800eebe <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>:
     * @note The area containing the Circle is not invalidated.
     * @note if the new line with is smaller than the old width, the circle should be invalidated
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
 800eebe:	b580      	push	{r7, lr}
 800eec0:	b084      	sub	sp, #16
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	6078      	str	r0, [r7, #4]
 800eec6:	6039      	str	r1, [r7, #0]
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	60fb      	str	r3, [r7, #12]
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	015a      	lsls	r2, r3, #5
 800eed0:	f107 0308 	add.w	r3, r7, #8
 800eed4:	4611      	mov	r1, r2
 800eed6:	4618      	mov	r0, r3
 800eed8:	f7ff fc41 	bl	800e75e <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	461a      	mov	r2, r3
    {
        this->circleLineWidth = CWRUtil::toQ5<T>(width);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	645a      	str	r2, [r3, #68]	; 0x44
    }
 800eee4:	bf00      	nop
 800eee6:	3710      	adds	r7, #16
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}

0800eeec <_ZN8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b082      	sub	sp, #8
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	4a05      	ldr	r2, [pc, #20]	; (800ef0c <_ZN8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	601a      	str	r2, [r3, #0]
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7fe fdff 	bl	800db00 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	4618      	mov	r0, r3
 800ef06:	3708      	adds	r7, #8
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}
 800ef0c:	08027b98 	.word	0x08027b98

0800ef10 <_ZN8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b082      	sub	sp, #8
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	f7ff ffe7 	bl	800eeec <_ZN8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800ef1e:	2110      	movs	r1, #16
 800ef20:	6878      	ldr	r0, [r7, #4]
 800ef22:	f015 fe6e 	bl	8024c02 <_ZdlPvj>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3708      	adds	r7, #8
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}

0800ef30 <_ZN8touchgfx6CircleD1Ev>:
class Circle : public CanvasWidget
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	4a05      	ldr	r2, [pc, #20]	; (800ef50 <_ZN8touchgfx6CircleD1Ev+0x20>)
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	601a      	str	r2, [r3, #0]
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	4618      	mov	r0, r3
 800ef42:	f007 ffe9 	bl	8016f18 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3708      	adds	r7, #8
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}
 800ef50:	08029c00 	.word	0x08029c00

0800ef54 <_ZN8touchgfx6CircleD0Ev>:
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b082      	sub	sp, #8
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f7ff ffe7 	bl	800ef30 <_ZN8touchgfx6CircleD1Ev>
 800ef62:	214c      	movs	r1, #76	; 0x4c
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f015 fe4c 	bl	8024c02 <_ZdlPvj>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3708      	adds	r7, #8
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	4a05      	ldr	r2, [pc, #20]	; (800ef94 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	601a      	str	r2, [r3, #0]
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	4618      	mov	r0, r3
 800ef86:	f7ff fbf9 	bl	800e77c <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3708      	adds	r7, #8
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}
 800ef94:	08029d24 	.word	0x08029d24

0800ef98 <_ZN8touchgfx13PainterRGB888D0Ev>:
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f7ff ffe7 	bl	800ef74 <_ZN8touchgfx13PainterRGB888D1Ev>
 800efa6:	2118      	movs	r1, #24
 800efa8:	6878      	ldr	r0, [r7, #4]
 800efaa:	f015 fe2a 	bl	8024c02 <_ZdlPvj>
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	4618      	mov	r0, r3
 800efb2:	3708      	adds	r7, #8
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}

0800efb8 <_ZN8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800efb8:	b580      	push	{r7, lr}
 800efba:	b082      	sub	sp, #8
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	685b      	ldr	r3, [r3, #4]
 800efc6:	687a      	ldr	r2, [r7, #4]
 800efc8:	68d2      	ldr	r2, [r2, #12]
 800efca:	1052      	asrs	r2, r2, #1
 800efcc:	1898      	adds	r0, r3, r2
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	68db      	ldr	r3, [r3, #12]
 800efd2:	f003 0301 	and.w	r3, r3, #1
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d102      	bne.n	800efe0 <_ZN8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	689b      	ldr	r3, [r3, #8]
 800efde:	e00a      	b.n	800eff6 <_ZN8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	685b      	ldr	r3, [r3, #4]
 800efe4:	687a      	ldr	r2, [r7, #4]
 800efe6:	68d2      	ldr	r2, [r2, #12]
 800efe8:	1052      	asrs	r2, r2, #1
 800efea:	4413      	add	r3, r2
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	687a      	ldr	r2, [r7, #4]
 800eff0:	6892      	ldr	r2, [r2, #8]
 800eff2:	4413      	add	r3, r2
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	6839      	ldr	r1, [r7, #0]
 800eff8:	4798      	blx	r3
    }
 800effa:	bf00      	nop
 800effc:	3708      	adds	r7, #8
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}

0800f002 <_ZNK8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800f002:	b480      	push	{r7}
 800f004:	b083      	sub	sp, #12
 800f006:	af00      	add	r7, sp, #0
 800f008:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d010      	beq.n	800f034 <_ZNK8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	689b      	ldr	r3, [r3, #8]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d107      	bne.n	800f02a <_ZNK8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	68db      	ldr	r3, [r3, #12]
 800f01e:	f003 0301 	and.w	r3, r3, #1
 800f022:	2b00      	cmp	r3, #0
 800f024:	d101      	bne.n	800f02a <_ZNK8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800f026:	2301      	movs	r3, #1
 800f028:	e000      	b.n	800f02c <_ZNK8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800f02a:	2300      	movs	r3, #0
 800f02c:	2b01      	cmp	r3, #1
 800f02e:	d001      	beq.n	800f034 <_ZNK8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800f030:	2301      	movs	r3, #1
 800f032:	e000      	b.n	800f036 <_ZNK8touchgfx8CallbackI21TestGirouetteViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800f034:	2300      	movs	r3, #0
    }
 800f036:	4618      	mov	r0, r3
 800f038:	370c      	adds	r7, #12
 800f03a:	46bd      	mov	sp, r7
 800f03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f040:	4770      	bx	lr
	...

0800f044 <_ZN8touchgfx4ViewI19TestI2CSPIPresenterED1Ev>:
class View : public Screen
 800f044:	b580      	push	{r7, lr}
 800f046:	b082      	sub	sp, #8
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	4a05      	ldr	r2, [pc, #20]	; (800f064 <_ZN8touchgfx4ViewI19TestI2CSPIPresenterED1Ev+0x20>)
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	601a      	str	r2, [r3, #0]
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	4618      	mov	r0, r3
 800f056:	f7fe f88b 	bl	800d170 <_ZN8touchgfx6ScreenD1Ev>
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	4618      	mov	r0, r3
 800f05e:	3708      	adds	r7, #8
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}
 800f064:	08027c34 	.word	0x08027c34

0800f068 <_ZN8touchgfx4ViewI19TestI2CSPIPresenterED0Ev>:
 800f068:	b580      	push	{r7, lr}
 800f06a:	b082      	sub	sp, #8
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f7ff ffe7 	bl	800f044 <_ZN8touchgfx4ViewI19TestI2CSPIPresenterED1Ev>
 800f076:	2140      	movs	r1, #64	; 0x40
 800f078:	6878      	ldr	r0, [r7, #4]
 800f07a:	f015 fdc2 	bl	8024c02 <_ZdlPvj>
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	4618      	mov	r0, r3
 800f082:	3708      	adds	r7, #8
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}

0800f088 <_ZN18TestI2CSPIViewBaseD1Ev>:

class TestI2CSPIViewBase : public touchgfx::View<TestI2CSPIPresenter>
{
public:
    TestI2CSPIViewBase();
    virtual ~TestI2CSPIViewBase() {}
 800f088:	b580      	push	{r7, lr}
 800f08a:	b082      	sub	sp, #8
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
 800f090:	4a12      	ldr	r2, [pc, #72]	; (800f0dc <_ZN18TestI2CSPIViewBaseD1Ev+0x54>)
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	601a      	str	r2, [r3, #0]
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800f09c:	4618      	mov	r0, r3
 800f09e:	f000 f989 	bl	800f3b4 <_ZN8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	33d4      	adds	r3, #212	; 0xd4
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7fd fea6 	bl	800cdf8 <_ZN8touchgfx8TextAreaD1Ev>
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	33a0      	adds	r3, #160	; 0xa0
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f7fe f923 	bl	800d2fc <_ZN8touchgfx6ButtonD1Ev>
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	336c      	adds	r3, #108	; 0x6c
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7fd fe9c 	bl	800cdf8 <_ZN8touchgfx8TextAreaD1Ev>
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	3340      	adds	r3, #64	; 0x40
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f7fe f80f 	bl	800d0e8 <_ZN8touchgfx5ImageD1Ev>
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7ff ffb9 	bl	800f044 <_ZN8touchgfx4ViewI19TestI2CSPIPresenterED1Ev>
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3708      	adds	r7, #8
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}
 800f0dc:	08027be4 	.word	0x08027be4

0800f0e0 <_ZN18TestI2CSPIViewBaseD0Ev>:
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b082      	sub	sp, #8
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f7ff ffcd 	bl	800f088 <_ZN18TestI2CSPIViewBaseD1Ev>
 800f0ee:	f44f 718c 	mov.w	r1, #280	; 0x118
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f015 fd85 	bl	8024c02 <_ZdlPvj>
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	3708      	adds	r7, #8
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}

0800f102 <_ZN18TestI2CSPIViewBase19buttonReturnClickedEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void buttonReturnClicked()
 800f102:	b480      	push	{r7}
 800f104:	b083      	sub	sp, #12
 800f106:	af00      	add	r7, sp, #0
 800f108:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in TestI2CSPI
    }
 800f10a:	bf00      	nop
 800f10c:	370c      	adds	r7, #12
 800f10e:	46bd      	mov	sp, r7
 800f110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f114:	4770      	bx	lr

0800f116 <_ZN18TestI2CSPIViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 800f116:	b580      	push	{r7, lr}
 800f118:	b082      	sub	sp, #8
 800f11a:	af00      	add	r7, sp, #0
 800f11c:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800f11e:	f009 fe41 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 800f122:	4603      	mov	r3, r0
    }
 800f124:	4618      	mov	r0, r3
 800f126:	3708      	adds	r7, #8
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <_ZN18TestI2CSPIViewBaseC1Ev>:
#include <gui_generated/testi2cspi_screen/TestI2CSPIViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

TestI2CSPIViewBase::TestI2CSPIViewBase() :
 800f12c:	b590      	push	{r4, r7, lr}
 800f12e:	b08b      	sub	sp, #44	; 0x2c
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &TestI2CSPIViewBase::buttonCallbackHandler)
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	4618      	mov	r0, r3
 800f138:	f000 f906 	bl	800f348 <_ZN8touchgfx4ViewI19TestI2CSPIPresenterEC1Ev>
 800f13c:	4a6d      	ldr	r2, [pc, #436]	; (800f2f4 <_ZN18TestI2CSPIViewBaseC1Ev+0x1c8>)
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	601a      	str	r2, [r3, #0]
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800f148:	f107 0308 	add.w	r3, r7, #8
 800f14c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f150:	4618      	mov	r0, r3
 800f152:	f7fd fb72 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800f156:	f107 0308 	add.w	r3, r7, #8
 800f15a:	4619      	mov	r1, r3
 800f15c:	4620      	mov	r0, r4
 800f15e:	f7fd fd51 	bl	800cc04 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	336c      	adds	r3, #108	; 0x6c
 800f166:	4618      	mov	r0, r3
 800f168:	f7fd fd94 	bl	800cc94 <_ZN8touchgfx8TextAreaC1Ev>
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	33a0      	adds	r3, #160	; 0xa0
 800f170:	4618      	mov	r0, r3
 800f172:	f7fe fe55 	bl	800de20 <_ZN8touchgfx6ButtonC1Ev>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	33d4      	adds	r3, #212	; 0xd4
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7fd fd8a 	bl	800cc94 <_ZN8touchgfx8TextAreaC1Ev>
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f503 7084 	add.w	r0, r3, #264	; 0x108
 800f186:	4b5c      	ldr	r3, [pc, #368]	; (800f2f8 <_ZN18TestI2CSPIViewBaseC1Ev+0x1cc>)
 800f188:	60fb      	str	r3, [r7, #12]
 800f18a:	2300      	movs	r3, #0
 800f18c:	613b      	str	r3, [r7, #16]
 800f18e:	f107 030c 	add.w	r3, r7, #12
 800f192:	cb0c      	ldmia	r3, {r2, r3}
 800f194:	6879      	ldr	r1, [r7, #4]
 800f196:	f000 f8ed 	bl	800f374 <_ZN8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    imageBg.setXY(0, 0);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	3340      	adds	r3, #64	; 0x40
 800f19e:	2200      	movs	r2, #0
 800f1a0:	2100      	movs	r1, #0
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7fd fbc6 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    imageBg.setBitmap(touchgfx::Bitmap(BITMAP_GREEN_POLYGONS_BACKGROUND_480X272_ID));
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800f1ae:	f107 0314 	add.w	r3, r7, #20
 800f1b2:	2111      	movs	r1, #17
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f7fd fb40 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800f1ba:	f107 0314 	add.w	r3, r7, #20
 800f1be:	4619      	mov	r1, r3
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	f008 fd41 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textArea1.setXY(20, 20);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	336c      	adds	r3, #108	; 0x6c
 800f1ca:	2214      	movs	r2, #20
 800f1cc:	2114      	movs	r1, #20
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f7fd fbb0 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800f1da:	22ff      	movs	r2, #255	; 0xff
 800f1dc:	21ff      	movs	r1, #255	; 0xff
 800f1de:	20ff      	movs	r0, #255	; 0xff
 800f1e0:	f7fd feb0 	bl	800cf44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	4619      	mov	r1, r3
 800f1e8:	4620      	mov	r0, r4
 800f1ea:	f7fd fd96 	bl	800cd1a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	336c      	adds	r3, #108	; 0x6c
 800f1f2:	2100      	movs	r1, #0
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f7fd fde3 	bl	800cdc0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID10));
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800f200:	f107 0318 	add.w	r3, r7, #24
 800f204:	2105      	movs	r1, #5
 800f206:	4618      	mov	r0, r3
 800f208:	f7fd fd1e 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 800f20c:	8b39      	ldrh	r1, [r7, #24]
 800f20e:	4620      	mov	r0, r4
 800f210:	f008 fb06 	bl	8017820 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    buttonReturn.setXY(10, 230);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	33a0      	adds	r3, #160	; 0xa0
 800f218:	22e6      	movs	r2, #230	; 0xe6
 800f21a:	210a      	movs	r1, #10
 800f21c:	4618      	mov	r0, r3
 800f21e:	f7fd fb89 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    buttonReturn.setBitmaps(touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID), touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID));
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800f228:	f107 031c 	add.w	r3, r7, #28
 800f22c:	2117      	movs	r1, #23
 800f22e:	4618      	mov	r0, r3
 800f230:	f7fd fb03 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800f234:	f107 0320 	add.w	r3, r7, #32
 800f238:	2117      	movs	r1, #23
 800f23a:	4618      	mov	r0, r3
 800f23c:	f7fd fafd 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800f240:	f107 0220 	add.w	r2, r7, #32
 800f244:	f107 031c 	add.w	r3, r7, #28
 800f248:	4619      	mov	r1, r3
 800f24a:	4620      	mov	r0, r4
 800f24c:	f008 faf2 	bl	8017834 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonReturn.setAction(buttonCallback);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800f25c:	4619      	mov	r1, r3
 800f25e:	4610      	mov	r0, r2
 800f260:	f7fe f81b 	bl	800d29a <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textArea2.setXY(70, 111);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	33d4      	adds	r3, #212	; 0xd4
 800f268:	226f      	movs	r2, #111	; 0x6f
 800f26a:	2146      	movs	r1, #70	; 0x46
 800f26c:	4618      	mov	r0, r3
 800f26e:	f7fd fb61 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    textArea2.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 800f278:	2200      	movs	r2, #0
 800f27a:	2100      	movs	r1, #0
 800f27c:	2000      	movs	r0, #0
 800f27e:	f7fd fe61 	bl	800cf44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f282:	4603      	mov	r3, r0
 800f284:	4619      	mov	r1, r3
 800f286:	4620      	mov	r0, r4
 800f288:	f7fd fd47 	bl	800cd1a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea2.setLinespacing(0);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	33d4      	adds	r3, #212	; 0xd4
 800f290:	2100      	movs	r1, #0
 800f292:	4618      	mov	r0, r3
 800f294:	f7fd fd94 	bl	800cdc0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 800f29e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f2a2:	210b      	movs	r1, #11
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f7fd fccf 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 800f2aa:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	f008 fab7 	bl	8017820 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(imageBg);
 800f2b2:	687a      	ldr	r2, [r7, #4]
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	3340      	adds	r3, #64	; 0x40
 800f2b8:	4619      	mov	r1, r3
 800f2ba:	4610      	mov	r0, r2
 800f2bc:	f7fd ffb0 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	336c      	adds	r3, #108	; 0x6c
 800f2c6:	4619      	mov	r1, r3
 800f2c8:	4610      	mov	r0, r2
 800f2ca:	f7fd ffa9 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonReturn);
 800f2ce:	687a      	ldr	r2, [r7, #4]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	33a0      	adds	r3, #160	; 0xa0
 800f2d4:	4619      	mov	r1, r3
 800f2d6:	4610      	mov	r0, r2
 800f2d8:	f7fd ffa2 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea2);
 800f2dc:	687a      	ldr	r2, [r7, #4]
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	33d4      	adds	r3, #212	; 0xd4
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	4610      	mov	r0, r2
 800f2e6:	f7fd ff9b 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	372c      	adds	r7, #44	; 0x2c
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd90      	pop	{r4, r7, pc}
 800f2f4:	08027be4 	.word	0x08027be4
 800f2f8:	0800f311 	.word	0x0800f311

0800f2fc <_ZN18TestI2CSPIViewBase11setupScreenEv>:

void TestI2CSPIViewBase::setupScreen()
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b083      	sub	sp, #12
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]

}
 800f304:	bf00      	nop
 800f306:	370c      	adds	r7, #12
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr

0800f310 <_ZN18TestI2CSPIViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void TestI2CSPIViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b082      	sub	sp, #8
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
 800f318:	6039      	str	r1, [r7, #0]
    if (&src == &buttonReturn)
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	33a0      	adds	r3, #160	; 0xa0
 800f31e:	683a      	ldr	r2, [r7, #0]
 800f320:	429a      	cmp	r2, r3
 800f322:	d10c      	bne.n	800f33e <_ZN18TestI2CSPIViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2e>
    {
        //InteractionbuttonReturnClicked
        //When buttonReturn clicked call virtual function
        //Call buttonReturnClicked
        buttonReturnClicked();
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	332c      	adds	r3, #44	; 0x2c
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	4798      	blx	r3

        //InteractionReturnToMenu
        //When InteractionbuttonReturnClicked completed change screen to Menu
        //Go to Menu with screen transition towards West
        application().gotoMenuScreenSlideTransitionWest();
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f7ff fef0 	bl	800f116 <_ZN18TestI2CSPIViewBase11applicationEv>
 800f336:	4603      	mov	r3, r0
 800f338:	4618      	mov	r0, r3
 800f33a:	f7fb f8e5 	bl	800a508 <_ZN23FrontendApplicationBase33gotoMenuScreenSlideTransitionWestEv>
    }
}
 800f33e:	bf00      	nop
 800f340:	3708      	adds	r7, #8
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}
	...

0800f348 <_ZN8touchgfx4ViewI19TestI2CSPIPresenterEC1Ev>:
    View() : presenter(0)
 800f348:	b580      	push	{r7, lr}
 800f34a:	b082      	sub	sp, #8
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	4618      	mov	r0, r3
 800f354:	f00a fd04 	bl	8019d60 <_ZN8touchgfx6ScreenC1Ev>
 800f358:	4a05      	ldr	r2, [pc, #20]	; (800f370 <_ZN8touchgfx4ViewI19TestI2CSPIPresenterEC1Ev+0x28>)
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	601a      	str	r2, [r3, #0]
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	2200      	movs	r2, #0
 800f362:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	4618      	mov	r0, r3
 800f368:	3708      	adds	r7, #8
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}
 800f36e:	bf00      	nop
 800f370:	08027c34 	.word	0x08027c34

0800f374 <_ZN8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800f374:	b580      	push	{r7, lr}
 800f376:	b084      	sub	sp, #16
 800f378:	af00      	add	r7, sp, #0
 800f37a:	60f8      	str	r0, [r7, #12]
 800f37c:	60b9      	str	r1, [r7, #8]
 800f37e:	4639      	mov	r1, r7
 800f380:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	4618      	mov	r0, r3
 800f388:	f7fe fb2a 	bl	800d9e0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800f38c:	4a08      	ldr	r2, [pc, #32]	; (800f3b0 <_ZN8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	68ba      	ldr	r2, [r7, #8]
 800f396:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	3308      	adds	r3, #8
 800f39c:	463a      	mov	r2, r7
 800f39e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f3a2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3710      	adds	r7, #16
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}
 800f3b0:	08027c1c 	.word	0x08027c1c

0800f3b4 <_ZN8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b082      	sub	sp, #8
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
 800f3bc:	4a05      	ldr	r2, [pc, #20]	; (800f3d4 <_ZN8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	601a      	str	r2, [r3, #0]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7fe fb9b 	bl	800db00 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	3708      	adds	r7, #8
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}
 800f3d4:	08027c1c 	.word	0x08027c1c

0800f3d8 <_ZN8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b082      	sub	sp, #8
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f7ff ffe7 	bl	800f3b4 <_ZN8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800f3e6:	2110      	movs	r1, #16
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f015 fc0a 	bl	8024c02 <_ZdlPvj>
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3708      	adds	r7, #8
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}

0800f3f8 <_ZN8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b082      	sub	sp, #8
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
 800f400:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	685b      	ldr	r3, [r3, #4]
 800f406:	687a      	ldr	r2, [r7, #4]
 800f408:	68d2      	ldr	r2, [r2, #12]
 800f40a:	1052      	asrs	r2, r2, #1
 800f40c:	1898      	adds	r0, r3, r2
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	68db      	ldr	r3, [r3, #12]
 800f412:	f003 0301 	and.w	r3, r3, #1
 800f416:	2b00      	cmp	r3, #0
 800f418:	d102      	bne.n	800f420 <_ZN8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	689b      	ldr	r3, [r3, #8]
 800f41e:	e00a      	b.n	800f436 <_ZN8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	685b      	ldr	r3, [r3, #4]
 800f424:	687a      	ldr	r2, [r7, #4]
 800f426:	68d2      	ldr	r2, [r2, #12]
 800f428:	1052      	asrs	r2, r2, #1
 800f42a:	4413      	add	r3, r2
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	687a      	ldr	r2, [r7, #4]
 800f430:	6892      	ldr	r2, [r2, #8]
 800f432:	4413      	add	r3, r2
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	6839      	ldr	r1, [r7, #0]
 800f438:	4798      	blx	r3
    }
 800f43a:	bf00      	nop
 800f43c:	3708      	adds	r7, #8
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}

0800f442 <_ZNK8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800f442:	b480      	push	{r7}
 800f444:	b083      	sub	sp, #12
 800f446:	af00      	add	r7, sp, #0
 800f448:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	685b      	ldr	r3, [r3, #4]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d010      	beq.n	800f474 <_ZNK8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	689b      	ldr	r3, [r3, #8]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d107      	bne.n	800f46a <_ZNK8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	68db      	ldr	r3, [r3, #12]
 800f45e:	f003 0301 	and.w	r3, r3, #1
 800f462:	2b00      	cmp	r3, #0
 800f464:	d101      	bne.n	800f46a <_ZNK8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800f466:	2301      	movs	r3, #1
 800f468:	e000      	b.n	800f46c <_ZNK8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800f46a:	2300      	movs	r3, #0
 800f46c:	2b01      	cmp	r3, #1
 800f46e:	d001      	beq.n	800f474 <_ZNK8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800f470:	2301      	movs	r3, #1
 800f472:	e000      	b.n	800f476 <_ZNK8touchgfx8CallbackI18TestI2CSPIViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800f474:	2300      	movs	r3, #0
    }
 800f476:	4618      	mov	r0, r3
 800f478:	370c      	adds	r7, #12
 800f47a:	46bd      	mov	sp, r7
 800f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f480:	4770      	bx	lr

0800f482 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        operator int() const
 800f482:	b480      	push	{r7}
 800f484:	b083      	sub	sp, #12
 800f486:	af00      	add	r7, sp, #0
 800f488:	6078      	str	r0, [r7, #4]
            return v;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
        }
 800f48e:	4618      	mov	r0, r3
 800f490:	370c      	adds	r7, #12
 800f492:	46bd      	mov	sp, r7
 800f494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f498:	4770      	bx	lr

0800f49a <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @note The area containing the Line is not invalidated.
     *
     * @see updateLineWidth
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 800f49a:	b590      	push	{r4, r7, lr}
 800f49c:	b083      	sub	sp, #12
 800f49e:	af00      	add	r7, sp, #0
 800f4a0:	6078      	str	r0, [r7, #4]
 800f4a2:	6039      	str	r1, [r7, #0]
    {
        if (lineWidth == widthQ5)
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	3340      	adds	r3, #64	; 0x40
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f7ff ffea 	bl	800f482 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800f4ae:	4604      	mov	r4, r0
 800f4b0:	463b      	mov	r3, r7
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7ff ffe5 	bl	800f482 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	429c      	cmp	r4, r3
 800f4bc:	bf0c      	ite	eq
 800f4be:	2301      	moveq	r3, #1
 800f4c0:	2300      	movne	r3, #0
 800f4c2:	b2db      	uxtb	r3, r3
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d106      	bne.n	800f4d6 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidth = widthQ5;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	683a      	ldr	r2, [r7, #0]
 800f4cc:	641a      	str	r2, [r3, #64]	; 0x40

        updateCachedShape();
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f007 fdf6 	bl	80170c0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 800f4d4:	e000      	b.n	800f4d8 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 800f4d6:	bf00      	nop
    }
 800f4d8:	370c      	adds	r7, #12
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd90      	pop	{r4, r7, pc}
	...

0800f4e0 <_ZN8touchgfx4ViewI29TestOrientationVoilePresenterED1Ev>:
class View : public Screen
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b082      	sub	sp, #8
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
 800f4e8:	4a05      	ldr	r2, [pc, #20]	; (800f500 <_ZN8touchgfx4ViewI29TestOrientationVoilePresenterED1Ev+0x20>)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	601a      	str	r2, [r3, #0]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f7fd fe3d 	bl	800d170 <_ZN8touchgfx6ScreenD1Ev>
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3708      	adds	r7, #8
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}
 800f500:	08027cb8 	.word	0x08027cb8

0800f504 <_ZN8touchgfx4ViewI29TestOrientationVoilePresenterED0Ev>:
 800f504:	b580      	push	{r7, lr}
 800f506:	b082      	sub	sp, #8
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f7ff ffe7 	bl	800f4e0 <_ZN8touchgfx4ViewI29TestOrientationVoilePresenterED1Ev>
 800f512:	2140      	movs	r1, #64	; 0x40
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f015 fb74 	bl	8024c02 <_ZdlPvj>
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	4618      	mov	r0, r3
 800f51e:	3708      	adds	r7, #8
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}

0800f524 <_ZN28TestOrientationVoileViewBaseD1Ev>:

class TestOrientationVoileViewBase : public touchgfx::View<TestOrientationVoilePresenter>
{
public:
    TestOrientationVoileViewBase();
    virtual ~TestOrientationVoileViewBase() {}
 800f524:	b580      	push	{r7, lr}
 800f526:	b082      	sub	sp, #8
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	4a30      	ldr	r2, [pc, #192]	; (800f5f0 <_ZN28TestOrientationVoileViewBaseD1Ev+0xcc>)
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	601a      	str	r2, [r3, #0]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800f538:	4618      	mov	r0, r3
 800f53a:	f000 fc6f 	bl	800fe1c <_ZN8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 800f544:	4618      	mov	r0, r3
 800f546:	f7ff fd15 	bl	800ef74 <_ZN8touchgfx13PainterRGB888D1Ev>
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 800f550:	4618      	mov	r0, r3
 800f552:	f7ff fced 	bl	800ef30 <_ZN8touchgfx6CircleD1Ev>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f503 735d 	add.w	r3, r3, #884	; 0x374
 800f55c:	4618      	mov	r0, r3
 800f55e:	f7ff fd09 	bl	800ef74 <_ZN8touchgfx13PainterRGB888D1Ev>
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800f568:	4618      	mov	r0, r3
 800f56a:	f7ff fce1 	bl	800ef30 <_ZN8touchgfx6CircleD1Ev>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 800f574:	4618      	mov	r0, r3
 800f576:	f7fd fdd9 	bl	800d12c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800f580:	4618      	mov	r0, r3
 800f582:	f7fd fc39 	bl	800cdf8 <_ZN8touchgfx8TextAreaD1Ev>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f58c:	4618      	mov	r0, r3
 800f58e:	f7fd fc33 	bl	800cdf8 <_ZN8touchgfx8TextAreaD1Ev>
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800f598:	4618      	mov	r0, r3
 800f59a:	f005 fcd9 	bl	8014f50 <_ZN8touchgfx6SliderD1Ev>
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f7ff fce5 	bl	800ef74 <_ZN8touchgfx13PainterRGB888D1Ev>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f000 fc55 	bl	800fe60 <_ZN8touchgfx4LineD1Ev>
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	33d4      	adds	r3, #212	; 0xd4
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f7fd fd94 	bl	800d0e8 <_ZN8touchgfx5ImageD1Ev>
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	33a0      	adds	r3, #160	; 0xa0
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f7fd fe99 	bl	800d2fc <_ZN8touchgfx6ButtonD1Ev>
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	336c      	adds	r3, #108	; 0x6c
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f7fd fc12 	bl	800cdf8 <_ZN8touchgfx8TextAreaD1Ev>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	3340      	adds	r3, #64	; 0x40
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f7fd fd85 	bl	800d0e8 <_ZN8touchgfx5ImageD1Ev>
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f7ff ff7d 	bl	800f4e0 <_ZN8touchgfx4ViewI29TestOrientationVoilePresenterED1Ev>
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	3708      	adds	r7, #8
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	bd80      	pop	{r7, pc}
 800f5f0:	08027c68 	.word	0x08027c68

0800f5f4 <_ZN28TestOrientationVoileViewBaseD0Ev>:
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b082      	sub	sp, #8
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f7ff ff91 	bl	800f524 <_ZN28TestOrientationVoileViewBaseD1Ev>
 800f602:	f242 0148 	movw	r1, #8264	; 0x2048
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f015 fafb 	bl	8024c02 <_ZdlPvj>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	4618      	mov	r0, r3
 800f610:	3708      	adds	r7, #8
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}

0800f616 <_ZN28TestOrientationVoileViewBase19buttonReturnClickedEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void buttonReturnClicked()
 800f616:	b480      	push	{r7}
 800f618:	b083      	sub	sp, #12
 800f61a:	af00      	add	r7, sp, #0
 800f61c:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in TestOrientationVoile
    }
 800f61e:	bf00      	nop
 800f620:	370c      	adds	r7, #12
 800f622:	46bd      	mov	sp, r7
 800f624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f628:	4770      	bx	lr

0800f62a <_ZN28TestOrientationVoileViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 800f62a:	b580      	push	{r7, lr}
 800f62c:	b082      	sub	sp, #8
 800f62e:	af00      	add	r7, sp, #0
 800f630:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800f632:	f009 fbb7 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 800f636:	4603      	mov	r3, r0
    }
 800f638:	4618      	mov	r0, r3
 800f63a:	3708      	adds	r7, #8
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <_ZN28TestOrientationVoileViewBaseC1Ev>:
#include <gui_generated/testorientationvoile_screen/TestOrientationVoileViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

TestOrientationVoileViewBase::TestOrientationVoileViewBase() :
 800f640:	b590      	push	{r4, r7, lr}
 800f642:	b099      	sub	sp, #100	; 0x64
 800f644:	af02      	add	r7, sp, #8
 800f646:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &TestOrientationVoileViewBase::buttonCallbackHandler)
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	4618      	mov	r0, r3
 800f64c:	f000 fb4c 	bl	800fce8 <_ZN8touchgfx4ViewI29TestOrientationVoilePresenterEC1Ev>
 800f650:	4adf      	ldr	r2, [pc, #892]	; (800f9d0 <_ZN28TestOrientationVoileViewBaseC1Ev+0x390>)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	601a      	str	r2, [r3, #0]
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800f65c:	f107 030c 	add.w	r3, r7, #12
 800f660:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f664:	4618      	mov	r0, r3
 800f666:	f7fd f8e8 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800f66a:	f107 030c 	add.w	r3, r7, #12
 800f66e:	4619      	mov	r1, r3
 800f670:	4620      	mov	r0, r4
 800f672:	f7fd fac7 	bl	800cc04 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	336c      	adds	r3, #108	; 0x6c
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7fd fb0a 	bl	800cc94 <_ZN8touchgfx8TextAreaC1Ev>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	33a0      	adds	r3, #160	; 0xa0
 800f684:	4618      	mov	r0, r3
 800f686:	f7fe fbcb 	bl	800de20 <_ZN8touchgfx6ButtonC1Ev>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 800f690:	f107 0310 	add.w	r3, r7, #16
 800f694:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f698:	4618      	mov	r0, r3
 800f69a:	f7fd f8ce 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800f69e:	f107 0310 	add.w	r3, r7, #16
 800f6a2:	4619      	mov	r1, r3
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	f7fd faad 	bl	800cc04 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f007 fce5 	bl	8017080 <_ZN8touchgfx4LineC1Ev>
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 800f6bc:	f107 0314 	add.w	r3, r7, #20
 800f6c0:	2100      	movs	r1, #0
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f7fd f873 	bl	800c7ae <_ZN8touchgfx9colortypeC1Em>
 800f6c8:	22ff      	movs	r2, #255	; 0xff
 800f6ca:	6979      	ldr	r1, [r7, #20]
 800f6cc:	4620      	mov	r0, r4
 800f6ce:	f007 fafd 	bl	8016ccc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f005 fe7b 	bl	80153d4 <_ZN8touchgfx6SliderC1Ev>
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7fd fad5 	bl	800cc94 <_ZN8touchgfx8TextAreaC1Ev>
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f7fd facf 	bl	800cc94 <_ZN8touchgfx8TextAreaC1Ev>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7fd fbd1 	bl	800cea4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800f708:	4618      	mov	r0, r3
 800f70a:	f006 fe95 	bl	8016438 <_ZN8touchgfx6CircleC1Ev>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f503 745d 	add.w	r4, r3, #884	; 0x374
 800f714:	f107 0318 	add.w	r3, r7, #24
 800f718:	2100      	movs	r1, #0
 800f71a:	4618      	mov	r0, r3
 800f71c:	f7fd f847 	bl	800c7ae <_ZN8touchgfx9colortypeC1Em>
 800f720:	22ff      	movs	r2, #255	; 0xff
 800f722:	69b9      	ldr	r1, [r7, #24]
 800f724:	4620      	mov	r0, r4
 800f726:	f007 fad1 	bl	8016ccc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 800f730:	4618      	mov	r0, r3
 800f732:	f006 fe81 	bl	8016438 <_ZN8touchgfx6CircleC1Ev>
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f503 7476 	add.w	r4, r3, #984	; 0x3d8
 800f73c:	f107 031c 	add.w	r3, r7, #28
 800f740:	2100      	movs	r1, #0
 800f742:	4618      	mov	r0, r3
 800f744:	f7fd f833 	bl	800c7ae <_ZN8touchgfx9colortypeC1Em>
 800f748:	22ff      	movs	r2, #255	; 0xff
 800f74a:	69f9      	ldr	r1, [r7, #28]
 800f74c:	4620      	mov	r0, r4
 800f74e:	f007 fabd 	bl	8016ccc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f503 6083 	add.w	r0, r3, #1048	; 0x418
 800f758:	4b9e      	ldr	r3, [pc, #632]	; (800f9d4 <_ZN28TestOrientationVoileViewBaseC1Ev+0x394>)
 800f75a:	623b      	str	r3, [r7, #32]
 800f75c:	2300      	movs	r3, #0
 800f75e:	627b      	str	r3, [r7, #36]	; 0x24
 800f760:	f107 0320 	add.w	r3, r7, #32
 800f764:	cb0c      	ldmia	r3, {r2, r3}
 800f766:	6879      	ldr	r1, [r7, #4]
 800f768:	f000 fad4 	bl	800fd14 <_ZN8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800f772:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 800f776:	4618      	mov	r0, r3
 800f778:	f008 fad4 	bl	8017d24 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    imageBg.setXY(0, 0);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	3340      	adds	r3, #64	; 0x40
 800f780:	2200      	movs	r2, #0
 800f782:	2100      	movs	r1, #0
 800f784:	4618      	mov	r0, r3
 800f786:	f7fd f8d5 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    imageBg.setBitmap(touchgfx::Bitmap(BITMAP_GREEN_POLYGONS_BACKGROUND_480X272_ID));
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800f790:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f794:	2111      	movs	r1, #17
 800f796:	4618      	mov	r0, r3
 800f798:	f7fd f84f 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800f79c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f7a0:	4619      	mov	r1, r3
 800f7a2:	4620      	mov	r0, r4
 800f7a4:	f008 fa50 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textArea1.setXY(10, 10);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	336c      	adds	r3, #108	; 0x6c
 800f7ac:	220a      	movs	r2, #10
 800f7ae:	210a      	movs	r1, #10
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f7fd f8bf 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800f7bc:	22ff      	movs	r2, #255	; 0xff
 800f7be:	21ff      	movs	r1, #255	; 0xff
 800f7c0:	20ff      	movs	r0, #255	; 0xff
 800f7c2:	f7fd fbbf 	bl	800cf44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	4619      	mov	r1, r3
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	f7fd faa5 	bl	800cd1a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	336c      	adds	r3, #108	; 0x6c
 800f7d4:	2100      	movs	r1, #0
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7fd faf2 	bl	800cdc0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800f7e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f7e6:	2106      	movs	r1, #6
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f7fd fa2d 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 800f7ee:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800f7f0:	4620      	mov	r0, r4
 800f7f2:	f008 f815 	bl	8017820 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    buttonReturn.setXY(10, 230);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	33a0      	adds	r3, #160	; 0xa0
 800f7fa:	22e6      	movs	r2, #230	; 0xe6
 800f7fc:	210a      	movs	r1, #10
 800f7fe:	4618      	mov	r0, r3
 800f800:	f7fd f898 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    buttonReturn.setBitmaps(touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID), touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID));
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800f80a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f80e:	2117      	movs	r1, #23
 800f810:	4618      	mov	r0, r3
 800f812:	f7fd f812 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800f816:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f81a:	2117      	movs	r1, #23
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7fd f80c 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800f822:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f826:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f82a:	4619      	mov	r1, r3
 800f82c:	4620      	mov	r0, r4
 800f82e:	f008 f801 	bl	8017834 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonReturn.setAction(buttonCallback);
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800f83e:	4619      	mov	r1, r3
 800f840:	4610      	mov	r0, r2
 800f842:	f7fd fd2a 	bl	800d29a <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    image1.setXY(50, 104);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	33d4      	adds	r3, #212	; 0xd4
 800f84a:	2268      	movs	r2, #104	; 0x68
 800f84c:	2132      	movs	r1, #50	; 0x32
 800f84e:	4618      	mov	r0, r3
 800f850:	f7fd f870 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_WIND_48_ID));
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 800f85a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f85e:	211d      	movs	r1, #29
 800f860:	4618      	mov	r0, r3
 800f862:	f7fc ffea 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800f866:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f86a:	4619      	mov	r1, r3
 800f86c:	4620      	mov	r0, r4
 800f86e:	f008 f9eb 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    lineSail.setPosition(160, 48, 160, 160);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f503 7080 	add.w	r0, r3, #256	; 0x100
 800f878:	23a0      	movs	r3, #160	; 0xa0
 800f87a:	9300      	str	r3, [sp, #0]
 800f87c:	23a0      	movs	r3, #160	; 0xa0
 800f87e:	2230      	movs	r2, #48	; 0x30
 800f880:	21a0      	movs	r1, #160	; 0xa0
 800f882:	f7fa fb83 	bl	8009f8c <_ZN8touchgfx8Drawable11setPositionEssss>
    lineSailPainter.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 800f88c:	2200      	movs	r2, #0
 800f88e:	2100      	movs	r1, #0
 800f890:	2000      	movs	r0, #0
 800f892:	f7fd fb57 	bl	800cf44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f896:	4603      	mov	r3, r0
 800f898:	22ff      	movs	r2, #255	; 0xff
 800f89a:	4619      	mov	r1, r3
 800f89c:	4620      	mov	r0, r4
 800f89e:	f007 f9fa 	bl	8016c96 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    lineSail.setPainter(lineSailPainter);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800f8ae:	4619      	mov	r1, r3
 800f8b0:	4610      	mov	r0, r2
 800f8b2:	f007 fa53 	bl	8016d5c <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    lineSail.setStart(80, 80);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f8bc:	2250      	movs	r2, #80	; 0x50
 800f8be:	2150      	movs	r1, #80	; 0x50
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f000 fa47 	bl	800fd54 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    lineSail.setEnd(156, 80);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f8cc:	2250      	movs	r2, #80	; 0x50
 800f8ce:	219c      	movs	r1, #156	; 0x9c
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f000 fa65 	bl	800fda0 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    lineSail.setLineWidth(4);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f8dc:	2104      	movs	r1, #4
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f000 fa84 	bl	800fdec <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    lineSail.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f8ea:	2101      	movs	r1, #1
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f007 fd21 	bl	8017334 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    slider1.setXY(262, 236);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800f8f8:	22ec      	movs	r2, #236	; 0xec
 800f8fa:	f44f 7183 	mov.w	r1, #262	; 0x106
 800f8fe:	4618      	mov	r0, r3
 800f900:	f7fd f818 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    slider1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_INDICATORS_SLIDER_HORIZONTAL_SMALL_SQUARE_KNOB_ID));
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f503 74c6 	add.w	r4, r3, #396	; 0x18c
 800f90a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f90e:	2105      	movs	r1, #5
 800f910:	4618      	mov	r0, r3
 800f912:	f7fc ff92 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800f916:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f91a:	2106      	movs	r1, #6
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7fc ff8c 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800f922:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f926:	2104      	movs	r1, #4
 800f928:	4618      	mov	r0, r3
 800f92a:	f7fc ff86 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 800f92e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f932:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800f936:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800f93a:	4620      	mov	r0, r4
 800f93c:	f005 fd9e 	bl	801547c <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    slider1.setupHorizontalSlider(3, 7, 0, 0, 120);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f503 70c6 	add.w	r0, r3, #396	; 0x18c
 800f946:	2378      	movs	r3, #120	; 0x78
 800f948:	9301      	str	r3, [sp, #4]
 800f94a:	2300      	movs	r3, #0
 800f94c:	9300      	str	r3, [sp, #0]
 800f94e:	2300      	movs	r3, #0
 800f950:	2207      	movs	r2, #7
 800f952:	2103      	movs	r1, #3
 800f954:	f005 fc0c 	bl	8015170 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
    slider1.setValueRange(0, 100);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800f95e:	2264      	movs	r2, #100	; 0x64
 800f960:	2100      	movs	r1, #0
 800f962:	4618      	mov	r0, r3
 800f964:	f005 fb69 	bl	801503a <_ZN8touchgfx6Slider13setValueRangeEii>
    slider1.setValue(50);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800f96e:	2132      	movs	r1, #50	; 0x32
 800f970:	4618      	mov	r0, r3
 800f972:	f005 faee 	bl	8014f52 <_ZN8touchgfx6Slider8setValueEi>

    textArea.setXY(58, 239);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f97c:	22ef      	movs	r2, #239	; 0xef
 800f97e:	213a      	movs	r1, #58	; 0x3a
 800f980:	4618      	mov	r0, r3
 800f982:	f7fc ffd7 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    textArea.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	f503 7422 	add.w	r4, r3, #648	; 0x288
 800f98c:	22ff      	movs	r2, #255	; 0xff
 800f98e:	21ff      	movs	r1, #255	; 0xff
 800f990:	20ff      	movs	r0, #255	; 0xff
 800f992:	f7fd fad7 	bl	800cf44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f996:	4603      	mov	r3, r0
 800f998:	4619      	mov	r1, r3
 800f99a:	4620      	mov	r0, r4
 800f99c:	f7fd f9bd 	bl	800cd1a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea.setLinespacing(0);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f9a6:	2100      	movs	r1, #0
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f7fd fa09 	bl	800cdc0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f503 7422 	add.w	r4, r3, #648	; 0x288
 800f9b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f9b8:	210c      	movs	r1, #12
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f7fd f944 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 800f9c0:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 800f9c4:	4620      	mov	r0, r4
 800f9c6:	f007 ff2b 	bl	8017820 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    textArea2.setXY(383, 98);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	e004      	b.n	800f9d8 <_ZN28TestOrientationVoileViewBaseC1Ev+0x398>
 800f9ce:	bf00      	nop
 800f9d0:	08027c68 	.word	0x08027c68
 800f9d4:	0800fcb1 	.word	0x0800fcb1
 800f9d8:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800f9dc:	2262      	movs	r2, #98	; 0x62
 800f9de:	f240 117f 	movw	r1, #383	; 0x17f
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f7fc ffa6 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    textArea2.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	2100      	movs	r1, #0
 800f9f2:	2000      	movs	r0, #0
 800f9f4:	f7fd faa6 	bl	800cf44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	4620      	mov	r0, r4
 800f9fe:	f7fd f98c 	bl	800cd1a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea2.setLinespacing(0);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800fa08:	2100      	movs	r1, #0
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7fd f9d8 	bl	800cdc0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 800fa16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800fa1a:	210d      	movs	r1, #13
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f7fd f913 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 800fa22:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 800fa26:	4620      	mov	r0, r4
 800fa28:	f007 fefa 	bl	8017820 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    textArea3.setPosition(349, 129, 129, 29);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f503 703c 	add.w	r0, r3, #752	; 0x2f0
 800fa32:	231d      	movs	r3, #29
 800fa34:	9300      	str	r3, [sp, #0]
 800fa36:	2381      	movs	r3, #129	; 0x81
 800fa38:	2281      	movs	r2, #129	; 0x81
 800fa3a:	f240 115d 	movw	r1, #349	; 0x15d
 800fa3e:	f7fa faa5 	bl	8009f8c <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea3.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f503 743c 	add.w	r4, r3, #752	; 0x2f0
 800fa48:	2200      	movs	r2, #0
 800fa4a:	2100      	movs	r1, #0
 800fa4c:	2000      	movs	r0, #0
 800fa4e:	f7fd fa79 	bl	800cf44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800fa52:	4603      	mov	r3, r0
 800fa54:	4619      	mov	r1, r3
 800fa56:	4620      	mov	r0, r4
 800fa58:	f7fd f95f 	bl	800cd1a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea3.setLinespacing(0);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 800fa62:	2100      	movs	r1, #0
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7fd f9ab 	bl	800cdc0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(textArea3Buffer, TEXTAREA3_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID20).getText());
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f503 747c 	add.w	r4, r3, #1008	; 0x3f0
 800fa70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fa74:	210f      	movs	r1, #15
 800fa76:	4618      	mov	r0, r3
 800fa78:	f7fd f8e6 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 800fa7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7fd f8f1 	bl	800cc68 <_ZNK8touchgfx9TypedText7getTextEv>
 800fa86:	4603      	mov	r3, r0
 800fa88:	4a83      	ldr	r2, [pc, #524]	; (800fc98 <_ZN28TestOrientationVoileViewBaseC1Ev+0x658>)
 800fa8a:	2114      	movs	r1, #20
 800fa8c:	4620      	mov	r0, r4
 800fa8e:	f00b fabd 	bl	801b00c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea3.setWildcard(textArea3Buffer);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f503 723c 	add.w	r2, r3, #752	; 0x2f0
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 800fa9e:	4619      	mov	r1, r3
 800faa0:	4610      	mov	r0, r2
 800faa2:	f7fd fa15 	bl	800ced0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID19));
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f503 743c 	add.w	r4, r3, #752	; 0x2f0
 800faac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fab0:	210e      	movs	r1, #14
 800fab2:	4618      	mov	r0, r3
 800fab4:	f7fd f8c8 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 800fab8:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 800fabc:	4620      	mov	r0, r4
 800fabe:	f007 feaf 	bl	8017820 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    circleBg.setPosition(150, 38, 180, 180);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	f503 704a 	add.w	r0, r3, #808	; 0x328
 800fac8:	23b4      	movs	r3, #180	; 0xb4
 800faca:	9300      	str	r3, [sp, #0]
 800facc:	23b4      	movs	r3, #180	; 0xb4
 800face:	2226      	movs	r2, #38	; 0x26
 800fad0:	2196      	movs	r1, #150	; 0x96
 800fad2:	f7fa fa5b 	bl	8009f8c <_ZN8touchgfx8Drawable11setPositionEssss>
    circleBg.setCenter(90, 90);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800fadc:	225a      	movs	r2, #90	; 0x5a
 800fade:	215a      	movs	r1, #90	; 0x5a
 800fae0:	4618      	mov	r0, r3
 800fae2:	f7ff f952 	bl	800ed8a <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>
    circleBg.setRadius(86);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800faec:	2156      	movs	r1, #86	; 0x56
 800faee:	4618      	mov	r0, r3
 800faf0:	f7ff f9ce 	bl	800ee90 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>
    circleBg.setLineWidth(4);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800fafa:	2104      	movs	r1, #4
 800fafc:	4618      	mov	r0, r3
 800fafe:	f7ff f9de 	bl	800eebe <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>
    circleBg.setArc(0, 360);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800fb08:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800fb0c:	2100      	movs	r1, #0
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f7ff f961 	bl	800edd6 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>
    circleBg.setCapPrecision(10);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800fb1a:	210a      	movs	r1, #10
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f006 fca3 	bl	8016468 <_ZN8touchgfx6Circle15setCapPrecisionEi>
    circleBgPainter.setColor(touchgfx::Color::getColorFrom24BitRGB(112, 148, 107));
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f503 745d 	add.w	r4, r3, #884	; 0x374
 800fb28:	226b      	movs	r2, #107	; 0x6b
 800fb2a:	2194      	movs	r1, #148	; 0x94
 800fb2c:	2070      	movs	r0, #112	; 0x70
 800fb2e:	f7fd fa09 	bl	800cf44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800fb32:	4603      	mov	r3, r0
 800fb34:	22ff      	movs	r2, #255	; 0xff
 800fb36:	4619      	mov	r1, r3
 800fb38:	4620      	mov	r0, r4
 800fb3a:	f007 f8ac 	bl	8016c96 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    circleBg.setPainter(circleBgPainter);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f503 724a 	add.w	r2, r3, #808	; 0x328
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f503 735d 	add.w	r3, r3, #884	; 0x374
 800fb4a:	4619      	mov	r1, r3
 800fb4c:	4610      	mov	r0, r2
 800fb4e:	f007 f905 	bl	8016d5c <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>

    circleBoat.setPosition(150, 38, 180, 180);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f503 7063 	add.w	r0, r3, #908	; 0x38c
 800fb58:	23b4      	movs	r3, #180	; 0xb4
 800fb5a:	9300      	str	r3, [sp, #0]
 800fb5c:	23b4      	movs	r3, #180	; 0xb4
 800fb5e:	2226      	movs	r2, #38	; 0x26
 800fb60:	2196      	movs	r1, #150	; 0x96
 800fb62:	f7fa fa13 	bl	8009f8c <_ZN8touchgfx8Drawable11setPositionEssss>
    circleBoat.setCenter(90, 90);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 800fb6c:	225a      	movs	r2, #90	; 0x5a
 800fb6e:	215a      	movs	r1, #90	; 0x5a
 800fb70:	4618      	mov	r0, r3
 800fb72:	f7ff f90a 	bl	800ed8a <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>
    circleBoat.setRadius(86);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 800fb7c:	2156      	movs	r1, #86	; 0x56
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7ff f986 	bl	800ee90 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>
    circleBoat.setLineWidth(6);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 800fb8a:	2106      	movs	r1, #6
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7ff f996 	bl	800eebe <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>
    circleBoat.setArc(260, 280);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 800fb98:	f44f 728c 	mov.w	r2, #280	; 0x118
 800fb9c:	f44f 7182 	mov.w	r1, #260	; 0x104
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7ff f918 	bl	800edd6 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>
    circleBoat.setCapPrecision(10);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 800fbac:	210a      	movs	r1, #10
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f006 fc5a 	bl	8016468 <_ZN8touchgfx6Circle15setCapPrecisionEi>
    circleBoatPainter.setColor(touchgfx::Color::getColorFrom24BitRGB(222, 58, 16));
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f503 7476 	add.w	r4, r3, #984	; 0x3d8
 800fbba:	2210      	movs	r2, #16
 800fbbc:	213a      	movs	r1, #58	; 0x3a
 800fbbe:	20de      	movs	r0, #222	; 0xde
 800fbc0:	f7fd f9c0 	bl	800cf44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	22ff      	movs	r2, #255	; 0xff
 800fbc8:	4619      	mov	r1, r3
 800fbca:	4620      	mov	r0, r4
 800fbcc:	f007 f863 	bl	8016c96 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    circleBoat.setPainter(circleBoatPainter);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f503 7263 	add.w	r2, r3, #908	; 0x38c
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 800fbdc:	4619      	mov	r1, r3
 800fbde:	4610      	mov	r0, r2
 800fbe0:	f007 f8bc 	bl	8016d5c <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>

    add(imageBg);
 800fbe4:	687a      	ldr	r2, [r7, #4]
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	3340      	adds	r3, #64	; 0x40
 800fbea:	4619      	mov	r1, r3
 800fbec:	4610      	mov	r0, r2
 800fbee:	f7fd fb17 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 800fbf2:	687a      	ldr	r2, [r7, #4]
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	336c      	adds	r3, #108	; 0x6c
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	4610      	mov	r0, r2
 800fbfc:	f7fd fb10 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonReturn);
 800fc00:	687a      	ldr	r2, [r7, #4]
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	33a0      	adds	r3, #160	; 0xa0
 800fc06:	4619      	mov	r1, r3
 800fc08:	4610      	mov	r0, r2
 800fc0a:	f7fd fb09 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 800fc0e:	687a      	ldr	r2, [r7, #4]
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	33d4      	adds	r3, #212	; 0xd4
 800fc14:	4619      	mov	r1, r3
 800fc16:	4610      	mov	r0, r2
 800fc18:	f7fd fb02 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(lineSail);
 800fc1c:	687a      	ldr	r2, [r7, #4]
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800fc24:	4619      	mov	r1, r3
 800fc26:	4610      	mov	r0, r2
 800fc28:	f7fd fafa 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(slider1);
 800fc2c:	687a      	ldr	r2, [r7, #4]
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800fc34:	4619      	mov	r1, r3
 800fc36:	4610      	mov	r0, r2
 800fc38:	f7fd faf2 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea);
 800fc3c:	687a      	ldr	r2, [r7, #4]
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800fc44:	4619      	mov	r1, r3
 800fc46:	4610      	mov	r0, r2
 800fc48:	f7fd faea 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea2);
 800fc4c:	687a      	ldr	r2, [r7, #4]
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800fc54:	4619      	mov	r1, r3
 800fc56:	4610      	mov	r0, r2
 800fc58:	f7fd fae2 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea3);
 800fc5c:	687a      	ldr	r2, [r7, #4]
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 800fc64:	4619      	mov	r1, r3
 800fc66:	4610      	mov	r0, r2
 800fc68:	f7fd fada 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(circleBg);
 800fc6c:	687a      	ldr	r2, [r7, #4]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800fc74:	4619      	mov	r1, r3
 800fc76:	4610      	mov	r0, r2
 800fc78:	f7fd fad2 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(circleBoat);
 800fc7c:	687a      	ldr	r2, [r7, #4]
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f503 7363 	add.w	r3, r3, #908	; 0x38c
 800fc84:	4619      	mov	r1, r3
 800fc86:	4610      	mov	r0, r2
 800fc88:	f7fd faca 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	4618      	mov	r0, r3
 800fc90:	375c      	adds	r7, #92	; 0x5c
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd90      	pop	{r4, r7, pc}
 800fc96:	bf00      	nop
 800fc98:	08026648 	.word	0x08026648

0800fc9c <_ZN28TestOrientationVoileViewBase11setupScreenEv>:

void TestOrientationVoileViewBase::setupScreen()
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b083      	sub	sp, #12
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]

}
 800fca4:	bf00      	nop
 800fca6:	370c      	adds	r7, #12
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcae:	4770      	bx	lr

0800fcb0 <_ZN28TestOrientationVoileViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void TestOrientationVoileViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b082      	sub	sp, #8
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
 800fcb8:	6039      	str	r1, [r7, #0]
    if (&src == &buttonReturn)
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	33a0      	adds	r3, #160	; 0xa0
 800fcbe:	683a      	ldr	r2, [r7, #0]
 800fcc0:	429a      	cmp	r2, r3
 800fcc2:	d10c      	bne.n	800fcde <_ZN28TestOrientationVoileViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2e>
    {
        //InteractionbuttonReturnClicked
        //When buttonReturn clicked call virtual function
        //Call buttonReturnClicked
        buttonReturnClicked();
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	332c      	adds	r3, #44	; 0x2c
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	4798      	blx	r3

        //InteractionReturnToMenu
        //When InteractionbuttonReturnClicked completed change screen to Menu
        //Go to Menu with screen transition towards West
        application().gotoMenuScreenSlideTransitionWest();
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f7ff fcaa 	bl	800f62a <_ZN28TestOrientationVoileViewBase11applicationEv>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7fa fc15 	bl	800a508 <_ZN23FrontendApplicationBase33gotoMenuScreenSlideTransitionWestEv>
    }
}
 800fcde:	bf00      	nop
 800fce0:	3708      	adds	r7, #8
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}
	...

0800fce8 <_ZN8touchgfx4ViewI29TestOrientationVoilePresenterEC1Ev>:
    View() : presenter(0)
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b082      	sub	sp, #8
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f00a f834 	bl	8019d60 <_ZN8touchgfx6ScreenC1Ev>
 800fcf8:	4a05      	ldr	r2, [pc, #20]	; (800fd10 <_ZN8touchgfx4ViewI29TestOrientationVoilePresenterEC1Ev+0x28>)
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	601a      	str	r2, [r3, #0]
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2200      	movs	r2, #0
 800fd02:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	4618      	mov	r0, r3
 800fd08:	3708      	adds	r7, #8
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}
 800fd0e:	bf00      	nop
 800fd10:	08027cb8 	.word	0x08027cb8

0800fd14 <_ZN8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b084      	sub	sp, #16
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	60f8      	str	r0, [r7, #12]
 800fd1c:	60b9      	str	r1, [r7, #8]
 800fd1e:	4639      	mov	r1, r7
 800fd20:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7fd fe5a 	bl	800d9e0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800fd2c:	4a08      	ldr	r2, [pc, #32]	; (800fd50 <_ZN8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	68ba      	ldr	r2, [r7, #8]
 800fd36:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	3308      	adds	r3, #8
 800fd3c:	463a      	mov	r2, r7
 800fd3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd42:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3710      	adds	r7, #16
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}
 800fd50:	08027ca0 	.word	0x08027ca0

0800fd54 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 800fd54:	b590      	push	{r4, r7, lr}
 800fd56:	b089      	sub	sp, #36	; 0x24
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	60f8      	str	r0, [r7, #12]
 800fd5c:	60b9      	str	r1, [r7, #8]
 800fd5e:	607a      	str	r2, [r7, #4]
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	61bb      	str	r3, [r7, #24]
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 800fd64:	69bb      	ldr	r3, [r7, #24]
 800fd66:	015a      	lsls	r2, r3, #5
 800fd68:	f107 0314 	add.w	r3, r7, #20
 800fd6c:	4611      	mov	r1, r2
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7fe fcf5 	bl	800e75e <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	461c      	mov	r4, r3
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	61fb      	str	r3, [r7, #28]
 800fd7c:	69fb      	ldr	r3, [r7, #28]
 800fd7e:	015a      	lsls	r2, r3, #5
 800fd80:	f107 0310 	add.w	r3, r7, #16
 800fd84:	4611      	mov	r1, r2
 800fd86:	4618      	mov	r0, r3
 800fd88:	f7fe fce9 	bl	800e75e <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fd8c:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 800fd8e:	461a      	mov	r2, r3
 800fd90:	4621      	mov	r1, r4
 800fd92:	68f8      	ldr	r0, [r7, #12]
 800fd94:	f007 fab8 	bl	8017308 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 800fd98:	bf00      	nop
 800fd9a:	3724      	adds	r7, #36	; 0x24
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd90      	pop	{r4, r7, pc}

0800fda0 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 800fda0:	b590      	push	{r4, r7, lr}
 800fda2:	b089      	sub	sp, #36	; 0x24
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	60f8      	str	r0, [r7, #12]
 800fda8:	60b9      	str	r1, [r7, #8]
 800fdaa:	607a      	str	r2, [r7, #4]
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	61bb      	str	r3, [r7, #24]
 800fdb0:	69bb      	ldr	r3, [r7, #24]
 800fdb2:	015a      	lsls	r2, r3, #5
 800fdb4:	f107 0314 	add.w	r3, r7, #20
 800fdb8:	4611      	mov	r1, r2
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7fe fccf 	bl	800e75e <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	461c      	mov	r4, r3
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	61fb      	str	r3, [r7, #28]
 800fdc8:	69fb      	ldr	r3, [r7, #28]
 800fdca:	015a      	lsls	r2, r3, #5
 800fdcc:	f107 0310 	add.w	r3, r7, #16
 800fdd0:	4611      	mov	r1, r2
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7fe fcc3 	bl	800e75e <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fdd8:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 800fdda:	461a      	mov	r2, r3
 800fddc:	4621      	mov	r1, r4
 800fdde:	68f8      	ldr	r0, [r7, #12]
 800fde0:	f007 fa9d 	bl	801731e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 800fde4:	bf00      	nop
 800fde6:	3724      	adds	r7, #36	; 0x24
 800fde8:	46bd      	mov	sp, r7
 800fdea:	bd90      	pop	{r4, r7, pc}

0800fdec <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b084      	sub	sp, #16
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
 800fdf4:	6039      	str	r1, [r7, #0]
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	60fb      	str	r3, [r7, #12]
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	015a      	lsls	r2, r3, #5
 800fdfe:	f107 0308 	add.w	r3, r7, #8
 800fe02:	4611      	mov	r1, r2
 800fe04:	4618      	mov	r0, r3
 800fe06:	f7fe fcaa 	bl	800e75e <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fe0a:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 800fe0c:	4619      	mov	r1, r3
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f7ff fb43 	bl	800f49a <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 800fe14:	bf00      	nop
 800fe16:	3710      	adds	r7, #16
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}

0800fe1c <_ZN8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	4a05      	ldr	r2, [pc, #20]	; (800fe3c <_ZN8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	601a      	str	r2, [r3, #0]
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7fd fe67 	bl	800db00 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	4618      	mov	r0, r3
 800fe36:	3708      	adds	r7, #8
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	08027ca0 	.word	0x08027ca0

0800fe40 <_ZN8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f7ff ffe7 	bl	800fe1c <_ZN8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800fe4e:	2110      	movs	r1, #16
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f014 fed6 	bl	8024c02 <_ZdlPvj>
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3708      	adds	r7, #8
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}

0800fe60 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b082      	sub	sp, #8
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	4a05      	ldr	r2, [pc, #20]	; (800fe80 <_ZN8touchgfx4LineD1Ev+0x20>)
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	601a      	str	r2, [r3, #0]
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	4618      	mov	r0, r3
 800fe72:	f007 f851 	bl	8016f18 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3708      	adds	r7, #8
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}
 800fe80:	08029f68 	.word	0x08029f68

0800fe84 <_ZN8touchgfx4LineD0Ev>:
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b082      	sub	sp, #8
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f7ff ffe7 	bl	800fe60 <_ZN8touchgfx4LineD1Ev>
 800fe92:	2174      	movs	r1, #116	; 0x74
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	f014 feb4 	bl	8024c02 <_ZdlPvj>
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	3708      	adds	r7, #8
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}

0800fea4 <_ZN8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b082      	sub	sp, #8
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
 800feac:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	685b      	ldr	r3, [r3, #4]
 800feb2:	687a      	ldr	r2, [r7, #4]
 800feb4:	68d2      	ldr	r2, [r2, #12]
 800feb6:	1052      	asrs	r2, r2, #1
 800feb8:	1898      	adds	r0, r3, r2
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	68db      	ldr	r3, [r3, #12]
 800febe:	f003 0301 	and.w	r3, r3, #1
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d102      	bne.n	800fecc <_ZN8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	689b      	ldr	r3, [r3, #8]
 800feca:	e00a      	b.n	800fee2 <_ZN8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	685b      	ldr	r3, [r3, #4]
 800fed0:	687a      	ldr	r2, [r7, #4]
 800fed2:	68d2      	ldr	r2, [r2, #12]
 800fed4:	1052      	asrs	r2, r2, #1
 800fed6:	4413      	add	r3, r2
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	687a      	ldr	r2, [r7, #4]
 800fedc:	6892      	ldr	r2, [r2, #8]
 800fede:	4413      	add	r3, r2
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	6839      	ldr	r1, [r7, #0]
 800fee4:	4798      	blx	r3
    }
 800fee6:	bf00      	nop
 800fee8:	3708      	adds	r7, #8
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}

0800feee <_ZNK8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800feee:	b480      	push	{r7}
 800fef0:	b083      	sub	sp, #12
 800fef2:	af00      	add	r7, sp, #0
 800fef4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	685b      	ldr	r3, [r3, #4]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d010      	beq.n	800ff20 <_ZNK8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	689b      	ldr	r3, [r3, #8]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d107      	bne.n	800ff16 <_ZNK8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	68db      	ldr	r3, [r3, #12]
 800ff0a:	f003 0301 	and.w	r3, r3, #1
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d101      	bne.n	800ff16 <_ZNK8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800ff12:	2301      	movs	r3, #1
 800ff14:	e000      	b.n	800ff18 <_ZNK8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800ff16:	2300      	movs	r3, #0
 800ff18:	2b01      	cmp	r3, #1
 800ff1a:	d001      	beq.n	800ff20 <_ZNK8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	e000      	b.n	800ff22 <_ZNK8touchgfx8CallbackI28TestOrientationVoileViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800ff20:	2300      	movs	r3, #0
    }
 800ff22:	4618      	mov	r0, r3
 800ff24:	370c      	adds	r7, #12
 800ff26:	46bd      	mov	sp, r7
 800ff28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2c:	4770      	bx	lr

0800ff2e <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 800ff2e:	b480      	push	{r7}
 800ff30:	b083      	sub	sp, #12
 800ff32:	af00      	add	r7, sp, #0
 800ff34:	6078      	str	r0, [r7, #4]
 800ff36:	460b      	mov	r3, r1
 800ff38:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	78fa      	ldrb	r2, [r7, #3]
 800ff3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800ff42:	bf00      	nop
 800ff44:	370c      	adds	r7, #12
 800ff46:	46bd      	mov	sp, r7
 800ff48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4c:	4770      	bx	lr

0800ff4e <_ZN8touchgfx6Slider20setStopValueCallbackERNS_15GenericCallbackIRKS0_ivEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the Slider and the current value of the slider at interaction end.
     *
     * @see GenericCallback
     */
    void setStopValueCallback(GenericCallback< const Slider&, int >& callback)
 800ff4e:	b480      	push	{r7}
 800ff50:	b083      	sub	sp, #12
 800ff52:	af00      	add	r7, sp, #0
 800ff54:	6078      	str	r0, [r7, #4]
 800ff56:	6039      	str	r1, [r7, #0]
    {
        stopValueCallback = &callback;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	683a      	ldr	r2, [r7, #0]
 800ff5c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    }
 800ff60:	bf00      	nop
 800ff62:	370c      	adds	r7, #12
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	4770      	bx	lr

0800ff6c <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the Slider and the current value of the slider.
     *
     * @see GenericCallback
     */
    void setNewValueCallback(GenericCallback< const Slider&, int >& callback)
 800ff6c:	b480      	push	{r7}
 800ff6e:	b083      	sub	sp, #12
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
 800ff74:	6039      	str	r1, [r7, #0]
    {
        newValueCallback = &callback;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	683a      	ldr	r2, [r7, #0]
 800ff7a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    }
 800ff7e:	bf00      	nop
 800ff80:	370c      	adds	r7, #12
 800ff82:	46bd      	mov	sp, r7
 800ff84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff88:	4770      	bx	lr
	...

0800ff8c <_ZN8touchgfx4ViewI28TestRotationPlateauPresenterED1Ev>:
class View : public Screen
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b082      	sub	sp, #8
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
 800ff94:	4a05      	ldr	r2, [pc, #20]	; (800ffac <_ZN8touchgfx4ViewI28TestRotationPlateauPresenterED1Ev+0x20>)
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	601a      	str	r2, [r3, #0]
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f7fd f8e7 	bl	800d170 <_ZN8touchgfx6ScreenD1Ev>
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3708      	adds	r7, #8
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}
 800ffac:	08027d5c 	.word	0x08027d5c

0800ffb0 <_ZN8touchgfx4ViewI28TestRotationPlateauPresenterED0Ev>:
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b082      	sub	sp, #8
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f7ff ffe7 	bl	800ff8c <_ZN8touchgfx4ViewI28TestRotationPlateauPresenterED1Ev>
 800ffbe:	2140      	movs	r1, #64	; 0x40
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	f014 fe1e 	bl	8024c02 <_ZdlPvj>
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3708      	adds	r7, #8
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}

0800ffd0 <_ZN27TestRotationPlateauViewBaseD1Ev>:

class TestRotationPlateauViewBase : public touchgfx::View<TestRotationPlateauPresenter>
{
public:
    TestRotationPlateauViewBase();
    virtual ~TestRotationPlateauViewBase() {}
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b082      	sub	sp, #8
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	4a2b      	ldr	r2, [pc, #172]	; (8010088 <_ZN27TestRotationPlateauViewBaseD1Ev+0xb8>)
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	601a      	str	r2, [r3, #0]
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f503 7349 	add.w	r3, r3, #804	; 0x324
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f000 fbfb 	bl	80107e0 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivED1Ev>
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f503 7345 	add.w	r3, r3, #788	; 0x314
 800fff0:	4618      	mov	r0, r3
 800fff2:	f000 fbf5 	bl	80107e0 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivED1Ev>
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f503 7341 	add.w	r3, r3, #772	; 0x304
 800fffc:	4618      	mov	r0, r3
 800fffe:	f000 fc11 	bl	8010824 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8010008:	4618      	mov	r0, r3
 801000a:	f7fc fef5 	bl	800cdf8 <_ZN8touchgfx8TextAreaD1Ev>
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8010014:	4618      	mov	r0, r3
 8010016:	f7fd f971 	bl	800d2fc <_ZN8touchgfx6ButtonD1Ev>
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8010020:	4618      	mov	r0, r3
 8010022:	f7fd f861 	bl	800d0e8 <_ZN8touchgfx5ImageD1Ev>
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	f503 730c 	add.w	r3, r3, #560	; 0x230
 801002c:	4618      	mov	r0, r3
 801002e:	f7fd f85b 	bl	800d0e8 <_ZN8touchgfx5ImageD1Ev>
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8010038:	4618      	mov	r0, r3
 801003a:	f7fd f877 	bl	800d12c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8010044:	4618      	mov	r0, r3
 8010046:	f7fd f84f 	bl	800d0e8 <_ZN8touchgfx5ImageD1Ev>
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8010050:	4618      	mov	r0, r3
 8010052:	f7fe ff8f 	bl	800ef74 <_ZN8touchgfx13PainterRGB888D1Ev>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801005c:	4618      	mov	r0, r3
 801005e:	f7fe ff67 	bl	800ef30 <_ZN8touchgfx6CircleD1Ev>
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	336c      	adds	r3, #108	; 0x6c
 8010066:	4618      	mov	r0, r3
 8010068:	f004 ff72 	bl	8014f50 <_ZN8touchgfx6SliderD1Ev>
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	3340      	adds	r3, #64	; 0x40
 8010070:	4618      	mov	r0, r3
 8010072:	f7fd f839 	bl	800d0e8 <_ZN8touchgfx5ImageD1Ev>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	4618      	mov	r0, r3
 801007a:	f7ff ff87 	bl	800ff8c <_ZN8touchgfx4ViewI28TestRotationPlateauPresenterED1Ev>
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	4618      	mov	r0, r3
 8010082:	3708      	adds	r7, #8
 8010084:	46bd      	mov	sp, r7
 8010086:	bd80      	pop	{r7, pc}
 8010088:	08027cec 	.word	0x08027cec

0801008c <_ZN27TestRotationPlateauViewBaseD0Ev>:
 801008c:	b580      	push	{r7, lr}
 801008e:	b082      	sub	sp, #8
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f7ff ff9b 	bl	800ffd0 <_ZN27TestRotationPlateauViewBaseD1Ev>
 801009a:	f641 7154 	movw	r1, #8020	; 0x1f54
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f014 fdaf 	bl	8024c02 <_ZdlPvj>
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	4618      	mov	r0, r3
 80100a8:	3708      	adds	r7, #8
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}

080100ae <_ZN27TestRotationPlateauViewBase21sliderRotationChangedEi>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void sliderRotationChanged(int value)
 80100ae:	b480      	push	{r7}
 80100b0:	b083      	sub	sp, #12
 80100b2:	af00      	add	r7, sp, #0
 80100b4:	6078      	str	r0, [r7, #4]
 80100b6:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in TestRotationPlateau
    }
 80100b8:	bf00      	nop
 80100ba:	370c      	adds	r7, #12
 80100bc:	46bd      	mov	sp, r7
 80100be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c2:	4770      	bx	lr

080100c4 <_ZN27TestRotationPlateauViewBase22sliderRotationReleasedEi>:

    virtual void sliderRotationReleased(int value)
 80100c4:	b480      	push	{r7}
 80100c6:	b083      	sub	sp, #12
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in TestRotationPlateau
    }
 80100ce:	bf00      	nop
 80100d0:	370c      	adds	r7, #12
 80100d2:	46bd      	mov	sp, r7
 80100d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d8:	4770      	bx	lr

080100da <_ZN27TestRotationPlateauViewBase19buttonReturnClickedEv>:

    virtual void buttonReturnClicked()
 80100da:	b480      	push	{r7}
 80100dc:	b083      	sub	sp, #12
 80100de:	af00      	add	r7, sp, #0
 80100e0:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in TestRotationPlateau
    }
 80100e2:	bf00      	nop
 80100e4:	370c      	adds	r7, #12
 80100e6:	46bd      	mov	sp, r7
 80100e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ec:	4770      	bx	lr

080100ee <_ZN27TestRotationPlateauViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 80100ee:	b580      	push	{r7, lr}
 80100f0:	b082      	sub	sp, #8
 80100f2:	af00      	add	r7, sp, #0
 80100f4:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80100f6:	f008 fe55 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 80100fa:	4603      	mov	r3, r0
    }
 80100fc:	4618      	mov	r0, r3
 80100fe:	3708      	adds	r7, #8
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}

08010104 <_ZN27TestRotationPlateauViewBaseC1Ev>:
#include <gui_generated/testrotationplateau_screen/TestRotationPlateauViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

TestRotationPlateauViewBase::TestRotationPlateauViewBase() :
 8010104:	b590      	push	{r4, r7, lr}
 8010106:	b09d      	sub	sp, #116	; 0x74
 8010108:	af02      	add	r7, sp, #8
 801010a:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &TestRotationPlateauViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &TestRotationPlateauViewBase::sliderValueChangedCallbackHandler),
    sliderValueConfirmedCallback(this, &TestRotationPlateauViewBase::sliderValueConfirmedCallbackHandler)
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	4618      	mov	r0, r3
 8010110:	f000 fae0 	bl	80106d4 <_ZN8touchgfx4ViewI28TestRotationPlateauPresenterEC1Ev>
 8010114:	4adb      	ldr	r2, [pc, #876]	; (8010484 <_ZN27TestRotationPlateauViewBaseC1Ev+0x380>)
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	601a      	str	r2, [r3, #0]
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8010120:	f107 030c 	add.w	r3, r7, #12
 8010124:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010128:	4618      	mov	r0, r3
 801012a:	f7fc fb86 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 801012e:	f107 030c 	add.w	r3, r7, #12
 8010132:	4619      	mov	r1, r3
 8010134:	4620      	mov	r0, r4
 8010136:	f7fc fd65 	bl	800cc04 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	336c      	adds	r3, #108	; 0x6c
 801013e:	4618      	mov	r0, r3
 8010140:	f005 f948 	bl	80153d4 <_ZN8touchgfx6SliderC1Ev>
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801014a:	4618      	mov	r0, r3
 801014c:	f006 f974 	bl	8016438 <_ZN8touchgfx6CircleC1Ev>
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f503 74da 	add.w	r4, r3, #436	; 0x1b4
 8010156:	f107 0310 	add.w	r3, r7, #16
 801015a:	2100      	movs	r1, #0
 801015c:	4618      	mov	r0, r3
 801015e:	f7fc fb26 	bl	800c7ae <_ZN8touchgfx9colortypeC1Em>
 8010162:	22ff      	movs	r2, #255	; 0xff
 8010164:	6939      	ldr	r1, [r7, #16]
 8010166:	4620      	mov	r0, r4
 8010168:	f006 fdb0 	bl	8016ccc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 8010172:	f107 0314 	add.w	r3, r7, #20
 8010176:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801017a:	4618      	mov	r0, r3
 801017c:	f7fc fb5d 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 8010180:	f107 0314 	add.w	r3, r7, #20
 8010184:	4619      	mov	r1, r3
 8010186:	4620      	mov	r0, r4
 8010188:	f7fc fd3c 	bl	800cc04 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8010192:	4618      	mov	r0, r3
 8010194:	f7fc fe86 	bl	800cea4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f503 740c 	add.w	r4, r3, #560	; 0x230
 801019e:	f107 0318 	add.w	r3, r7, #24
 80101a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80101a6:	4618      	mov	r0, r3
 80101a8:	f7fc fb47 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 80101ac:	f107 0318 	add.w	r3, r7, #24
 80101b0:	4619      	mov	r1, r3
 80101b2:	4620      	mov	r0, r4
 80101b4:	f7fc fd26 	bl	800cc04 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f503 7417 	add.w	r4, r3, #604	; 0x25c
 80101be:	f107 031c 	add.w	r3, r7, #28
 80101c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80101c6:	4618      	mov	r0, r3
 80101c8:	f7fc fb37 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 80101cc:	f107 031c 	add.w	r3, r7, #28
 80101d0:	4619      	mov	r1, r3
 80101d2:	4620      	mov	r0, r4
 80101d4:	f7fc fd16 	bl	800cc04 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80101de:	4618      	mov	r0, r3
 80101e0:	f7fd fe1e 	bl	800de20 <_ZN8touchgfx6ButtonC1Ev>
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7fc fd52 	bl	800cc94 <_ZN8touchgfx8TextAreaC1Ev>
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f503 7041 	add.w	r0, r3, #772	; 0x304
 80101f6:	4ba4      	ldr	r3, [pc, #656]	; (8010488 <_ZN27TestRotationPlateauViewBaseC1Ev+0x384>)
 80101f8:	623b      	str	r3, [r7, #32]
 80101fa:	2300      	movs	r3, #0
 80101fc:	627b      	str	r3, [r7, #36]	; 0x24
 80101fe:	f107 0320 	add.w	r3, r7, #32
 8010202:	cb0c      	ldmia	r3, {r2, r3}
 8010204:	6879      	ldr	r1, [r7, #4]
 8010206:	f000 fa7b 	bl	8010700 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f503 7045 	add.w	r0, r3, #788	; 0x314
 8010210:	4b9e      	ldr	r3, [pc, #632]	; (801048c <_ZN27TestRotationPlateauViewBaseC1Ev+0x388>)
 8010212:	62bb      	str	r3, [r7, #40]	; 0x28
 8010214:	2300      	movs	r3, #0
 8010216:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010218:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801021c:	cb0c      	ldmia	r3, {r2, r3}
 801021e:	6879      	ldr	r1, [r7, #4]
 8010220:	f000 fa9e 	bl	8010760 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f503 7049 	add.w	r0, r3, #804	; 0x324
 801022a:	4b99      	ldr	r3, [pc, #612]	; (8010490 <_ZN27TestRotationPlateauViewBaseC1Ev+0x38c>)
 801022c:	633b      	str	r3, [r7, #48]	; 0x30
 801022e:	2300      	movs	r3, #0
 8010230:	637b      	str	r3, [r7, #52]	; 0x34
 8010232:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010236:	cb0c      	ldmia	r3, {r2, r3}
 8010238:	6879      	ldr	r1, [r7, #4]
 801023a:	f000 fa91 	bl	8010760 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8010244:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8010248:	4618      	mov	r0, r3
 801024a:	f007 fd6b 	bl	8017d24 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    imageBg.setXY(0, 0);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	3340      	adds	r3, #64	; 0x40
 8010252:	2200      	movs	r2, #0
 8010254:	2100      	movs	r1, #0
 8010256:	4618      	mov	r0, r3
 8010258:	f7fc fb6c 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    imageBg.setBitmap(touchgfx::Bitmap(BITMAP_GREEN_POLYGONS_BACKGROUND_480X272_ID));
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8010262:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010266:	2111      	movs	r1, #17
 8010268:	4618      	mov	r0, r3
 801026a:	f7fc fae6 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 801026e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010272:	4619      	mov	r1, r3
 8010274:	4620      	mov	r0, r4
 8010276:	f007 fce7 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    sliderRotation.setXY(91, 216);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	336c      	adds	r3, #108	; 0x6c
 801027e:	22d8      	movs	r2, #216	; 0xd8
 8010280:	215b      	movs	r1, #91	; 0x5b
 8010282:	4618      	mov	r0, r3
 8010284:	f7fc fb56 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    sliderRotation.setBitmaps(touchgfx::Bitmap(BITMAP_SLIDER_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_SLIDER_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_SLIDER_KNOB_ID));
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 801028e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010292:	2120      	movs	r1, #32
 8010294:	4618      	mov	r0, r3
 8010296:	f7fc fad0 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 801029a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801029e:	2120      	movs	r1, #32
 80102a0:	4618      	mov	r0, r3
 80102a2:	f7fc faca 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 80102a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80102aa:	211f      	movs	r1, #31
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7fc fac4 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 80102b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80102b6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80102ba:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80102be:	4620      	mov	r0, r4
 80102c0:	f005 f8dc 	bl	801547c <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    sliderRotation.setupHorizontalSlider(0, 10, 0, 0, 318);
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80102ca:	f44f 739f 	mov.w	r3, #318	; 0x13e
 80102ce:	9301      	str	r3, [sp, #4]
 80102d0:	2300      	movs	r3, #0
 80102d2:	9300      	str	r3, [sp, #0]
 80102d4:	2300      	movs	r3, #0
 80102d6:	220a      	movs	r2, #10
 80102d8:	2100      	movs	r1, #0
 80102da:	f004 ff49 	bl	8015170 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
    sliderRotation.setValueRange(0, 100);
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	336c      	adds	r3, #108	; 0x6c
 80102e2:	2264      	movs	r2, #100	; 0x64
 80102e4:	2100      	movs	r1, #0
 80102e6:	4618      	mov	r0, r3
 80102e8:	f004 fea7 	bl	801503a <_ZN8touchgfx6Slider13setValueRangeEii>
    sliderRotation.setValue(50);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	336c      	adds	r3, #108	; 0x6c
 80102f0:	2132      	movs	r1, #50	; 0x32
 80102f2:	4618      	mov	r0, r3
 80102f4:	f004 fe2d 	bl	8014f52 <_ZN8touchgfx6Slider8setValueEi>
    sliderRotation.setNewValueCallback(sliderValueChangedCallback);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8010304:	4619      	mov	r1, r3
 8010306:	4610      	mov	r0, r2
 8010308:	f7ff fe30 	bl	800ff6c <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>
    sliderRotation.setStopValueCallback(sliderValueConfirmedCallback);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8010318:	4619      	mov	r1, r3
 801031a:	4610      	mov	r0, r2
 801031c:	f7ff fe17 	bl	800ff4e <_ZN8touchgfx6Slider20setStopValueCallbackERNS_15GenericCallbackIRKS0_ivEE>

    circleRotation.setPosition(167, 13, 170, 161);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f503 70b4 	add.w	r0, r3, #360	; 0x168
 8010326:	23a1      	movs	r3, #161	; 0xa1
 8010328:	9300      	str	r3, [sp, #0]
 801032a:	23aa      	movs	r3, #170	; 0xaa
 801032c:	220d      	movs	r2, #13
 801032e:	21a7      	movs	r1, #167	; 0xa7
 8010330:	f7f9 fe2c 	bl	8009f8c <_ZN8touchgfx8Drawable11setPositionEssss>
    circleRotation.setCenter(100, 100);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801033a:	2264      	movs	r2, #100	; 0x64
 801033c:	2164      	movs	r1, #100	; 0x64
 801033e:	4618      	mov	r0, r3
 8010340:	f7fe fd23 	bl	800ed8a <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>
    circleRotation.setRadius(95);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801034a:	215f      	movs	r1, #95	; 0x5f
 801034c:	4618      	mov	r0, r3
 801034e:	f7fe fd9f 	bl	800ee90 <_ZN8touchgfx6Circle9setRadiusIiEEvT_>
    circleRotation.setLineWidth(7);
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8010358:	2107      	movs	r1, #7
 801035a:	4618      	mov	r0, r3
 801035c:	f7fe fdaf 	bl	800eebe <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>
    circleRotation.setArc(180, 180);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8010366:	22b4      	movs	r2, #180	; 0xb4
 8010368:	21b4      	movs	r1, #180	; 0xb4
 801036a:	4618      	mov	r0, r3
 801036c:	f7fe fd33 	bl	800edd6 <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>
    circleRotation.setCapPrecision(10);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8010376:	210a      	movs	r1, #10
 8010378:	4618      	mov	r0, r3
 801037a:	f006 f875 	bl	8016468 <_ZN8touchgfx6Circle15setCapPrecisionEi>
    circleRotationPainter.setColor(touchgfx::Color::getColorFrom24BitRGB(249, 186, 109));
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f503 74da 	add.w	r4, r3, #436	; 0x1b4
 8010384:	226d      	movs	r2, #109	; 0x6d
 8010386:	21ba      	movs	r1, #186	; 0xba
 8010388:	20f9      	movs	r0, #249	; 0xf9
 801038a:	f7fc fddb 	bl	800cf44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801038e:	4603      	mov	r3, r0
 8010390:	22ff      	movs	r2, #255	; 0xff
 8010392:	4619      	mov	r1, r3
 8010394:	4620      	mov	r0, r4
 8010396:	f006 fc7e 	bl	8016c96 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    circleRotation.setPainter(circleRotationPainter);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80103a6:	4619      	mov	r1, r3
 80103a8:	4610      	mov	r0, r2
 80103aa:	f006 fcd7 	bl	8016d5c <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    circleRotation.setVisible(false);
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80103b4:	2100      	movs	r1, #0
 80103b6:	4618      	mov	r0, r3
 80103b8:	f7ff fdb9 	bl	800ff2e <_ZN8touchgfx8Drawable10setVisibleEb>

    imageRotBg.setXY(202, 43);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80103c2:	222b      	movs	r2, #43	; 0x2b
 80103c4:	21ca      	movs	r1, #202	; 0xca
 80103c6:	4618      	mov	r0, r3
 80103c8:	f7fc fab4 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    imageRotBg.setBitmap(touchgfx::Bitmap(BITMAP_SAILBOAT_2_LARGE_ID));
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	f503 74e6 	add.w	r4, r3, #460	; 0x1cc
 80103d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80103d6:	211e      	movs	r1, #30
 80103d8:	4618      	mov	r0, r3
 80103da:	f7fc fa2e 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 80103de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80103e2:	4619      	mov	r1, r3
 80103e4:	4620      	mov	r0, r4
 80103e6:	f007 fc2f 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textRotationSpeed.setPosition(206, 18, 92, 25);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 80103f0:	2319      	movs	r3, #25
 80103f2:	9300      	str	r3, [sp, #0]
 80103f4:	235c      	movs	r3, #92	; 0x5c
 80103f6:	2212      	movs	r2, #18
 80103f8:	21ce      	movs	r1, #206	; 0xce
 80103fa:	f7f9 fdc7 	bl	8009f8c <_ZN8touchgfx8Drawable11setPositionEssss>
    textRotationSpeed.setColor(touchgfx::Color::getColorFrom24BitRGB(249, 186, 109));
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 8010404:	226d      	movs	r2, #109	; 0x6d
 8010406:	21ba      	movs	r1, #186	; 0xba
 8010408:	20f9      	movs	r0, #249	; 0xf9
 801040a:	f7fc fd9b 	bl	800cf44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801040e:	4603      	mov	r3, r0
 8010410:	4619      	mov	r1, r3
 8010412:	4620      	mov	r0, r4
 8010414:	f7fc fc81 	bl	800cd1a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textRotationSpeed.setLinespacing(0);
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801041e:	2100      	movs	r1, #0
 8010420:	4618      	mov	r0, r3
 8010422:	f7fc fccd 	bl	800cdc0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(textRotationSpeedBuffer, TEXTROTATIONSPEED_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID6).getText());
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f503 743c 	add.w	r4, r3, #752	; 0x2f0
 801042c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010430:	2101      	movs	r1, #1
 8010432:	4618      	mov	r0, r3
 8010434:	f7fc fc08 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 8010438:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801043c:	4618      	mov	r0, r3
 801043e:	f7fc fc13 	bl	800cc68 <_ZNK8touchgfx9TypedText7getTextEv>
 8010442:	4603      	mov	r3, r0
 8010444:	4a13      	ldr	r2, [pc, #76]	; (8010494 <_ZN27TestRotationPlateauViewBaseC1Ev+0x390>)
 8010446:	210a      	movs	r1, #10
 8010448:	4620      	mov	r0, r4
 801044a:	f00a fddf 	bl	801b00c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textRotationSpeed.setWildcard(textRotationSpeedBuffer);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 801045a:	4619      	mov	r1, r3
 801045c:	4610      	mov	r0, r2
 801045e:	f7fc fd37 	bl	800ced0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textRotationSpeed.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5));
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 8010468:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801046c:	2100      	movs	r1, #0
 801046e:	4618      	mov	r0, r3
 8010470:	f7fc fbea 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 8010474:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8010478:	4620      	mov	r0, r4
 801047a:	f007 f9d1 	bl	8017820 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    imageRotLeft.setXY(110, 158);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	e00a      	b.n	8010498 <_ZN27TestRotationPlateauViewBaseC1Ev+0x394>
 8010482:	bf00      	nop
 8010484:	08027cec 	.word	0x08027cec
 8010488:	08010645 	.word	0x08010645
 801048c:	0801067d 	.word	0x0801067d
 8010490:	080106a9 	.word	0x080106a9
 8010494:	080267ac 	.word	0x080267ac
 8010498:	f503 730c 	add.w	r3, r3, #560	; 0x230
 801049c:	229e      	movs	r2, #158	; 0x9e
 801049e:	216e      	movs	r1, #110	; 0x6e
 80104a0:	4618      	mov	r0, r3
 80104a2:	f7fc fa47 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    imageRotLeft.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_UP_3_52_ID));
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f503 740c 	add.w	r4, r3, #560	; 0x230
 80104ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80104b0:	211c      	movs	r1, #28
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7fc f9c1 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 80104b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80104bc:	4619      	mov	r1, r3
 80104be:	4620      	mov	r0, r4
 80104c0:	f007 fbc2 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    imageRotRight.setXY(390, 164);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80104ca:	22a4      	movs	r2, #164	; 0xa4
 80104cc:	f44f 71c3 	mov.w	r1, #390	; 0x186
 80104d0:	4618      	mov	r0, r3
 80104d2:	f7fc fa2f 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    imageRotRight.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_UP_2_52_ID));
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	f503 7417 	add.w	r4, r3, #604	; 0x25c
 80104dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80104e0:	211b      	movs	r1, #27
 80104e2:	4618      	mov	r0, r3
 80104e4:	f7fc f9a9 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 80104e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80104ec:	4619      	mov	r1, r3
 80104ee:	4620      	mov	r0, r4
 80104f0:	f007 fbaa 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    buttonReturn.setXY(10, 230);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80104fa:	22e6      	movs	r2, #230	; 0xe6
 80104fc:	210a      	movs	r1, #10
 80104fe:	4618      	mov	r0, r3
 8010500:	f7fc fa18 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    buttonReturn.setBitmaps(touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID), touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID));
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f503 7422 	add.w	r4, r3, #648	; 0x288
 801050a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801050e:	2117      	movs	r1, #23
 8010510:	4618      	mov	r0, r3
 8010512:	f7fc f992 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 8010516:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801051a:	2117      	movs	r1, #23
 801051c:	4618      	mov	r0, r3
 801051e:	f7fc f98c 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 8010522:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8010526:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801052a:	4619      	mov	r1, r3
 801052c:	4620      	mov	r0, r4
 801052e:	f007 f981 	bl	8017834 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonReturn.setAction(buttonCallback);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	f503 7222 	add.w	r2, r3, #648	; 0x288
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f503 7341 	add.w	r3, r3, #772	; 0x304
 801053e:	4619      	mov	r1, r3
 8010540:	4610      	mov	r0, r2
 8010542:	f7fc feaa 	bl	800d29a <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textArea1.setXY(20, 20);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801054c:	2214      	movs	r2, #20
 801054e:	2114      	movs	r1, #20
 8010550:	4618      	mov	r0, r3
 8010552:	f7fc f9ef 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 801055c:	22ff      	movs	r2, #255	; 0xff
 801055e:	21ff      	movs	r1, #255	; 0xff
 8010560:	20ff      	movs	r0, #255	; 0xff
 8010562:	f7fc fcef 	bl	800cf44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010566:	4603      	mov	r3, r0
 8010568:	4619      	mov	r1, r3
 801056a:	4620      	mov	r0, r4
 801056c:	f7fc fbd5 	bl	800cd1a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8010576:	2100      	movs	r1, #0
 8010578:	4618      	mov	r0, r3
 801057a:	f7fc fc21 	bl	800cdc0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID26));
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8010584:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010588:	2115      	movs	r1, #21
 801058a:	4618      	mov	r0, r3
 801058c:	f7fc fb5c 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 8010590:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8010594:	4620      	mov	r0, r4
 8010596:	f007 f943 	bl	8017820 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(imageBg);
 801059a:	687a      	ldr	r2, [r7, #4]
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	3340      	adds	r3, #64	; 0x40
 80105a0:	4619      	mov	r1, r3
 80105a2:	4610      	mov	r0, r2
 80105a4:	f7fc fe3c 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(sliderRotation);
 80105a8:	687a      	ldr	r2, [r7, #4]
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	336c      	adds	r3, #108	; 0x6c
 80105ae:	4619      	mov	r1, r3
 80105b0:	4610      	mov	r0, r2
 80105b2:	f7fc fe35 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(circleRotation);
 80105b6:	687a      	ldr	r2, [r7, #4]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80105be:	4619      	mov	r1, r3
 80105c0:	4610      	mov	r0, r2
 80105c2:	f7fc fe2d 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(imageRotBg);
 80105c6:	687a      	ldr	r2, [r7, #4]
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 80105ce:	4619      	mov	r1, r3
 80105d0:	4610      	mov	r0, r2
 80105d2:	f7fc fe25 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textRotationSpeed);
 80105d6:	687a      	ldr	r2, [r7, #4]
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80105de:	4619      	mov	r1, r3
 80105e0:	4610      	mov	r0, r2
 80105e2:	f7fc fe1d 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(imageRotLeft);
 80105e6:	687a      	ldr	r2, [r7, #4]
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80105ee:	4619      	mov	r1, r3
 80105f0:	4610      	mov	r0, r2
 80105f2:	f7fc fe15 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(imageRotRight);
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80105fe:	4619      	mov	r1, r3
 8010600:	4610      	mov	r0, r2
 8010602:	f7fc fe0d 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonReturn);
 8010606:	687a      	ldr	r2, [r7, #4]
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801060e:	4619      	mov	r1, r3
 8010610:	4610      	mov	r0, r2
 8010612:	f7fc fe05 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 8010616:	687a      	ldr	r2, [r7, #4]
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801061e:	4619      	mov	r1, r3
 8010620:	4610      	mov	r0, r2
 8010622:	f7fc fdfd 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	4618      	mov	r0, r3
 801062a:	376c      	adds	r7, #108	; 0x6c
 801062c:	46bd      	mov	sp, r7
 801062e:	bd90      	pop	{r4, r7, pc}

08010630 <_ZN27TestRotationPlateauViewBase11setupScreenEv>:

void TestRotationPlateauViewBase::setupScreen()
{
 8010630:	b480      	push	{r7}
 8010632:	b083      	sub	sp, #12
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]

}
 8010638:	bf00      	nop
 801063a:	370c      	adds	r7, #12
 801063c:	46bd      	mov	sp, r7
 801063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010642:	4770      	bx	lr

08010644 <_ZN27TestRotationPlateauViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void TestRotationPlateauViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b082      	sub	sp, #8
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
 801064c:	6039      	str	r1, [r7, #0]
    if (&src == &buttonReturn)
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8010654:	683a      	ldr	r2, [r7, #0]
 8010656:	429a      	cmp	r2, r3
 8010658:	d10c      	bne.n	8010674 <_ZN27TestRotationPlateauViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x30>
    {
        //InteractionbuttonReturnClicked
        //When buttonReturn clicked call virtual function
        //Call buttonReturnClicked
        buttonReturnClicked();
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	3334      	adds	r3, #52	; 0x34
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	6878      	ldr	r0, [r7, #4]
 8010664:	4798      	blx	r3

        //InteractionReturnToMenu
        //When InteractionbuttonReturnClicked completed change screen to Menu
        //Go to Menu with screen transition towards West
        application().gotoMenuScreenSlideTransitionWest();
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f7ff fd41 	bl	80100ee <_ZN27TestRotationPlateauViewBase11applicationEv>
 801066c:	4603      	mov	r3, r0
 801066e:	4618      	mov	r0, r3
 8010670:	f7f9 ff4a 	bl	800a508 <_ZN23FrontendApplicationBase33gotoMenuScreenSlideTransitionWestEv>
    }
}
 8010674:	bf00      	nop
 8010676:	3708      	adds	r7, #8
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}

0801067c <_ZN27TestRotationPlateauViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi>:

void TestRotationPlateauViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b084      	sub	sp, #16
 8010680:	af00      	add	r7, sp, #0
 8010682:	60f8      	str	r0, [r7, #12]
 8010684:	60b9      	str	r1, [r7, #8]
 8010686:	607a      	str	r2, [r7, #4]
    if (&src == &sliderRotation)
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	336c      	adds	r3, #108	; 0x6c
 801068c:	68ba      	ldr	r2, [r7, #8]
 801068e:	429a      	cmp	r2, r3
 8010690:	d106      	bne.n	80106a0 <_ZN27TestRotationPlateauViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x24>
    {
        //InteractionsliderRotationChanged
        //When sliderRotation value changed call virtual function
        //Call sliderRotationChanged
        sliderRotationChanged(value);
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	332c      	adds	r3, #44	; 0x2c
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	6879      	ldr	r1, [r7, #4]
 801069c:	68f8      	ldr	r0, [r7, #12]
 801069e:	4798      	blx	r3
    }
}
 80106a0:	bf00      	nop
 80106a2:	3710      	adds	r7, #16
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}

080106a8 <_ZN27TestRotationPlateauViewBase35sliderValueConfirmedCallbackHandlerERKN8touchgfx6SliderEi>:

void TestRotationPlateauViewBase::sliderValueConfirmedCallbackHandler(const touchgfx::Slider& src, int value)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b084      	sub	sp, #16
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	60f8      	str	r0, [r7, #12]
 80106b0:	60b9      	str	r1, [r7, #8]
 80106b2:	607a      	str	r2, [r7, #4]
    if (&src == &sliderRotation)
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	336c      	adds	r3, #108	; 0x6c
 80106b8:	68ba      	ldr	r2, [r7, #8]
 80106ba:	429a      	cmp	r2, r3
 80106bc:	d106      	bne.n	80106cc <_ZN27TestRotationPlateauViewBase35sliderValueConfirmedCallbackHandlerERKN8touchgfx6SliderEi+0x24>
    {
        //InteractionRotationReleased
        //When sliderRotation value confirmed call virtual function
        //Call sliderRotationReleased
        sliderRotationReleased(value);
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	3330      	adds	r3, #48	; 0x30
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	6879      	ldr	r1, [r7, #4]
 80106c8:	68f8      	ldr	r0, [r7, #12]
 80106ca:	4798      	blx	r3
    }
}
 80106cc:	bf00      	nop
 80106ce:	3710      	adds	r7, #16
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd80      	pop	{r7, pc}

080106d4 <_ZN8touchgfx4ViewI28TestRotationPlateauPresenterEC1Ev>:
    View() : presenter(0)
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b082      	sub	sp, #8
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	4618      	mov	r0, r3
 80106e0:	f009 fb3e 	bl	8019d60 <_ZN8touchgfx6ScreenC1Ev>
 80106e4:	4a05      	ldr	r2, [pc, #20]	; (80106fc <_ZN8touchgfx4ViewI28TestRotationPlateauPresenterEC1Ev+0x28>)
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	601a      	str	r2, [r3, #0]
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2200      	movs	r2, #0
 80106ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	4618      	mov	r0, r3
 80106f4:	3708      	adds	r7, #8
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}
 80106fa:	bf00      	nop
 80106fc:	08027d5c 	.word	0x08027d5c

08010700 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8010700:	b580      	push	{r7, lr}
 8010702:	b084      	sub	sp, #16
 8010704:	af00      	add	r7, sp, #0
 8010706:	60f8      	str	r0, [r7, #12]
 8010708:	60b9      	str	r1, [r7, #8]
 801070a:	4639      	mov	r1, r7
 801070c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	4618      	mov	r0, r3
 8010714:	f7fd f964 	bl	800d9e0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8010718:	4a08      	ldr	r2, [pc, #32]	; (801073c <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	68ba      	ldr	r2, [r7, #8]
 8010722:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	3308      	adds	r3, #8
 8010728:	463a      	mov	r2, r7
 801072a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801072e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	4618      	mov	r0, r3
 8010736:	3710      	adds	r7, #16
 8010738:	46bd      	mov	sp, r7
 801073a:	bd80      	pop	{r7, pc}
 801073c:	08027d44 	.word	0x08027d44

08010740 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>:
class GenericCallback<T1, T2, void>
 8010740:	b480      	push	{r7}
 8010742:	b083      	sub	sp, #12
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
 8010748:	4a04      	ldr	r2, [pc, #16]	; (801075c <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev+0x1c>)
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	601a      	str	r2, [r3, #0]
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	4618      	mov	r0, r3
 8010752:	370c      	adds	r7, #12
 8010754:	46bd      	mov	sp, r7
 8010756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075a:	4770      	bx	lr
 801075c:	08027d90 	.word	0x08027d90

08010760 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_2)(T1, T2))
 8010760:	b580      	push	{r7, lr}
 8010762:	b084      	sub	sp, #16
 8010764:	af00      	add	r7, sp, #0
 8010766:	60f8      	str	r0, [r7, #12]
 8010768:	60b9      	str	r1, [r7, #8]
 801076a:	4639      	mov	r1, r7
 801076c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	4618      	mov	r0, r3
 8010774:	f7ff ffe4 	bl	8010740 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>
 8010778:	4a08      	ldr	r2, [pc, #32]	; (801079c <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE+0x3c>)
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	68ba      	ldr	r2, [r7, #8]
 8010782:	605a      	str	r2, [r3, #4]
        this->pmemfun_2 = pmemfun_2;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	3308      	adds	r3, #8
 8010788:	463a      	mov	r2, r7
 801078a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801078e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	4618      	mov	r0, r3
 8010796:	3710      	adds	r7, #16
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}
 801079c:	08027d2c 	.word	0x08027d2c

080107a0 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>:
    virtual ~GenericCallback()
 80107a0:	b480      	push	{r7}
 80107a2:	b083      	sub	sp, #12
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
    }
 80107a8:	4a04      	ldr	r2, [pc, #16]	; (80107bc <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev+0x1c>)
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	601a      	str	r2, [r3, #0]
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	4618      	mov	r0, r3
 80107b2:	370c      	adds	r7, #12
 80107b4:	46bd      	mov	sp, r7
 80107b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ba:	4770      	bx	lr
 80107bc:	08027d90 	.word	0x08027d90

080107c0 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED0Ev>:
    virtual ~GenericCallback()
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b082      	sub	sp, #8
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
    }
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	f7ff ffe9 	bl	80107a0 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 80107ce:	2104      	movs	r1, #4
 80107d0:	6878      	ldr	r0, [r7, #4]
 80107d2:	f014 fa16 	bl	8024c02 <_ZdlPvj>
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	4618      	mov	r0, r3
 80107da:	3708      	adds	r7, #8
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd80      	pop	{r7, pc}

080107e0 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	4a05      	ldr	r2, [pc, #20]	; (8010800 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivED1Ev+0x20>)
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	601a      	str	r2, [r3, #0]
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	4618      	mov	r0, r3
 80107f2:	f7ff ffd5 	bl	80107a0 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	4618      	mov	r0, r3
 80107fa:	3708      	adds	r7, #8
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}
 8010800:	08027d2c 	.word	0x08027d2c

08010804 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivED0Ev>:
 8010804:	b580      	push	{r7, lr}
 8010806:	b082      	sub	sp, #8
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
 801080c:	6878      	ldr	r0, [r7, #4]
 801080e:	f7ff ffe7 	bl	80107e0 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivED1Ev>
 8010812:	2110      	movs	r1, #16
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	f014 f9f4 	bl	8024c02 <_ZdlPvj>
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	4618      	mov	r0, r3
 801081e:	3708      	adds	r7, #8
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}

08010824 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8010824:	b580      	push	{r7, lr}
 8010826:	b082      	sub	sp, #8
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	4a05      	ldr	r2, [pc, #20]	; (8010844 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	601a      	str	r2, [r3, #0]
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	4618      	mov	r0, r3
 8010836:	f7fd f963 	bl	800db00 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	4618      	mov	r0, r3
 801083e:	3708      	adds	r7, #8
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}
 8010844:	08027d44 	.word	0x08027d44

08010848 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8010848:	b580      	push	{r7, lr}
 801084a:	b082      	sub	sp, #8
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f7ff ffe7 	bl	8010824 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8010856:	2110      	movs	r1, #16
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f014 f9d2 	bl	8024c02 <_ZdlPvj>
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	4618      	mov	r0, r3
 8010862:	3708      	adds	r7, #8
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}

08010868 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 8010868:	b580      	push	{r7, lr}
 801086a:	b084      	sub	sp, #16
 801086c:	af00      	add	r7, sp, #0
 801086e:	60f8      	str	r0, [r7, #12]
 8010870:	60b9      	str	r1, [r7, #8]
 8010872:	607a      	str	r2, [r7, #4]
        (pobject->*pmemfun_2)(t1, t2);
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	685b      	ldr	r3, [r3, #4]
 8010878:	68fa      	ldr	r2, [r7, #12]
 801087a:	68d2      	ldr	r2, [r2, #12]
 801087c:	1052      	asrs	r2, r2, #1
 801087e:	1898      	adds	r0, r3, r2
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	68db      	ldr	r3, [r3, #12]
 8010884:	f003 0301 	and.w	r3, r3, #1
 8010888:	2b00      	cmp	r3, #0
 801088a:	d102      	bne.n	8010892 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivE7executeES4_i+0x2a>
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	689b      	ldr	r3, [r3, #8]
 8010890:	e00a      	b.n	80108a8 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivE7executeES4_i+0x40>
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	685b      	ldr	r3, [r3, #4]
 8010896:	68fa      	ldr	r2, [r7, #12]
 8010898:	68d2      	ldr	r2, [r2, #12]
 801089a:	1052      	asrs	r2, r2, #1
 801089c:	4413      	add	r3, r2
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	68fa      	ldr	r2, [r7, #12]
 80108a2:	6892      	ldr	r2, [r2, #8]
 80108a4:	4413      	add	r3, r2
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	687a      	ldr	r2, [r7, #4]
 80108aa:	68b9      	ldr	r1, [r7, #8]
 80108ac:	4798      	blx	r3
    }
 80108ae:	bf00      	nop
 80108b0:	3710      	adds	r7, #16
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}

080108b6 <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivE7isValidEv>:
    virtual bool isValid() const
 80108b6:	b480      	push	{r7}
 80108b8:	b083      	sub	sp, #12
 80108ba:	af00      	add	r7, sp, #0
 80108bc:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_2 != 0);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	685b      	ldr	r3, [r3, #4]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d010      	beq.n	80108e8 <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	689b      	ldr	r3, [r3, #8]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d107      	bne.n	80108de <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	68db      	ldr	r3, [r3, #12]
 80108d2:	f003 0301 	and.w	r3, r3, #1
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d101      	bne.n	80108de <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 80108da:	2301      	movs	r3, #1
 80108dc:	e000      	b.n	80108e0 <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivE7isValidEv+0x2a>
 80108de:	2300      	movs	r3, #0
 80108e0:	2b01      	cmp	r3, #1
 80108e2:	d001      	beq.n	80108e8 <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 80108e4:	2301      	movs	r3, #1
 80108e6:	e000      	b.n	80108ea <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_6SliderEivE7isValidEv+0x34>
 80108e8:	2300      	movs	r3, #0
    }
 80108ea:	4618      	mov	r0, r3
 80108ec:	370c      	adds	r7, #12
 80108ee:	46bd      	mov	sp, r7
 80108f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f4:	4770      	bx	lr

080108f6 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80108f6:	b580      	push	{r7, lr}
 80108f8:	b082      	sub	sp, #8
 80108fa:	af00      	add	r7, sp, #0
 80108fc:	6078      	str	r0, [r7, #4]
 80108fe:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	685b      	ldr	r3, [r3, #4]
 8010904:	687a      	ldr	r2, [r7, #4]
 8010906:	68d2      	ldr	r2, [r2, #12]
 8010908:	1052      	asrs	r2, r2, #1
 801090a:	1898      	adds	r0, r3, r2
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	68db      	ldr	r3, [r3, #12]
 8010910:	f003 0301 	and.w	r3, r3, #1
 8010914:	2b00      	cmp	r3, #0
 8010916:	d102      	bne.n	801091e <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	689b      	ldr	r3, [r3, #8]
 801091c:	e00a      	b.n	8010934 <_ZN8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	685b      	ldr	r3, [r3, #4]
 8010922:	687a      	ldr	r2, [r7, #4]
 8010924:	68d2      	ldr	r2, [r2, #12]
 8010926:	1052      	asrs	r2, r2, #1
 8010928:	4413      	add	r3, r2
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	687a      	ldr	r2, [r7, #4]
 801092e:	6892      	ldr	r2, [r2, #8]
 8010930:	4413      	add	r3, r2
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	6839      	ldr	r1, [r7, #0]
 8010936:	4798      	blx	r3
    }
 8010938:	bf00      	nop
 801093a:	3708      	adds	r7, #8
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}

08010940 <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8010940:	b480      	push	{r7}
 8010942:	b083      	sub	sp, #12
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	685b      	ldr	r3, [r3, #4]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d010      	beq.n	8010972 <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	689b      	ldr	r3, [r3, #8]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d107      	bne.n	8010968 <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	68db      	ldr	r3, [r3, #12]
 801095c:	f003 0301 	and.w	r3, r3, #1
 8010960:	2b00      	cmp	r3, #0
 8010962:	d101      	bne.n	8010968 <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8010964:	2301      	movs	r3, #1
 8010966:	e000      	b.n	801096a <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8010968:	2300      	movs	r3, #0
 801096a:	2b01      	cmp	r3, #1
 801096c:	d001      	beq.n	8010972 <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801096e:	2301      	movs	r3, #1
 8010970:	e000      	b.n	8010974 <_ZNK8touchgfx8CallbackI27TestRotationPlateauViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8010972:	2300      	movs	r3, #0
    }
 8010974:	4618      	mov	r0, r3
 8010976:	370c      	adds	r7, #12
 8010978:	46bd      	mov	sp, r7
 801097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097e:	4770      	bx	lr

08010980 <_ZN8touchgfx4ViewI17TestUartPresenterED1Ev>:
class View : public Screen
 8010980:	b580      	push	{r7, lr}
 8010982:	b082      	sub	sp, #8
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	4a05      	ldr	r2, [pc, #20]	; (80109a0 <_ZN8touchgfx4ViewI17TestUartPresenterED1Ev+0x20>)
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	601a      	str	r2, [r3, #0]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	4618      	mov	r0, r3
 8010992:	f7fc fbed 	bl	800d170 <_ZN8touchgfx6ScreenD1Ev>
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	4618      	mov	r0, r3
 801099a:	3708      	adds	r7, #8
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}
 80109a0:	08027dfc 	.word	0x08027dfc

080109a4 <_ZN8touchgfx4ViewI17TestUartPresenterED0Ev>:
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b082      	sub	sp, #8
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f7ff ffe7 	bl	8010980 <_ZN8touchgfx4ViewI17TestUartPresenterED1Ev>
 80109b2:	2140      	movs	r1, #64	; 0x40
 80109b4:	6878      	ldr	r0, [r7, #4]
 80109b6:	f014 f924 	bl	8024c02 <_ZdlPvj>
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	4618      	mov	r0, r3
 80109be:	3708      	adds	r7, #8
 80109c0:	46bd      	mov	sp, r7
 80109c2:	bd80      	pop	{r7, pc}

080109c4 <_ZN16TestUartViewBaseD1Ev>:

class TestUartViewBase : public touchgfx::View<TestUartPresenter>
{
public:
    TestUartViewBase();
    virtual ~TestUartViewBase() {}
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
 80109cc:	4a15      	ldr	r2, [pc, #84]	; (8010a24 <_ZN16TestUartViewBaseD1Ev+0x60>)
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	601a      	str	r2, [r3, #0]
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	f503 6350 	add.w	r3, r3, #3328	; 0xd00
 80109d8:	4618      	mov	r0, r3
 80109da:	f000 fa07 	bl	8010dec <_ZN8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80109e4:	4618      	mov	r0, r3
 80109e6:	f7fc fa07 	bl	800cdf8 <_ZN8touchgfx8TextAreaD1Ev>
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	33e0      	adds	r3, #224	; 0xe0
 80109ee:	4618      	mov	r0, r3
 80109f0:	f7fc fc84 	bl	800d2fc <_ZN8touchgfx6ButtonD1Ev>
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	33a8      	adds	r3, #168	; 0xa8
 80109f8:	4618      	mov	r0, r3
 80109fa:	f7fc fb97 	bl	800d12c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	336c      	adds	r3, #108	; 0x6c
 8010a02:	4618      	mov	r0, r3
 8010a04:	f7fd f900 	bl	800dc08 <_ZN8touchgfx14ButtonWithIconD1Ev>
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	3340      	adds	r3, #64	; 0x40
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f7fc fb6b 	bl	800d0e8 <_ZN8touchgfx5ImageD1Ev>
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	4618      	mov	r0, r3
 8010a16:	f7ff ffb3 	bl	8010980 <_ZN8touchgfx4ViewI17TestUartPresenterED1Ev>
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	3708      	adds	r7, #8
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}
 8010a24:	08027da8 	.word	0x08027da8

08010a28 <_ZN16TestUartViewBaseD0Ev>:
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b082      	sub	sp, #8
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
 8010a30:	6878      	ldr	r0, [r7, #4]
 8010a32:	f7ff ffc7 	bl	80109c4 <_ZN16TestUartViewBaseD1Ev>
 8010a36:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f014 f8e1 	bl	8024c02 <_ZdlPvj>
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	4618      	mov	r0, r3
 8010a44:	3708      	adds	r7, #8
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}

08010a4a <_ZN16TestUartViewBase17buttonWipeClickedEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void buttonWipeClicked()
 8010a4a:	b480      	push	{r7}
 8010a4c:	b083      	sub	sp, #12
 8010a4e:	af00      	add	r7, sp, #0
 8010a50:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in TestUart
    }
 8010a52:	bf00      	nop
 8010a54:	370c      	adds	r7, #12
 8010a56:	46bd      	mov	sp, r7
 8010a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5c:	4770      	bx	lr

08010a5e <_ZN16TestUartViewBase19buttonReturnClickedEv>:

    virtual void buttonReturnClicked()
 8010a5e:	b480      	push	{r7}
 8010a60:	b083      	sub	sp, #12
 8010a62:	af00      	add	r7, sp, #0
 8010a64:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in TestUart
    }
 8010a66:	bf00      	nop
 8010a68:	370c      	adds	r7, #12
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a70:	4770      	bx	lr

08010a72 <_ZN16TestUartViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8010a72:	b580      	push	{r7, lr}
 8010a74:	b082      	sub	sp, #8
 8010a76:	af00      	add	r7, sp, #0
 8010a78:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8010a7a:	f008 f993 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 8010a7e:	4603      	mov	r3, r0
    }
 8010a80:	4618      	mov	r0, r3
 8010a82:	3708      	adds	r7, #8
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}

08010a88 <_ZN16TestUartViewBaseC1Ev>:
#include <gui_generated/testuart_screen/TestUartViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

TestUartViewBase::TestUartViewBase() :
 8010a88:	b590      	push	{r4, r7, lr}
 8010a8a:	b091      	sub	sp, #68	; 0x44
 8010a8c:	af02      	add	r7, sp, #8
 8010a8e:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &TestUartViewBase::buttonCallbackHandler)
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	4618      	mov	r0, r3
 8010a94:	f000 f974 	bl	8010d80 <_ZN8touchgfx4ViewI17TestUartPresenterEC1Ev>
 8010a98:	4a9e      	ldr	r2, [pc, #632]	; (8010d14 <_ZN16TestUartViewBaseC1Ev+0x28c>)
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	601a      	str	r2, [r3, #0]
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8010aa4:	f107 0308 	add.w	r3, r7, #8
 8010aa8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7fb fec4 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 8010ab2:	f107 0308 	add.w	r3, r7, #8
 8010ab6:	4619      	mov	r1, r3
 8010ab8:	4620      	mov	r0, r4
 8010aba:	f7fc f8a3 	bl	800cc04 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	336c      	adds	r3, #108	; 0x6c
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f007 f89c 	bl	8017c00 <_ZN8touchgfx14ButtonWithIconC1Ev>
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	33a8      	adds	r3, #168	; 0xa8
 8010acc:	4618      	mov	r0, r3
 8010ace:	f7fc f9e9 	bl	800cea4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	33e0      	adds	r3, #224	; 0xe0
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f7fd f9a2 	bl	800de20 <_ZN8touchgfx6ButtonC1Ev>
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7fc f8d6 	bl	800cc94 <_ZN8touchgfx8TextAreaC1Ev>
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f503 6050 	add.w	r0, r3, #3328	; 0xd00
 8010aee:	4b8a      	ldr	r3, [pc, #552]	; (8010d18 <_ZN16TestUartViewBaseC1Ev+0x290>)
 8010af0:	60fb      	str	r3, [r7, #12]
 8010af2:	2300      	movs	r3, #0
 8010af4:	613b      	str	r3, [r7, #16]
 8010af6:	f107 030c 	add.w	r3, r7, #12
 8010afa:	cb0c      	ldmia	r3, {r2, r3}
 8010afc:	6879      	ldr	r1, [r7, #4]
 8010afe:	f000 f955 	bl	8010dac <_ZN8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    imageBg.setXY(0, 0);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	3340      	adds	r3, #64	; 0x40
 8010b06:	2200      	movs	r2, #0
 8010b08:	2100      	movs	r1, #0
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f7fb ff12 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    imageBg.setBitmap(touchgfx::Bitmap(BITMAP_GREEN_POLYGONS_BACKGROUND_480X272_ID));
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8010b16:	f107 0314 	add.w	r3, r7, #20
 8010b1a:	2111      	movs	r1, #17
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7fb fe8c 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 8010b22:	f107 0314 	add.w	r3, r7, #20
 8010b26:	4619      	mov	r1, r3
 8010b28:	4620      	mov	r0, r4
 8010b2a:	f007 f88d 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    buttonWipe.setXY(175, 213);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	336c      	adds	r3, #108	; 0x6c
 8010b32:	22d5      	movs	r2, #213	; 0xd5
 8010b34:	21af      	movs	r1, #175	; 0xaf
 8010b36:	4618      	mov	r0, r3
 8010b38:	f7fb fefc 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWipe.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_EMPTY_RELEASED_ID), touchgfx::Bitmap(BITMAP_BUTTON_EMPTY_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICONS8_BROOM_ORANGE_ID), touchgfx::Bitmap(BITMAP_ICONS8_BROOM_ORANGE_LIGHT_ID));
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8010b42:	f107 0318 	add.w	r3, r7, #24
 8010b46:	210b      	movs	r1, #11
 8010b48:	4618      	mov	r0, r3
 8010b4a:	f7fb fe76 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 8010b4e:	f107 031c 	add.w	r3, r7, #28
 8010b52:	210a      	movs	r1, #10
 8010b54:	4618      	mov	r0, r3
 8010b56:	f7fb fe70 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 8010b5a:	f107 0320 	add.w	r3, r7, #32
 8010b5e:	2113      	movs	r1, #19
 8010b60:	4618      	mov	r0, r3
 8010b62:	f7fb fe6a 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 8010b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b6a:	2114      	movs	r1, #20
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7fb fe64 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 8010b72:	f107 0020 	add.w	r0, r7, #32
 8010b76:	f107 021c 	add.w	r2, r7, #28
 8010b7a:	f107 0118 	add.w	r1, r7, #24
 8010b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b82:	9300      	str	r3, [sp, #0]
 8010b84:	4603      	mov	r3, r0
 8010b86:	4620      	mov	r0, r4
 8010b88:	f006 ff98 	bl	8017abc <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    buttonWipe.setIconXY(49, 12);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	336c      	adds	r3, #108	; 0x6c
 8010b90:	220c      	movs	r2, #12
 8010b92:	2131      	movs	r1, #49	; 0x31
 8010b94:	4618      	mov	r0, r3
 8010b96:	f7fc fbf1 	bl	800d37c <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    buttonWipe.setAction(buttonCallback);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	f503 6350 	add.w	r3, r3, #3328	; 0xd00
 8010ba6:	4619      	mov	r1, r3
 8010ba8:	4610      	mov	r0, r2
 8010baa:	f7fc fb76 	bl	800d29a <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textMessages.setPosition(60, 44, 360, 163);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
 8010bb4:	23a3      	movs	r3, #163	; 0xa3
 8010bb6:	9300      	str	r3, [sp, #0]
 8010bb8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8010bbc:	222c      	movs	r2, #44	; 0x2c
 8010bbe:	213c      	movs	r1, #60	; 0x3c
 8010bc0:	f7f9 f9e4 	bl	8009f8c <_ZN8touchgfx8Drawable11setPositionEssss>
    textMessages.setColor(touchgfx::Color::getColorFrom24BitRGB(249, 186, 109));
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8010bca:	226d      	movs	r2, #109	; 0x6d
 8010bcc:	21ba      	movs	r1, #186	; 0xba
 8010bce:	20f9      	movs	r0, #249	; 0xf9
 8010bd0:	f7fc f9b8 	bl	800cf44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	4619      	mov	r1, r3
 8010bd8:	4620      	mov	r0, r4
 8010bda:	f7fc f89e 	bl	800cd1a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textMessages.setLinespacing(0);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	33a8      	adds	r3, #168	; 0xa8
 8010be2:	2100      	movs	r1, #0
 8010be4:	4618      	mov	r0, r3
 8010be6:	f7fc f8eb 	bl	800cdc0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textMessagesBuffer[0] = 0;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2200      	movs	r2, #0
 8010bee:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
    textMessages.setWildcard(textMessagesBuffer);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8010bfe:	4619      	mov	r1, r3
 8010c00:	4610      	mov	r0, r2
 8010c02:	f7fc f965 	bl	800ced0 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textMessages.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8010c0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010c10:	2102      	movs	r1, #2
 8010c12:	4618      	mov	r0, r3
 8010c14:	f7fc f818 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 8010c18:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8010c1a:	4620      	mov	r0, r4
 8010c1c:	f006 fe00 	bl	8017820 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    buttonReturn.setXY(10, 230);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	33e0      	adds	r3, #224	; 0xe0
 8010c24:	22e6      	movs	r2, #230	; 0xe6
 8010c26:	210a      	movs	r1, #10
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f7fb fe83 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    buttonReturn.setBitmaps(touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID), touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID));
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 8010c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010c38:	2117      	movs	r1, #23
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f7fb fdfd 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 8010c40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010c44:	2117      	movs	r1, #23
 8010c46:	4618      	mov	r0, r3
 8010c48:	f7fb fdf7 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 8010c4c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010c50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010c54:	4619      	mov	r1, r3
 8010c56:	4620      	mov	r0, r4
 8010c58:	f006 fdec 	bl	8017834 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonReturn.setAction(buttonCallback);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f503 6350 	add.w	r3, r3, #3328	; 0xd00
 8010c68:	4619      	mov	r1, r3
 8010c6a:	4610      	mov	r0, r2
 8010c6c:	f7fc fb15 	bl	800d29a <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textArea1.setXY(10, 10);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8010c76:	220a      	movs	r2, #10
 8010c78:	210a      	movs	r1, #10
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f7fb fe5a 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f503 748a 	add.w	r4, r3, #276	; 0x114
 8010c86:	22ff      	movs	r2, #255	; 0xff
 8010c88:	21ff      	movs	r1, #255	; 0xff
 8010c8a:	20ff      	movs	r0, #255	; 0xff
 8010c8c:	f7fc f95a 	bl	800cf44 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8010c90:	4603      	mov	r3, r0
 8010c92:	4619      	mov	r1, r3
 8010c94:	4620      	mov	r0, r4
 8010c96:	f7fc f840 	bl	800cd1a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8010ca0:	2100      	movs	r1, #0
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	f7fc f88c 	bl	800cdc0 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID25));
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f503 748a 	add.w	r4, r3, #276	; 0x114
 8010cae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010cb2:	2114      	movs	r1, #20
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	f7fb ffc7 	bl	800cc48 <_ZN8touchgfx9TypedTextC1Et>
 8010cba:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	f006 fdaf 	bl	8017820 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(imageBg);
 8010cc2:	687a      	ldr	r2, [r7, #4]
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	3340      	adds	r3, #64	; 0x40
 8010cc8:	4619      	mov	r1, r3
 8010cca:	4610      	mov	r0, r2
 8010ccc:	f7fc faa8 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWipe);
 8010cd0:	687a      	ldr	r2, [r7, #4]
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	336c      	adds	r3, #108	; 0x6c
 8010cd6:	4619      	mov	r1, r3
 8010cd8:	4610      	mov	r0, r2
 8010cda:	f7fc faa1 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textMessages);
 8010cde:	687a      	ldr	r2, [r7, #4]
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	33a8      	adds	r3, #168	; 0xa8
 8010ce4:	4619      	mov	r1, r3
 8010ce6:	4610      	mov	r0, r2
 8010ce8:	f7fc fa9a 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonReturn);
 8010cec:	687a      	ldr	r2, [r7, #4]
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	33e0      	adds	r3, #224	; 0xe0
 8010cf2:	4619      	mov	r1, r3
 8010cf4:	4610      	mov	r0, r2
 8010cf6:	f7fc fa93 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 8010cfa:	687a      	ldr	r2, [r7, #4]
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8010d02:	4619      	mov	r1, r3
 8010d04:	4610      	mov	r0, r2
 8010d06:	f7fc fa8b 	bl	800d220 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	373c      	adds	r7, #60	; 0x3c
 8010d10:	46bd      	mov	sp, r7
 8010d12:	bd90      	pop	{r4, r7, pc}
 8010d14:	08027da8 	.word	0x08027da8
 8010d18:	08010d31 	.word	0x08010d31

08010d1c <_ZN16TestUartViewBase11setupScreenEv>:

void TestUartViewBase::setupScreen()
{
 8010d1c:	b480      	push	{r7}
 8010d1e:	b083      	sub	sp, #12
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]

}
 8010d24:	bf00      	nop
 8010d26:	370c      	adds	r7, #12
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2e:	4770      	bx	lr

08010d30 <_ZN16TestUartViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void TestUartViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b082      	sub	sp, #8
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
 8010d38:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWipe)
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	336c      	adds	r3, #108	; 0x6c
 8010d3e:	683a      	ldr	r2, [r7, #0]
 8010d40:	429a      	cmp	r2, r3
 8010d42:	d106      	bne.n	8010d52 <_ZN16TestUartViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //InteractionButtonWipeClicked
        //When buttonWipe clicked call virtual function
        //Call buttonWipeClicked
        buttonWipeClicked();
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	332c      	adds	r3, #44	; 0x2c
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	6878      	ldr	r0, [r7, #4]
 8010d4e:	4798      	blx	r3
        //InteractionReturnToMenu
        //When InteractionbuttonReturnClicked completed change screen to Menu
        //Go to Menu with screen transition towards West
        application().gotoMenuScreenSlideTransitionWest();
    }
}
 8010d50:	e011      	b.n	8010d76 <_ZN16TestUartViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x46>
    else if (&src == &buttonReturn)
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	33e0      	adds	r3, #224	; 0xe0
 8010d56:	683a      	ldr	r2, [r7, #0]
 8010d58:	429a      	cmp	r2, r3
 8010d5a:	d10c      	bne.n	8010d76 <_ZN16TestUartViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x46>
        buttonReturnClicked();
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	3330      	adds	r3, #48	; 0x30
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	4798      	blx	r3
        application().gotoMenuScreenSlideTransitionWest();
 8010d68:	6878      	ldr	r0, [r7, #4]
 8010d6a:	f7ff fe82 	bl	8010a72 <_ZN16TestUartViewBase11applicationEv>
 8010d6e:	4603      	mov	r3, r0
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7f9 fbc9 	bl	800a508 <_ZN23FrontendApplicationBase33gotoMenuScreenSlideTransitionWestEv>
}
 8010d76:	bf00      	nop
 8010d78:	3708      	adds	r7, #8
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	bd80      	pop	{r7, pc}
	...

08010d80 <_ZN8touchgfx4ViewI17TestUartPresenterEC1Ev>:
    View() : presenter(0)
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b082      	sub	sp, #8
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f008 ffe8 	bl	8019d60 <_ZN8touchgfx6ScreenC1Ev>
 8010d90:	4a05      	ldr	r2, [pc, #20]	; (8010da8 <_ZN8touchgfx4ViewI17TestUartPresenterEC1Ev+0x28>)
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	601a      	str	r2, [r3, #0]
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2200      	movs	r2, #0
 8010d9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	4618      	mov	r0, r3
 8010da0:	3708      	adds	r7, #8
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}
 8010da6:	bf00      	nop
 8010da8:	08027dfc 	.word	0x08027dfc

08010dac <_ZN8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b084      	sub	sp, #16
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	60f8      	str	r0, [r7, #12]
 8010db4:	60b9      	str	r1, [r7, #8]
 8010db6:	4639      	mov	r1, r7
 8010db8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f7fc fe0e 	bl	800d9e0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8010dc4:	4a08      	ldr	r2, [pc, #32]	; (8010de8 <_ZN8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	68ba      	ldr	r2, [r7, #8]
 8010dce:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	3308      	adds	r3, #8
 8010dd4:	463a      	mov	r2, r7
 8010dd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010dda:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	4618      	mov	r0, r3
 8010de2:	3710      	adds	r7, #16
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}
 8010de8:	08027de4 	.word	0x08027de4

08010dec <_ZN8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b082      	sub	sp, #8
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	4a05      	ldr	r2, [pc, #20]	; (8010e0c <_ZN8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	601a      	str	r2, [r3, #0]
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f7fc fe7f 	bl	800db00 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	4618      	mov	r0, r3
 8010e06:	3708      	adds	r7, #8
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}
 8010e0c:	08027de4 	.word	0x08027de4

08010e10 <_ZN8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b082      	sub	sp, #8
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f7ff ffe7 	bl	8010dec <_ZN8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8010e1e:	2110      	movs	r1, #16
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f013 feee 	bl	8024c02 <_ZdlPvj>
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	4618      	mov	r0, r3
 8010e2a:	3708      	adds	r7, #8
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd80      	pop	{r7, pc}

08010e30 <_ZN8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b082      	sub	sp, #8
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	685b      	ldr	r3, [r3, #4]
 8010e3e:	687a      	ldr	r2, [r7, #4]
 8010e40:	68d2      	ldr	r2, [r2, #12]
 8010e42:	1052      	asrs	r2, r2, #1
 8010e44:	1898      	adds	r0, r3, r2
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	68db      	ldr	r3, [r3, #12]
 8010e4a:	f003 0301 	and.w	r3, r3, #1
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d102      	bne.n	8010e58 <_ZN8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	689b      	ldr	r3, [r3, #8]
 8010e56:	e00a      	b.n	8010e6e <_ZN8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	685b      	ldr	r3, [r3, #4]
 8010e5c:	687a      	ldr	r2, [r7, #4]
 8010e5e:	68d2      	ldr	r2, [r2, #12]
 8010e60:	1052      	asrs	r2, r2, #1
 8010e62:	4413      	add	r3, r2
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	687a      	ldr	r2, [r7, #4]
 8010e68:	6892      	ldr	r2, [r2, #8]
 8010e6a:	4413      	add	r3, r2
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	6839      	ldr	r1, [r7, #0]
 8010e70:	4798      	blx	r3
    }
 8010e72:	bf00      	nop
 8010e74:	3708      	adds	r7, #8
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}

08010e7a <_ZNK8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8010e7a:	b480      	push	{r7}
 8010e7c:	b083      	sub	sp, #12
 8010e7e:	af00      	add	r7, sp, #0
 8010e80:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	685b      	ldr	r3, [r3, #4]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d010      	beq.n	8010eac <_ZNK8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	689b      	ldr	r3, [r3, #8]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d107      	bne.n	8010ea2 <_ZNK8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	68db      	ldr	r3, [r3, #12]
 8010e96:	f003 0301 	and.w	r3, r3, #1
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d101      	bne.n	8010ea2 <_ZNK8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8010e9e:	2301      	movs	r3, #1
 8010ea0:	e000      	b.n	8010ea4 <_ZNK8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	2b01      	cmp	r3, #1
 8010ea6:	d001      	beq.n	8010eac <_ZNK8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8010ea8:	2301      	movs	r3, #1
 8010eaa:	e000      	b.n	8010eae <_ZNK8touchgfx8CallbackI16TestUartViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8010eac:	2300      	movs	r3, #0
    }
 8010eae:	4618      	mov	r0, r3
 8010eb0:	370c      	adds	r7, #12
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb8:	4770      	bx	lr
	...

08010ebc <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8010ebc:	b480      	push	{r7}
 8010ebe:	af00      	add	r7, sp, #0
    return bitmap_database;
 8010ec0:	4b02      	ldr	r3, [pc, #8]	; (8010ecc <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eca:	4770      	bx	lr
 8010ecc:	08027e28 	.word	0x08027e28

08010ed0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8010ed0:	b480      	push	{r7}
 8010ed2:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8010ed4:	2323      	movs	r3, #35	; 0x23
}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ede:	4770      	bx	lr

08010ee0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8010ee0:	b480      	push	{r7}
 8010ee2:	b085      	sub	sp, #20
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	60f8      	str	r0, [r7, #12]
 8010ee8:	60b9      	str	r1, [r7, #8]
 8010eea:	4613      	mov	r3, r2
 8010eec:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8010eee:	4a07      	ldr	r2, [pc, #28]	; (8010f0c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	6013      	str	r3, [r2, #0]
        fonts = f;
 8010ef4:	4a06      	ldr	r2, [pc, #24]	; (8010f10 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8010ef6:	68bb      	ldr	r3, [r7, #8]
 8010ef8:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8010efa:	4a06      	ldr	r2, [pc, #24]	; (8010f14 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8010efc:	88fb      	ldrh	r3, [r7, #6]
 8010efe:	8013      	strh	r3, [r2, #0]
    }
 8010f00:	bf00      	nop
 8010f02:	3714      	adds	r7, #20
 8010f04:	46bd      	mov	sp, r7
 8010f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0a:	4770      	bx	lr
 8010f0c:	2000b364 	.word	0x2000b364
 8010f10:	2000b36c 	.word	0x2000b36c
 8010f14:	2000b368 	.word	0x2000b368

08010f18 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8010f18:	b590      	push	{r4, r7, lr}
 8010f1a:	b085      	sub	sp, #20
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	4603      	mov	r3, r0
 8010f20:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8010f22:	2300      	movs	r3, #0
 8010f24:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8010f26:	88fb      	ldrh	r3, [r7, #6]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d127      	bne.n	8010f7c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8010f2c:	88fb      	ldrh	r3, [r7, #6]
 8010f2e:	4a1e      	ldr	r2, [pc, #120]	; (8010fa8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8010f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d016      	beq.n	8010f66 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8010f38:	88fb      	ldrh	r3, [r7, #6]
 8010f3a:	4a1b      	ldr	r2, [pc, #108]	; (8010fa8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8010f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f40:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	68ba      	ldr	r2, [r7, #8]
 8010f48:	4413      	add	r3, r2
 8010f4a:	4a18      	ldr	r2, [pc, #96]	; (8010fac <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8010f4c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8010f4e:	68bb      	ldr	r3, [r7, #8]
 8010f50:	685b      	ldr	r3, [r3, #4]
 8010f52:	68ba      	ldr	r2, [r7, #8]
 8010f54:	4413      	add	r3, r2
 8010f56:	4a16      	ldr	r2, [pc, #88]	; (8010fb0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8010f58:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8010f5a:	68bb      	ldr	r3, [r7, #8]
 8010f5c:	689b      	ldr	r3, [r3, #8]
 8010f5e:	68ba      	ldr	r2, [r7, #8]
 8010f60:	4413      	add	r3, r2
 8010f62:	60fb      	str	r3, [r7, #12]
 8010f64:	e00a      	b.n	8010f7c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8010f66:	4b11      	ldr	r3, [pc, #68]	; (8010fac <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8010f68:	4a12      	ldr	r2, [pc, #72]	; (8010fb4 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8010f6a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8010f6c:	4a12      	ldr	r2, [pc, #72]	; (8010fb8 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8010f6e:	4b10      	ldr	r3, [pc, #64]	; (8010fb0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8010f70:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8010f72:	88fb      	ldrh	r3, [r7, #6]
 8010f74:	4a11      	ldr	r2, [pc, #68]	; (8010fbc <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8010f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f7a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d00d      	beq.n	8010f9e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8010f82:	4a0f      	ldr	r2, [pc, #60]	; (8010fc0 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8010f84:	88fb      	ldrh	r3, [r7, #6]
 8010f86:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8010f88:	f000 f83e 	bl	8011008 <_ZN17TypedTextDatabase8getFontsEv>
 8010f8c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8010f8e:	f000 f833 	bl	8010ff8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8010f92:	4603      	mov	r3, r0
 8010f94:	461a      	mov	r2, r3
 8010f96:	4621      	mov	r1, r4
 8010f98:	68f8      	ldr	r0, [r7, #12]
 8010f9a:	f7ff ffa1 	bl	8010ee0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8010f9e:	bf00      	nop
 8010fa0:	3714      	adds	r7, #20
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd90      	pop	{r4, r7, pc}
 8010fa6:	bf00      	nop
 8010fa8:	2000836c 	.word	0x2000836c
 8010fac:	20008374 	.word	0x20008374
 8010fb0:	20008378 	.word	0x20008378
 8010fb4:	901aa3e4 	.word	0x901aa3e4
 8010fb8:	901aa38c 	.word	0x901aa38c
 8010fbc:	901aa65c 	.word	0x901aa65c
 8010fc0:	20008370 	.word	0x20008370

08010fc4 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8010fc4:	b480      	push	{r7}
 8010fc6:	b083      	sub	sp, #12
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
 8010fcc:	460b      	mov	r3, r1
 8010fce:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8010fd0:	4b07      	ldr	r3, [pc, #28]	; (8010ff0 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8010fd2:	681a      	ldr	r2, [r3, #0]
 8010fd4:	4b07      	ldr	r3, [pc, #28]	; (8010ff4 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8010fd6:	6819      	ldr	r1, [r3, #0]
 8010fd8:	887b      	ldrh	r3, [r7, #2]
 8010fda:	009b      	lsls	r3, r3, #2
 8010fdc:	440b      	add	r3, r1
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	005b      	lsls	r3, r3, #1
 8010fe2:	4413      	add	r3, r2
}
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	370c      	adds	r7, #12
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fee:	4770      	bx	lr
 8010ff0:	20008374 	.word	0x20008374
 8010ff4:	20008378 	.word	0x20008378

08010ff8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8010ff8:	b480      	push	{r7}
 8010ffa:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8010ffc:	2316      	movs	r3, #22
}
 8010ffe:	4618      	mov	r0, r3
 8011000:	46bd      	mov	sp, r7
 8011002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011006:	4770      	bx	lr

08011008 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8011008:	b480      	push	{r7}
 801100a:	af00      	add	r7, sp, #0
    return _fonts;
 801100c:	4b02      	ldr	r3, [pc, #8]	; (8011018 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 801100e:	4618      	mov	r0, r3
 8011010:	46bd      	mov	sp, r7
 8011012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011016:	4770      	bx	lr
 8011018:	2000837c 	.word	0x2000837c

0801101c <_Z41__static_initialization_and_destruction_0ii>:
    case 4:
        _fonts[4] = &(getFont_verdana_15_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 801101c:	b580      	push	{r7, lr}
 801101e:	b082      	sub	sp, #8
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
 8011024:	6039      	str	r1, [r7, #0]
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2b01      	cmp	r3, #1
 801102a:	d11d      	bne.n	8011068 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 801102c:	683b      	ldr	r3, [r7, #0]
 801102e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011032:	4293      	cmp	r3, r2
 8011034:	d118      	bne.n	8011068 <_Z41__static_initialization_and_destruction_0ii+0x4c>
    &(getFont_verdana_20_4bpp()),
 8011036:	f7f8 fdef 	bl	8009c18 <_Z23getFont_verdana_20_4bppv>
 801103a:	4602      	mov	r2, r0
};
 801103c:	4b0c      	ldr	r3, [pc, #48]	; (8011070 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 801103e:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 8011040:	f7f8 fe2c 	bl	8009c9c <_Z23getFont_verdana_40_4bppv>
 8011044:	4602      	mov	r2, r0
};
 8011046:	4b0a      	ldr	r3, [pc, #40]	; (8011070 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8011048:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp()),
 801104a:	f7f8 fd61 	bl	8009b10 <_Z23getFont_verdana_10_4bppv>
 801104e:	4602      	mov	r2, r0
};
 8011050:	4b07      	ldr	r3, [pc, #28]	; (8011070 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8011052:	609a      	str	r2, [r3, #8]
    &(getFont_verdana_80_4bpp()),
 8011054:	f7f8 fe64 	bl	8009d20 <_Z23getFont_verdana_80_4bppv>
 8011058:	4602      	mov	r2, r0
};
 801105a:	4b05      	ldr	r3, [pc, #20]	; (8011070 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 801105c:	60da      	str	r2, [r3, #12]
    &(getFont_verdana_15_4bpp())
 801105e:	f7f8 fd99 	bl	8009b94 <_Z23getFont_verdana_15_4bppv>
 8011062:	4602      	mov	r2, r0
};
 8011064:	4b02      	ldr	r3, [pc, #8]	; (8011070 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8011066:	611a      	str	r2, [r3, #16]
}  // namespace TypedTextDatabase
 8011068:	bf00      	nop
 801106a:	3708      	adds	r7, #8
 801106c:	46bd      	mov	sp, r7
 801106e:	bd80      	pop	{r7, pc}
 8011070:	2000837c 	.word	0x2000837c

08011074 <_GLOBAL__sub_I__fonts>:
 8011074:	b580      	push	{r7, lr}
 8011076:	af00      	add	r7, sp, #0
 8011078:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801107c:	2001      	movs	r0, #1
 801107e:	f7ff ffcd 	bl	801101c <_Z41__static_initialization_and_destruction_0ii>
 8011082:	bd80      	pop	{r7, pc}

08011084 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
	FrontendApplication(Model& m, FrontendHeap& heap);
	virtual ~FrontendApplication() { }
 8011084:	b580      	push	{r7, lr}
 8011086:	b082      	sub	sp, #8
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
 801108c:	4a05      	ldr	r2, [pc, #20]	; (80110a4 <_ZN19FrontendApplicationD1Ev+0x20>)
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	601a      	str	r2, [r3, #0]
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	4618      	mov	r0, r3
 8011096:	f7f9 f91b 	bl	800a2d0 <_ZN23FrontendApplicationBaseD1Ev>
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	4618      	mov	r0, r3
 801109e:	3708      	adds	r7, #8
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}
 80110a4:	080280ec 	.word	0x080280ec

080110a8 <_ZN19FrontendApplicationD0Ev>:
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b082      	sub	sp, #8
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f7ff ffe7 	bl	8011084 <_ZN19FrontendApplicationD1Ev>
 80110b6:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f013 fda1 	bl	8024c02 <_ZdlPvj>
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	4618      	mov	r0, r3
 80110c4:	3708      	adds	r7, #8
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}

080110ca <_ZN19FrontendApplication15handleTickEventEv>:

	virtual void handleTickEvent()
 80110ca:	b580      	push	{r7, lr}
 80110cc:	b082      	sub	sp, #8
 80110ce:	af00      	add	r7, sp, #0
 80110d0:	6078      	str	r0, [r7, #4]
	{
		model.tick();
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80110d8:	4618      	mov	r0, r3
 80110da:	f000 facf 	bl	801167c <_ZN5Model4tickEv>
		FrontendApplicationBase::handleTickEvent();
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	4618      	mov	r0, r3
 80110e2:	f007 fd79 	bl	8018bd8 <_ZN8touchgfx11Application15handleTickEventEv>
	}
 80110e6:	bf00      	nop
 80110e8:	3708      	adds	r7, #8
 80110ea:	46bd      	mov	sp, r7
 80110ec:	bd80      	pop	{r7, pc}
	...

080110f0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/testgirouette_screen/TestGirouettePresenter.hpp>

using namespace touchgfx;


FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b084      	sub	sp, #16
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	60f8      	str	r0, [r7, #12]
 80110f8:	60b9      	str	r1, [r7, #8]
 80110fa:	607a      	str	r2, [r7, #4]
: FrontendApplicationBase(m, heap)
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	687a      	ldr	r2, [r7, #4]
 8011100:	68b9      	ldr	r1, [r7, #8]
 8011102:	4618      	mov	r0, r3
 8011104:	f7f9 f95e 	bl	800a3c4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8011108:	4a03      	ldr	r2, [pc, #12]	; (8011118 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	601a      	str	r2, [r3, #0]
{

}
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	4618      	mov	r0, r3
 8011112:	3710      	adds	r7, #16
 8011114:	46bd      	mov	sp, r7
 8011116:	bd80      	pop	{r7, pc}
 8011118:	080280ec 	.word	0x080280ec

0801111c <_ZN13MenuContainerD1Ev>:

class MenuContainer : public MenuContainerBase
{
public:
	MenuContainer();
	virtual ~MenuContainer() {}
 801111c:	b580      	push	{r7, lr}
 801111e:	b082      	sub	sp, #8
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
 8011124:	4a05      	ldr	r2, [pc, #20]	; (801113c <_ZN13MenuContainerD1Ev+0x20>)
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	601a      	str	r2, [r3, #0]
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	4618      	mov	r0, r3
 801112e:	f7fb fedd 	bl	800ceec <_ZN17MenuContainerBaseD1Ev>
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	4618      	mov	r0, r3
 8011136:	3708      	adds	r7, #8
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}
 801113c:	08028128 	.word	0x08028128

08011140 <_ZN13MenuContainerD0Ev>:
 8011140:	b580      	push	{r7, lr}
 8011142:	b082      	sub	sp, #8
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f7ff ffe7 	bl	801111c <_ZN13MenuContainerD1Ev>
 801114e:	21e0      	movs	r1, #224	; 0xe0
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	f013 fd56 	bl	8024c02 <_ZdlPvj>
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	4618      	mov	r0, r3
 801115a:	3708      	adds	r7, #8
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}

08011160 <_ZN13MenuContainerC1Ev>:
#include <gui/containers/MenuContainer.hpp>

MenuContainer::MenuContainer()
 8011160:	b580      	push	{r7, lr}
 8011162:	b082      	sub	sp, #8
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	4618      	mov	r0, r3
 801116c:	f7fb ff14 	bl	800cf98 <_ZN17MenuContainerBaseC1Ev>
 8011170:	4a03      	ldr	r2, [pc, #12]	; (8011180 <_ZN13MenuContainerC1Ev+0x20>)
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	601a      	str	r2, [r3, #0]
{

}
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	4618      	mov	r0, r3
 801117a:	3708      	adds	r7, #8
 801117c:	46bd      	mov	sp, r7
 801117e:	bd80      	pop	{r7, pc}
 8011180:	08028128 	.word	0x08028128

08011184 <_ZN13MenuContainer10initializeEv>:

void MenuContainer::initialize()
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b082      	sub	sp, #8
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
    MenuContainerBase::initialize();
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	4618      	mov	r0, r3
 8011190:	f7fb ffa0 	bl	800d0d4 <_ZN17MenuContainerBase10initializeEv>
}
 8011194:	bf00      	nop
 8011196:	3708      	adds	r7, #8
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}

0801119c <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 801119c:	b480      	push	{r7}
 801119e:	b083      	sub	sp, #12
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
    {
    }
 80111a4:	bf00      	nop
 80111a6:	370c      	adds	r7, #12
 80111a8:	46bd      	mov	sp, r7
 80111aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ae:	4770      	bx	lr

080111b0 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80111b0:	b480      	push	{r7}
 80111b2:	b083      	sub	sp, #12
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
    {
    }
 80111b8:	bf00      	nop
 80111ba:	370c      	adds	r7, #12
 80111bc:	46bd      	mov	sp, r7
 80111be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c2:	4770      	bx	lr

080111c4 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 80111c4:	b480      	push	{r7}
 80111c6:	b083      	sub	sp, #12
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
    {
 80111cc:	4a04      	ldr	r2, [pc, #16]	; (80111e0 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	601a      	str	r2, [r3, #0]
    }
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	4618      	mov	r0, r3
 80111d6:	370c      	adds	r7, #12
 80111d8:	46bd      	mov	sp, r7
 80111da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111de:	4770      	bx	lr
 80111e0:	080281f0 	.word	0x080281f0

080111e4 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b082      	sub	sp, #8
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
    }
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f7ff ffe9 	bl	80111c4 <_ZN8touchgfx9PresenterD1Ev>
 80111f2:	2104      	movs	r1, #4
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f013 fd04 	bl	8024c02 <_ZdlPvj>
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	4618      	mov	r0, r3
 80111fe:	3708      	adds	r7, #8
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}

08011204 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 8011204:	b480      	push	{r7}
 8011206:	b083      	sub	sp, #12
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
    {
 801120c:	4a04      	ldr	r2, [pc, #16]	; (8011220 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	601a      	str	r2, [r3, #0]
    }
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	4618      	mov	r0, r3
 8011216:	370c      	adds	r7, #12
 8011218:	46bd      	mov	sp, r7
 801121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121e:	4770      	bx	lr
 8011220:	080281f0 	.word	0x080281f0

08011224 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8011224:	b480      	push	{r7}
 8011226:	b083      	sub	sp, #12
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
 801122c:	4a06      	ldr	r2, [pc, #24]	; (8011248 <_ZN13ModelListenerC1Ev+0x24>)
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	601a      	str	r2, [r3, #0]
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	2200      	movs	r2, #0
 8011236:	605a      	str	r2, [r3, #4]
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	4618      	mov	r0, r3
 801123c:	370c      	adds	r7, #12
 801123e:	46bd      	mov	sp, r7
 8011240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011244:	4770      	bx	lr
 8011246:	bf00      	nop
 8011248:	080281e0 	.word	0x080281e0

0801124c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 801124c:	b480      	push	{r7}
 801124e:	b083      	sub	sp, #12
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	4a04      	ldr	r2, [pc, #16]	; (8011268 <_ZN13ModelListenerD1Ev+0x1c>)
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	601a      	str	r2, [r3, #0]
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	4618      	mov	r0, r3
 801125e:	370c      	adds	r7, #12
 8011260:	46bd      	mov	sp, r7
 8011262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011266:	4770      	bx	lr
 8011268:	080281e0 	.word	0x080281e0

0801126c <_ZN13ModelListenerD0Ev>:
 801126c:	b580      	push	{r7, lr}
 801126e:	b082      	sub	sp, #8
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f7ff ffe9 	bl	801124c <_ZN13ModelListenerD1Ev>
 801127a:	2108      	movs	r1, #8
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f013 fcc0 	bl	8024c02 <_ZdlPvj>
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	4618      	mov	r0, r3
 8011286:	3708      	adds	r7, #8
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}

0801128c <_ZN13MenuPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MenuPresenter() {};
 801128c:	b580      	push	{r7, lr}
 801128e:	b082      	sub	sp, #8
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
 8011294:	4a09      	ldr	r2, [pc, #36]	; (80112bc <_ZN13MenuPresenterD1Ev+0x30>)
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	601a      	str	r2, [r3, #0]
 801129a:	4a09      	ldr	r2, [pc, #36]	; (80112c0 <_ZN13MenuPresenterD1Ev+0x34>)
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	605a      	str	r2, [r3, #4]
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	3304      	adds	r3, #4
 80112a4:	4618      	mov	r0, r3
 80112a6:	f7ff ffd1 	bl	801124c <_ZN13ModelListenerD1Ev>
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	4618      	mov	r0, r3
 80112ae:	f7ff ff89 	bl	80111c4 <_ZN8touchgfx9PresenterD1Ev>
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	4618      	mov	r0, r3
 80112b6:	3708      	adds	r7, #8
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bd80      	pop	{r7, pc}
 80112bc:	080281b8 	.word	0x080281b8
 80112c0:	080281d0 	.word	0x080281d0

080112c4 <_ZThn4_N13MenuPresenterD1Ev>:
 80112c4:	f1a0 0004 	sub.w	r0, r0, #4
 80112c8:	e7e0      	b.n	801128c <_ZN13MenuPresenterD1Ev>
 80112ca:	bf00      	nop

080112cc <_ZN13MenuPresenterD0Ev>:
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b082      	sub	sp, #8
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
 80112d4:	6878      	ldr	r0, [r7, #4]
 80112d6:	f7ff ffd9 	bl	801128c <_ZN13MenuPresenterD1Ev>
 80112da:	2110      	movs	r1, #16
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f013 fc90 	bl	8024c02 <_ZdlPvj>
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	4618      	mov	r0, r3
 80112e6:	3708      	adds	r7, #8
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}

080112ec <_ZThn4_N13MenuPresenterD0Ev>:
 80112ec:	f1a0 0004 	sub.w	r0, r0, #4
 80112f0:	e7ec      	b.n	80112cc <_ZN13MenuPresenterD0Ev>
	...

080112f4 <_ZN13MenuPresenterC1ER8MenuView>:
#include <gui/menu_screen/MenuView.hpp>
#include <gui/menu_screen/MenuPresenter.hpp>

MenuPresenter::MenuPresenter(MenuView& v)
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b082      	sub	sp, #8
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	6039      	str	r1, [r7, #0]
    : view(v)
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	4618      	mov	r0, r3
 8011302:	f7ff ff7f 	bl	8011204 <_ZN8touchgfx9PresenterC1Ev>
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	3304      	adds	r3, #4
 801130a:	4618      	mov	r0, r3
 801130c:	f7ff ff8a 	bl	8011224 <_ZN13ModelListenerC1Ev>
 8011310:	4a06      	ldr	r2, [pc, #24]	; (801132c <_ZN13MenuPresenterC1ER8MenuView+0x38>)
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	601a      	str	r2, [r3, #0]
 8011316:	4a06      	ldr	r2, [pc, #24]	; (8011330 <_ZN13MenuPresenterC1ER8MenuView+0x3c>)
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	605a      	str	r2, [r3, #4]
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	683a      	ldr	r2, [r7, #0]
 8011320:	60da      	str	r2, [r3, #12]
{

}
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	4618      	mov	r0, r3
 8011326:	3708      	adds	r7, #8
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}
 801132c:	080281b8 	.word	0x080281b8
 8011330:	080281d0 	.word	0x080281d0

08011334 <_ZN13MenuPresenter8activateEv>:

void MenuPresenter::activate()
{
 8011334:	b480      	push	{r7}
 8011336:	b083      	sub	sp, #12
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]

}
 801133c:	bf00      	nop
 801133e:	370c      	adds	r7, #12
 8011340:	46bd      	mov	sp, r7
 8011342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011346:	4770      	bx	lr

08011348 <_ZN13MenuPresenter10deactivateEv>:

void MenuPresenter::deactivate()
{
 8011348:	b480      	push	{r7}
 801134a:	b083      	sub	sp, #12
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]

}
 8011350:	bf00      	nop
 8011352:	370c      	adds	r7, #12
 8011354:	46bd      	mov	sp, r7
 8011356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135a:	4770      	bx	lr

0801135c <_ZN13MenuContainer9setNumberEi>:

	virtual void initialize();

	void setNumber(int no)
 801135c:	b590      	push	{r4, r7, lr}
 801135e:	b08b      	sub	sp, #44	; 0x2c
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
 8011364:	6039      	str	r1, [r7, #0]
	{
		switch (no)
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	2b06      	cmp	r3, #6
 801136a:	f200 80b2 	bhi.w	80114d2 <_ZN13MenuContainer9setNumberEi+0x176>
 801136e:	a201      	add	r2, pc, #4	; (adr r2, 8011374 <_ZN13MenuContainer9setNumberEi+0x18>)
 8011370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011374:	08011391 	.word	0x08011391
 8011378:	080113bf 	.word	0x080113bf
 801137c:	080113ed 	.word	0x080113ed
 8011380:	0801141b 	.word	0x0801141b
 8011384:	08011449 	.word	0x08011449
 8011388:	08011477 	.word	0x08011477
 801138c:	080114a5 	.word	0x080114a5
		{
		case 0:
			image.setBitmap(Bitmap(BITMAP_ICONS8_COMPASS_48_ID));
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011396:	f107 030c 	add.w	r3, r7, #12
 801139a:	2116      	movs	r1, #22
 801139c:	4618      	mov	r0, r3
 801139e:	f7fb fa4c 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 80113a2:	f107 030c 	add.w	r3, r7, #12
 80113a6:	4619      	mov	r1, r3
 80113a8:	4620      	mov	r0, r4
 80113aa:	f006 fc4d 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
			Unicode::snprintf(textAreaBuffer, TEXTAREA_SIZE, "Orientation\nPlateau");
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	3390      	adds	r3, #144	; 0x90
 80113b2:	4a4a      	ldr	r2, [pc, #296]	; (80114dc <_ZN13MenuContainer9setNumberEi+0x180>)
 80113b4:	2128      	movs	r1, #40	; 0x28
 80113b6:	4618      	mov	r0, r3
 80113b8:	f009 fe28 	bl	801b00c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			break;
 80113bc:	e08a      	b.n	80114d4 <_ZN13MenuContainer9setNumberEi+0x178>
		case 1:
			image.setBitmap(Bitmap(BITMAP_ICONS8_WIND_48_ID));
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80113c4:	f107 0310 	add.w	r3, r7, #16
 80113c8:	211d      	movs	r1, #29
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7fb fa35 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 80113d0:	f107 0310 	add.w	r3, r7, #16
 80113d4:	4619      	mov	r1, r3
 80113d6:	4620      	mov	r0, r4
 80113d8:	f006 fc36 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

			Unicode::snprintf(textAreaBuffer, TEXTAREA_SIZE, "Orientation\nVoile");
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	3390      	adds	r3, #144	; 0x90
 80113e0:	4a3f      	ldr	r2, [pc, #252]	; (80114e0 <_ZN13MenuContainer9setNumberEi+0x184>)
 80113e2:	2128      	movs	r1, #40	; 0x28
 80113e4:	4618      	mov	r0, r3
 80113e6:	f009 fe11 	bl	801b00c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			break;
 80113ea:	e073      	b.n	80114d4 <_ZN13MenuContainer9setNumberEi+0x178>
		case 2:
			image.setBitmap(Bitmap(BITMAP_ICONS8_SAMPLE_RATE_48_ID));
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80113f2:	f107 0314 	add.w	r3, r7, #20
 80113f6:	2119      	movs	r1, #25
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7fb fa1e 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 80113fe:	f107 0314 	add.w	r3, r7, #20
 8011402:	4619      	mov	r1, r3
 8011404:	4620      	mov	r0, r4
 8011406:	f006 fc1f 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
			Unicode::snprintf(textAreaBuffer, TEXTAREA_SIZE, "Tension\nBatterie");
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	3390      	adds	r3, #144	; 0x90
 801140e:	4a35      	ldr	r2, [pc, #212]	; (80114e4 <_ZN13MenuContainer9setNumberEi+0x188>)
 8011410:	2128      	movs	r1, #40	; 0x28
 8011412:	4618      	mov	r0, r3
 8011414:	f009 fdfa 	bl	801b00c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			break;
 8011418:	e05c      	b.n	80114d4 <_ZN13MenuContainer9setNumberEi+0x178>
		case 3:
			image.setBitmap(Bitmap(BITMAP_COMMUNICATION_48_ID));
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011420:	f107 0318 	add.w	r3, r7, #24
 8011424:	210c      	movs	r1, #12
 8011426:	4618      	mov	r0, r3
 8011428:	f7fb fa07 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 801142c:	f107 0318 	add.w	r3, r7, #24
 8011430:	4619      	mov	r1, r3
 8011432:	4620      	mov	r0, r4
 8011434:	f006 fc08 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
			Unicode::snprintf(textAreaBuffer, TEXTAREA_SIZE, "Com\nSerie");
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	3390      	adds	r3, #144	; 0x90
 801143c:	4a2a      	ldr	r2, [pc, #168]	; (80114e8 <_ZN13MenuContainer9setNumberEi+0x18c>)
 801143e:	2128      	movs	r1, #40	; 0x28
 8011440:	4618      	mov	r0, r3
 8011442:	f009 fde3 	bl	801b00c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			break;
 8011446:	e045      	b.n	80114d4 <_ZN13MenuContainer9setNumberEi+0x178>
		case 4:
			image.setBitmap(Bitmap(BITMAP_I2C_SPI_48_ID));
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801144e:	f107 031c 	add.w	r3, r7, #28
 8011452:	2112      	movs	r1, #18
 8011454:	4618      	mov	r0, r3
 8011456:	f7fb f9f0 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 801145a:	f107 031c 	add.w	r3, r7, #28
 801145e:	4619      	mov	r1, r3
 8011460:	4620      	mov	r0, r4
 8011462:	f006 fbf1 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
			Unicode::snprintf(textAreaBuffer, TEXTAREA_SIZE, "Com\nI2C & SPI");
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	3390      	adds	r3, #144	; 0x90
 801146a:	4a20      	ldr	r2, [pc, #128]	; (80114ec <_ZN13MenuContainer9setNumberEi+0x190>)
 801146c:	2128      	movs	r1, #40	; 0x28
 801146e:	4618      	mov	r0, r3
 8011470:	f009 fdcc 	bl	801b00c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			break;
 8011474:	e02e      	b.n	80114d4 <_ZN13MenuContainer9setNumberEi+0x178>
		case 5:
			image.setBitmap(Bitmap(BITMAP_GIROUTTE_48_ID));
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801147c:	f107 0320 	add.w	r3, r7, #32
 8011480:	2110      	movs	r1, #16
 8011482:	4618      	mov	r0, r3
 8011484:	f7fb f9d9 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 8011488:	f107 0320 	add.w	r3, r7, #32
 801148c:	4619      	mov	r1, r3
 801148e:	4620      	mov	r0, r4
 8011490:	f006 fbda 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
			Unicode::snprintf(textAreaBuffer, TEXTAREA_SIZE, "Girouette");
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	3390      	adds	r3, #144	; 0x90
 8011498:	4a15      	ldr	r2, [pc, #84]	; (80114f0 <_ZN13MenuContainer9setNumberEi+0x194>)
 801149a:	2128      	movs	r1, #40	; 0x28
 801149c:	4618      	mov	r0, r3
 801149e:	f009 fdb5 	bl	801b00c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			break;
 80114a2:	e017      	b.n	80114d4 <_ZN13MenuContainer9setNumberEi+0x178>
		case 6:
			image.setBitmap(Bitmap(BITMAP_ICONS8_TEST_PASSED_48_ID));
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80114aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80114ae:	211a      	movs	r1, #26
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7fb f9c2 	bl	800c83a <_ZN8touchgfx6BitmapC1Et>
 80114b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80114ba:	4619      	mov	r1, r3
 80114bc:	4620      	mov	r0, r4
 80114be:	f006 fbc3 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
			Unicode::snprintf(textAreaBuffer, TEXTAREA_SIZE, "Test\nComplet");
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	3390      	adds	r3, #144	; 0x90
 80114c6:	4a0b      	ldr	r2, [pc, #44]	; (80114f4 <_ZN13MenuContainer9setNumberEi+0x198>)
 80114c8:	2128      	movs	r1, #40	; 0x28
 80114ca:	4618      	mov	r0, r3
 80114cc:	f009 fd9e 	bl	801b00c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			break;
 80114d0:	e000      	b.n	80114d4 <_ZN13MenuContainer9setNumberEi+0x178>
		default:
			break;
 80114d2:	bf00      	nop
		}
	}
 80114d4:	bf00      	nop
 80114d6:	372c      	adds	r7, #44	; 0x2c
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd90      	pop	{r4, r7, pc}
 80114dc:	080267b0 	.word	0x080267b0
 80114e0:	080267c4 	.word	0x080267c4
 80114e4:	080267d8 	.word	0x080267d8
 80114e8:	080267ec 	.word	0x080267ec
 80114ec:	080267f8 	.word	0x080267f8
 80114f0:	08026808 	.word	0x08026808
 80114f4:	08026814 	.word	0x08026814

080114f8 <_ZN8MenuViewD1Ev>:

class MenuView : public MenuViewBase
{
public:
    MenuView();
    virtual ~MenuView() {}
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b082      	sub	sp, #8
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
 8011500:	4a05      	ldr	r2, [pc, #20]	; (8011518 <_ZN8MenuViewD1Ev+0x20>)
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	601a      	str	r2, [r3, #0]
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	4618      	mov	r0, r3
 801150a:	f7fb ff71 	bl	800d3f0 <_ZN12MenuViewBaseD1Ev>
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	4618      	mov	r0, r3
 8011512:	3708      	adds	r7, #8
 8011514:	46bd      	mov	sp, r7
 8011516:	bd80      	pop	{r7, pc}
 8011518:	08028208 	.word	0x08028208

0801151c <_ZN8MenuViewD0Ev>:
 801151c:	b580      	push	{r7, lr}
 801151e:	b082      	sub	sp, #8
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	f7ff ffe7 	bl	80114f8 <_ZN8MenuViewD1Ev>
 801152a:	f44f 61cf 	mov.w	r1, #1656	; 0x678
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f013 fb67 	bl	8024c02 <_ZdlPvj>
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	4618      	mov	r0, r3
 8011538:	3708      	adds	r7, #8
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}
	...

08011540 <_ZN8MenuViewC1Ev>:
#include <gui/menu_screen/MenuView.hpp>
#include <gui_generated/common/FrontendApplicationBase.hpp>
#include <gui/common/FrontendApplication.hpp>

MenuView::MenuView()
 8011540:	b580      	push	{r7, lr}
 8011542:	b082      	sub	sp, #8
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	4618      	mov	r0, r3
 801154c:	f7fb ffbc 	bl	800d4c8 <_ZN12MenuViewBaseC1Ev>
 8011550:	4a03      	ldr	r2, [pc, #12]	; (8011560 <_ZN8MenuViewC1Ev+0x20>)
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	601a      	str	r2, [r3, #0]
{

}
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	4618      	mov	r0, r3
 801155a:	3708      	adds	r7, #8
 801155c:	46bd      	mov	sp, r7
 801155e:	bd80      	pop	{r7, pc}
 8011560:	08028208 	.word	0x08028208

08011564 <_ZN8MenuView11setupScreenEv>:

void MenuView::setupScreen()
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b082      	sub	sp, #8
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
	MenuViewBase::setupScreen();
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	4618      	mov	r0, r3
 8011570:	f7fc f94c 	bl	800d80c <_ZN12MenuViewBase11setupScreenEv>
}
 8011574:	bf00      	nop
 8011576:	3708      	adds	r7, #8
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}

0801157c <_ZN8MenuView14tearDownScreenEv>:

void MenuView::tearDownScreen()
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b082      	sub	sp, #8
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
	MenuViewBase::tearDownScreen();
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	4618      	mov	r0, r3
 8011588:	f7fb fe2a 	bl	800d1e0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801158c:	bf00      	nop
 801158e:	3708      	adds	r7, #8
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}

08011594 <_ZN8MenuView21scrollWheelUpdateItemER13MenuContainers>:

void MenuView::scrollWheelUpdateItem(MenuContainer& item, int16_t itemIndex)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b084      	sub	sp, #16
 8011598:	af00      	add	r7, sp, #0
 801159a:	60f8      	str	r0, [r7, #12]
 801159c:	60b9      	str	r1, [r7, #8]
 801159e:	4613      	mov	r3, r2
 80115a0:	80fb      	strh	r3, [r7, #6]
	item.setNumber(itemIndex);
 80115a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80115a6:	4619      	mov	r1, r3
 80115a8:	68b8      	ldr	r0, [r7, #8]
 80115aa:	f7ff fed7 	bl	801135c <_ZN13MenuContainer9setNumberEi>
}
 80115ae:	bf00      	nop
 80115b0:	3710      	adds	r7, #16
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}
	...

080115b8 <_ZN8MenuView15ButtonOKClickedEv>:

void MenuView::ButtonOKClicked()
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b082      	sub	sp, #8
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
	switch (scrollWheel.getSelectedItem())
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	33c4      	adds	r3, #196	; 0xc4
 80115c4:	4618      	mov	r0, r3
 80115c6:	f003 f80f 	bl	80145e8 <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv>
 80115ca:	4603      	mov	r3, r0
 80115cc:	2b06      	cmp	r3, #6
 80115ce:	d842      	bhi.n	8011656 <_ZN8MenuView15ButtonOKClickedEv+0x9e>
 80115d0:	a201      	add	r2, pc, #4	; (adr r2, 80115d8 <_ZN8MenuView15ButtonOKClickedEv+0x20>)
 80115d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115d6:	bf00      	nop
 80115d8:	080115f5 	.word	0x080115f5
 80115dc:	08011603 	.word	0x08011603
 80115e0:	08011611 	.word	0x08011611
 80115e4:	0801161f 	.word	0x0801161f
 80115e8:	0801162d 	.word	0x0801162d
 80115ec:	0801163b 	.word	0x0801163b
 80115f0:	08011649 	.word	0x08011649
	{
	case 0:
		static_cast<FrontendApplication*>(Application::getInstance())->gotoTestRotationPlateauScreenSlideTransitionEast();
 80115f4:	f007 fbd6 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 80115f8:	4603      	mov	r3, r0
 80115fa:	4618      	mov	r0, r3
 80115fc:	f7f8 ffca 	bl	800a594 <_ZN23FrontendApplicationBase48gotoTestRotationPlateauScreenSlideTransitionEastEv>
		break;
 8011600:	e02a      	b.n	8011658 <_ZN8MenuView15ButtonOKClickedEv+0xa0>
	case 1:
		static_cast<FrontendApplication*>(Application::getInstance())->gotoTestOrientationVoileScreenSlideTransitionEast();
 8011602:	f007 fbcf 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 8011606:	4603      	mov	r3, r0
 8011608:	4618      	mov	r0, r3
 801160a:	f7f9 f895 	bl	800a738 <_ZN23FrontendApplicationBase49gotoTestOrientationVoileScreenSlideTransitionEastEv>
		break;
 801160e:	e023      	b.n	8011658 <_ZN8MenuView15ButtonOKClickedEv+0xa0>
	case 2:
		static_cast<FrontendApplication*>(Application::getInstance())->gotoTestADCScreenSlideTransitionEast();
 8011610:	f007 fbc8 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 8011614:	4603      	mov	r3, r0
 8011616:	4618      	mov	r0, r3
 8011618:	f7f9 f8d4 	bl	800a7c4 <_ZN23FrontendApplicationBase36gotoTestADCScreenSlideTransitionEastEv>
		break;
 801161c:	e01c      	b.n	8011658 <_ZN8MenuView15ButtonOKClickedEv+0xa0>
	case 3:
		static_cast<FrontendApplication*>(Application::getInstance())->gotoTestUartScreenSlideTransitionEast();
 801161e:	f007 fbc1 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 8011622:	4603      	mov	r3, r0
 8011624:	4618      	mov	r0, r3
 8011626:	f7f8 fffb 	bl	800a620 <_ZN23FrontendApplicationBase37gotoTestUartScreenSlideTransitionEastEv>
		break;
 801162a:	e015      	b.n	8011658 <_ZN8MenuView15ButtonOKClickedEv+0xa0>
	case 4:
		static_cast<FrontendApplication*>(Application::getInstance())->gotoTestI2CSPIScreenSlideTransitionEast();
 801162c:	f007 fbba 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 8011630:	4603      	mov	r3, r0
 8011632:	4618      	mov	r0, r3
 8011634:	f7f9 f83a 	bl	800a6ac <_ZN23FrontendApplicationBase39gotoTestI2CSPIScreenSlideTransitionEastEv>
		break;
 8011638:	e00e      	b.n	8011658 <_ZN8MenuView15ButtonOKClickedEv+0xa0>
	case 5:
		static_cast<FrontendApplication*>(Application::getInstance())->gotoTestGirouetteScreenSlideTransitionEast();
 801163a:	f007 fbb3 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 801163e:	4603      	mov	r3, r0
 8011640:	4618      	mov	r0, r3
 8011642:	f7f9 f94b 	bl	800a8dc <_ZN23FrontendApplicationBase42gotoTestGirouetteScreenSlideTransitionEastEv>
		break;
 8011646:	e007      	b.n	8011658 <_ZN8MenuView15ButtonOKClickedEv+0xa0>
	case 6:
		static_cast<FrontendApplication*>(Application::getInstance())->gotoTestCompletScreenSlideTransitionEast();
 8011648:	f007 fbac 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 801164c:	4603      	mov	r3, r0
 801164e:	4618      	mov	r0, r3
 8011650:	f7f9 f8fe 	bl	800a850 <_ZN23FrontendApplicationBase40gotoTestCompletScreenSlideTransitionEastEv>
		break;
 8011654:	e000      	b.n	8011658 <_ZN8MenuView15ButtonOKClickedEv+0xa0>
	default:
		break;
 8011656:	bf00      	nop
	}
	//else
		//	static_cast<FrontendApplication*>(Application::getInstance())->gotoTestUartScreenNoTransition();
}
 8011658:	bf00      	nop
 801165a:	3708      	adds	r7, #8
 801165c:	46bd      	mov	sp, r7
 801165e:	bd80      	pop	{r7, pc}

08011660 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8011660:	b480      	push	{r7}
 8011662:	b083      	sub	sp, #12
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	2200      	movs	r2, #0
 801166c:	601a      	str	r2, [r3, #0]
{

}
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	4618      	mov	r0, r3
 8011672:	370c      	adds	r7, #12
 8011674:	46bd      	mov	sp, r7
 8011676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167a:	4770      	bx	lr

0801167c <_ZN5Model4tickEv>:

void Model::tick()
{
 801167c:	b480      	push	{r7}
 801167e:	b083      	sub	sp, #12
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]

}
 8011684:	bf00      	nop
 8011686:	370c      	adds	r7, #12
 8011688:	46bd      	mov	sp, r7
 801168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168e:	4770      	bx	lr

08011690 <_ZN16TestADCPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~TestADCPresenter() {};
 8011690:	b580      	push	{r7, lr}
 8011692:	b082      	sub	sp, #8
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
 8011698:	4a09      	ldr	r2, [pc, #36]	; (80116c0 <_ZN16TestADCPresenterD1Ev+0x30>)
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	601a      	str	r2, [r3, #0]
 801169e:	4a09      	ldr	r2, [pc, #36]	; (80116c4 <_ZN16TestADCPresenterD1Ev+0x34>)
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	605a      	str	r2, [r3, #4]
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	3304      	adds	r3, #4
 80116a8:	4618      	mov	r0, r3
 80116aa:	f7ff fdcf 	bl	801124c <_ZN13ModelListenerD1Ev>
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	4618      	mov	r0, r3
 80116b2:	f7ff fd87 	bl	80111c4 <_ZN8touchgfx9PresenterD1Ev>
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	4618      	mov	r0, r3
 80116ba:	3708      	adds	r7, #8
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}
 80116c0:	08028244 	.word	0x08028244
 80116c4:	0802825c 	.word	0x0802825c

080116c8 <_ZThn4_N16TestADCPresenterD1Ev>:
 80116c8:	f1a0 0004 	sub.w	r0, r0, #4
 80116cc:	e7e0      	b.n	8011690 <_ZN16TestADCPresenterD1Ev>
 80116ce:	bf00      	nop

080116d0 <_ZN16TestADCPresenterD0Ev>:
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b082      	sub	sp, #8
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	6878      	ldr	r0, [r7, #4]
 80116da:	f7ff ffd9 	bl	8011690 <_ZN16TestADCPresenterD1Ev>
 80116de:	2110      	movs	r1, #16
 80116e0:	6878      	ldr	r0, [r7, #4]
 80116e2:	f013 fa8e 	bl	8024c02 <_ZdlPvj>
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	4618      	mov	r0, r3
 80116ea:	3708      	adds	r7, #8
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}

080116f0 <_ZThn4_N16TestADCPresenterD0Ev>:
 80116f0:	f1a0 0004 	sub.w	r0, r0, #4
 80116f4:	e7ec      	b.n	80116d0 <_ZN16TestADCPresenterD0Ev>
	...

080116f8 <_ZN16TestADCPresenterC1ER11TestADCView>:
#include <gui/testadc_screen/TestADCView.hpp>
#include <gui/testadc_screen/TestADCPresenter.hpp>

TestADCPresenter::TestADCPresenter(TestADCView& v)
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b082      	sub	sp, #8
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
 8011700:	6039      	str	r1, [r7, #0]
    : view(v)
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	4618      	mov	r0, r3
 8011706:	f7ff fd7d 	bl	8011204 <_ZN8touchgfx9PresenterC1Ev>
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	3304      	adds	r3, #4
 801170e:	4618      	mov	r0, r3
 8011710:	f7ff fd88 	bl	8011224 <_ZN13ModelListenerC1Ev>
 8011714:	4a06      	ldr	r2, [pc, #24]	; (8011730 <_ZN16TestADCPresenterC1ER11TestADCView+0x38>)
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	601a      	str	r2, [r3, #0]
 801171a:	4a06      	ldr	r2, [pc, #24]	; (8011734 <_ZN16TestADCPresenterC1ER11TestADCView+0x3c>)
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	605a      	str	r2, [r3, #4]
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	683a      	ldr	r2, [r7, #0]
 8011724:	60da      	str	r2, [r3, #12]
{

}
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	4618      	mov	r0, r3
 801172a:	3708      	adds	r7, #8
 801172c:	46bd      	mov	sp, r7
 801172e:	bd80      	pop	{r7, pc}
 8011730:	08028244 	.word	0x08028244
 8011734:	0802825c 	.word	0x0802825c

08011738 <_ZN16TestADCPresenter8activateEv>:

void TestADCPresenter::activate()
{
 8011738:	b480      	push	{r7}
 801173a:	b083      	sub	sp, #12
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]

}
 8011740:	bf00      	nop
 8011742:	370c      	adds	r7, #12
 8011744:	46bd      	mov	sp, r7
 8011746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174a:	4770      	bx	lr

0801174c <_ZN16TestADCPresenter10deactivateEv>:

void TestADCPresenter::deactivate()
{
 801174c:	b480      	push	{r7}
 801174e:	b083      	sub	sp, #12
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]

}
 8011754:	bf00      	nop
 8011756:	370c      	adds	r7, #12
 8011758:	46bd      	mov	sp, r7
 801175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175e:	4770      	bx	lr

08011760 <_ZN11TestADCViewD1Ev>:

class TestADCView : public TestADCViewBase
{
public:
    TestADCView();
    virtual ~TestADCView() {}
 8011760:	b580      	push	{r7, lr}
 8011762:	b082      	sub	sp, #8
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
 8011768:	4a05      	ldr	r2, [pc, #20]	; (8011780 <_ZN11TestADCViewD1Ev+0x20>)
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	601a      	str	r2, [r3, #0]
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	4618      	mov	r0, r3
 8011772:	f7fc fb9b 	bl	800deac <_ZN15TestADCViewBaseD1Ev>
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	4618      	mov	r0, r3
 801177a:	3708      	adds	r7, #8
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}
 8011780:	0802826c 	.word	0x0802826c

08011784 <_ZN11TestADCViewD0Ev>:
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
 801178c:	6878      	ldr	r0, [r7, #4]
 801178e:	f7ff ffe7 	bl	8011760 <_ZN11TestADCViewD1Ev>
 8011792:	f44f 7114 	mov.w	r1, #592	; 0x250
 8011796:	6878      	ldr	r0, [r7, #4]
 8011798:	f013 fa33 	bl	8024c02 <_ZdlPvj>
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	4618      	mov	r0, r3
 80117a0:	3708      	adds	r7, #8
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}
	...

080117a8 <_ZN11TestADCViewC1Ev>:
#include <gui/testadc_screen/TestADCView.hpp>

TestADCView::TestADCView()
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b082      	sub	sp, #8
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	4618      	mov	r0, r3
 80117b4:	f7fc fbd2 	bl	800df5c <_ZN15TestADCViewBaseC1Ev>
 80117b8:	4a03      	ldr	r2, [pc, #12]	; (80117c8 <_ZN11TestADCViewC1Ev+0x20>)
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	601a      	str	r2, [r3, #0]
{

}
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	4618      	mov	r0, r3
 80117c2:	3708      	adds	r7, #8
 80117c4:	46bd      	mov	sp, r7
 80117c6:	bd80      	pop	{r7, pc}
 80117c8:	0802826c 	.word	0x0802826c

080117cc <_ZN11TestADCView11setupScreenEv>:

void TestADCView::setupScreen()
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b082      	sub	sp, #8
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
    TestADCViewBase::setupScreen();
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	4618      	mov	r0, r3
 80117d8:	f7fc fd18 	bl	800e20c <_ZN15TestADCViewBase11setupScreenEv>
}
 80117dc:	bf00      	nop
 80117de:	3708      	adds	r7, #8
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd80      	pop	{r7, pc}

080117e4 <_ZN11TestADCView14tearDownScreenEv>:

void TestADCView::tearDownScreen()
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b082      	sub	sp, #8
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
    TestADCViewBase::tearDownScreen();
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	4618      	mov	r0, r3
 80117f0:	f7fb fcf6 	bl	800d1e0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80117f4:	bf00      	nop
 80117f6:	3708      	adds	r7, #8
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}

080117fc <_ZN20TestCompletPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~TestCompletPresenter() {};
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b082      	sub	sp, #8
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
 8011804:	4a09      	ldr	r2, [pc, #36]	; (801182c <_ZN20TestCompletPresenterD1Ev+0x30>)
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	601a      	str	r2, [r3, #0]
 801180a:	4a09      	ldr	r2, [pc, #36]	; (8011830 <_ZN20TestCompletPresenterD1Ev+0x34>)
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	605a      	str	r2, [r3, #4]
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	3304      	adds	r3, #4
 8011814:	4618      	mov	r0, r3
 8011816:	f7ff fd19 	bl	801124c <_ZN13ModelListenerD1Ev>
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	4618      	mov	r0, r3
 801181e:	f7ff fcd1 	bl	80111c4 <_ZN8touchgfx9PresenterD1Ev>
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	4618      	mov	r0, r3
 8011826:	3708      	adds	r7, #8
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}
 801182c:	080282a4 	.word	0x080282a4
 8011830:	080282bc 	.word	0x080282bc

08011834 <_ZThn4_N20TestCompletPresenterD1Ev>:
 8011834:	f1a0 0004 	sub.w	r0, r0, #4
 8011838:	e7e0      	b.n	80117fc <_ZN20TestCompletPresenterD1Ev>
 801183a:	bf00      	nop

0801183c <_ZN20TestCompletPresenterD0Ev>:
 801183c:	b580      	push	{r7, lr}
 801183e:	b082      	sub	sp, #8
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	f7ff ffd9 	bl	80117fc <_ZN20TestCompletPresenterD1Ev>
 801184a:	2110      	movs	r1, #16
 801184c:	6878      	ldr	r0, [r7, #4]
 801184e:	f013 f9d8 	bl	8024c02 <_ZdlPvj>
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	4618      	mov	r0, r3
 8011856:	3708      	adds	r7, #8
 8011858:	46bd      	mov	sp, r7
 801185a:	bd80      	pop	{r7, pc}

0801185c <_ZThn4_N20TestCompletPresenterD0Ev>:
 801185c:	f1a0 0004 	sub.w	r0, r0, #4
 8011860:	e7ec      	b.n	801183c <_ZN20TestCompletPresenterD0Ev>
	...

08011864 <_ZN20TestCompletPresenterC1ER15TestCompletView>:
#include <gui/testcomplet_screen/TestCompletView.hpp>
#include <gui/testcomplet_screen/TestCompletPresenter.hpp>

TestCompletPresenter::TestCompletPresenter(TestCompletView& v)
 8011864:	b580      	push	{r7, lr}
 8011866:	b082      	sub	sp, #8
 8011868:	af00      	add	r7, sp, #0
 801186a:	6078      	str	r0, [r7, #4]
 801186c:	6039      	str	r1, [r7, #0]
    : view(v)
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	4618      	mov	r0, r3
 8011872:	f7ff fcc7 	bl	8011204 <_ZN8touchgfx9PresenterC1Ev>
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	3304      	adds	r3, #4
 801187a:	4618      	mov	r0, r3
 801187c:	f7ff fcd2 	bl	8011224 <_ZN13ModelListenerC1Ev>
 8011880:	4a06      	ldr	r2, [pc, #24]	; (801189c <_ZN20TestCompletPresenterC1ER15TestCompletView+0x38>)
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	601a      	str	r2, [r3, #0]
 8011886:	4a06      	ldr	r2, [pc, #24]	; (80118a0 <_ZN20TestCompletPresenterC1ER15TestCompletView+0x3c>)
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	605a      	str	r2, [r3, #4]
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	683a      	ldr	r2, [r7, #0]
 8011890:	60da      	str	r2, [r3, #12]
{

}
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	4618      	mov	r0, r3
 8011896:	3708      	adds	r7, #8
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}
 801189c:	080282a4 	.word	0x080282a4
 80118a0:	080282bc 	.word	0x080282bc

080118a4 <_ZN20TestCompletPresenter8activateEv>:

void TestCompletPresenter::activate()
{
 80118a4:	b480      	push	{r7}
 80118a6:	b083      	sub	sp, #12
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]

}
 80118ac:	bf00      	nop
 80118ae:	370c      	adds	r7, #12
 80118b0:	46bd      	mov	sp, r7
 80118b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b6:	4770      	bx	lr

080118b8 <_ZN20TestCompletPresenter10deactivateEv>:

void TestCompletPresenter::deactivate()
{
 80118b8:	b480      	push	{r7}
 80118ba:	b083      	sub	sp, #12
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]

}
 80118c0:	bf00      	nop
 80118c2:	370c      	adds	r7, #12
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr

080118cc <_ZN15TestCompletViewD1Ev>:

class TestCompletView : public TestCompletViewBase
{
public:
    TestCompletView();
    virtual ~TestCompletView() {}
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b082      	sub	sp, #8
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
 80118d4:	4a05      	ldr	r2, [pc, #20]	; (80118ec <_ZN15TestCompletViewD1Ev+0x20>)
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	601a      	str	r2, [r3, #0]
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	4618      	mov	r0, r3
 80118de:	f7fc fd7b 	bl	800e3d8 <_ZN19TestCompletViewBaseD1Ev>
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	4618      	mov	r0, r3
 80118e6:	3708      	adds	r7, #8
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}
 80118ec:	080282cc 	.word	0x080282cc

080118f0 <_ZN15TestCompletViewD0Ev>:
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b082      	sub	sp, #8
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
 80118f8:	6878      	ldr	r0, [r7, #4]
 80118fa:	f7ff ffe7 	bl	80118cc <_ZN15TestCompletViewD1Ev>
 80118fe:	21e4      	movs	r1, #228	; 0xe4
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	f013 f97e 	bl	8024c02 <_ZdlPvj>
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	4618      	mov	r0, r3
 801190a:	3708      	adds	r7, #8
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}

08011910 <_ZN15TestCompletViewC1Ev>:
#include <gui/testcomplet_screen/TestCompletView.hpp>

TestCompletView::TestCompletView()
 8011910:	b580      	push	{r7, lr}
 8011912:	b082      	sub	sp, #8
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	4618      	mov	r0, r3
 801191c:	f7fc fda8 	bl	800e470 <_ZN19TestCompletViewBaseC1Ev>
 8011920:	4a03      	ldr	r2, [pc, #12]	; (8011930 <_ZN15TestCompletViewC1Ev+0x20>)
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	601a      	str	r2, [r3, #0]
{

}
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	4618      	mov	r0, r3
 801192a:	3708      	adds	r7, #8
 801192c:	46bd      	mov	sp, r7
 801192e:	bd80      	pop	{r7, pc}
 8011930:	080282cc 	.word	0x080282cc

08011934 <_ZN15TestCompletView11setupScreenEv>:

void TestCompletView::setupScreen()
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b082      	sub	sp, #8
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
    TestCompletViewBase::setupScreen();
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	4618      	mov	r0, r3
 8011940:	f7fc fe4a 	bl	800e5d8 <_ZN19TestCompletViewBase11setupScreenEv>
}
 8011944:	bf00      	nop
 8011946:	3708      	adds	r7, #8
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}

0801194c <_ZN15TestCompletView14tearDownScreenEv>:

void TestCompletView::tearDownScreen()
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b082      	sub	sp, #8
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
    TestCompletViewBase::tearDownScreen();
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	4618      	mov	r0, r3
 8011958:	f7fb fc42 	bl	800d1e0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801195c:	bf00      	nop
 801195e:	3708      	adds	r7, #8
 8011960:	46bd      	mov	sp, r7
 8011962:	bd80      	pop	{r7, pc}

08011964 <_ZN22TestGirouettePresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~TestGirouettePresenter() {};
 8011964:	b580      	push	{r7, lr}
 8011966:	b082      	sub	sp, #8
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
 801196c:	4a09      	ldr	r2, [pc, #36]	; (8011994 <_ZN22TestGirouettePresenterD1Ev+0x30>)
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	601a      	str	r2, [r3, #0]
 8011972:	4a09      	ldr	r2, [pc, #36]	; (8011998 <_ZN22TestGirouettePresenterD1Ev+0x34>)
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	605a      	str	r2, [r3, #4]
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	3304      	adds	r3, #4
 801197c:	4618      	mov	r0, r3
 801197e:	f7ff fc65 	bl	801124c <_ZN13ModelListenerD1Ev>
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	4618      	mov	r0, r3
 8011986:	f7ff fc1d 	bl	80111c4 <_ZN8touchgfx9PresenterD1Ev>
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	4618      	mov	r0, r3
 801198e:	3708      	adds	r7, #8
 8011990:	46bd      	mov	sp, r7
 8011992:	bd80      	pop	{r7, pc}
 8011994:	08028304 	.word	0x08028304
 8011998:	0802831c 	.word	0x0802831c

0801199c <_ZThn4_N22TestGirouettePresenterD1Ev>:
 801199c:	f1a0 0004 	sub.w	r0, r0, #4
 80119a0:	e7e0      	b.n	8011964 <_ZN22TestGirouettePresenterD1Ev>
 80119a2:	bf00      	nop

080119a4 <_ZN22TestGirouettePresenterD0Ev>:
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b082      	sub	sp, #8
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
 80119ac:	6878      	ldr	r0, [r7, #4]
 80119ae:	f7ff ffd9 	bl	8011964 <_ZN22TestGirouettePresenterD1Ev>
 80119b2:	2110      	movs	r1, #16
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f013 f924 	bl	8024c02 <_ZdlPvj>
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	4618      	mov	r0, r3
 80119be:	3708      	adds	r7, #8
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bd80      	pop	{r7, pc}

080119c4 <_ZThn4_N22TestGirouettePresenterD0Ev>:
 80119c4:	f1a0 0004 	sub.w	r0, r0, #4
 80119c8:	e7ec      	b.n	80119a4 <_ZN22TestGirouettePresenterD0Ev>
	...

080119cc <_ZN22TestGirouettePresenterC1ER17TestGirouetteView>:
#include <gui/testgirouette_screen/TestGirouetteView.hpp>
#include <gui/testgirouette_screen/TestGirouettePresenter.hpp>

TestGirouettePresenter::TestGirouettePresenter(TestGirouetteView& v)
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b082      	sub	sp, #8
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
 80119d4:	6039      	str	r1, [r7, #0]
    : view(v)
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	4618      	mov	r0, r3
 80119da:	f7ff fc13 	bl	8011204 <_ZN8touchgfx9PresenterC1Ev>
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	3304      	adds	r3, #4
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7ff fc1e 	bl	8011224 <_ZN13ModelListenerC1Ev>
 80119e8:	4a06      	ldr	r2, [pc, #24]	; (8011a04 <_ZN22TestGirouettePresenterC1ER17TestGirouetteView+0x38>)
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	601a      	str	r2, [r3, #0]
 80119ee:	4a06      	ldr	r2, [pc, #24]	; (8011a08 <_ZN22TestGirouettePresenterC1ER17TestGirouetteView+0x3c>)
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	605a      	str	r2, [r3, #4]
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	683a      	ldr	r2, [r7, #0]
 80119f8:	60da      	str	r2, [r3, #12]
{

}
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	4618      	mov	r0, r3
 80119fe:	3708      	adds	r7, #8
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd80      	pop	{r7, pc}
 8011a04:	08028304 	.word	0x08028304
 8011a08:	0802831c 	.word	0x0802831c

08011a0c <_ZN22TestGirouettePresenter8activateEv>:

void TestGirouettePresenter::activate()
{
 8011a0c:	b480      	push	{r7}
 8011a0e:	b083      	sub	sp, #12
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	6078      	str	r0, [r7, #4]

}
 8011a14:	bf00      	nop
 8011a16:	370c      	adds	r7, #12
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1e:	4770      	bx	lr

08011a20 <_ZN22TestGirouettePresenter10deactivateEv>:

void TestGirouettePresenter::deactivate()
{
 8011a20:	b480      	push	{r7}
 8011a22:	b083      	sub	sp, #12
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]

}
 8011a28:	bf00      	nop
 8011a2a:	370c      	adds	r7, #12
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a32:	4770      	bx	lr

08011a34 <_ZN17TestGirouetteViewD1Ev>:

class TestGirouetteView : public TestGirouetteViewBase
{
public:
    TestGirouetteView();
    virtual ~TestGirouetteView() {}
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b082      	sub	sp, #8
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
 8011a3c:	4a05      	ldr	r2, [pc, #20]	; (8011a54 <_ZN17TestGirouetteViewD1Ev+0x20>)
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	601a      	str	r2, [r3, #0]
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	4618      	mov	r0, r3
 8011a46:	f7fc fedd 	bl	800e804 <_ZN21TestGirouetteViewBaseD1Ev>
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	3708      	adds	r7, #8
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}
 8011a54:	0802832c 	.word	0x0802832c

08011a58 <_ZN17TestGirouetteViewD0Ev>:
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b082      	sub	sp, #8
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
 8011a60:	6878      	ldr	r0, [r7, #4]
 8011a62:	f7ff ffe7 	bl	8011a34 <_ZN17TestGirouetteViewD1Ev>
 8011a66:	f641 7114 	movw	r1, #7956	; 0x1f14
 8011a6a:	6878      	ldr	r0, [r7, #4]
 8011a6c:	f013 f8c9 	bl	8024c02 <_ZdlPvj>
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	4618      	mov	r0, r3
 8011a74:	3708      	adds	r7, #8
 8011a76:	46bd      	mov	sp, r7
 8011a78:	bd80      	pop	{r7, pc}
	...

08011a7c <_ZN17TestGirouetteViewC1Ev>:
#include <gui/testgirouette_screen/TestGirouetteView.hpp>

TestGirouetteView::TestGirouetteView()
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b082      	sub	sp, #8
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	4618      	mov	r0, r3
 8011a88:	f7fc ff2c 	bl	800e8e4 <_ZN21TestGirouetteViewBaseC1Ev>
 8011a8c:	4a03      	ldr	r2, [pc, #12]	; (8011a9c <_ZN17TestGirouetteViewC1Ev+0x20>)
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	601a      	str	r2, [r3, #0]
{

}
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	4618      	mov	r0, r3
 8011a96:	3708      	adds	r7, #8
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	bd80      	pop	{r7, pc}
 8011a9c:	0802832c 	.word	0x0802832c

08011aa0 <_ZN17TestGirouetteView11setupScreenEv>:

void TestGirouetteView::setupScreen()
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b082      	sub	sp, #8
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
    TestGirouetteViewBase::setupScreen();
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f7fd f948 	bl	800ed40 <_ZN21TestGirouetteViewBase11setupScreenEv>
}
 8011ab0:	bf00      	nop
 8011ab2:	3708      	adds	r7, #8
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd80      	pop	{r7, pc}

08011ab8 <_ZN17TestGirouetteView14tearDownScreenEv>:

void TestGirouetteView::tearDownScreen()
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b082      	sub	sp, #8
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
    TestGirouetteViewBase::tearDownScreen();
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	f7fb fb8c 	bl	800d1e0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011ac8:	bf00      	nop
 8011aca:	3708      	adds	r7, #8
 8011acc:	46bd      	mov	sp, r7
 8011ace:	bd80      	pop	{r7, pc}

08011ad0 <_ZN19TestI2CSPIPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~TestI2CSPIPresenter() {};
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b082      	sub	sp, #8
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
 8011ad8:	4a09      	ldr	r2, [pc, #36]	; (8011b00 <_ZN19TestI2CSPIPresenterD1Ev+0x30>)
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	601a      	str	r2, [r3, #0]
 8011ade:	4a09      	ldr	r2, [pc, #36]	; (8011b04 <_ZN19TestI2CSPIPresenterD1Ev+0x34>)
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	605a      	str	r2, [r3, #4]
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	3304      	adds	r3, #4
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f7ff fbaf 	bl	801124c <_ZN13ModelListenerD1Ev>
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	4618      	mov	r0, r3
 8011af2:	f7ff fb67 	bl	80111c4 <_ZN8touchgfx9PresenterD1Ev>
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	4618      	mov	r0, r3
 8011afa:	3708      	adds	r7, #8
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}
 8011b00:	08028364 	.word	0x08028364
 8011b04:	0802837c 	.word	0x0802837c

08011b08 <_ZThn4_N19TestI2CSPIPresenterD1Ev>:
 8011b08:	f1a0 0004 	sub.w	r0, r0, #4
 8011b0c:	e7e0      	b.n	8011ad0 <_ZN19TestI2CSPIPresenterD1Ev>
 8011b0e:	bf00      	nop

08011b10 <_ZN19TestI2CSPIPresenterD0Ev>:
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b082      	sub	sp, #8
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
 8011b18:	6878      	ldr	r0, [r7, #4]
 8011b1a:	f7ff ffd9 	bl	8011ad0 <_ZN19TestI2CSPIPresenterD1Ev>
 8011b1e:	2110      	movs	r1, #16
 8011b20:	6878      	ldr	r0, [r7, #4]
 8011b22:	f013 f86e 	bl	8024c02 <_ZdlPvj>
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	4618      	mov	r0, r3
 8011b2a:	3708      	adds	r7, #8
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}

08011b30 <_ZThn4_N19TestI2CSPIPresenterD0Ev>:
 8011b30:	f1a0 0004 	sub.w	r0, r0, #4
 8011b34:	e7ec      	b.n	8011b10 <_ZN19TestI2CSPIPresenterD0Ev>
	...

08011b38 <_ZN19TestI2CSPIPresenterC1ER14TestI2CSPIView>:
#include <gui/testi2cspi_screen/TestI2CSPIView.hpp>
#include <gui/testi2cspi_screen/TestI2CSPIPresenter.hpp>

TestI2CSPIPresenter::TestI2CSPIPresenter(TestI2CSPIView& v)
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b082      	sub	sp, #8
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
 8011b40:	6039      	str	r1, [r7, #0]
    : view(v)
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	4618      	mov	r0, r3
 8011b46:	f7ff fb5d 	bl	8011204 <_ZN8touchgfx9PresenterC1Ev>
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	3304      	adds	r3, #4
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f7ff fb68 	bl	8011224 <_ZN13ModelListenerC1Ev>
 8011b54:	4a06      	ldr	r2, [pc, #24]	; (8011b70 <_ZN19TestI2CSPIPresenterC1ER14TestI2CSPIView+0x38>)
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	601a      	str	r2, [r3, #0]
 8011b5a:	4a06      	ldr	r2, [pc, #24]	; (8011b74 <_ZN19TestI2CSPIPresenterC1ER14TestI2CSPIView+0x3c>)
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	605a      	str	r2, [r3, #4]
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	683a      	ldr	r2, [r7, #0]
 8011b64:	60da      	str	r2, [r3, #12]
{

}
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	4618      	mov	r0, r3
 8011b6a:	3708      	adds	r7, #8
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}
 8011b70:	08028364 	.word	0x08028364
 8011b74:	0802837c 	.word	0x0802837c

08011b78 <_ZN19TestI2CSPIPresenter8activateEv>:

void TestI2CSPIPresenter::activate()
{
 8011b78:	b480      	push	{r7}
 8011b7a:	b083      	sub	sp, #12
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]

}
 8011b80:	bf00      	nop
 8011b82:	370c      	adds	r7, #12
 8011b84:	46bd      	mov	sp, r7
 8011b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8a:	4770      	bx	lr

08011b8c <_ZN19TestI2CSPIPresenter10deactivateEv>:

void TestI2CSPIPresenter::deactivate()
{
 8011b8c:	b480      	push	{r7}
 8011b8e:	b083      	sub	sp, #12
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]

}
 8011b94:	bf00      	nop
 8011b96:	370c      	adds	r7, #12
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9e:	4770      	bx	lr

08011ba0 <_ZN14TestI2CSPIViewD1Ev>:

class TestI2CSPIView : public TestI2CSPIViewBase
{
public:
    TestI2CSPIView();
    virtual ~TestI2CSPIView() {}
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b082      	sub	sp, #8
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
 8011ba8:	4a05      	ldr	r2, [pc, #20]	; (8011bc0 <_ZN14TestI2CSPIViewD1Ev+0x20>)
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	601a      	str	r2, [r3, #0]
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	f7fd fa69 	bl	800f088 <_ZN18TestI2CSPIViewBaseD1Ev>
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	4618      	mov	r0, r3
 8011bba:	3708      	adds	r7, #8
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	bd80      	pop	{r7, pc}
 8011bc0:	0802838c 	.word	0x0802838c

08011bc4 <_ZN14TestI2CSPIViewD0Ev>:
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b082      	sub	sp, #8
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
 8011bcc:	6878      	ldr	r0, [r7, #4]
 8011bce:	f7ff ffe7 	bl	8011ba0 <_ZN14TestI2CSPIViewD1Ev>
 8011bd2:	f44f 718c 	mov.w	r1, #280	; 0x118
 8011bd6:	6878      	ldr	r0, [r7, #4]
 8011bd8:	f013 f813 	bl	8024c02 <_ZdlPvj>
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	4618      	mov	r0, r3
 8011be0:	3708      	adds	r7, #8
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}
	...

08011be8 <_ZN14TestI2CSPIViewC1Ev>:
#include <gui/testi2cspi_screen/TestI2CSPIView.hpp>

TestI2CSPIView::TestI2CSPIView()
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b082      	sub	sp, #8
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7fd fa9a 	bl	800f12c <_ZN18TestI2CSPIViewBaseC1Ev>
 8011bf8:	4a03      	ldr	r2, [pc, #12]	; (8011c08 <_ZN14TestI2CSPIViewC1Ev+0x20>)
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	601a      	str	r2, [r3, #0]
{

}
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	4618      	mov	r0, r3
 8011c02:	3708      	adds	r7, #8
 8011c04:	46bd      	mov	sp, r7
 8011c06:	bd80      	pop	{r7, pc}
 8011c08:	0802838c 	.word	0x0802838c

08011c0c <_ZN14TestI2CSPIView11setupScreenEv>:

void TestI2CSPIView::setupScreen()
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b082      	sub	sp, #8
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
    TestI2CSPIViewBase::setupScreen();
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	4618      	mov	r0, r3
 8011c18:	f7fd fb70 	bl	800f2fc <_ZN18TestI2CSPIViewBase11setupScreenEv>
}
 8011c1c:	bf00      	nop
 8011c1e:	3708      	adds	r7, #8
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}

08011c24 <_ZN14TestI2CSPIView14tearDownScreenEv>:

void TestI2CSPIView::tearDownScreen()
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b082      	sub	sp, #8
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
    TestI2CSPIViewBase::tearDownScreen();
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f7fb fad6 	bl	800d1e0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011c34:	bf00      	nop
 8011c36:	3708      	adds	r7, #8
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	bd80      	pop	{r7, pc}

08011c3c <_ZN29TestOrientationVoilePresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~TestOrientationVoilePresenter() {};
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b082      	sub	sp, #8
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
 8011c44:	4a09      	ldr	r2, [pc, #36]	; (8011c6c <_ZN29TestOrientationVoilePresenterD1Ev+0x30>)
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	601a      	str	r2, [r3, #0]
 8011c4a:	4a09      	ldr	r2, [pc, #36]	; (8011c70 <_ZN29TestOrientationVoilePresenterD1Ev+0x34>)
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	605a      	str	r2, [r3, #4]
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	3304      	adds	r3, #4
 8011c54:	4618      	mov	r0, r3
 8011c56:	f7ff faf9 	bl	801124c <_ZN13ModelListenerD1Ev>
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	f7ff fab1 	bl	80111c4 <_ZN8touchgfx9PresenterD1Ev>
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	4618      	mov	r0, r3
 8011c66:	3708      	adds	r7, #8
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}
 8011c6c:	080283c4 	.word	0x080283c4
 8011c70:	080283dc 	.word	0x080283dc

08011c74 <_ZThn4_N29TestOrientationVoilePresenterD1Ev>:
 8011c74:	f1a0 0004 	sub.w	r0, r0, #4
 8011c78:	e7e0      	b.n	8011c3c <_ZN29TestOrientationVoilePresenterD1Ev>
 8011c7a:	bf00      	nop

08011c7c <_ZN29TestOrientationVoilePresenterD0Ev>:
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b082      	sub	sp, #8
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
 8011c84:	6878      	ldr	r0, [r7, #4]
 8011c86:	f7ff ffd9 	bl	8011c3c <_ZN29TestOrientationVoilePresenterD1Ev>
 8011c8a:	2110      	movs	r1, #16
 8011c8c:	6878      	ldr	r0, [r7, #4]
 8011c8e:	f012 ffb8 	bl	8024c02 <_ZdlPvj>
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	4618      	mov	r0, r3
 8011c96:	3708      	adds	r7, #8
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}

08011c9c <_ZThn4_N29TestOrientationVoilePresenterD0Ev>:
 8011c9c:	f1a0 0004 	sub.w	r0, r0, #4
 8011ca0:	e7ec      	b.n	8011c7c <_ZN29TestOrientationVoilePresenterD0Ev>
	...

08011ca4 <_ZN29TestOrientationVoilePresenterC1ER24TestOrientationVoileView>:
#include <gui/testorientationvoile_screen/TestOrientationVoileView.hpp>
#include <gui/testorientationvoile_screen/TestOrientationVoilePresenter.hpp>

TestOrientationVoilePresenter::TestOrientationVoilePresenter(TestOrientationVoileView& v)
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b082      	sub	sp, #8
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
 8011cac:	6039      	str	r1, [r7, #0]
    : view(v)
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	f7ff faa7 	bl	8011204 <_ZN8touchgfx9PresenterC1Ev>
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	3304      	adds	r3, #4
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f7ff fab2 	bl	8011224 <_ZN13ModelListenerC1Ev>
 8011cc0:	4a06      	ldr	r2, [pc, #24]	; (8011cdc <_ZN29TestOrientationVoilePresenterC1ER24TestOrientationVoileView+0x38>)
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	601a      	str	r2, [r3, #0]
 8011cc6:	4a06      	ldr	r2, [pc, #24]	; (8011ce0 <_ZN29TestOrientationVoilePresenterC1ER24TestOrientationVoileView+0x3c>)
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	605a      	str	r2, [r3, #4]
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	683a      	ldr	r2, [r7, #0]
 8011cd0:	60da      	str	r2, [r3, #12]
{

}
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	3708      	adds	r7, #8
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	bd80      	pop	{r7, pc}
 8011cdc:	080283c4 	.word	0x080283c4
 8011ce0:	080283dc 	.word	0x080283dc

08011ce4 <_ZN29TestOrientationVoilePresenter8activateEv>:

void TestOrientationVoilePresenter::activate()
{
 8011ce4:	b480      	push	{r7}
 8011ce6:	b083      	sub	sp, #12
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]

}
 8011cec:	bf00      	nop
 8011cee:	370c      	adds	r7, #12
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf6:	4770      	bx	lr

08011cf8 <_ZN29TestOrientationVoilePresenter10deactivateEv>:

void TestOrientationVoilePresenter::deactivate()
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b083      	sub	sp, #12
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]

}
 8011d00:	bf00      	nop
 8011d02:	370c      	adds	r7, #12
 8011d04:	46bd      	mov	sp, r7
 8011d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0a:	4770      	bx	lr

08011d0c <_ZN24TestOrientationVoileViewD1Ev>:

class TestOrientationVoileView : public TestOrientationVoileViewBase
{
public:
    TestOrientationVoileView();
    virtual ~TestOrientationVoileView() {}
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b082      	sub	sp, #8
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
 8011d14:	4a05      	ldr	r2, [pc, #20]	; (8011d2c <_ZN24TestOrientationVoileViewD1Ev+0x20>)
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	601a      	str	r2, [r3, #0]
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f7fd fc01 	bl	800f524 <_ZN28TestOrientationVoileViewBaseD1Ev>
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	4618      	mov	r0, r3
 8011d26:	3708      	adds	r7, #8
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bd80      	pop	{r7, pc}
 8011d2c:	080283ec 	.word	0x080283ec

08011d30 <_ZN24TestOrientationVoileViewD0Ev>:
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b082      	sub	sp, #8
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	6078      	str	r0, [r7, #4]
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f7ff ffe7 	bl	8011d0c <_ZN24TestOrientationVoileViewD1Ev>
 8011d3e:	f242 0148 	movw	r1, #8264	; 0x2048
 8011d42:	6878      	ldr	r0, [r7, #4]
 8011d44:	f012 ff5d 	bl	8024c02 <_ZdlPvj>
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	3708      	adds	r7, #8
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}
	...

08011d54 <_ZN24TestOrientationVoileViewC1Ev>:
#include <gui/testorientationvoile_screen/TestOrientationVoileView.hpp>

TestOrientationVoileView::TestOrientationVoileView()
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b082      	sub	sp, #8
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	6078      	str	r0, [r7, #4]
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f7fd fc6e 	bl	800f640 <_ZN28TestOrientationVoileViewBaseC1Ev>
 8011d64:	4a03      	ldr	r2, [pc, #12]	; (8011d74 <_ZN24TestOrientationVoileViewC1Ev+0x20>)
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	601a      	str	r2, [r3, #0]
{

}
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	3708      	adds	r7, #8
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd80      	pop	{r7, pc}
 8011d74:	080283ec 	.word	0x080283ec

08011d78 <_ZN24TestOrientationVoileView11setupScreenEv>:

void TestOrientationVoileView::setupScreen()
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b082      	sub	sp, #8
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
    TestOrientationVoileViewBase::setupScreen();
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7fd ff8a 	bl	800fc9c <_ZN28TestOrientationVoileViewBase11setupScreenEv>
}
 8011d88:	bf00      	nop
 8011d8a:	3708      	adds	r7, #8
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	bd80      	pop	{r7, pc}

08011d90 <_ZN24TestOrientationVoileView14tearDownScreenEv>:

void TestOrientationVoileView::tearDownScreen()
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b082      	sub	sp, #8
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
    TestOrientationVoileViewBase::tearDownScreen();
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f7fb fa20 	bl	800d1e0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011da0:	bf00      	nop
 8011da2:	3708      	adds	r7, #8
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd80      	pop	{r7, pc}

08011da8 <_ZN28TestRotationPlateauPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~TestRotationPlateauPresenter() {};
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b082      	sub	sp, #8
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
 8011db0:	4a09      	ldr	r2, [pc, #36]	; (8011dd8 <_ZN28TestRotationPlateauPresenterD1Ev+0x30>)
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	601a      	str	r2, [r3, #0]
 8011db6:	4a09      	ldr	r2, [pc, #36]	; (8011ddc <_ZN28TestRotationPlateauPresenterD1Ev+0x34>)
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	605a      	str	r2, [r3, #4]
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	3304      	adds	r3, #4
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f7ff fa43 	bl	801124c <_ZN13ModelListenerD1Ev>
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	4618      	mov	r0, r3
 8011dca:	f7ff f9fb 	bl	80111c4 <_ZN8touchgfx9PresenterD1Ev>
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	3708      	adds	r7, #8
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	bd80      	pop	{r7, pc}
 8011dd8:	08028424 	.word	0x08028424
 8011ddc:	0802843c 	.word	0x0802843c

08011de0 <_ZThn4_N28TestRotationPlateauPresenterD1Ev>:
 8011de0:	f1a0 0004 	sub.w	r0, r0, #4
 8011de4:	e7e0      	b.n	8011da8 <_ZN28TestRotationPlateauPresenterD1Ev>
 8011de6:	bf00      	nop

08011de8 <_ZN28TestRotationPlateauPresenterD0Ev>:
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b082      	sub	sp, #8
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	6878      	ldr	r0, [r7, #4]
 8011df2:	f7ff ffd9 	bl	8011da8 <_ZN28TestRotationPlateauPresenterD1Ev>
 8011df6:	2110      	movs	r1, #16
 8011df8:	6878      	ldr	r0, [r7, #4]
 8011dfa:	f012 ff02 	bl	8024c02 <_ZdlPvj>
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	4618      	mov	r0, r3
 8011e02:	3708      	adds	r7, #8
 8011e04:	46bd      	mov	sp, r7
 8011e06:	bd80      	pop	{r7, pc}

08011e08 <_ZThn4_N28TestRotationPlateauPresenterD0Ev>:
 8011e08:	f1a0 0004 	sub.w	r0, r0, #4
 8011e0c:	e7ec      	b.n	8011de8 <_ZN28TestRotationPlateauPresenterD0Ev>
	...

08011e10 <_ZN28TestRotationPlateauPresenterC1ER23TestRotationPlateauView>:
#include <gui/testrotationplateau_screen/TestRotationPlateauView.hpp>
#include <gui/testrotationplateau_screen/TestRotationPlateauPresenter.hpp>

TestRotationPlateauPresenter::TestRotationPlateauPresenter(TestRotationPlateauView& v)
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b082      	sub	sp, #8
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
 8011e18:	6039      	str	r1, [r7, #0]
    : view(v)
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f7ff f9f1 	bl	8011204 <_ZN8touchgfx9PresenterC1Ev>
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	3304      	adds	r3, #4
 8011e26:	4618      	mov	r0, r3
 8011e28:	f7ff f9fc 	bl	8011224 <_ZN13ModelListenerC1Ev>
 8011e2c:	4a06      	ldr	r2, [pc, #24]	; (8011e48 <_ZN28TestRotationPlateauPresenterC1ER23TestRotationPlateauView+0x38>)
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	601a      	str	r2, [r3, #0]
 8011e32:	4a06      	ldr	r2, [pc, #24]	; (8011e4c <_ZN28TestRotationPlateauPresenterC1ER23TestRotationPlateauView+0x3c>)
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	605a      	str	r2, [r3, #4]
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	683a      	ldr	r2, [r7, #0]
 8011e3c:	60da      	str	r2, [r3, #12]
{

}
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	4618      	mov	r0, r3
 8011e42:	3708      	adds	r7, #8
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}
 8011e48:	08028424 	.word	0x08028424
 8011e4c:	0802843c 	.word	0x0802843c

08011e50 <_ZN28TestRotationPlateauPresenter8activateEv>:

void TestRotationPlateauPresenter::activate()
{
 8011e50:	b480      	push	{r7}
 8011e52:	b083      	sub	sp, #12
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]

}
 8011e58:	bf00      	nop
 8011e5a:	370c      	adds	r7, #12
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e62:	4770      	bx	lr

08011e64 <_ZN28TestRotationPlateauPresenter10deactivateEv>:

void TestRotationPlateauPresenter::deactivate()
{
 8011e64:	b480      	push	{r7}
 8011e66:	b083      	sub	sp, #12
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]

}
 8011e6c:	bf00      	nop
 8011e6e:	370c      	adds	r7, #12
 8011e70:	46bd      	mov	sp, r7
 8011e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e76:	4770      	bx	lr

08011e78 <_ZN23TestRotationPlateauViewD1Ev>:

class TestRotationPlateauView : public TestRotationPlateauViewBase
{
public:
    TestRotationPlateauView();
    virtual ~TestRotationPlateauView() {}
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b082      	sub	sp, #8
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
 8011e80:	4a05      	ldr	r2, [pc, #20]	; (8011e98 <_ZN23TestRotationPlateauViewD1Ev+0x20>)
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	601a      	str	r2, [r3, #0]
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f7fe f8a1 	bl	800ffd0 <_ZN27TestRotationPlateauViewBaseD1Ev>
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	4618      	mov	r0, r3
 8011e92:	3708      	adds	r7, #8
 8011e94:	46bd      	mov	sp, r7
 8011e96:	bd80      	pop	{r7, pc}
 8011e98:	0802844c 	.word	0x0802844c

08011e9c <_ZN23TestRotationPlateauViewD0Ev>:
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b082      	sub	sp, #8
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
 8011ea4:	6878      	ldr	r0, [r7, #4]
 8011ea6:	f7ff ffe7 	bl	8011e78 <_ZN23TestRotationPlateauViewD1Ev>
 8011eaa:	f641 7154 	movw	r1, #8020	; 0x1f54
 8011eae:	6878      	ldr	r0, [r7, #4]
 8011eb0:	f012 fea7 	bl	8024c02 <_ZdlPvj>
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3708      	adds	r7, #8
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}
	...

08011ec0 <_ZN23TestRotationPlateauViewC1Ev>:
#include <gui/testrotationplateau_screen/TestRotationPlateauView.hpp>

TestRotationPlateauView::TestRotationPlateauView()
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b082      	sub	sp, #8
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7fe f91a 	bl	8010104 <_ZN27TestRotationPlateauViewBaseC1Ev>
 8011ed0:	4a03      	ldr	r2, [pc, #12]	; (8011ee0 <_ZN23TestRotationPlateauViewC1Ev+0x20>)
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	601a      	str	r2, [r3, #0]
{

}
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	4618      	mov	r0, r3
 8011eda:	3708      	adds	r7, #8
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd80      	pop	{r7, pc}
 8011ee0:	0802844c 	.word	0x0802844c

08011ee4 <_ZN23TestRotationPlateauView11setupScreenEv>:

void TestRotationPlateauView::setupScreen()
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b082      	sub	sp, #8
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
    TestRotationPlateauViewBase::setupScreen();
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	4618      	mov	r0, r3
 8011ef0:	f7fe fb9e 	bl	8010630 <_ZN27TestRotationPlateauViewBase11setupScreenEv>
}
 8011ef4:	bf00      	nop
 8011ef6:	3708      	adds	r7, #8
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}

08011efc <_ZN23TestRotationPlateauView14tearDownScreenEv>:

void TestRotationPlateauView::tearDownScreen()
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b082      	sub	sp, #8
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
    TestRotationPlateauViewBase::tearDownScreen();
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	4618      	mov	r0, r3
 8011f08:	f7fb f96a 	bl	800d1e0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011f0c:	bf00      	nop
 8011f0e:	3708      	adds	r7, #8
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd80      	pop	{r7, pc}

08011f14 <_ZN17TestUartPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~TestUartPresenter() {};
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b082      	sub	sp, #8
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
 8011f1c:	4a09      	ldr	r2, [pc, #36]	; (8011f44 <_ZN17TestUartPresenterD1Ev+0x30>)
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	601a      	str	r2, [r3, #0]
 8011f22:	4a09      	ldr	r2, [pc, #36]	; (8011f48 <_ZN17TestUartPresenterD1Ev+0x34>)
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	605a      	str	r2, [r3, #4]
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	3304      	adds	r3, #4
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	f7ff f98d 	bl	801124c <_ZN13ModelListenerD1Ev>
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	4618      	mov	r0, r3
 8011f36:	f7ff f945 	bl	80111c4 <_ZN8touchgfx9PresenterD1Ev>
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	3708      	adds	r7, #8
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bd80      	pop	{r7, pc}
 8011f44:	0802848c 	.word	0x0802848c
 8011f48:	080284a4 	.word	0x080284a4

08011f4c <_ZThn4_N17TestUartPresenterD1Ev>:
 8011f4c:	f1a0 0004 	sub.w	r0, r0, #4
 8011f50:	e7e0      	b.n	8011f14 <_ZN17TestUartPresenterD1Ev>
 8011f52:	bf00      	nop

08011f54 <_ZN17TestUartPresenterD0Ev>:
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b082      	sub	sp, #8
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
 8011f5c:	6878      	ldr	r0, [r7, #4]
 8011f5e:	f7ff ffd9 	bl	8011f14 <_ZN17TestUartPresenterD1Ev>
 8011f62:	2110      	movs	r1, #16
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f012 fe4c 	bl	8024c02 <_ZdlPvj>
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	3708      	adds	r7, #8
 8011f70:	46bd      	mov	sp, r7
 8011f72:	bd80      	pop	{r7, pc}

08011f74 <_ZThn4_N17TestUartPresenterD0Ev>:
 8011f74:	f1a0 0004 	sub.w	r0, r0, #4
 8011f78:	e7ec      	b.n	8011f54 <_ZN17TestUartPresenterD0Ev>
	...

08011f7c <_ZN17TestUartPresenterC1ER12TestUartView>:
#include <gui/testuart_screen/TestUartView.hpp>
#include <gui/testuart_screen/TestUartPresenter.hpp>

TestUartPresenter::TestUartPresenter(TestUartView& v)
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b082      	sub	sp, #8
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
 8011f84:	6039      	str	r1, [r7, #0]
    : view(v)
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f7ff f93b 	bl	8011204 <_ZN8touchgfx9PresenterC1Ev>
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	3304      	adds	r3, #4
 8011f92:	4618      	mov	r0, r3
 8011f94:	f7ff f946 	bl	8011224 <_ZN13ModelListenerC1Ev>
 8011f98:	4a06      	ldr	r2, [pc, #24]	; (8011fb4 <_ZN17TestUartPresenterC1ER12TestUartView+0x38>)
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	601a      	str	r2, [r3, #0]
 8011f9e:	4a06      	ldr	r2, [pc, #24]	; (8011fb8 <_ZN17TestUartPresenterC1ER12TestUartView+0x3c>)
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	605a      	str	r2, [r3, #4]
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	683a      	ldr	r2, [r7, #0]
 8011fa8:	60da      	str	r2, [r3, #12]
{

}
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	4618      	mov	r0, r3
 8011fae:	3708      	adds	r7, #8
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}
 8011fb4:	0802848c 	.word	0x0802848c
 8011fb8:	080284a4 	.word	0x080284a4

08011fbc <_ZN17TestUartPresenter8activateEv>:

void TestUartPresenter::activate()
{
 8011fbc:	b480      	push	{r7}
 8011fbe:	b083      	sub	sp, #12
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]

}
 8011fc4:	bf00      	nop
 8011fc6:	370c      	adds	r7, #12
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fce:	4770      	bx	lr

08011fd0 <_ZN17TestUartPresenter10deactivateEv>:

void TestUartPresenter::deactivate()
{
 8011fd0:	b480      	push	{r7}
 8011fd2:	b083      	sub	sp, #12
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]

}
 8011fd8:	bf00      	nop
 8011fda:	370c      	adds	r7, #12
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe2:	4770      	bx	lr

08011fe4 <_ZN12TestUartViewD1Ev>:

class TestUartView : public TestUartViewBase
{
public:
    TestUartView();
    virtual ~TestUartView() {}
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b082      	sub	sp, #8
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
 8011fec:	4a05      	ldr	r2, [pc, #20]	; (8012004 <_ZN12TestUartViewD1Ev+0x20>)
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	601a      	str	r2, [r3, #0]
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	f7fe fce5 	bl	80109c4 <_ZN16TestUartViewBaseD1Ev>
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	3708      	adds	r7, #8
 8012000:	46bd      	mov	sp, r7
 8012002:	bd80      	pop	{r7, pc}
 8012004:	080284b4 	.word	0x080284b4

08012008 <_ZN12TestUartViewD0Ev>:
 8012008:	b580      	push	{r7, lr}
 801200a:	b082      	sub	sp, #8
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f7ff ffe7 	bl	8011fe4 <_ZN12TestUartViewD1Ev>
 8012016:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 801201a:	6878      	ldr	r0, [r7, #4]
 801201c:	f012 fdf1 	bl	8024c02 <_ZdlPvj>
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	4618      	mov	r0, r3
 8012024:	3708      	adds	r7, #8
 8012026:	46bd      	mov	sp, r7
 8012028:	bd80      	pop	{r7, pc}
	...

0801202c <_ZN12TestUartViewC1Ev>:
#include <gui/testuart_screen/TestUartView.hpp>

TestUartView::TestUartView()
 801202c:	b580      	push	{r7, lr}
 801202e:	b082      	sub	sp, #8
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	4618      	mov	r0, r3
 8012038:	f7fe fd26 	bl	8010a88 <_ZN16TestUartViewBaseC1Ev>
 801203c:	4a03      	ldr	r2, [pc, #12]	; (801204c <_ZN12TestUartViewC1Ev+0x20>)
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	601a      	str	r2, [r3, #0]
{

}
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	4618      	mov	r0, r3
 8012046:	3708      	adds	r7, #8
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}
 801204c:	080284b4 	.word	0x080284b4

08012050 <_ZN12TestUartView11setupScreenEv>:

void TestUartView::setupScreen()
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b082      	sub	sp, #8
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
    TestUartViewBase::setupScreen();
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	4618      	mov	r0, r3
 801205c:	f7fe fe5e 	bl	8010d1c <_ZN16TestUartViewBase11setupScreenEv>
}
 8012060:	bf00      	nop
 8012062:	3708      	adds	r7, #8
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}

08012068 <_ZN12TestUartView14tearDownScreenEv>:

void TestUartView::tearDownScreen()
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b082      	sub	sp, #8
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
    TestUartViewBase::tearDownScreen();
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	4618      	mov	r0, r3
 8012074:	f7fb f8b4 	bl	800d1e0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8012078:	bf00      	nop
 801207a:	3708      	adds	r7, #8
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}

08012080 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 8012080:	b480      	push	{r7}
 8012082:	b083      	sub	sp, #12
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
    {
 8012088:	4a04      	ldr	r2, [pc, #16]	; (801209c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	601a      	str	r2, [r3, #0]
    }
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	4618      	mov	r0, r3
 8012092:	370c      	adds	r7, #12
 8012094:	46bd      	mov	sp, r7
 8012096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209a:	4770      	bx	lr
 801209c:	08028508 	.word	0x08028508

080120a0 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b082      	sub	sp, #8
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
    }
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f7ff ffe9 	bl	8012080 <_ZN8touchgfx15TouchControllerD1Ev>
 80120ae:	2104      	movs	r1, #4
 80120b0:	6878      	ldr	r0, [r7, #4]
 80120b2:	f012 fda6 	bl	8024c02 <_ZdlPvj>
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	4618      	mov	r0, r3
 80120ba:	3708      	adds	r7, #8
 80120bc:	46bd      	mov	sp, r7
 80120be:	bd80      	pop	{r7, pc}

080120c0 <_ZN20STM32TouchController4initEv>:

static TS_DrvTypeDef* tsDriver;
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b082      	sub	sp, #8
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80120c8:	4b05      	ldr	r3, [pc, #20]	; (80120e0 <_ZN20STM32TouchController4initEv+0x20>)
 80120ca:	4a06      	ldr	r2, [pc, #24]	; (80120e4 <_ZN20STM32TouchController4initEv+0x24>)
 80120cc:	601a      	str	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 80120ce:	4b04      	ldr	r3, [pc, #16]	; (80120e0 <_ZN20STM32TouchController4initEv+0x20>)
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	68db      	ldr	r3, [r3, #12]
 80120d4:	2070      	movs	r0, #112	; 0x70
 80120d6:	4798      	blx	r3
}
 80120d8:	bf00      	nop
 80120da:	3708      	adds	r7, #8
 80120dc:	46bd      	mov	sp, r7
 80120de:	bd80      	pop	{r7, pc}
 80120e0:	20008390 	.word	0x20008390
 80120e4:	20000008 	.word	0x20000008

080120e8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b084      	sub	sp, #16
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	60f8      	str	r0, [r7, #12]
 80120f0:	60b9      	str	r1, [r7, #8]
 80120f2:	607a      	str	r2, [r7, #4]
    /* Checking if the screen has been touched */

    if (tsDriver)
 80120f4:	4b0f      	ldr	r3, [pc, #60]	; (8012134 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d015      	beq.n	8012128 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
    {
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 80120fc:	4b0d      	ldr	r3, [pc, #52]	; (8012134 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	691b      	ldr	r3, [r3, #16]
 8012102:	2070      	movs	r0, #112	; 0x70
 8012104:	4798      	blx	r3
 8012106:	4603      	mov	r3, r0
 8012108:	2b00      	cmp	r3, #0
 801210a:	bf14      	ite	ne
 801210c:	2301      	movne	r3, #1
 801210e:	2300      	moveq	r3, #0
 8012110:	b2db      	uxtb	r3, r3
 8012112:	2b00      	cmp	r3, #0
 8012114:	d008      	beq.n	8012128 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
        {
            /* Get each touch coordinates */
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 8012116:	4b07      	ldr	r3, [pc, #28]	; (8012134 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	695b      	ldr	r3, [r3, #20]
 801211c:	68ba      	ldr	r2, [r7, #8]
 801211e:	6879      	ldr	r1, [r7, #4]
 8012120:	2070      	movs	r0, #112	; 0x70
 8012122:	4798      	blx	r3
            return true;
 8012124:	2301      	movs	r3, #1
 8012126:	e000      	b.n	801212a <_ZN20STM32TouchController11sampleTouchERlS0_+0x42>
        }
    }
    return false;
 8012128:	2300      	movs	r3, #0
}
 801212a:	4618      	mov	r0, r3
 801212c:	3710      	adds	r7, #16
 801212e:	46bd      	mov	sp, r7
 8012130:	bd80      	pop	{r7, pc}
 8012132:	bf00      	nop
 8012134:	20008390 	.word	0x20008390

08012138 <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef* i2c_handler, uint8_t Addr)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b082      	sub	sp, #8
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
 8012140:	460b      	mov	r3, r1
 8012142:	70fb      	strb	r3, [r7, #3]
    /* De-initialize the I2C communication bus */
    HAL_I2C_DeInit(i2c_handler);
 8012144:	6878      	ldr	r0, [r7, #4]
 8012146:	f7f1 fcf1 	bl	8003b2c <HAL_I2C_DeInit>

    /* Re-Initialize the I2C communication bus */
    //I2Cx_Init(i2c_handler);
}
 801214a:	bf00      	nop
 801214c:	3708      	adds	r7, #8
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}

08012152 <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t* Buffer,
                                           uint16_t Length)
{
 8012152:	b580      	push	{r7, lr}
 8012154:	b08a      	sub	sp, #40	; 0x28
 8012156:	af04      	add	r7, sp, #16
 8012158:	60f8      	str	r0, [r7, #12]
 801215a:	4608      	mov	r0, r1
 801215c:	4611      	mov	r1, r2
 801215e:	461a      	mov	r2, r3
 8012160:	4603      	mov	r3, r0
 8012162:	72fb      	strb	r3, [r7, #11]
 8012164:	460b      	mov	r3, r1
 8012166:	813b      	strh	r3, [r7, #8]
 8012168:	4613      	mov	r3, r2
 801216a:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_OK;
 801216c:	2300      	movs	r3, #0
 801216e:	75fb      	strb	r3, [r7, #23]

    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8012170:	7afb      	ldrb	r3, [r7, #11]
 8012172:	b299      	uxth	r1, r3
 8012174:	88f8      	ldrh	r0, [r7, #6]
 8012176:	893a      	ldrh	r2, [r7, #8]
 8012178:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801217c:	9302      	str	r3, [sp, #8]
 801217e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012180:	9301      	str	r3, [sp, #4]
 8012182:	6a3b      	ldr	r3, [r7, #32]
 8012184:	9300      	str	r3, [sp, #0]
 8012186:	4603      	mov	r3, r0
 8012188:	68f8      	ldr	r0, [r7, #12]
 801218a:	f7f1 fe13 	bl	8003db4 <HAL_I2C_Mem_Read>
 801218e:	4603      	mov	r3, r0
 8012190:	75fb      	strb	r3, [r7, #23]

    /* Check the communication status */
    if (status != HAL_OK)
 8012192:	7dfb      	ldrb	r3, [r7, #23]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d004      	beq.n	80121a2 <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht+0x50>
    {
        /* I2C error occurred */
        I2Cx_Error(i2c_handler, Addr);
 8012198:	7afb      	ldrb	r3, [r7, #11]
 801219a:	4619      	mov	r1, r3
 801219c:	68f8      	ldr	r0, [r7, #12]
 801219e:	f7ff ffcb 	bl	8012138 <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>
    }
    return status;
 80121a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80121a4:	4618      	mov	r0, r3
 80121a6:	3718      	adds	r7, #24
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bd80      	pop	{r7, pc}

080121ac <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t* Buffer,
                                            uint16_t Length)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b08a      	sub	sp, #40	; 0x28
 80121b0:	af04      	add	r7, sp, #16
 80121b2:	60f8      	str	r0, [r7, #12]
 80121b4:	4608      	mov	r0, r1
 80121b6:	4611      	mov	r1, r2
 80121b8:	461a      	mov	r2, r3
 80121ba:	4603      	mov	r3, r0
 80121bc:	72fb      	strb	r3, [r7, #11]
 80121be:	460b      	mov	r3, r1
 80121c0:	813b      	strh	r3, [r7, #8]
 80121c2:	4613      	mov	r3, r2
 80121c4:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_OK;
 80121c6:	2300      	movs	r3, #0
 80121c8:	75fb      	strb	r3, [r7, #23]

    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80121ca:	7afb      	ldrb	r3, [r7, #11]
 80121cc:	b299      	uxth	r1, r3
 80121ce:	88f8      	ldrh	r0, [r7, #6]
 80121d0:	893a      	ldrh	r2, [r7, #8]
 80121d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80121d6:	9302      	str	r3, [sp, #8]
 80121d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80121da:	9301      	str	r3, [sp, #4]
 80121dc:	6a3b      	ldr	r3, [r7, #32]
 80121de:	9300      	str	r3, [sp, #0]
 80121e0:	4603      	mov	r3, r0
 80121e2:	68f8      	ldr	r0, [r7, #12]
 80121e4:	f7f1 fcd2 	bl	8003b8c <HAL_I2C_Mem_Write>
 80121e8:	4603      	mov	r3, r0
 80121ea:	75fb      	strb	r3, [r7, #23]

    /* Check the communication status */
    if (status != HAL_OK)
 80121ec:	7dfb      	ldrb	r3, [r7, #23]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d004      	beq.n	80121fc <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht+0x50>
    {
        /* Re-Initiaize the I2C Bus */
        I2Cx_Error(i2c_handler, Addr);
 80121f2:	7afb      	ldrb	r3, [r7, #11]
 80121f4:	4619      	mov	r1, r3
 80121f6:	68f8      	ldr	r0, [r7, #12]
 80121f8:	f7ff ff9e 	bl	8012138 <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>
    }
    return status;
 80121fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80121fe:	4618      	mov	r0, r3
 8012200:	3718      	adds	r7, #24
 8012202:	46bd      	mov	sp, r7
 8012204:	bd80      	pop	{r7, pc}
	...

08012208 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b084      	sub	sp, #16
 801220c:	af02      	add	r7, sp, #8
 801220e:	4603      	mov	r3, r0
 8012210:	71fb      	strb	r3, [r7, #7]
 8012212:	460b      	mov	r3, r1
 8012214:	71bb      	strb	r3, [r7, #6]
 8012216:	4613      	mov	r3, r2
 8012218:	717b      	strb	r3, [r7, #5]
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
 801221a:	79bb      	ldrb	r3, [r7, #6]
 801221c:	b29a      	uxth	r2, r3
 801221e:	79f9      	ldrb	r1, [r7, #7]
 8012220:	2301      	movs	r3, #1
 8012222:	9301      	str	r3, [sp, #4]
 8012224:	1d7b      	adds	r3, r7, #5
 8012226:	9300      	str	r3, [sp, #0]
 8012228:	2301      	movs	r3, #1
 801222a:	4803      	ldr	r0, [pc, #12]	; (8012238 <TS_IO_Write+0x30>)
 801222c:	f7ff ffbe 	bl	80121ac <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht>
}
 8012230:	bf00      	nop
 8012232:	3708      	adds	r7, #8
 8012234:	46bd      	mov	sp, r7
 8012236:	bd80      	pop	{r7, pc}
 8012238:	2000b590 	.word	0x2000b590

0801223c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b086      	sub	sp, #24
 8012240:	af02      	add	r7, sp, #8
 8012242:	4603      	mov	r3, r0
 8012244:	460a      	mov	r2, r1
 8012246:	71fb      	strb	r3, [r7, #7]
 8012248:	4613      	mov	r3, r2
 801224a:	71bb      	strb	r3, [r7, #6]
    uint8_t read_value = 0;
 801224c:	2300      	movs	r3, #0
 801224e:	73fb      	strb	r3, [r7, #15]

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8012250:	79bb      	ldrb	r3, [r7, #6]
 8012252:	b29a      	uxth	r2, r3
 8012254:	79f9      	ldrb	r1, [r7, #7]
 8012256:	2301      	movs	r3, #1
 8012258:	9301      	str	r3, [sp, #4]
 801225a:	f107 030f 	add.w	r3, r7, #15
 801225e:	9300      	str	r3, [sp, #0]
 8012260:	2301      	movs	r3, #1
 8012262:	4804      	ldr	r0, [pc, #16]	; (8012274 <TS_IO_Read+0x38>)
 8012264:	f7ff ff75 	bl	8012152 <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht>

    return read_value;
 8012268:	7bfb      	ldrb	r3, [r7, #15]
}
 801226a:	4618      	mov	r0, r3
 801226c:	3710      	adds	r7, #16
 801226e:	46bd      	mov	sp, r7
 8012270:	bd80      	pop	{r7, pc}
 8012272:	bf00      	nop
 8012274:	2000b590 	.word	0x2000b590

08012278 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8012278:	b580      	push	{r7, lr}
 801227a:	b082      	sub	sp, #8
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
 8012280:	4a05      	ldr	r2, [pc, #20]	; (8012298 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	601a      	str	r2, [r3, #0]
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	4618      	mov	r0, r3
 801228a:	f7ff fef9 	bl	8012080 <_ZN8touchgfx15TouchControllerD1Ev>
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	4618      	mov	r0, r3
 8012292:	3708      	adds	r7, #8
 8012294:	46bd      	mov	sp, r7
 8012296:	bd80      	pop	{r7, pc}
 8012298:	080284f0 	.word	0x080284f0

0801229c <_ZN20STM32TouchControllerD0Ev>:
 801229c:	b580      	push	{r7, lr}
 801229e:	b082      	sub	sp, #8
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
 80122a4:	6878      	ldr	r0, [r7, #4]
 80122a6:	f7ff ffe7 	bl	8012278 <_ZN20STM32TouchControllerD1Ev>
 80122aa:	2104      	movs	r1, #4
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f012 fca8 	bl	8024c02 <_ZdlPvj>
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	4618      	mov	r0, r3
 80122b6:	3708      	adds	r7, #8
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bd80      	pop	{r7, pc}

080122bc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80122bc:	b480      	push	{r7}
 80122be:	b083      	sub	sp, #12
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	4603      	mov	r3, r0
 80122c4:	71fb      	strb	r3, [r7, #7]

}
 80122c6:	bf00      	nop
 80122c8:	370c      	adds	r7, #12
 80122ca:	46bd      	mov	sp, r7
 80122cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d0:	4770      	bx	lr

080122d2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80122d2:	b480      	push	{r7}
 80122d4:	b083      	sub	sp, #12
 80122d6:	af00      	add	r7, sp, #0
 80122d8:	4603      	mov	r3, r0
 80122da:	71fb      	strb	r3, [r7, #7]

}
 80122dc:	bf00      	nop
 80122de:	370c      	adds	r7, #12
 80122e0:	46bd      	mov	sp, r7
 80122e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e6:	4770      	bx	lr

080122e8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80122e8:	b480      	push	{r7}
 80122ea:	b083      	sub	sp, #12
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	4603      	mov	r3, r0
 80122f0:	71fb      	strb	r3, [r7, #7]

}
 80122f2:	bf00      	nop
 80122f4:	370c      	adds	r7, #12
 80122f6:	46bd      	mov	sp, r7
 80122f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fc:	4770      	bx	lr
	...

08012300 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8012300:	b480      	push	{r7}
 8012302:	b083      	sub	sp, #12
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
    {
 8012308:	4a04      	ldr	r2, [pc, #16]	; (801231c <_ZN8touchgfx3HALD1Ev+0x1c>)
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	601a      	str	r2, [r3, #0]
    }
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	4618      	mov	r0, r3
 8012312:	370c      	adds	r7, #12
 8012314:	46bd      	mov	sp, r7
 8012316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231a:	4770      	bx	lr
 801231c:	080295c0 	.word	0x080295c0

08012320 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8012320:	b580      	push	{r7, lr}
 8012322:	b082      	sub	sp, #8
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
    }
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f7ff ffe9 	bl	8012300 <_ZN8touchgfx3HALD1Ev>
 801232e:	2178      	movs	r1, #120	; 0x78
 8012330:	6878      	ldr	r0, [r7, #4]
 8012332:	f012 fc66 	bl	8024c02 <_ZdlPvj>
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	4618      	mov	r0, r3
 801233a:	3708      	adds	r7, #8
 801233c:	46bd      	mov	sp, r7
 801233e:	bd80      	pop	{r7, pc}

08012340 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8012340:	b480      	push	{r7}
 8012342:	b083      	sub	sp, #12
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
 8012348:	460b      	mov	r3, r1
 801234a:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	78fa      	ldrb	r2, [r7, #3]
 8012350:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2201      	movs	r2, #1
 8012358:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 801235c:	bf00      	nop
 801235e:	370c      	adds	r7, #12
 8012360:	46bd      	mov	sp, r7
 8012362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012366:	4770      	bx	lr

08012368 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 8012368:	b580      	push	{r7, lr}
 801236a:	b082      	sub	sp, #8
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	685a      	ldr	r2, [r3, #4]
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	685b      	ldr	r3, [r3, #4]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	4610      	mov	r0, r2
 801237e:	4798      	blx	r3
 8012380:	4603      	mov	r3, r0
    }
 8012382:	4618      	mov	r0, r3
 8012384:	3708      	adds	r7, #8
 8012386:	46bd      	mov	sp, r7
 8012388:	bd80      	pop	{r7, pc}

0801238a <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 801238a:	b580      	push	{r7, lr}
 801238c:	b082      	sub	sp, #8
 801238e:	af00      	add	r7, sp, #0
 8012390:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8012392:	6878      	ldr	r0, [r7, #4]
 8012394:	f003 fe38 	bl	8016008 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	3390      	adds	r3, #144	; 0x90
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	6878      	ldr	r0, [r7, #4]
 80123a2:	4798      	blx	r3
    }
 80123a4:	bf00      	nop
 80123a6:	3708      	adds	r7, #8
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bd80      	pop	{r7, pc}

080123ac <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80123ac:	b480      	push	{r7}
 80123ae:	b083      	sub	sp, #12
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
 80123b4:	6039      	str	r1, [r7, #0]
    {
        return false;
 80123b6:	2300      	movs	r3, #0
    }
 80123b8:	4618      	mov	r0, r3
 80123ba:	370c      	adds	r7, #12
 80123bc:	46bd      	mov	sp, r7
 80123be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c2:	4770      	bx	lr

080123c4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 80123c4:	b590      	push	{r4, r7, lr}
 80123c6:	b08b      	sub	sp, #44	; 0x2c
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	60f8      	str	r0, [r7, #12]
 80123cc:	60b9      	str	r1, [r7, #8]
 80123ce:	4611      	mov	r1, r2
 80123d0:	461a      	mov	r2, r3
 80123d2:	460b      	mov	r3, r1
 80123d4:	80fb      	strh	r3, [r7, #6]
 80123d6:	4613      	mov	r3, r2
 80123d8:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 80123da:	f7f7 fe2b 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 80123de:	4602      	mov	r2, r0
 80123e0:	6813      	ldr	r3, [r2, #0]
 80123e2:	3328      	adds	r3, #40	; 0x28
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	4610      	mov	r0, r2
 80123e8:	4798      	blx	r3
 80123ea:	4603      	mov	r3, r0
 80123ec:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 80123ee:	8b7b      	ldrh	r3, [r7, #26]
 80123f0:	4a3d      	ldr	r2, [pc, #244]	; (80124e8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 80123f2:	8812      	ldrh	r2, [r2, #0]
 80123f4:	fb02 f303 	mul.w	r3, r2, r3
 80123f8:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 80123fe:	2300      	movs	r3, #0
 8012400:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8012402:	2300      	movs	r3, #0
 8012404:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8012406:	797b      	ldrb	r3, [r7, #5]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d005      	beq.n	8012418 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 801240c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801240e:	697b      	ldr	r3, [r7, #20]
 8012410:	4413      	add	r3, r2
 8012412:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8012414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012416:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 8012418:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801241c:	2b00      	cmp	r3, #0
 801241e:	d005      	beq.n	801242c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8012420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012422:	697b      	ldr	r3, [r7, #20]
 8012424:	4413      	add	r3, r2
 8012426:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8012428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801242a:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 801242c:	88fb      	ldrh	r3, [r7, #6]
 801242e:	3b01      	subs	r3, #1
 8012430:	2b1f      	cmp	r3, #31
 8012432:	d84d      	bhi.n	80124d0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8012434:	a201      	add	r2, pc, #4	; (adr r2, 801243c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8012436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801243a:	bf00      	nop
 801243c:	080124bd 	.word	0x080124bd
 8012440:	080124bd 	.word	0x080124bd
 8012444:	080124d1 	.word	0x080124d1
 8012448:	080124bd 	.word	0x080124bd
 801244c:	080124d1 	.word	0x080124d1
 8012450:	080124d1 	.word	0x080124d1
 8012454:	080124d1 	.word	0x080124d1
 8012458:	080124bd 	.word	0x080124bd
 801245c:	080124d1 	.word	0x080124d1
 8012460:	080124d1 	.word	0x080124d1
 8012464:	080124d1 	.word	0x080124d1
 8012468:	080124d1 	.word	0x080124d1
 801246c:	080124d1 	.word	0x080124d1
 8012470:	080124d1 	.word	0x080124d1
 8012474:	080124d1 	.word	0x080124d1
 8012478:	080124bd 	.word	0x080124bd
 801247c:	080124d1 	.word	0x080124d1
 8012480:	080124d1 	.word	0x080124d1
 8012484:	080124d1 	.word	0x080124d1
 8012488:	080124d1 	.word	0x080124d1
 801248c:	080124d1 	.word	0x080124d1
 8012490:	080124d1 	.word	0x080124d1
 8012494:	080124d1 	.word	0x080124d1
 8012498:	080124bd 	.word	0x080124bd
 801249c:	080124d1 	.word	0x080124d1
 80124a0:	080124d1 	.word	0x080124d1
 80124a4:	080124d1 	.word	0x080124d1
 80124a8:	080124d1 	.word	0x080124d1
 80124ac:	080124d1 	.word	0x080124d1
 80124b0:	080124d1 	.word	0x080124d1
 80124b4:	080124d1 	.word	0x080124d1
 80124b8:	080124bd 	.word	0x080124bd
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	3374      	adds	r3, #116	; 0x74
 80124c2:	681c      	ldr	r4, [r3, #0]
 80124c4:	69fb      	ldr	r3, [r7, #28]
 80124c6:	6a3a      	ldr	r2, [r7, #32]
 80124c8:	68b9      	ldr	r1, [r7, #8]
 80124ca:	68f8      	ldr	r0, [r7, #12]
 80124cc:	47a0      	blx	r4
            break;
 80124ce:	e006      	b.n	80124de <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 80124d0:	4b06      	ldr	r3, [pc, #24]	; (80124ec <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 80124d2:	4a07      	ldr	r2, [pc, #28]	; (80124f0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 80124d4:	f240 3125 	movw	r1, #805	; 0x325
 80124d8:	4806      	ldr	r0, [pc, #24]	; (80124f4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 80124da:	f012 fbbd 	bl	8024c58 <__assert_func>
            break;
        }
    }
 80124de:	bf00      	nop
 80124e0:	372c      	adds	r7, #44	; 0x2c
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd90      	pop	{r4, r7, pc}
 80124e6:	bf00      	nop
 80124e8:	2000b2d0 	.word	0x2000b2d0
 80124ec:	0802689c 	.word	0x0802689c
 80124f0:	0802861c 	.word	0x0802861c
 80124f4:	080268bc 	.word	0x080268bc

080124f8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b084      	sub	sp, #16
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	60f8      	str	r0, [r7, #12]
 8012500:	60b9      	str	r1, [r7, #8]
 8012502:	607a      	str	r2, [r7, #4]
 8012504:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8012506:	68bb      	ldr	r3, [r7, #8]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d106      	bne.n	801251a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 801250c:	4b11      	ldr	r3, [pc, #68]	; (8012554 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801250e:	4a12      	ldr	r2, [pc, #72]	; (8012558 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8012510:	f240 3137 	movw	r1, #823	; 0x337
 8012514:	4811      	ldr	r0, [pc, #68]	; (801255c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8012516:	f012 fb9f 	bl	8024c58 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	68ba      	ldr	r2, [r7, #8]
 801251e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	687a      	ldr	r2, [r7, #4]
 8012524:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	683a      	ldr	r2, [r7, #0]
 801252a:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	2b00      	cmp	r3, #0
 8012530:	bf14      	ite	ne
 8012532:	2301      	movne	r3, #1
 8012534:	2300      	moveq	r3, #0
 8012536:	b2da      	uxtb	r2, r3
 8012538:	4b09      	ldr	r3, [pc, #36]	; (8012560 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 801253a:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	2b00      	cmp	r3, #0
 8012540:	bf14      	ite	ne
 8012542:	2301      	movne	r3, #1
 8012544:	2300      	moveq	r3, #0
 8012546:	b2da      	uxtb	r2, r3
 8012548:	4b06      	ldr	r3, [pc, #24]	; (8012564 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 801254a:	701a      	strb	r2, [r3, #0]
    }
 801254c:	bf00      	nop
 801254e:	3710      	adds	r7, #16
 8012550:	46bd      	mov	sp, r7
 8012552:	bd80      	pop	{r7, pc}
 8012554:	08026900 	.word	0x08026900
 8012558:	080285cc 	.word	0x080285cc
 801255c:	080268bc 	.word	0x080268bc
 8012560:	2000b2d2 	.word	0x2000b2d2
 8012564:	2000b2d3 	.word	0x2000b2d3

08012568 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8012568:	b580      	push	{r7, lr}
 801256a:	b082      	sub	sp, #8
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	460b      	mov	r3, r1
 8012572:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012578:	2b00      	cmp	r3, #0
 801257a:	d004      	beq.n	8012586 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012580:	887a      	ldrh	r2, [r7, #2]
 8012582:	4610      	mov	r0, r2
 8012584:	4798      	blx	r3
        }
    }
 8012586:	bf00      	nop
 8012588:	3708      	adds	r7, #8
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}

0801258e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *        not used, then the getTFTCurrentLine function is never called and can be
     *        disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 801258e:	b480      	push	{r7}
 8012590:	b083      	sub	sp, #12
 8012592:	af00      	add	r7, sp, #0
 8012594:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8012596:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 801259a:	4618      	mov	r0, r3
 801259c:	370c      	adds	r7, #12
 801259e:	46bd      	mov	sp, r7
 80125a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a4:	4770      	bx	lr

080125a6 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80125a6:	b580      	push	{r7, lr}
 80125a8:	b082      	sub	sp, #8
 80125aa:	af00      	add	r7, sp, #0
 80125ac:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	685a      	ldr	r2, [r3, #4]
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	685b      	ldr	r3, [r3, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	3318      	adds	r3, #24
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	4610      	mov	r0, r2
 80125be:	4798      	blx	r3
 80125c0:	4603      	mov	r3, r0
    }
 80125c2:	4618      	mov	r0, r3
 80125c4:	3708      	adds	r7, #8
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bd80      	pop	{r7, pc}
	...

080125cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 80125cc:	b480      	push	{r7}
 80125ce:	b083      	sub	sp, #12
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80125e0:	429a      	cmp	r2, r3
 80125e2:	d017      	beq.n	8012614 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 80125e4:	4b1a      	ldr	r3, [pc, #104]	; (8012650 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80125e6:	781b      	ldrb	r3, [r3, #0]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d12a      	bne.n	8012642 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80125ec:	4b19      	ldr	r3, [pc, #100]	; (8012654 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80125ee:	881a      	ldrh	r2, [r3, #0]
 80125f0:	4b19      	ldr	r3, [pc, #100]	; (8012658 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80125f2:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80125f4:	4b19      	ldr	r3, [pc, #100]	; (801265c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80125f6:	881a      	ldrh	r2, [r3, #0]
 80125f8:	4b19      	ldr	r3, [pc, #100]	; (8012660 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80125fa:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 80125fc:	4b16      	ldr	r3, [pc, #88]	; (8012658 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80125fe:	881a      	ldrh	r2, [r3, #0]
 8012600:	4b16      	ldr	r3, [pc, #88]	; (801265c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8012602:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8012604:	4b16      	ldr	r3, [pc, #88]	; (8012660 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8012606:	881a      	ldrh	r2, [r3, #0]
 8012608:	4b12      	ldr	r3, [pc, #72]	; (8012654 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801260a:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 801260c:	4b10      	ldr	r3, [pc, #64]	; (8012650 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801260e:	2201      	movs	r2, #1
 8012610:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8012612:	e016      	b.n	8012642 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8012614:	4b0e      	ldr	r3, [pc, #56]	; (8012650 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8012616:	781b      	ldrb	r3, [r3, #0]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d012      	beq.n	8012642 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 801261c:	4b0f      	ldr	r3, [pc, #60]	; (801265c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801261e:	881a      	ldrh	r2, [r3, #0]
 8012620:	4b0d      	ldr	r3, [pc, #52]	; (8012658 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8012622:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8012624:	4b0b      	ldr	r3, [pc, #44]	; (8012654 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8012626:	881a      	ldrh	r2, [r3, #0]
 8012628:	4b0d      	ldr	r3, [pc, #52]	; (8012660 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801262a:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 801262c:	4b0c      	ldr	r3, [pc, #48]	; (8012660 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801262e:	881a      	ldrh	r2, [r3, #0]
 8012630:	4b0a      	ldr	r3, [pc, #40]	; (801265c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8012632:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8012634:	4b08      	ldr	r3, [pc, #32]	; (8012658 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8012636:	881a      	ldrh	r2, [r3, #0]
 8012638:	4b06      	ldr	r3, [pc, #24]	; (8012654 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801263a:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 801263c:	4b04      	ldr	r3, [pc, #16]	; (8012650 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801263e:	2200      	movs	r2, #0
 8012640:	701a      	strb	r2, [r3, #0]
    }
 8012642:	bf00      	nop
 8012644:	370c      	adds	r7, #12
 8012646:	46bd      	mov	sp, r7
 8012648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264c:	4770      	bx	lr
 801264e:	bf00      	nop
 8012650:	2000b2cc 	.word	0x2000b2cc
 8012654:	2000b2c8 	.word	0x2000b2c8
 8012658:	2000b2ce 	.word	0x2000b2ce
 801265c:	2000b2ca 	.word	0x2000b2ca
 8012660:	2000b2d0 	.word	0x2000b2d0

08012664 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8012664:	b580      	push	{r7, lr}
 8012666:	b082      	sub	sp, #8
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	4618      	mov	r0, r3
 8012670:	f002 ff4d 	bl	801550e <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8012674:	bf00      	nop
 8012676:	3708      	adds	r7, #8
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}

0801267c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 801267c:	b580      	push	{r7, lr}
 801267e:	b082      	sub	sp, #8
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
 8012684:	4a05      	ldr	r2, [pc, #20]	; (801269c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	601a      	str	r2, [r3, #0]
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	4618      	mov	r0, r3
 801268e:	f7ff fe37 	bl	8012300 <_ZN8touchgfx3HALD1Ev>
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	4618      	mov	r0, r3
 8012696:	3708      	adds	r7, #8
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}
 801269c:	080287f4 	.word	0x080287f4

080126a0 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b082      	sub	sp, #8
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
 80126a8:	6878      	ldr	r0, [r7, #4]
 80126aa:	f7ff ffe7 	bl	801267c <_ZN20TouchGFXGeneratedHALD1Ev>
 80126ae:	2178      	movs	r1, #120	; 0x78
 80126b0:	6878      	ldr	r0, [r7, #4]
 80126b2:	f012 faa6 	bl	8024c02 <_ZdlPvj>
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	4618      	mov	r0, r3
 80126ba:	3708      	adds	r7, #8
 80126bc:	46bd      	mov	sp, r7
 80126be:	bd80      	pop	{r7, pc}

080126c0 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b082      	sub	sp, #8
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	4618      	mov	r0, r3
 80126cc:	f7ff ffca 	bl	8012664 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80126d0:	bf00      	nop
 80126d2:	3708      	adds	r7, #8
 80126d4:	46bd      	mov	sp, r7
 80126d6:	bd80      	pop	{r7, pc}

080126d8 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	b082      	sub	sp, #8
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	4618      	mov	r0, r3
 80126e4:	f001 faba 	bl	8013c5c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80126e8:	bf00      	nop
 80126ea:	3708      	adds	r7, #8
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}

080126f0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b082      	sub	sp, #8
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	4618      	mov	r0, r3
 80126fc:	f001 fb30 	bl	8013d60 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8012700:	4603      	mov	r3, r0
}
 8012702:	4618      	mov	r0, r3
 8012704:	3708      	adds	r7, #8
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}

0801270a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801270a:	b580      	push	{r7, lr}
 801270c:	b082      	sub	sp, #8
 801270e:	af00      	add	r7, sp, #0
 8012710:	6078      	str	r0, [r7, #4]
 8012712:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	6839      	ldr	r1, [r7, #0]
 8012718:	4618      	mov	r0, r3
 801271a:	f001 fb2f 	bl	8013d7c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 801271e:	bf00      	nop
 8012720:	3708      	adds	r7, #8
 8012722:	46bd      	mov	sp, r7
 8012724:	bd80      	pop	{r7, pc}

08012726 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8012726:	b580      	push	{r7, lr}
 8012728:	b082      	sub	sp, #8
 801272a:	af00      	add	r7, sp, #0
 801272c:	6078      	str	r0, [r7, #4]
 801272e:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	6839      	ldr	r1, [r7, #0]
 8012734:	4618      	mov	r0, r3
 8012736:	f001 fb37 	bl	8013da8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 801273a:	bf00      	nop
 801273c:	3708      	adds	r7, #8
 801273e:	46bd      	mov	sp, r7
 8012740:	bd80      	pop	{r7, pc}

08012742 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8012742:	b580      	push	{r7, lr}
 8012744:	b082      	sub	sp, #8
 8012746:	af00      	add	r7, sp, #0
 8012748:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	4618      	mov	r0, r3
 801274e:	f001 faad 	bl	8013cac <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8012752:	bf00      	nop
 8012754:	3708      	adds	r7, #8
 8012756:	46bd      	mov	sp, r7
 8012758:	bd80      	pop	{r7, pc}

0801275a <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 801275a:	b580      	push	{r7, lr}
 801275c:	b082      	sub	sp, #8
 801275e:	af00      	add	r7, sp, #0
 8012760:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	4618      	mov	r0, r3
 8012766:	f001 fab1 	bl	8013ccc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 801276a:	bf00      	nop
 801276c:	3708      	adds	r7, #8
 801276e:	46bd      	mov	sp, r7
 8012770:	bd80      	pop	{r7, pc}

08012772 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8012772:	b580      	push	{r7, lr}
 8012774:	b082      	sub	sp, #8
 8012776:	af00      	add	r7, sp, #0
 8012778:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	4618      	mov	r0, r3
 801277e:	f001 fab3 	bl	8013ce8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8012782:	bf00      	nop
 8012784:	3708      	adds	r7, #8
 8012786:	46bd      	mov	sp, r7
 8012788:	bd80      	pop	{r7, pc}

0801278a <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 801278a:	b580      	push	{r7, lr}
 801278c:	b082      	sub	sp, #8
 801278e:	af00      	add	r7, sp, #0
 8012790:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	4618      	mov	r0, r3
 8012796:	f001 fab5 	bl	8013d04 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 801279a:	bf00      	nop
 801279c:	3708      	adds	r7, #8
 801279e:	46bd      	mov	sp, r7
 80127a0:	bd80      	pop	{r7, pc}
	...

080127a4 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b082      	sub	sp, #8
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
 80127ac:	4a05      	ldr	r2, [pc, #20]	; (80127c4 <_ZN11TouchGFXHALD1Ev+0x20>)
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	601a      	str	r2, [r3, #0]
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	4618      	mov	r0, r3
 80127b6:	f7ff ff61 	bl	801267c <_ZN20TouchGFXGeneratedHALD1Ev>
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	4618      	mov	r0, r3
 80127be:	3708      	adds	r7, #8
 80127c0:	46bd      	mov	sp, r7
 80127c2:	bd80      	pop	{r7, pc}
 80127c4:	08028520 	.word	0x08028520

080127c8 <_ZN11TouchGFXHALD0Ev>:
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b082      	sub	sp, #8
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
 80127d0:	6878      	ldr	r0, [r7, #4]
 80127d2:	f7ff ffe7 	bl	80127a4 <_ZN11TouchGFXHALD1Ev>
 80127d6:	2178      	movs	r1, #120	; 0x78
 80127d8:	6878      	ldr	r0, [r7, #4]
 80127da:	f012 fa12 	bl	8024c02 <_ZdlPvj>
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	4618      	mov	r0, r3
 80127e2:	3708      	adds	r7, #8
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd80      	pop	{r7, pc}

080127e8 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 80127ec:	2203      	movs	r2, #3
 80127ee:	2100      	movs	r1, #0
 80127f0:	2001      	movs	r0, #1
 80127f2:	f7f4 fdbd 	bl	8007370 <xQueueGenericCreate>
 80127f6:	4602      	mov	r2, r0
 80127f8:	4b0b      	ldr	r3, [pc, #44]	; (8012828 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80127fa:	601a      	str	r2, [r3, #0]
 80127fc:	4b0a      	ldr	r3, [pc, #40]	; (8012828 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d006      	beq.n	8012812 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 8012804:	4b08      	ldr	r3, [pc, #32]	; (8012828 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8012806:	6818      	ldr	r0, [r3, #0]
 8012808:	2300      	movs	r3, #0
 801280a:	2200      	movs	r2, #0
 801280c:	2100      	movs	r1, #0
 801280e:	f7f4 fe09 	bl	8007424 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8012812:	2200      	movs	r2, #0
 8012814:	2101      	movs	r1, #1
 8012816:	2001      	movs	r0, #1
 8012818:	f7f4 fdaa 	bl	8007370 <xQueueGenericCreate>
 801281c:	4602      	mov	r2, r0
 801281e:	4b03      	ldr	r3, [pc, #12]	; (801282c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8012820:	601a      	str	r2, [r3, #0]
}
 8012822:	bf00      	nop
 8012824:	bd80      	pop	{r7, pc}
 8012826:	bf00      	nop
 8012828:	20008394 	.word	0x20008394
 801282c:	20008398 	.word	0x20008398

08012830 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8012830:	b580      	push	{r7, lr}
 8012832:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8012834:	4b04      	ldr	r3, [pc, #16]	; (8012848 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	f04f 31ff 	mov.w	r1, #4294967295
 801283c:	4618      	mov	r0, r3
 801283e:	f7f5 f903 	bl	8007a48 <xQueueSemaphoreTake>
}
 8012842:	bf00      	nop
 8012844:	bd80      	pop	{r7, pc}
 8012846:	bf00      	nop
 8012848:	20008394 	.word	0x20008394

0801284c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 801284c:	b580      	push	{r7, lr}
 801284e:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 8012850:	4b04      	ldr	r3, [pc, #16]	; (8012864 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 8012852:	6818      	ldr	r0, [r3, #0]
 8012854:	2300      	movs	r3, #0
 8012856:	2200      	movs	r2, #0
 8012858:	2100      	movs	r1, #0
 801285a:	f7f4 fde3 	bl	8007424 <xQueueGenericSend>
}
 801285e:	bf00      	nop
 8012860:	bd80      	pop	{r7, pc}
 8012862:	bf00      	nop
 8012864:	20008394 	.word	0x20008394

08012868 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8012868:	b580      	push	{r7, lr}
 801286a:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 801286c:	4b03      	ldr	r3, [pc, #12]	; (801287c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	2100      	movs	r1, #0
 8012872:	4618      	mov	r0, r3
 8012874:	f7f5 f8e8 	bl	8007a48 <xQueueSemaphoreTake>
}
 8012878:	bf00      	nop
 801287a:	bd80      	pop	{r7, pc}
 801287c:	20008394 	.word	0x20008394

08012880 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b082      	sub	sp, #8
 8012884:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 8012886:	2300      	movs	r3, #0
 8012888:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 801288a:	4b0b      	ldr	r3, [pc, #44]	; (80128b8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	1d3a      	adds	r2, r7, #4
 8012890:	4611      	mov	r1, r2
 8012892:	4618      	mov	r0, r3
 8012894:	f7f4 ff64 	bl	8007760 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d007      	beq.n	80128ae <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 801289e:	4b07      	ldr	r3, [pc, #28]	; (80128bc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 80128a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128a4:	601a      	str	r2, [r3, #0]
 80128a6:	f3bf 8f4f 	dsb	sy
 80128aa:	f3bf 8f6f 	isb	sy
}
 80128ae:	bf00      	nop
 80128b0:	3708      	adds	r7, #8
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}
 80128b6:	bf00      	nop
 80128b8:	20008394 	.word	0x20008394
 80128bc:	e000ed04 	.word	0xe000ed04

080128c0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b082      	sub	sp, #8
 80128c4:	af00      	add	r7, sp, #0
    if (vsync_q)
 80128c6:	4b0e      	ldr	r3, [pc, #56]	; (8012900 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d013      	beq.n	80128f6 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 80128ce:	2300      	movs	r3, #0
 80128d0:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 80128d2:	4b0b      	ldr	r3, [pc, #44]	; (8012900 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 80128d4:	6818      	ldr	r0, [r3, #0]
 80128d6:	1d3a      	adds	r2, r7, #4
 80128d8:	2300      	movs	r3, #0
 80128da:	490a      	ldr	r1, [pc, #40]	; (8012904 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 80128dc:	f7f4 fea4 	bl	8007628 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d007      	beq.n	80128f6 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 80128e6:	4b08      	ldr	r3, [pc, #32]	; (8012908 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 80128e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128ec:	601a      	str	r2, [r3, #0]
 80128ee:	f3bf 8f4f 	dsb	sy
 80128f2:	f3bf 8f6f 	isb	sy
    }
}
 80128f6:	bf00      	nop
 80128f8:	3708      	adds	r7, #8
 80128fa:	46bd      	mov	sp, r7
 80128fc:	bd80      	pop	{r7, pc}
 80128fe:	bf00      	nop
 8012900:	20008398 	.word	0x20008398
 8012904:	20000048 	.word	0x20000048
 8012908:	e000ed04 	.word	0xe000ed04

0801290c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 801290c:	b580      	push	{r7, lr}
 801290e:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8012910:	4b08      	ldr	r3, [pc, #32]	; (8012934 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	2200      	movs	r2, #0
 8012916:	4908      	ldr	r1, [pc, #32]	; (8012938 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8012918:	4618      	mov	r0, r3
 801291a:	f7f4 ffb3 	bl	8007884 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 801291e:	4b05      	ldr	r3, [pc, #20]	; (8012934 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	f04f 32ff 	mov.w	r2, #4294967295
 8012926:	4904      	ldr	r1, [pc, #16]	; (8012938 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8012928:	4618      	mov	r0, r3
 801292a:	f7f4 ffab 	bl	8007884 <xQueueReceive>
}
 801292e:	bf00      	nop
 8012930:	bd80      	pop	{r7, pc}
 8012932:	bf00      	nop
 8012934:	20008398 	.word	0x20008398
 8012938:	20000048 	.word	0x20000048

0801293c <__NVIC_EnableIRQ>:
{
 801293c:	b480      	push	{r7}
 801293e:	b083      	sub	sp, #12
 8012940:	af00      	add	r7, sp, #0
 8012942:	4603      	mov	r3, r0
 8012944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801294a:	2b00      	cmp	r3, #0
 801294c:	db0d      	blt.n	801296a <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801294e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012952:	b2db      	uxtb	r3, r3
 8012954:	f003 021f 	and.w	r2, r3, #31
 8012958:	4907      	ldr	r1, [pc, #28]	; (8012978 <__NVIC_EnableIRQ+0x3c>)
 801295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801295e:	095b      	lsrs	r3, r3, #5
 8012960:	2001      	movs	r0, #1
 8012962:	fa00 f202 	lsl.w	r2, r0, r2
 8012966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801296a:	bf00      	nop
 801296c:	370c      	adds	r7, #12
 801296e:	46bd      	mov	sp, r7
 8012970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012974:	4770      	bx	lr
 8012976:	bf00      	nop
 8012978:	e000e100 	.word	0xe000e100

0801297c <__NVIC_DisableIRQ>:
{
 801297c:	b480      	push	{r7}
 801297e:	b083      	sub	sp, #12
 8012980:	af00      	add	r7, sp, #0
 8012982:	4603      	mov	r3, r0
 8012984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801298a:	2b00      	cmp	r3, #0
 801298c:	db12      	blt.n	80129b4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012992:	b2db      	uxtb	r3, r3
 8012994:	f003 021f 	and.w	r2, r3, #31
 8012998:	4909      	ldr	r1, [pc, #36]	; (80129c0 <__NVIC_DisableIRQ+0x44>)
 801299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801299e:	095b      	lsrs	r3, r3, #5
 80129a0:	2001      	movs	r0, #1
 80129a2:	fa00 f202 	lsl.w	r2, r0, r2
 80129a6:	3320      	adds	r3, #32
 80129a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80129ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80129b0:	f3bf 8f6f 	isb	sy
}
 80129b4:	bf00      	nop
 80129b6:	370c      	adds	r7, #12
 80129b8:	46bd      	mov	sp, r7
 80129ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129be:	4770      	bx	lr
 80129c0:	e000e100 	.word	0xe000e100

080129c4 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 80129c4:	b480      	push	{r7}
 80129c6:	b083      	sub	sp, #12
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2200      	movs	r2, #0
 80129d0:	601a      	str	r2, [r3, #0]
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	4618      	mov	r0, r3
 80129d6:	370c      	adds	r7, #12
 80129d8:	46bd      	mov	sp, r7
 80129da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129de:	4770      	bx	lr

080129e0 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 80129e0:	b480      	push	{r7}
 80129e2:	b083      	sub	sp, #12
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
        return color;
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	681b      	ldr	r3, [r3, #0]
    }
 80129ec:	4618      	mov	r0, r3
 80129ee:	370c      	adds	r7, #12
 80129f0:	46bd      	mov	sp, r7
 80129f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f6:	4770      	bx	lr

080129f8 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 80129f8:	b480      	push	{r7}
 80129fa:	b083      	sub	sp, #12
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	b29b      	uxth	r3, r3
    }
 8012a06:	4618      	mov	r0, r3
 8012a08:	370c      	adds	r7, #12
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a10:	4770      	bx	lr
	...

08012a14 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8012a14:	b480      	push	{r7}
 8012a16:	b083      	sub	sp, #12
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
    {
 8012a1c:	4a04      	ldr	r2, [pc, #16]	; (8012a30 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	601a      	str	r2, [r3, #0]
    }
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	4618      	mov	r0, r3
 8012a26:	370c      	adds	r7, #12
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2e:	4770      	bx	lr
 8012a30:	080286c8 	.word	0x080286c8

08012a34 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b082      	sub	sp, #8
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
    }
 8012a3c:	6878      	ldr	r0, [r7, #4]
 8012a3e:	f7ff ffe9 	bl	8012a14 <_ZN8touchgfx9DMA_QueueD1Ev>
 8012a42:	2104      	movs	r1, #4
 8012a44:	6878      	ldr	r0, [r7, #4]
 8012a46:	f012 f8dc 	bl	8024c02 <_ZdlPvj>
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	3708      	adds	r7, #8
 8012a50:	46bd      	mov	sp, r7
 8012a52:	bd80      	pop	{r7, pc}

08012a54 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b082      	sub	sp, #8
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	3344      	adds	r3, #68	; 0x44
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	6878      	ldr	r0, [r7, #4]
 8012a66:	4798      	blx	r3
    }
 8012a68:	bf00      	nop
 8012a6a:	3708      	adds	r7, #8
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bd80      	pop	{r7, pc}

08012a70 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8012a70:	b480      	push	{r7}
 8012a72:	b083      	sub	sp, #12
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8012a78:	2300      	movs	r3, #0
    }
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	370c      	adds	r7, #12
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a84:	4770      	bx	lr
	...

08012a88 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8012a88:	b480      	push	{r7}
 8012a8a:	b083      	sub	sp, #12
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
    {
 8012a90:	4a04      	ldr	r2, [pc, #16]	; (8012aa4 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	601a      	str	r2, [r3, #0]
    }
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	4618      	mov	r0, r3
 8012a9a:	370c      	adds	r7, #12
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa2:	4770      	bx	lr
 8012aa4:	08029a04 	.word	0x08029a04

08012aa8 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b082      	sub	sp, #8
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
    }
 8012ab0:	6878      	ldr	r0, [r7, #4]
 8012ab2:	f7ff ffe9 	bl	8012a88 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8012ab6:	210c      	movs	r1, #12
 8012ab8:	6878      	ldr	r0, [r7, #4]
 8012aba:	f012 f8a2 	bl	8024c02 <_ZdlPvj>
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	3708      	adds	r7, #8
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	bd80      	pop	{r7, pc}

08012ac8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8012ac8:	b480      	push	{r7}
 8012aca:	b083      	sub	sp, #12
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
 8012ad0:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8012ad2:	4a09      	ldr	r2, [pc, #36]	; (8012af8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	601a      	str	r2, [r3, #0]
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	683a      	ldr	r2, [r7, #0]
 8012adc:	605a      	str	r2, [r3, #4]
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	721a      	strb	r2, [r3, #8]
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	725a      	strb	r2, [r3, #9]
    {
    }
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	4618      	mov	r0, r3
 8012aee:	370c      	adds	r7, #12
 8012af0:	46bd      	mov	sp, r7
 8012af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af6:	4770      	bx	lr
 8012af8:	08029a04 	.word	0x08029a04

08012afc <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b082      	sub	sp, #8
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	685a      	ldr	r2, [r3, #4]
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	685b      	ldr	r3, [r3, #4]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	3314      	adds	r3, #20
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	4610      	mov	r0, r2
 8012b14:	4798      	blx	r3
    }
 8012b16:	bf00      	nop
 8012b18:	3708      	adds	r7, #8
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	bd80      	pop	{r7, pc}

08012b1e <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8012b1e:	b580      	push	{r7, lr}
 8012b20:	b082      	sub	sp, #8
 8012b22:	af00      	add	r7, sp, #0
 8012b24:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8012b26:	687a      	ldr	r2, [r7, #4]
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	3328      	adds	r3, #40	; 0x28
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	4610      	mov	r0, r2
 8012b32:	4798      	blx	r3
    }
 8012b34:	bf00      	nop
 8012b36:	3708      	adds	r7, #8
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	bd80      	pop	{r7, pc}

08012b3c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8012b3c:	b480      	push	{r7}
 8012b3e:	b085      	sub	sp, #20
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	60f8      	str	r0, [r7, #12]
 8012b44:	60b9      	str	r1, [r7, #8]
 8012b46:	607a      	str	r2, [r7, #4]
 8012b48:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8012b54:	68ba      	ldr	r2, [r7, #8]
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	430a      	orrs	r2, r1
 8012b5c:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b64:	f023 0107 	bic.w	r1, r3, #7
 8012b68:	687a      	ldr	r2, [r7, #4]
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	430a      	orrs	r2, r1
 8012b70:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012b78:	4b06      	ldr	r3, [pc, #24]	; (8012b94 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 8012b7a:	4013      	ands	r3, r2
 8012b7c:	6839      	ldr	r1, [r7, #0]
 8012b7e:	68fa      	ldr	r2, [r7, #12]
 8012b80:	6812      	ldr	r2, [r2, #0]
 8012b82:	430b      	orrs	r3, r1
 8012b84:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8012b86:	2300      	movs	r3, #0
}
 8012b88:	4618      	mov	r0, r3
 8012b8a:	3714      	adds	r7, #20
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b92:	4770      	bx	lr
 8012b94:	ffffc000 	.word	0xffffc000

08012b98 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b082      	sub	sp, #8
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8012ba0:	f7f7 fa3c 	bl	800a01c <_ZN8touchgfx3HAL11getInstanceEv>
 8012ba4:	4603      	mov	r3, r0
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f7ff ffa8 	bl	8012afc <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8012bac:	bf00      	nop
 8012bae:	3708      	adds	r7, #8
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	bd80      	pop	{r7, pc}

08012bb4 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b082      	sub	sp, #8
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
    assert(0);
 8012bbc:	4b02      	ldr	r3, [pc, #8]	; (8012bc8 <DMA2D_XferErrorCallback+0x14>)
 8012bbe:	4a03      	ldr	r2, [pc, #12]	; (8012bcc <DMA2D_XferErrorCallback+0x18>)
 8012bc0:	213e      	movs	r1, #62	; 0x3e
 8012bc2:	4803      	ldr	r0, [pc, #12]	; (8012bd0 <DMA2D_XferErrorCallback+0x1c>)
 8012bc4:	f012 f848 	bl	8024c58 <__assert_func>
 8012bc8:	08026938 	.word	0x08026938
 8012bcc:	080286e4 	.word	0x080286e4
 8012bd0:	0802693c 	.word	0x0802693c

08012bd4 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b082      	sub	sp, #8
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	3318      	adds	r3, #24
 8012be0:	4618      	mov	r0, r3
 8012be2:	f7ff feef 	bl	80129c4 <_ZN8touchgfx9colortypeC1Ev>
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	4618      	mov	r0, r3
 8012bea:	3708      	adds	r7, #8
 8012bec:	46bd      	mov	sp, r7
 8012bee:	bd80      	pop	{r7, pc}

08012bf0 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 8012bf0:	b5b0      	push	{r4, r5, r7, lr}
 8012bf2:	b082      	sub	sp, #8
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8012bf8:	687a      	ldr	r2, [r7, #4]
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	330c      	adds	r3, #12
 8012bfe:	4619      	mov	r1, r3
 8012c00:	4610      	mov	r0, r2
 8012c02:	f7ff ff61 	bl	8012ac8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8012c06:	4a0e      	ldr	r2, [pc, #56]	; (8012c40 <_ZN10STM32F7DMAC1Ev+0x50>)
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	601a      	str	r2, [r3, #0]
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	f103 000c 	add.w	r0, r3, #12
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	3320      	adds	r3, #32
 8012c16:	2260      	movs	r2, #96	; 0x60
 8012c18:	4619      	mov	r1, r3
 8012c1a:	f003 fb1b 	bl	8016254 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	3320      	adds	r3, #32
 8012c22:	245f      	movs	r4, #95	; 0x5f
 8012c24:	461d      	mov	r5, r3
 8012c26:	2c00      	cmp	r4, #0
 8012c28:	db05      	blt.n	8012c36 <_ZN10STM32F7DMAC1Ev+0x46>
 8012c2a:	4628      	mov	r0, r5
 8012c2c:	f7ff ffd2 	bl	8012bd4 <_ZN8touchgfx6BlitOpC1Ev>
 8012c30:	3520      	adds	r5, #32
 8012c32:	3c01      	subs	r4, #1
 8012c34:	e7f7      	b.n	8012c26 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	4618      	mov	r0, r3
 8012c3a:	3708      	adds	r7, #8
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8012c40:	08028678 	.word	0x08028678

08012c44 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b082      	sub	sp, #8
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
 8012c4c:	4a0b      	ldr	r2, [pc, #44]	; (8012c7c <_ZN10STM32F7DMAD1Ev+0x38>)
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8012c52:	480b      	ldr	r0, [pc, #44]	; (8012c80 <_ZN10STM32F7DMAD1Ev+0x3c>)
 8012c54:	f7f0 f85e 	bl	8002d14 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8012c58:	205a      	movs	r0, #90	; 0x5a
 8012c5a:	f7ff fe8f 	bl	801297c <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	330c      	adds	r3, #12
 8012c62:	4618      	mov	r0, r3
 8012c64:	f000 faa0 	bl	80131a8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	f7ff ff0c 	bl	8012a88 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	4618      	mov	r0, r3
 8012c74:	3708      	adds	r7, #8
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}
 8012c7a:	bf00      	nop
 8012c7c:	08028678 	.word	0x08028678
 8012c80:	2000b6ac 	.word	0x2000b6ac

08012c84 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b082      	sub	sp, #8
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
}
 8012c8c:	6878      	ldr	r0, [r7, #4]
 8012c8e:	f7ff ffd9 	bl	8012c44 <_ZN10STM32F7DMAD1Ev>
 8012c92:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8012c96:	6878      	ldr	r0, [r7, #4]
 8012c98:	f011 ffb3 	bl	8024c02 <_ZdlPvj>
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	3708      	adds	r7, #8
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	bd80      	pop	{r7, pc}
	...

08012ca8 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b082      	sub	sp, #8
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8012cb0:	4b09      	ldr	r3, [pc, #36]	; (8012cd8 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8012cb2:	4a0a      	ldr	r2, [pc, #40]	; (8012cdc <_ZN10STM32F7DMA10initializeEv+0x34>)
 8012cb4:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8012cb6:	4808      	ldr	r0, [pc, #32]	; (8012cd8 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8012cb8:	f7ef ffe2 	bl	8002c80 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8012cbc:	4b06      	ldr	r3, [pc, #24]	; (8012cd8 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8012cbe:	4a08      	ldr	r2, [pc, #32]	; (8012ce0 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8012cc0:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8012cc2:	4b05      	ldr	r3, [pc, #20]	; (8012cd8 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8012cc4:	4a07      	ldr	r2, [pc, #28]	; (8012ce4 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8012cc6:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8012cc8:	205a      	movs	r0, #90	; 0x5a
 8012cca:	f7ff fe37 	bl	801293c <__NVIC_EnableIRQ>
}
 8012cce:	bf00      	nop
 8012cd0:	3708      	adds	r7, #8
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}
 8012cd6:	bf00      	nop
 8012cd8:	2000b6ac 	.word	0x2000b6ac
 8012cdc:	4002b000 	.word	0x4002b000
 8012ce0:	08012b99 	.word	0x08012b99
 8012ce4:	08012bb5 	.word	0x08012bb5

08012ce8 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8012ce8:	b480      	push	{r7}
 8012cea:	b083      	sub	sp, #12
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8012cf0:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	370c      	adds	r7, #12
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfe:	4770      	bx	lr

08012d00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8012d00:	b590      	push	{r4, r7, lr}
 8012d02:	b08d      	sub	sp, #52	; 0x34
 8012d04:	af02      	add	r7, sp, #8
 8012d06:	6078      	str	r0, [r7, #4]
 8012d08:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8012d0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012d0e:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8012d10:	2300      	movs	r3, #0
 8012d12:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8012d14:	683b      	ldr	r3, [r7, #0]
 8012d16:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8012d18:	2b20      	cmp	r3, #32
 8012d1a:	d007      	beq.n	8012d2c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8012d1c:	683b      	ldr	r3, [r7, #0]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	2b40      	cmp	r3, #64	; 0x40
 8012d22:	d003      	beq.n	8012d2c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8012d24:	683b      	ldr	r3, [r7, #0]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	2b04      	cmp	r3, #4
 8012d2a:	d101      	bne.n	8012d30 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8012d2c:	2301      	movs	r3, #1
 8012d2e:	e000      	b.n	8012d32 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8012d30:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8012d32:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8012d34:	683b      	ldr	r3, [r7, #0]
 8012d36:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8012d38:	2b80      	cmp	r3, #128	; 0x80
 8012d3a:	d004      	beq.n	8012d46 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8012d3c:	683b      	ldr	r3, [r7, #0]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d44:	d101      	bne.n	8012d4a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8012d46:	2301      	movs	r3, #1
 8012d48:	e000      	b.n	8012d4c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8012d4a:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8012d4c:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8012d4e:	f7f7 f971 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8012d52:	4602      	mov	r2, r0
 8012d54:	6813      	ldr	r3, [r2, #0]
 8012d56:	3320      	adds	r3, #32
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	4610      	mov	r0, r2
 8012d5c:	4798      	blx	r3
 8012d5e:	4603      	mov	r3, r0
 8012d60:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8012d62:	683b      	ldr	r3, [r7, #0]
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	2b40      	cmp	r3, #64	; 0x40
 8012d68:	d01d      	beq.n	8012da6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8012d6a:	2b40      	cmp	r3, #64	; 0x40
 8012d6c:	d804      	bhi.n	8012d78 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8012d6e:	2b04      	cmp	r3, #4
 8012d70:	d00e      	beq.n	8012d90 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8012d72:	2b20      	cmp	r3, #32
 8012d74:	d017      	beq.n	8012da6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8012d76:	e019      	b.n	8012dac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8012d78:	2b80      	cmp	r3, #128	; 0x80
 8012d7a:	d003      	beq.n	8012d84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8012d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d80:	d003      	beq.n	8012d8a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8012d82:	e013      	b.n	8012dac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8012d84:	230a      	movs	r3, #10
 8012d86:	623b      	str	r3, [r7, #32]
        break;
 8012d88:	e01a      	b.n	8012dc0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8012d8a:	2309      	movs	r3, #9
 8012d8c:	623b      	str	r3, [r7, #32]
        break;
 8012d8e:	e017      	b.n	8012dc0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8012d90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012d94:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8012d96:	7f7b      	ldrb	r3, [r7, #29]
 8012d98:	2b10      	cmp	r3, #16
 8012d9a:	d101      	bne.n	8012da0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8012d9c:	2302      	movs	r3, #2
 8012d9e:	e000      	b.n	8012da2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8012da0:	2301      	movs	r3, #1
 8012da2:	623b      	str	r3, [r7, #32]
        break;
 8012da4:	e00c      	b.n	8012dc0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8012da6:	2300      	movs	r3, #0
 8012da8:	623b      	str	r3, [r7, #32]
        break;
 8012daa:	e009      	b.n	8012dc0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8012dac:	2300      	movs	r3, #0
 8012dae:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8012db0:	7f7b      	ldrb	r3, [r7, #29]
 8012db2:	2b10      	cmp	r3, #16
 8012db4:	d101      	bne.n	8012dba <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8012db6:	2302      	movs	r3, #2
 8012db8:	e000      	b.n	8012dbc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8012dba:	2301      	movs	r3, #1
 8012dbc:	623b      	str	r3, [r7, #32]
        break;
 8012dbe:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8012dc0:	4a76      	ldr	r2, [pc, #472]	; (8012f9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dc4:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8012dc6:	7f7b      	ldrb	r3, [r7, #29]
 8012dc8:	2b10      	cmp	r3, #16
 8012dca:	d101      	bne.n	8012dd0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8012dcc:	2302      	movs	r3, #2
 8012dce:	e000      	b.n	8012dd2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8012dd0:	2301      	movs	r3, #1
 8012dd2:	4a72      	ldr	r2, [pc, #456]	; (8012f9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012dd4:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8012dd6:	683b      	ldr	r3, [r7, #0]
 8012dd8:	8adb      	ldrh	r3, [r3, #22]
 8012dda:	461a      	mov	r2, r3
 8012ddc:	683b      	ldr	r3, [r7, #0]
 8012dde:	8a1b      	ldrh	r3, [r3, #16]
 8012de0:	1ad3      	subs	r3, r2, r3
 8012de2:	461a      	mov	r2, r3
 8012de4:	4b6d      	ldr	r3, [pc, #436]	; (8012f9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012de6:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8012de8:	7f7b      	ldrb	r3, [r7, #29]
 8012dea:	2b10      	cmp	r3, #16
 8012dec:	d101      	bne.n	8012df2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8012dee:	2202      	movs	r2, #2
 8012df0:	e000      	b.n	8012df4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8012df2:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8012df4:	683b      	ldr	r3, [r7, #0]
 8012df6:	8adb      	ldrh	r3, [r3, #22]
 8012df8:	4619      	mov	r1, r3
 8012dfa:	683b      	ldr	r3, [r7, #0]
 8012dfc:	8a1b      	ldrh	r3, [r3, #16]
 8012dfe:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8012e00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012e02:	4866      	ldr	r0, [pc, #408]	; (8012f9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012e04:	f7ff fe9a 	bl	8012b3c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8012e08:	4a64      	ldr	r2, [pc, #400]	; (8012f9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012e0a:	6a3b      	ldr	r3, [r7, #32]
 8012e0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8012e0e:	683b      	ldr	r3, [r7, #0]
 8012e10:	8a9b      	ldrh	r3, [r3, #20]
 8012e12:	461a      	mov	r2, r3
 8012e14:	683b      	ldr	r3, [r7, #0]
 8012e16:	8a1b      	ldrh	r3, [r3, #16]
 8012e18:	1ad3      	subs	r3, r2, r3
 8012e1a:	461a      	mov	r2, r3
 8012e1c:	4b5f      	ldr	r3, [pc, #380]	; (8012f9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012e1e:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8012e20:	7ffb      	ldrb	r3, [r7, #31]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d103      	bne.n	8012e2e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8012e26:	7fbb      	ldrb	r3, [r7, #30]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	f000 8082 	beq.w	8012f32 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	7f1b      	ldrb	r3, [r3, #28]
 8012e32:	2bff      	cmp	r3, #255	; 0xff
 8012e34:	d008      	beq.n	8012e48 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8012e36:	4b59      	ldr	r3, [pc, #356]	; (8012f9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012e38:	2202      	movs	r2, #2
 8012e3a:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8012e3c:	683b      	ldr	r3, [r7, #0]
 8012e3e:	7f1b      	ldrb	r3, [r3, #28]
 8012e40:	461a      	mov	r2, r3
 8012e42:	4b56      	ldr	r3, [pc, #344]	; (8012f9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012e44:	635a      	str	r2, [r3, #52]	; 0x34
 8012e46:	e002      	b.n	8012e4e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8012e48:	4b54      	ldr	r3, [pc, #336]	; (8012f9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8012e4e:	7fbb      	ldrb	r3, [r7, #30]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d059      	beq.n	8012f08 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 8012e54:	7f7b      	ldrb	r3, [r7, #29]
 8012e56:	2b10      	cmp	r3, #16
 8012e58:	d14a      	bne.n	8012ef0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8012e5a:	683b      	ldr	r3, [r7, #0]
 8012e5c:	3318      	adds	r3, #24
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f7ff fdca 	bl	80129f8 <_ZNK8touchgfx9colortypecvtEv>
 8012e64:	4603      	mov	r3, r0
 8012e66:	12db      	asrs	r3, r3, #11
 8012e68:	f003 021f 	and.w	r2, r3, #31
 8012e6c:	4613      	mov	r3, r2
 8012e6e:	021b      	lsls	r3, r3, #8
 8012e70:	1a9b      	subs	r3, r3, r2
 8012e72:	4a4b      	ldr	r2, [pc, #300]	; (8012fa0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012e74:	fb82 1203 	smull	r1, r2, r2, r3
 8012e78:	441a      	add	r2, r3
 8012e7a:	1112      	asrs	r2, r2, #4
 8012e7c:	17db      	asrs	r3, r3, #31
 8012e7e:	1ad3      	subs	r3, r2, r3
 8012e80:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	3318      	adds	r3, #24
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7ff fdb6 	bl	80129f8 <_ZNK8touchgfx9colortypecvtEv>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	115b      	asrs	r3, r3, #5
 8012e90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012e94:	4613      	mov	r3, r2
 8012e96:	021b      	lsls	r3, r3, #8
 8012e98:	1a9b      	subs	r3, r3, r2
 8012e9a:	4a42      	ldr	r2, [pc, #264]	; (8012fa4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8012e9c:	fb82 1203 	smull	r1, r2, r2, r3
 8012ea0:	441a      	add	r2, r3
 8012ea2:	1152      	asrs	r2, r2, #5
 8012ea4:	17db      	asrs	r3, r3, #31
 8012ea6:	1ad3      	subs	r3, r2, r3
 8012ea8:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8012eaa:	683b      	ldr	r3, [r7, #0]
 8012eac:	3318      	adds	r3, #24
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f7ff fda2 	bl	80129f8 <_ZNK8touchgfx9colortypecvtEv>
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	f003 021f 	and.w	r2, r3, #31
 8012eba:	4613      	mov	r3, r2
 8012ebc:	021b      	lsls	r3, r3, #8
 8012ebe:	1a9b      	subs	r3, r3, r2
 8012ec0:	4a37      	ldr	r2, [pc, #220]	; (8012fa0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012ec2:	fb82 1203 	smull	r1, r2, r2, r3
 8012ec6:	441a      	add	r2, r3
 8012ec8:	1112      	asrs	r2, r2, #4
 8012eca:	17db      	asrs	r3, r3, #31
 8012ecc:	1ad3      	subs	r3, r2, r3
 8012ece:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8012ed0:	683b      	ldr	r3, [r7, #0]
 8012ed2:	7f1b      	ldrb	r3, [r3, #28]
 8012ed4:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	061a      	lsls	r2, r3, #24
 8012eda:	69bb      	ldr	r3, [r7, #24]
 8012edc:	041b      	lsls	r3, r3, #16
 8012ede:	431a      	orrs	r2, r3
 8012ee0:	697b      	ldr	r3, [r7, #20]
 8012ee2:	021b      	lsls	r3, r3, #8
 8012ee4:	431a      	orrs	r2, r3
 8012ee6:	693b      	ldr	r3, [r7, #16]
 8012ee8:	4313      	orrs	r3, r2
 8012eea:	4a2c      	ldr	r2, [pc, #176]	; (8012f9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012eec:	6353      	str	r3, [r2, #52]	; 0x34
 8012eee:	e00b      	b.n	8012f08 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8012ef0:	683b      	ldr	r3, [r7, #0]
 8012ef2:	3318      	adds	r3, #24
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f7ff fd73 	bl	80129e0 <_ZNK8touchgfx9colortype10getColor32Ev>
 8012efa:	4602      	mov	r2, r0
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	7f1b      	ldrb	r3, [r3, #28]
 8012f00:	061b      	lsls	r3, r3, #24
 8012f02:	4313      	orrs	r3, r2
 8012f04:	4a25      	ldr	r2, [pc, #148]	; (8012f9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012f06:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8012f08:	683b      	ldr	r3, [r7, #0]
 8012f0a:	8adb      	ldrh	r3, [r3, #22]
 8012f0c:	461a      	mov	r2, r3
 8012f0e:	683b      	ldr	r3, [r7, #0]
 8012f10:	8a1b      	ldrh	r3, [r3, #16]
 8012f12:	1ad3      	subs	r3, r2, r3
 8012f14:	461a      	mov	r2, r3
 8012f16:	4b21      	ldr	r3, [pc, #132]	; (8012f9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012f18:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8012f1a:	7f7b      	ldrb	r3, [r7, #29]
 8012f1c:	2b10      	cmp	r3, #16
 8012f1e:	d101      	bne.n	8012f24 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8012f20:	2302      	movs	r3, #2
 8012f22:	e000      	b.n	8012f26 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 8012f24:	2301      	movs	r3, #1
 8012f26:	4a1d      	ldr	r2, [pc, #116]	; (8012f9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012f28:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8012f2a:	2100      	movs	r1, #0
 8012f2c:	481b      	ldr	r0, [pc, #108]	; (8012f9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012f2e:	f7f0 f971 	bl	8003214 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8012f32:	2101      	movs	r1, #1
 8012f34:	4819      	ldr	r0, [pc, #100]	; (8012f9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012f36:	f7f0 f96d 	bl	8003214 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 8012f3a:	7ffb      	ldrb	r3, [r7, #31]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d102      	bne.n	8012f46 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 8012f40:	7fbb      	ldrb	r3, [r7, #30]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d015      	beq.n	8012f72 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012f4a:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8012f4c:	683b      	ldr	r3, [r7, #0]
 8012f4e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012f50:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8012f52:	683b      	ldr	r3, [r7, #0]
 8012f54:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012f56:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8012f58:	683b      	ldr	r3, [r7, #0]
 8012f5a:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012f5c:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8012f5e:	683b      	ldr	r3, [r7, #0]
 8012f60:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8012f62:	9301      	str	r3, [sp, #4]
 8012f64:	9200      	str	r2, [sp, #0]
 8012f66:	4623      	mov	r3, r4
 8012f68:	4602      	mov	r2, r0
 8012f6a:	480c      	ldr	r0, [pc, #48]	; (8012f9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012f6c:	f7ef ff75 	bl	8002e5a <HAL_DMA2D_BlendingStart_IT>
 8012f70:	e00f      	b.n	8012f92 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8012f72:	683b      	ldr	r3, [r7, #0]
 8012f74:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8012f76:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8012f78:	683b      	ldr	r3, [r7, #0]
 8012f7a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8012f7c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8012f7e:	683b      	ldr	r3, [r7, #0]
 8012f80:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8012f82:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8012f84:	683b      	ldr	r3, [r7, #0]
 8012f86:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8012f88:	9300      	str	r3, [sp, #0]
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	4803      	ldr	r0, [pc, #12]	; (8012f9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012f8e:	f7ef ff31 	bl	8002df4 <HAL_DMA2D_Start_IT>
    }
}
 8012f92:	bf00      	nop
 8012f94:	372c      	adds	r7, #44	; 0x2c
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd90      	pop	{r4, r7, pc}
 8012f9a:	bf00      	nop
 8012f9c:	2000b6ac 	.word	0x2000b6ac
 8012fa0:	84210843 	.word	0x84210843
 8012fa4:	82082083 	.word	0x82082083

08012fa8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8012fa8:	b590      	push	{r4, r7, lr}
 8012faa:	b08d      	sub	sp, #52	; 0x34
 8012fac:	af02      	add	r7, sp, #8
 8012fae:	6078      	str	r0, [r7, #4]
 8012fb0:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8012fb2:	f7f7 f83f 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8012fb6:	4602      	mov	r2, r0
 8012fb8:	6813      	ldr	r3, [r2, #0]
 8012fba:	3320      	adds	r3, #32
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	4610      	mov	r0, r2
 8012fc0:	4798      	blx	r3
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8012fc6:	7ffb      	ldrb	r3, [r7, #31]
 8012fc8:	2b10      	cmp	r3, #16
 8012fca:	d101      	bne.n	8012fd0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8012fcc:	2302      	movs	r3, #2
 8012fce:	e000      	b.n	8012fd2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8012fd0:	2301      	movs	r3, #1
 8012fd2:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8012fd8:	7ffb      	ldrb	r3, [r7, #31]
 8012fda:	2b10      	cmp	r3, #16
 8012fdc:	d149      	bne.n	8013072 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8012fde:	683b      	ldr	r3, [r7, #0]
 8012fe0:	3318      	adds	r3, #24
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	f7ff fd08 	bl	80129f8 <_ZNK8touchgfx9colortypecvtEv>
 8012fe8:	4603      	mov	r3, r0
 8012fea:	12db      	asrs	r3, r3, #11
 8012fec:	f003 021f 	and.w	r2, r3, #31
 8012ff0:	4613      	mov	r3, r2
 8012ff2:	021b      	lsls	r3, r3, #8
 8012ff4:	1a9b      	subs	r3, r3, r2
 8012ff6:	4a69      	ldr	r2, [pc, #420]	; (801319c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8012ff8:	fb82 1203 	smull	r1, r2, r2, r3
 8012ffc:	441a      	add	r2, r3
 8012ffe:	1112      	asrs	r2, r2, #4
 8013000:	17db      	asrs	r3, r3, #31
 8013002:	1ad3      	subs	r3, r2, r3
 8013004:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8013006:	683b      	ldr	r3, [r7, #0]
 8013008:	3318      	adds	r3, #24
 801300a:	4618      	mov	r0, r3
 801300c:	f7ff fcf4 	bl	80129f8 <_ZNK8touchgfx9colortypecvtEv>
 8013010:	4603      	mov	r3, r0
 8013012:	115b      	asrs	r3, r3, #5
 8013014:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013018:	4613      	mov	r3, r2
 801301a:	021b      	lsls	r3, r3, #8
 801301c:	1a9b      	subs	r3, r3, r2
 801301e:	4a60      	ldr	r2, [pc, #384]	; (80131a0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8013020:	fb82 1203 	smull	r1, r2, r2, r3
 8013024:	441a      	add	r2, r3
 8013026:	1152      	asrs	r2, r2, #5
 8013028:	17db      	asrs	r3, r3, #31
 801302a:	1ad3      	subs	r3, r2, r3
 801302c:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801302e:	683b      	ldr	r3, [r7, #0]
 8013030:	3318      	adds	r3, #24
 8013032:	4618      	mov	r0, r3
 8013034:	f7ff fce0 	bl	80129f8 <_ZNK8touchgfx9colortypecvtEv>
 8013038:	4603      	mov	r3, r0
 801303a:	f003 021f 	and.w	r2, r3, #31
 801303e:	4613      	mov	r3, r2
 8013040:	021b      	lsls	r3, r3, #8
 8013042:	1a9b      	subs	r3, r3, r2
 8013044:	4a55      	ldr	r2, [pc, #340]	; (801319c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8013046:	fb82 1203 	smull	r1, r2, r2, r3
 801304a:	441a      	add	r2, r3
 801304c:	1112      	asrs	r2, r2, #4
 801304e:	17db      	asrs	r3, r3, #31
 8013050:	1ad3      	subs	r3, r2, r3
 8013052:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8013054:	683b      	ldr	r3, [r7, #0]
 8013056:	7f1b      	ldrb	r3, [r3, #28]
 8013058:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 801305a:	68bb      	ldr	r3, [r7, #8]
 801305c:	061a      	lsls	r2, r3, #24
 801305e:	697b      	ldr	r3, [r7, #20]
 8013060:	041b      	lsls	r3, r3, #16
 8013062:	431a      	orrs	r2, r3
 8013064:	693b      	ldr	r3, [r7, #16]
 8013066:	021b      	lsls	r3, r3, #8
 8013068:	4313      	orrs	r3, r2
 801306a:	68fa      	ldr	r2, [r7, #12]
 801306c:	4313      	orrs	r3, r2
 801306e:	623b      	str	r3, [r7, #32]
 8013070:	e00b      	b.n	801308a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8013072:	683b      	ldr	r3, [r7, #0]
 8013074:	7f1b      	ldrb	r3, [r3, #28]
 8013076:	061b      	lsls	r3, r3, #24
 8013078:	461c      	mov	r4, r3
 801307a:	683b      	ldr	r3, [r7, #0]
 801307c:	3318      	adds	r3, #24
 801307e:	4618      	mov	r0, r3
 8013080:	f7ff fcae 	bl	80129e0 <_ZNK8touchgfx9colortype10getColor32Ev>
 8013084:	4603      	mov	r3, r0
 8013086:	4323      	orrs	r3, r4
 8013088:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 801308a:	683b      	ldr	r3, [r7, #0]
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	2b08      	cmp	r3, #8
 8013090:	d103      	bne.n	801309a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8013092:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013096:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8013098:	e003      	b.n	80130a2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 801309a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 801309e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80130a0:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80130a2:	4a40      	ldr	r2, [pc, #256]	; (80131a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80130a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a6:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80130a8:	7ffb      	ldrb	r3, [r7, #31]
 80130aa:	2b10      	cmp	r3, #16
 80130ac:	d101      	bne.n	80130b2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 80130ae:	2302      	movs	r3, #2
 80130b0:	e000      	b.n	80130b4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 80130b2:	2301      	movs	r3, #1
 80130b4:	4a3b      	ldr	r2, [pc, #236]	; (80131a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80130b6:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	8adb      	ldrh	r3, [r3, #22]
 80130bc:	461a      	mov	r2, r3
 80130be:	683b      	ldr	r3, [r7, #0]
 80130c0:	8a1b      	ldrh	r3, [r3, #16]
 80130c2:	1ad3      	subs	r3, r2, r3
 80130c4:	461a      	mov	r2, r3
 80130c6:	4b37      	ldr	r3, [pc, #220]	; (80131a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80130c8:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80130ca:	7ffb      	ldrb	r3, [r7, #31]
 80130cc:	2b10      	cmp	r3, #16
 80130ce:	d101      	bne.n	80130d4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 80130d0:	2202      	movs	r2, #2
 80130d2:	e000      	b.n	80130d6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 80130d4:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80130d6:	683b      	ldr	r3, [r7, #0]
 80130d8:	8adb      	ldrh	r3, [r3, #22]
 80130da:	4619      	mov	r1, r3
 80130dc:	683b      	ldr	r3, [r7, #0]
 80130de:	8a1b      	ldrh	r3, [r3, #16]
 80130e0:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80130e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80130e4:	482f      	ldr	r0, [pc, #188]	; (80131a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80130e6:	f7ff fd29 	bl	8012b3c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 80130ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80130f0:	d11e      	bne.n	8013130 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 80130f2:	4b2c      	ldr	r3, [pc, #176]	; (80131a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80130f4:	2201      	movs	r2, #1
 80130f6:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 80130f8:	4a2a      	ldr	r2, [pc, #168]	; (80131a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80130fa:	6a3b      	ldr	r3, [r7, #32]
 80130fc:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 80130fe:	4b29      	ldr	r3, [pc, #164]	; (80131a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013100:	2209      	movs	r2, #9
 8013102:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8013104:	683b      	ldr	r3, [r7, #0]
 8013106:	8adb      	ldrh	r3, [r3, #22]
 8013108:	461a      	mov	r2, r3
 801310a:	683b      	ldr	r3, [r7, #0]
 801310c:	8a1b      	ldrh	r3, [r3, #16]
 801310e:	1ad3      	subs	r3, r2, r3
 8013110:	461a      	mov	r2, r3
 8013112:	4b24      	ldr	r3, [pc, #144]	; (80131a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013114:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8013116:	7ffb      	ldrb	r3, [r7, #31]
 8013118:	2b10      	cmp	r3, #16
 801311a:	d101      	bne.n	8013120 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 801311c:	2302      	movs	r3, #2
 801311e:	e000      	b.n	8013122 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8013120:	2301      	movs	r3, #1
 8013122:	4a20      	ldr	r2, [pc, #128]	; (80131a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013124:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8013126:	2100      	movs	r1, #0
 8013128:	481e      	ldr	r0, [pc, #120]	; (80131a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801312a:	f7f0 f873 	bl	8003214 <HAL_DMA2D_ConfigLayer>
 801312e:	e005      	b.n	801313c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8013130:	4a1c      	ldr	r2, [pc, #112]	; (80131a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013132:	69bb      	ldr	r3, [r7, #24]
 8013134:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8013136:	4b1b      	ldr	r3, [pc, #108]	; (80131a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013138:	2200      	movs	r2, #0
 801313a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801313c:	2101      	movs	r1, #1
 801313e:	4819      	ldr	r0, [pc, #100]	; (80131a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013140:	f7f0 f868 	bl	8003214 <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8013144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013146:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801314a:	d115      	bne.n	8013178 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 801314c:	683b      	ldr	r3, [r7, #0]
 801314e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013150:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8013152:	683b      	ldr	r3, [r7, #0]
 8013154:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013156:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8013158:	683b      	ldr	r3, [r7, #0]
 801315a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801315c:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801315e:	683b      	ldr	r3, [r7, #0]
 8013160:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013162:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8013164:	683b      	ldr	r3, [r7, #0]
 8013166:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8013168:	9301      	str	r3, [sp, #4]
 801316a:	9200      	str	r2, [sp, #0]
 801316c:	4623      	mov	r3, r4
 801316e:	4602      	mov	r2, r0
 8013170:	480c      	ldr	r0, [pc, #48]	; (80131a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013172:	f7ef fe72 	bl	8002e5a <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8013176:	e00d      	b.n	8013194 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8013178:	683b      	ldr	r3, [r7, #0]
 801317a:	68db      	ldr	r3, [r3, #12]
 801317c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801317e:	683b      	ldr	r3, [r7, #0]
 8013180:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8013182:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8013184:	683b      	ldr	r3, [r7, #0]
 8013186:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8013188:	9300      	str	r3, [sp, #0]
 801318a:	460b      	mov	r3, r1
 801318c:	6a39      	ldr	r1, [r7, #32]
 801318e:	4805      	ldr	r0, [pc, #20]	; (80131a4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8013190:	f7ef fe30 	bl	8002df4 <HAL_DMA2D_Start_IT>
}
 8013194:	bf00      	nop
 8013196:	372c      	adds	r7, #44	; 0x2c
 8013198:	46bd      	mov	sp, r7
 801319a:	bd90      	pop	{r4, r7, pc}
 801319c:	84210843 	.word	0x84210843
 80131a0:	82082083 	.word	0x82082083
 80131a4:	2000b6ac 	.word	0x2000b6ac

080131a8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b082      	sub	sp, #8
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	6078      	str	r0, [r7, #4]
 80131b0:	4a05      	ldr	r2, [pc, #20]	; (80131c8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	601a      	str	r2, [r3, #0]
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	4618      	mov	r0, r3
 80131ba:	f7ff fc2b 	bl	8012a14 <_ZN8touchgfx9DMA_QueueD1Ev>
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	4618      	mov	r0, r3
 80131c2:	3708      	adds	r7, #8
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bd80      	pop	{r7, pc}
 80131c8:	08029a54 	.word	0x08029a54

080131cc <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b082      	sub	sp, #8
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
 80131d4:	6878      	ldr	r0, [r7, #4]
 80131d6:	f7ff ffe7 	bl	80131a8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80131da:	2114      	movs	r1, #20
 80131dc:	6878      	ldr	r0, [r7, #4]
 80131de:	f011 fd10 	bl	8024c02 <_ZdlPvj>
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	4618      	mov	r0, r3
 80131e6:	3708      	adds	r7, #8
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bd80      	pop	{r7, pc}

080131ec <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 80131ec:	b480      	push	{r7}
 80131ee:	b083      	sub	sp, #12
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
        texts = t;
 80131f4:	4a04      	ldr	r2, [pc, #16]	; (8013208 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	6013      	str	r3, [r2, #0]
    }
 80131fa:	bf00      	nop
 80131fc:	370c      	adds	r7, #12
 80131fe:	46bd      	mov	sp, r7
 8013200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013204:	4770      	bx	lr
 8013206:	bf00      	nop
 8013208:	2000b370 	.word	0x2000b370

0801320c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 801320c:	b480      	push	{r7}
 801320e:	b085      	sub	sp, #20
 8013210:	af00      	add	r7, sp, #0
 8013212:	60f8      	str	r0, [r7, #12]
 8013214:	60b9      	str	r1, [r7, #8]
 8013216:	607a      	str	r2, [r7, #4]
 8013218:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 801321a:	4a0b      	ldr	r2, [pc, #44]	; (8013248 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	601a      	str	r2, [r3, #0]
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	68ba      	ldr	r2, [r7, #8]
 8013224:	605a      	str	r2, [r3, #4]
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	687a      	ldr	r2, [r7, #4]
 801322a:	609a      	str	r2, [r3, #8]
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	683a      	ldr	r2, [r7, #0]
 8013230:	60da      	str	r2, [r3, #12]
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	69ba      	ldr	r2, [r7, #24]
 8013236:	611a      	str	r2, [r3, #16]
    {
    }
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	4618      	mov	r0, r3
 801323c:	3714      	adds	r7, #20
 801323e:	46bd      	mov	sp, r7
 8013240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013244:	4770      	bx	lr
 8013246:	bf00      	nop
 8013248:	080287e4 	.word	0x080287e4

0801324c <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 801324c:	b480      	push	{r7}
 801324e:	b083      	sub	sp, #12
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
    {
 8013254:	4a04      	ldr	r2, [pc, #16]	; (8013268 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	601a      	str	r2, [r3, #0]
    }
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	4618      	mov	r0, r3
 801325e:	370c      	adds	r7, #12
 8013260:	46bd      	mov	sp, r7
 8013262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013266:	4770      	bx	lr
 8013268:	080287e4 	.word	0x080287e4

0801326c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 801326c:	b580      	push	{r7, lr}
 801326e:	b082      	sub	sp, #8
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]
    }
 8013274:	6878      	ldr	r0, [r7, #4]
 8013276:	f7ff ffe9 	bl	801324c <_ZN8touchgfx7MVPHeapD1Ev>
 801327a:	2114      	movs	r1, #20
 801327c:	6878      	ldr	r0, [r7, #4]
 801327e:	f011 fcc0 	bl	8024c02 <_ZdlPvj>
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	4618      	mov	r0, r3
 8013286:	3708      	adds	r7, #8
 8013288:	46bd      	mov	sp, r7
 801328a:	bd80      	pop	{r7, pc}

0801328c <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 801328c:	b480      	push	{r7}
 801328e:	b083      	sub	sp, #12
 8013290:	af00      	add	r7, sp, #0
 8013292:	6078      	str	r0, [r7, #4]
    {
 8013294:	4a04      	ldr	r2, [pc, #16]	; (80132a8 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	601a      	str	r2, [r3, #0]
    }
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	4618      	mov	r0, r3
 801329e:	370c      	adds	r7, #12
 80132a0:	46bd      	mov	sp, r7
 80132a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a6:	4770      	bx	lr
 80132a8:	0802a558 	.word	0x0802a558

080132ac <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b082      	sub	sp, #8
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
    }
 80132b4:	6878      	ldr	r0, [r7, #4]
 80132b6:	f7ff ffe9 	bl	801328c <_ZN8touchgfx3LCDD1Ev>
 80132ba:	2108      	movs	r1, #8
 80132bc:	6878      	ldr	r0, [r7, #4]
 80132be:	f011 fca0 	bl	8024c02 <_ZdlPvj>
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	4618      	mov	r0, r3
 80132c6:	3708      	adds	r7, #8
 80132c8:	46bd      	mov	sp, r7
 80132ca:	bd80      	pop	{r7, pc}

080132cc <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 80132cc:	b480      	push	{r7}
 80132ce:	b083      	sub	sp, #12
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	2200      	movs	r2, #0
 80132d8:	801a      	strh	r2, [r3, #0]
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	2200      	movs	r2, #0
 80132de:	805a      	strh	r2, [r3, #2]
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	2200      	movs	r2, #0
 80132e4:	809a      	strh	r2, [r3, #4]
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	2200      	movs	r2, #0
 80132ea:	80da      	strh	r2, [r3, #6]
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	2200      	movs	r2, #0
 80132f0:	811a      	strh	r2, [r3, #8]
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	2200      	movs	r2, #0
 80132f6:	815a      	strh	r2, [r3, #10]
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	2200      	movs	r2, #0
 80132fc:	819a      	strh	r2, [r3, #12]
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	2200      	movs	r2, #0
 8013302:	739a      	strb	r2, [r3, #14]
        {
        }
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	4618      	mov	r0, r3
 8013308:	370c      	adds	r7, #12
 801330a:	46bd      	mov	sp, r7
 801330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013310:	4770      	bx	lr

08013312 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 8013312:	b580      	push	{r7, lr}
 8013314:	b082      	sub	sp, #8
 8013316:	af00      	add	r7, sp, #0
 8013318:	6078      	str	r0, [r7, #4]
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	4618      	mov	r0, r3
 801331e:	f7ff ffd5 	bl	80132cc <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	2200      	movs	r2, #0
 8013326:	611a      	str	r2, [r3, #16]
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2200      	movs	r2, #0
 801332c:	829a      	strh	r2, [r3, #20]
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	4618      	mov	r0, r3
 8013332:	3708      	adds	r7, #8
 8013334:	46bd      	mov	sp, r7
 8013336:	bd80      	pop	{r7, pc}

08013338 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8013338:	b580      	push	{r7, lr}
 801333a:	b084      	sub	sp, #16
 801333c:	af00      	add	r7, sp, #0
 801333e:	60f8      	str	r0, [r7, #12]
 8013340:	60b9      	str	r1, [r7, #8]
 8013342:	607a      	str	r2, [r7, #4]
 8013344:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 8013346:	4a44      	ldr	r2, [pc, #272]	; (8013458 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	601a      	str	r2, [r3, #0]
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	68ba      	ldr	r2, [r7, #8]
 8013350:	605a      	str	r2, [r3, #4]
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	687a      	ldr	r2, [r7, #4]
 8013356:	609a      	str	r2, [r3, #8]
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	683a      	ldr	r2, [r7, #0]
 801335c:	60da      	str	r2, [r3, #12]
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	2200      	movs	r2, #0
 8013362:	611a      	str	r2, [r3, #16]
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	2200      	movs	r2, #0
 8013368:	615a      	str	r2, [r3, #20]
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	2200      	movs	r2, #0
 801336e:	619a      	str	r2, [r3, #24]
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	331c      	adds	r3, #28
 8013374:	4618      	mov	r0, r3
 8013376:	f7ff ffcc 	bl	8013312 <_ZN8touchgfx8GesturesC1Ev>
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	2200      	movs	r2, #0
 801337e:	639a      	str	r2, [r3, #56]	; 0x38
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	2200      	movs	r2, #0
 8013384:	63da      	str	r2, [r3, #60]	; 0x3c
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	2200      	movs	r2, #0
 801338a:	641a      	str	r2, [r3, #64]	; 0x40
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	2200      	movs	r2, #0
 8013390:	645a      	str	r2, [r3, #68]	; 0x44
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	2200      	movs	r2, #0
 8013396:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	2201      	movs	r2, #1
 801339e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	2201      	movs	r2, #1
 80133a6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	2200      	movs	r2, #0
 80133ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	3350      	adds	r3, #80	; 0x50
 80133b4:	4618      	mov	r0, r3
 80133b6:	f7f9 fa09 	bl	800c7cc <_ZN8touchgfx4RectC1Ev>
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	2201      	movs	r2, #1
 80133be:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	2200      	movs	r2, #0
 80133c6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	2200      	movs	r2, #0
 80133ce:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	2201      	movs	r2, #1
 80133d6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	2200      	movs	r2, #0
 80133de:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	2200      	movs	r2, #0
 80133e6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	2200      	movs	r2, #0
 80133ee:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	2200      	movs	r2, #0
 80133f6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	2200      	movs	r2, #0
 80133fe:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	2200      	movs	r2, #0
 8013406:	671a      	str	r2, [r3, #112]	; 0x70
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	2200      	movs	r2, #0
 801340c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8013410:	4a12      	ldr	r2, [pc, #72]	; (801345c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8013416:	4a12      	ldr	r2, [pc, #72]	; (8013460 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8013418:	8b3b      	ldrh	r3, [r7, #24]
 801341a:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 801341c:	4a11      	ldr	r2, [pc, #68]	; (8013464 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 801341e:	8bbb      	ldrh	r3, [r7, #28]
 8013420:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8013422:	4b11      	ldr	r3, [pc, #68]	; (8013468 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8013424:	2200      	movs	r2, #0
 8013426:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8013428:	4b0d      	ldr	r3, [pc, #52]	; (8013460 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 801342a:	881a      	ldrh	r2, [r3, #0]
 801342c:	4b0f      	ldr	r3, [pc, #60]	; (801346c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 801342e:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8013430:	4b0c      	ldr	r3, [pc, #48]	; (8013464 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8013432:	881a      	ldrh	r2, [r3, #0]
 8013434:	4b0e      	ldr	r3, [pc, #56]	; (8013470 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8013436:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8013438:	8b3a      	ldrh	r2, [r7, #24]
 801343a:	8bbb      	ldrh	r3, [r7, #28]
 801343c:	429a      	cmp	r2, r3
 801343e:	d301      	bcc.n	8013444 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8013440:	2200      	movs	r2, #0
 8013442:	e000      	b.n	8013446 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8013444:	2201      	movs	r2, #1
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	4618      	mov	r0, r3
 8013450:	3710      	adds	r7, #16
 8013452:	46bd      	mov	sp, r7
 8013454:	bd80      	pop	{r7, pc}
 8013456:	bf00      	nop
 8013458:	080295c0 	.word	0x080295c0
 801345c:	2000b2d4 	.word	0x2000b2d4
 8013460:	2000b2c8 	.word	0x2000b2c8
 8013464:	2000b2ca 	.word	0x2000b2ca
 8013468:	2000b2cc 	.word	0x2000b2cc
 801346c:	2000b2ce 	.word	0x2000b2ce
 8013470:	2000b2d0 	.word	0x2000b2d0

08013474 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8013474:	b580      	push	{r7, lr}
 8013476:	b082      	sub	sp, #8
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
 801347c:	6039      	str	r1, [r7, #0]
    {
        app.gotoMenuScreenNoTransition();
 801347e:	683b      	ldr	r3, [r7, #0]
 8013480:	4618      	mov	r0, r3
 8013482:	f7f6 fffb 	bl	800a47c <_ZN23FrontendApplicationBase26gotoMenuScreenNoTransitionEv>
    }
 8013486:	bf00      	nop
 8013488:	3708      	adds	r7, #8
 801348a:	46bd      	mov	sp, r7
 801348c:	bd80      	pop	{r7, pc}
	...

08013490 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8013490:	b580      	push	{r7, lr}
 8013492:	b086      	sub	sp, #24
 8013494:	af02      	add	r7, sp, #8
 8013496:	60f8      	str	r0, [r7, #12]
 8013498:	60b9      	str	r1, [r7, #8]
 801349a:	607a      	str	r2, [r7, #4]
 801349c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 801349e:	68f8      	ldr	r0, [r7, #12]
 80134a0:	69bb      	ldr	r3, [r7, #24]
 80134a2:	9300      	str	r3, [sp, #0]
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	687a      	ldr	r2, [r7, #4]
 80134a8:	68b9      	ldr	r1, [r7, #8]
 80134aa:	f7ff feaf 	bl	801320c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80134ae:	4a04      	ldr	r2, [pc, #16]	; (80134c0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	601a      	str	r2, [r3, #0]
    {

    }
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	4618      	mov	r0, r3
 80134b8:	3710      	adds	r7, #16
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bd80      	pop	{r7, pc}
 80134be:	bf00      	nop
 80134c0:	080287d0 	.word	0x080287d0

080134c4 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80134c4:	b580      	push	{r7, lr}
 80134c6:	af00      	add	r7, sp, #0
 80134c8:	4801      	ldr	r0, [pc, #4]	; (80134d0 <__tcf_0+0xc>)
 80134ca:	f000 f9dd 	bl	8013888 <_ZN12FrontendHeapD1Ev>
 80134ce:	bd80      	pop	{r7, pc}
 80134d0:	2000839c 	.word	0x2000839c

080134d4 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80134d4:	b580      	push	{r7, lr}
 80134d6:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80134d8:	4b08      	ldr	r3, [pc, #32]	; (80134fc <_ZN12FrontendHeap11getInstanceEv+0x28>)
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	f003 0301 	and.w	r3, r3, #1
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d108      	bne.n	80134f6 <_ZN12FrontendHeap11getInstanceEv+0x22>
 80134e4:	4806      	ldr	r0, [pc, #24]	; (8013500 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 80134e6:	f000 f831 	bl	801354c <_ZN12FrontendHeapC1Ev>
 80134ea:	4b04      	ldr	r3, [pc, #16]	; (80134fc <_ZN12FrontendHeap11getInstanceEv+0x28>)
 80134ec:	2201      	movs	r2, #1
 80134ee:	601a      	str	r2, [r3, #0]
 80134f0:	4804      	ldr	r0, [pc, #16]	; (8013504 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 80134f2:	f011 fbcf 	bl	8024c94 <atexit>
        return instance;
 80134f6:	4b02      	ldr	r3, [pc, #8]	; (8013500 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 80134f8:	4618      	mov	r0, r3
 80134fa:	bd80      	pop	{r7, pc}
 80134fc:	2000a5c8 	.word	0x2000a5c8
 8013500:	2000839c 	.word	0x2000839c
 8013504:	080134c5 	.word	0x080134c5

08013508 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8013508:	b580      	push	{r7, lr}
 801350a:	b082      	sub	sp, #8
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
 8013510:	4a05      	ldr	r2, [pc, #20]	; (8013528 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	601a      	str	r2, [r3, #0]
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	4618      	mov	r0, r3
 801351a:	f7ff fe97 	bl	801324c <_ZN8touchgfx7MVPHeapD1Ev>
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	4618      	mov	r0, r3
 8013522:	3708      	adds	r7, #8
 8013524:	46bd      	mov	sp, r7
 8013526:	bd80      	pop	{r7, pc}
 8013528:	080287d0 	.word	0x080287d0

0801352c <_ZN16FrontendHeapBaseD0Ev>:
 801352c:	b580      	push	{r7, lr}
 801352e:	b082      	sub	sp, #8
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
 8013534:	6878      	ldr	r0, [r7, #4]
 8013536:	f7ff ffe7 	bl	8013508 <_ZN16FrontendHeapBaseD1Ev>
 801353a:	2114      	movs	r1, #20
 801353c:	6878      	ldr	r0, [r7, #4]
 801353e:	f011 fb60 	bl	8024c02 <_ZdlPvj>
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	4618      	mov	r0, r3
 8013546:	3708      	adds	r7, #8
 8013548:	46bd      	mov	sp, r7
 801354a:	bd80      	pop	{r7, pc}

0801354c <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 801354c:	b5b0      	push	{r4, r5, r7, lr}
 801354e:	b084      	sub	sp, #16
 8013550:	af02      	add	r7, sp, #8
 8013552:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8013554:	6878      	ldr	r0, [r7, #4]
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	f103 0414 	add.w	r4, r3, #20
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	f242 027c 	movw	r2, #8316	; 0x207c
 8013568:	441a      	add	r2, r3
 801356a:	6879      	ldr	r1, [r7, #4]
 801356c:	f242 03d8 	movw	r3, #8408	; 0x20d8
 8013570:	440b      	add	r3, r1
 8013572:	9300      	str	r3, [sp, #0]
 8013574:	4613      	mov	r3, r2
 8013576:	462a      	mov	r2, r5
 8013578:	4621      	mov	r1, r4
 801357a:	f7ff ff89 	bl	8013490 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801357e:	4a1a      	ldr	r2, [pc, #104]	; (80135e8 <_ZN12FrontendHeapC1Ev+0x9c>)
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	601a      	str	r2, [r3, #0]
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	3314      	adds	r3, #20
 8013588:	4618      	mov	r0, r3
 801358a:	f000 f8df 	bl	801374c <_ZN8touchgfx9PartitionINS_4meta8TypeListI22TestGirouettePresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	332c      	adds	r3, #44	; 0x2c
 8013592:	4618      	mov	r0, r3
 8013594:	f000 f90e 	bl	80137b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24TestOrientationVoileViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013598:	687a      	ldr	r2, [r7, #4]
 801359a:	f242 037c 	movw	r3, #8316	; 0x207c
 801359e:	4413      	add	r3, r2
 80135a0:	4618      	mov	r0, r3
 80135a2:	f000 f93d 	bl	8013820 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 80135a6:	687a      	ldr	r2, [r7, #4]
 80135a8:	f242 03d8 	movw	r3, #8408	; 0x20d8
 80135ac:	4413      	add	r3, r2
 80135ae:	687a      	ldr	r2, [r7, #4]
 80135b0:	f242 2128 	movw	r1, #8744	; 0x2228
 80135b4:	4411      	add	r1, r2
 80135b6:	687a      	ldr	r2, [r7, #4]
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7fd fd99 	bl	80110f0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80135be:	687a      	ldr	r2, [r7, #4]
 80135c0:	f242 2328 	movw	r3, #8744	; 0x2228
 80135c4:	4413      	add	r3, r2
 80135c6:	4618      	mov	r0, r3
 80135c8:	f7fe f84a 	bl	8011660 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 80135cc:	6878      	ldr	r0, [r7, #4]
 80135ce:	687a      	ldr	r2, [r7, #4]
 80135d0:	f242 03d8 	movw	r3, #8408	; 0x20d8
 80135d4:	4413      	add	r3, r2
 80135d6:	4619      	mov	r1, r3
 80135d8:	f7ff ff4c 	bl	8013474 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	4618      	mov	r0, r3
 80135e0:	3708      	adds	r7, #8
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bdb0      	pop	{r4, r5, r7, pc}
 80135e6:	bf00      	nop
 80135e8:	08028720 	.word	0x08028720

080135ec <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b082      	sub	sp, #8
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
    {
 80135f4:	4a05      	ldr	r2, [pc, #20]	; (801360c <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	601a      	str	r2, [r3, #0]
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	4618      	mov	r0, r3
 80135fe:	f7ff fe45 	bl	801328c <_ZN8touchgfx3LCDD1Ev>
    }
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	4618      	mov	r0, r3
 8013606:	3708      	adds	r7, #8
 8013608:	46bd      	mov	sp, r7
 801360a:	bd80      	pop	{r7, pc}
 801360c:	0802b910 	.word	0x0802b910

08013610 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 8013610:	b580      	push	{r7, lr}
 8013612:	b082      	sub	sp, #8
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
    }
 8013618:	6878      	ldr	r0, [r7, #4]
 801361a:	f7ff ffe7 	bl	80135ec <_ZN8touchgfx8LCD24bppD1Ev>
 801361e:	2158      	movs	r1, #88	; 0x58
 8013620:	6878      	ldr	r0, [r7, #4]
 8013622:	f011 faee 	bl	8024c02 <_ZdlPvj>
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	4618      	mov	r0, r3
 801362a:	3708      	adds	r7, #8
 801362c:	46bd      	mov	sp, r7
 801362e:	bd80      	pop	{r7, pc}

08013630 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8013630:	b580      	push	{r7, lr}
 8013632:	b086      	sub	sp, #24
 8013634:	af02      	add	r7, sp, #8
 8013636:	60f8      	str	r0, [r7, #12]
 8013638:	60b9      	str	r1, [r7, #8]
 801363a:	607a      	str	r2, [r7, #4]
 801363c:	603b      	str	r3, [r7, #0]
 801363e:	68f8      	ldr	r0, [r7, #12]
 8013640:	8bbb      	ldrh	r3, [r7, #28]
 8013642:	9301      	str	r3, [sp, #4]
 8013644:	8b3b      	ldrh	r3, [r7, #24]
 8013646:	9300      	str	r3, [sp, #0]
 8013648:	683b      	ldr	r3, [r7, #0]
 801364a:	687a      	ldr	r2, [r7, #4]
 801364c:	68b9      	ldr	r1, [r7, #8]
 801364e:	f7ff fe73 	bl	8013338 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8013652:	4a04      	ldr	r2, [pc, #16]	; (8013664 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	601a      	str	r2, [r3, #0]
    }
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	4618      	mov	r0, r3
 801365c:	3710      	adds	r7, #16
 801365e:	46bd      	mov	sp, r7
 8013660:	bd80      	pop	{r7, pc}
 8013662:	bf00      	nop
 8013664:	080287f4 	.word	0x080287f4

08013668 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8013668:	b580      	push	{r7, lr}
 801366a:	b086      	sub	sp, #24
 801366c:	af02      	add	r7, sp, #8
 801366e:	60f8      	str	r0, [r7, #12]
 8013670:	60b9      	str	r1, [r7, #8]
 8013672:	607a      	str	r2, [r7, #4]
 8013674:	603b      	str	r3, [r7, #0]
 8013676:	68f8      	ldr	r0, [r7, #12]
 8013678:	8bbb      	ldrh	r3, [r7, #28]
 801367a:	9301      	str	r3, [sp, #4]
 801367c:	8b3b      	ldrh	r3, [r7, #24]
 801367e:	9300      	str	r3, [sp, #0]
 8013680:	683b      	ldr	r3, [r7, #0]
 8013682:	687a      	ldr	r2, [r7, #4]
 8013684:	68b9      	ldr	r1, [r7, #8]
 8013686:	f7ff ffd3 	bl	8013630 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801368a:	4a04      	ldr	r2, [pc, #16]	; (801369c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	601a      	str	r2, [r3, #0]
    }
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	4618      	mov	r0, r3
 8013694:	3710      	adds	r7, #16
 8013696:	46bd      	mov	sp, r7
 8013698:	bd80      	pop	{r7, pc}
 801369a:	bf00      	nop
 801369c:	08028520 	.word	0x08028520

080136a0 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80136a0:	b480      	push	{r7}
 80136a2:	b083      	sub	sp, #12
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
 80136a8:	4a04      	ldr	r2, [pc, #16]	; (80136bc <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	601a      	str	r2, [r3, #0]
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	4618      	mov	r0, r3
 80136b2:	370c      	adds	r7, #12
 80136b4:	46bd      	mov	sp, r7
 80136b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ba:	4770      	bx	lr
 80136bc:	08028508 	.word	0x08028508

080136c0 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b082      	sub	sp, #8
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	4618      	mov	r0, r3
 80136cc:	f7ff ffe8 	bl	80136a0 <_ZN8touchgfx15TouchControllerC1Ev>
 80136d0:	4a03      	ldr	r2, [pc, #12]	; (80136e0 <_ZN20STM32TouchControllerC1Ev+0x20>)
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	601a      	str	r2, [r3, #0]
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	4618      	mov	r0, r3
 80136da:	3708      	adds	r7, #8
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd80      	pop	{r7, pc}
 80136e0:	080284f0 	.word	0x080284f0

080136e4 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 80136e4:	b590      	push	{r4, r7, lr}
 80136e6:	b085      	sub	sp, #20
 80136e8:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80136ea:	f7fd fbe7 	bl	8010ebc <_ZN14BitmapDatabase11getInstanceEv>
 80136ee:	4604      	mov	r4, r0
 80136f0:	f7fd fbee 	bl	8010ed0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80136f4:	4603      	mov	r3, r0
 80136f6:	4619      	mov	r1, r3
 80136f8:	2300      	movs	r3, #0
 80136fa:	9300      	str	r3, [sp, #0]
 80136fc:	2300      	movs	r3, #0
 80136fe:	2200      	movs	r2, #0
 8013700:	4620      	mov	r0, r4
 8013702:	f007 fd43 	bl	801b18c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 8013706:	4809      	ldr	r0, [pc, #36]	; (801372c <touchgfx_init+0x48>)
 8013708:	f7ff fd70 	bl	80131ec <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 801370c:	2000      	movs	r0, #0
 801370e:	f7fd fc03 	bl	8010f18 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 8013712:	4807      	ldr	r0, [pc, #28]	; (8013730 <touchgfx_init+0x4c>)
 8013714:	f007 fc88 	bl	801b028 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 8013718:	f7ff fedc 	bl	80134d4 <_ZN12FrontendHeap11getInstanceEv>
 801371c:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 801371e:	4805      	ldr	r0, [pc, #20]	; (8013734 <touchgfx_init+0x50>)
 8013720:	f7fe ffda 	bl	80126d8 <_ZN11TouchGFXHAL10initializeEv>
}
 8013724:	bf00      	nop
 8013726:	370c      	adds	r7, #12
 8013728:	46bd      	mov	sp, r7
 801372a:	bd90      	pop	{r4, r7, pc}
 801372c:	2000b248 	.word	0x2000b248
 8013730:	2000004c 	.word	0x2000004c
 8013734:	2000b24c 	.word	0x2000b24c

08013738 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8013738:	b580      	push	{r7, lr}
 801373a:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 801373c:	4802      	ldr	r0, [pc, #8]	; (8013748 <touchgfx_taskEntry+0x10>)
 801373e:	f001 ff16 	bl	801556e <_ZN8touchgfx3HAL9taskEntryEv>
}
 8013742:	bf00      	nop
 8013744:	bd80      	pop	{r7, pc}
 8013746:	bf00      	nop
 8013748:	2000b24c 	.word	0x2000b24c

0801374c <_ZN8touchgfx9PartitionINS_4meta8TypeListI22TestGirouettePresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 801374c:	b580      	push	{r7, lr}
 801374e:	b082      	sub	sp, #8
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	4618      	mov	r0, r3
 8013758:	f000 fbfa 	bl	8013f50 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801375c:	4a03      	ldr	r2, [pc, #12]	; (801376c <_ZN8touchgfx9PartitionINS_4meta8TypeListI22TestGirouettePresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	601a      	str	r2, [r3, #0]
    {
    }
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	4618      	mov	r0, r3
 8013766:	3708      	adds	r7, #8
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}
 801376c:	0802879c 	.word	0x0802879c

08013770 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22TestGirouettePresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8013770:	b580      	push	{r7, lr}
 8013772:	b082      	sub	sp, #8
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
    {
    }
 8013778:	4a05      	ldr	r2, [pc, #20]	; (8013790 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22TestGirouettePresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	601a      	str	r2, [r3, #0]
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	4618      	mov	r0, r3
 8013782:	f000 fbe3 	bl	8013f4c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	4618      	mov	r0, r3
 801378a:	3708      	adds	r7, #8
 801378c:	46bd      	mov	sp, r7
 801378e:	bd80      	pop	{r7, pc}
 8013790:	0802879c 	.word	0x0802879c

08013794 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22TestGirouettePresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8013794:	b580      	push	{r7, lr}
 8013796:	b082      	sub	sp, #8
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
    }
 801379c:	6878      	ldr	r0, [r7, #4]
 801379e:	f7ff ffe7 	bl	8013770 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22TestGirouettePresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80137a2:	2118      	movs	r1, #24
 80137a4:	6878      	ldr	r0, [r7, #4]
 80137a6:	f011 fa2c 	bl	8024c02 <_ZdlPvj>
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	4618      	mov	r0, r3
 80137ae:	3708      	adds	r7, #8
 80137b0:	46bd      	mov	sp, r7
 80137b2:	bd80      	pop	{r7, pc}

080137b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24TestOrientationVoileViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b082      	sub	sp, #8
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	4618      	mov	r0, r3
 80137c0:	f000 fbc6 	bl	8013f50 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80137c4:	4a03      	ldr	r2, [pc, #12]	; (80137d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24TestOrientationVoileViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	601a      	str	r2, [r3, #0]
    }
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	4618      	mov	r0, r3
 80137ce:	3708      	adds	r7, #8
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}
 80137d4:	08028768 	.word	0x08028768

080137d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24TestOrientationVoileViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 80137d8:	b580      	push	{r7, lr}
 80137da:	b082      	sub	sp, #8
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
    }
 80137e0:	4a05      	ldr	r2, [pc, #20]	; (80137f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24TestOrientationVoileViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	601a      	str	r2, [r3, #0]
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	4618      	mov	r0, r3
 80137ea:	f000 fbaf 	bl	8013f4c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	4618      	mov	r0, r3
 80137f2:	3708      	adds	r7, #8
 80137f4:	46bd      	mov	sp, r7
 80137f6:	bd80      	pop	{r7, pc}
 80137f8:	08028768 	.word	0x08028768

080137fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI24TestOrientationVoileViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b082      	sub	sp, #8
 8013800:	af00      	add	r7, sp, #0
 8013802:	6078      	str	r0, [r7, #4]
    }
 8013804:	6878      	ldr	r0, [r7, #4]
 8013806:	f7ff ffe7 	bl	80137d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24TestOrientationVoileViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801380a:	f242 0150 	movw	r1, #8272	; 0x2050
 801380e:	6878      	ldr	r0, [r7, #4]
 8013810:	f011 f9f7 	bl	8024c02 <_ZdlPvj>
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	4618      	mov	r0, r3
 8013818:	3708      	adds	r7, #8
 801381a:	46bd      	mov	sp, r7
 801381c:	bd80      	pop	{r7, pc}
	...

08013820 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8013820:	b580      	push	{r7, lr}
 8013822:	b082      	sub	sp, #8
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	4618      	mov	r0, r3
 801382c:	f000 fb90 	bl	8013f50 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013830:	4a03      	ldr	r2, [pc, #12]	; (8013840 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	601a      	str	r2, [r3, #0]
    }
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	4618      	mov	r0, r3
 801383a:	3708      	adds	r7, #8
 801383c:	46bd      	mov	sp, r7
 801383e:	bd80      	pop	{r7, pc}
 8013840:	08028734 	.word	0x08028734

08013844 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
    virtual ~Partition()
 8013844:	b580      	push	{r7, lr}
 8013846:	b082      	sub	sp, #8
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
    }
 801384c:	4a05      	ldr	r2, [pc, #20]	; (8013864 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	601a      	str	r2, [r3, #0]
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	4618      	mov	r0, r3
 8013856:	f000 fb79 	bl	8013f4c <_ZN8touchgfx17AbstractPartitionD1Ev>
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	4618      	mov	r0, r3
 801385e:	3708      	adds	r7, #8
 8013860:	46bd      	mov	sp, r7
 8013862:	bd80      	pop	{r7, pc}
 8013864:	08028734 	.word	0x08028734

08013868 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
    virtual ~Partition()
 8013868:	b580      	push	{r7, lr}
 801386a:	b082      	sub	sp, #8
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
    }
 8013870:	6878      	ldr	r0, [r7, #4]
 8013872:	f7ff ffe7 	bl	8013844 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8013876:	215c      	movs	r1, #92	; 0x5c
 8013878:	6878      	ldr	r0, [r7, #4]
 801387a:	f011 f9c2 	bl	8024c02 <_ZdlPvj>
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	4618      	mov	r0, r3
 8013882:	3708      	adds	r7, #8
 8013884:	46bd      	mov	sp, r7
 8013886:	bd80      	pop	{r7, pc}

08013888 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8013888:	b580      	push	{r7, lr}
 801388a:	b082      	sub	sp, #8
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
 8013890:	4a11      	ldr	r2, [pc, #68]	; (80138d8 <_ZN12FrontendHeapD1Ev+0x50>)
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	601a      	str	r2, [r3, #0]
 8013896:	687a      	ldr	r2, [r7, #4]
 8013898:	f242 03d8 	movw	r3, #8408	; 0x20d8
 801389c:	4413      	add	r3, r2
 801389e:	4618      	mov	r0, r3
 80138a0:	f7fd fbf0 	bl	8011084 <_ZN19FrontendApplicationD1Ev>
 80138a4:	687a      	ldr	r2, [r7, #4]
 80138a6:	f242 037c 	movw	r3, #8316	; 0x207c
 80138aa:	4413      	add	r3, r2
 80138ac:	4618      	mov	r0, r3
 80138ae:	f7ff ffc9 	bl	8013844 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	332c      	adds	r3, #44	; 0x2c
 80138b6:	4618      	mov	r0, r3
 80138b8:	f7ff ff8e 	bl	80137d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24TestOrientationVoileViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	3314      	adds	r3, #20
 80138c0:	4618      	mov	r0, r3
 80138c2:	f7ff ff55 	bl	8013770 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22TestGirouettePresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	4618      	mov	r0, r3
 80138ca:	f7ff fe1d 	bl	8013508 <_ZN16FrontendHeapBaseD1Ev>
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	4618      	mov	r0, r3
 80138d2:	3708      	adds	r7, #8
 80138d4:	46bd      	mov	sp, r7
 80138d6:	bd80      	pop	{r7, pc}
 80138d8:	08028720 	.word	0x08028720

080138dc <_ZN12FrontendHeapD0Ev>:
 80138dc:	b580      	push	{r7, lr}
 80138de:	b082      	sub	sp, #8
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
 80138e4:	6878      	ldr	r0, [r7, #4]
 80138e6:	f7ff ffcf 	bl	8013888 <_ZN12FrontendHeapD1Ev>
 80138ea:	f242 212c 	movw	r1, #8748	; 0x222c
 80138ee:	6878      	ldr	r0, [r7, #4]
 80138f0:	f011 f987 	bl	8024c02 <_ZdlPvj>
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	4618      	mov	r0, r3
 80138f8:	3708      	adds	r7, #8
 80138fa:	46bd      	mov	sp, r7
 80138fc:	bd80      	pop	{r7, pc}
	...

08013900 <_Z41__static_initialization_and_destruction_0ii>:
 8013900:	b580      	push	{r7, lr}
 8013902:	b084      	sub	sp, #16
 8013904:	af02      	add	r7, sp, #8
 8013906:	6078      	str	r0, [r7, #4]
 8013908:	6039      	str	r1, [r7, #0]
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	2b01      	cmp	r3, #1
 801390e:	d119      	bne.n	8013944 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8013910:	683b      	ldr	r3, [r7, #0]
 8013912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013916:	4293      	cmp	r3, r2
 8013918:	d114      	bne.n	8013944 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 801391a:	4818      	ldr	r0, [pc, #96]	; (801397c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801391c:	f7ff fed0 	bl	80136c0 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8013920:	4817      	ldr	r0, [pc, #92]	; (8013980 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8013922:	f7ff f965 	bl	8012bf0 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8013926:	4817      	ldr	r0, [pc, #92]	; (8013984 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013928:	f009 fe56 	bl	801d5d8 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 801392c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8013930:	9301      	str	r3, [sp, #4]
 8013932:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8013936:	9300      	str	r3, [sp, #0]
 8013938:	4b10      	ldr	r3, [pc, #64]	; (801397c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801393a:	4a12      	ldr	r2, [pc, #72]	; (8013984 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801393c:	4910      	ldr	r1, [pc, #64]	; (8013980 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801393e:	4812      	ldr	r0, [pc, #72]	; (8013988 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8013940:	f7ff fe92 	bl	8013668 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d113      	bne.n	8013972 <_Z41__static_initialization_and_destruction_0ii+0x72>
 801394a:	683b      	ldr	r3, [r7, #0]
 801394c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013950:	4293      	cmp	r3, r2
 8013952:	d10e      	bne.n	8013972 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8013954:	480c      	ldr	r0, [pc, #48]	; (8013988 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8013956:	f7fe ff25 	bl	80127a4 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 801395a:	480c      	ldr	r0, [pc, #48]	; (801398c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 801395c:	f7f5 fed2 	bl	8009704 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8013960:	4808      	ldr	r0, [pc, #32]	; (8013984 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013962:	f7ff fe43 	bl	80135ec <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8013966:	4806      	ldr	r0, [pc, #24]	; (8013980 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8013968:	f7ff f96c 	bl	8012c44 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 801396c:	4803      	ldr	r0, [pc, #12]	; (801397c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801396e:	f7fe fc83 	bl	8012278 <_ZN20STM32TouchControllerD1Ev>
}
 8013972:	bf00      	nop
 8013974:	3708      	adds	r7, #8
 8013976:	46bd      	mov	sp, r7
 8013978:	bd80      	pop	{r7, pc}
 801397a:	bf00      	nop
 801397c:	2000a5cc 	.word	0x2000a5cc
 8013980:	2000a5d0 	.word	0x2000a5d0
 8013984:	2000b1f0 	.word	0x2000b1f0
 8013988:	2000b24c 	.word	0x2000b24c
 801398c:	2000004c 	.word	0x2000004c

08013990 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8013990:	b480      	push	{r7}
 8013992:	b083      	sub	sp, #12
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8013998:	2301      	movs	r3, #1
    }
 801399a:	4618      	mov	r0, r3
 801399c:	370c      	adds	r7, #12
 801399e:	46bd      	mov	sp, r7
 80139a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a4:	4770      	bx	lr

080139a6 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 80139a6:	b480      	push	{r7}
 80139a8:	b083      	sub	sp, #12
 80139aa:	af00      	add	r7, sp, #0
 80139ac:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80139ae:	2354      	movs	r3, #84	; 0x54
    }
 80139b0:	4618      	mov	r0, r3
 80139b2:	370c      	adds	r7, #12
 80139b4:	46bd      	mov	sp, r7
 80139b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ba:	4770      	bx	lr

080139bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 80139bc:	b480      	push	{r7}
 80139be:	b083      	sub	sp, #12
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
 80139c4:	460b      	mov	r3, r1
 80139c6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80139c8:	887b      	ldrh	r3, [r7, #2]
 80139ca:	2254      	movs	r2, #84	; 0x54
 80139cc:	fb02 f303 	mul.w	r3, r2, r3
 80139d0:	3308      	adds	r3, #8
 80139d2:	687a      	ldr	r2, [r7, #4]
 80139d4:	4413      	add	r3, r2
    }
 80139d6:	4618      	mov	r0, r3
 80139d8:	370c      	adds	r7, #12
 80139da:	46bd      	mov	sp, r7
 80139dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e0:	4770      	bx	lr

080139e2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 80139e2:	b480      	push	{r7}
 80139e4:	b083      	sub	sp, #12
 80139e6:	af00      	add	r7, sp, #0
 80139e8:	6078      	str	r0, [r7, #4]
 80139ea:	460b      	mov	r3, r1
 80139ec:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80139ee:	887b      	ldrh	r3, [r7, #2]
 80139f0:	2254      	movs	r2, #84	; 0x54
 80139f2:	fb02 f303 	mul.w	r3, r2, r3
 80139f6:	3308      	adds	r3, #8
 80139f8:	687a      	ldr	r2, [r7, #4]
 80139fa:	4413      	add	r3, r2
    }
 80139fc:	4618      	mov	r0, r3
 80139fe:	370c      	adds	r7, #12
 8013a00:	46bd      	mov	sp, r7
 8013a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a06:	4770      	bx	lr

08013a08 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI24TestOrientationVoileViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013a08:	b480      	push	{r7}
 8013a0a:	b083      	sub	sp, #12
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013a10:	2301      	movs	r3, #1
    }
 8013a12:	4618      	mov	r0, r3
 8013a14:	370c      	adds	r7, #12
 8013a16:	46bd      	mov	sp, r7
 8013a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1c:	4770      	bx	lr

08013a1e <_ZN8touchgfx9PartitionINS_4meta8TypeListI24TestOrientationVoileViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8013a1e:	b480      	push	{r7}
 8013a20:	b083      	sub	sp, #12
 8013a22:	af00      	add	r7, sp, #0
 8013a24:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013a26:	f242 0348 	movw	r3, #8264	; 0x2048
    }
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	370c      	adds	r7, #12
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a34:	4770      	bx	lr

08013a36 <_ZN8touchgfx9PartitionINS_4meta8TypeListI24TestOrientationVoileViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013a36:	b480      	push	{r7}
 8013a38:	b083      	sub	sp, #12
 8013a3a:	af00      	add	r7, sp, #0
 8013a3c:	6078      	str	r0, [r7, #4]
 8013a3e:	460b      	mov	r3, r1
 8013a40:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013a42:	887b      	ldrh	r3, [r7, #2]
 8013a44:	f242 0248 	movw	r2, #8264	; 0x2048
 8013a48:	fb02 f303 	mul.w	r3, r2, r3
 8013a4c:	3308      	adds	r3, #8
 8013a4e:	687a      	ldr	r2, [r7, #4]
 8013a50:	4413      	add	r3, r2
    }
 8013a52:	4618      	mov	r0, r3
 8013a54:	370c      	adds	r7, #12
 8013a56:	46bd      	mov	sp, r7
 8013a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5c:	4770      	bx	lr

08013a5e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI24TestOrientationVoileViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8013a5e:	b480      	push	{r7}
 8013a60:	b083      	sub	sp, #12
 8013a62:	af00      	add	r7, sp, #0
 8013a64:	6078      	str	r0, [r7, #4]
 8013a66:	460b      	mov	r3, r1
 8013a68:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013a6a:	887b      	ldrh	r3, [r7, #2]
 8013a6c:	f242 0248 	movw	r2, #8264	; 0x2048
 8013a70:	fb02 f303 	mul.w	r3, r2, r3
 8013a74:	3308      	adds	r3, #8
 8013a76:	687a      	ldr	r2, [r7, #4]
 8013a78:	4413      	add	r3, r2
    }
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	370c      	adds	r7, #12
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a84:	4770      	bx	lr

08013a86 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI22TestGirouettePresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013a86:	b480      	push	{r7}
 8013a88:	b083      	sub	sp, #12
 8013a8a:	af00      	add	r7, sp, #0
 8013a8c:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013a8e:	2301      	movs	r3, #1
    }
 8013a90:	4618      	mov	r0, r3
 8013a92:	370c      	adds	r7, #12
 8013a94:	46bd      	mov	sp, r7
 8013a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9a:	4770      	bx	lr

08013a9c <_ZN8touchgfx9PartitionINS_4meta8TypeListI22TestGirouettePresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8013a9c:	b480      	push	{r7}
 8013a9e:	b083      	sub	sp, #12
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013aa4:	2310      	movs	r3, #16
    }
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	370c      	adds	r7, #12
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab0:	4770      	bx	lr

08013ab2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22TestGirouettePresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013ab2:	b480      	push	{r7}
 8013ab4:	b083      	sub	sp, #12
 8013ab6:	af00      	add	r7, sp, #0
 8013ab8:	6078      	str	r0, [r7, #4]
 8013aba:	460b      	mov	r3, r1
 8013abc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013abe:	887b      	ldrh	r3, [r7, #2]
 8013ac0:	011b      	lsls	r3, r3, #4
 8013ac2:	3308      	adds	r3, #8
 8013ac4:	687a      	ldr	r2, [r7, #4]
 8013ac6:	4413      	add	r3, r2
    }
 8013ac8:	4618      	mov	r0, r3
 8013aca:	370c      	adds	r7, #12
 8013acc:	46bd      	mov	sp, r7
 8013ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad2:	4770      	bx	lr

08013ad4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI22TestGirouettePresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8013ad4:	b480      	push	{r7}
 8013ad6:	b083      	sub	sp, #12
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	6078      	str	r0, [r7, #4]
 8013adc:	460b      	mov	r3, r1
 8013ade:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013ae0:	887b      	ldrh	r3, [r7, #2]
 8013ae2:	011b      	lsls	r3, r3, #4
 8013ae4:	3308      	adds	r3, #8
 8013ae6:	687a      	ldr	r2, [r7, #4]
 8013ae8:	4413      	add	r3, r2
    }
 8013aea:	4618      	mov	r0, r3
 8013aec:	370c      	adds	r7, #12
 8013aee:	46bd      	mov	sp, r7
 8013af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af4:	4770      	bx	lr

08013af6 <_GLOBAL__sub_I_touchgfx_init>:
 8013af6:	b580      	push	{r7, lr}
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013afe:	2001      	movs	r0, #1
 8013b00:	f7ff fefe 	bl	8013900 <_Z41__static_initialization_and_destruction_0ii>
 8013b04:	bd80      	pop	{r7, pc}

08013b06 <_GLOBAL__sub_D_touchgfx_init>:
 8013b06:	b580      	push	{r7, lr}
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013b0e:	2000      	movs	r0, #0
 8013b10:	f7ff fef6 	bl	8013900 <_Z41__static_initialization_and_destruction_0ii>
 8013b14:	bd80      	pop	{r7, pc}

08013b16 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8013b16:	b580      	push	{r7, lr}
 8013b18:	b082      	sub	sp, #8
 8013b1a:	af00      	add	r7, sp, #0
 8013b1c:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	3318      	adds	r3, #24
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	6878      	ldr	r0, [r7, #4]
 8013b28:	4798      	blx	r3
    }
 8013b2a:	bf00      	nop
 8013b2c:	3708      	adds	r7, #8
 8013b2e:	46bd      	mov	sp, r7
 8013b30:	bd80      	pop	{r7, pc}

08013b32 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8013b32:	b480      	push	{r7}
 8013b34:	b083      	sub	sp, #12
 8013b36:	af00      	add	r7, sp, #0
 8013b38:	6078      	str	r0, [r7, #4]
 8013b3a:	460b      	mov	r3, r1
 8013b3c:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	78fa      	ldrb	r2, [r7, #3]
 8013b42:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8013b46:	bf00      	nop
 8013b48:	370c      	adds	r7, #12
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b50:	4770      	bx	lr

08013b52 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8013b52:	b480      	push	{r7}
 8013b54:	b083      	sub	sp, #12
 8013b56:	af00      	add	r7, sp, #0
 8013b58:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8013b60:	3301      	adds	r3, #1
 8013b62:	b2da      	uxtb	r2, r3
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8013b6a:	bf00      	nop
 8013b6c:	370c      	adds	r7, #12
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b74:	4770      	bx	lr
	...

08013b78 <__NVIC_EnableIRQ>:
{
 8013b78:	b480      	push	{r7}
 8013b7a:	b083      	sub	sp, #12
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	4603      	mov	r3, r0
 8013b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	db0d      	blt.n	8013ba6 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013b8e:	b2db      	uxtb	r3, r3
 8013b90:	f003 021f 	and.w	r2, r3, #31
 8013b94:	4907      	ldr	r1, [pc, #28]	; (8013bb4 <__NVIC_EnableIRQ+0x3c>)
 8013b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013b9a:	095b      	lsrs	r3, r3, #5
 8013b9c:	2001      	movs	r0, #1
 8013b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8013ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8013ba6:	bf00      	nop
 8013ba8:	370c      	adds	r7, #12
 8013baa:	46bd      	mov	sp, r7
 8013bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb0:	4770      	bx	lr
 8013bb2:	bf00      	nop
 8013bb4:	e000e100 	.word	0xe000e100

08013bb8 <__NVIC_DisableIRQ>:
{
 8013bb8:	b480      	push	{r7}
 8013bba:	b083      	sub	sp, #12
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	db12      	blt.n	8013bf0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013bce:	b2db      	uxtb	r3, r3
 8013bd0:	f003 021f 	and.w	r2, r3, #31
 8013bd4:	4909      	ldr	r1, [pc, #36]	; (8013bfc <__NVIC_DisableIRQ+0x44>)
 8013bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013bda:	095b      	lsrs	r3, r3, #5
 8013bdc:	2001      	movs	r0, #1
 8013bde:	fa00 f202 	lsl.w	r2, r0, r2
 8013be2:	3320      	adds	r3, #32
 8013be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013be8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013bec:	f3bf 8f6f 	isb	sy
}
 8013bf0:	bf00      	nop
 8013bf2:	370c      	adds	r7, #12
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bfa:	4770      	bx	lr
 8013bfc:	e000e100 	.word	0xe000e100

08013c00 <__NVIC_SetPriority>:
{
 8013c00:	b480      	push	{r7}
 8013c02:	b083      	sub	sp, #12
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	4603      	mov	r3, r0
 8013c08:	6039      	str	r1, [r7, #0]
 8013c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	db0c      	blt.n	8013c2e <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013c14:	683b      	ldr	r3, [r7, #0]
 8013c16:	b2db      	uxtb	r3, r3
 8013c18:	4a0e      	ldr	r2, [pc, #56]	; (8013c54 <__NVIC_SetPriority+0x54>)
 8013c1a:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8013c1e:	4608      	mov	r0, r1
 8013c20:	011b      	lsls	r3, r3, #4
 8013c22:	b2d9      	uxtb	r1, r3
 8013c24:	1813      	adds	r3, r2, r0
 8013c26:	460a      	mov	r2, r1
 8013c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8013c2c:	e00c      	b.n	8013c48 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	b2da      	uxtb	r2, r3
 8013c32:	4909      	ldr	r1, [pc, #36]	; (8013c58 <__NVIC_SetPriority+0x58>)
 8013c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c38:	b2db      	uxtb	r3, r3
 8013c3a:	f003 030f 	and.w	r3, r3, #15
 8013c3e:	3b04      	subs	r3, #4
 8013c40:	0112      	lsls	r2, r2, #4
 8013c42:	b2d2      	uxtb	r2, r2
 8013c44:	440b      	add	r3, r1
 8013c46:	761a      	strb	r2, [r3, #24]
}
 8013c48:	bf00      	nop
 8013c4a:	370c      	adds	r7, #12
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c52:	4770      	bx	lr
 8013c54:	e000e100 	.word	0xe000e100
 8013c58:	e000ed00 	.word	0xe000ed00

08013c5c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8013c5c:	b5b0      	push	{r4, r5, r7, lr}
 8013c5e:	b082      	sub	sp, #8
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	4618      	mov	r0, r3
 8013c68:	f001 ff46 	bl	8015af8 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 8013c6c:	687d      	ldr	r5, [r7, #4]
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	334c      	adds	r3, #76	; 0x4c
 8013c74:	681c      	ldr	r4, [r3, #0]
 8013c76:	f005 f895 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	4619      	mov	r1, r3
 8013c7e:	4628      	mov	r0, r5
 8013c80:	47a0      	blx	r4

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0xC005FA00, (void*)0);
 8013c82:	6878      	ldr	r0, [r7, #4]
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	3374      	adds	r3, #116	; 0x74
 8013c8a:	681c      	ldr	r4, [r3, #0]
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	4a06      	ldr	r2, [pc, #24]	; (8013ca8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 8013c90:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8013c94:	47a0      	blx	r4
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     *
     * Setting to false to increase performance when using double buffering
     */
    lockDMAToFrontPorch(false);
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	2100      	movs	r1, #0
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	f7ff ff49 	bl	8013b32 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8013ca0:	bf00      	nop
 8013ca2:	3708      	adds	r7, #8
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8013ca8:	c005fa00 	.word	0xc005fa00

08013cac <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b082      	sub	sp, #8
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8013cb4:	2109      	movs	r1, #9
 8013cb6:	205a      	movs	r0, #90	; 0x5a
 8013cb8:	f7ff ffa2 	bl	8013c00 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8013cbc:	2109      	movs	r1, #9
 8013cbe:	2058      	movs	r0, #88	; 0x58
 8013cc0:	f7ff ff9e 	bl	8013c00 <__NVIC_SetPriority>
}
 8013cc4:	bf00      	nop
 8013cc6:	3708      	adds	r7, #8
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	bd80      	pop	{r7, pc}

08013ccc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b082      	sub	sp, #8
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8013cd4:	205a      	movs	r0, #90	; 0x5a
 8013cd6:	f7ff ff4f 	bl	8013b78 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8013cda:	2058      	movs	r0, #88	; 0x58
 8013cdc:	f7ff ff4c 	bl	8013b78 <__NVIC_EnableIRQ>
}
 8013ce0:	bf00      	nop
 8013ce2:	3708      	adds	r7, #8
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}

08013ce8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b082      	sub	sp, #8
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8013cf0:	205a      	movs	r0, #90	; 0x5a
 8013cf2:	f7ff ff61 	bl	8013bb8 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8013cf6:	2058      	movs	r0, #88	; 0x58
 8013cf8:	f7ff ff5e 	bl	8013bb8 <__NVIC_DisableIRQ>
}
 8013cfc:	bf00      	nop
 8013cfe:	3708      	adds	r7, #8
 8013d00:	46bd      	mov	sp, r7
 8013d02:	bd80      	pop	{r7, pc}

08013d04 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8013d04:	b480      	push	{r7}
 8013d06:	b083      	sub	sp, #12
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8013d0c:	4b11      	ldr	r3, [pc, #68]	; (8013d54 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013d0e:	68db      	ldr	r3, [r3, #12]
 8013d10:	b29b      	uxth	r3, r3
 8013d12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013d16:	b29b      	uxth	r3, r3
 8013d18:	3b01      	subs	r3, #1
 8013d1a:	b29a      	uxth	r2, r3
 8013d1c:	4b0e      	ldr	r3, [pc, #56]	; (8013d58 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8013d1e:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8013d20:	4b0c      	ldr	r3, [pc, #48]	; (8013d54 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013d22:	691b      	ldr	r3, [r3, #16]
 8013d24:	b29b      	uxth	r3, r3
 8013d26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013d2a:	b29b      	uxth	r3, r3
 8013d2c:	3b01      	subs	r3, #1
 8013d2e:	b29a      	uxth	r2, r3
 8013d30:	4b0a      	ldr	r3, [pc, #40]	; (8013d5c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8013d32:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8013d34:	4b08      	ldr	r3, [pc, #32]	; (8013d58 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8013d36:	881a      	ldrh	r2, [r3, #0]
 8013d38:	4b06      	ldr	r3, [pc, #24]	; (8013d54 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013d3a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8013d3c:	4b05      	ldr	r3, [pc, #20]	; (8013d54 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d40:	4a04      	ldr	r2, [pc, #16]	; (8013d54 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013d42:	f043 0301 	orr.w	r3, r3, #1
 8013d46:	6353      	str	r3, [r2, #52]	; 0x34
}
 8013d48:	bf00      	nop
 8013d4a:	370c      	adds	r7, #12
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d52:	4770      	bx	lr
 8013d54:	40016800 	.word	0x40016800
 8013d58:	2000b2c4 	.word	0x2000b2c4
 8013d5c:	2000b2c6 	.word	0x2000b2c6

08013d60 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8013d60:	b480      	push	{r7}
 8013d62:	b083      	sub	sp, #12
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8013d68:	4b03      	ldr	r3, [pc, #12]	; (8013d78 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8013d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	370c      	adds	r7, #12
 8013d70:	46bd      	mov	sp, r7
 8013d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d76:	4770      	bx	lr
 8013d78:	40016884 	.word	0x40016884

08013d7c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8013d7c:	b480      	push	{r7}
 8013d7e:	b083      	sub	sp, #12
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
 8013d84:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8013d86:	4a06      	ldr	r2, [pc, #24]	; (8013da0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8013d88:	683b      	ldr	r3, [r7, #0]
 8013d8a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8013d8c:	4b05      	ldr	r3, [pc, #20]	; (8013da4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8013d8e:	2201      	movs	r2, #1
 8013d90:	625a      	str	r2, [r3, #36]	; 0x24
}
 8013d92:	bf00      	nop
 8013d94:	370c      	adds	r7, #12
 8013d96:	46bd      	mov	sp, r7
 8013d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9c:	4770      	bx	lr
 8013d9e:	bf00      	nop
 8013da0:	40016884 	.word	0x40016884
 8013da4:	40016800 	.word	0x40016800

08013da8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b082      	sub	sp, #8
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
 8013db0:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	6839      	ldr	r1, [r7, #0]
 8013db6:	4618      	mov	r0, r3
 8013db8:	f001 fbaf 	bl	801551a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8013dbc:	bf00      	nop
 8013dbe:	3708      	adds	r7, #8
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	bd80      	pop	{r7, pc}

08013dc4 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b082      	sub	sp, #8
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8013dcc:	4b1a      	ldr	r3, [pc, #104]	; (8013e38 <HAL_LTDC_LineEventCallback+0x74>)
 8013dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dd0:	4a1a      	ldr	r2, [pc, #104]	; (8013e3c <HAL_LTDC_LineEventCallback+0x78>)
 8013dd2:	8812      	ldrh	r2, [r2, #0]
 8013dd4:	4293      	cmp	r3, r2
 8013dd6:	bf0c      	ite	eq
 8013dd8:	2301      	moveq	r3, #1
 8013dda:	2300      	movne	r3, #0
 8013ddc:	b2db      	uxtb	r3, r3
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d017      	beq.n	8013e12 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8013de2:	4b17      	ldr	r3, [pc, #92]	; (8013e40 <HAL_LTDC_LineEventCallback+0x7c>)
 8013de4:	881b      	ldrh	r3, [r3, #0]
 8013de6:	4619      	mov	r1, r3
 8013de8:	6878      	ldr	r0, [r7, #4]
 8013dea:	f7f0 fd77 	bl	80048dc <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8013dee:	f7f6 f915 	bl	800a01c <_ZN8touchgfx3HAL11getInstanceEv>
 8013df2:	4603      	mov	r3, r0
 8013df4:	4618      	mov	r0, r3
 8013df6:	f7ff feac 	bl	8013b52 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8013dfa:	f7fe fd61 	bl	80128c0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8013dfe:	f7f6 f90d 	bl	800a01c <_ZN8touchgfx3HAL11getInstanceEv>
 8013e02:	4603      	mov	r3, r0
 8013e04:	4618      	mov	r0, r3
 8013e06:	f002 f8ff 	bl	8016008 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8013e0a:	2000      	movs	r0, #0
 8013e0c:	f7fe fa56 	bl	80122bc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8013e10:	e00e      	b.n	8013e30 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8013e12:	4b0a      	ldr	r3, [pc, #40]	; (8013e3c <HAL_LTDC_LineEventCallback+0x78>)
 8013e14:	881b      	ldrh	r3, [r3, #0]
 8013e16:	4619      	mov	r1, r3
 8013e18:	6878      	ldr	r0, [r7, #4]
 8013e1a:	f7f0 fd5f 	bl	80048dc <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8013e1e:	2000      	movs	r0, #0
 8013e20:	f7fe fa57 	bl	80122d2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8013e24:	f7f6 f8fa 	bl	800a01c <_ZN8touchgfx3HAL11getInstanceEv>
 8013e28:	4603      	mov	r3, r0
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	f7ff fe73 	bl	8013b16 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8013e30:	bf00      	nop
 8013e32:	3708      	adds	r7, #8
 8013e34:	46bd      	mov	sp, r7
 8013e36:	bd80      	pop	{r7, pc}
 8013e38:	40016800 	.word	0x40016800
 8013e3c:	2000b2c4 	.word	0x2000b2c4
 8013e40:	2000b2c6 	.word	0x2000b2c6

08013e44 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8013e44:	8880      	ldrh	r0, [r0, #4]
 8013e46:	4770      	bx	lr

08013e48 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8013e48:	2300      	movs	r3, #0
 8013e4a:	8083      	strh	r3, [r0, #4]
 8013e4c:	4770      	bx	lr
	...

08013e50 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8013e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e52:	6803      	ldr	r3, [r0, #0]
 8013e54:	460e      	mov	r6, r1
 8013e56:	2100      	movs	r1, #0
 8013e58:	4605      	mov	r5, r0
 8013e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e5c:	4798      	blx	r3
 8013e5e:	4604      	mov	r4, r0
 8013e60:	682b      	ldr	r3, [r5, #0]
 8013e62:	4628      	mov	r0, r5
 8013e64:	1b34      	subs	r4, r6, r4
 8013e66:	6a1b      	ldr	r3, [r3, #32]
 8013e68:	b2a4      	uxth	r4, r4
 8013e6a:	4798      	blx	r3
 8013e6c:	88ab      	ldrh	r3, [r5, #4]
 8013e6e:	fbb4 f4f0 	udiv	r4, r4, r0
 8013e72:	42a3      	cmp	r3, r4
 8013e74:	d805      	bhi.n	8013e82 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8013e76:	4b0e      	ldr	r3, [pc, #56]	; (8013eb0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8013e78:	211e      	movs	r1, #30
 8013e7a:	4a0e      	ldr	r2, [pc, #56]	; (8013eb4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8013e7c:	480e      	ldr	r0, [pc, #56]	; (8013eb8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8013e7e:	f010 feeb 	bl	8024c58 <__assert_func>
 8013e82:	682b      	ldr	r3, [r5, #0]
 8013e84:	2100      	movs	r1, #0
 8013e86:	4628      	mov	r0, r5
 8013e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e8a:	4798      	blx	r3
 8013e8c:	682b      	ldr	r3, [r5, #0]
 8013e8e:	4607      	mov	r7, r0
 8013e90:	4628      	mov	r0, r5
 8013e92:	6a1b      	ldr	r3, [r3, #32]
 8013e94:	4798      	blx	r3
 8013e96:	1bf3      	subs	r3, r6, r7
 8013e98:	b29b      	uxth	r3, r3
 8013e9a:	fbb3 f2f0 	udiv	r2, r3, r0
 8013e9e:	fb02 3010 	mls	r0, r2, r0, r3
 8013ea2:	b118      	cbz	r0, 8013eac <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8013ea4:	4b05      	ldr	r3, [pc, #20]	; (8013ebc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8013ea6:	211f      	movs	r1, #31
 8013ea8:	4a02      	ldr	r2, [pc, #8]	; (8013eb4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8013eaa:	e7e7      	b.n	8013e7c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8013eac:	4620      	mov	r0, r4
 8013eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013eb0:	080288a0 	.word	0x080288a0
 8013eb4:	08028a0e 	.word	0x08028a0e
 8013eb8:	080288b5 	.word	0x080288b5
 8013ebc:	080288e3 	.word	0x080288e3

08013ec0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8013ec0:	b538      	push	{r3, r4, r5, lr}
 8013ec2:	6803      	ldr	r3, [r0, #0]
 8013ec4:	460d      	mov	r5, r1
 8013ec6:	4604      	mov	r4, r0
 8013ec8:	6a1b      	ldr	r3, [r3, #32]
 8013eca:	4798      	blx	r3
 8013ecc:	4285      	cmp	r5, r0
 8013ece:	d905      	bls.n	8013edc <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8013ed0:	4b0c      	ldr	r3, [pc, #48]	; (8013f04 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8013ed2:	212f      	movs	r1, #47	; 0x2f
 8013ed4:	4a0c      	ldr	r2, [pc, #48]	; (8013f08 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8013ed6:	480d      	ldr	r0, [pc, #52]	; (8013f0c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8013ed8:	f010 febe 	bl	8024c58 <__assert_func>
 8013edc:	6823      	ldr	r3, [r4, #0]
 8013ede:	4620      	mov	r0, r4
 8013ee0:	88a5      	ldrh	r5, [r4, #4]
 8013ee2:	69db      	ldr	r3, [r3, #28]
 8013ee4:	4798      	blx	r3
 8013ee6:	4285      	cmp	r5, r0
 8013ee8:	d303      	bcc.n	8013ef2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8013eea:	4b09      	ldr	r3, [pc, #36]	; (8013f10 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8013eec:	2130      	movs	r1, #48	; 0x30
 8013eee:	4a06      	ldr	r2, [pc, #24]	; (8013f08 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8013ef0:	e7f1      	b.n	8013ed6 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8013ef2:	6823      	ldr	r3, [r4, #0]
 8013ef4:	4620      	mov	r0, r4
 8013ef6:	88a1      	ldrh	r1, [r4, #4]
 8013ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013efa:	4798      	blx	r3
 8013efc:	88a3      	ldrh	r3, [r4, #4]
 8013efe:	3301      	adds	r3, #1
 8013f00:	80a3      	strh	r3, [r4, #4]
 8013f02:	bd38      	pop	{r3, r4, r5, pc}
 8013f04:	0802895d 	.word	0x0802895d
 8013f08:	08028a51 	.word	0x08028a51
 8013f0c:	080288b5 	.word	0x080288b5
 8013f10:	08028974 	.word	0x08028974

08013f14 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8013f14:	b570      	push	{r4, r5, r6, lr}
 8013f16:	6803      	ldr	r3, [r0, #0]
 8013f18:	4616      	mov	r6, r2
 8013f1a:	4604      	mov	r4, r0
 8013f1c:	460d      	mov	r5, r1
 8013f1e:	6a1b      	ldr	r3, [r3, #32]
 8013f20:	4798      	blx	r3
 8013f22:	4286      	cmp	r6, r0
 8013f24:	d905      	bls.n	8013f32 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8013f26:	4b06      	ldr	r3, [pc, #24]	; (8013f40 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8013f28:	2139      	movs	r1, #57	; 0x39
 8013f2a:	4a06      	ldr	r2, [pc, #24]	; (8013f44 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8013f2c:	4806      	ldr	r0, [pc, #24]	; (8013f48 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8013f2e:	f010 fe93 	bl	8024c58 <__assert_func>
 8013f32:	6823      	ldr	r3, [r4, #0]
 8013f34:	4629      	mov	r1, r5
 8013f36:	4620      	mov	r0, r4
 8013f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f3e:	4718      	bx	r3
 8013f40:	0802895d 	.word	0x0802895d
 8013f44:	080289c4 	.word	0x080289c4
 8013f48:	080288b5 	.word	0x080288b5

08013f4c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8013f4c:	4770      	bx	lr
	...

08013f50 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8013f50:	4a02      	ldr	r2, [pc, #8]	; (8013f5c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8013f52:	6002      	str	r2, [r0, #0]
 8013f54:	2200      	movs	r2, #0
 8013f56:	8082      	strh	r2, [r0, #4]
 8013f58:	4770      	bx	lr
 8013f5a:	bf00      	nop
 8013f5c:	08028998 	.word	0x08028998

08013f60 <_ZN8touchgfx12DrawableListD1Ev>:
 8013f60:	4770      	bx	lr

08013f62 <_ZNK8touchgfx12DrawableList13getHorizontalEv>:
 8013f62:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8013f66:	4770      	bx	lr

08013f68 <_ZNK8touchgfx12DrawableList11getCircularEv>:
 8013f68:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8013f6c:	4770      	bx	lr

08013f6e <_ZNK8touchgfx12DrawableList11getItemSizeEv>:
 8013f6e:	f9b0 0034 	ldrsh.w	r0, [r0, #52]	; 0x34
 8013f72:	4770      	bx	lr

08013f74 <_ZNK8touchgfx12DrawableList15getDrawableSizeEv>:
 8013f74:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8013f76:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8013f78:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8013f7c:	b200      	sxth	r0, r0
 8013f7e:	4770      	bx	lr

08013f80 <_ZNK8touchgfx12DrawableList17getDrawableMarginEv>:
 8013f80:	f9b0 0036 	ldrsh.w	r0, [r0, #54]	; 0x36
 8013f84:	4770      	bx	lr

08013f86 <_ZN8touchgfx12DrawableListD0Ev>:
 8013f86:	b510      	push	{r4, lr}
 8013f88:	4604      	mov	r4, r0
 8013f8a:	214c      	movs	r1, #76	; 0x4c
 8013f8c:	f010 fe39 	bl	8024c02 <_ZdlPvj>
 8013f90:	4620      	mov	r0, r4
 8013f92:	bd10      	pop	{r4, pc}

08013f94 <_ZN8touchgfx12DrawableListC1Ev>:
 8013f94:	2101      	movs	r1, #1
 8013f96:	2200      	movs	r2, #0
 8013f98:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8013f9c:	490f      	ldr	r1, [pc, #60]	; (8013fdc <_ZN8touchgfx12DrawableListC1Ev+0x48>)
 8013f9e:	8082      	strh	r2, [r0, #4]
 8013fa0:	80c2      	strh	r2, [r0, #6]
 8013fa2:	8102      	strh	r2, [r0, #8]
 8013fa4:	8142      	strh	r2, [r0, #10]
 8013fa6:	8182      	strh	r2, [r0, #12]
 8013fa8:	81c2      	strh	r2, [r0, #14]
 8013faa:	8202      	strh	r2, [r0, #16]
 8013fac:	8242      	strh	r2, [r0, #18]
 8013fae:	61c2      	str	r2, [r0, #28]
 8013fb0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8013fb4:	6282      	str	r2, [r0, #40]	; 0x28
 8013fb6:	6001      	str	r1, [r0, #0]
 8013fb8:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8013fbc:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
 8013fc0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 8013fc4:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
 8013fc8:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8013fcc:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8013fd0:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8013fd4:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
 8013fd8:	4770      	bx	lr
 8013fda:	bf00      	nop
 8013fdc:	08028a98 	.word	0x08028a98

08013fe0 <_ZN8touchgfx12DrawableList15setDrawableSizeEss>:
 8013fe0:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8013fe4:	86c2      	strh	r2, [r0, #54]	; 0x36
 8013fe6:	8681      	strh	r1, [r0, #52]	; 0x34
 8013fe8:	4770      	bx	lr

08013fea <_ZNK8touchgfx12DrawableList16getNumberOfItemsEv>:
 8013fea:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 8013fee:	4770      	bx	lr

08013ff0 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv>:
 8013ff0:	b538      	push	{r3, r4, r5, lr}
 8013ff2:	4605      	mov	r5, r0
 8013ff4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8013ff6:	b308      	cbz	r0, 801403c <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x4c>
 8013ff8:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 8013ffc:	2a00      	cmp	r2, #0
 8013ffe:	dd21      	ble.n	8014044 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x54>
 8014000:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8014004:	b1db      	cbz	r3, 801403e <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x4e>
 8014006:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 801400a:	1e63      	subs	r3, r4, #1
 801400c:	1e54      	subs	r4, r2, #1
 801400e:	441c      	add	r4, r3
 8014010:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8014014:	fb94 f4f2 	sdiv	r4, r4, r2
 8014018:	3401      	adds	r4, #1
 801401a:	b224      	sxth	r4, r4
 801401c:	b923      	cbnz	r3, 8014028 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x38>
 801401e:	f9b5 3038 	ldrsh.w	r3, [r5, #56]	; 0x38
 8014022:	429c      	cmp	r4, r3
 8014024:	bfa8      	it	ge
 8014026:	461c      	movge	r4, r3
 8014028:	6803      	ldr	r3, [r0, #0]
 801402a:	68db      	ldr	r3, [r3, #12]
 801402c:	4798      	blx	r3
 801402e:	f9b5 3042 	ldrsh.w	r3, [r5, #66]	; 0x42
 8014032:	1ac0      	subs	r0, r0, r3
 8014034:	42a0      	cmp	r0, r4
 8014036:	bfa8      	it	ge
 8014038:	4620      	movge	r0, r4
 801403a:	b200      	sxth	r0, r0
 801403c:	bd38      	pop	{r3, r4, r5, pc}
 801403e:	f9b5 400a 	ldrsh.w	r4, [r5, #10]
 8014042:	e7e2      	b.n	801400a <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x1a>
 8014044:	2000      	movs	r0, #0
 8014046:	e7f9      	b.n	801403c <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x4c>

08014048 <_ZN8touchgfx12DrawableList9setOffsetEl>:
 8014048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801404c:	4604      	mov	r4, r0
 801404e:	460d      	mov	r5, r1
 8014050:	6321      	str	r1, [r4, #48]	; 0x30
 8014052:	f9b0 303a 	ldrsh.w	r3, [r0, #58]	; 0x3a
 8014056:	2b00      	cmp	r3, #0
 8014058:	f000 80ec 	beq.w	8014234 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ec>
 801405c:	f9b0 3038 	ldrsh.w	r3, [r0, #56]	; 0x38
 8014060:	2b00      	cmp	r3, #0
 8014062:	f000 80e7 	beq.w	8014234 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ec>
 8014066:	f9b0 3034 	ldrsh.w	r3, [r0, #52]	; 0x34
 801406a:	2b00      	cmp	r3, #0
 801406c:	f000 80e2 	beq.w	8014234 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ec>
 8014070:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8014072:	2800      	cmp	r0, #0
 8014074:	f000 80de 	beq.w	8014234 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ec>
 8014078:	6803      	ldr	r3, [r0, #0]
 801407a:	68db      	ldr	r3, [r3, #12]
 801407c:	4798      	blx	r3
 801407e:	2800      	cmp	r0, #0
 8014080:	f000 80d8 	beq.w	8014234 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ec>
 8014084:	2d00      	cmp	r5, #0
 8014086:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 801408a:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 801408e:	bfd8      	it	le
 8014090:	2300      	movle	r3, #0
 8014092:	f9b4 003a 	ldrsh.w	r0, [r4, #58]	; 0x3a
 8014096:	bfc1      	itttt	gt
 8014098:	fb95 f2f1 	sdivgt	r2, r5, r1
 801409c:	3201      	addgt	r2, #1
 801409e:	4253      	neggt	r3, r2
 80140a0:	fb01 5512 	mlsgt	r5, r1, r2, r5
 80140a4:	f1c1 0200 	rsb	r2, r1, #0
 80140a8:	bfc8      	it	gt
 80140aa:	b21b      	sxthgt	r3, r3
 80140ac:	42aa      	cmp	r2, r5
 80140ae:	bfa1      	itttt	ge
 80140b0:	fb95 f2f1 	sdivge	r2, r5, r1
 80140b4:	1a9b      	subge	r3, r3, r2
 80140b6:	fb01 5512 	mlsge	r5, r1, r2, r5
 80140ba:	b21b      	sxthge	r3, r3
 80140bc:	b167      	cbz	r7, 80140d8 <_ZN8touchgfx12DrawableList9setOffsetEl+0x90>
 80140be:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 80140c2:	fb93 f2f1 	sdiv	r2, r3, r1
 80140c6:	fb01 3312 	mls	r3, r1, r2, r3
 80140ca:	440b      	add	r3, r1
 80140cc:	fb93 f2f1 	sdiv	r2, r3, r1
 80140d0:	fb01 3312 	mls	r3, r1, r2, r3
 80140d4:	b21b      	sxth	r3, r3
 80140d6:	e004      	b.n	80140e2 <_ZN8touchgfx12DrawableList9setOffsetEl+0x9a>
 80140d8:	2b00      	cmp	r3, #0
 80140da:	da64      	bge.n	80141a6 <_ZN8touchgfx12DrawableList9setOffsetEl+0x15e>
 80140dc:	fb01 5513 	mls	r5, r1, r3, r5
 80140e0:	463b      	mov	r3, r7
 80140e2:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
 80140e6:	b1be      	cbz	r6, 8014118 <_ZN8touchgfx12DrawableList9setOffsetEl+0xd0>
 80140e8:	f9b4 e03c 	ldrsh.w	lr, [r4, #60]	; 0x3c
 80140ec:	459e      	cmp	lr, r3
 80140ee:	d068      	beq.n	80141c2 <_ZN8touchgfx12DrawableList9setOffsetEl+0x17a>
 80140f0:	2601      	movs	r6, #1
 80140f2:	4286      	cmp	r6, r0
 80140f4:	da67      	bge.n	80141c6 <_ZN8touchgfx12DrawableList9setOffsetEl+0x17e>
 80140f6:	eb0e 0106 	add.w	r1, lr, r6
 80140fa:	199a      	adds	r2, r3, r6
 80140fc:	b14f      	cbz	r7, 8014112 <_ZN8touchgfx12DrawableList9setOffsetEl+0xca>
 80140fe:	f9b4 c038 	ldrsh.w	ip, [r4, #56]	; 0x38
 8014102:	fb91 f8fc 	sdiv	r8, r1, ip
 8014106:	fb0c 1118 	mls	r1, ip, r8, r1
 801410a:	fb92 f8fc 	sdiv	r8, r2, ip
 801410e:	fb0c 2218 	mls	r2, ip, r8, r2
 8014112:	428b      	cmp	r3, r1
 8014114:	d151      	bne.n	80141ba <_ZN8touchgfx12DrawableList9setOffsetEl+0x172>
 8014116:	4276      	negs	r6, r6
 8014118:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
 801411c:	2700      	movs	r7, #0
 801411e:	b2ad      	uxth	r5, r5
 8014120:	f04f 0b01 	mov.w	fp, #1
 8014124:	1b92      	subs	r2, r2, r6
 8014126:	46ba      	mov	sl, r7
 8014128:	87a3      	strh	r3, [r4, #60]	; 0x3c
 801412a:	4402      	add	r2, r0
 801412c:	fb92 f1f0 	sdiv	r1, r2, r0
 8014130:	fb00 2011 	mls	r0, r0, r1, r2
 8014134:	87e0      	strh	r0, [r4, #62]	; 0x3e
 8014136:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	; 0x3a
 801413a:	42ba      	cmp	r2, r7
 801413c:	dd77      	ble.n	801422e <_ZN8touchgfx12DrawableList9setOffsetEl+0x1e6>
 801413e:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8014142:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8014144:	443b      	add	r3, r7
 8014146:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 801414a:	fb93 f8f2 	sdiv	r8, r3, r2
 801414e:	fb02 3818 	mls	r8, r2, r8, r3
 8014152:	6803      	ldr	r3, [r0, #0]
 8014154:	fa1f f888 	uxth.w	r8, r8
 8014158:	689b      	ldr	r3, [r3, #8]
 801415a:	4441      	add	r1, r8
 801415c:	b209      	sxth	r1, r1
 801415e:	4798      	blx	r3
 8014160:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014164:	4681      	mov	r9, r0
 8014166:	fa1f fe87 	uxth.w	lr, r7
 801416a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801416c:	f8b4 c034 	ldrh.w	ip, [r4, #52]	; 0x34
 8014170:	6802      	ldr	r2, [r0, #0]
 8014172:	b351      	cbz	r1, 80141ca <_ZN8touchgfx12DrawableList9setOffsetEl+0x182>
 8014174:	18e9      	adds	r1, r5, r3
 8014176:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8014178:	2200      	movs	r2, #0
 801417a:	fb1c 110e 	smlabb	r1, ip, lr, r1
 801417e:	b209      	sxth	r1, r1
 8014180:	4798      	blx	r3
 8014182:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
 8014186:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801418a:	443b      	add	r3, r7
 801418c:	b322      	cbz	r2, 80141d8 <_ZN8touchgfx12DrawableList9setOffsetEl+0x190>
 801418e:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	; 0x38
 8014192:	fb93 f1f2 	sdiv	r1, r3, r2
 8014196:	fb02 3311 	mls	r3, r2, r1, r3
 801419a:	2b00      	cmp	r3, #0
 801419c:	da22      	bge.n	80141e4 <_ZN8touchgfx12DrawableList9setOffsetEl+0x19c>
 801419e:	f889 a025 	strb.w	sl, [r9, #37]	; 0x25
 80141a2:	3701      	adds	r7, #1
 80141a4:	e7c7      	b.n	8014136 <_ZN8touchgfx12DrawableList9setOffsetEl+0xee>
 80141a6:	18c6      	adds	r6, r0, r3
 80141a8:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	; 0x38
 80141ac:	4296      	cmp	r6, r2
 80141ae:	dd98      	ble.n	80140e2 <_ZN8touchgfx12DrawableList9setOffsetEl+0x9a>
 80141b0:	1b92      	subs	r2, r2, r6
 80141b2:	fb01 5502 	mla	r5, r1, r2, r5
 80141b6:	4413      	add	r3, r2
 80141b8:	e78c      	b.n	80140d4 <_ZN8touchgfx12DrawableList9setOffsetEl+0x8c>
 80141ba:	4596      	cmp	lr, r2
 80141bc:	d0ac      	beq.n	8014118 <_ZN8touchgfx12DrawableList9setOffsetEl+0xd0>
 80141be:	3601      	adds	r6, #1
 80141c0:	e797      	b.n	80140f2 <_ZN8touchgfx12DrawableList9setOffsetEl+0xaa>
 80141c2:	2600      	movs	r6, #0
 80141c4:	e7a8      	b.n	8014118 <_ZN8touchgfx12DrawableList9setOffsetEl+0xd0>
 80141c6:	4606      	mov	r6, r0
 80141c8:	e7a6      	b.n	8014118 <_ZN8touchgfx12DrawableList9setOffsetEl+0xd0>
 80141ca:	442b      	add	r3, r5
 80141cc:	fb1c 3c0e 	smlabb	ip, ip, lr, r3
 80141d0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80141d2:	fa0f f28c 	sxth.w	r2, ip
 80141d6:	e7d3      	b.n	8014180 <_ZN8touchgfx12DrawableList9setOffsetEl+0x138>
 80141d8:	2b00      	cmp	r3, #0
 80141da:	dbe0      	blt.n	801419e <_ZN8touchgfx12DrawableList9setOffsetEl+0x156>
 80141dc:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	; 0x38
 80141e0:	4293      	cmp	r3, r2
 80141e2:	dadc      	bge.n	801419e <_ZN8touchgfx12DrawableList9setOffsetEl+0x156>
 80141e4:	f889 b025 	strb.w	fp, [r9, #37]	; 0x25
 80141e8:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80141ec:	b132      	cbz	r2, 80141fc <_ZN8touchgfx12DrawableList9setOffsetEl+0x1b4>
 80141ee:	42be      	cmp	r6, r7
 80141f0:	dc04      	bgt.n	80141fc <_ZN8touchgfx12DrawableList9setOffsetEl+0x1b4>
 80141f2:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	; 0x3a
 80141f6:	4432      	add	r2, r6
 80141f8:	4297      	cmp	r7, r2
 80141fa:	dbd2      	blt.n	80141a2 <_ZN8touchgfx12DrawableList9setOffsetEl+0x15a>
 80141fc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80141fe:	9301      	str	r3, [sp, #4]
 8014200:	6802      	ldr	r2, [r0, #0]
 8014202:	68d2      	ldr	r2, [r2, #12]
 8014204:	4790      	blx	r2
 8014206:	2800      	cmp	r0, #0
 8014208:	d0cb      	beq.n	80141a2 <_ZN8touchgfx12DrawableList9setOffsetEl+0x15a>
 801420a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801420c:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8014210:	6801      	ldr	r1, [r0, #0]
 8014212:	9b01      	ldr	r3, [sp, #4]
 8014214:	4442      	add	r2, r8
 8014216:	f8d1 8008 	ldr.w	r8, [r1, #8]
 801421a:	b21b      	sxth	r3, r3
 801421c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801421e:	b212      	sxth	r2, r2
 8014220:	47c0      	blx	r8
 8014222:	f8d9 3000 	ldr.w	r3, [r9]
 8014226:	4648      	mov	r0, r9
 8014228:	695b      	ldr	r3, [r3, #20]
 801422a:	4798      	blx	r3
 801422c:	e7b9      	b.n	80141a2 <_ZN8touchgfx12DrawableList9setOffsetEl+0x15a>
 801422e:	2301      	movs	r3, #1
 8014230:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8014234:	b003      	add	sp, #12
 8014236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801423a <_ZNK8touchgfx12DrawableList9getOffsetEv>:
 801423a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801423c:	4770      	bx	lr

0801423e <_ZNK8touchgfx12DrawableList16getDrawableIndexEss>:
 801423e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014240:	1c54      	adds	r4, r2, #1
 8014242:	db2f      	blt.n	80142a4 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 8014244:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	; 0x3a
 8014248:	4294      	cmp	r4, r2
 801424a:	dd2b      	ble.n	80142a4 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 801424c:	b354      	cbz	r4, 80142a4 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 801424e:	f9b0 6038 	ldrsh.w	r6, [r0, #56]	; 0x38
 8014252:	b33e      	cbz	r6, 80142a4 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 8014254:	1c53      	adds	r3, r2, #1
 8014256:	d008      	beq.n	801426a <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x2c>
 8014258:	f9b0 303e 	ldrsh.w	r3, [r0, #62]	; 0x3e
 801425c:	1ad2      	subs	r2, r2, r3
 801425e:	4422      	add	r2, r4
 8014260:	fb92 f3f4 	sdiv	r3, r2, r4
 8014264:	fb04 2213 	mls	r2, r4, r3, r2
 8014268:	b212      	sxth	r2, r2
 801426a:	3201      	adds	r2, #1
 801426c:	b212      	sxth	r2, r2
 801426e:	4294      	cmp	r4, r2
 8014270:	dd18      	ble.n	80142a4 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 8014272:	b295      	uxth	r5, r2
 8014274:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8014276:	f890 702d 	ldrb.w	r7, [r0, #45]	; 0x2d
 801427a:	442b      	add	r3, r5
 801427c:	b21b      	sxth	r3, r3
 801427e:	b127      	cbz	r7, 801428a <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x4c>
 8014280:	fb93 f7f6 	sdiv	r7, r3, r6
 8014284:	fb06 3317 	mls	r3, r6, r7, r3
 8014288:	b21b      	sxth	r3, r3
 801428a:	428b      	cmp	r3, r1
 801428c:	d108      	bne.n	80142a0 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x62>
 801428e:	f9b0 003e 	ldrsh.w	r0, [r0, #62]	; 0x3e
 8014292:	4402      	add	r2, r0
 8014294:	fb92 f0f4 	sdiv	r0, r2, r4
 8014298:	fb04 2010 	mls	r0, r4, r0, r2
 801429c:	b200      	sxth	r0, r0
 801429e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142a0:	1c6a      	adds	r2, r5, #1
 80142a2:	e7e3      	b.n	801426c <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x2e>
 80142a4:	f04f 30ff 	mov.w	r0, #4294967295
 80142a8:	e7f9      	b.n	801429e <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x60>

080142aa <_ZN8touchgfx12DrawableList16refreshDrawablesEv>:
 80142aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80142ac:	2500      	movs	r5, #0
 80142ae:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80142b0:	4604      	mov	r4, r0
 80142b2:	8745      	strh	r5, [r0, #58]	; 0x3a
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d03c      	beq.n	8014332 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x88>
 80142b8:	f7ff fe9a 	bl	8013ff0 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv>
 80142bc:	8760      	strh	r0, [r4, #58]	; 0x3a
 80142be:	4620      	mov	r0, r4
 80142c0:	f000 fc7a 	bl	8014bb8 <_ZN8touchgfx9Container9removeAllEv>
 80142c4:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	; 0x3a
 80142c8:	42ab      	cmp	r3, r5
 80142ca:	dd27      	ble.n	801431c <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x72>
 80142cc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80142ce:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 80142d2:	6803      	ldr	r3, [r0, #0]
 80142d4:	4429      	add	r1, r5
 80142d6:	689b      	ldr	r3, [r3, #8]
 80142d8:	b209      	sxth	r1, r1
 80142da:	4798      	blx	r3
 80142dc:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80142e0:	4606      	mov	r6, r0
 80142e2:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 80142e6:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 80142e8:	6807      	ldr	r7, [r0, #0]
 80142ea:	b17a      	cbz	r2, 801430c <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x62>
 80142ec:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80142f0:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
 80142f4:	2200      	movs	r2, #0
 80142f6:	9300      	str	r3, [sp, #0]
 80142f8:	b20b      	sxth	r3, r1
 80142fa:	6abf      	ldr	r7, [r7, #40]	; 0x28
 80142fc:	4611      	mov	r1, r2
 80142fe:	3501      	adds	r5, #1
 8014300:	47b8      	blx	r7
 8014302:	4631      	mov	r1, r6
 8014304:	4620      	mov	r0, r4
 8014306:	f000 fce5 	bl	8014cd4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801430a:	e7db      	b.n	80142c4 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x1a>
 801430c:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
 8014310:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8014314:	b209      	sxth	r1, r1
 8014316:	9100      	str	r1, [sp, #0]
 8014318:	6abf      	ldr	r7, [r7, #40]	; 0x28
 801431a:	e7ef      	b.n	80142fc <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x52>
 801431c:	2300      	movs	r3, #0
 801431e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014320:	4620      	mov	r0, r4
 8014322:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8014326:	63e3      	str	r3, [r4, #60]	; 0x3c
 8014328:	b003      	add	sp, #12
 801432a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801432e:	f7ff be8b 	b.w	8014048 <_ZN8touchgfx12DrawableList9setOffsetEl>
 8014332:	b003      	add	sp, #12
 8014334:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014336 <_ZN8touchgfx12DrawableList8setWidthEs>:
 8014336:	8101      	strh	r1, [r0, #8]
 8014338:	f7ff bfb7 	b.w	80142aa <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

0801433c <_ZN8touchgfx12DrawableList9setHeightEs>:
 801433c:	8141      	strh	r1, [r0, #10]
 801433e:	f7ff bfb4 	b.w	80142aa <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

08014342 <_ZN8touchgfx12DrawableList13setHorizontalEb>:
 8014342:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8014346:	b121      	cbz	r1, 8014352 <_ZN8touchgfx12DrawableList13setHorizontalEb+0x10>
 8014348:	b92b      	cbnz	r3, 8014356 <_ZN8touchgfx12DrawableList13setHorizontalEb+0x14>
 801434a:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 801434e:	f7ff bfac 	b.w	80142aa <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
 8014352:	2b00      	cmp	r3, #0
 8014354:	d1f9      	bne.n	801434a <_ZN8touchgfx12DrawableList13setHorizontalEb+0x8>
 8014356:	4770      	bx	lr

08014358 <_ZN8touchgfx12DrawableList11setCircularEb>:
 8014358:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 801435c:	b121      	cbz	r1, 8014368 <_ZN8touchgfx12DrawableList11setCircularEb+0x10>
 801435e:	b92b      	cbnz	r3, 801436c <_ZN8touchgfx12DrawableList11setCircularEb+0x14>
 8014360:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
 8014364:	f7ff bfa1 	b.w	80142aa <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
 8014368:	2b00      	cmp	r3, #0
 801436a:	d1f9      	bne.n	8014360 <_ZN8touchgfx12DrawableList11setCircularEb+0x8>
 801436c:	4770      	bx	lr

0801436e <_ZN8touchgfx12DrawableList12setDrawablesERNS_26DrawableListItemsInterfaceEsRNS_15GenericCallbackIPS1_ssEE>:
 801436e:	b410      	push	{r4}
 8014370:	6441      	str	r1, [r0, #68]	; 0x44
 8014372:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
 8014376:	6483      	str	r3, [r0, #72]	; 0x48
 8014378:	f85d 4b04 	ldr.w	r4, [sp], #4
 801437c:	f7ff bf95 	b.w	80142aa <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

08014380 <_ZN8touchgfx12DrawableList16setNumberOfItemsEs>:
 8014380:	8701      	strh	r1, [r0, #56]	; 0x38
 8014382:	f7ff bf92 	b.w	80142aa <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

08014386 <_ZN8touchgfx12DrawableList11itemChangedEs>:
 8014386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014388:	4604      	mov	r4, r0
 801438a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801438c:	460e      	mov	r6, r1
 801438e:	b1c0      	cbz	r0, 80143c2 <_ZN8touchgfx12DrawableList11itemChangedEs+0x3c>
 8014390:	6803      	ldr	r3, [r0, #0]
 8014392:	68db      	ldr	r3, [r3, #12]
 8014394:	4798      	blx	r3
 8014396:	b1a0      	cbz	r0, 80143c2 <_ZN8touchgfx12DrawableList11itemChangedEs+0x3c>
 8014398:	f04f 35ff 	mov.w	r5, #4294967295
 801439c:	462a      	mov	r2, r5
 801439e:	4631      	mov	r1, r6
 80143a0:	4620      	mov	r0, r4
 80143a2:	f7ff ff4c 	bl	801423e <_ZNK8touchgfx12DrawableList16getDrawableIndexEss>
 80143a6:	1c43      	adds	r3, r0, #1
 80143a8:	4605      	mov	r5, r0
 80143aa:	d00a      	beq.n	80143c2 <_ZN8touchgfx12DrawableList11itemChangedEs+0x3c>
 80143ac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80143ae:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 80143b2:	6803      	ldr	r3, [r0, #0]
 80143b4:	442a      	add	r2, r5
 80143b6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80143b8:	689f      	ldr	r7, [r3, #8]
 80143ba:	4633      	mov	r3, r6
 80143bc:	b212      	sxth	r2, r2
 80143be:	47b8      	blx	r7
 80143c0:	e7ec      	b.n	801439c <_ZN8touchgfx12DrawableList11itemChangedEs+0x16>
 80143c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080143c4 <_ZN8touchgfx15ScrollWheelBaseD1Ev>:
 80143c4:	4770      	bx	lr

080143c6 <_ZN8touchgfx15ScrollWheelBase21setSelectedItemOffsetEs>:
 80143c6:	b570      	push	{r4, r5, r6, lr}
 80143c8:	6803      	ldr	r3, [r0, #0]
 80143ca:	4604      	mov	r4, r0
 80143cc:	460d      	mov	r5, r1
 80143ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80143d2:	4798      	blx	r3
 80143d4:	6823      	ldr	r3, [r4, #0]
 80143d6:	f8a4 507a 	strh.w	r5, [r4, #122]	; 0x7a
 80143da:	4601      	mov	r1, r0
 80143dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80143e0:	4620      	mov	r0, r4
 80143e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80143e6:	4718      	bx	r3

080143e8 <_ZNK8touchgfx15ScrollWheelBase21getSelectedItemOffsetEv>:
 80143e8:	f9b0 007a 	ldrsh.w	r0, [r0, #122]	; 0x7a
 80143ec:	4770      	bx	lr

080143ee <_ZN8touchgfx15ScrollWheelBase18getPositionForItemEs>:
 80143ee:	b570      	push	{r4, r5, r6, lr}
 80143f0:	6803      	ldr	r3, [r0, #0]
 80143f2:	4249      	negs	r1, r1
 80143f4:	f9b0 407c 	ldrsh.w	r4, [r0, #124]	; 0x7c
 80143f8:	4605      	mov	r5, r0
 80143fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80143fe:	434c      	muls	r4, r1
 8014400:	4798      	blx	r3
 8014402:	b1c0      	cbz	r0, 8014436 <_ZN8touchgfx15ScrollWheelBase18getPositionForItemEs+0x48>
 8014404:	682b      	ldr	r3, [r5, #0]
 8014406:	4628      	mov	r0, r5
 8014408:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801440c:	4798      	blx	r3
 801440e:	f8b5 607c 	ldrh.w	r6, [r5, #124]	; 0x7c
 8014412:	682b      	ldr	r3, [r5, #0]
 8014414:	fb10 4606 	smlabb	r6, r0, r6, r4
 8014418:	4628      	mov	r0, r5
 801441a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801441e:	4798      	blx	r3
 8014420:	1a23      	subs	r3, r4, r0
 8014422:	1a30      	subs	r0, r6, r0
 8014424:	2b00      	cmp	r3, #0
 8014426:	bfb8      	it	lt
 8014428:	425b      	neglt	r3, r3
 801442a:	2800      	cmp	r0, #0
 801442c:	bfb8      	it	lt
 801442e:	4240      	neglt	r0, r0
 8014430:	4283      	cmp	r3, r0
 8014432:	bfc8      	it	gt
 8014434:	4634      	movgt	r4, r6
 8014436:	4620      	mov	r0, r4
 8014438:	bd70      	pop	{r4, r5, r6, pc}

0801443a <_ZNK8touchgfx15ScrollWheelBase22keepOffsetInsideLimitsEls>:
 801443a:	b570      	push	{r4, r5, r6, lr}
 801443c:	6803      	ldr	r3, [r0, #0]
 801443e:	428a      	cmp	r2, r1
 8014440:	4605      	mov	r5, r0
 8014442:	4616      	mov	r6, r2
 8014444:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014448:	4614      	mov	r4, r2
 801444a:	bfa8      	it	ge
 801444c:	460e      	movge	r6, r1
 801444e:	4798      	blx	r3
 8014450:	f9b5 207c 	ldrsh.w	r2, [r5, #124]	; 0x7c
 8014454:	f1c0 0001 	rsb	r0, r0, #1
 8014458:	4350      	muls	r0, r2
 801445a:	1b00      	subs	r0, r0, r4
 801445c:	42b0      	cmp	r0, r6
 801445e:	bfb8      	it	lt
 8014460:	4630      	movlt	r0, r6
 8014462:	bd70      	pop	{r4, r5, r6, pc}

08014464 <_ZN8touchgfx15ScrollWheelBase15handleDragEventERKNS_9DragEventE>:
 8014464:	2302      	movs	r3, #2
 8014466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801446a:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
 801446e:	4605      	mov	r5, r0
 8014470:	6803      	ldr	r3, [r0, #0]
 8014472:	460e      	mov	r6, r1
 8014474:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014478:	4798      	blx	r3
 801447a:	682b      	ldr	r3, [r5, #0]
 801447c:	4607      	mov	r7, r0
 801447e:	4628      	mov	r0, r5
 8014480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014484:	4798      	blx	r3
 8014486:	b3a0      	cbz	r0, 80144f2 <_ZN8touchgfx15ScrollWheelBase15handleDragEventERKNS_9DragEventE+0x8e>
 8014488:	8973      	ldrh	r3, [r6, #10]
 801448a:	88f4      	ldrh	r4, [r6, #6]
 801448c:	1b1b      	subs	r3, r3, r4
 801448e:	f8b5 4080 	ldrh.w	r4, [r5, #128]	; 0x80
 8014492:	4628      	mov	r0, r5
 8014494:	b21b      	sxth	r3, r3
 8014496:	435c      	muls	r4, r3
 8014498:	230a      	movs	r3, #10
 801449a:	fb94 f4f3 	sdiv	r4, r4, r3
 801449e:	682b      	ldr	r3, [r5, #0]
 80144a0:	443c      	add	r4, r7
 80144a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80144a6:	4798      	blx	r3
 80144a8:	b9d8      	cbnz	r0, 80144e2 <_ZN8touchgfx15ScrollWheelBase15handleDragEventERKNS_9DragEventE+0x7e>
 80144aa:	f9b5 107c 	ldrsh.w	r1, [r5, #124]	; 0x7c
 80144ae:	2604      	movs	r6, #4
 80144b0:	682b      	ldr	r3, [r5, #0]
 80144b2:	4628      	mov	r0, r5
 80144b4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80144b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80144bc:	fb91 f1f6 	sdiv	r1, r1, r6
 80144c0:	428c      	cmp	r4, r1
 80144c2:	bfa8      	it	ge
 80144c4:	460c      	movge	r4, r1
 80144c6:	4798      	blx	r3
 80144c8:	f9b5 307c 	ldrsh.w	r3, [r5, #124]	; 0x7c
 80144cc:	3801      	subs	r0, #1
 80144ce:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80144d2:	fb91 f1f6 	sdiv	r1, r1, r6
 80144d6:	4249      	negs	r1, r1
 80144d8:	fb03 1110 	mls	r1, r3, r0, r1
 80144dc:	428c      	cmp	r4, r1
 80144de:	bfb8      	it	lt
 80144e0:	460c      	movlt	r4, r1
 80144e2:	682b      	ldr	r3, [r5, #0]
 80144e4:	4621      	mov	r1, r4
 80144e6:	4628      	mov	r0, r5
 80144e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80144ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80144f0:	4718      	bx	r3
 80144f2:	89b3      	ldrh	r3, [r6, #12]
 80144f4:	8934      	ldrh	r4, [r6, #8]
 80144f6:	e7c9      	b.n	801448c <_ZN8touchgfx15ScrollWheelBase15handleDragEventERKNS_9DragEventE+0x28>

080144f8 <_ZN8touchgfx15ScrollWheelBase18handleGestureEventERKNS_12GestureEventE>:
 80144f8:	b570      	push	{r4, r5, r6, lr}
 80144fa:	6803      	ldr	r3, [r0, #0]
 80144fc:	4604      	mov	r4, r0
 80144fe:	790e      	ldrb	r6, [r1, #4]
 8014500:	460d      	mov	r5, r1
 8014502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014506:	4798      	blx	r3
 8014508:	f080 0001 	eor.w	r0, r0, #1
 801450c:	b2c0      	uxtb	r0, r0
 801450e:	42b0      	cmp	r0, r6
 8014510:	d126      	bne.n	8014560 <_ZN8touchgfx15ScrollWheelBase18handleGestureEventERKNS_12GestureEventE+0x68>
 8014512:	6823      	ldr	r3, [r4, #0]
 8014514:	4620      	mov	r0, r4
 8014516:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801451a:	4798      	blx	r3
 801451c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014520:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
 8014524:	4359      	muls	r1, r3
 8014526:	230a      	movs	r3, #10
 8014528:	fb91 f1f3 	sdiv	r1, r1, r3
 801452c:	f8b4 3082 	ldrh.w	r3, [r4, #130]	; 0x82
 8014530:	4401      	add	r1, r0
 8014532:	b163      	cbz	r3, 801454e <_ZN8touchgfx15ScrollWheelBase18handleGestureEventERKNS_12GestureEventE+0x56>
 8014534:	f9b4 007c 	ldrsh.w	r0, [r4, #124]	; 0x7c
 8014538:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 801453c:	4343      	muls	r3, r0
 801453e:	18d0      	adds	r0, r2, r3
 8014540:	4281      	cmp	r1, r0
 8014542:	bfa8      	it	ge
 8014544:	4601      	movge	r1, r0
 8014546:	1ad0      	subs	r0, r2, r3
 8014548:	4281      	cmp	r1, r0
 801454a:	bfb8      	it	lt
 801454c:	4601      	movlt	r1, r0
 801454e:	6823      	ldr	r3, [r4, #0]
 8014550:	4620      	mov	r0, r4
 8014552:	f04f 32ff 	mov.w	r2, #4294967295
 8014556:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801455a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801455e:	4718      	bx	r3
 8014560:	bd70      	pop	{r4, r5, r6, pc}

08014562 <_ZN8touchgfx15ScrollWheelBase17animateToPositionEls>:
 8014562:	b570      	push	{r4, r5, r6, lr}
 8014564:	4604      	mov	r4, r0
 8014566:	f8d0 00bc 	ldr.w	r0, [r0, #188]	; 0xbc
 801456a:	460d      	mov	r5, r1
 801456c:	4616      	mov	r6, r2
 801456e:	b1c8      	cbz	r0, 80145a4 <_ZN8touchgfx15ScrollWheelBase17animateToPositionEls+0x42>
 8014570:	6803      	ldr	r3, [r0, #0]
 8014572:	68db      	ldr	r3, [r3, #12]
 8014574:	4798      	blx	r3
 8014576:	b1a8      	cbz	r0, 80145a4 <_ZN8touchgfx15ScrollWheelBase17animateToPositionEls+0x42>
 8014578:	f9b4 307c 	ldrsh.w	r3, [r4, #124]	; 0x7c
 801457c:	2b00      	cmp	r3, #0
 801457e:	dd11      	ble.n	80145a4 <_ZN8touchgfx15ScrollWheelBase17animateToPositionEls+0x42>
 8014580:	6823      	ldr	r3, [r4, #0]
 8014582:	4629      	mov	r1, r5
 8014584:	4620      	mov	r0, r4
 8014586:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801458a:	4798      	blx	r3
 801458c:	4605      	mov	r5, r0
 801458e:	f9b4 307c 	ldrsh.w	r3, [r4, #124]	; 0x7c
 8014592:	4269      	negs	r1, r5
 8014594:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 8014598:	fb91 f1f3 	sdiv	r1, r1, r3
 801459c:	6803      	ldr	r3, [r0, #0]
 801459e:	b209      	sxth	r1, r1
 80145a0:	689b      	ldr	r3, [r3, #8]
 80145a2:	4798      	blx	r3
 80145a4:	4632      	mov	r2, r6
 80145a6:	4629      	mov	r1, r5
 80145a8:	4620      	mov	r0, r4
 80145aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80145ae:	f000 b92a 	b.w	8014806 <_ZN8touchgfx10ScrollBase17animateToPositionEls>

080145b2 <_ZN8touchgfx15ScrollWheelBaseD0Ev>:
 80145b2:	b510      	push	{r4, lr}
 80145b4:	4604      	mov	r4, r0
 80145b6:	21c0      	movs	r1, #192	; 0xc0
 80145b8:	f010 fb23 	bl	8024c02 <_ZdlPvj>
 80145bc:	4620      	mov	r0, r4
 80145be:	bd10      	pop	{r4, pc}

080145c0 <_ZN8touchgfx15ScrollWheelBaseC1Ev>:
 80145c0:	b510      	push	{r4, lr}
 80145c2:	4604      	mov	r4, r0
 80145c4:	f000 fa5a 	bl	8014a7c <_ZN8touchgfx10ScrollBaseC1Ev>
 80145c8:	4b06      	ldr	r3, [pc, #24]	; (80145e4 <_ZN8touchgfx15ScrollWheelBaseC1Ev+0x24>)
 80145ca:	2100      	movs	r1, #0
 80145cc:	4620      	mov	r0, r4
 80145ce:	6023      	str	r3, [r4, #0]
 80145d0:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
 80145d4:	f000 fa49 	bl	8014a6a <_ZN8touchgfx10ScrollBase13setHorizontalEb>
 80145d8:	2301      	movs	r3, #1
 80145da:	4620      	mov	r0, r4
 80145dc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80145e0:	bd10      	pop	{r4, pc}
 80145e2:	bf00      	nop
 80145e4:	08028b44 	.word	0x08028b44

080145e8 <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv>:
 80145e8:	b510      	push	{r4, lr}
 80145ea:	f9b0 307c 	ldrsh.w	r3, [r0, #124]	; 0x7c
 80145ee:	4604      	mov	r4, r0
 80145f0:	b1a3      	cbz	r3, 801461c <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv+0x34>
 80145f2:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
 80145f6:	2b01      	cmp	r3, #1
 80145f8:	d109      	bne.n	801460e <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv+0x26>
 80145fa:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
 80145fe:	f000 f9da 	bl	80149b6 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>
 8014602:	f9b4 307c 	ldrsh.w	r3, [r4, #124]	; 0x7c
 8014606:	4240      	negs	r0, r0
 8014608:	fb90 f0f3 	sdiv	r0, r0, r3
 801460c:	bd10      	pop	{r4, pc}
 801460e:	6803      	ldr	r3, [r0, #0]
 8014610:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014614:	4798      	blx	r3
 8014616:	4601      	mov	r1, r0
 8014618:	4620      	mov	r0, r4
 801461a:	e7f0      	b.n	80145fe <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv+0x16>
 801461c:	4618      	mov	r0, r3
 801461e:	e7f5      	b.n	801460c <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv+0x24>

08014620 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE>:
 8014620:	b570      	push	{r4, r5, r6, lr}
 8014622:	6803      	ldr	r3, [r0, #0]
 8014624:	460d      	mov	r5, r1
 8014626:	4604      	mov	r4, r0
 8014628:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801462c:	4798      	blx	r3
 801462e:	792b      	ldrb	r3, [r5, #4]
 8014630:	4606      	mov	r6, r0
 8014632:	b9fb      	cbnz	r3, 8014674 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x54>
 8014634:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014638:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
 801463c:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8014640:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 8014644:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8014648:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
 801464c:	2800      	cmp	r0, #0
 801464e:	d058      	beq.n	8014702 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xe2>
 8014650:	6803      	ldr	r3, [r0, #0]
 8014652:	68db      	ldr	r3, [r3, #12]
 8014654:	4798      	blx	r3
 8014656:	2800      	cmp	r0, #0
 8014658:	d053      	beq.n	8014702 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xe2>
 801465a:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
 801465e:	682b      	ldr	r3, [r5, #0]
 8014660:	4620      	mov	r0, r4
 8014662:	689e      	ldr	r6, [r3, #8]
 8014664:	f7ff ffc0 	bl	80145e8 <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv>
 8014668:	b201      	sxth	r1, r0
 801466a:	4628      	mov	r0, r5
 801466c:	4633      	mov	r3, r6
 801466e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014672:	4718      	bx	r3
 8014674:	2b01      	cmp	r3, #1
 8014676:	d144      	bne.n	8014702 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xe2>
 8014678:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 801467c:	bbb3      	cbnz	r3, 80146ec <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xcc>
 801467e:	6823      	ldr	r3, [r4, #0]
 8014680:	4620      	mov	r0, r4
 8014682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014686:	4798      	blx	r3
 8014688:	b1f0      	cbz	r0, 80146c8 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xa8>
 801468a:	f9b4 30b0 	ldrsh.w	r3, [r4, #176]	; 0xb0
 801468e:	f9b4 207a 	ldrsh.w	r2, [r4, #122]	; 0x7a
 8014692:	6821      	ldr	r1, [r4, #0]
 8014694:	429a      	cmp	r2, r3
 8014696:	f9b4 007c 	ldrsh.w	r0, [r4, #124]	; 0x7c
 801469a:	f8d1 50c4 	ldr.w	r5, [r1, #196]	; 0xc4
 801469e:	dd16      	ble.n	80146ce <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xae>
 80146a0:	1ad3      	subs	r3, r2, r3
 80146a2:	f04f 32ff 	mov.w	r2, #4294967295
 80146a6:	fb93 f3f0 	sdiv	r3, r3, r0
 80146aa:	fb03 0000 	mla	r0, r3, r0, r0
 80146ae:	1981      	adds	r1, r0, r6
 80146b0:	4620      	mov	r0, r4
 80146b2:	47a8      	blx	r5
 80146b4:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80146b8:	b318      	cbz	r0, 8014702 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xe2>
 80146ba:	6803      	ldr	r3, [r0, #0]
 80146bc:	68db      	ldr	r3, [r3, #12]
 80146be:	4798      	blx	r3
 80146c0:	b1f8      	cbz	r0, 8014702 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xe2>
 80146c2:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
 80146c6:	e7ca      	b.n	801465e <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x3e>
 80146c8:	f9b4 30b2 	ldrsh.w	r3, [r4, #178]	; 0xb2
 80146cc:	e7df      	b.n	801468e <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x6e>
 80146ce:	1881      	adds	r1, r0, r2
 80146d0:	4299      	cmp	r1, r3
 80146d2:	da07      	bge.n	80146e4 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xc4>
 80146d4:	1a9b      	subs	r3, r3, r2
 80146d6:	f04f 32ff 	mov.w	r2, #4294967295
 80146da:	fb93 f3f0 	sdiv	r3, r3, r0
 80146de:	fb00 6113 	mls	r1, r0, r3, r6
 80146e2:	e7e5      	b.n	80146b0 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x90>
 80146e4:	f04f 32ff 	mov.w	r2, #4294967295
 80146e8:	4631      	mov	r1, r6
 80146ea:	e7e1      	b.n	80146b0 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x90>
 80146ec:	2b02      	cmp	r3, #2
 80146ee:	d1e1      	bne.n	80146b4 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x94>
 80146f0:	6823      	ldr	r3, [r4, #0]
 80146f2:	4601      	mov	r1, r0
 80146f4:	f04f 32ff 	mov.w	r2, #4294967295
 80146f8:	4620      	mov	r0, r4
 80146fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80146fe:	4798      	blx	r3
 8014700:	e7d8      	b.n	80146b4 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x94>
 8014702:	bd70      	pop	{r4, r5, r6, pc}

08014704 <_ZN8touchgfx10ScrollBase13animateToItemEss>:
 8014704:	b570      	push	{r4, r5, r6, lr}
 8014706:	6803      	ldr	r3, [r0, #0]
 8014708:	4615      	mov	r5, r2
 801470a:	4604      	mov	r4, r0
 801470c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8014710:	4798      	blx	r3
 8014712:	2d00      	cmp	r5, #0
 8014714:	6823      	ldr	r3, [r4, #0]
 8014716:	4601      	mov	r1, r0
 8014718:	bfb8      	it	lt
 801471a:	f9b4 5088 	ldrshlt.w	r5, [r4, #136]	; 0x88
 801471e:	4620      	mov	r0, r4
 8014720:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8014724:	462a      	mov	r2, r5
 8014726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801472a:	4718      	bx	r3

0801472c <_ZNK8touchgfx10ScrollBase16getNumberOfItemsEv>:
 801472c:	302c      	adds	r0, #44	; 0x2c
 801472e:	f7ff bc5c 	b.w	8013fea <_ZNK8touchgfx12DrawableList16getNumberOfItemsEv>

08014732 <_ZN8touchgfx10ScrollBase11itemChangedEi>:
 8014732:	b209      	sxth	r1, r1
 8014734:	302c      	adds	r0, #44	; 0x2c
 8014736:	f7ff be26 	b.w	8014386 <_ZN8touchgfx12DrawableList11itemChangedEs>

0801473a <_ZN8touchgfx10ScrollBase9setOffsetEl>:
 801473a:	f9b0 307a 	ldrsh.w	r3, [r0, #122]	; 0x7a
 801473e:	302c      	adds	r0, #44	; 0x2c
 8014740:	4419      	add	r1, r3
 8014742:	f7ff bc81 	b.w	8014048 <_ZN8touchgfx12DrawableList9setOffsetEl>

08014746 <_ZNK8touchgfx10ScrollBase9getOffsetEv>:
 8014746:	b510      	push	{r4, lr}
 8014748:	4604      	mov	r4, r0
 801474a:	302c      	adds	r0, #44	; 0x2c
 801474c:	f7ff fd75 	bl	801423a <_ZNK8touchgfx12DrawableList9getOffsetEv>
 8014750:	f9b4 307a 	ldrsh.w	r3, [r4, #122]	; 0x7a
 8014754:	1ac0      	subs	r0, r0, r3
 8014756:	bd10      	pop	{r4, pc}

08014758 <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl>:
 8014758:	b538      	push	{r3, r4, r5, lr}
 801475a:	f9b0 307c 	ldrsh.w	r3, [r0, #124]	; 0x7c
 801475e:	4605      	mov	r5, r0
 8014760:	460c      	mov	r4, r1
 8014762:	b18b      	cbz	r3, 8014788 <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0x30>
 8014764:	6803      	ldr	r3, [r0, #0]
 8014766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801476a:	4798      	blx	r3
 801476c:	4602      	mov	r2, r0
 801476e:	b168      	cbz	r0, 801478c <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0x34>
 8014770:	f9b5 307c 	ldrsh.w	r3, [r5, #124]	; 0x7c
 8014774:	2102      	movs	r1, #2
 8014776:	2c00      	cmp	r4, #0
 8014778:	fb93 f1f1 	sdiv	r1, r3, r1
 801477c:	bfb4      	ite	lt
 801477e:	1a64      	sublt	r4, r4, r1
 8014780:	1864      	addge	r4, r4, r1
 8014782:	fb94 f4f3 	sdiv	r4, r4, r3
 8014786:	435c      	muls	r4, r3
 8014788:	4620      	mov	r0, r4
 801478a:	bd38      	pop	{r3, r4, r5, pc}
 801478c:	682b      	ldr	r3, [r5, #0]
 801478e:	4621      	mov	r1, r4
 8014790:	4628      	mov	r0, r5
 8014792:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8014796:	4798      	blx	r3
 8014798:	f9b5 407c 	ldrsh.w	r4, [r5, #124]	; 0x7c
 801479c:	2302      	movs	r3, #2
 801479e:	fb94 f3f3 	sdiv	r3, r4, r3
 80147a2:	1ac0      	subs	r0, r0, r3
 80147a4:	fb90 f0f4 	sdiv	r0, r0, r4
 80147a8:	4344      	muls	r4, r0
 80147aa:	e7ed      	b.n	8014788 <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0x30>

080147ac <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs>:
 80147ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147b0:	6803      	ldr	r3, [r0, #0]
 80147b2:	460d      	mov	r5, r1
 80147b4:	4604      	mov	r4, r0
 80147b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80147ba:	4798      	blx	r3
 80147bc:	42a8      	cmp	r0, r5
 80147be:	d020      	beq.n	8014802 <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs+0x56>
 80147c0:	4629      	mov	r1, r5
 80147c2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80147c6:	f7ff fddb 	bl	8014380 <_ZN8touchgfx12DrawableList16setNumberOfItemsEs>
 80147ca:	6823      	ldr	r3, [r4, #0]
 80147cc:	4620      	mov	r0, r4
 80147ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80147d2:	4798      	blx	r3
 80147d4:	4605      	mov	r5, r0
 80147d6:	b9a0      	cbnz	r0, 8014802 <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs+0x56>
 80147d8:	6823      	ldr	r3, [r4, #0]
 80147da:	4620      	mov	r0, r4
 80147dc:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
 80147e0:	f8d3 70bc 	ldr.w	r7, [r3, #188]	; 0xbc
 80147e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80147e8:	4798      	blx	r3
 80147ea:	462a      	mov	r2, r5
 80147ec:	4601      	mov	r1, r0
 80147ee:	4620      	mov	r0, r4
 80147f0:	47b8      	blx	r7
 80147f2:	4633      	mov	r3, r6
 80147f4:	4601      	mov	r1, r0
 80147f6:	f04f 32ff 	mov.w	r2, #4294967295
 80147fa:	4620      	mov	r0, r4
 80147fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014800:	4718      	bx	r3
 8014802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014806 <_ZN8touchgfx10ScrollBase17animateToPositionEls>:
 8014806:	b570      	push	{r4, r5, r6, lr}
 8014808:	6803      	ldr	r3, [r0, #0]
 801480a:	4615      	mov	r5, r2
 801480c:	4604      	mov	r4, r0
 801480e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8014812:	4798      	blx	r3
 8014814:	2d00      	cmp	r5, #0
 8014816:	4606      	mov	r6, r0
 8014818:	6823      	ldr	r3, [r4, #0]
 801481a:	bfb8      	it	lt
 801481c:	f9b4 5088 	ldrshlt.w	r5, [r4, #136]	; 0x88
 8014820:	2d00      	cmp	r5, #0
 8014822:	dc06      	bgt.n	8014832 <_ZN8touchgfx10ScrollBase17animateToPositionEls+0x2c>
 8014824:	4601      	mov	r1, r0
 8014826:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801482a:	4620      	mov	r0, r4
 801482c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014830:	4718      	bx	r3
 8014832:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014836:	4620      	mov	r0, r4
 8014838:	4798      	blx	r3
 801483a:	2300      	movs	r3, #0
 801483c:	e9c4 3528 	strd	r3, r5, [r4, #160]	; 0xa0
 8014840:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 8014844:	2b01      	cmp	r3, #1
 8014846:	e9c4 062a 	strd	r0, r6, [r4, #168]	; 0xa8
 801484a:	d007      	beq.n	801485c <_ZN8touchgfx10ScrollBase17animateToPositionEls+0x56>
 801484c:	f004 faaa 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 8014850:	4621      	mov	r1, r4
 8014852:	f004 faad 	bl	8018db0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8014856:	2301      	movs	r3, #1
 8014858:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
 801485c:	bd70      	pop	{r4, r5, r6, pc}

0801485e <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE>:
 801485e:	b570      	push	{r4, r5, r6, lr}
 8014860:	6803      	ldr	r3, [r0, #0]
 8014862:	4605      	mov	r5, r0
 8014864:	790e      	ldrb	r6, [r1, #4]
 8014866:	460c      	mov	r4, r1
 8014868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801486c:	4798      	blx	r3
 801486e:	f080 0001 	eor.w	r0, r0, #1
 8014872:	b2c0      	uxtb	r0, r0
 8014874:	42b0      	cmp	r0, r6
 8014876:	d140      	bne.n	80148fa <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE+0x9c>
 8014878:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801487c:	4628      	mov	r0, r5
 801487e:	2b00      	cmp	r3, #0
 8014880:	bfbb      	ittet	lt
 8014882:	425b      	neglt	r3, r3
 8014884:	f04f 36ff 	movlt.w	r6, #4294967295
 8014888:	2601      	movge	r6, #1
 801488a:	b21b      	sxthlt	r3, r3
 801488c:	2b04      	cmp	r3, #4
 801488e:	bfc9      	itett	gt
 8014890:	3b04      	subgt	r3, #4
 8014892:	2407      	movle	r4, #7
 8014894:	ebc3 03c3 	rsbgt	r3, r3, r3, lsl #3
 8014898:	b21c      	sxthgt	r4, r3
 801489a:	682b      	ldr	r3, [r5, #0]
 801489c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80148a0:	4366      	muls	r6, r4
 80148a2:	4798      	blx	r3
 80148a4:	f8b5 107e 	ldrh.w	r1, [r5, #126]	; 0x7e
 80148a8:	230a      	movs	r3, #10
 80148aa:	4371      	muls	r1, r6
 80148ac:	fb91 f1f3 	sdiv	r1, r1, r3
 80148b0:	f8b5 3082 	ldrh.w	r3, [r5, #130]	; 0x82
 80148b4:	4401      	add	r1, r0
 80148b6:	b163      	cbz	r3, 80148d2 <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE+0x74>
 80148b8:	f9b5 007c 	ldrsh.w	r0, [r5, #124]	; 0x7c
 80148bc:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
 80148c0:	4343      	muls	r3, r0
 80148c2:	18d0      	adds	r0, r2, r3
 80148c4:	4281      	cmp	r1, r0
 80148c6:	bfa8      	it	ge
 80148c8:	4601      	movge	r1, r0
 80148ca:	1ad0      	subs	r0, r2, r3
 80148cc:	4281      	cmp	r1, r0
 80148ce:	bfb8      	it	lt
 80148d0:	4601      	movlt	r1, r0
 80148d2:	682b      	ldr	r3, [r5, #0]
 80148d4:	2200      	movs	r2, #0
 80148d6:	4628      	mov	r0, r5
 80148d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80148dc:	4798      	blx	r3
 80148de:	f8b5 2088 	ldrh.w	r2, [r5, #136]	; 0x88
 80148e2:	682b      	ldr	r3, [r5, #0]
 80148e4:	4601      	mov	r1, r0
 80148e6:	42a2      	cmp	r2, r4
 80148e8:	4628      	mov	r0, r5
 80148ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80148ee:	bfa8      	it	ge
 80148f0:	4622      	movge	r2, r4
 80148f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80148f6:	b212      	sxth	r2, r2
 80148f8:	4718      	bx	r3
 80148fa:	bd70      	pop	{r4, r5, r6, pc}

080148fc <_ZN8touchgfx10ScrollBase15setDrawableSizeEss>:
 80148fc:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8014900:	302c      	adds	r0, #44	; 0x2c
 8014902:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8014906:	f7ff bb6b 	b.w	8013fe0 <_ZN8touchgfx12DrawableList15setDrawableSizeEss>

0801490a <_ZN8touchgfx10ScrollBase17setEasingEquationEPFstsstE>:
 801490a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
 801490e:	4770      	bx	lr

08014910 <_ZN8touchgfx10ScrollBase20setSwipeAccelerationEt>:
 8014910:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
 8014914:	4770      	bx	lr

08014916 <_ZN8touchgfx10ScrollBase19setDragAccelerationEt>:
 8014916:	f8a0 1080 	strh.w	r1, [r0, #128]	; 0x80
 801491a:	4770      	bx	lr

0801491c <_ZN8touchgfx10ScrollBase13stopAnimationEv>:
 801491c:	b510      	push	{r4, lr}
 801491e:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
 8014922:	4604      	mov	r4, r0
 8014924:	2b01      	cmp	r3, #1
 8014926:	d10b      	bne.n	8014940 <_ZN8touchgfx10ScrollBase13stopAnimationEv+0x24>
 8014928:	f004 fa3c 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 801492c:	4621      	mov	r1, r4
 801492e:	f004 fa71 	bl	8018e14 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8014932:	6823      	ldr	r3, [r4, #0]
 8014934:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8014938:	4620      	mov	r0, r4
 801493a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801493e:	4798      	blx	r3
 8014940:	2300      	movs	r3, #0
 8014942:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
 8014946:	bd10      	pop	{r4, pc}

08014948 <_ZN8touchgfx10ScrollBase15handleDragEventERKNS_9DragEventE>:
 8014948:	b570      	push	{r4, r5, r6, lr}
 801494a:	4604      	mov	r4, r0
 801494c:	460e      	mov	r6, r1
 801494e:	f7ff ffe5 	bl	801491c <_ZN8touchgfx10ScrollBase13stopAnimationEv>
 8014952:	2302      	movs	r3, #2
 8014954:	4620      	mov	r0, r4
 8014956:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
 801495a:	6823      	ldr	r3, [r4, #0]
 801495c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014960:	4798      	blx	r3
 8014962:	6823      	ldr	r3, [r4, #0]
 8014964:	4605      	mov	r5, r0
 8014966:	4620      	mov	r0, r4
 8014968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801496c:	4798      	blx	r3
 801496e:	b1f8      	cbz	r0, 80149b0 <_ZN8touchgfx10ScrollBase15handleDragEventERKNS_9DragEventE+0x68>
 8014970:	8973      	ldrh	r3, [r6, #10]
 8014972:	88f1      	ldrh	r1, [r6, #6]
 8014974:	1a5b      	subs	r3, r3, r1
 8014976:	f8b4 1080 	ldrh.w	r1, [r4, #128]	; 0x80
 801497a:	f9b4 207c 	ldrsh.w	r2, [r4, #124]	; 0x7c
 801497e:	4620      	mov	r0, r4
 8014980:	b21b      	sxth	r3, r3
 8014982:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014986:	434b      	muls	r3, r1
 8014988:	210a      	movs	r1, #10
 801498a:	fb93 f3f1 	sdiv	r3, r3, r1
 801498e:	2104      	movs	r1, #4
 8014990:	fb92 f2f1 	sdiv	r2, r2, r1
 8014994:	6821      	ldr	r1, [r4, #0]
 8014996:	b212      	sxth	r2, r2
 8014998:	f8d1 60bc 	ldr.w	r6, [r1, #188]	; 0xbc
 801499c:	1959      	adds	r1, r3, r5
 801499e:	47b0      	blx	r6
 80149a0:	6823      	ldr	r3, [r4, #0]
 80149a2:	4601      	mov	r1, r0
 80149a4:	4620      	mov	r0, r4
 80149a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80149aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80149ae:	4718      	bx	r3
 80149b0:	89b3      	ldrh	r3, [r6, #12]
 80149b2:	8931      	ldrh	r1, [r6, #8]
 80149b4:	e7de      	b.n	8014974 <_ZN8touchgfx10ScrollBase15handleDragEventERKNS_9DragEventE+0x2c>

080149b6 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>:
 80149b6:	b538      	push	{r3, r4, r5, lr}
 80149b8:	6803      	ldr	r3, [r0, #0]
 80149ba:	4605      	mov	r5, r0
 80149bc:	460c      	mov	r4, r1
 80149be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80149c2:	4798      	blx	r3
 80149c4:	b150      	cbz	r0, 80149dc <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi+0x26>
 80149c6:	f9b5 307c 	ldrsh.w	r3, [r5, #124]	; 0x7c
 80149ca:	b13b      	cbz	r3, 80149dc <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi+0x26>
 80149cc:	4358      	muls	r0, r3
 80149ce:	fb94 f3f0 	sdiv	r3, r4, r0
 80149d2:	fb00 4413 	mls	r4, r0, r3, r4
 80149d6:	2c00      	cmp	r4, #0
 80149d8:	bfc8      	it	gt
 80149da:	1a24      	subgt	r4, r4, r0
 80149dc:	4620      	mov	r0, r4
 80149de:	bd38      	pop	{r3, r4, r5, pc}

080149e0 <_ZN8touchgfx10ScrollBase15handleTickEventEv>:
 80149e0:	b570      	push	{r4, r5, r6, lr}
 80149e2:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
 80149e6:	4604      	mov	r4, r0
 80149e8:	2b01      	cmp	r3, #1
 80149ea:	d13d      	bne.n	8014a68 <_ZN8touchgfx10ScrollBase15handleTickEventEv+0x88>
 80149ec:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
 80149f0:	2100      	movs	r1, #0
 80149f2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 80149f6:	3001      	adds	r0, #1
 80149f8:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 80149fc:	e9d4 622a 	ldrd	r6, r2, [r4, #168]	; 0xa8
 8014a00:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
 8014a04:	b280      	uxth	r0, r0
 8014a06:	1b92      	subs	r2, r2, r6
 8014a08:	b212      	sxth	r2, r2
 8014a0a:	47a8      	blx	r5
 8014a0c:	6823      	ldr	r3, [r4, #0]
 8014a0e:	1981      	adds	r1, r0, r6
 8014a10:	4620      	mov	r0, r4
 8014a12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8014a16:	4798      	blx	r3
 8014a18:	e9d4 2328 	ldrd	r2, r3, [r4, #160]	; 0xa0
 8014a1c:	429a      	cmp	r2, r3
 8014a1e:	dd23      	ble.n	8014a68 <_ZN8touchgfx10ScrollBase15handleTickEventEv+0x88>
 8014a20:	2300      	movs	r3, #0
 8014a22:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
 8014a26:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 8014a2a:	f004 f9bb 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 8014a2e:	4621      	mov	r1, r4
 8014a30:	f004 f9f0 	bl	8018e14 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8014a34:	6823      	ldr	r3, [r4, #0]
 8014a36:	4620      	mov	r0, r4
 8014a38:	e9d3 532c 	ldrd	r5, r3, [r3, #176]	; 0xb0
 8014a3c:	4798      	blx	r3
 8014a3e:	4601      	mov	r1, r0
 8014a40:	4620      	mov	r0, r4
 8014a42:	f7ff ffb8 	bl	80149b6 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>
 8014a46:	4601      	mov	r1, r0
 8014a48:	4620      	mov	r0, r4
 8014a4a:	47a8      	blx	r5
 8014a4c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8014a50:	b150      	cbz	r0, 8014a68 <_ZN8touchgfx10ScrollBase15handleTickEventEv+0x88>
 8014a52:	6803      	ldr	r3, [r0, #0]
 8014a54:	68db      	ldr	r3, [r3, #12]
 8014a56:	4798      	blx	r3
 8014a58:	b130      	cbz	r0, 8014a68 <_ZN8touchgfx10ScrollBase15handleTickEventEv+0x88>
 8014a5a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8014a5e:	6803      	ldr	r3, [r0, #0]
 8014a60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a64:	689b      	ldr	r3, [r3, #8]
 8014a66:	4718      	bx	r3
 8014a68:	bd70      	pop	{r4, r5, r6, pc}

08014a6a <_ZN8touchgfx10ScrollBase13setHorizontalEb>:
 8014a6a:	f081 0301 	eor.w	r3, r1, #1
 8014a6e:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
 8014a72:	302c      	adds	r0, #44	; 0x2c
 8014a74:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
 8014a78:	f7ff bc63 	b.w	8014342 <_ZN8touchgfx12DrawableList13setHorizontalEb>

08014a7c <_ZN8touchgfx10ScrollBaseC1Ev>:
 8014a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a7e:	2500      	movs	r5, #0
 8014a80:	4606      	mov	r6, r0
 8014a82:	2701      	movs	r7, #1
 8014a84:	4b23      	ldr	r3, [pc, #140]	; (8014b14 <_ZN8touchgfx10ScrollBaseC1Ev+0x98>)
 8014a86:	4604      	mov	r4, r0
 8014a88:	8085      	strh	r5, [r0, #4]
 8014a8a:	80c5      	strh	r5, [r0, #6]
 8014a8c:	8105      	strh	r5, [r0, #8]
 8014a8e:	8145      	strh	r5, [r0, #10]
 8014a90:	8185      	strh	r5, [r0, #12]
 8014a92:	81c5      	strh	r5, [r0, #14]
 8014a94:	8205      	strh	r5, [r0, #16]
 8014a96:	8245      	strh	r5, [r0, #18]
 8014a98:	61c5      	str	r5, [r0, #28]
 8014a9a:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
 8014a9e:	f880 7025 	strb.w	r7, [r0, #37]	; 0x25
 8014aa2:	6285      	str	r5, [r0, #40]	; 0x28
 8014aa4:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8014aa8:	f846 3b2c 	str.w	r3, [r6], #44
 8014aac:	4630      	mov	r0, r6
 8014aae:	f7ff fa71 	bl	8013f94 <_ZN8touchgfx12DrawableListC1Ev>
 8014ab2:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8014ab6:	230a      	movs	r3, #10
 8014ab8:	4631      	mov	r1, r6
 8014aba:	4620      	mov	r0, r4
 8014abc:	67a5      	str	r5, [r4, #120]	; 0x78
 8014abe:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
 8014ac2:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
 8014ac6:	f884 50b9 	strb.w	r5, [r4, #185]	; 0xb9
 8014aca:	e9c4 231f 	strd	r2, r3, [r4, #124]	; 0x7c
 8014ace:	4b12      	ldr	r3, [pc, #72]	; (8014b18 <_ZN8touchgfx10ScrollBaseC1Ev+0x9c>)
 8014ad0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8014ad4:	231e      	movs	r3, #30
 8014ad6:	e9c4 5523 	strd	r5, r5, [r4, #140]	; 0x8c
 8014ada:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
 8014ade:	e9c4 5525 	strd	r5, r5, [r4, #148]	; 0x94
 8014ae2:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
 8014ae6:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
 8014aea:	e9c4 552c 	strd	r5, r5, [r4, #176]	; 0xb0
 8014aee:	f000 f8f1 	bl	8014cd4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014af2:	462a      	mov	r2, r5
 8014af4:	4629      	mov	r1, r5
 8014af6:	4630      	mov	r0, r6
 8014af8:	f7f7 ff1c 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
 8014afc:	4629      	mov	r1, r5
 8014afe:	4630      	mov	r0, r6
 8014b00:	f7ff fc1f 	bl	8014342 <_ZN8touchgfx12DrawableList13setHorizontalEb>
 8014b04:	4630      	mov	r0, r6
 8014b06:	4629      	mov	r1, r5
 8014b08:	f7ff fc26 	bl	8014358 <_ZN8touchgfx12DrawableList11setCircularEb>
 8014b0c:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
 8014b10:	4620      	mov	r0, r4
 8014b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b14:	08028c1c 	.word	0x08028c1c
 8014b18:	0801a085 	.word	0x0801a085

08014b1c <_ZN8touchgfx10ScrollBase11setCircularEb>:
 8014b1c:	302c      	adds	r0, #44	; 0x2c
 8014b1e:	f7ff bc1b 	b.w	8014358 <_ZN8touchgfx12DrawableList11setCircularEb>

08014b22 <_ZN8touchgfx10ScrollBase8setWidthEs>:
 8014b22:	8101      	strh	r1, [r0, #8]
 8014b24:	302c      	adds	r0, #44	; 0x2c
 8014b26:	f7ff bc06 	b.w	8014336 <_ZN8touchgfx12DrawableList8setWidthEs>

08014b2a <_ZN8touchgfx10ScrollBase9setHeightEs>:
 8014b2a:	8141      	strh	r1, [r0, #10]
 8014b2c:	302c      	adds	r0, #44	; 0x2c
 8014b2e:	f7ff bc05 	b.w	801433c <_ZN8touchgfx12DrawableList9setHeightEs>

08014b32 <_ZNK8touchgfx10ScrollBase13getHorizontalEv>:
 8014b32:	302c      	adds	r0, #44	; 0x2c
 8014b34:	f7ff ba15 	b.w	8013f62 <_ZNK8touchgfx12DrawableList13getHorizontalEv>

08014b38 <_ZNK8touchgfx10ScrollBase11getCircularEv>:
 8014b38:	302c      	adds	r0, #44	; 0x2c
 8014b3a:	f7ff ba15 	b.w	8013f68 <_ZNK8touchgfx12DrawableList11getCircularEv>

08014b3e <_ZNK8touchgfx10ScrollBase15getDrawableSizeEv>:
 8014b3e:	302c      	adds	r0, #44	; 0x2c
 8014b40:	f7ff ba18 	b.w	8013f74 <_ZNK8touchgfx12DrawableList15getDrawableSizeEv>

08014b44 <_ZNK8touchgfx10ScrollBase17getDrawableMarginEv>:
 8014b44:	302c      	adds	r0, #44	; 0x2c
 8014b46:	f7ff ba1b 	b.w	8013f80 <_ZNK8touchgfx12DrawableList17getDrawableMarginEv>

08014b4a <_ZN8touchgfx11ScrollWheelD1Ev>:
 8014b4a:	4770      	bx	lr

08014b4c <_ZN8touchgfx11ScrollWheelD0Ev>:
 8014b4c:	b510      	push	{r4, lr}
 8014b4e:	4604      	mov	r4, r0
 8014b50:	21c0      	movs	r1, #192	; 0xc0
 8014b52:	f010 f856 	bl	8024c02 <_ZdlPvj>
 8014b56:	4620      	mov	r0, r4
 8014b58:	bd10      	pop	{r4, pc}

08014b5a <_ZN8touchgfx11ScrollWheel12setDrawablesERNS_26DrawableListItemsInterfaceERNS_15GenericCallbackIPS1_ssEE>:
 8014b5a:	b570      	push	{r4, r5, r6, lr}
 8014b5c:	460d      	mov	r5, r1
 8014b5e:	4604      	mov	r4, r0
 8014b60:	4616      	mov	r6, r2
 8014b62:	f7ff fedb 	bl	801491c <_ZN8touchgfx10ScrollBase13stopAnimationEv>
 8014b66:	682b      	ldr	r3, [r5, #0]
 8014b68:	4628      	mov	r0, r5
 8014b6a:	68db      	ldr	r3, [r3, #12]
 8014b6c:	4798      	blx	r3
 8014b6e:	4633      	mov	r3, r6
 8014b70:	f8a4 0078 	strh.w	r0, [r4, #120]	; 0x78
 8014b74:	4629      	mov	r1, r5
 8014b76:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8014b7a:	2200      	movs	r2, #0
 8014b7c:	f7ff fbf7 	bl	801436e <_ZN8touchgfx12DrawableList12setDrawablesERNS_26DrawableListItemsInterfaceEsRNS_15GenericCallbackIPS1_ssEE>
 8014b80:	6823      	ldr	r3, [r4, #0]
 8014b82:	4620      	mov	r0, r4
 8014b84:	2100      	movs	r1, #0
 8014b86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8014b8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014b8e:	4718      	bx	r3

08014b90 <_ZN8touchgfx11ScrollWheelC1Ev>:
 8014b90:	b510      	push	{r4, lr}
 8014b92:	4604      	mov	r4, r0
 8014b94:	f7ff fd14 	bl	80145c0 <_ZN8touchgfx15ScrollWheelBaseC1Ev>
 8014b98:	4b01      	ldr	r3, [pc, #4]	; (8014ba0 <_ZN8touchgfx11ScrollWheelC1Ev+0x10>)
 8014b9a:	4620      	mov	r0, r4
 8014b9c:	6023      	str	r3, [r4, #0]
 8014b9e:	bd10      	pop	{r4, pc}
 8014ba0:	08028cec 	.word	0x08028cec

08014ba4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8014ba4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014ba6:	2000      	movs	r0, #0
 8014ba8:	b12b      	cbz	r3, 8014bb6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014baa:	b920      	cbnz	r0, 8014bb6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8014bac:	1a5a      	subs	r2, r3, r1
 8014bae:	699b      	ldr	r3, [r3, #24]
 8014bb0:	4250      	negs	r0, r2
 8014bb2:	4150      	adcs	r0, r2
 8014bb4:	e7f8      	b.n	8014ba8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8014bb6:	4770      	bx	lr

08014bb8 <_ZN8touchgfx9Container9removeAllEv>:
 8014bb8:	2200      	movs	r2, #0
 8014bba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014bbc:	b123      	cbz	r3, 8014bc8 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8014bbe:	6999      	ldr	r1, [r3, #24]
 8014bc0:	6281      	str	r1, [r0, #40]	; 0x28
 8014bc2:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8014bc6:	e7f8      	b.n	8014bba <_ZN8touchgfx9Container9removeAllEv+0x2>
 8014bc8:	4770      	bx	lr

08014bca <_ZN8touchgfx9Container6unlinkEv>:
 8014bca:	2300      	movs	r3, #0
 8014bcc:	6283      	str	r3, [r0, #40]	; 0x28
 8014bce:	4770      	bx	lr

08014bd0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8014bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bd4:	461f      	mov	r7, r3
 8014bd6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8014bda:	460d      	mov	r5, r1
 8014bdc:	4616      	mov	r6, r2
 8014bde:	b103      	cbz	r3, 8014be2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8014be0:	6038      	str	r0, [r7, #0]
 8014be2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014be4:	b314      	cbz	r4, 8014c2c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8014be6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014bea:	b1eb      	cbz	r3, 8014c28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014bec:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014bf0:	428d      	cmp	r5, r1
 8014bf2:	db19      	blt.n	8014c28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014bf4:	b289      	uxth	r1, r1
 8014bf6:	8923      	ldrh	r3, [r4, #8]
 8014bf8:	440b      	add	r3, r1
 8014bfa:	b21b      	sxth	r3, r3
 8014bfc:	429d      	cmp	r5, r3
 8014bfe:	da13      	bge.n	8014c28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014c00:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014c04:	4296      	cmp	r6, r2
 8014c06:	db0f      	blt.n	8014c28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014c08:	b292      	uxth	r2, r2
 8014c0a:	8963      	ldrh	r3, [r4, #10]
 8014c0c:	4413      	add	r3, r2
 8014c0e:	b21b      	sxth	r3, r3
 8014c10:	429e      	cmp	r6, r3
 8014c12:	da09      	bge.n	8014c28 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8014c14:	6823      	ldr	r3, [r4, #0]
 8014c16:	1ab2      	subs	r2, r6, r2
 8014c18:	1a69      	subs	r1, r5, r1
 8014c1a:	4620      	mov	r0, r4
 8014c1c:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8014c20:	b212      	sxth	r2, r2
 8014c22:	463b      	mov	r3, r7
 8014c24:	b209      	sxth	r1, r1
 8014c26:	47c0      	blx	r8
 8014c28:	69a4      	ldr	r4, [r4, #24]
 8014c2a:	e7db      	b.n	8014be4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8014c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014c30 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8014c30:	2200      	movs	r2, #0
 8014c32:	8002      	strh	r2, [r0, #0]
 8014c34:	8042      	strh	r2, [r0, #2]
 8014c36:	8082      	strh	r2, [r0, #4]
 8014c38:	80c2      	strh	r2, [r0, #6]
 8014c3a:	4770      	bx	lr

08014c3c <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8014c3c:	b570      	push	{r4, r5, r6, lr}
 8014c3e:	460d      	mov	r5, r1
 8014c40:	4616      	mov	r6, r2
 8014c42:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014c44:	b13c      	cbz	r4, 8014c56 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8014c46:	6823      	ldr	r3, [r4, #0]
 8014c48:	4620      	mov	r0, r4
 8014c4a:	4632      	mov	r2, r6
 8014c4c:	4629      	mov	r1, r5
 8014c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c50:	4798      	blx	r3
 8014c52:	69a4      	ldr	r4, [r4, #24]
 8014c54:	e7f6      	b.n	8014c44 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8014c56:	bd70      	pop	{r4, r5, r6, pc}

08014c58 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8014c58:	b538      	push	{r3, r4, r5, lr}
 8014c5a:	460d      	mov	r5, r1
 8014c5c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014c5e:	b134      	cbz	r4, 8014c6e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8014c60:	682b      	ldr	r3, [r5, #0]
 8014c62:	4621      	mov	r1, r4
 8014c64:	4628      	mov	r0, r5
 8014c66:	689b      	ldr	r3, [r3, #8]
 8014c68:	4798      	blx	r3
 8014c6a:	69a4      	ldr	r4, [r4, #24]
 8014c6c:	e7f7      	b.n	8014c5e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8014c6e:	bd38      	pop	{r3, r4, r5, pc}

08014c70 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8014c70:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014c72:	b19b      	cbz	r3, 8014c9c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014c74:	428b      	cmp	r3, r1
 8014c76:	d109      	bne.n	8014c8c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8014c78:	699a      	ldr	r2, [r3, #24]
 8014c7a:	2100      	movs	r1, #0
 8014c7c:	6159      	str	r1, [r3, #20]
 8014c7e:	6282      	str	r2, [r0, #40]	; 0x28
 8014c80:	b902      	cbnz	r2, 8014c84 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8014c82:	4770      	bx	lr
 8014c84:	6199      	str	r1, [r3, #24]
 8014c86:	4770      	bx	lr
 8014c88:	4613      	mov	r3, r2
 8014c8a:	b13a      	cbz	r2, 8014c9c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014c8c:	699a      	ldr	r2, [r3, #24]
 8014c8e:	428a      	cmp	r2, r1
 8014c90:	d1fa      	bne.n	8014c88 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8014c92:	698a      	ldr	r2, [r1, #24]
 8014c94:	619a      	str	r2, [r3, #24]
 8014c96:	2300      	movs	r3, #0
 8014c98:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8014c9c:	4770      	bx	lr

08014c9e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8014c9e:	b410      	push	{r4}
 8014ca0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014ca2:	4604      	mov	r4, r0
 8014ca4:	b92b      	cbnz	r3, 8014cb2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8014ca6:	6803      	ldr	r3, [r0, #0]
 8014ca8:	4611      	mov	r1, r2
 8014caa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014cb0:	4718      	bx	r3
 8014cb2:	b941      	cbnz	r1, 8014cc6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8014cb4:	6193      	str	r3, [r2, #24]
 8014cb6:	6282      	str	r2, [r0, #40]	; 0x28
 8014cb8:	6154      	str	r4, [r2, #20]
 8014cba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014cbe:	4770      	bx	lr
 8014cc0:	4603      	mov	r3, r0
 8014cc2:	2800      	cmp	r0, #0
 8014cc4:	d0f9      	beq.n	8014cba <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8014cc6:	4299      	cmp	r1, r3
 8014cc8:	6998      	ldr	r0, [r3, #24]
 8014cca:	d1f9      	bne.n	8014cc0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8014ccc:	6190      	str	r0, [r2, #24]
 8014cce:	618a      	str	r2, [r1, #24]
 8014cd0:	e7f2      	b.n	8014cb8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08014cd4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8014cd4:	4288      	cmp	r0, r1
 8014cd6:	b508      	push	{r3, lr}
 8014cd8:	d105      	bne.n	8014ce6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8014cda:	4b11      	ldr	r3, [pc, #68]	; (8014d20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8014cdc:	2123      	movs	r1, #35	; 0x23
 8014cde:	4a11      	ldr	r2, [pc, #68]	; (8014d24 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014ce0:	4811      	ldr	r0, [pc, #68]	; (8014d28 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8014ce2:	f00f ffb9 	bl	8024c58 <__assert_func>
 8014ce6:	694b      	ldr	r3, [r1, #20]
 8014ce8:	b11b      	cbz	r3, 8014cf2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8014cea:	4b10      	ldr	r3, [pc, #64]	; (8014d2c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8014cec:	2124      	movs	r1, #36	; 0x24
 8014cee:	4a0d      	ldr	r2, [pc, #52]	; (8014d24 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014cf0:	e7f6      	b.n	8014ce0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8014cf2:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8014cf6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014cf8:	b913      	cbnz	r3, 8014d00 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8014cfa:	6281      	str	r1, [r0, #40]	; 0x28
 8014cfc:	bd08      	pop	{r3, pc}
 8014cfe:	4613      	mov	r3, r2
 8014d00:	699a      	ldr	r2, [r3, #24]
 8014d02:	b12a      	cbz	r2, 8014d10 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8014d04:	428b      	cmp	r3, r1
 8014d06:	d1fa      	bne.n	8014cfe <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8014d08:	4b09      	ldr	r3, [pc, #36]	; (8014d30 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8014d0a:	2135      	movs	r1, #53	; 0x35
 8014d0c:	4a05      	ldr	r2, [pc, #20]	; (8014d24 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014d0e:	e7e7      	b.n	8014ce0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8014d10:	428b      	cmp	r3, r1
 8014d12:	d103      	bne.n	8014d1c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8014d14:	4b06      	ldr	r3, [pc, #24]	; (8014d30 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8014d16:	2138      	movs	r1, #56	; 0x38
 8014d18:	4a02      	ldr	r2, [pc, #8]	; (8014d24 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8014d1a:	e7e1      	b.n	8014ce0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8014d1c:	6199      	str	r1, [r3, #24]
 8014d1e:	e7ed      	b.n	8014cfc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8014d20:	08028dc0 	.word	0x08028dc0
 8014d24:	08028f14 	.word	0x08028f14
 8014d28:	08028dec 	.word	0x08028dec
 8014d2c:	08028e1f 	.word	0x08028e1f
 8014d30:	08028e55 	.word	0x08028e55

08014d34 <_ZN8touchgfx4RectaNERKS0_>:
 8014d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d38:	888b      	ldrh	r3, [r1, #4]
 8014d3a:	f9b1 9000 	ldrsh.w	r9, [r1]
 8014d3e:	f9b0 a000 	ldrsh.w	sl, [r0]
 8014d42:	444b      	add	r3, r9
 8014d44:	b29b      	uxth	r3, r3
 8014d46:	fa0f f883 	sxth.w	r8, r3
 8014d4a:	45c2      	cmp	sl, r8
 8014d4c:	da30      	bge.n	8014db0 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8014d4e:	8882      	ldrh	r2, [r0, #4]
 8014d50:	4452      	add	r2, sl
 8014d52:	b292      	uxth	r2, r2
 8014d54:	fa0f fe82 	sxth.w	lr, r2
 8014d58:	45f1      	cmp	r9, lr
 8014d5a:	da29      	bge.n	8014db0 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8014d5c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8014d60:	88cc      	ldrh	r4, [r1, #6]
 8014d62:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8014d66:	442c      	add	r4, r5
 8014d68:	b224      	sxth	r4, r4
 8014d6a:	42a6      	cmp	r6, r4
 8014d6c:	da20      	bge.n	8014db0 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8014d6e:	88c7      	ldrh	r7, [r0, #6]
 8014d70:	4437      	add	r7, r6
 8014d72:	b2bf      	uxth	r7, r7
 8014d74:	fa0f fc87 	sxth.w	ip, r7
 8014d78:	4565      	cmp	r5, ip
 8014d7a:	da19      	bge.n	8014db0 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8014d7c:	45ca      	cmp	sl, r9
 8014d7e:	4654      	mov	r4, sl
 8014d80:	bfb8      	it	lt
 8014d82:	464c      	movlt	r4, r9
 8014d84:	42b5      	cmp	r5, r6
 8014d86:	bfb8      	it	lt
 8014d88:	4635      	movlt	r5, r6
 8014d8a:	45f0      	cmp	r8, lr
 8014d8c:	bfc8      	it	gt
 8014d8e:	4613      	movgt	r3, r2
 8014d90:	1b1b      	subs	r3, r3, r4
 8014d92:	8083      	strh	r3, [r0, #4]
 8014d94:	88ca      	ldrh	r2, [r1, #6]
 8014d96:	884b      	ldrh	r3, [r1, #2]
 8014d98:	8004      	strh	r4, [r0, #0]
 8014d9a:	4413      	add	r3, r2
 8014d9c:	8045      	strh	r5, [r0, #2]
 8014d9e:	b29b      	uxth	r3, r3
 8014da0:	b21a      	sxth	r2, r3
 8014da2:	4594      	cmp	ip, r2
 8014da4:	bfb8      	it	lt
 8014da6:	463b      	movlt	r3, r7
 8014da8:	1b5b      	subs	r3, r3, r5
 8014daa:	80c3      	strh	r3, [r0, #6]
 8014dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014db0:	2300      	movs	r3, #0
 8014db2:	8003      	strh	r3, [r0, #0]
 8014db4:	8043      	strh	r3, [r0, #2]
 8014db6:	8083      	strh	r3, [r0, #4]
 8014db8:	80c3      	strh	r3, [r0, #6]
 8014dba:	e7f7      	b.n	8014dac <_ZN8touchgfx4RectaNERKS0_+0x78>

08014dbc <_ZNK8touchgfx4Rect7isEmptyEv>:
 8014dbc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014dc0:	b12b      	cbz	r3, 8014dce <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 8014dc2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8014dc6:	fab0 f080 	clz	r0, r0
 8014dca:	0940      	lsrs	r0, r0, #5
 8014dcc:	4770      	bx	lr
 8014dce:	2001      	movs	r0, #1
 8014dd0:	4770      	bx	lr

08014dd2 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8014dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	4604      	mov	r4, r0
 8014dda:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8014ddc:	8003      	strh	r3, [r0, #0]
 8014dde:	8043      	strh	r3, [r0, #2]
 8014de0:	8083      	strh	r3, [r0, #4]
 8014de2:	80c3      	strh	r3, [r0, #6]
 8014de4:	2d00      	cmp	r5, #0
 8014de6:	d040      	beq.n	8014e6a <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8014de8:	1d28      	adds	r0, r5, #4
 8014dea:	f7ff ffe7 	bl	8014dbc <_ZNK8touchgfx4Rect7isEmptyEv>
 8014dee:	b988      	cbnz	r0, 8014e14 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8014df0:	4620      	mov	r0, r4
 8014df2:	f7ff ffe3 	bl	8014dbc <_ZNK8touchgfx4Rect7isEmptyEv>
 8014df6:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8014dfa:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014dfe:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8014e02:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8014e06:	b138      	cbz	r0, 8014e18 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8014e08:	8022      	strh	r2, [r4, #0]
 8014e0a:	8063      	strh	r3, [r4, #2]
 8014e0c:	f8a4 e004 	strh.w	lr, [r4, #4]
 8014e10:	f8a4 c006 	strh.w	ip, [r4, #6]
 8014e14:	69ad      	ldr	r5, [r5, #24]
 8014e16:	e7e5      	b.n	8014de4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8014e18:	f9b4 0000 	ldrsh.w	r0, [r4]
 8014e1c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8014e20:	4290      	cmp	r0, r2
 8014e22:	4607      	mov	r7, r0
 8014e24:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8014e28:	460e      	mov	r6, r1
 8014e2a:	bfa8      	it	ge
 8014e2c:	4617      	movge	r7, r2
 8014e2e:	4299      	cmp	r1, r3
 8014e30:	4472      	add	r2, lr
 8014e32:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8014e36:	bfa8      	it	ge
 8014e38:	461e      	movge	r6, r3
 8014e3a:	4440      	add	r0, r8
 8014e3c:	4471      	add	r1, lr
 8014e3e:	4463      	add	r3, ip
 8014e40:	b200      	sxth	r0, r0
 8014e42:	8027      	strh	r7, [r4, #0]
 8014e44:	b212      	sxth	r2, r2
 8014e46:	8066      	strh	r6, [r4, #2]
 8014e48:	b209      	sxth	r1, r1
 8014e4a:	b21b      	sxth	r3, r3
 8014e4c:	4290      	cmp	r0, r2
 8014e4e:	bfac      	ite	ge
 8014e50:	ebc7 0200 	rsbge	r2, r7, r0
 8014e54:	ebc7 0202 	rsblt	r2, r7, r2
 8014e58:	4299      	cmp	r1, r3
 8014e5a:	bfac      	ite	ge
 8014e5c:	ebc6 0301 	rsbge	r3, r6, r1
 8014e60:	ebc6 0303 	rsblt	r3, r6, r3
 8014e64:	80a2      	strh	r2, [r4, #4]
 8014e66:	80e3      	strh	r3, [r4, #6]
 8014e68:	e7d4      	b.n	8014e14 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8014e6a:	4620      	mov	r0, r4
 8014e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014e70 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8014e70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014e74:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8014e78:	b383      	cbz	r3, 8014edc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014e7a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014e7c:	b374      	cbz	r4, 8014edc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014e7e:	f9b1 5000 	ldrsh.w	r5, [r1]
 8014e82:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8014e86:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8014e8a:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8014e8e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014e92:	b303      	cbz	r3, 8014ed6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8014e94:	4668      	mov	r0, sp
 8014e96:	1d21      	adds	r1, r4, #4
 8014e98:	f8ad 5000 	strh.w	r5, [sp]
 8014e9c:	f8ad 6002 	strh.w	r6, [sp, #2]
 8014ea0:	f8ad 7004 	strh.w	r7, [sp, #4]
 8014ea4:	f8ad 8006 	strh.w	r8, [sp, #6]
 8014ea8:	f7ff ff44 	bl	8014d34 <_ZN8touchgfx4RectaNERKS0_>
 8014eac:	4668      	mov	r0, sp
 8014eae:	f7ff ff85 	bl	8014dbc <_ZNK8touchgfx4Rect7isEmptyEv>
 8014eb2:	b980      	cbnz	r0, 8014ed6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8014eb4:	f8bd 3000 	ldrh.w	r3, [sp]
 8014eb8:	4669      	mov	r1, sp
 8014eba:	88a2      	ldrh	r2, [r4, #4]
 8014ebc:	4620      	mov	r0, r4
 8014ebe:	1a9b      	subs	r3, r3, r2
 8014ec0:	88e2      	ldrh	r2, [r4, #6]
 8014ec2:	f8ad 3000 	strh.w	r3, [sp]
 8014ec6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014eca:	1a9b      	subs	r3, r3, r2
 8014ecc:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014ed0:	6823      	ldr	r3, [r4, #0]
 8014ed2:	689b      	ldr	r3, [r3, #8]
 8014ed4:	4798      	blx	r3
 8014ed6:	69a4      	ldr	r4, [r4, #24]
 8014ed8:	2c00      	cmp	r4, #0
 8014eda:	d1d8      	bne.n	8014e8e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8014edc:	b002      	add	sp, #8
 8014ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014ee2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8014ee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014ee4:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8014ee8:	460d      	mov	r5, r1
 8014eea:	4616      	mov	r6, r2
 8014eec:	b323      	cbz	r3, 8014f38 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014eee:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8014ef0:	b314      	cbz	r4, 8014f38 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014ef2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8014ef6:	b1eb      	cbz	r3, 8014f34 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8014ef8:	6828      	ldr	r0, [r5, #0]
 8014efa:	466b      	mov	r3, sp
 8014efc:	6869      	ldr	r1, [r5, #4]
 8014efe:	c303      	stmia	r3!, {r0, r1}
 8014f00:	4668      	mov	r0, sp
 8014f02:	1d21      	adds	r1, r4, #4
 8014f04:	f7ff ff16 	bl	8014d34 <_ZN8touchgfx4RectaNERKS0_>
 8014f08:	4668      	mov	r0, sp
 8014f0a:	f7ff ff57 	bl	8014dbc <_ZNK8touchgfx4Rect7isEmptyEv>
 8014f0e:	b988      	cbnz	r0, 8014f34 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8014f10:	f8bd 3000 	ldrh.w	r3, [sp]
 8014f14:	4669      	mov	r1, sp
 8014f16:	88a2      	ldrh	r2, [r4, #4]
 8014f18:	4620      	mov	r0, r4
 8014f1a:	1a9b      	subs	r3, r3, r2
 8014f1c:	88e2      	ldrh	r2, [r4, #6]
 8014f1e:	f8ad 3000 	strh.w	r3, [sp]
 8014f22:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014f26:	1a9b      	subs	r3, r3, r2
 8014f28:	4632      	mov	r2, r6
 8014f2a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014f2e:	6823      	ldr	r3, [r4, #0]
 8014f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014f32:	4798      	blx	r3
 8014f34:	69a4      	ldr	r4, [r4, #24]
 8014f36:	e7db      	b.n	8014ef0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8014f38:	b002      	add	sp, #8
 8014f3a:	bd70      	pop	{r4, r5, r6, pc}

08014f3c <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
 8014f3c:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
 8014f40:	4770      	bx	lr

08014f42 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
 8014f42:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
 8014f46:	4770      	bx	lr

08014f48 <_ZNK8touchgfx6Slider11getMinValueEv>:
 8014f48:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8014f4a:	4770      	bx	lr

08014f4c <_ZNK8touchgfx6Slider11getMaxValueEv>:
 8014f4c:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8014f4e:	4770      	bx	lr

08014f50 <_ZN8touchgfx6SliderD1Ev>:
 8014f50:	4770      	bx	lr

08014f52 <_ZN8touchgfx6Slider8setValueEi>:
 8014f52:	b570      	push	{r4, r5, r6, lr}
 8014f54:	6803      	ldr	r3, [r0, #0]
 8014f56:	4604      	mov	r4, r0
 8014f58:	e9d3 532a 	ldrd	r5, r3, [r3, #168]	; 0xa8
 8014f5c:	4798      	blx	r3
 8014f5e:	4601      	mov	r1, r0
 8014f60:	462b      	mov	r3, r5
 8014f62:	4620      	mov	r0, r4
 8014f64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014f68:	4718      	bx	r3

08014f6a <_ZNK8touchgfx6Slider15valueToPositionEi>:
 8014f6a:	b538      	push	{r3, r4, r5, lr}
 8014f6c:	e9d0 340d 	ldrd	r3, r4, [r0, #52]	; 0x34
 8014f70:	4605      	mov	r5, r0
 8014f72:	428c      	cmp	r4, r1
 8014f74:	bfa8      	it	ge
 8014f76:	460c      	movge	r4, r1
 8014f78:	429c      	cmp	r4, r3
 8014f7a:	bfac      	ite	ge
 8014f7c:	ebc3 0404 	rsbge	r4, r3, r4
 8014f80:	ebc3 0403 	rsblt	r4, r3, r3
 8014f84:	6803      	ldr	r3, [r0, #0]
 8014f86:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8014f8a:	4798      	blx	r3
 8014f8c:	682b      	ldr	r3, [r5, #0]
 8014f8e:	fb00 4404 	mla	r4, r0, r4, r4
 8014f92:	4628      	mov	r0, r5
 8014f94:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8014f98:	4798      	blx	r3
 8014f9a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 8014f9e:	f9b5 30ec 	ldrsh.w	r3, [r5, #236]	; 0xec
 8014fa2:	2a01      	cmp	r2, #1
 8014fa4:	fb94 f0f0 	sdiv	r0, r4, r0
 8014fa8:	bf08      	it	eq
 8014faa:	f9b5 20ee 	ldrsheq.w	r2, [r5, #238]	; 0xee
 8014fae:	4418      	add	r0, r3
 8014fb0:	bf04      	itt	eq
 8014fb2:	1a10      	subeq	r0, r2, r0
 8014fb4:	18c0      	addeq	r0, r0, r3
 8014fb6:	b200      	sxth	r0, r0
 8014fb8:	bd38      	pop	{r3, r4, r5, pc}

08014fba <_ZNK8touchgfx6Slider15positionToValueEs>:
 8014fba:	b570      	push	{r4, r5, r6, lr}
 8014fbc:	f9b0 30ec 	ldrsh.w	r3, [r0, #236]	; 0xec
 8014fc0:	4605      	mov	r5, r0
 8014fc2:	460c      	mov	r4, r1
 8014fc4:	428b      	cmp	r3, r1
 8014fc6:	d109      	bne.n	8014fdc <_ZNK8touchgfx6Slider15positionToValueEs+0x22>
 8014fc8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8014fca:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8014fce:	2b01      	cmp	r3, #1
 8014fd0:	bf01      	itttt	eq
 8014fd2:	6bab      	ldreq	r3, [r5, #56]	; 0x38
 8014fd4:	1a18      	subeq	r0, r3, r0
 8014fd6:	6b6b      	ldreq	r3, [r5, #52]	; 0x34
 8014fd8:	18c0      	addeq	r0, r0, r3
 8014fda:	bd70      	pop	{r4, r5, r6, pc}
 8014fdc:	f9b0 30ee 	ldrsh.w	r3, [r0, #238]	; 0xee
 8014fe0:	428b      	cmp	r3, r1
 8014fe2:	d101      	bne.n	8014fe8 <_ZNK8touchgfx6Slider15positionToValueEs+0x2e>
 8014fe4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8014fe6:	e7f0      	b.n	8014fca <_ZNK8touchgfx6Slider15positionToValueEs+0x10>
 8014fe8:	6803      	ldr	r3, [r0, #0]
 8014fea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8014fee:	4798      	blx	r3
 8014ff0:	682b      	ldr	r3, [r5, #0]
 8014ff2:	f9b5 10ec 	ldrsh.w	r1, [r5, #236]	; 0xec
 8014ff6:	4606      	mov	r6, r0
 8014ff8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8014ffc:	4628      	mov	r0, r5
 8014ffe:	1a64      	subs	r4, r4, r1
 8015000:	4798      	blx	r3
 8015002:	2102      	movs	r1, #2
 8015004:	682b      	ldr	r3, [r5, #0]
 8015006:	fb96 f6f1 	sdiv	r6, r6, r1
 801500a:	fb00 6404 	mla	r4, r0, r4, r6
 801500e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8015012:	4628      	mov	r0, r5
 8015014:	4798      	blx	r3
 8015016:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8015018:	fb94 f0f0 	sdiv	r0, r4, r0
 801501c:	4418      	add	r0, r3
 801501e:	e7d4      	b.n	8014fca <_ZNK8touchgfx6Slider15positionToValueEs+0x10>

08015020 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 8015020:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8015024:	2302      	movs	r3, #2
 8015026:	b92a      	cbnz	r2, 8015034 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x14>
 8015028:	f9b0 009c 	ldrsh.w	r0, [r0, #156]	; 0x9c
 801502c:	fb90 f0f3 	sdiv	r0, r0, r3
 8015030:	b280      	uxth	r0, r0
 8015032:	4770      	bx	lr
 8015034:	f9b0 009e 	ldrsh.w	r0, [r0, #158]	; 0x9e
 8015038:	e7f8      	b.n	801502c <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

0801503a <_ZN8touchgfx6Slider13setValueRangeEii>:
 801503a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801503c:	428b      	cmp	r3, r1
 801503e:	b410      	push	{r4}
 8015040:	db09      	blt.n	8015056 <_ZN8touchgfx6Slider13setValueRangeEii+0x1c>
 8015042:	4293      	cmp	r3, r2
 8015044:	bfa8      	it	ge
 8015046:	4613      	movge	r3, r2
 8015048:	6804      	ldr	r4, [r0, #0]
 801504a:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
 801504e:	46a4      	mov	ip, r4
 8015050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015054:	4760      	bx	ip
 8015056:	460b      	mov	r3, r1
 8015058:	e7f6      	b.n	8015048 <_ZN8touchgfx6Slider13setValueRangeEii+0xe>

0801505a <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 801505a:	f9b0 20ee 	ldrsh.w	r2, [r0, #238]	; 0xee
 801505e:	f9b0 00ec 	ldrsh.w	r0, [r0, #236]	; 0xec
 8015062:	1a10      	subs	r0, r2, r0
 8015064:	4770      	bx	lr

08015066 <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 8015066:	e9d0 020d 	ldrd	r0, r2, [r0, #52]	; 0x34
 801506a:	1a10      	subs	r0, r2, r0
 801506c:	4770      	bx	lr

0801506e <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 801506e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015072:	f9b0 60ec 	ldrsh.w	r6, [r0, #236]	; 0xec
 8015076:	4604      	mov	r4, r0
 8015078:	3094      	adds	r0, #148	; 0x94
 801507a:	428e      	cmp	r6, r1
 801507c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015080:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
 8015084:	bfb8      	it	lt
 8015086:	460e      	movlt	r6, r1
 8015088:	f9b0 105a 	ldrsh.w	r1, [r0, #90]	; 0x5a
 801508c:	428e      	cmp	r6, r1
 801508e:	bfa8      	it	ge
 8015090:	460e      	movge	r6, r1
 8015092:	fa1f f886 	uxth.w	r8, r6
 8015096:	2b00      	cmp	r3, #0
 8015098:	d132      	bne.n	8015100 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x92>
 801509a:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 801509e:	4631      	mov	r1, r6
 80150a0:	f7f7 fcd3 	bl	800ca4a <_ZN8touchgfx8Drawable6moveToEss>
 80150a4:	4638      	mov	r0, r7
 80150a6:	f004 faf3 	bl	8019690 <_ZNK8touchgfx8Drawable10invalidateEv>
 80150aa:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
 80150ae:	6823      	ldr	r3, [r4, #0]
 80150b0:	4620      	mov	r0, r4
 80150b2:	eba8 0802 	sub.w	r8, r8, r2
 80150b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80150ba:	fa1f f888 	uxth.w	r8, r8
 80150be:	4798      	blx	r3
 80150c0:	4480      	add	r8, r0
 80150c2:	f8a4 80c8 	strh.w	r8, [r4, #200]	; 0xc8
 80150c6:	4638      	mov	r0, r7
 80150c8:	f004 fae2 	bl	8019690 <_ZNK8touchgfx8Drawable10invalidateEv>
 80150cc:	6823      	ldr	r3, [r4, #0]
 80150ce:	4631      	mov	r1, r6
 80150d0:	4620      	mov	r0, r4
 80150d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80150d6:	4798      	blx	r3
 80150d8:	6320      	str	r0, [r4, #48]	; 0x30
 80150da:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 80150de:	2800      	cmp	r0, #0
 80150e0:	d03c      	beq.n	801515c <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xee>
 80150e2:	6803      	ldr	r3, [r0, #0]
 80150e4:	68db      	ldr	r3, [r3, #12]
 80150e6:	4798      	blx	r3
 80150e8:	2800      	cmp	r0, #0
 80150ea:	d037      	beq.n	801515c <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xee>
 80150ec:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 80150f0:	4621      	mov	r1, r4
 80150f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80150f4:	6803      	ldr	r3, [r0, #0]
 80150f6:	689b      	ldr	r3, [r3, #8]
 80150f8:	b003      	add	sp, #12
 80150fa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80150fe:	4718      	bx	r3
 8015100:	4632      	mov	r2, r6
 8015102:	f9b4 1098 	ldrsh.w	r1, [r4, #152]	; 0x98
 8015106:	f7f7 fca0 	bl	800ca4a <_ZN8touchgfx8Drawable6moveToEss>
 801510a:	4638      	mov	r0, r7
 801510c:	f004 fac0 	bl	8019690 <_ZNK8touchgfx8Drawable10invalidateEv>
 8015110:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 8015114:	f8b4 5042 	ldrh.w	r5, [r4, #66]	; 0x42
 8015118:	6823      	ldr	r3, [r4, #0]
 801511a:	4405      	add	r5, r0
 801511c:	4620      	mov	r0, r4
 801511e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015122:	b2ad      	uxth	r5, r5
 8015124:	4798      	blx	r3
 8015126:	6823      	ldr	r3, [r4, #0]
 8015128:	eba5 0508 	sub.w	r5, r5, r8
 801512c:	f9b4 90c4 	ldrsh.w	r9, [r4, #196]	; 0xc4
 8015130:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015134:	1a2d      	subs	r5, r5, r0
 8015136:	4620      	mov	r0, r4
 8015138:	4798      	blx	r3
 801513a:	4440      	add	r0, r8
 801513c:	b2ad      	uxth	r5, r5
 801513e:	f9b4 30c8 	ldrsh.w	r3, [r4, #200]	; 0xc8
 8015142:	4649      	mov	r1, r9
 8015144:	b22a      	sxth	r2, r5
 8015146:	9200      	str	r2, [sp, #0]
 8015148:	b202      	sxth	r2, r0
 801514a:	4638      	mov	r0, r7
 801514c:	f7f4 ff1e 	bl	8009f8c <_ZN8touchgfx8Drawable11setPositionEssss>
 8015150:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
 8015154:	1a2d      	subs	r5, r5, r0
 8015156:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
 801515a:	e7b4      	b.n	80150c6 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x58>
 801515c:	b003      	add	sp, #12
 801515e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08015162 <_ZN8touchgfx6SliderD0Ev>:
 8015162:	b510      	push	{r4, lr}
 8015164:	4604      	mov	r4, r0
 8015166:	21fc      	movs	r1, #252	; 0xfc
 8015168:	f00f fd4b 	bl	8024c02 <_ZdlPvj>
 801516c:	4620      	mov	r0, r4
 801516e:	bd10      	pop	{r4, pc}

08015170 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>:
 8015170:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015174:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8015178:	4604      	mov	r4, r0
 801517a:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 801517e:	4689      	mov	r9, r1
 8015180:	4616      	mov	r6, r2
 8015182:	461d      	mov	r5, r3
 8015184:	45b8      	cmp	r8, r7
 8015186:	d305      	bcc.n	8015194 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x24>
 8015188:	4b28      	ldr	r3, [pc, #160]	; (801522c <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xbc>)
 801518a:	2147      	movs	r1, #71	; 0x47
 801518c:	4a28      	ldr	r2, [pc, #160]	; (8015230 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xc0>)
 801518e:	4829      	ldr	r0, [pc, #164]	; (8015234 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xc4>)
 8015190:	f00f fd62 	bl	8024c58 <__assert_func>
 8015194:	f04f 0a00 	mov.w	sl, #0
 8015198:	b213      	sxth	r3, r2
 801519a:	fa0f fb81 	sxth.w	fp, r1
 801519e:	303c      	adds	r0, #60	; 0x3c
 80151a0:	f800 ac10 	strb.w	sl, [r0, #-16]
 80151a4:	461a      	mov	r2, r3
 80151a6:	4659      	mov	r1, fp
 80151a8:	9301      	str	r3, [sp, #4]
 80151aa:	f7f7 fbc3 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
 80151ae:	9b01      	ldr	r3, [sp, #4]
 80151b0:	4659      	mov	r1, fp
 80151b2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 80151b6:	461a      	mov	r2, r3
 80151b8:	f7f7 fbbc 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
 80151bc:	4652      	mov	r2, sl
 80151be:	4651      	mov	r1, sl
 80151c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80151c4:	f7f7 fbb6 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
 80151c8:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 80151cc:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 80151d0:	4620      	mov	r0, r4
 80151d2:	4449      	add	r1, r9
 80151d4:	f8a4 80ec 	strh.w	r8, [r4, #236]	; 0xec
 80151d8:	f8a4 70ee 	strh.w	r7, [r4, #238]	; 0xee
 80151dc:	b28b      	uxth	r3, r1
 80151de:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 80151e2:	4439      	add	r1, r7
 80151e4:	b289      	uxth	r1, r1
 80151e6:	428b      	cmp	r3, r1
 80151e8:	bf88      	it	hi
 80151ea:	b219      	sxthhi	r1, r3
 80151ec:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80151f0:	bf98      	it	ls
 80151f2:	b209      	sxthls	r1, r1
 80151f4:	441e      	add	r6, r3
 80151f6:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
 80151fa:	441d      	add	r5, r3
 80151fc:	b2b6      	uxth	r6, r6
 80151fe:	6823      	ldr	r3, [r4, #0]
 8015200:	b2ad      	uxth	r5, r5
 8015202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015204:	42ae      	cmp	r6, r5
 8015206:	bf8c      	ite	hi
 8015208:	b235      	sxthhi	r5, r6
 801520a:	b22d      	sxthls	r5, r5
 801520c:	4798      	blx	r3
 801520e:	6823      	ldr	r3, [r4, #0]
 8015210:	4629      	mov	r1, r5
 8015212:	4620      	mov	r0, r4
 8015214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015216:	4798      	blx	r3
 8015218:	6823      	ldr	r3, [r4, #0]
 801521a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801521c:	4620      	mov	r0, r4
 801521e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015222:	b003      	add	sp, #12
 8015224:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015228:	4718      	bx	r3
 801522a:	bf00      	nop
 801522c:	080290f8 	.word	0x080290f8
 8015230:	08029372 	.word	0x08029372
 8015234:	0802916c 	.word	0x0802916c

08015238 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>:
 8015238:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801523c:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 8015240:	4604      	mov	r4, r0
 8015242:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 8015246:	4689      	mov	r9, r1
 8015248:	4690      	mov	r8, r2
 801524a:	461d      	mov	r5, r3
 801524c:	42b7      	cmp	r7, r6
 801524e:	d305      	bcc.n	801525c <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x24>
 8015250:	4b25      	ldr	r3, [pc, #148]	; (80152e8 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb0>)
 8015252:	2163      	movs	r1, #99	; 0x63
 8015254:	4a25      	ldr	r2, [pc, #148]	; (80152ec <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb4>)
 8015256:	4826      	ldr	r0, [pc, #152]	; (80152f0 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb8>)
 8015258:	f00f fcfe 	bl	8024c58 <__assert_func>
 801525c:	2301      	movs	r3, #1
 801525e:	fa0f fa81 	sxth.w	sl, r1
 8015262:	fa0f fb82 	sxth.w	fp, r2
 8015266:	303c      	adds	r0, #60	; 0x3c
 8015268:	f800 3c10 	strb.w	r3, [r0, #-16]
 801526c:	4651      	mov	r1, sl
 801526e:	465a      	mov	r2, fp
 8015270:	f7f7 fb60 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
 8015274:	465a      	mov	r2, fp
 8015276:	4651      	mov	r1, sl
 8015278:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 801527c:	f7f7 fb5a 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
 8015280:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 8015284:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 8015288:	4620      	mov	r0, r4
 801528a:	4489      	add	r9, r1
 801528c:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8015290:	6823      	ldr	r3, [r4, #0]
 8015292:	4429      	add	r1, r5
 8015294:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
 8015298:	fa1f f989 	uxth.w	r9, r9
 801529c:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
 80152a0:	44a8      	add	r8, r5
 80152a2:	f8b4 509e 	ldrh.w	r5, [r4, #158]	; 0x9e
 80152a6:	b289      	uxth	r1, r1
 80152a8:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
 80152ac:	4435      	add	r5, r6
 80152ae:	fa1f f888 	uxth.w	r8, r8
 80152b2:	4589      	cmp	r9, r1
 80152b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80152b6:	b2ad      	uxth	r5, r5
 80152b8:	bf8c      	ite	hi
 80152ba:	fa0f f189 	sxthhi.w	r1, r9
 80152be:	b209      	sxthls	r1, r1
 80152c0:	45a8      	cmp	r8, r5
 80152c2:	bf8c      	ite	hi
 80152c4:	fa0f f588 	sxthhi.w	r5, r8
 80152c8:	b22d      	sxthls	r5, r5
 80152ca:	4798      	blx	r3
 80152cc:	6823      	ldr	r3, [r4, #0]
 80152ce:	4629      	mov	r1, r5
 80152d0:	4620      	mov	r0, r4
 80152d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80152d4:	4798      	blx	r3
 80152d6:	6823      	ldr	r3, [r4, #0]
 80152d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80152da:	4620      	mov	r0, r4
 80152dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80152e0:	b001      	add	sp, #4
 80152e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152e6:	4718      	bx	r3
 80152e8:	08029086 	.word	0x08029086
 80152ec:	0802930d 	.word	0x0802930d
 80152f0:	0802916c 	.word	0x0802916c

080152f4 <_ZN8touchgfx6Slider13setValueRangeEiii>:
 80152f4:	4291      	cmp	r1, r2
 80152f6:	b510      	push	{r4, lr}
 80152f8:	db06      	blt.n	8015308 <_ZN8touchgfx6Slider13setValueRangeEiii+0x14>
 80152fa:	4b08      	ldr	r3, [pc, #32]	; (801531c <_ZN8touchgfx6Slider13setValueRangeEiii+0x28>)
 80152fc:	f240 110b 	movw	r1, #267	; 0x10b
 8015300:	4a07      	ldr	r2, [pc, #28]	; (8015320 <_ZN8touchgfx6Slider13setValueRangeEiii+0x2c>)
 8015302:	4808      	ldr	r0, [pc, #32]	; (8015324 <_ZN8touchgfx6Slider13setValueRangeEiii+0x30>)
 8015304:	f00f fca8 	bl	8024c58 <__assert_func>
 8015308:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 801530c:	6802      	ldr	r2, [r0, #0]
 801530e:	4619      	mov	r1, r3
 8015310:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 8015314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015318:	4710      	bx	r2
 801531a:	bf00      	nop
 801531c:	0802902e 	.word	0x0802902e
 8015320:	080292d1 	.word	0x080292d1
 8015324:	0802916c 	.word	0x0802916c

08015328 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 8015328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801532c:	790b      	ldrb	r3, [r1, #4]
 801532e:	4604      	mov	r4, r0
 8015330:	460d      	mov	r5, r1
 8015332:	b323      	cbz	r3, 801537e <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x56>
 8015334:	2b01      	cmp	r3, #1
 8015336:	d135      	bne.n	80153a4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8015338:	6823      	ldr	r3, [r4, #0]
 801533a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801533e:	f8d3 70a8 	ldr.w	r7, [r3, #168]	; 0xa8
 8015342:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015346:	2a00      	cmp	r2, #0
 8015348:	d12a      	bne.n	80153a0 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x78>
 801534a:	88ee      	ldrh	r6, [r5, #6]
 801534c:	4620      	mov	r0, r4
 801534e:	4798      	blx	r3
 8015350:	1a31      	subs	r1, r6, r0
 8015352:	4620      	mov	r0, r4
 8015354:	b209      	sxth	r1, r1
 8015356:	47b8      	blx	r7
 8015358:	792b      	ldrb	r3, [r5, #4]
 801535a:	2b01      	cmp	r3, #1
 801535c:	d122      	bne.n	80153a4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801535e:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 8015362:	b1f8      	cbz	r0, 80153a4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8015364:	6803      	ldr	r3, [r0, #0]
 8015366:	68db      	ldr	r3, [r3, #12]
 8015368:	4798      	blx	r3
 801536a:	b1d8      	cbz	r0, 80153a4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801536c:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 8015370:	4621      	mov	r1, r4
 8015372:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015374:	6803      	ldr	r3, [r0, #0]
 8015376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801537a:	689b      	ldr	r3, [r3, #8]
 801537c:	4718      	bx	r3
 801537e:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 8015382:	2800      	cmp	r0, #0
 8015384:	d0d8      	beq.n	8015338 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8015386:	6803      	ldr	r3, [r0, #0]
 8015388:	68db      	ldr	r3, [r3, #12]
 801538a:	4798      	blx	r3
 801538c:	2800      	cmp	r0, #0
 801538e:	d0d3      	beq.n	8015338 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8015390:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 8015394:	4621      	mov	r1, r4
 8015396:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015398:	6803      	ldr	r3, [r0, #0]
 801539a:	689b      	ldr	r3, [r3, #8]
 801539c:	4798      	blx	r3
 801539e:	e7cb      	b.n	8015338 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 80153a0:	892e      	ldrh	r6, [r5, #8]
 80153a2:	e7d3      	b.n	801534c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x24>
 80153a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080153a8 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 80153a8:	b570      	push	{r4, r5, r6, lr}
 80153aa:	6803      	ldr	r3, [r0, #0]
 80153ac:	4604      	mov	r4, r0
 80153ae:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 80153b2:	f8d3 60a8 	ldr.w	r6, [r3, #168]	; 0xa8
 80153b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80153ba:	b942      	cbnz	r2, 80153ce <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x26>
 80153bc:	894d      	ldrh	r5, [r1, #10]
 80153be:	4798      	blx	r3
 80153c0:	1a29      	subs	r1, r5, r0
 80153c2:	4633      	mov	r3, r6
 80153c4:	4620      	mov	r0, r4
 80153c6:	b209      	sxth	r1, r1
 80153c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80153cc:	4718      	bx	r3
 80153ce:	898d      	ldrh	r5, [r1, #12]
 80153d0:	e7f5      	b.n	80153be <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x16>
	...

080153d4 <_ZN8touchgfx6SliderC1Ev>:
 80153d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153d8:	4604      	mov	r4, r0
 80153da:	2500      	movs	r5, #0
 80153dc:	f7f7 fb82 	bl	800cae4 <_ZN8touchgfx9ContainerC1Ev>
 80153e0:	ae02      	add	r6, sp, #8
 80153e2:	4b25      	ldr	r3, [pc, #148]	; (8015478 <_ZN8touchgfx6SliderC1Ev+0xa4>)
 80153e4:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80153e8:	f04f 0b01 	mov.w	fp, #1
 80153ec:	f104 093c 	add.w	r9, r4, #60	; 0x3c
 80153f0:	f104 0a68 	add.w	sl, r4, #104	; 0x68
 80153f4:	6023      	str	r3, [r4, #0]
 80153f6:	f826 7d04 	strh.w	r7, [r6, #-4]!
 80153fa:	4648      	mov	r0, r9
 80153fc:	4631      	mov	r1, r6
 80153fe:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 8015402:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
 8015406:	f104 0894 	add.w	r8, r4, #148	; 0x94
 801540a:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 801540e:	f7f7 fbf9 	bl	800cc04 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8015412:	4631      	mov	r1, r6
 8015414:	4650      	mov	r0, sl
 8015416:	f8ad 7004 	strh.w	r7, [sp, #4]
 801541a:	f7f7 fbf3 	bl	800cc04 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801541e:	4631      	mov	r1, r6
 8015420:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
 8015424:	4640      	mov	r0, r8
 8015426:	f8ad 7004 	strh.w	r7, [sp, #4]
 801542a:	f7f7 fbeb 	bl	800cc04 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 801542e:	4630      	mov	r0, r6
 8015430:	f7f7 fb58 	bl	800cae4 <_ZN8touchgfx9ContainerC1Ev>
 8015434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8015438:	4651      	mov	r1, sl
 801543a:	4630      	mov	r0, r6
 801543c:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
 8015440:	e9c4 353b 	strd	r3, r5, [r4, #236]	; 0xec
 8015444:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
 8015448:	f7ff fc44 	bl	8014cd4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801544c:	4649      	mov	r1, r9
 801544e:	4620      	mov	r0, r4
 8015450:	f7ff fc40 	bl	8014cd4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015454:	4631      	mov	r1, r6
 8015456:	4620      	mov	r0, r4
 8015458:	f7ff fc3c 	bl	8014cd4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801545c:	4641      	mov	r1, r8
 801545e:	4620      	mov	r0, r4
 8015460:	f7ff fc38 	bl	8014cd4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8015464:	4620      	mov	r0, r4
 8015466:	2264      	movs	r2, #100	; 0x64
 8015468:	4629      	mov	r1, r5
 801546a:	f7ff fde6 	bl	801503a <_ZN8touchgfx6Slider13setValueRangeEii>
 801546e:	4620      	mov	r0, r4
 8015470:	b003      	add	sp, #12
 8015472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015476:	bf00      	nop
 8015478:	080291a4 	.word	0x080291a4

0801547c <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 801547c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015480:	4615      	mov	r5, r2
 8015482:	4604      	mov	r4, r0
 8015484:	4608      	mov	r0, r1
 8015486:	460e      	mov	r6, r1
 8015488:	461f      	mov	r7, r3
 801548a:	f005 fe93 	bl	801b1b4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801548e:	4680      	mov	r8, r0
 8015490:	4628      	mov	r0, r5
 8015492:	f005 fe8f 	bl	801b1b4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015496:	4580      	cmp	r8, r0
 8015498:	d005      	beq.n	80154a6 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x2a>
 801549a:	4b14      	ldr	r3, [pc, #80]	; (80154ec <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x70>)
 801549c:	2137      	movs	r1, #55	; 0x37
 801549e:	4a14      	ldr	r2, [pc, #80]	; (80154f0 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x74>)
 80154a0:	4814      	ldr	r0, [pc, #80]	; (80154f4 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x78>)
 80154a2:	f00f fbd9 	bl	8024c58 <__assert_func>
 80154a6:	4630      	mov	r0, r6
 80154a8:	f005 febe 	bl	801b228 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80154ac:	4680      	mov	r8, r0
 80154ae:	4628      	mov	r0, r5
 80154b0:	f005 feba 	bl	801b228 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80154b4:	4580      	cmp	r8, r0
 80154b6:	d1f0      	bne.n	801549a <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x1e>
 80154b8:	4631      	mov	r1, r6
 80154ba:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80154be:	f002 fbc3 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80154c2:	4629      	mov	r1, r5
 80154c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80154c8:	f002 fbbe 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80154cc:	4639      	mov	r1, r7
 80154ce:	f104 0094 	add.w	r0, r4, #148	; 0x94
 80154d2:	f002 fbb9 	bl	8017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80154d6:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 80154da:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 80154de:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 80154e2:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
 80154e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154ea:	bf00      	nop
 80154ec:	08028f4f 	.word	0x08028f4f
 80154f0:	08029264 	.word	0x08029264
 80154f4:	0802916c 	.word	0x0802916c

080154f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80154f8:	6803      	ldr	r3, [r0, #0]
 80154fa:	b513      	push	{r0, r1, r4, lr}
 80154fc:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8015500:	2300      	movs	r3, #0
 8015502:	e9cd 3300 	strd	r3, r3, [sp]
 8015506:	466b      	mov	r3, sp
 8015508:	47a0      	blx	r4
 801550a:	b002      	add	sp, #8
 801550c:	bd10      	pop	{r4, pc}

0801550e <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801550e:	2301      	movs	r3, #1
 8015510:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015514:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015518:	4770      	bx	lr

0801551a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801551a:	2301      	movs	r3, #1
 801551c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8015520:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8015524:	4770      	bx	lr

08015526 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8015526:	6843      	ldr	r3, [r0, #4]
 8015528:	2201      	movs	r2, #1
 801552a:	725a      	strb	r2, [r3, #9]
 801552c:	6840      	ldr	r0, [r0, #4]
 801552e:	6803      	ldr	r3, [r0, #0]
 8015530:	691b      	ldr	r3, [r3, #16]
 8015532:	4718      	bx	r3

08015534 <_ZN8touchgfx3HAL8flushDMAEv>:
 8015534:	6840      	ldr	r0, [r0, #4]
 8015536:	6803      	ldr	r3, [r0, #0]
 8015538:	689b      	ldr	r3, [r3, #8]
 801553a:	4718      	bx	r3

0801553c <_ZN8touchgfx3HAL10beginFrameEv>:
 801553c:	4b04      	ldr	r3, [pc, #16]	; (8015550 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801553e:	781b      	ldrb	r3, [r3, #0]
 8015540:	b123      	cbz	r3, 801554c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8015542:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8015546:	f080 0001 	eor.w	r0, r0, #1
 801554a:	4770      	bx	lr
 801554c:	2001      	movs	r0, #1
 801554e:	4770      	bx	lr
 8015550:	2000b2d2 	.word	0x2000b2d2

08015554 <_ZN8touchgfx3HAL8endFrameEv>:
 8015554:	b510      	push	{r4, lr}
 8015556:	4604      	mov	r4, r0
 8015558:	6840      	ldr	r0, [r0, #4]
 801555a:	6803      	ldr	r3, [r0, #0]
 801555c:	689b      	ldr	r3, [r3, #8]
 801555e:	4798      	blx	r3
 8015560:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8015564:	b113      	cbz	r3, 801556c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8015566:	2301      	movs	r3, #1
 8015568:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801556c:	bd10      	pop	{r4, pc}

0801556e <_ZN8touchgfx3HAL9taskEntryEv>:
 801556e:	b508      	push	{r3, lr}
 8015570:	6803      	ldr	r3, [r0, #0]
 8015572:	4604      	mov	r4, r0
 8015574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015576:	4798      	blx	r3
 8015578:	6823      	ldr	r3, [r4, #0]
 801557a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801557c:	4620      	mov	r0, r4
 801557e:	4798      	blx	r3
 8015580:	f7fd f9c4 	bl	801290c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8015584:	6823      	ldr	r3, [r4, #0]
 8015586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015588:	e7f8      	b.n	801557c <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801558c <_ZN8touchgfx3HAL4tickEv>:
 801558c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801558e:	6803      	ldr	r3, [r0, #0]
 8015590:	4604      	mov	r4, r0
 8015592:	4d5c      	ldr	r5, [pc, #368]	; (8015704 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8015594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015598:	4798      	blx	r3
 801559a:	2800      	cmp	r0, #0
 801559c:	f000 8097 	beq.w	80156ce <_ZN8touchgfx3HAL4tickEv+0x142>
 80155a0:	2001      	movs	r0, #1
 80155a2:	2600      	movs	r6, #0
 80155a4:	f7fc fe8a 	bl	80122bc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80155a8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80155ac:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80155b0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80155b4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80155b8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80155bc:	b133      	cbz	r3, 80155cc <_ZN8touchgfx3HAL4tickEv+0x40>
 80155be:	6823      	ldr	r3, [r4, #0]
 80155c0:	4620      	mov	r0, r4
 80155c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80155c6:	4798      	blx	r3
 80155c8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80155cc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80155d0:	2601      	movs	r6, #1
 80155d2:	6862      	ldr	r2, [r4, #4]
 80155d4:	f083 0301 	eor.w	r3, r3, #1
 80155d8:	702e      	strb	r6, [r5, #0]
 80155da:	7253      	strb	r3, [r2, #9]
 80155dc:	f003 fbe2 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 80155e0:	6803      	ldr	r3, [r0, #0]
 80155e2:	4631      	mov	r1, r6
 80155e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155e6:	4798      	blx	r3
 80155e8:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80155ec:	b90b      	cbnz	r3, 80155f2 <_ZN8touchgfx3HAL4tickEv+0x66>
 80155ee:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80155f2:	f003 fbd7 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 80155f6:	6803      	ldr	r3, [r0, #0]
 80155f8:	695b      	ldr	r3, [r3, #20]
 80155fa:	4798      	blx	r3
 80155fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80155fe:	6803      	ldr	r3, [r0, #0]
 8015600:	691b      	ldr	r3, [r3, #16]
 8015602:	4798      	blx	r3
 8015604:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015608:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801560c:	3b01      	subs	r3, #1
 801560e:	b2db      	uxtb	r3, r3
 8015610:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015614:	b10a      	cbz	r2, 801561a <_ZN8touchgfx3HAL4tickEv+0x8e>
 8015616:	2b00      	cmp	r3, #0
 8015618:	d1eb      	bne.n	80155f2 <_ZN8touchgfx3HAL4tickEv+0x66>
 801561a:	4a3b      	ldr	r2, [pc, #236]	; (8015708 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801561c:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8015620:	7813      	ldrb	r3, [r2, #0]
 8015622:	3301      	adds	r3, #1
 8015624:	b25b      	sxtb	r3, r3
 8015626:	4299      	cmp	r1, r3
 8015628:	7013      	strb	r3, [r2, #0]
 801562a:	dc10      	bgt.n	801564e <_ZN8touchgfx3HAL4tickEv+0xc2>
 801562c:	2300      	movs	r3, #0
 801562e:	68e0      	ldr	r0, [r4, #12]
 8015630:	a902      	add	r1, sp, #8
 8015632:	7013      	strb	r3, [r2, #0]
 8015634:	aa03      	add	r2, sp, #12
 8015636:	6803      	ldr	r3, [r0, #0]
 8015638:	68db      	ldr	r3, [r3, #12]
 801563a:	4798      	blx	r3
 801563c:	6823      	ldr	r3, [r4, #0]
 801563e:	2800      	cmp	r0, #0
 8015640:	d051      	beq.n	80156e6 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8015642:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015646:	4620      	mov	r0, r4
 8015648:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801564c:	4798      	blx	r3
 801564e:	2300      	movs	r3, #0
 8015650:	6960      	ldr	r0, [r4, #20]
 8015652:	f88d 3007 	strb.w	r3, [sp, #7]
 8015656:	b158      	cbz	r0, 8015670 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015658:	6803      	ldr	r3, [r0, #0]
 801565a:	f10d 0107 	add.w	r1, sp, #7
 801565e:	68db      	ldr	r3, [r3, #12]
 8015660:	4798      	blx	r3
 8015662:	b128      	cbz	r0, 8015670 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8015664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015666:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801566a:	6803      	ldr	r3, [r0, #0]
 801566c:	68db      	ldr	r3, [r3, #12]
 801566e:	4798      	blx	r3
 8015670:	f104 001c 	add.w	r0, r4, #28
 8015674:	f00d fe24 	bl	80232c0 <_ZN8touchgfx8Gestures4tickEv>
 8015678:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801567c:	b30b      	cbz	r3, 80156c2 <_ZN8touchgfx3HAL4tickEv+0x136>
 801567e:	6920      	ldr	r0, [r4, #16]
 8015680:	6803      	ldr	r3, [r0, #0]
 8015682:	691b      	ldr	r3, [r3, #16]
 8015684:	4798      	blx	r3
 8015686:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015688:	4606      	mov	r6, r0
 801568a:	b903      	cbnz	r3, 801568e <_ZN8touchgfx3HAL4tickEv+0x102>
 801568c:	6720      	str	r0, [r4, #112]	; 0x70
 801568e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015690:	4a1e      	ldr	r2, [pc, #120]	; (801570c <_ZN8touchgfx3HAL4tickEv+0x180>)
 8015692:	1af3      	subs	r3, r6, r3
 8015694:	4293      	cmp	r3, r2
 8015696:	d914      	bls.n	80156c2 <_ZN8touchgfx3HAL4tickEv+0x136>
 8015698:	6920      	ldr	r0, [r4, #16]
 801569a:	6803      	ldr	r3, [r0, #0]
 801569c:	699b      	ldr	r3, [r3, #24]
 801569e:	4798      	blx	r3
 80156a0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80156a2:	2264      	movs	r2, #100	; 0x64
 80156a4:	1af3      	subs	r3, r6, r3
 80156a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80156aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80156ae:	2800      	cmp	r0, #0
 80156b0:	dc1e      	bgt.n	80156f0 <_ZN8touchgfx3HAL4tickEv+0x164>
 80156b2:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80156b6:	6920      	ldr	r0, [r4, #16]
 80156b8:	2100      	movs	r1, #0
 80156ba:	6803      	ldr	r3, [r0, #0]
 80156bc:	69db      	ldr	r3, [r3, #28]
 80156be:	4798      	blx	r3
 80156c0:	6726      	str	r6, [r4, #112]	; 0x70
 80156c2:	f003 fb6f 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 80156c6:	6803      	ldr	r3, [r0, #0]
 80156c8:	2100      	movs	r1, #0
 80156ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156cc:	4798      	blx	r3
 80156ce:	6823      	ldr	r3, [r4, #0]
 80156d0:	4620      	mov	r0, r4
 80156d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80156d6:	4798      	blx	r3
 80156d8:	2001      	movs	r0, #1
 80156da:	f7fc fdfa 	bl	80122d2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80156de:	2300      	movs	r3, #0
 80156e0:	702b      	strb	r3, [r5, #0]
 80156e2:	b004      	add	sp, #16
 80156e4:	bd70      	pop	{r4, r5, r6, pc}
 80156e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80156ea:	4620      	mov	r0, r4
 80156ec:	4798      	blx	r3
 80156ee:	e7ae      	b.n	801564e <_ZN8touchgfx3HAL4tickEv+0xc2>
 80156f0:	2863      	cmp	r0, #99	; 0x63
 80156f2:	bfcb      	itete	gt
 80156f4:	2300      	movgt	r3, #0
 80156f6:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80156fa:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80156fe:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8015702:	e7d8      	b.n	80156b6 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8015704:	2000b2d8 	.word	0x2000b2d8
 8015708:	2000b2d9 	.word	0x2000b2d9
 801570c:	05f5e100 	.word	0x05f5e100

08015710 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015710:	f7fd b89c 	b.w	801284c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015714 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015714:	6581      	str	r1, [r0, #88]	; 0x58
 8015716:	301c      	adds	r0, #28
 8015718:	f00d bdd0 	b.w	80232bc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801571c <_ZN8touchgfx3HAL5touchEll>:
 801571c:	b530      	push	{r4, r5, lr}
 801571e:	b087      	sub	sp, #28
 8015720:	4604      	mov	r4, r0
 8015722:	a804      	add	r0, sp, #16
 8015724:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015728:	f003 f940 	bl	80189ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801572c:	9b04      	ldr	r3, [sp, #16]
 801572e:	a906      	add	r1, sp, #24
 8015730:	a803      	add	r0, sp, #12
 8015732:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015736:	9b05      	ldr	r3, [sp, #20]
 8015738:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801573c:	f003 f984 	bl	8018a48 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015740:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8015744:	f104 001c 	add.w	r0, r4, #28
 8015748:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801574c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015750:	b189      	cbz	r1, 8015776 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8015752:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8015756:	9300      	str	r3, [sp, #0]
 8015758:	4613      	mov	r3, r2
 801575a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801575e:	462a      	mov	r2, r5
 8015760:	f00d fdbc 	bl	80232dc <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015764:	b128      	cbz	r0, 8015772 <_ZN8touchgfx3HAL5touchEll+0x56>
 8015766:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801576a:	65e3      	str	r3, [r4, #92]	; 0x5c
 801576c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015770:	6623      	str	r3, [r4, #96]	; 0x60
 8015772:	b007      	add	sp, #28
 8015774:	bd30      	pop	{r4, r5, pc}
 8015776:	f00d fdf5 	bl	8023364 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801577a:	2301      	movs	r3, #1
 801577c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015780:	e7f1      	b.n	8015766 <_ZN8touchgfx3HAL5touchEll+0x4a>

08015782 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015782:	b570      	push	{r4, r5, r6, lr}
 8015784:	2b00      	cmp	r3, #0
 8015786:	d050      	beq.n	801582a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015788:	ea81 0002 	eor.w	r0, r1, r2
 801578c:	07c6      	lsls	r6, r0, #31
 801578e:	d508      	bpl.n	80157a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015790:	3a01      	subs	r2, #1
 8015792:	18cc      	adds	r4, r1, r3
 8015794:	42a1      	cmp	r1, r4
 8015796:	d048      	beq.n	801582a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015798:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801579c:	f801 0b01 	strb.w	r0, [r1], #1
 80157a0:	e7f8      	b.n	8015794 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80157a2:	07d5      	lsls	r5, r2, #31
 80157a4:	bf42      	ittt	mi
 80157a6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80157aa:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80157ae:	f801 0b01 	strbmi.w	r0, [r1], #1
 80157b2:	2b01      	cmp	r3, #1
 80157b4:	d915      	bls.n	80157e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80157b6:	ea82 0001 	eor.w	r0, r2, r1
 80157ba:	0784      	lsls	r4, r0, #30
 80157bc:	d02d      	beq.n	801581a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 80157be:	1e94      	subs	r4, r2, #2
 80157c0:	4608      	mov	r0, r1
 80157c2:	18ce      	adds	r6, r1, r3
 80157c4:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 80157c8:	f820 5b02 	strh.w	r5, [r0], #2
 80157cc:	1a35      	subs	r5, r6, r0
 80157ce:	2d01      	cmp	r5, #1
 80157d0:	d8f8      	bhi.n	80157c4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 80157d2:	1e98      	subs	r0, r3, #2
 80157d4:	f003 0301 	and.w	r3, r3, #1
 80157d8:	f020 0001 	bic.w	r0, r0, #1
 80157dc:	3002      	adds	r0, #2
 80157de:	4401      	add	r1, r0
 80157e0:	4402      	add	r2, r0
 80157e2:	1f14      	subs	r4, r2, #4
 80157e4:	4608      	mov	r0, r1
 80157e6:	18ce      	adds	r6, r1, r3
 80157e8:	1a35      	subs	r5, r6, r0
 80157ea:	2d03      	cmp	r5, #3
 80157ec:	d810      	bhi.n	8015810 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 80157ee:	089c      	lsrs	r4, r3, #2
 80157f0:	00a0      	lsls	r0, r4, #2
 80157f2:	4401      	add	r1, r0
 80157f4:	3801      	subs	r0, #1
 80157f6:	4402      	add	r2, r0
 80157f8:	f06f 0003 	mvn.w	r0, #3
 80157fc:	fb00 3404 	mla	r4, r0, r4, r3
 8015800:	440c      	add	r4, r1
 8015802:	42a1      	cmp	r1, r4
 8015804:	d011      	beq.n	801582a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8015806:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801580a:	f801 3b01 	strb.w	r3, [r1], #1
 801580e:	e7f8      	b.n	8015802 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8015810:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8015814:	f840 5b04 	str.w	r5, [r0], #4
 8015818:	e7e6      	b.n	80157e8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 801581a:	0790      	lsls	r0, r2, #30
 801581c:	d0e1      	beq.n	80157e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801581e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8015822:	3b02      	subs	r3, #2
 8015824:	f821 0b02 	strh.w	r0, [r1], #2
 8015828:	e7db      	b.n	80157e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801582a:	2001      	movs	r0, #1
 801582c:	bd70      	pop	{r4, r5, r6, pc}

0801582e <_ZN8touchgfx3HAL7noTouchEv>:
 801582e:	b510      	push	{r4, lr}
 8015830:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8015834:	4604      	mov	r4, r0
 8015836:	b153      	cbz	r3, 801584e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8015838:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 801583c:	2101      	movs	r1, #1
 801583e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8015842:	301c      	adds	r0, #28
 8015844:	f00d fd8e 	bl	8023364 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015848:	2300      	movs	r3, #0
 801584a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801584e:	bd10      	pop	{r4, pc}

08015850 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8015850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015854:	4605      	mov	r5, r0
 8015856:	6980      	ldr	r0, [r0, #24]
 8015858:	b085      	sub	sp, #20
 801585a:	460f      	mov	r7, r1
 801585c:	4690      	mov	r8, r2
 801585e:	4699      	mov	r9, r3
 8015860:	b930      	cbnz	r0, 8015870 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8015862:	4b1f      	ldr	r3, [pc, #124]	; (80158e0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8015864:	f44f 7198 	mov.w	r1, #304	; 0x130
 8015868:	4a1e      	ldr	r2, [pc, #120]	; (80158e4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 801586a:	481f      	ldr	r0, [pc, #124]	; (80158e8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 801586c:	f00f f9f4 	bl	8024c58 <__assert_func>
 8015870:	ac04      	add	r4, sp, #16
 8015872:	2600      	movs	r6, #0
 8015874:	f844 6d04 	str.w	r6, [r4, #-4]!
 8015878:	6806      	ldr	r6, [r0, #0]
 801587a:	9401      	str	r4, [sp, #4]
 801587c:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8015880:	9400      	str	r4, [sp, #0]
 8015882:	6834      	ldr	r4, [r6, #0]
 8015884:	47a0      	blx	r4
 8015886:	4c19      	ldr	r4, [pc, #100]	; (80158ec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 8015888:	4606      	mov	r6, r0
 801588a:	f8a4 9000 	strh.w	r9, [r4]
 801588e:	f7f4 fbd1 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8015892:	6803      	ldr	r3, [r0, #0]
 8015894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015896:	4798      	blx	r3
 8015898:	280c      	cmp	r0, #12
 801589a:	d80f      	bhi.n	80158bc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 801589c:	e8df f000 	tbb	[pc, r0]
 80158a0:	1b1b1207 	.word	0x1b1b1207
 80158a4:	1b1b1b1b 	.word	0x1b1b1b1b
 80158a8:	1b1b1b1b 	.word	0x1b1b1b1b
 80158ac:	1b          	.byte	0x1b
 80158ad:	00          	.byte	0x00
 80158ae:	8823      	ldrh	r3, [r4, #0]
 80158b0:	fb08 7203 	mla	r2, r8, r3, r7
 80158b4:	9b03      	ldr	r3, [sp, #12]
 80158b6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80158ba:	63eb      	str	r3, [r5, #60]	; 0x3c
 80158bc:	4630      	mov	r0, r6
 80158be:	b005      	add	sp, #20
 80158c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80158c4:	8822      	ldrh	r2, [r4, #0]
 80158c6:	9b03      	ldr	r3, [sp, #12]
 80158c8:	fb08 7202 	mla	r2, r8, r2, r7
 80158cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80158d0:	1a9a      	subs	r2, r3, r2
 80158d2:	63ea      	str	r2, [r5, #60]	; 0x3c
 80158d4:	e7f2      	b.n	80158bc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 80158d6:	4b06      	ldr	r3, [pc, #24]	; (80158f0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 80158d8:	f240 114d 	movw	r1, #333	; 0x14d
 80158dc:	4a01      	ldr	r2, [pc, #4]	; (80158e4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80158de:	e7c4      	b.n	801586a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 80158e0:	08029447 	.word	0x08029447
 80158e4:	08029756 	.word	0x08029756
 80158e8:	0802948c 	.word	0x0802948c
 80158ec:	2000b2ce 	.word	0x2000b2ce
 80158f0:	080294b2 	.word	0x080294b2

080158f4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 80158f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80158f8:	4698      	mov	r8, r3
 80158fa:	6803      	ldr	r3, [r0, #0]
 80158fc:	b087      	sub	sp, #28
 80158fe:	460e      	mov	r6, r1
 8015900:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8015902:	4617      	mov	r7, r2
 8015904:	4b0d      	ldr	r3, [pc, #52]	; (801593c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8015906:	4604      	mov	r4, r0
 8015908:	f8b3 9000 	ldrh.w	r9, [r3]
 801590c:	f7f4 fb92 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8015910:	6803      	ldr	r3, [r0, #0]
 8015912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015914:	4798      	blx	r3
 8015916:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801591a:	463a      	mov	r2, r7
 801591c:	4631      	mov	r1, r6
 801591e:	9302      	str	r3, [sp, #8]
 8015920:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8015924:	9301      	str	r3, [sp, #4]
 8015926:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801592a:	e9cd 9003 	strd	r9, r0, [sp, #12]
 801592e:	9300      	str	r3, [sp, #0]
 8015930:	4620      	mov	r0, r4
 8015932:	4643      	mov	r3, r8
 8015934:	47a8      	blx	r5
 8015936:	b007      	add	sp, #28
 8015938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801593c:	2000b2ce 	.word	0x2000b2ce

08015940 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8015940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015944:	4606      	mov	r6, r0
 8015946:	b089      	sub	sp, #36	; 0x24
 8015948:	4610      	mov	r0, r2
 801594a:	460c      	mov	r4, r1
 801594c:	4691      	mov	r9, r2
 801594e:	4698      	mov	r8, r3
 8015950:	f005 fb70 	bl	801b034 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015954:	2800      	cmp	r0, #0
 8015956:	f000 8092 	beq.w	8015a7e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 801595a:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8015a98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 801595e:	ad08      	add	r5, sp, #32
 8015960:	f8df b138 	ldr.w	fp, [pc, #312]	; 8015a9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8015964:	f8da 0000 	ldr.w	r0, [sl]
 8015968:	4f4a      	ldr	r7, [pc, #296]	; (8015a94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801596a:	6802      	ldr	r2, [r0, #0]
 801596c:	6a12      	ldr	r2, [r2, #32]
 801596e:	4790      	blx	r2
 8015970:	f8da 0000 	ldr.w	r0, [sl]
 8015974:	6802      	ldr	r2, [r0, #0]
 8015976:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015978:	4790      	blx	r2
 801597a:	f8bb 3000 	ldrh.w	r3, [fp]
 801597e:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 8015982:	4628      	mov	r0, r5
 8015984:	9300      	str	r3, [sp, #0]
 8015986:	883b      	ldrh	r3, [r7, #0]
 8015988:	9301      	str	r3, [sp, #4]
 801598a:	f005 fc13 	bl	801b1b4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801598e:	f8ab 0000 	strh.w	r0, [fp]
 8015992:	4628      	mov	r0, r5
 8015994:	f005 fc48 	bl	801b228 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015998:	f8da b000 	ldr.w	fp, [sl]
 801599c:	8038      	strh	r0, [r7, #0]
 801599e:	4648      	mov	r0, r9
 80159a0:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 80159a4:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 80159a8:	9302      	str	r3, [sp, #8]
 80159aa:	f005 fb43 	bl	801b034 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80159ae:	f8da 2000 	ldr.w	r2, [sl]
 80159b2:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 80159b6:	63d0      	str	r0, [r2, #60]	; 0x3c
 80159b8:	4620      	mov	r0, r4
 80159ba:	6822      	ldr	r2, [r4, #0]
 80159bc:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 80159c0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80159c2:	2200      	movs	r2, #0
 80159c4:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 80159c8:	4611      	mov	r1, r2
 80159ca:	4798      	blx	r3
 80159cc:	2201      	movs	r2, #1
 80159ce:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 80159d2:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 80159d6:	1d22      	adds	r2, r4, #4
 80159d8:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 80159dc:	2900      	cmp	r1, #0
 80159de:	d051      	beq.n	8015a84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 80159e0:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 80159e4:	2900      	cmp	r1, #0
 80159e6:	d04d      	beq.n	8015a84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 80159e8:	6810      	ldr	r0, [r2, #0]
 80159ea:	f10d 0c18 	add.w	ip, sp, #24
 80159ee:	6851      	ldr	r1, [r2, #4]
 80159f0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80159f4:	4641      	mov	r1, r8
 80159f6:	a806      	add	r0, sp, #24
 80159f8:	f7ff f99c 	bl	8014d34 <_ZN8touchgfx4RectaNERKS0_>
 80159fc:	4628      	mov	r0, r5
 80159fe:	f005 fd65 	bl	801b4cc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015a02:	4680      	mov	r8, r0
 8015a04:	f7f4 fb16 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8015a08:	6802      	ldr	r2, [r0, #0]
 8015a0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015a0c:	4790      	blx	r2
 8015a0e:	4580      	cmp	r8, r0
 8015a10:	d03d      	beq.n	8015a8e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 8015a12:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8015a14:	b150      	cbz	r0, 8015a2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8015a16:	4628      	mov	r0, r5
 8015a18:	f005 fd58 	bl	801b4cc <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015a1c:	4605      	mov	r5, r0
 8015a1e:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8015a20:	6803      	ldr	r3, [r0, #0]
 8015a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a24:	4798      	blx	r3
 8015a26:	1a2b      	subs	r3, r5, r0
 8015a28:	4258      	negs	r0, r3
 8015a2a:	4158      	adcs	r0, r3
 8015a2c:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8015a30:	2500      	movs	r5, #0
 8015a32:	6963      	ldr	r3, [r4, #20]
 8015a34:	4620      	mov	r0, r4
 8015a36:	6822      	ldr	r2, [r4, #0]
 8015a38:	a906      	add	r1, sp, #24
 8015a3a:	6165      	str	r5, [r4, #20]
 8015a3c:	9303      	str	r3, [sp, #12]
 8015a3e:	6892      	ldr	r2, [r2, #8]
 8015a40:	4790      	blx	r2
 8015a42:	9b03      	ldr	r3, [sp, #12]
 8015a44:	4620      	mov	r0, r4
 8015a46:	4652      	mov	r2, sl
 8015a48:	6163      	str	r3, [r4, #20]
 8015a4a:	4649      	mov	r1, r9
 8015a4c:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8015a50:	6823      	ldr	r3, [r4, #0]
 8015a52:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8015a56:	4c10      	ldr	r4, [pc, #64]	; (8015a98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8015a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a5a:	4798      	blx	r3
 8015a5c:	6820      	ldr	r0, [r4, #0]
 8015a5e:	9b02      	ldr	r3, [sp, #8]
 8015a60:	9a00      	ldr	r2, [sp, #0]
 8015a62:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8015a66:	4b0d      	ldr	r3, [pc, #52]	; (8015a9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8015a68:	801a      	strh	r2, [r3, #0]
 8015a6a:	4b0a      	ldr	r3, [pc, #40]	; (8015a94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8015a6c:	9a01      	ldr	r2, [sp, #4]
 8015a6e:	801a      	strh	r2, [r3, #0]
 8015a70:	6803      	ldr	r3, [r0, #0]
 8015a72:	6a1b      	ldr	r3, [r3, #32]
 8015a74:	4798      	blx	r3
 8015a76:	6820      	ldr	r0, [r4, #0]
 8015a78:	6803      	ldr	r3, [r0, #0]
 8015a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a7c:	4798      	blx	r3
 8015a7e:	b009      	add	sp, #36	; 0x24
 8015a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a84:	ab06      	add	r3, sp, #24
 8015a86:	6810      	ldr	r0, [r2, #0]
 8015a88:	6851      	ldr	r1, [r2, #4]
 8015a8a:	c303      	stmia	r3!, {r0, r1}
 8015a8c:	e7b6      	b.n	80159fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 8015a8e:	2000      	movs	r0, #0
 8015a90:	e7cc      	b.n	8015a2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8015a92:	bf00      	nop
 8015a94:	2000b2d0 	.word	0x2000b2d0
 8015a98:	2000b2d4 	.word	0x2000b2d4
 8015a9c:	2000b2ce 	.word	0x2000b2ce

08015aa0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8015aa0:	4b07      	ldr	r3, [pc, #28]	; (8015ac0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8015aa2:	b510      	push	{r4, lr}
 8015aa4:	781b      	ldrb	r3, [r3, #0]
 8015aa6:	4604      	mov	r4, r0
 8015aa8:	b13b      	cbz	r3, 8015aba <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015aaa:	6803      	ldr	r3, [r0, #0]
 8015aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015aae:	4798      	blx	r3
 8015ab0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015ab2:	4283      	cmp	r3, r0
 8015ab4:	d101      	bne.n	8015aba <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015ab6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8015ab8:	bd10      	pop	{r4, pc}
 8015aba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8015abc:	e7fc      	b.n	8015ab8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8015abe:	bf00      	nop
 8015ac0:	2000b2d2 	.word	0x2000b2d2

08015ac4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8015ac4:	4b0b      	ldr	r3, [pc, #44]	; (8015af4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8015ac6:	b510      	push	{r4, lr}
 8015ac8:	781b      	ldrb	r3, [r3, #0]
 8015aca:	4604      	mov	r4, r0
 8015acc:	b95b      	cbnz	r3, 8015ae6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015ace:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8015ad2:	2b02      	cmp	r3, #2
 8015ad4:	d007      	beq.n	8015ae6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015ad6:	6840      	ldr	r0, [r0, #4]
 8015ad8:	f000 fbc8 	bl	801626c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8015adc:	b118      	cbz	r0, 8015ae6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015ade:	6862      	ldr	r2, [r4, #4]
 8015ae0:	7a53      	ldrb	r3, [r2, #9]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d0fc      	beq.n	8015ae0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8015ae6:	f7fc fea3 	bl	8012830 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015aea:	4620      	mov	r0, r4
 8015aec:	f7ff ffd8 	bl	8015aa0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015af0:	bd10      	pop	{r4, pc}
 8015af2:	bf00      	nop
 8015af4:	2000b2d2 	.word	0x2000b2d2

08015af8 <_ZN8touchgfx3HAL10initializeEv>:
 8015af8:	b510      	push	{r4, lr}
 8015afa:	4604      	mov	r4, r0
 8015afc:	f7fc fe74 	bl	80127e8 <_ZN8touchgfx10OSWrappers10initializeEv>
 8015b00:	6860      	ldr	r0, [r4, #4]
 8015b02:	6803      	ldr	r3, [r0, #0]
 8015b04:	68db      	ldr	r3, [r3, #12]
 8015b06:	4798      	blx	r3
 8015b08:	68e0      	ldr	r0, [r4, #12]
 8015b0a:	6803      	ldr	r3, [r0, #0]
 8015b0c:	689b      	ldr	r3, [r3, #8]
 8015b0e:	4798      	blx	r3
 8015b10:	6823      	ldr	r3, [r4, #0]
 8015b12:	4620      	mov	r0, r4
 8015b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b1a:	4718      	bx	r3

08015b1c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8015b1c:	b508      	push	{r3, lr}
 8015b1e:	290c      	cmp	r1, #12
 8015b20:	d817      	bhi.n	8015b52 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8015b22:	e8df f001 	tbb	[pc, r1]
 8015b26:	090b      	.short	0x090b
 8015b28:	0d0d0d07 	.word	0x0d0d0d07
 8015b2c:	1414140d 	.word	0x1414140d
 8015b30:	1414      	.short	0x1414
 8015b32:	0d          	.byte	0x0d
 8015b33:	00          	.byte	0x00
 8015b34:	2020      	movs	r0, #32
 8015b36:	bd08      	pop	{r3, pc}
 8015b38:	2018      	movs	r0, #24
 8015b3a:	e7fc      	b.n	8015b36 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015b3c:	2010      	movs	r0, #16
 8015b3e:	e7fa      	b.n	8015b36 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015b40:	4b05      	ldr	r3, [pc, #20]	; (8015b58 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8015b42:	f44f 710c 	mov.w	r1, #560	; 0x230
 8015b46:	4a05      	ldr	r2, [pc, #20]	; (8015b5c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8015b48:	4805      	ldr	r0, [pc, #20]	; (8015b60 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8015b4a:	f00f f885 	bl	8024c58 <__assert_func>
 8015b4e:	2008      	movs	r0, #8
 8015b50:	e7f1      	b.n	8015b36 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015b52:	2000      	movs	r0, #0
 8015b54:	e7ef      	b.n	8015b36 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8015b56:	bf00      	nop
 8015b58:	08029585 	.word	0x08029585
 8015b5c:	08029918 	.word	0x08029918
 8015b60:	0802948c 	.word	0x0802948c

08015b64 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8015b64:	b570      	push	{r4, r5, r6, lr}
 8015b66:	460d      	mov	r5, r1
 8015b68:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8015b6c:	4616      	mov	r6, r2
 8015b6e:	461c      	mov	r4, r3
 8015b70:	f7ff ffd4 	bl	8015b1c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8015b74:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8015b78:	10c0      	asrs	r0, r0, #3
 8015b7a:	fb06 5101 	mla	r1, r6, r1, r5
 8015b7e:	fb00 4001 	mla	r0, r0, r1, r4
 8015b82:	bd70      	pop	{r4, r5, r6, pc}

08015b84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8015b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b88:	b08a      	sub	sp, #40	; 0x28
 8015b8a:	f04f 0c00 	mov.w	ip, #0
 8015b8e:	4604      	mov	r4, r0
 8015b90:	469a      	mov	sl, r3
 8015b92:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8015b96:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8015b9a:	f1b8 0f02 	cmp.w	r8, #2
 8015b9e:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8015ba2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8015ba6:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8015baa:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8015bae:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8015bb2:	f8cd c020 	str.w	ip, [sp, #32]
 8015bb6:	d030      	beq.n	8015c1a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8015bb8:	2bff      	cmp	r3, #255	; 0xff
 8015bba:	d12c      	bne.n	8015c16 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8015bbc:	4560      	cmp	r0, ip
 8015bbe:	bf14      	ite	ne
 8015bc0:	2004      	movne	r0, #4
 8015bc2:	2001      	moveq	r0, #1
 8015bc4:	9204      	str	r2, [sp, #16]
 8015bc6:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8015bca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015bce:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015bd2:	f8ad 6018 	strh.w	r6, [sp, #24]
 8015bd6:	f8ad 501a 	strh.w	r5, [sp, #26]
 8015bda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015bde:	4620      	mov	r0, r4
 8015be0:	f7ff ff5e 	bl	8015aa0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015be4:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8015be8:	4603      	mov	r3, r0
 8015bea:	4651      	mov	r1, sl
 8015bec:	4620      	mov	r0, r4
 8015bee:	e9cd 9700 	strd	r9, r7, [sp]
 8015bf2:	f7ff ffb7 	bl	8015b64 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015bf6:	f8ad 901e 	strh.w	r9, [sp, #30]
 8015bfa:	9005      	str	r0, [sp, #20]
 8015bfc:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8015c00:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8015c04:	b106      	cbz	r6, 8015c08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8015c06:	b98d      	cbnz	r5, 8015c2c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8015c08:	4b12      	ldr	r3, [pc, #72]	; (8015c54 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8015c0a:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8015c0e:	4a12      	ldr	r2, [pc, #72]	; (8015c58 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8015c10:	4812      	ldr	r0, [pc, #72]	; (8015c5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8015c12:	f00f f821 	bl	8024c58 <__assert_func>
 8015c16:	2004      	movs	r0, #4
 8015c18:	e7d4      	b.n	8015bc4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015c1a:	2bff      	cmp	r3, #255	; 0xff
 8015c1c:	d104      	bne.n	8015c28 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8015c1e:	2800      	cmp	r0, #0
 8015c20:	bf14      	ite	ne
 8015c22:	2040      	movne	r0, #64	; 0x40
 8015c24:	2020      	moveq	r0, #32
 8015c26:	e7cd      	b.n	8015bc4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015c28:	2040      	movs	r0, #64	; 0x40
 8015c2a:	e7cb      	b.n	8015bc4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8015c2c:	6823      	ldr	r3, [r4, #0]
 8015c2e:	4620      	mov	r0, r4
 8015c30:	9d02      	ldr	r5, [sp, #8]
 8015c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c34:	4798      	blx	r3
 8015c36:	4228      	tst	r0, r5
 8015c38:	d104      	bne.n	8015c44 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8015c3a:	4b09      	ldr	r3, [pc, #36]	; (8015c60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8015c3c:	f240 11b1 	movw	r1, #433	; 0x1b1
 8015c40:	4a05      	ldr	r2, [pc, #20]	; (8015c58 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8015c42:	e7e5      	b.n	8015c10 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8015c44:	6860      	ldr	r0, [r4, #4]
 8015c46:	a902      	add	r1, sp, #8
 8015c48:	6803      	ldr	r3, [r0, #0]
 8015c4a:	685b      	ldr	r3, [r3, #4]
 8015c4c:	4798      	blx	r3
 8015c4e:	b00a      	add	sp, #40	; 0x28
 8015c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c54:	08029508 	.word	0x08029508
 8015c58:	080297ba 	.word	0x080297ba
 8015c5c:	0802948c 	.word	0x0802948c
 8015c60:	08029540 	.word	0x08029540

08015c64 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8015c64:	b510      	push	{r4, lr}
 8015c66:	b08a      	sub	sp, #40	; 0x28
 8015c68:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8015c6c:	9408      	str	r4, [sp, #32]
 8015c6e:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8015c72:	9407      	str	r4, [sp, #28]
 8015c74:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8015c78:	9406      	str	r4, [sp, #24]
 8015c7a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8015c7e:	9405      	str	r4, [sp, #20]
 8015c80:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8015c84:	9404      	str	r4, [sp, #16]
 8015c86:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8015c8a:	9403      	str	r4, [sp, #12]
 8015c8c:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8015c90:	9402      	str	r4, [sp, #8]
 8015c92:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8015c96:	e9cd 3400 	strd	r3, r4, [sp]
 8015c9a:	4613      	mov	r3, r2
 8015c9c:	2200      	movs	r2, #0
 8015c9e:	f7ff ff71 	bl	8015b84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015ca2:	b00a      	add	sp, #40	; 0x28
 8015ca4:	bd10      	pop	{r4, pc}
	...

08015ca8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8015ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015caa:	b08b      	sub	sp, #44	; 0x2c
 8015cac:	4616      	mov	r6, r2
 8015cae:	460d      	mov	r5, r1
 8015cb0:	461f      	mov	r7, r3
 8015cb2:	4604      	mov	r4, r0
 8015cb4:	f7f4 f9be 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8015cb8:	6803      	ldr	r3, [r0, #0]
 8015cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cbc:	4798      	blx	r3
 8015cbe:	4b0e      	ldr	r3, [pc, #56]	; (8015cf8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8015cc0:	2200      	movs	r2, #0
 8015cc2:	4629      	mov	r1, r5
 8015cc4:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8015cc8:	881b      	ldrh	r3, [r3, #0]
 8015cca:	4620      	mov	r0, r4
 8015ccc:	9306      	str	r3, [sp, #24]
 8015cce:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8015cd2:	9305      	str	r3, [sp, #20]
 8015cd4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015cd8:	9304      	str	r3, [sp, #16]
 8015cda:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015cde:	9303      	str	r3, [sp, #12]
 8015ce0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015ce4:	9302      	str	r3, [sp, #8]
 8015ce6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015cea:	e9cd 7300 	strd	r7, r3, [sp]
 8015cee:	4633      	mov	r3, r6
 8015cf0:	f7ff ff48 	bl	8015b84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015cf4:	b00b      	add	sp, #44	; 0x2c
 8015cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cf8:	2000b2ce 	.word	0x2000b2ce

08015cfc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8015cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d00:	461f      	mov	r7, r3
 8015d02:	4b14      	ldr	r3, [pc, #80]	; (8015d54 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8015d04:	b08a      	sub	sp, #40	; 0x28
 8015d06:	4616      	mov	r6, r2
 8015d08:	f8b3 8000 	ldrh.w	r8, [r3]
 8015d0c:	460d      	mov	r5, r1
 8015d0e:	4604      	mov	r4, r0
 8015d10:	f7f4 f990 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8015d14:	6803      	ldr	r3, [r0, #0]
 8015d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d18:	4798      	blx	r3
 8015d1a:	2302      	movs	r3, #2
 8015d1c:	9008      	str	r0, [sp, #32]
 8015d1e:	2200      	movs	r2, #0
 8015d20:	4629      	mov	r1, r5
 8015d22:	4620      	mov	r0, r4
 8015d24:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8015d28:	2301      	movs	r3, #1
 8015d2a:	9305      	str	r3, [sp, #20]
 8015d2c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015d30:	9304      	str	r3, [sp, #16]
 8015d32:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015d36:	9303      	str	r3, [sp, #12]
 8015d38:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015d3c:	9302      	str	r3, [sp, #8]
 8015d3e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015d42:	e9cd 7300 	strd	r7, r3, [sp]
 8015d46:	4633      	mov	r3, r6
 8015d48:	f7ff ff1c 	bl	8015b84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015d4c:	b00a      	add	sp, #40	; 0x28
 8015d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d52:	bf00      	nop
 8015d54:	2000b2ce 	.word	0x2000b2ce

08015d58 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8015d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d5c:	b08b      	sub	sp, #44	; 0x2c
 8015d5e:	469b      	mov	fp, r3
 8015d60:	4604      	mov	r4, r0
 8015d62:	4692      	mov	sl, r2
 8015d64:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8015d68:	2600      	movs	r6, #0
 8015d6a:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8015d6e:	4689      	mov	r9, r1
 8015d70:	2fff      	cmp	r7, #255	; 0xff
 8015d72:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8015d76:	9608      	str	r6, [sp, #32]
 8015d78:	bf14      	ite	ne
 8015d7a:	2308      	movne	r3, #8
 8015d7c:	2302      	moveq	r3, #2
 8015d7e:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8015d82:	f7ff fe8d 	bl	8015aa0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015d86:	465a      	mov	r2, fp
 8015d88:	4603      	mov	r3, r0
 8015d8a:	4651      	mov	r1, sl
 8015d8c:	4620      	mov	r0, r4
 8015d8e:	e9cd 8500 	strd	r8, r5, [sp]
 8015d92:	f7ff fee7 	bl	8015b64 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015d96:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8015d9a:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8015d9e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015da2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8015da6:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8015daa:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015dae:	6823      	ldr	r3, [r4, #0]
 8015db0:	9d02      	ldr	r5, [sp, #8]
 8015db2:	9005      	str	r0, [sp, #20]
 8015db4:	4620      	mov	r0, r4
 8015db6:	f8ad 601c 	strh.w	r6, [sp, #28]
 8015dba:	f8ad 801e 	strh.w	r8, [sp, #30]
 8015dbe:	f8cd 9020 	str.w	r9, [sp, #32]
 8015dc2:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8015dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015dc8:	4798      	blx	r3
 8015dca:	4228      	tst	r0, r5
 8015dcc:	d106      	bne.n	8015ddc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8015dce:	4b07      	ldr	r3, [pc, #28]	; (8015dec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8015dd0:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8015dd4:	4a06      	ldr	r2, [pc, #24]	; (8015df0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8015dd6:	4807      	ldr	r0, [pc, #28]	; (8015df4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8015dd8:	f00e ff3e 	bl	8024c58 <__assert_func>
 8015ddc:	6860      	ldr	r0, [r4, #4]
 8015dde:	a902      	add	r1, sp, #8
 8015de0:	6803      	ldr	r3, [r0, #0]
 8015de2:	685b      	ldr	r3, [r3, #4]
 8015de4:	4798      	blx	r3
 8015de6:	b00b      	add	sp, #44	; 0x2c
 8015de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dec:	08029540 	.word	0x08029540
 8015df0:	08029883 	.word	0x08029883
 8015df4:	0802948c 	.word	0x0802948c

08015df8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8015df8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015dfc:	461f      	mov	r7, r3
 8015dfe:	4b0b      	ldr	r3, [pc, #44]	; (8015e2c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8015e00:	460d      	mov	r5, r1
 8015e02:	4616      	mov	r6, r2
 8015e04:	f8b3 8000 	ldrh.w	r8, [r3]
 8015e08:	4604      	mov	r4, r0
 8015e0a:	f7f4 f913 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8015e0e:	6803      	ldr	r3, [r0, #0]
 8015e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e12:	4798      	blx	r3
 8015e14:	463b      	mov	r3, r7
 8015e16:	4632      	mov	r2, r6
 8015e18:	4629      	mov	r1, r5
 8015e1a:	e9cd 8000 	strd	r8, r0, [sp]
 8015e1e:	4620      	mov	r0, r4
 8015e20:	f7ff fea0 	bl	8015b64 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8015e24:	b002      	add	sp, #8
 8015e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e2a:	bf00      	nop
 8015e2c:	2000b2ce 	.word	0x2000b2ce

08015e30 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8015e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e34:	4698      	mov	r8, r3
 8015e36:	b088      	sub	sp, #32
 8015e38:	2300      	movs	r3, #0
 8015e3a:	4617      	mov	r7, r2
 8015e3c:	4604      	mov	r4, r0
 8015e3e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8015e42:	9306      	str	r3, [sp, #24]
 8015e44:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015e48:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8015e4c:	f8ad 6010 	strh.w	r6, [sp, #16]
 8015e50:	f8ad 5012 	strh.w	r5, [sp, #18]
 8015e54:	e9cd 3100 	strd	r3, r1, [sp]
 8015e58:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015e5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015e60:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8015e64:	f88d 301c 	strb.w	r3, [sp, #28]
 8015e68:	f7ff fe1a 	bl	8015aa0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015e6c:	4642      	mov	r2, r8
 8015e6e:	4603      	mov	r3, r0
 8015e70:	4639      	mov	r1, r7
 8015e72:	4620      	mov	r0, r4
 8015e74:	f7ff ffc0 	bl	8015df8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015e78:	4b16      	ldr	r3, [pc, #88]	; (8015ed4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8015e7a:	9003      	str	r0, [sp, #12]
 8015e7c:	881b      	ldrh	r3, [r3, #0]
 8015e7e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015e82:	f7f4 f8d7 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8015e86:	6803      	ldr	r3, [r0, #0]
 8015e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e8a:	4798      	blx	r3
 8015e8c:	f88d 001e 	strb.w	r0, [sp, #30]
 8015e90:	f88d 001d 	strb.w	r0, [sp, #29]
 8015e94:	b106      	cbz	r6, 8015e98 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8015e96:	b935      	cbnz	r5, 8015ea6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8015e98:	4b0f      	ldr	r3, [pc, #60]	; (8015ed8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8015e9a:	f240 11cd 	movw	r1, #461	; 0x1cd
 8015e9e:	4a0f      	ldr	r2, [pc, #60]	; (8015edc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8015ea0:	480f      	ldr	r0, [pc, #60]	; (8015ee0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8015ea2:	f00e fed9 	bl	8024c58 <__assert_func>
 8015ea6:	6823      	ldr	r3, [r4, #0]
 8015ea8:	4620      	mov	r0, r4
 8015eaa:	9d00      	ldr	r5, [sp, #0]
 8015eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015eae:	4798      	blx	r3
 8015eb0:	4228      	tst	r0, r5
 8015eb2:	d104      	bne.n	8015ebe <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8015eb4:	4b0b      	ldr	r3, [pc, #44]	; (8015ee4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8015eb6:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8015eba:	4a08      	ldr	r2, [pc, #32]	; (8015edc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8015ebc:	e7f0      	b.n	8015ea0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8015ebe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015ec0:	4669      	mov	r1, sp
 8015ec2:	6860      	ldr	r0, [r4, #4]
 8015ec4:	9306      	str	r3, [sp, #24]
 8015ec6:	6803      	ldr	r3, [r0, #0]
 8015ec8:	685b      	ldr	r3, [r3, #4]
 8015eca:	4798      	blx	r3
 8015ecc:	b008      	add	sp, #32
 8015ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ed2:	bf00      	nop
 8015ed4:	2000b2ce 	.word	0x2000b2ce
 8015ed8:	08029508 	.word	0x08029508
 8015edc:	0802966c 	.word	0x0802966c
 8015ee0:	0802948c 	.word	0x0802948c
 8015ee4:	08029540 	.word	0x08029540

08015ee8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8015ee8:	b570      	push	{r4, r5, r6, lr}
 8015eea:	b08a      	sub	sp, #40	; 0x28
 8015eec:	4604      	mov	r4, r0
 8015eee:	466b      	mov	r3, sp
 8015ef0:	e883 0006 	stmia.w	r3, {r1, r2}
 8015ef4:	4b1f      	ldr	r3, [pc, #124]	; (8015f74 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8015ef6:	781b      	ldrb	r3, [r3, #0]
 8015ef8:	b933      	cbnz	r3, 8015f08 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8015efa:	4b1f      	ldr	r3, [pc, #124]	; (8015f78 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8015efc:	f240 11f9 	movw	r1, #505	; 0x1f9
 8015f00:	4a1e      	ldr	r2, [pc, #120]	; (8015f7c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8015f02:	481f      	ldr	r0, [pc, #124]	; (8015f80 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8015f04:	f00e fea8 	bl	8024c58 <__assert_func>
 8015f08:	2300      	movs	r3, #0
 8015f0a:	f8bd 5000 	ldrh.w	r5, [sp]
 8015f0e:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8015f12:	9308      	str	r3, [sp, #32]
 8015f14:	2301      	movs	r3, #1
 8015f16:	9302      	str	r3, [sp, #8]
 8015f18:	6803      	ldr	r3, [r0, #0]
 8015f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f1c:	4798      	blx	r3
 8015f1e:	4632      	mov	r2, r6
 8015f20:	4629      	mov	r1, r5
 8015f22:	4603      	mov	r3, r0
 8015f24:	4620      	mov	r0, r4
 8015f26:	f7ff ff67 	bl	8015df8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015f2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8015f2c:	9003      	str	r0, [sp, #12]
 8015f2e:	9305      	str	r3, [sp, #20]
 8015f30:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015f34:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015f38:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015f3c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015f40:	4b10      	ldr	r3, [pc, #64]	; (8015f84 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8015f42:	881b      	ldrh	r3, [r3, #0]
 8015f44:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015f48:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015f4c:	f7f4 f872 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8015f50:	6803      	ldr	r3, [r0, #0]
 8015f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f54:	4798      	blx	r3
 8015f56:	23ff      	movs	r3, #255	; 0xff
 8015f58:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8015f5c:	a902      	add	r1, sp, #8
 8015f5e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8015f62:	6860      	ldr	r0, [r4, #4]
 8015f64:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015f68:	6803      	ldr	r3, [r0, #0]
 8015f6a:	685b      	ldr	r3, [r3, #4]
 8015f6c:	4798      	blx	r3
 8015f6e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8015f70:	b00a      	add	sp, #40	; 0x28
 8015f72:	bd70      	pop	{r4, r5, r6, pc}
 8015f74:	2000b2d3 	.word	0x2000b2d3
 8015f78:	080293d9 	.word	0x080293d9
 8015f7c:	08029710 	.word	0x08029710
 8015f80:	0802948c 	.word	0x0802948c
 8015f84:	2000b2ce 	.word	0x2000b2ce

08015f88 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8015f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f8a:	b08b      	sub	sp, #44	; 0x2c
 8015f8c:	4604      	mov	r4, r0
 8015f8e:	466d      	mov	r5, sp
 8015f90:	e885 0006 	stmia.w	r5, {r1, r2}
 8015f94:	461d      	mov	r5, r3
 8015f96:	2300      	movs	r3, #0
 8015f98:	f8bd 6000 	ldrh.w	r6, [sp]
 8015f9c:	9308      	str	r3, [sp, #32]
 8015f9e:	2301      	movs	r3, #1
 8015fa0:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8015fa4:	9302      	str	r3, [sp, #8]
 8015fa6:	6803      	ldr	r3, [r0, #0]
 8015fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015faa:	4798      	blx	r3
 8015fac:	463a      	mov	r2, r7
 8015fae:	4631      	mov	r1, r6
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	4620      	mov	r0, r4
 8015fb4:	f7ff ff20 	bl	8015df8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015fb8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015fbc:	9003      	str	r0, [sp, #12]
 8015fbe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015fc2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015fc6:	9505      	str	r5, [sp, #20]
 8015fc8:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015fcc:	4b0d      	ldr	r3, [pc, #52]	; (8016004 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8015fce:	881b      	ldrh	r3, [r3, #0]
 8015fd0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015fd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015fd6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015fda:	f7f4 f82b 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8015fde:	6803      	ldr	r3, [r0, #0]
 8015fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fe2:	4798      	blx	r3
 8015fe4:	23ff      	movs	r3, #255	; 0xff
 8015fe6:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8015fea:	a902      	add	r1, sp, #8
 8015fec:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8015ff0:	6860      	ldr	r0, [r4, #4]
 8015ff2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8015ff6:	6803      	ldr	r3, [r0, #0]
 8015ff8:	685b      	ldr	r3, [r3, #4]
 8015ffa:	4798      	blx	r3
 8015ffc:	4628      	mov	r0, r5
 8015ffe:	b00b      	add	sp, #44	; 0x2c
 8016000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016002:	bf00      	nop
 8016004:	2000b2ce 	.word	0x2000b2ce

08016008 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016008:	b570      	push	{r4, r5, r6, lr}
 801600a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801600e:	4604      	mov	r4, r0
 8016010:	b19b      	cbz	r3, 801603a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8016012:	2002      	movs	r0, #2
 8016014:	f7fc f968 	bl	80122e8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016018:	2300      	movs	r3, #0
 801601a:	4620      	mov	r0, r4
 801601c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016020:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8016024:	6823      	ldr	r3, [r4, #0]
 8016026:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 801602a:	f7ff fd39 	bl	8015aa0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801602e:	4601      	mov	r1, r0
 8016030:	4620      	mov	r0, r4
 8016032:	462b      	mov	r3, r5
 8016034:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016038:	4718      	bx	r3
 801603a:	bd70      	pop	{r4, r5, r6, pc}

0801603c <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801603c:	4770      	bx	lr

0801603e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801603e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8016042:	1a13      	subs	r3, r2, r0
 8016044:	4258      	negs	r0, r3
 8016046:	4158      	adcs	r0, r3
 8016048:	4770      	bx	lr

0801604a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801604a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801604e:	1a9b      	subs	r3, r3, r2
 8016050:	2b00      	cmp	r3, #0
 8016052:	bfdc      	itt	le
 8016054:	6882      	ldrle	r2, [r0, #8]
 8016056:	189b      	addle	r3, r3, r2
 8016058:	2b01      	cmp	r3, #1
 801605a:	bfcc      	ite	gt
 801605c:	2000      	movgt	r0, #0
 801605e:	2001      	movle	r0, #1
 8016060:	4770      	bx	lr

08016062 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8016062:	6902      	ldr	r2, [r0, #16]
 8016064:	6840      	ldr	r0, [r0, #4]
 8016066:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 801606a:	4770      	bx	lr

0801606c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801606c:	6803      	ldr	r3, [r0, #0]
 801606e:	691b      	ldr	r3, [r3, #16]
 8016070:	4718      	bx	r3

08016072 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8016072:	4770      	bx	lr

08016074 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8016074:	4770      	bx	lr
	...

08016078 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8016078:	2301      	movs	r3, #1
 801607a:	b570      	push	{r4, r5, r6, lr}
 801607c:	7203      	strb	r3, [r0, #8]
 801607e:	4604      	mov	r4, r0
 8016080:	6840      	ldr	r0, [r0, #4]
 8016082:	6803      	ldr	r3, [r0, #0]
 8016084:	699b      	ldr	r3, [r3, #24]
 8016086:	4798      	blx	r3
 8016088:	6803      	ldr	r3, [r0, #0]
 801608a:	4605      	mov	r5, r0
 801608c:	2b08      	cmp	r3, #8
 801608e:	d01e      	beq.n	80160ce <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8016090:	d80b      	bhi.n	80160aa <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016092:	2b02      	cmp	r3, #2
 8016094:	d027      	beq.n	80160e6 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8016096:	2b04      	cmp	r3, #4
 8016098:	d011      	beq.n	80160be <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801609a:	2b01      	cmp	r3, #1
 801609c:	d028      	beq.n	80160f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801609e:	4b17      	ldr	r3, [pc, #92]	; (80160fc <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 80160a0:	218b      	movs	r1, #139	; 0x8b
 80160a2:	4a17      	ldr	r2, [pc, #92]	; (8016100 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 80160a4:	4817      	ldr	r0, [pc, #92]	; (8016104 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 80160a6:	f00e fdd7 	bl	8024c58 <__assert_func>
 80160aa:	2b40      	cmp	r3, #64	; 0x40
 80160ac:	d020      	beq.n	80160f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80160ae:	d801      	bhi.n	80160b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80160b0:	2b20      	cmp	r3, #32
 80160b2:	e7f3      	b.n	801609c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80160b4:	2b80      	cmp	r3, #128	; 0x80
 80160b6:	d01b      	beq.n	80160f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80160b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80160bc:	e7ee      	b.n	801609c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80160be:	6823      	ldr	r3, [r4, #0]
 80160c0:	7f01      	ldrb	r1, [r0, #28]
 80160c2:	4620      	mov	r0, r4
 80160c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160c6:	4798      	blx	r3
 80160c8:	6823      	ldr	r3, [r4, #0]
 80160ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160cc:	e006      	b.n	80160dc <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80160ce:	6823      	ldr	r3, [r4, #0]
 80160d0:	7f01      	ldrb	r1, [r0, #28]
 80160d2:	4620      	mov	r0, r4
 80160d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160d6:	4798      	blx	r3
 80160d8:	6823      	ldr	r3, [r4, #0]
 80160da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80160dc:	4629      	mov	r1, r5
 80160de:	4620      	mov	r0, r4
 80160e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160e4:	4718      	bx	r3
 80160e6:	6823      	ldr	r3, [r4, #0]
 80160e8:	4620      	mov	r0, r4
 80160ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80160ec:	4798      	blx	r3
 80160ee:	e7f3      	b.n	80160d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 80160f0:	6823      	ldr	r3, [r4, #0]
 80160f2:	4620      	mov	r0, r4
 80160f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80160f6:	4798      	blx	r3
 80160f8:	e7e6      	b.n	80160c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 80160fa:	bf00      	nop
 80160fc:	08029961 	.word	0x08029961
 8016100:	08029a70 	.word	0x08029a70
 8016104:	08029986 	.word	0x08029986

08016108 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016108:	b570      	push	{r4, r5, r6, lr}
 801610a:	4604      	mov	r4, r0
 801610c:	460e      	mov	r6, r1
 801610e:	6860      	ldr	r0, [r4, #4]
 8016110:	6803      	ldr	r3, [r0, #0]
 8016112:	685b      	ldr	r3, [r3, #4]
 8016114:	4798      	blx	r3
 8016116:	2800      	cmp	r0, #0
 8016118:	d1f9      	bne.n	801610e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801611a:	4d0b      	ldr	r5, [pc, #44]	; (8016148 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 801611c:	6828      	ldr	r0, [r5, #0]
 801611e:	6803      	ldr	r3, [r0, #0]
 8016120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016122:	4798      	blx	r3
 8016124:	f7fc fba0 	bl	8012868 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016128:	6860      	ldr	r0, [r4, #4]
 801612a:	4631      	mov	r1, r6
 801612c:	6803      	ldr	r3, [r0, #0]
 801612e:	689b      	ldr	r3, [r3, #8]
 8016130:	4798      	blx	r3
 8016132:	6823      	ldr	r3, [r4, #0]
 8016134:	4620      	mov	r0, r4
 8016136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016138:	4798      	blx	r3
 801613a:	6828      	ldr	r0, [r5, #0]
 801613c:	6803      	ldr	r3, [r0, #0]
 801613e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016144:	4718      	bx	r3
 8016146:	bf00      	nop
 8016148:	2000b2d4 	.word	0x2000b2d4

0801614c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801614c:	b508      	push	{r3, lr}
 801614e:	f7fc fb6f 	bl	8012830 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016152:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016156:	f7fc bb79 	b.w	801284c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801615a <_ZN8touchgfx13DMA_Interface5startEv>:
 801615a:	b510      	push	{r4, lr}
 801615c:	4604      	mov	r4, r0
 801615e:	6840      	ldr	r0, [r0, #4]
 8016160:	6803      	ldr	r3, [r0, #0]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	4798      	blx	r3
 8016166:	b948      	cbnz	r0, 801617c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016168:	7a63      	ldrb	r3, [r4, #9]
 801616a:	b13b      	cbz	r3, 801617c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801616c:	7a23      	ldrb	r3, [r4, #8]
 801616e:	b92b      	cbnz	r3, 801617c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016170:	6823      	ldr	r3, [r4, #0]
 8016172:	4620      	mov	r0, r4
 8016174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801617a:	4718      	bx	r3
 801617c:	bd10      	pop	{r4, pc}
	...

08016180 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8016180:	b510      	push	{r4, lr}
 8016182:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8016186:	1b12      	subs	r2, r2, r4
 8016188:	2a00      	cmp	r2, #0
 801618a:	bfdc      	itt	le
 801618c:	6883      	ldrle	r3, [r0, #8]
 801618e:	18d2      	addle	r2, r2, r3
 8016190:	2a01      	cmp	r2, #1
 8016192:	dd18      	ble.n	80161c6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8016194:	6843      	ldr	r3, [r0, #4]
 8016196:	f101 021c 	add.w	r2, r1, #28
 801619a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 801619e:	f851 4b04 	ldr.w	r4, [r1], #4
 80161a2:	4291      	cmp	r1, r2
 80161a4:	f843 4b04 	str.w	r4, [r3], #4
 80161a8:	d1f9      	bne.n	801619e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 80161aa:	880a      	ldrh	r2, [r1, #0]
 80161ac:	801a      	strh	r2, [r3, #0]
 80161ae:	788a      	ldrb	r2, [r1, #2]
 80161b0:	709a      	strb	r2, [r3, #2]
 80161b2:	68c3      	ldr	r3, [r0, #12]
 80161b4:	6882      	ldr	r2, [r0, #8]
 80161b6:	f3bf 8f5b 	dmb	ish
 80161ba:	3301      	adds	r3, #1
 80161bc:	429a      	cmp	r2, r3
 80161be:	bfd8      	it	le
 80161c0:	1a9b      	suble	r3, r3, r2
 80161c2:	60c3      	str	r3, [r0, #12]
 80161c4:	bd10      	pop	{r4, pc}
 80161c6:	4b03      	ldr	r3, [pc, #12]	; (80161d4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80161c8:	2139      	movs	r1, #57	; 0x39
 80161ca:	4a03      	ldr	r2, [pc, #12]	; (80161d8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 80161cc:	4803      	ldr	r0, [pc, #12]	; (80161dc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 80161ce:	f00e fd43 	bl	8024c58 <__assert_func>
 80161d2:	bf00      	nop
 80161d4:	080299ac 	.word	0x080299ac
 80161d8:	08029aa0 	.word	0x08029aa0
 80161dc:	08029986 	.word	0x08029986

080161e0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80161e0:	b510      	push	{r4, lr}
 80161e2:	6803      	ldr	r3, [r0, #0]
 80161e4:	4604      	mov	r4, r0
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	4798      	blx	r3
 80161ea:	b128      	cbz	r0, 80161f8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80161ec:	4b07      	ldr	r3, [pc, #28]	; (801620c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80161ee:	213f      	movs	r1, #63	; 0x3f
 80161f0:	4a07      	ldr	r2, [pc, #28]	; (8016210 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80161f2:	4808      	ldr	r0, [pc, #32]	; (8016214 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80161f4:	f00e fd30 	bl	8024c58 <__assert_func>
 80161f8:	6923      	ldr	r3, [r4, #16]
 80161fa:	68a2      	ldr	r2, [r4, #8]
 80161fc:	f3bf 8f5b 	dmb	ish
 8016200:	3301      	adds	r3, #1
 8016202:	429a      	cmp	r2, r3
 8016204:	bfd8      	it	le
 8016206:	1a9b      	suble	r3, r3, r2
 8016208:	6123      	str	r3, [r4, #16]
 801620a:	bd10      	pop	{r4, pc}
 801620c:	080299cf 	.word	0x080299cf
 8016210:	08029aee 	.word	0x08029aee
 8016214:	08029986 	.word	0x08029986

08016218 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8016218:	b570      	push	{r4, r5, r6, lr}
 801621a:	4604      	mov	r4, r0
 801621c:	6840      	ldr	r0, [r0, #4]
 801621e:	6803      	ldr	r3, [r0, #0]
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	4798      	blx	r3
 8016224:	4605      	mov	r5, r0
 8016226:	b930      	cbnz	r0, 8016236 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016228:	7a23      	ldrb	r3, [r4, #8]
 801622a:	b123      	cbz	r3, 8016236 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801622c:	6860      	ldr	r0, [r4, #4]
 801622e:	6803      	ldr	r3, [r0, #0]
 8016230:	695b      	ldr	r3, [r3, #20]
 8016232:	4798      	blx	r3
 8016234:	7225      	strb	r5, [r4, #8]
 8016236:	6860      	ldr	r0, [r4, #4]
 8016238:	6803      	ldr	r3, [r0, #0]
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	4798      	blx	r3
 801623e:	b928      	cbnz	r0, 801624c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8016240:	6823      	ldr	r3, [r4, #0]
 8016242:	4620      	mov	r0, r4
 8016244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801624a:	4718      	bx	r3
 801624c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016250:	f7fc bb16 	b.w	8012880 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08016254 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8016254:	b510      	push	{r4, lr}
 8016256:	6082      	str	r2, [r0, #8]
 8016258:	2200      	movs	r2, #0
 801625a:	4c03      	ldr	r4, [pc, #12]	; (8016268 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801625c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016260:	e9c0 4100 	strd	r4, r1, [r0]
 8016264:	bd10      	pop	{r4, pc}
 8016266:	bf00      	nop
 8016268:	08029a54 	.word	0x08029a54

0801626c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801626c:	6840      	ldr	r0, [r0, #4]
 801626e:	6803      	ldr	r3, [r0, #0]
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	4718      	bx	r3

08016274 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8016274:	2001      	movs	r0, #1
 8016276:	4770      	bx	lr

08016278 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8016278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801627c:	460d      	mov	r5, r1
 801627e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8016282:	b085      	sub	sp, #20
 8016284:	4690      	mov	r8, r2
 8016286:	4411      	add	r1, r2
 8016288:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801628c:	4699      	mov	r9, r3
 801628e:	6803      	ldr	r3, [r0, #0]
 8016290:	60c1      	str	r1, [r0, #12]
 8016292:	4604      	mov	r4, r0
 8016294:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016296:	440a      	add	r2, r1
 8016298:	6102      	str	r2, [r0, #16]
 801629a:	68db      	ldr	r3, [r3, #12]
 801629c:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 80162a0:	4798      	blx	r3
 80162a2:	2800      	cmp	r0, #0
 80162a4:	d039      	beq.n	801631a <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 80162a6:	44c8      	add	r8, r9
 80162a8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80162ac:	4445      	add	r5, r8
 80162ae:	6823      	ldr	r3, [r4, #0]
 80162b0:	f10d 020f 	add.w	r2, sp, #15
 80162b4:	a903      	add	r1, sp, #12
 80162b6:	4620      	mov	r0, r4
 80162b8:	9200      	str	r2, [sp, #0]
 80162ba:	f10d 020d 	add.w	r2, sp, #13
 80162be:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80162c2:	f10d 030e 	add.w	r3, sp, #14
 80162c6:	47c0      	blx	r8
 80162c8:	b1f8      	cbz	r0, 801630a <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 80162ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80162ce:	7a20      	ldrb	r0, [r4, #8]
 80162d0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80162d4:	4358      	muls	r0, r3
 80162d6:	f89d 100e 	ldrb.w	r1, [sp, #14]
 80162da:	1c43      	adds	r3, r0, #1
 80162dc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80162e0:	f817 0b01 	ldrb.w	r0, [r7], #1
 80162e4:	121b      	asrs	r3, r3, #8
 80162e6:	fb10 f003 	smulbb	r0, r0, r3
 80162ea:	b283      	uxth	r3, r0
 80162ec:	1c58      	adds	r0, r3, #1
 80162ee:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80162f2:	6823      	ldr	r3, [r4, #0]
 80162f4:	1200      	asrs	r0, r0, #8
 80162f6:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80162fa:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80162fe:	28ff      	cmp	r0, #255	; 0xff
 8016300:	d10e      	bne.n	8016320 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 8016302:	9100      	str	r1, [sp, #0]
 8016304:	4629      	mov	r1, r5
 8016306:	4620      	mov	r0, r4
 8016308:	47c0      	blx	r8
 801630a:	68e3      	ldr	r3, [r4, #12]
 801630c:	3e01      	subs	r6, #1
 801630e:	f105 0503 	add.w	r5, r5, #3
 8016312:	f103 0301 	add.w	r3, r3, #1
 8016316:	60e3      	str	r3, [r4, #12]
 8016318:	d1c9      	bne.n	80162ae <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 801631a:	b005      	add	sp, #20
 801631c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016320:	fa1f fc80 	uxth.w	ip, r0
 8016324:	43c0      	mvns	r0, r0
 8016326:	f895 e002 	ldrb.w	lr, [r5, #2]
 801632a:	fb12 f20c 	smulbb	r2, r2, ip
 801632e:	b2c0      	uxtb	r0, r0
 8016330:	fb13 f30c 	smulbb	r3, r3, ip
 8016334:	fb0e 2200 	mla	r2, lr, r0, r2
 8016338:	f895 e001 	ldrb.w	lr, [r5, #1]
 801633c:	fb11 f10c 	smulbb	r1, r1, ip
 8016340:	fb0e 3300 	mla	r3, lr, r0, r3
 8016344:	f895 e000 	ldrb.w	lr, [r5]
 8016348:	b292      	uxth	r2, r2
 801634a:	b29b      	uxth	r3, r3
 801634c:	fb0e 1000 	mla	r0, lr, r0, r1
 8016350:	1c59      	adds	r1, r3, #1
 8016352:	b280      	uxth	r0, r0
 8016354:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8016358:	1c51      	adds	r1, r2, #1
 801635a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801635e:	1c41      	adds	r1, r0, #1
 8016360:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016364:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8016368:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801636c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8016370:	9000      	str	r0, [sp, #0]
 8016372:	e7c7      	b.n	8016304 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

08016374 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 8016374:	f89d 0000 	ldrb.w	r0, [sp]
 8016378:	704b      	strb	r3, [r1, #1]
 801637a:	7008      	strb	r0, [r1, #0]
 801637c:	708a      	strb	r2, [r1, #2]
 801637e:	4770      	bx	lr

08016380 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 8016380:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
 8016384:	4770      	bx	lr

08016386 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 8016386:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 801638a:	4770      	bx	lr

0801638c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 801638c:	b507      	push	{r0, r1, r2, lr}
 801638e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8016392:	ab01      	add	r3, sp, #4
 8016394:	6809      	ldr	r1, [r1, #0]
 8016396:	6800      	ldr	r0, [r0, #0]
 8016398:	f003 fabb 	bl	8019912 <_ZN8touchgfx6muldivElllRl>
 801639c:	b003      	add	sp, #12
 801639e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080163a4 <_ZN8touchgfx7CWRUtil4sineEi>:
 80163a4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80163a8:	fb90 f3f2 	sdiv	r3, r0, r2
 80163ac:	fb03 0312 	mls	r3, r3, r2, r0
 80163b0:	4413      	add	r3, r2
 80163b2:	fb93 f0f2 	sdiv	r0, r3, r2
 80163b6:	fb02 3010 	mls	r0, r2, r0, r3
 80163ba:	4b0a      	ldr	r3, [pc, #40]	; (80163e4 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 80163bc:	285a      	cmp	r0, #90	; 0x5a
 80163be:	dc02      	bgt.n	80163c6 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 80163c0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80163c4:	4770      	bx	lr
 80163c6:	28b4      	cmp	r0, #180	; 0xb4
 80163c8:	dc02      	bgt.n	80163d0 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 80163ca:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 80163ce:	e7f7      	b.n	80163c0 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 80163d0:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 80163d4:	bfd4      	ite	le
 80163d6:	38b4      	suble	r0, #180	; 0xb4
 80163d8:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 80163dc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80163e0:	4240      	negs	r0, r0
 80163e2:	4770      	bx	lr
 80163e4:	08029b40 	.word	0x08029b40

080163e8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 80163e8:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 80163ec:	fb90 f3f2 	sdiv	r3, r0, r2
 80163f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80163f2:	fb03 0012 	mls	r0, r3, r2, r0
 80163f6:	4410      	add	r0, r2
 80163f8:	fb90 f4f2 	sdiv	r4, r0, r2
 80163fc:	fb02 0414 	mls	r4, r2, r4, r0
 8016400:	f004 061f 	and.w	r6, r4, #31
 8016404:	1164      	asrs	r4, r4, #5
 8016406:	4620      	mov	r0, r4
 8016408:	f7ff ffcc 	bl	80163a4 <_ZN8touchgfx7CWRUtil4sineEi>
 801640c:	4605      	mov	r5, r0
 801640e:	b90e      	cbnz	r6, 8016414 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 8016410:	b002      	add	sp, #8
 8016412:	bd70      	pop	{r4, r5, r6, pc}
 8016414:	1c60      	adds	r0, r4, #1
 8016416:	f7ff ffc5 	bl	80163a4 <_ZN8touchgfx7CWRUtil4sineEi>
 801641a:	ab01      	add	r3, sp, #4
 801641c:	2220      	movs	r2, #32
 801641e:	4631      	mov	r1, r6
 8016420:	1b40      	subs	r0, r0, r5
 8016422:	f003 fa76 	bl	8019912 <_ZN8touchgfx6muldivElllRl>
 8016426:	4428      	add	r0, r5
 8016428:	e7f2      	b.n	8016410 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

0801642a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 801642a:	b508      	push	{r3, lr}
 801642c:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 8016430:	f7ff ffda 	bl	80163e8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016434:	bd08      	pop	{r3, pc}
	...

08016438 <_ZN8touchgfx6CircleC1Ev>:
 8016438:	b510      	push	{r4, lr}
 801643a:	4604      	mov	r4, r0
 801643c:	f000 fd4e 	bl	8016edc <_ZN8touchgfx12CanvasWidgetC1Ev>
 8016440:	4b08      	ldr	r3, [pc, #32]	; (8016464 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 8016442:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8016446:	4620      	mov	r0, r4
 8016448:	6023      	str	r3, [r4, #0]
 801644a:	2300      	movs	r3, #0
 801644c:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8016450:	f24b 4205 	movw	r2, #46085	; 0xb405
 8016454:	60a3      	str	r3, [r4, #8]
 8016456:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 801645a:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801645e:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 8016462:	bd10      	pop	{r4, pc}
 8016464:	08029c00 	.word	0x08029c00

08016468 <_ZN8touchgfx6Circle15setCapPrecisionEi>:
 8016468:	29b4      	cmp	r1, #180	; 0xb4
 801646a:	bfa8      	it	ge
 801646c:	21b4      	movge	r1, #180	; 0xb4
 801646e:	2901      	cmp	r1, #1
 8016470:	bfb8      	it	lt
 8016472:	2101      	movlt	r1, #1
 8016474:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
 8016478:	4770      	bx	lr

0801647a <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 801647a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801647e:	4606      	mov	r6, r0
 8016480:	6810      	ldr	r0, [r2, #0]
 8016482:	4698      	mov	r8, r3
 8016484:	4691      	mov	r9, r2
 8016486:	460f      	mov	r7, r1
 8016488:	f7ff ffae 	bl	80163e8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801648c:	a902      	add	r1, sp, #8
 801648e:	2402      	movs	r4, #2
 8016490:	f841 0d08 	str.w	r0, [r1, #-8]!
 8016494:	4640      	mov	r0, r8
 8016496:	f7ff ff79 	bl	801638c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801649a:	6b35      	ldr	r5, [r6, #48]	; 0x30
 801649c:	fb90 f0f4 	sdiv	r0, r0, r4
 80164a0:	4405      	add	r5, r0
 80164a2:	f8d9 0000 	ldr.w	r0, [r9]
 80164a6:	f7ff ffc0 	bl	801642a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80164aa:	a902      	add	r1, sp, #8
 80164ac:	f841 0d04 	str.w	r0, [r1, #-4]!
 80164b0:	4640      	mov	r0, r8
 80164b2:	f7ff ff6b 	bl	801638c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80164b6:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80164b8:	4629      	mov	r1, r5
 80164ba:	fb90 f0f4 	sdiv	r0, r0, r4
 80164be:	1a12      	subs	r2, r2, r0
 80164c0:	4638      	mov	r0, r7
 80164c2:	f00d f9c6 	bl	8023852 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80164c6:	b003      	add	sp, #12
 80164c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080164cc <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
 80164cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80164d0:	9e08      	ldr	r6, [sp, #32]
 80164d2:	4698      	mov	r8, r3
 80164d4:	4615      	mov	r5, r2
 80164d6:	460f      	mov	r7, r1
 80164d8:	6830      	ldr	r0, [r6, #0]
 80164da:	2402      	movs	r4, #2
 80164dc:	f7ff ff84 	bl	80163e8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80164e0:	a902      	add	r1, sp, #8
 80164e2:	f841 0d08 	str.w	r0, [r1, #-8]!
 80164e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80164e8:	f7ff ff50 	bl	801638c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80164ec:	682d      	ldr	r5, [r5, #0]
 80164ee:	fb90 f0f4 	sdiv	r0, r0, r4
 80164f2:	4405      	add	r5, r0
 80164f4:	6830      	ldr	r0, [r6, #0]
 80164f6:	f7ff ff98 	bl	801642a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80164fa:	a902      	add	r1, sp, #8
 80164fc:	f841 0d04 	str.w	r0, [r1, #-4]!
 8016500:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016502:	f7ff ff43 	bl	801638c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016506:	f8d8 2000 	ldr.w	r2, [r8]
 801650a:	4629      	mov	r1, r5
 801650c:	fb90 f0f4 	sdiv	r0, r0, r4
 8016510:	1a12      	subs	r2, r2, r0
 8016512:	4638      	mov	r0, r7
 8016514:	f00d f92c 	bl	8023770 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016518:	b002      	add	sp, #8
 801651a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801651e <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 801651e:	b513      	push	{r0, r1, r4, lr}
 8016520:	e9cd 2300 	strd	r2, r3, [sp]
 8016524:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8016528:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801652c:	f7ff ffce 	bl	80164cc <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8016530:	b002      	add	sp, #8
 8016532:	bd10      	pop	{r4, pc}

08016534 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8016534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016536:	680e      	ldr	r6, [r1, #0]
 8016538:	681f      	ldr	r7, [r3, #0]
 801653a:	9807      	ldr	r0, [sp, #28]
 801653c:	42be      	cmp	r6, r7
 801653e:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 8016542:	bfb8      	it	lt
 8016544:	601e      	strlt	r6, [r3, #0]
 8016546:	680b      	ldr	r3, [r1, #0]
 8016548:	6829      	ldr	r1, [r5, #0]
 801654a:	428b      	cmp	r3, r1
 801654c:	bfc8      	it	gt
 801654e:	602b      	strgt	r3, [r5, #0]
 8016550:	6813      	ldr	r3, [r2, #0]
 8016552:	6821      	ldr	r1, [r4, #0]
 8016554:	428b      	cmp	r3, r1
 8016556:	bfb8      	it	lt
 8016558:	6023      	strlt	r3, [r4, #0]
 801655a:	6813      	ldr	r3, [r2, #0]
 801655c:	6802      	ldr	r2, [r0, #0]
 801655e:	4293      	cmp	r3, r2
 8016560:	bfc8      	it	gt
 8016562:	6003      	strgt	r3, [r0, #0]
 8016564:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016566 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8016566:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801656a:	b089      	sub	sp, #36	; 0x24
 801656c:	4690      	mov	r8, r2
 801656e:	4606      	mov	r6, r0
 8016570:	2402      	movs	r4, #2
 8016572:	ad08      	add	r5, sp, #32
 8016574:	6808      	ldr	r0, [r1, #0]
 8016576:	461f      	mov	r7, r3
 8016578:	4689      	mov	r9, r1
 801657a:	f7ff ff35 	bl	80163e8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801657e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8016582:	4640      	mov	r0, r8
 8016584:	4629      	mov	r1, r5
 8016586:	f7ff ff01 	bl	801638c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801658a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 801658c:	fb90 f0f4 	sdiv	r0, r0, r4
 8016590:	4418      	add	r0, r3
 8016592:	9005      	str	r0, [sp, #20]
 8016594:	f8d9 0000 	ldr.w	r0, [r9]
 8016598:	f7ff ff47 	bl	801642a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801659c:	4629      	mov	r1, r5
 801659e:	9007      	str	r0, [sp, #28]
 80165a0:	4640      	mov	r0, r8
 80165a2:	f7ff fef3 	bl	801638c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80165a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80165a8:	aa08      	add	r2, sp, #32
 80165aa:	a905      	add	r1, sp, #20
 80165ac:	fb90 f0f4 	sdiv	r0, r0, r4
 80165b0:	6b74      	ldr	r4, [r6, #52]	; 0x34
 80165b2:	1a24      	subs	r4, r4, r0
 80165b4:	4630      	mov	r0, r6
 80165b6:	f842 4d08 	str.w	r4, [r2, #-8]!
 80165ba:	9302      	str	r3, [sp, #8]
 80165bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80165be:	9301      	str	r3, [sp, #4]
 80165c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80165c2:	9300      	str	r3, [sp, #0]
 80165c4:	463b      	mov	r3, r7
 80165c6:	f7ff ffb5 	bl	8016534 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80165ca:	b009      	add	sp, #36	; 0x24
 80165cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080165d0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 80165d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165d4:	4291      	cmp	r1, r2
 80165d6:	b08d      	sub	sp, #52	; 0x34
 80165d8:	461e      	mov	r6, r3
 80165da:	4604      	mov	r4, r0
 80165dc:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80165e0:	ad0c      	add	r5, sp, #48	; 0x30
 80165e2:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 80165e6:	e9cd 2106 	strd	r2, r1, [sp, #24]
 80165ea:	bfc8      	it	gt
 80165ec:	e9cd 1206 	strdgt	r1, r2, [sp, #24]
 80165f0:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80165f4:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 80165f8:	1a9b      	subs	r3, r3, r2
 80165fa:	a907      	add	r1, sp, #28
 80165fc:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8016600:	bfa2      	ittt	ge
 8016602:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8016606:	2200      	movge	r2, #0
 8016608:	e9cd 3206 	strdge	r3, r2, [sp, #24]
 801660c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 801660e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8016610:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016614:	f845 3d04 	str.w	r3, [r5, #-4]!
 8016618:	4633      	mov	r3, r6
 801661a:	462a      	mov	r2, r5
 801661c:	9700      	str	r7, [sp, #0]
 801661e:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016622:	f7ff ffa0 	bl	8016566 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016626:	9b07      	ldr	r3, [sp, #28]
 8016628:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 801662c:	f103 0120 	add.w	r1, r3, #32
 8016630:	fb91 f3f0 	sdiv	r3, r1, r0
 8016634:	fb00 1313 	mls	r3, r0, r3, r1
 8016638:	1ac3      	subs	r3, r0, r3
 801663a:	fb93 f2f0 	sdiv	r2, r3, r0
 801663e:	fb00 3312 	mls	r3, r0, r2, r3
 8016642:	440b      	add	r3, r1
 8016644:	f84a 3d0c 	str.w	r3, [sl, #-12]!
 8016648:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801664a:	9906      	ldr	r1, [sp, #24]
 801664c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801664e:	4291      	cmp	r1, r2
 8016650:	db11      	blt.n	8016676 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xa6>
 8016652:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016654:	4651      	mov	r1, sl
 8016656:	9700      	str	r7, [sp, #0]
 8016658:	4620      	mov	r0, r4
 801665a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801665e:	462a      	mov	r2, r5
 8016660:	930b      	str	r3, [sp, #44]	; 0x2c
 8016662:	4633      	mov	r3, r6
 8016664:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016668:	f7ff ff7d 	bl	8016566 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 801666c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801666e:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8016672:	9309      	str	r3, [sp, #36]	; 0x24
 8016674:	e7e8      	b.n	8016648 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x78>
 8016676:	f5a2 6234 	sub.w	r2, r2, #2880	; 0xb40
 801667a:	4291      	cmp	r1, r2
 801667c:	dd0c      	ble.n	8016698 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc8>
 801667e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016680:	a906      	add	r1, sp, #24
 8016682:	9700      	str	r7, [sp, #0]
 8016684:	4620      	mov	r0, r4
 8016686:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801668a:	462a      	mov	r2, r5
 801668c:	930b      	str	r3, [sp, #44]	; 0x2c
 801668e:	4633      	mov	r3, r6
 8016690:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016694:	f7ff ff67 	bl	8016566 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016698:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801669a:	2b00      	cmp	r3, #0
 801669c:	f040 8097 	bne.w	80167ce <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fe>
 80166a0:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 80166a4:	1a52      	subs	r2, r2, r1
 80166a6:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 80166aa:	da0a      	bge.n	80166c2 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xf2>
 80166ac:	462a      	mov	r2, r5
 80166ae:	a90a      	add	r1, sp, #40	; 0x28
 80166b0:	9700      	str	r7, [sp, #0]
 80166b2:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80166b6:	4633      	mov	r3, r6
 80166b8:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80166bc:	4620      	mov	r0, r4
 80166be:	f7ff ff52 	bl	8016566 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80166c2:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 80166c6:	2bb3      	cmp	r3, #179	; 0xb3
 80166c8:	d87e      	bhi.n	80167c8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 80166ca:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 80166ce:	1a1b      	subs	r3, r3, r0
 80166d0:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80166d4:	da78      	bge.n	80167c8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 80166d6:	ad0c      	add	r5, sp, #48	; 0x30
 80166d8:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 80166dc:	f7ff fe84 	bl	80163e8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80166e0:	f04f 0a02 	mov.w	sl, #2
 80166e4:	f845 0d04 	str.w	r0, [r5, #-4]!
 80166e8:	4658      	mov	r0, fp
 80166ea:	4629      	mov	r1, r5
 80166ec:	f7ff fe4e 	bl	801638c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80166f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80166f2:	18c3      	adds	r3, r0, r3
 80166f4:	9807      	ldr	r0, [sp, #28]
 80166f6:	9305      	str	r3, [sp, #20]
 80166f8:	f7ff fe97 	bl	801642a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80166fc:	4629      	mov	r1, r5
 80166fe:	900b      	str	r0, [sp, #44]	; 0x2c
 8016700:	4658      	mov	r0, fp
 8016702:	f7ff fe43 	bl	801638c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016706:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016708:	9a05      	ldr	r2, [sp, #20]
 801670a:	a90a      	add	r1, sp, #40	; 0x28
 801670c:	1a1b      	subs	r3, r3, r0
 801670e:	9700      	str	r7, [sp, #0]
 8016710:	4620      	mov	r0, r4
 8016712:	9304      	str	r3, [sp, #16]
 8016714:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016716:	fb93 f3fa 	sdiv	r3, r3, sl
 801671a:	1ad2      	subs	r2, r2, r3
 801671c:	920a      	str	r2, [sp, #40]	; 0x28
 801671e:	9a04      	ldr	r2, [sp, #16]
 8016720:	1ad3      	subs	r3, r2, r3
 8016722:	462a      	mov	r2, r5
 8016724:	930b      	str	r3, [sp, #44]	; 0x2c
 8016726:	4633      	mov	r3, r6
 8016728:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801672c:	f7ff ff02 	bl	8016534 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016730:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016732:	9a05      	ldr	r2, [sp, #20]
 8016734:	a90a      	add	r1, sp, #40	; 0x28
 8016736:	4620      	mov	r0, r4
 8016738:	9700      	str	r7, [sp, #0]
 801673a:	fb93 f3fa 	sdiv	r3, r3, sl
 801673e:	189a      	adds	r2, r3, r2
 8016740:	920a      	str	r2, [sp, #40]	; 0x28
 8016742:	9a04      	ldr	r2, [sp, #16]
 8016744:	4413      	add	r3, r2
 8016746:	462a      	mov	r2, r5
 8016748:	930b      	str	r3, [sp, #44]	; 0x2c
 801674a:	4633      	mov	r3, r6
 801674c:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8016750:	f7ff fef0 	bl	8016534 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8016754:	9806      	ldr	r0, [sp, #24]
 8016756:	f7ff fe47 	bl	80163e8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801675a:	4629      	mov	r1, r5
 801675c:	900b      	str	r0, [sp, #44]	; 0x2c
 801675e:	4658      	mov	r0, fp
 8016760:	f7ff fe14 	bl	801638c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016764:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016766:	18c3      	adds	r3, r0, r3
 8016768:	9806      	ldr	r0, [sp, #24]
 801676a:	9304      	str	r3, [sp, #16]
 801676c:	f7ff fe5d 	bl	801642a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016770:	4629      	mov	r1, r5
 8016772:	900b      	str	r0, [sp, #44]	; 0x2c
 8016774:	4658      	mov	r0, fp
 8016776:	f7ff fe09 	bl	801638c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801677a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801677c:	9a04      	ldr	r2, [sp, #16]
 801677e:	a90a      	add	r1, sp, #40	; 0x28
 8016780:	eba3 0b00 	sub.w	fp, r3, r0
 8016784:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016786:	4620      	mov	r0, r4
 8016788:	9700      	str	r7, [sp, #0]
 801678a:	fb93 f3fa 	sdiv	r3, r3, sl
 801678e:	1ad2      	subs	r2, r2, r3
 8016790:	ebab 0303 	sub.w	r3, fp, r3
 8016794:	920a      	str	r2, [sp, #40]	; 0x28
 8016796:	462a      	mov	r2, r5
 8016798:	930b      	str	r3, [sp, #44]	; 0x2c
 801679a:	4633      	mov	r3, r6
 801679c:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80167a0:	f7ff fec8 	bl	8016534 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80167a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80167a6:	9700      	str	r7, [sp, #0]
 80167a8:	462a      	mov	r2, r5
 80167aa:	a90a      	add	r1, sp, #40	; 0x28
 80167ac:	4620      	mov	r0, r4
 80167ae:	fb93 fafa 	sdiv	sl, r3, sl
 80167b2:	9b04      	ldr	r3, [sp, #16]
 80167b4:	4453      	add	r3, sl
 80167b6:	930a      	str	r3, [sp, #40]	; 0x28
 80167b8:	eb0a 030b 	add.w	r3, sl, fp
 80167bc:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80167c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80167c2:	4633      	mov	r3, r6
 80167c4:	f7ff feb6 	bl	8016534 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80167c8:	b00d      	add	sp, #52	; 0x34
 80167ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80167d0:	a907      	add	r1, sp, #28
 80167d2:	9700      	str	r7, [sp, #0]
 80167d4:	4620      	mov	r0, r4
 80167d6:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80167da:	462a      	mov	r2, r5
 80167dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80167de:	4633      	mov	r3, r6
 80167e0:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80167e4:	f7ff febf 	bl	8016566 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80167e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80167ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80167ec:	a906      	add	r1, sp, #24
 80167ee:	9700      	str	r7, [sp, #0]
 80167f0:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 80167f4:	462a      	mov	r2, r5
 80167f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80167f8:	4633      	mov	r3, r6
 80167fa:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80167fe:	e75d      	b.n	80166bc <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>

08016800 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 8016800:	b530      	push	{r4, r5, lr}
 8016802:	4604      	mov	r4, r0
 8016804:	4608      	mov	r0, r1
 8016806:	4611      	mov	r1, r2
 8016808:	461a      	mov	r2, r3
 801680a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801680e:	b089      	sub	sp, #36	; 0x24
 8016810:	2500      	movs	r5, #0
 8016812:	015b      	lsls	r3, r3, #5
 8016814:	9505      	str	r5, [sp, #20]
 8016816:	9304      	str	r3, [sp, #16]
 8016818:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801681c:	015b      	lsls	r3, r3, #5
 801681e:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8016822:	ab07      	add	r3, sp, #28
 8016824:	2520      	movs	r5, #32
 8016826:	9302      	str	r3, [sp, #8]
 8016828:	ab06      	add	r3, sp, #24
 801682a:	9301      	str	r3, [sp, #4]
 801682c:	ab05      	add	r3, sp, #20
 801682e:	9300      	str	r3, [sp, #0]
 8016830:	ab04      	add	r3, sp, #16
 8016832:	f7ff fecd 	bl	80165d0 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8016836:	9a04      	ldr	r2, [sp, #16]
 8016838:	9805      	ldr	r0, [sp, #20]
 801683a:	9b06      	ldr	r3, [sp, #24]
 801683c:	9907      	ldr	r1, [sp, #28]
 801683e:	fb92 f2f5 	sdiv	r2, r2, r5
 8016842:	fb90 f0f5 	sdiv	r0, r0, r5
 8016846:	fb93 f3f5 	sdiv	r3, r3, r5
 801684a:	fb91 f1f5 	sdiv	r1, r1, r5
 801684e:	b292      	uxth	r2, r2
 8016850:	3002      	adds	r0, #2
 8016852:	b29b      	uxth	r3, r3
 8016854:	3102      	adds	r1, #2
 8016856:	1a80      	subs	r0, r0, r2
 8016858:	3a01      	subs	r2, #1
 801685a:	1ac9      	subs	r1, r1, r3
 801685c:	3b01      	subs	r3, #1
 801685e:	80a0      	strh	r0, [r4, #4]
 8016860:	4620      	mov	r0, r4
 8016862:	8022      	strh	r2, [r4, #0]
 8016864:	8063      	strh	r3, [r4, #2]
 8016866:	80e1      	strh	r1, [r4, #6]
 8016868:	b009      	add	sp, #36	; 0x24
 801686a:	bd30      	pop	{r4, r5, pc}

0801686c <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 801686c:	b510      	push	{r4, lr}
 801686e:	4604      	mov	r4, r0
 8016870:	e9d1 230f 	ldrd	r2, r3, [r1, #60]	; 0x3c
 8016874:	f7ff ffc4 	bl	8016800 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8016878:	4620      	mov	r0, r4
 801687a:	bd10      	pop	{r4, pc}

0801687c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 801687c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016880:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8016882:	b0b8      	sub	sp, #224	; 0xe0
 8016884:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8016886:	4604      	mov	r4, r0
 8016888:	9302      	str	r3, [sp, #8]
 801688a:	460f      	mov	r7, r1
 801688c:	4293      	cmp	r3, r2
 801688e:	9203      	str	r2, [sp, #12]
 8016890:	ae09      	add	r6, sp, #36	; 0x24
 8016892:	bfc8      	it	gt
 8016894:	e9cd 2302 	strdgt	r2, r3, [sp, #8]
 8016898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801689c:	1a9b      	subs	r3, r3, r2
 801689e:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80168a2:	bfa2      	ittt	ge
 80168a4:	2200      	movge	r2, #0
 80168a6:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 80168aa:	e9cd 2302 	strdge	r2, r3, [sp, #8]
 80168ae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80168b0:	2a00      	cmp	r2, #0
 80168b2:	d131      	bne.n	8016918 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9c>
 80168b4:	463a      	mov	r2, r7
 80168b6:	4621      	mov	r1, r4
 80168b8:	a80a      	add	r0, sp, #40	; 0x28
 80168ba:	f00c fe01 	bl	80234c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 80168be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80168c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80168c2:	9204      	str	r2, [sp, #16]
 80168c4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80168c8:	9305      	str	r3, [sp, #20]
 80168ca:	dc6f      	bgt.n	80169ac <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x130>
 80168cc:	9b02      	ldr	r3, [sp, #8]
 80168ce:	a90a      	add	r1, sp, #40	; 0x28
 80168d0:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 80168d4:	4620      	mov	r0, r4
 80168d6:	9306      	str	r3, [sp, #24]
 80168d8:	016d      	lsls	r5, r5, #5
 80168da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80168de:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80168e2:	aa06      	add	r2, sp, #24
 80168e4:	9309      	str	r3, [sp, #36]	; 0x24
 80168e6:	4633      	mov	r3, r6
 80168e8:	f7ff fdc7 	bl	801647a <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80168ec:	9f06      	ldr	r7, [sp, #24]
 80168ee:	2d00      	cmp	r5, #0
 80168f0:	d165      	bne.n	80169be <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x142>
 80168f2:	3720      	adds	r7, #32
 80168f4:	4639      	mov	r1, r7
 80168f6:	9a03      	ldr	r2, [sp, #12]
 80168f8:	9b05      	ldr	r3, [sp, #20]
 80168fa:	442f      	add	r7, r5
 80168fc:	4291      	cmp	r1, r2
 80168fe:	dc6b      	bgt.n	80169d8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x15c>
 8016900:	9a04      	ldr	r2, [sp, #16]
 8016902:	4620      	mov	r0, r4
 8016904:	9106      	str	r1, [sp, #24]
 8016906:	a90a      	add	r1, sp, #40	; 0x28
 8016908:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801690c:	aa06      	add	r2, sp, #24
 801690e:	9309      	str	r3, [sp, #36]	; 0x24
 8016910:	4633      	mov	r3, r6
 8016912:	f7ff fe04 	bl	801651e <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8016916:	e7ed      	b.n	80168f4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8016918:	f9b1 c000 	ldrsh.w	ip, [r1]
 801691c:	88bd      	ldrh	r5, [r7, #4]
 801691e:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8016922:	4465      	add	r5, ip
 8016924:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 8016928:	b22d      	sxth	r5, r5
 801692a:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 801692e:	eba3 134c 	sub.w	r3, r3, ip, lsl #5
 8016932:	2d00      	cmp	r5, #0
 8016934:	bfb8      	it	lt
 8016936:	426d      	neglt	r5, r5
 8016938:	2b00      	cmp	r3, #0
 801693a:	bfb8      	it	lt
 801693c:	425b      	neglt	r3, r3
 801693e:	429d      	cmp	r5, r3
 8016940:	bfb8      	it	lt
 8016942:	461d      	movlt	r5, r3
 8016944:	88fb      	ldrh	r3, [r7, #6]
 8016946:	4403      	add	r3, r0
 8016948:	116d      	asrs	r5, r5, #5
 801694a:	b21b      	sxth	r3, r3
 801694c:	3501      	adds	r5, #1
 801694e:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
 8016952:	eba1 1140 	sub.w	r1, r1, r0, lsl #5
 8016956:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801695a:	2b00      	cmp	r3, #0
 801695c:	f100 0001 	add.w	r0, r0, #1
 8016960:	bfb8      	it	lt
 8016962:	425b      	neglt	r3, r3
 8016964:	2900      	cmp	r1, #0
 8016966:	ea4f 0060 	mov.w	r0, r0, asr #1
 801696a:	bfb8      	it	lt
 801696c:	4249      	neglt	r1, r1
 801696e:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8016972:	428b      	cmp	r3, r1
 8016974:	bfb8      	it	lt
 8016976:	460b      	movlt	r3, r1
 8016978:	115b      	asrs	r3, r3, #5
 801697a:	3301      	adds	r3, #1
 801697c:	435b      	muls	r3, r3
 801697e:	fb05 3505 	mla	r5, r5, r5, r3
 8016982:	2302      	movs	r3, #2
 8016984:	fb92 f2f3 	sdiv	r2, r2, r3
 8016988:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801698a:	1a9a      	subs	r2, r3, r2
 801698c:	9209      	str	r2, [sp, #36]	; 0x24
 801698e:	f7ff fd09 	bl	80163a4 <_ZN8touchgfx7CWRUtil4sineEi>
 8016992:	a90a      	add	r1, sp, #40	; 0x28
 8016994:	900a      	str	r0, [sp, #40]	; 0x28
 8016996:	4630      	mov	r0, r6
 8016998:	f7ff fcf8 	bl	801638c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801699c:	2320      	movs	r3, #32
 801699e:	fb90 f0f3 	sdiv	r0, r0, r3
 80169a2:	4340      	muls	r0, r0
 80169a4:	42a8      	cmp	r0, r5
 80169a6:	dd85      	ble.n	80168b4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x38>
 80169a8:	2401      	movs	r4, #1
 80169aa:	e036      	b.n	8016a1a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x19e>
 80169ac:	2102      	movs	r1, #2
 80169ae:	fb93 f3f1 	sdiv	r3, r3, r1
 80169b2:	4413      	add	r3, r2
 80169b4:	9305      	str	r3, [sp, #20]
 80169b6:	fb93 f3f1 	sdiv	r3, r3, r1
 80169ba:	9304      	str	r3, [sp, #16]
 80169bc:	e786      	b.n	80168cc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x50>
 80169be:	f107 0320 	add.w	r3, r7, #32
 80169c2:	fb93 f7f5 	sdiv	r7, r3, r5
 80169c6:	fb05 3717 	mls	r7, r5, r7, r3
 80169ca:	1bea      	subs	r2, r5, r7
 80169cc:	fb92 f7f5 	sdiv	r7, r2, r5
 80169d0:	fb05 2717 	mls	r7, r5, r7, r2
 80169d4:	441f      	add	r7, r3
 80169d6:	e78d      	b.n	80168f4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 80169d8:	9906      	ldr	r1, [sp, #24]
 80169da:	428a      	cmp	r2, r1
 80169dc:	dd09      	ble.n	80169f2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
 80169de:	9a04      	ldr	r2, [sp, #16]
 80169e0:	a90a      	add	r1, sp, #40	; 0x28
 80169e2:	4620      	mov	r0, r4
 80169e4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80169e8:	aa03      	add	r2, sp, #12
 80169ea:	9309      	str	r3, [sp, #36]	; 0x24
 80169ec:	4633      	mov	r3, r6
 80169ee:	f7ff fd96 	bl	801651e <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 80169f2:	9a05      	ldr	r2, [sp, #20]
 80169f4:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 80169f8:	1ac3      	subs	r3, r0, r3
 80169fa:	b992      	cbnz	r2, 8016a22 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a6>
 80169fc:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8016a00:	da04      	bge.n	8016a0c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8016a02:	a80a      	add	r0, sp, #40	; 0x28
 8016a04:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8016a08:	f00c feb2 	bl	8023770 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016a0c:	a80a      	add	r0, sp, #40	; 0x28
 8016a0e:	f00d f824 	bl	8023a5a <_ZN8touchgfx6Canvas6renderEv>
 8016a12:	4604      	mov	r4, r0
 8016a14:	a80a      	add	r0, sp, #40	; 0x28
 8016a16:	f00d f861 	bl	8023adc <_ZN8touchgfx6CanvasD1Ev>
 8016a1a:	4620      	mov	r0, r4
 8016a1c:	b038      	add	sp, #224	; 0xe0
 8016a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a22:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 8016a26:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8016a2a:	ea4f 1747 	mov.w	r7, r7, lsl #5
 8016a2e:	da2b      	bge.n	8016a88 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20c>
 8016a30:	f7ff fcda 	bl	80163e8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016a34:	4631      	mov	r1, r6
 8016a36:	9009      	str	r0, [sp, #36]	; 0x24
 8016a38:	a804      	add	r0, sp, #16
 8016a3a:	f7ff fca7 	bl	801638c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016a3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016a40:	f10d 0814 	add.w	r8, sp, #20
 8016a44:	4418      	add	r0, r3
 8016a46:	9007      	str	r0, [sp, #28]
 8016a48:	9803      	ldr	r0, [sp, #12]
 8016a4a:	f7ff fcee 	bl	801642a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016a4e:	4631      	mov	r1, r6
 8016a50:	9009      	str	r0, [sp, #36]	; 0x24
 8016a52:	a804      	add	r0, sp, #16
 8016a54:	f7ff fc9a 	bl	801638c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016a58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016a5a:	1a18      	subs	r0, r3, r0
 8016a5c:	9b03      	ldr	r3, [sp, #12]
 8016a5e:	443b      	add	r3, r7
 8016a60:	9008      	str	r0, [sp, #32]
 8016a62:	9309      	str	r3, [sp, #36]	; 0x24
 8016a64:	9b03      	ldr	r3, [sp, #12]
 8016a66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016a68:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8016a6c:	4293      	cmp	r3, r2
 8016a6e:	dd0b      	ble.n	8016a88 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20c>
 8016a70:	ab08      	add	r3, sp, #32
 8016a72:	aa07      	add	r2, sp, #28
 8016a74:	a90a      	add	r1, sp, #40	; 0x28
 8016a76:	4620      	mov	r0, r4
 8016a78:	e9cd 6800 	strd	r6, r8, [sp]
 8016a7c:	f7ff fd26 	bl	80164cc <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8016a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a82:	443b      	add	r3, r7
 8016a84:	9309      	str	r3, [sp, #36]	; 0x24
 8016a86:	e7ed      	b.n	8016a64 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e8>
 8016a88:	9a03      	ldr	r2, [sp, #12]
 8016a8a:	9b06      	ldr	r3, [sp, #24]
 8016a8c:	429a      	cmp	r2, r3
 8016a8e:	dd0a      	ble.n	8016aa6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22a>
 8016a90:	a90a      	add	r1, sp, #40	; 0x28
 8016a92:	4620      	mov	r0, r4
 8016a94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016a98:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8016a9c:	aa03      	add	r2, sp, #12
 8016a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8016aa0:	4633      	mov	r3, r6
 8016aa2:	f7ff fd3c 	bl	801651e <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8016aa6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8016aaa:	4642      	mov	r2, r8
 8016aac:	9b02      	ldr	r3, [sp, #8]
 8016aae:	eba8 0805 	sub.w	r8, r8, r5
 8016ab2:	429a      	cmp	r2, r3
 8016ab4:	db0c      	blt.n	8016ad0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x254>
 8016ab6:	9206      	str	r2, [sp, #24]
 8016ab8:	a90a      	add	r1, sp, #40	; 0x28
 8016aba:	4620      	mov	r0, r4
 8016abc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016ac0:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8016ac4:	aa06      	add	r2, sp, #24
 8016ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8016ac8:	4633      	mov	r3, r6
 8016aca:	f7ff fd28 	bl	801651e <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8016ace:	e7ec      	b.n	8016aaa <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22e>
 8016ad0:	9a06      	ldr	r2, [sp, #24]
 8016ad2:	4293      	cmp	r3, r2
 8016ad4:	da0a      	bge.n	8016aec <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x270>
 8016ad6:	a90a      	add	r1, sp, #40	; 0x28
 8016ad8:	4620      	mov	r0, r4
 8016ada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016ade:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8016ae2:	aa02      	add	r2, sp, #8
 8016ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8016ae6:	4633      	mov	r3, r6
 8016ae8:	f7ff fd19 	bl	801651e <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8016aec:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8016af0:	1a1b      	subs	r3, r3, r0
 8016af2:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8016af6:	da89      	bge.n	8016a0c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8016af8:	f7ff fc76 	bl	80163e8 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8016afc:	4631      	mov	r1, r6
 8016afe:	9009      	str	r0, [sp, #36]	; 0x24
 8016b00:	a804      	add	r0, sp, #16
 8016b02:	f7ff fc43 	bl	801638c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016b06:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016b08:	ad05      	add	r5, sp, #20
 8016b0a:	4418      	add	r0, r3
 8016b0c:	9007      	str	r0, [sp, #28]
 8016b0e:	9802      	ldr	r0, [sp, #8]
 8016b10:	f7ff fc8b 	bl	801642a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8016b14:	4631      	mov	r1, r6
 8016b16:	9009      	str	r0, [sp, #36]	; 0x24
 8016b18:	a804      	add	r0, sp, #16
 8016b1a:	f7ff fc37 	bl	801638c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016b1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016b20:	1a18      	subs	r0, r3, r0
 8016b22:	9b02      	ldr	r3, [sp, #8]
 8016b24:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
 8016b28:	9008      	str	r0, [sp, #32]
 8016b2a:	443b      	add	r3, r7
 8016b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8016b2e:	9a02      	ldr	r2, [sp, #8]
 8016b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b32:	429a      	cmp	r2, r3
 8016b34:	f77f af6a 	ble.w	8016a0c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8016b38:	ab08      	add	r3, sp, #32
 8016b3a:	aa07      	add	r2, sp, #28
 8016b3c:	a90a      	add	r1, sp, #40	; 0x28
 8016b3e:	4620      	mov	r0, r4
 8016b40:	e9cd 6500 	strd	r6, r5, [sp]
 8016b44:	f7ff fcc2 	bl	80164cc <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8016b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b4a:	443b      	add	r3, r7
 8016b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8016b4e:	e7ee      	b.n	8016b2e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b2>

08016b50 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8016b50:	4413      	add	r3, r2
 8016b52:	7dc2      	ldrb	r2, [r0, #23]
 8016b54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016b58:	4419      	add	r1, r3
 8016b5a:	7a03      	ldrb	r3, [r0, #8]
 8016b5c:	435a      	muls	r2, r3
 8016b5e:	1c53      	adds	r3, r2, #1
 8016b60:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8016b64:	121b      	asrs	r3, r3, #8
 8016b66:	2bff      	cmp	r3, #255	; 0xff
 8016b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b6a:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 8016b6e:	d13e      	bne.n	8016bee <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 8016b70:	4427      	add	r7, r4
 8016b72:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016b76:	3103      	adds	r1, #3
 8016b78:	7d86      	ldrb	r6, [r0, #22]
 8016b7a:	2bff      	cmp	r3, #255	; 0xff
 8016b7c:	d10a      	bne.n	8016b94 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 8016b7e:	f801 6c03 	strb.w	r6, [r1, #-3]
 8016b82:	7d43      	ldrb	r3, [r0, #21]
 8016b84:	f801 3c02 	strb.w	r3, [r1, #-2]
 8016b88:	7d03      	ldrb	r3, [r0, #20]
 8016b8a:	f801 3c01 	strb.w	r3, [r1, #-1]
 8016b8e:	42a7      	cmp	r7, r4
 8016b90:	d1ef      	bne.n	8016b72 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 8016b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b94:	b29a      	uxth	r2, r3
 8016b96:	43db      	mvns	r3, r3
 8016b98:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8016b9c:	fb16 f602 	smulbb	r6, r6, r2
 8016ba0:	b2db      	uxtb	r3, r3
 8016ba2:	fb05 6503 	mla	r5, r5, r3, r6
 8016ba6:	b2ad      	uxth	r5, r5
 8016ba8:	1c6e      	adds	r6, r5, #1
 8016baa:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8016bae:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 8016bb2:	fb16 f603 	smulbb	r6, r6, r3
 8016bb6:	122d      	asrs	r5, r5, #8
 8016bb8:	f801 5c03 	strb.w	r5, [r1, #-3]
 8016bbc:	7d45      	ldrb	r5, [r0, #21]
 8016bbe:	fb05 6502 	mla	r5, r5, r2, r6
 8016bc2:	b2ad      	uxth	r5, r5
 8016bc4:	1c6e      	adds	r6, r5, #1
 8016bc6:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8016bca:	122d      	asrs	r5, r5, #8
 8016bcc:	f801 5c02 	strb.w	r5, [r1, #-2]
 8016bd0:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8016bd4:	7d06      	ldrb	r6, [r0, #20]
 8016bd6:	fb15 f303 	smulbb	r3, r5, r3
 8016bda:	fb06 3202 	mla	r2, r6, r2, r3
 8016bde:	b292      	uxth	r2, r2
 8016be0:	1c53      	adds	r3, r2, #1
 8016be2:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8016be6:	1212      	asrs	r2, r2, #8
 8016be8:	f801 2c01 	strb.w	r2, [r1, #-1]
 8016bec:	e7cf      	b.n	8016b8e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 8016bee:	b2de      	uxtb	r6, r3
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d0ce      	beq.n	8016b92 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 8016bf4:	3103      	adds	r1, #3
 8016bf6:	4427      	add	r7, r4
 8016bf8:	f814 2b01 	ldrb.w	r2, [r4], #1
 8016bfc:	3103      	adds	r1, #3
 8016bfe:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8016c02:	fb02 f306 	mul.w	r3, r2, r6
 8016c06:	42bc      	cmp	r4, r7
 8016c08:	f103 0201 	add.w	r2, r3, #1
 8016c0c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8016c10:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016c14:	b295      	uxth	r5, r2
 8016c16:	ea6f 0202 	mvn.w	r2, r2
 8016c1a:	b2d3      	uxtb	r3, r2
 8016c1c:	7d82      	ldrb	r2, [r0, #22]
 8016c1e:	fb1c fc03 	smulbb	ip, ip, r3
 8016c22:	fb02 c205 	mla	r2, r2, r5, ip
 8016c26:	b292      	uxth	r2, r2
 8016c28:	f102 0c01 	add.w	ip, r2, #1
 8016c2c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8016c30:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 8016c34:	fb1c fc03 	smulbb	ip, ip, r3
 8016c38:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016c3c:	f801 2c06 	strb.w	r2, [r1, #-6]
 8016c40:	7d42      	ldrb	r2, [r0, #21]
 8016c42:	fb02 c205 	mla	r2, r2, r5, ip
 8016c46:	b292      	uxth	r2, r2
 8016c48:	f102 0c01 	add.w	ip, r2, #1
 8016c4c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8016c50:	ea4f 2222 	mov.w	r2, r2, asr #8
 8016c54:	f801 2c05 	strb.w	r2, [r1, #-5]
 8016c58:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8016c5c:	f890 c014 	ldrb.w	ip, [r0, #20]
 8016c60:	fb12 f303 	smulbb	r3, r2, r3
 8016c64:	fb0c 3305 	mla	r3, ip, r5, r3
 8016c68:	b29b      	uxth	r3, r3
 8016c6a:	f103 0201 	add.w	r2, r3, #1
 8016c6e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8016c72:	ea4f 2323 	mov.w	r3, r3, asr #8
 8016c76:	f801 3c04 	strb.w	r3, [r1, #-4]
 8016c7a:	d1bd      	bne.n	8016bf8 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 8016c7c:	e789      	b.n	8016b92 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

08016c7e <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8016c7e:	b510      	push	{r4, lr}
 8016c80:	7d04      	ldrb	r4, [r0, #20]
 8016c82:	700c      	strb	r4, [r1, #0]
 8016c84:	7d41      	ldrb	r1, [r0, #21]
 8016c86:	7011      	strb	r1, [r2, #0]
 8016c88:	7d82      	ldrb	r2, [r0, #22]
 8016c8a:	701a      	strb	r2, [r3, #0]
 8016c8c:	9b02      	ldr	r3, [sp, #8]
 8016c8e:	7dc2      	ldrb	r2, [r0, #23]
 8016c90:	2001      	movs	r0, #1
 8016c92:	701a      	strb	r2, [r3, #0]
 8016c94:	bd10      	pop	{r4, pc}

08016c96 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 8016c96:	b570      	push	{r4, r5, r6, lr}
 8016c98:	4616      	mov	r6, r2
 8016c9a:	4604      	mov	r4, r0
 8016c9c:	460d      	mov	r5, r1
 8016c9e:	f7f3 f9c9 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8016ca2:	6803      	ldr	r3, [r0, #0]
 8016ca4:	4629      	mov	r1, r5
 8016ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ca8:	4798      	blx	r3
 8016caa:	7520      	strb	r0, [r4, #20]
 8016cac:	f7f3 f9c2 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8016cb0:	6803      	ldr	r3, [r0, #0]
 8016cb2:	4629      	mov	r1, r5
 8016cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016cb6:	4798      	blx	r3
 8016cb8:	7560      	strb	r0, [r4, #21]
 8016cba:	f7f3 f9bb 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8016cbe:	6803      	ldr	r3, [r0, #0]
 8016cc0:	4629      	mov	r1, r5
 8016cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cc4:	4798      	blx	r3
 8016cc6:	75e6      	strb	r6, [r4, #23]
 8016cc8:	75a0      	strb	r0, [r4, #22]
 8016cca:	bd70      	pop	{r4, r5, r6, pc}

08016ccc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 8016ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cce:	460e      	mov	r6, r1
 8016cd0:	4617      	mov	r7, r2
 8016cd2:	4604      	mov	r4, r0
 8016cd4:	f000 f832 	bl	8016d3c <_ZN8touchgfx15AbstractPainterC1Ev>
 8016cd8:	4b12      	ldr	r3, [pc, #72]	; (8016d24 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 8016cda:	6023      	str	r3, [r4, #0]
 8016cdc:	f7f3 f9aa 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8016ce0:	6803      	ldr	r3, [r0, #0]
 8016ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ce4:	4798      	blx	r3
 8016ce6:	1e43      	subs	r3, r0, #1
 8016ce8:	425d      	negs	r5, r3
 8016cea:	415d      	adcs	r5, r3
 8016cec:	4b0e      	ldr	r3, [pc, #56]	; (8016d28 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8016cf2:	b130      	cbz	r0, 8016d02 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 8016cf4:	6803      	ldr	r3, [r0, #0]
 8016cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cf8:	4798      	blx	r3
 8016cfa:	2801      	cmp	r0, #1
 8016cfc:	bf08      	it	eq
 8016cfe:	f045 0501 	orreq.w	r5, r5, #1
 8016d02:	b92d      	cbnz	r5, 8016d10 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 8016d04:	4b09      	ldr	r3, [pc, #36]	; (8016d2c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 8016d06:	2129      	movs	r1, #41	; 0x29
 8016d08:	4a09      	ldr	r2, [pc, #36]	; (8016d30 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 8016d0a:	480a      	ldr	r0, [pc, #40]	; (8016d34 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 8016d0c:	f00d ffa4 	bl	8024c58 <__assert_func>
 8016d10:	4b09      	ldr	r3, [pc, #36]	; (8016d38 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 8016d12:	4620      	mov	r0, r4
 8016d14:	463a      	mov	r2, r7
 8016d16:	4631      	mov	r1, r6
 8016d18:	6023      	str	r3, [r4, #0]
 8016d1a:	f7ff ffbc 	bl	8016c96 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 8016d1e:	4620      	mov	r0, r4
 8016d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d22:	bf00      	nop
 8016d24:	08029b28 	.word	0x08029b28
 8016d28:	2000b2d4 	.word	0x2000b2d4
 8016d2c:	08029c78 	.word	0x08029c78
 8016d30:	08029d3c 	.word	0x08029d3c
 8016d34:	08029cd6 	.word	0x08029cd6
 8016d38:	08029d24 	.word	0x08029d24

08016d3c <_ZN8touchgfx15AbstractPainterC1Ev>:
 8016d3c:	4a03      	ldr	r2, [pc, #12]	; (8016d4c <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 8016d3e:	6002      	str	r2, [r0, #0]
 8016d40:	2200      	movs	r2, #0
 8016d42:	6042      	str	r2, [r0, #4]
 8016d44:	22ff      	movs	r2, #255	; 0xff
 8016d46:	7202      	strb	r2, [r0, #8]
 8016d48:	4770      	bx	lr
 8016d4a:	bf00      	nop
 8016d4c:	08029d80 	.word	0x08029d80

08016d50 <_ZN8touchgfx15AbstractPainterD1Ev>:
 8016d50:	4770      	bx	lr

08016d52 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 8016d52:	8081      	strh	r1, [r0, #4]
 8016d54:	80c2      	strh	r2, [r0, #6]
 8016d56:	4770      	bx	lr

08016d58 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 8016d58:	7201      	strb	r1, [r0, #8]
 8016d5a:	4770      	bx	lr

08016d5c <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 8016d5c:	6281      	str	r1, [r0, #40]	; 0x28
 8016d5e:	4770      	bx	lr

08016d60 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8016d60:	b513      	push	{r0, r1, r4, lr}
 8016d62:	6803      	ldr	r3, [r0, #0]
 8016d64:	4604      	mov	r4, r0
 8016d66:	4601      	mov	r1, r0
 8016d68:	4668      	mov	r0, sp
 8016d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d6c:	4798      	blx	r3
 8016d6e:	6823      	ldr	r3, [r4, #0]
 8016d70:	4669      	mov	r1, sp
 8016d72:	4620      	mov	r0, r4
 8016d74:	691b      	ldr	r3, [r3, #16]
 8016d76:	4798      	blx	r3
 8016d78:	b002      	add	sp, #8
 8016d7a:	bd10      	pop	{r4, pc}

08016d7c <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8016d7c:	b510      	push	{r4, lr}
 8016d7e:	2200      	movs	r2, #0
 8016d80:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8016d84:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8016d88:	8002      	strh	r2, [r0, #0]
 8016d8a:	8042      	strh	r2, [r0, #2]
 8016d8c:	8084      	strh	r4, [r0, #4]
 8016d8e:	80c1      	strh	r1, [r0, #6]
 8016d90:	bd10      	pop	{r4, pc}

08016d92 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8016d92:	2200      	movs	r2, #0
 8016d94:	8002      	strh	r2, [r0, #0]
 8016d96:	8042      	strh	r2, [r0, #2]
 8016d98:	8082      	strh	r2, [r0, #4]
 8016d9a:	80c2      	strh	r2, [r0, #6]
 8016d9c:	4770      	bx	lr
	...

08016da0 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8016da0:	b508      	push	{r3, lr}
 8016da2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016da4:	b928      	cbnz	r0, 8016db2 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8016da6:	4b03      	ldr	r3, [pc, #12]	; (8016db4 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8016da8:	2127      	movs	r1, #39	; 0x27
 8016daa:	4a03      	ldr	r2, [pc, #12]	; (8016db8 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 8016dac:	4803      	ldr	r0, [pc, #12]	; (8016dbc <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 8016dae:	f00d ff53 	bl	8024c58 <__assert_func>
 8016db2:	bd08      	pop	{r3, pc}
 8016db4:	08029d8c 	.word	0x08029d8c
 8016db8:	08029e70 	.word	0x08029e70
 8016dbc:	08029db3 	.word	0x08029db3

08016dc0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8016dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dc4:	b089      	sub	sp, #36	; 0x24
 8016dc6:	4604      	mov	r4, r0
 8016dc8:	6808      	ldr	r0, [r1, #0]
 8016dca:	f04f 0a00 	mov.w	sl, #0
 8016dce:	6849      	ldr	r1, [r1, #4]
 8016dd0:	ab02      	add	r3, sp, #8
 8016dd2:	f04f 0b01 	mov.w	fp, #1
 8016dd6:	c303      	stmia	r3!, {r0, r1}
 8016dd8:	4b3f      	ldr	r3, [pc, #252]	; (8016ed8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 8016dda:	4621      	mov	r1, r4
 8016ddc:	a804      	add	r0, sp, #16
 8016dde:	781b      	ldrb	r3, [r3, #0]
 8016de0:	2b01      	cmp	r3, #1
 8016de2:	6823      	ldr	r3, [r4, #0]
 8016de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016de6:	bf1f      	itttt	ne
 8016de8:	f10d 0906 	addne.w	r9, sp, #6
 8016dec:	ae03      	addne	r6, sp, #12
 8016dee:	f10d 050e 	addne.w	r5, sp, #14
 8016df2:	f10d 080a 	addne.w	r8, sp, #10
 8016df6:	bf01      	itttt	eq
 8016df8:	f10d 090e 	addeq.w	r9, sp, #14
 8016dfc:	f10d 0606 	addeq.w	r6, sp, #6
 8016e00:	ad03      	addeq	r5, sp, #12
 8016e02:	f10d 0808 	addeq.w	r8, sp, #8
 8016e06:	4798      	blx	r3
 8016e08:	f9b5 3000 	ldrsh.w	r3, [r5]
 8016e0c:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d056      	beq.n	8016ec2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 8016e14:	4293      	cmp	r3, r2
 8016e16:	bfa8      	it	ge
 8016e18:	4613      	movge	r3, r2
 8016e1a:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016e1e:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8016e22:	2f00      	cmp	r7, #0
 8016e24:	dd34      	ble.n	8016e90 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 8016e26:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8016e2a:	f8bd c014 	ldrh.w	ip, [sp, #20]
 8016e2e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8016e32:	4484      	add	ip, r0
 8016e34:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8016e38:	f9b6 e000 	ldrsh.w	lr, [r6]
 8016e3c:	fa0f fc8c 	sxth.w	ip, ip
 8016e40:	f9b9 1000 	ldrsh.w	r1, [r9]
 8016e44:	f8ad 2018 	strh.w	r2, [sp, #24]
 8016e48:	4562      	cmp	r2, ip
 8016e4a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016e4e:	f8ad e01c 	strh.w	lr, [sp, #28]
 8016e52:	f8ad 101e 	strh.w	r1, [sp, #30]
 8016e56:	da29      	bge.n	8016eac <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016e58:	4472      	add	r2, lr
 8016e5a:	b212      	sxth	r2, r2
 8016e5c:	4290      	cmp	r0, r2
 8016e5e:	da25      	bge.n	8016eac <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016e60:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8016e64:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016e68:	4402      	add	r2, r0
 8016e6a:	b212      	sxth	r2, r2
 8016e6c:	4293      	cmp	r3, r2
 8016e6e:	da1d      	bge.n	8016eac <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016e70:	440b      	add	r3, r1
 8016e72:	b21b      	sxth	r3, r3
 8016e74:	4298      	cmp	r0, r3
 8016e76:	da19      	bge.n	8016eac <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016e78:	6823      	ldr	r3, [r4, #0]
 8016e7a:	a906      	add	r1, sp, #24
 8016e7c:	4620      	mov	r0, r4
 8016e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016e80:	4798      	blx	r3
 8016e82:	b998      	cbnz	r0, 8016eac <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016e84:	107f      	asrs	r7, r7, #1
 8016e86:	f04f 0a01 	mov.w	sl, #1
 8016e8a:	f8ad 7006 	strh.w	r7, [sp, #6]
 8016e8e:	e7c6      	b.n	8016e1e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8016e90:	d10c      	bne.n	8016eac <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8016e92:	f8ad b006 	strh.w	fp, [sp, #6]
 8016e96:	f8b8 2000 	ldrh.w	r2, [r8]
 8016e9a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8016e9e:	440a      	add	r2, r1
 8016ea0:	f8a8 2000 	strh.w	r2, [r8]
 8016ea4:	882b      	ldrh	r3, [r5, #0]
 8016ea6:	1a5b      	subs	r3, r3, r1
 8016ea8:	802b      	strh	r3, [r5, #0]
 8016eaa:	e7ad      	b.n	8016e08 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016eac:	f1ba 0f00 	cmp.w	sl, #0
 8016eb0:	d0f1      	beq.n	8016e96 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8016eb2:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8016eb6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016eba:	429a      	cmp	r2, r3
 8016ebc:	bf08      	it	eq
 8016ebe:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8016ec0:	e7e9      	b.n	8016e96 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8016ec2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8016ec6:	429a      	cmp	r2, r3
 8016ec8:	bf04      	itt	eq
 8016eca:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 8016ece:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8016ed0:	b009      	add	sp, #36	; 0x24
 8016ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ed6:	bf00      	nop
 8016ed8:	2000b2cc 	.word	0x2000b2cc

08016edc <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8016edc:	2200      	movs	r2, #0
 8016ede:	2101      	movs	r1, #1
 8016ee0:	8082      	strh	r2, [r0, #4]
 8016ee2:	80c2      	strh	r2, [r0, #6]
 8016ee4:	8102      	strh	r2, [r0, #8]
 8016ee6:	8142      	strh	r2, [r0, #10]
 8016ee8:	8182      	strh	r2, [r0, #12]
 8016eea:	81c2      	strh	r2, [r0, #14]
 8016eec:	8202      	strh	r2, [r0, #16]
 8016eee:	8242      	strh	r2, [r0, #18]
 8016ef0:	61c2      	str	r2, [r0, #28]
 8016ef2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8016ef6:	6282      	str	r2, [r0, #40]	; 0x28
 8016ef8:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8016efc:	4905      	ldr	r1, [pc, #20]	; (8016f14 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 8016efe:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016f02:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016f06:	6001      	str	r1, [r0, #0]
 8016f08:	8582      	strh	r2, [r0, #44]	; 0x2c
 8016f0a:	22ff      	movs	r2, #255	; 0xff
 8016f0c:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8016f10:	4770      	bx	lr
 8016f12:	bf00      	nop
 8016f14:	08029df8 	.word	0x08029df8

08016f18 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 8016f18:	4770      	bx	lr

08016f1a <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8016f1a:	f101 0368 	add.w	r3, r1, #104	; 0x68
 8016f1e:	4602      	mov	r2, r0
 8016f20:	cb03      	ldmia	r3!, {r0, r1}
 8016f22:	6010      	str	r0, [r2, #0]
 8016f24:	4610      	mov	r0, r2
 8016f26:	6051      	str	r1, [r2, #4]
 8016f28:	4770      	bx	lr

08016f2a <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8016f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f2e:	f9b1 5004 	ldrsh.w	r5, [r1, #4]
 8016f32:	b395      	cbz	r5, 8016f9a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 8016f34:	f9b1 c006 	ldrsh.w	ip, [r1, #6]
 8016f38:	f1bc 0f00 	cmp.w	ip, #0
 8016f3c:	d02d      	beq.n	8016f9a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 8016f3e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8016f42:	f9b1 e000 	ldrsh.w	lr, [r1]
 8016f46:	b354      	cbz	r4, 8016f9e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 8016f48:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8016f4c:	b33f      	cbz	r7, 8016f9e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x74>
 8016f4e:	f9b0 8000 	ldrsh.w	r8, [r0]
 8016f52:	4475      	add	r5, lr
 8016f54:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8016f58:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016f5c:	45f0      	cmp	r8, lr
 8016f5e:	4646      	mov	r6, r8
 8016f60:	4444      	add	r4, r8
 8016f62:	bfa8      	it	ge
 8016f64:	4676      	movge	r6, lr
 8016f66:	4293      	cmp	r3, r2
 8016f68:	4619      	mov	r1, r3
 8016f6a:	443b      	add	r3, r7
 8016f6c:	bfa8      	it	ge
 8016f6e:	4611      	movge	r1, r2
 8016f70:	4462      	add	r2, ip
 8016f72:	b22d      	sxth	r5, r5
 8016f74:	8006      	strh	r6, [r0, #0]
 8016f76:	b224      	sxth	r4, r4
 8016f78:	8041      	strh	r1, [r0, #2]
 8016f7a:	b212      	sxth	r2, r2
 8016f7c:	b21b      	sxth	r3, r3
 8016f7e:	42a5      	cmp	r5, r4
 8016f80:	bfac      	ite	ge
 8016f82:	ebc6 0405 	rsbge	r4, r6, r5
 8016f86:	ebc6 0404 	rsblt	r4, r6, r4
 8016f8a:	429a      	cmp	r2, r3
 8016f8c:	bfac      	ite	ge
 8016f8e:	ebc1 0302 	rsbge	r3, r1, r2
 8016f92:	ebc1 0303 	rsblt	r3, r1, r3
 8016f96:	8084      	strh	r4, [r0, #4]
 8016f98:	80c3      	strh	r3, [r0, #6]
 8016f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f9e:	f8a0 e000 	strh.w	lr, [r0]
 8016fa2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016fa6:	8043      	strh	r3, [r0, #2]
 8016fa8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8016fac:	8083      	strh	r3, [r0, #4]
 8016fae:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8016fb2:	e7f1      	b.n	8016f98 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6e>

08016fb4 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8016fb4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8016fb8:	f04f 0300 	mov.w	r3, #0
 8016fbc:	bf2c      	ite	cs
 8016fbe:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 8016fc2:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 8016fc6:	1899      	adds	r1, r3, r2
 8016fc8:	4288      	cmp	r0, r1
 8016fca:	bf24      	itt	cs
 8016fcc:	1853      	addcs	r3, r2, r1
 8016fce:	1a40      	subcs	r0, r0, r1
 8016fd0:	0892      	lsrs	r2, r2, #2
 8016fd2:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8016fd6:	d1f6      	bne.n	8016fc6 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 8016fd8:	4618      	mov	r0, r3
 8016fda:	4770      	bx	lr

08016fdc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8016fdc:	2800      	cmp	r0, #0
 8016fde:	b508      	push	{r3, lr}
 8016fe0:	da05      	bge.n	8016fee <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 8016fe2:	4240      	negs	r0, r0
 8016fe4:	f7ff fffa 	bl	8016fdc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016fe8:	4240      	negs	r0, r0
 8016fea:	b240      	sxtb	r0, r0
 8016fec:	bd08      	pop	{r3, pc}
 8016fee:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016ff2:	dc11      	bgt.n	8017018 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 8016ff4:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8016ff8:	dd09      	ble.n	801700e <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8016ffa:	4340      	muls	r0, r0
 8016ffc:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8017000:	f7ff ffd8 	bl	8016fb4 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8017004:	f7ff ffea 	bl	8016fdc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8017008:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801700c:	e7ed      	b.n	8016fea <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 801700e:	3003      	adds	r0, #3
 8017010:	4b02      	ldr	r3, [pc, #8]	; (801701c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 8017012:	10c0      	asrs	r0, r0, #3
 8017014:	5618      	ldrsb	r0, [r3, r0]
 8017016:	e7e9      	b.n	8016fec <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8017018:	2000      	movs	r0, #0
 801701a:	e7e7      	b.n	8016fec <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 801701c:	08029ebe 	.word	0x08029ebe

08017020 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8017020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017022:	460c      	mov	r4, r1
 8017024:	1e01      	subs	r1, r0, #0
 8017026:	4615      	mov	r5, r2
 8017028:	db01      	blt.n	801702e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0xe>
 801702a:	2c00      	cmp	r4, #0
 801702c:	da06      	bge.n	801703c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1c>
 801702e:	4b11      	ldr	r3, [pc, #68]	; (8017074 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x54>)
 8017030:	f240 3197 	movw	r1, #919	; 0x397
 8017034:	4a10      	ldr	r2, [pc, #64]	; (8017078 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x58>)
 8017036:	4811      	ldr	r0, [pc, #68]	; (801707c <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x5c>)
 8017038:	f00d fe0e 	bl	8024c58 <__assert_func>
 801703c:	428c      	cmp	r4, r1
 801703e:	dd06      	ble.n	801704e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2e>
 8017040:	4620      	mov	r0, r4
 8017042:	f7ff ffed 	bl	8017020 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017046:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801704a:	b003      	add	sp, #12
 801704c:	bd30      	pop	{r4, r5, pc}
 801704e:	4349      	muls	r1, r1
 8017050:	fb04 1004 	mla	r0, r4, r4, r1
 8017054:	f7ff ffae 	bl	8016fb4 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8017058:	6028      	str	r0, [r5, #0]
 801705a:	2800      	cmp	r0, #0
 801705c:	d0f5      	beq.n	801704a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 801705e:	4602      	mov	r2, r0
 8017060:	ab01      	add	r3, sp, #4
 8017062:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017066:	4620      	mov	r0, r4
 8017068:	f002 fc53 	bl	8019912 <_ZN8touchgfx6muldivElllRl>
 801706c:	f7ff ffb6 	bl	8016fdc <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8017070:	e7eb      	b.n	801704a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x2a>
 8017072:	bf00      	nop
 8017074:	08029f19 	.word	0x08029f19
 8017078:	08029fe0 	.word	0x08029fe0
 801707c:	08029f2a 	.word	0x08029f2a

08017080 <_ZN8touchgfx4LineC1Ev>:
 8017080:	b510      	push	{r4, lr}
 8017082:	4604      	mov	r4, r0
 8017084:	f7ff ff2a 	bl	8016edc <_ZN8touchgfx12CanvasWidgetC1Ev>
 8017088:	4b0c      	ldr	r3, [pc, #48]	; (80170bc <_ZN8touchgfx4LineC1Ev+0x3c>)
 801708a:	2220      	movs	r2, #32
 801708c:	4620      	mov	r0, r4
 801708e:	6023      	str	r3, [r4, #0]
 8017090:	2300      	movs	r3, #0
 8017092:	6422      	str	r2, [r4, #64]	; 0x40
 8017094:	2212      	movs	r2, #18
 8017096:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801709a:	6722      	str	r2, [r4, #112]	; 0x70
 801709c:	60a3      	str	r3, [r4, #8]
 801709e:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 80170a2:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 80170a6:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80170aa:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 80170ae:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
 80170b2:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 80170b6:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 80170ba:	bd10      	pop	{r4, pc}
 80170bc:	08029f68 	.word	0x08029f68

080170c0 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 80170c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170c4:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80170c6:	b085      	sub	sp, #20
 80170c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80170ca:	4604      	mov	r4, r0
 80170cc:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80170ce:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80170d0:	1af6      	subs	r6, r6, r3
 80170d2:	eba5 0502 	sub.w	r5, r5, r2
 80170d6:	f040 809b 	bne.w	8017210 <_ZN8touchgfx4Line17updateCachedShapeEv+0x150>
 80170da:	b955      	cbnz	r5, 80170f2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x32>
 80170dc:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 80170e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80170e4:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 80170e8:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 80170ec:	b005      	add	sp, #20
 80170ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170f2:	ea85 77e5 	eor.w	r7, r5, r5, asr #31
 80170f6:	eba7 77e5 	sub.w	r7, r7, r5, asr #31
 80170fa:	f04f 0802 	mov.w	r8, #2
 80170fe:	463a      	mov	r2, r7
 8017100:	4629      	mov	r1, r5
 8017102:	ab03      	add	r3, sp, #12
 8017104:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8017106:	f002 fc04 	bl	8019912 <_ZN8touchgfx6muldivElllRl>
 801710a:	ab03      	add	r3, sp, #12
 801710c:	463a      	mov	r2, r7
 801710e:	4631      	mov	r1, r6
 8017110:	fb90 f5f8 	sdiv	r5, r0, r8
 8017114:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8017116:	f002 fbfc 	bl	8019912 <_ZN8touchgfx6muldivElllRl>
 801711a:	f894 a044 	ldrb.w	sl, [r4, #68]	; 0x44
 801711e:	f8d4 e038 	ldr.w	lr, [r4, #56]	; 0x38
 8017122:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
 8017126:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8017128:	fb90 f0f8 	sdiv	r0, r0, r8
 801712c:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8017130:	eba8 0305 	sub.w	r3, r8, r5
 8017134:	f1ba 0f00 	cmp.w	sl, #0
 8017138:	f040 80c3 	bne.w	80172c2 <_ZN8touchgfx4Line17updateCachedShapeEv+0x202>
 801713c:	64a3      	str	r3, [r4, #72]	; 0x48
 801713e:	19c3      	adds	r3, r0, r7
 8017140:	65a3      	str	r3, [r4, #88]	; 0x58
 8017142:	ebae 0305 	sub.w	r3, lr, r5
 8017146:	64e3      	str	r3, [r4, #76]	; 0x4c
 8017148:	eb00 030c 	add.w	r3, r0, ip
 801714c:	65e3      	str	r3, [r4, #92]	; 0x5c
 801714e:	eb05 030e 	add.w	r3, r5, lr
 8017152:	6523      	str	r3, [r4, #80]	; 0x50
 8017154:	ebac 0300 	sub.w	r3, ip, r0
 8017158:	6623      	str	r3, [r4, #96]	; 0x60
 801715a:	eb05 0308 	add.w	r3, r5, r8
 801715e:	6563      	str	r3, [r4, #84]	; 0x54
 8017160:	1a3b      	subs	r3, r7, r0
 8017162:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8017164:	f104 094c 	add.w	r9, r4, #76	; 0x4c
 8017168:	6663      	str	r3, [r4, #100]	; 0x64
 801716a:	f104 0358 	add.w	r3, r4, #88	; 0x58
 801716e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017170:	4632      	mov	r2, r6
 8017172:	9301      	str	r3, [sp, #4]
 8017174:	9100      	str	r1, [sp, #0]
 8017176:	f859 bb04 	ldr.w	fp, [r9], #4
 801717a:	9b00      	ldr	r3, [sp, #0]
 801717c:	455e      	cmp	r6, fp
 801717e:	bfa8      	it	ge
 8017180:	465e      	movge	r6, fp
 8017182:	455a      	cmp	r2, fp
 8017184:	bfb8      	it	lt
 8017186:	465a      	movlt	r2, fp
 8017188:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 801718c:	4559      	cmp	r1, fp
 801718e:	bfa8      	it	ge
 8017190:	4659      	movge	r1, fp
 8017192:	455b      	cmp	r3, fp
 8017194:	bfb8      	it	lt
 8017196:	465b      	movlt	r3, fp
 8017198:	9300      	str	r3, [sp, #0]
 801719a:	9b01      	ldr	r3, [sp, #4]
 801719c:	454b      	cmp	r3, r9
 801719e:	d1ea      	bne.n	8017176 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb6>
 80171a0:	f04f 0b20 	mov.w	fp, #32
 80171a4:	b209      	sxth	r1, r1
 80171a6:	b212      	sxth	r2, r2
 80171a8:	f1ba 0f01 	cmp.w	sl, #1
 80171ac:	b236      	sxth	r6, r6
 80171ae:	fb91 f9fb 	sdiv	r9, r1, fp
 80171b2:	f9bd 1000 	ldrsh.w	r1, [sp]
 80171b6:	f8a4 906a 	strh.w	r9, [r4, #106]	; 0x6a
 80171ba:	fb92 f2fb 	sdiv	r2, r2, fp
 80171be:	fb91 f1fb 	sdiv	r1, r1, fp
 80171c2:	fb96 f6fb 	sdiv	r6, r6, fp
 80171c6:	f102 0201 	add.w	r2, r2, #1
 80171ca:	f101 0101 	add.w	r1, r1, #1
 80171ce:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
 80171d2:	eba1 0109 	sub.w	r1, r1, r9
 80171d6:	eba2 0606 	sub.w	r6, r2, r6
 80171da:	f8a4 106e 	strh.w	r1, [r4, #110]	; 0x6e
 80171de:	f8a4 606c 	strh.w	r6, [r4, #108]	; 0x6c
 80171e2:	d183      	bne.n	80170ec <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 80171e4:	eba8 0305 	sub.w	r3, r8, r5
 80171e8:	64a3      	str	r3, [r4, #72]	; 0x48
 80171ea:	19c3      	adds	r3, r0, r7
 80171ec:	65a3      	str	r3, [r4, #88]	; 0x58
 80171ee:	ebae 0305 	sub.w	r3, lr, r5
 80171f2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80171f4:	eb00 030c 	add.w	r3, r0, ip
 80171f8:	65e3      	str	r3, [r4, #92]	; 0x5c
 80171fa:	eb05 030e 	add.w	r3, r5, lr
 80171fe:	4445      	add	r5, r8
 8017200:	6523      	str	r3, [r4, #80]	; 0x50
 8017202:	ebac 0300 	sub.w	r3, ip, r0
 8017206:	1a38      	subs	r0, r7, r0
 8017208:	6565      	str	r5, [r4, #84]	; 0x54
 801720a:	6623      	str	r3, [r4, #96]	; 0x60
 801720c:	6660      	str	r0, [r4, #100]	; 0x64
 801720e:	e76d      	b.n	80170ec <_ZN8touchgfx4Line17updateCachedShapeEv+0x2c>
 8017210:	ea86 77e6 	eor.w	r7, r6, r6, asr #31
 8017214:	eba7 77e6 	sub.w	r7, r7, r6, asr #31
 8017218:	2d00      	cmp	r5, #0
 801721a:	f43f af6e 	beq.w	80170fa <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 801721e:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8017222:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8017226:	fb93 f2f7 	sdiv	r2, r3, r7
 801722a:	fb07 3312 	mls	r3, r7, r2, r3
 801722e:	b34b      	cbz	r3, 8017284 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c4>
 8017230:	fb97 f2f3 	sdiv	r2, r7, r3
 8017234:	fb03 7712 	mls	r7, r3, r2, r7
 8017238:	2f00      	cmp	r7, #0
 801723a:	d1f4      	bne.n	8017226 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 801723c:	2b01      	cmp	r3, #1
 801723e:	f24b 5204 	movw	r2, #46340	; 0xb504
 8017242:	bf18      	it	ne
 8017244:	fb96 f6f3 	sdivne	r6, r6, r3
 8017248:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
 801724c:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
 8017250:	bf18      	it	ne
 8017252:	fb95 f5f3 	sdivne	r5, r5, r3
 8017256:	4291      	cmp	r1, r2
 8017258:	dd16      	ble.n	8017288 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1c8>
 801725a:	2d00      	cmp	r5, #0
 801725c:	da4d      	bge.n	80172fa <_ZN8touchgfx4Line17updateCachedShapeEv+0x23a>
 801725e:	4b29      	ldr	r3, [pc, #164]	; (8017304 <_ZN8touchgfx4Line17updateCachedShapeEv+0x244>)
 8017260:	429d      	cmp	r5, r3
 8017262:	da27      	bge.n	80172b4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f4>
 8017264:	426a      	negs	r2, r5
 8017266:	f24b 5304 	movw	r3, #46340	; 0xb504
 801726a:	fb91 f1f3 	sdiv	r1, r1, r3
 801726e:	fb92 f3f3 	sdiv	r3, r2, r3
 8017272:	4299      	cmp	r1, r3
 8017274:	bfcc      	ite	gt
 8017276:	1c4b      	addgt	r3, r1, #1
 8017278:	3301      	addle	r3, #1
 801727a:	fb96 f6f3 	sdiv	r6, r6, r3
 801727e:	fb95 f5f3 	sdiv	r5, r5, r3
 8017282:	e00f      	b.n	80172a4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1e4>
 8017284:	463b      	mov	r3, r7
 8017286:	e7d9      	b.n	801723c <_ZN8touchgfx4Line17updateCachedShapeEv+0x17c>
 8017288:	2d00      	cmp	r5, #0
 801728a:	fb92 f2f1 	sdiv	r2, r2, r1
 801728e:	da13      	bge.n	80172b8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1f8>
 8017290:	4269      	negs	r1, r5
 8017292:	f24b 5304 	movw	r3, #46340	; 0xb504
 8017296:	fb93 f3f1 	sdiv	r3, r3, r1
 801729a:	429a      	cmp	r2, r3
 801729c:	bfa8      	it	ge
 801729e:	461a      	movge	r2, r3
 80172a0:	4356      	muls	r6, r2
 80172a2:	4355      	muls	r5, r2
 80172a4:	fb05 f005 	mul.w	r0, r5, r5
 80172a8:	fb06 0006 	mla	r0, r6, r6, r0
 80172ac:	f7ff fe82 	bl	8016fb4 <_ZN8touchgfx7CWRUtil5isqrtEm>
 80172b0:	4607      	mov	r7, r0
 80172b2:	e722      	b.n	80170fa <_ZN8touchgfx4Line17updateCachedShapeEv+0x3a>
 80172b4:	2200      	movs	r2, #0
 80172b6:	e7eb      	b.n	8017290 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d0>
 80172b8:	4629      	mov	r1, r5
 80172ba:	e7ea      	b.n	8017292 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 80172bc:	4629      	mov	r1, r5
 80172be:	2200      	movs	r2, #0
 80172c0:	e7e7      	b.n	8017292 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1d2>
 80172c2:	1a1b      	subs	r3, r3, r0
 80172c4:	64a3      	str	r3, [r4, #72]	; 0x48
 80172c6:	19c3      	adds	r3, r0, r7
 80172c8:	1b5b      	subs	r3, r3, r5
 80172ca:	65a3      	str	r3, [r4, #88]	; 0x58
 80172cc:	ebae 0305 	sub.w	r3, lr, r5
 80172d0:	4403      	add	r3, r0
 80172d2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80172d4:	eb00 030c 	add.w	r3, r0, ip
 80172d8:	442b      	add	r3, r5
 80172da:	65e3      	str	r3, [r4, #92]	; 0x5c
 80172dc:	eb05 030e 	add.w	r3, r5, lr
 80172e0:	4403      	add	r3, r0
 80172e2:	6523      	str	r3, [r4, #80]	; 0x50
 80172e4:	ebac 0300 	sub.w	r3, ip, r0
 80172e8:	442b      	add	r3, r5
 80172ea:	6623      	str	r3, [r4, #96]	; 0x60
 80172ec:	eb05 0308 	add.w	r3, r5, r8
 80172f0:	1a1b      	subs	r3, r3, r0
 80172f2:	6563      	str	r3, [r4, #84]	; 0x54
 80172f4:	1a3b      	subs	r3, r7, r0
 80172f6:	1b5b      	subs	r3, r3, r5
 80172f8:	e733      	b.n	8017162 <_ZN8touchgfx4Line17updateCachedShapeEv+0xa2>
 80172fa:	4295      	cmp	r5, r2
 80172fc:	ddde      	ble.n	80172bc <_ZN8touchgfx4Line17updateCachedShapeEv+0x1fc>
 80172fe:	462a      	mov	r2, r5
 8017300:	e7b1      	b.n	8017266 <_ZN8touchgfx4Line17updateCachedShapeEv+0x1a6>
 8017302:	bf00      	nop
 8017304:	ffff4afc 	.word	0xffff4afc

08017308 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8017308:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801730a:	428b      	cmp	r3, r1
 801730c:	d102      	bne.n	8017314 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 801730e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017310:	4293      	cmp	r3, r2
 8017312:	d003      	beq.n	801731c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8017314:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
 8017318:	f7ff bed2 	b.w	80170c0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801731c:	4770      	bx	lr

0801731e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 801731e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8017320:	428b      	cmp	r3, r1
 8017322:	d102      	bne.n	801732a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8017324:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8017326:	4293      	cmp	r3, r2
 8017328:	d003      	beq.n	8017332 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 801732a:	e9c0 120e 	strd	r1, r2, [r0, #56]	; 0x38
 801732e:	f7ff bec7 	b.w	80170c0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8017332:	4770      	bx	lr

08017334 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8017334:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
 8017338:	f7ff bec2 	b.w	80170c0 <_ZN8touchgfx4Line17updateCachedShapeEv>

0801733c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 801733c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017340:	b0b3      	sub	sp, #204	; 0xcc
 8017342:	4604      	mov	r4, r0
 8017344:	460a      	mov	r2, r1
 8017346:	4601      	mov	r1, r0
 8017348:	a804      	add	r0, sp, #16
 801734a:	ad32      	add	r5, sp, #200	; 0xc8
 801734c:	f00c f8b8 	bl	80234c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8017350:	2300      	movs	r3, #0
 8017352:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8017354:	f845 3dc4 	str.w	r3, [r5, #-196]!
 8017358:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801735a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801735c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801735e:	1ac0      	subs	r0, r0, r3
 8017360:	eba1 0102 	sub.w	r1, r1, r2
 8017364:	d43c      	bmi.n	80173e0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xa4>
 8017366:	2900      	cmp	r1, #0
 8017368:	462a      	mov	r2, r5
 801736a:	db33      	blt.n	80173d4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x98>
 801736c:	f7ff fe58 	bl	8017020 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017370:	f100 075a 	add.w	r7, r0, #90	; 0x5a
 8017374:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8017376:	a804      	add	r0, sp, #16
 8017378:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801737a:	f00c fa6a 	bl	8023852 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801737e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8017380:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8017382:	a804      	add	r0, sp, #16
 8017384:	f00c f9f4 	bl	8023770 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017388:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801738c:	2b01      	cmp	r3, #1
 801738e:	d137      	bne.n	8017400 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8017390:	6f26      	ldr	r6, [r4, #112]	; 0x70
 8017392:	2eb3      	cmp	r6, #179	; 0xb3
 8017394:	dc34      	bgt.n	8017400 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xc4>
 8017396:	eba7 0906 	sub.w	r9, r7, r6
 801739a:	4648      	mov	r0, r9
 801739c:	f7ff f802 	bl	80163a4 <_ZN8touchgfx7CWRUtil4sineEi>
 80173a0:	a902      	add	r1, sp, #8
 80173a2:	9002      	str	r0, [sp, #8]
 80173a4:	4628      	mov	r0, r5
 80173a6:	f7fe fff1 	bl	801638c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80173aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80173ac:	eb00 0801 	add.w	r8, r0, r1
 80173b0:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 80173b4:	f7fe fff6 	bl	80163a4 <_ZN8touchgfx7CWRUtil4sineEi>
 80173b8:	a903      	add	r1, sp, #12
 80173ba:	9003      	str	r0, [sp, #12]
 80173bc:	4628      	mov	r0, r5
 80173be:	f7fe ffe5 	bl	801638c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80173c2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80173c4:	4641      	mov	r1, r8
 80173c6:	1a12      	subs	r2, r2, r0
 80173c8:	a804      	add	r0, sp, #16
 80173ca:	f00c f9d1 	bl	8023770 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80173ce:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80173d0:	441e      	add	r6, r3
 80173d2:	e7de      	b.n	8017392 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x56>
 80173d4:	4249      	negs	r1, r1
 80173d6:	f7ff fe23 	bl	8017020 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80173da:	f1c0 075a 	rsb	r7, r0, #90	; 0x5a
 80173de:	e7c9      	b.n	8017374 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 80173e0:	2900      	cmp	r1, #0
 80173e2:	f1c0 0000 	rsb	r0, r0, #0
 80173e6:	462a      	mov	r2, r5
 80173e8:	db04      	blt.n	80173f4 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb8>
 80173ea:	f7ff fe19 	bl	8017020 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80173ee:	f5c0 7787 	rsb	r7, r0, #270	; 0x10e
 80173f2:	e7bf      	b.n	8017374 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 80173f4:	4249      	negs	r1, r1
 80173f6:	f7ff fe13 	bl	8017020 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80173fa:	f500 7787 	add.w	r7, r0, #270	; 0x10e
 80173fe:	e7b9      	b.n	8017374 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x38>
 8017400:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8017402:	a804      	add	r0, sp, #16
 8017404:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8017406:	f00c f9b3 	bl	8023770 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801740a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801740c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801740e:	a804      	add	r0, sp, #16
 8017410:	f00c f9ae 	bl	8023770 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017414:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017418:	2b01      	cmp	r3, #1
 801741a:	d123      	bne.n	8017464 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 801741c:	6f26      	ldr	r6, [r4, #112]	; 0x70
 801741e:	f1c6 06b4 	rsb	r6, r6, #180	; 0xb4
 8017422:	2e00      	cmp	r6, #0
 8017424:	dd1e      	ble.n	8017464 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x128>
 8017426:	eb06 0907 	add.w	r9, r6, r7
 801742a:	4648      	mov	r0, r9
 801742c:	f7fe ffba 	bl	80163a4 <_ZN8touchgfx7CWRUtil4sineEi>
 8017430:	a902      	add	r1, sp, #8
 8017432:	9002      	str	r0, [sp, #8]
 8017434:	4628      	mov	r0, r5
 8017436:	f7fe ffa9 	bl	801638c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801743a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801743c:	eb00 0801 	add.w	r8, r0, r1
 8017440:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
 8017444:	f7fe ffae 	bl	80163a4 <_ZN8touchgfx7CWRUtil4sineEi>
 8017448:	a903      	add	r1, sp, #12
 801744a:	9003      	str	r0, [sp, #12]
 801744c:	4628      	mov	r0, r5
 801744e:	f7fe ff9d 	bl	801638c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017452:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017454:	4641      	mov	r1, r8
 8017456:	1a12      	subs	r2, r2, r0
 8017458:	a804      	add	r0, sp, #16
 801745a:	f00c f989 	bl	8023770 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801745e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017460:	1af6      	subs	r6, r6, r3
 8017462:	e7de      	b.n	8017422 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xe6>
 8017464:	a804      	add	r0, sp, #16
 8017466:	f00c faf8 	bl	8023a5a <_ZN8touchgfx6Canvas6renderEv>
 801746a:	4604      	mov	r4, r0
 801746c:	a804      	add	r0, sp, #16
 801746e:	f00c fb35 	bl	8023adc <_ZN8touchgfx6CanvasD1Ev>
 8017472:	4620      	mov	r0, r4
 8017474:	b033      	add	sp, #204	; 0xcc
 8017476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801747a <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 801747a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801747e:	4770      	bx	lr

08017480 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8017480:	b570      	push	{r4, r5, r6, lr}
 8017482:	790b      	ldrb	r3, [r1, #4]
 8017484:	4604      	mov	r4, r0
 8017486:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801748a:	460e      	mov	r6, r1
 801748c:	2b00      	cmp	r3, #0
 801748e:	bf0c      	ite	eq
 8017490:	2301      	moveq	r3, #1
 8017492:	2300      	movne	r3, #0
 8017494:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8017498:	d110      	bne.n	80174bc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801749a:	b185      	cbz	r5, 80174be <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 801749c:	7933      	ldrb	r3, [r6, #4]
 801749e:	2b01      	cmp	r3, #1
 80174a0:	d113      	bne.n	80174ca <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 80174a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80174a4:	b188      	cbz	r0, 80174ca <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 80174a6:	6803      	ldr	r3, [r0, #0]
 80174a8:	68db      	ldr	r3, [r3, #12]
 80174aa:	4798      	blx	r3
 80174ac:	b168      	cbz	r0, 80174ca <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 80174ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80174b0:	4621      	mov	r1, r4
 80174b2:	6803      	ldr	r3, [r0, #0]
 80174b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80174b8:	689b      	ldr	r3, [r3, #8]
 80174ba:	4718      	bx	r3
 80174bc:	b12d      	cbz	r5, 80174ca <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 80174be:	6823      	ldr	r3, [r4, #0]
 80174c0:	4620      	mov	r0, r4
 80174c2:	695b      	ldr	r3, [r3, #20]
 80174c4:	4798      	blx	r3
 80174c6:	2d00      	cmp	r5, #0
 80174c8:	d1e8      	bne.n	801749c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80174ca:	bd70      	pop	{r4, r5, r6, pc}

080174cc <_ZN8touchgfx14SnapshotWidgetD1Ev>:
 80174cc:	4770      	bx	lr

080174ce <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:
 80174ce:	6803      	ldr	r3, [r0, #0]
 80174d0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80174d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80174d6:	4718      	bx	r3

080174d8 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
 80174d8:	b510      	push	{r4, lr}
 80174da:	4604      	mov	r4, r0
 80174dc:	212c      	movs	r1, #44	; 0x2c
 80174de:	f00d fb90 	bl	8024c02 <_ZdlPvj>
 80174e2:	4620      	mov	r0, r4
 80174e4:	bd10      	pop	{r4, pc}

080174e6 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:
 80174e6:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80174ea:	2bff      	cmp	r3, #255	; 0xff
 80174ec:	b510      	push	{r4, lr}
 80174ee:	d104      	bne.n	80174fa <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x14>
 80174f0:	8cca      	ldrh	r2, [r1, #38]	; 0x26
 80174f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80174f6:	429a      	cmp	r2, r3
 80174f8:	d105      	bne.n	8017506 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x20>
 80174fa:	2300      	movs	r3, #0
 80174fc:	8003      	strh	r3, [r0, #0]
 80174fe:	8043      	strh	r3, [r0, #2]
 8017500:	8083      	strh	r3, [r0, #4]
 8017502:	80c3      	strh	r3, [r0, #6]
 8017504:	bd10      	pop	{r4, pc}
 8017506:	2300      	movs	r3, #0
 8017508:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801750c:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8017510:	8003      	strh	r3, [r0, #0]
 8017512:	8043      	strh	r3, [r0, #2]
 8017514:	8084      	strh	r4, [r0, #4]
 8017516:	80c2      	strh	r2, [r0, #6]
 8017518:	e7f4      	b.n	8017504 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x1e>

0801751a <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:
 801751a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801751e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8017522:	b087      	sub	sp, #28
 8017524:	4604      	mov	r4, r0
 8017526:	4689      	mov	r9, r1
 8017528:	b363      	cbz	r3, 8017584 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 801752a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801752c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017530:	429a      	cmp	r2, r3
 8017532:	d027      	beq.n	8017584 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x6a>
 8017534:	ad06      	add	r5, sp, #24
 8017536:	2700      	movs	r7, #0
 8017538:	f825 2d0c 	strh.w	r2, [r5, #-12]!
 801753c:	4628      	mov	r0, r5
 801753e:	f003 fe39 	bl	801b1b4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017542:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017546:	a904      	add	r1, sp, #16
 8017548:	f8ad 0014 	strh.w	r0, [sp, #20]
 801754c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017550:	4620      	mov	r0, r4
 8017552:	6823      	ldr	r3, [r4, #0]
 8017554:	9704      	str	r7, [sp, #16]
 8017556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017558:	4798      	blx	r3
 801755a:	f7f2 fd6b 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 801755e:	6803      	ldr	r3, [r0, #0]
 8017560:	4606      	mov	r6, r0
 8017562:	4628      	mov	r0, r5
 8017564:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8017568:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801756a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801756e:	f003 ff29 	bl	801b3c4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8017572:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8017576:	4601      	mov	r1, r0
 8017578:	9701      	str	r7, [sp, #4]
 801757a:	aa04      	add	r2, sp, #16
 801757c:	9300      	str	r3, [sp, #0]
 801757e:	4630      	mov	r0, r6
 8017580:	464b      	mov	r3, r9
 8017582:	47c0      	blx	r8
 8017584:	b007      	add	sp, #28
 8017586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801758a <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:
 801758a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801758c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017590:	460d      	mov	r5, r1
 8017592:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8017596:	2100      	movs	r1, #0
 8017598:	f8ad 3006 	strh.w	r3, [sp, #6]
 801759c:	4604      	mov	r4, r0
 801759e:	6803      	ldr	r3, [r0, #0]
 80175a0:	f8ad 2004 	strh.w	r2, [sp, #4]
 80175a4:	6a1b      	ldr	r3, [r3, #32]
 80175a6:	9100      	str	r1, [sp, #0]
 80175a8:	4669      	mov	r1, sp
 80175aa:	4798      	blx	r3
 80175ac:	4621      	mov	r1, r4
 80175ae:	a802      	add	r0, sp, #8
 80175b0:	f002 f915 	bl	80197de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80175b4:	f7f2 fd3e 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 80175b8:	6803      	ldr	r3, [r0, #0]
 80175ba:	aa02      	add	r2, sp, #8
 80175bc:	4669      	mov	r1, sp
 80175be:	699e      	ldr	r6, [r3, #24]
 80175c0:	462b      	mov	r3, r5
 80175c2:	47b0      	blx	r6
 80175c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80175c8:	2800      	cmp	r0, #0
 80175ca:	bf08      	it	eq
 80175cc:	461d      	moveq	r5, r3
 80175ce:	84e5      	strh	r5, [r4, #38]	; 0x26
 80175d0:	b004      	add	sp, #16
 80175d2:	bd70      	pop	{r4, r5, r6, pc}

080175d4 <_ZN8touchgfx14SnapshotWidgetC1Ev>:
 80175d4:	2200      	movs	r2, #0
 80175d6:	8082      	strh	r2, [r0, #4]
 80175d8:	80c2      	strh	r2, [r0, #6]
 80175da:	8102      	strh	r2, [r0, #8]
 80175dc:	8142      	strh	r2, [r0, #10]
 80175de:	8182      	strh	r2, [r0, #12]
 80175e0:	81c2      	strh	r2, [r0, #14]
 80175e2:	8202      	strh	r2, [r0, #16]
 80175e4:	8242      	strh	r2, [r0, #18]
 80175e6:	61c2      	str	r2, [r0, #28]
 80175e8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80175ec:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80175f0:	2201      	movs	r2, #1
 80175f2:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
 80175f6:	4a04      	ldr	r2, [pc, #16]	; (8017608 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x34>)
 80175f8:	6002      	str	r2, [r0, #0]
 80175fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80175fe:	84c2      	strh	r2, [r0, #38]	; 0x26
 8017600:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8017604:	4770      	bx	lr
 8017606:	bf00      	nop
 8017608:	0802a0c0 	.word	0x0802a0c0

0801760c <_ZN8touchgfx8TextArea13getTextHeightEv>:
 801760c:	b570      	push	{r4, r5, r6, lr}
 801760e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017612:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017614:	4604      	mov	r4, r0
 8017616:	429a      	cmp	r2, r3
 8017618:	d00c      	beq.n	8017634 <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 801761a:	f850 3b26 	ldr.w	r3, [r0], #38
 801761e:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8017620:	f7f5 fb22 	bl	800cc68 <_ZNK8touchgfx9TypedText7getTextEv>
 8017624:	2300      	movs	r3, #0
 8017626:	4601      	mov	r1, r0
 8017628:	46ac      	mov	ip, r5
 801762a:	4620      	mov	r0, r4
 801762c:	461a      	mov	r2, r3
 801762e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017632:	4760      	bx	ip
 8017634:	2000      	movs	r0, #0
 8017636:	bd70      	pop	{r4, r5, r6, pc}

08017638 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8017638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801763a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801763e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017640:	429a      	cmp	r2, r3
 8017642:	d016      	beq.n	8017672 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 8017644:	f100 0426 	add.w	r4, r0, #38	; 0x26
 8017648:	4620      	mov	r0, r4
 801764a:	f7f2 f94f 	bl	80098ec <_ZNK8touchgfx9TypedText7getFontEv>
 801764e:	6803      	ldr	r3, [r0, #0]
 8017650:	4605      	mov	r5, r0
 8017652:	4620      	mov	r0, r4
 8017654:	69de      	ldr	r6, [r3, #28]
 8017656:	f7f2 f965 	bl	8009924 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801765a:	4607      	mov	r7, r0
 801765c:	4620      	mov	r0, r4
 801765e:	f7f5 fb03 	bl	800cc68 <_ZNK8touchgfx9TypedText7getTextEv>
 8017662:	2300      	movs	r3, #0
 8017664:	4602      	mov	r2, r0
 8017666:	4639      	mov	r1, r7
 8017668:	9300      	str	r3, [sp, #0]
 801766a:	4628      	mov	r0, r5
 801766c:	47b0      	blx	r6
 801766e:	b003      	add	sp, #12
 8017670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017672:	2000      	movs	r0, #0
 8017674:	e7fb      	b.n	801766e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

08017676 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8017676:	b40e      	push	{r1, r2, r3}
 8017678:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801767c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017680:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8017682:	b09b      	sub	sp, #108	; 0x6c
 8017684:	4604      	mov	r4, r0
 8017686:	429a      	cmp	r2, r3
 8017688:	d03f      	beq.n	801770a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 801768a:	f100 0726 	add.w	r7, r0, #38	; 0x26
 801768e:	ab22      	add	r3, sp, #136	; 0x88
 8017690:	4638      	mov	r0, r7
 8017692:	9303      	str	r3, [sp, #12]
 8017694:	f7f2 f92a 	bl	80098ec <_ZNK8touchgfx9TypedText7getFontEv>
 8017698:	6803      	ldr	r3, [r0, #0]
 801769a:	4680      	mov	r8, r0
 801769c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801769e:	4798      	blx	r3
 80176a0:	4606      	mov	r6, r0
 80176a2:	b205      	sxth	r5, r0
 80176a4:	a804      	add	r0, sp, #16
 80176a6:	f002 ffcb 	bl	801a640 <_ZN8touchgfx12TextProviderC1Ev>
 80176aa:	f8d8 3000 	ldr.w	r3, [r8]
 80176ae:	4640      	mov	r0, r8
 80176b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80176b2:	4798      	blx	r3
 80176b4:	9a03      	ldr	r2, [sp, #12]
 80176b6:	4603      	mov	r3, r0
 80176b8:	9921      	ldr	r1, [sp, #132]	; 0x84
 80176ba:	a804      	add	r0, sp, #16
 80176bc:	f002 ffdd 	bl	801a67a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80176c0:	4638      	mov	r0, r7
 80176c2:	f7f2 f92f 	bl	8009924 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80176c6:	4680      	mov	r8, r0
 80176c8:	4638      	mov	r0, r7
 80176ca:	f7f2 f90f 	bl	80098ec <_ZNK8touchgfx9TypedText7getFontEv>
 80176ce:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80176d2:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 80176d6:	4642      	mov	r2, r8
 80176d8:	9300      	str	r3, [sp, #0]
 80176da:	4603      	mov	r3, r0
 80176dc:	a804      	add	r0, sp, #16
 80176de:	f000 ff8a 	bl	80185f6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80176e2:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80176e6:	b203      	sxth	r3, r0
 80176e8:	18a9      	adds	r1, r5, r2
 80176ea:	2900      	cmp	r1, #0
 80176ec:	dd0b      	ble.n	8017706 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 80176ee:	3b01      	subs	r3, #1
 80176f0:	fb13 f302 	smulbb	r3, r3, r2
 80176f4:	fb16 3300 	smlabb	r3, r6, r0, r3
 80176f8:	b21d      	sxth	r5, r3
 80176fa:	4628      	mov	r0, r5
 80176fc:	b01b      	add	sp, #108	; 0x6c
 80176fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017702:	b003      	add	sp, #12
 8017704:	4770      	bx	lr
 8017706:	2b00      	cmp	r3, #0
 8017708:	dcf7      	bgt.n	80176fa <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 801770a:	2500      	movs	r5, #0
 801770c:	e7f5      	b.n	80176fa <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
	...

08017710 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8017710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017718:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801771a:	b08d      	sub	sp, #52	; 0x34
 801771c:	4604      	mov	r4, r0
 801771e:	429e      	cmp	r6, r3
 8017720:	4688      	mov	r8, r1
 8017722:	d04b      	beq.n	80177bc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8017724:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8017728:	4628      	mov	r0, r5
 801772a:	f7f2 f8df 	bl	80098ec <_ZNK8touchgfx9TypedText7getFontEv>
 801772e:	4607      	mov	r7, r0
 8017730:	2800      	cmp	r0, #0
 8017732:	d043      	beq.n	80177bc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8017734:	4628      	mov	r0, r5
 8017736:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 801773a:	f7f2 f90b 	bl	8009954 <_ZNK8touchgfx9TypedText11assertValidEv>
 801773e:	4b21      	ldr	r3, [pc, #132]	; (80177c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 8017740:	4628      	mov	r0, r5
 8017742:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8017746:	681b      	ldr	r3, [r3, #0]
 8017748:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 801774c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8017750:	785e      	ldrb	r6, [r3, #1]
 8017752:	f7f2 f8e7 	bl	8009924 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017756:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017758:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 801775c:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8017760:	9309      	str	r3, [sp, #36]	; 0x24
 8017762:	4b19      	ldr	r3, [pc, #100]	; (80177c8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 8017764:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 801776e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017772:	9707      	str	r7, [sp, #28]
 8017774:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8017778:	f88d 6020 	strb.w	r6, [sp, #32]
 801777c:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8017780:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8017784:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8017788:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801778c:	b10a      	cbz	r2, 8017792 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 801778e:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8017790:	b906      	cbnz	r6, 8017794 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 8017792:	689e      	ldr	r6, [r3, #8]
 8017794:	af05      	add	r7, sp, #20
 8017796:	4621      	mov	r1, r4
 8017798:	4638      	mov	r0, r7
 801779a:	f002 f820 	bl	80197de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801779e:	4628      	mov	r0, r5
 80177a0:	f7f5 fa62 	bl	800cc68 <_ZNK8touchgfx9TypedText7getTextEv>
 80177a4:	2300      	movs	r3, #0
 80177a6:	9001      	str	r0, [sp, #4]
 80177a8:	4630      	mov	r0, r6
 80177aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80177ae:	ab07      	add	r3, sp, #28
 80177b0:	9300      	str	r3, [sp, #0]
 80177b2:	4643      	mov	r3, r8
 80177b4:	e897 0006 	ldmia.w	r7, {r1, r2}
 80177b8:	f000 fcea 	bl	8018190 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80177bc:	b00d      	add	sp, #52	; 0x34
 80177be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177c2:	bf00      	nop
 80177c4:	2000b364 	.word	0x2000b364
 80177c8:	2000b2d4 	.word	0x2000b2d4

080177cc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80177cc:	b570      	push	{r4, r5, r6, lr}
 80177ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80177d2:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80177d4:	4604      	mov	r4, r0
 80177d6:	429a      	cmp	r2, r3
 80177d8:	d021      	beq.n	801781e <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 80177da:	6803      	ldr	r3, [r0, #0]
 80177dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80177de:	4798      	blx	r3
 80177e0:	6823      	ldr	r3, [r4, #0]
 80177e2:	4605      	mov	r5, r0
 80177e4:	4620      	mov	r0, r4
 80177e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80177e8:	4798      	blx	r3
 80177ea:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80177ee:	4606      	mov	r6, r0
 80177f0:	b22d      	sxth	r5, r5
 80177f2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80177f6:	6823      	ldr	r3, [r4, #0]
 80177f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80177fa:	d109      	bne.n	8017810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 80177fc:	4629      	mov	r1, r5
 80177fe:	4620      	mov	r0, r4
 8017800:	4798      	blx	r3
 8017802:	6823      	ldr	r3, [r4, #0]
 8017804:	4631      	mov	r1, r6
 8017806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017808:	4620      	mov	r0, r4
 801780a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801780e:	4718      	bx	r3
 8017810:	4601      	mov	r1, r0
 8017812:	4620      	mov	r0, r4
 8017814:	4798      	blx	r3
 8017816:	6823      	ldr	r3, [r4, #0]
 8017818:	4629      	mov	r1, r5
 801781a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801781c:	e7f4      	b.n	8017808 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 801781e:	bd70      	pop	{r4, r5, r6, pc}

08017820 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8017820:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8017824:	84c1      	strh	r1, [r0, #38]	; 0x26
 8017826:	b922      	cbnz	r2, 8017832 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8017828:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801782c:	b90b      	cbnz	r3, 8017832 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 801782e:	f7ff bfcd 	b.w	80177cc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8017832:	4770      	bx	lr

08017834 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8017834:	b538      	push	{r3, r4, r5, lr}
 8017836:	880b      	ldrh	r3, [r1, #0]
 8017838:	4605      	mov	r5, r0
 801783a:	4604      	mov	r4, r0
 801783c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801783e:	8813      	ldrh	r3, [r2, #0]
 8017840:	f825 3f30 	strh.w	r3, [r5, #48]!
 8017844:	4628      	mov	r0, r5
 8017846:	f003 fcb5 	bl	801b1b4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801784a:	8120      	strh	r0, [r4, #8]
 801784c:	4628      	mov	r0, r5
 801784e:	f003 fceb 	bl	801b228 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017852:	8160      	strh	r0, [r4, #10]
 8017854:	bd38      	pop	{r3, r4, r5, pc}

08017856 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8017856:	b510      	push	{r4, lr}
 8017858:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801785c:	4604      	mov	r4, r0
 801785e:	2bff      	cmp	r3, #255	; 0xff
 8017860:	d006      	beq.n	8017870 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8017862:	2300      	movs	r3, #0
 8017864:	8003      	strh	r3, [r0, #0]
 8017866:	8043      	strh	r3, [r0, #2]
 8017868:	8083      	strh	r3, [r0, #4]
 801786a:	80c3      	strh	r3, [r0, #6]
 801786c:	4620      	mov	r0, r4
 801786e:	bd10      	pop	{r4, pc}
 8017870:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8017874:	b11b      	cbz	r3, 801787e <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8017876:	3130      	adds	r1, #48	; 0x30
 8017878:	f003 fd10 	bl	801b29c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801787c:	e7f6      	b.n	801786c <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801787e:	312e      	adds	r1, #46	; 0x2e
 8017880:	e7fa      	b.n	8017878 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08017884 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8017884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017888:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801788c:	b08b      	sub	sp, #44	; 0x2c
 801788e:	4604      	mov	r4, r0
 8017890:	4689      	mov	r9, r1
 8017892:	2b00      	cmp	r3, #0
 8017894:	d043      	beq.n	801791e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9a>
 8017896:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8017898:	a805      	add	r0, sp, #20
 801789a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801789e:	f003 fc89 	bl	801b1b4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80178a2:	4607      	mov	r7, r0
 80178a4:	fa0f f880 	sxth.w	r8, r0
 80178a8:	a805      	add	r0, sp, #20
 80178aa:	f003 fcbd 	bl	801b228 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80178ae:	f9b9 6000 	ldrsh.w	r6, [r9]
 80178b2:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 80178b6:	2300      	movs	r3, #0
 80178b8:	fa0f fc80 	sxth.w	ip, r0
 80178bc:	4432      	add	r2, r6
 80178be:	9306      	str	r3, [sp, #24]
 80178c0:	b292      	uxth	r2, r2
 80178c2:	fa0f fe82 	sxth.w	lr, r2
 80178c6:	459e      	cmp	lr, r3
 80178c8:	dd2b      	ble.n	8017922 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 80178ca:	45b0      	cmp	r8, r6
 80178cc:	dd29      	ble.n	8017922 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 80178ce:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 80178d2:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 80178d6:	442b      	add	r3, r5
 80178d8:	b29b      	uxth	r3, r3
 80178da:	b219      	sxth	r1, r3
 80178dc:	2900      	cmp	r1, #0
 80178de:	dd20      	ble.n	8017922 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 80178e0:	45ac      	cmp	ip, r5
 80178e2:	dd1e      	ble.n	8017922 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 80178e4:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80178e8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80178ec:	45f0      	cmp	r8, lr
 80178ee:	bfb8      	it	lt
 80178f0:	463a      	movlt	r2, r7
 80178f2:	458c      	cmp	ip, r1
 80178f4:	bfb8      	it	lt
 80178f6:	4603      	movlt	r3, r0
 80178f8:	f8ad 6018 	strh.w	r6, [sp, #24]
 80178fc:	1b92      	subs	r2, r2, r6
 80178fe:	1b5b      	subs	r3, r3, r5
 8017900:	f8ad 501a 	strh.w	r5, [sp, #26]
 8017904:	f8ad 201c 	strh.w	r2, [sp, #28]
 8017908:	f8ad 301e 	strh.w	r3, [sp, #30]
 801790c:	4b1d      	ldr	r3, [pc, #116]	; (8017984 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>)
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	b953      	cbnz	r3, 8017928 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa4>
 8017912:	4b1d      	ldr	r3, [pc, #116]	; (8017988 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x104>)
 8017914:	21b8      	movs	r1, #184	; 0xb8
 8017916:	4a1d      	ldr	r2, [pc, #116]	; (801798c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8017918:	481d      	ldr	r0, [pc, #116]	; (8017990 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 801791a:	f00d f99d 	bl	8024c58 <__assert_func>
 801791e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8017920:	e7ba      	b.n	8017898 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8017922:	2300      	movs	r3, #0
 8017924:	9307      	str	r3, [sp, #28]
 8017926:	e7f1      	b.n	801790c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x88>
 8017928:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801792c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017930:	429a      	cmp	r2, r3
 8017932:	d024      	beq.n	801797e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 8017934:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017938:	b30b      	cbz	r3, 801797e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 801793a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801793e:	b1f3      	cbz	r3, 801797e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 8017940:	2300      	movs	r3, #0
 8017942:	a908      	add	r1, sp, #32
 8017944:	4620      	mov	r0, r4
 8017946:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801794a:	6823      	ldr	r3, [r4, #0]
 801794c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801794e:	4798      	blx	r3
 8017950:	4b10      	ldr	r3, [pc, #64]	; (8017994 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 8017952:	681b      	ldr	r3, [r3, #0]
 8017954:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017958:	b10a      	cbz	r2, 801795e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 801795a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801795c:	b900      	cbnz	r0, 8017960 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xdc>
 801795e:	6898      	ldr	r0, [r3, #8]
 8017960:	2501      	movs	r5, #1
 8017962:	6801      	ldr	r1, [r0, #0]
 8017964:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8017968:	9502      	str	r5, [sp, #8]
 801796a:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801796e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017972:	9401      	str	r4, [sp, #4]
 8017974:	ac06      	add	r4, sp, #24
 8017976:	9400      	str	r4, [sp, #0]
 8017978:	68cc      	ldr	r4, [r1, #12]
 801797a:	a905      	add	r1, sp, #20
 801797c:	47a0      	blx	r4
 801797e:	b00b      	add	sp, #44	; 0x2c
 8017980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017984:	2000b39c 	.word	0x2000b39c
 8017988:	0802a1a4 	.word	0x0802a1a4
 801798c:	0802a278 	.word	0x0802a278
 8017990:	0802a1e0 	.word	0x0802a1e0
 8017994:	2000b2d4 	.word	0x2000b2d4

08017998 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8017998:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801799c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80179a0:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80179a2:	4604      	mov	r4, r0
 80179a4:	429a      	cmp	r2, r3
 80179a6:	d018      	beq.n	80179da <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 80179a8:	f100 0526 	add.w	r5, r0, #38	; 0x26
 80179ac:	4628      	mov	r0, r5
 80179ae:	f7f1 ff9d 	bl	80098ec <_ZNK8touchgfx9TypedText7getFontEv>
 80179b2:	6803      	ldr	r3, [r0, #0]
 80179b4:	4606      	mov	r6, r0
 80179b6:	4628      	mov	r0, r5
 80179b8:	69df      	ldr	r7, [r3, #28]
 80179ba:	f7f1 ffb3 	bl	8009924 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80179be:	4680      	mov	r8, r0
 80179c0:	4628      	mov	r0, r5
 80179c2:	f7f5 f951 	bl	800cc68 <_ZNK8touchgfx9TypedText7getTextEv>
 80179c6:	2300      	movs	r3, #0
 80179c8:	4602      	mov	r2, r0
 80179ca:	4641      	mov	r1, r8
 80179cc:	9300      	str	r3, [sp, #0]
 80179ce:	4630      	mov	r0, r6
 80179d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80179d2:	47b8      	blx	r7
 80179d4:	b002      	add	sp, #8
 80179d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179da:	2000      	movs	r0, #0
 80179dc:	e7fa      	b.n	80179d4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

080179de <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 80179de:	b570      	push	{r4, r5, r6, lr}
 80179e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80179e4:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80179e6:	4604      	mov	r4, r0
 80179e8:	429a      	cmp	r2, r3
 80179ea:	d00c      	beq.n	8017a06 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 80179ec:	f850 3b26 	ldr.w	r3, [r0], #38
 80179f0:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 80179f2:	f7f5 f939 	bl	800cc68 <_ZNK8touchgfx9TypedText7getTextEv>
 80179f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80179f8:	4601      	mov	r1, r0
 80179fa:	46ac      	mov	ip, r5
 80179fc:	4620      	mov	r0, r4
 80179fe:	2300      	movs	r3, #0
 8017a00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a04:	4760      	bx	ip
 8017a06:	2000      	movs	r0, #0
 8017a08:	bd70      	pop	{r4, r5, r6, pc}
	...

08017a0c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8017a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a14:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8017a16:	b08d      	sub	sp, #52	; 0x34
 8017a18:	4604      	mov	r4, r0
 8017a1a:	429e      	cmp	r6, r3
 8017a1c:	460f      	mov	r7, r1
 8017a1e:	d048      	beq.n	8017ab2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8017a20:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8017a24:	4628      	mov	r0, r5
 8017a26:	f7f1 ff61 	bl	80098ec <_ZNK8touchgfx9TypedText7getFontEv>
 8017a2a:	4680      	mov	r8, r0
 8017a2c:	2800      	cmp	r0, #0
 8017a2e:	d040      	beq.n	8017ab2 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 8017a30:	4628      	mov	r0, r5
 8017a32:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8017a36:	f7f1 ff8d 	bl	8009954 <_ZNK8touchgfx9TypedText11assertValidEv>
 8017a3a:	4b1f      	ldr	r3, [pc, #124]	; (8017ab8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 8017a3c:	4628      	mov	r0, r5
 8017a3e:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8017a48:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8017a4c:	785e      	ldrb	r6, [r3, #1]
 8017a4e:	f7f1 ff69 	bl	8009924 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8017a52:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8017a56:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8017a5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017a5c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8017a60:	f88d 6020 	strb.w	r6, [sp, #32]
 8017a64:	ae05      	add	r6, sp, #20
 8017a66:	9309      	str	r3, [sp, #36]	; 0x24
 8017a68:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8017a6c:	f8cd 801c 	str.w	r8, [sp, #28]
 8017a70:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8017a74:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8017a78:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8017a7c:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8017a80:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8017a84:	f7f2 fad6 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8017a88:	4621      	mov	r1, r4
 8017a8a:	4680      	mov	r8, r0
 8017a8c:	4630      	mov	r0, r6
 8017a8e:	f001 fea6 	bl	80197de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017a92:	4628      	mov	r0, r5
 8017a94:	f7f5 f8e8 	bl	800cc68 <_ZNK8touchgfx9TypedText7getTextEv>
 8017a98:	2300      	movs	r3, #0
 8017a9a:	9303      	str	r3, [sp, #12]
 8017a9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017a9e:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8017aa2:	ab07      	add	r3, sp, #28
 8017aa4:	4640      	mov	r0, r8
 8017aa6:	9300      	str	r3, [sp, #0]
 8017aa8:	463b      	mov	r3, r7
 8017aaa:	e896 0006 	ldmia.w	r6, {r1, r2}
 8017aae:	f000 fb6f 	bl	8018190 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8017ab2:	b00d      	add	sp, #52	; 0x34
 8017ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ab8:	2000b364 	.word	0x2000b364

08017abc <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 8017abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ac0:	461c      	mov	r4, r3
 8017ac2:	4606      	mov	r6, r0
 8017ac4:	9f06      	ldr	r7, [sp, #24]
 8017ac6:	f7ff feb5 	bl	8017834 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8017aca:	8823      	ldrh	r3, [r4, #0]
 8017acc:	f04f 0802 	mov.w	r8, #2
 8017ad0:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 8017ad4:	4638      	mov	r0, r7
 8017ad6:	86b3      	strh	r3, [r6, #52]	; 0x34
 8017ad8:	883b      	ldrh	r3, [r7, #0]
 8017ada:	fb95 f5f8 	sdiv	r5, r5, r8
 8017ade:	86f3      	strh	r3, [r6, #54]	; 0x36
 8017ae0:	b2ad      	uxth	r5, r5
 8017ae2:	f003 fb67 	bl	801b1b4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017ae6:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 8017aea:	eba5 0050 	sub.w	r0, r5, r0, lsr #1
 8017aee:	fb94 f4f8 	sdiv	r4, r4, r8
 8017af2:	b2a4      	uxth	r4, r4
 8017af4:	8730      	strh	r0, [r6, #56]	; 0x38
 8017af6:	4638      	mov	r0, r7
 8017af8:	f003 fb96 	bl	801b228 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017afc:	eba4 0050 	sub.w	r0, r4, r0, lsr #1
 8017b00:	8770      	strh	r0, [r6, #58]	; 0x3a
 8017b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08017b08 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 8017b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b0c:	4604      	mov	r4, r0
 8017b0e:	b08c      	sub	sp, #48	; 0x30
 8017b10:	460d      	mov	r5, r1
 8017b12:	f7ff feb7 	bl	8017884 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8017b16:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8017b1a:	b33b      	cbz	r3, 8017b6c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x64>
 8017b1c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8017b1e:	a805      	add	r0, sp, #20
 8017b20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017b24:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	; 0x38
 8017b28:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	; 0x3a
 8017b2c:	f003 fb42 	bl	801b1b4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017b30:	4606      	mov	r6, r0
 8017b32:	a805      	add	r0, sp, #20
 8017b34:	f003 fb78 	bl	801b228 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017b38:	6869      	ldr	r1, [r5, #4]
 8017b3a:	f8ad 001e 	strh.w	r0, [sp, #30]
 8017b3e:	ab08      	add	r3, sp, #32
 8017b40:	6828      	ldr	r0, [r5, #0]
 8017b42:	ad08      	add	r5, sp, #32
 8017b44:	f8ad 8018 	strh.w	r8, [sp, #24]
 8017b48:	f8ad 701a 	strh.w	r7, [sp, #26]
 8017b4c:	f8ad 601c 	strh.w	r6, [sp, #28]
 8017b50:	c303      	stmia	r3!, {r0, r1}
 8017b52:	a906      	add	r1, sp, #24
 8017b54:	4628      	mov	r0, r5
 8017b56:	f7fd f8ed 	bl	8014d34 <_ZN8touchgfx4RectaNERKS0_>
 8017b5a:	4b24      	ldr	r3, [pc, #144]	; (8017bec <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe4>)
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	b93b      	cbnz	r3, 8017b70 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x68>
 8017b60:	4b23      	ldr	r3, [pc, #140]	; (8017bf0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe8>)
 8017b62:	21b8      	movs	r1, #184	; 0xb8
 8017b64:	4a23      	ldr	r2, [pc, #140]	; (8017bf4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xec>)
 8017b66:	4824      	ldr	r0, [pc, #144]	; (8017bf8 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf0>)
 8017b68:	f00d f876 	bl	8024c58 <__assert_func>
 8017b6c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8017b6e:	e7d6      	b.n	8017b1e <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x16>
 8017b70:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8017b74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b78:	429a      	cmp	r2, r3
 8017b7a:	d034      	beq.n	8017be6 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xde>
 8017b7c:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d030      	beq.n	8017be6 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xde>
 8017b84:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8017b88:	b36b      	cbz	r3, 8017be6 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xde>
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	a90a      	add	r1, sp, #40	; 0x28
 8017b8e:	4620      	mov	r0, r4
 8017b90:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8017b94:	6823      	ldr	r3, [r4, #0]
 8017b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b98:	4798      	blx	r3
 8017b9a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017b9e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8017ba0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8017ba4:	1a9b      	subs	r3, r3, r2
 8017ba6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017baa:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8017bac:	1ac9      	subs	r1, r1, r3
 8017bae:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8017bb2:	4912      	ldr	r1, [pc, #72]	; (8017bfc <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf4>)
 8017bb4:	6809      	ldr	r1, [r1, #0]
 8017bb6:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
 8017bba:	b108      	cbz	r0, 8017bc0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xb8>
 8017bbc:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8017bbe:	b900      	cbnz	r0, 8017bc2 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xba>
 8017bc0:	6888      	ldr	r0, [r1, #8]
 8017bc2:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 8017bc6:	2601      	movs	r6, #1
 8017bc8:	440b      	add	r3, r1
 8017bca:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8017bce:	440a      	add	r2, r1
 8017bd0:	6801      	ldr	r1, [r0, #0]
 8017bd2:	9602      	str	r6, [sp, #8]
 8017bd4:	b21b      	sxth	r3, r3
 8017bd6:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8017bda:	b212      	sxth	r2, r2
 8017bdc:	e9cd 5400 	strd	r5, r4, [sp]
 8017be0:	68cc      	ldr	r4, [r1, #12]
 8017be2:	a905      	add	r1, sp, #20
 8017be4:	47a0      	blx	r4
 8017be6:	b00c      	add	sp, #48	; 0x30
 8017be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bec:	2000b39c 	.word	0x2000b39c
 8017bf0:	0802a1a4 	.word	0x0802a1a4
 8017bf4:	0802a39c 	.word	0x0802a39c
 8017bf8:	0802a1e0 	.word	0x0802a1e0
 8017bfc:	2000b2d4 	.word	0x2000b2d4

08017c00 <_ZN8touchgfx14ButtonWithIconC1Ev>:
 8017c00:	2101      	movs	r1, #1
 8017c02:	2200      	movs	r2, #0
 8017c04:	b510      	push	{r4, lr}
 8017c06:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8017c0a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8017c0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017c12:	4c0c      	ldr	r4, [pc, #48]	; (8017c44 <_ZN8touchgfx14ButtonWithIconC1Ev+0x44>)
 8017c14:	8082      	strh	r2, [r0, #4]
 8017c16:	80c2      	strh	r2, [r0, #6]
 8017c18:	8102      	strh	r2, [r0, #8]
 8017c1a:	8142      	strh	r2, [r0, #10]
 8017c1c:	8182      	strh	r2, [r0, #12]
 8017c1e:	81c2      	strh	r2, [r0, #14]
 8017c20:	8202      	strh	r2, [r0, #16]
 8017c22:	8242      	strh	r2, [r0, #18]
 8017c24:	61c2      	str	r2, [r0, #28]
 8017c26:	6282      	str	r2, [r0, #40]	; 0x28
 8017c28:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8017c2c:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8017c2e:	8601      	strh	r1, [r0, #48]	; 0x30
 8017c30:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 8017c34:	6004      	str	r4, [r0, #0]
 8017c36:	8681      	strh	r1, [r0, #52]	; 0x34
 8017c38:	86c1      	strh	r1, [r0, #54]	; 0x36
 8017c3a:	8702      	strh	r2, [r0, #56]	; 0x38
 8017c3c:	8742      	strh	r2, [r0, #58]	; 0x3a
 8017c3e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8017c42:	bd10      	pop	{r4, pc}
 8017c44:	0802a330 	.word	0x0802a330

08017c48 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8017c48:	b570      	push	{r4, r5, r6, lr}
 8017c4a:	4605      	mov	r5, r0
 8017c4c:	880b      	ldrh	r3, [r1, #0]
 8017c4e:	4604      	mov	r4, r0
 8017c50:	84c3      	strh	r3, [r0, #38]	; 0x26
 8017c52:	f855 3b26 	ldr.w	r3, [r5], #38
 8017c56:	4628      	mov	r0, r5
 8017c58:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8017c5a:	f003 faab 	bl	801b1b4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017c5e:	b201      	sxth	r1, r0
 8017c60:	4620      	mov	r0, r4
 8017c62:	47b0      	blx	r6
 8017c64:	6823      	ldr	r3, [r4, #0]
 8017c66:	4628      	mov	r0, r5
 8017c68:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8017c6a:	f003 fadd 	bl	801b228 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017c6e:	b201      	sxth	r1, r0
 8017c70:	4620      	mov	r0, r4
 8017c72:	47b0      	blx	r6
 8017c74:	4628      	mov	r0, r5
 8017c76:	f003 fb6b 	bl	801b350 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8017c7a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 8017c7e:	bd70      	pop	{r4, r5, r6, pc}

08017c80 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8017c80:	b510      	push	{r4, lr}
 8017c82:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8017c86:	4604      	mov	r4, r0
 8017c88:	2bff      	cmp	r3, #255	; 0xff
 8017c8a:	d006      	beq.n	8017c9a <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8017c8c:	2300      	movs	r3, #0
 8017c8e:	8003      	strh	r3, [r0, #0]
 8017c90:	8043      	strh	r3, [r0, #2]
 8017c92:	8083      	strh	r3, [r0, #4]
 8017c94:	80c3      	strh	r3, [r0, #6]
 8017c96:	4620      	mov	r0, r4
 8017c98:	bd10      	pop	{r4, pc}
 8017c9a:	3126      	adds	r1, #38	; 0x26
 8017c9c:	f003 fafe 	bl	801b29c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8017ca0:	e7f9      	b.n	8017c96 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08017ca4 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8017ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ca8:	4604      	mov	r4, r0
 8017caa:	b088      	sub	sp, #32
 8017cac:	2500      	movs	r5, #0
 8017cae:	460f      	mov	r7, r1
 8017cb0:	f854 3b26 	ldr.w	r3, [r4], #38
 8017cb4:	a904      	add	r1, sp, #16
 8017cb6:	4606      	mov	r6, r0
 8017cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017cbe:	4798      	blx	r3
 8017cc0:	4620      	mov	r0, r4
 8017cc2:	f003 fa77 	bl	801b1b4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017cc6:	4680      	mov	r8, r0
 8017cc8:	4620      	mov	r0, r4
 8017cca:	f003 faad 	bl	801b228 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017cce:	9506      	str	r5, [sp, #24]
 8017cd0:	ad06      	add	r5, sp, #24
 8017cd2:	f8ad 001e 	strh.w	r0, [sp, #30]
 8017cd6:	4639      	mov	r1, r7
 8017cd8:	f8ad 801c 	strh.w	r8, [sp, #28]
 8017cdc:	4628      	mov	r0, r5
 8017cde:	f7fd f829 	bl	8014d34 <_ZN8touchgfx4RectaNERKS0_>
 8017ce2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017ce6:	b1c3      	cbz	r3, 8017d1a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8017ce8:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8017cec:	b1ab      	cbz	r3, 8017d1a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8017cee:	4b0c      	ldr	r3, [pc, #48]	; (8017d20 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 8017cf0:	681b      	ldr	r3, [r3, #0]
 8017cf2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017cf6:	b10a      	cbz	r2, 8017cfc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 8017cf8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017cfa:	b900      	cbnz	r0, 8017cfe <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 8017cfc:	6898      	ldr	r0, [r3, #8]
 8017cfe:	2701      	movs	r7, #1
 8017d00:	6801      	ldr	r1, [r0, #0]
 8017d02:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8017d06:	9702      	str	r7, [sp, #8]
 8017d08:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8017d0c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8017d10:	e9cd 5600 	strd	r5, r6, [sp]
 8017d14:	68cd      	ldr	r5, [r1, #12]
 8017d16:	4621      	mov	r1, r4
 8017d18:	47a8      	blx	r5
 8017d1a:	b008      	add	sp, #32
 8017d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d20:	2000b2d4 	.word	0x2000b2d4

08017d24 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8017d24:	4b02      	ldr	r3, [pc, #8]	; (8017d30 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8017d26:	6018      	str	r0, [r3, #0]
 8017d28:	4b02      	ldr	r3, [pc, #8]	; (8017d34 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8017d2a:	6019      	str	r1, [r3, #0]
 8017d2c:	4770      	bx	lr
 8017d2e:	bf00      	nop
 8017d30:	2000b2dc 	.word	0x2000b2dc
 8017d34:	2000b2f0 	.word	0x2000b2f0

08017d38 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 8017d38:	b538      	push	{r3, r4, r5, lr}
 8017d3a:	4c2b      	ldr	r4, [pc, #172]	; (8017de8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 8017d3c:	4b2b      	ldr	r3, [pc, #172]	; (8017dec <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 8017d3e:	6821      	ldr	r1, [r4, #0]
 8017d40:	681a      	ldr	r2, [r3, #0]
 8017d42:	4281      	cmp	r1, r0
 8017d44:	4d2a      	ldr	r5, [pc, #168]	; (8017df0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 8017d46:	492b      	ldr	r1, [pc, #172]	; (8017df4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 8017d48:	d108      	bne.n	8017d5c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8017d4a:	682b      	ldr	r3, [r5, #0]
 8017d4c:	4293      	cmp	r3, r2
 8017d4e:	d105      	bne.n	8017d5c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 8017d50:	6808      	ldr	r0, [r1, #0]
 8017d52:	280f      	cmp	r0, #15
 8017d54:	bf94      	ite	ls
 8017d56:	2000      	movls	r0, #0
 8017d58:	2001      	movhi	r0, #1
 8017d5a:	bd38      	pop	{r3, r4, r5, pc}
 8017d5c:	4b26      	ldr	r3, [pc, #152]	; (8017df8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 8017d5e:	6020      	str	r0, [r4, #0]
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	602a      	str	r2, [r5, #0]
 8017d64:	4298      	cmp	r0, r3
 8017d66:	d905      	bls.n	8017d74 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 8017d68:	4b24      	ldr	r3, [pc, #144]	; (8017dfc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017d6a:	2137      	movs	r1, #55	; 0x37
 8017d6c:	4a24      	ldr	r2, [pc, #144]	; (8017e00 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017d6e:	4825      	ldr	r0, [pc, #148]	; (8017e04 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8017d70:	f00c ff72 	bl	8024c58 <__assert_func>
 8017d74:	f010 0403 	ands.w	r4, r0, #3
 8017d78:	bf1f      	itttt	ne
 8017d7a:	f1c4 0504 	rsbne	r5, r4, #4
 8017d7e:	3b04      	subne	r3, #4
 8017d80:	1952      	addne	r2, r2, r5
 8017d82:	191b      	addne	r3, r3, r4
 8017d84:	4d20      	ldr	r5, [pc, #128]	; (8017e08 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 8017d86:	4402      	add	r2, r0
 8017d88:	1a1b      	subs	r3, r3, r0
 8017d8a:	3001      	adds	r0, #1
 8017d8c:	602a      	str	r2, [r5, #0]
 8017d8e:	f020 0401 	bic.w	r4, r0, #1
 8017d92:	42a3      	cmp	r3, r4
 8017d94:	d203      	bcs.n	8017d9e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 8017d96:	4b19      	ldr	r3, [pc, #100]	; (8017dfc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017d98:	214a      	movs	r1, #74	; 0x4a
 8017d9a:	4a19      	ldr	r2, [pc, #100]	; (8017e00 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017d9c:	e7e7      	b.n	8017d6e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017d9e:	f010 0002 	ands.w	r0, r0, #2
 8017da2:	bf1f      	itttt	ne
 8017da4:	f1c0 0504 	rsbne	r5, r0, #4
 8017da8:	1952      	addne	r2, r2, r5
 8017daa:	1f05      	subne	r5, r0, #4
 8017dac:	195b      	addne	r3, r3, r5
 8017dae:	4422      	add	r2, r4
 8017db0:	4d16      	ldr	r5, [pc, #88]	; (8017e0c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 8017db2:	1b1b      	subs	r3, r3, r4
 8017db4:	602a      	str	r2, [r5, #0]
 8017db6:	429c      	cmp	r4, r3
 8017db8:	d903      	bls.n	8017dc2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8017dba:	4b10      	ldr	r3, [pc, #64]	; (8017dfc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8017dbc:	215d      	movs	r1, #93	; 0x5d
 8017dbe:	4a10      	ldr	r2, [pc, #64]	; (8017e00 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017dc0:	e7d5      	b.n	8017d6e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017dc2:	b120      	cbz	r0, 8017dce <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8017dc4:	f1c0 0504 	rsb	r5, r0, #4
 8017dc8:	3804      	subs	r0, #4
 8017dca:	442a      	add	r2, r5
 8017dcc:	4403      	add	r3, r0
 8017dce:	1b1b      	subs	r3, r3, r4
 8017dd0:	4422      	add	r2, r4
 8017dd2:	480f      	ldr	r0, [pc, #60]	; (8017e10 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8017dd4:	2b0f      	cmp	r3, #15
 8017dd6:	600b      	str	r3, [r1, #0]
 8017dd8:	6002      	str	r2, [r0, #0]
 8017dda:	d803      	bhi.n	8017de4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8017ddc:	4b0d      	ldr	r3, [pc, #52]	; (8017e14 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 8017dde:	2170      	movs	r1, #112	; 0x70
 8017de0:	4a07      	ldr	r2, [pc, #28]	; (8017e00 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8017de2:	e7c4      	b.n	8017d6e <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8017de4:	2001      	movs	r0, #1
 8017de6:	e7b8      	b.n	8017d5a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8017de8:	2000b2e4 	.word	0x2000b2e4
 8017dec:	2000b2dc 	.word	0x2000b2dc
 8017df0:	2000b2ec 	.word	0x2000b2ec
 8017df4:	2000b2f4 	.word	0x2000b2f4
 8017df8:	2000b2f0 	.word	0x2000b2f0
 8017dfc:	0802a43c 	.word	0x0802a43c
 8017e00:	0802a504 	.word	0x0802a504
 8017e04:	0802a475 	.word	0x0802a475
 8017e08:	2000b2f8 	.word	0x2000b2f8
 8017e0c:	2000b2e8 	.word	0x2000b2e8
 8017e10:	2000b2e0 	.word	0x2000b2e0
 8017e14:	0802a4bf 	.word	0x0802a4bf

08017e18 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 8017e18:	4b04      	ldr	r3, [pc, #16]	; (8017e2c <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 8017e1a:	6818      	ldr	r0, [r3, #0]
 8017e1c:	b120      	cbz	r0, 8017e28 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 8017e1e:	4b04      	ldr	r3, [pc, #16]	; (8017e30 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 8017e20:	6818      	ldr	r0, [r3, #0]
 8017e22:	3000      	adds	r0, #0
 8017e24:	bf18      	it	ne
 8017e26:	2001      	movne	r0, #1
 8017e28:	4770      	bx	lr
 8017e2a:	bf00      	nop
 8017e2c:	2000b2dc 	.word	0x2000b2dc
 8017e30:	2000b2f0 	.word	0x2000b2f0

08017e34 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 8017e34:	4b01      	ldr	r3, [pc, #4]	; (8017e3c <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 8017e36:	6818      	ldr	r0, [r3, #0]
 8017e38:	4770      	bx	lr
 8017e3a:	bf00      	nop
 8017e3c:	2000b2e4 	.word	0x2000b2e4

08017e40 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 8017e40:	4b01      	ldr	r3, [pc, #4]	; (8017e48 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 8017e42:	6818      	ldr	r0, [r3, #0]
 8017e44:	4770      	bx	lr
 8017e46:	bf00      	nop
 8017e48:	2000b2ec 	.word	0x2000b2ec

08017e4c <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 8017e4c:	4b01      	ldr	r3, [pc, #4]	; (8017e54 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 8017e4e:	6818      	ldr	r0, [r3, #0]
 8017e50:	4770      	bx	lr
 8017e52:	bf00      	nop
 8017e54:	2000b2f8 	.word	0x2000b2f8

08017e58 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 8017e58:	4b01      	ldr	r3, [pc, #4]	; (8017e60 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 8017e5a:	6818      	ldr	r0, [r3, #0]
 8017e5c:	4770      	bx	lr
 8017e5e:	bf00      	nop
 8017e60:	2000b2e8 	.word	0x2000b2e8

08017e64 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8017e64:	4b01      	ldr	r3, [pc, #4]	; (8017e6c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8017e66:	6818      	ldr	r0, [r3, #0]
 8017e68:	4770      	bx	lr
 8017e6a:	bf00      	nop
 8017e6c:	2000b2e0 	.word	0x2000b2e0

08017e70 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8017e70:	4b01      	ldr	r3, [pc, #4]	; (8017e78 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8017e72:	6818      	ldr	r0, [r3, #0]
 8017e74:	4770      	bx	lr
 8017e76:	bf00      	nop
 8017e78:	2000b2f4 	.word	0x2000b2f4

08017e7c <_ZN8touchgfx3LCD4initEv>:
 8017e7c:	4770      	bx	lr

08017e7e <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017e7e:	2000      	movs	r0, #0
 8017e80:	4770      	bx	lr

08017e82 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8017e82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e86:	b091      	sub	sp, #68	; 0x44
 8017e88:	4699      	mov	r9, r3
 8017e8a:	4617      	mov	r7, r2
 8017e8c:	2500      	movs	r5, #0
 8017e8e:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8017e92:	4680      	mov	r8, r0
 8017e94:	a80e      	add	r0, sp, #56	; 0x38
 8017e96:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8017e98:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8017e9c:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8017ea0:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8017ea4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017ea8:	910d      	str	r1, [sp, #52]	; 0x34
 8017eaa:	950e      	str	r5, [sp, #56]	; 0x38
 8017eac:	f000 fe3a 	bl	8018b24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017eb0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017eb2:	f8d9 6000 	ldr.w	r6, [r9]
 8017eb6:	6818      	ldr	r0, [r3, #0]
 8017eb8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017eba:	f9b4 b000 	ldrsh.w	fp, [r4]
 8017ebe:	1b80      	subs	r0, r0, r6
 8017ec0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017ec4:	eb02 0c06 	add.w	ip, r2, r6
 8017ec8:	ebab 0e0c 	sub.w	lr, fp, ip
 8017ecc:	4570      	cmp	r0, lr
 8017ece:	f340 80bc 	ble.w	801804a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017ed2:	88a1      	ldrh	r1, [r4, #4]
 8017ed4:	4459      	add	r1, fp
 8017ed6:	b209      	sxth	r1, r1
 8017ed8:	458c      	cmp	ip, r1
 8017eda:	f300 80b6 	bgt.w	801804a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017ede:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8017ee2:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 8017ee6:	4283      	cmp	r3, r0
 8017ee8:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 8017eec:	edd9 6a07 	vldr	s13, [r9, #28]
 8017ef0:	bfa8      	it	ge
 8017ef2:	4603      	movge	r3, r0
 8017ef4:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 8017ef8:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 8017efc:	45e3      	cmp	fp, ip
 8017efe:	ee07 3a90 	vmov	s15, r3
 8017f02:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8017f06:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8017f0a:	ee25 4a04 	vmul.f32	s8, s10, s8
 8017f0e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8017f12:	ee25 5a27 	vmul.f32	s10, s10, s15
 8017f16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017f1a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8017f1e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8017f22:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8017f26:	ee36 0a84 	vadd.f32	s0, s13, s8
 8017f2a:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017f2e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017f32:	f340 808d 	ble.w	8018050 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 8017f36:	fb9e f5f3 	sdiv	r5, lr, r3
 8017f3a:	ee07 5a10 	vmov	s14, r5
 8017f3e:	2d00      	cmp	r5, #0
 8017f40:	fb03 e415 	mls	r4, r3, r5, lr
 8017f44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017f48:	eea7 0a04 	vfma.f32	s0, s14, s8
 8017f4c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8017f50:	eea7 1a05 	vfma.f32	s2, s14, s10
 8017f54:	dd12      	ble.n	8017f7c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 8017f56:	ee70 6a44 	vsub.f32	s13, s0, s8
 8017f5a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8017f5e:	ee31 2a45 	vsub.f32	s4, s2, s10
 8017f62:	eef5 6a40 	vcmp.f32	s13, #0.0
 8017f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f6a:	bf14      	ite	ne
 8017f6c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8017f70:	eeb0 7a67 	vmoveq.f32	s14, s15
 8017f74:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017f78:	ee22 2a07 	vmul.f32	s4, s4, s14
 8017f7c:	fb05 f703 	mul.w	r7, r5, r3
 8017f80:	1bc0      	subs	r0, r0, r7
 8017f82:	443e      	add	r6, r7
 8017f84:	1997      	adds	r7, r2, r6
 8017f86:	4407      	add	r7, r0
 8017f88:	42b9      	cmp	r1, r7
 8017f8a:	bfbc      	itt	lt
 8017f8c:	1a88      	sublt	r0, r1, r2
 8017f8e:	1b80      	sublt	r0, r0, r6
 8017f90:	2800      	cmp	r0, #0
 8017f92:	dd5a      	ble.n	801804a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8017f94:	fb90 f1f3 	sdiv	r1, r0, r3
 8017f98:	fb03 0211 	mls	r2, r3, r1, r0
 8017f9c:	b90a      	cbnz	r2, 8017fa2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 8017f9e:	3901      	subs	r1, #1
 8017fa0:	461a      	mov	r2, r3
 8017fa2:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8017fa6:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 8017faa:	44a4      	add	ip, r4
 8017fac:	2900      	cmp	r1, #0
 8017fae:	bfcc      	ite	gt
 8017fb0:	469e      	movgt	lr, r3
 8017fb2:	4696      	movle	lr, r2
 8017fb4:	fb03 c505 	mla	r5, r3, r5, ip
 8017fb8:	eef0 6a42 	vmov.f32	s13, s4
 8017fbc:	eeb0 7a61 	vmov.f32	s14, s3
 8017fc0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017fc4:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8017fc8:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8017fcc:	ee21 3a23 	vmul.f32	s6, s2, s7
 8017fd0:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8017fd4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017fd8:	ee17 0a90 	vmov	r0, s15
 8017fdc:	ee73 7a42 	vsub.f32	s15, s6, s4
 8017fe0:	fb90 f6f3 	sdiv	r6, r0, r3
 8017fe4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8017fe8:	ee17 0a90 	vmov	r0, s15
 8017fec:	fb90 f7f3 	sdiv	r7, r0, r3
 8017ff0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017ff4:	f8d0 8000 	ldr.w	r8, [r0]
 8017ff8:	900c      	str	r0, [sp, #48]	; 0x30
 8017ffa:	981c      	ldr	r0, [sp, #112]	; 0x70
 8017ffc:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8018000:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8018004:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8018008:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801800c:	f8cd a020 	str.w	sl, [sp, #32]
 8018010:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 8018014:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018016:	f8d9 9014 	ldr.w	r9, [r9, #20]
 801801a:	9603      	str	r6, [sp, #12]
 801801c:	44ca      	add	sl, r9
 801801e:	9506      	str	r5, [sp, #24]
 8018020:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8018024:	ee16 0a90 	vmov	r0, s13
 8018028:	f8cd a01c 	str.w	sl, [sp, #28]
 801802c:	fb07 0704 	mla	r7, r7, r4, r0
 8018030:	ee17 0a10 	vmov	r0, s14
 8018034:	fb06 0604 	mla	r6, r6, r4, r0
 8018038:	980c      	ldr	r0, [sp, #48]	; 0x30
 801803a:	9702      	str	r7, [sp, #8]
 801803c:	e9cd 3600 	strd	r3, r6, [sp]
 8018040:	ebae 0304 	sub.w	r3, lr, r4
 8018044:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8018048:	47a8      	blx	r5
 801804a:	b011      	add	sp, #68	; 0x44
 801804c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018050:	462c      	mov	r4, r5
 8018052:	e797      	b.n	8017f84 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

08018054 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8018054:	b570      	push	{r4, r5, r6, lr}
 8018056:	4604      	mov	r4, r0
 8018058:	2500      	movs	r5, #0
 801805a:	9804      	ldr	r0, [sp, #16]
 801805c:	7223      	strb	r3, [r4, #8]
 801805e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8018062:	8025      	strh	r5, [r4, #0]
 8018064:	6061      	str	r1, [r4, #4]
 8018066:	7263      	strb	r3, [r4, #9]
 8018068:	60e0      	str	r0, [r4, #12]
 801806a:	8222      	strh	r2, [r4, #16]
 801806c:	8265      	strh	r5, [r4, #18]
 801806e:	82a5      	strh	r5, [r4, #20]
 8018070:	82e5      	strh	r5, [r4, #22]
 8018072:	8325      	strh	r5, [r4, #24]
 8018074:	8365      	strh	r5, [r4, #26]
 8018076:	83a5      	strh	r5, [r4, #28]
 8018078:	77a5      	strb	r5, [r4, #30]
 801807a:	6803      	ldr	r3, [r0, #0]
 801807c:	695b      	ldr	r3, [r3, #20]
 801807e:	4798      	blx	r3
 8018080:	4606      	mov	r6, r0
 8018082:	b1f8      	cbz	r0, 80180c4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8018084:	68e0      	ldr	r0, [r4, #12]
 8018086:	4631      	mov	r1, r6
 8018088:	6803      	ldr	r3, [r0, #0]
 801808a:	68db      	ldr	r3, [r3, #12]
 801808c:	4798      	blx	r3
 801808e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8018092:	4605      	mov	r5, r0
 8018094:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018098:	7a83      	ldrb	r3, [r0, #10]
 801809a:	4313      	orrs	r3, r2
 801809c:	83a3      	strh	r3, [r4, #28]
 801809e:	7a63      	ldrb	r3, [r4, #9]
 80180a0:	2b04      	cmp	r3, #4
 80180a2:	d10f      	bne.n	80180c4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 80180a4:	68e0      	ldr	r0, [r4, #12]
 80180a6:	462a      	mov	r2, r5
 80180a8:	4631      	mov	r1, r6
 80180aa:	6803      	ldr	r3, [r0, #0]
 80180ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80180ae:	4798      	blx	r3
 80180b0:	f995 300d 	ldrsb.w	r3, [r5, #13]
 80180b4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80180b8:	7aab      	ldrb	r3, [r5, #10]
 80180ba:	4313      	orrs	r3, r2
 80180bc:	4418      	add	r0, r3
 80180be:	8ba3      	ldrh	r3, [r4, #28]
 80180c0:	4418      	add	r0, r3
 80180c2:	83a0      	strh	r0, [r4, #28]
 80180c4:	4620      	mov	r0, r4
 80180c6:	bd70      	pop	{r4, r5, r6, pc}

080180c8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80180c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180cc:	2400      	movs	r4, #0
 80180ce:	b085      	sub	sp, #20
 80180d0:	4681      	mov	r9, r0
 80180d2:	460f      	mov	r7, r1
 80180d4:	4692      	mov	sl, r2
 80180d6:	469b      	mov	fp, r3
 80180d8:	46a0      	mov	r8, r4
 80180da:	4626      	mov	r6, r4
 80180dc:	4554      	cmp	r4, sl
 80180de:	da21      	bge.n	8018124 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 80180e0:	2300      	movs	r3, #0
 80180e2:	463a      	mov	r2, r7
 80180e4:	4659      	mov	r1, fp
 80180e6:	4648      	mov	r0, r9
 80180e8:	9303      	str	r3, [sp, #12]
 80180ea:	ab03      	add	r3, sp, #12
 80180ec:	f002 fc2a 	bl	801a944 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80180f0:	4605      	mov	r5, r0
 80180f2:	b1b8      	cbz	r0, 8018124 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 80180f4:	280a      	cmp	r0, #10
 80180f6:	d015      	beq.n	8018124 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 80180f8:	9a03      	ldr	r2, [sp, #12]
 80180fa:	b182      	cbz	r2, 801811e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 80180fc:	f992 000d 	ldrsb.w	r0, [r2, #13]
 8018100:	4641      	mov	r1, r8
 8018102:	7a93      	ldrb	r3, [r2, #10]
 8018104:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8018108:	8895      	ldrh	r5, [r2, #4]
 801810a:	4303      	orrs	r3, r0
 801810c:	4638      	mov	r0, r7
 801810e:	9301      	str	r3, [sp, #4]
 8018110:	683b      	ldr	r3, [r7, #0]
 8018112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018114:	4798      	blx	r3
 8018116:	9b01      	ldr	r3, [sp, #4]
 8018118:	4418      	add	r0, r3
 801811a:	4406      	add	r6, r0
 801811c:	b2b6      	uxth	r6, r6
 801811e:	3401      	adds	r4, #1
 8018120:	46a8      	mov	r8, r5
 8018122:	e7db      	b.n	80180dc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 8018124:	4630      	mov	r0, r6
 8018126:	b005      	add	sp, #20
 8018128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801812c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801812c:	2a02      	cmp	r2, #2
 801812e:	b530      	push	{r4, r5, lr}
 8018130:	d011      	beq.n	8018156 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8018132:	2a03      	cmp	r2, #3
 8018134:	d01c      	beq.n	8018170 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8018136:	2a01      	cmp	r2, #1
 8018138:	d10c      	bne.n	8018154 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801813a:	888b      	ldrh	r3, [r1, #4]
 801813c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8018140:	8801      	ldrh	r1, [r0, #0]
 8018142:	1a9b      	subs	r3, r3, r2
 8018144:	8844      	ldrh	r4, [r0, #2]
 8018146:	1a5b      	subs	r3, r3, r1
 8018148:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801814c:	8004      	strh	r4, [r0, #0]
 801814e:	8043      	strh	r3, [r0, #2]
 8018150:	8081      	strh	r1, [r0, #4]
 8018152:	80c2      	strh	r2, [r0, #6]
 8018154:	bd30      	pop	{r4, r5, pc}
 8018156:	88cb      	ldrh	r3, [r1, #6]
 8018158:	88c2      	ldrh	r2, [r0, #6]
 801815a:	1a9b      	subs	r3, r3, r2
 801815c:	8842      	ldrh	r2, [r0, #2]
 801815e:	1a9b      	subs	r3, r3, r2
 8018160:	888a      	ldrh	r2, [r1, #4]
 8018162:	8881      	ldrh	r1, [r0, #4]
 8018164:	8043      	strh	r3, [r0, #2]
 8018166:	1a52      	subs	r2, r2, r1
 8018168:	8801      	ldrh	r1, [r0, #0]
 801816a:	1a52      	subs	r2, r2, r1
 801816c:	8002      	strh	r2, [r0, #0]
 801816e:	e7f1      	b.n	8018154 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8018170:	88cb      	ldrh	r3, [r1, #6]
 8018172:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8018176:	8841      	ldrh	r1, [r0, #2]
 8018178:	1a9b      	subs	r3, r3, r2
 801817a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801817e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8018182:	1a5b      	subs	r3, r3, r1
 8018184:	8045      	strh	r5, [r0, #2]
 8018186:	8082      	strh	r2, [r0, #4]
 8018188:	8003      	strh	r3, [r0, #0]
 801818a:	80c4      	strh	r4, [r0, #6]
 801818c:	e7e2      	b.n	8018154 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

08018190 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 8018190:	b570      	push	{r4, r5, r6, lr}
 8018192:	b086      	sub	sp, #24
 8018194:	ac02      	add	r4, sp, #8
 8018196:	e884 0006 	stmia.w	r4, {r1, r2}
 801819a:	461a      	mov	r2, r3
 801819c:	ab0c      	add	r3, sp, #48	; 0x30
 801819e:	9305      	str	r3, [sp, #20]
 80181a0:	4b0a      	ldr	r3, [pc, #40]	; (80181cc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 80181a2:	685d      	ldr	r5, [r3, #4]
 80181a4:	1069      	asrs	r1, r5, #1
 80181a6:	07ed      	lsls	r5, r5, #31
 80181a8:	eb00 0601 	add.w	r6, r0, r1
 80181ac:	bf46      	itte	mi
 80181ae:	681b      	ldrmi	r3, [r3, #0]
 80181b0:	5841      	ldrmi	r1, [r0, r1]
 80181b2:	681d      	ldrpl	r5, [r3, #0]
 80181b4:	4630      	mov	r0, r6
 80181b6:	bf48      	it	mi
 80181b8:	58cd      	ldrmi	r5, [r1, r3]
 80181ba:	4621      	mov	r1, r4
 80181bc:	9b05      	ldr	r3, [sp, #20]
 80181be:	9301      	str	r3, [sp, #4]
 80181c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80181c2:	9300      	str	r3, [sp, #0]
 80181c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181c6:	47a8      	blx	r5
 80181c8:	b006      	add	sp, #24
 80181ca:	bd70      	pop	{r4, r5, r6, pc}
 80181cc:	20000040 	.word	0x20000040

080181d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80181d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181d4:	b09d      	sub	sp, #116	; 0x74
 80181d6:	9114      	str	r1, [sp, #80]	; 0x50
 80181d8:	9315      	str	r3, [sp, #84]	; 0x54
 80181da:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80181dc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80181de:	8809      	ldrh	r1, [r1, #0]
 80181e0:	889b      	ldrh	r3, [r3, #4]
 80181e2:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 80181e4:	440b      	add	r3, r1
 80181e6:	9210      	str	r2, [sp, #64]	; 0x40
 80181e8:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 80181ec:	b21b      	sxth	r3, r3
 80181ee:	900f      	str	r0, [sp, #60]	; 0x3c
 80181f0:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 80181f4:	930e      	str	r3, [sp, #56]	; 0x38
 80181f6:	6833      	ldr	r3, [r6, #0]
 80181f8:	7a59      	ldrb	r1, [r3, #9]
 80181fa:	7a1b      	ldrb	r3, [r3, #8]
 80181fc:	9113      	str	r1, [sp, #76]	; 0x4c
 80181fe:	9312      	str	r3, [sp, #72]	; 0x48
 8018200:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018202:	f9b3 4000 	ldrsh.w	r4, [r3]
 8018206:	2a00      	cmp	r2, #0
 8018208:	d059      	beq.n	80182be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 801820a:	7c33      	ldrb	r3, [r6, #16]
 801820c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801820e:	2b04      	cmp	r3, #4
 8018210:	bf14      	ite	ne
 8018212:	2301      	movne	r3, #1
 8018214:	2302      	moveq	r3, #2
 8018216:	4413      	add	r3, r2
 8018218:	f04f 0800 	mov.w	r8, #0
 801821c:	930d      	str	r3, [sp, #52]	; 0x34
 801821e:	4645      	mov	r5, r8
 8018220:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8018224:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8018228:	4293      	cmp	r3, r2
 801822a:	da75      	bge.n	8018318 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 801822c:	2300      	movs	r3, #0
 801822e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8018230:	6832      	ldr	r2, [r6, #0]
 8018232:	931a      	str	r3, [sp, #104]	; 0x68
 8018234:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018236:	428b      	cmp	r3, r1
 8018238:	db43      	blt.n	80182c2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 801823a:	6813      	ldr	r3, [r2, #0]
 801823c:	4610      	mov	r0, r2
 801823e:	695b      	ldr	r3, [r3, #20]
 8018240:	4798      	blx	r3
 8018242:	4681      	mov	r9, r0
 8018244:	6830      	ldr	r0, [r6, #0]
 8018246:	aa1b      	add	r2, sp, #108	; 0x6c
 8018248:	4649      	mov	r1, r9
 801824a:	6803      	ldr	r3, [r0, #0]
 801824c:	689f      	ldr	r7, [r3, #8]
 801824e:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8018252:	47b8      	blx	r7
 8018254:	901a      	str	r0, [sp, #104]	; 0x68
 8018256:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 801825a:	45d1      	cmp	r9, sl
 801825c:	d045      	beq.n	80182ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801825e:	f242 070b 	movw	r7, #8203	; 0x200b
 8018262:	45b9      	cmp	r9, r7
 8018264:	d041      	beq.n	80182ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018266:	f1b9 0f00 	cmp.w	r9, #0
 801826a:	f000 80ee 	beq.w	801844a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801826e:	f1b9 0f0a 	cmp.w	r9, #10
 8018272:	d057      	beq.n	8018324 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8018274:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018276:	b383      	cbz	r3, 80182da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 8018278:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 801827c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801827e:	2a00      	cmp	r2, #0
 8018280:	f000 80d2 	beq.w	8018428 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 8018284:	f1bb 0f00 	cmp.w	fp, #0
 8018288:	d100      	bne.n	801828c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 801828a:	4444      	add	r4, r8
 801828c:	f992 800d 	ldrsb.w	r8, [r2, #13]
 8018290:	f1bb 0f01 	cmp.w	fp, #1
 8018294:	f408 7380 	and.w	r3, r8, #256	; 0x100
 8018298:	f892 800a 	ldrb.w	r8, [r2, #10]
 801829c:	ea48 0803 	orr.w	r8, r8, r3
 80182a0:	d128      	bne.n	80182f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 80182a2:	eba4 0408 	sub.w	r4, r4, r8
 80182a6:	2d00      	cmp	r5, #0
 80182a8:	d143      	bne.n	8018332 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 80182aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80182ac:	eb08 0304 	add.w	r3, r8, r4
 80182b0:	4413      	add	r3, r2
 80182b2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80182b4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80182b8:	4293      	cmp	r3, r2
 80182ba:	da44      	bge.n	8018346 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80182bc:	e02b      	b.n	8018316 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 80182be:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80182c0:	e7aa      	b.n	8018218 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 80182c2:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 80182c6:	4659      	mov	r1, fp
 80182c8:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80182ca:	9301      	str	r3, [sp, #4]
 80182cc:	ab1b      	add	r3, sp, #108	; 0x6c
 80182ce:	9300      	str	r3, [sp, #0]
 80182d0:	ab1a      	add	r3, sp, #104	; 0x68
 80182d2:	f002 fb6b 	bl	801a9ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80182d6:	4681      	mov	r9, r0
 80182d8:	e7bd      	b.n	8018256 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 80182da:	6830      	ldr	r0, [r6, #0]
 80182dc:	6803      	ldr	r3, [r0, #0]
 80182de:	691b      	ldr	r3, [r3, #16]
 80182e0:	4798      	blx	r3
 80182e2:	4550      	cmp	r0, sl
 80182e4:	d001      	beq.n	80182ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80182e6:	42b8      	cmp	r0, r7
 80182e8:	d1c8      	bne.n	801827c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 80182ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80182ec:	464d      	mov	r5, r9
 80182ee:	3301      	adds	r3, #1
 80182f0:	930c      	str	r3, [sp, #48]	; 0x30
 80182f2:	e797      	b.n	8018224 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 80182f4:	2d00      	cmp	r5, #0
 80182f6:	f000 80aa 	beq.w	801844e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 80182fa:	f1bb 0f00 	cmp.w	fp, #0
 80182fe:	d118      	bne.n	8018332 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8018300:	6830      	ldr	r0, [r6, #0]
 8018302:	4629      	mov	r1, r5
 8018304:	6803      	ldr	r3, [r0, #0]
 8018306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018308:	4798      	blx	r3
 801830a:	4404      	add	r4, r0
 801830c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801830e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018310:	1ae3      	subs	r3, r4, r3
 8018312:	4293      	cmp	r3, r2
 8018314:	dd17      	ble.n	8018346 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018316:	464d      	mov	r5, r9
 8018318:	2d00      	cmp	r5, #0
 801831a:	f000 8096 	beq.w	801844a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 801831e:	2d0a      	cmp	r5, #10
 8018320:	f040 8084 	bne.w	801842c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 8018324:	250a      	movs	r5, #10
 8018326:	fab5 f085 	clz	r0, r5
 801832a:	0940      	lsrs	r0, r0, #5
 801832c:	b01d      	add	sp, #116	; 0x74
 801832e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018332:	6830      	ldr	r0, [r6, #0]
 8018334:	4629      	mov	r1, r5
 8018336:	6803      	ldr	r3, [r0, #0]
 8018338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801833a:	4798      	blx	r3
 801833c:	f1bb 0f01 	cmp.w	fp, #1
 8018340:	eba4 0400 	sub.w	r4, r4, r0
 8018344:	d0b1      	beq.n	80182aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8018346:	981a      	ldr	r0, [sp, #104]	; 0x68
 8018348:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801834a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801834e:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018352:	7b43      	ldrb	r3, [r0, #13]
 8018354:	4421      	add	r1, r4
 8018356:	015b      	lsls	r3, r3, #5
 8018358:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801835c:	7983      	ldrb	r3, [r0, #6]
 801835e:	4313      	orrs	r3, r2
 8018360:	440b      	add	r3, r1
 8018362:	42ab      	cmp	r3, r5
 8018364:	dbc1      	blt.n	80182ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018368:	4299      	cmp	r1, r3
 801836a:	dabe      	bge.n	80182ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801836c:	6830      	ldr	r0, [r6, #0]
 801836e:	42a5      	cmp	r5, r4
 8018370:	6803      	ldr	r3, [r0, #0]
 8018372:	bfcc      	ite	gt
 8018374:	1b2d      	subgt	r5, r5, r4
 8018376:	2500      	movle	r5, #0
 8018378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801837a:	bfc8      	it	gt
 801837c:	b2ad      	uxthgt	r5, r5
 801837e:	4798      	blx	r3
 8018380:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018382:	4935      	ldr	r1, [pc, #212]	; (8018458 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 8018384:	7b5a      	ldrb	r2, [r3, #13]
 8018386:	f893 e008 	ldrb.w	lr, [r3, #8]
 801838a:	f012 0f40 	tst.w	r2, #64	; 0x40
 801838e:	bf18      	it	ne
 8018390:	468c      	movne	ip, r1
 8018392:	9915      	ldr	r1, [sp, #84]	; 0x54
 8018394:	bf08      	it	eq
 8018396:	f04f 0c00 	moveq.w	ip, #0
 801839a:	4408      	add	r0, r1
 801839c:	00d1      	lsls	r1, r2, #3
 801839e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80183a2:	ea41 070e 	orr.w	r7, r1, lr
 80183a6:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80183a8:	ea4c 0707 	orr.w	r7, ip, r7
 80183ac:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80183b0:	1bc7      	subs	r7, r0, r7
 80183b2:	b2bf      	uxth	r7, r7
 80183b4:	fa0f fa87 	sxth.w	sl, r7
 80183b8:	4551      	cmp	r1, sl
 80183ba:	dd33      	ble.n	8018424 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 80183bc:	0112      	lsls	r2, r2, #4
 80183be:	79d8      	ldrb	r0, [r3, #7]
 80183c0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80183c4:	4302      	orrs	r2, r0
 80183c6:	4492      	add	sl, r2
 80183c8:	4551      	cmp	r1, sl
 80183ca:	dc8e      	bgt.n	80182ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80183cc:	1bcf      	subs	r7, r1, r7
 80183ce:	468a      	mov	sl, r1
 80183d0:	b2bf      	uxth	r7, r7
 80183d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80183d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80183d6:	6830      	ldr	r0, [r6, #0]
 80183d8:	681a      	ldr	r2, [r3, #0]
 80183da:	6801      	ldr	r1, [r0, #0]
 80183dc:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80183de:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80183e0:	9311      	str	r3, [sp, #68]	; 0x44
 80183e2:	9216      	str	r2, [sp, #88]	; 0x58
 80183e4:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80183e6:	4788      	blx	r1
 80183e8:	79b1      	ldrb	r1, [r6, #6]
 80183ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80183ec:	910b      	str	r1, [sp, #44]	; 0x2c
 80183ee:	7bb1      	ldrb	r1, [r6, #14]
 80183f0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80183f2:	910a      	str	r1, [sp, #40]	; 0x28
 80183f4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 80183f8:	9109      	str	r1, [sp, #36]	; 0x24
 80183fa:	68b1      	ldr	r1, [r6, #8]
 80183fc:	9305      	str	r3, [sp, #20]
 80183fe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018400:	9206      	str	r2, [sp, #24]
 8018402:	e9cd a501 	strd	sl, r5, [sp, #4]
 8018406:	4425      	add	r5, r4
 8018408:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801840c:	b22d      	sxth	r5, r5
 801840e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018410:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8018414:	9500      	str	r5, [sp, #0]
 8018416:	9914      	ldr	r1, [sp, #80]	; 0x50
 8018418:	681a      	ldr	r2, [r3, #0]
 801841a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801841c:	685b      	ldr	r3, [r3, #4]
 801841e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018420:	47a8      	blx	r5
 8018422:	e762      	b.n	80182ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8018424:	2700      	movs	r7, #0
 8018426:	e7d4      	b.n	80183d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 8018428:	4690      	mov	r8, r2
 801842a:	e75e      	b.n	80182ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801842c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801842e:	3401      	adds	r4, #1
 8018430:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018432:	429c      	cmp	r4, r3
 8018434:	f6bf af77 	bge.w	8018326 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8018438:	4659      	mov	r1, fp
 801843a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801843c:	f002 fa42 	bl	801a8c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018440:	4605      	mov	r5, r0
 8018442:	b110      	cbz	r0, 801844a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8018444:	280a      	cmp	r0, #10
 8018446:	d1f2      	bne.n	801842e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 8018448:	e76c      	b.n	8018324 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801844a:	2500      	movs	r5, #0
 801844c:	e76b      	b.n	8018326 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 801844e:	f1bb 0f00 	cmp.w	fp, #0
 8018452:	f43f af5b 	beq.w	801830c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 8018456:	e776      	b.n	8018346 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8018458:	fffffe00 	.word	0xfffffe00

0801845c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801845c:	b530      	push	{r4, r5, lr}
 801845e:	8a44      	ldrh	r4, [r0, #18]
 8018460:	8ac5      	ldrh	r5, [r0, #22]
 8018462:	82c3      	strh	r3, [r0, #22]
 8018464:	442c      	add	r4, r5
 8018466:	1ae4      	subs	r4, r4, r3
 8018468:	8b03      	ldrh	r3, [r0, #24]
 801846a:	8244      	strh	r4, [r0, #18]
 801846c:	8a84      	ldrh	r4, [r0, #20]
 801846e:	4422      	add	r2, r4
 8018470:	440c      	add	r4, r1
 8018472:	1a59      	subs	r1, r3, r1
 8018474:	8342      	strh	r2, [r0, #26]
 8018476:	8284      	strh	r4, [r0, #20]
 8018478:	8301      	strh	r1, [r0, #24]
 801847a:	bd30      	pop	{r4, r5, pc}

0801847c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801847c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018480:	7a45      	ldrb	r5, [r0, #9]
 8018482:	b085      	sub	sp, #20
 8018484:	4604      	mov	r4, r0
 8018486:	4689      	mov	r9, r1
 8018488:	1eeb      	subs	r3, r5, #3
 801848a:	b2db      	uxtb	r3, r3
 801848c:	b329      	cbz	r1, 80184da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 801848e:	2b01      	cmp	r3, #1
 8018490:	d921      	bls.n	80184d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 8018492:	1e69      	subs	r1, r5, #1
 8018494:	f1d1 0b00 	rsbs	fp, r1, #0
 8018498:	eb4b 0b01 	adc.w	fp, fp, r1
 801849c:	1eaa      	subs	r2, r5, #2
 801849e:	2500      	movs	r5, #0
 80184a0:	4253      	negs	r3, r2
 80184a2:	9500      	str	r5, [sp, #0]
 80184a4:	4153      	adcs	r3, r2
 80184a6:	9301      	str	r3, [sp, #4]
 80184a8:	2600      	movs	r6, #0
 80184aa:	f242 080b 	movw	r8, #8203	; 0x200b
 80184ae:	8266      	strh	r6, [r4, #18]
 80184b0:	82a6      	strh	r6, [r4, #20]
 80184b2:	2300      	movs	r3, #0
 80184b4:	68e2      	ldr	r2, [r4, #12]
 80184b6:	7a21      	ldrb	r1, [r4, #8]
 80184b8:	9303      	str	r3, [sp, #12]
 80184ba:	ab03      	add	r3, sp, #12
 80184bc:	6860      	ldr	r0, [r4, #4]
 80184be:	8827      	ldrh	r7, [r4, #0]
 80184c0:	f002 fa40 	bl	801a944 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80184c4:	8020      	strh	r0, [r4, #0]
 80184c6:	b9b0      	cbnz	r0, 80184f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 80184c8:	8b22      	ldrh	r2, [r4, #24]
 80184ca:	2300      	movs	r3, #0
 80184cc:	4611      	mov	r1, r2
 80184ce:	4620      	mov	r0, r4
 80184d0:	f7ff ffc4 	bl	801845c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80184d4:	e062      	b.n	801859c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 80184d6:	468b      	mov	fp, r1
 80184d8:	e7e0      	b.n	801849c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 80184da:	2b01      	cmp	r3, #1
 80184dc:	f105 35ff 	add.w	r5, r5, #4294967295
 80184e0:	9101      	str	r1, [sp, #4]
 80184e2:	468b      	mov	fp, r1
 80184e4:	bf8c      	ite	hi
 80184e6:	2300      	movhi	r3, #0
 80184e8:	2301      	movls	r3, #1
 80184ea:	2d01      	cmp	r5, #1
 80184ec:	9300      	str	r3, [sp, #0]
 80184ee:	bf8c      	ite	hi
 80184f0:	2500      	movhi	r5, #0
 80184f2:	2501      	movls	r5, #1
 80184f4:	e7d8      	b.n	80184a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 80184f6:	8ae3      	ldrh	r3, [r4, #22]
 80184f8:	280a      	cmp	r0, #10
 80184fa:	f103 0301 	add.w	r3, r3, #1
 80184fe:	82e3      	strh	r3, [r4, #22]
 8018500:	d0e2      	beq.n	80184c8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 8018502:	9a03      	ldr	r2, [sp, #12]
 8018504:	b972      	cbnz	r2, 8018524 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 8018506:	4540      	cmp	r0, r8
 8018508:	d1d3      	bne.n	80184b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801850a:	8823      	ldrh	r3, [r4, #0]
 801850c:	8b21      	ldrh	r1, [r4, #24]
 801850e:	2b20      	cmp	r3, #32
 8018510:	d001      	beq.n	8018516 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 8018512:	4543      	cmp	r3, r8
 8018514:	d11d      	bne.n	8018552 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8018516:	2f20      	cmp	r7, #32
 8018518:	d002      	beq.n	8018520 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801851a:	4547      	cmp	r7, r8
 801851c:	bf18      	it	ne
 801851e:	460e      	movne	r6, r1
 8018520:	2001      	movs	r0, #1
 8018522:	e017      	b.n	8018554 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 8018524:	4540      	cmp	r0, r8
 8018526:	d012      	beq.n	801854e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 8018528:	8893      	ldrh	r3, [r2, #4]
 801852a:	4639      	mov	r1, r7
 801852c:	8023      	strh	r3, [r4, #0]
 801852e:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 8018532:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 8018536:	f892 a00a 	ldrb.w	sl, [r2, #10]
 801853a:	ea4a 0a00 	orr.w	sl, sl, r0
 801853e:	68e0      	ldr	r0, [r4, #12]
 8018540:	6803      	ldr	r3, [r0, #0]
 8018542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018544:	4798      	blx	r3
 8018546:	eb0a 0200 	add.w	r2, sl, r0
 801854a:	b292      	uxth	r2, r2
 801854c:	e7dd      	b.n	801850a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 801854e:	2200      	movs	r2, #0
 8018550:	e7db      	b.n	801850a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8018552:	2000      	movs	r0, #0
 8018554:	440a      	add	r2, r1
 8018556:	8aa3      	ldrh	r3, [r4, #20]
 8018558:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801855c:	b292      	uxth	r2, r2
 801855e:	8322      	strh	r2, [r4, #24]
 8018560:	4413      	add	r3, r2
 8018562:	f1b9 0f00 	cmp.w	r9, #0
 8018566:	d022      	beq.n	80185ae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 8018568:	f1bb 0f00 	cmp.w	fp, #0
 801856c:	d102      	bne.n	8018574 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 801856e:	9901      	ldr	r1, [sp, #4]
 8018570:	b149      	cbz	r1, 8018586 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8018572:	b140      	cbz	r0, 8018586 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8018574:	8ba1      	ldrh	r1, [r4, #28]
 8018576:	4419      	add	r1, r3
 8018578:	458c      	cmp	ip, r1
 801857a:	da12      	bge.n	80185a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 801857c:	8a61      	ldrh	r1, [r4, #18]
 801857e:	b181      	cbz	r1, 80185a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8018580:	4563      	cmp	r3, ip
 8018582:	dd96      	ble.n	80184b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018584:	e004      	b.n	8018590 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 8018586:	4563      	cmp	r3, ip
 8018588:	dd93      	ble.n	80184b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801858a:	8a63      	ldrh	r3, [r4, #18]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d090      	beq.n	80184b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8018590:	2301      	movs	r3, #1
 8018592:	8ba2      	ldrh	r2, [r4, #28]
 8018594:	77a3      	strb	r3, [r4, #30]
 8018596:	8b63      	ldrh	r3, [r4, #26]
 8018598:	4413      	add	r3, r2
 801859a:	8363      	strh	r3, [r4, #26]
 801859c:	b005      	add	sp, #20
 801859e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185a2:	2300      	movs	r3, #0
 80185a4:	4611      	mov	r1, r2
 80185a6:	4620      	mov	r0, r4
 80185a8:	f7ff ff58 	bl	801845c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80185ac:	e781      	b.n	80184b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80185ae:	4563      	cmp	r3, ip
 80185b0:	dd16      	ble.n	80185e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 80185b2:	9b00      	ldr	r3, [sp, #0]
 80185b4:	b113      	cbz	r3, 80185bc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 80185b6:	2301      	movs	r3, #1
 80185b8:	460a      	mov	r2, r1
 80185ba:	e787      	b.n	80184cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 80185bc:	2d00      	cmp	r5, #0
 80185be:	f43f af78 	beq.w	80184b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80185c2:	2800      	cmp	r0, #0
 80185c4:	f47f af75 	bne.w	80184b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80185c8:	2f20      	cmp	r7, #32
 80185ca:	d001      	beq.n	80185d0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 80185cc:	4547      	cmp	r7, r8
 80185ce:	d102      	bne.n	80185d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 80185d0:	2301      	movs	r3, #1
 80185d2:	4632      	mov	r2, r6
 80185d4:	e77b      	b.n	80184ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 80185d6:	8a63      	ldrh	r3, [r4, #18]
 80185d8:	2b00      	cmp	r3, #0
 80185da:	f43f af6a 	beq.w	80184b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80185de:	e7dd      	b.n	801859c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 80185e0:	2800      	cmp	r0, #0
 80185e2:	f47f af66 	bne.w	80184b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80185e6:	2f20      	cmp	r7, #32
 80185e8:	d002      	beq.n	80185f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 80185ea:	4547      	cmp	r7, r8
 80185ec:	f47f af61 	bne.w	80184b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 80185f0:	2301      	movs	r3, #1
 80185f2:	4632      	mov	r2, r6
 80185f4:	e7d7      	b.n	80185a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

080185f6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80185f6:	b570      	push	{r4, r5, r6, lr}
 80185f8:	4606      	mov	r6, r0
 80185fa:	b08a      	sub	sp, #40	; 0x28
 80185fc:	4615      	mov	r5, r2
 80185fe:	b191      	cbz	r1, 8018626 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 8018600:	2401      	movs	r4, #1
 8018602:	e9cd 3100 	strd	r3, r1, [sp]
 8018606:	4613      	mov	r3, r2
 8018608:	4601      	mov	r1, r0
 801860a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801860e:	a802      	add	r0, sp, #8
 8018610:	f7ff fd20 	bl	8018054 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018614:	2100      	movs	r1, #0
 8018616:	a802      	add	r0, sp, #8
 8018618:	f7ff ff30 	bl	801847c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801861c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018620:	b173      	cbz	r3, 8018640 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8018622:	3401      	adds	r4, #1
 8018624:	e7f6      	b.n	8018614 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 8018626:	2401      	movs	r4, #1
 8018628:	4611      	mov	r1, r2
 801862a:	f002 f94b 	bl	801a8c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801862e:	280a      	cmp	r0, #10
 8018630:	4629      	mov	r1, r5
 8018632:	4630      	mov	r0, r6
 8018634:	bf08      	it	eq
 8018636:	3401      	addeq	r4, #1
 8018638:	f002 f944 	bl	801a8c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801863c:	2800      	cmp	r0, #0
 801863e:	d1f6      	bne.n	801862e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 8018640:	b2a0      	uxth	r0, r4
 8018642:	b00a      	add	sp, #40	; 0x28
 8018644:	bd70      	pop	{r4, r5, r6, pc}

08018646 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8018646:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801864a:	b0db      	sub	sp, #364	; 0x16c
 801864c:	468a      	mov	sl, r1
 801864e:	461c      	mov	r4, r3
 8018650:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 8018654:	9009      	str	r0, [sp, #36]	; 0x24
 8018656:	f1bb 0f00 	cmp.w	fp, #0
 801865a:	f000 80c7 	beq.w	80187ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	2b00      	cmp	r3, #0
 8018662:	f000 80c3 	beq.w	80187ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8018666:	7ba3      	ldrb	r3, [r4, #14]
 8018668:	2b00      	cmp	r3, #0
 801866a:	f000 80bf 	beq.w	80187ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 801866e:	af0c      	add	r7, sp, #48	; 0x30
 8018670:	6810      	ldr	r0, [r2, #0]
 8018672:	6851      	ldr	r1, [r2, #4]
 8018674:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 8018678:	463b      	mov	r3, r7
 801867a:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 801867e:	c303      	stmia	r3!, {r0, r1}
 8018680:	2100      	movs	r1, #0
 8018682:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 8018686:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801868a:	4638      	mov	r0, r7
 801868c:	910e      	str	r1, [sp, #56]	; 0x38
 801868e:	a90e      	add	r1, sp, #56	; 0x38
 8018690:	79a2      	ldrb	r2, [r4, #6]
 8018692:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8018696:	f7ff fd49 	bl	801812c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801869a:	a90e      	add	r1, sp, #56	; 0x38
 801869c:	79a2      	ldrb	r2, [r4, #6]
 801869e:	4608      	mov	r0, r1
 80186a0:	f7ff fd44 	bl	801812c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80186a4:	4648      	mov	r0, r9
 80186a6:	f001 ffcb 	bl	801a640 <_ZN8touchgfx12TextProviderC1Ev>
 80186aa:	6820      	ldr	r0, [r4, #0]
 80186ac:	6803      	ldr	r3, [r0, #0]
 80186ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80186b0:	4798      	blx	r3
 80186b2:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80186b4:	4603      	mov	r3, r0
 80186b6:	4659      	mov	r1, fp
 80186b8:	4648      	mov	r0, r9
 80186ba:	f001 ffde 	bl	801a67a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80186be:	a82e      	add	r0, sp, #184	; 0xb8
 80186c0:	f001 ffbe 	bl	801a640 <_ZN8touchgfx12TextProviderC1Ev>
 80186c4:	f894 8004 	ldrb.w	r8, [r4, #4]
 80186c8:	f1b8 0f00 	cmp.w	r8, #0
 80186cc:	d009      	beq.n	80186e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 80186ce:	6820      	ldr	r0, [r4, #0]
 80186d0:	6803      	ldr	r3, [r0, #0]
 80186d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80186d4:	4798      	blx	r3
 80186d6:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80186d8:	4603      	mov	r3, r0
 80186da:	4659      	mov	r1, fp
 80186dc:	a82e      	add	r0, sp, #184	; 0xb8
 80186de:	f001 ffcc 	bl	801a67a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80186e2:	6820      	ldr	r0, [r4, #0]
 80186e4:	6803      	ldr	r3, [r0, #0]
 80186e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80186e8:	4798      	blx	r3
 80186ea:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80186ee:	182e      	adds	r6, r5, r0
 80186f0:	2e00      	cmp	r6, #0
 80186f2:	dd45      	ble.n	8018780 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 80186f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80186f8:	4283      	cmp	r3, r0
 80186fa:	db41      	blt.n	8018780 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 80186fc:	441d      	add	r5, r3
 80186fe:	fb95 f5f6 	sdiv	r5, r5, r6
 8018702:	a844      	add	r0, sp, #272	; 0x110
 8018704:	f001 ff9c 	bl	801a640 <_ZN8touchgfx12TextProviderC1Ev>
 8018708:	7c23      	ldrb	r3, [r4, #16]
 801870a:	b14b      	cbz	r3, 8018720 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 801870c:	6820      	ldr	r0, [r4, #0]
 801870e:	6803      	ldr	r3, [r0, #0]
 8018710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018712:	4798      	blx	r3
 8018714:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8018716:	4603      	mov	r3, r0
 8018718:	4659      	mov	r1, fp
 801871a:	a844      	add	r0, sp, #272	; 0x110
 801871c:	f001 ffad 	bl	801a67a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8018720:	7c21      	ldrb	r1, [r4, #16]
 8018722:	a810      	add	r0, sp, #64	; 0x40
 8018724:	7963      	ldrb	r3, [r4, #5]
 8018726:	9101      	str	r1, [sp, #4]
 8018728:	6821      	ldr	r1, [r4, #0]
 801872a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801872e:	9100      	str	r1, [sp, #0]
 8018730:	a944      	add	r1, sp, #272	; 0x110
 8018732:	f7ff fc8f 	bl	8018054 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8018736:	7c23      	ldrb	r3, [r4, #16]
 8018738:	bb23      	cbnz	r3, 8018784 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 801873a:	fa1f fb86 	uxth.w	fp, r6
 801873e:	2d00      	cmp	r5, #0
 8018740:	dd57      	ble.n	80187f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8018742:	7961      	ldrb	r1, [r4, #5]
 8018744:	4648      	mov	r0, r9
 8018746:	f002 f8bd 	bl	801a8c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801874a:	4603      	mov	r3, r0
 801874c:	f1b8 0f00 	cmp.w	r8, #0
 8018750:	d005      	beq.n	801875e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 8018752:	9008      	str	r0, [sp, #32]
 8018754:	a82e      	add	r0, sp, #184	; 0xb8
 8018756:	7961      	ldrb	r1, [r4, #5]
 8018758:	f002 f8b4 	bl	801a8c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801875c:	9b08      	ldr	r3, [sp, #32]
 801875e:	2b00      	cmp	r3, #0
 8018760:	d044      	beq.n	80187ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8018762:	2b0a      	cmp	r3, #10
 8018764:	d1eb      	bne.n	801873e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8018766:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801876a:	3d01      	subs	r5, #1
 801876c:	445b      	add	r3, fp
 801876e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8018772:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8018776:	eba3 030b 	sub.w	r3, r3, fp
 801877a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801877e:	e7de      	b.n	801873e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8018780:	2500      	movs	r5, #0
 8018782:	e7be      	b.n	8018702 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 8018784:	0073      	lsls	r3, r6, #1
 8018786:	9308      	str	r3, [sp, #32]
 8018788:	2d00      	cmp	r5, #0
 801878a:	dd32      	ble.n	80187f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 801878c:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8018790:	a810      	add	r0, sp, #64	; 0x40
 8018792:	9b08      	ldr	r3, [sp, #32]
 8018794:	428b      	cmp	r3, r1
 8018796:	bfd4      	ite	le
 8018798:	2100      	movle	r1, #0
 801879a:	2101      	movgt	r1, #1
 801879c:	f7ff fe6e 	bl	801847c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80187a0:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 80187a4:	f10b 33ff 	add.w	r3, fp, #4294967295
 80187a8:	fa1f fb83 	uxth.w	fp, r3
 80187ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80187b0:	459b      	cmp	fp, r3
 80187b2:	d00b      	beq.n	80187cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 80187b4:	7961      	ldrb	r1, [r4, #5]
 80187b6:	4648      	mov	r0, r9
 80187b8:	f002 f884 	bl	801a8c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80187bc:	f1b8 0f00 	cmp.w	r8, #0
 80187c0:	d0f0      	beq.n	80187a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 80187c2:	7961      	ldrb	r1, [r4, #5]
 80187c4:	a82e      	add	r0, sp, #184	; 0xb8
 80187c6:	f002 f87d 	bl	801a8c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80187ca:	e7eb      	b.n	80187a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 80187cc:	b2b3      	uxth	r3, r6
 80187ce:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80187d2:	3d01      	subs	r5, #1
 80187d4:	441a      	add	r2, r3
 80187d6:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 80187da:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 80187de:	1ad3      	subs	r3, r2, r3
 80187e0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80187e4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d1cd      	bne.n	8018788 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 80187ec:	b05b      	add	sp, #364	; 0x16c
 80187ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187f2:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 80187f6:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 80187fa:	7c23      	ldrb	r3, [r4, #16]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d05f      	beq.n	80188c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 8018800:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8018804:	a810      	add	r0, sp, #64	; 0x40
 8018806:	458b      	cmp	fp, r1
 8018808:	bfd4      	ite	le
 801880a:	2100      	movle	r1, #0
 801880c:	2101      	movgt	r1, #1
 801880e:	f7ff fe35 	bl	801847c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018812:	f1b8 0f00 	cmp.w	r8, #0
 8018816:	d04c      	beq.n	80188b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8018818:	7c23      	ldrb	r3, [r4, #16]
 801881a:	2b00      	cmp	r3, #0
 801881c:	d053      	beq.n	80188c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 801881e:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8018822:	7922      	ldrb	r2, [r4, #4]
 8018824:	2a01      	cmp	r2, #1
 8018826:	d13c      	bne.n	80188a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8018828:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 801882c:	1ac0      	subs	r0, r0, r3
 801882e:	2302      	movs	r3, #2
 8018830:	fb90 f0f3 	sdiv	r0, r0, r3
 8018834:	b200      	sxth	r0, r0
 8018836:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801883a:	4418      	add	r0, r3
 801883c:	7c23      	ldrb	r3, [r4, #16]
 801883e:	8028      	strh	r0, [r5, #0]
 8018840:	2b00      	cmp	r3, #0
 8018842:	d03a      	beq.n	80188ba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 8018844:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8018848:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 801884c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8018850:	f8cd 9010 	str.w	r9, [sp, #16]
 8018854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018856:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801885a:	2200      	movs	r2, #0
 801885c:	2100      	movs	r1, #0
 801885e:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8018862:	e9cd 5700 	strd	r5, r7, [sp]
 8018866:	4652      	mov	r2, sl
 8018868:	f7ff fcb2 	bl	80181d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801886c:	2800      	cmp	r0, #0
 801886e:	d1bd      	bne.n	80187ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8018870:	b2b2      	uxth	r2, r6
 8018872:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8018876:	4611      	mov	r1, r2
 8018878:	4413      	add	r3, r2
 801887a:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 801887e:	b21b      	sxth	r3, r3
 8018880:	1a52      	subs	r2, r2, r1
 8018882:	7c21      	ldrb	r1, [r4, #16]
 8018884:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8018888:	b212      	sxth	r2, r2
 801888a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801888e:	b109      	cbz	r1, 8018894 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8018890:	42b2      	cmp	r2, r6
 8018892:	dbab      	blt.n	80187ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8018894:	887a      	ldrh	r2, [r7, #2]
 8018896:	88f9      	ldrh	r1, [r7, #6]
 8018898:	440a      	add	r2, r1
 801889a:	b212      	sxth	r2, r2
 801889c:	4293      	cmp	r3, r2
 801889e:	ddac      	ble.n	80187fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 80188a0:	e7a4      	b.n	80187ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80188a2:	2a02      	cmp	r2, #2
 80188a4:	d107      	bne.n	80188b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 80188a6:	7be2      	ldrb	r2, [r4, #15]
 80188a8:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 80188ac:	1a80      	subs	r0, r0, r2
 80188ae:	1ac0      	subs	r0, r0, r3
 80188b0:	e7c0      	b.n	8018834 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 80188b2:	7be0      	ldrb	r0, [r4, #15]
 80188b4:	e7bf      	b.n	8018836 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 80188b6:	2000      	movs	r0, #0
 80188b8:	e7bd      	b.n	8018836 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 80188ba:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80188be:	e7c3      	b.n	8018848 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 80188c0:	f1b8 0f00 	cmp.w	r8, #0
 80188c4:	d0f5      	beq.n	80188b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 80188c6:	2300      	movs	r3, #0
 80188c8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80188cc:	6821      	ldr	r1, [r4, #0]
 80188ce:	a82e      	add	r0, sp, #184	; 0xb8
 80188d0:	f7ff fbfa 	bl	80180c8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80188d4:	b203      	sxth	r3, r0
 80188d6:	e7a4      	b.n	8018822 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

080188d8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80188d8:	2b02      	cmp	r3, #2
 80188da:	b510      	push	{r4, lr}
 80188dc:	f9b0 4000 	ldrsh.w	r4, [r0]
 80188e0:	d00b      	beq.n	80188fa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 80188e2:	2b03      	cmp	r3, #3
 80188e4:	d00e      	beq.n	8018904 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 80188e6:	2b01      	cmp	r3, #1
 80188e8:	d001      	beq.n	80188ee <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 80188ea:	1860      	adds	r0, r4, r1
 80188ec:	bd10      	pop	{r4, pc}
 80188ee:	8880      	ldrh	r0, [r0, #4]
 80188f0:	4420      	add	r0, r4
 80188f2:	b200      	sxth	r0, r0
 80188f4:	1a80      	subs	r0, r0, r2
 80188f6:	3801      	subs	r0, #1
 80188f8:	e7f8      	b.n	80188ec <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 80188fa:	8880      	ldrh	r0, [r0, #4]
 80188fc:	4420      	add	r0, r4
 80188fe:	b200      	sxth	r0, r0
 8018900:	1a40      	subs	r0, r0, r1
 8018902:	e7f8      	b.n	80188f6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8018904:	18a0      	adds	r0, r4, r2
 8018906:	e7f1      	b.n	80188ec <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08018908 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8018908:	2b02      	cmp	r3, #2
 801890a:	b510      	push	{r4, lr}
 801890c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8018910:	d006      	beq.n	8018920 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8018912:	2b03      	cmp	r3, #3
 8018914:	d00a      	beq.n	801892c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8018916:	2b01      	cmp	r3, #1
 8018918:	bf14      	ite	ne
 801891a:	18a0      	addne	r0, r4, r2
 801891c:	1860      	addeq	r0, r4, r1
 801891e:	bd10      	pop	{r4, pc}
 8018920:	88c0      	ldrh	r0, [r0, #6]
 8018922:	4420      	add	r0, r4
 8018924:	b200      	sxth	r0, r0
 8018926:	1a80      	subs	r0, r0, r2
 8018928:	3801      	subs	r0, #1
 801892a:	e7f8      	b.n	801891e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801892c:	88c0      	ldrh	r0, [r0, #6]
 801892e:	4420      	add	r0, r4
 8018930:	b200      	sxth	r0, r0
 8018932:	1a40      	subs	r0, r0, r1
 8018934:	e7f8      	b.n	8018928 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08018938 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8018938:	4b01      	ldr	r3, [pc, #4]	; (8018940 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801893a:	2200      	movs	r2, #0
 801893c:	601a      	str	r2, [r3, #0]
 801893e:	4770      	bx	lr
 8018940:	2000b2fc 	.word	0x2000b2fc

08018944 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 8018944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018946:	1e05      	subs	r5, r0, #0
 8018948:	f04f 0601 	mov.w	r6, #1
 801894c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8018950:	bfba      	itte	lt
 8018952:	f04f 37ff 	movlt.w	r7, #4294967295
 8018956:	426d      	neglt	r5, r5
 8018958:	2701      	movge	r7, #1
 801895a:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 801895e:	f1be 0f00 	cmp.w	lr, #0
 8018962:	bfbc      	itt	lt
 8018964:	f1ce 0e00 	rsblt	lr, lr, #0
 8018968:	427f      	neglt	r7, r7
 801896a:	2c00      	cmp	r4, #0
 801896c:	fa4e f001 	asr.w	r0, lr, r1
 8018970:	fa06 f101 	lsl.w	r1, r6, r1
 8018974:	bfbc      	itt	lt
 8018976:	4264      	neglt	r4, r4
 8018978:	427f      	neglt	r7, r7
 801897a:	3901      	subs	r1, #1
 801897c:	ea01 010e 	and.w	r1, r1, lr
 8018980:	434d      	muls	r5, r1
 8018982:	f8dc 1000 	ldr.w	r1, [ip]
 8018986:	fb03 1300 	mla	r3, r3, r0, r1
 801898a:	fb95 f1f4 	sdiv	r1, r5, r4
 801898e:	fb04 5511 	mls	r5, r4, r1, r5
 8018992:	441d      	add	r5, r3
 8018994:	fb95 f3f4 	sdiv	r3, r5, r4
 8018998:	4419      	add	r1, r3
 801899a:	fb04 5413 	mls	r4, r4, r3, r5
 801899e:	fb02 1000 	mla	r0, r2, r0, r1
 80189a2:	f8cc 4000 	str.w	r4, [ip]
 80189a6:	4378      	muls	r0, r7
 80189a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080189ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80189ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189b0:	4c24      	ldr	r4, [pc, #144]	; (8018a44 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 80189b2:	b086      	sub	sp, #24
 80189b4:	4605      	mov	r5, r0
 80189b6:	6807      	ldr	r7, [r0, #0]
 80189b8:	69a3      	ldr	r3, [r4, #24]
 80189ba:	b92b      	cbnz	r3, 80189c8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 80189bc:	6840      	ldr	r0, [r0, #4]
 80189be:	e9c5 7000 	strd	r7, r0, [r5]
 80189c2:	b006      	add	sp, #24
 80189c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189c8:	f04f 0802 	mov.w	r8, #2
 80189cc:	68a2      	ldr	r2, [r4, #8]
 80189ce:	ae06      	add	r6, sp, #24
 80189d0:	6820      	ldr	r0, [r4, #0]
 80189d2:	fb93 f1f8 	sdiv	r1, r3, r8
 80189d6:	440a      	add	r2, r1
 80189d8:	69e1      	ldr	r1, [r4, #28]
 80189da:	f846 2d04 	str.w	r2, [r6, #-4]!
 80189de:	9700      	str	r7, [sp, #0]
 80189e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80189e2:	e9cd 3601 	strd	r3, r6, [sp, #4]
 80189e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80189e8:	f7ff ffac 	bl	8018944 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80189ec:	69a3      	ldr	r3, [r4, #24]
 80189ee:	4607      	mov	r7, r0
 80189f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80189f2:	9301      	str	r3, [sp, #4]
 80189f4:	686b      	ldr	r3, [r5, #4]
 80189f6:	6a21      	ldr	r1, [r4, #32]
 80189f8:	9300      	str	r3, [sp, #0]
 80189fa:	9602      	str	r6, [sp, #8]
 80189fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80189fe:	6860      	ldr	r0, [r4, #4]
 8018a00:	f7ff ffa0 	bl	8018944 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018a04:	69a2      	ldr	r2, [r4, #24]
 8018a06:	6963      	ldr	r3, [r4, #20]
 8018a08:	4407      	add	r7, r0
 8018a0a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018a0c:	68e0      	ldr	r0, [r4, #12]
 8018a0e:	fb92 f8f8 	sdiv	r8, r2, r8
 8018a12:	4443      	add	r3, r8
 8018a14:	9305      	str	r3, [sp, #20]
 8018a16:	682b      	ldr	r3, [r5, #0]
 8018a18:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8018a1c:	9300      	str	r3, [sp, #0]
 8018a1e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8018a20:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018a22:	f7ff ff8f 	bl	8018944 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018a26:	69a3      	ldr	r3, [r4, #24]
 8018a28:	4680      	mov	r8, r0
 8018a2a:	9602      	str	r6, [sp, #8]
 8018a2c:	9301      	str	r3, [sp, #4]
 8018a2e:	686b      	ldr	r3, [r5, #4]
 8018a30:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018a32:	9300      	str	r3, [sp, #0]
 8018a34:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8018a36:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8018a38:	6920      	ldr	r0, [r4, #16]
 8018a3a:	f7ff ff83 	bl	8018944 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8018a3e:	4440      	add	r0, r8
 8018a40:	e7bd      	b.n	80189be <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 8018a42:	bf00      	nop
 8018a44:	2000b300 	.word	0x2000b300

08018a48 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8018a48:	4b07      	ldr	r3, [pc, #28]	; (8018a68 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8018a4a:	b510      	push	{r4, lr}
 8018a4c:	781b      	ldrb	r3, [r3, #0]
 8018a4e:	2b01      	cmp	r3, #1
 8018a50:	d108      	bne.n	8018a64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8018a52:	4b06      	ldr	r3, [pc, #24]	; (8018a6c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8018a54:	880c      	ldrh	r4, [r1, #0]
 8018a56:	881b      	ldrh	r3, [r3, #0]
 8018a58:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018a5c:	3b01      	subs	r3, #1
 8018a5e:	1b1b      	subs	r3, r3, r4
 8018a60:	8003      	strh	r3, [r0, #0]
 8018a62:	800a      	strh	r2, [r1, #0]
 8018a64:	bd10      	pop	{r4, pc}
 8018a66:	bf00      	nop
 8018a68:	2000b2cc 	.word	0x2000b2cc
 8018a6c:	2000b2d0 	.word	0x2000b2d0

08018a70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8018a70:	4b0a      	ldr	r3, [pc, #40]	; (8018a9c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8018a72:	b510      	push	{r4, lr}
 8018a74:	781b      	ldrb	r3, [r3, #0]
 8018a76:	2b01      	cmp	r3, #1
 8018a78:	d10e      	bne.n	8018a98 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8018a7a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018a7e:	8843      	ldrh	r3, [r0, #2]
 8018a80:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018a84:	18ca      	adds	r2, r1, r3
 8018a86:	4b06      	ldr	r3, [pc, #24]	; (8018aa0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8018a88:	8044      	strh	r4, [r0, #2]
 8018a8a:	881b      	ldrh	r3, [r3, #0]
 8018a8c:	1a9b      	subs	r3, r3, r2
 8018a8e:	8003      	strh	r3, [r0, #0]
 8018a90:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018a94:	8081      	strh	r1, [r0, #4]
 8018a96:	80c3      	strh	r3, [r0, #6]
 8018a98:	bd10      	pop	{r4, pc}
 8018a9a:	bf00      	nop
 8018a9c:	2000b2cc 	.word	0x2000b2cc
 8018aa0:	2000b2c8 	.word	0x2000b2c8

08018aa4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8018aa4:	4b07      	ldr	r3, [pc, #28]	; (8018ac4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8018aa6:	b510      	push	{r4, lr}
 8018aa8:	781b      	ldrb	r3, [r3, #0]
 8018aaa:	2b01      	cmp	r3, #1
 8018aac:	d108      	bne.n	8018ac0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8018aae:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018ab2:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018ab6:	8003      	strh	r3, [r0, #0]
 8018ab8:	8893      	ldrh	r3, [r2, #4]
 8018aba:	3b01      	subs	r3, #1
 8018abc:	1b1b      	subs	r3, r3, r4
 8018abe:	800b      	strh	r3, [r1, #0]
 8018ac0:	bd10      	pop	{r4, pc}
 8018ac2:	bf00      	nop
 8018ac4:	2000b2cc 	.word	0x2000b2cc

08018ac8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8018ac8:	4b08      	ldr	r3, [pc, #32]	; (8018aec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8018aca:	b513      	push	{r0, r1, r4, lr}
 8018acc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018ad0:	2400      	movs	r4, #0
 8018ad2:	4b07      	ldr	r3, [pc, #28]	; (8018af0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8018ad4:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018ad8:	466a      	mov	r2, sp
 8018ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018ade:	9400      	str	r4, [sp, #0]
 8018ae0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018ae4:	f7ff ffde 	bl	8018aa4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018ae8:	b002      	add	sp, #8
 8018aea:	bd10      	pop	{r4, pc}
 8018aec:	2000b2c8 	.word	0x2000b2c8
 8018af0:	2000b2ca 	.word	0x2000b2ca

08018af4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8018af4:	4b0a      	ldr	r3, [pc, #40]	; (8018b20 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8018af6:	460a      	mov	r2, r1
 8018af8:	b510      	push	{r4, lr}
 8018afa:	781b      	ldrb	r3, [r3, #0]
 8018afc:	2b01      	cmp	r3, #1
 8018afe:	d10d      	bne.n	8018b1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8018b00:	8881      	ldrh	r1, [r0, #4]
 8018b02:	8803      	ldrh	r3, [r0, #0]
 8018b04:	440b      	add	r3, r1
 8018b06:	4601      	mov	r1, r0
 8018b08:	3b01      	subs	r3, #1
 8018b0a:	f821 3b02 	strh.w	r3, [r1], #2
 8018b0e:	f7ff ffc9 	bl	8018aa4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8018b12:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018b16:	88c2      	ldrh	r2, [r0, #6]
 8018b18:	80c3      	strh	r3, [r0, #6]
 8018b1a:	8082      	strh	r2, [r0, #4]
 8018b1c:	bd10      	pop	{r4, pc}
 8018b1e:	bf00      	nop
 8018b20:	2000b2cc 	.word	0x2000b2cc

08018b24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8018b24:	4b09      	ldr	r3, [pc, #36]	; (8018b4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8018b26:	b507      	push	{r0, r1, r2, lr}
 8018b28:	2100      	movs	r1, #0
 8018b2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018b2e:	4b08      	ldr	r3, [pc, #32]	; (8018b50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8018b30:	9100      	str	r1, [sp, #0]
 8018b32:	4669      	mov	r1, sp
 8018b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b38:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018b3c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018b40:	f7ff ffd8 	bl	8018af4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018b44:	b003      	add	sp, #12
 8018b46:	f85d fb04 	ldr.w	pc, [sp], #4
 8018b4a:	bf00      	nop
 8018b4c:	2000b2c8 	.word	0x2000b2c8
 8018b50:	2000b2ca 	.word	0x2000b2ca

08018b54 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8018b54:	4b03      	ldr	r3, [pc, #12]	; (8018b64 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8018b56:	6818      	ldr	r0, [r3, #0]
 8018b58:	b110      	cbz	r0, 8018b60 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8018b5a:	6803      	ldr	r3, [r0, #0]
 8018b5c:	699b      	ldr	r3, [r3, #24]
 8018b5e:	4718      	bx	r3
 8018b60:	4770      	bx	lr
 8018b62:	bf00      	nop
 8018b64:	2000b350 	.word	0x2000b350

08018b68 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8018b68:	4770      	bx	lr
	...

08018b6c <_ZN8touchgfx11Application4drawEv>:
 8018b6c:	4b09      	ldr	r3, [pc, #36]	; (8018b94 <_ZN8touchgfx11Application4drawEv+0x28>)
 8018b6e:	b507      	push	{r0, r1, r2, lr}
 8018b70:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018b74:	2100      	movs	r1, #0
 8018b76:	4b08      	ldr	r3, [pc, #32]	; (8018b98 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8018b78:	9100      	str	r1, [sp, #0]
 8018b7a:	4669      	mov	r1, sp
 8018b7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b80:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018b84:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018b88:	6803      	ldr	r3, [r0, #0]
 8018b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b8c:	4798      	blx	r3
 8018b8e:	b003      	add	sp, #12
 8018b90:	f85d fb04 	ldr.w	pc, [sp], #4
 8018b94:	2000b2c8 	.word	0x2000b2c8
 8018b98:	2000b2ca 	.word	0x2000b2ca

08018b9c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8018b9c:	4b03      	ldr	r3, [pc, #12]	; (8018bac <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8018b9e:	6818      	ldr	r0, [r3, #0]
 8018ba0:	b110      	cbz	r0, 8018ba8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8018ba2:	6803      	ldr	r3, [r0, #0]
 8018ba4:	69db      	ldr	r3, [r3, #28]
 8018ba6:	4718      	bx	r3
 8018ba8:	4770      	bx	lr
 8018baa:	bf00      	nop
 8018bac:	2000b350 	.word	0x2000b350

08018bb0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8018bb0:	4b03      	ldr	r3, [pc, #12]	; (8018bc0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8018bb2:	6818      	ldr	r0, [r3, #0]
 8018bb4:	b110      	cbz	r0, 8018bbc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8018bb6:	6803      	ldr	r3, [r0, #0]
 8018bb8:	6a1b      	ldr	r3, [r3, #32]
 8018bba:	4718      	bx	r3
 8018bbc:	4770      	bx	lr
 8018bbe:	bf00      	nop
 8018bc0:	2000b350 	.word	0x2000b350

08018bc4 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8018bc4:	4b03      	ldr	r3, [pc, #12]	; (8018bd4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8018bc6:	6818      	ldr	r0, [r3, #0]
 8018bc8:	b110      	cbz	r0, 8018bd0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8018bca:	6803      	ldr	r3, [r0, #0]
 8018bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018bce:	4718      	bx	r3
 8018bd0:	4770      	bx	lr
 8018bd2:	bf00      	nop
 8018bd4:	2000b350 	.word	0x2000b350

08018bd8 <_ZN8touchgfx11Application15handleTickEventEv>:
 8018bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018bdc:	4d3a      	ldr	r5, [pc, #232]	; (8018cc8 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 8018bde:	4604      	mov	r4, r0
 8018be0:	6828      	ldr	r0, [r5, #0]
 8018be2:	b140      	cbz	r0, 8018bf6 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8018be4:	7a03      	ldrb	r3, [r0, #8]
 8018be6:	b933      	cbnz	r3, 8018bf6 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8018be8:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8018bec:	6803      	ldr	r3, [r0, #0]
 8018bee:	689b      	ldr	r3, [r3, #8]
 8018bf0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018bf4:	4718      	bx	r3
 8018bf6:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8018bfa:	b97b      	cbnz	r3, 8018c1c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018bfc:	b170      	cbz	r0, 8018c1c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018bfe:	7a03      	ldrb	r3, [r0, #8]
 8018c00:	b163      	cbz	r3, 8018c1c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8018c02:	4b32      	ldr	r3, [pc, #200]	; (8018ccc <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8018c04:	6818      	ldr	r0, [r3, #0]
 8018c06:	b110      	cbz	r0, 8018c0e <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 8018c08:	6803      	ldr	r3, [r0, #0]
 8018c0a:	691b      	ldr	r3, [r3, #16]
 8018c0c:	4798      	blx	r3
 8018c0e:	6828      	ldr	r0, [r5, #0]
 8018c10:	6803      	ldr	r3, [r0, #0]
 8018c12:	68db      	ldr	r3, [r3, #12]
 8018c14:	4798      	blx	r3
 8018c16:	2301      	movs	r3, #1
 8018c18:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8018c1c:	2500      	movs	r5, #0
 8018c1e:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8018c22:	42a8      	cmp	r0, r5
 8018c24:	dd0c      	ble.n	8018c40 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 8018c26:	1963      	adds	r3, r4, r5
 8018c28:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8018c2c:	b132      	cbz	r2, 8018c3c <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 8018c2e:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8018c32:	4413      	add	r3, r2
 8018c34:	6858      	ldr	r0, [r3, #4]
 8018c36:	6803      	ldr	r3, [r0, #0]
 8018c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018c3a:	4798      	blx	r3
 8018c3c:	3501      	adds	r5, #1
 8018c3e:	e7ee      	b.n	8018c1e <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 8018c40:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 8018c44:	3801      	subs	r0, #1
 8018c46:	f04f 0c00 	mov.w	ip, #0
 8018c4a:	3678      	adds	r6, #120	; 0x78
 8018c4c:	1c43      	adds	r3, r0, #1
 8018c4e:	d033      	beq.n	8018cb8 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 8018c50:	1823      	adds	r3, r4, r0
 8018c52:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8018c56:	bb6a      	cbnz	r2, 8018cb4 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 8018c58:	b281      	uxth	r1, r0
 8018c5a:	1d25      	adds	r5, r4, #4
 8018c5c:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8018c60:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8018c64:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 8018c68:	4293      	cmp	r3, r2
 8018c6a:	dc0a      	bgt.n	8018c82 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 8018c6c:	f101 0288 	add.w	r2, r1, #136	; 0x88
 8018c70:	4422      	add	r2, r4
 8018c72:	18b1      	adds	r1, r6, r2
 8018c74:	b289      	uxth	r1, r1
 8018c76:	428b      	cmp	r3, r1
 8018c78:	d919      	bls.n	8018cae <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 8018c7a:	7851      	ldrb	r1, [r2, #1]
 8018c7c:	f802 1b01 	strb.w	r1, [r2], #1
 8018c80:	e7f7      	b.n	8018c72 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8018c82:	682f      	ldr	r7, [r5, #0]
 8018c84:	f105 0804 	add.w	r8, r5, #4
 8018c88:	45b9      	cmp	r9, r7
 8018c8a:	d10d      	bne.n	8018ca8 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 8018c8c:	4696      	mov	lr, r2
 8018c8e:	f1be 0f1e 	cmp.w	lr, #30
 8018c92:	dc06      	bgt.n	8018ca2 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8018c94:	f10e 0e01 	add.w	lr, lr, #1
 8018c98:	686f      	ldr	r7, [r5, #4]
 8018c9a:	4573      	cmp	r3, lr
 8018c9c:	f845 7b04 	str.w	r7, [r5], #4
 8018ca0:	dcf5      	bgt.n	8018c8e <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8018ca2:	3b01      	subs	r3, #1
 8018ca4:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8018ca8:	3201      	adds	r2, #1
 8018caa:	4645      	mov	r5, r8
 8018cac:	e7da      	b.n	8018c64 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 8018cae:	4423      	add	r3, r4
 8018cb0:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 8018cb4:	3801      	subs	r0, #1
 8018cb6:	e7c9      	b.n	8018c4c <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 8018cb8:	4b04      	ldr	r3, [pc, #16]	; (8018ccc <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8018cba:	6818      	ldr	r0, [r3, #0]
 8018cbc:	b110      	cbz	r0, 8018cc4 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 8018cbe:	6803      	ldr	r3, [r0, #0]
 8018cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cc2:	e795      	b.n	8018bf0 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 8018cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018cc8:	2000b354 	.word	0x2000b354
 8018ccc:	2000b350 	.word	0x2000b350

08018cd0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8018cd0:	b570      	push	{r4, r5, r6, lr}
 8018cd2:	4606      	mov	r6, r0
 8018cd4:	460c      	mov	r4, r1
 8018cd6:	b929      	cbnz	r1, 8018ce4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8018cd8:	4b0c      	ldr	r3, [pc, #48]	; (8018d0c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8018cda:	2164      	movs	r1, #100	; 0x64
 8018cdc:	4a0c      	ldr	r2, [pc, #48]	; (8018d10 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8018cde:	480d      	ldr	r0, [pc, #52]	; (8018d14 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8018ce0:	f00b ffba 	bl	8024c58 <__assert_func>
 8018ce4:	2300      	movs	r3, #0
 8018ce6:	4d0c      	ldr	r5, [pc, #48]	; (8018d18 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8018ce8:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8018cec:	6828      	ldr	r0, [r5, #0]
 8018cee:	b110      	cbz	r0, 8018cf6 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8018cf0:	6803      	ldr	r3, [r0, #0]
 8018cf2:	695b      	ldr	r3, [r3, #20]
 8018cf4:	4798      	blx	r3
 8018cf6:	602c      	str	r4, [r5, #0]
 8018cf8:	4620      	mov	r0, r4
 8018cfa:	6823      	ldr	r3, [r4, #0]
 8018cfc:	68db      	ldr	r3, [r3, #12]
 8018cfe:	4798      	blx	r3
 8018d00:	6833      	ldr	r3, [r6, #0]
 8018d02:	4630      	mov	r0, r6
 8018d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018d06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018d0a:	4718      	bx	r3
 8018d0c:	0802a5a0 	.word	0x0802a5a0
 8018d10:	0802a690 	.word	0x0802a690
 8018d14:	0802a5aa 	.word	0x0802a5aa
 8018d18:	2000b350 	.word	0x2000b350

08018d1c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8018d1c:	b510      	push	{r4, lr}
 8018d1e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018d22:	888a      	ldrh	r2, [r1, #4]
 8018d24:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018d28:	4422      	add	r2, r4
 8018d2a:	b212      	sxth	r2, r2
 8018d2c:	4293      	cmp	r3, r2
 8018d2e:	da15      	bge.n	8018d5c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018d30:	8882      	ldrh	r2, [r0, #4]
 8018d32:	4413      	add	r3, r2
 8018d34:	b21b      	sxth	r3, r3
 8018d36:	429c      	cmp	r4, r3
 8018d38:	da10      	bge.n	8018d5c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018d3a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018d3e:	88c9      	ldrh	r1, [r1, #6]
 8018d40:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018d44:	4419      	add	r1, r3
 8018d46:	b209      	sxth	r1, r1
 8018d48:	428a      	cmp	r2, r1
 8018d4a:	da07      	bge.n	8018d5c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018d4c:	88c0      	ldrh	r0, [r0, #6]
 8018d4e:	4410      	add	r0, r2
 8018d50:	b200      	sxth	r0, r0
 8018d52:	4283      	cmp	r3, r0
 8018d54:	bfac      	ite	ge
 8018d56:	2000      	movge	r0, #0
 8018d58:	2001      	movlt	r0, #1
 8018d5a:	bd10      	pop	{r4, pc}
 8018d5c:	2000      	movs	r0, #0
 8018d5e:	e7fc      	b.n	8018d5a <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08018d60 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8018d60:	b570      	push	{r4, r5, r6, lr}
 8018d62:	f9b1 4000 	ldrsh.w	r4, [r1]
 8018d66:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018d6a:	42ac      	cmp	r4, r5
 8018d6c:	db18      	blt.n	8018da0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018d6e:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8018d72:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018d76:	429a      	cmp	r2, r3
 8018d78:	db12      	blt.n	8018da0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018d7a:	8886      	ldrh	r6, [r0, #4]
 8018d7c:	4435      	add	r5, r6
 8018d7e:	888e      	ldrh	r6, [r1, #4]
 8018d80:	4434      	add	r4, r6
 8018d82:	b22d      	sxth	r5, r5
 8018d84:	b224      	sxth	r4, r4
 8018d86:	42a5      	cmp	r5, r4
 8018d88:	db0a      	blt.n	8018da0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8018d8a:	88c0      	ldrh	r0, [r0, #6]
 8018d8c:	4418      	add	r0, r3
 8018d8e:	88cb      	ldrh	r3, [r1, #6]
 8018d90:	441a      	add	r2, r3
 8018d92:	b200      	sxth	r0, r0
 8018d94:	b212      	sxth	r2, r2
 8018d96:	4290      	cmp	r0, r2
 8018d98:	bfb4      	ite	lt
 8018d9a:	2000      	movlt	r0, #0
 8018d9c:	2001      	movge	r0, #1
 8018d9e:	bd70      	pop	{r4, r5, r6, pc}
 8018da0:	2000      	movs	r0, #0
 8018da2:	e7fc      	b.n	8018d9e <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08018da4 <_ZN8touchgfx11Application11getInstanceEv>:
 8018da4:	4b01      	ldr	r3, [pc, #4]	; (8018dac <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8018da6:	6818      	ldr	r0, [r3, #0]
 8018da8:	4770      	bx	lr
 8018daa:	bf00      	nop
 8018dac:	2000b360 	.word	0x2000b360

08018db0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 8018db0:	b570      	push	{r4, r5, r6, lr}
 8018db2:	2200      	movs	r2, #0
 8018db4:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 8018db8:	1d04      	adds	r4, r0, #4
 8018dba:	b295      	uxth	r5, r2
 8018dbc:	42ab      	cmp	r3, r5
 8018dbe:	d90e      	bls.n	8018dde <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 8018dc0:	f854 6b04 	ldr.w	r6, [r4], #4
 8018dc4:	4615      	mov	r5, r2
 8018dc6:	3201      	adds	r2, #1
 8018dc8:	428e      	cmp	r6, r1
 8018dca:	d1f6      	bne.n	8018dba <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 8018dcc:	4428      	add	r0, r5
 8018dce:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 8018dd2:	2bff      	cmp	r3, #255	; 0xff
 8018dd4:	d002      	beq.n	8018ddc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 8018dd6:	3301      	adds	r3, #1
 8018dd8:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 8018ddc:	bd70      	pop	{r4, r5, r6, pc}
 8018dde:	2b20      	cmp	r3, #32
 8018de0:	d106      	bne.n	8018df0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 8018de2:	4b09      	ldr	r3, [pc, #36]	; (8018e08 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 8018de4:	f44f 7193 	mov.w	r1, #294	; 0x126
 8018de8:	4a08      	ldr	r2, [pc, #32]	; (8018e0c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 8018dea:	4809      	ldr	r0, [pc, #36]	; (8018e10 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 8018dec:	f00b ff34 	bl	8024c58 <__assert_func>
 8018df0:	18c2      	adds	r2, r0, r3
 8018df2:	2401      	movs	r4, #1
 8018df4:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 8018df8:	191a      	adds	r2, r3, r4
 8018dfa:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 8018dfe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8018e02:	6041      	str	r1, [r0, #4]
 8018e04:	e7ea      	b.n	8018ddc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 8018e06:	bf00      	nop
 8018e08:	0802a5d4 	.word	0x0802a5d4
 8018e0c:	0802a6d4 	.word	0x0802a6d4
 8018e10:	0802a5aa 	.word	0x0802a5aa

08018e14 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 8018e14:	b570      	push	{r4, r5, r6, lr}
 8018e16:	2300      	movs	r3, #0
 8018e18:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 8018e1c:	1d04      	adds	r4, r0, #4
 8018e1e:	b29a      	uxth	r2, r3
 8018e20:	4296      	cmp	r6, r2
 8018e22:	d90a      	bls.n	8018e3a <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 8018e24:	f854 2b04 	ldr.w	r2, [r4], #4
 8018e28:	428a      	cmp	r2, r1
 8018e2a:	d107      	bne.n	8018e3c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8018e2c:	18c5      	adds	r5, r0, r3
 8018e2e:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 8018e32:	b11a      	cbz	r2, 8018e3c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8018e34:	3a01      	subs	r2, #1
 8018e36:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 8018e3a:	bd70      	pop	{r4, r5, r6, pc}
 8018e3c:	3301      	adds	r3, #1
 8018e3e:	e7ee      	b.n	8018e1e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

08018e40 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8018e40:	2300      	movs	r3, #0
 8018e42:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8018e46:	30a8      	adds	r0, #168	; 0xa8
 8018e48:	f820 3c24 	strh.w	r3, [r0, #-36]
 8018e4c:	f802 3b01 	strb.w	r3, [r2], #1
 8018e50:	4282      	cmp	r2, r0
 8018e52:	d1fb      	bne.n	8018e4c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8018e54:	4770      	bx	lr

08018e56 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8018e56:	4603      	mov	r3, r0
 8018e58:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8018e5c:	2200      	movs	r2, #0
 8018e5e:	801a      	strh	r2, [r3, #0]
 8018e60:	3308      	adds	r3, #8
 8018e62:	f823 2c06 	strh.w	r2, [r3, #-6]
 8018e66:	f823 2c04 	strh.w	r2, [r3, #-4]
 8018e6a:	f823 2c02 	strh.w	r2, [r3, #-2]
 8018e6e:	428b      	cmp	r3, r1
 8018e70:	d1f5      	bne.n	8018e5e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8018e72:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8018e76:	4770      	bx	lr

08018e78 <_ZN8touchgfx11ApplicationC1Ev>:
 8018e78:	b570      	push	{r4, r5, r6, lr}
 8018e7a:	4b16      	ldr	r3, [pc, #88]	; (8018ed4 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 8018e7c:	2500      	movs	r5, #0
 8018e7e:	4604      	mov	r4, r0
 8018e80:	30a8      	adds	r0, #168	; 0xa8
 8018e82:	f840 3ca8 	str.w	r3, [r0, #-168]
 8018e86:	f820 5c24 	strh.w	r5, [r0, #-36]
 8018e8a:	f7ff ffe4 	bl	8018e56 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018e8e:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8018e92:	f7ff ffe0 	bl	8018e56 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018e96:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 8018e9a:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 8018e9e:	490e      	ldr	r1, [pc, #56]	; (8018ed8 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 8018ea0:	480e      	ldr	r0, [pc, #56]	; (8018edc <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 8018ea2:	f00a f9bf 	bl	8023224 <CRC_Lock>
 8018ea6:	4e0e      	ldr	r6, [pc, #56]	; (8018ee0 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8018ea8:	4b0e      	ldr	r3, [pc, #56]	; (8018ee4 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8018eaa:	b158      	cbz	r0, 8018ec4 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 8018eac:	801d      	strh	r5, [r3, #0]
 8018eae:	2300      	movs	r3, #0
 8018eb0:	4a0d      	ldr	r2, [pc, #52]	; (8018ee8 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8018eb2:	4620      	mov	r0, r4
 8018eb4:	6013      	str	r3, [r2, #0]
 8018eb6:	4a0d      	ldr	r2, [pc, #52]	; (8018eec <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8018eb8:	6033      	str	r3, [r6, #0]
 8018eba:	6013      	str	r3, [r2, #0]
 8018ebc:	f7ff ffc0 	bl	8018e40 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8018ec0:	4620      	mov	r0, r4
 8018ec2:	bd70      	pop	{r4, r5, r6, pc}
 8018ec4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018ec8:	2002      	movs	r0, #2
 8018eca:	801a      	strh	r2, [r3, #0]
 8018ecc:	6030      	str	r0, [r6, #0]
 8018ece:	f000 ff81 	bl	8019dd4 <_ZN8touchgfx6Screen4drawEv>
 8018ed2:	e7ec      	b.n	8018eae <_ZN8touchgfx11ApplicationC1Ev+0x36>
 8018ed4:	0802a65c 	.word	0x0802a65c
 8018ed8:	b5e8b5cd 	.word	0xb5e8b5cd
 8018edc:	f407a5c2 	.word	0xf407a5c2
 8018ee0:	2000b350 	.word	0x2000b350
 8018ee4:	20000050 	.word	0x20000050
 8018ee8:	2000b360 	.word	0x2000b360
 8018eec:	2000b354 	.word	0x2000b354

08018ef0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8018ef0:	2300      	movs	r3, #0
 8018ef2:	8003      	strh	r3, [r0, #0]
 8018ef4:	8043      	strh	r3, [r0, #2]
 8018ef6:	8083      	strh	r3, [r0, #4]
 8018ef8:	80c3      	strh	r3, [r0, #6]
 8018efa:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8018efe:	4293      	cmp	r3, r2
 8018f00:	b530      	push	{r4, r5, lr}
 8018f02:	d912      	bls.n	8018f2a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8018f04:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8018f08:	3b01      	subs	r3, #1
 8018f0a:	6825      	ldr	r5, [r4, #0]
 8018f0c:	b29b      	uxth	r3, r3
 8018f0e:	6005      	str	r5, [r0, #0]
 8018f10:	4293      	cmp	r3, r2
 8018f12:	6865      	ldr	r5, [r4, #4]
 8018f14:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 8018f18:	6045      	str	r5, [r0, #4]
 8018f1a:	d906      	bls.n	8018f2a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8018f1c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8018f20:	681d      	ldr	r5, [r3, #0]
 8018f22:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 8018f26:	685d      	ldr	r5, [r3, #4]
 8018f28:	6065      	str	r5, [r4, #4]
 8018f2a:	bd30      	pop	{r4, r5, pc}

08018f2c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8018f2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018f2e:	466b      	mov	r3, sp
 8018f30:	4604      	mov	r4, r0
 8018f32:	e883 0006 	stmia.w	r3, {r1, r2}
 8018f36:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8018f3a:	2a07      	cmp	r2, #7
 8018f3c:	d906      	bls.n	8018f4c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8018f3e:	4b09      	ldr	r3, [pc, #36]	; (8018f64 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8018f40:	f44f 7102 	mov.w	r1, #520	; 0x208
 8018f44:	4a08      	ldr	r2, [pc, #32]	; (8018f68 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8018f46:	4809      	ldr	r0, [pc, #36]	; (8018f6c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8018f48:	f00b fe86 	bl	8024c58 <__assert_func>
 8018f4c:	1c51      	adds	r1, r2, #1
 8018f4e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8018f52:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8018f56:	cb03      	ldmia	r3!, {r0, r1}
 8018f58:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8018f5c:	6069      	str	r1, [r5, #4]
 8018f5e:	b003      	add	sp, #12
 8018f60:	bd30      	pop	{r4, r5, pc}
 8018f62:	bf00      	nop
 8018f64:	0802a5fc 	.word	0x0802a5fc
 8018f68:	0802a719 	.word	0x0802a719
 8018f6c:	0802a62b 	.word	0x0802a62b

08018f70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8018f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018f74:	b089      	sub	sp, #36	; 0x24
 8018f76:	4606      	mov	r6, r0
 8018f78:	466c      	mov	r4, sp
 8018f7a:	4620      	mov	r0, r4
 8018f7c:	e884 0006 	stmia.w	r4, {r1, r2}
 8018f80:	f7fb ff1c 	bl	8014dbc <_ZNK8touchgfx4Rect7isEmptyEv>
 8018f84:	bbb0      	cbnz	r0, 8018ff4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8018f86:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 8018f8a:	b1fd      	cbz	r5, 8018fcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 8018f8c:	3d01      	subs	r5, #1
 8018f8e:	af04      	add	r7, sp, #16
 8018f90:	f04f 090a 	mov.w	r9, #10
 8018f94:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8018f98:	ab02      	add	r3, sp, #8
 8018f9a:	fa1f f885 	uxth.w	r8, r5
 8018f9e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8018fa2:	6851      	ldr	r1, [r2, #4]
 8018fa4:	c303      	stmia	r3!, {r0, r1}
 8018fa6:	4621      	mov	r1, r4
 8018fa8:	a802      	add	r0, sp, #8
 8018faa:	f7ff fed9 	bl	8018d60 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018fae:	bb08      	cbnz	r0, 8018ff4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8018fb0:	a902      	add	r1, sp, #8
 8018fb2:	4620      	mov	r0, r4
 8018fb4:	f7ff fed4 	bl	8018d60 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018fb8:	b1f8      	cbz	r0, 8018ffa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 8018fba:	4642      	mov	r2, r8
 8018fbc:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8018fc0:	a806      	add	r0, sp, #24
 8018fc2:	f7ff ff95 	bl	8018ef0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018fc6:	f115 35ff 	adds.w	r5, r5, #4294967295
 8018fca:	d2e3      	bcs.n	8018f94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 8018fcc:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 8018fd0:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 8018fd4:	2b08      	cmp	r3, #8
 8018fd6:	d108      	bne.n	8018fea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8018fd8:	4629      	mov	r1, r5
 8018fda:	a806      	add	r0, sp, #24
 8018fdc:	2207      	movs	r2, #7
 8018fde:	f7ff ff87 	bl	8018ef0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018fe2:	a906      	add	r1, sp, #24
 8018fe4:	4620      	mov	r0, r4
 8018fe6:	f7fd ffa0 	bl	8016f2a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018fea:	4628      	mov	r0, r5
 8018fec:	e894 0006 	ldmia.w	r4, {r1, r2}
 8018ff0:	f7ff ff9c 	bl	8018f2c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8018ff4:	b009      	add	sp, #36	; 0x24
 8018ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018ffa:	4621      	mov	r1, r4
 8018ffc:	a802      	add	r0, sp, #8
 8018ffe:	f7ff fe8d 	bl	8018d1c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019002:	b150      	cbz	r0, 801901a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 8019004:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8019008:	a806      	add	r0, sp, #24
 801900a:	4642      	mov	r2, r8
 801900c:	f7ff ff70 	bl	8018ef0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019010:	a902      	add	r1, sp, #8
 8019012:	4620      	mov	r0, r4
 8019014:	f7fd ff89 	bl	8016f2a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019018:	e7d5      	b.n	8018fc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801901a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801901e:	e887 0003 	stmia.w	r7, {r0, r1}
 8019022:	a902      	add	r1, sp, #8
 8019024:	4638      	mov	r0, r7
 8019026:	f7fd ff80 	bl	8016f2a <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801902a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801902e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8019032:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8019036:	fb13 f302 	smulbb	r3, r3, r2
 801903a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801903e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8019042:	fb11 f102 	smulbb	r1, r1, r2
 8019046:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801904a:	fb09 f303 	mul.w	r3, r9, r3
 801904e:	fb12 1100 	smlabb	r1, r2, r0, r1
 8019052:	220b      	movs	r2, #11
 8019054:	434a      	muls	r2, r1
 8019056:	4293      	cmp	r3, r2
 8019058:	dab5      	bge.n	8018fc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801905a:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801905e:	a806      	add	r0, sp, #24
 8019060:	4642      	mov	r2, r8
 8019062:	f7ff ff45 	bl	8018ef0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019066:	e897 0003 	ldmia.w	r7, {r0, r1}
 801906a:	e884 0003 	stmia.w	r4, {r0, r1}
 801906e:	e7aa      	b.n	8018fc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

08019070 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019070:	4b1d      	ldr	r3, [pc, #116]	; (80190e8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8019072:	b530      	push	{r4, r5, lr}
 8019074:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019078:	b085      	sub	sp, #20
 801907a:	4b1c      	ldr	r3, [pc, #112]	; (80190ec <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801907c:	460c      	mov	r4, r1
 801907e:	2100      	movs	r1, #0
 8019080:	4605      	mov	r5, r0
 8019082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019086:	6820      	ldr	r0, [r4, #0]
 8019088:	9100      	str	r1, [sp, #0]
 801908a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801908e:	ab02      	add	r3, sp, #8
 8019090:	6861      	ldr	r1, [r4, #4]
 8019092:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019096:	c303      	stmia	r3!, {r0, r1}
 8019098:	4669      	mov	r1, sp
 801909a:	a802      	add	r0, sp, #8
 801909c:	f7fb fe4a 	bl	8014d34 <_ZN8touchgfx4RectaNERKS0_>
 80190a0:	ab02      	add	r3, sp, #8
 80190a2:	cb03      	ldmia	r3!, {r0, r1}
 80190a4:	4b12      	ldr	r3, [pc, #72]	; (80190f0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 80190a6:	6020      	str	r0, [r4, #0]
 80190a8:	6818      	ldr	r0, [r3, #0]
 80190aa:	6061      	str	r1, [r4, #4]
 80190ac:	b138      	cbz	r0, 80190be <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80190ae:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 80190b2:	b133      	cbz	r3, 80190c2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 80190b4:	6821      	ldr	r1, [r4, #0]
 80190b6:	4628      	mov	r0, r5
 80190b8:	6862      	ldr	r2, [r4, #4]
 80190ba:	f7ff ff59 	bl	8018f70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80190be:	b005      	add	sp, #20
 80190c0:	bd30      	pop	{r4, r5, pc}
 80190c2:	6803      	ldr	r3, [r0, #0]
 80190c4:	4621      	mov	r1, r4
 80190c6:	689b      	ldr	r3, [r3, #8]
 80190c8:	4798      	blx	r3
 80190ca:	4b0a      	ldr	r3, [pc, #40]	; (80190f4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 80190cc:	6818      	ldr	r0, [r3, #0]
 80190ce:	b118      	cbz	r0, 80190d8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 80190d0:	6803      	ldr	r3, [r0, #0]
 80190d2:	4621      	mov	r1, r4
 80190d4:	689b      	ldr	r3, [r3, #8]
 80190d6:	4798      	blx	r3
 80190d8:	4b07      	ldr	r3, [pc, #28]	; (80190f8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 80190da:	4621      	mov	r1, r4
 80190dc:	6818      	ldr	r0, [r3, #0]
 80190de:	6803      	ldr	r3, [r0, #0]
 80190e0:	695b      	ldr	r3, [r3, #20]
 80190e2:	4798      	blx	r3
 80190e4:	e7eb      	b.n	80190be <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80190e6:	bf00      	nop
 80190e8:	2000b2c8 	.word	0x2000b2c8
 80190ec:	2000b2ca 	.word	0x2000b2ca
 80190f0:	2000b350 	.word	0x2000b350
 80190f4:	2000b34c 	.word	0x2000b34c
 80190f8:	2000b2d4 	.word	0x2000b2d4

080190fc <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 80190fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019100:	4604      	mov	r4, r0
 8019102:	b09b      	sub	sp, #108	; 0x6c
 8019104:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 8019108:	b129      	cbz	r1, 8019116 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801910a:	2300      	movs	r3, #0
 801910c:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8019110:	b01b      	add	sp, #108	; 0x6c
 8019112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019116:	4baf      	ldr	r3, [pc, #700]	; (80193d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	b33b      	cbz	r3, 801916c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801911c:	4dae      	ldr	r5, [pc, #696]	; (80193d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801911e:	4628      	mov	r0, r5
 8019120:	f7fb fe4c 	bl	8014dbc <_ZNK8touchgfx4Rect7isEmptyEv>
 8019124:	4606      	mov	r6, r0
 8019126:	bb08      	cbnz	r0, 801916c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8019128:	4628      	mov	r0, r5
 801912a:	f7ff fca1 	bl	8018a70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801912e:	6829      	ldr	r1, [r5, #0]
 8019130:	686a      	ldr	r2, [r5, #4]
 8019132:	4620      	mov	r0, r4
 8019134:	f7ff ff1c 	bl	8018f70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019138:	802e      	strh	r6, [r5, #0]
 801913a:	806e      	strh	r6, [r5, #2]
 801913c:	80ae      	strh	r6, [r5, #4]
 801913e:	80ee      	strh	r6, [r5, #6]
 8019140:	4fa6      	ldr	r7, [pc, #664]	; (80193dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8019142:	a809      	add	r0, sp, #36	; 0x24
 8019144:	f7ff fe87 	bl	8018e56 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019148:	883d      	ldrh	r5, [r7, #0]
 801914a:	462e      	mov	r6, r5
 801914c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019150:	42b3      	cmp	r3, r6
 8019152:	d910      	bls.n	8019176 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 8019154:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019158:	3601      	adds	r6, #1
 801915a:	a809      	add	r0, sp, #36	; 0x24
 801915c:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8019160:	b2b6      	uxth	r6, r6
 8019162:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8019166:	f7ff fee1 	bl	8018f2c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801916a:	e7ef      	b.n	801914c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 801916c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8019170:	2b00      	cmp	r3, #0
 8019172:	d1e5      	bne.n	8019140 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 8019174:	e7cc      	b.n	8019110 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8019176:	462e      	mov	r6, r5
 8019178:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801917c:	42b3      	cmp	r3, r6
 801917e:	d90b      	bls.n	8019198 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8019180:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8019184:	3601      	adds	r6, #1
 8019186:	4620      	mov	r0, r4
 8019188:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801918c:	b2b6      	uxth	r6, r6
 801918e:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8019192:	f7ff feed 	bl	8018f70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019196:	e7ef      	b.n	8019178 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 8019198:	4e91      	ldr	r6, [pc, #580]	; (80193e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801919a:	6833      	ldr	r3, [r6, #0]
 801919c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80191a0:	2b01      	cmp	r3, #1
 80191a2:	f040 8092 	bne.w	80192ca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 80191a6:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80191aa:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 80191ae:	f04f 0900 	mov.w	r9, #0
 80191b2:	33aa      	adds	r3, #170	; 0xaa
 80191b4:	42a8      	cmp	r0, r5
 80191b6:	f103 0308 	add.w	r3, r3, #8
 80191ba:	dd0a      	ble.n	80191d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 80191bc:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80191c0:	3501      	adds	r5, #1
 80191c2:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 80191c6:	440a      	add	r2, r1
 80191c8:	b212      	sxth	r2, r2
 80191ca:	4591      	cmp	r9, r2
 80191cc:	bfb8      	it	lt
 80191ce:	4691      	movlt	r9, r2
 80191d0:	e7f0      	b.n	80191b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 80191d2:	4b84      	ldr	r3, [pc, #528]	; (80193e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 80191d4:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80193ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 80191d8:	881d      	ldrh	r5, [r3, #0]
 80191da:	2300      	movs	r3, #0
 80191dc:	2d0f      	cmp	r5, #15
 80191de:	bf8c      	ite	hi
 80191e0:	08ed      	lsrhi	r5, r5, #3
 80191e2:	2501      	movls	r5, #1
 80191e4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80191e8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80191ec:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 80191f0:	6830      	ldr	r0, [r6, #0]
 80191f2:	440b      	add	r3, r1
 80191f4:	6802      	ldr	r2, [r0, #0]
 80191f6:	b21b      	sxth	r3, r3
 80191f8:	4599      	cmp	r9, r3
 80191fa:	dd49      	ble.n	8019290 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 80191fc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8019200:	4798      	blx	r3
 8019202:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019206:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801920a:	4413      	add	r3, r2
 801920c:	b21b      	sxth	r3, r3
 801920e:	195a      	adds	r2, r3, r5
 8019210:	4290      	cmp	r0, r2
 8019212:	da07      	bge.n	8019224 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8019214:	4581      	cmp	r9, r0
 8019216:	dd05      	ble.n	8019224 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8019218:	4298      	cmp	r0, r3
 801921a:	da33      	bge.n	8019284 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801921c:	2b00      	cmp	r3, #0
 801921e:	dd31      	ble.n	8019284 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8019220:	4648      	mov	r0, r9
 8019222:	e004      	b.n	801922e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 8019224:	4298      	cmp	r0, r3
 8019226:	dbfb      	blt.n	8019220 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 8019228:	4548      	cmp	r0, r9
 801922a:	bfa8      	it	ge
 801922c:	4648      	movge	r0, r9
 801922e:	f9b8 2000 	ldrsh.w	r2, [r8]
 8019232:	2100      	movs	r1, #0
 8019234:	1ac0      	subs	r0, r0, r3
 8019236:	f8b7 a000 	ldrh.w	sl, [r7]
 801923a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801923e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019242:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019246:	f8ad 001a 	strh.w	r0, [sp, #26]
 801924a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801924e:	4553      	cmp	r3, sl
 8019250:	d9ca      	bls.n	80191e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8019252:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8019256:	ab07      	add	r3, sp, #28
 8019258:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801925c:	6851      	ldr	r1, [r2, #4]
 801925e:	c303      	stmia	r3!, {r0, r1}
 8019260:	a807      	add	r0, sp, #28
 8019262:	a905      	add	r1, sp, #20
 8019264:	f7fb fd66 	bl	8014d34 <_ZN8touchgfx4RectaNERKS0_>
 8019268:	a807      	add	r0, sp, #28
 801926a:	f7fb fda7 	bl	8014dbc <_ZNK8touchgfx4Rect7isEmptyEv>
 801926e:	b920      	cbnz	r0, 801927a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 8019270:	6823      	ldr	r3, [r4, #0]
 8019272:	a907      	add	r1, sp, #28
 8019274:	4620      	mov	r0, r4
 8019276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019278:	4798      	blx	r3
 801927a:	f10a 0a01 	add.w	sl, sl, #1
 801927e:	fa1f fa8a 	uxth.w	sl, sl
 8019282:	e7e2      	b.n	801924a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 8019284:	6830      	ldr	r0, [r6, #0]
 8019286:	2101      	movs	r1, #1
 8019288:	6803      	ldr	r3, [r0, #0]
 801928a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801928c:	4798      	blx	r3
 801928e:	e7ab      	b.n	80191e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8019290:	69d3      	ldr	r3, [r2, #28]
 8019292:	4798      	blx	r3
 8019294:	4b54      	ldr	r3, [pc, #336]	; (80193e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8019296:	781b      	ldrb	r3, [r3, #0]
 8019298:	2b00      	cmp	r3, #0
 801929a:	f43f af39 	beq.w	8019110 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801929e:	2300      	movs	r3, #0
 80192a0:	883d      	ldrh	r5, [r7, #0]
 80192a2:	34ea      	adds	r4, #234	; 0xea
 80192a4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 80192a8:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80192ac:	42ab      	cmp	r3, r5
 80192ae:	f67f af2f 	bls.w	8019110 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80192b2:	ab1a      	add	r3, sp, #104	; 0x68
 80192b4:	4620      	mov	r0, r4
 80192b6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80192ba:	3501      	adds	r5, #1
 80192bc:	3b44      	subs	r3, #68	; 0x44
 80192be:	b2ad      	uxth	r5, r5
 80192c0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80192c4:	f7ff fe32 	bl	8018f2c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80192c8:	e7ee      	b.n	80192a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 80192ca:	2b02      	cmp	r3, #2
 80192cc:	d16a      	bne.n	80193a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 80192ce:	f8df a120 	ldr.w	sl, [pc, #288]	; 80193f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 80192d2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80192d6:	42ab      	cmp	r3, r5
 80192d8:	d9dc      	bls.n	8019294 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 80192da:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80192de:	ab03      	add	r3, sp, #12
 80192e0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80192e4:	6851      	ldr	r1, [r2, #4]
 80192e6:	c303      	stmia	r3!, {r0, r1}
 80192e8:	f89a 3000 	ldrb.w	r3, [sl]
 80192ec:	2b01      	cmp	r3, #1
 80192ee:	d102      	bne.n	80192f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 80192f0:	a803      	add	r0, sp, #12
 80192f2:	f7ff fc17 	bl	8018b24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80192f6:	a803      	add	r0, sp, #12
 80192f8:	f7fb fd60 	bl	8014dbc <_ZNK8touchgfx4Rect7isEmptyEv>
 80192fc:	2800      	cmp	r0, #0
 80192fe:	d14a      	bne.n	8019396 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 8019300:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8019304:	f10d 0914 	add.w	r9, sp, #20
 8019308:	f10d 081c 	add.w	r8, sp, #28
 801930c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019310:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019314:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8019318:	f8ad 3016 	strh.w	r3, [sp, #22]
 801931c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019320:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019324:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8019328:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 801932c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019330:	44dc      	add	ip, fp
 8019332:	6830      	ldr	r0, [r6, #0]
 8019334:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8019338:	ebac 0c02 	sub.w	ip, ip, r2
 801933c:	f8d0 e000 	ldr.w	lr, [r0]
 8019340:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8019344:	fa1f fc8c 	uxth.w	ip, ip
 8019348:	f8cd c000 	str.w	ip, [sp]
 801934c:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 8019350:	47d8      	blx	fp
 8019352:	f89a 3000 	ldrb.w	r3, [sl]
 8019356:	f8ad 001a 	strh.w	r0, [sp, #26]
 801935a:	2b01      	cmp	r3, #1
 801935c:	d11e      	bne.n	801939c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 801935e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8019362:	e888 0003 	stmia.w	r8, {r0, r1}
 8019366:	4640      	mov	r0, r8
 8019368:	f7ff fb82 	bl	8018a70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801936c:	6823      	ldr	r3, [r4, #0]
 801936e:	4641      	mov	r1, r8
 8019370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019372:	4620      	mov	r0, r4
 8019374:	4798      	blx	r3
 8019376:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801937a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801937e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8019382:	4413      	add	r3, r2
 8019384:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8019388:	440a      	add	r2, r1
 801938a:	b21b      	sxth	r3, r3
 801938c:	b212      	sxth	r2, r2
 801938e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019392:	4293      	cmp	r3, r2
 8019394:	dbc6      	blt.n	8019324 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 8019396:	3501      	adds	r5, #1
 8019398:	b2ad      	uxth	r5, r5
 801939a:	e79a      	b.n	80192d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 801939c:	6823      	ldr	r3, [r4, #0]
 801939e:	4649      	mov	r1, r9
 80193a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80193a2:	e7e6      	b.n	8019372 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 80193a4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80193a8:	42ab      	cmp	r3, r5
 80193aa:	f67f af73 	bls.w	8019294 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 80193ae:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80193b2:	ab07      	add	r3, sp, #28
 80193b4:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80193b8:	6851      	ldr	r1, [r2, #4]
 80193ba:	c303      	stmia	r3!, {r0, r1}
 80193bc:	a807      	add	r0, sp, #28
 80193be:	f7fb fcfd 	bl	8014dbc <_ZNK8touchgfx4Rect7isEmptyEv>
 80193c2:	b920      	cbnz	r0, 80193ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 80193c4:	6823      	ldr	r3, [r4, #0]
 80193c6:	a907      	add	r1, sp, #28
 80193c8:	4620      	mov	r0, r4
 80193ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80193cc:	4798      	blx	r3
 80193ce:	3501      	adds	r5, #1
 80193d0:	b2ad      	uxth	r5, r5
 80193d2:	e7e7      	b.n	80193a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 80193d4:	2000b34c 	.word	0x2000b34c
 80193d8:	2000b358 	.word	0x2000b358
 80193dc:	20000050 	.word	0x20000050
 80193e0:	2000b2d4 	.word	0x2000b2d4
 80193e4:	2000b2ca 	.word	0x2000b2ca
 80193e8:	2000b2d2 	.word	0x2000b2d2
 80193ec:	2000b2c8 	.word	0x2000b2c8
 80193f0:	2000b2cc 	.word	0x2000b2cc

080193f4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80193f4:	4b03      	ldr	r3, [pc, #12]	; (8019404 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80193f6:	2200      	movs	r2, #0
 80193f8:	801a      	strh	r2, [r3, #0]
 80193fa:	805a      	strh	r2, [r3, #2]
 80193fc:	809a      	strh	r2, [r3, #4]
 80193fe:	80da      	strh	r2, [r3, #6]
 8019400:	4770      	bx	lr
 8019402:	bf00      	nop
 8019404:	2000b358 	.word	0x2000b358

08019408 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 8019408:	2000      	movs	r0, #0
 801940a:	4770      	bx	lr

0801940c <_ZNK8touchgfx4Font12getGSUBTableEv>:
 801940c:	2000      	movs	r0, #0
 801940e:	4770      	bx	lr

08019410 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8019410:	b508      	push	{r3, lr}
 8019412:	6803      	ldr	r3, [r0, #0]
 8019414:	68db      	ldr	r3, [r3, #12]
 8019416:	4798      	blx	r3
 8019418:	b128      	cbz	r0, 8019426 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801941a:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801941e:	7a80      	ldrb	r0, [r0, #10]
 8019420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019424:	4318      	orrs	r0, r3
 8019426:	bd08      	pop	{r3, pc}

08019428 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 8019428:	b40e      	push	{r1, r2, r3}
 801942a:	b533      	push	{r0, r1, r4, r5, lr}
 801942c:	ab05      	add	r3, sp, #20
 801942e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019432:	9301      	str	r3, [sp, #4]
 8019434:	4b0a      	ldr	r3, [pc, #40]	; (8019460 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 8019436:	685c      	ldr	r4, [r3, #4]
 8019438:	1061      	asrs	r1, r4, #1
 801943a:	07e4      	lsls	r4, r4, #31
 801943c:	eb00 0501 	add.w	r5, r0, r1
 8019440:	bf46      	itte	mi
 8019442:	681b      	ldrmi	r3, [r3, #0]
 8019444:	5841      	ldrmi	r1, [r0, r1]
 8019446:	681c      	ldrpl	r4, [r3, #0]
 8019448:	4628      	mov	r0, r5
 801944a:	bf48      	it	mi
 801944c:	58cc      	ldrmi	r4, [r1, r3]
 801944e:	2100      	movs	r1, #0
 8019450:	9b01      	ldr	r3, [sp, #4]
 8019452:	47a0      	blx	r4
 8019454:	b002      	add	sp, #8
 8019456:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801945a:	b003      	add	sp, #12
 801945c:	4770      	bx	lr
 801945e:	bf00      	nop
 8019460:	20000038 	.word	0x20000038

08019464 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 8019464:	b40c      	push	{r2, r3}
 8019466:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019468:	ab06      	add	r3, sp, #24
 801946a:	f853 2b04 	ldr.w	r2, [r3], #4
 801946e:	9301      	str	r3, [sp, #4]
 8019470:	4b09      	ldr	r3, [pc, #36]	; (8019498 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 8019472:	685d      	ldr	r5, [r3, #4]
 8019474:	106c      	asrs	r4, r5, #1
 8019476:	07ed      	lsls	r5, r5, #31
 8019478:	eb00 0604 	add.w	r6, r0, r4
 801947c:	bf45      	ittet	mi
 801947e:	681b      	ldrmi	r3, [r3, #0]
 8019480:	5900      	ldrmi	r0, [r0, r4]
 8019482:	681c      	ldrpl	r4, [r3, #0]
 8019484:	58c4      	ldrmi	r4, [r0, r3]
 8019486:	4630      	mov	r0, r6
 8019488:	9b01      	ldr	r3, [sp, #4]
 801948a:	47a0      	blx	r4
 801948c:	b002      	add	sp, #8
 801948e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019492:	b002      	add	sp, #8
 8019494:	4770      	bx	lr
 8019496:	bf00      	nop
 8019498:	20000038 	.word	0x20000038

0801949c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801949c:	b40e      	push	{r1, r2, r3}
 801949e:	b530      	push	{r4, r5, lr}
 80194a0:	b098      	sub	sp, #96	; 0x60
 80194a2:	4604      	mov	r4, r0
 80194a4:	ab1b      	add	r3, sp, #108	; 0x6c
 80194a6:	a802      	add	r0, sp, #8
 80194a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80194ac:	9301      	str	r3, [sp, #4]
 80194ae:	f001 f8c7 	bl	801a640 <_ZN8touchgfx12TextProviderC1Ev>
 80194b2:	6823      	ldr	r3, [r4, #0]
 80194b4:	4620      	mov	r0, r4
 80194b6:	2401      	movs	r4, #1
 80194b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80194ba:	4798      	blx	r3
 80194bc:	9a01      	ldr	r2, [sp, #4]
 80194be:	4603      	mov	r3, r0
 80194c0:	4629      	mov	r1, r5
 80194c2:	a802      	add	r0, sp, #8
 80194c4:	f001 f8d9 	bl	801a67a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80194c8:	a802      	add	r0, sp, #8
 80194ca:	f001 f90f 	bl	801a6ec <_ZN8touchgfx12TextProvider11getNextCharEv>
 80194ce:	b2a3      	uxth	r3, r4
 80194d0:	b138      	cbz	r0, 80194e2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 80194d2:	280a      	cmp	r0, #10
 80194d4:	a802      	add	r0, sp, #8
 80194d6:	bf04      	itt	eq
 80194d8:	3301      	addeq	r3, #1
 80194da:	b21c      	sxtheq	r4, r3
 80194dc:	f001 f906 	bl	801a6ec <_ZN8touchgfx12TextProvider11getNextCharEv>
 80194e0:	e7f5      	b.n	80194ce <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 80194e2:	4618      	mov	r0, r3
 80194e4:	b018      	add	sp, #96	; 0x60
 80194e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80194ea:	b003      	add	sp, #12
 80194ec:	4770      	bx	lr
	...

080194f0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80194f0:	b40e      	push	{r1, r2, r3}
 80194f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80194f4:	b098      	sub	sp, #96	; 0x60
 80194f6:	4605      	mov	r5, r0
 80194f8:	4f25      	ldr	r7, [pc, #148]	; (8019590 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 80194fa:	ab1d      	add	r3, sp, #116	; 0x74
 80194fc:	a802      	add	r0, sp, #8
 80194fe:	ae18      	add	r6, sp, #96	; 0x60
 8019500:	f853 4b04 	ldr.w	r4, [r3], #4
 8019504:	9300      	str	r3, [sp, #0]
 8019506:	f001 f89b 	bl	801a640 <_ZN8touchgfx12TextProviderC1Ev>
 801950a:	682b      	ldr	r3, [r5, #0]
 801950c:	4628      	mov	r0, r5
 801950e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019510:	4798      	blx	r3
 8019512:	4621      	mov	r1, r4
 8019514:	2400      	movs	r4, #0
 8019516:	4603      	mov	r3, r0
 8019518:	9a00      	ldr	r2, [sp, #0]
 801951a:	a802      	add	r0, sp, #8
 801951c:	f001 f8ad 	bl	801a67a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019520:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8019524:	462a      	mov	r2, r5
 8019526:	4633      	mov	r3, r6
 8019528:	4621      	mov	r1, r4
 801952a:	a802      	add	r0, sp, #8
 801952c:	f001 fa0a 	bl	801a944 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019530:	b340      	cbz	r0, 8019584 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 8019532:	280a      	cmp	r0, #10
 8019534:	d01f      	beq.n	8019576 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8019536:	9901      	ldr	r1, [sp, #4]
 8019538:	b1e9      	cbz	r1, 8019576 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801953a:	7b4b      	ldrb	r3, [r1, #13]
 801953c:	f891 c008 	ldrb.w	ip, [r1, #8]
 8019540:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019544:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 8019548:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801954c:	79c9      	ldrb	r1, [r1, #7]
 801954e:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 8019552:	bf18      	it	ne
 8019554:	4638      	movne	r0, r7
 8019556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801955a:	bf08      	it	eq
 801955c:	2000      	moveq	r0, #0
 801955e:	88aa      	ldrh	r2, [r5, #4]
 8019560:	ea41 010e 	orr.w	r1, r1, lr
 8019564:	ea43 030c 	orr.w	r3, r3, ip
 8019568:	440a      	add	r2, r1
 801956a:	4303      	orrs	r3, r0
 801956c:	1ad3      	subs	r3, r2, r3
 801956e:	b29b      	uxth	r3, r3
 8019570:	42a3      	cmp	r3, r4
 8019572:	bfc8      	it	gt
 8019574:	b21c      	sxthgt	r4, r3
 8019576:	4633      	mov	r3, r6
 8019578:	462a      	mov	r2, r5
 801957a:	2100      	movs	r1, #0
 801957c:	a802      	add	r0, sp, #8
 801957e:	f001 f9e1 	bl	801a944 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019582:	e7d5      	b.n	8019530 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 8019584:	b2a0      	uxth	r0, r4
 8019586:	b018      	add	sp, #96	; 0x60
 8019588:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801958c:	b003      	add	sp, #12
 801958e:	4770      	bx	lr
 8019590:	fffffe00 	.word	0xfffffe00

08019594 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8019594:	b40e      	push	{r1, r2, r3}
 8019596:	b570      	push	{r4, r5, r6, lr}
 8019598:	b099      	sub	sp, #100	; 0x64
 801959a:	4604      	mov	r4, r0
 801959c:	26ff      	movs	r6, #255	; 0xff
 801959e:	ab1d      	add	r3, sp, #116	; 0x74
 80195a0:	a802      	add	r0, sp, #8
 80195a2:	f853 5b04 	ldr.w	r5, [r3], #4
 80195a6:	9300      	str	r3, [sp, #0]
 80195a8:	f001 f84a 	bl	801a640 <_ZN8touchgfx12TextProviderC1Ev>
 80195ac:	6823      	ldr	r3, [r4, #0]
 80195ae:	4620      	mov	r0, r4
 80195b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80195b2:	4798      	blx	r3
 80195b4:	4629      	mov	r1, r5
 80195b6:	4603      	mov	r3, r0
 80195b8:	9a00      	ldr	r2, [sp, #0]
 80195ba:	a802      	add	r0, sp, #8
 80195bc:	ad18      	add	r5, sp, #96	; 0x60
 80195be:	f001 f85c 	bl	801a67a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80195c2:	2100      	movs	r1, #0
 80195c4:	4622      	mov	r2, r4
 80195c6:	a802      	add	r0, sp, #8
 80195c8:	f845 1d5c 	str.w	r1, [r5, #-92]!
 80195cc:	462b      	mov	r3, r5
 80195ce:	f001 f9b9 	bl	801a944 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80195d2:	b190      	cbz	r0, 80195fa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 80195d4:	280a      	cmp	r0, #10
 80195d6:	d009      	beq.n	80195ec <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 80195d8:	9a01      	ldr	r2, [sp, #4]
 80195da:	b13a      	cbz	r2, 80195ec <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 80195dc:	7923      	ldrb	r3, [r4, #4]
 80195de:	7a12      	ldrb	r2, [r2, #8]
 80195e0:	1a9b      	subs	r3, r3, r2
 80195e2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80195e6:	429e      	cmp	r6, r3
 80195e8:	bf28      	it	cs
 80195ea:	461e      	movcs	r6, r3
 80195ec:	462b      	mov	r3, r5
 80195ee:	4622      	mov	r2, r4
 80195f0:	2100      	movs	r1, #0
 80195f2:	a802      	add	r0, sp, #8
 80195f4:	f001 f9a6 	bl	801a944 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80195f8:	e7eb      	b.n	80195d2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 80195fa:	4630      	mov	r0, r6
 80195fc:	b019      	add	sp, #100	; 0x64
 80195fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019602:	b003      	add	sp, #12
 8019604:	4770      	bx	lr

08019606 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8019606:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801960a:	b099      	sub	sp, #100	; 0x64
 801960c:	4606      	mov	r6, r0
 801960e:	4614      	mov	r4, r2
 8019610:	4688      	mov	r8, r1
 8019612:	a802      	add	r0, sp, #8
 8019614:	461d      	mov	r5, r3
 8019616:	f04f 0b00 	mov.w	fp, #0
 801961a:	f001 f811 	bl	801a640 <_ZN8touchgfx12TextProviderC1Ev>
 801961e:	6833      	ldr	r3, [r6, #0]
 8019620:	4630      	mov	r0, r6
 8019622:	465f      	mov	r7, fp
 8019624:	46da      	mov	sl, fp
 8019626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019628:	46d9      	mov	r9, fp
 801962a:	4798      	blx	r3
 801962c:	462a      	mov	r2, r5
 801962e:	4603      	mov	r3, r0
 8019630:	4621      	mov	r1, r4
 8019632:	a802      	add	r0, sp, #8
 8019634:	f001 f821 	bl	801a67a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8019638:	ab01      	add	r3, sp, #4
 801963a:	4632      	mov	r2, r6
 801963c:	4641      	mov	r1, r8
 801963e:	a802      	add	r0, sp, #8
 8019640:	f8cd 9004 	str.w	r9, [sp, #4]
 8019644:	f001 f97e 	bl	801a944 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019648:	4605      	mov	r5, r0
 801964a:	b108      	cbz	r0, 8019650 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 801964c:	280a      	cmp	r0, #10
 801964e:	d10b      	bne.n	8019668 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 8019650:	4557      	cmp	r7, sl
 8019652:	bf38      	it	cc
 8019654:	4657      	movcc	r7, sl
 8019656:	f04f 0a00 	mov.w	sl, #0
 801965a:	b91d      	cbnz	r5, 8019664 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801965c:	4638      	mov	r0, r7
 801965e:	b019      	add	sp, #100	; 0x64
 8019660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019664:	46ab      	mov	fp, r5
 8019666:	e7e7      	b.n	8019638 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 8019668:	9a01      	ldr	r2, [sp, #4]
 801966a:	2a00      	cmp	r2, #0
 801966c:	d0fa      	beq.n	8019664 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801966e:	f992 400d 	ldrsb.w	r4, [r2, #13]
 8019672:	4659      	mov	r1, fp
 8019674:	6833      	ldr	r3, [r6, #0]
 8019676:	f404 7080 	and.w	r0, r4, #256	; 0x100
 801967a:	7a94      	ldrb	r4, [r2, #10]
 801967c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801967e:	4304      	orrs	r4, r0
 8019680:	4630      	mov	r0, r6
 8019682:	8895      	ldrh	r5, [r2, #4]
 8019684:	4798      	blx	r3
 8019686:	4420      	add	r0, r4
 8019688:	4450      	add	r0, sl
 801968a:	fa1f fa80 	uxth.w	sl, r0
 801968e:	e7e4      	b.n	801965a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

08019690 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8019690:	b513      	push	{r0, r1, r4, lr}
 8019692:	1d01      	adds	r1, r0, #4
 8019694:	4603      	mov	r3, r0
 8019696:	466a      	mov	r2, sp
 8019698:	c903      	ldmia	r1, {r0, r1}
 801969a:	e882 0003 	stmia.w	r2, {r0, r1}
 801969e:	2100      	movs	r1, #0
 80196a0:	4618      	mov	r0, r3
 80196a2:	9100      	str	r1, [sp, #0]
 80196a4:	6819      	ldr	r1, [r3, #0]
 80196a6:	690c      	ldr	r4, [r1, #16]
 80196a8:	4611      	mov	r1, r2
 80196aa:	47a0      	blx	r4
 80196ac:	b002      	add	sp, #8
 80196ae:	bd10      	pop	{r4, pc}

080196b0 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80196b0:	b538      	push	{r3, r4, r5, lr}
 80196b2:	680b      	ldr	r3, [r1, #0]
 80196b4:	460c      	mov	r4, r1
 80196b6:	4605      	mov	r5, r0
 80196b8:	68db      	ldr	r3, [r3, #12]
 80196ba:	4798      	blx	r3
 80196bc:	6823      	ldr	r3, [r4, #0]
 80196be:	4620      	mov	r0, r4
 80196c0:	4629      	mov	r1, r5
 80196c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196c4:	4798      	blx	r3
 80196c6:	4628      	mov	r0, r5
 80196c8:	bd38      	pop	{r3, r4, r5, pc}

080196ca <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80196ca:	b410      	push	{r4}
 80196cc:	880a      	ldrh	r2, [r1, #0]
 80196ce:	8884      	ldrh	r4, [r0, #4]
 80196d0:	4422      	add	r2, r4
 80196d2:	800a      	strh	r2, [r1, #0]
 80196d4:	884a      	ldrh	r2, [r1, #2]
 80196d6:	88c4      	ldrh	r4, [r0, #6]
 80196d8:	4422      	add	r2, r4
 80196da:	804a      	strh	r2, [r1, #2]
 80196dc:	6940      	ldr	r0, [r0, #20]
 80196de:	b120      	cbz	r0, 80196ea <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80196e0:	6803      	ldr	r3, [r0, #0]
 80196e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80196e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196e8:	4718      	bx	r3
 80196ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80196ee:	4770      	bx	lr

080196f0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80196f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80196f2:	460b      	mov	r3, r1
 80196f4:	b085      	sub	sp, #20
 80196f6:	4604      	mov	r4, r0
 80196f8:	b901      	cbnz	r1, 80196fc <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80196fa:	b1fa      	cbz	r2, 801973c <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 80196fc:	1d27      	adds	r7, r4, #4
 80196fe:	466e      	mov	r6, sp
 8019700:	ad02      	add	r5, sp, #8
 8019702:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019706:	e886 0003 	stmia.w	r6, {r0, r1}
 801970a:	88e1      	ldrh	r1, [r4, #6]
 801970c:	4620      	mov	r0, r4
 801970e:	440a      	add	r2, r1
 8019710:	88a1      	ldrh	r1, [r4, #4]
 8019712:	4419      	add	r1, r3
 8019714:	6823      	ldr	r3, [r4, #0]
 8019716:	b212      	sxth	r2, r2
 8019718:	b209      	sxth	r1, r1
 801971a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801971c:	4798      	blx	r3
 801971e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019722:	e885 0003 	stmia.w	r5, {r0, r1}
 8019726:	6960      	ldr	r0, [r4, #20]
 8019728:	b150      	cbz	r0, 8019740 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 801972a:	6803      	ldr	r3, [r0, #0]
 801972c:	4631      	mov	r1, r6
 801972e:	691b      	ldr	r3, [r3, #16]
 8019730:	4798      	blx	r3
 8019732:	6960      	ldr	r0, [r4, #20]
 8019734:	6803      	ldr	r3, [r0, #0]
 8019736:	691b      	ldr	r3, [r3, #16]
 8019738:	4629      	mov	r1, r5
 801973a:	4798      	blx	r3
 801973c:	b005      	add	sp, #20
 801973e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019740:	f7ff fb30 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 8019744:	6803      	ldr	r3, [r0, #0]
 8019746:	4631      	mov	r1, r6
 8019748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801974a:	4798      	blx	r3
 801974c:	f7ff fb2a 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 8019750:	6803      	ldr	r3, [r0, #0]
 8019752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019754:	e7f0      	b.n	8019738 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

08019756 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019756:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019758:	8882      	ldrh	r2, [r0, #4]
 801975a:	4605      	mov	r5, r0
 801975c:	880b      	ldrh	r3, [r1, #0]
 801975e:	460c      	mov	r4, r1
 8019760:	4413      	add	r3, r2
 8019762:	800b      	strh	r3, [r1, #0]
 8019764:	884b      	ldrh	r3, [r1, #2]
 8019766:	88c2      	ldrh	r2, [r0, #6]
 8019768:	4413      	add	r3, r2
 801976a:	4602      	mov	r2, r0
 801976c:	804b      	strh	r3, [r1, #2]
 801976e:	466b      	mov	r3, sp
 8019770:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019774:	6851      	ldr	r1, [r2, #4]
 8019776:	c303      	stmia	r3!, {r0, r1}
 8019778:	4621      	mov	r1, r4
 801977a:	4668      	mov	r0, sp
 801977c:	f7fb fada 	bl	8014d34 <_ZN8touchgfx4RectaNERKS0_>
 8019780:	466b      	mov	r3, sp
 8019782:	cb03      	ldmia	r3!, {r0, r1}
 8019784:	6020      	str	r0, [r4, #0]
 8019786:	6061      	str	r1, [r4, #4]
 8019788:	6968      	ldr	r0, [r5, #20]
 801978a:	b128      	cbz	r0, 8019798 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801978c:	6803      	ldr	r3, [r0, #0]
 801978e:	691b      	ldr	r3, [r3, #16]
 8019790:	4621      	mov	r1, r4
 8019792:	4798      	blx	r3
 8019794:	b003      	add	sp, #12
 8019796:	bd30      	pop	{r4, r5, pc}
 8019798:	f7ff fb04 	bl	8018da4 <_ZN8touchgfx11Application11getInstanceEv>
 801979c:	6803      	ldr	r3, [r0, #0]
 801979e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80197a0:	e7f6      	b.n	8019790 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

080197a2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80197a2:	b570      	push	{r4, r5, r6, lr}
 80197a4:	8882      	ldrh	r2, [r0, #4]
 80197a6:	460c      	mov	r4, r1
 80197a8:	880b      	ldrh	r3, [r1, #0]
 80197aa:	4605      	mov	r5, r0
 80197ac:	4413      	add	r3, r2
 80197ae:	800b      	strh	r3, [r1, #0]
 80197b0:	884b      	ldrh	r3, [r1, #2]
 80197b2:	88c2      	ldrh	r2, [r0, #6]
 80197b4:	4413      	add	r3, r2
 80197b6:	804b      	strh	r3, [r1, #2]
 80197b8:	1d01      	adds	r1, r0, #4
 80197ba:	4620      	mov	r0, r4
 80197bc:	f7fb faba 	bl	8014d34 <_ZN8touchgfx4RectaNERKS0_>
 80197c0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80197c4:	b153      	cbz	r3, 80197dc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 80197c6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80197ca:	b13b      	cbz	r3, 80197dc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 80197cc:	6968      	ldr	r0, [r5, #20]
 80197ce:	b128      	cbz	r0, 80197dc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 80197d0:	6803      	ldr	r3, [r0, #0]
 80197d2:	4621      	mov	r1, r4
 80197d4:	6a1b      	ldr	r3, [r3, #32]
 80197d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80197da:	4718      	bx	r3
 80197dc:	bd70      	pop	{r4, r5, r6, pc}

080197de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80197de:	b510      	push	{r4, lr}
 80197e0:	2300      	movs	r3, #0
 80197e2:	4604      	mov	r4, r0
 80197e4:	4608      	mov	r0, r1
 80197e6:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80197ea:	8023      	strh	r3, [r4, #0]
 80197ec:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80197f0:	8063      	strh	r3, [r4, #2]
 80197f2:	6803      	ldr	r3, [r0, #0]
 80197f4:	80a1      	strh	r1, [r4, #4]
 80197f6:	4621      	mov	r1, r4
 80197f8:	80e2      	strh	r2, [r4, #6]
 80197fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197fc:	4798      	blx	r3
 80197fe:	4620      	mov	r0, r4
 8019800:	bd10      	pop	{r4, pc}
	...

08019804 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8019804:	b530      	push	{r4, r5, lr}
 8019806:	8083      	strh	r3, [r0, #4]
 8019808:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801980c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8019810:	7183      	strb	r3, [r0, #6]
 8019812:	79c3      	ldrb	r3, [r0, #7]
 8019814:	6101      	str	r1, [r0, #16]
 8019816:	f365 0306 	bfi	r3, r5, #0, #7
 801981a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801981e:	8282      	strh	r2, [r0, #20]
 8019820:	f365 13c7 	bfi	r3, r5, #7, #1
 8019824:	71c3      	strb	r3, [r0, #7]
 8019826:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801982a:	7203      	strb	r3, [r0, #8]
 801982c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8019830:	7243      	strb	r3, [r0, #9]
 8019832:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019836:	8143      	strh	r3, [r0, #10]
 8019838:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801983c:	8183      	strh	r3, [r0, #12]
 801983e:	4b01      	ldr	r3, [pc, #4]	; (8019844 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8019840:	6003      	str	r3, [r0, #0]
 8019842:	bd30      	pop	{r4, r5, pc}
 8019844:	0802a840 	.word	0x0802a840

08019848 <_ZNK8touchgfx9ConstFont4findEt>:
 8019848:	b5f0      	push	{r4, r5, r6, r7, lr}
 801984a:	8a84      	ldrh	r4, [r0, #20]
 801984c:	2500      	movs	r5, #0
 801984e:	260e      	movs	r6, #14
 8019850:	3c01      	subs	r4, #1
 8019852:	42a5      	cmp	r5, r4
 8019854:	dc0c      	bgt.n	8019870 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 8019856:	192a      	adds	r2, r5, r4
 8019858:	6903      	ldr	r3, [r0, #16]
 801985a:	1052      	asrs	r2, r2, #1
 801985c:	fb06 3302 	mla	r3, r6, r2, r3
 8019860:	889f      	ldrh	r7, [r3, #4]
 8019862:	428f      	cmp	r7, r1
 8019864:	d901      	bls.n	801986a <_ZNK8touchgfx9ConstFont4findEt+0x22>
 8019866:	1e54      	subs	r4, r2, #1
 8019868:	e7f3      	b.n	8019852 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801986a:	d202      	bcs.n	8019872 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801986c:	1c55      	adds	r5, r2, #1
 801986e:	e7f0      	b.n	8019852 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8019870:	2300      	movs	r3, #0
 8019872:	4618      	mov	r0, r3
 8019874:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019876 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019878:	4605      	mov	r5, r0
 801987a:	4617      	mov	r7, r2
 801987c:	461e      	mov	r6, r3
 801987e:	f7ff ffe3 	bl	8019848 <_ZNK8touchgfx9ConstFont4findEt>
 8019882:	b9e0      	cbnz	r0, 80198be <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 8019884:	b911      	cbnz	r1, 801988c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 8019886:	2400      	movs	r4, #0
 8019888:	4620      	mov	r0, r4
 801988a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801988c:	290a      	cmp	r1, #10
 801988e:	d0fa      	beq.n	8019886 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019890:	682b      	ldr	r3, [r5, #0]
 8019892:	4628      	mov	r0, r5
 8019894:	691b      	ldr	r3, [r3, #16]
 8019896:	4798      	blx	r3
 8019898:	4601      	mov	r1, r0
 801989a:	4628      	mov	r0, r5
 801989c:	f7ff ffd4 	bl	8019848 <_ZNK8touchgfx9ConstFont4findEt>
 80198a0:	4604      	mov	r4, r0
 80198a2:	2800      	cmp	r0, #0
 80198a4:	d0ef      	beq.n	8019886 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80198a6:	682b      	ldr	r3, [r5, #0]
 80198a8:	4621      	mov	r1, r4
 80198aa:	4628      	mov	r0, r5
 80198ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80198ae:	4798      	blx	r3
 80198b0:	6038      	str	r0, [r7, #0]
 80198b2:	682b      	ldr	r3, [r5, #0]
 80198b4:	4628      	mov	r0, r5
 80198b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80198b8:	4798      	blx	r3
 80198ba:	7030      	strb	r0, [r6, #0]
 80198bc:	e7e4      	b.n	8019888 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 80198be:	4604      	mov	r4, r0
 80198c0:	e7f1      	b.n	80198a6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

080198c2 <_ZN8touchgfx6memsetEPvhm>:
 80198c2:	4402      	add	r2, r0
 80198c4:	4290      	cmp	r0, r2
 80198c6:	d002      	beq.n	80198ce <_ZN8touchgfx6memsetEPvhm+0xc>
 80198c8:	f800 1b01 	strb.w	r1, [r0], #1
 80198cc:	e7fa      	b.n	80198c4 <_ZN8touchgfx6memsetEPvhm+0x2>
 80198ce:	4770      	bx	lr

080198d0 <_ZN8touchgfx3clzEl>:
 80198d0:	b1e8      	cbz	r0, 801990e <_ZN8touchgfx3clzEl+0x3e>
 80198d2:	2800      	cmp	r0, #0
 80198d4:	bfb8      	it	lt
 80198d6:	4240      	neglt	r0, r0
 80198d8:	0c03      	lsrs	r3, r0, #16
 80198da:	041b      	lsls	r3, r3, #16
 80198dc:	b9ab      	cbnz	r3, 801990a <_ZN8touchgfx3clzEl+0x3a>
 80198de:	0400      	lsls	r0, r0, #16
 80198e0:	2310      	movs	r3, #16
 80198e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80198e6:	bf04      	itt	eq
 80198e8:	0200      	lsleq	r0, r0, #8
 80198ea:	3308      	addeq	r3, #8
 80198ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80198f0:	bf04      	itt	eq
 80198f2:	0100      	lsleq	r0, r0, #4
 80198f4:	3304      	addeq	r3, #4
 80198f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80198fa:	bf04      	itt	eq
 80198fc:	0080      	lsleq	r0, r0, #2
 80198fe:	3302      	addeq	r3, #2
 8019900:	2800      	cmp	r0, #0
 8019902:	bfa8      	it	ge
 8019904:	3301      	addge	r3, #1
 8019906:	1e58      	subs	r0, r3, #1
 8019908:	4770      	bx	lr
 801990a:	2300      	movs	r3, #0
 801990c:	e7e9      	b.n	80198e2 <_ZN8touchgfx3clzEl+0x12>
 801990e:	201f      	movs	r0, #31
 8019910:	4770      	bx	lr

08019912 <_ZN8touchgfx6muldivElllRl>:
 8019912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019916:	4604      	mov	r4, r0
 8019918:	4698      	mov	r8, r3
 801991a:	2601      	movs	r6, #1
 801991c:	f7ff ffd8 	bl	80198d0 <_ZN8touchgfx3clzEl>
 8019920:	2c00      	cmp	r4, #0
 8019922:	fa04 f500 	lsl.w	r5, r4, r0
 8019926:	fa06 f600 	lsl.w	r6, r6, r0
 801992a:	bfba      	itte	lt
 801992c:	f04f 37ff 	movlt.w	r7, #4294967295
 8019930:	4264      	neglt	r4, r4
 8019932:	2701      	movge	r7, #1
 8019934:	2900      	cmp	r1, #0
 8019936:	f106 36ff 	add.w	r6, r6, #4294967295
 801993a:	bfbc      	itt	lt
 801993c:	4249      	neglt	r1, r1
 801993e:	427f      	neglt	r7, r7
 8019940:	2a00      	cmp	r2, #0
 8019942:	fa41 fc00 	asr.w	ip, r1, r0
 8019946:	ea01 0106 	and.w	r1, r1, r6
 801994a:	bfb8      	it	lt
 801994c:	427f      	neglt	r7, r7
 801994e:	fb04 f401 	mul.w	r4, r4, r1
 8019952:	fb95 f3f2 	sdiv	r3, r5, r2
 8019956:	fb02 5513 	mls	r5, r2, r3, r5
 801995a:	bfb8      	it	lt
 801995c:	4252      	neglt	r2, r2
 801995e:	fb94 f0f2 	sdiv	r0, r4, r2
 8019962:	fb02 4410 	mls	r4, r2, r0, r4
 8019966:	fb0c 4405 	mla	r4, ip, r5, r4
 801996a:	fb94 f1f2 	sdiv	r1, r4, r2
 801996e:	4408      	add	r0, r1
 8019970:	fb02 4211 	mls	r2, r2, r1, r4
 8019974:	fb0c 0003 	mla	r0, ip, r3, r0
 8019978:	f8c8 2000 	str.w	r2, [r8]
 801997c:	4378      	muls	r0, r7
 801997e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019982 <_ZN8touchgfx10ClickEventD1Ev>:
 8019982:	4770      	bx	lr

08019984 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8019984:	2000      	movs	r0, #0
 8019986:	4770      	bx	lr

08019988 <_ZN8touchgfx9DragEventD1Ev>:
 8019988:	4770      	bx	lr

0801998a <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801998a:	2001      	movs	r0, #1
 801998c:	4770      	bx	lr

0801998e <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801998e:	2002      	movs	r0, #2
 8019990:	4770      	bx	lr

08019992 <_ZN8touchgfx12GestureEventD1Ev>:
 8019992:	4770      	bx	lr

08019994 <_ZN8touchgfx10ClickEventD0Ev>:
 8019994:	b510      	push	{r4, lr}
 8019996:	4604      	mov	r4, r0
 8019998:	210c      	movs	r1, #12
 801999a:	f00b f932 	bl	8024c02 <_ZdlPvj>
 801999e:	4620      	mov	r0, r4
 80199a0:	bd10      	pop	{r4, pc}

080199a2 <_ZN8touchgfx9DragEventD0Ev>:
 80199a2:	b510      	push	{r4, lr}
 80199a4:	4604      	mov	r4, r0
 80199a6:	2110      	movs	r1, #16
 80199a8:	f00b f92b 	bl	8024c02 <_ZdlPvj>
 80199ac:	4620      	mov	r0, r4
 80199ae:	bd10      	pop	{r4, pc}

080199b0 <_ZN8touchgfx12GestureEventD0Ev>:
 80199b0:	b510      	push	{r4, lr}
 80199b2:	4604      	mov	r4, r0
 80199b4:	210c      	movs	r1, #12
 80199b6:	f00b f924 	bl	8024c02 <_ZdlPvj>
 80199ba:	4620      	mov	r0, r4
 80199bc:	bd10      	pop	{r4, pc}
	...

080199c0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80199c0:	b530      	push	{r4, r5, lr}
 80199c2:	460d      	mov	r5, r1
 80199c4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80199c6:	b087      	sub	sp, #28
 80199c8:	4604      	mov	r4, r0
 80199ca:	b301      	cbz	r1, 8019a0e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80199cc:	a801      	add	r0, sp, #4
 80199ce:	f7ff ff06 	bl	80197de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80199d2:	892a      	ldrh	r2, [r5, #8]
 80199d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80199d8:	7928      	ldrb	r0, [r5, #4]
 80199da:	1ad2      	subs	r2, r2, r3
 80199dc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80199de:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80199e2:	441a      	add	r2, r3
 80199e4:	896b      	ldrh	r3, [r5, #10]
 80199e6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80199ea:	f88d 0010 	strb.w	r0, [sp, #16]
 80199ee:	1b5b      	subs	r3, r3, r5
 80199f0:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80199f2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80199f4:	442b      	add	r3, r5
 80199f6:	4d07      	ldr	r5, [pc, #28]	; (8019a14 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80199f8:	f8ad 1012 	strh.w	r1, [sp, #18]
 80199fc:	a903      	add	r1, sp, #12
 80199fe:	9503      	str	r5, [sp, #12]
 8019a00:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019a04:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019a08:	6803      	ldr	r3, [r0, #0]
 8019a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019a0c:	4798      	blx	r3
 8019a0e:	b007      	add	sp, #28
 8019a10:	bd30      	pop	{r4, r5, pc}
 8019a12:	bf00      	nop
 8019a14:	0802a8bc 	.word	0x0802a8bc

08019a18 <_ZNK8touchgfx4Rect9intersectEss>:
 8019a18:	b510      	push	{r4, lr}
 8019a1a:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019a1e:	428b      	cmp	r3, r1
 8019a20:	dc10      	bgt.n	8019a44 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019a22:	8884      	ldrh	r4, [r0, #4]
 8019a24:	4423      	add	r3, r4
 8019a26:	b21b      	sxth	r3, r3
 8019a28:	4299      	cmp	r1, r3
 8019a2a:	da0b      	bge.n	8019a44 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019a2c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019a30:	4293      	cmp	r3, r2
 8019a32:	dc07      	bgt.n	8019a44 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8019a34:	88c0      	ldrh	r0, [r0, #6]
 8019a36:	4418      	add	r0, r3
 8019a38:	b200      	sxth	r0, r0
 8019a3a:	4282      	cmp	r2, r0
 8019a3c:	bfac      	ite	ge
 8019a3e:	2000      	movge	r0, #0
 8019a40:	2001      	movlt	r0, #1
 8019a42:	bd10      	pop	{r4, pc}
 8019a44:	2000      	movs	r0, #0
 8019a46:	e7fc      	b.n	8019a42 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08019a48 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8019a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a4a:	460c      	mov	r4, r1
 8019a4c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019a4e:	b089      	sub	sp, #36	; 0x24
 8019a50:	4605      	mov	r5, r0
 8019a52:	2900      	cmp	r1, #0
 8019a54:	d054      	beq.n	8019b00 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 8019a56:	4668      	mov	r0, sp
 8019a58:	f7ff fec1 	bl	80197de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019a5c:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8019a5e:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8019a60:	4668      	mov	r0, sp
 8019a62:	8922      	ldrh	r2, [r4, #8]
 8019a64:	88e1      	ldrh	r1, [r4, #6]
 8019a66:	443a      	add	r2, r7
 8019a68:	4431      	add	r1, r6
 8019a6a:	b212      	sxth	r2, r2
 8019a6c:	b209      	sxth	r1, r1
 8019a6e:	f7ff ffd3 	bl	8019a18 <_ZNK8touchgfx4Rect9intersectEss>
 8019a72:	b1d0      	cbz	r0, 8019aaa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8019a74:	89a2      	ldrh	r2, [r4, #12]
 8019a76:	4668      	mov	r0, sp
 8019a78:	8961      	ldrh	r1, [r4, #10]
 8019a7a:	443a      	add	r2, r7
 8019a7c:	4431      	add	r1, r6
 8019a7e:	b212      	sxth	r2, r2
 8019a80:	b209      	sxth	r1, r1
 8019a82:	f7ff ffc9 	bl	8019a18 <_ZNK8touchgfx4Rect9intersectEss>
 8019a86:	4603      	mov	r3, r0
 8019a88:	b978      	cbnz	r0, 8019aaa <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8019a8a:	4a1e      	ldr	r2, [pc, #120]	; (8019b04 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8019a8c:	a904      	add	r1, sp, #16
 8019a8e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019a90:	9204      	str	r2, [sp, #16]
 8019a92:	2202      	movs	r2, #2
 8019a94:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019a98:	f88d 2014 	strb.w	r2, [sp, #20]
 8019a9c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019aa0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019aa4:	6803      	ldr	r3, [r0, #0]
 8019aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019aa8:	4798      	blx	r3
 8019aaa:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8019aac:	a802      	add	r0, sp, #8
 8019aae:	f7ff fe96 	bl	80197de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019ab2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019ab6:	88e0      	ldrh	r0, [r4, #6]
 8019ab8:	8961      	ldrh	r1, [r4, #10]
 8019aba:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8019abe:	1a80      	subs	r0, r0, r2
 8019ac0:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8019ac4:	1a89      	subs	r1, r1, r2
 8019ac6:	8923      	ldrh	r3, [r4, #8]
 8019ac8:	4460      	add	r0, ip
 8019aca:	89a2      	ldrh	r2, [r4, #12]
 8019acc:	4461      	add	r1, ip
 8019ace:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8019ad0:	eba3 030e 	sub.w	r3, r3, lr
 8019ad4:	eba2 020e 	sub.w	r2, r2, lr
 8019ad8:	f8ad 0016 	strh.w	r0, [sp, #22]
 8019adc:	7927      	ldrb	r7, [r4, #4]
 8019ade:	4433      	add	r3, r6
 8019ae0:	4432      	add	r2, r6
 8019ae2:	4c09      	ldr	r4, [pc, #36]	; (8019b08 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 8019ae4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8019ae6:	f8ad 101a 	strh.w	r1, [sp, #26]
 8019aea:	a904      	add	r1, sp, #16
 8019aec:	9404      	str	r4, [sp, #16]
 8019aee:	f88d 7014 	strb.w	r7, [sp, #20]
 8019af2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019af6:	f8ad 201c 	strh.w	r2, [sp, #28]
 8019afa:	6803      	ldr	r3, [r0, #0]
 8019afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019afe:	4798      	blx	r3
 8019b00:	b009      	add	sp, #36	; 0x24
 8019b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b04:	0802a894 	.word	0x0802a894
 8019b08:	0802a8a8 	.word	0x0802a8a8

08019b0c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8019b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b10:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8019b14:	b0a1      	sub	sp, #132	; 0x84
 8019b16:	4604      	mov	r4, r0
 8019b18:	460d      	mov	r5, r1
 8019b1a:	790b      	ldrb	r3, [r1, #4]
 8019b1c:	f1b9 0f00 	cmp.w	r9, #0
 8019b20:	d00f      	beq.n	8019b42 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	f040 80a2 	bne.w	8019c6c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8019b28:	b021      	add	sp, #132	; 0x84
 8019b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b2e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8019b32:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8019b36:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019b3a:	1d20      	adds	r0, r4, #4
 8019b3c:	f7fb f848 	bl	8014bd0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019b40:	e094      	b.n	8019c6c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d1f0      	bne.n	8019b28 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019b46:	4b5f      	ldr	r3, [pc, #380]	; (8019cc4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8019b48:	681b      	ldr	r3, [r3, #0]
 8019b4a:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8019b4e:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8019b52:	f1ba 0f03 	cmp.w	sl, #3
 8019b56:	ddea      	ble.n	8019b2e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8019b58:	f1ba 0f0c 	cmp.w	sl, #12
 8019b5c:	f04f 0303 	mov.w	r3, #3
 8019b60:	f04f 0600 	mov.w	r6, #0
 8019b64:	4958      	ldr	r1, [pc, #352]	; (8019cc8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8019b66:	bfd8      	it	le
 8019b68:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8019b6c:	960a      	str	r6, [sp, #40]	; 0x28
 8019b6e:	bfd8      	it	le
 8019b70:	fb92 f3f3 	sdivle	r3, r2, r3
 8019b74:	9301      	str	r3, [sp, #4]
 8019b76:	4b55      	ldr	r3, [pc, #340]	; (8019ccc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8019b78:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019b7c:	4b54      	ldr	r3, [pc, #336]	; (8019cd0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 8019b7e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8019b82:	2248      	movs	r2, #72	; 0x48
 8019b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019b88:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8019b8c:	ab0e      	add	r3, sp, #56	; 0x38
 8019b8e:	4618      	mov	r0, r3
 8019b90:	f00b f8e0 	bl	8024d54 <memcpy>
 8019b94:	f04f 32ff 	mov.w	r2, #4294967295
 8019b98:	f8cd a008 	str.w	sl, [sp, #8]
 8019b9c:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8019ba0:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8019ba4:	46b3      	mov	fp, r6
 8019ba6:	fb93 f3f2 	sdiv	r3, r3, r2
 8019baa:	b29b      	uxth	r3, r3
 8019bac:	9303      	str	r3, [sp, #12]
 8019bae:	2300      	movs	r3, #0
 8019bb0:	9a03      	ldr	r2, [sp, #12]
 8019bb2:	88ef      	ldrh	r7, [r5, #6]
 8019bb4:	a80a      	add	r0, sp, #40	; 0x28
 8019bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8019bb8:	9b07      	ldr	r3, [sp, #28]
 8019bba:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8019bbe:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 8019bc2:	fb13 f302 	smulbb	r3, r3, r2
 8019bc6:	b29b      	uxth	r3, r3
 8019bc8:	9304      	str	r3, [sp, #16]
 8019bca:	9b07      	ldr	r3, [sp, #28]
 8019bcc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019bd0:	685b      	ldr	r3, [r3, #4]
 8019bd2:	fb13 f302 	smulbb	r3, r3, r2
 8019bd6:	b29b      	uxth	r3, r3
 8019bd8:	9305      	str	r3, [sp, #20]
 8019bda:	9b04      	ldr	r3, [sp, #16]
 8019bdc:	441f      	add	r7, r3
 8019bde:	9b05      	ldr	r3, [sp, #20]
 8019be0:	4498      	add	r8, r3
 8019be2:	b23f      	sxth	r7, r7
 8019be4:	fa0f f888 	sxth.w	r8, r8
 8019be8:	4639      	mov	r1, r7
 8019bea:	4642      	mov	r2, r8
 8019bec:	f7ff ff14 	bl	8019a18 <_ZNK8touchgfx4Rect9intersectEss>
 8019bf0:	b380      	cbz	r0, 8019c54 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019bf2:	4639      	mov	r1, r7
 8019bf4:	ab09      	add	r3, sp, #36	; 0x24
 8019bf6:	4642      	mov	r2, r8
 8019bf8:	1d20      	adds	r0, r4, #4
 8019bfa:	f7fa ffe9 	bl	8014bd0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8019bfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019c00:	b341      	cbz	r1, 8019c54 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019c02:	4549      	cmp	r1, r9
 8019c04:	d026      	beq.n	8019c54 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019c06:	a80c      	add	r0, sp, #48	; 0x30
 8019c08:	f7ff fde9 	bl	80197de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019c0c:	2002      	movs	r0, #2
 8019c0e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8019c12:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8019c16:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019c1a:	fb92 f2f0 	sdiv	r2, r2, r0
 8019c1e:	440a      	add	r2, r1
 8019c20:	1a99      	subs	r1, r3, r2
 8019c22:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8019c26:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8019c2a:	fb93 f3f0 	sdiv	r3, r3, r0
 8019c2e:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8019c32:	4403      	add	r3, r0
 8019c34:	1ad3      	subs	r3, r2, r3
 8019c36:	9a06      	ldr	r2, [sp, #24]
 8019c38:	435b      	muls	r3, r3
 8019c3a:	fb01 3301 	mla	r3, r1, r1, r3
 8019c3e:	4293      	cmp	r3, r2
 8019c40:	d208      	bcs.n	8019c54 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8019c42:	9a04      	ldr	r2, [sp, #16]
 8019c44:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019c48:	86a2      	strh	r2, [r4, #52]	; 0x34
 8019c4a:	9a05      	ldr	r2, [sp, #20]
 8019c4c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8019c50:	86e2      	strh	r2, [r4, #54]	; 0x36
 8019c52:	9306      	str	r3, [sp, #24]
 8019c54:	f10b 0b02 	add.w	fp, fp, #2
 8019c58:	f1bb 0f08 	cmp.w	fp, #8
 8019c5c:	dda7      	ble.n	8019bae <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 8019c5e:	9b02      	ldr	r3, [sp, #8]
 8019c60:	3601      	adds	r6, #1
 8019c62:	4453      	add	r3, sl
 8019c64:	9302      	str	r3, [sp, #8]
 8019c66:	9b01      	ldr	r3, [sp, #4]
 8019c68:	42b3      	cmp	r3, r6
 8019c6a:	d199      	bne.n	8019ba0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 8019c6c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019c6e:	2900      	cmp	r1, #0
 8019c70:	f43f af5a 	beq.w	8019b28 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019c74:	a80c      	add	r0, sp, #48	; 0x30
 8019c76:	2600      	movs	r6, #0
 8019c78:	f7ff fdb1 	bl	80197de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019c7c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8019c80:	88ea      	ldrh	r2, [r5, #6]
 8019c82:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 8019c86:	1ad2      	subs	r2, r2, r3
 8019c88:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019c8a:	7929      	ldrb	r1, [r5, #4]
 8019c8c:	441a      	add	r2, r3
 8019c8e:	892b      	ldrh	r3, [r5, #8]
 8019c90:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 8019c94:	a90e      	add	r1, sp, #56	; 0x38
 8019c96:	1a1b      	subs	r3, r3, r0
 8019c98:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8019c9a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8019c9e:	4403      	add	r3, r0
 8019ca0:	480c      	ldr	r0, [pc, #48]	; (8019cd4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 8019ca2:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 8019ca6:	900e      	str	r0, [sp, #56]	; 0x38
 8019ca8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8019caa:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8019cae:	6803      	ldr	r3, [r0, #0]
 8019cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019cb2:	4798      	blx	r3
 8019cb4:	792b      	ldrb	r3, [r5, #4]
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	f43f af36 	beq.w	8019b28 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019cbc:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8019cc0:	e732      	b.n	8019b28 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8019cc2:	bf00      	nop
 8019cc4:	2000b2d4 	.word	0x2000b2d4
 8019cc8:	08026968 	.word	0x08026968
 8019ccc:	2000b2c8 	.word	0x2000b2c8
 8019cd0:	2000b2ca 	.word	0x2000b2ca
 8019cd4:	0802a894 	.word	0x0802a894

08019cd8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8019cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019cda:	4604      	mov	r4, r0
 8019cdc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8019ce0:	3201      	adds	r2, #1
 8019ce2:	d112      	bne.n	8019d0a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8019ce4:	2500      	movs	r5, #0
 8019ce6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019cea:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019cee:	6803      	ldr	r3, [r0, #0]
 8019cf0:	9500      	str	r5, [sp, #0]
 8019cf2:	466d      	mov	r5, sp
 8019cf4:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019cf8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019cfc:	4629      	mov	r1, r5
 8019cfe:	6a1b      	ldr	r3, [r3, #32]
 8019d00:	4798      	blx	r3
 8019d02:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019d06:	e884 0003 	stmia.w	r4, {r0, r1}
 8019d0a:	4620      	mov	r0, r4
 8019d0c:	b003      	add	sp, #12
 8019d0e:	bd30      	pop	{r4, r5, pc}

08019d10 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8019d10:	b513      	push	{r0, r1, r4, lr}
 8019d12:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8019d16:	4604      	mov	r4, r0
 8019d18:	3301      	adds	r3, #1
 8019d1a:	d109      	bne.n	8019d30 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8019d1c:	4601      	mov	r1, r0
 8019d1e:	4668      	mov	r0, sp
 8019d20:	f7ff fd5d 	bl	80197de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019d24:	f8bd 3000 	ldrh.w	r3, [sp]
 8019d28:	8423      	strh	r3, [r4, #32]
 8019d2a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019d2e:	8463      	strh	r3, [r4, #34]	; 0x22
 8019d30:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8019d34:	b002      	add	sp, #8
 8019d36:	bd10      	pop	{r4, pc}

08019d38 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8019d38:	b513      	push	{r0, r1, r4, lr}
 8019d3a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8019d3e:	4604      	mov	r4, r0
 8019d40:	3301      	adds	r3, #1
 8019d42:	d109      	bne.n	8019d58 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8019d44:	4601      	mov	r1, r0
 8019d46:	4668      	mov	r0, sp
 8019d48:	f7ff fd49 	bl	80197de <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019d4c:	f8bd 3000 	ldrh.w	r3, [sp]
 8019d50:	8423      	strh	r3, [r4, #32]
 8019d52:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019d56:	8463      	strh	r3, [r4, #34]	; 0x22
 8019d58:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8019d5c:	b002      	add	sp, #8
 8019d5e:	bd10      	pop	{r4, pc}

08019d60 <_ZN8touchgfx6ScreenC1Ev>:
 8019d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d62:	4605      	mov	r5, r0
 8019d64:	4b17      	ldr	r3, [pc, #92]	; (8019dc4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8019d66:	2200      	movs	r2, #0
 8019d68:	4917      	ldr	r1, [pc, #92]	; (8019dc8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8019d6a:	f845 3b04 	str.w	r3, [r5], #4
 8019d6e:	2301      	movs	r3, #1
 8019d70:	8102      	strh	r2, [r0, #8]
 8019d72:	4604      	mov	r4, r0
 8019d74:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 8019d78:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8019d7c:	4b13      	ldr	r3, [pc, #76]	; (8019dcc <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8019d7e:	8142      	strh	r2, [r0, #10]
 8019d80:	f9b3 7000 	ldrsh.w	r7, [r3]
 8019d84:	4b12      	ldr	r3, [pc, #72]	; (8019dd0 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 8019d86:	8182      	strh	r2, [r0, #12]
 8019d88:	81c2      	strh	r2, [r0, #14]
 8019d8a:	8202      	strh	r2, [r0, #16]
 8019d8c:	8242      	strh	r2, [r0, #18]
 8019d8e:	8282      	strh	r2, [r0, #20]
 8019d90:	82c2      	strh	r2, [r0, #22]
 8019d92:	6202      	str	r2, [r0, #32]
 8019d94:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8019d98:	6342      	str	r2, [r0, #52]	; 0x34
 8019d9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019d9e:	6041      	str	r1, [r0, #4]
 8019da0:	4611      	mov	r1, r2
 8019da2:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8019da6:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8019daa:	4628      	mov	r0, r5
 8019dac:	f7f2 fdc2 	bl	800c934 <_ZN8touchgfx8Drawable5setXYEss>
 8019db0:	4639      	mov	r1, r7
 8019db2:	4628      	mov	r0, r5
 8019db4:	f7f2 fddc 	bl	800c970 <_ZN8touchgfx8Drawable8setWidthEs>
 8019db8:	4628      	mov	r0, r5
 8019dba:	4631      	mov	r1, r6
 8019dbc:	f7f2 fde7 	bl	800c98e <_ZN8touchgfx8Drawable9setHeightEs>
 8019dc0:	4620      	mov	r0, r4
 8019dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019dc4:	0802a8d0 	.word	0x0802a8d0
 8019dc8:	08028e90 	.word	0x08028e90
 8019dcc:	2000b2c8 	.word	0x2000b2c8
 8019dd0:	2000b2ca 	.word	0x2000b2ca

08019dd4 <_ZN8touchgfx6Screen4drawEv>:
 8019dd4:	4b09      	ldr	r3, [pc, #36]	; (8019dfc <_ZN8touchgfx6Screen4drawEv+0x28>)
 8019dd6:	b507      	push	{r0, r1, r2, lr}
 8019dd8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019ddc:	2100      	movs	r1, #0
 8019dde:	4b08      	ldr	r3, [pc, #32]	; (8019e00 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8019de0:	9100      	str	r1, [sp, #0]
 8019de2:	4669      	mov	r1, sp
 8019de4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019de8:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019dec:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019df0:	6803      	ldr	r3, [r0, #0]
 8019df2:	689b      	ldr	r3, [r3, #8]
 8019df4:	4798      	blx	r3
 8019df6:	b003      	add	sp, #12
 8019df8:	f85d fb04 	ldr.w	pc, [sp], #4
 8019dfc:	2000b2c8 	.word	0x2000b2c8
 8019e00:	2000b2ca 	.word	0x2000b2ca

08019e04 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8019e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e08:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019e0c:	b089      	sub	sp, #36	; 0x24
 8019e0e:	4680      	mov	r8, r0
 8019e10:	460c      	mov	r4, r1
 8019e12:	4615      	mov	r5, r2
 8019e14:	b16b      	cbz	r3, 8019e32 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019e16:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019e1a:	b153      	cbz	r3, 8019e32 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019e1c:	4628      	mov	r0, r5
 8019e1e:	f7ff ff5b 	bl	8019cd8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019e22:	4621      	mov	r1, r4
 8019e24:	f7fe ff7a 	bl	8018d1c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019e28:	69eb      	ldr	r3, [r5, #28]
 8019e2a:	b928      	cbnz	r0, 8019e38 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 8019e2c:	461d      	mov	r5, r3
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	d1f4      	bne.n	8019e1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 8019e32:	b009      	add	sp, #36	; 0x24
 8019e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e38:	ae04      	add	r6, sp, #16
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d051      	beq.n	8019ee2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8019e3e:	682b      	ldr	r3, [r5, #0]
 8019e40:	4629      	mov	r1, r5
 8019e42:	a802      	add	r0, sp, #8
 8019e44:	68db      	ldr	r3, [r3, #12]
 8019e46:	4798      	blx	r3
 8019e48:	4628      	mov	r0, r5
 8019e4a:	f7ff ff61 	bl	8019d10 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019e4e:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8019e52:	4407      	add	r7, r0
 8019e54:	4628      	mov	r0, r5
 8019e56:	f7ff ff6f 	bl	8019d38 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019e5a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019e5e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8019e62:	b23f      	sxth	r7, r7
 8019e64:	4418      	add	r0, r3
 8019e66:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8019e6a:	4621      	mov	r1, r4
 8019e6c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019e70:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019e74:	4630      	mov	r0, r6
 8019e76:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019e7a:	f8ad 7010 	strh.w	r7, [sp, #16]
 8019e7e:	f7fa ff59 	bl	8014d34 <_ZN8touchgfx4RectaNERKS0_>
 8019e82:	4628      	mov	r0, r5
 8019e84:	f7ff ff28 	bl	8019cd8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019e88:	ab06      	add	r3, sp, #24
 8019e8a:	4602      	mov	r2, r0
 8019e8c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8019e90:	e883 0003 	stmia.w	r3, {r0, r1}
 8019e94:	4611      	mov	r1, r2
 8019e96:	4618      	mov	r0, r3
 8019e98:	f7fa ff4c 	bl	8014d34 <_ZN8touchgfx4RectaNERKS0_>
 8019e9c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8019ea0:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019ea4:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8019ea8:	4299      	cmp	r1, r3
 8019eaa:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8019eae:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8019eb2:	d10b      	bne.n	8019ecc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8019eb4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019eb8:	4552      	cmp	r2, sl
 8019eba:	d107      	bne.n	8019ecc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8019ebc:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8019ec0:	455a      	cmp	r2, fp
 8019ec2:	d103      	bne.n	8019ecc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8019ec4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019ec8:	454a      	cmp	r2, r9
 8019eca:	d00a      	beq.n	8019ee2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8019ecc:	f1bb 0f00 	cmp.w	fp, #0
 8019ed0:	d002      	beq.n	8019ed8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 8019ed2:	f1b9 0f00 	cmp.w	r9, #0
 8019ed6:	d12e      	bne.n	8019f36 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 8019ed8:	69ea      	ldr	r2, [r5, #28]
 8019eda:	4621      	mov	r1, r4
 8019edc:	4640      	mov	r0, r8
 8019ede:	f7ff ff91 	bl	8019e04 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019ee2:	4628      	mov	r0, r5
 8019ee4:	f7ff fef8 	bl	8019cd8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019ee8:	6861      	ldr	r1, [r4, #4]
 8019eea:	4602      	mov	r2, r0
 8019eec:	4633      	mov	r3, r6
 8019eee:	6820      	ldr	r0, [r4, #0]
 8019ef0:	c303      	stmia	r3!, {r0, r1}
 8019ef2:	4611      	mov	r1, r2
 8019ef4:	4630      	mov	r0, r6
 8019ef6:	f7fa ff1d 	bl	8014d34 <_ZN8touchgfx4RectaNERKS0_>
 8019efa:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8019efe:	2b00      	cmp	r3, #0
 8019f00:	d097      	beq.n	8019e32 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019f02:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d093      	beq.n	8019e32 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019f0a:	4628      	mov	r0, r5
 8019f0c:	f7ff ff00 	bl	8019d10 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019f10:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019f14:	1a18      	subs	r0, r3, r0
 8019f16:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019f1a:	4628      	mov	r0, r5
 8019f1c:	f7ff ff0c 	bl	8019d38 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019f20:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019f24:	4631      	mov	r1, r6
 8019f26:	1a18      	subs	r0, r3, r0
 8019f28:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019f2c:	4628      	mov	r0, r5
 8019f2e:	682b      	ldr	r3, [r5, #0]
 8019f30:	689b      	ldr	r3, [r3, #8]
 8019f32:	4798      	blx	r3
 8019f34:	e77d      	b.n	8019e32 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8019f36:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019f3a:	fa1f f08a 	uxth.w	r0, sl
 8019f3e:	4552      	cmp	r2, sl
 8019f40:	9000      	str	r0, [sp, #0]
 8019f42:	da12      	bge.n	8019f6a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 8019f44:	9301      	str	r3, [sp, #4]
 8019f46:	9b00      	ldr	r3, [sp, #0]
 8019f48:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019f4c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019f50:	1a9a      	subs	r2, r3, r2
 8019f52:	f8ad 1010 	strh.w	r1, [sp, #16]
 8019f56:	4631      	mov	r1, r6
 8019f58:	f8ad 0014 	strh.w	r0, [sp, #20]
 8019f5c:	4640      	mov	r0, r8
 8019f5e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8019f62:	69ea      	ldr	r2, [r5, #28]
 8019f64:	f7ff ff4e 	bl	8019e04 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019f68:	9b01      	ldr	r3, [sp, #4]
 8019f6a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8019f6e:	b29f      	uxth	r7, r3
 8019f70:	429a      	cmp	r2, r3
 8019f72:	da0d      	bge.n	8019f90 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 8019f74:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019f78:	1aba      	subs	r2, r7, r2
 8019f7a:	f8ad a012 	strh.w	sl, [sp, #18]
 8019f7e:	4631      	mov	r1, r6
 8019f80:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019f84:	4640      	mov	r0, r8
 8019f86:	f8ad 9016 	strh.w	r9, [sp, #22]
 8019f8a:	69ea      	ldr	r2, [r5, #28]
 8019f8c:	f7ff ff3a 	bl	8019e04 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019f90:	8822      	ldrh	r2, [r4, #0]
 8019f92:	445f      	add	r7, fp
 8019f94:	88a3      	ldrh	r3, [r4, #4]
 8019f96:	b2bf      	uxth	r7, r7
 8019f98:	4413      	add	r3, r2
 8019f9a:	b23a      	sxth	r2, r7
 8019f9c:	b29b      	uxth	r3, r3
 8019f9e:	b219      	sxth	r1, r3
 8019fa0:	4291      	cmp	r1, r2
 8019fa2:	dd0d      	ble.n	8019fc0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 8019fa4:	1bdb      	subs	r3, r3, r7
 8019fa6:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019faa:	f8ad a012 	strh.w	sl, [sp, #18]
 8019fae:	4631      	mov	r1, r6
 8019fb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019fb4:	4640      	mov	r0, r8
 8019fb6:	f8ad 9016 	strh.w	r9, [sp, #22]
 8019fba:	69ea      	ldr	r2, [r5, #28]
 8019fbc:	f7ff ff22 	bl	8019e04 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019fc0:	88e2      	ldrh	r2, [r4, #6]
 8019fc2:	8863      	ldrh	r3, [r4, #2]
 8019fc4:	4413      	add	r3, r2
 8019fc6:	9a00      	ldr	r2, [sp, #0]
 8019fc8:	444a      	add	r2, r9
 8019fca:	b29b      	uxth	r3, r3
 8019fcc:	fa1f f982 	uxth.w	r9, r2
 8019fd0:	b219      	sxth	r1, r3
 8019fd2:	fa0f f289 	sxth.w	r2, r9
 8019fd6:	428a      	cmp	r2, r1
 8019fd8:	da83      	bge.n	8019ee2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8019fda:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019fde:	eba3 0309 	sub.w	r3, r3, r9
 8019fe2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019fe6:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019fea:	4631      	mov	r1, r6
 8019fec:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019ff0:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019ff4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019ff8:	69ea      	ldr	r2, [r5, #28]
 8019ffa:	e76f      	b.n	8019edc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

08019ffc <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8019ffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019ffe:	2300      	movs	r3, #0
 801a000:	aa02      	add	r2, sp, #8
 801a002:	4604      	mov	r4, r0
 801a004:	3004      	adds	r0, #4
 801a006:	f842 3d04 	str.w	r3, [r2, #-4]!
 801a00a:	460d      	mov	r5, r1
 801a00c:	f7fa ff69 	bl	8014ee2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801a010:	9a01      	ldr	r2, [sp, #4]
 801a012:	b11a      	cbz	r2, 801a01c <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801a014:	4629      	mov	r1, r5
 801a016:	4620      	mov	r0, r4
 801a018:	f7ff fef4 	bl	8019e04 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a01c:	b003      	add	sp, #12
 801a01e:	bd30      	pop	{r4, r5, pc}

0801a020 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a022:	4602      	mov	r2, r0
 801a024:	4604      	mov	r4, r0
 801a026:	460d      	mov	r5, r1
 801a028:	466b      	mov	r3, sp
 801a02a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a02e:	6851      	ldr	r1, [r2, #4]
 801a030:	c303      	stmia	r3!, {r0, r1}
 801a032:	4629      	mov	r1, r5
 801a034:	4668      	mov	r0, sp
 801a036:	f7fa fe7d 	bl	8014d34 <_ZN8touchgfx4RectaNERKS0_>
 801a03a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a03e:	4669      	mov	r1, sp
 801a040:	b123      	cbz	r3, 801a04c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801a042:	4620      	mov	r0, r4
 801a044:	f7ff ffda 	bl	8019ffc <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a048:	b003      	add	sp, #12
 801a04a:	bd30      	pop	{r4, r5, pc}
 801a04c:	1d20      	adds	r0, r4, #4
 801a04e:	f7fa ff0f 	bl	8014e70 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801a052:	e7f9      	b.n	801a048 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801a054 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801a054:	460b      	mov	r3, r1
 801a056:	680a      	ldr	r2, [r1, #0]
 801a058:	1d01      	adds	r1, r0, #4
 801a05a:	6952      	ldr	r2, [r2, #20]
 801a05c:	4618      	mov	r0, r3
 801a05e:	4710      	bx	r2

0801a060 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>:
 801a060:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a064:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a06c:	bfcc      	ite	gt
 801a06e:	ee30 0a27 	vaddgt.f32	s0, s0, s15
 801a072:	ee30 0a67 	vsuble.f32	s0, s0, s15
 801a076:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a07a:	ee10 3a10 	vmov	r3, s0
 801a07e:	b218      	sxth	r0, r3
 801a080:	4770      	bx	lr
	...

0801a084 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>:
 801a084:	b510      	push	{r4, lr}
 801a086:	4298      	cmp	r0, r3
 801a088:	eb01 0402 	add.w	r4, r1, r2
 801a08c:	b224      	sxth	r4, r4
 801a08e:	d225      	bcs.n	801a0dc <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x58>
 801a090:	b323      	cbz	r3, 801a0dc <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x58>
 801a092:	ee07 0a90 	vmov	s15, r0
 801a096:	ee06 1a10 	vmov	s12, r1
 801a09a:	ed9f 5a11 	vldr	s10, [pc, #68]	; 801a0e0 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x5c>
 801a09e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801a0a2:	ee07 3a90 	vmov	s15, r3
 801a0a6:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 801a0aa:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 801a0e4 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x60>
 801a0ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a0b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801a0b6:	ee06 2a90 	vmov	s13, r2
 801a0ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a0be:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a0c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a0c6:	eea7 6a85 	vfma.f32	s12, s15, s10
 801a0ca:	ee67 5aa7 	vmul.f32	s11, s15, s15
 801a0ce:	eea5 7a86 	vfma.f32	s14, s11, s12
 801a0d2:	eea6 0a87 	vfma.f32	s0, s13, s14
 801a0d6:	f7ff ffc3 	bl	801a060 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801a0da:	4604      	mov	r4, r0
 801a0dc:	4620      	mov	r0, r4
 801a0de:	bd10      	pop	{r4, pc}
 801a0e0:	402ce6b0 	.word	0x402ce6b0
 801a0e4:	3fd9cd60 	.word	0x3fd9cd60

0801a0e8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801a0e8:	b510      	push	{r4, lr}
 801a0ea:	4298      	cmp	r0, r3
 801a0ec:	eb01 0402 	add.w	r4, r1, r2
 801a0f0:	b224      	sxth	r4, r4
 801a0f2:	d21f      	bcs.n	801a134 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801a0f4:	b1f3      	cbz	r3, 801a134 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801a0f6:	ee07 0a90 	vmov	s15, r0
 801a0fa:	ee06 1a10 	vmov	s12, r1
 801a0fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801a102:	ee07 3a90 	vmov	s15, r3
 801a106:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 801a10a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a10e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801a112:	ee06 2a90 	vmov	s13, r2
 801a116:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a11a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801a11e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a122:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801a126:	eea6 7a27 	vfma.f32	s14, s12, s15
 801a12a:	eea6 0a87 	vfma.f32	s0, s13, s14
 801a12e:	f7ff ff97 	bl	801a060 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801a132:	4604      	mov	r4, r0
 801a134:	4620      	mov	r0, r4
 801a136:	bd10      	pop	{r4, pc}

0801a138 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801a138:	b510      	push	{r4, lr}
 801a13a:	4298      	cmp	r0, r3
 801a13c:	eb01 0402 	add.w	r4, r1, r2
 801a140:	b224      	sxth	r4, r4
 801a142:	d219      	bcs.n	801a178 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x40>
 801a144:	b1c3      	cbz	r3, 801a178 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x40>
 801a146:	ee07 2a90 	vmov	s15, r2
 801a14a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a14e:	ee07 0a90 	vmov	s15, r0
 801a152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a156:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a15a:	ee07 3a10 	vmov	s14, r3
 801a15e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a162:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801a166:	ee07 1a90 	vmov	s15, r1
 801a16a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801a16e:	ee36 0a80 	vadd.f32	s0, s13, s0
 801a172:	f7ff ff75 	bl	801a060 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801a176:	4604      	mov	r4, r0
 801a178:	4620      	mov	r0, r4
 801a17a:	bd10      	pop	{r4, pc}

0801a17c <_ZN8touchgfx15EasingEquations13linearEaseOutEtsst>:
 801a17c:	f7ff bfdc 	b.w	801a138 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>

0801a180 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 801a180:	f011 0f40 	tst.w	r1, #64	; 0x40
 801a184:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 801a188:	4b03      	ldr	r3, [pc, #12]	; (801a198 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 801a18a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801a18e:	bf08      	it	eq
 801a190:	2300      	moveq	r3, #0
 801a192:	4308      	orrs	r0, r1
 801a194:	4318      	orrs	r0, r3
 801a196:	4770      	bx	lr
 801a198:	fffffe00 	.word	0xfffffe00

0801a19c <_ZN8touchgfx9GlyphNode6setTopEs>:
 801a19c:	7b43      	ldrb	r3, [r0, #13]
 801a19e:	7201      	strb	r1, [r0, #8]
 801a1a0:	b289      	uxth	r1, r1
 801a1a2:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 801a1a6:	05ca      	lsls	r2, r1, #23
 801a1a8:	bf48      	it	mi
 801a1aa:	f043 0320 	orrmi.w	r3, r3, #32
 801a1ae:	7343      	strb	r3, [r0, #13]
 801a1b0:	058b      	lsls	r3, r1, #22
 801a1b2:	bf42      	ittt	mi
 801a1b4:	7b43      	ldrbmi	r3, [r0, #13]
 801a1b6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801a1ba:	7343      	strbmi	r3, [r0, #13]
 801a1bc:	4770      	bx	lr

0801a1be <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a1be:	b530      	push	{r4, r5, lr}
 801a1c0:	2500      	movs	r5, #0
 801a1c2:	2401      	movs	r4, #1
 801a1c4:	6843      	ldr	r3, [r0, #4]
 801a1c6:	b913      	cbnz	r3, 801a1ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a1c8:	6803      	ldr	r3, [r0, #0]
 801a1ca:	b1f3      	cbz	r3, 801a20a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a1cc:	6043      	str	r3, [r0, #4]
 801a1ce:	7c03      	ldrb	r3, [r0, #16]
 801a1d0:	b143      	cbz	r3, 801a1e4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a1d2:	68c3      	ldr	r3, [r0, #12]
 801a1d4:	b12b      	cbz	r3, 801a1e2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a1d6:	881a      	ldrh	r2, [r3, #0]
 801a1d8:	b11a      	cbz	r2, 801a1e2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a1da:	1c9a      	adds	r2, r3, #2
 801a1dc:	60c2      	str	r2, [r0, #12]
 801a1de:	8818      	ldrh	r0, [r3, #0]
 801a1e0:	bd30      	pop	{r4, r5, pc}
 801a1e2:	7405      	strb	r5, [r0, #16]
 801a1e4:	6843      	ldr	r3, [r0, #4]
 801a1e6:	8819      	ldrh	r1, [r3, #0]
 801a1e8:	b179      	cbz	r1, 801a20a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 801a1ea:	1c9a      	adds	r2, r3, #2
 801a1ec:	2902      	cmp	r1, #2
 801a1ee:	6042      	str	r2, [r0, #4]
 801a1f0:	d1f5      	bne.n	801a1de <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a1f2:	6883      	ldr	r3, [r0, #8]
 801a1f4:	1d1a      	adds	r2, r3, #4
 801a1f6:	6082      	str	r2, [r0, #8]
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	60c3      	str	r3, [r0, #12]
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d0e1      	beq.n	801a1c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a200:	881b      	ldrh	r3, [r3, #0]
 801a202:	2b00      	cmp	r3, #0
 801a204:	d0de      	beq.n	801a1c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a206:	7404      	strb	r4, [r0, #16]
 801a208:	e7dc      	b.n	801a1c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a20a:	2000      	movs	r0, #0
 801a20c:	e7e8      	b.n	801a1e0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a20e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801a20e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a210:	4605      	mov	r5, r0
 801a212:	4608      	mov	r0, r1
 801a214:	b1f1      	cbz	r1, 801a254 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801a216:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801a21a:	460b      	mov	r3, r1
 801a21c:	f101 0708 	add.w	r7, r1, #8
 801a220:	4622      	mov	r2, r4
 801a222:	6818      	ldr	r0, [r3, #0]
 801a224:	3308      	adds	r3, #8
 801a226:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a22a:	4626      	mov	r6, r4
 801a22c:	42bb      	cmp	r3, r7
 801a22e:	c603      	stmia	r6!, {r0, r1}
 801a230:	4634      	mov	r4, r6
 801a232:	d1f6      	bne.n	801a222 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801a234:	6818      	ldr	r0, [r3, #0]
 801a236:	6030      	str	r0, [r6, #0]
 801a238:	4610      	mov	r0, r2
 801a23a:	889b      	ldrh	r3, [r3, #4]
 801a23c:	80b3      	strh	r3, [r6, #4]
 801a23e:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801a242:	015b      	lsls	r3, r3, #5
 801a244:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a248:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 801a24c:	430b      	orrs	r3, r1
 801a24e:	425b      	negs	r3, r3
 801a250:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801a254:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a256 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a256:	b538      	push	{r3, r4, r5, lr}
 801a258:	460c      	mov	r4, r1
 801a25a:	6811      	ldr	r1, [r2, #0]
 801a25c:	4610      	mov	r0, r2
 801a25e:	68cd      	ldr	r5, [r1, #12]
 801a260:	4619      	mov	r1, r3
 801a262:	47a8      	blx	r5
 801a264:	2800      	cmp	r0, #0
 801a266:	bf08      	it	eq
 801a268:	4620      	moveq	r0, r4
 801a26a:	bd38      	pop	{r3, r4, r5, pc}

0801a26c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801a26c:	b570      	push	{r4, r5, r6, lr}
 801a26e:	8810      	ldrh	r0, [r2, #0]
 801a270:	4298      	cmp	r0, r3
 801a272:	d817      	bhi.n	801a2a4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a274:	1e48      	subs	r0, r1, #1
 801a276:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801a27a:	4298      	cmp	r0, r3
 801a27c:	d312      	bcc.n	801a2a4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a27e:	2400      	movs	r4, #0
 801a280:	428c      	cmp	r4, r1
 801a282:	d20f      	bcs.n	801a2a4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801a284:	1860      	adds	r0, r4, r1
 801a286:	1040      	asrs	r0, r0, #1
 801a288:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801a28c:	0085      	lsls	r5, r0, #2
 801a28e:	42b3      	cmp	r3, r6
 801a290:	d902      	bls.n	801a298 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801a292:	3001      	adds	r0, #1
 801a294:	b284      	uxth	r4, r0
 801a296:	e7f3      	b.n	801a280 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a298:	d102      	bne.n	801a2a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 801a29a:	442a      	add	r2, r5
 801a29c:	8850      	ldrh	r0, [r2, #2]
 801a29e:	bd70      	pop	{r4, r5, r6, pc}
 801a2a0:	b281      	uxth	r1, r0
 801a2a2:	e7ed      	b.n	801a280 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801a2a4:	2000      	movs	r0, #0
 801a2a6:	e7fa      	b.n	801a29e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

0801a2a8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 801a2a8:	b510      	push	{r4, lr}
 801a2aa:	8ac3      	ldrh	r3, [r0, #22]
 801a2ac:	428b      	cmp	r3, r1
 801a2ae:	d805      	bhi.n	801a2bc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 801a2b0:	4b07      	ldr	r3, [pc, #28]	; (801a2d0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801a2b2:	21fd      	movs	r1, #253	; 0xfd
 801a2b4:	4a07      	ldr	r2, [pc, #28]	; (801a2d4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801a2b6:	4808      	ldr	r0, [pc, #32]	; (801a2d8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801a2b8:	f00a fcce 	bl	8024c58 <__assert_func>
 801a2bc:	8a83      	ldrh	r3, [r0, #20]
 801a2be:	240a      	movs	r4, #10
 801a2c0:	4419      	add	r1, r3
 801a2c2:	fbb1 f3f4 	udiv	r3, r1, r4
 801a2c6:	fb04 1113 	mls	r1, r4, r3, r1
 801a2ca:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801a2ce:	bd10      	pop	{r4, pc}
 801a2d0:	0802a91d 	.word	0x0802a91d
 801a2d4:	0802ad4c 	.word	0x0802ad4c
 801a2d8:	0802a92b 	.word	0x0802a92b

0801a2dc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 801a2dc:	b508      	push	{r3, lr}
 801a2de:	8ac3      	ldrh	r3, [r0, #22]
 801a2e0:	428b      	cmp	r3, r1
 801a2e2:	d805      	bhi.n	801a2f0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 801a2e4:	4b07      	ldr	r3, [pc, #28]	; (801a304 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801a2e6:	21d3      	movs	r1, #211	; 0xd3
 801a2e8:	4a07      	ldr	r2, [pc, #28]	; (801a308 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 801a2ea:	4808      	ldr	r0, [pc, #32]	; (801a30c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 801a2ec:	f00a fcb4 	bl	8024c58 <__assert_func>
 801a2f0:	8a83      	ldrh	r3, [r0, #20]
 801a2f2:	220a      	movs	r2, #10
 801a2f4:	4419      	add	r1, r3
 801a2f6:	fbb1 f3f2 	udiv	r3, r1, r2
 801a2fa:	fb02 1113 	mls	r1, r2, r3, r1
 801a2fe:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801a302:	bd08      	pop	{r3, pc}
 801a304:	0802a91d 	.word	0x0802a91d
 801a308:	0802aa9c 	.word	0x0802aa9c
 801a30c:	0802a92b 	.word	0x0802a92b

0801a310 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a314:	4604      	mov	r4, r0
 801a316:	4688      	mov	r8, r1
 801a318:	4615      	mov	r5, r2
 801a31a:	b94a      	cbnz	r2, 801a330 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 801a31c:	4691      	mov	r9, r2
 801a31e:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801a322:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801a326:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801a32a:	4648      	mov	r0, r9
 801a32c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a330:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801a334:	8892      	ldrh	r2, [r2, #4]
 801a336:	462b      	mov	r3, r5
 801a338:	f105 0c08 	add.w	ip, r5, #8
 801a33c:	46b3      	mov	fp, r6
 801a33e:	6818      	ldr	r0, [r3, #0]
 801a340:	3308      	adds	r3, #8
 801a342:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a346:	4637      	mov	r7, r6
 801a348:	4563      	cmp	r3, ip
 801a34a:	c703      	stmia	r7!, {r0, r1}
 801a34c:	463e      	mov	r6, r7
 801a34e:	d1f6      	bne.n	801a33e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 801a350:	6818      	ldr	r0, [r3, #0]
 801a352:	46d9      	mov	r9, fp
 801a354:	6038      	str	r0, [r7, #0]
 801a356:	889b      	ldrh	r3, [r3, #4]
 801a358:	80bb      	strh	r3, [r7, #4]
 801a35a:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801a35e:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 801a362:	18d3      	adds	r3, r2, r3
 801a364:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801a368:	b298      	uxth	r0, r3
 801a36a:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 801a36e:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 801a372:	281d      	cmp	r0, #29
 801a374:	ea4a 0a01 	orr.w	sl, sl, r1
 801a378:	fa1f f68a 	uxth.w	r6, sl
 801a37c:	d842      	bhi.n	801a404 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 801a37e:	2301      	movs	r3, #1
 801a380:	4950      	ldr	r1, [pc, #320]	; (801a4c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 801a382:	ea4f 0aea 	mov.w	sl, sl, asr #3
 801a386:	4083      	lsls	r3, r0
 801a388:	420b      	tst	r3, r1
 801a38a:	d114      	bne.n	801a3b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801a38c:	f413 7f60 	tst.w	r3, #896	; 0x380
 801a390:	d03c      	beq.n	801a40c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 801a392:	fa1f fa8a 	uxth.w	sl, sl
 801a396:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801a39a:	4658      	mov	r0, fp
 801a39c:	eba1 010a 	sub.w	r1, r1, sl
 801a3a0:	b209      	sxth	r1, r1
 801a3a2:	f7ff fefb 	bl	801a19c <_ZN8touchgfx9GlyphNode6setTopEs>
 801a3a6:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 801a3aa:	1b86      	subs	r6, r0, r6
 801a3ac:	eba6 0a0a 	sub.w	sl, r6, sl
 801a3b0:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 801a3b4:	e7b9      	b.n	801a32a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a3b6:	2100      	movs	r1, #0
 801a3b8:	f104 001a 	add.w	r0, r4, #26
 801a3bc:	f7ff ff8e 	bl	801a2dc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a3c0:	f640 6333 	movw	r3, #3635	; 0xe33
 801a3c4:	4601      	mov	r1, r0
 801a3c6:	4298      	cmp	r0, r3
 801a3c8:	d10a      	bne.n	801a3e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 801a3ca:	f8d8 3000 	ldr.w	r3, [r8]
 801a3ce:	4640      	mov	r0, r8
 801a3d0:	68db      	ldr	r3, [r3, #12]
 801a3d2:	4798      	blx	r3
 801a3d4:	7b41      	ldrb	r1, [r0, #13]
 801a3d6:	7a00      	ldrb	r0, [r0, #8]
 801a3d8:	f7ff fed2 	bl	801a180 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a3dc:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a3e0:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801a3e4:	4658      	mov	r0, fp
 801a3e6:	4431      	add	r1, r6
 801a3e8:	4451      	add	r1, sl
 801a3ea:	b209      	sxth	r1, r1
 801a3ec:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 801a3f0:	f7ff fed4 	bl	801a19c <_ZN8touchgfx9GlyphNode6setTopEs>
 801a3f4:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801a3f8:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801a3fc:	1a9b      	subs	r3, r3, r2
 801a3fe:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801a402:	e792      	b.n	801a32a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a404:	f640 631b 	movw	r3, #3611	; 0xe1b
 801a408:	429a      	cmp	r2, r3
 801a40a:	d005      	beq.n	801a418 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 801a40c:	f022 0302 	bic.w	r3, r2, #2
 801a410:	f640 611d 	movw	r1, #3613	; 0xe1d
 801a414:	428b      	cmp	r3, r1
 801a416:	d119      	bne.n	801a44c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 801a418:	1e53      	subs	r3, r2, #1
 801a41a:	4629      	mov	r1, r5
 801a41c:	4642      	mov	r2, r8
 801a41e:	4620      	mov	r0, r4
 801a420:	b29b      	uxth	r3, r3
 801a422:	f7ff ff18 	bl	801a256 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a426:	7b41      	ldrb	r1, [r0, #13]
 801a428:	7a00      	ldrb	r0, [r0, #8]
 801a42a:	f7ff fea9 	bl	801a180 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a42e:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801a432:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a436:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a43a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a43e:	4313      	orrs	r3, r2
 801a440:	115a      	asrs	r2, r3, #5
 801a442:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801a446:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801a44a:	e02e      	b.n	801a4aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801a44c:	4639      	mov	r1, r7
 801a44e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801a452:	f7ff fe95 	bl	801a180 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a456:	f640 6109 	movw	r1, #3593	; 0xe09
 801a45a:	f022 0310 	bic.w	r3, r2, #16
 801a45e:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801a462:	428b      	cmp	r3, r1
 801a464:	d003      	beq.n	801a46e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 801a466:	f640 6313 	movw	r3, #3603	; 0xe13
 801a46a:	429a      	cmp	r2, r3
 801a46c:	d127      	bne.n	801a4be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 801a46e:	b27f      	sxtb	r7, r7
 801a470:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801a474:	4629      	mov	r1, r5
 801a476:	4620      	mov	r0, r4
 801a478:	f407 7780 	and.w	r7, r7, #256	; 0x100
 801a47c:	431f      	orrs	r7, r3
 801a47e:	f640 6313 	movw	r3, #3603	; 0xe13
 801a482:	429a      	cmp	r2, r3
 801a484:	bf14      	ite	ne
 801a486:	f102 33ff 	addne.w	r3, r2, #4294967295
 801a48a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801a48e:	4642      	mov	r2, r8
 801a490:	bf18      	it	ne
 801a492:	b29b      	uxthne	r3, r3
 801a494:	f7ff fedf 	bl	801a256 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a498:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801a49c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a4a0:	7a83      	ldrb	r3, [r0, #10]
 801a4a2:	4313      	orrs	r3, r2
 801a4a4:	1aff      	subs	r7, r7, r3
 801a4a6:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 801a4aa:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801a4ae:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801a4b2:	f7ff fe65 	bl	801a180 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801a4b6:	1b80      	subs	r0, r0, r6
 801a4b8:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 801a4bc:	e735      	b.n	801a32a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a4be:	2300      	movs	r3, #0
 801a4c0:	e7c1      	b.n	801a446 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801a4c2:	bf00      	nop
 801a4c4:	3fc00079 	.word	0x3fc00079

0801a4c8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801a4c8:	3a01      	subs	r2, #1
 801a4ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4ce:	b292      	uxth	r2, r2
 801a4d0:	460c      	mov	r4, r1
 801a4d2:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801a4d6:	42b2      	cmp	r2, r6
 801a4d8:	d018      	beq.n	801a50c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 801a4da:	8b01      	ldrh	r1, [r0, #24]
 801a4dc:	f834 5b02 	ldrh.w	r5, [r4], #2
 801a4e0:	4291      	cmp	r1, r2
 801a4e2:	d805      	bhi.n	801a4f0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 801a4e4:	4b13      	ldr	r3, [pc, #76]	; (801a534 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 801a4e6:	21d3      	movs	r1, #211	; 0xd3
 801a4e8:	4a13      	ldr	r2, [pc, #76]	; (801a538 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 801a4ea:	4814      	ldr	r0, [pc, #80]	; (801a53c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801a4ec:	f00a fbb4 	bl	8024c58 <__assert_func>
 801a4f0:	8ac1      	ldrh	r1, [r0, #22]
 801a4f2:	4411      	add	r1, r2
 801a4f4:	3a01      	subs	r2, #1
 801a4f6:	f001 0101 	and.w	r1, r1, #1
 801a4fa:	b292      	uxth	r2, r2
 801a4fc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801a500:	8a49      	ldrh	r1, [r1, #18]
 801a502:	428d      	cmp	r5, r1
 801a504:	d0e7      	beq.n	801a4d6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 801a506:	2000      	movs	r0, #0
 801a508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a50c:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801a510:	2600      	movs	r6, #0
 801a512:	f100 051a 	add.w	r5, r0, #26
 801a516:	441f      	add	r7, r3
 801a518:	b2b1      	uxth	r1, r6
 801a51a:	42b9      	cmp	r1, r7
 801a51c:	da08      	bge.n	801a530 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 801a51e:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 801a522:	4628      	mov	r0, r5
 801a524:	f7ff feda 	bl	801a2dc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a528:	3601      	adds	r6, #1
 801a52a:	4540      	cmp	r0, r8
 801a52c:	d0f4      	beq.n	801a518 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 801a52e:	e7ea      	b.n	801a506 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801a530:	2001      	movs	r0, #1
 801a532:	e7e9      	b.n	801a508 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801a534:	0802a91d 	.word	0x0802a91d
 801a538:	0802aeac 	.word	0x0802aeac
 801a53c:	0802a92b 	.word	0x0802a92b

0801a540 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801a540:	b538      	push	{r3, r4, r5, lr}
 801a542:	8ac3      	ldrh	r3, [r0, #22]
 801a544:	428b      	cmp	r3, r1
 801a546:	d205      	bcs.n	801a554 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 801a548:	4b08      	ldr	r3, [pc, #32]	; (801a56c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 801a54a:	21d8      	movs	r1, #216	; 0xd8
 801a54c:	4a08      	ldr	r2, [pc, #32]	; (801a570 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801a54e:	4809      	ldr	r0, [pc, #36]	; (801a574 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801a550:	f00a fb82 	bl	8024c58 <__assert_func>
 801a554:	8a82      	ldrh	r2, [r0, #20]
 801a556:	250a      	movs	r5, #10
 801a558:	1a5b      	subs	r3, r3, r1
 801a55a:	440a      	add	r2, r1
 801a55c:	82c3      	strh	r3, [r0, #22]
 801a55e:	fbb2 f4f5 	udiv	r4, r2, r5
 801a562:	fb05 2214 	mls	r2, r5, r4, r2
 801a566:	8282      	strh	r2, [r0, #20]
 801a568:	bd38      	pop	{r3, r4, r5, pc}
 801a56a:	bf00      	nop
 801a56c:	0802a911 	.word	0x0802a911
 801a570:	0802acc8 	.word	0x0802acc8
 801a574:	0802a92b 	.word	0x0802a92b

0801a578 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 801a578:	b538      	push	{r3, r4, r5, lr}
 801a57a:	8ac3      	ldrh	r3, [r0, #22]
 801a57c:	2b09      	cmp	r3, #9
 801a57e:	d905      	bls.n	801a58c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801a580:	4b08      	ldr	r3, [pc, #32]	; (801a5a4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801a582:	21f7      	movs	r1, #247	; 0xf7
 801a584:	4a08      	ldr	r2, [pc, #32]	; (801a5a8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 801a586:	4809      	ldr	r0, [pc, #36]	; (801a5ac <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 801a588:	f00a fb66 	bl	8024c58 <__assert_func>
 801a58c:	8a82      	ldrh	r2, [r0, #20]
 801a58e:	250a      	movs	r5, #10
 801a590:	441a      	add	r2, r3
 801a592:	3301      	adds	r3, #1
 801a594:	fbb2 f4f5 	udiv	r4, r2, r5
 801a598:	fb05 2214 	mls	r2, r5, r4, r2
 801a59c:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 801a5a0:	82c3      	strh	r3, [r0, #22]
 801a5a2:	bd38      	pop	{r3, r4, r5, pc}
 801a5a4:	0802a905 	.word	0x0802a905
 801a5a8:	0802ac19 	.word	0x0802ac19
 801a5ac:	0802a92b 	.word	0x0802a92b

0801a5b0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801a5b0:	b538      	push	{r3, r4, r5, lr}
 801a5b2:	4604      	mov	r4, r0
 801a5b4:	f100 051a 	add.w	r5, r0, #26
 801a5b8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a5ba:	2b0a      	cmp	r3, #10
 801a5bc:	d01c      	beq.n	801a5f8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801a5be:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801a5c0:	b962      	cbnz	r2, 801a5dc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801a5c2:	f104 051a 	add.w	r5, r4, #26
 801a5c6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a5c8:	2b0a      	cmp	r3, #10
 801a5ca:	d015      	beq.n	801a5f8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801a5cc:	4620      	mov	r0, r4
 801a5ce:	f7ff fdf6 	bl	801a1be <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801a5d2:	4601      	mov	r1, r0
 801a5d4:	4628      	mov	r0, r5
 801a5d6:	f7ff ffcf 	bl	801a578 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801a5da:	e7f4      	b.n	801a5c6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 801a5dc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801a5de:	3a01      	subs	r2, #1
 801a5e0:	4628      	mov	r0, r5
 801a5e2:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801a5e6:	3301      	adds	r3, #1
 801a5e8:	f003 0301 	and.w	r3, r3, #1
 801a5ec:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801a5ee:	8722      	strh	r2, [r4, #56]	; 0x38
 801a5f0:	86e3      	strh	r3, [r4, #54]	; 0x36
 801a5f2:	f7ff ffc1 	bl	801a578 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801a5f6:	e7df      	b.n	801a5b8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 801a5f8:	bd38      	pop	{r3, r4, r5, pc}
	...

0801a5fc <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801a5fc:	2300      	movs	r3, #0
 801a5fe:	b510      	push	{r4, lr}
 801a600:	6043      	str	r3, [r0, #4]
 801a602:	4604      	mov	r4, r0
 801a604:	60c3      	str	r3, [r0, #12]
 801a606:	7403      	strb	r3, [r0, #16]
 801a608:	8603      	strh	r3, [r0, #48]	; 0x30
 801a60a:	8303      	strh	r3, [r0, #24]
 801a60c:	8703      	strh	r3, [r0, #56]	; 0x38
 801a60e:	f7ff ffcf 	bl	801a5b0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a612:	4a0a      	ldr	r2, [pc, #40]	; (801a63c <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801a614:	6813      	ldr	r3, [r2, #0]
 801a616:	4611      	mov	r1, r2
 801a618:	b913      	cbnz	r3, 801a620 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 801a61a:	6852      	ldr	r2, [r2, #4]
 801a61c:	07d0      	lsls	r0, r2, #31
 801a61e:	d50b      	bpl.n	801a638 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 801a620:	6849      	ldr	r1, [r1, #4]
 801a622:	104a      	asrs	r2, r1, #1
 801a624:	07c9      	lsls	r1, r1, #31
 801a626:	eb04 0002 	add.w	r0, r4, r2
 801a62a:	bf48      	it	mi
 801a62c:	58a2      	ldrmi	r2, [r4, r2]
 801a62e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a632:	bf48      	it	mi
 801a634:	58d3      	ldrmi	r3, [r2, r3]
 801a636:	4718      	bx	r3
 801a638:	bd10      	pop	{r4, pc}
 801a63a:	bf00      	nop
 801a63c:	2000835c 	.word	0x2000835c

0801a640 <_ZN8touchgfx12TextProviderC1Ev>:
 801a640:	2300      	movs	r3, #0
 801a642:	2201      	movs	r2, #1
 801a644:	b510      	push	{r4, lr}
 801a646:	4604      	mov	r4, r0
 801a648:	60c3      	str	r3, [r0, #12]
 801a64a:	7403      	strb	r3, [r0, #16]
 801a64c:	82c3      	strh	r3, [r0, #22]
 801a64e:	8303      	strh	r3, [r0, #24]
 801a650:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801a652:	8603      	strh	r3, [r0, #48]	; 0x30
 801a654:	86c3      	strh	r3, [r0, #54]	; 0x36
 801a656:	8703      	strh	r3, [r0, #56]	; 0x38
 801a658:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a65a:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801a65e:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801a662:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801a666:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801a66a:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801a66e:	e9c0 3300 	strd	r3, r3, [r0]
 801a672:	f7ff ffc3 	bl	801a5fc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801a676:	4620      	mov	r0, r4
 801a678:	bd10      	pop	{r4, pc}

0801a67a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801a67a:	b410      	push	{r4}
 801a67c:	6082      	str	r2, [r0, #8]
 801a67e:	6001      	str	r1, [r0, #0]
 801a680:	63c3      	str	r3, [r0, #60]	; 0x3c
 801a682:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a686:	f7ff bfb9 	b.w	801a5fc <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801a68c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 801a68c:	b508      	push	{r3, lr}
 801a68e:	88c2      	ldrh	r2, [r0, #6]
 801a690:	440a      	add	r2, r1
 801a692:	2a02      	cmp	r2, #2
 801a694:	dd05      	ble.n	801a6a2 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801a696:	4b06      	ldr	r3, [pc, #24]	; (801a6b0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 801a698:	21ec      	movs	r1, #236	; 0xec
 801a69a:	4a06      	ldr	r2, [pc, #24]	; (801a6b4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 801a69c:	4806      	ldr	r0, [pc, #24]	; (801a6b8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 801a69e:	f00a fadb 	bl	8024c58 <__assert_func>
 801a6a2:	8883      	ldrh	r3, [r0, #4]
 801a6a4:	80c2      	strh	r2, [r0, #6]
 801a6a6:	1a59      	subs	r1, r3, r1
 801a6a8:	f001 0101 	and.w	r1, r1, #1
 801a6ac:	8081      	strh	r1, [r0, #4]
 801a6ae:	bd08      	pop	{r3, pc}
 801a6b0:	0802a957 	.word	0x0802a957
 801a6b4:	0802ae25 	.word	0x0802ae25
 801a6b8:	0802a92b 	.word	0x0802a92b

0801a6bc <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 801a6bc:	b508      	push	{r3, lr}
 801a6be:	88c3      	ldrh	r3, [r0, #6]
 801a6c0:	428b      	cmp	r3, r1
 801a6c2:	d805      	bhi.n	801a6d0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801a6c4:	4b06      	ldr	r3, [pc, #24]	; (801a6e0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801a6c6:	21fd      	movs	r1, #253	; 0xfd
 801a6c8:	4a06      	ldr	r2, [pc, #24]	; (801a6e4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801a6ca:	4807      	ldr	r0, [pc, #28]	; (801a6e8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 801a6cc:	f00a fac4 	bl	8024c58 <__assert_func>
 801a6d0:	8883      	ldrh	r3, [r0, #4]
 801a6d2:	4419      	add	r1, r3
 801a6d4:	f001 0101 	and.w	r1, r1, #1
 801a6d8:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801a6dc:	bd08      	pop	{r3, pc}
 801a6de:	bf00      	nop
 801a6e0:	0802a91d 	.word	0x0802a91d
 801a6e4:	0802af7d 	.word	0x0802af7d
 801a6e8:	0802a92b 	.word	0x0802a92b

0801a6ec <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801a6ec:	b570      	push	{r4, r5, r6, lr}
 801a6ee:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801a6f0:	4604      	mov	r4, r0
 801a6f2:	b92a      	cbnz	r2, 801a700 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801a6f4:	4b12      	ldr	r3, [pc, #72]	; (801a740 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801a6f6:	21de      	movs	r1, #222	; 0xde
 801a6f8:	4a12      	ldr	r2, [pc, #72]	; (801a744 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801a6fa:	4813      	ldr	r0, [pc, #76]	; (801a748 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801a6fc:	f00a faac 	bl	8024c58 <__assert_func>
 801a700:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801a702:	260a      	movs	r6, #10
 801a704:	3a01      	subs	r2, #1
 801a706:	3412      	adds	r4, #18
 801a708:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801a70c:	3301      	adds	r3, #1
 801a70e:	8b4d      	ldrh	r5, [r1, #26]
 801a710:	8602      	strh	r2, [r0, #48]	; 0x30
 801a712:	fbb3 f1f6 	udiv	r1, r3, r6
 801a716:	fb06 3311 	mls	r3, r6, r1, r3
 801a71a:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801a71c:	f7ff ff48 	bl	801a5b0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a720:	88e3      	ldrh	r3, [r4, #6]
 801a722:	2101      	movs	r1, #1
 801a724:	2b02      	cmp	r3, #2
 801a726:	bf04      	itt	eq
 801a728:	2301      	moveq	r3, #1
 801a72a:	80e3      	strheq	r3, [r4, #6]
 801a72c:	4620      	mov	r0, r4
 801a72e:	f7ff ffad 	bl	801a68c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801a732:	4620      	mov	r0, r4
 801a734:	462a      	mov	r2, r5
 801a736:	2100      	movs	r1, #0
 801a738:	f7ff ffc0 	bl	801a6bc <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801a73c:	4628      	mov	r0, r5
 801a73e:	bd70      	pop	{r4, r5, r6, pc}
 801a740:	0802a8fc 	.word	0x0802a8fc
 801a744:	0802ab6e 	.word	0x0802ab6e
 801a748:	0802a92b 	.word	0x0802a92b

0801a74c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801a74c:	428a      	cmp	r2, r1
 801a74e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a752:	4604      	mov	r4, r0
 801a754:	460e      	mov	r6, r1
 801a756:	4615      	mov	r5, r2
 801a758:	469a      	mov	sl, r3
 801a75a:	d92b      	bls.n	801a7b4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801a75c:	1a57      	subs	r7, r2, r1
 801a75e:	f04f 0800 	mov.w	r8, #0
 801a762:	f100 0932 	add.w	r9, r0, #50	; 0x32
 801a766:	f04f 0b0a 	mov.w	fp, #10
 801a76a:	b2bf      	uxth	r7, r7
 801a76c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a76e:	b92b      	cbnz	r3, 801a77c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 801a770:	4b24      	ldr	r3, [pc, #144]	; (801a804 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801a772:	21e6      	movs	r1, #230	; 0xe6
 801a774:	4a24      	ldr	r2, [pc, #144]	; (801a808 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 801a776:	4825      	ldr	r0, [pc, #148]	; (801a80c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 801a778:	f00a fa6e 	bl	8024c58 <__assert_func>
 801a77c:	3b01      	subs	r3, #1
 801a77e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801a780:	2101      	movs	r1, #1
 801a782:	4648      	mov	r0, r9
 801a784:	b29b      	uxth	r3, r3
 801a786:	f108 0801 	add.w	r8, r8, #1
 801a78a:	441a      	add	r2, r3
 801a78c:	8623      	strh	r3, [r4, #48]	; 0x30
 801a78e:	fbb2 f3fb 	udiv	r3, r2, fp
 801a792:	fb0b 2313 	mls	r3, fp, r3, r2
 801a796:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a79a:	8b5a      	ldrh	r2, [r3, #26]
 801a79c:	9201      	str	r2, [sp, #4]
 801a79e:	f7ff ff75 	bl	801a68c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801a7a2:	9a01      	ldr	r2, [sp, #4]
 801a7a4:	2100      	movs	r1, #0
 801a7a6:	4648      	mov	r0, r9
 801a7a8:	f7ff ff88 	bl	801a6bc <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801a7ac:	fa1f f388 	uxth.w	r3, r8
 801a7b0:	429f      	cmp	r7, r3
 801a7b2:	d8db      	bhi.n	801a76c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 801a7b4:	f104 071a 	add.w	r7, r4, #26
 801a7b8:	4631      	mov	r1, r6
 801a7ba:	260a      	movs	r6, #10
 801a7bc:	4638      	mov	r0, r7
 801a7be:	f7ff febf 	bl	801a540 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801a7c2:	b1c5      	cbz	r5, 801a7f6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801a7c4:	3d01      	subs	r5, #1
 801a7c6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801a7c8:	b2ad      	uxth	r5, r5
 801a7ca:	2b09      	cmp	r3, #9
 801a7cc:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 801a7d0:	d903      	bls.n	801a7da <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801a7d2:	4b0f      	ldr	r3, [pc, #60]	; (801a810 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801a7d4:	21ec      	movs	r1, #236	; 0xec
 801a7d6:	4a0f      	ldr	r2, [pc, #60]	; (801a814 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801a7d8:	e7cd      	b.n	801a776 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 801a7da:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 801a7dc:	3301      	adds	r3, #1
 801a7de:	3109      	adds	r1, #9
 801a7e0:	8623      	strh	r3, [r4, #48]	; 0x30
 801a7e2:	fbb1 f0f6 	udiv	r0, r1, r6
 801a7e6:	fb06 1110 	mls	r1, r6, r0, r1
 801a7ea:	4638      	mov	r0, r7
 801a7ec:	85e1      	strh	r1, [r4, #46]	; 0x2e
 801a7ee:	2100      	movs	r1, #0
 801a7f0:	f7ff fd5a 	bl	801a2a8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a7f4:	e7e5      	b.n	801a7c2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801a7f6:	4620      	mov	r0, r4
 801a7f8:	b003      	add	sp, #12
 801a7fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7fe:	f7ff bed7 	b.w	801a5b0 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a802:	bf00      	nop
 801a804:	0802a8fc 	.word	0x0802a8fc
 801a808:	0802a9f2 	.word	0x0802a9f2
 801a80c:	0802a92b 	.word	0x0802a92b
 801a810:	0802a957 	.word	0x0802a957
 801a814:	0802a96a 	.word	0x0802a96a

0801a818 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801a818:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a81c:	4605      	mov	r5, r0
 801a81e:	4616      	mov	r6, r2
 801a820:	1c8c      	adds	r4, r1, #2
 801a822:	8809      	ldrh	r1, [r1, #0]
 801a824:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801a828:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801a82c:	42b3      	cmp	r3, r6
 801a82e:	d124      	bne.n	801a87a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801a830:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801a834:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801a838:	f001 070f 	and.w	r7, r1, #15
 801a83c:	4652      	mov	r2, sl
 801a83e:	f8cd 8000 	str.w	r8, [sp]
 801a842:	464b      	mov	r3, r9
 801a844:	4621      	mov	r1, r4
 801a846:	4628      	mov	r0, r5
 801a848:	f7ff fe3e 	bl	801a4c8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801a84c:	4683      	mov	fp, r0
 801a84e:	b168      	cbz	r0, 801a86c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801a850:	eb0a 0109 	add.w	r1, sl, r9
 801a854:	463a      	mov	r2, r7
 801a856:	4628      	mov	r0, r5
 801a858:	4441      	add	r1, r8
 801a85a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801a85e:	4649      	mov	r1, r9
 801a860:	f7ff ff74 	bl	801a74c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801a864:	4658      	mov	r0, fp
 801a866:	b003      	add	sp, #12
 801a868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a86c:	eb07 010a 	add.w	r1, r7, sl
 801a870:	4449      	add	r1, r9
 801a872:	4441      	add	r1, r8
 801a874:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801a878:	e7d2      	b.n	801a820 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801a87a:	f04f 0b00 	mov.w	fp, #0
 801a87e:	e7f1      	b.n	801a864 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801a880 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801a880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a884:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801a886:	4604      	mov	r4, r0
 801a888:	260b      	movs	r6, #11
 801a88a:	f100 091a 	add.w	r9, r0, #26
 801a88e:	886f      	ldrh	r7, [r5, #2]
 801a890:	087f      	lsrs	r7, r7, #1
 801a892:	3e01      	subs	r6, #1
 801a894:	d013      	beq.n	801a8be <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801a896:	2100      	movs	r1, #0
 801a898:	4648      	mov	r0, r9
 801a89a:	f7ff fd1f 	bl	801a2dc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a89e:	462a      	mov	r2, r5
 801a8a0:	4680      	mov	r8, r0
 801a8a2:	4603      	mov	r3, r0
 801a8a4:	4639      	mov	r1, r7
 801a8a6:	4620      	mov	r0, r4
 801a8a8:	f7ff fce0 	bl	801a26c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801a8ac:	b138      	cbz	r0, 801a8be <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801a8ae:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801a8b2:	4642      	mov	r2, r8
 801a8b4:	4620      	mov	r0, r4
 801a8b6:	f7ff ffaf 	bl	801a818 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801a8ba:	2800      	cmp	r0, #0
 801a8bc:	d1e9      	bne.n	801a892 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 801a8be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801a8c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801a8c4:	4b1e      	ldr	r3, [pc, #120]	; (801a940 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 801a8c6:	b570      	push	{r4, r5, r6, lr}
 801a8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8cc:	4604      	mov	r4, r0
 801a8ce:	f003 0501 	and.w	r5, r3, #1
 801a8d2:	b902      	cbnz	r2, 801a8d6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 801a8d4:	b165      	cbz	r5, 801a8f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 801a8d6:	105b      	asrs	r3, r3, #1
 801a8d8:	f104 061a 	add.w	r6, r4, #26
 801a8dc:	18e0      	adds	r0, r4, r3
 801a8de:	b10d      	cbz	r5, 801a8e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 801a8e0:	58e3      	ldr	r3, [r4, r3]
 801a8e2:	589a      	ldr	r2, [r3, r2]
 801a8e4:	4790      	blx	r2
 801a8e6:	2100      	movs	r1, #0
 801a8e8:	4602      	mov	r2, r0
 801a8ea:	4630      	mov	r0, r6
 801a8ec:	f7ff fcdc 	bl	801a2a8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a8f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a8f2:	b303      	cbz	r3, 801a936 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801a8f4:	f104 051a 	add.w	r5, r4, #26
 801a8f8:	2100      	movs	r1, #0
 801a8fa:	4628      	mov	r0, r5
 801a8fc:	f7ff fcee 	bl	801a2dc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a900:	b1c8      	cbz	r0, 801a936 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801a902:	4620      	mov	r0, r4
 801a904:	f7ff ffbc 	bl	801a880 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 801a908:	2101      	movs	r1, #1
 801a90a:	4628      	mov	r0, r5
 801a90c:	f7ff fce6 	bl	801a2dc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a910:	f640 133f 	movw	r3, #2367	; 0x93f
 801a914:	4606      	mov	r6, r0
 801a916:	4298      	cmp	r0, r3
 801a918:	d10d      	bne.n	801a936 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 801a91a:	2100      	movs	r1, #0
 801a91c:	4628      	mov	r0, r5
 801a91e:	f7ff fcdd 	bl	801a2dc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801a922:	2101      	movs	r1, #1
 801a924:	4602      	mov	r2, r0
 801a926:	4628      	mov	r0, r5
 801a928:	f7ff fcbe 	bl	801a2a8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a92c:	4632      	mov	r2, r6
 801a92e:	2100      	movs	r1, #0
 801a930:	4628      	mov	r0, r5
 801a932:	f7ff fcb9 	bl	801a2a8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801a936:	4620      	mov	r0, r4
 801a938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a93c:	f7ff bed6 	b.w	801a6ec <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a940:	20008364 	.word	0x20008364

0801a944 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801a944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a946:	4617      	mov	r7, r2
 801a948:	461e      	mov	r6, r3
 801a94a:	4605      	mov	r5, r0
 801a94c:	f7ff ffba 	bl	801a8c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a950:	683b      	ldr	r3, [r7, #0]
 801a952:	4604      	mov	r4, r0
 801a954:	4601      	mov	r1, r0
 801a956:	4638      	mov	r0, r7
 801a958:	68db      	ldr	r3, [r3, #12]
 801a95a:	4798      	blx	r3
 801a95c:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801a960:	4602      	mov	r2, r0
 801a962:	6030      	str	r0, [r6, #0]
 801a964:	b29b      	uxth	r3, r3
 801a966:	2b7f      	cmp	r3, #127	; 0x7f
 801a968:	d813      	bhi.n	801a992 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801a96a:	4639      	mov	r1, r7
 801a96c:	4628      	mov	r0, r5
 801a96e:	f7ff fccf 	bl	801a310 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a972:	6030      	str	r0, [r6, #0]
 801a974:	6833      	ldr	r3, [r6, #0]
 801a976:	b143      	cbz	r3, 801a98a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801a978:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801a97c:	7a9b      	ldrb	r3, [r3, #10]
 801a97e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a982:	4313      	orrs	r3, r2
 801a984:	bf0c      	ite	eq
 801a986:	2301      	moveq	r3, #1
 801a988:	2300      	movne	r3, #0
 801a98a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801a98e:	4620      	mov	r0, r4
 801a990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a992:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801a996:	2b00      	cmp	r3, #0
 801a998:	d0ec      	beq.n	801a974 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801a99a:	f640 1302 	movw	r3, #2306	; 0x902
 801a99e:	429c      	cmp	r4, r3
 801a9a0:	d1e8      	bne.n	801a974 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801a9a2:	4601      	mov	r1, r0
 801a9a4:	4628      	mov	r0, r5
 801a9a6:	f7ff fc32 	bl	801a20e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a9aa:	e7e2      	b.n	801a972 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

0801a9ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801a9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9b0:	4617      	mov	r7, r2
 801a9b2:	461e      	mov	r6, r3
 801a9b4:	4605      	mov	r5, r0
 801a9b6:	f7ff ff85 	bl	801a8c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a9ba:	683b      	ldr	r3, [r7, #0]
 801a9bc:	4604      	mov	r4, r0
 801a9be:	4601      	mov	r1, r0
 801a9c0:	4638      	mov	r0, r7
 801a9c2:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801a9c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a9ca:	47c0      	blx	r8
 801a9cc:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801a9d0:	4602      	mov	r2, r0
 801a9d2:	6030      	str	r0, [r6, #0]
 801a9d4:	b29b      	uxth	r3, r3
 801a9d6:	2b7f      	cmp	r3, #127	; 0x7f
 801a9d8:	d814      	bhi.n	801aa04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 801a9da:	4639      	mov	r1, r7
 801a9dc:	4628      	mov	r0, r5
 801a9de:	f7ff fc97 	bl	801a310 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a9e2:	6030      	str	r0, [r6, #0]
 801a9e4:	6833      	ldr	r3, [r6, #0]
 801a9e6:	b143      	cbz	r3, 801a9fa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801a9e8:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801a9ec:	7a9b      	ldrb	r3, [r3, #10]
 801a9ee:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a9f2:	4313      	orrs	r3, r2
 801a9f4:	bf0c      	ite	eq
 801a9f6:	2301      	moveq	r3, #1
 801a9f8:	2300      	movne	r3, #0
 801a9fa:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801a9fe:	4620      	mov	r0, r4
 801aa00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa04:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801aa08:	2b00      	cmp	r3, #0
 801aa0a:	d0eb      	beq.n	801a9e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801aa0c:	f640 1302 	movw	r3, #2306	; 0x902
 801aa10:	429c      	cmp	r4, r3
 801aa12:	d1e7      	bne.n	801a9e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801aa14:	4601      	mov	r1, r0
 801aa16:	4628      	mov	r0, r5
 801aa18:	f7ff fbf9 	bl	801a20e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801aa1c:	e7e1      	b.n	801a9e2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801aa1e <_ZN8touchgfx7Unicode6strlenEPKt>:
 801aa1e:	4602      	mov	r2, r0
 801aa20:	b148      	cbz	r0, 801aa36 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801aa22:	2300      	movs	r3, #0
 801aa24:	b298      	uxth	r0, r3
 801aa26:	3301      	adds	r3, #1
 801aa28:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801aa2c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801aa30:	2900      	cmp	r1, #0
 801aa32:	d1f7      	bne.n	801aa24 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801aa34:	4770      	bx	lr
 801aa36:	4770      	bx	lr

0801aa38 <_ZN8touchgfx7Unicode6strlenEPKc>:
 801aa38:	b140      	cbz	r0, 801aa4c <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801aa3a:	4602      	mov	r2, r0
 801aa3c:	1a13      	subs	r3, r2, r0
 801aa3e:	f812 1b01 	ldrb.w	r1, [r2], #1
 801aa42:	b29b      	uxth	r3, r3
 801aa44:	2900      	cmp	r1, #0
 801aa46:	d1f9      	bne.n	801aa3c <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801aa48:	4618      	mov	r0, r3
 801aa4a:	4770      	bx	lr
 801aa4c:	4603      	mov	r3, r0
 801aa4e:	e7fb      	b.n	801aa48 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801aa50 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801aa50:	b530      	push	{r4, r5, lr}
 801aa52:	4604      	mov	r4, r0
 801aa54:	b159      	cbz	r1, 801aa6e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801aa56:	b148      	cbz	r0, 801aa6c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801aa58:	2300      	movs	r3, #0
 801aa5a:	b298      	uxth	r0, r3
 801aa5c:	4282      	cmp	r2, r0
 801aa5e:	d905      	bls.n	801aa6c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801aa60:	5ccd      	ldrb	r5, [r1, r3]
 801aa62:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801aa66:	3301      	adds	r3, #1
 801aa68:	2d00      	cmp	r5, #0
 801aa6a:	d1f6      	bne.n	801aa5a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801aa6c:	bd30      	pop	{r4, r5, pc}
 801aa6e:	4608      	mov	r0, r1
 801aa70:	e7fc      	b.n	801aa6c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801aa72 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801aa72:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa74:	468c      	mov	ip, r1
 801aa76:	b08b      	sub	sp, #44	; 0x2c
 801aa78:	2100      	movs	r1, #0
 801aa7a:	ae01      	add	r6, sp, #4
 801aa7c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801aa80:	211f      	movs	r1, #31
 801aa82:	fbb0 f7f3 	udiv	r7, r0, r3
 801aa86:	fb03 0517 	mls	r5, r3, r7, r0
 801aa8a:	4638      	mov	r0, r7
 801aa8c:	b2ec      	uxtb	r4, r5
 801aa8e:	2d09      	cmp	r5, #9
 801aa90:	bfd4      	ite	le
 801aa92:	3430      	addle	r4, #48	; 0x30
 801aa94:	3457      	addgt	r4, #87	; 0x57
 801aa96:	b2e4      	uxtb	r4, r4
 801aa98:	558c      	strb	r4, [r1, r6]
 801aa9a:	1e4c      	subs	r4, r1, #1
 801aa9c:	b92f      	cbnz	r7, 801aaaa <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801aa9e:	4431      	add	r1, r6
 801aaa0:	4660      	mov	r0, ip
 801aaa2:	f7ff ffd5 	bl	801aa50 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801aaa6:	b00b      	add	sp, #44	; 0x2c
 801aaa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aaaa:	4621      	mov	r1, r4
 801aaac:	e7e9      	b.n	801aa82 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801aaae <_ZN8touchgfx7Unicode4itoaElPtti>:
 801aaae:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aab0:	4607      	mov	r7, r0
 801aab2:	b08b      	sub	sp, #44	; 0x2c
 801aab4:	4608      	mov	r0, r1
 801aab6:	b341      	cbz	r1, 801ab0a <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801aab8:	1e99      	subs	r1, r3, #2
 801aaba:	290e      	cmp	r1, #14
 801aabc:	d825      	bhi.n	801ab0a <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801aabe:	2100      	movs	r1, #0
 801aac0:	463c      	mov	r4, r7
 801aac2:	261f      	movs	r6, #31
 801aac4:	f10d 0c04 	add.w	ip, sp, #4
 801aac8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801aacc:	1e71      	subs	r1, r6, #1
 801aace:	fb94 fef3 	sdiv	lr, r4, r3
 801aad2:	fb03 441e 	mls	r4, r3, lr, r4
 801aad6:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801aada:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801aade:	b2ec      	uxtb	r4, r5
 801aae0:	2d09      	cmp	r5, #9
 801aae2:	bfd4      	ite	le
 801aae4:	3430      	addle	r4, #48	; 0x30
 801aae6:	3457      	addgt	r4, #87	; 0x57
 801aae8:	b2e4      	uxtb	r4, r4
 801aaea:	f80c 4006 	strb.w	r4, [ip, r6]
 801aaee:	4674      	mov	r4, lr
 801aaf0:	b96c      	cbnz	r4, 801ab0e <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801aaf2:	2f00      	cmp	r7, #0
 801aaf4:	da05      	bge.n	801ab02 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801aaf6:	ab0a      	add	r3, sp, #40	; 0x28
 801aaf8:	4419      	add	r1, r3
 801aafa:	232d      	movs	r3, #45	; 0x2d
 801aafc:	f801 3c24 	strb.w	r3, [r1, #-36]
 801ab00:	1eb1      	subs	r1, r6, #2
 801ab02:	3101      	adds	r1, #1
 801ab04:	4461      	add	r1, ip
 801ab06:	f7ff ffa3 	bl	801aa50 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801ab0a:	b00b      	add	sp, #44	; 0x2c
 801ab0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab0e:	460e      	mov	r6, r1
 801ab10:	e7dc      	b.n	801aacc <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801ab12 <_ZN8touchgfx7Unicode4atoiEPKt>:
 801ab12:	b510      	push	{r4, lr}
 801ab14:	b158      	cbz	r0, 801ab2e <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801ab16:	1e82      	subs	r2, r0, #2
 801ab18:	210a      	movs	r1, #10
 801ab1a:	2000      	movs	r0, #0
 801ab1c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801ab20:	3b30      	subs	r3, #48	; 0x30
 801ab22:	b29c      	uxth	r4, r3
 801ab24:	2c09      	cmp	r4, #9
 801ab26:	d802      	bhi.n	801ab2e <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801ab28:	fb01 3000 	mla	r0, r1, r0, r3
 801ab2c:	e7f6      	b.n	801ab1c <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801ab2e:	bd10      	pop	{r4, pc}

0801ab30 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801ab30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab34:	b085      	sub	sp, #20
 801ab36:	f8d0 8000 	ldr.w	r8, [r0]
 801ab3a:	468a      	mov	sl, r1
 801ab3c:	461c      	mov	r4, r3
 801ab3e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801ab42:	4681      	mov	r9, r0
 801ab44:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801ab48:	4640      	mov	r0, r8
 801ab4a:	9203      	str	r2, [sp, #12]
 801ab4c:	9102      	str	r1, [sp, #8]
 801ab4e:	9301      	str	r3, [sp, #4]
 801ab50:	f7ff ff65 	bl	801aa1e <_ZN8touchgfx7Unicode6strlenEPKt>
 801ab54:	9a03      	ldr	r2, [sp, #12]
 801ab56:	f1ba 0f00 	cmp.w	sl, #0
 801ab5a:	bf0c      	ite	eq
 801ab5c:	4684      	moveq	ip, r0
 801ab5e:	f100 0c01 	addne.w	ip, r0, #1
 801ab62:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801ab66:	8812      	ldrh	r2, [r2, #0]
 801ab68:	fa1f fc8c 	uxth.w	ip, ip
 801ab6c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801ab6e:	2a69      	cmp	r2, #105	; 0x69
 801ab70:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ab72:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801ab74:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 801ab78:	d004      	beq.n	801ab84 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801ab7a:	d844      	bhi.n	801ac06 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 801ab7c:	2a58      	cmp	r2, #88	; 0x58
 801ab7e:	d001      	beq.n	801ab84 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801ab80:	2a64      	cmp	r2, #100	; 0x64
 801ab82:	d14b      	bne.n	801ac1c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801ab84:	b1a4      	cbz	r4, 801abb0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801ab86:	b956      	cbnz	r6, 801ab9e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801ab88:	2801      	cmp	r0, #1
 801ab8a:	d108      	bne.n	801ab9e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801ab8c:	f8b8 2000 	ldrh.w	r2, [r8]
 801ab90:	2a30      	cmp	r2, #48	; 0x30
 801ab92:	bf02      	ittt	eq
 801ab94:	f108 0202 	addeq.w	r2, r8, #2
 801ab98:	4630      	moveq	r0, r6
 801ab9a:	f8c9 2000 	streq.w	r2, [r9]
 801ab9e:	45b4      	cmp	ip, r6
 801aba0:	da3e      	bge.n	801ac20 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 801aba2:	b2b6      	uxth	r6, r6
 801aba4:	eba6 040c 	sub.w	r4, r6, ip
 801aba8:	46b4      	mov	ip, r6
 801abaa:	b2a4      	uxth	r4, r4
 801abac:	f04f 0b00 	mov.w	fp, #0
 801abb0:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801abb4:	3a01      	subs	r2, #1
 801abb6:	b169      	cbz	r1, 801abd4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801abb8:	9911      	ldr	r1, [sp, #68]	; 0x44
 801abba:	458c      	cmp	ip, r1
 801abbc:	da09      	bge.n	801abd2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801abbe:	eba1 010c 	sub.w	r1, r1, ip
 801abc2:	b289      	uxth	r1, r1
 801abc4:	b933      	cbnz	r3, 801abd4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801abc6:	f1bb 0f00 	cmp.w	fp, #0
 801abca:	d02b      	beq.n	801ac24 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801abcc:	b350      	cbz	r0, 801ac24 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801abce:	440c      	add	r4, r1
 801abd0:	b2a4      	uxth	r4, r4
 801abd2:	2100      	movs	r1, #0
 801abd4:	682b      	ldr	r3, [r5, #0]
 801abd6:	4293      	cmp	r3, r2
 801abd8:	da07      	bge.n	801abea <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801abda:	f1ba 0f00 	cmp.w	sl, #0
 801abde:	d004      	beq.n	801abea <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801abe0:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801abe4:	682b      	ldr	r3, [r5, #0]
 801abe6:	3301      	adds	r3, #1
 801abe8:	602b      	str	r3, [r5, #0]
 801abea:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801abee:	b354      	cbz	r4, 801ac46 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801abf0:	682e      	ldr	r6, [r5, #0]
 801abf2:	3c01      	subs	r4, #1
 801abf4:	42b2      	cmp	r2, r6
 801abf6:	b2a4      	uxth	r4, r4
 801abf8:	dd25      	ble.n	801ac46 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801abfa:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801abfe:	682b      	ldr	r3, [r5, #0]
 801ac00:	3301      	adds	r3, #1
 801ac02:	602b      	str	r3, [r5, #0]
 801ac04:	e7f3      	b.n	801abee <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 801ac06:	2a73      	cmp	r2, #115	; 0x73
 801ac08:	d003      	beq.n	801ac12 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 801ac0a:	2a78      	cmp	r2, #120	; 0x78
 801ac0c:	d0ba      	beq.n	801ab84 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801ac0e:	2a6f      	cmp	r2, #111	; 0x6f
 801ac10:	e7b7      	b.n	801ab82 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 801ac12:	2c00      	cmp	r4, #0
 801ac14:	d0cc      	beq.n	801abb0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801ac16:	42b0      	cmp	r0, r6
 801ac18:	dd00      	ble.n	801ac1c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801ac1a:	b2b0      	uxth	r0, r6
 801ac1c:	2400      	movs	r4, #0
 801ac1e:	e7c7      	b.n	801abb0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 801ac20:	2400      	movs	r4, #0
 801ac22:	e7c3      	b.n	801abac <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 801ac24:	2900      	cmp	r1, #0
 801ac26:	d0d5      	beq.n	801abd4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801ac28:	f04f 0c20 	mov.w	ip, #32
 801ac2c:	682e      	ldr	r6, [r5, #0]
 801ac2e:	2900      	cmp	r1, #0
 801ac30:	d0d0      	beq.n	801abd4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 801ac32:	3901      	subs	r1, #1
 801ac34:	4296      	cmp	r6, r2
 801ac36:	b289      	uxth	r1, r1
 801ac38:	dacb      	bge.n	801abd2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801ac3a:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801ac3e:	682b      	ldr	r3, [r5, #0]
 801ac40:	3301      	adds	r3, #1
 801ac42:	602b      	str	r3, [r5, #0]
 801ac44:	e7f2      	b.n	801ac2c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 801ac46:	b198      	cbz	r0, 801ac70 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801ac48:	f8d9 3000 	ldr.w	r3, [r9]
 801ac4c:	881c      	ldrh	r4, [r3, #0]
 801ac4e:	b17c      	cbz	r4, 801ac70 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801ac50:	682c      	ldr	r4, [r5, #0]
 801ac52:	3801      	subs	r0, #1
 801ac54:	42a2      	cmp	r2, r4
 801ac56:	b280      	uxth	r0, r0
 801ac58:	dd0a      	ble.n	801ac70 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801ac5a:	1c9c      	adds	r4, r3, #2
 801ac5c:	f8c9 4000 	str.w	r4, [r9]
 801ac60:	881c      	ldrh	r4, [r3, #0]
 801ac62:	682b      	ldr	r3, [r5, #0]
 801ac64:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 801ac68:	682b      	ldr	r3, [r5, #0]
 801ac6a:	3301      	adds	r3, #1
 801ac6c:	602b      	str	r3, [r5, #0]
 801ac6e:	e7ea      	b.n	801ac46 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801ac70:	2620      	movs	r6, #32
 801ac72:	b151      	cbz	r1, 801ac8a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801ac74:	6828      	ldr	r0, [r5, #0]
 801ac76:	3901      	subs	r1, #1
 801ac78:	4282      	cmp	r2, r0
 801ac7a:	b289      	uxth	r1, r1
 801ac7c:	dd05      	ble.n	801ac8a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801ac7e:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 801ac82:	682b      	ldr	r3, [r5, #0]
 801ac84:	3301      	adds	r3, #1
 801ac86:	602b      	str	r3, [r5, #0]
 801ac88:	e7f3      	b.n	801ac72 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 801ac8a:	b005      	add	sp, #20
 801ac8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ac90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801ac90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac94:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801ac96:	4604      	mov	r4, r0
 801ac98:	f04f 0801 	mov.w	r8, #1
 801ac9c:	2000      	movs	r0, #0
 801ac9e:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 801aca2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801aca6:	8008      	strh	r0, [r1, #0]
 801aca8:	7010      	strb	r0, [r2, #0]
 801acaa:	7018      	strb	r0, [r3, #0]
 801acac:	f88c 0000 	strb.w	r0, [ip]
 801acb0:	f88e 0000 	strb.w	r0, [lr]
 801acb4:	7030      	strb	r0, [r6, #0]
 801acb6:	6820      	ldr	r0, [r4, #0]
 801acb8:	8800      	ldrh	r0, [r0, #0]
 801acba:	b190      	cbz	r0, 801ace2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801acbc:	282b      	cmp	r0, #43	; 0x2b
 801acbe:	d001      	beq.n	801acc4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 801acc0:	2820      	cmp	r0, #32
 801acc2:	d104      	bne.n	801acce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 801acc4:	8008      	strh	r0, [r1, #0]
 801acc6:	6820      	ldr	r0, [r4, #0]
 801acc8:	3002      	adds	r0, #2
 801acca:	6020      	str	r0, [r4, #0]
 801accc:	e7f3      	b.n	801acb6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 801acce:	282d      	cmp	r0, #45	; 0x2d
 801acd0:	d102      	bne.n	801acd8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 801acd2:	f882 8000 	strb.w	r8, [r2]
 801acd6:	e7f6      	b.n	801acc6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801acd8:	2823      	cmp	r0, #35	; 0x23
 801acda:	d102      	bne.n	801ace2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801acdc:	f883 8000 	strb.w	r8, [r3]
 801ace0:	e7f1      	b.n	801acc6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 801ace2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801ace6:	2b09      	cmp	r3, #9
 801ace8:	d901      	bls.n	801acee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 801acea:	282a      	cmp	r0, #42	; 0x2a
 801acec:	d114      	bne.n	801ad18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801acee:	2201      	movs	r2, #1
 801acf0:	f88e 2000 	strb.w	r2, [lr]
 801acf4:	6823      	ldr	r3, [r4, #0]
 801acf6:	8819      	ldrh	r1, [r3, #0]
 801acf8:	2930      	cmp	r1, #48	; 0x30
 801acfa:	bf02      	ittt	eq
 801acfc:	3302      	addeq	r3, #2
 801acfe:	6023      	streq	r3, [r4, #0]
 801ad00:	f88c 2000 	strbeq.w	r2, [ip]
 801ad04:	6820      	ldr	r0, [r4, #0]
 801ad06:	8803      	ldrh	r3, [r0, #0]
 801ad08:	2b2a      	cmp	r3, #42	; 0x2a
 801ad0a:	d11e      	bne.n	801ad4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801ad0c:	f04f 33ff 	mov.w	r3, #4294967295
 801ad10:	603b      	str	r3, [r7, #0]
 801ad12:	6823      	ldr	r3, [r4, #0]
 801ad14:	3302      	adds	r3, #2
 801ad16:	6023      	str	r3, [r4, #0]
 801ad18:	6823      	ldr	r3, [r4, #0]
 801ad1a:	881b      	ldrh	r3, [r3, #0]
 801ad1c:	2b2e      	cmp	r3, #46	; 0x2e
 801ad1e:	d112      	bne.n	801ad46 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 801ad20:	2301      	movs	r3, #1
 801ad22:	7033      	strb	r3, [r6, #0]
 801ad24:	6823      	ldr	r3, [r4, #0]
 801ad26:	1c98      	adds	r0, r3, #2
 801ad28:	6020      	str	r0, [r4, #0]
 801ad2a:	885b      	ldrh	r3, [r3, #2]
 801ad2c:	2b2a      	cmp	r3, #42	; 0x2a
 801ad2e:	d117      	bne.n	801ad60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 801ad30:	f04f 33ff 	mov.w	r3, #4294967295
 801ad34:	602b      	str	r3, [r5, #0]
 801ad36:	6823      	ldr	r3, [r4, #0]
 801ad38:	3302      	adds	r3, #2
 801ad3a:	6023      	str	r3, [r4, #0]
 801ad3c:	682b      	ldr	r3, [r5, #0]
 801ad3e:	2b06      	cmp	r3, #6
 801ad40:	bfa8      	it	ge
 801ad42:	2306      	movge	r3, #6
 801ad44:	602b      	str	r3, [r5, #0]
 801ad46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad4a:	f7ff fee2 	bl	801ab12 <_ZN8touchgfx7Unicode4atoiEPKt>
 801ad4e:	6038      	str	r0, [r7, #0]
 801ad50:	6823      	ldr	r3, [r4, #0]
 801ad52:	881a      	ldrh	r2, [r3, #0]
 801ad54:	3a30      	subs	r2, #48	; 0x30
 801ad56:	2a09      	cmp	r2, #9
 801ad58:	d8de      	bhi.n	801ad18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801ad5a:	3302      	adds	r3, #2
 801ad5c:	6023      	str	r3, [r4, #0]
 801ad5e:	e7f7      	b.n	801ad50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 801ad60:	f7ff fed7 	bl	801ab12 <_ZN8touchgfx7Unicode4atoiEPKt>
 801ad64:	6028      	str	r0, [r5, #0]
 801ad66:	6823      	ldr	r3, [r4, #0]
 801ad68:	881a      	ldrh	r2, [r3, #0]
 801ad6a:	3a30      	subs	r2, #48	; 0x30
 801ad6c:	2a09      	cmp	r2, #9
 801ad6e:	d8e5      	bhi.n	801ad3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 801ad70:	3302      	adds	r3, #2
 801ad72:	6023      	str	r3, [r4, #0]
 801ad74:	e7f7      	b.n	801ad66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

0801ad76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801ad76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad7a:	b0a2      	sub	sp, #136	; 0x88
 801ad7c:	2500      	movs	r5, #0
 801ad7e:	4606      	mov	r6, r0
 801ad80:	460f      	mov	r7, r1
 801ad82:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801ad86:	9209      	str	r2, [sp, #36]	; 0x24
 801ad88:	4629      	mov	r1, r5
 801ad8a:	2242      	movs	r2, #66	; 0x42
 801ad8c:	4640      	mov	r0, r8
 801ad8e:	461c      	mov	r4, r3
 801ad90:	950d      	str	r5, [sp, #52]	; 0x34
 801ad92:	f7fe fd96 	bl	80198c2 <_ZN8touchgfx6memsetEPvhm>
 801ad96:	b30e      	cbz	r6, 801addc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801ad98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad9a:	b1f3      	cbz	r3, 801adda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 801ad9c:	f107 3aff 	add.w	sl, r7, #4294967295
 801ada0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ada2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ada4:	8812      	ldrh	r2, [r2, #0]
 801ada6:	2a00      	cmp	r2, #0
 801ada8:	f000 80b3 	beq.w	801af12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801adac:	459a      	cmp	sl, r3
 801adae:	f340 80b0 	ble.w	801af12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801adb2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801adb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801adb8:	f8b9 2000 	ldrh.w	r2, [r9]
 801adbc:	2a00      	cmp	r2, #0
 801adbe:	d0ef      	beq.n	801ada0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801adc0:	2a25      	cmp	r2, #37	; 0x25
 801adc2:	f000 80aa 	beq.w	801af1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 801adc6:	459a      	cmp	sl, r3
 801adc8:	ddea      	ble.n	801ada0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801adca:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801adce:	f109 0202 	add.w	r2, r9, #2
 801add2:	3301      	adds	r3, #1
 801add4:	9209      	str	r2, [sp, #36]	; 0x24
 801add6:	930d      	str	r3, [sp, #52]	; 0x34
 801add8:	e7eb      	b.n	801adb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 801adda:	8033      	strh	r3, [r6, #0]
 801addc:	4630      	mov	r0, r6
 801adde:	b022      	add	sp, #136	; 0x88
 801ade0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ade4:	3b63      	subs	r3, #99	; 0x63
 801ade6:	2b01      	cmp	r3, #1
 801ade8:	f200 80df 	bhi.w	801afaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801adec:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801adf0:	8813      	ldrh	r3, [r2, #0]
 801adf2:	2b69      	cmp	r3, #105	; 0x69
 801adf4:	d058      	beq.n	801aea8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801adf6:	d81b      	bhi.n	801ae30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 801adf8:	2b63      	cmp	r3, #99	; 0x63
 801adfa:	d02e      	beq.n	801ae5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 801adfc:	2b64      	cmp	r3, #100	; 0x64
 801adfe:	d053      	beq.n	801aea8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 801ae00:	2b58      	cmp	r3, #88	; 0x58
 801ae02:	d06f      	beq.n	801aee4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 801ae04:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801ae08:	46a1      	mov	r9, r4
 801ae0a:	e02d      	b.n	801ae68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801ae0c:	2b73      	cmp	r3, #115	; 0x73
 801ae0e:	d0ed      	beq.n	801adec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801ae10:	d803      	bhi.n	801ae1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 801ae12:	2b6f      	cmp	r3, #111	; 0x6f
 801ae14:	f040 80c9 	bne.w	801afaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 801ae18:	e7e8      	b.n	801adec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801ae1a:	2b75      	cmp	r3, #117	; 0x75
 801ae1c:	d0e6      	beq.n	801adec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801ae1e:	2b78      	cmp	r3, #120	; 0x78
 801ae20:	e7f8      	b.n	801ae14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801ae22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ae24:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801ae28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae2a:	3302      	adds	r3, #2
 801ae2c:	9309      	str	r3, [sp, #36]	; 0x24
 801ae2e:	e7b7      	b.n	801ada0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801ae30:	2b73      	cmp	r3, #115	; 0x73
 801ae32:	d034      	beq.n	801ae9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 801ae34:	d807      	bhi.n	801ae46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 801ae36:	2b6f      	cmp	r3, #111	; 0x6f
 801ae38:	d1e4      	bne.n	801ae04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801ae3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ae3c:	f104 0904 	add.w	r9, r4, #4
 801ae40:	2308      	movs	r3, #8
 801ae42:	1aba      	subs	r2, r7, r2
 801ae44:	e048      	b.n	801aed8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801ae46:	2b75      	cmp	r3, #117	; 0x75
 801ae48:	d041      	beq.n	801aece <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 801ae4a:	2b78      	cmp	r3, #120	; 0x78
 801ae4c:	d1da      	bne.n	801ae04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 801ae4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ae50:	f104 0904 	add.w	r9, r4, #4
 801ae54:	2310      	movs	r3, #16
 801ae56:	1aba      	subs	r2, r7, r2
 801ae58:	e03e      	b.n	801aed8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 801ae5a:	7823      	ldrb	r3, [r4, #0]
 801ae5c:	f104 0904 	add.w	r9, r4, #4
 801ae60:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801ae64:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801ae68:	aa0d      	add	r2, sp, #52	; 0x34
 801ae6a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801ae6e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801ae72:	a810      	add	r0, sp, #64	; 0x40
 801ae74:	9205      	str	r2, [sp, #20]
 801ae76:	464c      	mov	r4, r9
 801ae78:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801ae7c:	9204      	str	r2, [sp, #16]
 801ae7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ae80:	9203      	str	r2, [sp, #12]
 801ae82:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801ae86:	9202      	str	r2, [sp, #8]
 801ae88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ae8a:	9201      	str	r2, [sp, #4]
 801ae8c:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801ae90:	e9cd 7606 	strd	r7, r6, [sp, #24]
 801ae94:	9200      	str	r2, [sp, #0]
 801ae96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ae98:	f7ff fe4a 	bl	801ab30 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801ae9c:	e7c4      	b.n	801ae28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 801ae9e:	f104 0904 	add.w	r9, r4, #4
 801aea2:	6823      	ldr	r3, [r4, #0]
 801aea4:	9310      	str	r3, [sp, #64]	; 0x40
 801aea6:	e7df      	b.n	801ae68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801aea8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801aeaa:	230a      	movs	r3, #10
 801aeac:	4641      	mov	r1, r8
 801aeae:	6820      	ldr	r0, [r4, #0]
 801aeb0:	1aba      	subs	r2, r7, r2
 801aeb2:	f104 0904 	add.w	r9, r4, #4
 801aeb6:	b292      	uxth	r2, r2
 801aeb8:	f7ff fdf9 	bl	801aaae <_ZN8touchgfx7Unicode4itoaElPtti>
 801aebc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801aec0:	2b2d      	cmp	r3, #45	; 0x2d
 801aec2:	d1d1      	bne.n	801ae68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801aec4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801aec8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aeca:	3302      	adds	r3, #2
 801aecc:	e7ea      	b.n	801aea4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 801aece:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801aed0:	f104 0904 	add.w	r9, r4, #4
 801aed4:	230a      	movs	r3, #10
 801aed6:	1aba      	subs	r2, r7, r2
 801aed8:	b292      	uxth	r2, r2
 801aeda:	4641      	mov	r1, r8
 801aedc:	6820      	ldr	r0, [r4, #0]
 801aede:	f7ff fdc8 	bl	801aa72 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801aee2:	e7c1      	b.n	801ae68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801aee4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801aee6:	2310      	movs	r3, #16
 801aee8:	4641      	mov	r1, r8
 801aeea:	6820      	ldr	r0, [r4, #0]
 801aeec:	1aba      	subs	r2, r7, r2
 801aeee:	f104 0904 	add.w	r9, r4, #4
 801aef2:	b292      	uxth	r2, r2
 801aef4:	f7ff fdbd 	bl	801aa72 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801aef8:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801aefc:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801af00:	2b00      	cmp	r3, #0
 801af02:	d0b1      	beq.n	801ae68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 801af04:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801af08:	2919      	cmp	r1, #25
 801af0a:	d8f7      	bhi.n	801aefc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801af0c:	3b20      	subs	r3, #32
 801af0e:	8013      	strh	r3, [r2, #0]
 801af10:	e7f4      	b.n	801aefc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 801af12:	2200      	movs	r2, #0
 801af14:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801af18:	e760      	b.n	801addc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 801af1a:	459a      	cmp	sl, r3
 801af1c:	f77f af40 	ble.w	801ada0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801af20:	f109 0302 	add.w	r3, r9, #2
 801af24:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801af28:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801af2c:	a809      	add	r0, sp, #36	; 0x24
 801af2e:	9309      	str	r3, [sp, #36]	; 0x24
 801af30:	ab0f      	add	r3, sp, #60	; 0x3c
 801af32:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801af36:	9304      	str	r3, [sp, #16]
 801af38:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801af3c:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801af40:	9303      	str	r3, [sp, #12]
 801af42:	ab0e      	add	r3, sp, #56	; 0x38
 801af44:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801af48:	9302      	str	r3, [sp, #8]
 801af4a:	ab0c      	add	r3, sp, #48	; 0x30
 801af4c:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801af50:	9301      	str	r3, [sp, #4]
 801af52:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801af56:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801af5a:	9300      	str	r3, [sp, #0]
 801af5c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801af60:	950e      	str	r5, [sp, #56]	; 0x38
 801af62:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801af66:	950f      	str	r5, [sp, #60]	; 0x3c
 801af68:	f7ff fe92 	bl	801ac90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801af6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801af6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801af70:	2b00      	cmp	r3, #0
 801af72:	bfbf      	itttt	lt
 801af74:	6823      	ldrlt	r3, [r4, #0]
 801af76:	3404      	addlt	r4, #4
 801af78:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801af7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801af7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801af80:	2b00      	cmp	r3, #0
 801af82:	bfbf      	itttt	lt
 801af84:	6823      	ldrlt	r3, [r4, #0]
 801af86:	3404      	addlt	r4, #4
 801af88:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801af8c:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801af8e:	8813      	ldrh	r3, [r2, #0]
 801af90:	2b69      	cmp	r3, #105	; 0x69
 801af92:	f43f af2b 	beq.w	801adec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801af96:	f63f af39 	bhi.w	801ae0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 801af9a:	2b58      	cmp	r3, #88	; 0x58
 801af9c:	f43f af26 	beq.w	801adec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 801afa0:	f63f af20 	bhi.w	801ade4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 801afa4:	2b25      	cmp	r3, #37	; 0x25
 801afa6:	f43f af3c 	beq.w	801ae22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 801afaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801afac:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801afb0:	f8b9 2000 	ldrh.w	r2, [r9]
 801afb4:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801afb8:	3301      	adds	r3, #1
 801afba:	930d      	str	r3, [sp, #52]	; 0x34
 801afbc:	e734      	b.n	801ae28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

0801afc0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801afc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801afc2:	4605      	mov	r5, r0
 801afc4:	b0a1      	sub	sp, #132	; 0x84
 801afc6:	4610      	mov	r0, r2
 801afc8:	460e      	mov	r6, r1
 801afca:	4614      	mov	r4, r2
 801afcc:	461f      	mov	r7, r3
 801afce:	f7ff fd33 	bl	801aa38 <_ZN8touchgfx7Unicode6strlenEPKc>
 801afd2:	283f      	cmp	r0, #63	; 0x3f
 801afd4:	d906      	bls.n	801afe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801afd6:	4b0a      	ldr	r3, [pc, #40]	; (801b000 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801afd8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 801afdc:	4a09      	ldr	r2, [pc, #36]	; (801b004 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801afde:	480a      	ldr	r0, [pc, #40]	; (801b008 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801afe0:	f009 fe3a 	bl	8024c58 <__assert_func>
 801afe4:	4621      	mov	r1, r4
 801afe6:	2240      	movs	r2, #64	; 0x40
 801afe8:	4668      	mov	r0, sp
 801afea:	f7ff fd31 	bl	801aa50 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801afee:	463b      	mov	r3, r7
 801aff0:	466a      	mov	r2, sp
 801aff2:	4631      	mov	r1, r6
 801aff4:	4628      	mov	r0, r5
 801aff6:	f7ff febe 	bl	801ad76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801affa:	b021      	add	sp, #132	; 0x84
 801affc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801affe:	bf00      	nop
 801b000:	0802b055 	.word	0x0802b055
 801b004:	0802b098 	.word	0x0802b098
 801b008:	0802b072 	.word	0x0802b072

0801b00c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801b00c:	b40c      	push	{r2, r3}
 801b00e:	b507      	push	{r0, r1, r2, lr}
 801b010:	ab04      	add	r3, sp, #16
 801b012:	f853 2b04 	ldr.w	r2, [r3], #4
 801b016:	9301      	str	r3, [sp, #4]
 801b018:	f7ff ffd2 	bl	801afc0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801b01c:	b003      	add	sp, #12
 801b01e:	f85d eb04 	ldr.w	lr, [sp], #4
 801b022:	b002      	add	sp, #8
 801b024:	4770      	bx	lr
	...

0801b028 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801b028:	4b01      	ldr	r3, [pc, #4]	; (801b030 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801b02a:	6018      	str	r0, [r3, #0]
 801b02c:	4770      	bx	lr
 801b02e:	bf00      	nop
 801b030:	2000b374 	.word	0x2000b374

0801b034 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801b034:	4b07      	ldr	r3, [pc, #28]	; (801b054 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801b036:	881a      	ldrh	r2, [r3, #0]
 801b038:	4282      	cmp	r2, r0
 801b03a:	d809      	bhi.n	801b050 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801b03c:	4b06      	ldr	r3, [pc, #24]	; (801b058 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801b03e:	881b      	ldrh	r3, [r3, #0]
 801b040:	4413      	add	r3, r2
 801b042:	4298      	cmp	r0, r3
 801b044:	da04      	bge.n	801b050 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801b046:	4b05      	ldr	r3, [pc, #20]	; (801b05c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801b04e:	4770      	bx	lr
 801b050:	2000      	movs	r0, #0
 801b052:	4770      	bx	lr
 801b054:	2000b394 	.word	0x2000b394
 801b058:	2000b398 	.word	0x2000b398
 801b05c:	2000b378 	.word	0x2000b378

0801b060 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801b060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b064:	4d26      	ldr	r5, [pc, #152]	; (801b100 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801b066:	682b      	ldr	r3, [r5, #0]
 801b068:	2b00      	cmp	r3, #0
 801b06a:	d046      	beq.n	801b0fa <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801b06c:	4a25      	ldr	r2, [pc, #148]	; (801b104 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801b06e:	4f26      	ldr	r7, [pc, #152]	; (801b108 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801b070:	8810      	ldrh	r0, [r2, #0]
 801b072:	883c      	ldrh	r4, [r7, #0]
 801b074:	4e25      	ldr	r6, [pc, #148]	; (801b10c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801b076:	4420      	add	r0, r4
 801b078:	1c42      	adds	r2, r0, #1
 801b07a:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801b07e:	f022 0201 	bic.w	r2, r2, #1
 801b082:	0412      	lsls	r2, r2, #16
 801b084:	0c12      	lsrs	r2, r2, #16
 801b086:	0051      	lsls	r1, r2, #1
 801b088:	220e      	movs	r2, #14
 801b08a:	eb08 0e01 	add.w	lr, r8, r1
 801b08e:	fb02 fc04 	mul.w	ip, r2, r4
 801b092:	eb03 0208 	add.w	r2, r3, r8
 801b096:	4c1e      	ldr	r4, [pc, #120]	; (801b110 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801b098:	6022      	str	r2, [r4, #0]
 801b09a:	eb03 020e 	add.w	r2, r3, lr
 801b09e:	44e6      	add	lr, ip
 801b0a0:	6032      	str	r2, [r6, #0]
 801b0a2:	4473      	add	r3, lr
 801b0a4:	4a1b      	ldr	r2, [pc, #108]	; (801b114 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801b0a6:	6013      	str	r3, [r2, #0]
 801b0a8:	2300      	movs	r3, #0
 801b0aa:	4a1b      	ldr	r2, [pc, #108]	; (801b118 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801b0ac:	8013      	strh	r3, [r2, #0]
 801b0ae:	4a1b      	ldr	r2, [pc, #108]	; (801b11c <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801b0b0:	6812      	ldr	r2, [r2, #0]
 801b0b2:	eba2 0208 	sub.w	r2, r2, r8
 801b0b6:	1a52      	subs	r2, r2, r1
 801b0b8:	4919      	ldr	r1, [pc, #100]	; (801b120 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801b0ba:	eba2 020c 	sub.w	r2, r2, ip
 801b0be:	469c      	mov	ip, r3
 801b0c0:	600a      	str	r2, [r1, #0]
 801b0c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b0c6:	4a17      	ldr	r2, [pc, #92]	; (801b124 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801b0c8:	8013      	strh	r3, [r2, #0]
 801b0ca:	4283      	cmp	r3, r0
 801b0cc:	d10d      	bne.n	801b0ea <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 801b0ce:	883d      	ldrh	r5, [r7, #0]
 801b0d0:	2300      	movs	r3, #0
 801b0d2:	6830      	ldr	r0, [r6, #0]
 801b0d4:	240e      	movs	r4, #14
 801b0d6:	429d      	cmp	r5, r3
 801b0d8:	d90f      	bls.n	801b0fa <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801b0da:	fb04 0203 	mla	r2, r4, r3, r0
 801b0de:	3301      	adds	r3, #1
 801b0e0:	7b11      	ldrb	r1, [r2, #12]
 801b0e2:	f36f 1145 	bfc	r1, #5, #1
 801b0e6:	7311      	strb	r1, [r2, #12]
 801b0e8:	e7f5      	b.n	801b0d6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801b0ea:	682a      	ldr	r2, [r5, #0]
 801b0ec:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801b0f0:	6822      	ldr	r2, [r4, #0]
 801b0f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801b0f6:	3301      	adds	r3, #1
 801b0f8:	e7e7      	b.n	801b0ca <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801b0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0fe:	bf00      	nop
 801b100:	2000b378 	.word	0x2000b378
 801b104:	2000b394 	.word	0x2000b394
 801b108:	2000b398 	.word	0x2000b398
 801b10c:	2000b37c 	.word	0x2000b37c
 801b110:	2000b38c 	.word	0x2000b38c
 801b114:	2000b384 	.word	0x2000b384
 801b118:	2000b396 	.word	0x2000b396
 801b11c:	2000b380 	.word	0x2000b380
 801b120:	2000b390 	.word	0x2000b390
 801b124:	2000b388 	.word	0x2000b388

0801b128 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801b128:	4b10      	ldr	r3, [pc, #64]	; (801b16c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801b12a:	b510      	push	{r4, lr}
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	b9db      	cbnz	r3, 801b168 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801b130:	b1d1      	cbz	r1, 801b168 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801b132:	4b0f      	ldr	r3, [pc, #60]	; (801b170 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801b134:	240e      	movs	r4, #14
 801b136:	801a      	strh	r2, [r3, #0]
 801b138:	b292      	uxth	r2, r2
 801b13a:	4b0e      	ldr	r3, [pc, #56]	; (801b174 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801b13c:	881b      	ldrh	r3, [r3, #0]
 801b13e:	4413      	add	r3, r2
 801b140:	4362      	muls	r2, r4
 801b142:	2406      	movs	r4, #6
 801b144:	fb04 2203 	mla	r2, r4, r3, r2
 801b148:	428a      	cmp	r2, r1
 801b14a:	d305      	bcc.n	801b158 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801b14c:	4b0a      	ldr	r3, [pc, #40]	; (801b178 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801b14e:	2137      	movs	r1, #55	; 0x37
 801b150:	4a0a      	ldr	r2, [pc, #40]	; (801b17c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801b152:	480b      	ldr	r0, [pc, #44]	; (801b180 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801b154:	f009 fd80 	bl	8024c58 <__assert_func>
 801b158:	4b0a      	ldr	r3, [pc, #40]	; (801b184 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801b15a:	6019      	str	r1, [r3, #0]
 801b15c:	4b0a      	ldr	r3, [pc, #40]	; (801b188 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801b15e:	6018      	str	r0, [r3, #0]
 801b160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b164:	f7ff bf7c 	b.w	801b060 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801b168:	bd10      	pop	{r4, pc}
 801b16a:	bf00      	nop
 801b16c:	2000b384 	.word	0x2000b384
 801b170:	2000b398 	.word	0x2000b398
 801b174:	2000b394 	.word	0x2000b394
 801b178:	0802b17a 	.word	0x0802b17a
 801b17c:	0802b1d3 	.word	0x0802b1d3
 801b180:	0802b155 	.word	0x0802b155
 801b184:	2000b380 	.word	0x2000b380
 801b188:	2000b378 	.word	0x2000b378

0801b18c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801b18c:	b470      	push	{r4, r5, r6}
 801b18e:	4c07      	ldr	r4, [pc, #28]	; (801b1ac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801b190:	4605      	mov	r5, r0
 801b192:	4610      	mov	r0, r2
 801b194:	9a03      	ldr	r2, [sp, #12]
 801b196:	6826      	ldr	r6, [r4, #0]
 801b198:	b936      	cbnz	r6, 801b1a8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801b19a:	6025      	str	r5, [r4, #0]
 801b19c:	4c04      	ldr	r4, [pc, #16]	; (801b1b0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801b19e:	8021      	strh	r1, [r4, #0]
 801b1a0:	4619      	mov	r1, r3
 801b1a2:	bc70      	pop	{r4, r5, r6}
 801b1a4:	f7ff bfc0 	b.w	801b128 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801b1a8:	bc70      	pop	{r4, r5, r6}
 801b1aa:	4770      	bx	lr
 801b1ac:	2000b39c 	.word	0x2000b39c
 801b1b0:	2000b394 	.word	0x2000b394

0801b1b4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801b1b4:	b508      	push	{r3, lr}
 801b1b6:	4b14      	ldr	r3, [pc, #80]	; (801b208 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801b1b8:	6819      	ldr	r1, [r3, #0]
 801b1ba:	b931      	cbnz	r1, 801b1ca <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801b1bc:	4b13      	ldr	r3, [pc, #76]	; (801b20c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801b1be:	f240 21e6 	movw	r1, #742	; 0x2e6
 801b1c2:	4a13      	ldr	r2, [pc, #76]	; (801b210 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801b1c4:	4813      	ldr	r0, [pc, #76]	; (801b214 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801b1c6:	f009 fd47 	bl	8024c58 <__assert_func>
 801b1ca:	4a13      	ldr	r2, [pc, #76]	; (801b218 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801b1cc:	8803      	ldrh	r3, [r0, #0]
 801b1ce:	8812      	ldrh	r2, [r2, #0]
 801b1d0:	4293      	cmp	r3, r2
 801b1d2:	d204      	bcs.n	801b1de <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801b1d4:	2214      	movs	r2, #20
 801b1d6:	fb02 1303 	mla	r3, r2, r3, r1
 801b1da:	8918      	ldrh	r0, [r3, #8]
 801b1dc:	bd08      	pop	{r3, pc}
 801b1de:	490f      	ldr	r1, [pc, #60]	; (801b21c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801b1e0:	8809      	ldrh	r1, [r1, #0]
 801b1e2:	4411      	add	r1, r2
 801b1e4:	428b      	cmp	r3, r1
 801b1e6:	da06      	bge.n	801b1f6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801b1e8:	1a9b      	subs	r3, r3, r2
 801b1ea:	4a0d      	ldr	r2, [pc, #52]	; (801b220 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801b1ec:	210e      	movs	r1, #14
 801b1ee:	6812      	ldr	r2, [r2, #0]
 801b1f0:	fb01 2303 	mla	r3, r1, r3, r2
 801b1f4:	e7f1      	b.n	801b1da <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801b1f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b1fa:	4293      	cmp	r3, r2
 801b1fc:	bf0a      	itet	eq
 801b1fe:	4b09      	ldreq	r3, [pc, #36]	; (801b224 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801b200:	2000      	movne	r0, #0
 801b202:	8818      	ldrheq	r0, [r3, #0]
 801b204:	e7ea      	b.n	801b1dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801b206:	bf00      	nop
 801b208:	2000b39c 	.word	0x2000b39c
 801b20c:	0802a1a4 	.word	0x0802a1a4
 801b210:	0802b280 	.word	0x0802b280
 801b214:	0802b155 	.word	0x0802b155
 801b218:	2000b394 	.word	0x2000b394
 801b21c:	2000b398 	.word	0x2000b398
 801b220:	2000b37c 	.word	0x2000b37c
 801b224:	2000b2c8 	.word	0x2000b2c8

0801b228 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801b228:	b508      	push	{r3, lr}
 801b22a:	4b14      	ldr	r3, [pc, #80]	; (801b27c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801b22c:	6819      	ldr	r1, [r3, #0]
 801b22e:	b931      	cbnz	r1, 801b23e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801b230:	4b13      	ldr	r3, [pc, #76]	; (801b280 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801b232:	f240 21fa 	movw	r1, #762	; 0x2fa
 801b236:	4a13      	ldr	r2, [pc, #76]	; (801b284 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801b238:	4813      	ldr	r0, [pc, #76]	; (801b288 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801b23a:	f009 fd0d 	bl	8024c58 <__assert_func>
 801b23e:	4a13      	ldr	r2, [pc, #76]	; (801b28c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801b240:	8803      	ldrh	r3, [r0, #0]
 801b242:	8812      	ldrh	r2, [r2, #0]
 801b244:	4293      	cmp	r3, r2
 801b246:	d204      	bcs.n	801b252 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801b248:	2214      	movs	r2, #20
 801b24a:	fb02 1303 	mla	r3, r2, r3, r1
 801b24e:	8958      	ldrh	r0, [r3, #10]
 801b250:	bd08      	pop	{r3, pc}
 801b252:	490f      	ldr	r1, [pc, #60]	; (801b290 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801b254:	8809      	ldrh	r1, [r1, #0]
 801b256:	4411      	add	r1, r2
 801b258:	428b      	cmp	r3, r1
 801b25a:	da06      	bge.n	801b26a <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801b25c:	1a9b      	subs	r3, r3, r2
 801b25e:	4a0d      	ldr	r2, [pc, #52]	; (801b294 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801b260:	210e      	movs	r1, #14
 801b262:	6812      	ldr	r2, [r2, #0]
 801b264:	fb01 2303 	mla	r3, r1, r3, r2
 801b268:	e7f1      	b.n	801b24e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801b26a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b26e:	4293      	cmp	r3, r2
 801b270:	bf0a      	itet	eq
 801b272:	4b09      	ldreq	r3, [pc, #36]	; (801b298 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801b274:	2000      	movne	r0, #0
 801b276:	8818      	ldrheq	r0, [r3, #0]
 801b278:	e7ea      	b.n	801b250 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801b27a:	bf00      	nop
 801b27c:	2000b39c 	.word	0x2000b39c
 801b280:	0802a1a4 	.word	0x0802a1a4
 801b284:	0802b2ac 	.word	0x0802b2ac
 801b288:	0802b155 	.word	0x0802b155
 801b28c:	2000b394 	.word	0x2000b394
 801b290:	2000b398 	.word	0x2000b398
 801b294:	2000b37c 	.word	0x2000b37c
 801b298:	2000b2ca 	.word	0x2000b2ca

0801b29c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801b29c:	4b23      	ldr	r3, [pc, #140]	; (801b32c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801b29e:	b510      	push	{r4, lr}
 801b2a0:	681c      	ldr	r4, [r3, #0]
 801b2a2:	b934      	cbnz	r4, 801b2b2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801b2a4:	4b22      	ldr	r3, [pc, #136]	; (801b330 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801b2a6:	f240 310e 	movw	r1, #782	; 0x30e
 801b2aa:	4a22      	ldr	r2, [pc, #136]	; (801b334 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801b2ac:	4822      	ldr	r0, [pc, #136]	; (801b338 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801b2ae:	f009 fcd3 	bl	8024c58 <__assert_func>
 801b2b2:	4a22      	ldr	r2, [pc, #136]	; (801b33c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801b2b4:	880b      	ldrh	r3, [r1, #0]
 801b2b6:	8812      	ldrh	r2, [r2, #0]
 801b2b8:	4293      	cmp	r3, r2
 801b2ba:	d211      	bcs.n	801b2e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801b2bc:	2214      	movs	r2, #20
 801b2be:	fb02 4303 	mla	r3, r2, r3, r4
 801b2c2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801b2c6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801b2ca:	8a1a      	ldrh	r2, [r3, #16]
 801b2cc:	8a5b      	ldrh	r3, [r3, #18]
 801b2ce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b2d2:	8004      	strh	r4, [r0, #0]
 801b2d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b2d8:	8041      	strh	r1, [r0, #2]
 801b2da:	8082      	strh	r2, [r0, #4]
 801b2dc:	80c3      	strh	r3, [r0, #6]
 801b2de:	e00e      	b.n	801b2fe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801b2e0:	4917      	ldr	r1, [pc, #92]	; (801b340 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801b2e2:	8809      	ldrh	r1, [r1, #0]
 801b2e4:	4411      	add	r1, r2
 801b2e6:	428b      	cmp	r3, r1
 801b2e8:	da0a      	bge.n	801b300 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801b2ea:	1a9b      	subs	r3, r3, r2
 801b2ec:	4a15      	ldr	r2, [pc, #84]	; (801b344 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801b2ee:	210e      	movs	r1, #14
 801b2f0:	6812      	ldr	r2, [r2, #0]
 801b2f2:	fb01 2303 	mla	r3, r1, r3, r2
 801b2f6:	681a      	ldr	r2, [r3, #0]
 801b2f8:	6002      	str	r2, [r0, #0]
 801b2fa:	685a      	ldr	r2, [r3, #4]
 801b2fc:	6042      	str	r2, [r0, #4]
 801b2fe:	bd10      	pop	{r4, pc}
 801b300:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b304:	4293      	cmp	r3, r2
 801b306:	d10b      	bne.n	801b320 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801b308:	4b0f      	ldr	r3, [pc, #60]	; (801b348 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801b30a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b30e:	4b0f      	ldr	r3, [pc, #60]	; (801b34c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801b310:	8081      	strh	r1, [r0, #4]
 801b312:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b316:	2300      	movs	r3, #0
 801b318:	80c2      	strh	r2, [r0, #6]
 801b31a:	8003      	strh	r3, [r0, #0]
 801b31c:	8043      	strh	r3, [r0, #2]
 801b31e:	e7ee      	b.n	801b2fe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801b320:	2300      	movs	r3, #0
 801b322:	8003      	strh	r3, [r0, #0]
 801b324:	8043      	strh	r3, [r0, #2]
 801b326:	8083      	strh	r3, [r0, #4]
 801b328:	e7d8      	b.n	801b2dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801b32a:	bf00      	nop
 801b32c:	2000b39c 	.word	0x2000b39c
 801b330:	0802a1a4 	.word	0x0802a1a4
 801b334:	0802b219 	.word	0x0802b219
 801b338:	0802b155 	.word	0x0802b155
 801b33c:	2000b394 	.word	0x2000b394
 801b340:	2000b398 	.word	0x2000b398
 801b344:	2000b37c 	.word	0x2000b37c
 801b348:	2000b2c8 	.word	0x2000b2c8
 801b34c:	2000b2ca 	.word	0x2000b2ca

0801b350 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801b350:	4b18      	ldr	r3, [pc, #96]	; (801b3b4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801b352:	681b      	ldr	r3, [r3, #0]
 801b354:	b34b      	cbz	r3, 801b3aa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801b356:	4a18      	ldr	r2, [pc, #96]	; (801b3b8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801b358:	8800      	ldrh	r0, [r0, #0]
 801b35a:	8812      	ldrh	r2, [r2, #0]
 801b35c:	4290      	cmp	r0, r2
 801b35e:	d211      	bcs.n	801b384 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801b360:	2214      	movs	r2, #20
 801b362:	fb02 3300 	mla	r3, r2, r0, r3
 801b366:	8a1a      	ldrh	r2, [r3, #16]
 801b368:	8919      	ldrh	r1, [r3, #8]
 801b36a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801b36e:	428a      	cmp	r2, r1
 801b370:	db1d      	blt.n	801b3ae <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801b372:	8a58      	ldrh	r0, [r3, #18]
 801b374:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801b378:	895b      	ldrh	r3, [r3, #10]
 801b37a:	4298      	cmp	r0, r3
 801b37c:	bfac      	ite	ge
 801b37e:	2000      	movge	r0, #0
 801b380:	2001      	movlt	r0, #1
 801b382:	4770      	bx	lr
 801b384:	4b0d      	ldr	r3, [pc, #52]	; (801b3bc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801b386:	881b      	ldrh	r3, [r3, #0]
 801b388:	4413      	add	r3, r2
 801b38a:	4298      	cmp	r0, r3
 801b38c:	da0d      	bge.n	801b3aa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801b38e:	4b0c      	ldr	r3, [pc, #48]	; (801b3c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801b390:	1a80      	subs	r0, r0, r2
 801b392:	220e      	movs	r2, #14
 801b394:	681b      	ldr	r3, [r3, #0]
 801b396:	fb02 3300 	mla	r3, r2, r0, r3
 801b39a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801b39e:	891a      	ldrh	r2, [r3, #8]
 801b3a0:	4291      	cmp	r1, r2
 801b3a2:	db04      	blt.n	801b3ae <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801b3a4:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801b3a8:	e7e6      	b.n	801b378 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801b3aa:	2000      	movs	r0, #0
 801b3ac:	4770      	bx	lr
 801b3ae:	2001      	movs	r0, #1
 801b3b0:	4770      	bx	lr
 801b3b2:	bf00      	nop
 801b3b4:	2000b39c 	.word	0x2000b39c
 801b3b8:	2000b394 	.word	0x2000b394
 801b3bc:	2000b398 	.word	0x2000b398
 801b3c0:	2000b37c 	.word	0x2000b37c

0801b3c4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801b3c4:	b508      	push	{r3, lr}
 801b3c6:	4b12      	ldr	r3, [pc, #72]	; (801b410 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801b3c8:	6819      	ldr	r1, [r3, #0]
 801b3ca:	b931      	cbnz	r1, 801b3da <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801b3cc:	4b11      	ldr	r3, [pc, #68]	; (801b414 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801b3ce:	f240 3132 	movw	r1, #818	; 0x332
 801b3d2:	4a11      	ldr	r2, [pc, #68]	; (801b418 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801b3d4:	4811      	ldr	r0, [pc, #68]	; (801b41c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801b3d6:	f009 fc3f 	bl	8024c58 <__assert_func>
 801b3da:	8803      	ldrh	r3, [r0, #0]
 801b3dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b3e0:	4293      	cmp	r3, r2
 801b3e2:	d012      	beq.n	801b40a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801b3e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b3e8:	4293      	cmp	r3, r2
 801b3ea:	d103      	bne.n	801b3f4 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801b3ec:	4b0c      	ldr	r3, [pc, #48]	; (801b420 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801b3ee:	681b      	ldr	r3, [r3, #0]
 801b3f0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801b3f2:	bd08      	pop	{r3, pc}
 801b3f4:	4a0b      	ldr	r2, [pc, #44]	; (801b424 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801b3f6:	6812      	ldr	r2, [r2, #0]
 801b3f8:	b11a      	cbz	r2, 801b402 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801b3fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801b3fe:	2800      	cmp	r0, #0
 801b400:	d1f7      	bne.n	801b3f2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b402:	2214      	movs	r2, #20
 801b404:	4353      	muls	r3, r2
 801b406:	58c8      	ldr	r0, [r1, r3]
 801b408:	e7f3      	b.n	801b3f2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b40a:	2000      	movs	r0, #0
 801b40c:	e7f1      	b.n	801b3f2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801b40e:	bf00      	nop
 801b410:	2000b39c 	.word	0x2000b39c
 801b414:	0802a1a4 	.word	0x0802a1a4
 801b418:	0802b24f 	.word	0x0802b24f
 801b41c:	0802b155 	.word	0x0802b155
 801b420:	2000b2d4 	.word	0x2000b2d4
 801b424:	2000b378 	.word	0x2000b378

0801b428 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801b428:	8802      	ldrh	r2, [r0, #0]
 801b42a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801b42e:	429a      	cmp	r2, r3
 801b430:	d840      	bhi.n	801b4b4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801b432:	4b21      	ldr	r3, [pc, #132]	; (801b4b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801b434:	881b      	ldrh	r3, [r3, #0]
 801b436:	429a      	cmp	r2, r3
 801b438:	d220      	bcs.n	801b47c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801b43a:	4b20      	ldr	r3, [pc, #128]	; (801b4bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801b43c:	6819      	ldr	r1, [r3, #0]
 801b43e:	2314      	movs	r3, #20
 801b440:	fb03 1302 	mla	r3, r3, r2, r1
 801b444:	6858      	ldr	r0, [r3, #4]
 801b446:	2800      	cmp	r0, #0
 801b448:	d035      	beq.n	801b4b6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b44a:	491d      	ldr	r1, [pc, #116]	; (801b4c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801b44c:	6809      	ldr	r1, [r1, #0]
 801b44e:	2900      	cmp	r1, #0
 801b450:	d031      	beq.n	801b4b6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b452:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801b456:	b371      	cbz	r1, 801b4b6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801b458:	895a      	ldrh	r2, [r3, #10]
 801b45a:	8918      	ldrh	r0, [r3, #8]
 801b45c:	4350      	muls	r0, r2
 801b45e:	7c5a      	ldrb	r2, [r3, #17]
 801b460:	7cdb      	ldrb	r3, [r3, #19]
 801b462:	0952      	lsrs	r2, r2, #5
 801b464:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801b468:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801b46c:	2b0b      	cmp	r3, #11
 801b46e:	bf18      	it	ne
 801b470:	0040      	lslne	r0, r0, #1
 801b472:	3003      	adds	r0, #3
 801b474:	f020 0003 	bic.w	r0, r0, #3
 801b478:	4408      	add	r0, r1
 801b47a:	4770      	bx	lr
 801b47c:	4911      	ldr	r1, [pc, #68]	; (801b4c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801b47e:	8809      	ldrh	r1, [r1, #0]
 801b480:	4419      	add	r1, r3
 801b482:	428a      	cmp	r2, r1
 801b484:	da16      	bge.n	801b4b4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801b486:	4910      	ldr	r1, [pc, #64]	; (801b4c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801b488:	1ad3      	subs	r3, r2, r3
 801b48a:	200e      	movs	r0, #14
 801b48c:	6809      	ldr	r1, [r1, #0]
 801b48e:	fb00 1303 	mla	r3, r0, r3, r1
 801b492:	7b19      	ldrb	r1, [r3, #12]
 801b494:	f001 011f 	and.w	r1, r1, #31
 801b498:	290b      	cmp	r1, #11
 801b49a:	d10b      	bne.n	801b4b4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801b49c:	8919      	ldrh	r1, [r3, #8]
 801b49e:	8958      	ldrh	r0, [r3, #10]
 801b4a0:	4b07      	ldr	r3, [pc, #28]	; (801b4c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801b4a2:	4348      	muls	r0, r1
 801b4a4:	6819      	ldr	r1, [r3, #0]
 801b4a6:	3003      	adds	r0, #3
 801b4a8:	f020 0303 	bic.w	r3, r0, #3
 801b4ac:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801b4b0:	4418      	add	r0, r3
 801b4b2:	4770      	bx	lr
 801b4b4:	2000      	movs	r0, #0
 801b4b6:	4770      	bx	lr
 801b4b8:	2000b394 	.word	0x2000b394
 801b4bc:	2000b39c 	.word	0x2000b39c
 801b4c0:	2000b378 	.word	0x2000b378
 801b4c4:	2000b398 	.word	0x2000b398
 801b4c8:	2000b37c 	.word	0x2000b37c

0801b4cc <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801b4cc:	4b19      	ldr	r3, [pc, #100]	; (801b534 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801b4ce:	6819      	ldr	r1, [r3, #0]
 801b4d0:	8803      	ldrh	r3, [r0, #0]
 801b4d2:	b1e9      	cbz	r1, 801b510 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801b4d4:	4a18      	ldr	r2, [pc, #96]	; (801b538 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801b4d6:	8812      	ldrh	r2, [r2, #0]
 801b4d8:	429a      	cmp	r2, r3
 801b4da:	d90a      	bls.n	801b4f2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801b4dc:	2214      	movs	r2, #20
 801b4de:	fb02 1303 	mla	r3, r2, r3, r1
 801b4e2:	7c58      	ldrb	r0, [r3, #17]
 801b4e4:	0942      	lsrs	r2, r0, #5
 801b4e6:	7cd8      	ldrb	r0, [r3, #19]
 801b4e8:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801b4ec:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801b4f0:	4770      	bx	lr
 801b4f2:	4912      	ldr	r1, [pc, #72]	; (801b53c <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801b4f4:	8809      	ldrh	r1, [r1, #0]
 801b4f6:	4411      	add	r1, r2
 801b4f8:	428b      	cmp	r3, r1
 801b4fa:	da09      	bge.n	801b510 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801b4fc:	1a9b      	subs	r3, r3, r2
 801b4fe:	4a10      	ldr	r2, [pc, #64]	; (801b540 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801b500:	210e      	movs	r1, #14
 801b502:	6812      	ldr	r2, [r2, #0]
 801b504:	fb01 2303 	mla	r3, r1, r3, r2
 801b508:	7b18      	ldrb	r0, [r3, #12]
 801b50a:	f000 001f 	and.w	r0, r0, #31
 801b50e:	4770      	bx	lr
 801b510:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b514:	4293      	cmp	r3, r2
 801b516:	d10a      	bne.n	801b52e <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 801b518:	4b0a      	ldr	r3, [pc, #40]	; (801b544 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b520:	b10a      	cbz	r2, 801b526 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801b522:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b524:	b900      	cbnz	r0, 801b528 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801b526:	6898      	ldr	r0, [r3, #8]
 801b528:	6803      	ldr	r3, [r0, #0]
 801b52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b52c:	4718      	bx	r3
 801b52e:	2000      	movs	r0, #0
 801b530:	4770      	bx	lr
 801b532:	bf00      	nop
 801b534:	2000b39c 	.word	0x2000b39c
 801b538:	2000b394 	.word	0x2000b394
 801b53c:	2000b398 	.word	0x2000b398
 801b540:	2000b37c 	.word	0x2000b37c
 801b544:	2000b2d4 	.word	0x2000b2d4

0801b548 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801b548:	2018      	movs	r0, #24
 801b54a:	4770      	bx	lr

0801b54c <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801b54c:	2001      	movs	r0, #1
 801b54e:	4770      	bx	lr

0801b550 <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801b550:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801b554:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 801b558:	4770      	bx	lr

0801b55a <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 801b55a:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801b55e:	4770      	bx	lr

0801b560 <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 801b560:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801b564:	4770      	bx	lr

0801b566 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 801b566:	b2c8      	uxtb	r0, r1
 801b568:	4770      	bx	lr

0801b56a <_ZN8touchgfx8LCD24bpp4initEv>:
 801b56a:	4770      	bx	lr

0801b56c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b570:	b085      	sub	sp, #20
 801b572:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801b574:	9203      	str	r2, [sp, #12]
 801b576:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801b57a:	6878      	ldr	r0, [r7, #4]
 801b57c:	9201      	str	r2, [sp, #4]
 801b57e:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801b580:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 801b584:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 801b588:	fa1f fc84 	uxth.w	ip, r4
 801b58c:	43e4      	mvns	r4, r4
 801b58e:	9100      	str	r1, [sp, #0]
 801b590:	b2e4      	uxtb	r4, r4
 801b592:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801b596:	fb00 2505 	mla	r5, r0, r5, r2
 801b59a:	683a      	ldr	r2, [r7, #0]
 801b59c:	6877      	ldr	r7, [r6, #4]
 801b59e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b5a2:	3704      	adds	r7, #4
 801b5a4:	4415      	add	r5, r2
 801b5a6:	6832      	ldr	r2, [r6, #0]
 801b5a8:	9202      	str	r2, [sp, #8]
 801b5aa:	9a00      	ldr	r2, [sp, #0]
 801b5ac:	2a00      	cmp	r2, #0
 801b5ae:	dc03      	bgt.n	801b5b8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801b5b0:	9a03      	ldr	r2, [sp, #12]
 801b5b2:	2a00      	cmp	r2, #0
 801b5b4:	f340 8116 	ble.w	801b7e4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801b5b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b5ba:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b5be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b5c0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b5c4:	2b00      	cmp	r3, #0
 801b5c6:	dd0f      	ble.n	801b5e8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801b5c8:	1406      	asrs	r6, r0, #16
 801b5ca:	d406      	bmi.n	801b5da <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b5cc:	4546      	cmp	r6, r8
 801b5ce:	da04      	bge.n	801b5da <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b5d0:	1416      	asrs	r6, r2, #16
 801b5d2:	d402      	bmi.n	801b5da <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801b5d4:	9901      	ldr	r1, [sp, #4]
 801b5d6:	428e      	cmp	r6, r1
 801b5d8:	db07      	blt.n	801b5ea <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801b5da:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b5dc:	3b01      	subs	r3, #1
 801b5de:	3503      	adds	r5, #3
 801b5e0:	4408      	add	r0, r1
 801b5e2:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b5e4:	440a      	add	r2, r1
 801b5e6:	e7ed      	b.n	801b5c4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 801b5e8:	d011      	beq.n	801b60e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801b5ea:	1e5e      	subs	r6, r3, #1
 801b5ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b5ee:	fb01 0e06 	mla	lr, r1, r6, r0
 801b5f2:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801b5f6:	d548      	bpl.n	801b68a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801b5f8:	4699      	mov	r9, r3
 801b5fa:	462e      	mov	r6, r5
 801b5fc:	f1b9 0f00 	cmp.w	r9, #0
 801b600:	f300 809e 	bgt.w	801b740 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801b604:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b608:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b60c:	441d      	add	r5, r3
 801b60e:	9b00      	ldr	r3, [sp, #0]
 801b610:	2b00      	cmp	r3, #0
 801b612:	f340 80e7 	ble.w	801b7e4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801b616:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b61a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b61c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b620:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b624:	eef0 6a62 	vmov.f32	s13, s5
 801b628:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b62c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b630:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b634:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801b638:	eef0 6a43 	vmov.f32	s13, s6
 801b63c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b640:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801b644:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b648:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b64c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b650:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b654:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b658:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b65c:	ee12 2a90 	vmov	r2, s5
 801b660:	eef0 2a47 	vmov.f32	s5, s14
 801b664:	fb92 f3f3 	sdiv	r3, r2, r3
 801b668:	ee13 2a10 	vmov	r2, s6
 801b66c:	9311      	str	r3, [sp, #68]	; 0x44
 801b66e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b670:	eeb0 3a67 	vmov.f32	s6, s15
 801b674:	fb92 f3f3 	sdiv	r3, r2, r3
 801b678:	9312      	str	r3, [sp, #72]	; 0x48
 801b67a:	9b00      	ldr	r3, [sp, #0]
 801b67c:	9a03      	ldr	r2, [sp, #12]
 801b67e:	3b01      	subs	r3, #1
 801b680:	9300      	str	r3, [sp, #0]
 801b682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b684:	bf08      	it	eq
 801b686:	4613      	moveq	r3, r2
 801b688:	e78f      	b.n	801b5aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 801b68a:	45c6      	cmp	lr, r8
 801b68c:	dab4      	bge.n	801b5f8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b68e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b690:	fb01 2606 	mla	r6, r1, r6, r2
 801b694:	1436      	asrs	r6, r6, #16
 801b696:	d4af      	bmi.n	801b5f8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b698:	9901      	ldr	r1, [sp, #4]
 801b69a:	428e      	cmp	r6, r1
 801b69c:	daac      	bge.n	801b5f8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 801b69e:	1cee      	adds	r6, r5, #3
 801b6a0:	4699      	mov	r9, r3
 801b6a2:	f1b9 0f00 	cmp.w	r9, #0
 801b6a6:	f106 0603 	add.w	r6, r6, #3
 801b6aa:	ddab      	ble.n	801b604 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801b6ac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801b6b0:	9902      	ldr	r1, [sp, #8]
 801b6b2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b6b6:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801b6ba:	fb08 1e0e 	mla	lr, r8, lr, r1
 801b6be:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b6c0:	fb1b fb04 	smulbb	fp, fp, r4
 801b6c4:	f109 39ff 	add.w	r9, r9, #4294967295
 801b6c8:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801b6cc:	4408      	add	r0, r1
 801b6ce:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b6d0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b6d4:	440a      	add	r2, r1
 801b6d6:	eb07 0a0e 	add.w	sl, r7, lr
 801b6da:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b6de:	fb0e be0c 	mla	lr, lr, ip, fp
 801b6e2:	fa1f fe8e 	uxth.w	lr, lr
 801b6e6:	f10e 0b01 	add.w	fp, lr, #1
 801b6ea:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b6ee:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801b6f2:	fb1b fb04 	smulbb	fp, fp, r4
 801b6f6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b6fa:	f806 ec06 	strb.w	lr, [r6, #-6]
 801b6fe:	f89a e001 	ldrb.w	lr, [sl, #1]
 801b702:	fb0e be0c 	mla	lr, lr, ip, fp
 801b706:	fa1f fe8e 	uxth.w	lr, lr
 801b70a:	f10e 0b01 	add.w	fp, lr, #1
 801b70e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b712:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b716:	f806 ec05 	strb.w	lr, [r6, #-5]
 801b71a:	f89a e002 	ldrb.w	lr, [sl, #2]
 801b71e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801b722:	fb1a fa04 	smulbb	sl, sl, r4
 801b726:	fb0e ae0c 	mla	lr, lr, ip, sl
 801b72a:	fa1f fe8e 	uxth.w	lr, lr
 801b72e:	f10e 0a01 	add.w	sl, lr, #1
 801b732:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801b736:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b73a:	f806 ec04 	strb.w	lr, [r6, #-4]
 801b73e:	e7b0      	b.n	801b6a2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801b740:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801b744:	d446      	bmi.n	801b7d4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b746:	45c2      	cmp	sl, r8
 801b748:	da44      	bge.n	801b7d4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b74a:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801b74e:	d441      	bmi.n	801b7d4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b750:	9901      	ldr	r1, [sp, #4]
 801b752:	458e      	cmp	lr, r1
 801b754:	da3e      	bge.n	801b7d4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801b756:	9902      	ldr	r1, [sp, #8]
 801b758:	f896 b000 	ldrb.w	fp, [r6]
 801b75c:	fb08 1e0e 	mla	lr, r8, lr, r1
 801b760:	fb1b fb04 	smulbb	fp, fp, r4
 801b764:	f81e e00a 	ldrb.w	lr, [lr, sl]
 801b768:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b76c:	eb07 0a0e 	add.w	sl, r7, lr
 801b770:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b774:	fb0e be0c 	mla	lr, lr, ip, fp
 801b778:	fa1f fe8e 	uxth.w	lr, lr
 801b77c:	f10e 0b01 	add.w	fp, lr, #1
 801b780:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b784:	f896 b001 	ldrb.w	fp, [r6, #1]
 801b788:	fb1b fb04 	smulbb	fp, fp, r4
 801b78c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b790:	f886 e000 	strb.w	lr, [r6]
 801b794:	f89a e001 	ldrb.w	lr, [sl, #1]
 801b798:	fb0e be0c 	mla	lr, lr, ip, fp
 801b79c:	fa1f fe8e 	uxth.w	lr, lr
 801b7a0:	f10e 0b01 	add.w	fp, lr, #1
 801b7a4:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b7a8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b7ac:	f886 e001 	strb.w	lr, [r6, #1]
 801b7b0:	f89a e002 	ldrb.w	lr, [sl, #2]
 801b7b4:	f896 a002 	ldrb.w	sl, [r6, #2]
 801b7b8:	fb1a fa04 	smulbb	sl, sl, r4
 801b7bc:	fb0e ae0c 	mla	lr, lr, ip, sl
 801b7c0:	fa1f fe8e 	uxth.w	lr, lr
 801b7c4:	f10e 0a01 	add.w	sl, lr, #1
 801b7c8:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 801b7cc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b7d0:	f886 e002 	strb.w	lr, [r6, #2]
 801b7d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b7d6:	3603      	adds	r6, #3
 801b7d8:	f109 39ff 	add.w	r9, r9, #4294967295
 801b7dc:	4408      	add	r0, r1
 801b7de:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b7e0:	440a      	add	r2, r1
 801b7e2:	e70b      	b.n	801b5fc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801b7e4:	b005      	add	sp, #20
 801b7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b7ea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b7ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7ee:	b085      	sub	sp, #20
 801b7f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b7f4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b7f6:	9203      	str	r2, [sp, #12]
 801b7f8:	6870      	ldr	r0, [r6, #4]
 801b7fa:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801b7fc:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801b800:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801b804:	9101      	str	r1, [sp, #4]
 801b806:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801b80a:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801b80e:	fb00 2404 	mla	r4, r0, r4, r2
 801b812:	6832      	ldr	r2, [r6, #0]
 801b814:	686e      	ldr	r6, [r5, #4]
 801b816:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b81a:	3604      	adds	r6, #4
 801b81c:	4414      	add	r4, r2
 801b81e:	682a      	ldr	r2, [r5, #0]
 801b820:	9202      	str	r2, [sp, #8]
 801b822:	9a01      	ldr	r2, [sp, #4]
 801b824:	2a00      	cmp	r2, #0
 801b826:	dc03      	bgt.n	801b830 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 801b828:	9a03      	ldr	r2, [sp, #12]
 801b82a:	2a00      	cmp	r2, #0
 801b82c:	f340 80b2 	ble.w	801b994 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801b830:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b832:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b836:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b838:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801b83c:	2b00      	cmp	r3, #0
 801b83e:	dd0c      	ble.n	801b85a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801b840:	1405      	asrs	r5, r0, #16
 801b842:	d405      	bmi.n	801b850 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b844:	4575      	cmp	r5, lr
 801b846:	da03      	bge.n	801b850 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b848:	1415      	asrs	r5, r2, #16
 801b84a:	d401      	bmi.n	801b850 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801b84c:	4545      	cmp	r5, r8
 801b84e:	db05      	blt.n	801b85c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801b850:	4460      	add	r0, ip
 801b852:	443a      	add	r2, r7
 801b854:	3b01      	subs	r3, #1
 801b856:	3403      	adds	r4, #3
 801b858:	e7f0      	b.n	801b83c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 801b85a:	d03d      	beq.n	801b8d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801b85c:	1e5d      	subs	r5, r3, #1
 801b85e:	fb0c 0905 	mla	r9, ip, r5, r0
 801b862:	ea5f 4929 	movs.w	r9, r9, asr #16
 801b866:	d42c      	bmi.n	801b8c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b868:	45f1      	cmp	r9, lr
 801b86a:	da2a      	bge.n	801b8c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b86c:	fb07 2505 	mla	r5, r7, r5, r2
 801b870:	142d      	asrs	r5, r5, #16
 801b872:	d426      	bmi.n	801b8c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b874:	4545      	cmp	r5, r8
 801b876:	da24      	bge.n	801b8c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b878:	1ce5      	adds	r5, r4, #3
 801b87a:	469a      	mov	sl, r3
 801b87c:	f1ba 0f00 	cmp.w	sl, #0
 801b880:	f105 0503 	add.w	r5, r5, #3
 801b884:	dd23      	ble.n	801b8ce <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801b886:	ea4f 4922 	mov.w	r9, r2, asr #16
 801b88a:	9902      	ldr	r1, [sp, #8]
 801b88c:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801b890:	443a      	add	r2, r7
 801b892:	fb0e 1909 	mla	r9, lr, r9, r1
 801b896:	4460      	add	r0, ip
 801b898:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b89c:	f819 900b 	ldrb.w	r9, [r9, fp]
 801b8a0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b8a4:	eb06 0b09 	add.w	fp, r6, r9
 801b8a8:	f816 9009 	ldrb.w	r9, [r6, r9]
 801b8ac:	f805 9c06 	strb.w	r9, [r5, #-6]
 801b8b0:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801b8b4:	f805 9c05 	strb.w	r9, [r5, #-5]
 801b8b8:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801b8bc:	f805 9c04 	strb.w	r9, [r5, #-4]
 801b8c0:	e7dc      	b.n	801b87c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801b8c2:	2500      	movs	r5, #0
 801b8c4:	eba3 0905 	sub.w	r9, r3, r5
 801b8c8:	f1b9 0f00 	cmp.w	r9, #0
 801b8cc:	dc3c      	bgt.n	801b948 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801b8ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b8d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b8d6:	441c      	add	r4, r3
 801b8d8:	9b01      	ldr	r3, [sp, #4]
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	dd5a      	ble.n	801b994 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801b8de:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b8e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b8e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b8e8:	eeb0 6a62 	vmov.f32	s12, s5
 801b8ec:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b8f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b8f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b8f8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b8fc:	eeb0 6a43 	vmov.f32	s12, s6
 801b900:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b904:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b908:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b90c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b910:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b914:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b918:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b91c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b920:	ee12 2a90 	vmov	r2, s5
 801b924:	eef0 2a47 	vmov.f32	s5, s14
 801b928:	fb92 fcf3 	sdiv	ip, r2, r3
 801b92c:	ee13 2a10 	vmov	r2, s6
 801b930:	eeb0 3a67 	vmov.f32	s6, s15
 801b934:	fb92 f7f3 	sdiv	r7, r2, r3
 801b938:	9b01      	ldr	r3, [sp, #4]
 801b93a:	9a03      	ldr	r2, [sp, #12]
 801b93c:	3b01      	subs	r3, #1
 801b93e:	9301      	str	r3, [sp, #4]
 801b940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b942:	bf08      	it	eq
 801b944:	4613      	moveq	r3, r2
 801b946:	e76c      	b.n	801b822 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801b948:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801b94c:	d41e      	bmi.n	801b98c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801b94e:	45f2      	cmp	sl, lr
 801b950:	da1c      	bge.n	801b98c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801b952:	ea5f 4922 	movs.w	r9, r2, asr #16
 801b956:	d419      	bmi.n	801b98c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801b958:	45c1      	cmp	r9, r8
 801b95a:	da17      	bge.n	801b98c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801b95c:	9902      	ldr	r1, [sp, #8]
 801b95e:	fb0e 1909 	mla	r9, lr, r9, r1
 801b962:	f819 900a 	ldrb.w	r9, [r9, sl]
 801b966:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b96a:	f816 b009 	ldrb.w	fp, [r6, r9]
 801b96e:	eb06 0a09 	add.w	sl, r6, r9
 801b972:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 801b976:	f804 b009 	strb.w	fp, [r4, r9]
 801b97a:	44a1      	add	r9, r4
 801b97c:	f89a b001 	ldrb.w	fp, [sl, #1]
 801b980:	f889 b001 	strb.w	fp, [r9, #1]
 801b984:	f89a a002 	ldrb.w	sl, [sl, #2]
 801b988:	f889 a002 	strb.w	sl, [r9, #2]
 801b98c:	4460      	add	r0, ip
 801b98e:	443a      	add	r2, r7
 801b990:	3501      	adds	r5, #1
 801b992:	e797      	b.n	801b8c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801b994:	b005      	add	sp, #20
 801b996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b99a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b99a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b99e:	b087      	sub	sp, #28
 801b9a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b9a4:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801b9a6:	9204      	str	r2, [sp, #16]
 801b9a8:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801b9ac:	6870      	ldr	r0, [r6, #4]
 801b9ae:	9205      	str	r2, [sp, #20]
 801b9b0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801b9b2:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801b9b6:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801b9ba:	9101      	str	r1, [sp, #4]
 801b9bc:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801b9c0:	fb00 2505 	mla	r5, r0, r5, r2
 801b9c4:	6832      	ldr	r2, [r6, #0]
 801b9c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b9ca:	4415      	add	r5, r2
 801b9cc:	6822      	ldr	r2, [r4, #0]
 801b9ce:	9202      	str	r2, [sp, #8]
 801b9d0:	6862      	ldr	r2, [r4, #4]
 801b9d2:	3204      	adds	r2, #4
 801b9d4:	9203      	str	r2, [sp, #12]
 801b9d6:	9a01      	ldr	r2, [sp, #4]
 801b9d8:	2a00      	cmp	r2, #0
 801b9da:	dc03      	bgt.n	801b9e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801b9dc:	9a04      	ldr	r2, [sp, #16]
 801b9de:	2a00      	cmp	r2, #0
 801b9e0:	f340 8124 	ble.w	801bc2c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801b9e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b9e6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801b9ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b9ec:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801b9f0:	2b00      	cmp	r3, #0
 801b9f2:	dd0e      	ble.n	801ba12 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801b9f4:	1422      	asrs	r2, r4, #16
 801b9f6:	d405      	bmi.n	801ba04 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801b9f8:	4572      	cmp	r2, lr
 801b9fa:	da03      	bge.n	801ba04 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801b9fc:	1402      	asrs	r2, r0, #16
 801b9fe:	d401      	bmi.n	801ba04 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801ba00:	4542      	cmp	r2, r8
 801ba02:	db07      	blt.n	801ba14 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801ba04:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ba06:	3b01      	subs	r3, #1
 801ba08:	3503      	adds	r5, #3
 801ba0a:	4414      	add	r4, r2
 801ba0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ba0e:	4410      	add	r0, r2
 801ba10:	e7ee      	b.n	801b9f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801ba12:	d010      	beq.n	801ba36 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801ba14:	1e5a      	subs	r2, r3, #1
 801ba16:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801ba18:	fb06 4602 	mla	r6, r6, r2, r4
 801ba1c:	1436      	asrs	r6, r6, #16
 801ba1e:	d546      	bpl.n	801baae <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801ba20:	4699      	mov	r9, r3
 801ba22:	462f      	mov	r7, r5
 801ba24:	f1b9 0f00 	cmp.w	r9, #0
 801ba28:	f300 80a5 	bgt.w	801bb76 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801ba2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ba30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ba34:	441d      	add	r5, r3
 801ba36:	9b01      	ldr	r3, [sp, #4]
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	f340 80f7 	ble.w	801bc2c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801ba3e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ba42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba44:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ba48:	eeb0 6a62 	vmov.f32	s12, s5
 801ba4c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ba50:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ba54:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba58:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ba5c:	eeb0 6a43 	vmov.f32	s12, s6
 801ba60:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba64:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ba68:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ba6c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ba70:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ba74:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ba78:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ba7c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ba80:	ee12 2a90 	vmov	r2, s5
 801ba84:	eef0 2a47 	vmov.f32	s5, s14
 801ba88:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba8c:	ee13 2a10 	vmov	r2, s6
 801ba90:	9313      	str	r3, [sp, #76]	; 0x4c
 801ba92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba94:	eeb0 3a67 	vmov.f32	s6, s15
 801ba98:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba9c:	9314      	str	r3, [sp, #80]	; 0x50
 801ba9e:	9b01      	ldr	r3, [sp, #4]
 801baa0:	9a04      	ldr	r2, [sp, #16]
 801baa2:	3b01      	subs	r3, #1
 801baa4:	9301      	str	r3, [sp, #4]
 801baa6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801baa8:	bf08      	it	eq
 801baaa:	4613      	moveq	r3, r2
 801baac:	e793      	b.n	801b9d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801baae:	4576      	cmp	r6, lr
 801bab0:	dab6      	bge.n	801ba20 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801bab2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801bab4:	fb06 0202 	mla	r2, r6, r2, r0
 801bab8:	1412      	asrs	r2, r2, #16
 801baba:	d4b1      	bmi.n	801ba20 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801babc:	4542      	cmp	r2, r8
 801babe:	daaf      	bge.n	801ba20 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801bac0:	1cef      	adds	r7, r5, #3
 801bac2:	4699      	mov	r9, r3
 801bac4:	f1b9 0f00 	cmp.w	r9, #0
 801bac8:	ddb0      	ble.n	801ba2c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801baca:	9902      	ldr	r1, [sp, #8]
 801bacc:	1402      	asrs	r2, r0, #16
 801bace:	1426      	asrs	r6, r4, #16
 801bad0:	fb0e 1202 	mla	r2, lr, r2, r1
 801bad4:	9903      	ldr	r1, [sp, #12]
 801bad6:	5d92      	ldrb	r2, [r2, r6]
 801bad8:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801badc:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801bae0:	d041      	beq.n	801bb66 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801bae2:	9a05      	ldr	r2, [sp, #20]
 801bae4:	fa5f fb86 	uxtb.w	fp, r6
 801bae8:	fb02 fc0c 	mul.w	ip, r2, ip
 801baec:	f10c 0201 	add.w	r2, ip, #1
 801baf0:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801baf4:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801baf8:	1212      	asrs	r2, r2, #8
 801bafa:	fa1f fa82 	uxth.w	sl, r2
 801bafe:	43d2      	mvns	r2, r2
 801bb00:	fb1b fb0a 	smulbb	fp, fp, sl
 801bb04:	b2d2      	uxtb	r2, r2
 801bb06:	fb0c bc02 	mla	ip, ip, r2, fp
 801bb0a:	fa1f fc8c 	uxth.w	ip, ip
 801bb0e:	f10c 0b01 	add.w	fp, ip, #1
 801bb12:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bb16:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801bb1a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801bb1e:	fb1b fb0a 	smulbb	fp, fp, sl
 801bb22:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bb26:	fb16 fa0a 	smulbb	sl, r6, sl
 801bb2a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801bb2e:	f807 cc03 	strb.w	ip, [r7, #-3]
 801bb32:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801bb36:	fb06 aa02 	mla	sl, r6, r2, sl
 801bb3a:	fb0c bc02 	mla	ip, ip, r2, fp
 801bb3e:	fa1f fa8a 	uxth.w	sl, sl
 801bb42:	fa1f fc8c 	uxth.w	ip, ip
 801bb46:	f10a 0601 	add.w	r6, sl, #1
 801bb4a:	f10c 0b01 	add.w	fp, ip, #1
 801bb4e:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801bb52:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bb56:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bb5a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bb5e:	f807 ac01 	strb.w	sl, [r7, #-1]
 801bb62:	f807 cc02 	strb.w	ip, [r7, #-2]
 801bb66:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bb68:	3703      	adds	r7, #3
 801bb6a:	f109 39ff 	add.w	r9, r9, #4294967295
 801bb6e:	4414      	add	r4, r2
 801bb70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bb72:	4410      	add	r0, r2
 801bb74:	e7a6      	b.n	801bac4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801bb76:	1426      	asrs	r6, r4, #16
 801bb78:	d450      	bmi.n	801bc1c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801bb7a:	4576      	cmp	r6, lr
 801bb7c:	da4e      	bge.n	801bc1c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801bb7e:	1402      	asrs	r2, r0, #16
 801bb80:	d44c      	bmi.n	801bc1c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801bb82:	4542      	cmp	r2, r8
 801bb84:	da4a      	bge.n	801bc1c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801bb86:	9902      	ldr	r1, [sp, #8]
 801bb88:	fb0e 1202 	mla	r2, lr, r2, r1
 801bb8c:	9903      	ldr	r1, [sp, #12]
 801bb8e:	5d92      	ldrb	r2, [r2, r6]
 801bb90:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 801bb94:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801bb98:	d040      	beq.n	801bc1c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801bb9a:	9a05      	ldr	r2, [sp, #20]
 801bb9c:	fa5f fb86 	uxtb.w	fp, r6
 801bba0:	fb02 fc0c 	mul.w	ip, r2, ip
 801bba4:	f10c 0201 	add.w	r2, ip, #1
 801bba8:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801bbac:	f897 c000 	ldrb.w	ip, [r7]
 801bbb0:	1212      	asrs	r2, r2, #8
 801bbb2:	fa1f fa82 	uxth.w	sl, r2
 801bbb6:	43d2      	mvns	r2, r2
 801bbb8:	fb1b fb0a 	smulbb	fp, fp, sl
 801bbbc:	b2d2      	uxtb	r2, r2
 801bbbe:	fb0c bc02 	mla	ip, ip, r2, fp
 801bbc2:	fa1f fc8c 	uxth.w	ip, ip
 801bbc6:	f10c 0b01 	add.w	fp, ip, #1
 801bbca:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bbce:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801bbd2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801bbd6:	fb1b fb0a 	smulbb	fp, fp, sl
 801bbda:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bbde:	fb16 fa0a 	smulbb	sl, r6, sl
 801bbe2:	78be      	ldrb	r6, [r7, #2]
 801bbe4:	f887 c000 	strb.w	ip, [r7]
 801bbe8:	f897 c001 	ldrb.w	ip, [r7, #1]
 801bbec:	fb06 aa02 	mla	sl, r6, r2, sl
 801bbf0:	fb0c bc02 	mla	ip, ip, r2, fp
 801bbf4:	fa1f fa8a 	uxth.w	sl, sl
 801bbf8:	fa1f fc8c 	uxth.w	ip, ip
 801bbfc:	f10a 0601 	add.w	r6, sl, #1
 801bc00:	f10c 0b01 	add.w	fp, ip, #1
 801bc04:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801bc08:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801bc0c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bc10:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bc14:	f887 a002 	strb.w	sl, [r7, #2]
 801bc18:	f887 c001 	strb.w	ip, [r7, #1]
 801bc1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bc1e:	3703      	adds	r7, #3
 801bc20:	f109 39ff 	add.w	r9, r9, #4294967295
 801bc24:	4414      	add	r4, r2
 801bc26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bc28:	4410      	add	r0, r2
 801bc2a:	e6fb      	b.n	801ba24 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801bc2c:	b007      	add	sp, #28
 801bc2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bc32 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bc32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc36:	b085      	sub	sp, #20
 801bc38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc3c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801bc3e:	9203      	str	r2, [sp, #12]
 801bc40:	6870      	ldr	r0, [r6, #4]
 801bc42:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801bc44:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801bc48:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801bc4c:	9100      	str	r1, [sp, #0]
 801bc4e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801bc52:	fb00 2404 	mla	r4, r0, r4, r2
 801bc56:	6832      	ldr	r2, [r6, #0]
 801bc58:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bc5c:	4414      	add	r4, r2
 801bc5e:	682a      	ldr	r2, [r5, #0]
 801bc60:	9201      	str	r2, [sp, #4]
 801bc62:	686a      	ldr	r2, [r5, #4]
 801bc64:	3204      	adds	r2, #4
 801bc66:	9202      	str	r2, [sp, #8]
 801bc68:	9a00      	ldr	r2, [sp, #0]
 801bc6a:	2a00      	cmp	r2, #0
 801bc6c:	dc03      	bgt.n	801bc76 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 801bc6e:	9a03      	ldr	r2, [sp, #12]
 801bc70:	2a00      	cmp	r2, #0
 801bc72:	f340 8131 	ble.w	801bed8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801bc76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bc78:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bc7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bc7e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	dd0e      	ble.n	801bca4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801bc86:	1405      	asrs	r5, r0, #16
 801bc88:	d405      	bmi.n	801bc96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bc8a:	4575      	cmp	r5, lr
 801bc8c:	da03      	bge.n	801bc96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bc8e:	1415      	asrs	r5, r2, #16
 801bc90:	d401      	bmi.n	801bc96 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bc92:	4545      	cmp	r5, r8
 801bc94:	db07      	blt.n	801bca6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801bc96:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801bc98:	3b01      	subs	r3, #1
 801bc9a:	3403      	adds	r4, #3
 801bc9c:	4428      	add	r0, r5
 801bc9e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801bca0:	442a      	add	r2, r5
 801bca2:	e7ee      	b.n	801bc82 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801bca4:	d06f      	beq.n	801bd86 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801bca6:	1e5d      	subs	r5, r3, #1
 801bca8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801bcaa:	fb06 0605 	mla	r6, r6, r5, r0
 801bcae:	1436      	asrs	r6, r6, #16
 801bcb0:	d460      	bmi.n	801bd74 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bcb2:	4576      	cmp	r6, lr
 801bcb4:	da5e      	bge.n	801bd74 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bcb6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801bcb8:	fb06 2505 	mla	r5, r6, r5, r2
 801bcbc:	142d      	asrs	r5, r5, #16
 801bcbe:	d459      	bmi.n	801bd74 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bcc0:	4545      	cmp	r5, r8
 801bcc2:	da57      	bge.n	801bd74 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801bcc4:	1ce5      	adds	r5, r4, #3
 801bcc6:	469a      	mov	sl, r3
 801bcc8:	f1ba 0f00 	cmp.w	sl, #0
 801bccc:	dd56      	ble.n	801bd7c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801bcce:	9901      	ldr	r1, [sp, #4]
 801bcd0:	1416      	asrs	r6, r2, #16
 801bcd2:	1407      	asrs	r7, r0, #16
 801bcd4:	fb0e 1606 	mla	r6, lr, r6, r1
 801bcd8:	9902      	ldr	r1, [sp, #8]
 801bcda:	5df6      	ldrb	r6, [r6, r7]
 801bcdc:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801bce0:	0e37      	lsrs	r7, r6, #24
 801bce2:	2fff      	cmp	r7, #255	; 0xff
 801bce4:	f000 80ef 	beq.w	801bec6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 801bce8:	fa5f fc87 	uxtb.w	ip, r7
 801bcec:	b3d7      	cbz	r7, 801bd64 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801bcee:	fa1f f78c 	uxth.w	r7, ip
 801bcf2:	ea6f 0c0c 	mvn.w	ip, ip
 801bcf6:	fa5f fb86 	uxtb.w	fp, r6
 801bcfa:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801bcfe:	fa5f fc8c 	uxtb.w	ip, ip
 801bd02:	fb1b fb07 	smulbb	fp, fp, r7
 801bd06:	fb09 b90c 	mla	r9, r9, ip, fp
 801bd0a:	fa1f f989 	uxth.w	r9, r9
 801bd0e:	f109 0b01 	add.w	fp, r9, #1
 801bd12:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bd16:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801bd1a:	fb1b fb0c 	smulbb	fp, fp, ip
 801bd1e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bd22:	f805 9c03 	strb.w	r9, [r5, #-3]
 801bd26:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801bd2a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801bd2e:	fb09 b907 	mla	r9, r9, r7, fp
 801bd32:	fa1f f989 	uxth.w	r9, r9
 801bd36:	f109 0b01 	add.w	fp, r9, #1
 801bd3a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bd3e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bd42:	f805 9c02 	strb.w	r9, [r5, #-2]
 801bd46:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801bd4a:	fb19 fc0c 	smulbb	ip, r9, ip
 801bd4e:	fb06 c607 	mla	r6, r6, r7, ip
 801bd52:	b2b6      	uxth	r6, r6
 801bd54:	f106 0c01 	add.w	ip, r6, #1
 801bd58:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801bd5c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bd60:	f805 cc01 	strb.w	ip, [r5, #-1]
 801bd64:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bd66:	3503      	adds	r5, #3
 801bd68:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bd6c:	4408      	add	r0, r1
 801bd6e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bd70:	440a      	add	r2, r1
 801bd72:	e7a9      	b.n	801bcc8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801bd74:	2600      	movs	r6, #0
 801bd76:	1b9d      	subs	r5, r3, r6
 801bd78:	2d00      	cmp	r5, #0
 801bd7a:	dc40      	bgt.n	801bdfe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801bd7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bd80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bd84:	441c      	add	r4, r3
 801bd86:	9b00      	ldr	r3, [sp, #0]
 801bd88:	2b00      	cmp	r3, #0
 801bd8a:	f340 80a5 	ble.w	801bed8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801bd8e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bd92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd94:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bd98:	eeb0 6a62 	vmov.f32	s12, s5
 801bd9c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bda0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bda4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bda8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801bdac:	eeb0 6a43 	vmov.f32	s12, s6
 801bdb0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bdb4:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801bdb8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bdbc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bdc0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bdc4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bdc8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bdcc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bdd0:	ee12 2a90 	vmov	r2, s5
 801bdd4:	eef0 2a47 	vmov.f32	s5, s14
 801bdd8:	fb92 f3f3 	sdiv	r3, r2, r3
 801bddc:	ee13 2a10 	vmov	r2, s6
 801bde0:	9311      	str	r3, [sp, #68]	; 0x44
 801bde2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bde4:	eeb0 3a67 	vmov.f32	s6, s15
 801bde8:	fb92 f3f3 	sdiv	r3, r2, r3
 801bdec:	9312      	str	r3, [sp, #72]	; 0x48
 801bdee:	9b00      	ldr	r3, [sp, #0]
 801bdf0:	9a03      	ldr	r2, [sp, #12]
 801bdf2:	3b01      	subs	r3, #1
 801bdf4:	9300      	str	r3, [sp, #0]
 801bdf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bdf8:	bf08      	it	eq
 801bdfa:	4613      	moveq	r3, r2
 801bdfc:	e734      	b.n	801bc68 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801bdfe:	1407      	asrs	r7, r0, #16
 801be00:	d450      	bmi.n	801bea4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801be02:	4577      	cmp	r7, lr
 801be04:	da4e      	bge.n	801bea4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801be06:	1415      	asrs	r5, r2, #16
 801be08:	d44c      	bmi.n	801bea4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801be0a:	4545      	cmp	r5, r8
 801be0c:	da4a      	bge.n	801bea4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801be0e:	9901      	ldr	r1, [sp, #4]
 801be10:	fb0e 1505 	mla	r5, lr, r5, r1
 801be14:	9902      	ldr	r1, [sp, #8]
 801be16:	5ded      	ldrb	r5, [r5, r7]
 801be18:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801be1c:	0e2f      	lsrs	r7, r5, #24
 801be1e:	2fff      	cmp	r7, #255	; 0xff
 801be20:	d046      	beq.n	801beb0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 801be22:	fa5f f987 	uxtb.w	r9, r7
 801be26:	b3ef      	cbz	r7, 801bea4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801be28:	fa1f fc89 	uxth.w	ip, r9
 801be2c:	ea6f 0909 	mvn.w	r9, r9
 801be30:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801be34:	fa5f fb85 	uxtb.w	fp, r5
 801be38:	f814 a007 	ldrb.w	sl, [r4, r7]
 801be3c:	fa5f f989 	uxtb.w	r9, r9
 801be40:	fb1b fb0c 	smulbb	fp, fp, ip
 801be44:	fb0a ba09 	mla	sl, sl, r9, fp
 801be48:	fa1f fa8a 	uxth.w	sl, sl
 801be4c:	f10a 0b01 	add.w	fp, sl, #1
 801be50:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801be54:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801be58:	f804 a007 	strb.w	sl, [r4, r7]
 801be5c:	4427      	add	r7, r4
 801be5e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801be62:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801be66:	f897 b001 	ldrb.w	fp, [r7, #1]
 801be6a:	fb1b fb09 	smulbb	fp, fp, r9
 801be6e:	fb0a ba0c 	mla	sl, sl, ip, fp
 801be72:	fa1f fa8a 	uxth.w	sl, sl
 801be76:	f10a 0b01 	add.w	fp, sl, #1
 801be7a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801be7e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801be82:	f887 a001 	strb.w	sl, [r7, #1]
 801be86:	f897 a002 	ldrb.w	sl, [r7, #2]
 801be8a:	fb1a f909 	smulbb	r9, sl, r9
 801be8e:	fb05 950c 	mla	r5, r5, ip, r9
 801be92:	b2ad      	uxth	r5, r5
 801be94:	f105 0901 	add.w	r9, r5, #1
 801be98:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801be9c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bea0:	f887 9002 	strb.w	r9, [r7, #2]
 801bea4:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bea6:	3601      	adds	r6, #1
 801bea8:	4408      	add	r0, r1
 801beaa:	9912      	ldr	r1, [sp, #72]	; 0x48
 801beac:	440a      	add	r2, r1
 801beae:	e762      	b.n	801bd76 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801beb0:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801beb4:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801beb8:	55e5      	strb	r5, [r4, r7]
 801beba:	4427      	add	r7, r4
 801bebc:	0c2d      	lsrs	r5, r5, #16
 801bebe:	f887 c001 	strb.w	ip, [r7, #1]
 801bec2:	70bd      	strb	r5, [r7, #2]
 801bec4:	e7ee      	b.n	801bea4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801bec6:	0a37      	lsrs	r7, r6, #8
 801bec8:	f805 6c03 	strb.w	r6, [r5, #-3]
 801becc:	0c36      	lsrs	r6, r6, #16
 801bece:	f805 7c02 	strb.w	r7, [r5, #-2]
 801bed2:	f805 6c01 	strb.w	r6, [r5, #-1]
 801bed6:	e745      	b.n	801bd64 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801bed8:	b005      	add	sp, #20
 801beda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bede <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bede:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bee2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801bee4:	9201      	str	r2, [sp, #4]
 801bee6:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801beea:	6870      	ldr	r0, [r6, #4]
 801beec:	9200      	str	r2, [sp, #0]
 801beee:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801bef2:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 801bef6:	fa1f fc85 	uxth.w	ip, r5
 801befa:	43ed      	mvns	r5, r5
 801befc:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801bf00:	b2ed      	uxtb	r5, r5
 801bf02:	fb00 2404 	mla	r4, r0, r4, r2
 801bf06:	6832      	ldr	r2, [r6, #0]
 801bf08:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bf0c:	4414      	add	r4, r2
 801bf0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801bf10:	f8d2 8000 	ldr.w	r8, [r2]
 801bf14:	2900      	cmp	r1, #0
 801bf16:	dc03      	bgt.n	801bf20 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801bf18:	9a01      	ldr	r2, [sp, #4]
 801bf1a:	2a00      	cmp	r2, #0
 801bf1c:	f340 8104 	ble.w	801c128 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801bf20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bf22:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801bf26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bf28:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801bf2c:	2b00      	cmp	r3, #0
 801bf2e:	dd0f      	ble.n	801bf50 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801bf30:	1406      	asrs	r6, r0, #16
 801bf32:	d406      	bmi.n	801bf42 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bf34:	4576      	cmp	r6, lr
 801bf36:	da04      	bge.n	801bf42 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bf38:	1416      	asrs	r6, r2, #16
 801bf3a:	d402      	bmi.n	801bf42 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801bf3c:	9f00      	ldr	r7, [sp, #0]
 801bf3e:	42be      	cmp	r6, r7
 801bf40:	db07      	blt.n	801bf52 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801bf42:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801bf44:	3b01      	subs	r3, #1
 801bf46:	3403      	adds	r4, #3
 801bf48:	4430      	add	r0, r6
 801bf4a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801bf4c:	4432      	add	r2, r6
 801bf4e:	e7ed      	b.n	801bf2c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801bf50:	d05f      	beq.n	801c012 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 801bf52:	1e5e      	subs	r6, r3, #1
 801bf54:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801bf56:	fb07 0706 	mla	r7, r7, r6, r0
 801bf5a:	143f      	asrs	r7, r7, #16
 801bf5c:	d450      	bmi.n	801c000 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801bf5e:	4577      	cmp	r7, lr
 801bf60:	da4e      	bge.n	801c000 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801bf62:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801bf64:	fb07 2606 	mla	r6, r7, r6, r2
 801bf68:	1436      	asrs	r6, r6, #16
 801bf6a:	d449      	bmi.n	801c000 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801bf6c:	9f00      	ldr	r7, [sp, #0]
 801bf6e:	42be      	cmp	r6, r7
 801bf70:	da46      	bge.n	801c000 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 801bf72:	1ce6      	adds	r6, r4, #3
 801bf74:	4699      	mov	r9, r3
 801bf76:	f1b9 0f00 	cmp.w	r9, #0
 801bf7a:	f106 0603 	add.w	r6, r6, #3
 801bf7e:	dd43      	ble.n	801c008 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 801bf80:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801bf84:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801bf88:	1417      	asrs	r7, r2, #16
 801bf8a:	f109 39ff 	add.w	r9, r9, #4294967295
 801bf8e:	fb1b fb05 	smulbb	fp, fp, r5
 801bf92:	fb0e a707 	mla	r7, lr, r7, sl
 801bf96:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801bf9a:	eb08 0a07 	add.w	sl, r8, r7
 801bf9e:	f818 7007 	ldrb.w	r7, [r8, r7]
 801bfa2:	fb07 b70c 	mla	r7, r7, ip, fp
 801bfa6:	b2bf      	uxth	r7, r7
 801bfa8:	f107 0b01 	add.w	fp, r7, #1
 801bfac:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801bfb0:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801bfb4:	fb1b fb05 	smulbb	fp, fp, r5
 801bfb8:	123f      	asrs	r7, r7, #8
 801bfba:	f806 7c06 	strb.w	r7, [r6, #-6]
 801bfbe:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801bfc2:	fb07 b70c 	mla	r7, r7, ip, fp
 801bfc6:	b2bf      	uxth	r7, r7
 801bfc8:	f107 0b01 	add.w	fp, r7, #1
 801bfcc:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801bfd0:	123f      	asrs	r7, r7, #8
 801bfd2:	f806 7c05 	strb.w	r7, [r6, #-5]
 801bfd6:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801bfda:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801bfde:	fb1a fa05 	smulbb	sl, sl, r5
 801bfe2:	fb07 a70c 	mla	r7, r7, ip, sl
 801bfe6:	b2bf      	uxth	r7, r7
 801bfe8:	f107 0a01 	add.w	sl, r7, #1
 801bfec:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801bff0:	123f      	asrs	r7, r7, #8
 801bff2:	f806 7c04 	strb.w	r7, [r6, #-4]
 801bff6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801bff8:	4438      	add	r0, r7
 801bffa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801bffc:	443a      	add	r2, r7
 801bffe:	e7ba      	b.n	801bf76 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801c000:	2700      	movs	r7, #0
 801c002:	1bde      	subs	r6, r3, r7
 801c004:	2e00      	cmp	r6, #0
 801c006:	dc3f      	bgt.n	801c088 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801c008:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c00c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c010:	441c      	add	r4, r3
 801c012:	2900      	cmp	r1, #0
 801c014:	f340 8088 	ble.w	801c128 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801c018:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c01c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c01e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c022:	3901      	subs	r1, #1
 801c024:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c028:	eef0 6a62 	vmov.f32	s13, s5
 801c02c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c030:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c034:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c038:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801c03c:	eef0 6a43 	vmov.f32	s13, s6
 801c040:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c044:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801c048:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c04c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c050:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c054:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c058:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c05c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c060:	ee12 2a90 	vmov	r2, s5
 801c064:	eef0 2a47 	vmov.f32	s5, s14
 801c068:	fb92 f3f3 	sdiv	r3, r2, r3
 801c06c:	ee13 2a10 	vmov	r2, s6
 801c070:	930f      	str	r3, [sp, #60]	; 0x3c
 801c072:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c074:	eeb0 3a67 	vmov.f32	s6, s15
 801c078:	fb92 f3f3 	sdiv	r3, r2, r3
 801c07c:	9a01      	ldr	r2, [sp, #4]
 801c07e:	9310      	str	r3, [sp, #64]	; 0x40
 801c080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c082:	bf08      	it	eq
 801c084:	4613      	moveq	r3, r2
 801c086:	e745      	b.n	801bf14 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 801c088:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c08c:	d446      	bmi.n	801c11c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c08e:	45f2      	cmp	sl, lr
 801c090:	da44      	bge.n	801c11c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c092:	ea5f 4922 	movs.w	r9, r2, asr #16
 801c096:	d441      	bmi.n	801c11c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c098:	9e00      	ldr	r6, [sp, #0]
 801c09a:	45b1      	cmp	r9, r6
 801c09c:	da3e      	bge.n	801c11c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801c09e:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c0a2:	fb0e a909 	mla	r9, lr, r9, sl
 801c0a6:	f814 b006 	ldrb.w	fp, [r4, r6]
 801c0aa:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c0ae:	fb1b fb05 	smulbb	fp, fp, r5
 801c0b2:	eb08 0a09 	add.w	sl, r8, r9
 801c0b6:	f818 9009 	ldrb.w	r9, [r8, r9]
 801c0ba:	fb09 b90c 	mla	r9, r9, ip, fp
 801c0be:	fa1f f989 	uxth.w	r9, r9
 801c0c2:	f109 0b01 	add.w	fp, r9, #1
 801c0c6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c0ca:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c0ce:	f804 9006 	strb.w	r9, [r4, r6]
 801c0d2:	4426      	add	r6, r4
 801c0d4:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c0d8:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c0dc:	fb1b fb05 	smulbb	fp, fp, r5
 801c0e0:	fb09 b90c 	mla	r9, r9, ip, fp
 801c0e4:	fa1f f989 	uxth.w	r9, r9
 801c0e8:	f109 0b01 	add.w	fp, r9, #1
 801c0ec:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c0f0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c0f4:	f886 9001 	strb.w	r9, [r6, #1]
 801c0f8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c0fc:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c100:	fb1a fa05 	smulbb	sl, sl, r5
 801c104:	fb09 a90c 	mla	r9, r9, ip, sl
 801c108:	fa1f f989 	uxth.w	r9, r9
 801c10c:	f109 0a01 	add.w	sl, r9, #1
 801c110:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801c114:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c118:	f886 9002 	strb.w	r9, [r6, #2]
 801c11c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c11e:	3701      	adds	r7, #1
 801c120:	4430      	add	r0, r6
 801c122:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c124:	4432      	add	r2, r6
 801c126:	e76c      	b.n	801c002 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 801c128:	b003      	add	sp, #12
 801c12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c12e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c12e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c132:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c134:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c138:	9201      	str	r2, [sp, #4]
 801c13a:	6868      	ldr	r0, [r5, #4]
 801c13c:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 801c140:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801c144:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801c148:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 801c14c:	fb00 2404 	mla	r4, r0, r4, r2
 801c150:	682a      	ldr	r2, [r5, #0]
 801c152:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c156:	4414      	add	r4, r2
 801c158:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c15a:	f8d2 9000 	ldr.w	r9, [r2]
 801c15e:	2900      	cmp	r1, #0
 801c160:	dc03      	bgt.n	801c16a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c162:	9a01      	ldr	r2, [sp, #4]
 801c164:	2a00      	cmp	r2, #0
 801c166:	f340 80a8 	ble.w	801c2ba <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801c16a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c16c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c170:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c172:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c176:	2b00      	cmp	r3, #0
 801c178:	dd0c      	ble.n	801c194 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801c17a:	1405      	asrs	r5, r0, #16
 801c17c:	d405      	bmi.n	801c18a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801c17e:	4565      	cmp	r5, ip
 801c180:	da03      	bge.n	801c18a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801c182:	1415      	asrs	r5, r2, #16
 801c184:	d401      	bmi.n	801c18a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801c186:	4575      	cmp	r5, lr
 801c188:	db05      	blt.n	801c196 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801c18a:	4438      	add	r0, r7
 801c18c:	4432      	add	r2, r6
 801c18e:	3b01      	subs	r3, #1
 801c190:	3403      	adds	r4, #3
 801c192:	e7f0      	b.n	801c176 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801c194:	d03a      	beq.n	801c20c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801c196:	1e5d      	subs	r5, r3, #1
 801c198:	fb07 0805 	mla	r8, r7, r5, r0
 801c19c:	ea5f 4828 	movs.w	r8, r8, asr #16
 801c1a0:	d429      	bmi.n	801c1f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c1a2:	45e0      	cmp	r8, ip
 801c1a4:	da27      	bge.n	801c1f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c1a6:	fb06 2505 	mla	r5, r6, r5, r2
 801c1aa:	142d      	asrs	r5, r5, #16
 801c1ac:	d423      	bmi.n	801c1f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c1ae:	4575      	cmp	r5, lr
 801c1b0:	da21      	bge.n	801c1f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801c1b2:	f104 0803 	add.w	r8, r4, #3
 801c1b6:	469a      	mov	sl, r3
 801c1b8:	f1ba 0f00 	cmp.w	sl, #0
 801c1bc:	f108 0803 	add.w	r8, r8, #3
 801c1c0:	dd1f      	ble.n	801c202 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801c1c2:	ea4f 4b20 	mov.w	fp, r0, asr #16
 801c1c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c1ca:	1415      	asrs	r5, r2, #16
 801c1cc:	4438      	add	r0, r7
 801c1ce:	4432      	add	r2, r6
 801c1d0:	fb0c b505 	mla	r5, ip, r5, fp
 801c1d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c1d8:	eb09 0b05 	add.w	fp, r9, r5
 801c1dc:	f819 5005 	ldrb.w	r5, [r9, r5]
 801c1e0:	f808 5c06 	strb.w	r5, [r8, #-6]
 801c1e4:	f89b 5001 	ldrb.w	r5, [fp, #1]
 801c1e8:	f808 5c05 	strb.w	r5, [r8, #-5]
 801c1ec:	f89b 5002 	ldrb.w	r5, [fp, #2]
 801c1f0:	f808 5c04 	strb.w	r5, [r8, #-4]
 801c1f4:	e7e0      	b.n	801c1b8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c1f6:	2500      	movs	r5, #0
 801c1f8:	eba3 0805 	sub.w	r8, r3, r5
 801c1fc:	f1b8 0f00 	cmp.w	r8, #0
 801c200:	dc38      	bgt.n	801c274 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 801c202:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c206:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c20a:	441c      	add	r4, r3
 801c20c:	2900      	cmp	r1, #0
 801c20e:	dd54      	ble.n	801c2ba <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801c210:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c214:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c216:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c21a:	3901      	subs	r1, #1
 801c21c:	eeb0 6a62 	vmov.f32	s12, s5
 801c220:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c224:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c228:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c22c:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801c230:	eeb0 6a43 	vmov.f32	s12, s6
 801c234:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c238:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801c23c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c240:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c244:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c248:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c24c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c250:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c254:	ee12 2a90 	vmov	r2, s5
 801c258:	eef0 2a47 	vmov.f32	s5, s14
 801c25c:	fb92 f7f3 	sdiv	r7, r2, r3
 801c260:	ee13 2a10 	vmov	r2, s6
 801c264:	eeb0 3a67 	vmov.f32	s6, s15
 801c268:	fb92 f6f3 	sdiv	r6, r2, r3
 801c26c:	9a01      	ldr	r2, [sp, #4]
 801c26e:	bf08      	it	eq
 801c270:	4613      	moveq	r3, r2
 801c272:	e774      	b.n	801c15e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801c274:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c278:	d41b      	bmi.n	801c2b2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801c27a:	45e2      	cmp	sl, ip
 801c27c:	da19      	bge.n	801c2b2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801c27e:	ea5f 4822 	movs.w	r8, r2, asr #16
 801c282:	d416      	bmi.n	801c2b2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801c284:	45f0      	cmp	r8, lr
 801c286:	da14      	bge.n	801c2b2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 801c288:	fb0c a808 	mla	r8, ip, r8, sl
 801c28c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c290:	f819 b008 	ldrb.w	fp, [r9, r8]
 801c294:	eb09 0a08 	add.w	sl, r9, r8
 801c298:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801c29c:	f804 b008 	strb.w	fp, [r4, r8]
 801c2a0:	44a0      	add	r8, r4
 801c2a2:	f89a b001 	ldrb.w	fp, [sl, #1]
 801c2a6:	f888 b001 	strb.w	fp, [r8, #1]
 801c2aa:	f89a a002 	ldrb.w	sl, [sl, #2]
 801c2ae:	f888 a002 	strb.w	sl, [r8, #2]
 801c2b2:	4438      	add	r0, r7
 801c2b4:	4432      	add	r2, r6
 801c2b6:	3501      	adds	r5, #1
 801c2b8:	e79e      	b.n	801c1f8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801c2ba:	b003      	add	sp, #12
 801c2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c2c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2c4:	b085      	sub	sp, #20
 801c2c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c2ca:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c2cc:	9202      	str	r2, [sp, #8]
 801c2ce:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801c2d2:	6860      	ldr	r0, [r4, #4]
 801c2d4:	9203      	str	r2, [sp, #12]
 801c2d6:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c2da:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 801c2de:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801c2e2:	fb00 2505 	mla	r5, r0, r5, r2
 801c2e6:	6822      	ldr	r2, [r4, #0]
 801c2e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c2ec:	4415      	add	r5, r2
 801c2ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c2f0:	6812      	ldr	r2, [r2, #0]
 801c2f2:	9201      	str	r2, [sp, #4]
 801c2f4:	2900      	cmp	r1, #0
 801c2f6:	dc03      	bgt.n	801c300 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801c2f8:	9a02      	ldr	r2, [sp, #8]
 801c2fa:	2a00      	cmp	r2, #0
 801c2fc:	f340 811c 	ble.w	801c538 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801c300:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c302:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c306:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c308:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c30c:	2b00      	cmp	r3, #0
 801c30e:	dd0e      	ble.n	801c32e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c310:	1422      	asrs	r2, r4, #16
 801c312:	d405      	bmi.n	801c320 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801c314:	4572      	cmp	r2, lr
 801c316:	da03      	bge.n	801c320 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801c318:	1402      	asrs	r2, r0, #16
 801c31a:	d401      	bmi.n	801c320 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801c31c:	4542      	cmp	r2, r8
 801c31e:	db07      	blt.n	801c330 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801c320:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c322:	3b01      	subs	r3, #1
 801c324:	3503      	adds	r5, #3
 801c326:	4414      	add	r4, r2
 801c328:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c32a:	4410      	add	r0, r2
 801c32c:	e7ee      	b.n	801c30c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801c32e:	d072      	beq.n	801c416 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 801c330:	1e5a      	subs	r2, r3, #1
 801c332:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c334:	fb06 4602 	mla	r6, r6, r2, r4
 801c338:	1436      	asrs	r6, r6, #16
 801c33a:	d461      	bmi.n	801c400 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801c33c:	4576      	cmp	r6, lr
 801c33e:	da5f      	bge.n	801c400 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801c340:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c342:	fb06 0202 	mla	r2, r6, r2, r0
 801c346:	1412      	asrs	r2, r2, #16
 801c348:	d45a      	bmi.n	801c400 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801c34a:	4542      	cmp	r2, r8
 801c34c:	da58      	bge.n	801c400 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 801c34e:	1cef      	adds	r7, r5, #3
 801c350:	4699      	mov	r9, r3
 801c352:	f1b9 0f00 	cmp.w	r9, #0
 801c356:	dd59      	ble.n	801c40c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801c358:	1426      	asrs	r6, r4, #16
 801c35a:	1402      	asrs	r2, r0, #16
 801c35c:	fb0e 6202 	mla	r2, lr, r2, r6
 801c360:	9e01      	ldr	r6, [sp, #4]
 801c362:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801c366:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801c36a:	d041      	beq.n	801c3f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 801c36c:	9a03      	ldr	r2, [sp, #12]
 801c36e:	fa5f fb86 	uxtb.w	fp, r6
 801c372:	fb02 fc0c 	mul.w	ip, r2, ip
 801c376:	f10c 0201 	add.w	r2, ip, #1
 801c37a:	eb02 222c 	add.w	r2, r2, ip, asr #8
 801c37e:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 801c382:	1212      	asrs	r2, r2, #8
 801c384:	fa1f fa82 	uxth.w	sl, r2
 801c388:	43d2      	mvns	r2, r2
 801c38a:	fb1b fb0a 	smulbb	fp, fp, sl
 801c38e:	b2d2      	uxtb	r2, r2
 801c390:	fb0c bc02 	mla	ip, ip, r2, fp
 801c394:	fa1f fc8c 	uxth.w	ip, ip
 801c398:	f10c 0b01 	add.w	fp, ip, #1
 801c39c:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c3a0:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c3a4:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c3a8:	fb1b fb0a 	smulbb	fp, fp, sl
 801c3ac:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c3b0:	fb16 fa0a 	smulbb	sl, r6, sl
 801c3b4:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c3b8:	f807 cc03 	strb.w	ip, [r7, #-3]
 801c3bc:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801c3c0:	fb06 aa02 	mla	sl, r6, r2, sl
 801c3c4:	fb0c bc02 	mla	ip, ip, r2, fp
 801c3c8:	fa1f fa8a 	uxth.w	sl, sl
 801c3cc:	fa1f fc8c 	uxth.w	ip, ip
 801c3d0:	f10a 0601 	add.w	r6, sl, #1
 801c3d4:	f10c 0b01 	add.w	fp, ip, #1
 801c3d8:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c3dc:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c3e0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c3e4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c3e8:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c3ec:	f807 cc02 	strb.w	ip, [r7, #-2]
 801c3f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c3f2:	3703      	adds	r7, #3
 801c3f4:	f109 39ff 	add.w	r9, r9, #4294967295
 801c3f8:	4414      	add	r4, r2
 801c3fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c3fc:	4410      	add	r0, r2
 801c3fe:	e7a8      	b.n	801c352 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c400:	f04f 0c00 	mov.w	ip, #0
 801c404:	eba3 020c 	sub.w	r2, r3, ip
 801c408:	2a00      	cmp	r2, #0
 801c40a:	dc3d      	bgt.n	801c488 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801c40c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c410:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c414:	441d      	add	r5, r3
 801c416:	2900      	cmp	r1, #0
 801c418:	f340 808e 	ble.w	801c538 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801c41c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c422:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c426:	3901      	subs	r1, #1
 801c428:	eeb0 6a62 	vmov.f32	s12, s5
 801c42c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c430:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c434:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c438:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c43c:	eeb0 6a43 	vmov.f32	s12, s6
 801c440:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c444:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c448:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c44c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c450:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c454:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c458:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c45c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c460:	ee12 2a90 	vmov	r2, s5
 801c464:	eef0 2a47 	vmov.f32	s5, s14
 801c468:	fb92 f3f3 	sdiv	r3, r2, r3
 801c46c:	ee13 2a10 	vmov	r2, s6
 801c470:	9311      	str	r3, [sp, #68]	; 0x44
 801c472:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c474:	eeb0 3a67 	vmov.f32	s6, s15
 801c478:	fb92 f3f3 	sdiv	r3, r2, r3
 801c47c:	9a02      	ldr	r2, [sp, #8]
 801c47e:	9312      	str	r3, [sp, #72]	; 0x48
 801c480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c482:	bf08      	it	eq
 801c484:	4613      	moveq	r3, r2
 801c486:	e735      	b.n	801c2f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 801c488:	1426      	asrs	r6, r4, #16
 801c48a:	d44e      	bmi.n	801c52a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c48c:	4576      	cmp	r6, lr
 801c48e:	da4c      	bge.n	801c52a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c490:	1402      	asrs	r2, r0, #16
 801c492:	d44a      	bmi.n	801c52a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c494:	4542      	cmp	r2, r8
 801c496:	da48      	bge.n	801c52a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c498:	fb0e 6202 	mla	r2, lr, r2, r6
 801c49c:	9e01      	ldr	r6, [sp, #4]
 801c49e:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801c4a2:	0e3a      	lsrs	r2, r7, #24
 801c4a4:	d041      	beq.n	801c52a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 801c4a6:	9e03      	ldr	r6, [sp, #12]
 801c4a8:	fa5f fb87 	uxtb.w	fp, r7
 801c4ac:	4372      	muls	r2, r6
 801c4ae:	1c56      	adds	r6, r2, #1
 801c4b0:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c4b4:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 801c4b8:	1212      	asrs	r2, r2, #8
 801c4ba:	f815 9006 	ldrb.w	r9, [r5, r6]
 801c4be:	fa1f fa82 	uxth.w	sl, r2
 801c4c2:	43d2      	mvns	r2, r2
 801c4c4:	fb1b fb0a 	smulbb	fp, fp, sl
 801c4c8:	b2d2      	uxtb	r2, r2
 801c4ca:	fb09 b902 	mla	r9, r9, r2, fp
 801c4ce:	fa1f f989 	uxth.w	r9, r9
 801c4d2:	f109 0b01 	add.w	fp, r9, #1
 801c4d6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c4da:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c4de:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c4e2:	fb1b fb0a 	smulbb	fp, fp, sl
 801c4e6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c4ea:	fb17 fa0a 	smulbb	sl, r7, sl
 801c4ee:	f805 9006 	strb.w	r9, [r5, r6]
 801c4f2:	442e      	add	r6, r5
 801c4f4:	78b7      	ldrb	r7, [r6, #2]
 801c4f6:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c4fa:	fb07 aa02 	mla	sl, r7, r2, sl
 801c4fe:	fb09 b902 	mla	r9, r9, r2, fp
 801c502:	fa1f fa8a 	uxth.w	sl, sl
 801c506:	fa1f f989 	uxth.w	r9, r9
 801c50a:	f10a 0701 	add.w	r7, sl, #1
 801c50e:	f109 0b01 	add.w	fp, r9, #1
 801c512:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c516:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c51a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c51e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c522:	f886 a002 	strb.w	sl, [r6, #2]
 801c526:	f886 9001 	strb.w	r9, [r6, #1]
 801c52a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c52c:	f10c 0c01 	add.w	ip, ip, #1
 801c530:	4414      	add	r4, r2
 801c532:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c534:	4410      	add	r0, r2
 801c536:	e765      	b.n	801c404 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 801c538:	b005      	add	sp, #20
 801c53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c53e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c53e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c542:	b085      	sub	sp, #20
 801c544:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c548:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c54a:	9203      	str	r2, [sp, #12]
 801c54c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801c550:	6860      	ldr	r0, [r4, #4]
 801c552:	9201      	str	r2, [sp, #4]
 801c554:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801c558:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801c55c:	fb00 2505 	mla	r5, r0, r5, r2
 801c560:	6822      	ldr	r2, [r4, #0]
 801c562:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c566:	4415      	add	r5, r2
 801c568:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c56a:	6812      	ldr	r2, [r2, #0]
 801c56c:	9202      	str	r2, [sp, #8]
 801c56e:	2900      	cmp	r1, #0
 801c570:	dc03      	bgt.n	801c57a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801c572:	9a03      	ldr	r2, [sp, #12]
 801c574:	2a00      	cmp	r2, #0
 801c576:	f340 8122 	ble.w	801c7be <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801c57a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c57c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c580:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c582:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c586:	2b00      	cmp	r3, #0
 801c588:	dd0f      	ble.n	801c5aa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801c58a:	1422      	asrs	r2, r4, #16
 801c58c:	d406      	bmi.n	801c59c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801c58e:	4572      	cmp	r2, lr
 801c590:	da04      	bge.n	801c59c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801c592:	1402      	asrs	r2, r0, #16
 801c594:	d402      	bmi.n	801c59c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801c596:	9e01      	ldr	r6, [sp, #4]
 801c598:	42b2      	cmp	r2, r6
 801c59a:	db07      	blt.n	801c5ac <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c59c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c59e:	3b01      	subs	r3, #1
 801c5a0:	3503      	adds	r5, #3
 801c5a2:	4414      	add	r4, r2
 801c5a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c5a6:	4410      	add	r0, r2
 801c5a8:	e7ed      	b.n	801c586 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801c5aa:	d06e      	beq.n	801c68a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 801c5ac:	1e5a      	subs	r2, r3, #1
 801c5ae:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c5b0:	fb06 4602 	mla	r6, r6, r2, r4
 801c5b4:	1436      	asrs	r6, r6, #16
 801c5b6:	d45d      	bmi.n	801c674 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c5b8:	4576      	cmp	r6, lr
 801c5ba:	da5b      	bge.n	801c674 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c5bc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c5be:	fb06 0202 	mla	r2, r6, r2, r0
 801c5c2:	1412      	asrs	r2, r2, #16
 801c5c4:	d456      	bmi.n	801c674 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c5c6:	9e01      	ldr	r6, [sp, #4]
 801c5c8:	42b2      	cmp	r2, r6
 801c5ca:	da53      	bge.n	801c674 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801c5cc:	1cee      	adds	r6, r5, #3
 801c5ce:	469a      	mov	sl, r3
 801c5d0:	f1ba 0f00 	cmp.w	sl, #0
 801c5d4:	dd54      	ble.n	801c680 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801c5d6:	1427      	asrs	r7, r4, #16
 801c5d8:	1402      	asrs	r2, r0, #16
 801c5da:	fb0e 7202 	mla	r2, lr, r2, r7
 801c5de:	9f02      	ldr	r7, [sp, #8]
 801c5e0:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801c5e4:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 801c5e8:	d03c      	beq.n	801c664 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801c5ea:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801c5ee:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c5f2:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801c5f6:	fa5f f28c 	uxtb.w	r2, ip
 801c5fa:	b2ff      	uxtb	r7, r7
 801c5fc:	f000 80d8 	beq.w	801c7b0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c600:	fa1f f882 	uxth.w	r8, r2
 801c604:	43d2      	mvns	r2, r2
 801c606:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801c60a:	fb17 f708 	smulbb	r7, r7, r8
 801c60e:	b2d2      	uxtb	r2, r2
 801c610:	fb19 f908 	smulbb	r9, r9, r8
 801c614:	fb0c 7702 	mla	r7, ip, r2, r7
 801c618:	fb1b f808 	smulbb	r8, fp, r8
 801c61c:	b2bf      	uxth	r7, r7
 801c61e:	f107 0c01 	add.w	ip, r7, #1
 801c622:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801c626:	123f      	asrs	r7, r7, #8
 801c628:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c62c:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801c630:	fb07 9902 	mla	r9, r7, r2, r9
 801c634:	fa1f f989 	uxth.w	r9, r9
 801c638:	f109 0701 	add.w	r7, r9, #1
 801c63c:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801c640:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801c644:	fb07 8802 	mla	r8, r7, r2, r8
 801c648:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c64c:	fa1f f888 	uxth.w	r8, r8
 801c650:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c654:	f108 0201 	add.w	r2, r8, #1
 801c658:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801c65c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c660:	f806 8c01 	strb.w	r8, [r6, #-1]
 801c664:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c666:	3603      	adds	r6, #3
 801c668:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c66c:	4414      	add	r4, r2
 801c66e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c670:	4410      	add	r0, r2
 801c672:	e7ad      	b.n	801c5d0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801c674:	f04f 0c00 	mov.w	ip, #0
 801c678:	eba3 020c 	sub.w	r2, r3, ip
 801c67c:	2a00      	cmp	r2, #0
 801c67e:	dc3d      	bgt.n	801c6fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801c680:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c684:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c688:	441d      	add	r5, r3
 801c68a:	2900      	cmp	r1, #0
 801c68c:	f340 8097 	ble.w	801c7be <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801c690:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c694:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c696:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c69a:	3901      	subs	r1, #1
 801c69c:	eeb0 6a62 	vmov.f32	s12, s5
 801c6a0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c6a4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c6a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c6ac:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c6b0:	eeb0 6a43 	vmov.f32	s12, s6
 801c6b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c6b8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c6bc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c6c0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c6c4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c6c8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c6cc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c6d0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c6d4:	ee12 2a90 	vmov	r2, s5
 801c6d8:	eef0 2a47 	vmov.f32	s5, s14
 801c6dc:	fb92 f3f3 	sdiv	r3, r2, r3
 801c6e0:	ee13 2a10 	vmov	r2, s6
 801c6e4:	9311      	str	r3, [sp, #68]	; 0x44
 801c6e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6e8:	eeb0 3a67 	vmov.f32	s6, s15
 801c6ec:	fb92 f3f3 	sdiv	r3, r2, r3
 801c6f0:	9a03      	ldr	r2, [sp, #12]
 801c6f2:	9312      	str	r3, [sp, #72]	; 0x48
 801c6f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c6f6:	bf08      	it	eq
 801c6f8:	4613      	moveq	r3, r2
 801c6fa:	e738      	b.n	801c56e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 801c6fc:	1426      	asrs	r6, r4, #16
 801c6fe:	d448      	bmi.n	801c792 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c700:	4576      	cmp	r6, lr
 801c702:	da46      	bge.n	801c792 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c704:	1402      	asrs	r2, r0, #16
 801c706:	d444      	bmi.n	801c792 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c708:	9f01      	ldr	r7, [sp, #4]
 801c70a:	42ba      	cmp	r2, r7
 801c70c:	da41      	bge.n	801c792 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c70e:	fb0e 6202 	mla	r2, lr, r2, r6
 801c712:	9e02      	ldr	r6, [sp, #8]
 801c714:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801c718:	0e3a      	lsrs	r2, r7, #24
 801c71a:	d03a      	beq.n	801c792 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c71c:	2aff      	cmp	r2, #255	; 0xff
 801c71e:	b2d6      	uxtb	r6, r2
 801c720:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c724:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801c728:	ea4f 024c 	mov.w	r2, ip, lsl #1
 801c72c:	b2ff      	uxtb	r7, r7
 801c72e:	d037      	beq.n	801c7a0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801c730:	fa1f f986 	uxth.w	r9, r6
 801c734:	4462      	add	r2, ip
 801c736:	43f6      	mvns	r6, r6
 801c738:	f815 8002 	ldrb.w	r8, [r5, r2]
 801c73c:	fb17 f709 	smulbb	r7, r7, r9
 801c740:	fb1a fa09 	smulbb	sl, sl, r9
 801c744:	b2f6      	uxtb	r6, r6
 801c746:	fb1b f909 	smulbb	r9, fp, r9
 801c74a:	fb08 7706 	mla	r7, r8, r6, r7
 801c74e:	b2bf      	uxth	r7, r7
 801c750:	f107 0801 	add.w	r8, r7, #1
 801c754:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801c758:	123f      	asrs	r7, r7, #8
 801c75a:	54af      	strb	r7, [r5, r2]
 801c75c:	442a      	add	r2, r5
 801c75e:	7857      	ldrb	r7, [r2, #1]
 801c760:	fb07 aa06 	mla	sl, r7, r6, sl
 801c764:	fa1f fa8a 	uxth.w	sl, sl
 801c768:	f10a 0701 	add.w	r7, sl, #1
 801c76c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c770:	7897      	ldrb	r7, [r2, #2]
 801c772:	fb07 9906 	mla	r9, r7, r6, r9
 801c776:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c77a:	fa1f f989 	uxth.w	r9, r9
 801c77e:	f882 a001 	strb.w	sl, [r2, #1]
 801c782:	f109 0601 	add.w	r6, r9, #1
 801c786:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801c78a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c78e:	f882 9002 	strb.w	r9, [r2, #2]
 801c792:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c794:	f10c 0c01 	add.w	ip, ip, #1
 801c798:	4414      	add	r4, r2
 801c79a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c79c:	4410      	add	r0, r2
 801c79e:	e76b      	b.n	801c678 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 801c7a0:	4462      	add	r2, ip
 801c7a2:	54af      	strb	r7, [r5, r2]
 801c7a4:	442a      	add	r2, r5
 801c7a6:	f882 a001 	strb.w	sl, [r2, #1]
 801c7aa:	f882 b002 	strb.w	fp, [r2, #2]
 801c7ae:	e7f0      	b.n	801c792 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801c7b0:	f806 7c03 	strb.w	r7, [r6, #-3]
 801c7b4:	f806 9c02 	strb.w	r9, [r6, #-2]
 801c7b8:	f806 bc01 	strb.w	fp, [r6, #-1]
 801c7bc:	e752      	b.n	801c664 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801c7be:	b005      	add	sp, #20
 801c7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c7c4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7c8:	b087      	sub	sp, #28
 801c7ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c7ce:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c7d0:	9204      	str	r2, [sp, #16]
 801c7d2:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801c7d6:	6860      	ldr	r0, [r4, #4]
 801c7d8:	9205      	str	r2, [sp, #20]
 801c7da:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801c7de:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801c7e2:	9101      	str	r1, [sp, #4]
 801c7e4:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801c7e8:	fb00 2505 	mla	r5, r0, r5, r2
 801c7ec:	6822      	ldr	r2, [r4, #0]
 801c7ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c7f2:	4415      	add	r5, r2
 801c7f4:	f10e 0201 	add.w	r2, lr, #1
 801c7f8:	f022 0201 	bic.w	r2, r2, #1
 801c7fc:	9202      	str	r2, [sp, #8]
 801c7fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c800:	6812      	ldr	r2, [r2, #0]
 801c802:	9203      	str	r2, [sp, #12]
 801c804:	9a01      	ldr	r2, [sp, #4]
 801c806:	2a00      	cmp	r2, #0
 801c808:	dc03      	bgt.n	801c812 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 801c80a:	9a04      	ldr	r2, [sp, #16]
 801c80c:	2a00      	cmp	r2, #0
 801c80e:	f340 8132 	ble.w	801ca76 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801c812:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c814:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c818:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c81a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c81e:	2b00      	cmp	r3, #0
 801c820:	dd0e      	ble.n	801c840 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801c822:	1422      	asrs	r2, r4, #16
 801c824:	d405      	bmi.n	801c832 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c826:	4596      	cmp	lr, r2
 801c828:	dd03      	ble.n	801c832 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c82a:	1402      	asrs	r2, r0, #16
 801c82c:	d401      	bmi.n	801c832 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c82e:	4542      	cmp	r2, r8
 801c830:	db07      	blt.n	801c842 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801c832:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c834:	3b01      	subs	r3, #1
 801c836:	3503      	adds	r5, #3
 801c838:	4414      	add	r4, r2
 801c83a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c83c:	4410      	add	r0, r2
 801c83e:	e7ee      	b.n	801c81e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801c840:	d010      	beq.n	801c864 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801c842:	1e5a      	subs	r2, r3, #1
 801c844:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c846:	fb06 4602 	mla	r6, r6, r2, r4
 801c84a:	1436      	asrs	r6, r6, #16
 801c84c:	d546      	bpl.n	801c8dc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801c84e:	4699      	mov	r9, r3
 801c850:	462e      	mov	r6, r5
 801c852:	f1b9 0f00 	cmp.w	r9, #0
 801c856:	f300 80ac 	bgt.w	801c9b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 801c85a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c85e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c862:	441d      	add	r5, r3
 801c864:	9b01      	ldr	r3, [sp, #4]
 801c866:	2b00      	cmp	r3, #0
 801c868:	f340 8105 	ble.w	801ca76 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801c86c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c870:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c872:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c876:	eeb0 6a62 	vmov.f32	s12, s5
 801c87a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c87e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c882:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c886:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801c88a:	eeb0 6a43 	vmov.f32	s12, s6
 801c88e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c892:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801c896:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c89a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c89e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c8a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c8a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c8aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c8ae:	ee12 2a90 	vmov	r2, s5
 801c8b2:	eef0 2a47 	vmov.f32	s5, s14
 801c8b6:	fb92 f3f3 	sdiv	r3, r2, r3
 801c8ba:	ee13 2a10 	vmov	r2, s6
 801c8be:	9313      	str	r3, [sp, #76]	; 0x4c
 801c8c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c8c2:	eeb0 3a67 	vmov.f32	s6, s15
 801c8c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801c8ca:	9314      	str	r3, [sp, #80]	; 0x50
 801c8cc:	9b01      	ldr	r3, [sp, #4]
 801c8ce:	9a04      	ldr	r2, [sp, #16]
 801c8d0:	3b01      	subs	r3, #1
 801c8d2:	9301      	str	r3, [sp, #4]
 801c8d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c8d6:	bf08      	it	eq
 801c8d8:	4613      	moveq	r3, r2
 801c8da:	e793      	b.n	801c804 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 801c8dc:	45b6      	cmp	lr, r6
 801c8de:	ddb6      	ble.n	801c84e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c8e0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c8e2:	fb06 0202 	mla	r2, r6, r2, r0
 801c8e6:	1412      	asrs	r2, r2, #16
 801c8e8:	d4b1      	bmi.n	801c84e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c8ea:	4542      	cmp	r2, r8
 801c8ec:	daaf      	bge.n	801c84e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801c8ee:	1cee      	adds	r6, r5, #3
 801c8f0:	4699      	mov	r9, r3
 801c8f2:	f1b9 0f00 	cmp.w	r9, #0
 801c8f6:	ddb0      	ble.n	801c85a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801c8f8:	1422      	asrs	r2, r4, #16
 801c8fa:	9902      	ldr	r1, [sp, #8]
 801c8fc:	1407      	asrs	r7, r0, #16
 801c8fe:	fb01 2707 	mla	r7, r1, r7, r2
 801c902:	9903      	ldr	r1, [sp, #12]
 801c904:	087a      	lsrs	r2, r7, #1
 801c906:	5c8a      	ldrb	r2, [r1, r2]
 801c908:	07f9      	lsls	r1, r7, #31
 801c90a:	bf54      	ite	pl
 801c90c:	f002 020f 	andpl.w	r2, r2, #15
 801c910:	1112      	asrmi	r2, r2, #4
 801c912:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c916:	b2d2      	uxtb	r2, r2
 801c918:	2a00      	cmp	r2, #0
 801c91a:	d042      	beq.n	801c9a2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 801c91c:	4957      	ldr	r1, [pc, #348]	; (801ca7c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801c91e:	680f      	ldr	r7, [r1, #0]
 801c920:	9905      	ldr	r1, [sp, #20]
 801c922:	fa5f fb87 	uxtb.w	fp, r7
 801c926:	434a      	muls	r2, r1
 801c928:	f102 0c01 	add.w	ip, r2, #1
 801c92c:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801c930:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 801c934:	1212      	asrs	r2, r2, #8
 801c936:	fa1f fa82 	uxth.w	sl, r2
 801c93a:	43d2      	mvns	r2, r2
 801c93c:	fb1b fb0a 	smulbb	fp, fp, sl
 801c940:	b2d2      	uxtb	r2, r2
 801c942:	fb0c bc02 	mla	ip, ip, r2, fp
 801c946:	fa1f fc8c 	uxth.w	ip, ip
 801c94a:	f10c 0b01 	add.w	fp, ip, #1
 801c94e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c952:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c956:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c95a:	fb1b fb0a 	smulbb	fp, fp, sl
 801c95e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c962:	fb17 fa0a 	smulbb	sl, r7, sl
 801c966:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801c96a:	f806 cc03 	strb.w	ip, [r6, #-3]
 801c96e:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 801c972:	fb07 aa02 	mla	sl, r7, r2, sl
 801c976:	fb0c bc02 	mla	ip, ip, r2, fp
 801c97a:	fa1f fa8a 	uxth.w	sl, sl
 801c97e:	fa1f fc8c 	uxth.w	ip, ip
 801c982:	f10a 0701 	add.w	r7, sl, #1
 801c986:	f10c 0b01 	add.w	fp, ip, #1
 801c98a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c98e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801c992:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c996:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c99a:	f806 ac01 	strb.w	sl, [r6, #-1]
 801c99e:	f806 cc02 	strb.w	ip, [r6, #-2]
 801c9a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c9a4:	3603      	adds	r6, #3
 801c9a6:	f109 39ff 	add.w	r9, r9, #4294967295
 801c9aa:	4414      	add	r4, r2
 801c9ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c9ae:	4410      	add	r0, r2
 801c9b0:	e79f      	b.n	801c8f2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 801c9b2:	1422      	asrs	r2, r4, #16
 801c9b4:	d457      	bmi.n	801ca66 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c9b6:	4596      	cmp	lr, r2
 801c9b8:	dd55      	ble.n	801ca66 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c9ba:	1407      	asrs	r7, r0, #16
 801c9bc:	d453      	bmi.n	801ca66 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c9be:	4547      	cmp	r7, r8
 801c9c0:	da51      	bge.n	801ca66 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c9c2:	9902      	ldr	r1, [sp, #8]
 801c9c4:	fb07 2701 	mla	r7, r7, r1, r2
 801c9c8:	9903      	ldr	r1, [sp, #12]
 801c9ca:	087a      	lsrs	r2, r7, #1
 801c9cc:	07ff      	lsls	r7, r7, #31
 801c9ce:	5c8a      	ldrb	r2, [r1, r2]
 801c9d0:	bf54      	ite	pl
 801c9d2:	f002 020f 	andpl.w	r2, r2, #15
 801c9d6:	1112      	asrmi	r2, r2, #4
 801c9d8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c9dc:	b2d2      	uxtb	r2, r2
 801c9de:	2a00      	cmp	r2, #0
 801c9e0:	d041      	beq.n	801ca66 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801c9e2:	4926      	ldr	r1, [pc, #152]	; (801ca7c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801c9e4:	680f      	ldr	r7, [r1, #0]
 801c9e6:	9905      	ldr	r1, [sp, #20]
 801c9e8:	fa5f fb87 	uxtb.w	fp, r7
 801c9ec:	434a      	muls	r2, r1
 801c9ee:	f102 0c01 	add.w	ip, r2, #1
 801c9f2:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801c9f6:	f896 c000 	ldrb.w	ip, [r6]
 801c9fa:	1212      	asrs	r2, r2, #8
 801c9fc:	fa1f fa82 	uxth.w	sl, r2
 801ca00:	43d2      	mvns	r2, r2
 801ca02:	fb1b fb0a 	smulbb	fp, fp, sl
 801ca06:	b2d2      	uxtb	r2, r2
 801ca08:	fb0c bc02 	mla	ip, ip, r2, fp
 801ca0c:	fa1f fc8c 	uxth.w	ip, ip
 801ca10:	f10c 0b01 	add.w	fp, ip, #1
 801ca14:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ca18:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801ca1c:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801ca20:	fb1b fb0a 	smulbb	fp, fp, sl
 801ca24:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ca28:	fb17 fa0a 	smulbb	sl, r7, sl
 801ca2c:	78b7      	ldrb	r7, [r6, #2]
 801ca2e:	f886 c000 	strb.w	ip, [r6]
 801ca32:	f896 c001 	ldrb.w	ip, [r6, #1]
 801ca36:	fb07 aa02 	mla	sl, r7, r2, sl
 801ca3a:	fb0c bc02 	mla	ip, ip, r2, fp
 801ca3e:	fa1f fa8a 	uxth.w	sl, sl
 801ca42:	fa1f fc8c 	uxth.w	ip, ip
 801ca46:	f10a 0701 	add.w	r7, sl, #1
 801ca4a:	f10c 0b01 	add.w	fp, ip, #1
 801ca4e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ca52:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801ca56:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ca5a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ca5e:	f886 a002 	strb.w	sl, [r6, #2]
 801ca62:	f886 c001 	strb.w	ip, [r6, #1]
 801ca66:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ca68:	3603      	adds	r6, #3
 801ca6a:	f109 39ff 	add.w	r9, r9, #4294967295
 801ca6e:	4414      	add	r4, r2
 801ca70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ca72:	4410      	add	r0, r2
 801ca74:	e6ed      	b.n	801c852 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801ca76:	b007      	add	sp, #28
 801ca78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca7c:	2000b2fc 	.word	0x2000b2fc

0801ca80 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ca80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca84:	b087      	sub	sp, #28
 801ca86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ca8a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ca8c:	9205      	str	r2, [sp, #20]
 801ca8e:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801ca92:	6860      	ldr	r0, [r4, #4]
 801ca94:	9202      	str	r2, [sp, #8]
 801ca96:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801ca9a:	9101      	str	r1, [sp, #4]
 801ca9c:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 801caa0:	fb00 2606 	mla	r6, r0, r6, r2
 801caa4:	6822      	ldr	r2, [r4, #0]
 801caa6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801caaa:	4416      	add	r6, r2
 801caac:	f108 0201 	add.w	r2, r8, #1
 801cab0:	f022 0201 	bic.w	r2, r2, #1
 801cab4:	9203      	str	r2, [sp, #12]
 801cab6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801cab8:	6812      	ldr	r2, [r2, #0]
 801caba:	9204      	str	r2, [sp, #16]
 801cabc:	9a01      	ldr	r2, [sp, #4]
 801cabe:	2a00      	cmp	r2, #0
 801cac0:	dc03      	bgt.n	801caca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801cac2:	9a05      	ldr	r2, [sp, #20]
 801cac4:	2a00      	cmp	r2, #0
 801cac6:	f340 813a 	ble.w	801cd3e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801caca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cacc:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801cad0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cad2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	dd0f      	ble.n	801cafa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801cada:	142a      	asrs	r2, r5, #16
 801cadc:	d406      	bmi.n	801caec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801cade:	4590      	cmp	r8, r2
 801cae0:	dd04      	ble.n	801caec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801cae2:	1422      	asrs	r2, r4, #16
 801cae4:	d402      	bmi.n	801caec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801cae6:	9802      	ldr	r0, [sp, #8]
 801cae8:	4282      	cmp	r2, r0
 801caea:	db07      	blt.n	801cafc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801caec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801caee:	3b01      	subs	r3, #1
 801caf0:	3603      	adds	r6, #3
 801caf2:	4415      	add	r5, r2
 801caf4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801caf6:	4414      	add	r4, r2
 801caf8:	e7ed      	b.n	801cad6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801cafa:	d073      	beq.n	801cbe4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801cafc:	1e5a      	subs	r2, r3, #1
 801cafe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801cb00:	fb00 5002 	mla	r0, r0, r2, r5
 801cb04:	1400      	asrs	r0, r0, #16
 801cb06:	d464      	bmi.n	801cbd2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801cb08:	4580      	cmp	r8, r0
 801cb0a:	dd62      	ble.n	801cbd2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801cb0c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801cb0e:	fb00 4202 	mla	r2, r0, r2, r4
 801cb12:	1412      	asrs	r2, r2, #16
 801cb14:	d45d      	bmi.n	801cbd2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801cb16:	9802      	ldr	r0, [sp, #8]
 801cb18:	4282      	cmp	r2, r0
 801cb1a:	da5a      	bge.n	801cbd2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 801cb1c:	1cf0      	adds	r0, r6, #3
 801cb1e:	469a      	mov	sl, r3
 801cb20:	f1ba 0f00 	cmp.w	sl, #0
 801cb24:	dd59      	ble.n	801cbda <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801cb26:	142a      	asrs	r2, r5, #16
 801cb28:	9903      	ldr	r1, [sp, #12]
 801cb2a:	1427      	asrs	r7, r4, #16
 801cb2c:	fb01 2707 	mla	r7, r1, r7, r2
 801cb30:	9904      	ldr	r1, [sp, #16]
 801cb32:	087a      	lsrs	r2, r7, #1
 801cb34:	5c8a      	ldrb	r2, [r1, r2]
 801cb36:	07f9      	lsls	r1, r7, #31
 801cb38:	bf54      	ite	pl
 801cb3a:	f002 020f 	andpl.w	r2, r2, #15
 801cb3e:	1112      	asrmi	r2, r2, #4
 801cb40:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cb44:	b2d2      	uxtb	r2, r2
 801cb46:	2a00      	cmp	r2, #0
 801cb48:	d03b      	beq.n	801cbc2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801cb4a:	497e      	ldr	r1, [pc, #504]	; (801cd44 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801cb4c:	2aff      	cmp	r2, #255	; 0xff
 801cb4e:	680f      	ldr	r7, [r1, #0]
 801cb50:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801cb54:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801cb58:	b2ff      	uxtb	r7, r7
 801cb5a:	f000 80e9 	beq.w	801cd30 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801cb5e:	fa1f fe82 	uxth.w	lr, r2
 801cb62:	43d2      	mvns	r2, r2
 801cb64:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801cb68:	fb17 f70e 	smulbb	r7, r7, lr
 801cb6c:	b2d2      	uxtb	r2, r2
 801cb6e:	fb19 f90e 	smulbb	r9, r9, lr
 801cb72:	fb0c 7702 	mla	r7, ip, r2, r7
 801cb76:	fb1b fe0e 	smulbb	lr, fp, lr
 801cb7a:	b2bf      	uxth	r7, r7
 801cb7c:	f107 0c01 	add.w	ip, r7, #1
 801cb80:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801cb84:	123f      	asrs	r7, r7, #8
 801cb86:	f800 7c03 	strb.w	r7, [r0, #-3]
 801cb8a:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801cb8e:	fb07 9902 	mla	r9, r7, r2, r9
 801cb92:	fa1f f989 	uxth.w	r9, r9
 801cb96:	f109 0701 	add.w	r7, r9, #1
 801cb9a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801cb9e:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801cba2:	fb07 ee02 	mla	lr, r7, r2, lr
 801cba6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cbaa:	fa1f fe8e 	uxth.w	lr, lr
 801cbae:	f800 9c02 	strb.w	r9, [r0, #-2]
 801cbb2:	f10e 0201 	add.w	r2, lr, #1
 801cbb6:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801cbba:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801cbbe:	f800 ec01 	strb.w	lr, [r0, #-1]
 801cbc2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cbc4:	3003      	adds	r0, #3
 801cbc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cbca:	4415      	add	r5, r2
 801cbcc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cbce:	4414      	add	r4, r2
 801cbd0:	e7a6      	b.n	801cb20 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801cbd2:	2700      	movs	r7, #0
 801cbd4:	1bda      	subs	r2, r3, r7
 801cbd6:	2a00      	cmp	r2, #0
 801cbd8:	dc40      	bgt.n	801cc5c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 801cbda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cbde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cbe2:	441e      	add	r6, r3
 801cbe4:	9b01      	ldr	r3, [sp, #4]
 801cbe6:	2b00      	cmp	r3, #0
 801cbe8:	f340 80a9 	ble.w	801cd3e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801cbec:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cbf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cbf2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cbf6:	eeb0 6a62 	vmov.f32	s12, s5
 801cbfa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cbfe:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cc02:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cc06:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801cc0a:	eeb0 6a43 	vmov.f32	s12, s6
 801cc0e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cc12:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801cc16:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cc1a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cc1e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cc22:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cc26:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cc2a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cc2e:	ee12 2a90 	vmov	r2, s5
 801cc32:	eef0 2a47 	vmov.f32	s5, s14
 801cc36:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc3a:	ee13 2a10 	vmov	r2, s6
 801cc3e:	9313      	str	r3, [sp, #76]	; 0x4c
 801cc40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cc42:	eeb0 3a67 	vmov.f32	s6, s15
 801cc46:	fb92 f3f3 	sdiv	r3, r2, r3
 801cc4a:	9314      	str	r3, [sp, #80]	; 0x50
 801cc4c:	9b01      	ldr	r3, [sp, #4]
 801cc4e:	9a05      	ldr	r2, [sp, #20]
 801cc50:	3b01      	subs	r3, #1
 801cc52:	9301      	str	r3, [sp, #4]
 801cc54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cc56:	bf08      	it	eq
 801cc58:	4613      	moveq	r3, r2
 801cc5a:	e72f      	b.n	801cabc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 801cc5c:	142a      	asrs	r2, r5, #16
 801cc5e:	d458      	bmi.n	801cd12 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cc60:	4590      	cmp	r8, r2
 801cc62:	dd56      	ble.n	801cd12 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cc64:	1420      	asrs	r0, r4, #16
 801cc66:	d454      	bmi.n	801cd12 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cc68:	9902      	ldr	r1, [sp, #8]
 801cc6a:	4288      	cmp	r0, r1
 801cc6c:	da51      	bge.n	801cd12 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cc6e:	9903      	ldr	r1, [sp, #12]
 801cc70:	fb00 2001 	mla	r0, r0, r1, r2
 801cc74:	9904      	ldr	r1, [sp, #16]
 801cc76:	0842      	lsrs	r2, r0, #1
 801cc78:	07c0      	lsls	r0, r0, #31
 801cc7a:	5c8a      	ldrb	r2, [r1, r2]
 801cc7c:	bf54      	ite	pl
 801cc7e:	f002 020f 	andpl.w	r2, r2, #15
 801cc82:	1112      	asrmi	r2, r2, #4
 801cc84:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cc88:	b2d2      	uxtb	r2, r2
 801cc8a:	2a00      	cmp	r2, #0
 801cc8c:	d041      	beq.n	801cd12 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cc8e:	492d      	ldr	r1, [pc, #180]	; (801cd44 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 801cc90:	2aff      	cmp	r2, #255	; 0xff
 801cc92:	6808      	ldr	r0, [r1, #0]
 801cc94:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801cc98:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801cc9c:	fa5f fc80 	uxtb.w	ip, r0
 801cca0:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801cca4:	d03b      	beq.n	801cd1e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 801cca6:	fa1f f982 	uxth.w	r9, r2
 801ccaa:	4438      	add	r0, r7
 801ccac:	43d2      	mvns	r2, r2
 801ccae:	f816 e000 	ldrb.w	lr, [r6, r0]
 801ccb2:	fb1c fc09 	smulbb	ip, ip, r9
 801ccb6:	fb1a fa09 	smulbb	sl, sl, r9
 801ccba:	b2d2      	uxtb	r2, r2
 801ccbc:	fb1b f909 	smulbb	r9, fp, r9
 801ccc0:	fb0e cc02 	mla	ip, lr, r2, ip
 801ccc4:	fa1f fc8c 	uxth.w	ip, ip
 801ccc8:	f10c 0e01 	add.w	lr, ip, #1
 801cccc:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801ccd0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ccd4:	f806 c000 	strb.w	ip, [r6, r0]
 801ccd8:	4430      	add	r0, r6
 801ccda:	f890 c001 	ldrb.w	ip, [r0, #1]
 801ccde:	fb0c aa02 	mla	sl, ip, r2, sl
 801cce2:	fa1f fa8a 	uxth.w	sl, sl
 801cce6:	f10a 0c01 	add.w	ip, sl, #1
 801ccea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ccee:	f890 c002 	ldrb.w	ip, [r0, #2]
 801ccf2:	fb0c 9902 	mla	r9, ip, r2, r9
 801ccf6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ccfa:	fa1f f989 	uxth.w	r9, r9
 801ccfe:	f880 a001 	strb.w	sl, [r0, #1]
 801cd02:	f109 0201 	add.w	r2, r9, #1
 801cd06:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801cd0a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cd0e:	f880 9002 	strb.w	r9, [r0, #2]
 801cd12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cd14:	3701      	adds	r7, #1
 801cd16:	4415      	add	r5, r2
 801cd18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cd1a:	4414      	add	r4, r2
 801cd1c:	e75a      	b.n	801cbd4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801cd1e:	4438      	add	r0, r7
 801cd20:	f806 c000 	strb.w	ip, [r6, r0]
 801cd24:	4430      	add	r0, r6
 801cd26:	f880 a001 	strb.w	sl, [r0, #1]
 801cd2a:	f880 b002 	strb.w	fp, [r0, #2]
 801cd2e:	e7f0      	b.n	801cd12 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801cd30:	f800 7c03 	strb.w	r7, [r0, #-3]
 801cd34:	f800 9c02 	strb.w	r9, [r0, #-2]
 801cd38:	f800 bc01 	strb.w	fp, [r0, #-1]
 801cd3c:	e741      	b.n	801cbc2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801cd3e:	b007      	add	sp, #28
 801cd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd44:	2000b2fc 	.word	0x2000b2fc

0801cd48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801cd48:	4770      	bx	lr

0801cd4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801cd4a:	4770      	bx	lr

0801cd4c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801cd4c:	4770      	bx	lr

0801cd4e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801cd4e:	4770      	bx	lr

0801cd50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801cd50:	4770      	bx	lr

0801cd52 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801cd52:	4770      	bx	lr

0801cd54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801cd54:	4770      	bx	lr

0801cd56 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801cd56:	4770      	bx	lr

0801cd58 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801cd58:	4770      	bx	lr

0801cd5a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801cd5a:	4770      	bx	lr

0801cd5c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801cd5c:	4770      	bx	lr

0801cd5e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801cd5e:	4770      	bx	lr

0801cd60 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801cd60:	4770      	bx	lr

0801cd62 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801cd62:	4770      	bx	lr

0801cd64 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801cd64:	4770      	bx	lr

0801cd66 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801cd66:	4770      	bx	lr

0801cd68 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801cd68:	4770      	bx	lr

0801cd6a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801cd6a:	4770      	bx	lr

0801cd6c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801cd6c:	4770      	bx	lr

0801cd6e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801cd6e:	4770      	bx	lr

0801cd70 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801cd70:	2bff      	cmp	r3, #255	; 0xff
 801cd72:	b508      	push	{r3, lr}
 801cd74:	d04f      	beq.n	801ce16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801cd76:	2a2c      	cmp	r2, #44	; 0x2c
 801cd78:	d032      	beq.n	801cde0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801cd7a:	d80f      	bhi.n	801cd9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 801cd7c:	2a08      	cmp	r2, #8
 801cd7e:	d046      	beq.n	801ce0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801cd80:	d805      	bhi.n	801cd8e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 801cd82:	2a04      	cmp	r2, #4
 801cd84:	d041      	beq.n	801ce0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801cd86:	2a05      	cmp	r2, #5
 801cd88:	d03d      	beq.n	801ce06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801cd8a:	2000      	movs	r0, #0
 801cd8c:	e027      	b.n	801cdde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cd8e:	2a0a      	cmp	r2, #10
 801cd90:	d03d      	beq.n	801ce0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801cd92:	d301      	bcc.n	801cd98 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801cd94:	2a0b      	cmp	r2, #11
 801cd96:	d1f8      	bne.n	801cd8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cd98:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801cd9a:	e020      	b.n	801cdde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cd9c:	2a30      	cmp	r2, #48	; 0x30
 801cd9e:	d038      	beq.n	801ce12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801cda0:	d808      	bhi.n	801cdb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 801cda2:	2a2e      	cmp	r2, #46	; 0x2e
 801cda4:	684b      	ldr	r3, [r1, #4]
 801cda6:	d029      	beq.n	801cdfc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801cda8:	d90b      	bls.n	801cdc2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801cdaa:	781b      	ldrb	r3, [r3, #0]
 801cdac:	2b00      	cmp	r3, #0
 801cdae:	d1ec      	bne.n	801cd8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cdb0:	6a00      	ldr	r0, [r0, #32]
 801cdb2:	e014      	b.n	801cdde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cdb4:	2a32      	cmp	r2, #50	; 0x32
 801cdb6:	d02c      	beq.n	801ce12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801cdb8:	d301      	bcc.n	801cdbe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801cdba:	2a33      	cmp	r2, #51	; 0x33
 801cdbc:	d1e5      	bne.n	801cd8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cdbe:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801cdc0:	e00d      	b.n	801cdde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cdc2:	781b      	ldrb	r3, [r3, #0]
 801cdc4:	2b01      	cmp	r3, #1
 801cdc6:	d009      	beq.n	801cddc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801cdc8:	d3f2      	bcc.n	801cdb0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801cdca:	2b02      	cmp	r3, #2
 801cdcc:	d1dd      	bne.n	801cd8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cdce:	4b39      	ldr	r3, [pc, #228]	; (801ceb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801cdd0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 801cdd4:	4a38      	ldr	r2, [pc, #224]	; (801ceb8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801cdd6:	4839      	ldr	r0, [pc, #228]	; (801cebc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801cdd8:	f007 ff3e 	bl	8024c58 <__assert_func>
 801cddc:	6900      	ldr	r0, [r0, #16]
 801cdde:	bd08      	pop	{r3, pc}
 801cde0:	684b      	ldr	r3, [r1, #4]
 801cde2:	781b      	ldrb	r3, [r3, #0]
 801cde4:	2b01      	cmp	r3, #1
 801cde6:	d007      	beq.n	801cdf8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801cde8:	d30b      	bcc.n	801ce02 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801cdea:	2b02      	cmp	r3, #2
 801cdec:	d1cd      	bne.n	801cd8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cdee:	4b31      	ldr	r3, [pc, #196]	; (801ceb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801cdf0:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 801cdf4:	4a30      	ldr	r2, [pc, #192]	; (801ceb8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801cdf6:	e7ee      	b.n	801cdd6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801cdf8:	6880      	ldr	r0, [r0, #8]
 801cdfa:	e7f0      	b.n	801cdde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cdfc:	781b      	ldrb	r3, [r3, #0]
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d1c3      	bne.n	801cd8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce02:	6980      	ldr	r0, [r0, #24]
 801ce04:	e7eb      	b.n	801cdde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce06:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801ce08:	e7e9      	b.n	801cdde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce0a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801ce0c:	e7e7      	b.n	801cdde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce0e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801ce10:	e7e5      	b.n	801cdde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce12:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801ce14:	e7e3      	b.n	801cdde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce16:	2a2c      	cmp	r2, #44	; 0x2c
 801ce18:	d030      	beq.n	801ce7c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 801ce1a:	d80f      	bhi.n	801ce3c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 801ce1c:	2a08      	cmp	r2, #8
 801ce1e:	d044      	beq.n	801ceaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801ce20:	d805      	bhi.n	801ce2e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801ce22:	2a04      	cmp	r2, #4
 801ce24:	d03f      	beq.n	801cea6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801ce26:	2a05      	cmp	r2, #5
 801ce28:	d1af      	bne.n	801cd8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce2a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801ce2c:	e7d7      	b.n	801cdde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce2e:	2a0a      	cmp	r2, #10
 801ce30:	d03b      	beq.n	801ceaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801ce32:	d301      	bcc.n	801ce38 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801ce34:	2a0b      	cmp	r2, #11
 801ce36:	d1a8      	bne.n	801cd8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce38:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801ce3a:	e7d0      	b.n	801cdde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce3c:	2a30      	cmp	r2, #48	; 0x30
 801ce3e:	d036      	beq.n	801ceae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801ce40:	d808      	bhi.n	801ce54 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 801ce42:	2a2e      	cmp	r2, #46	; 0x2e
 801ce44:	684b      	ldr	r3, [r1, #4]
 801ce46:	d028      	beq.n	801ce9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801ce48:	d90b      	bls.n	801ce62 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 801ce4a:	781b      	ldrb	r3, [r3, #0]
 801ce4c:	2b00      	cmp	r3, #0
 801ce4e:	d19c      	bne.n	801cd8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce50:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801ce52:	e7c4      	b.n	801cdde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce54:	2a32      	cmp	r2, #50	; 0x32
 801ce56:	d02a      	beq.n	801ceae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801ce58:	d301      	bcc.n	801ce5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801ce5a:	2a33      	cmp	r2, #51	; 0x33
 801ce5c:	d195      	bne.n	801cd8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce5e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801ce60:	e7bd      	b.n	801cdde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce62:	781b      	ldrb	r3, [r3, #0]
 801ce64:	2b01      	cmp	r3, #1
 801ce66:	d007      	beq.n	801ce78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801ce68:	d3f2      	bcc.n	801ce50 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801ce6a:	2b02      	cmp	r3, #2
 801ce6c:	d18d      	bne.n	801cd8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce6e:	4b11      	ldr	r3, [pc, #68]	; (801ceb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801ce70:	f240 31e1 	movw	r1, #993	; 0x3e1
 801ce74:	4a10      	ldr	r2, [pc, #64]	; (801ceb8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801ce76:	e7ae      	b.n	801cdd6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ce78:	6940      	ldr	r0, [r0, #20]
 801ce7a:	e7b0      	b.n	801cdde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce7c:	684b      	ldr	r3, [r1, #4]
 801ce7e:	781b      	ldrb	r3, [r3, #0]
 801ce80:	2b01      	cmp	r3, #1
 801ce82:	d008      	beq.n	801ce96 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801ce84:	d30d      	bcc.n	801cea2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801ce86:	2b02      	cmp	r3, #2
 801ce88:	f47f af7f 	bne.w	801cd8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801ce8c:	4b09      	ldr	r3, [pc, #36]	; (801ceb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 801ce8e:	f240 31ed 	movw	r1, #1005	; 0x3ed
 801ce92:	4a09      	ldr	r2, [pc, #36]	; (801ceb8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801ce94:	e79f      	b.n	801cdd6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801ce96:	68c0      	ldr	r0, [r0, #12]
 801ce98:	e7a1      	b.n	801cdde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ce9a:	781b      	ldrb	r3, [r3, #0]
 801ce9c:	2b00      	cmp	r3, #0
 801ce9e:	f47f af74 	bne.w	801cd8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cea2:	69c0      	ldr	r0, [r0, #28]
 801cea4:	e79b      	b.n	801cdde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cea6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801cea8:	e799      	b.n	801cdde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ceaa:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801ceac:	e797      	b.n	801cdde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ceae:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801ceb0:	e795      	b.n	801cdde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801ceb2:	bf00      	nop
 801ceb4:	0802b468 	.word	0x0802b468
 801ceb8:	0802bc1b 	.word	0x0802bc1b
 801cebc:	0802b4b4 	.word	0x0802b4b4

0801cec0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801cec0:	b508      	push	{r3, lr}
 801cec2:	4b06      	ldr	r3, [pc, #24]	; (801cedc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 801cec4:	8818      	ldrh	r0, [r3, #0]
 801cec6:	b928      	cbnz	r0, 801ced4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801cec8:	4b05      	ldr	r3, [pc, #20]	; (801cee0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801ceca:	21d7      	movs	r1, #215	; 0xd7
 801cecc:	4a05      	ldr	r2, [pc, #20]	; (801cee4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 801cece:	4806      	ldr	r0, [pc, #24]	; (801cee8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 801ced0:	f007 fec2 	bl	8024c58 <__assert_func>
 801ced4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ced8:	b280      	uxth	r0, r0
 801ceda:	bd08      	pop	{r3, pc}
 801cedc:	2000b2ce 	.word	0x2000b2ce
 801cee0:	0802b703 	.word	0x0802b703
 801cee4:	0802bbe0 	.word	0x0802bbe0
 801cee8:	0802b745 	.word	0x0802b745

0801ceec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801ceec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cef0:	4616      	mov	r6, r2
 801cef2:	b087      	sub	sp, #28
 801cef4:	461f      	mov	r7, r3
 801cef6:	b33b      	cbz	r3, 801cf48 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801cef8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801cefc:	b323      	cbz	r3, 801cf48 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801cefe:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801cf02:	b30b      	cbz	r3, 801cf48 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801cf04:	6808      	ldr	r0, [r1, #0]
 801cf06:	ab04      	add	r3, sp, #16
 801cf08:	6849      	ldr	r1, [r1, #4]
 801cf0a:	4c5a      	ldr	r4, [pc, #360]	; (801d074 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801cf0c:	c303      	stmia	r3!, {r0, r1}
 801cf0e:	a804      	add	r0, sp, #16
 801cf10:	f7fb fe08 	bl	8018b24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cf14:	6820      	ldr	r0, [r4, #0]
 801cf16:	6803      	ldr	r3, [r0, #0]
 801cf18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cf1a:	4798      	blx	r3
 801cf1c:	2fff      	cmp	r7, #255	; 0xff
 801cf1e:	4623      	mov	r3, r4
 801cf20:	d015      	beq.n	801cf4e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801cf22:	f010 0f08 	tst.w	r0, #8
 801cf26:	d015      	beq.n	801cf54 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 801cf28:	6818      	ldr	r0, [r3, #0]
 801cf2a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801cf2e:	6801      	ldr	r1, [r0, #0]
 801cf30:	9401      	str	r4, [sp, #4]
 801cf32:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801cf36:	9702      	str	r7, [sp, #8]
 801cf38:	9400      	str	r4, [sp, #0]
 801cf3a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801cf3e:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801cf40:	4631      	mov	r1, r6
 801cf42:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801cf46:	47a0      	blx	r4
 801cf48:	b007      	add	sp, #28
 801cf4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf4e:	f010 0f02 	tst.w	r0, #2
 801cf52:	e7e8      	b.n	801cf26 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 801cf54:	6818      	ldr	r0, [r3, #0]
 801cf56:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801cf5a:	6803      	ldr	r3, [r0, #0]
 801cf5c:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801cf60:	6a1b      	ldr	r3, [r3, #32]
 801cf62:	4798      	blx	r3
 801cf64:	4944      	ldr	r1, [pc, #272]	; (801d078 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 801cf66:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801cf6a:	2fff      	cmp	r7, #255	; 0xff
 801cf6c:	f8b1 c000 	ldrh.w	ip, [r1]
 801cf70:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 801cf74:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801cf78:	4688      	mov	r8, r1
 801cf7a:	fb0c 2303 	mla	r3, ip, r3, r2
 801cf7e:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801cf82:	b2f2      	uxtb	r2, r6
 801cf84:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 801cf88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf8c:	4418      	add	r0, r3
 801cf8e:	d112      	bne.n	801cfb6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 801cf90:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cf94:	2100      	movs	r1, #0
 801cf96:	42a9      	cmp	r1, r5
 801cf98:	da66      	bge.n	801d068 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801cf9a:	4603      	mov	r3, r0
 801cf9c:	2700      	movs	r7, #0
 801cf9e:	42a7      	cmp	r7, r4
 801cfa0:	f103 0303 	add.w	r3, r3, #3
 801cfa4:	da57      	bge.n	801d056 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 801cfa6:	f803 2c03 	strb.w	r2, [r3, #-3]
 801cfaa:	3701      	adds	r7, #1
 801cfac:	f803 ec02 	strb.w	lr, [r3, #-2]
 801cfb0:	f803 cc01 	strb.w	ip, [r3, #-1]
 801cfb4:	e7f3      	b.n	801cf9e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801cfb6:	b2bb      	uxth	r3, r7
 801cfb8:	f04f 0800 	mov.w	r8, #0
 801cfbc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cfc0:	fb0c fc03 	mul.w	ip, ip, r3
 801cfc4:	fb0e fe03 	mul.w	lr, lr, r3
 801cfc8:	435a      	muls	r2, r3
 801cfca:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 801cfce:	460f      	mov	r7, r1
 801cfd0:	b29b      	uxth	r3, r3
 801cfd2:	45a8      	cmp	r8, r5
 801cfd4:	da48      	bge.n	801d068 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 801cfd6:	4601      	mov	r1, r0
 801cfd8:	f04f 0a00 	mov.w	sl, #0
 801cfdc:	45a2      	cmp	sl, r4
 801cfde:	f101 0103 	add.w	r1, r1, #3
 801cfe2:	da2f      	bge.n	801d044 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 801cfe4:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 801cfe8:	f10a 0a01 	add.w	sl, sl, #1
 801cfec:	fb19 f903 	smulbb	r9, r9, r3
 801cff0:	4491      	add	r9, r2
 801cff2:	fa1f f989 	uxth.w	r9, r9
 801cff6:	f109 0b01 	add.w	fp, r9, #1
 801cffa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cffe:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d002:	f801 9c03 	strb.w	r9, [r1, #-3]
 801d006:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 801d00a:	fb19 f903 	smulbb	r9, r9, r3
 801d00e:	44f1      	add	r9, lr
 801d010:	fa1f f989 	uxth.w	r9, r9
 801d014:	f109 0b01 	add.w	fp, r9, #1
 801d018:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d01c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d020:	f801 9c02 	strb.w	r9, [r1, #-2]
 801d024:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 801d028:	fb19 f903 	smulbb	r9, r9, r3
 801d02c:	44e1      	add	r9, ip
 801d02e:	fa1f f989 	uxth.w	r9, r9
 801d032:	f109 0b01 	add.w	fp, r9, #1
 801d036:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d03a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d03e:	f801 9c01 	strb.w	r9, [r1, #-1]
 801d042:	e7cb      	b.n	801cfdc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 801d044:	8839      	ldrh	r1, [r7, #0]
 801d046:	f108 0801 	add.w	r8, r8, #1
 801d04a:	1b09      	subs	r1, r1, r4
 801d04c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d050:	4431      	add	r1, r6
 801d052:	4408      	add	r0, r1
 801d054:	e7bd      	b.n	801cfd2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 801d056:	f8b8 3000 	ldrh.w	r3, [r8]
 801d05a:	3101      	adds	r1, #1
 801d05c:	1b1b      	subs	r3, r3, r4
 801d05e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d062:	4433      	add	r3, r6
 801d064:	4418      	add	r0, r3
 801d066:	e796      	b.n	801cf96 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801d068:	4b02      	ldr	r3, [pc, #8]	; (801d074 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 801d06a:	6818      	ldr	r0, [r3, #0]
 801d06c:	6803      	ldr	r3, [r0, #0]
 801d06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d070:	4798      	blx	r3
 801d072:	e769      	b.n	801cf48 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801d074:	2000b2d4 	.word	0x2000b2d4
 801d078:	2000b2ce 	.word	0x2000b2ce

0801d07c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801d07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d080:	b08d      	sub	sp, #52	; 0x34
 801d082:	460c      	mov	r4, r1
 801d084:	4617      	mov	r7, r2
 801d086:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 801d08a:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 801d08e:	2e00      	cmp	r6, #0
 801d090:	d04a      	beq.n	801d128 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801d092:	6810      	ldr	r0, [r2, #0]
 801d094:	ad08      	add	r5, sp, #32
 801d096:	6851      	ldr	r1, [r2, #4]
 801d098:	c503      	stmia	r5!, {r0, r1}
 801d09a:	6818      	ldr	r0, [r3, #0]
 801d09c:	ad0a      	add	r5, sp, #40	; 0x28
 801d09e:	6859      	ldr	r1, [r3, #4]
 801d0a0:	c503      	stmia	r5!, {r0, r1}
 801d0a2:	a808      	add	r0, sp, #32
 801d0a4:	f7fb fd3e 	bl	8018b24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d0a8:	4639      	mov	r1, r7
 801d0aa:	a80a      	add	r0, sp, #40	; 0x28
 801d0ac:	4f59      	ldr	r7, [pc, #356]	; (801d214 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 801d0ae:	f7fb fd21 	bl	8018af4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d0b2:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d0b6:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801d0ba:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801d0be:	6838      	ldr	r0, [r7, #0]
 801d0c0:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d0c4:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801d0c8:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 801d0cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d0d0:	440c      	add	r4, r1
 801d0d2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801d0d6:	440a      	add	r2, r1
 801d0d8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d0dc:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801d0e0:	4413      	add	r3, r2
 801d0e2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d0e6:	6803      	ldr	r3, [r0, #0]
 801d0e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d0ea:	4798      	blx	r3
 801d0ec:	2eff      	cmp	r6, #255	; 0xff
 801d0ee:	f000 8089 	beq.w	801d204 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 801d0f2:	0743      	lsls	r3, r0, #29
 801d0f4:	d405      	bmi.n	801d102 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 801d0f6:	f1b9 0f00 	cmp.w	r9, #0
 801d0fa:	d018      	beq.n	801d12e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801d0fc:	f010 0f10 	tst.w	r0, #16
 801d100:	d015      	beq.n	801d12e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801d102:	6838      	ldr	r0, [r7, #0]
 801d104:	b2ad      	uxth	r5, r5
 801d106:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d10a:	6801      	ldr	r1, [r0, #0]
 801d10c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d110:	9500      	str	r5, [sp, #0]
 801d112:	e9cd 6903 	strd	r6, r9, [sp, #12]
 801d116:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801d11a:	9602      	str	r6, [sp, #8]
 801d11c:	fa1f f688 	uxth.w	r6, r8
 801d120:	9601      	str	r6, [sp, #4]
 801d122:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 801d124:	4621      	mov	r1, r4
 801d126:	47a8      	blx	r5
 801d128:	b00d      	add	sp, #52	; 0x34
 801d12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d12e:	6838      	ldr	r0, [r7, #0]
 801d130:	6803      	ldr	r3, [r0, #0]
 801d132:	6a1b      	ldr	r3, [r3, #32]
 801d134:	4798      	blx	r3
 801d136:	4a38      	ldr	r2, [pc, #224]	; (801d218 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 801d138:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801d13c:	2eff      	cmp	r6, #255	; 0xff
 801d13e:	8813      	ldrh	r3, [r2, #0]
 801d140:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 801d144:	fb0c 1303 	mla	r3, ip, r3, r1
 801d148:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801d14c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d150:	4418      	add	r0, r3
 801d152:	d032      	beq.n	801d1ba <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801d154:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 801d158:	f04f 0c00 	mov.w	ip, #0
 801d15c:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 801d160:	9306      	str	r3, [sp, #24]
 801d162:	45c4      	cmp	ip, r8
 801d164:	da49      	bge.n	801d1fa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801d166:	4686      	mov	lr, r0
 801d168:	46a1      	mov	r9, r4
 801d16a:	eba9 0304 	sub.w	r3, r9, r4
 801d16e:	428b      	cmp	r3, r1
 801d170:	da13      	bge.n	801d19a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 801d172:	f819 3b01 	ldrb.w	r3, [r9], #1
 801d176:	f89e b000 	ldrb.w	fp, [lr]
 801d17a:	9307      	str	r3, [sp, #28]
 801d17c:	9b06      	ldr	r3, [sp, #24]
 801d17e:	fb1b fb03 	smulbb	fp, fp, r3
 801d182:	9b07      	ldr	r3, [sp, #28]
 801d184:	fb03 b306 	mla	r3, r3, r6, fp
 801d188:	b29b      	uxth	r3, r3
 801d18a:	f103 0b01 	add.w	fp, r3, #1
 801d18e:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 801d192:	121b      	asrs	r3, r3, #8
 801d194:	f80e 3b01 	strb.w	r3, [lr], #1
 801d198:	e7e7      	b.n	801d16a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 801d19a:	8813      	ldrh	r3, [r2, #0]
 801d19c:	f10c 0c01 	add.w	ip, ip, #1
 801d1a0:	1b5b      	subs	r3, r3, r5
 801d1a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d1a6:	4453      	add	r3, sl
 801d1a8:	4418      	add	r0, r3
 801d1aa:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801d1ae:	1b5b      	subs	r3, r3, r5
 801d1b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d1b4:	4453      	add	r3, sl
 801d1b6:	441c      	add	r4, r3
 801d1b8:	e7d3      	b.n	801d162 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 801d1ba:	2600      	movs	r6, #0
 801d1bc:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 801d1c0:	4546      	cmp	r6, r8
 801d1c2:	da1a      	bge.n	801d1fa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 801d1c4:	f100 3eff 	add.w	lr, r0, #4294967295
 801d1c8:	4623      	mov	r3, r4
 801d1ca:	eba3 0904 	sub.w	r9, r3, r4
 801d1ce:	4589      	cmp	r9, r1
 801d1d0:	da04      	bge.n	801d1dc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 801d1d2:	f813 9b01 	ldrb.w	r9, [r3], #1
 801d1d6:	f80e 9f01 	strb.w	r9, [lr, #1]!
 801d1da:	e7f6      	b.n	801d1ca <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 801d1dc:	8813      	ldrh	r3, [r2, #0]
 801d1de:	3601      	adds	r6, #1
 801d1e0:	1b5b      	subs	r3, r3, r5
 801d1e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d1e6:	4463      	add	r3, ip
 801d1e8:	4418      	add	r0, r3
 801d1ea:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801d1ee:	1b5b      	subs	r3, r3, r5
 801d1f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d1f4:	4463      	add	r3, ip
 801d1f6:	441c      	add	r4, r3
 801d1f8:	e7e2      	b.n	801d1c0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 801d1fa:	6838      	ldr	r0, [r7, #0]
 801d1fc:	6803      	ldr	r3, [r0, #0]
 801d1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d200:	4798      	blx	r3
 801d202:	e791      	b.n	801d128 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801d204:	f1b9 0f00 	cmp.w	r9, #0
 801d208:	f47f af78 	bne.w	801d0fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 801d20c:	f010 0f01 	tst.w	r0, #1
 801d210:	e776      	b.n	801d100 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 801d212:	bf00      	nop
 801d214:	2000b2d4 	.word	0x2000b2d4
 801d218:	2000b2ce 	.word	0x2000b2ce

0801d21c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d21c:	b510      	push	{r4, lr}
 801d21e:	4604      	mov	r4, r0
 801d220:	2104      	movs	r1, #4
 801d222:	f007 fcee 	bl	8024c02 <_ZdlPvj>
 801d226:	4620      	mov	r0, r4
 801d228:	bd10      	pop	{r4, pc}

0801d22a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d22a:	b510      	push	{r4, lr}
 801d22c:	4604      	mov	r4, r0
 801d22e:	2104      	movs	r1, #4
 801d230:	f007 fce7 	bl	8024c02 <_ZdlPvj>
 801d234:	4620      	mov	r0, r4
 801d236:	bd10      	pop	{r4, pc}

0801d238 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d238:	b510      	push	{r4, lr}
 801d23a:	4604      	mov	r4, r0
 801d23c:	2104      	movs	r1, #4
 801d23e:	f007 fce0 	bl	8024c02 <_ZdlPvj>
 801d242:	4620      	mov	r0, r4
 801d244:	bd10      	pop	{r4, pc}

0801d246 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d246:	b510      	push	{r4, lr}
 801d248:	4604      	mov	r4, r0
 801d24a:	2104      	movs	r1, #4
 801d24c:	f007 fcd9 	bl	8024c02 <_ZdlPvj>
 801d250:	4620      	mov	r0, r4
 801d252:	bd10      	pop	{r4, pc}

0801d254 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d254:	b510      	push	{r4, lr}
 801d256:	4604      	mov	r4, r0
 801d258:	2104      	movs	r1, #4
 801d25a:	f007 fcd2 	bl	8024c02 <_ZdlPvj>
 801d25e:	4620      	mov	r0, r4
 801d260:	bd10      	pop	{r4, pc}

0801d262 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d262:	b510      	push	{r4, lr}
 801d264:	4604      	mov	r4, r0
 801d266:	2104      	movs	r1, #4
 801d268:	f007 fccb 	bl	8024c02 <_ZdlPvj>
 801d26c:	4620      	mov	r0, r4
 801d26e:	bd10      	pop	{r4, pc}

0801d270 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d270:	b510      	push	{r4, lr}
 801d272:	4604      	mov	r4, r0
 801d274:	2104      	movs	r1, #4
 801d276:	f007 fcc4 	bl	8024c02 <_ZdlPvj>
 801d27a:	4620      	mov	r0, r4
 801d27c:	bd10      	pop	{r4, pc}

0801d27e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d27e:	b510      	push	{r4, lr}
 801d280:	4604      	mov	r4, r0
 801d282:	2104      	movs	r1, #4
 801d284:	f007 fcbd 	bl	8024c02 <_ZdlPvj>
 801d288:	4620      	mov	r0, r4
 801d28a:	bd10      	pop	{r4, pc}

0801d28c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801d28c:	b510      	push	{r4, lr}
 801d28e:	4604      	mov	r4, r0
 801d290:	2104      	movs	r1, #4
 801d292:	f007 fcb6 	bl	8024c02 <_ZdlPvj>
 801d296:	4620      	mov	r0, r4
 801d298:	bd10      	pop	{r4, pc}

0801d29a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801d29a:	b510      	push	{r4, lr}
 801d29c:	4604      	mov	r4, r0
 801d29e:	2104      	movs	r1, #4
 801d2a0:	f007 fcaf 	bl	8024c02 <_ZdlPvj>
 801d2a4:	4620      	mov	r0, r4
 801d2a6:	bd10      	pop	{r4, pc}

0801d2a8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801d2a8:	b510      	push	{r4, lr}
 801d2aa:	4604      	mov	r4, r0
 801d2ac:	2104      	movs	r1, #4
 801d2ae:	f007 fca8 	bl	8024c02 <_ZdlPvj>
 801d2b2:	4620      	mov	r0, r4
 801d2b4:	bd10      	pop	{r4, pc}

0801d2b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801d2b6:	b510      	push	{r4, lr}
 801d2b8:	4604      	mov	r4, r0
 801d2ba:	2104      	movs	r1, #4
 801d2bc:	f007 fca1 	bl	8024c02 <_ZdlPvj>
 801d2c0:	4620      	mov	r0, r4
 801d2c2:	bd10      	pop	{r4, pc}

0801d2c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801d2c4:	b510      	push	{r4, lr}
 801d2c6:	4604      	mov	r4, r0
 801d2c8:	2104      	movs	r1, #4
 801d2ca:	f007 fc9a 	bl	8024c02 <_ZdlPvj>
 801d2ce:	4620      	mov	r0, r4
 801d2d0:	bd10      	pop	{r4, pc}

0801d2d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801d2d2:	b510      	push	{r4, lr}
 801d2d4:	4604      	mov	r4, r0
 801d2d6:	2104      	movs	r1, #4
 801d2d8:	f007 fc93 	bl	8024c02 <_ZdlPvj>
 801d2dc:	4620      	mov	r0, r4
 801d2de:	bd10      	pop	{r4, pc}

0801d2e0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801d2e0:	b510      	push	{r4, lr}
 801d2e2:	4604      	mov	r4, r0
 801d2e4:	2104      	movs	r1, #4
 801d2e6:	f007 fc8c 	bl	8024c02 <_ZdlPvj>
 801d2ea:	4620      	mov	r0, r4
 801d2ec:	bd10      	pop	{r4, pc}

0801d2ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801d2ee:	b510      	push	{r4, lr}
 801d2f0:	4604      	mov	r4, r0
 801d2f2:	2104      	movs	r1, #4
 801d2f4:	f007 fc85 	bl	8024c02 <_ZdlPvj>
 801d2f8:	4620      	mov	r0, r4
 801d2fa:	bd10      	pop	{r4, pc}

0801d2fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801d2fc:	b510      	push	{r4, lr}
 801d2fe:	4604      	mov	r4, r0
 801d300:	2104      	movs	r1, #4
 801d302:	f007 fc7e 	bl	8024c02 <_ZdlPvj>
 801d306:	4620      	mov	r0, r4
 801d308:	bd10      	pop	{r4, pc}

0801d30a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801d30a:	b510      	push	{r4, lr}
 801d30c:	4604      	mov	r4, r0
 801d30e:	2104      	movs	r1, #4
 801d310:	f007 fc77 	bl	8024c02 <_ZdlPvj>
 801d314:	4620      	mov	r0, r4
 801d316:	bd10      	pop	{r4, pc}

0801d318 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801d318:	b510      	push	{r4, lr}
 801d31a:	4604      	mov	r4, r0
 801d31c:	2104      	movs	r1, #4
 801d31e:	f007 fc70 	bl	8024c02 <_ZdlPvj>
 801d322:	4620      	mov	r0, r4
 801d324:	bd10      	pop	{r4, pc}

0801d326 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801d326:	b510      	push	{r4, lr}
 801d328:	4604      	mov	r4, r0
 801d32a:	2104      	movs	r1, #4
 801d32c:	f007 fc69 	bl	8024c02 <_ZdlPvj>
 801d330:	4620      	mov	r0, r4
 801d332:	bd10      	pop	{r4, pc}

0801d334 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801d334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d338:	4d9e      	ldr	r5, [pc, #632]	; (801d5b4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 801d33a:	4690      	mov	r8, r2
 801d33c:	b08f      	sub	sp, #60	; 0x3c
 801d33e:	4604      	mov	r4, r0
 801d340:	682a      	ldr	r2, [r5, #0]
 801d342:	4689      	mov	r9, r1
 801d344:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801d348:	2a02      	cmp	r2, #2
 801d34a:	d106      	bne.n	801d35a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801d34c:	4b9a      	ldr	r3, [pc, #616]	; (801d5b8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 801d34e:	f44f 71cc 	mov.w	r1, #408	; 0x198
 801d352:	4a9a      	ldr	r2, [pc, #616]	; (801d5bc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801d354:	489a      	ldr	r0, [pc, #616]	; (801d5c0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801d356:	f007 fc7f 	bl	8024c58 <__assert_func>
 801d35a:	ae0e      	add	r6, sp, #56	; 0x38
 801d35c:	f826 3d24 	strh.w	r3, [r6, #-36]!
 801d360:	4630      	mov	r0, r6
 801d362:	f7fe f8b3 	bl	801b4cc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801d366:	6823      	ldr	r3, [r4, #0]
 801d368:	4607      	mov	r7, r0
 801d36a:	4620      	mov	r0, r4
 801d36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d36e:	4798      	blx	r3
 801d370:	4287      	cmp	r7, r0
 801d372:	d004      	beq.n	801d37e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801d374:	4b93      	ldr	r3, [pc, #588]	; (801d5c4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801d376:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801d37a:	4a90      	ldr	r2, [pc, #576]	; (801d5bc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801d37c:	e7ea      	b.n	801d354 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d37e:	4630      	mov	r0, r6
 801d380:	f7fe f820 	bl	801b3c4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d384:	4607      	mov	r7, r0
 801d386:	b920      	cbnz	r0, 801d392 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801d388:	4b8f      	ldr	r3, [pc, #572]	; (801d5c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801d38a:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801d38e:	4a8b      	ldr	r2, [pc, #556]	; (801d5bc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801d390:	e7e0      	b.n	801d354 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d392:	f8d8 0000 	ldr.w	r0, [r8]
 801d396:	ab06      	add	r3, sp, #24
 801d398:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d39c:	f9b8 a000 	ldrsh.w	sl, [r8]
 801d3a0:	c303      	stmia	r3!, {r0, r1}
 801d3a2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d3a6:	ab08      	add	r3, sp, #32
 801d3a8:	f8d9 0000 	ldr.w	r0, [r9]
 801d3ac:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801d3b0:	c303      	stmia	r3!, {r0, r1}
 801d3b2:	4630      	mov	r0, r6
 801d3b4:	f7fd fefe 	bl	801b1b4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d3b8:	4680      	mov	r8, r0
 801d3ba:	4630      	mov	r0, r6
 801d3bc:	4e83      	ldr	r6, [pc, #524]	; (801d5cc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801d3be:	f7fd ff33 	bl	801b228 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801d3c2:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801d3c6:	f10d 0920 	add.w	r9, sp, #32
 801d3ca:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801d3ce:	a806      	add	r0, sp, #24
 801d3d0:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801d3d4:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801d3d8:	f7fb fba4 	bl	8018b24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d3dc:	4648      	mov	r0, r9
 801d3de:	f7fb fba1 	bl	8018b24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d3e2:	a80a      	add	r0, sp, #40	; 0x28
 801d3e4:	f7fb fb9e 	bl	8018b24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d3e8:	4b79      	ldr	r3, [pc, #484]	; (801d5d0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801d3ea:	2100      	movs	r1, #0
 801d3ec:	f9b6 2000 	ldrsh.w	r2, [r6]
 801d3f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d3f4:	4648      	mov	r0, r9
 801d3f6:	910c      	str	r1, [sp, #48]	; 0x30
 801d3f8:	a90c      	add	r1, sp, #48	; 0x30
 801d3fa:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801d3fe:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801d402:	f7f7 fc97 	bl	8014d34 <_ZN8touchgfx4RectaNERKS0_>
 801d406:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801d40a:	9602      	str	r6, [sp, #8]
 801d40c:	f1bc 0f00 	cmp.w	ip, #0
 801d410:	f000 80a4 	beq.w	801d55c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d414:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801d418:	2e00      	cmp	r6, #0
 801d41a:	f000 809f 	beq.w	801d55c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d41e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801d422:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801d426:	4288      	cmp	r0, r1
 801d428:	db36      	blt.n	801d498 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801d42a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801d42e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801d432:	429a      	cmp	r2, r3
 801d434:	db30      	blt.n	801d498 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801d436:	4460      	add	r0, ip
 801d438:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801d43c:	4461      	add	r1, ip
 801d43e:	b200      	sxth	r0, r0
 801d440:	b209      	sxth	r1, r1
 801d442:	4288      	cmp	r0, r1
 801d444:	dc28      	bgt.n	801d498 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801d446:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801d44a:	4432      	add	r2, r6
 801d44c:	440b      	add	r3, r1
 801d44e:	b212      	sxth	r2, r2
 801d450:	b21b      	sxth	r3, r3
 801d452:	429a      	cmp	r2, r3
 801d454:	dc20      	bgt.n	801d498 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801d456:	6823      	ldr	r3, [r4, #0]
 801d458:	4620      	mov	r0, r4
 801d45a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d45c:	4798      	blx	r3
 801d45e:	4682      	mov	sl, r0
 801d460:	6828      	ldr	r0, [r5, #0]
 801d462:	6803      	ldr	r3, [r0, #0]
 801d464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d466:	4798      	blx	r3
 801d468:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801d46c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d470:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801d474:	9303      	str	r3, [sp, #12]
 801d476:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801d47a:	1a9b      	subs	r3, r3, r2
 801d47c:	b29b      	uxth	r3, r3
 801d47e:	b21c      	sxth	r4, r3
 801d480:	2c00      	cmp	r4, #0
 801d482:	dc0e      	bgt.n	801d4a2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801d484:	b134      	cbz	r4, 801d494 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801d486:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d48a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801d48e:	4413      	add	r3, r2
 801d490:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801d494:	463c      	mov	r4, r7
 801d496:	e00b      	b.n	801d4b0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801d498:	4b4e      	ldr	r3, [pc, #312]	; (801d5d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801d49a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801d49e:	4a47      	ldr	r2, [pc, #284]	; (801d5bc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801d4a0:	e758      	b.n	801d354 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801d4a2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d4a6:	ebab 0303 	sub.w	r3, fp, r3
 801d4aa:	443c      	add	r4, r7
 801d4ac:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801d4b0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801d4b4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801d4b8:	1a9b      	subs	r3, r3, r2
 801d4ba:	b29b      	uxth	r3, r3
 801d4bc:	b219      	sxth	r1, r3
 801d4be:	2900      	cmp	r1, #0
 801d4c0:	dd50      	ble.n	801d564 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801d4c2:	9a03      	ldr	r2, [sp, #12]
 801d4c4:	fb02 4401 	mla	r4, r2, r1, r4
 801d4c8:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801d4cc:	1ad3      	subs	r3, r2, r3
 801d4ce:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801d4d2:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801d4d6:	f1bc 0f00 	cmp.w	ip, #0
 801d4da:	dd3f      	ble.n	801d55c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d4dc:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801d4e0:	2e00      	cmp	r6, #0
 801d4e2:	dd3b      	ble.n	801d55c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d4e4:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801d4e8:	2203      	movs	r2, #3
 801d4ea:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801d4ee:	fb0a f801 	mul.w	r8, sl, r1
 801d4f2:	fb13 8802 	smlabb	r8, r3, r2, r8
 801d4f6:	9a02      	ldr	r2, [sp, #8]
 801d4f8:	4480      	add	r8, r0
 801d4fa:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801d4fe:	8812      	ldrh	r2, [r2, #0]
 801d500:	4584      	cmp	ip, r0
 801d502:	eba2 0303 	sub.w	r3, r2, r3
 801d506:	bfa8      	it	ge
 801d508:	4684      	movge	ip, r0
 801d50a:	459c      	cmp	ip, r3
 801d50c:	bfa8      	it	ge
 801d50e:	469c      	movge	ip, r3
 801d510:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801d514:	429e      	cmp	r6, r3
 801d516:	bfa8      	it	ge
 801d518:	461e      	movge	r6, r3
 801d51a:	4b2d      	ldr	r3, [pc, #180]	; (801d5d0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801d51c:	881b      	ldrh	r3, [r3, #0]
 801d51e:	1a59      	subs	r1, r3, r1
 801d520:	4633      	mov	r3, r6
 801d522:	428e      	cmp	r6, r1
 801d524:	bfa8      	it	ge
 801d526:	460b      	movge	r3, r1
 801d528:	4562      	cmp	r2, ip
 801d52a:	9302      	str	r3, [sp, #8]
 801d52c:	d12d      	bne.n	801d58a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801d52e:	455a      	cmp	r2, fp
 801d530:	d12b      	bne.n	801d58a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801d532:	6828      	ldr	r0, [r5, #0]
 801d534:	6803      	ldr	r3, [r0, #0]
 801d536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d538:	4798      	blx	r3
 801d53a:	07c3      	lsls	r3, r0, #31
 801d53c:	d51b      	bpl.n	801d576 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801d53e:	6828      	ldr	r0, [r5, #0]
 801d540:	9b02      	ldr	r3, [sp, #8]
 801d542:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801d546:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801d54a:	6803      	ldr	r3, [r0, #0]
 801d54c:	f8cd b000 	str.w	fp, [sp]
 801d550:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801d552:	4623      	mov	r3, r4
 801d554:	e899 0006 	ldmia.w	r9, {r1, r2}
 801d558:	47a8      	blx	r5
 801d55a:	4607      	mov	r7, r0
 801d55c:	4638      	mov	r0, r7
 801d55e:	b00f      	add	sp, #60	; 0x3c
 801d560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d564:	bf1f      	itttt	ne
 801d566:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801d56a:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801d56e:	189b      	addne	r3, r3, r2
 801d570:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801d574:	e7ad      	b.n	801d4d2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801d576:	6828      	ldr	r0, [r5, #0]
 801d578:	4642      	mov	r2, r8
 801d57a:	4621      	mov	r1, r4
 801d57c:	6803      	ldr	r3, [r0, #0]
 801d57e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801d580:	9b02      	ldr	r3, [sp, #8]
 801d582:	fb03 f30a 	mul.w	r3, r3, sl
 801d586:	47a8      	blx	r5
 801d588:	e7e8      	b.n	801d55c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d58a:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801d58e:	f04f 0900 	mov.w	r9, #0
 801d592:	9b02      	ldr	r3, [sp, #8]
 801d594:	454b      	cmp	r3, r9
 801d596:	dde1      	ble.n	801d55c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801d598:	6828      	ldr	r0, [r5, #0]
 801d59a:	4642      	mov	r2, r8
 801d59c:	4621      	mov	r1, r4
 801d59e:	44d0      	add	r8, sl
 801d5a0:	6803      	ldr	r3, [r0, #0]
 801d5a2:	f109 0901 	add.w	r9, r9, #1
 801d5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d5a8:	461e      	mov	r6, r3
 801d5aa:	465b      	mov	r3, fp
 801d5ac:	47b0      	blx	r6
 801d5ae:	9b03      	ldr	r3, [sp, #12]
 801d5b0:	441c      	add	r4, r3
 801d5b2:	e7ee      	b.n	801d592 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801d5b4:	2000b2d4 	.word	0x2000b2d4
 801d5b8:	0802b4e6 	.word	0x0802b4e6
 801d5bc:	0802bcc5 	.word	0x0802bcc5
 801d5c0:	0802b4b4 	.word	0x0802b4b4
 801d5c4:	0802b59a 	.word	0x0802b59a
 801d5c8:	0802b5ef 	.word	0x0802b5ef
 801d5cc:	2000b2ce 	.word	0x2000b2ce
 801d5d0:	2000b2d0 	.word	0x2000b2d0
 801d5d4:	0802b62d 	.word	0x0802b62d

0801d5d8 <_ZN8touchgfx8LCD24bppC1Ev>:
 801d5d8:	4a0b      	ldr	r2, [pc, #44]	; (801d608 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801d5da:	6002      	str	r2, [r0, #0]
 801d5dc:	2200      	movs	r2, #0
 801d5de:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801d5e2:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801d5e6:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801d5ea:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801d5ee:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801d5f2:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801d5f6:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801d5fa:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801d5fe:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801d602:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801d606:	4770      	bx	lr
 801d608:	0802b910 	.word	0x0802b910

0801d60c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801d60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d610:	b093      	sub	sp, #76	; 0x4c
 801d612:	880c      	ldrh	r4, [r1, #0]
 801d614:	4605      	mov	r5, r0
 801d616:	460f      	mov	r7, r1
 801d618:	4691      	mov	r9, r2
 801d61a:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801d61e:	b12c      	cbz	r4, 801d62c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801d620:	4b71      	ldr	r3, [pc, #452]	; (801d7e8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801d622:	2167      	movs	r1, #103	; 0x67
 801d624:	4a71      	ldr	r2, [pc, #452]	; (801d7ec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801d626:	4872      	ldr	r0, [pc, #456]	; (801d7f0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801d628:	f007 fb16 	bl	8024c58 <__assert_func>
 801d62c:	6810      	ldr	r0, [r2, #0]
 801d62e:	ae0e      	add	r6, sp, #56	; 0x38
 801d630:	6851      	ldr	r1, [r2, #4]
 801d632:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801d7f8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801d636:	c603      	stmia	r6!, {r0, r1}
 801d638:	6818      	ldr	r0, [r3, #0]
 801d63a:	ae10      	add	r6, sp, #64	; 0x40
 801d63c:	6859      	ldr	r1, [r3, #4]
 801d63e:	c603      	stmia	r6!, {r0, r1}
 801d640:	a80e      	add	r0, sp, #56	; 0x38
 801d642:	f7fb fa6f 	bl	8018b24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d646:	4649      	mov	r1, r9
 801d648:	a810      	add	r0, sp, #64	; 0x40
 801d64a:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801d7f4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801d64e:	f7fb fa51 	bl	8018af4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d652:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801d656:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801d65a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801d65e:	f8d9 0000 	ldr.w	r0, [r9]
 801d662:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d666:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801d66a:	440d      	add	r5, r1
 801d66c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801d670:	440a      	add	r2, r1
 801d672:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801d676:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d67a:	4413      	add	r3, r2
 801d67c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801d680:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801d684:	930b      	str	r3, [sp, #44]	; 0x2c
 801d686:	6803      	ldr	r3, [r0, #0]
 801d688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d68c:	4798      	blx	r3
 801d68e:	2801      	cmp	r0, #1
 801d690:	d11e      	bne.n	801d6d0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801d692:	220b      	movs	r2, #11
 801d694:	9008      	str	r0, [sp, #32]
 801d696:	b2b6      	uxth	r6, r6
 801d698:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d69c:	9207      	str	r2, [sp, #28]
 801d69e:	4629      	mov	r1, r5
 801d6a0:	f8ba 2000 	ldrh.w	r2, [sl]
 801d6a4:	f8cd 8010 	str.w	r8, [sp, #16]
 801d6a8:	9601      	str	r6, [sp, #4]
 801d6aa:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801d6ae:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801d6b2:	9203      	str	r2, [sp, #12]
 801d6b4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801d6b8:	9202      	str	r2, [sp, #8]
 801d6ba:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801d6be:	9200      	str	r2, [sp, #0]
 801d6c0:	463a      	mov	r2, r7
 801d6c2:	f8d9 0000 	ldr.w	r0, [r9]
 801d6c6:	f7f8 fa5d 	bl	8015b84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801d6ca:	b013      	add	sp, #76	; 0x4c
 801d6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6d0:	f8d9 0000 	ldr.w	r0, [r9]
 801d6d4:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801d6d8:	6803      	ldr	r3, [r0, #0]
 801d6da:	6a1b      	ldr	r3, [r3, #32]
 801d6dc:	4798      	blx	r3
 801d6de:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801d6e2:	f8ba 3000 	ldrh.w	r3, [sl]
 801d6e6:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801d6ea:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801d6ee:	fb01 2303 	mla	r3, r1, r3, r2
 801d6f2:	4621      	mov	r1, r4
 801d6f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d6f8:	4418      	add	r0, r3
 801d6fa:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801d6fe:	930c      	str	r3, [sp, #48]	; 0x30
 801d700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d702:	4299      	cmp	r1, r3
 801d704:	da6a      	bge.n	801d7dc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801d706:	1cc2      	adds	r2, r0, #3
 801d708:	46aa      	mov	sl, r5
 801d70a:	ebaa 0305 	sub.w	r3, sl, r5
 801d70e:	429e      	cmp	r6, r3
 801d710:	dd55      	ble.n	801d7be <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801d712:	2404      	movs	r4, #4
 801d714:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801d718:	fb14 4303 	smlabb	r3, r4, r3, r4
 801d71c:	eb07 0e03 	add.w	lr, r7, r3
 801d720:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801d724:	b184      	cbz	r4, 801d748 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801d726:	2cff      	cmp	r4, #255	; 0xff
 801d728:	f817 b003 	ldrb.w	fp, [r7, r3]
 801d72c:	d10e      	bne.n	801d74c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801d72e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801d732:	d10b      	bne.n	801d74c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801d734:	f802 bc03 	strb.w	fp, [r2, #-3]
 801d738:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801d73c:	f802 3c02 	strb.w	r3, [r2, #-2]
 801d740:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801d744:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d748:	3203      	adds	r2, #3
 801d74a:	e7de      	b.n	801d70a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801d74c:	fb08 f404 	mul.w	r4, r8, r4
 801d750:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801d754:	1c63      	adds	r3, r4, #1
 801d756:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801d75a:	121b      	asrs	r3, r3, #8
 801d75c:	b29c      	uxth	r4, r3
 801d75e:	43db      	mvns	r3, r3
 801d760:	fb1b fb04 	smulbb	fp, fp, r4
 801d764:	b2db      	uxtb	r3, r3
 801d766:	fb0c bc03 	mla	ip, ip, r3, fp
 801d76a:	fa1f fc8c 	uxth.w	ip, ip
 801d76e:	f10c 0b01 	add.w	fp, ip, #1
 801d772:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d776:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801d77a:	fb1b fb03 	smulbb	fp, fp, r3
 801d77e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d782:	f802 cc03 	strb.w	ip, [r2, #-3]
 801d786:	f89e c001 	ldrb.w	ip, [lr, #1]
 801d78a:	fb0c bc04 	mla	ip, ip, r4, fp
 801d78e:	fa1f fc8c 	uxth.w	ip, ip
 801d792:	f10c 0b01 	add.w	fp, ip, #1
 801d796:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801d79a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d79e:	f802 cc02 	strb.w	ip, [r2, #-2]
 801d7a2:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801d7a6:	f89e e002 	ldrb.w	lr, [lr, #2]
 801d7aa:	fb1c f303 	smulbb	r3, ip, r3
 801d7ae:	fb0e 3304 	mla	r3, lr, r4, r3
 801d7b2:	b29b      	uxth	r3, r3
 801d7b4:	1c5c      	adds	r4, r3, #1
 801d7b6:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801d7ba:	121b      	asrs	r3, r3, #8
 801d7bc:	e7c2      	b.n	801d744 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801d7be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d7c0:	3101      	adds	r1, #1
 801d7c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d7c4:	881b      	ldrh	r3, [r3, #0]
 801d7c6:	1b9b      	subs	r3, r3, r6
 801d7c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d7cc:	4413      	add	r3, r2
 801d7ce:	4418      	add	r0, r3
 801d7d0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801d7d4:	1b9b      	subs	r3, r3, r6
 801d7d6:	444b      	add	r3, r9
 801d7d8:	441d      	add	r5, r3
 801d7da:	e791      	b.n	801d700 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801d7dc:	4b05      	ldr	r3, [pc, #20]	; (801d7f4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801d7de:	6818      	ldr	r0, [r3, #0]
 801d7e0:	6803      	ldr	r3, [r0, #0]
 801d7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d7e4:	4798      	blx	r3
 801d7e6:	e770      	b.n	801d6ca <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801d7e8:	0802b418 	.word	0x0802b418
 801d7ec:	0802bae7 	.word	0x0802bae7
 801d7f0:	0802b4b4 	.word	0x0802b4b4
 801d7f4:	2000b2d4 	.word	0x2000b2d4
 801d7f8:	2000b2ce 	.word	0x2000b2ce

0801d7fc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801d7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d800:	4614      	mov	r4, r2
 801d802:	880a      	ldrh	r2, [r1, #0]
 801d804:	b091      	sub	sp, #68	; 0x44
 801d806:	4680      	mov	r8, r0
 801d808:	2a01      	cmp	r2, #1
 801d80a:	460e      	mov	r6, r1
 801d80c:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801d810:	d005      	beq.n	801d81e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801d812:	4b6d      	ldr	r3, [pc, #436]	; (801d9c8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801d814:	21b5      	movs	r1, #181	; 0xb5
 801d816:	4a6d      	ldr	r2, [pc, #436]	; (801d9cc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801d818:	486d      	ldr	r0, [pc, #436]	; (801d9d0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801d81a:	f007 fa1d 	bl	8024c58 <__assert_func>
 801d81e:	6820      	ldr	r0, [r4, #0]
 801d820:	ad0c      	add	r5, sp, #48	; 0x30
 801d822:	6861      	ldr	r1, [r4, #4]
 801d824:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801d9d4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801d828:	c503      	stmia	r5!, {r0, r1}
 801d82a:	6818      	ldr	r0, [r3, #0]
 801d82c:	ad0e      	add	r5, sp, #56	; 0x38
 801d82e:	6859      	ldr	r1, [r3, #4]
 801d830:	c503      	stmia	r5!, {r0, r1}
 801d832:	a80c      	add	r0, sp, #48	; 0x30
 801d834:	f7fb f976 	bl	8018b24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d838:	4621      	mov	r1, r4
 801d83a:	a80e      	add	r0, sp, #56	; 0x38
 801d83c:	f7fb f95a 	bl	8018af4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d840:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d844:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801d848:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801d84c:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801d850:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d854:	eb08 0401 	add.w	r4, r8, r1
 801d858:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801d85c:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801d9d8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801d860:	440a      	add	r2, r1
 801d862:	f8d8 0000 	ldr.w	r0, [r8]
 801d866:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801d86a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801d86e:	4413      	add	r3, r2
 801d870:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801d874:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801d878:	930a      	str	r3, [sp, #40]	; 0x28
 801d87a:	6803      	ldr	r3, [r0, #0]
 801d87c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d880:	4798      	blx	r3
 801d882:	2801      	cmp	r0, #1
 801d884:	d11e      	bne.n	801d8c4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801d886:	220b      	movs	r2, #11
 801d888:	9008      	str	r0, [sp, #32]
 801d88a:	b2ad      	uxth	r5, r5
 801d88c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801d890:	9207      	str	r2, [sp, #28]
 801d892:	4621      	mov	r1, r4
 801d894:	f8b9 2000 	ldrh.w	r2, [r9]
 801d898:	9501      	str	r5, [sp, #4]
 801d89a:	9206      	str	r2, [sp, #24]
 801d89c:	2200      	movs	r2, #0
 801d89e:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801d8a2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801d8a6:	9203      	str	r2, [sp, #12]
 801d8a8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d8ac:	9202      	str	r2, [sp, #8]
 801d8ae:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801d8b2:	9200      	str	r2, [sp, #0]
 801d8b4:	4632      	mov	r2, r6
 801d8b6:	f8d8 0000 	ldr.w	r0, [r8]
 801d8ba:	f7f8 f963 	bl	8015b84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801d8be:	b011      	add	sp, #68	; 0x44
 801d8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8c4:	f8d8 0000 	ldr.w	r0, [r8]
 801d8c8:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801d8cc:	6803      	ldr	r3, [r0, #0]
 801d8ce:	6a1b      	ldr	r3, [r3, #32]
 801d8d0:	4798      	blx	r3
 801d8d2:	f8b9 3000 	ldrh.w	r3, [r9]
 801d8d6:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801d8da:	f04f 0e00 	mov.w	lr, #0
 801d8de:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801d8e2:	fa1f f987 	uxth.w	r9, r7
 801d8e6:	fb01 2303 	mla	r3, r1, r3, r2
 801d8ea:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801d8ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d8f2:	b289      	uxth	r1, r1
 801d8f4:	4418      	add	r0, r3
 801d8f6:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801d8fa:	930b      	str	r3, [sp, #44]	; 0x2c
 801d8fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d8fe:	459e      	cmp	lr, r3
 801d900:	da5c      	bge.n	801d9bc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801d902:	1cc3      	adds	r3, r0, #3
 801d904:	46a2      	mov	sl, r4
 801d906:	ebaa 0204 	sub.w	r2, sl, r4
 801d90a:	4295      	cmp	r5, r2
 801d90c:	dd46      	ble.n	801d99c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801d90e:	f04f 0c03 	mov.w	ip, #3
 801d912:	f04f 0b04 	mov.w	fp, #4
 801d916:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801d91a:	2fff      	cmp	r7, #255	; 0xff
 801d91c:	fb1c b202 	smlabb	r2, ip, r2, fp
 801d920:	eb06 0c02 	add.w	ip, r6, r2
 801d924:	f816 b002 	ldrb.w	fp, [r6, r2]
 801d928:	d02f      	beq.n	801d98a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801d92a:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801d92e:	fb12 f201 	smulbb	r2, r2, r1
 801d932:	fb0b 2209 	mla	r2, fp, r9, r2
 801d936:	b292      	uxth	r2, r2
 801d938:	f102 0b01 	add.w	fp, r2, #1
 801d93c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801d940:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801d944:	fb1b fb01 	smulbb	fp, fp, r1
 801d948:	1212      	asrs	r2, r2, #8
 801d94a:	f803 2c03 	strb.w	r2, [r3, #-3]
 801d94e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801d952:	fb02 b209 	mla	r2, r2, r9, fp
 801d956:	b292      	uxth	r2, r2
 801d958:	f102 0b01 	add.w	fp, r2, #1
 801d95c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801d960:	1212      	asrs	r2, r2, #8
 801d962:	f803 2c02 	strb.w	r2, [r3, #-2]
 801d966:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801d96a:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801d96e:	fb1c fc01 	smulbb	ip, ip, r1
 801d972:	fb02 c209 	mla	r2, r2, r9, ip
 801d976:	b292      	uxth	r2, r2
 801d978:	f102 0c01 	add.w	ip, r2, #1
 801d97c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801d980:	1212      	asrs	r2, r2, #8
 801d982:	f803 2c01 	strb.w	r2, [r3, #-1]
 801d986:	3303      	adds	r3, #3
 801d988:	e7bd      	b.n	801d906 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801d98a:	f803 bc03 	strb.w	fp, [r3, #-3]
 801d98e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801d992:	f803 2c02 	strb.w	r2, [r3, #-2]
 801d996:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801d99a:	e7f2      	b.n	801d982 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801d99c:	4b0d      	ldr	r3, [pc, #52]	; (801d9d4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801d99e:	f10e 0e01 	add.w	lr, lr, #1
 801d9a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d9a4:	881b      	ldrh	r3, [r3, #0]
 801d9a6:	1b5b      	subs	r3, r3, r5
 801d9a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d9ac:	4413      	add	r3, r2
 801d9ae:	4418      	add	r0, r3
 801d9b0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801d9b4:	1b5b      	subs	r3, r3, r5
 801d9b6:	4443      	add	r3, r8
 801d9b8:	441c      	add	r4, r3
 801d9ba:	e79f      	b.n	801d8fc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801d9bc:	4b06      	ldr	r3, [pc, #24]	; (801d9d8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801d9be:	6818      	ldr	r0, [r3, #0]
 801d9c0:	6803      	ldr	r3, [r0, #0]
 801d9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d9c4:	4798      	blx	r3
 801d9c6:	e77a      	b.n	801d8be <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801d9c8:	0802b324 	.word	0x0802b324
 801d9cc:	0802b9da 	.word	0x0802b9da
 801d9d0:	0802b4b4 	.word	0x0802b4b4
 801d9d4:	2000b2ce 	.word	0x2000b2ce
 801d9d8:	2000b2d4 	.word	0x2000b2d4

0801d9dc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801d9dc:	b570      	push	{r4, r5, r6, lr}
 801d9de:	780d      	ldrb	r5, [r1, #0]
 801d9e0:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801d9e4:	2d01      	cmp	r5, #1
 801d9e6:	d00d      	beq.n	801da04 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801d9e8:	d307      	bcc.n	801d9fa <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801d9ea:	2d02      	cmp	r5, #2
 801d9ec:	d10f      	bne.n	801da0e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801d9ee:	4b08      	ldr	r3, [pc, #32]	; (801da10 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801d9f0:	215a      	movs	r1, #90	; 0x5a
 801d9f2:	4a08      	ldr	r2, [pc, #32]	; (801da14 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801d9f4:	4808      	ldr	r0, [pc, #32]	; (801da18 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801d9f6:	f007 f92f 	bl	8024c58 <__assert_func>
 801d9fa:	9404      	str	r4, [sp, #16]
 801d9fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801da00:	f7ff be04 	b.w	801d60c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801da04:	9404      	str	r4, [sp, #16]
 801da06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801da0a:	f7ff bef7 	b.w	801d7fc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801da0e:	bd70      	pop	{r4, r5, r6, pc}
 801da10:	0802b2d9 	.word	0x0802b2d9
 801da14:	0802b958 	.word	0x0802b958
 801da18:	0802b4b4 	.word	0x0802b4b4

0801da1c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801da1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da20:	b08b      	sub	sp, #44	; 0x2c
 801da22:	460c      	mov	r4, r1
 801da24:	4680      	mov	r8, r0
 801da26:	469a      	mov	sl, r3
 801da28:	6808      	ldr	r0, [r1, #0]
 801da2a:	ab06      	add	r3, sp, #24
 801da2c:	6849      	ldr	r1, [r1, #4]
 801da2e:	c303      	stmia	r3!, {r0, r1}
 801da30:	6810      	ldr	r0, [r2, #0]
 801da32:	ab08      	add	r3, sp, #32
 801da34:	6851      	ldr	r1, [r2, #4]
 801da36:	c303      	stmia	r3!, {r0, r1}
 801da38:	a806      	add	r0, sp, #24
 801da3a:	f7fb f873 	bl	8018b24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801da3e:	4621      	mov	r1, r4
 801da40:	a808      	add	r0, sp, #32
 801da42:	4c61      	ldr	r4, [pc, #388]	; (801dbc8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801da44:	f7fb f856 	bl	8018af4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801da48:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801da4c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801da50:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801da54:	6820      	ldr	r0, [r4, #0]
 801da56:	fb11 2103 	smlabb	r1, r1, r3, r2
 801da5a:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801da5e:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801da62:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801da66:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801da6a:	440a      	add	r2, r1
 801da6c:	f8ad 2020 	strh.w	r2, [sp, #32]
 801da70:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801da74:	4413      	add	r3, r2
 801da76:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801da7a:	6803      	ldr	r3, [r0, #0]
 801da7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801da7e:	4798      	blx	r3
 801da80:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801da84:	d118      	bne.n	801dab8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801da86:	f010 0f20 	tst.w	r0, #32
 801da8a:	6820      	ldr	r0, [r4, #0]
 801da8c:	d017      	beq.n	801dabe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801da8e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801da92:	b2bf      	uxth	r7, r7
 801da94:	6801      	ldr	r1, [r0, #0]
 801da96:	9402      	str	r4, [sp, #8]
 801da98:	fa1f f489 	uxth.w	r4, r9
 801da9c:	f8cd a00c 	str.w	sl, [sp, #12]
 801daa0:	9401      	str	r4, [sp, #4]
 801daa2:	9700      	str	r7, [sp, #0]
 801daa4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801daa8:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801daaa:	4641      	mov	r1, r8
 801daac:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801dab0:	47a0      	blx	r4
 801dab2:	b00b      	add	sp, #44	; 0x2c
 801dab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dab8:	f010 0f40 	tst.w	r0, #64	; 0x40
 801dabc:	e7e5      	b.n	801da8a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801dabe:	6803      	ldr	r3, [r0, #0]
 801dac0:	6a1b      	ldr	r3, [r3, #32]
 801dac2:	4798      	blx	r3
 801dac4:	4b41      	ldr	r3, [pc, #260]	; (801dbcc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801dac6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801daca:	f04f 0c00 	mov.w	ip, #0
 801dace:	881a      	ldrh	r2, [r3, #0]
 801dad0:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801dad4:	fb04 1202 	mla	r2, r4, r2, r1
 801dad8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dadc:	4410      	add	r0, r2
 801dade:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801dae2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801dae6:	0092      	lsls	r2, r2, #2
 801dae8:	9105      	str	r1, [sp, #20]
 801daea:	9204      	str	r2, [sp, #16]
 801daec:	45cc      	cmp	ip, r9
 801daee:	da65      	bge.n	801dbbc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801daf0:	1cc4      	adds	r4, r0, #3
 801daf2:	f108 0504 	add.w	r5, r8, #4
 801daf6:	f04f 0e00 	mov.w	lr, #0
 801dafa:	45be      	cmp	lr, r7
 801dafc:	da4d      	bge.n	801db9a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801dafe:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801db02:	b181      	cbz	r1, 801db26 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801db04:	29ff      	cmp	r1, #255	; 0xff
 801db06:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801db0a:	d111      	bne.n	801db30 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801db0c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801db10:	d10e      	bne.n	801db30 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801db12:	f804 bc03 	strb.w	fp, [r4, #-3]
 801db16:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801db1a:	f804 2c02 	strb.w	r2, [r4, #-2]
 801db1e:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801db22:	f804 2c01 	strb.w	r2, [r4, #-1]
 801db26:	f10e 0e01 	add.w	lr, lr, #1
 801db2a:	3403      	adds	r4, #3
 801db2c:	3504      	adds	r5, #4
 801db2e:	e7e4      	b.n	801dafa <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801db30:	fb0a f101 	mul.w	r1, sl, r1
 801db34:	1c4a      	adds	r2, r1, #1
 801db36:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801db3a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801db3e:	1212      	asrs	r2, r2, #8
 801db40:	b296      	uxth	r6, r2
 801db42:	43d2      	mvns	r2, r2
 801db44:	fb1b fb06 	smulbb	fp, fp, r6
 801db48:	b2d2      	uxtb	r2, r2
 801db4a:	fb01 b102 	mla	r1, r1, r2, fp
 801db4e:	b289      	uxth	r1, r1
 801db50:	f101 0b01 	add.w	fp, r1, #1
 801db54:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801db58:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801db5c:	fb1b fb02 	smulbb	fp, fp, r2
 801db60:	1209      	asrs	r1, r1, #8
 801db62:	f804 1c03 	strb.w	r1, [r4, #-3]
 801db66:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801db6a:	fb01 b106 	mla	r1, r1, r6, fp
 801db6e:	b289      	uxth	r1, r1
 801db70:	f101 0b01 	add.w	fp, r1, #1
 801db74:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801db78:	1209      	asrs	r1, r1, #8
 801db7a:	f804 1c02 	strb.w	r1, [r4, #-2]
 801db7e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801db82:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801db86:	fb11 f202 	smulbb	r2, r1, r2
 801db8a:	fb0b 2206 	mla	r2, fp, r6, r2
 801db8e:	b292      	uxth	r2, r2
 801db90:	1c56      	adds	r6, r2, #1
 801db92:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801db96:	1212      	asrs	r2, r2, #8
 801db98:	e7c3      	b.n	801db22 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801db9a:	881a      	ldrh	r2, [r3, #0]
 801db9c:	f10c 0c01 	add.w	ip, ip, #1
 801dba0:	9905      	ldr	r1, [sp, #20]
 801dba2:	1bd2      	subs	r2, r2, r7
 801dba4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dba8:	440a      	add	r2, r1
 801dbaa:	9904      	ldr	r1, [sp, #16]
 801dbac:	4410      	add	r0, r2
 801dbae:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801dbb2:	1bd2      	subs	r2, r2, r7
 801dbb4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801dbb8:	4490      	add	r8, r2
 801dbba:	e797      	b.n	801daec <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801dbbc:	4b02      	ldr	r3, [pc, #8]	; (801dbc8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801dbbe:	6818      	ldr	r0, [r3, #0]
 801dbc0:	6803      	ldr	r3, [r0, #0]
 801dbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dbc4:	4798      	blx	r3
 801dbc6:	e774      	b.n	801dab2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801dbc8:	2000b2d4 	.word	0x2000b2d4
 801dbcc:	2000b2ce 	.word	0x2000b2ce

0801dbd0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801dbd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dbd4:	b085      	sub	sp, #20
 801dbd6:	4606      	mov	r6, r0
 801dbd8:	460c      	mov	r4, r1
 801dbda:	4691      	mov	r9, r2
 801dbdc:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801dbe0:	4698      	mov	r8, r3
 801dbe2:	b385      	cbz	r5, 801dc46 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801dbe4:	4608      	mov	r0, r1
 801dbe6:	f7fd fae5 	bl	801b1b4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dbea:	4607      	mov	r7, r0
 801dbec:	4620      	mov	r0, r4
 801dbee:	f7fd fb1b 	bl	801b228 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dbf2:	f8ad 000e 	strh.w	r0, [sp, #14]
 801dbf6:	4620      	mov	r0, r4
 801dbf8:	f8ad 9008 	strh.w	r9, [sp, #8]
 801dbfc:	f8ad 800a 	strh.w	r8, [sp, #10]
 801dc00:	f8ad 700c 	strh.w	r7, [sp, #12]
 801dc04:	f7fd fc62 	bl	801b4cc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dc08:	2801      	cmp	r0, #1
 801dc0a:	d00f      	beq.n	801dc2c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801dc0c:	4620      	mov	r0, r4
 801dc0e:	f7fd fc5d 	bl	801b4cc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dc12:	2802      	cmp	r0, #2
 801dc14:	d00a      	beq.n	801dc2c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801dc16:	4620      	mov	r0, r4
 801dc18:	f7fd fc58 	bl	801b4cc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dc1c:	280b      	cmp	r0, #11
 801dc1e:	d005      	beq.n	801dc2c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801dc20:	4b1b      	ldr	r3, [pc, #108]	; (801dc90 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801dc22:	2142      	movs	r1, #66	; 0x42
 801dc24:	4a1b      	ldr	r2, [pc, #108]	; (801dc94 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801dc26:	481c      	ldr	r0, [pc, #112]	; (801dc98 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 801dc28:	f007 f816 	bl	8024c58 <__assert_func>
 801dc2c:	4620      	mov	r0, r4
 801dc2e:	f7fd fc4d 	bl	801b4cc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dc32:	2802      	cmp	r0, #2
 801dc34:	4620      	mov	r0, r4
 801dc36:	d109      	bne.n	801dc4c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 801dc38:	f7fd fbc4 	bl	801b3c4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dc3c:	462b      	mov	r3, r5
 801dc3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dc40:	a902      	add	r1, sp, #8
 801dc42:	f7ff feeb 	bl	801da1c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dc46:	b005      	add	sp, #20
 801dc48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dc4c:	f7fd fc3e 	bl	801b4cc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801dc50:	280b      	cmp	r0, #11
 801dc52:	d10e      	bne.n	801dc72 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801dc54:	4620      	mov	r0, r4
 801dc56:	f7fd fbb5 	bl	801b3c4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dc5a:	4606      	mov	r6, r0
 801dc5c:	4620      	mov	r0, r4
 801dc5e:	f7fd fbe3 	bl	801b428 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801dc62:	9500      	str	r5, [sp, #0]
 801dc64:	4601      	mov	r1, r0
 801dc66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dc68:	aa02      	add	r2, sp, #8
 801dc6a:	4630      	mov	r0, r6
 801dc6c:	f7ff feb6 	bl	801d9dc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801dc70:	e7e9      	b.n	801dc46 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801dc72:	6833      	ldr	r3, [r6, #0]
 801dc74:	4620      	mov	r0, r4
 801dc76:	691f      	ldr	r7, [r3, #16]
 801dc78:	f7fd fba4 	bl	801b3c4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dc7c:	2300      	movs	r3, #0
 801dc7e:	4601      	mov	r1, r0
 801dc80:	aa02      	add	r2, sp, #8
 801dc82:	4630      	mov	r0, r6
 801dc84:	e9cd 5300 	strd	r5, r3, [sp]
 801dc88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dc8a:	47b8      	blx	r7
 801dc8c:	e7db      	b.n	801dc46 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801dc8e:	bf00      	nop
 801dc90:	0802b372 	.word	0x0802b372
 801dc94:	0802ba63 	.word	0x0802ba63
 801dc98:	0802b4b4 	.word	0x0802b4b4

0801dc9c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801dc9c:	b570      	push	{r4, r5, r6, lr}
 801dc9e:	9d04      	ldr	r5, [sp, #16]
 801dca0:	460c      	mov	r4, r1
 801dca2:	4619      	mov	r1, r3
 801dca4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801dca8:	2a0c      	cmp	r2, #12
 801dcaa:	d826      	bhi.n	801dcfa <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801dcac:	e8df f002 	tbb	[pc, r2]
 801dcb0:	200e1407 	.word	0x200e1407
 801dcb4:	20202020 	.word	0x20202020
 801dcb8:	20202020 	.word	0x20202020
 801dcbc:	20          	.byte	0x20
 801dcbd:	00          	.byte	0x00
 801dcbe:	4b0f      	ldr	r3, [pc, #60]	; (801dcfc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801dcc0:	f240 117f 	movw	r1, #383	; 0x17f
 801dcc4:	4a0e      	ldr	r2, [pc, #56]	; (801dd00 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801dcc6:	480f      	ldr	r0, [pc, #60]	; (801dd04 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801dcc8:	f006 ffc6 	bl	8024c58 <__assert_func>
 801dccc:	462a      	mov	r2, r5
 801dcce:	4620      	mov	r0, r4
 801dcd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dcd4:	f7ff bea2 	b.w	801da1c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dcd8:	6802      	ldr	r2, [r0, #0]
 801dcda:	2600      	movs	r6, #0
 801dcdc:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801dce0:	6916      	ldr	r6, [r2, #16]
 801dce2:	462b      	mov	r3, r5
 801dce4:	460a      	mov	r2, r1
 801dce6:	4621      	mov	r1, r4
 801dce8:	46b4      	mov	ip, r6
 801dcea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dcee:	4760      	bx	ip
 801dcf0:	4b05      	ldr	r3, [pc, #20]	; (801dd08 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801dcf2:	f240 1191 	movw	r1, #401	; 0x191
 801dcf6:	4a02      	ldr	r2, [pc, #8]	; (801dd00 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801dcf8:	e7e5      	b.n	801dcc6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801dcfa:	bd70      	pop	{r4, r5, r6, pc}
 801dcfc:	0802b68d 	.word	0x0802b68d
 801dd00:	0802bd4b 	.word	0x0802bd4b
 801dd04:	0802b4b4 	.word	0x0802b4b4
 801dd08:	0802b6ce 	.word	0x0802b6ce

0801dd0c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801dd0c:	b158      	cbz	r0, 801dd26 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801dd0e:	2902      	cmp	r1, #2
 801dd10:	d00f      	beq.n	801dd32 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801dd12:	2903      	cmp	r1, #3
 801dd14:	d010      	beq.n	801dd38 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801dd16:	2901      	cmp	r1, #1
 801dd18:	d101      	bne.n	801dd1e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801dd1a:	2001      	movs	r0, #1
 801dd1c:	4770      	bx	lr
 801dd1e:	4b08      	ldr	r3, [pc, #32]	; (801dd40 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801dd20:	8819      	ldrh	r1, [r3, #0]
 801dd22:	4248      	negs	r0, r1
 801dd24:	4770      	bx	lr
 801dd26:	2902      	cmp	r1, #2
 801dd28:	d006      	beq.n	801dd38 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801dd2a:	2903      	cmp	r1, #3
 801dd2c:	d0f7      	beq.n	801dd1e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801dd2e:	2901      	cmp	r1, #1
 801dd30:	d1f3      	bne.n	801dd1a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801dd32:	4b03      	ldr	r3, [pc, #12]	; (801dd40 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801dd34:	8818      	ldrh	r0, [r3, #0]
 801dd36:	4770      	bx	lr
 801dd38:	f04f 30ff 	mov.w	r0, #4294967295
 801dd3c:	4770      	bx	lr
 801dd3e:	bf00      	nop
 801dd40:	2000b2ce 	.word	0x2000b2ce

0801dd44 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801dd44:	b170      	cbz	r0, 801dd64 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801dd46:	2902      	cmp	r1, #2
 801dd48:	d012      	beq.n	801dd70 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801dd4a:	2903      	cmp	r1, #3
 801dd4c:	d006      	beq.n	801dd5c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801dd4e:	2901      	cmp	r1, #1
 801dd50:	d001      	beq.n	801dd56 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801dd52:	2001      	movs	r0, #1
 801dd54:	4770      	bx	lr
 801dd56:	4b08      	ldr	r3, [pc, #32]	; (801dd78 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801dd58:	8818      	ldrh	r0, [r3, #0]
 801dd5a:	4770      	bx	lr
 801dd5c:	4b06      	ldr	r3, [pc, #24]	; (801dd78 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801dd5e:	8818      	ldrh	r0, [r3, #0]
 801dd60:	4240      	negs	r0, r0
 801dd62:	4770      	bx	lr
 801dd64:	2902      	cmp	r1, #2
 801dd66:	d0f9      	beq.n	801dd5c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801dd68:	2903      	cmp	r1, #3
 801dd6a:	d0f2      	beq.n	801dd52 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801dd6c:	2901      	cmp	r1, #1
 801dd6e:	d1f2      	bne.n	801dd56 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801dd70:	f04f 30ff 	mov.w	r0, #4294967295
 801dd74:	4770      	bx	lr
 801dd76:	bf00      	nop
 801dd78:	2000b2ce 	.word	0x2000b2ce

0801dd7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801dd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd80:	b095      	sub	sp, #84	; 0x54
 801dd82:	9109      	str	r1, [sp, #36]	; 0x24
 801dd84:	a910      	add	r1, sp, #64	; 0x40
 801dd86:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 801dd8a:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 801dd8e:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801dd92:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801dd96:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801dd9a:	e881 000c 	stmia.w	r1, {r2, r3}
 801dd9e:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801dda2:	9306      	str	r3, [sp, #24]
 801dda4:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801dda8:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801ddac:	930e      	str	r3, [sp, #56]	; 0x38
 801ddae:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801ddb2:	798f      	ldrb	r7, [r1, #6]
 801ddb4:	930a      	str	r3, [sp, #40]	; 0x28
 801ddb6:	7b4b      	ldrb	r3, [r1, #13]
 801ddb8:	0158      	lsls	r0, r3, #5
 801ddba:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801ddbe:	4338      	orrs	r0, r7
 801ddc0:	9008      	str	r0, [sp, #32]
 801ddc2:	f000 8174 	beq.w	801e0ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801ddc6:	011b      	lsls	r3, r3, #4
 801ddc8:	79c8      	ldrb	r0, [r1, #7]
 801ddca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ddce:	4303      	orrs	r3, r0
 801ddd0:	9307      	str	r3, [sp, #28]
 801ddd2:	f000 816c 	beq.w	801e0ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801ddd6:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801ddda:	b29b      	uxth	r3, r3
 801dddc:	2e00      	cmp	r6, #0
 801ddde:	f000 8112 	beq.w	801e006 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 801dde2:	1af6      	subs	r6, r6, r3
 801dde4:	b2b6      	uxth	r6, r6
 801dde6:	0433      	lsls	r3, r6, #16
 801dde8:	d502      	bpl.n	801ddf0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801ddea:	1bad      	subs	r5, r5, r6
 801ddec:	2600      	movs	r6, #0
 801ddee:	b22d      	sxth	r5, r5
 801ddf0:	f9b2 1000 	ldrsh.w	r1, [r2]
 801ddf4:	a810      	add	r0, sp, #64	; 0x40
 801ddf6:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801ddfa:	428d      	cmp	r5, r1
 801ddfc:	b28b      	uxth	r3, r1
 801ddfe:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801de02:	bfbf      	itttt	lt
 801de04:	18f6      	addlt	r6, r6, r3
 801de06:	1b75      	sublt	r5, r6, r5
 801de08:	b2ae      	uxthlt	r6, r5
 801de0a:	460d      	movlt	r5, r1
 801de0c:	8891      	ldrh	r1, [r2, #4]
 801de0e:	440b      	add	r3, r1
 801de10:	4629      	mov	r1, r5
 801de12:	b21b      	sxth	r3, r3
 801de14:	930d      	str	r3, [sp, #52]	; 0x34
 801de16:	88d3      	ldrh	r3, [r2, #6]
 801de18:	9a06      	ldr	r2, [sp, #24]
 801de1a:	449a      	add	sl, r3
 801de1c:	fa0f f38a 	sxth.w	r3, sl
 801de20:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801de24:	930c      	str	r3, [sp, #48]	; 0x30
 801de26:	4bb8      	ldr	r3, [pc, #736]	; (801e108 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801de28:	f893 b000 	ldrb.w	fp, [r3]
 801de2c:	f10b 3cff 	add.w	ip, fp, #4294967295
 801de30:	f1dc 0300 	rsbs	r3, ip, #0
 801de34:	eb43 030c 	adc.w	r3, r3, ip
 801de38:	930b      	str	r3, [sp, #44]	; 0x2c
 801de3a:	464b      	mov	r3, r9
 801de3c:	f7fa fd4c 	bl	80188d8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801de40:	4629      	mov	r1, r5
 801de42:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801de46:	464b      	mov	r3, r9
 801de48:	9a06      	ldr	r2, [sp, #24]
 801de4a:	a810      	add	r0, sp, #64	; 0x40
 801de4c:	f7fa fd5c 	bl	8018908 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801de50:	a914      	add	r1, sp, #80	; 0x50
 801de52:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801de56:	a813      	add	r0, sp, #76	; 0x4c
 801de58:	f7fa fe36 	bl	8018ac8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801de5c:	f1b9 0f00 	cmp.w	r9, #0
 801de60:	f040 80d4 	bne.w	801e00c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 801de64:	f1bb 0f01 	cmp.w	fp, #1
 801de68:	f040 80d8 	bne.w	801e01c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 801de6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de6e:	2b00      	cmp	r3, #0
 801de70:	f040 8122 	bne.w	801e0b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 801de74:	4ba5      	ldr	r3, [pc, #660]	; (801e10c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801de76:	6818      	ldr	r0, [r3, #0]
 801de78:	6803      	ldr	r3, [r0, #0]
 801de7a:	6a1b      	ldr	r3, [r3, #32]
 801de7c:	4798      	blx	r3
 801de7e:	4aa4      	ldr	r2, [pc, #656]	; (801e110 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801de80:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801de84:	8811      	ldrh	r1, [r2, #0]
 801de86:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801de8a:	fb01 2303 	mla	r3, r1, r3, r2
 801de8e:	2201      	movs	r2, #1
 801de90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de94:	4590      	cmp	r8, r2
 801de96:	4403      	add	r3, r0
 801de98:	9307      	str	r3, [sp, #28]
 801de9a:	fa02 f308 	lsl.w	r3, r2, r8
 801de9e:	f103 33ff 	add.w	r3, r3, #4294967295
 801dea2:	b2db      	uxtb	r3, r3
 801dea4:	930f      	str	r3, [sp, #60]	; 0x3c
 801dea6:	f000 8109 	beq.w	801e0bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 801deaa:	f1b8 0f02 	cmp.w	r8, #2
 801deae:	f000 813e 	beq.w	801e12e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801deb2:	f1b8 0f04 	cmp.w	r8, #4
 801deb6:	f000 8132 	beq.w	801e11e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801deba:	b906      	cbnz	r6, 801debe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 801debc:	b174      	cbz	r4, 801dedc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801debe:	fb17 6304 	smlabb	r3, r7, r4, r6
 801dec2:	9924      	ldr	r1, [sp, #144]	; 0x90
 801dec4:	ebaa 0a04 	sub.w	sl, sl, r4
 801dec8:	fb13 f308 	smulbb	r3, r3, r8
 801decc:	fa1f fa8a 	uxth.w	sl, sl
 801ded0:	b29b      	uxth	r3, r3
 801ded2:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801ded6:	f003 0407 	and.w	r4, r3, #7
 801deda:	9124      	str	r1, [sp, #144]	; 0x90
 801dedc:	4649      	mov	r1, r9
 801dede:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801dee0:	f7ff ff14 	bl	801dd0c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801dee4:	4649      	mov	r1, r9
 801dee6:	4683      	mov	fp, r0
 801dee8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801deea:	f7ff ff2b 	bl	801dd44 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801deee:	9906      	ldr	r1, [sp, #24]
 801def0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801def2:	1bad      	subs	r5, r5, r6
 801def4:	1a5b      	subs	r3, r3, r1
 801def6:	459a      	cmp	sl, r3
 801def8:	bfa8      	it	ge
 801defa:	469a      	movge	sl, r3
 801defc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801defe:	1b5d      	subs	r5, r3, r5
 801df00:	9b08      	ldr	r3, [sp, #32]
 801df02:	429d      	cmp	r5, r3
 801df04:	bfd4      	ite	le
 801df06:	ebc6 0605 	rsble	r6, r6, r5
 801df0a:	ebc6 0603 	rsbgt	r6, r6, r3
 801df0e:	1bbf      	subs	r7, r7, r6
 801df10:	fb0b 0016 	mls	r0, fp, r6, r0
 801df14:	fb08 f307 	mul.w	r3, r8, r7
 801df18:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801df1c:	9308      	str	r3, [sp, #32]
 801df1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801df20:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801df24:	930b      	str	r3, [sp, #44]	; 0x2c
 801df26:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801df28:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801df2c:	930c      	str	r3, [sp, #48]	; 0x30
 801df2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801df30:	b2db      	uxtb	r3, r3
 801df32:	930d      	str	r3, [sp, #52]	; 0x34
 801df34:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801df36:	7819      	ldrb	r1, [r3, #0]
 801df38:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801df3c:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 801df40:	4121      	asrs	r1, r4
 801df42:	9306      	str	r3, [sp, #24]
 801df44:	fb03 0b0b 	mla	fp, r3, fp, r0
 801df48:	b2c9      	uxtb	r1, r1
 801df4a:	f1ba 0f00 	cmp.w	sl, #0
 801df4e:	f340 80d1 	ble.w	801e0f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801df52:	46b6      	mov	lr, r6
 801df54:	9807      	ldr	r0, [sp, #28]
 801df56:	f1be 0f00 	cmp.w	lr, #0
 801df5a:	f340 80b8 	ble.w	801e0ce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801df5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801df60:	400b      	ands	r3, r1
 801df62:	d03e      	beq.n	801dfe2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801df64:	fb13 f302 	smulbb	r3, r3, r2
 801df68:	2bfe      	cmp	r3, #254	; 0xfe
 801df6a:	dd03      	ble.n	801df74 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 801df6c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801df6e:	2dff      	cmp	r5, #255	; 0xff
 801df70:	f000 80a6 	beq.w	801e0c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801df74:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801df76:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801df78:	fb15 f303 	smulbb	r3, r5, r3
 801df7c:	b29b      	uxth	r3, r3
 801df7e:	1c5d      	adds	r5, r3, #1
 801df80:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801df84:	7805      	ldrb	r5, [r0, #0]
 801df86:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801df8a:	fa1f fc83 	uxth.w	ip, r3
 801df8e:	43db      	mvns	r3, r3
 801df90:	fb17 f90c 	smulbb	r9, r7, ip
 801df94:	b2db      	uxtb	r3, r3
 801df96:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801df98:	fb05 9503 	mla	r5, r5, r3, r9
 801df9c:	b2ad      	uxth	r5, r5
 801df9e:	f105 0901 	add.w	r9, r5, #1
 801dfa2:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801dfa6:	fb17 f90c 	smulbb	r9, r7, ip
 801dfaa:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801dfac:	122d      	asrs	r5, r5, #8
 801dfae:	fb17 fc0c 	smulbb	ip, r7, ip
 801dfb2:	7005      	strb	r5, [r0, #0]
 801dfb4:	7845      	ldrb	r5, [r0, #1]
 801dfb6:	fb05 9503 	mla	r5, r5, r3, r9
 801dfba:	b2ad      	uxth	r5, r5
 801dfbc:	f105 0901 	add.w	r9, r5, #1
 801dfc0:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801dfc4:	122d      	asrs	r5, r5, #8
 801dfc6:	7045      	strb	r5, [r0, #1]
 801dfc8:	7885      	ldrb	r5, [r0, #2]
 801dfca:	fb05 cc03 	mla	ip, r5, r3, ip
 801dfce:	fa1f fc8c 	uxth.w	ip, ip
 801dfd2:	f10c 0301 	add.w	r3, ip, #1
 801dfd6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801dfda:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801dfde:	f880 c002 	strb.w	ip, [r0, #2]
 801dfe2:	4444      	add	r4, r8
 801dfe4:	f10e 3eff 	add.w	lr, lr, #4294967295
 801dfe8:	b2a4      	uxth	r4, r4
 801dfea:	2c07      	cmp	r4, #7
 801dfec:	bf89      	itett	hi
 801dfee:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801dff0:	fa41 f108 	asrls.w	r1, r1, r8
 801dff4:	2400      	movhi	r4, #0
 801dff6:	7859      	ldrbhi	r1, [r3, #1]
 801dff8:	bf8a      	itet	hi
 801dffa:	3301      	addhi	r3, #1
 801dffc:	b2c9      	uxtbls	r1, r1
 801dffe:	9324      	strhi	r3, [sp, #144]	; 0x90
 801e000:	9b06      	ldr	r3, [sp, #24]
 801e002:	4418      	add	r0, r3
 801e004:	e7a7      	b.n	801df56 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 801e006:	441d      	add	r5, r3
 801e008:	b22d      	sxth	r5, r5
 801e00a:	e6f1      	b.n	801ddf0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801e00c:	f1b9 0f01 	cmp.w	r9, #1
 801e010:	f47f af2c 	bne.w	801de6c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e014:	f1bb 0f01 	cmp.w	fp, #1
 801e018:	f47f af28 	bne.w	801de6c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e01c:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 801e10c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801e020:	f8db 0000 	ldr.w	r0, [fp]
 801e024:	6803      	ldr	r3, [r0, #0]
 801e026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e028:	4798      	blx	r3
 801e02a:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801e02e:	465a      	mov	r2, fp
 801e030:	d006      	beq.n	801e040 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801e032:	f1b8 0f04 	cmp.w	r8, #4
 801e036:	d13d      	bne.n	801e0b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 801e038:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e03a:	3300      	adds	r3, #0
 801e03c:	bf18      	it	ne
 801e03e:	2301      	movne	r3, #1
 801e040:	05c0      	lsls	r0, r0, #23
 801e042:	d567      	bpl.n	801e114 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801e044:	f1b8 0f08 	cmp.w	r8, #8
 801e048:	d164      	bne.n	801e114 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801e04a:	2b00      	cmp	r3, #0
 801e04c:	bf0c      	ite	eq
 801e04e:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801e052:	2180      	movne	r1, #128	; 0x80
 801e054:	2e00      	cmp	r6, #0
 801e056:	f47f af09 	bne.w	801de6c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e05a:	2c00      	cmp	r4, #0
 801e05c:	f47f af06 	bne.w	801de6c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e060:	9b08      	ldr	r3, [sp, #32]
 801e062:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e064:	442b      	add	r3, r5
 801e066:	4283      	cmp	r3, r0
 801e068:	f73f af00 	bgt.w	801de6c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e06c:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 801e070:	4403      	add	r3, r0
 801e072:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e074:	4283      	cmp	r3, r0
 801e076:	f73f aef9 	bgt.w	801de6c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e07a:	f1b8 0f08 	cmp.w	r8, #8
 801e07e:	6810      	ldr	r0, [r2, #0]
 801e080:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801e084:	bf18      	it	ne
 801e086:	3701      	addne	r7, #1
 801e088:	6804      	ldr	r4, [r0, #0]
 801e08a:	9105      	str	r1, [sp, #20]
 801e08c:	bf18      	it	ne
 801e08e:	f027 0701 	bicne.w	r7, r7, #1
 801e092:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e094:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801e098:	bf18      	it	ne
 801e09a:	b2bf      	uxthne	r7, r7
 801e09c:	9104      	str	r1, [sp, #16]
 801e09e:	9926      	ldr	r1, [sp, #152]	; 0x98
 801e0a0:	e9cd 7a00 	strd	r7, sl, [sp]
 801e0a4:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801e0a8:	9924      	ldr	r1, [sp, #144]	; 0x90
 801e0aa:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801e0ac:	47a0      	blx	r4
 801e0ae:	b015      	add	sp, #84	; 0x54
 801e0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0b4:	2300      	movs	r3, #0
 801e0b6:	e7c3      	b.n	801e040 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801e0b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e0ba:	e6e0      	b.n	801de7e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801e0bc:	22ff      	movs	r2, #255	; 0xff
 801e0be:	e6fc      	b.n	801deba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801e0c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e0c2:	7003      	strb	r3, [r0, #0]
 801e0c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e0c6:	7043      	strb	r3, [r0, #1]
 801e0c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e0ca:	7083      	strb	r3, [r0, #2]
 801e0cc:	e789      	b.n	801dfe2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801e0ce:	9b08      	ldr	r3, [sp, #32]
 801e0d0:	b153      	cbz	r3, 801e0e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801e0d2:	441c      	add	r4, r3
 801e0d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e0d6:	b2a4      	uxth	r4, r4
 801e0d8:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801e0dc:	f004 0407 	and.w	r4, r4, #7
 801e0e0:	7819      	ldrb	r1, [r3, #0]
 801e0e2:	9324      	str	r3, [sp, #144]	; 0x90
 801e0e4:	4121      	asrs	r1, r4
 801e0e6:	b2c9      	uxtb	r1, r1
 801e0e8:	9b07      	ldr	r3, [sp, #28]
 801e0ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e0ee:	445b      	add	r3, fp
 801e0f0:	9307      	str	r3, [sp, #28]
 801e0f2:	e72a      	b.n	801df4a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 801e0f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e0f6:	2b00      	cmp	r3, #0
 801e0f8:	d1d9      	bne.n	801e0ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e0fa:	4b04      	ldr	r3, [pc, #16]	; (801e10c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801e0fc:	6818      	ldr	r0, [r3, #0]
 801e0fe:	6803      	ldr	r3, [r0, #0]
 801e100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e102:	4798      	blx	r3
 801e104:	e7d3      	b.n	801e0ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801e106:	bf00      	nop
 801e108:	2000b2cc 	.word	0x2000b2cc
 801e10c:	2000b2d4 	.word	0x2000b2d4
 801e110:	2000b2ce 	.word	0x2000b2ce
 801e114:	2b00      	cmp	r3, #0
 801e116:	f43f aea9 	beq.w	801de6c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e11a:	2180      	movs	r1, #128	; 0x80
 801e11c:	e79a      	b.n	801e054 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 801e11e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e120:	b11b      	cbz	r3, 801e12a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801e122:	07fb      	lsls	r3, r7, #31
 801e124:	d501      	bpl.n	801e12a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801e126:	3701      	adds	r7, #1
 801e128:	b2bf      	uxth	r7, r7
 801e12a:	2211      	movs	r2, #17
 801e12c:	e6c5      	b.n	801deba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801e12e:	2255      	movs	r2, #85	; 0x55
 801e130:	e6c3      	b.n	801deba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801e132:	bf00      	nop

0801e134 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801e134:	b538      	push	{r3, r4, r5, lr}
 801e136:	4c15      	ldr	r4, [pc, #84]	; (801e18c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801e138:	4605      	mov	r5, r0
 801e13a:	7823      	ldrb	r3, [r4, #0]
 801e13c:	f3bf 8f5b 	dmb	ish
 801e140:	07da      	lsls	r2, r3, #31
 801e142:	d40b      	bmi.n	801e15c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e144:	4620      	mov	r0, r4
 801e146:	f006 fd5e 	bl	8024c06 <__cxa_guard_acquire>
 801e14a:	b138      	cbz	r0, 801e15c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e14c:	4620      	mov	r0, r4
 801e14e:	f006 fd66 	bl	8024c1e <__cxa_guard_release>
 801e152:	4a0f      	ldr	r2, [pc, #60]	; (801e190 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e154:	490f      	ldr	r1, [pc, #60]	; (801e194 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801e156:	4810      	ldr	r0, [pc, #64]	; (801e198 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e158:	f006 fd4b 	bl	8024bf2 <__aeabi_atexit>
 801e15c:	4c0f      	ldr	r4, [pc, #60]	; (801e19c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801e15e:	7823      	ldrb	r3, [r4, #0]
 801e160:	f3bf 8f5b 	dmb	ish
 801e164:	07db      	lsls	r3, r3, #31
 801e166:	d40b      	bmi.n	801e180 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e168:	4620      	mov	r0, r4
 801e16a:	f006 fd4c 	bl	8024c06 <__cxa_guard_acquire>
 801e16e:	b138      	cbz	r0, 801e180 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e170:	4620      	mov	r0, r4
 801e172:	f006 fd54 	bl	8024c1e <__cxa_guard_release>
 801e176:	4a06      	ldr	r2, [pc, #24]	; (801e190 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e178:	4909      	ldr	r1, [pc, #36]	; (801e1a0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801e17a:	480a      	ldr	r0, [pc, #40]	; (801e1a4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e17c:	f006 fd39 	bl	8024bf2 <__aeabi_atexit>
 801e180:	4b05      	ldr	r3, [pc, #20]	; (801e198 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e182:	612b      	str	r3, [r5, #16]
 801e184:	4b07      	ldr	r3, [pc, #28]	; (801e1a4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e186:	616b      	str	r3, [r5, #20]
 801e188:	bd38      	pop	{r3, r4, r5, pc}
 801e18a:	bf00      	nop
 801e18c:	2000b3e0 	.word	0x2000b3e0
 801e190:	20000000 	.word	0x20000000
 801e194:	0801cd6b 	.word	0x0801cd6b
 801e198:	20000094 	.word	0x20000094
 801e19c:	2000b3e4 	.word	0x2000b3e4
 801e1a0:	0801cd69 	.word	0x0801cd69
 801e1a4:	20000098 	.word	0x20000098

0801e1a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801e1a8:	b538      	push	{r3, r4, r5, lr}
 801e1aa:	4c15      	ldr	r4, [pc, #84]	; (801e200 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801e1ac:	4605      	mov	r5, r0
 801e1ae:	7823      	ldrb	r3, [r4, #0]
 801e1b0:	f3bf 8f5b 	dmb	ish
 801e1b4:	07da      	lsls	r2, r3, #31
 801e1b6:	d40b      	bmi.n	801e1d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e1b8:	4620      	mov	r0, r4
 801e1ba:	f006 fd24 	bl	8024c06 <__cxa_guard_acquire>
 801e1be:	b138      	cbz	r0, 801e1d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e1c0:	4620      	mov	r0, r4
 801e1c2:	f006 fd2c 	bl	8024c1e <__cxa_guard_release>
 801e1c6:	4a0f      	ldr	r2, [pc, #60]	; (801e204 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e1c8:	490f      	ldr	r1, [pc, #60]	; (801e208 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801e1ca:	4810      	ldr	r0, [pc, #64]	; (801e20c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e1cc:	f006 fd11 	bl	8024bf2 <__aeabi_atexit>
 801e1d0:	4c0f      	ldr	r4, [pc, #60]	; (801e210 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801e1d2:	7823      	ldrb	r3, [r4, #0]
 801e1d4:	f3bf 8f5b 	dmb	ish
 801e1d8:	07db      	lsls	r3, r3, #31
 801e1da:	d40b      	bmi.n	801e1f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e1dc:	4620      	mov	r0, r4
 801e1de:	f006 fd12 	bl	8024c06 <__cxa_guard_acquire>
 801e1e2:	b138      	cbz	r0, 801e1f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e1e4:	4620      	mov	r0, r4
 801e1e6:	f006 fd1a 	bl	8024c1e <__cxa_guard_release>
 801e1ea:	4a06      	ldr	r2, [pc, #24]	; (801e204 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e1ec:	4909      	ldr	r1, [pc, #36]	; (801e214 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801e1ee:	480a      	ldr	r0, [pc, #40]	; (801e218 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e1f0:	f006 fcff 	bl	8024bf2 <__aeabi_atexit>
 801e1f4:	4b05      	ldr	r3, [pc, #20]	; (801e20c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e1f6:	60ab      	str	r3, [r5, #8]
 801e1f8:	4b07      	ldr	r3, [pc, #28]	; (801e218 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e1fa:	60eb      	str	r3, [r5, #12]
 801e1fc:	bd38      	pop	{r3, r4, r5, pc}
 801e1fe:	bf00      	nop
 801e200:	2000b3c0 	.word	0x2000b3c0
 801e204:	20000000 	.word	0x20000000
 801e208:	0801cd6f 	.word	0x0801cd6f
 801e20c:	20000074 	.word	0x20000074
 801e210:	2000b3c4 	.word	0x2000b3c4
 801e214:	0801cd6d 	.word	0x0801cd6d
 801e218:	20000078 	.word	0x20000078

0801e21c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801e21c:	b510      	push	{r4, lr}
 801e21e:	4604      	mov	r4, r0
 801e220:	f7ff ff88 	bl	801e134 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801e224:	4620      	mov	r0, r4
 801e226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e22a:	f7ff bfbd 	b.w	801e1a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801e230 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801e230:	b538      	push	{r3, r4, r5, lr}
 801e232:	4c15      	ldr	r4, [pc, #84]	; (801e288 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801e234:	4605      	mov	r5, r0
 801e236:	7823      	ldrb	r3, [r4, #0]
 801e238:	f3bf 8f5b 	dmb	ish
 801e23c:	07da      	lsls	r2, r3, #31
 801e23e:	d40b      	bmi.n	801e258 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e240:	4620      	mov	r0, r4
 801e242:	f006 fce0 	bl	8024c06 <__cxa_guard_acquire>
 801e246:	b138      	cbz	r0, 801e258 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e248:	4620      	mov	r0, r4
 801e24a:	f006 fce8 	bl	8024c1e <__cxa_guard_release>
 801e24e:	4a0f      	ldr	r2, [pc, #60]	; (801e28c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e250:	490f      	ldr	r1, [pc, #60]	; (801e290 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801e252:	4810      	ldr	r0, [pc, #64]	; (801e294 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e254:	f006 fccd 	bl	8024bf2 <__aeabi_atexit>
 801e258:	4c0f      	ldr	r4, [pc, #60]	; (801e298 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801e25a:	7823      	ldrb	r3, [r4, #0]
 801e25c:	f3bf 8f5b 	dmb	ish
 801e260:	07db      	lsls	r3, r3, #31
 801e262:	d40b      	bmi.n	801e27c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e264:	4620      	mov	r0, r4
 801e266:	f006 fcce 	bl	8024c06 <__cxa_guard_acquire>
 801e26a:	b138      	cbz	r0, 801e27c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e26c:	4620      	mov	r0, r4
 801e26e:	f006 fcd6 	bl	8024c1e <__cxa_guard_release>
 801e272:	4a06      	ldr	r2, [pc, #24]	; (801e28c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e274:	4909      	ldr	r1, [pc, #36]	; (801e29c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801e276:	480a      	ldr	r0, [pc, #40]	; (801e2a0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e278:	f006 fcbb 	bl	8024bf2 <__aeabi_atexit>
 801e27c:	4b05      	ldr	r3, [pc, #20]	; (801e294 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e27e:	622b      	str	r3, [r5, #32]
 801e280:	4b07      	ldr	r3, [pc, #28]	; (801e2a0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e282:	626b      	str	r3, [r5, #36]	; 0x24
 801e284:	bd38      	pop	{r3, r4, r5, pc}
 801e286:	bf00      	nop
 801e288:	2000b3e8 	.word	0x2000b3e8
 801e28c:	20000000 	.word	0x20000000
 801e290:	0801cd63 	.word	0x0801cd63
 801e294:	2000009c 	.word	0x2000009c
 801e298:	2000b3ec 	.word	0x2000b3ec
 801e29c:	0801cd61 	.word	0x0801cd61
 801e2a0:	200000a0 	.word	0x200000a0

0801e2a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801e2a4:	b538      	push	{r3, r4, r5, lr}
 801e2a6:	4c15      	ldr	r4, [pc, #84]	; (801e2fc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801e2a8:	4605      	mov	r5, r0
 801e2aa:	7823      	ldrb	r3, [r4, #0]
 801e2ac:	f3bf 8f5b 	dmb	ish
 801e2b0:	07da      	lsls	r2, r3, #31
 801e2b2:	d40b      	bmi.n	801e2cc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e2b4:	4620      	mov	r0, r4
 801e2b6:	f006 fca6 	bl	8024c06 <__cxa_guard_acquire>
 801e2ba:	b138      	cbz	r0, 801e2cc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e2bc:	4620      	mov	r0, r4
 801e2be:	f006 fcae 	bl	8024c1e <__cxa_guard_release>
 801e2c2:	4a0f      	ldr	r2, [pc, #60]	; (801e300 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e2c4:	490f      	ldr	r1, [pc, #60]	; (801e304 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801e2c6:	4810      	ldr	r0, [pc, #64]	; (801e308 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e2c8:	f006 fc93 	bl	8024bf2 <__aeabi_atexit>
 801e2cc:	4c0f      	ldr	r4, [pc, #60]	; (801e30c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801e2ce:	7823      	ldrb	r3, [r4, #0]
 801e2d0:	f3bf 8f5b 	dmb	ish
 801e2d4:	07db      	lsls	r3, r3, #31
 801e2d6:	d40b      	bmi.n	801e2f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e2d8:	4620      	mov	r0, r4
 801e2da:	f006 fc94 	bl	8024c06 <__cxa_guard_acquire>
 801e2de:	b138      	cbz	r0, 801e2f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e2e0:	4620      	mov	r0, r4
 801e2e2:	f006 fc9c 	bl	8024c1e <__cxa_guard_release>
 801e2e6:	4a06      	ldr	r2, [pc, #24]	; (801e300 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e2e8:	4909      	ldr	r1, [pc, #36]	; (801e310 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801e2ea:	480a      	ldr	r0, [pc, #40]	; (801e314 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e2ec:	f006 fc81 	bl	8024bf2 <__aeabi_atexit>
 801e2f0:	4b05      	ldr	r3, [pc, #20]	; (801e308 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e2f2:	61ab      	str	r3, [r5, #24]
 801e2f4:	4b07      	ldr	r3, [pc, #28]	; (801e314 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e2f6:	61eb      	str	r3, [r5, #28]
 801e2f8:	bd38      	pop	{r3, r4, r5, pc}
 801e2fa:	bf00      	nop
 801e2fc:	2000b3c8 	.word	0x2000b3c8
 801e300:	20000000 	.word	0x20000000
 801e304:	0801cd67 	.word	0x0801cd67
 801e308:	2000007c 	.word	0x2000007c
 801e30c:	2000b3cc 	.word	0x2000b3cc
 801e310:	0801cd65 	.word	0x0801cd65
 801e314:	20000080 	.word	0x20000080

0801e318 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801e318:	b510      	push	{r4, lr}
 801e31a:	4604      	mov	r4, r0
 801e31c:	f7ff ff88 	bl	801e230 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801e320:	4620      	mov	r0, r4
 801e322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e326:	f7ff bfbd 	b.w	801e2a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801e32c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801e32c:	b538      	push	{r3, r4, r5, lr}
 801e32e:	4c15      	ldr	r4, [pc, #84]	; (801e384 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801e330:	4605      	mov	r5, r0
 801e332:	7823      	ldrb	r3, [r4, #0]
 801e334:	f3bf 8f5b 	dmb	ish
 801e338:	07da      	lsls	r2, r3, #31
 801e33a:	d40b      	bmi.n	801e354 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801e33c:	4620      	mov	r0, r4
 801e33e:	f006 fc62 	bl	8024c06 <__cxa_guard_acquire>
 801e342:	b138      	cbz	r0, 801e354 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801e344:	4620      	mov	r0, r4
 801e346:	f006 fc6a 	bl	8024c1e <__cxa_guard_release>
 801e34a:	4a0f      	ldr	r2, [pc, #60]	; (801e388 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801e34c:	490f      	ldr	r1, [pc, #60]	; (801e38c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801e34e:	4810      	ldr	r0, [pc, #64]	; (801e390 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801e350:	f006 fc4f 	bl	8024bf2 <__aeabi_atexit>
 801e354:	4c0f      	ldr	r4, [pc, #60]	; (801e394 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801e356:	7823      	ldrb	r3, [r4, #0]
 801e358:	f3bf 8f5b 	dmb	ish
 801e35c:	07db      	lsls	r3, r3, #31
 801e35e:	d40b      	bmi.n	801e378 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801e360:	4620      	mov	r0, r4
 801e362:	f006 fc50 	bl	8024c06 <__cxa_guard_acquire>
 801e366:	b138      	cbz	r0, 801e378 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801e368:	4620      	mov	r0, r4
 801e36a:	f006 fc58 	bl	8024c1e <__cxa_guard_release>
 801e36e:	4a06      	ldr	r2, [pc, #24]	; (801e388 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801e370:	4909      	ldr	r1, [pc, #36]	; (801e398 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801e372:	480a      	ldr	r0, [pc, #40]	; (801e39c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801e374:	f006 fc3d 	bl	8024bf2 <__aeabi_atexit>
 801e378:	4b05      	ldr	r3, [pc, #20]	; (801e390 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801e37a:	632b      	str	r3, [r5, #48]	; 0x30
 801e37c:	4b07      	ldr	r3, [pc, #28]	; (801e39c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801e37e:	636b      	str	r3, [r5, #52]	; 0x34
 801e380:	bd38      	pop	{r3, r4, r5, pc}
 801e382:	bf00      	nop
 801e384:	2000b3d0 	.word	0x2000b3d0
 801e388:	20000000 	.word	0x20000000
 801e38c:	0801cd5b 	.word	0x0801cd5b
 801e390:	20000084 	.word	0x20000084
 801e394:	2000b3d4 	.word	0x2000b3d4
 801e398:	0801cd59 	.word	0x0801cd59
 801e39c:	20000088 	.word	0x20000088

0801e3a0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801e3a0:	b538      	push	{r3, r4, r5, lr}
 801e3a2:	4c15      	ldr	r4, [pc, #84]	; (801e3f8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801e3a4:	4605      	mov	r5, r0
 801e3a6:	7823      	ldrb	r3, [r4, #0]
 801e3a8:	f3bf 8f5b 	dmb	ish
 801e3ac:	07da      	lsls	r2, r3, #31
 801e3ae:	d40b      	bmi.n	801e3c8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801e3b0:	4620      	mov	r0, r4
 801e3b2:	f006 fc28 	bl	8024c06 <__cxa_guard_acquire>
 801e3b6:	b138      	cbz	r0, 801e3c8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801e3b8:	4620      	mov	r0, r4
 801e3ba:	f006 fc30 	bl	8024c1e <__cxa_guard_release>
 801e3be:	4a0f      	ldr	r2, [pc, #60]	; (801e3fc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801e3c0:	490f      	ldr	r1, [pc, #60]	; (801e400 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801e3c2:	4810      	ldr	r0, [pc, #64]	; (801e404 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801e3c4:	f006 fc15 	bl	8024bf2 <__aeabi_atexit>
 801e3c8:	4c0f      	ldr	r4, [pc, #60]	; (801e408 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801e3ca:	7823      	ldrb	r3, [r4, #0]
 801e3cc:	f3bf 8f5b 	dmb	ish
 801e3d0:	07db      	lsls	r3, r3, #31
 801e3d2:	d40b      	bmi.n	801e3ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801e3d4:	4620      	mov	r0, r4
 801e3d6:	f006 fc16 	bl	8024c06 <__cxa_guard_acquire>
 801e3da:	b138      	cbz	r0, 801e3ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801e3dc:	4620      	mov	r0, r4
 801e3de:	f006 fc1e 	bl	8024c1e <__cxa_guard_release>
 801e3e2:	4a06      	ldr	r2, [pc, #24]	; (801e3fc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801e3e4:	4909      	ldr	r1, [pc, #36]	; (801e40c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801e3e6:	480a      	ldr	r0, [pc, #40]	; (801e410 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801e3e8:	f006 fc03 	bl	8024bf2 <__aeabi_atexit>
 801e3ec:	4b05      	ldr	r3, [pc, #20]	; (801e404 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801e3ee:	62ab      	str	r3, [r5, #40]	; 0x28
 801e3f0:	4b07      	ldr	r3, [pc, #28]	; (801e410 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801e3f2:	62eb      	str	r3, [r5, #44]	; 0x2c
 801e3f4:	bd38      	pop	{r3, r4, r5, pc}
 801e3f6:	bf00      	nop
 801e3f8:	2000b3a8 	.word	0x2000b3a8
 801e3fc:	20000000 	.word	0x20000000
 801e400:	0801cd5f 	.word	0x0801cd5f
 801e404:	2000005c 	.word	0x2000005c
 801e408:	2000b3ac 	.word	0x2000b3ac
 801e40c:	0801cd5d 	.word	0x0801cd5d
 801e410:	20000060 	.word	0x20000060

0801e414 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801e414:	b510      	push	{r4, lr}
 801e416:	4604      	mov	r4, r0
 801e418:	f7ff ff88 	bl	801e32c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801e41c:	4620      	mov	r0, r4
 801e41e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e422:	f7ff bfbd 	b.w	801e3a0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801e428 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801e428:	b538      	push	{r3, r4, r5, lr}
 801e42a:	4c15      	ldr	r4, [pc, #84]	; (801e480 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801e42c:	4605      	mov	r5, r0
 801e42e:	7823      	ldrb	r3, [r4, #0]
 801e430:	f3bf 8f5b 	dmb	ish
 801e434:	07da      	lsls	r2, r3, #31
 801e436:	d40b      	bmi.n	801e450 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e438:	4620      	mov	r0, r4
 801e43a:	f006 fbe4 	bl	8024c06 <__cxa_guard_acquire>
 801e43e:	b138      	cbz	r0, 801e450 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e440:	4620      	mov	r0, r4
 801e442:	f006 fbec 	bl	8024c1e <__cxa_guard_release>
 801e446:	4a0f      	ldr	r2, [pc, #60]	; (801e484 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e448:	490f      	ldr	r1, [pc, #60]	; (801e488 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801e44a:	4810      	ldr	r0, [pc, #64]	; (801e48c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e44c:	f006 fbd1 	bl	8024bf2 <__aeabi_atexit>
 801e450:	4c0f      	ldr	r4, [pc, #60]	; (801e490 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801e452:	7823      	ldrb	r3, [r4, #0]
 801e454:	f3bf 8f5b 	dmb	ish
 801e458:	07db      	lsls	r3, r3, #31
 801e45a:	d40b      	bmi.n	801e474 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e45c:	4620      	mov	r0, r4
 801e45e:	f006 fbd2 	bl	8024c06 <__cxa_guard_acquire>
 801e462:	b138      	cbz	r0, 801e474 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e464:	4620      	mov	r0, r4
 801e466:	f006 fbda 	bl	8024c1e <__cxa_guard_release>
 801e46a:	4a06      	ldr	r2, [pc, #24]	; (801e484 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e46c:	4909      	ldr	r1, [pc, #36]	; (801e494 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801e46e:	480a      	ldr	r0, [pc, #40]	; (801e498 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e470:	f006 fbbf 	bl	8024bf2 <__aeabi_atexit>
 801e474:	4b05      	ldr	r3, [pc, #20]	; (801e48c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e476:	642b      	str	r3, [r5, #64]	; 0x40
 801e478:	4b07      	ldr	r3, [pc, #28]	; (801e498 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e47a:	646b      	str	r3, [r5, #68]	; 0x44
 801e47c:	bd38      	pop	{r3, r4, r5, pc}
 801e47e:	bf00      	nop
 801e480:	2000b3d8 	.word	0x2000b3d8
 801e484:	20000000 	.word	0x20000000
 801e488:	0801cd53 	.word	0x0801cd53
 801e48c:	2000008c 	.word	0x2000008c
 801e490:	2000b3dc 	.word	0x2000b3dc
 801e494:	0801cd51 	.word	0x0801cd51
 801e498:	20000090 	.word	0x20000090

0801e49c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801e49c:	b538      	push	{r3, r4, r5, lr}
 801e49e:	4c15      	ldr	r4, [pc, #84]	; (801e4f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801e4a0:	4605      	mov	r5, r0
 801e4a2:	7823      	ldrb	r3, [r4, #0]
 801e4a4:	f3bf 8f5b 	dmb	ish
 801e4a8:	07da      	lsls	r2, r3, #31
 801e4aa:	d40b      	bmi.n	801e4c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e4ac:	4620      	mov	r0, r4
 801e4ae:	f006 fbaa 	bl	8024c06 <__cxa_guard_acquire>
 801e4b2:	b138      	cbz	r0, 801e4c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e4b4:	4620      	mov	r0, r4
 801e4b6:	f006 fbb2 	bl	8024c1e <__cxa_guard_release>
 801e4ba:	4a0f      	ldr	r2, [pc, #60]	; (801e4f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e4bc:	490f      	ldr	r1, [pc, #60]	; (801e4fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801e4be:	4810      	ldr	r0, [pc, #64]	; (801e500 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e4c0:	f006 fb97 	bl	8024bf2 <__aeabi_atexit>
 801e4c4:	4c0f      	ldr	r4, [pc, #60]	; (801e504 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801e4c6:	7823      	ldrb	r3, [r4, #0]
 801e4c8:	f3bf 8f5b 	dmb	ish
 801e4cc:	07db      	lsls	r3, r3, #31
 801e4ce:	d40b      	bmi.n	801e4e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e4d0:	4620      	mov	r0, r4
 801e4d2:	f006 fb98 	bl	8024c06 <__cxa_guard_acquire>
 801e4d6:	b138      	cbz	r0, 801e4e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e4d8:	4620      	mov	r0, r4
 801e4da:	f006 fba0 	bl	8024c1e <__cxa_guard_release>
 801e4de:	4a06      	ldr	r2, [pc, #24]	; (801e4f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e4e0:	4909      	ldr	r1, [pc, #36]	; (801e508 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801e4e2:	480a      	ldr	r0, [pc, #40]	; (801e50c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e4e4:	f006 fb85 	bl	8024bf2 <__aeabi_atexit>
 801e4e8:	4b05      	ldr	r3, [pc, #20]	; (801e500 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e4ea:	63ab      	str	r3, [r5, #56]	; 0x38
 801e4ec:	4b07      	ldr	r3, [pc, #28]	; (801e50c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e4ee:	63eb      	str	r3, [r5, #60]	; 0x3c
 801e4f0:	bd38      	pop	{r3, r4, r5, pc}
 801e4f2:	bf00      	nop
 801e4f4:	2000b3b8 	.word	0x2000b3b8
 801e4f8:	20000000 	.word	0x20000000
 801e4fc:	0801cd57 	.word	0x0801cd57
 801e500:	2000006c 	.word	0x2000006c
 801e504:	2000b3bc 	.word	0x2000b3bc
 801e508:	0801cd55 	.word	0x0801cd55
 801e50c:	20000070 	.word	0x20000070

0801e510 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801e510:	b510      	push	{r4, lr}
 801e512:	4604      	mov	r4, r0
 801e514:	f7ff ff88 	bl	801e428 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801e518:	4620      	mov	r0, r4
 801e51a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e51e:	f7ff bfbd 	b.w	801e49c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801e524 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801e524:	b538      	push	{r3, r4, r5, lr}
 801e526:	4c15      	ldr	r4, [pc, #84]	; (801e57c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801e528:	4605      	mov	r5, r0
 801e52a:	7823      	ldrb	r3, [r4, #0]
 801e52c:	f3bf 8f5b 	dmb	ish
 801e530:	07da      	lsls	r2, r3, #31
 801e532:	d40b      	bmi.n	801e54c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e534:	4620      	mov	r0, r4
 801e536:	f006 fb66 	bl	8024c06 <__cxa_guard_acquire>
 801e53a:	b138      	cbz	r0, 801e54c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e53c:	4620      	mov	r0, r4
 801e53e:	f006 fb6e 	bl	8024c1e <__cxa_guard_release>
 801e542:	4a0f      	ldr	r2, [pc, #60]	; (801e580 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e544:	490f      	ldr	r1, [pc, #60]	; (801e584 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801e546:	4810      	ldr	r0, [pc, #64]	; (801e588 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e548:	f006 fb53 	bl	8024bf2 <__aeabi_atexit>
 801e54c:	4c0f      	ldr	r4, [pc, #60]	; (801e58c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801e54e:	7823      	ldrb	r3, [r4, #0]
 801e550:	f3bf 8f5b 	dmb	ish
 801e554:	07db      	lsls	r3, r3, #31
 801e556:	d40b      	bmi.n	801e570 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e558:	4620      	mov	r0, r4
 801e55a:	f006 fb54 	bl	8024c06 <__cxa_guard_acquire>
 801e55e:	b138      	cbz	r0, 801e570 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e560:	4620      	mov	r0, r4
 801e562:	f006 fb5c 	bl	8024c1e <__cxa_guard_release>
 801e566:	4a06      	ldr	r2, [pc, #24]	; (801e580 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e568:	4909      	ldr	r1, [pc, #36]	; (801e590 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801e56a:	480a      	ldr	r0, [pc, #40]	; (801e594 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e56c:	f006 fb41 	bl	8024bf2 <__aeabi_atexit>
 801e570:	4b05      	ldr	r3, [pc, #20]	; (801e588 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e572:	652b      	str	r3, [r5, #80]	; 0x50
 801e574:	4b07      	ldr	r3, [pc, #28]	; (801e594 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e576:	656b      	str	r3, [r5, #84]	; 0x54
 801e578:	bd38      	pop	{r3, r4, r5, pc}
 801e57a:	bf00      	nop
 801e57c:	2000b3b0 	.word	0x2000b3b0
 801e580:	20000000 	.word	0x20000000
 801e584:	0801cd4b 	.word	0x0801cd4b
 801e588:	20000064 	.word	0x20000064
 801e58c:	2000b3b4 	.word	0x2000b3b4
 801e590:	0801cd49 	.word	0x0801cd49
 801e594:	20000068 	.word	0x20000068

0801e598 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801e598:	b538      	push	{r3, r4, r5, lr}
 801e59a:	4c15      	ldr	r4, [pc, #84]	; (801e5f0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801e59c:	4605      	mov	r5, r0
 801e59e:	7823      	ldrb	r3, [r4, #0]
 801e5a0:	f3bf 8f5b 	dmb	ish
 801e5a4:	07da      	lsls	r2, r3, #31
 801e5a6:	d40b      	bmi.n	801e5c0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e5a8:	4620      	mov	r0, r4
 801e5aa:	f006 fb2c 	bl	8024c06 <__cxa_guard_acquire>
 801e5ae:	b138      	cbz	r0, 801e5c0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e5b0:	4620      	mov	r0, r4
 801e5b2:	f006 fb34 	bl	8024c1e <__cxa_guard_release>
 801e5b6:	4a0f      	ldr	r2, [pc, #60]	; (801e5f4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e5b8:	490f      	ldr	r1, [pc, #60]	; (801e5f8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801e5ba:	4810      	ldr	r0, [pc, #64]	; (801e5fc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e5bc:	f006 fb19 	bl	8024bf2 <__aeabi_atexit>
 801e5c0:	4c0f      	ldr	r4, [pc, #60]	; (801e600 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801e5c2:	7823      	ldrb	r3, [r4, #0]
 801e5c4:	f3bf 8f5b 	dmb	ish
 801e5c8:	07db      	lsls	r3, r3, #31
 801e5ca:	d40b      	bmi.n	801e5e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e5cc:	4620      	mov	r0, r4
 801e5ce:	f006 fb1a 	bl	8024c06 <__cxa_guard_acquire>
 801e5d2:	b138      	cbz	r0, 801e5e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e5d4:	4620      	mov	r0, r4
 801e5d6:	f006 fb22 	bl	8024c1e <__cxa_guard_release>
 801e5da:	4a06      	ldr	r2, [pc, #24]	; (801e5f4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e5dc:	4909      	ldr	r1, [pc, #36]	; (801e604 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801e5de:	480a      	ldr	r0, [pc, #40]	; (801e608 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e5e0:	f006 fb07 	bl	8024bf2 <__aeabi_atexit>
 801e5e4:	4b05      	ldr	r3, [pc, #20]	; (801e5fc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e5e6:	64ab      	str	r3, [r5, #72]	; 0x48
 801e5e8:	4b07      	ldr	r3, [pc, #28]	; (801e608 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e5ea:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e5ec:	bd38      	pop	{r3, r4, r5, pc}
 801e5ee:	bf00      	nop
 801e5f0:	2000b3a0 	.word	0x2000b3a0
 801e5f4:	20000000 	.word	0x20000000
 801e5f8:	0801cd4f 	.word	0x0801cd4f
 801e5fc:	20000054 	.word	0x20000054
 801e600:	2000b3a4 	.word	0x2000b3a4
 801e604:	0801cd4d 	.word	0x0801cd4d
 801e608:	20000058 	.word	0x20000058

0801e60c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801e60c:	b510      	push	{r4, lr}
 801e60e:	4604      	mov	r4, r0
 801e610:	f7ff ff88 	bl	801e524 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801e614:	4620      	mov	r0, r4
 801e616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e61a:	f7ff bfbd 	b.w	801e598 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801e61e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801e61e:	b510      	push	{r4, lr}
 801e620:	4604      	mov	r4, r0
 801e622:	f7ff fff3 	bl	801e60c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801e626:	4620      	mov	r0, r4
 801e628:	f7ff ff72 	bl	801e510 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801e62c:	4620      	mov	r0, r4
 801e62e:	f7ff fe73 	bl	801e318 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801e632:	4620      	mov	r0, r4
 801e634:	f7ff fdf2 	bl	801e21c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801e638:	4620      	mov	r0, r4
 801e63a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e63e:	f7ff bee9 	b.w	801e414 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801e644 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801e644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e648:	b087      	sub	sp, #28
 801e64a:	7888      	ldrb	r0, [r1, #2]
 801e64c:	4616      	mov	r6, r2
 801e64e:	9001      	str	r0, [sp, #4]
 801e650:	7848      	ldrb	r0, [r1, #1]
 801e652:	9100      	str	r1, [sp, #0]
 801e654:	9002      	str	r0, [sp, #8]
 801e656:	7808      	ldrb	r0, [r1, #0]
 801e658:	9901      	ldr	r1, [sp, #4]
 801e65a:	9003      	str	r0, [sp, #12]
 801e65c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801e660:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801e664:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801e668:	9902      	ldr	r1, [sp, #8]
 801e66a:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801e66e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801e672:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801e676:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801e67a:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801e67e:	9005      	str	r0, [sp, #20]
 801e680:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801e684:	fb05 ca0e 	mla	sl, r5, lr, ip
 801e688:	2d00      	cmp	r5, #0
 801e68a:	eb06 080a 	add.w	r8, r6, sl
 801e68e:	db4a      	blt.n	801e726 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801e690:	45a9      	cmp	r9, r5
 801e692:	dd48      	ble.n	801e726 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801e694:	f1bc 0f00 	cmp.w	ip, #0
 801e698:	db43      	blt.n	801e722 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801e69a:	45e6      	cmp	lr, ip
 801e69c:	dd41      	ble.n	801e722 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801e69e:	f816 600a 	ldrb.w	r6, [r6, sl]
 801e6a2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e6a6:	441e      	add	r6, r3
 801e6a8:	f11c 0001 	adds.w	r0, ip, #1
 801e6ac:	d43e      	bmi.n	801e72c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801e6ae:	4586      	cmp	lr, r0
 801e6b0:	dd3c      	ble.n	801e72c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801e6b2:	2a00      	cmp	r2, #0
 801e6b4:	d03a      	beq.n	801e72c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801e6b6:	f898 0001 	ldrb.w	r0, [r8, #1]
 801e6ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e6be:	4418      	add	r0, r3
 801e6c0:	3501      	adds	r5, #1
 801e6c2:	d437      	bmi.n	801e734 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801e6c4:	45a9      	cmp	r9, r5
 801e6c6:	dd35      	ble.n	801e734 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801e6c8:	b3a4      	cbz	r4, 801e734 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801e6ca:	f1bc 0f00 	cmp.w	ip, #0
 801e6ce:	db2f      	blt.n	801e730 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801e6d0:	45e6      	cmp	lr, ip
 801e6d2:	dd2d      	ble.n	801e730 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801e6d4:	f818 500e 	ldrb.w	r5, [r8, lr]
 801e6d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e6dc:	441d      	add	r5, r3
 801e6de:	f11c 0c01 	adds.w	ip, ip, #1
 801e6e2:	d42a      	bmi.n	801e73a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801e6e4:	45e6      	cmp	lr, ip
 801e6e6:	dd28      	ble.n	801e73a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801e6e8:	b33a      	cbz	r2, 801e73a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801e6ea:	44c6      	add	lr, r8
 801e6ec:	f89e c001 	ldrb.w	ip, [lr, #1]
 801e6f0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e6f4:	4463      	add	r3, ip
 801e6f6:	ea6f 0c07 	mvn.w	ip, r7
 801e6fa:	2a0f      	cmp	r2, #15
 801e6fc:	f896 a000 	ldrb.w	sl, [r6]
 801e700:	fa5f fc8c 	uxtb.w	ip, ip
 801e704:	f890 b000 	ldrb.w	fp, [r0]
 801e708:	f895 9000 	ldrb.w	r9, [r5]
 801e70c:	7819      	ldrb	r1, [r3, #0]
 801e70e:	d801      	bhi.n	801e714 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 801e710:	2c0f      	cmp	r4, #15
 801e712:	d914      	bls.n	801e73e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 801e714:	4b40      	ldr	r3, [pc, #256]	; (801e818 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801e716:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801e71a:	4a40      	ldr	r2, [pc, #256]	; (801e81c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801e71c:	4840      	ldr	r0, [pc, #256]	; (801e820 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 801e71e:	f006 fa9b 	bl	8024c58 <__assert_func>
 801e722:	ae05      	add	r6, sp, #20
 801e724:	e7c0      	b.n	801e6a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 801e726:	a805      	add	r0, sp, #20
 801e728:	4606      	mov	r6, r0
 801e72a:	e7c9      	b.n	801e6c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801e72c:	a805      	add	r0, sp, #20
 801e72e:	e7c7      	b.n	801e6c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801e730:	ad05      	add	r5, sp, #20
 801e732:	e7d4      	b.n	801e6de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 801e734:	ab05      	add	r3, sp, #20
 801e736:	461d      	mov	r5, r3
 801e738:	e7dd      	b.n	801e6f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801e73a:	ab05      	add	r3, sp, #20
 801e73c:	e7db      	b.n	801e6f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801e73e:	b292      	uxth	r2, r2
 801e740:	b2a4      	uxth	r4, r4
 801e742:	fa1f fc8c 	uxth.w	ip, ip
 801e746:	fb02 f804 	mul.w	r8, r2, r4
 801e74a:	0112      	lsls	r2, r2, #4
 801e74c:	b2bf      	uxth	r7, r7
 801e74e:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801e752:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801e756:	eba2 0208 	sub.w	r2, r2, r8
 801e75a:	b2a4      	uxth	r4, r4
 801e75c:	b292      	uxth	r2, r2
 801e75e:	ebae 0e04 	sub.w	lr, lr, r4
 801e762:	fb02 fb0b 	mul.w	fp, r2, fp
 801e766:	fa1f fe8e 	uxth.w	lr, lr
 801e76a:	fb0e ba0a 	mla	sl, lr, sl, fp
 801e76e:	fb04 aa09 	mla	sl, r4, r9, sl
 801e772:	fb08 aa01 	mla	sl, r8, r1, sl
 801e776:	9903      	ldr	r1, [sp, #12]
 801e778:	fb11 f90c 	smulbb	r9, r1, ip
 801e77c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801e780:	9900      	ldr	r1, [sp, #0]
 801e782:	fb0a 9a07 	mla	sl, sl, r7, r9
 801e786:	fa1f fa8a 	uxth.w	sl, sl
 801e78a:	f10a 0901 	add.w	r9, sl, #1
 801e78e:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801e792:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e796:	f881 a000 	strb.w	sl, [r1]
 801e79a:	f890 a001 	ldrb.w	sl, [r0, #1]
 801e79e:	f896 9001 	ldrb.w	r9, [r6, #1]
 801e7a2:	fb02 fa0a 	mul.w	sl, r2, sl
 801e7a6:	9902      	ldr	r1, [sp, #8]
 801e7a8:	fb0e aa09 	mla	sl, lr, r9, sl
 801e7ac:	f895 9001 	ldrb.w	r9, [r5, #1]
 801e7b0:	fb04 aa09 	mla	sl, r4, r9, sl
 801e7b4:	f893 9001 	ldrb.w	r9, [r3, #1]
 801e7b8:	fb08 a909 	mla	r9, r8, r9, sl
 801e7bc:	fb11 fa0c 	smulbb	sl, r1, ip
 801e7c0:	9900      	ldr	r1, [sp, #0]
 801e7c2:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801e7c6:	fb09 a907 	mla	r9, r9, r7, sl
 801e7ca:	fa1f f989 	uxth.w	r9, r9
 801e7ce:	f109 0a01 	add.w	sl, r9, #1
 801e7d2:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801e7d6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e7da:	f881 9001 	strb.w	r9, [r1, #1]
 801e7de:	7880      	ldrb	r0, [r0, #2]
 801e7e0:	78b6      	ldrb	r6, [r6, #2]
 801e7e2:	4342      	muls	r2, r0
 801e7e4:	78a8      	ldrb	r0, [r5, #2]
 801e7e6:	789b      	ldrb	r3, [r3, #2]
 801e7e8:	fb0e 2206 	mla	r2, lr, r6, r2
 801e7ec:	fb04 2400 	mla	r4, r4, r0, r2
 801e7f0:	fb08 4803 	mla	r8, r8, r3, r4
 801e7f4:	9b01      	ldr	r3, [sp, #4]
 801e7f6:	fb13 fc0c 	smulbb	ip, r3, ip
 801e7fa:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801e7fe:	fb08 c707 	mla	r7, r8, r7, ip
 801e802:	b2bf      	uxth	r7, r7
 801e804:	f107 0c01 	add.w	ip, r7, #1
 801e808:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801e80c:	123f      	asrs	r7, r7, #8
 801e80e:	708f      	strb	r7, [r1, #2]
 801e810:	b007      	add	sp, #28
 801e812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e816:	bf00      	nop
 801e818:	0802b67c 	.word	0x0802b67c
 801e81c:	0802bb72 	.word	0x0802bb72
 801e820:	0802b745 	.word	0x0802b745

0801e824 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e828:	ed2d 8b08 	vpush	{d8-d11}
 801e82c:	b095      	sub	sp, #84	; 0x54
 801e82e:	eeb0 aa40 	vmov.f32	s20, s0
 801e832:	eef0 9a60 	vmov.f32	s19, s1
 801e836:	930a      	str	r3, [sp, #40]	; 0x28
 801e838:	eeb0 9a41 	vmov.f32	s18, s2
 801e83c:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801e840:	eeb0 8a62 	vmov.f32	s16, s5
 801e844:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801e846:	eef0 8a43 	vmov.f32	s17, s6
 801e84a:	930c      	str	r3, [sp, #48]	; 0x30
 801e84c:	eef0 ba44 	vmov.f32	s23, s8
 801e850:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801e854:	eeb0 ba64 	vmov.f32	s22, s9
 801e858:	9013      	str	r0, [sp, #76]	; 0x4c
 801e85a:	eef0 aa45 	vmov.f32	s21, s10
 801e85e:	9310      	str	r3, [sp, #64]	; 0x40
 801e860:	6860      	ldr	r0, [r4, #4]
 801e862:	910f      	str	r1, [sp, #60]	; 0x3c
 801e864:	9212      	str	r2, [sp, #72]	; 0x48
 801e866:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801e868:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801e86c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801e870:	fb00 1303 	mla	r3, r0, r3, r1
 801e874:	6821      	ldr	r1, [r4, #0]
 801e876:	6854      	ldr	r4, [r2, #4]
 801e878:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e87c:	18cb      	adds	r3, r1, r3
 801e87e:	930b      	str	r3, [sp, #44]	; 0x2c
 801e880:	6813      	ldr	r3, [r2, #0]
 801e882:	930e      	str	r3, [sp, #56]	; 0x38
 801e884:	1d23      	adds	r3, r4, #4
 801e886:	9309      	str	r3, [sp, #36]	; 0x24
 801e888:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e88a:	43db      	mvns	r3, r3
 801e88c:	b2db      	uxtb	r3, r3
 801e88e:	930d      	str	r3, [sp, #52]	; 0x34
 801e890:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e892:	2b00      	cmp	r3, #0
 801e894:	dc03      	bgt.n	801e89e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801e896:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e898:	2b00      	cmp	r3, #0
 801e89a:	f340 823c 	ble.w	801ed16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801e89e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e8a0:	2b00      	cmp	r3, #0
 801e8a2:	f340 8115 	ble.w	801ead0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801e8a6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801e8a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e8aa:	1412      	asrs	r2, r2, #16
 801e8ac:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e8b0:	d431      	bmi.n	801e916 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801e8b2:	1c51      	adds	r1, r2, #1
 801e8b4:	428d      	cmp	r5, r1
 801e8b6:	dd31      	ble.n	801e91c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e8b8:	2b00      	cmp	r3, #0
 801e8ba:	db2f      	blt.n	801e91c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e8bc:	1c59      	adds	r1, r3, #1
 801e8be:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e8c0:	4288      	cmp	r0, r1
 801e8c2:	dd2b      	ble.n	801e91c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801e8c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e8c6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e8c8:	3b01      	subs	r3, #1
 801e8ca:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801e8cc:	fb02 1203 	mla	r2, r2, r3, r1
 801e8d0:	1412      	asrs	r2, r2, #16
 801e8d2:	d42d      	bmi.n	801e930 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e8d4:	3201      	adds	r2, #1
 801e8d6:	4295      	cmp	r5, r2
 801e8d8:	dd2a      	ble.n	801e930 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e8da:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801e8dc:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e8de:	fb02 1303 	mla	r3, r2, r3, r1
 801e8e2:	141b      	asrs	r3, r3, #16
 801e8e4:	d424      	bmi.n	801e930 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e8e6:	3301      	adds	r3, #1
 801e8e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e8ea:	429a      	cmp	r2, r3
 801e8ec:	dd20      	ble.n	801e930 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801e8ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e8f0:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801e8f4:	f103 0c03 	add.w	ip, r3, #3
 801e8f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e8fa:	9311      	str	r3, [sp, #68]	; 0x44
 801e8fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e8fe:	2b00      	cmp	r3, #0
 801e900:	f300 814f 	bgt.w	801eba2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801e904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e906:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e908:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e90c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e910:	441a      	add	r2, r3
 801e912:	920b      	str	r2, [sp, #44]	; 0x2c
 801e914:	e0de      	b.n	801ead4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801e916:	1c51      	adds	r1, r2, #1
 801e918:	f040 80cb 	bne.w	801eab2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e91c:	42aa      	cmp	r2, r5
 801e91e:	f280 80c8 	bge.w	801eab2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e922:	1c5f      	adds	r7, r3, #1
 801e924:	f2c0 80c5 	blt.w	801eab2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e928:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e92a:	4293      	cmp	r3, r2
 801e92c:	f280 80c1 	bge.w	801eab2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801e930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e932:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e934:	9311      	str	r3, [sp, #68]	; 0x44
 801e936:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e938:	2b00      	cmp	r3, #0
 801e93a:	dde3      	ble.n	801e904 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801e93c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e93e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801e940:	141a      	asrs	r2, r3, #16
 801e942:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e944:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e946:	1400      	asrs	r0, r0, #16
 801e948:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801e94c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801e950:	f100 810e 	bmi.w	801eb70 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801e954:	1c46      	adds	r6, r0, #1
 801e956:	42b5      	cmp	r5, r6
 801e958:	f340 810c 	ble.w	801eb74 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801e95c:	2a00      	cmp	r2, #0
 801e95e:	f2c0 8109 	blt.w	801eb74 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801e962:	1c56      	adds	r6, r2, #1
 801e964:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e966:	42b4      	cmp	r4, r6
 801e968:	f340 8104 	ble.w	801eb74 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801e96c:	fb02 0005 	mla	r0, r2, r5, r0
 801e970:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e972:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e974:	f814 e000 	ldrb.w	lr, [r4, r0]
 801e978:	4402      	add	r2, r0
 801e97a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e97c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e980:	eb00 080e 	add.w	r8, r0, lr
 801e984:	2b00      	cmp	r3, #0
 801e986:	f000 80e4 	beq.w	801eb52 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 801e98a:	f892 c001 	ldrb.w	ip, [r2, #1]
 801e98e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e992:	4484      	add	ip, r0
 801e994:	2900      	cmp	r1, #0
 801e996:	f000 80e5 	beq.w	801eb64 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801e99a:	1950      	adds	r0, r2, r5
 801e99c:	5d52      	ldrb	r2, [r2, r5]
 801e99e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e9a0:	7840      	ldrb	r0, [r0, #1]
 801e9a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e9a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e9aa:	4422      	add	r2, r4
 801e9ac:	4420      	add	r0, r4
 801e9ae:	b29b      	uxth	r3, r3
 801e9b0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e9b2:	b289      	uxth	r1, r1
 801e9b4:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801e9b8:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801e9bc:	fb03 fa01 	mul.w	sl, r3, r1
 801e9c0:	011b      	lsls	r3, r3, #4
 801e9c2:	f89c e000 	ldrb.w	lr, [ip]
 801e9c6:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801e9ca:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801e9ce:	eba3 030a 	sub.w	r3, r3, sl
 801e9d2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e9d4:	b289      	uxth	r1, r1
 801e9d6:	b29b      	uxth	r3, r3
 801e9d8:	eba9 0901 	sub.w	r9, r9, r1
 801e9dc:	fb03 fe0e 	mul.w	lr, r3, lr
 801e9e0:	fa1f f989 	uxth.w	r9, r9
 801e9e4:	fb09 ee0b 	mla	lr, r9, fp, lr
 801e9e8:	f892 b000 	ldrb.w	fp, [r2]
 801e9ec:	fb01 ee0b 	mla	lr, r1, fp, lr
 801e9f0:	f890 b000 	ldrb.w	fp, [r0]
 801e9f4:	fb0a ee0b 	mla	lr, sl, fp, lr
 801e9f8:	f897 b000 	ldrb.w	fp, [r7]
 801e9fc:	fb1b fb04 	smulbb	fp, fp, r4
 801ea00:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ea04:	fb0e be06 	mla	lr, lr, r6, fp
 801ea08:	fa1f fe8e 	uxth.w	lr, lr
 801ea0c:	f10e 0b01 	add.w	fp, lr, #1
 801ea10:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801ea14:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801ea18:	f887 b000 	strb.w	fp, [r7]
 801ea1c:	f89c e001 	ldrb.w	lr, [ip, #1]
 801ea20:	f898 b001 	ldrb.w	fp, [r8, #1]
 801ea24:	fb03 fe0e 	mul.w	lr, r3, lr
 801ea28:	fb09 ee0b 	mla	lr, r9, fp, lr
 801ea2c:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ea30:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ea34:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ea38:	fb0a ee0b 	mla	lr, sl, fp, lr
 801ea3c:	f897 b001 	ldrb.w	fp, [r7, #1]
 801ea40:	fb1b fb04 	smulbb	fp, fp, r4
 801ea44:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ea48:	fb0e be06 	mla	lr, lr, r6, fp
 801ea4c:	fa1f fe8e 	uxth.w	lr, lr
 801ea50:	f10e 0b01 	add.w	fp, lr, #1
 801ea54:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ea58:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ea5c:	f887 e001 	strb.w	lr, [r7, #1]
 801ea60:	f89c c002 	ldrb.w	ip, [ip, #2]
 801ea64:	f898 e002 	ldrb.w	lr, [r8, #2]
 801ea68:	fb03 f30c 	mul.w	r3, r3, ip
 801ea6c:	fb09 330e 	mla	r3, r9, lr, r3
 801ea70:	f892 e002 	ldrb.w	lr, [r2, #2]
 801ea74:	7882      	ldrb	r2, [r0, #2]
 801ea76:	fb01 310e 	mla	r1, r1, lr, r3
 801ea7a:	fb0a 1a02 	mla	sl, sl, r2, r1
 801ea7e:	78b9      	ldrb	r1, [r7, #2]
 801ea80:	fb11 f104 	smulbb	r1, r1, r4
 801ea84:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801ea88:	fb0a 1606 	mla	r6, sl, r6, r1
 801ea8c:	b2b6      	uxth	r6, r6
 801ea8e:	1c73      	adds	r3, r6, #1
 801ea90:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801ea94:	1236      	asrs	r6, r6, #8
 801ea96:	70be      	strb	r6, [r7, #2]
 801ea98:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ea9a:	3703      	adds	r7, #3
 801ea9c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ea9e:	4413      	add	r3, r2
 801eaa0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801eaa2:	9327      	str	r3, [sp, #156]	; 0x9c
 801eaa4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eaa6:	4413      	add	r3, r2
 801eaa8:	9328      	str	r3, [sp, #160]	; 0xa0
 801eaaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801eaac:	3b01      	subs	r3, #1
 801eaae:	9311      	str	r3, [sp, #68]	; 0x44
 801eab0:	e741      	b.n	801e936 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801eab2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801eab4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801eab6:	4413      	add	r3, r2
 801eab8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801eaba:	9327      	str	r3, [sp, #156]	; 0x9c
 801eabc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801eabe:	4413      	add	r3, r2
 801eac0:	9328      	str	r3, [sp, #160]	; 0xa0
 801eac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eac4:	3b01      	subs	r3, #1
 801eac6:	930a      	str	r3, [sp, #40]	; 0x28
 801eac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eaca:	3303      	adds	r3, #3
 801eacc:	930b      	str	r3, [sp, #44]	; 0x2c
 801eace:	e6e6      	b.n	801e89e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801ead0:	f47f aef8 	bne.w	801e8c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801ead4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ead6:	2b00      	cmp	r3, #0
 801ead8:	f340 811d 	ble.w	801ed16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801eadc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801eae0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801eae2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801eae6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801eaea:	eef0 6a48 	vmov.f32	s13, s16
 801eaee:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801eaf2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801eaf6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eafa:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801eafe:	eef0 6a68 	vmov.f32	s13, s17
 801eb02:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eb06:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801eb0a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801eb0e:	ee69 7a27 	vmul.f32	s15, s18, s15
 801eb12:	ee37 8a48 	vsub.f32	s16, s14, s16
 801eb16:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801eb1a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801eb1e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801eb22:	ee18 2a10 	vmov	r2, s16
 801eb26:	eeb0 8a47 	vmov.f32	s16, s14
 801eb2a:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb2e:	ee18 2a90 	vmov	r2, s17
 801eb32:	9329      	str	r3, [sp, #164]	; 0xa4
 801eb34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801eb36:	eef0 8a67 	vmov.f32	s17, s15
 801eb3a:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb3e:	932a      	str	r3, [sp, #168]	; 0xa8
 801eb40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eb42:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801eb44:	3b01      	subs	r3, #1
 801eb46:	930f      	str	r3, [sp, #60]	; 0x3c
 801eb48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801eb4a:	bf08      	it	eq
 801eb4c:	4613      	moveq	r3, r2
 801eb4e:	930a      	str	r3, [sp, #40]	; 0x28
 801eb50:	e69e      	b.n	801e890 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801eb52:	b151      	cbz	r1, 801eb6a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801eb54:	5d52      	ldrb	r2, [r2, r5]
 801eb56:	9809      	ldr	r0, [sp, #36]	; 0x24
 801eb58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eb5c:	4402      	add	r2, r0
 801eb5e:	4640      	mov	r0, r8
 801eb60:	46c4      	mov	ip, r8
 801eb62:	e724      	b.n	801e9ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801eb64:	4640      	mov	r0, r8
 801eb66:	4642      	mov	r2, r8
 801eb68:	e721      	b.n	801e9ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801eb6a:	4640      	mov	r0, r8
 801eb6c:	4642      	mov	r2, r8
 801eb6e:	e7f7      	b.n	801eb60 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801eb70:	1c46      	adds	r6, r0, #1
 801eb72:	d191      	bne.n	801ea98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801eb74:	4285      	cmp	r5, r0
 801eb76:	dd8f      	ble.n	801ea98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801eb78:	1c54      	adds	r4, r2, #1
 801eb7a:	db8d      	blt.n	801ea98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801eb7c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801eb7e:	4294      	cmp	r4, r2
 801eb80:	dd8a      	ble.n	801ea98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801eb82:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801eb84:	9002      	str	r0, [sp, #8]
 801eb86:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801eb88:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801eb8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eb8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801eb90:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801eb94:	e9cd 5300 	strd	r5, r3, [sp]
 801eb98:	4639      	mov	r1, r7
 801eb9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb9c:	f7ff fd52 	bl	801e644 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801eba0:	e77a      	b.n	801ea98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801eba2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801eba4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801eba6:	1410      	asrs	r0, r2, #16
 801eba8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ebac:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801ebae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ebb0:	1412      	asrs	r2, r2, #16
 801ebb2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801ebb6:	fb05 2000 	mla	r0, r5, r0, r2
 801ebba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ebbc:	f814 8000 	ldrb.w	r8, [r4, r0]
 801ebc0:	4402      	add	r2, r0
 801ebc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ebc4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ebc8:	eb00 0708 	add.w	r7, r0, r8
 801ebcc:	2b00      	cmp	r3, #0
 801ebce:	f000 8093 	beq.w	801ecf8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801ebd2:	7856      	ldrb	r6, [r2, #1]
 801ebd4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ebd8:	4406      	add	r6, r0
 801ebda:	2900      	cmp	r1, #0
 801ebdc:	f000 8095 	beq.w	801ed0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801ebe0:	1950      	adds	r0, r2, r5
 801ebe2:	5d52      	ldrb	r2, [r2, r5]
 801ebe4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ebe6:	7840      	ldrb	r0, [r0, #1]
 801ebe8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ebec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ebf0:	4422      	add	r2, r4
 801ebf2:	4420      	add	r0, r4
 801ebf4:	b29b      	uxth	r3, r3
 801ebf6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ebf8:	b289      	uxth	r1, r1
 801ebfa:	f10c 0c03 	add.w	ip, ip, #3
 801ebfe:	f814 b008 	ldrb.w	fp, [r4, r8]
 801ec02:	fb03 f901 	mul.w	r9, r3, r1
 801ec06:	011b      	lsls	r3, r3, #4
 801ec08:	f896 8000 	ldrb.w	r8, [r6]
 801ec0c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ec10:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801ec14:	eba3 0309 	sub.w	r3, r3, r9
 801ec18:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ec1a:	b289      	uxth	r1, r1
 801ec1c:	b29b      	uxth	r3, r3
 801ec1e:	ebae 0e01 	sub.w	lr, lr, r1
 801ec22:	fb03 f808 	mul.w	r8, r3, r8
 801ec26:	fa1f fe8e 	uxth.w	lr, lr
 801ec2a:	fb0e 880b 	mla	r8, lr, fp, r8
 801ec2e:	f892 b000 	ldrb.w	fp, [r2]
 801ec32:	fb01 880b 	mla	r8, r1, fp, r8
 801ec36:	f890 b000 	ldrb.w	fp, [r0]
 801ec3a:	fb09 880b 	mla	r8, r9, fp, r8
 801ec3e:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 801ec42:	fb1b fb04 	smulbb	fp, fp, r4
 801ec46:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801ec4a:	fb08 b80a 	mla	r8, r8, sl, fp
 801ec4e:	fa1f f888 	uxth.w	r8, r8
 801ec52:	f108 0b01 	add.w	fp, r8, #1
 801ec56:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ec5a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ec5e:	f80c 8c06 	strb.w	r8, [ip, #-6]
 801ec62:	f896 8001 	ldrb.w	r8, [r6, #1]
 801ec66:	f897 b001 	ldrb.w	fp, [r7, #1]
 801ec6a:	fb03 f808 	mul.w	r8, r3, r8
 801ec6e:	fb0e 880b 	mla	r8, lr, fp, r8
 801ec72:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ec76:	fb01 880b 	mla	r8, r1, fp, r8
 801ec7a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ec7e:	fb09 880b 	mla	r8, r9, fp, r8
 801ec82:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 801ec86:	fb1b fb04 	smulbb	fp, fp, r4
 801ec8a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801ec8e:	fb08 b80a 	mla	r8, r8, sl, fp
 801ec92:	fa1f f888 	uxth.w	r8, r8
 801ec96:	f108 0b01 	add.w	fp, r8, #1
 801ec9a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ec9e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801eca2:	f80c 8c05 	strb.w	r8, [ip, #-5]
 801eca6:	78b6      	ldrb	r6, [r6, #2]
 801eca8:	78bf      	ldrb	r7, [r7, #2]
 801ecaa:	4373      	muls	r3, r6
 801ecac:	7896      	ldrb	r6, [r2, #2]
 801ecae:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ecb0:	fb0e 3307 	mla	r3, lr, r7, r3
 801ecb4:	fb01 3306 	mla	r3, r1, r6, r3
 801ecb8:	7886      	ldrb	r6, [r0, #2]
 801ecba:	fb09 3906 	mla	r9, r9, r6, r3
 801ecbe:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801ecc2:	fb13 f304 	smulbb	r3, r3, r4
 801ecc6:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801ecca:	fb09 390a 	mla	r9, r9, sl, r3
 801ecce:	fa1f f989 	uxth.w	r9, r9
 801ecd2:	f109 0301 	add.w	r3, r9, #1
 801ecd6:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801ecda:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ecdc:	4413      	add	r3, r2
 801ecde:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ece0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ece4:	9327      	str	r3, [sp, #156]	; 0x9c
 801ece6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ece8:	f80c 9c04 	strb.w	r9, [ip, #-4]
 801ecec:	4413      	add	r3, r2
 801ecee:	9328      	str	r3, [sp, #160]	; 0xa0
 801ecf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ecf2:	3b01      	subs	r3, #1
 801ecf4:	9311      	str	r3, [sp, #68]	; 0x44
 801ecf6:	e601      	b.n	801e8fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801ecf8:	b151      	cbz	r1, 801ed10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801ecfa:	5d52      	ldrb	r2, [r2, r5]
 801ecfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ecfe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ed02:	4402      	add	r2, r0
 801ed04:	4638      	mov	r0, r7
 801ed06:	463e      	mov	r6, r7
 801ed08:	e774      	b.n	801ebf4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801ed0a:	4638      	mov	r0, r7
 801ed0c:	463a      	mov	r2, r7
 801ed0e:	e771      	b.n	801ebf4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801ed10:	4638      	mov	r0, r7
 801ed12:	463a      	mov	r2, r7
 801ed14:	e7f7      	b.n	801ed06 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801ed16:	b015      	add	sp, #84	; 0x54
 801ed18:	ecbd 8b08 	vpop	{d8-d11}
 801ed1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ed20 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801ed20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed24:	780d      	ldrb	r5, [r1, #0]
 801ed26:	f891 9002 	ldrb.w	r9, [r1, #2]
 801ed2a:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 801ed2e:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801ed32:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801ed36:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801ed3a:	f891 9001 	ldrb.w	r9, [r1, #1]
 801ed3e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801ed42:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801ed46:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801ed4a:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801ed4e:	9501      	str	r5, [sp, #4]
 801ed50:	fb06 470c 	mla	r7, r6, ip, r4
 801ed54:	2e00      	cmp	r6, #0
 801ed56:	eb02 0e07 	add.w	lr, r2, r7
 801ed5a:	db46      	blt.n	801edea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801ed5c:	45b0      	cmp	r8, r6
 801ed5e:	dd44      	ble.n	801edea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801ed60:	2c00      	cmp	r4, #0
 801ed62:	db40      	blt.n	801ede6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801ed64:	45a4      	cmp	ip, r4
 801ed66:	dd3e      	ble.n	801ede6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801ed68:	5dd7      	ldrb	r7, [r2, r7]
 801ed6a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ed6e:	441f      	add	r7, r3
 801ed70:	1c62      	adds	r2, r4, #1
 801ed72:	d43d      	bmi.n	801edf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801ed74:	4594      	cmp	ip, r2
 801ed76:	dd3b      	ble.n	801edf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801ed78:	f1ba 0f00 	cmp.w	sl, #0
 801ed7c:	d038      	beq.n	801edf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801ed7e:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801ed82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ed86:	441d      	add	r5, r3
 801ed88:	3601      	adds	r6, #1
 801ed8a:	d435      	bmi.n	801edf8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801ed8c:	45b0      	cmp	r8, r6
 801ed8e:	dd33      	ble.n	801edf8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801ed90:	b390      	cbz	r0, 801edf8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801ed92:	2c00      	cmp	r4, #0
 801ed94:	db2e      	blt.n	801edf4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801ed96:	45a4      	cmp	ip, r4
 801ed98:	dd2c      	ble.n	801edf4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801ed9a:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801ed9e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801eda2:	441e      	add	r6, r3
 801eda4:	1c62      	adds	r2, r4, #1
 801eda6:	d42a      	bmi.n	801edfe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801eda8:	4594      	cmp	ip, r2
 801edaa:	dd28      	ble.n	801edfe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801edac:	f1ba 0f00 	cmp.w	sl, #0
 801edb0:	d025      	beq.n	801edfe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801edb2:	44f4      	add	ip, lr
 801edb4:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801edb8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801edbc:	4413      	add	r3, r2
 801edbe:	f1ba 0f0f 	cmp.w	sl, #15
 801edc2:	f897 8000 	ldrb.w	r8, [r7]
 801edc6:	f895 9000 	ldrb.w	r9, [r5]
 801edca:	f896 e000 	ldrb.w	lr, [r6]
 801edce:	f893 c000 	ldrb.w	ip, [r3]
 801edd2:	d801      	bhi.n	801edd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 801edd4:	280f      	cmp	r0, #15
 801edd6:	d914      	bls.n	801ee02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 801edd8:	4b29      	ldr	r3, [pc, #164]	; (801ee80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801edda:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801edde:	4a29      	ldr	r2, [pc, #164]	; (801ee84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801ede0:	4829      	ldr	r0, [pc, #164]	; (801ee88 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801ede2:	f005 ff39 	bl	8024c58 <__assert_func>
 801ede6:	af01      	add	r7, sp, #4
 801ede8:	e7c2      	b.n	801ed70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801edea:	ad01      	add	r5, sp, #4
 801edec:	462f      	mov	r7, r5
 801edee:	e7cb      	b.n	801ed88 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801edf0:	ad01      	add	r5, sp, #4
 801edf2:	e7c9      	b.n	801ed88 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801edf4:	ae01      	add	r6, sp, #4
 801edf6:	e7d5      	b.n	801eda4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 801edf8:	ab01      	add	r3, sp, #4
 801edfa:	461e      	mov	r6, r3
 801edfc:	e7df      	b.n	801edbe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801edfe:	ab01      	add	r3, sp, #4
 801ee00:	e7dd      	b.n	801edbe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801ee02:	fa1f f48a 	uxth.w	r4, sl
 801ee06:	b280      	uxth	r0, r0
 801ee08:	fb04 fa00 	mul.w	sl, r4, r0
 801ee0c:	0124      	lsls	r4, r4, #4
 801ee0e:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801ee12:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801ee16:	b282      	uxth	r2, r0
 801ee18:	eba4 000a 	sub.w	r0, r4, sl
 801ee1c:	ebab 0b02 	sub.w	fp, fp, r2
 801ee20:	b280      	uxth	r0, r0
 801ee22:	fa1f fb8b 	uxth.w	fp, fp
 801ee26:	fb00 f909 	mul.w	r9, r0, r9
 801ee2a:	fb0b 9808 	mla	r8, fp, r8, r9
 801ee2e:	fb02 8e0e 	mla	lr, r2, lr, r8
 801ee32:	fb0a ec0c 	mla	ip, sl, ip, lr
 801ee36:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ee3a:	f881 c000 	strb.w	ip, [r1]
 801ee3e:	786c      	ldrb	r4, [r5, #1]
 801ee40:	f897 c001 	ldrb.w	ip, [r7, #1]
 801ee44:	4344      	muls	r4, r0
 801ee46:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801ee4a:	7874      	ldrb	r4, [r6, #1]
 801ee4c:	fb02 cc04 	mla	ip, r2, r4, ip
 801ee50:	785c      	ldrb	r4, [r3, #1]
 801ee52:	fb0a c404 	mla	r4, sl, r4, ip
 801ee56:	1224      	asrs	r4, r4, #8
 801ee58:	704c      	strb	r4, [r1, #1]
 801ee5a:	78ad      	ldrb	r5, [r5, #2]
 801ee5c:	78bc      	ldrb	r4, [r7, #2]
 801ee5e:	4368      	muls	r0, r5
 801ee60:	fb0b 0b04 	mla	fp, fp, r4, r0
 801ee64:	78b0      	ldrb	r0, [r6, #2]
 801ee66:	fb02 b000 	mla	r0, r2, r0, fp
 801ee6a:	789a      	ldrb	r2, [r3, #2]
 801ee6c:	fb0a 0a02 	mla	sl, sl, r2, r0
 801ee70:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ee74:	f881 a002 	strb.w	sl, [r1, #2]
 801ee78:	b003      	add	sp, #12
 801ee7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee7e:	bf00      	nop
 801ee80:	0802b67c 	.word	0x0802b67c
 801ee84:	0802bb72 	.word	0x0802bb72
 801ee88:	0802b745 	.word	0x0802b745

0801ee8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ee8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee90:	ed2d 8b0a 	vpush	{d8-d12}
 801ee94:	b08f      	sub	sp, #60	; 0x3c
 801ee96:	eeb0 aa40 	vmov.f32	s20, s0
 801ee9a:	eef0 9a60 	vmov.f32	s19, s1
 801ee9e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801eea0:	eeb0 9a41 	vmov.f32	s18, s2
 801eea4:	9307      	str	r3, [sp, #28]
 801eea6:	eeb0 8a62 	vmov.f32	s16, s5
 801eeaa:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801eeae:	eef0 8a43 	vmov.f32	s17, s6
 801eeb2:	900d      	str	r0, [sp, #52]	; 0x34
 801eeb4:	eeb0 ca44 	vmov.f32	s24, s8
 801eeb8:	6860      	ldr	r0, [r4, #4]
 801eeba:	eef0 ba64 	vmov.f32	s23, s9
 801eebe:	9309      	str	r3, [sp, #36]	; 0x24
 801eec0:	eeb0 ba45 	vmov.f32	s22, s10
 801eec4:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801eec8:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 801eecc:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 801eed0:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801eed4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801eed6:	fb00 1303 	mla	r3, r0, r3, r1
 801eeda:	6821      	ldr	r1, [r4, #0]
 801eedc:	6854      	ldr	r4, [r2, #4]
 801eede:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eee2:	3404      	adds	r4, #4
 801eee4:	18cb      	adds	r3, r1, r3
 801eee6:	9308      	str	r3, [sp, #32]
 801eee8:	6813      	ldr	r3, [r2, #0]
 801eeea:	930a      	str	r3, [sp, #40]	; 0x28
 801eeec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eeee:	2b00      	cmp	r3, #0
 801eef0:	dc03      	bgt.n	801eefa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801eef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801eef4:	2b00      	cmp	r3, #0
 801eef6:	f340 81d2 	ble.w	801f29e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801eefa:	9b07      	ldr	r3, [sp, #28]
 801eefc:	2b00      	cmp	r3, #0
 801eefe:	f340 80e3 	ble.w	801f0c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801ef02:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801ef04:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ef06:	1412      	asrs	r2, r2, #16
 801ef08:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ef0c:	d42f      	bmi.n	801ef6e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801ef0e:	1c51      	adds	r1, r2, #1
 801ef10:	428d      	cmp	r5, r1
 801ef12:	dd2f      	ble.n	801ef74 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801ef14:	2b00      	cmp	r3, #0
 801ef16:	db2d      	blt.n	801ef74 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801ef18:	1c59      	adds	r1, r3, #1
 801ef1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ef1c:	4288      	cmp	r0, r1
 801ef1e:	dd29      	ble.n	801ef74 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801ef20:	9b07      	ldr	r3, [sp, #28]
 801ef22:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ef24:	3b01      	subs	r3, #1
 801ef26:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801ef28:	fb02 1203 	mla	r2, r2, r3, r1
 801ef2c:	1412      	asrs	r2, r2, #16
 801ef2e:	d42b      	bmi.n	801ef88 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801ef30:	3201      	adds	r2, #1
 801ef32:	4295      	cmp	r5, r2
 801ef34:	dd28      	ble.n	801ef88 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801ef36:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801ef38:	9924      	ldr	r1, [sp, #144]	; 0x90
 801ef3a:	fb02 1303 	mla	r3, r2, r3, r1
 801ef3e:	141b      	asrs	r3, r3, #16
 801ef40:	d422      	bmi.n	801ef88 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801ef42:	3301      	adds	r3, #1
 801ef44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ef46:	429a      	cmp	r2, r3
 801ef48:	dd1e      	ble.n	801ef88 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801ef4a:	9b08      	ldr	r3, [sp, #32]
 801ef4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801ef50:	f103 0803 	add.w	r8, r3, #3
 801ef54:	f1ba 0f00 	cmp.w	sl, #0
 801ef58:	f300 8119 	bgt.w	801f18e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 801ef5c:	9b07      	ldr	r3, [sp, #28]
 801ef5e:	9a08      	ldr	r2, [sp, #32]
 801ef60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ef64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ef68:	441a      	add	r2, r3
 801ef6a:	9208      	str	r2, [sp, #32]
 801ef6c:	e0ae      	b.n	801f0cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801ef6e:	1c51      	adds	r1, r2, #1
 801ef70:	f040 809b 	bne.w	801f0aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801ef74:	42aa      	cmp	r2, r5
 801ef76:	f280 8098 	bge.w	801f0aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801ef7a:	1c5a      	adds	r2, r3, #1
 801ef7c:	f2c0 8095 	blt.w	801f0aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801ef80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ef82:	4293      	cmp	r3, r2
 801ef84:	f280 8091 	bge.w	801f0aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801ef88:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 801ef8c:	f1bb 0f00 	cmp.w	fp, #0
 801ef90:	dde4      	ble.n	801ef5c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801ef92:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ef94:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801ef96:	141a      	asrs	r2, r3, #16
 801ef98:	9924      	ldr	r1, [sp, #144]	; 0x90
 801ef9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ef9c:	1400      	asrs	r0, r0, #16
 801ef9e:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801efa2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801efa6:	f100 80dc 	bmi.w	801f162 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 801efaa:	1c47      	adds	r7, r0, #1
 801efac:	42bd      	cmp	r5, r7
 801efae:	f340 80da 	ble.w	801f166 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801efb2:	2a00      	cmp	r2, #0
 801efb4:	f2c0 80d7 	blt.w	801f166 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801efb8:	f102 0c01 	add.w	ip, r2, #1
 801efbc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801efbe:	4567      	cmp	r7, ip
 801efc0:	f340 80d1 	ble.w	801f166 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801efc4:	fb02 0005 	mla	r0, r2, r5, r0
 801efc8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801efca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801efcc:	f817 8000 	ldrb.w	r8, [r7, r0]
 801efd0:	4402      	add	r2, r0
 801efd2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801efd6:	eb04 0c08 	add.w	ip, r4, r8
 801efda:	2b00      	cmp	r3, #0
 801efdc:	f000 80b3 	beq.w	801f146 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801efe0:	7857      	ldrb	r7, [r2, #1]
 801efe2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801efe6:	4427      	add	r7, r4
 801efe8:	2900      	cmp	r1, #0
 801efea:	f000 80b4 	beq.w	801f156 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 801efee:	1950      	adds	r0, r2, r5
 801eff0:	5d52      	ldrb	r2, [r2, r5]
 801eff2:	7840      	ldrb	r0, [r0, #1]
 801eff4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eff8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801effc:	4422      	add	r2, r4
 801effe:	4420      	add	r0, r4
 801f000:	b29b      	uxth	r3, r3
 801f002:	f814 a008 	ldrb.w	sl, [r4, r8]
 801f006:	b289      	uxth	r1, r1
 801f008:	f897 8000 	ldrb.w	r8, [r7]
 801f00c:	fb03 f901 	mul.w	r9, r3, r1
 801f010:	011b      	lsls	r3, r3, #4
 801f012:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f016:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f01a:	eba3 0309 	sub.w	r3, r3, r9
 801f01e:	b289      	uxth	r1, r1
 801f020:	b29b      	uxth	r3, r3
 801f022:	ebae 0e01 	sub.w	lr, lr, r1
 801f026:	fb03 f808 	mul.w	r8, r3, r8
 801f02a:	fa1f fe8e 	uxth.w	lr, lr
 801f02e:	fb0e 880a 	mla	r8, lr, sl, r8
 801f032:	f892 a000 	ldrb.w	sl, [r2]
 801f036:	fb01 880a 	mla	r8, r1, sl, r8
 801f03a:	f890 a000 	ldrb.w	sl, [r0]
 801f03e:	fb09 880a 	mla	r8, r9, sl, r8
 801f042:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f046:	f886 8000 	strb.w	r8, [r6]
 801f04a:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f04e:	f89c a001 	ldrb.w	sl, [ip, #1]
 801f052:	fb03 f808 	mul.w	r8, r3, r8
 801f056:	fb0e 880a 	mla	r8, lr, sl, r8
 801f05a:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f05e:	fb01 880a 	mla	r8, r1, sl, r8
 801f062:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f066:	fb09 880a 	mla	r8, r9, sl, r8
 801f06a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f06e:	f886 8001 	strb.w	r8, [r6, #1]
 801f072:	78bf      	ldrb	r7, [r7, #2]
 801f074:	f89c c002 	ldrb.w	ip, [ip, #2]
 801f078:	437b      	muls	r3, r7
 801f07a:	7892      	ldrb	r2, [r2, #2]
 801f07c:	fb0e 330c 	mla	r3, lr, ip, r3
 801f080:	fb01 3102 	mla	r1, r1, r2, r3
 801f084:	7882      	ldrb	r2, [r0, #2]
 801f086:	fb09 1902 	mla	r9, r9, r2, r1
 801f08a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f08e:	f886 9002 	strb.w	r9, [r6, #2]
 801f092:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f094:	3603      	adds	r6, #3
 801f096:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f098:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f09c:	4413      	add	r3, r2
 801f09e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f0a0:	9323      	str	r3, [sp, #140]	; 0x8c
 801f0a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f0a4:	4413      	add	r3, r2
 801f0a6:	9324      	str	r3, [sp, #144]	; 0x90
 801f0a8:	e770      	b.n	801ef8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801f0aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f0ac:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f0ae:	4413      	add	r3, r2
 801f0b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f0b2:	9323      	str	r3, [sp, #140]	; 0x8c
 801f0b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f0b6:	4413      	add	r3, r2
 801f0b8:	9324      	str	r3, [sp, #144]	; 0x90
 801f0ba:	9b07      	ldr	r3, [sp, #28]
 801f0bc:	3b01      	subs	r3, #1
 801f0be:	9307      	str	r3, [sp, #28]
 801f0c0:	9b08      	ldr	r3, [sp, #32]
 801f0c2:	3303      	adds	r3, #3
 801f0c4:	9308      	str	r3, [sp, #32]
 801f0c6:	e718      	b.n	801eefa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801f0c8:	f47f af2a 	bne.w	801ef20 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801f0cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f0ce:	2b00      	cmp	r3, #0
 801f0d0:	f340 80e5 	ble.w	801f29e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801f0d4:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801f0d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f0da:	ee79 9aab 	vadd.f32	s19, s19, s23
 801f0de:	eef0 6a48 	vmov.f32	s13, s16
 801f0e2:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801f0e6:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801f0ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f0ee:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801f0f2:	eef0 6a68 	vmov.f32	s13, s17
 801f0f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f0fa:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 801f0fe:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f102:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f106:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f10a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f10e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f112:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f116:	ee18 2a10 	vmov	r2, s16
 801f11a:	eeb0 8a47 	vmov.f32	s16, s14
 801f11e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f122:	ee18 2a90 	vmov	r2, s17
 801f126:	9325      	str	r3, [sp, #148]	; 0x94
 801f128:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f12a:	eef0 8a67 	vmov.f32	s17, s15
 801f12e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f132:	9326      	str	r3, [sp, #152]	; 0x98
 801f134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f136:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f138:	3b01      	subs	r3, #1
 801f13a:	930b      	str	r3, [sp, #44]	; 0x2c
 801f13c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f13e:	bf08      	it	eq
 801f140:	4613      	moveq	r3, r2
 801f142:	9307      	str	r3, [sp, #28]
 801f144:	e6d2      	b.n	801eeec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801f146:	b149      	cbz	r1, 801f15c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801f148:	5d52      	ldrb	r2, [r2, r5]
 801f14a:	4660      	mov	r0, ip
 801f14c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f150:	4422      	add	r2, r4
 801f152:	4667      	mov	r7, ip
 801f154:	e754      	b.n	801f000 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801f156:	4660      	mov	r0, ip
 801f158:	4662      	mov	r2, ip
 801f15a:	e751      	b.n	801f000 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801f15c:	4660      	mov	r0, ip
 801f15e:	4662      	mov	r2, ip
 801f160:	e7f7      	b.n	801f152 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801f162:	1c47      	adds	r7, r0, #1
 801f164:	d195      	bne.n	801f092 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f166:	4285      	cmp	r5, r0
 801f168:	dd93      	ble.n	801f092 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f16a:	1c57      	adds	r7, r2, #1
 801f16c:	db91      	blt.n	801f092 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f16e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f170:	4297      	cmp	r7, r2
 801f172:	dd8e      	ble.n	801f092 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f174:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801f178:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801f17c:	e9cd 5700 	strd	r5, r7, [sp]
 801f180:	4623      	mov	r3, r4
 801f182:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f184:	4631      	mov	r1, r6
 801f186:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f188:	f7ff fdca 	bl	801ed20 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801f18c:	e781      	b.n	801f092 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f18e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801f190:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801f192:	1410      	asrs	r0, r2, #16
 801f194:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f198:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f19a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f19c:	1412      	asrs	r2, r2, #16
 801f19e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f1a2:	fb05 2000 	mla	r0, r5, r0, r2
 801f1a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f1a8:	f816 e000 	ldrb.w	lr, [r6, r0]
 801f1ac:	4402      	add	r2, r0
 801f1ae:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f1b2:	eb04 070e 	add.w	r7, r4, lr
 801f1b6:	2b00      	cmp	r3, #0
 801f1b8:	d063      	beq.n	801f282 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801f1ba:	7856      	ldrb	r6, [r2, #1]
 801f1bc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f1c0:	4426      	add	r6, r4
 801f1c2:	2900      	cmp	r1, #0
 801f1c4:	d065      	beq.n	801f292 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801f1c6:	1950      	adds	r0, r2, r5
 801f1c8:	5d52      	ldrb	r2, [r2, r5]
 801f1ca:	7840      	ldrb	r0, [r0, #1]
 801f1cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f1d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f1d4:	4422      	add	r2, r4
 801f1d6:	4420      	add	r0, r4
 801f1d8:	b29b      	uxth	r3, r3
 801f1da:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801f1de:	b289      	uxth	r1, r1
 801f1e0:	f896 e000 	ldrb.w	lr, [r6]
 801f1e4:	f108 0803 	add.w	r8, r8, #3
 801f1e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f1ec:	fb03 f901 	mul.w	r9, r3, r1
 801f1f0:	011b      	lsls	r3, r3, #4
 801f1f2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f1f6:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801f1fa:	eba3 0309 	sub.w	r3, r3, r9
 801f1fe:	b289      	uxth	r1, r1
 801f200:	b29b      	uxth	r3, r3
 801f202:	ebac 0c01 	sub.w	ip, ip, r1
 801f206:	fb03 fe0e 	mul.w	lr, r3, lr
 801f20a:	fa1f fc8c 	uxth.w	ip, ip
 801f20e:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f212:	f892 b000 	ldrb.w	fp, [r2]
 801f216:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f21a:	f890 b000 	ldrb.w	fp, [r0]
 801f21e:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f222:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f226:	f808 ec06 	strb.w	lr, [r8, #-6]
 801f22a:	f896 e001 	ldrb.w	lr, [r6, #1]
 801f22e:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f232:	fb03 fe0e 	mul.w	lr, r3, lr
 801f236:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f23a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f23e:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f242:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f246:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f24a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f24e:	f808 ec05 	strb.w	lr, [r8, #-5]
 801f252:	78b6      	ldrb	r6, [r6, #2]
 801f254:	78bf      	ldrb	r7, [r7, #2]
 801f256:	4373      	muls	r3, r6
 801f258:	7896      	ldrb	r6, [r2, #2]
 801f25a:	7882      	ldrb	r2, [r0, #2]
 801f25c:	fb0c 3307 	mla	r3, ip, r7, r3
 801f260:	fb01 3306 	mla	r3, r1, r6, r3
 801f264:	fb09 3902 	mla	r9, r9, r2, r3
 801f268:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f26a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f26c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f270:	4413      	add	r3, r2
 801f272:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f274:	f808 9c04 	strb.w	r9, [r8, #-4]
 801f278:	9323      	str	r3, [sp, #140]	; 0x8c
 801f27a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f27c:	4413      	add	r3, r2
 801f27e:	9324      	str	r3, [sp, #144]	; 0x90
 801f280:	e668      	b.n	801ef54 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801f282:	b149      	cbz	r1, 801f298 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 801f284:	5d52      	ldrb	r2, [r2, r5]
 801f286:	4638      	mov	r0, r7
 801f288:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f28c:	4422      	add	r2, r4
 801f28e:	463e      	mov	r6, r7
 801f290:	e7a2      	b.n	801f1d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801f292:	4638      	mov	r0, r7
 801f294:	463a      	mov	r2, r7
 801f296:	e79f      	b.n	801f1d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801f298:	4638      	mov	r0, r7
 801f29a:	463a      	mov	r2, r7
 801f29c:	e7f7      	b.n	801f28e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 801f29e:	b00f      	add	sp, #60	; 0x3c
 801f2a0:	ecbd 8b0a 	vpop	{d8-d12}
 801f2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f2a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801f2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2ac:	b087      	sub	sp, #28
 801f2ae:	7888      	ldrb	r0, [r1, #2]
 801f2b0:	9002      	str	r0, [sp, #8]
 801f2b2:	7848      	ldrb	r0, [r1, #1]
 801f2b4:	9e02      	ldr	r6, [sp, #8]
 801f2b6:	9003      	str	r0, [sp, #12]
 801f2b8:	7808      	ldrb	r0, [r1, #0]
 801f2ba:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801f2be:	9004      	str	r0, [sp, #16]
 801f2c0:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801f2c4:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 801f2c8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801f2cc:	9e03      	ldr	r6, [sp, #12]
 801f2ce:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 801f2d2:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801f2d6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 801f2da:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 801f2de:	fb04 7508 	mla	r5, r4, r8, r7
 801f2e2:	2c00      	cmp	r4, #0
 801f2e4:	eb02 0905 	add.w	r9, r2, r5
 801f2e8:	db45      	blt.n	801f376 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801f2ea:	45a2      	cmp	sl, r4
 801f2ec:	dd43      	ble.n	801f376 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801f2ee:	2f00      	cmp	r7, #0
 801f2f0:	db3f      	blt.n	801f372 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801f2f2:	45b8      	cmp	r8, r7
 801f2f4:	dd3d      	ble.n	801f372 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801f2f6:	5d52      	ldrb	r2, [r2, r5]
 801f2f8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801f2fc:	1c7a      	adds	r2, r7, #1
 801f2fe:	d43d      	bmi.n	801f37c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801f300:	4590      	cmp	r8, r2
 801f302:	dd3b      	ble.n	801f37c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801f304:	f1bc 0f00 	cmp.w	ip, #0
 801f308:	d038      	beq.n	801f37c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801f30a:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f30e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801f312:	3401      	adds	r4, #1
 801f314:	d436      	bmi.n	801f384 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801f316:	45a2      	cmp	sl, r4
 801f318:	dd34      	ble.n	801f384 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801f31a:	f1be 0f00 	cmp.w	lr, #0
 801f31e:	d031      	beq.n	801f384 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801f320:	2f00      	cmp	r7, #0
 801f322:	db2d      	blt.n	801f380 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801f324:	45b8      	cmp	r8, r7
 801f326:	dd2b      	ble.n	801f380 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801f328:	f819 2008 	ldrb.w	r2, [r9, r8]
 801f32c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801f330:	3701      	adds	r7, #1
 801f332:	d409      	bmi.n	801f348 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801f334:	45b8      	cmp	r8, r7
 801f336:	dd07      	ble.n	801f348 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801f338:	f1bc 0f00 	cmp.w	ip, #0
 801f33c:	d004      	beq.n	801f348 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801f33e:	44c8      	add	r8, r9
 801f340:	f898 2001 	ldrb.w	r2, [r8, #1]
 801f344:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801f348:	f1bc 0f0f 	cmp.w	ip, #15
 801f34c:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801f350:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801f354:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801f358:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801f35c:	d802      	bhi.n	801f364 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 801f35e:	f1be 0f0f 	cmp.w	lr, #15
 801f362:	d911      	bls.n	801f388 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 801f364:	4b77      	ldr	r3, [pc, #476]	; (801f544 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 801f366:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f36a:	4a77      	ldr	r2, [pc, #476]	; (801f548 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 801f36c:	4877      	ldr	r0, [pc, #476]	; (801f54c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 801f36e:	f005 fc73 	bl	8024c58 <__assert_func>
 801f372:	4606      	mov	r6, r0
 801f374:	e7c2      	b.n	801f2fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 801f376:	4605      	mov	r5, r0
 801f378:	4606      	mov	r6, r0
 801f37a:	e7ca      	b.n	801f312 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801f37c:	4605      	mov	r5, r0
 801f37e:	e7c8      	b.n	801f312 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801f380:	4604      	mov	r4, r0
 801f382:	e7d5      	b.n	801f330 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 801f384:	4604      	mov	r4, r0
 801f386:	e7df      	b.n	801f348 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801f388:	fa1f fc8c 	uxth.w	ip, ip
 801f38c:	fa1f f28e 	uxth.w	r2, lr
 801f390:	fb02 fe0c 	mul.w	lr, r2, ip
 801f394:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801f398:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 801f39c:	ebac 070e 	sub.w	r7, ip, lr
 801f3a0:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801f3a4:	b292      	uxth	r2, r2
 801f3a6:	b2bf      	uxth	r7, r7
 801f3a8:	1a9b      	subs	r3, r3, r2
 801f3aa:	fb07 fc0a 	mul.w	ip, r7, sl
 801f3ae:	b29b      	uxth	r3, r3
 801f3b0:	fb03 cc0b 	mla	ip, r3, fp, ip
 801f3b4:	9301      	str	r3, [sp, #4]
 801f3b6:	fb02 cc09 	mla	ip, r2, r9, ip
 801f3ba:	fb0e cc08 	mla	ip, lr, r8, ip
 801f3be:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f3c2:	9305      	str	r3, [sp, #20]
 801f3c4:	2b00      	cmp	r3, #0
 801f3c6:	f000 80b9 	beq.w	801f53c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 801f3ca:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801f3ce:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f3d2:	fb0b fc0c 	mul.w	ip, fp, ip
 801f3d6:	fb0b f606 	mul.w	r6, fp, r6
 801f3da:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801f3de:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f3e2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801f3e6:	44dc      	add	ip, fp
 801f3e8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801f3ec:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f3f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f3f4:	fb0a fb0b 	mul.w	fp, sl, fp
 801f3f8:	fb0a fa05 	mul.w	sl, sl, r5
 801f3fc:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801f400:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801f404:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 801f408:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f40c:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f410:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f414:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801f418:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f41c:	0a36      	lsrs	r6, r6, #8
 801f41e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f422:	44dc      	add	ip, fp
 801f424:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f428:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f42c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f430:	fb09 fb0b 	mul.w	fp, r9, fp
 801f434:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f438:	fb09 f904 	mul.w	r9, r9, r4
 801f43c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f440:	ea4f 251b 	mov.w	r5, fp, lsr #8
 801f444:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f448:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801f44c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f450:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f454:	fb0c fc07 	mul.w	ip, ip, r7
 801f458:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801f45c:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 801f460:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f464:	445d      	add	r5, fp
 801f466:	fb08 f404 	mul.w	r4, r8, r4
 801f46a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f46e:	fb08 f800 	mul.w	r8, r8, r0
 801f472:	0a2d      	lsrs	r5, r5, #8
 801f474:	0a20      	lsrs	r0, r4, #8
 801f476:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801f47a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f47e:	fb07 f70a 	mul.w	r7, r7, sl
 801f482:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f486:	4404      	add	r4, r0
 801f488:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801f48c:	0a24      	lsrs	r4, r4, #8
 801f48e:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 801f492:	9801      	ldr	r0, [sp, #4]
 801f494:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f498:	fb03 cc00 	mla	ip, r3, r0, ip
 801f49c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f4a0:	fb00 7606 	mla	r6, r0, r6, r7
 801f4a4:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 801f4a8:	fb04 cc0e 	mla	ip, r4, lr, ip
 801f4ac:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801f4b0:	b280      	uxth	r0, r0
 801f4b2:	9c04      	ldr	r4, [sp, #16]
 801f4b4:	fb05 cc02 	mla	ip, r5, r2, ip
 801f4b8:	fb0e 6e08 	mla	lr, lr, r8, r6
 801f4bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f4c0:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801f4c4:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 801f4c8:	fb02 ec0c 	mla	ip, r2, ip, lr
 801f4cc:	9a05      	ldr	r2, [sp, #20]
 801f4ce:	4342      	muls	r2, r0
 801f4d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f4d4:	1c53      	adds	r3, r2, #1
 801f4d6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f4da:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f4de:	ea45 0c0c 	orr.w	ip, r5, ip
 801f4e2:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801f4e6:	fa5f f28c 	uxtb.w	r2, ip
 801f4ea:	b2db      	uxtb	r3, r3
 801f4ec:	fb14 f403 	smulbb	r4, r4, r3
 801f4f0:	fb02 4200 	mla	r2, r2, r0, r4
 801f4f4:	b292      	uxth	r2, r2
 801f4f6:	1c54      	adds	r4, r2, #1
 801f4f8:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801f4fc:	9c03      	ldr	r4, [sp, #12]
 801f4fe:	fb14 f403 	smulbb	r4, r4, r3
 801f502:	1212      	asrs	r2, r2, #8
 801f504:	700a      	strb	r2, [r1, #0]
 801f506:	f3cc 2207 	ubfx	r2, ip, #8, #8
 801f50a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f50e:	fb02 4200 	mla	r2, r2, r0, r4
 801f512:	b292      	uxth	r2, r2
 801f514:	1c54      	adds	r4, r2, #1
 801f516:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801f51a:	1212      	asrs	r2, r2, #8
 801f51c:	704a      	strb	r2, [r1, #1]
 801f51e:	9a02      	ldr	r2, [sp, #8]
 801f520:	fb12 f303 	smulbb	r3, r2, r3
 801f524:	fb0c 3c00 	mla	ip, ip, r0, r3
 801f528:	fa1f fc8c 	uxth.w	ip, ip
 801f52c:	f10c 0301 	add.w	r3, ip, #1
 801f530:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f534:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f538:	f881 c002 	strb.w	ip, [r1, #2]
 801f53c:	b007      	add	sp, #28
 801f53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f542:	bf00      	nop
 801f544:	0802b67c 	.word	0x0802b67c
 801f548:	0802bb72 	.word	0x0802bb72
 801f54c:	0802b745 	.word	0x0802b745

0801f550 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f554:	ed2d 8b08 	vpush	{d8-d11}
 801f558:	b09b      	sub	sp, #108	; 0x6c
 801f55a:	eeb0 aa40 	vmov.f32	s20, s0
 801f55e:	eef0 9a60 	vmov.f32	s19, s1
 801f562:	930a      	str	r3, [sp, #40]	; 0x28
 801f564:	eeb0 9a41 	vmov.f32	s18, s2
 801f568:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801f56c:	eeb0 8a62 	vmov.f32	s16, s5
 801f570:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 801f572:	eef0 8a43 	vmov.f32	s17, s6
 801f576:	9312      	str	r3, [sp, #72]	; 0x48
 801f578:	eef0 ba44 	vmov.f32	s23, s8
 801f57c:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801f580:	eeb0 ba64 	vmov.f32	s22, s9
 801f584:	9019      	str	r0, [sp, #100]	; 0x64
 801f586:	eef0 aa45 	vmov.f32	s21, s10
 801f58a:	9114      	str	r1, [sp, #80]	; 0x50
 801f58c:	9317      	str	r3, [sp, #92]	; 0x5c
 801f58e:	6868      	ldr	r0, [r5, #4]
 801f590:	9218      	str	r2, [sp, #96]	; 0x60
 801f592:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801f594:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801f598:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801f59c:	fb00 1303 	mla	r3, r0, r3, r1
 801f5a0:	6829      	ldr	r1, [r5, #0]
 801f5a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f5a6:	18cb      	adds	r3, r1, r3
 801f5a8:	930d      	str	r3, [sp, #52]	; 0x34
 801f5aa:	6813      	ldr	r3, [r2, #0]
 801f5ac:	9313      	str	r3, [sp, #76]	; 0x4c
 801f5ae:	6853      	ldr	r3, [r2, #4]
 801f5b0:	3304      	adds	r3, #4
 801f5b2:	9309      	str	r3, [sp, #36]	; 0x24
 801f5b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f5b6:	2b00      	cmp	r3, #0
 801f5b8:	dc03      	bgt.n	801f5c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801f5ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f5bc:	2b00      	cmp	r3, #0
 801f5be:	f340 8352 	ble.w	801fc66 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801f5c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f5c4:	2b00      	cmp	r3, #0
 801f5c6:	f340 81a2 	ble.w	801f90e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 801f5ca:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f5cc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f5ce:	1412      	asrs	r2, r2, #16
 801f5d0:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f5d4:	d431      	bmi.n	801f63a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801f5d6:	1c51      	adds	r1, r2, #1
 801f5d8:	428c      	cmp	r4, r1
 801f5da:	dd31      	ble.n	801f640 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801f5dc:	2b00      	cmp	r3, #0
 801f5de:	db2f      	blt.n	801f640 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801f5e0:	1c59      	adds	r1, r3, #1
 801f5e2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f5e4:	4288      	cmp	r0, r1
 801f5e6:	dd2b      	ble.n	801f640 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801f5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f5ea:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f5ec:	3b01      	subs	r3, #1
 801f5ee:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801f5f0:	fb02 1203 	mla	r2, r2, r3, r1
 801f5f4:	1412      	asrs	r2, r2, #16
 801f5f6:	d42d      	bmi.n	801f654 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f5f8:	3201      	adds	r2, #1
 801f5fa:	4294      	cmp	r4, r2
 801f5fc:	dd2a      	ble.n	801f654 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f5fe:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f600:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801f602:	fb02 1303 	mla	r3, r2, r3, r1
 801f606:	141b      	asrs	r3, r3, #16
 801f608:	d424      	bmi.n	801f654 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f60a:	3301      	adds	r3, #1
 801f60c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f60e:	429a      	cmp	r2, r3
 801f610:	dd20      	ble.n	801f654 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f614:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 801f618:	f103 0e03 	add.w	lr, r3, #3
 801f61c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f61e:	9315      	str	r3, [sp, #84]	; 0x54
 801f620:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f622:	2b00      	cmp	r3, #0
 801f624:	f300 81de 	bgt.w	801f9e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 801f628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f62a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f62c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f630:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f634:	441a      	add	r2, r3
 801f636:	920d      	str	r2, [sp, #52]	; 0x34
 801f638:	e16b      	b.n	801f912 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 801f63a:	1c51      	adds	r1, r2, #1
 801f63c:	f040 8158 	bne.w	801f8f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f640:	42a2      	cmp	r2, r4
 801f642:	f280 8155 	bge.w	801f8f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f646:	1c5a      	adds	r2, r3, #1
 801f648:	f2c0 8152 	blt.w	801f8f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f64c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f64e:	4293      	cmp	r3, r2
 801f650:	f280 814e 	bge.w	801f8f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801f654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f656:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801f658:	9316      	str	r3, [sp, #88]	; 0x58
 801f65a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801f65e:	9315      	str	r3, [sp, #84]	; 0x54
 801f660:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f662:	2b00      	cmp	r3, #0
 801f664:	dde0      	ble.n	801f628 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801f666:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f668:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f66a:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801f66e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f670:	141b      	asrs	r3, r3, #16
 801f672:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f676:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f678:	1412      	asrs	r2, r2, #16
 801f67a:	f100 819a 	bmi.w	801f9b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 801f67e:	1c55      	adds	r5, r2, #1
 801f680:	42ac      	cmp	r4, r5
 801f682:	f340 8198 	ble.w	801f9b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801f686:	2b00      	cmp	r3, #0
 801f688:	f2c0 8195 	blt.w	801f9b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801f68c:	1c5d      	adds	r5, r3, #1
 801f68e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801f690:	42af      	cmp	r7, r5
 801f692:	f340 8190 	ble.w	801f9b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801f696:	fb03 2304 	mla	r3, r3, r4, r2
 801f69a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f69c:	18d5      	adds	r5, r2, r3
 801f69e:	5cd3      	ldrb	r3, [r2, r3]
 801f6a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f6a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f6a6:	0e1f      	lsrs	r7, r3, #24
 801f6a8:	2800      	cmp	r0, #0
 801f6aa:	f000 8171 	beq.w	801f990 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801f6ae:	f895 c001 	ldrb.w	ip, [r5, #1]
 801f6b2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801f6b6:	920e      	str	r2, [sp, #56]	; 0x38
 801f6b8:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801f6bc:	2900      	cmp	r1, #0
 801f6be:	f000 8172 	beq.w	801f9a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 801f6c2:	eb05 0c04 	add.w	ip, r5, r4
 801f6c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f6c8:	5d2d      	ldrb	r5, [r5, r4]
 801f6ca:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801f6ce:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f6d2:	950b      	str	r5, [sp, #44]	; 0x2c
 801f6d4:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f6d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801f6da:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f6de:	0e15      	lsrs	r5, r2, #24
 801f6e0:	920f      	str	r2, [sp, #60]	; 0x3c
 801f6e2:	b280      	uxth	r0, r0
 801f6e4:	b289      	uxth	r1, r1
 801f6e6:	fb00 fa01 	mul.w	sl, r0, r1
 801f6ea:	0100      	lsls	r0, r0, #4
 801f6ec:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801f6f0:	eba0 080a 	sub.w	r8, r0, sl
 801f6f4:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801f6f8:	b289      	uxth	r1, r1
 801f6fa:	fa1f f888 	uxth.w	r8, r8
 801f6fe:	1a52      	subs	r2, r2, r1
 801f700:	fb08 f00e 	mul.w	r0, r8, lr
 801f704:	b292      	uxth	r2, r2
 801f706:	fb02 0007 	mla	r0, r2, r7, r0
 801f70a:	fb01 0009 	mla	r0, r1, r9, r0
 801f70e:	fb0a 0005 	mla	r0, sl, r5, r0
 801f712:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f716:	2800      	cmp	r0, #0
 801f718:	f000 80dd 	beq.w	801f8d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f71c:	2fff      	cmp	r7, #255	; 0xff
 801f71e:	d01a      	beq.n	801f756 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801f720:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801f724:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f728:	fb07 fc0c 	mul.w	ip, r7, ip
 801f72c:	435f      	muls	r7, r3
 801f72e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801f732:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f736:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801f73a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f73e:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801f742:	4463      	add	r3, ip
 801f744:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801f748:	0a1b      	lsrs	r3, r3, #8
 801f74a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801f74e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801f752:	ea43 030b 	orr.w	r3, r3, fp
 801f756:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f75a:	d01e      	beq.n	801f79a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801f75c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801f75e:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 801f762:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f766:	fb0e fb0b 	mul.w	fp, lr, fp
 801f76a:	fb0e fe07 	mul.w	lr, lr, r7
 801f76e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f772:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f776:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801f77a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f77e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801f782:	44dc      	add	ip, fp
 801f784:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f788:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f78c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f790:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f794:	ea4c 070e 	orr.w	r7, ip, lr
 801f798:	970e      	str	r7, [sp, #56]	; 0x38
 801f79a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f79e:	d01e      	beq.n	801f7de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801f7a0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f7a2:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801f7a6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f7aa:	fb09 fe0e 	mul.w	lr, r9, lr
 801f7ae:	fb09 f907 	mul.w	r9, r9, r7
 801f7b2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f7b6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f7ba:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801f7be:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f7c2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801f7c6:	44f4      	add	ip, lr
 801f7c8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f7cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f7d0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f7d4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f7d8:	ea4c 0709 	orr.w	r7, ip, r9
 801f7dc:	970b      	str	r7, [sp, #44]	; 0x2c
 801f7de:	2dff      	cmp	r5, #255	; 0xff
 801f7e0:	d01c      	beq.n	801f81c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 801f7e2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f7e4:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801f7e8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f7ec:	fb05 fe0e 	mul.w	lr, r5, lr
 801f7f0:	437d      	muls	r5, r7
 801f7f2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f7f6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f7fa:	f505 7780 	add.w	r7, r5, #256	; 0x100
 801f7fe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f802:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801f806:	44f4      	add	ip, lr
 801f808:	0a2d      	lsrs	r5, r5, #8
 801f80a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f80e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f812:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f816:	ea4c 0505 	orr.w	r5, ip, r5
 801f81a:	950f      	str	r5, [sp, #60]	; 0x3c
 801f81c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801f81e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801f822:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f826:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f82a:	fb08 f505 	mul.w	r5, r8, r5
 801f82e:	fb02 5507 	mla	r5, r2, r7, r5
 801f832:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f834:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f838:	fb01 5507 	mla	r5, r1, r7, r5
 801f83c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f83e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f842:	fb0a 5507 	mla	r5, sl, r7, r5
 801f846:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801f848:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f84c:	0a2d      	lsrs	r5, r5, #8
 801f84e:	fb08 f807 	mul.w	r8, r8, r7
 801f852:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f856:	fb02 8303 	mla	r3, r2, r3, r8
 801f85a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f85c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801f860:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f862:	fb01 330c 	mla	r3, r1, ip, r3
 801f866:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801f86a:	fb0a 3a01 	mla	sl, sl, r1, r3
 801f86e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f870:	9915      	ldr	r1, [sp, #84]	; 0x54
 801f872:	4343      	muls	r3, r0
 801f874:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f878:	1c58      	adds	r0, r3, #1
 801f87a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f87e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f882:	ea45 050a 	orr.w	r5, r5, sl
 801f886:	7833      	ldrb	r3, [r6, #0]
 801f888:	b2ea      	uxtb	r2, r5
 801f88a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801f88e:	fb12 f201 	smulbb	r2, r2, r1
 801f892:	b2c0      	uxtb	r0, r0
 801f894:	fb03 2300 	mla	r3, r3, r0, r2
 801f898:	b29b      	uxth	r3, r3
 801f89a:	1c5a      	adds	r2, r3, #1
 801f89c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f8a0:	7872      	ldrb	r2, [r6, #1]
 801f8a2:	fb12 f200 	smulbb	r2, r2, r0
 801f8a6:	121b      	asrs	r3, r3, #8
 801f8a8:	7033      	strb	r3, [r6, #0]
 801f8aa:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801f8ae:	0c2d      	lsrs	r5, r5, #16
 801f8b0:	fb03 2301 	mla	r3, r3, r1, r2
 801f8b4:	b29b      	uxth	r3, r3
 801f8b6:	1c5a      	adds	r2, r3, #1
 801f8b8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f8bc:	121b      	asrs	r3, r3, #8
 801f8be:	7073      	strb	r3, [r6, #1]
 801f8c0:	78b3      	ldrb	r3, [r6, #2]
 801f8c2:	fb13 f000 	smulbb	r0, r3, r0
 801f8c6:	fb05 0501 	mla	r5, r5, r1, r0
 801f8ca:	b2ad      	uxth	r5, r5
 801f8cc:	1c6b      	adds	r3, r5, #1
 801f8ce:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f8d2:	122d      	asrs	r5, r5, #8
 801f8d4:	70b5      	strb	r5, [r6, #2]
 801f8d6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f8d8:	3603      	adds	r6, #3
 801f8da:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f8dc:	4413      	add	r3, r2
 801f8de:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f8e0:	932d      	str	r3, [sp, #180]	; 0xb4
 801f8e2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f8e4:	4413      	add	r3, r2
 801f8e6:	932e      	str	r3, [sp, #184]	; 0xb8
 801f8e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f8ea:	3b01      	subs	r3, #1
 801f8ec:	9316      	str	r3, [sp, #88]	; 0x58
 801f8ee:	e6b7      	b.n	801f660 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801f8f0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f8f2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f8f4:	4413      	add	r3, r2
 801f8f6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801f8f8:	932d      	str	r3, [sp, #180]	; 0xb4
 801f8fa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f8fc:	4413      	add	r3, r2
 801f8fe:	932e      	str	r3, [sp, #184]	; 0xb8
 801f900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f902:	3b01      	subs	r3, #1
 801f904:	930a      	str	r3, [sp, #40]	; 0x28
 801f906:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f908:	3303      	adds	r3, #3
 801f90a:	930d      	str	r3, [sp, #52]	; 0x34
 801f90c:	e659      	b.n	801f5c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801f90e:	f47f ae6b 	bne.w	801f5e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801f912:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f914:	2b00      	cmp	r3, #0
 801f916:	f340 81a6 	ble.w	801fc66 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801f91a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f91e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f920:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f924:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f928:	eef0 6a48 	vmov.f32	s13, s16
 801f92c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f930:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f934:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f938:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801f93c:	eef0 6a68 	vmov.f32	s13, s17
 801f940:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f944:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 801f948:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f94c:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f950:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f954:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f958:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f95c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f960:	ee18 2a10 	vmov	r2, s16
 801f964:	eeb0 8a47 	vmov.f32	s16, s14
 801f968:	fb92 f3f3 	sdiv	r3, r2, r3
 801f96c:	ee18 2a90 	vmov	r2, s17
 801f970:	932f      	str	r3, [sp, #188]	; 0xbc
 801f972:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f974:	eef0 8a67 	vmov.f32	s17, s15
 801f978:	fb92 f3f3 	sdiv	r3, r2, r3
 801f97c:	9330      	str	r3, [sp, #192]	; 0xc0
 801f97e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f980:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801f982:	3b01      	subs	r3, #1
 801f984:	9314      	str	r3, [sp, #80]	; 0x50
 801f986:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f988:	bf08      	it	eq
 801f98a:	4613      	moveq	r3, r2
 801f98c:	930a      	str	r3, [sp, #40]	; 0x28
 801f98e:	e611      	b.n	801f5b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801f990:	b161      	cbz	r1, 801f9ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 801f992:	5d2a      	ldrb	r2, [r5, r4]
 801f994:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801f996:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801f99a:	25ff      	movs	r5, #255	; 0xff
 801f99c:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801f9a0:	920b      	str	r2, [sp, #44]	; 0x2c
 801f9a2:	46ae      	mov	lr, r5
 801f9a4:	e69d      	b.n	801f6e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801f9a6:	25ff      	movs	r5, #255	; 0xff
 801f9a8:	46a9      	mov	r9, r5
 801f9aa:	e69a      	b.n	801f6e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801f9ac:	25ff      	movs	r5, #255	; 0xff
 801f9ae:	46a9      	mov	r9, r5
 801f9b0:	e7f7      	b.n	801f9a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 801f9b2:	1c57      	adds	r7, r2, #1
 801f9b4:	d18f      	bne.n	801f8d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f9b6:	4294      	cmp	r4, r2
 801f9b8:	dd8d      	ble.n	801f8d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f9ba:	1c5d      	adds	r5, r3, #1
 801f9bc:	db8b      	blt.n	801f8d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f9be:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f9c0:	429d      	cmp	r5, r3
 801f9c2:	dd88      	ble.n	801f8d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f9c4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801f9c6:	9202      	str	r2, [sp, #8]
 801f9c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f9ca:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801f9ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f9d0:	9819      	ldr	r0, [sp, #100]	; 0x64
 801f9d2:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801f9d6:	e9cd 4300 	strd	r4, r3, [sp]
 801f9da:	4631      	mov	r1, r6
 801f9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f9de:	f7ff fc63 	bl	801f2a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801f9e2:	e778      	b.n	801f8d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801f9e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f9e6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f9e8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801f9ec:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f9ee:	1412      	asrs	r2, r2, #16
 801f9f0:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801f9f4:	141b      	asrs	r3, r3, #16
 801f9f6:	fb04 2303 	mla	r3, r4, r3, r2
 801f9fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f9fc:	18d5      	adds	r5, r2, r3
 801f9fe:	5cd3      	ldrb	r3, [r2, r3]
 801fa00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fa02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801fa06:	0e1e      	lsrs	r6, r3, #24
 801fa08:	2900      	cmp	r1, #0
 801fa0a:	f000 811b 	beq.w	801fc44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 801fa0e:	786a      	ldrb	r2, [r5, #1]
 801fa10:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801fa12:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801fa16:	9210      	str	r2, [sp, #64]	; 0x40
 801fa18:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801fa1c:	2800      	cmp	r0, #0
 801fa1e:	f000 811c 	beq.w	801fc5a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 801fa22:	192a      	adds	r2, r5, r4
 801fa24:	5d2d      	ldrb	r5, [r5, r4]
 801fa26:	7852      	ldrb	r2, [r2, #1]
 801fa28:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801fa2c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801fa30:	950c      	str	r5, [sp, #48]	; 0x30
 801fa32:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801fa36:	0e15      	lsrs	r5, r2, #24
 801fa38:	9211      	str	r2, [sp, #68]	; 0x44
 801fa3a:	b289      	uxth	r1, r1
 801fa3c:	b280      	uxth	r0, r0
 801fa3e:	fb01 fa00 	mul.w	sl, r1, r0
 801fa42:	0109      	lsls	r1, r1, #4
 801fa44:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801fa48:	eba1 080a 	sub.w	r8, r1, sl
 801fa4c:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801fa50:	b280      	uxth	r0, r0
 801fa52:	fa1f f888 	uxth.w	r8, r8
 801fa56:	1a12      	subs	r2, r2, r0
 801fa58:	fb08 f10c 	mul.w	r1, r8, ip
 801fa5c:	b292      	uxth	r2, r2
 801fa5e:	fb02 1106 	mla	r1, r2, r6, r1
 801fa62:	fb00 1109 	mla	r1, r0, r9, r1
 801fa66:	fb0a 1105 	mla	r1, sl, r5, r1
 801fa6a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fa6e:	2900      	cmp	r1, #0
 801fa70:	f000 80da 	beq.w	801fc28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 801fa74:	2eff      	cmp	r6, #255	; 0xff
 801fa76:	d016      	beq.n	801faa6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 801fa78:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801fa7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fa80:	4377      	muls	r7, r6
 801fa82:	435e      	muls	r6, r3
 801fa84:	0a3b      	lsrs	r3, r7, #8
 801fa86:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fa8a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fa8e:	443b      	add	r3, r7
 801fa90:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801fa94:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801fa98:	0a1b      	lsrs	r3, r3, #8
 801fa9a:	0a3f      	lsrs	r7, r7, #8
 801fa9c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801faa0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801faa4:	433b      	orrs	r3, r7
 801faa6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801faaa:	d01d      	beq.n	801fae8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 801faac:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801faae:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801fab0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fab4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fab8:	fb0c f606 	mul.w	r6, ip, r6
 801fabc:	fb0c fc07 	mul.w	ip, ip, r7
 801fac0:	0a37      	lsrs	r7, r6, #8
 801fac2:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801fac6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801faca:	4437      	add	r7, r6
 801facc:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801fad0:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801fad4:	0a3f      	lsrs	r7, r7, #8
 801fad6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fada:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fade:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fae2:	ea47 060c 	orr.w	r6, r7, ip
 801fae6:	9610      	str	r6, [sp, #64]	; 0x40
 801fae8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801faec:	d01d      	beq.n	801fb2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 801faee:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801faf0:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801faf4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801faf8:	fb09 fc0c 	mul.w	ip, r9, ip
 801fafc:	fb09 f906 	mul.w	r9, r9, r6
 801fb00:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801fb04:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fb08:	f509 7680 	add.w	r6, r9, #256	; 0x100
 801fb0c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fb10:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801fb14:	4467      	add	r7, ip
 801fb16:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fb1a:	0a3f      	lsrs	r7, r7, #8
 801fb1c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801fb20:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fb24:	ea47 0609 	orr.w	r6, r7, r9
 801fb28:	960c      	str	r6, [sp, #48]	; 0x30
 801fb2a:	2dff      	cmp	r5, #255	; 0xff
 801fb2c:	d01a      	beq.n	801fb64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 801fb2e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fb30:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801fb34:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fb38:	fb05 fc0c 	mul.w	ip, r5, ip
 801fb3c:	4375      	muls	r5, r6
 801fb3e:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801fb42:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801fb46:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801fb4a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fb4e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801fb52:	4467      	add	r7, ip
 801fb54:	0a2d      	lsrs	r5, r5, #8
 801fb56:	0a3f      	lsrs	r7, r7, #8
 801fb58:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801fb5c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fb60:	433d      	orrs	r5, r7
 801fb62:	9511      	str	r5, [sp, #68]	; 0x44
 801fb64:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801fb66:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801fb6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fb6e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fb72:	fb08 f505 	mul.w	r5, r8, r5
 801fb76:	fb02 5506 	mla	r5, r2, r6, r5
 801fb7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801fb7c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fb80:	fb00 5506 	mla	r5, r0, r6, r5
 801fb84:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fb86:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fb8a:	fb0a 5506 	mla	r5, sl, r6, r5
 801fb8e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801fb90:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fb94:	0a2d      	lsrs	r5, r5, #8
 801fb96:	fb08 f806 	mul.w	r8, r8, r6
 801fb9a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801fb9e:	fb02 8303 	mla	r3, r2, r3, r8
 801fba2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fba4:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801fba8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fbaa:	fb00 3307 	mla	r3, r0, r7, r3
 801fbae:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801fbb2:	fb0a 3c0c 	mla	ip, sl, ip, r3
 801fbb6:	fb01 f30b 	mul.w	r3, r1, fp
 801fbba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fbbe:	1c59      	adds	r1, r3, #1
 801fbc0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fbc4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801fbc8:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801fbcc:	ea45 050c 	orr.w	r5, r5, ip
 801fbd0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801fbd4:	b2ea      	uxtb	r2, r5
 801fbd6:	b2c9      	uxtb	r1, r1
 801fbd8:	fb12 f20b 	smulbb	r2, r2, fp
 801fbdc:	fb03 2301 	mla	r3, r3, r1, r2
 801fbe0:	b29b      	uxth	r3, r3
 801fbe2:	1c5a      	adds	r2, r3, #1
 801fbe4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fbe8:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801fbec:	fb12 f201 	smulbb	r2, r2, r1
 801fbf0:	121b      	asrs	r3, r3, #8
 801fbf2:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801fbf6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801fbfa:	0c2d      	lsrs	r5, r5, #16
 801fbfc:	fb03 230b 	mla	r3, r3, fp, r2
 801fc00:	b29b      	uxth	r3, r3
 801fc02:	1c5a      	adds	r2, r3, #1
 801fc04:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fc08:	121b      	asrs	r3, r3, #8
 801fc0a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801fc0e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801fc12:	fb13 f101 	smulbb	r1, r3, r1
 801fc16:	fb05 150b 	mla	r5, r5, fp, r1
 801fc1a:	b2ad      	uxth	r5, r5
 801fc1c:	1c69      	adds	r1, r5, #1
 801fc1e:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801fc22:	122d      	asrs	r5, r5, #8
 801fc24:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801fc28:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801fc2a:	f10e 0e03 	add.w	lr, lr, #3
 801fc2e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801fc30:	4413      	add	r3, r2
 801fc32:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801fc34:	932d      	str	r3, [sp, #180]	; 0xb4
 801fc36:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fc38:	4413      	add	r3, r2
 801fc3a:	932e      	str	r3, [sp, #184]	; 0xb8
 801fc3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fc3e:	3b01      	subs	r3, #1
 801fc40:	9315      	str	r3, [sp, #84]	; 0x54
 801fc42:	e4ed      	b.n	801f620 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801fc44:	b160      	cbz	r0, 801fc60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 801fc46:	5d2a      	ldrb	r2, [r5, r4]
 801fc48:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801fc4a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801fc4e:	25ff      	movs	r5, #255	; 0xff
 801fc50:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801fc54:	920c      	str	r2, [sp, #48]	; 0x30
 801fc56:	46ac      	mov	ip, r5
 801fc58:	e6ef      	b.n	801fa3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801fc5a:	25ff      	movs	r5, #255	; 0xff
 801fc5c:	46a9      	mov	r9, r5
 801fc5e:	e6ec      	b.n	801fa3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801fc60:	25ff      	movs	r5, #255	; 0xff
 801fc62:	46a9      	mov	r9, r5
 801fc64:	e7f7      	b.n	801fc56 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 801fc66:	b01b      	add	sp, #108	; 0x6c
 801fc68:	ecbd 8b08 	vpop	{d8-d11}
 801fc6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fc70 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801fc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc74:	b085      	sub	sp, #20
 801fc76:	7888      	ldrb	r0, [r1, #2]
 801fc78:	4692      	mov	sl, r2
 801fc7a:	4698      	mov	r8, r3
 801fc7c:	9000      	str	r0, [sp, #0]
 801fc7e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801fc82:	7848      	ldrb	r0, [r1, #1]
 801fc84:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801fc88:	9001      	str	r0, [sp, #4]
 801fc8a:	7808      	ldrb	r0, [r1, #0]
 801fc8c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801fc90:	9002      	str	r0, [sp, #8]
 801fc92:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801fc96:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801fc9a:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801fc9e:	fb04 560c 	mla	r6, r4, ip, r5
 801fca2:	2c00      	cmp	r4, #0
 801fca4:	eb02 0e06 	add.w	lr, r2, r6
 801fca8:	9a00      	ldr	r2, [sp, #0]
 801fcaa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801fcae:	9a01      	ldr	r2, [sp, #4]
 801fcb0:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801fcb4:	db3e      	blt.n	801fd34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801fcb6:	45a1      	cmp	r9, r4
 801fcb8:	dd3c      	ble.n	801fd34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801fcba:	2d00      	cmp	r5, #0
 801fcbc:	db38      	blt.n	801fd30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801fcbe:	45ac      	cmp	ip, r5
 801fcc0:	dd36      	ble.n	801fd30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801fcc2:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801fcc6:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801fcca:	1c6e      	adds	r6, r5, #1
 801fccc:	d435      	bmi.n	801fd3a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801fcce:	45b4      	cmp	ip, r6
 801fcd0:	dd33      	ble.n	801fd3a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801fcd2:	b393      	cbz	r3, 801fd3a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801fcd4:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801fcd8:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 801fcdc:	3401      	adds	r4, #1
 801fcde:	d430      	bmi.n	801fd42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801fce0:	45a1      	cmp	r9, r4
 801fce2:	dd2e      	ble.n	801fd42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801fce4:	b36f      	cbz	r7, 801fd42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801fce6:	2d00      	cmp	r5, #0
 801fce8:	db29      	blt.n	801fd3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801fcea:	45ac      	cmp	ip, r5
 801fcec:	dd27      	ble.n	801fd3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801fcee:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801fcf2:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801fcf6:	3501      	adds	r5, #1
 801fcf8:	d407      	bmi.n	801fd0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801fcfa:	45ac      	cmp	ip, r5
 801fcfc:	dd05      	ble.n	801fd0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801fcfe:	b123      	cbz	r3, 801fd0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801fd00:	44f4      	add	ip, lr
 801fd02:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801fd06:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801fd0a:	2b0f      	cmp	r3, #15
 801fd0c:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801fd10:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801fd14:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801fd18:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801fd1c:	d801      	bhi.n	801fd22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801fd1e:	2f0f      	cmp	r7, #15
 801fd20:	d911      	bls.n	801fd46 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 801fd22:	4b76      	ldr	r3, [pc, #472]	; (801fefc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 801fd24:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801fd28:	4a75      	ldr	r2, [pc, #468]	; (801ff00 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801fd2a:	4876      	ldr	r0, [pc, #472]	; (801ff04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 801fd2c:	f004 ff94 	bl	8024c58 <__assert_func>
 801fd30:	4602      	mov	r2, r0
 801fd32:	e7ca      	b.n	801fcca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 801fd34:	4606      	mov	r6, r0
 801fd36:	4602      	mov	r2, r0
 801fd38:	e7d0      	b.n	801fcdc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801fd3a:	4606      	mov	r6, r0
 801fd3c:	e7ce      	b.n	801fcdc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801fd3e:	4604      	mov	r4, r0
 801fd40:	e7d9      	b.n	801fcf6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 801fd42:	4604      	mov	r4, r0
 801fd44:	e7e1      	b.n	801fd0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801fd46:	b29b      	uxth	r3, r3
 801fd48:	b2bf      	uxth	r7, r7
 801fd4a:	fb07 fe03 	mul.w	lr, r7, r3
 801fd4e:	011b      	lsls	r3, r3, #4
 801fd50:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801fd54:	eba3 0c0e 	sub.w	ip, r3, lr
 801fd58:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801fd5c:	b2bf      	uxth	r7, r7
 801fd5e:	fa1f fc8c 	uxth.w	ip, ip
 801fd62:	1bed      	subs	r5, r5, r7
 801fd64:	fb0c f30a 	mul.w	r3, ip, sl
 801fd68:	b2ad      	uxth	r5, r5
 801fd6a:	fb05 330b 	mla	r3, r5, fp, r3
 801fd6e:	fb07 3309 	mla	r3, r7, r9, r3
 801fd72:	fb0e 3308 	mla	r3, lr, r8, r3
 801fd76:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fd7a:	9303      	str	r3, [sp, #12]
 801fd7c:	2b00      	cmp	r3, #0
 801fd7e:	f000 80b9 	beq.w	801fef4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 801fd82:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801fd86:	d018      	beq.n	801fdba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 801fd88:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801fd8c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fd90:	fb0b f303 	mul.w	r3, fp, r3
 801fd94:	fb0b fb02 	mul.w	fp, fp, r2
 801fd98:	0a1a      	lsrs	r2, r3, #8
 801fd9a:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801fd9e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801fda2:	441a      	add	r2, r3
 801fda4:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801fda8:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801fdac:	0a12      	lsrs	r2, r2, #8
 801fdae:	0a1b      	lsrs	r3, r3, #8
 801fdb0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801fdb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fdb8:	431a      	orrs	r2, r3
 801fdba:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801fdbe:	d019      	beq.n	801fdf4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 801fdc0:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801fdc4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fdc8:	fb0a fb0b 	mul.w	fp, sl, fp
 801fdcc:	fb0a fa06 	mul.w	sl, sl, r6
 801fdd0:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801fdd4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fdd8:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801fddc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fde0:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801fde4:	445e      	add	r6, fp
 801fde6:	0a1b      	lsrs	r3, r3, #8
 801fde8:	0a36      	lsrs	r6, r6, #8
 801fdea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fdee:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801fdf2:	431e      	orrs	r6, r3
 801fdf4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fdf8:	d019      	beq.n	801fe2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 801fdfa:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801fdfe:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801fe02:	fb09 fa0a 	mul.w	sl, r9, sl
 801fe06:	fb09 f904 	mul.w	r9, r9, r4
 801fe0a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801fe0e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801fe12:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801fe16:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801fe1a:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801fe1e:	4454      	add	r4, sl
 801fe20:	0a1b      	lsrs	r3, r3, #8
 801fe22:	0a24      	lsrs	r4, r4, #8
 801fe24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fe28:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801fe2c:	431c      	orrs	r4, r3
 801fe2e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801fe32:	d019      	beq.n	801fe68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 801fe34:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801fe38:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801fe3c:	fb08 f909 	mul.w	r9, r8, r9
 801fe40:	fb08 f800 	mul.w	r8, r8, r0
 801fe44:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801fe48:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801fe4c:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801fe50:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801fe54:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801fe58:	4448      	add	r0, r9
 801fe5a:	0a1b      	lsrs	r3, r3, #8
 801fe5c:	0a00      	lsrs	r0, r0, #8
 801fe5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fe62:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801fe66:	4318      	orrs	r0, r3
 801fe68:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801fe6c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801fe70:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fe74:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fe78:	fb0c f808 	mul.w	r8, ip, r8
 801fe7c:	fb0c f606 	mul.w	r6, ip, r6
 801fe80:	fb05 8803 	mla	r8, r5, r3, r8
 801fe84:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801fe88:	fb05 6202 	mla	r2, r5, r2, r6
 801fe8c:	fb07 8803 	mla	r8, r7, r3, r8
 801fe90:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801fe94:	fb0e 8303 	mla	r3, lr, r3, r8
 801fe98:	0a1b      	lsrs	r3, r3, #8
 801fe9a:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801fe9e:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 801fea2:	9c02      	ldr	r4, [sp, #8]
 801fea4:	fb07 2703 	mla	r7, r7, r3, r2
 801fea8:	9a03      	ldr	r2, [sp, #12]
 801feaa:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801feae:	43d2      	mvns	r2, r2
 801feb0:	fb0e 7303 	mla	r3, lr, r3, r7
 801feb4:	b2d2      	uxtb	r2, r2
 801feb6:	0a1b      	lsrs	r3, r3, #8
 801feb8:	4354      	muls	r4, r2
 801feba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801febe:	1c60      	adds	r0, r4, #1
 801fec0:	ea48 0303 	orr.w	r3, r8, r3
 801fec4:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801fec8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801fecc:	7008      	strb	r0, [r1, #0]
 801fece:	9801      	ldr	r0, [sp, #4]
 801fed0:	4350      	muls	r0, r2
 801fed2:	1c44      	adds	r4, r0, #1
 801fed4:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 801fed8:	0a18      	lsrs	r0, r3, #8
 801feda:	0c1b      	lsrs	r3, r3, #16
 801fedc:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801fee0:	7048      	strb	r0, [r1, #1]
 801fee2:	9800      	ldr	r0, [sp, #0]
 801fee4:	4350      	muls	r0, r2
 801fee6:	4602      	mov	r2, r0
 801fee8:	3001      	adds	r0, #1
 801feea:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801feee:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fef2:	708b      	strb	r3, [r1, #2]
 801fef4:	b005      	add	sp, #20
 801fef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fefa:	bf00      	nop
 801fefc:	0802b67c 	.word	0x0802b67c
 801ff00:	0802bb72 	.word	0x0802bb72
 801ff04:	0802b745 	.word	0x0802b745

0801ff08 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ff08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff0c:	ed2d 8b08 	vpush	{d8-d11}
 801ff10:	b097      	sub	sp, #92	; 0x5c
 801ff12:	eeb0 aa40 	vmov.f32	s20, s0
 801ff16:	eef0 9a60 	vmov.f32	s19, s1
 801ff1a:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 801ff1c:	eeb0 9a41 	vmov.f32	s18, s2
 801ff20:	9308      	str	r3, [sp, #32]
 801ff22:	eeb0 8a62 	vmov.f32	s16, s5
 801ff26:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801ff2a:	eef0 8a43 	vmov.f32	s17, s6
 801ff2e:	9015      	str	r0, [sp, #84]	; 0x54
 801ff30:	eef0 ba44 	vmov.f32	s23, s8
 801ff34:	6868      	ldr	r0, [r5, #4]
 801ff36:	eeb0 ba64 	vmov.f32	s22, s9
 801ff3a:	9112      	str	r1, [sp, #72]	; 0x48
 801ff3c:	eef0 aa45 	vmov.f32	s21, s10
 801ff40:	9310      	str	r3, [sp, #64]	; 0x40
 801ff42:	9214      	str	r2, [sp, #80]	; 0x50
 801ff44:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801ff46:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 801ff4a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801ff4e:	fb00 1303 	mla	r3, r0, r3, r1
 801ff52:	6829      	ldr	r1, [r5, #0]
 801ff54:	6855      	ldr	r5, [r2, #4]
 801ff56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ff5a:	3504      	adds	r5, #4
 801ff5c:	18cb      	adds	r3, r1, r3
 801ff5e:	930b      	str	r3, [sp, #44]	; 0x2c
 801ff60:	6813      	ldr	r3, [r2, #0]
 801ff62:	9311      	str	r3, [sp, #68]	; 0x44
 801ff64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ff66:	2b00      	cmp	r3, #0
 801ff68:	dc03      	bgt.n	801ff72 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801ff6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ff6c:	2b00      	cmp	r3, #0
 801ff6e:	f340 8333 	ble.w	80205d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 801ff72:	9b08      	ldr	r3, [sp, #32]
 801ff74:	2b00      	cmp	r3, #0
 801ff76:	f340 8190 	ble.w	802029a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801ff7a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ff7c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ff7e:	1412      	asrs	r2, r2, #16
 801ff80:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ff84:	d42f      	bmi.n	801ffe6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801ff86:	1c51      	adds	r1, r2, #1
 801ff88:	428c      	cmp	r4, r1
 801ff8a:	dd2f      	ble.n	801ffec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801ff8c:	2b00      	cmp	r3, #0
 801ff8e:	db2d      	blt.n	801ffec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801ff90:	1c59      	adds	r1, r3, #1
 801ff92:	9810      	ldr	r0, [sp, #64]	; 0x40
 801ff94:	4288      	cmp	r0, r1
 801ff96:	dd29      	ble.n	801ffec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801ff98:	9b08      	ldr	r3, [sp, #32]
 801ff9a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ff9c:	3b01      	subs	r3, #1
 801ff9e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801ffa0:	fb02 1203 	mla	r2, r2, r3, r1
 801ffa4:	1412      	asrs	r2, r2, #16
 801ffa6:	d42b      	bmi.n	8020000 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801ffa8:	3201      	adds	r2, #1
 801ffaa:	4294      	cmp	r4, r2
 801ffac:	dd28      	ble.n	8020000 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801ffae:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ffb0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801ffb2:	fb02 1303 	mla	r3, r2, r3, r1
 801ffb6:	141b      	asrs	r3, r3, #16
 801ffb8:	d422      	bmi.n	8020000 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801ffba:	3301      	adds	r3, #1
 801ffbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ffbe:	429a      	cmp	r2, r3
 801ffc0:	dd1e      	ble.n	8020000 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801ffc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ffc4:	f103 0803 	add.w	r8, r3, #3
 801ffc8:	9b08      	ldr	r3, [sp, #32]
 801ffca:	9307      	str	r3, [sp, #28]
 801ffcc:	9b07      	ldr	r3, [sp, #28]
 801ffce:	2b00      	cmp	r3, #0
 801ffd0:	f300 81ca 	bgt.w	8020368 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 801ffd4:	9b08      	ldr	r3, [sp, #32]
 801ffd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ffd8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ffdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ffe0:	441a      	add	r2, r3
 801ffe2:	920b      	str	r2, [sp, #44]	; 0x2c
 801ffe4:	e15b      	b.n	802029e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801ffe6:	1c51      	adds	r1, r2, #1
 801ffe8:	f040 8148 	bne.w	802027c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801ffec:	42a2      	cmp	r2, r4
 801ffee:	f280 8145 	bge.w	802027c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801fff2:	1c5a      	adds	r2, r3, #1
 801fff4:	f2c0 8142 	blt.w	802027c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801fff8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fffa:	4293      	cmp	r3, r2
 801fffc:	f280 813e 	bge.w	802027c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 8020000:	9b08      	ldr	r3, [sp, #32]
 8020002:	9313      	str	r3, [sp, #76]	; 0x4c
 8020004:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020006:	9307      	str	r3, [sp, #28]
 8020008:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802000a:	2b00      	cmp	r3, #0
 802000c:	dde2      	ble.n	801ffd4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 802000e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020010:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020012:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020016:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020018:	141b      	asrs	r3, r3, #16
 802001a:	f3c2 3003 	ubfx	r0, r2, #12, #4
 802001e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020020:	1412      	asrs	r2, r2, #16
 8020022:	f100 818b 	bmi.w	802033c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 8020026:	1c56      	adds	r6, r2, #1
 8020028:	42b4      	cmp	r4, r6
 802002a:	f340 8189 	ble.w	8020340 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 802002e:	2b00      	cmp	r3, #0
 8020030:	f2c0 8186 	blt.w	8020340 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 8020034:	1c5e      	adds	r6, r3, #1
 8020036:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8020038:	42b7      	cmp	r7, r6
 802003a:	f340 8181 	ble.w	8020340 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 802003e:	fb03 2304 	mla	r3, r3, r4, r2
 8020042:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020044:	18d6      	adds	r6, r2, r3
 8020046:	5cd3      	ldrb	r3, [r2, r3]
 8020048:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802004c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020050:	2900      	cmp	r1, #0
 8020052:	f000 8163 	beq.w	802031c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 8020056:	7872      	ldrb	r2, [r6, #1]
 8020058:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802005c:	920c      	str	r2, [sp, #48]	; 0x30
 802005e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020062:	2800      	cmp	r0, #0
 8020064:	f000 8164 	beq.w	8020330 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 8020068:	1932      	adds	r2, r6, r4
 802006a:	5d36      	ldrb	r6, [r6, r4]
 802006c:	7852      	ldrb	r2, [r2, #1]
 802006e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8020072:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020076:	9609      	str	r6, [sp, #36]	; 0x24
 8020078:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802007c:	0e16      	lsrs	r6, r2, #24
 802007e:	920d      	str	r2, [sp, #52]	; 0x34
 8020080:	b289      	uxth	r1, r1
 8020082:	b280      	uxth	r0, r0
 8020084:	fb01 fb00 	mul.w	fp, r1, r0
 8020088:	0109      	lsls	r1, r1, #4
 802008a:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 802008e:	eba1 090b 	sub.w	r9, r1, fp
 8020092:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8020096:	b280      	uxth	r0, r0
 8020098:	fa1f f989 	uxth.w	r9, r9
 802009c:	1a12      	subs	r2, r2, r0
 802009e:	fb09 f108 	mul.w	r1, r9, r8
 80200a2:	b292      	uxth	r2, r2
 80200a4:	fb02 110c 	mla	r1, r2, ip, r1
 80200a8:	fb00 110a 	mla	r1, r0, sl, r1
 80200ac:	fb0b 1106 	mla	r1, fp, r6, r1
 80200b0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80200b4:	2900      	cmp	r1, #0
 80200b6:	f000 80d2 	beq.w	802025e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80200ba:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80200be:	d01b      	beq.n	80200f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 80200c0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80200c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80200c8:	fb0c fe0e 	mul.w	lr, ip, lr
 80200cc:	fb0c fc03 	mul.w	ip, ip, r3
 80200d0:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80200d4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80200d8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80200dc:	4473      	add	r3, lr
 80200de:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 80200e2:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 80200e6:	0a1b      	lsrs	r3, r3, #8
 80200e8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80200ec:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80200f0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80200f4:	ea43 030e 	orr.w	r3, r3, lr
 80200f8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80200fc:	d01e      	beq.n	802013c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 80200fe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020100:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8020104:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8020108:	fb08 fc0c 	mul.w	ip, r8, ip
 802010c:	fb08 f80e 	mul.w	r8, r8, lr
 8020110:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020114:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020118:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802011c:	44e6      	add	lr, ip
 802011e:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8020122:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8020126:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802012a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802012e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020132:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020136:	ea4e 0708 	orr.w	r7, lr, r8
 802013a:	970c      	str	r7, [sp, #48]	; 0x30
 802013c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8020140:	d01e      	beq.n	8020180 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8020142:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020144:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8020148:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802014c:	fb0a f808 	mul.w	r8, sl, r8
 8020150:	fb0a fa0c 	mul.w	sl, sl, ip
 8020154:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8020158:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802015c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020160:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020164:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020168:	44c6      	add	lr, r8
 802016a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802016e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020172:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020176:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802017a:	ea4e 070a 	orr.w	r7, lr, sl
 802017e:	9709      	str	r7, [sp, #36]	; 0x24
 8020180:	2eff      	cmp	r6, #255	; 0xff
 8020182:	d01d      	beq.n	80201c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8020184:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020186:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 802018a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802018e:	fb06 f808 	mul.w	r8, r6, r8
 8020192:	fb06 f60c 	mul.w	r6, r6, ip
 8020196:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 802019a:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 802019e:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80201a2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80201a6:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80201aa:	44c6      	add	lr, r8
 80201ac:	0a36      	lsrs	r6, r6, #8
 80201ae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80201b2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80201b6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80201ba:	ea4e 0606 	orr.w	r6, lr, r6
 80201be:	960d      	str	r6, [sp, #52]	; 0x34
 80201c0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80201c2:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80201c6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80201c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80201cc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80201d0:	43c9      	mvns	r1, r1
 80201d2:	fb09 f606 	mul.w	r6, r9, r6
 80201d6:	b2c9      	uxtb	r1, r1
 80201d8:	fb02 660c 	mla	r6, r2, ip, r6
 80201dc:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80201e0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80201e2:	fb00 660c 	mla	r6, r0, ip, r6
 80201e6:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80201ea:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80201ec:	fb0b 660c 	mla	r6, fp, ip, r6
 80201f0:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80201f4:	fb09 f90c 	mul.w	r9, r9, ip
 80201f8:	0a36      	lsrs	r6, r6, #8
 80201fa:	fb02 9303 	mla	r3, r2, r3, r9
 80201fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020200:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020204:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8020208:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802020a:	fb00 330e 	mla	r3, r0, lr, r3
 802020e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8020212:	fb0b 3b00 	mla	fp, fp, r0, r3
 8020216:	9b07      	ldr	r3, [sp, #28]
 8020218:	781b      	ldrb	r3, [r3, #0]
 802021a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802021e:	fb03 f201 	mul.w	r2, r3, r1
 8020222:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8020226:	1c53      	adds	r3, r2, #1
 8020228:	ea46 060b 	orr.w	r6, r6, fp
 802022c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020230:	9a07      	ldr	r2, [sp, #28]
 8020232:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8020236:	7013      	strb	r3, [r2, #0]
 8020238:	7853      	ldrb	r3, [r2, #1]
 802023a:	434b      	muls	r3, r1
 802023c:	1c5a      	adds	r2, r3, #1
 802023e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020242:	0a33      	lsrs	r3, r6, #8
 8020244:	0c36      	lsrs	r6, r6, #16
 8020246:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802024a:	9a07      	ldr	r2, [sp, #28]
 802024c:	7053      	strb	r3, [r2, #1]
 802024e:	7893      	ldrb	r3, [r2, #2]
 8020250:	4359      	muls	r1, r3
 8020252:	1c4b      	adds	r3, r1, #1
 8020254:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020258:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 802025c:	7096      	strb	r6, [r2, #2]
 802025e:	9b07      	ldr	r3, [sp, #28]
 8020260:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020262:	3303      	adds	r3, #3
 8020264:	9307      	str	r3, [sp, #28]
 8020266:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020268:	4413      	add	r3, r2
 802026a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802026c:	9329      	str	r3, [sp, #164]	; 0xa4
 802026e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020270:	4413      	add	r3, r2
 8020272:	932a      	str	r3, [sp, #168]	; 0xa8
 8020274:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020276:	3b01      	subs	r3, #1
 8020278:	9313      	str	r3, [sp, #76]	; 0x4c
 802027a:	e6c5      	b.n	8020008 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 802027c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802027e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8020280:	4413      	add	r3, r2
 8020282:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8020284:	9329      	str	r3, [sp, #164]	; 0xa4
 8020286:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020288:	4413      	add	r3, r2
 802028a:	932a      	str	r3, [sp, #168]	; 0xa8
 802028c:	9b08      	ldr	r3, [sp, #32]
 802028e:	3b01      	subs	r3, #1
 8020290:	9308      	str	r3, [sp, #32]
 8020292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020294:	3303      	adds	r3, #3
 8020296:	930b      	str	r3, [sp, #44]	; 0x2c
 8020298:	e66b      	b.n	801ff72 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 802029a:	f47f ae7d 	bne.w	801ff98 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 802029e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80202a0:	2b00      	cmp	r3, #0
 80202a2:	f340 8199 	ble.w	80205d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 80202a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80202aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80202ac:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80202b0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80202b4:	eef0 6a48 	vmov.f32	s13, s16
 80202b8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80202bc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80202c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80202c4:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80202c8:	eef0 6a68 	vmov.f32	s13, s17
 80202cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80202d0:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 80202d4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80202d8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80202dc:	ee37 8a48 	vsub.f32	s16, s14, s16
 80202e0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80202e4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80202e8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80202ec:	ee18 2a10 	vmov	r2, s16
 80202f0:	eeb0 8a47 	vmov.f32	s16, s14
 80202f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80202f8:	ee18 2a90 	vmov	r2, s17
 80202fc:	932b      	str	r3, [sp, #172]	; 0xac
 80202fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020300:	eef0 8a67 	vmov.f32	s17, s15
 8020304:	fb92 f3f3 	sdiv	r3, r2, r3
 8020308:	932c      	str	r3, [sp, #176]	; 0xb0
 802030a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802030c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802030e:	3b01      	subs	r3, #1
 8020310:	9312      	str	r3, [sp, #72]	; 0x48
 8020312:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020314:	bf08      	it	eq
 8020316:	4613      	moveq	r3, r2
 8020318:	9308      	str	r3, [sp, #32]
 802031a:	e623      	b.n	801ff64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 802031c:	b158      	cbz	r0, 8020336 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 802031e:	5d32      	ldrb	r2, [r6, r4]
 8020320:	26ff      	movs	r6, #255	; 0xff
 8020322:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020326:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 802032a:	9209      	str	r2, [sp, #36]	; 0x24
 802032c:	46b0      	mov	r8, r6
 802032e:	e6a7      	b.n	8020080 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8020330:	26ff      	movs	r6, #255	; 0xff
 8020332:	46b2      	mov	sl, r6
 8020334:	e6a4      	b.n	8020080 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 8020336:	26ff      	movs	r6, #255	; 0xff
 8020338:	46b2      	mov	sl, r6
 802033a:	e7f7      	b.n	802032c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 802033c:	1c57      	adds	r7, r2, #1
 802033e:	d18e      	bne.n	802025e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020340:	4294      	cmp	r4, r2
 8020342:	dd8c      	ble.n	802025e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020344:	1c5e      	adds	r6, r3, #1
 8020346:	db8a      	blt.n	802025e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020348:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802034a:	429e      	cmp	r6, r3
 802034c:	dd87      	ble.n	802025e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 802034e:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8020352:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8020356:	e9cd 4600 	strd	r4, r6, [sp]
 802035a:	462b      	mov	r3, r5
 802035c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802035e:	9907      	ldr	r1, [sp, #28]
 8020360:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020362:	f7ff fc85 	bl	801fc70 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8020366:	e77a      	b.n	802025e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 8020368:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802036a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 802036c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020370:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020372:	1409      	asrs	r1, r1, #16
 8020374:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8020378:	141b      	asrs	r3, r3, #16
 802037a:	fb04 1303 	mla	r3, r4, r3, r1
 802037e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020380:	18ce      	adds	r6, r1, r3
 8020382:	5ccb      	ldrb	r3, [r1, r3]
 8020384:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020388:	0e1f      	lsrs	r7, r3, #24
 802038a:	2a00      	cmp	r2, #0
 802038c:	f000 8114 	beq.w	80205b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 8020390:	7871      	ldrb	r1, [r6, #1]
 8020392:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8020396:	910e      	str	r1, [sp, #56]	; 0x38
 8020398:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802039c:	2800      	cmp	r0, #0
 802039e:	f000 8115 	beq.w	80205cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 80203a2:	1931      	adds	r1, r6, r4
 80203a4:	5d36      	ldrb	r6, [r6, r4]
 80203a6:	7849      	ldrb	r1, [r1, #1]
 80203a8:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80203ac:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80203b0:	960a      	str	r6, [sp, #40]	; 0x28
 80203b2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80203b6:	0e0e      	lsrs	r6, r1, #24
 80203b8:	910f      	str	r1, [sp, #60]	; 0x3c
 80203ba:	b292      	uxth	r2, r2
 80203bc:	b280      	uxth	r0, r0
 80203be:	fb02 fb00 	mul.w	fp, r2, r0
 80203c2:	0112      	lsls	r2, r2, #4
 80203c4:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 80203c8:	eba2 090b 	sub.w	r9, r2, fp
 80203cc:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80203d0:	b280      	uxth	r0, r0
 80203d2:	fa1f f989 	uxth.w	r9, r9
 80203d6:	1a09      	subs	r1, r1, r0
 80203d8:	fb09 f20e 	mul.w	r2, r9, lr
 80203dc:	b289      	uxth	r1, r1
 80203de:	fb01 2207 	mla	r2, r1, r7, r2
 80203e2:	fb00 220a 	mla	r2, r0, sl, r2
 80203e6:	fb0b 2206 	mla	r2, fp, r6, r2
 80203ea:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80203ee:	9213      	str	r2, [sp, #76]	; 0x4c
 80203f0:	2a00      	cmp	r2, #0
 80203f2:	f000 80d4 	beq.w	802059e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 80203f6:	2fff      	cmp	r7, #255	; 0xff
 80203f8:	d01a      	beq.n	8020430 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 80203fa:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80203fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020402:	fb07 fc0c 	mul.w	ip, r7, ip
 8020406:	435f      	muls	r7, r3
 8020408:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802040c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020410:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020414:	4463      	add	r3, ip
 8020416:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 802041a:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 802041e:	0a1b      	lsrs	r3, r3, #8
 8020420:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020424:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020428:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802042c:	ea43 030c 	orr.w	r3, r3, ip
 8020430:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020434:	d01f      	beq.n	8020476 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 8020436:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8020438:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802043a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802043e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020442:	fb0e f707 	mul.w	r7, lr, r7
 8020446:	fb0e fe0c 	mul.w	lr, lr, ip
 802044a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802044e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020452:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020456:	44bc      	add	ip, r7
 8020458:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802045c:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8020460:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020464:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020468:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802046c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020470:	ea4c 020e 	orr.w	r2, ip, lr
 8020474:	920e      	str	r2, [sp, #56]	; 0x38
 8020476:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802047a:	d01e      	beq.n	80204ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 802047c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802047e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8020482:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020486:	fb0a fe0e 	mul.w	lr, sl, lr
 802048a:	fb0a fa07 	mul.w	sl, sl, r7
 802048e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8020492:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8020496:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802049a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802049e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80204a2:	44f4      	add	ip, lr
 80204a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80204a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80204ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80204b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80204b4:	ea4c 020a 	orr.w	r2, ip, sl
 80204b8:	920a      	str	r2, [sp, #40]	; 0x28
 80204ba:	2eff      	cmp	r6, #255	; 0xff
 80204bc:	d01c      	beq.n	80204f8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 80204be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80204c0:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80204c4:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80204c8:	fb06 fe0e 	mul.w	lr, r6, lr
 80204cc:	437e      	muls	r6, r7
 80204ce:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80204d2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80204d6:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80204da:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80204de:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80204e2:	44f4      	add	ip, lr
 80204e4:	0a36      	lsrs	r6, r6, #8
 80204e6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80204ea:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80204ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80204f2:	ea4c 0206 	orr.w	r2, ip, r6
 80204f6:	920f      	str	r2, [sp, #60]	; 0x3c
 80204f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80204fa:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80204fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020502:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8020506:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020508:	fb09 f606 	mul.w	r6, r9, r6
 802050c:	fb01 6607 	mla	r6, r1, r7, r6
 8020510:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8020514:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020516:	fb00 6607 	mla	r6, r0, r7, r6
 802051a:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 802051e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020520:	fb0b 6607 	mla	r6, fp, r7, r6
 8020524:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8020528:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802052a:	fb09 f907 	mul.w	r9, r9, r7
 802052e:	0a36      	lsrs	r6, r6, #8
 8020530:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020534:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020536:	fb01 9303 	mla	r3, r1, r3, r9
 802053a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802053e:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8020542:	fb00 330c 	mla	r3, r0, ip, r3
 8020546:	fb0b 3e0e 	mla	lr, fp, lr, r3
 802054a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802054c:	43da      	mvns	r2, r3
 802054e:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 8020552:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020556:	b2d2      	uxtb	r2, r2
 8020558:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802055c:	fb03 f102 	mul.w	r1, r3, r2
 8020560:	ea46 060e 	orr.w	r6, r6, lr
 8020564:	1c4b      	adds	r3, r1, #1
 8020566:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802056a:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 802056e:	f808 3c03 	strb.w	r3, [r8, #-3]
 8020572:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 8020576:	4353      	muls	r3, r2
 8020578:	1c59      	adds	r1, r3, #1
 802057a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802057e:	0a33      	lsrs	r3, r6, #8
 8020580:	0c36      	lsrs	r6, r6, #16
 8020582:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020586:	f808 3c02 	strb.w	r3, [r8, #-2]
 802058a:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 802058e:	435a      	muls	r2, r3
 8020590:	1c53      	adds	r3, r2, #1
 8020592:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020596:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 802059a:	f808 6c01 	strb.w	r6, [r8, #-1]
 802059e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80205a0:	f108 0803 	add.w	r8, r8, #3
 80205a4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80205a6:	4413      	add	r3, r2
 80205a8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80205aa:	9329      	str	r3, [sp, #164]	; 0xa4
 80205ac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80205ae:	4413      	add	r3, r2
 80205b0:	932a      	str	r3, [sp, #168]	; 0xa8
 80205b2:	9b07      	ldr	r3, [sp, #28]
 80205b4:	3b01      	subs	r3, #1
 80205b6:	e508      	b.n	801ffca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 80205b8:	b158      	cbz	r0, 80205d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 80205ba:	5d31      	ldrb	r1, [r6, r4]
 80205bc:	26ff      	movs	r6, #255	; 0xff
 80205be:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80205c2:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80205c6:	910a      	str	r1, [sp, #40]	; 0x28
 80205c8:	46b6      	mov	lr, r6
 80205ca:	e6f6      	b.n	80203ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 80205cc:	26ff      	movs	r6, #255	; 0xff
 80205ce:	46b2      	mov	sl, r6
 80205d0:	e6f3      	b.n	80203ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 80205d2:	26ff      	movs	r6, #255	; 0xff
 80205d4:	46b2      	mov	sl, r6
 80205d6:	e7f7      	b.n	80205c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 80205d8:	b017      	add	sp, #92	; 0x5c
 80205da:	ecbd 8b08 	vpop	{d8-d11}
 80205de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080205e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 80205e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205e8:	b08d      	sub	sp, #52	; 0x34
 80205ea:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 80205ee:	9103      	str	r1, [sp, #12]
 80205f0:	fb07 5803 	mla	r8, r7, r3, r5
 80205f4:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 80205f8:	9803      	ldr	r0, [sp, #12]
 80205fa:	2f00      	cmp	r7, #0
 80205fc:	910b      	str	r1, [sp, #44]	; 0x2c
 80205fe:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8020602:	9903      	ldr	r1, [sp, #12]
 8020604:	9c03      	ldr	r4, [sp, #12]
 8020606:	eb02 0608 	add.w	r6, r2, r8
 802060a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 802060e:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 8020612:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8020616:	7809      	ldrb	r1, [r1, #0]
 8020618:	7840      	ldrb	r0, [r0, #1]
 802061a:	78a4      	ldrb	r4, [r4, #2]
 802061c:	db51      	blt.n	80206c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 802061e:	45be      	cmp	lr, r7
 8020620:	dd4f      	ble.n	80206c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 8020622:	2d00      	cmp	r5, #0
 8020624:	db49      	blt.n	80206ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 8020626:	42ab      	cmp	r3, r5
 8020628:	dd47      	ble.n	80206ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 802062a:	f812 2008 	ldrb.w	r2, [r2, r8]
 802062e:	9204      	str	r2, [sp, #16]
 8020630:	7872      	ldrb	r2, [r6, #1]
 8020632:	9205      	str	r2, [sp, #20]
 8020634:	78b2      	ldrb	r2, [r6, #2]
 8020636:	9206      	str	r2, [sp, #24]
 8020638:	1c6a      	adds	r2, r5, #1
 802063a:	d449      	bmi.n	80206d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 802063c:	4293      	cmp	r3, r2
 802063e:	dd47      	ble.n	80206d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8020640:	f1bc 0f00 	cmp.w	ip, #0
 8020644:	d044      	beq.n	80206d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 8020646:	7972      	ldrb	r2, [r6, #5]
 8020648:	f896 b003 	ldrb.w	fp, [r6, #3]
 802064c:	f896 a004 	ldrb.w	sl, [r6, #4]
 8020650:	9201      	str	r2, [sp, #4]
 8020652:	3701      	adds	r7, #1
 8020654:	d444      	bmi.n	80206e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 8020656:	45be      	cmp	lr, r7
 8020658:	dd42      	ble.n	80206e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 802065a:	f1b9 0f00 	cmp.w	r9, #0
 802065e:	f000 80c1 	beq.w	80207e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 8020662:	2d00      	cmp	r5, #0
 8020664:	db38      	blt.n	80206d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 8020666:	42ab      	cmp	r3, r5
 8020668:	dd36      	ble.n	80206d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 802066a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802066e:	f816 8002 	ldrb.w	r8, [r6, r2]
 8020672:	2203      	movs	r2, #3
 8020674:	fb03 6702 	mla	r7, r3, r2, r6
 8020678:	fb03 6202 	mla	r2, r3, r2, r6
 802067c:	787f      	ldrb	r7, [r7, #1]
 802067e:	f892 e002 	ldrb.w	lr, [r2, #2]
 8020682:	9702      	str	r7, [sp, #8]
 8020684:	3501      	adds	r5, #1
 8020686:	d432      	bmi.n	80206ee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 8020688:	42ab      	cmp	r3, r5
 802068a:	dd30      	ble.n	80206ee <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 802068c:	f1bc 0f00 	cmp.w	ip, #0
 8020690:	d031      	beq.n	80206f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 8020692:	2703      	movs	r7, #3
 8020694:	fb13 7207 	smlabb	r2, r3, r7, r7
 8020698:	5cb5      	ldrb	r5, [r6, r2]
 802069a:	fb03 6207 	mla	r2, r3, r7, r6
 802069e:	fb03 6307 	mla	r3, r3, r7, r6
 80206a2:	7912      	ldrb	r2, [r2, #4]
 80206a4:	795e      	ldrb	r6, [r3, #5]
 80206a6:	f1bc 0f0f 	cmp.w	ip, #15
 80206aa:	d927      	bls.n	80206fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 80206ac:	4b53      	ldr	r3, [pc, #332]	; (80207fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 80206ae:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80206b2:	4a53      	ldr	r2, [pc, #332]	; (8020800 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 80206b4:	4853      	ldr	r0, [pc, #332]	; (8020804 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 80206b6:	f004 facf 	bl	8024c58 <__assert_func>
 80206ba:	e9cd 0405 	strd	r0, r4, [sp, #20]
 80206be:	9104      	str	r1, [sp, #16]
 80206c0:	e7ba      	b.n	8020638 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 80206c2:	9401      	str	r4, [sp, #4]
 80206c4:	4682      	mov	sl, r0
 80206c6:	468b      	mov	fp, r1
 80206c8:	9104      	str	r1, [sp, #16]
 80206ca:	e9cd 0405 	strd	r0, r4, [sp, #20]
 80206ce:	e7c0      	b.n	8020652 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 80206d0:	9401      	str	r4, [sp, #4]
 80206d2:	4682      	mov	sl, r0
 80206d4:	468b      	mov	fp, r1
 80206d6:	e7bc      	b.n	8020652 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 80206d8:	46a6      	mov	lr, r4
 80206da:	9002      	str	r0, [sp, #8]
 80206dc:	4688      	mov	r8, r1
 80206de:	e7d1      	b.n	8020684 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 80206e0:	4626      	mov	r6, r4
 80206e2:	4602      	mov	r2, r0
 80206e4:	460d      	mov	r5, r1
 80206e6:	46a6      	mov	lr, r4
 80206e8:	9002      	str	r0, [sp, #8]
 80206ea:	4688      	mov	r8, r1
 80206ec:	e7db      	b.n	80206a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80206ee:	4626      	mov	r6, r4
 80206f0:	4602      	mov	r2, r0
 80206f2:	460d      	mov	r5, r1
 80206f4:	e7d7      	b.n	80206a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 80206f6:	4626      	mov	r6, r4
 80206f8:	4602      	mov	r2, r0
 80206fa:	460d      	mov	r5, r1
 80206fc:	f1b9 0f0f 	cmp.w	r9, #15
 8020700:	d8d4      	bhi.n	80206ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 8020702:	fa1f f38c 	uxth.w	r3, ip
 8020706:	fa1f fc89 	uxth.w	ip, r9
 802070a:	fb03 f70c 	mul.w	r7, r3, ip
 802070e:	011b      	lsls	r3, r3, #4
 8020710:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8020714:	9707      	str	r7, [sp, #28]
 8020716:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 802071a:	fa1f fc8c 	uxth.w	ip, ip
 802071e:	eba7 070c 	sub.w	r7, r7, ip
 8020722:	b2bf      	uxth	r7, r7
 8020724:	9709      	str	r7, [sp, #36]	; 0x24
 8020726:	9f07      	ldr	r7, [sp, #28]
 8020728:	1bdb      	subs	r3, r3, r7
 802072a:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 802072e:	b29b      	uxth	r3, r3
 8020730:	9708      	str	r7, [sp, #32]
 8020732:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020734:	930a      	str	r3, [sp, #40]	; 0x28
 8020736:	ea6f 0907 	mvn.w	r9, r7
 802073a:	fb03 fb0b 	mul.w	fp, r3, fp
 802073e:	9f04      	ldr	r7, [sp, #16]
 8020740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020742:	fa5f f989 	uxtb.w	r9, r9
 8020746:	fb03 bb07 	mla	fp, r3, r7, fp
 802074a:	9f07      	ldr	r7, [sp, #28]
 802074c:	fb11 f109 	smulbb	r1, r1, r9
 8020750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020752:	fb0c b808 	mla	r8, ip, r8, fp
 8020756:	fb10 f009 	smulbb	r0, r0, r9
 802075a:	fb14 f409 	smulbb	r4, r4, r9
 802075e:	fb07 8805 	mla	r8, r7, r5, r8
 8020762:	9d08      	ldr	r5, [sp, #32]
 8020764:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020766:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802076a:	fb08 1805 	mla	r8, r8, r5, r1
 802076e:	9d05      	ldr	r5, [sp, #20]
 8020770:	fa1f f888 	uxth.w	r8, r8
 8020774:	f108 0101 	add.w	r1, r8, #1
 8020778:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 802077c:	9903      	ldr	r1, [sp, #12]
 802077e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020782:	f881 8000 	strb.w	r8, [r1]
 8020786:	fb03 f10a 	mul.w	r1, r3, sl
 802078a:	fb07 1105 	mla	r1, r7, r5, r1
 802078e:	9d02      	ldr	r5, [sp, #8]
 8020790:	fb0c 1105 	mla	r1, ip, r5, r1
 8020794:	9d07      	ldr	r5, [sp, #28]
 8020796:	fb05 1102 	mla	r1, r5, r2, r1
 802079a:	9a08      	ldr	r2, [sp, #32]
 802079c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80207a0:	fb01 0102 	mla	r1, r1, r2, r0
 80207a4:	9a03      	ldr	r2, [sp, #12]
 80207a6:	b289      	uxth	r1, r1
 80207a8:	1c48      	adds	r0, r1, #1
 80207aa:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80207ae:	1209      	asrs	r1, r1, #8
 80207b0:	7051      	strb	r1, [r2, #1]
 80207b2:	9a01      	ldr	r2, [sp, #4]
 80207b4:	4353      	muls	r3, r2
 80207b6:	9a06      	ldr	r2, [sp, #24]
 80207b8:	fb07 3702 	mla	r7, r7, r2, r3
 80207bc:	9b08      	ldr	r3, [sp, #32]
 80207be:	fb0c 7c0e 	mla	ip, ip, lr, r7
 80207c2:	fb05 c606 	mla	r6, r5, r6, ip
 80207c6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80207ca:	fb06 4603 	mla	r6, r6, r3, r4
 80207ce:	9b03      	ldr	r3, [sp, #12]
 80207d0:	b2b6      	uxth	r6, r6
 80207d2:	f106 0e01 	add.w	lr, r6, #1
 80207d6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80207da:	1236      	asrs	r6, r6, #8
 80207dc:	709e      	strb	r6, [r3, #2]
 80207de:	b00d      	add	sp, #52	; 0x34
 80207e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207e4:	f1bc 0f0f 	cmp.w	ip, #15
 80207e8:	f63f af60 	bhi.w	80206ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 80207ec:	4626      	mov	r6, r4
 80207ee:	4602      	mov	r2, r0
 80207f0:	460d      	mov	r5, r1
 80207f2:	46a6      	mov	lr, r4
 80207f4:	9002      	str	r0, [sp, #8]
 80207f6:	4688      	mov	r8, r1
 80207f8:	e783      	b.n	8020702 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 80207fa:	bf00      	nop
 80207fc:	0802b67c 	.word	0x0802b67c
 8020800:	0802bb72 	.word	0x0802bb72
 8020804:	0802b745 	.word	0x0802b745

08020808 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802080c:	ed2d 8b08 	vpush	{d8-d11}
 8020810:	b0a1      	sub	sp, #132	; 0x84
 8020812:	eeb0 aa40 	vmov.f32	s20, s0
 8020816:	eef0 9a60 	vmov.f32	s19, s1
 802081a:	9307      	str	r3, [sp, #28]
 802081c:	eeb0 9a41 	vmov.f32	s18, s2
 8020820:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 8020824:	eeb0 8a62 	vmov.f32	s16, s5
 8020828:	9210      	str	r2, [sp, #64]	; 0x40
 802082a:	eef0 8a43 	vmov.f32	s17, s6
 802082e:	9308      	str	r3, [sp, #32]
 8020830:	eef0 ba44 	vmov.f32	s23, s8
 8020834:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 8020838:	eeb0 ba64 	vmov.f32	s22, s9
 802083c:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 802083e:	eef0 aa45 	vmov.f32	s21, s10
 8020842:	930a      	str	r3, [sp, #40]	; 0x28
 8020844:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 8020848:	901f      	str	r0, [sp, #124]	; 0x7c
 802084a:	930f      	str	r3, [sp, #60]	; 0x3c
 802084c:	6850      	ldr	r0, [r2, #4]
 802084e:	910e      	str	r1, [sp, #56]	; 0x38
 8020850:	6812      	ldr	r2, [r2, #0]
 8020852:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 8020856:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 802085a:	fb00 1303 	mla	r3, r0, r3, r1
 802085e:	9908      	ldr	r1, [sp, #32]
 8020860:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020864:	18d3      	adds	r3, r2, r3
 8020866:	2203      	movs	r2, #3
 8020868:	9309      	str	r3, [sp, #36]	; 0x24
 802086a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 802086c:	681b      	ldr	r3, [r3, #0]
 802086e:	930c      	str	r3, [sp, #48]	; 0x30
 8020870:	f06f 0304 	mvn.w	r3, #4
 8020874:	fb11 3302 	smlabb	r3, r1, r2, r3
 8020878:	930d      	str	r3, [sp, #52]	; 0x34
 802087a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802087c:	43db      	mvns	r3, r3
 802087e:	b2db      	uxtb	r3, r3
 8020880:	930b      	str	r3, [sp, #44]	; 0x2c
 8020882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020884:	2b00      	cmp	r3, #0
 8020886:	dc03      	bgt.n	8020890 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8020888:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802088a:	2b00      	cmp	r3, #0
 802088c:	f340 81df 	ble.w	8020c4e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8020890:	9b07      	ldr	r3, [sp, #28]
 8020892:	2b00      	cmp	r3, #0
 8020894:	f340 80f2 	ble.w	8020a7c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8020898:	ea5f 4228 	movs.w	r2, r8, asr #16
 802089c:	ea4f 432b 	mov.w	r3, fp, asr #16
 80208a0:	d430      	bmi.n	8020904 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 80208a2:	1c51      	adds	r1, r2, #1
 80208a4:	9808      	ldr	r0, [sp, #32]
 80208a6:	4281      	cmp	r1, r0
 80208a8:	da2f      	bge.n	802090a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80208aa:	2b00      	cmp	r3, #0
 80208ac:	db2d      	blt.n	802090a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80208ae:	1c59      	adds	r1, r3, #1
 80208b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80208b2:	4288      	cmp	r0, r1
 80208b4:	dd29      	ble.n	802090a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 80208b6:	9b07      	ldr	r3, [sp, #28]
 80208b8:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80208ba:	3b01      	subs	r3, #1
 80208bc:	fb02 8203 	mla	r2, r2, r3, r8
 80208c0:	1412      	asrs	r2, r2, #16
 80208c2:	d42d      	bmi.n	8020920 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80208c4:	3201      	adds	r2, #1
 80208c6:	9908      	ldr	r1, [sp, #32]
 80208c8:	4291      	cmp	r1, r2
 80208ca:	dd29      	ble.n	8020920 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80208cc:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80208ce:	fb02 b303 	mla	r3, r2, r3, fp
 80208d2:	141b      	asrs	r3, r3, #16
 80208d4:	d424      	bmi.n	8020920 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80208d6:	3301      	adds	r3, #1
 80208d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80208da:	429a      	cmp	r2, r3
 80208dc:	dd20      	ble.n	8020920 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80208de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208e0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80208e4:	1cde      	adds	r6, r3, #3
 80208e6:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 80208ea:	f1bc 0f00 	cmp.w	ip, #0
 80208ee:	f300 811f 	bgt.w	8020b30 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 80208f2:	9b07      	ldr	r3, [sp, #28]
 80208f4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80208f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80208fa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80208fe:	4423      	add	r3, r4
 8020900:	9309      	str	r3, [sp, #36]	; 0x24
 8020902:	e0bd      	b.n	8020a80 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8020904:	1c57      	adds	r7, r2, #1
 8020906:	f040 80ae 	bne.w	8020a66 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 802090a:	9908      	ldr	r1, [sp, #32]
 802090c:	428a      	cmp	r2, r1
 802090e:	f280 80aa 	bge.w	8020a66 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8020912:	1c5e      	adds	r6, r3, #1
 8020914:	f2c0 80a7 	blt.w	8020a66 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8020918:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802091a:	4293      	cmp	r3, r2
 802091c:	f280 80a3 	bge.w	8020a66 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 8020920:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8020924:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8020926:	f1ba 0f00 	cmp.w	sl, #0
 802092a:	dde2      	ble.n	80208f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 802092c:	ea5f 4028 	movs.w	r0, r8, asr #16
 8020930:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8020934:	ea4f 412b 	mov.w	r1, fp, asr #16
 8020938:	f3cb 3203 	ubfx	r2, fp, #12, #4
 802093c:	f100 80df 	bmi.w	8020afe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8020940:	1c45      	adds	r5, r0, #1
 8020942:	9f08      	ldr	r7, [sp, #32]
 8020944:	42af      	cmp	r7, r5
 8020946:	f340 80dc 	ble.w	8020b02 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 802094a:	2900      	cmp	r1, #0
 802094c:	f2c0 80d9 	blt.w	8020b02 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 8020950:	1c4d      	adds	r5, r1, #1
 8020952:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8020954:	42af      	cmp	r7, r5
 8020956:	f340 80d4 	ble.w	8020b02 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 802095a:	9d08      	ldr	r5, [sp, #32]
 802095c:	fb05 0101 	mla	r1, r5, r1, r0
 8020960:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020962:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020966:	1845      	adds	r5, r0, r1
 8020968:	5c40      	ldrb	r0, [r0, r1]
 802096a:	792f      	ldrb	r7, [r5, #4]
 802096c:	7869      	ldrb	r1, [r5, #1]
 802096e:	9711      	str	r7, [sp, #68]	; 0x44
 8020970:	796f      	ldrb	r7, [r5, #5]
 8020972:	f895 e002 	ldrb.w	lr, [r5, #2]
 8020976:	f895 9003 	ldrb.w	r9, [r5, #3]
 802097a:	9712      	str	r7, [sp, #72]	; 0x48
 802097c:	b17a      	cbz	r2, 802099e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 802097e:	3505      	adds	r5, #5
 8020980:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8020982:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020984:	19ef      	adds	r7, r5, r7
 8020986:	5d2d      	ldrb	r5, [r5, r4]
 8020988:	787c      	ldrb	r4, [r7, #1]
 802098a:	9513      	str	r5, [sp, #76]	; 0x4c
 802098c:	9415      	str	r4, [sp, #84]	; 0x54
 802098e:	78bc      	ldrb	r4, [r7, #2]
 8020990:	9417      	str	r4, [sp, #92]	; 0x5c
 8020992:	78fc      	ldrb	r4, [r7, #3]
 8020994:	9414      	str	r4, [sp, #80]	; 0x50
 8020996:	793c      	ldrb	r4, [r7, #4]
 8020998:	9416      	str	r4, [sp, #88]	; 0x58
 802099a:	797c      	ldrb	r4, [r7, #5]
 802099c:	9418      	str	r4, [sp, #96]	; 0x60
 802099e:	b29b      	uxth	r3, r3
 80209a0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80209a2:	b292      	uxth	r2, r2
 80209a4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80209a8:	fb03 f702 	mul.w	r7, r3, r2
 80209ac:	011b      	lsls	r3, r3, #4
 80209ae:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 80209b2:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80209b6:	1bdb      	subs	r3, r3, r7
 80209b8:	b292      	uxth	r2, r2
 80209ba:	b29b      	uxth	r3, r3
 80209bc:	ebac 0c02 	sub.w	ip, ip, r2
 80209c0:	fb03 f909 	mul.w	r9, r3, r9
 80209c4:	fa1f fc8c 	uxth.w	ip, ip
 80209c8:	fb0c 9000 	mla	r0, ip, r0, r9
 80209cc:	f896 9000 	ldrb.w	r9, [r6]
 80209d0:	fb02 0004 	mla	r0, r2, r4, r0
 80209d4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80209d6:	fb07 0004 	mla	r0, r7, r4, r0
 80209da:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80209dc:	fb19 f904 	smulbb	r9, r9, r4
 80209e0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80209e4:	fb00 9005 	mla	r0, r0, r5, r9
 80209e8:	b280      	uxth	r0, r0
 80209ea:	f100 0901 	add.w	r9, r0, #1
 80209ee:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80209f2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80209f4:	4358      	muls	r0, r3
 80209f6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80209fa:	fb0c 0101 	mla	r1, ip, r1, r0
 80209fe:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020a00:	f886 9000 	strb.w	r9, [r6]
 8020a04:	fb02 1100 	mla	r1, r2, r0, r1
 8020a08:	9816      	ldr	r0, [sp, #88]	; 0x58
 8020a0a:	fb07 1100 	mla	r1, r7, r0, r1
 8020a0e:	7870      	ldrb	r0, [r6, #1]
 8020a10:	fb10 f004 	smulbb	r0, r0, r4
 8020a14:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020a18:	fb01 0105 	mla	r1, r1, r5, r0
 8020a1c:	b289      	uxth	r1, r1
 8020a1e:	1c48      	adds	r0, r1, #1
 8020a20:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8020a24:	1209      	asrs	r1, r1, #8
 8020a26:	7071      	strb	r1, [r6, #1]
 8020a28:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020a2a:	434b      	muls	r3, r1
 8020a2c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8020a2e:	fb0c 330e 	mla	r3, ip, lr, r3
 8020a32:	fb02 3201 	mla	r2, r2, r1, r3
 8020a36:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020a38:	fb07 2703 	mla	r7, r7, r3, r2
 8020a3c:	78b2      	ldrb	r2, [r6, #2]
 8020a3e:	fb12 f204 	smulbb	r2, r2, r4
 8020a42:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8020a46:	fb07 2505 	mla	r5, r7, r5, r2
 8020a4a:	b2ad      	uxth	r5, r5
 8020a4c:	1c6f      	adds	r7, r5, #1
 8020a4e:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 8020a52:	122d      	asrs	r5, r5, #8
 8020a54:	70b5      	strb	r5, [r6, #2]
 8020a56:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8020a58:	3603      	adds	r6, #3
 8020a5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020a5e:	4498      	add	r8, r3
 8020a60:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020a62:	449b      	add	fp, r3
 8020a64:	e75f      	b.n	8020926 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8020a66:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8020a68:	4498      	add	r8, r3
 8020a6a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020a6c:	449b      	add	fp, r3
 8020a6e:	9b07      	ldr	r3, [sp, #28]
 8020a70:	3b01      	subs	r3, #1
 8020a72:	9307      	str	r3, [sp, #28]
 8020a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a76:	3303      	adds	r3, #3
 8020a78:	9309      	str	r3, [sp, #36]	; 0x24
 8020a7a:	e709      	b.n	8020890 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8020a7c:	f47f af1b 	bne.w	80208b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 8020a80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020a82:	2b00      	cmp	r3, #0
 8020a84:	f340 80e3 	ble.w	8020c4e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 8020a88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020a8c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020a8e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8020a92:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8020a96:	eef0 6a48 	vmov.f32	s13, s16
 8020a9a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8020a9e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8020aa2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020aa6:	ee16 8a90 	vmov	r8, s13
 8020aaa:	eef0 6a68 	vmov.f32	s13, s17
 8020aae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020ab2:	ee16 ba90 	vmov	fp, s13
 8020ab6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8020aba:	ee69 7a27 	vmul.f32	s15, s18, s15
 8020abe:	ee37 8a48 	vsub.f32	s16, s14, s16
 8020ac2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8020ac6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8020aca:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8020ace:	ee18 2a10 	vmov	r2, s16
 8020ad2:	eeb0 8a47 	vmov.f32	s16, s14
 8020ad6:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ada:	ee18 2a90 	vmov	r2, s17
 8020ade:	9335      	str	r3, [sp, #212]	; 0xd4
 8020ae0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020ae2:	eef0 8a67 	vmov.f32	s17, s15
 8020ae6:	fb92 f3f3 	sdiv	r3, r2, r3
 8020aea:	9336      	str	r3, [sp, #216]	; 0xd8
 8020aec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020aee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020af0:	3b01      	subs	r3, #1
 8020af2:	930e      	str	r3, [sp, #56]	; 0x38
 8020af4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8020af6:	bf08      	it	eq
 8020af8:	4613      	moveq	r3, r2
 8020afa:	9307      	str	r3, [sp, #28]
 8020afc:	e6c1      	b.n	8020882 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8020afe:	1c45      	adds	r5, r0, #1
 8020b00:	d1a9      	bne.n	8020a56 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020b02:	9c08      	ldr	r4, [sp, #32]
 8020b04:	42a0      	cmp	r0, r4
 8020b06:	daa6      	bge.n	8020a56 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020b08:	1c4c      	adds	r4, r1, #1
 8020b0a:	dba4      	blt.n	8020a56 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020b0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020b0e:	428c      	cmp	r4, r1
 8020b10:	dda1      	ble.n	8020a56 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020b12:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020b14:	9001      	str	r0, [sp, #4]
 8020b16:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8020b18:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8020b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020b1e:	4631      	mov	r1, r6
 8020b20:	e9cd 2404 	strd	r2, r4, [sp, #16]
 8020b24:	9300      	str	r3, [sp, #0]
 8020b26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020b28:	9b08      	ldr	r3, [sp, #32]
 8020b2a:	f7ff fd5b 	bl	80205e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8020b2e:	e792      	b.n	8020a56 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 8020b30:	ea4f 4228 	mov.w	r2, r8, asr #16
 8020b34:	9c08      	ldr	r4, [sp, #32]
 8020b36:	ea4f 402b 	mov.w	r0, fp, asr #16
 8020b3a:	f3cb 3103 	ubfx	r1, fp, #12, #4
 8020b3e:	f3c8 3303 	ubfx	r3, r8, #12, #4
 8020b42:	fb04 2000 	mla	r0, r4, r0, r2
 8020b46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020b48:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020b4a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020b4e:	4402      	add	r2, r0
 8020b50:	5c25      	ldrb	r5, [r4, r0]
 8020b52:	7894      	ldrb	r4, [r2, #2]
 8020b54:	7850      	ldrb	r0, [r2, #1]
 8020b56:	9411      	str	r4, [sp, #68]	; 0x44
 8020b58:	7954      	ldrb	r4, [r2, #5]
 8020b5a:	f892 a003 	ldrb.w	sl, [r2, #3]
 8020b5e:	f892 9004 	ldrb.w	r9, [r2, #4]
 8020b62:	9412      	str	r4, [sp, #72]	; 0x48
 8020b64:	b171      	cbz	r1, 8020b84 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8020b66:	3205      	adds	r2, #5
 8020b68:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020b6a:	1917      	adds	r7, r2, r4
 8020b6c:	5d12      	ldrb	r2, [r2, r4]
 8020b6e:	9219      	str	r2, [sp, #100]	; 0x64
 8020b70:	787a      	ldrb	r2, [r7, #1]
 8020b72:	921b      	str	r2, [sp, #108]	; 0x6c
 8020b74:	78ba      	ldrb	r2, [r7, #2]
 8020b76:	921d      	str	r2, [sp, #116]	; 0x74
 8020b78:	78fa      	ldrb	r2, [r7, #3]
 8020b7a:	921a      	str	r2, [sp, #104]	; 0x68
 8020b7c:	793a      	ldrb	r2, [r7, #4]
 8020b7e:	921c      	str	r2, [sp, #112]	; 0x70
 8020b80:	797a      	ldrb	r2, [r7, #5]
 8020b82:	921e      	str	r2, [sp, #120]	; 0x78
 8020b84:	b29b      	uxth	r3, r3
 8020b86:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8020b88:	b289      	uxth	r1, r1
 8020b8a:	3603      	adds	r6, #3
 8020b8c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020b90:	fb03 f201 	mul.w	r2, r3, r1
 8020b94:	011b      	lsls	r3, r3, #4
 8020b96:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 8020b9a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8020b9e:	1a9b      	subs	r3, r3, r2
 8020ba0:	b289      	uxth	r1, r1
 8020ba2:	b29b      	uxth	r3, r3
 8020ba4:	1a7f      	subs	r7, r7, r1
 8020ba6:	fb03 fa0a 	mul.w	sl, r3, sl
 8020baa:	b2bf      	uxth	r7, r7
 8020bac:	fb03 f909 	mul.w	r9, r3, r9
 8020bb0:	fb07 a505 	mla	r5, r7, r5, sl
 8020bb4:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 8020bb8:	fb07 9000 	mla	r0, r7, r0, r9
 8020bbc:	fb01 5504 	mla	r5, r1, r4, r5
 8020bc0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8020bc2:	fb02 5504 	mla	r5, r2, r4, r5
 8020bc6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020bc8:	fb1a fa04 	smulbb	sl, sl, r4
 8020bcc:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8020bd0:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8020bd2:	fb05 a50e 	mla	r5, r5, lr, sl
 8020bd6:	fb01 0004 	mla	r0, r1, r4, r0
 8020bda:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020bdc:	b2ad      	uxth	r5, r5
 8020bde:	fb02 0004 	mla	r0, r2, r4, r0
 8020be2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020be4:	f105 0a01 	add.w	sl, r5, #1
 8020be8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020bec:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8020bf0:	122d      	asrs	r5, r5, #8
 8020bf2:	f806 5c06 	strb.w	r5, [r6, #-6]
 8020bf6:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 8020bfa:	fb15 f504 	smulbb	r5, r5, r4
 8020bfe:	fb00 500e 	mla	r0, r0, lr, r5
 8020c02:	b280      	uxth	r0, r0
 8020c04:	1c45      	adds	r5, r0, #1
 8020c06:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020c0a:	1200      	asrs	r0, r0, #8
 8020c0c:	f806 0c05 	strb.w	r0, [r6, #-5]
 8020c10:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020c12:	4343      	muls	r3, r0
 8020c14:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020c16:	fb07 3300 	mla	r3, r7, r0, r3
 8020c1a:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020c1c:	fb01 3100 	mla	r1, r1, r0, r3
 8020c20:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020c22:	fb02 1203 	mla	r2, r2, r3, r1
 8020c26:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 8020c2a:	fb11 f104 	smulbb	r1, r1, r4
 8020c2e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020c32:	fb02 120e 	mla	r2, r2, lr, r1
 8020c36:	b292      	uxth	r2, r2
 8020c38:	1c53      	adds	r3, r2, #1
 8020c3a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020c3e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8020c40:	1212      	asrs	r2, r2, #8
 8020c42:	4498      	add	r8, r3
 8020c44:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8020c46:	f806 2c04 	strb.w	r2, [r6, #-4]
 8020c4a:	449b      	add	fp, r3
 8020c4c:	e64d      	b.n	80208ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8020c4e:	b021      	add	sp, #132	; 0x84
 8020c50:	ecbd 8b08 	vpop	{d8-d11}
 8020c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020c58 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8020c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c5c:	b085      	sub	sp, #20
 8020c5e:	784d      	ldrb	r5, [r1, #1]
 8020c60:	788e      	ldrb	r6, [r1, #2]
 8020c62:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8020c66:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8020c6a:	9403      	str	r4, [sp, #12]
 8020c6c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8020c70:	780c      	ldrb	r4, [r1, #0]
 8020c72:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 8020c76:	fb07 ce03 	mla	lr, r7, r3, ip
 8020c7a:	2f00      	cmp	r7, #0
 8020c7c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020c80:	eb02 0b0e 	add.w	fp, r2, lr
 8020c84:	db56      	blt.n	8020d34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8020c86:	45b9      	cmp	r9, r7
 8020c88:	dd54      	ble.n	8020d34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 8020c8a:	f1bc 0f00 	cmp.w	ip, #0
 8020c8e:	db4d      	blt.n	8020d2c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8020c90:	4563      	cmp	r3, ip
 8020c92:	dd4b      	ble.n	8020d2c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 8020c94:	f812 200e 	ldrb.w	r2, [r2, lr]
 8020c98:	9200      	str	r2, [sp, #0]
 8020c9a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8020c9e:	9201      	str	r2, [sp, #4]
 8020ca0:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8020ca4:	9202      	str	r2, [sp, #8]
 8020ca6:	f11c 0201 	adds.w	r2, ip, #1
 8020caa:	d44a      	bmi.n	8020d42 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020cac:	4293      	cmp	r3, r2
 8020cae:	dd48      	ble.n	8020d42 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020cb0:	2800      	cmp	r0, #0
 8020cb2:	d046      	beq.n	8020d42 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 8020cb4:	f89b e003 	ldrb.w	lr, [fp, #3]
 8020cb8:	f89b 8004 	ldrb.w	r8, [fp, #4]
 8020cbc:	f89b a005 	ldrb.w	sl, [fp, #5]
 8020cc0:	3701      	adds	r7, #1
 8020cc2:	d446      	bmi.n	8020d52 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8020cc4:	45b9      	cmp	r9, r7
 8020cc6:	dd44      	ble.n	8020d52 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 8020cc8:	9a03      	ldr	r2, [sp, #12]
 8020cca:	2a00      	cmp	r2, #0
 8020ccc:	d045      	beq.n	8020d5a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 8020cce:	f1bc 0f00 	cmp.w	ip, #0
 8020cd2:	db3a      	blt.n	8020d4a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8020cd4:	4563      	cmp	r3, ip
 8020cd6:	dd38      	ble.n	8020d4a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 8020cd8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8020cdc:	f04f 0903 	mov.w	r9, #3
 8020ce0:	f81b 7002 	ldrb.w	r7, [fp, r2]
 8020ce4:	fb03 b209 	mla	r2, r3, r9, fp
 8020ce8:	fb03 b909 	mla	r9, r3, r9, fp
 8020cec:	7852      	ldrb	r2, [r2, #1]
 8020cee:	f899 9002 	ldrb.w	r9, [r9, #2]
 8020cf2:	f11c 0c01 	adds.w	ip, ip, #1
 8020cf6:	d40d      	bmi.n	8020d14 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8020cf8:	4563      	cmp	r3, ip
 8020cfa:	dd0b      	ble.n	8020d14 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8020cfc:	b160      	cbz	r0, 8020d18 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 8020cfe:	2603      	movs	r6, #3
 8020d00:	fb13 6406 	smlabb	r4, r3, r6, r6
 8020d04:	fb03 b506 	mla	r5, r3, r6, fp
 8020d08:	fb03 b306 	mla	r3, r3, r6, fp
 8020d0c:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8020d10:	792d      	ldrb	r5, [r5, #4]
 8020d12:	795e      	ldrb	r6, [r3, #5]
 8020d14:	280f      	cmp	r0, #15
 8020d16:	d802      	bhi.n	8020d1e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8020d18:	9b03      	ldr	r3, [sp, #12]
 8020d1a:	2b0f      	cmp	r3, #15
 8020d1c:	d922      	bls.n	8020d64 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 8020d1e:	4b2f      	ldr	r3, [pc, #188]	; (8020ddc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 8020d20:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8020d24:	4a2e      	ldr	r2, [pc, #184]	; (8020de0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 8020d26:	482f      	ldr	r0, [pc, #188]	; (8020de4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 8020d28:	f003 ff96 	bl	8024c58 <__assert_func>
 8020d2c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8020d30:	9400      	str	r4, [sp, #0]
 8020d32:	e7b8      	b.n	8020ca6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 8020d34:	46b2      	mov	sl, r6
 8020d36:	46a8      	mov	r8, r5
 8020d38:	46a6      	mov	lr, r4
 8020d3a:	9400      	str	r4, [sp, #0]
 8020d3c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8020d40:	e7be      	b.n	8020cc0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8020d42:	46b2      	mov	sl, r6
 8020d44:	46a8      	mov	r8, r5
 8020d46:	46a6      	mov	lr, r4
 8020d48:	e7ba      	b.n	8020cc0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 8020d4a:	46b1      	mov	r9, r6
 8020d4c:	462a      	mov	r2, r5
 8020d4e:	4627      	mov	r7, r4
 8020d50:	e7cf      	b.n	8020cf2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8020d52:	46b1      	mov	r9, r6
 8020d54:	462a      	mov	r2, r5
 8020d56:	4627      	mov	r7, r4
 8020d58:	e7dc      	b.n	8020d14 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 8020d5a:	280f      	cmp	r0, #15
 8020d5c:	d8df      	bhi.n	8020d1e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 8020d5e:	46b1      	mov	r9, r6
 8020d60:	462a      	mov	r2, r5
 8020d62:	4627      	mov	r7, r4
 8020d64:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8020d68:	b280      	uxth	r0, r0
 8020d6a:	fb00 f30b 	mul.w	r3, r0, fp
 8020d6e:	0100      	lsls	r0, r0, #4
 8020d70:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 8020d74:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8020d78:	1ac0      	subs	r0, r0, r3
 8020d7a:	fa1f fb8b 	uxth.w	fp, fp
 8020d7e:	b280      	uxth	r0, r0
 8020d80:	ebac 0c0b 	sub.w	ip, ip, fp
 8020d84:	9003      	str	r0, [sp, #12]
 8020d86:	fa1f fc8c 	uxth.w	ip, ip
 8020d8a:	fb00 fe0e 	mul.w	lr, r0, lr
 8020d8e:	9800      	ldr	r0, [sp, #0]
 8020d90:	fb0c ee00 	mla	lr, ip, r0, lr
 8020d94:	9803      	ldr	r0, [sp, #12]
 8020d96:	fb00 f808 	mul.w	r8, r0, r8
 8020d9a:	9801      	ldr	r0, [sp, #4]
 8020d9c:	fb0b ee07 	mla	lr, fp, r7, lr
 8020da0:	fb0c 8800 	mla	r8, ip, r0, r8
 8020da4:	fb03 ee04 	mla	lr, r3, r4, lr
 8020da8:	fb0b 8202 	mla	r2, fp, r2, r8
 8020dac:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020db0:	fb03 2505 	mla	r5, r3, r5, r2
 8020db4:	9a03      	ldr	r2, [sp, #12]
 8020db6:	f881 e000 	strb.w	lr, [r1]
 8020dba:	fb02 f00a 	mul.w	r0, r2, sl
 8020dbe:	9a02      	ldr	r2, [sp, #8]
 8020dc0:	122d      	asrs	r5, r5, #8
 8020dc2:	fb0c 0c02 	mla	ip, ip, r2, r0
 8020dc6:	704d      	strb	r5, [r1, #1]
 8020dc8:	fb0b c909 	mla	r9, fp, r9, ip
 8020dcc:	fb03 9606 	mla	r6, r3, r6, r9
 8020dd0:	1236      	asrs	r6, r6, #8
 8020dd2:	708e      	strb	r6, [r1, #2]
 8020dd4:	b005      	add	sp, #20
 8020dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dda:	bf00      	nop
 8020ddc:	0802b67c 	.word	0x0802b67c
 8020de0:	0802bb72 	.word	0x0802bb72
 8020de4:	0802b745 	.word	0x0802b745

08020de8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8020de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dec:	ed2d 8b0a 	vpush	{d8-d12}
 8020df0:	b09d      	sub	sp, #116	; 0x74
 8020df2:	eeb0 aa40 	vmov.f32	s20, s0
 8020df6:	eef0 9a60 	vmov.f32	s19, s1
 8020dfa:	9306      	str	r3, [sp, #24]
 8020dfc:	eeb0 9a41 	vmov.f32	s18, s2
 8020e00:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 8020e04:	eeb0 8a62 	vmov.f32	s16, s5
 8020e08:	901b      	str	r0, [sp, #108]	; 0x6c
 8020e0a:	eef0 8a43 	vmov.f32	s17, s6
 8020e0e:	9307      	str	r3, [sp, #28]
 8020e10:	eeb0 ca44 	vmov.f32	s24, s8
 8020e14:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 8020e18:	eef0 ba64 	vmov.f32	s23, s9
 8020e1c:	eeb0 ba45 	vmov.f32	s22, s10
 8020e20:	9309      	str	r3, [sp, #36]	; 0x24
 8020e22:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8020e26:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 8020e2a:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8020e2c:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8020e30:	6850      	ldr	r0, [r2, #4]
 8020e32:	6812      	ldr	r2, [r2, #0]
 8020e34:	fb00 1303 	mla	r3, r0, r3, r1
 8020e38:	9907      	ldr	r1, [sp, #28]
 8020e3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020e3e:	18d3      	adds	r3, r2, r3
 8020e40:	2203      	movs	r2, #3
 8020e42:	9308      	str	r3, [sp, #32]
 8020e44:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8020e46:	681b      	ldr	r3, [r3, #0]
 8020e48:	930a      	str	r3, [sp, #40]	; 0x28
 8020e4a:	f06f 0304 	mvn.w	r3, #4
 8020e4e:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 8020e52:	fb11 3302 	smlabb	r3, r1, r2, r3
 8020e56:	930b      	str	r3, [sp, #44]	; 0x2c
 8020e58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020e5a:	2b00      	cmp	r3, #0
 8020e5c:	dc03      	bgt.n	8020e66 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8020e5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020e60:	2b00      	cmp	r3, #0
 8020e62:	f340 8193 	ble.w	802118c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 8020e66:	9b06      	ldr	r3, [sp, #24]
 8020e68:	2b00      	cmp	r3, #0
 8020e6a:	f340 80d0 	ble.w	802100e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 8020e6e:	1432      	asrs	r2, r6, #16
 8020e70:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020e74:	d42f      	bmi.n	8020ed6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8020e76:	1c51      	adds	r1, r2, #1
 8020e78:	9807      	ldr	r0, [sp, #28]
 8020e7a:	4281      	cmp	r1, r0
 8020e7c:	da2e      	bge.n	8020edc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020e7e:	2b00      	cmp	r3, #0
 8020e80:	db2c      	blt.n	8020edc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020e82:	1c59      	adds	r1, r3, #1
 8020e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020e86:	4288      	cmp	r0, r1
 8020e88:	dd28      	ble.n	8020edc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8020e8a:	9b06      	ldr	r3, [sp, #24]
 8020e8c:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8020e8e:	3b01      	subs	r3, #1
 8020e90:	fb02 6203 	mla	r2, r2, r3, r6
 8020e94:	1412      	asrs	r2, r2, #16
 8020e96:	d42c      	bmi.n	8020ef2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8020e98:	3201      	adds	r2, #1
 8020e9a:	9907      	ldr	r1, [sp, #28]
 8020e9c:	4291      	cmp	r1, r2
 8020e9e:	dd28      	ble.n	8020ef2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8020ea0:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8020ea2:	fb02 5303 	mla	r3, r2, r3, r5
 8020ea6:	141b      	asrs	r3, r3, #16
 8020ea8:	d423      	bmi.n	8020ef2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8020eaa:	3301      	adds	r3, #1
 8020eac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020eae:	429a      	cmp	r2, r3
 8020eb0:	dd1f      	ble.n	8020ef2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8020eb2:	9b08      	ldr	r3, [sp, #32]
 8020eb4:	f8dd e018 	ldr.w	lr, [sp, #24]
 8020eb8:	f103 0c03 	add.w	ip, r3, #3
 8020ebc:	f1be 0f00 	cmp.w	lr, #0
 8020ec0:	f300 80fa 	bgt.w	80210b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8020ec4:	9b06      	ldr	r3, [sp, #24]
 8020ec6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020eca:	9b08      	ldr	r3, [sp, #32]
 8020ecc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020ed0:	4423      	add	r3, r4
 8020ed2:	9308      	str	r3, [sp, #32]
 8020ed4:	e09d      	b.n	8021012 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8020ed6:	1c51      	adds	r1, r2, #1
 8020ed8:	f040 808e 	bne.w	8020ff8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8020edc:	9907      	ldr	r1, [sp, #28]
 8020ede:	428a      	cmp	r2, r1
 8020ee0:	f280 808a 	bge.w	8020ff8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8020ee4:	1c5f      	adds	r7, r3, #1
 8020ee6:	f2c0 8087 	blt.w	8020ff8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8020eea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020eec:	4293      	cmp	r3, r2
 8020eee:	f280 8083 	bge.w	8020ff8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8020ef2:	9f06      	ldr	r7, [sp, #24]
 8020ef4:	f8dd a020 	ldr.w	sl, [sp, #32]
 8020ef8:	2f00      	cmp	r7, #0
 8020efa:	dde3      	ble.n	8020ec4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8020efc:	1432      	asrs	r2, r6, #16
 8020efe:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020f02:	ea4f 4325 	mov.w	r3, r5, asr #16
 8020f06:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 8020f0a:	f100 80bf 	bmi.w	802108c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 8020f0e:	1c50      	adds	r0, r2, #1
 8020f10:	9c07      	ldr	r4, [sp, #28]
 8020f12:	4284      	cmp	r4, r0
 8020f14:	f340 80bc 	ble.w	8021090 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8020f18:	2b00      	cmp	r3, #0
 8020f1a:	f2c0 80b9 	blt.w	8021090 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8020f1e:	1c58      	adds	r0, r3, #1
 8020f20:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020f22:	4284      	cmp	r4, r0
 8020f24:	f340 80b4 	ble.w	8021090 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 8020f28:	9807      	ldr	r0, [sp, #28]
 8020f2a:	fb00 2303 	mla	r3, r0, r3, r2
 8020f2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020f30:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020f32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020f36:	441a      	add	r2, r3
 8020f38:	f810 c003 	ldrb.w	ip, [r0, r3]
 8020f3c:	7953      	ldrb	r3, [r2, #5]
 8020f3e:	7850      	ldrb	r0, [r2, #1]
 8020f40:	f892 e002 	ldrb.w	lr, [r2, #2]
 8020f44:	f892 9003 	ldrb.w	r9, [r2, #3]
 8020f48:	f892 8004 	ldrb.w	r8, [r2, #4]
 8020f4c:	930e      	str	r3, [sp, #56]	; 0x38
 8020f4e:	f1bb 0f00 	cmp.w	fp, #0
 8020f52:	d00f      	beq.n	8020f74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8020f54:	3205      	adds	r2, #5
 8020f56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020f58:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020f5a:	18d3      	adds	r3, r2, r3
 8020f5c:	5d12      	ldrb	r2, [r2, r4]
 8020f5e:	920f      	str	r2, [sp, #60]	; 0x3c
 8020f60:	785a      	ldrb	r2, [r3, #1]
 8020f62:	9211      	str	r2, [sp, #68]	; 0x44
 8020f64:	789a      	ldrb	r2, [r3, #2]
 8020f66:	9213      	str	r2, [sp, #76]	; 0x4c
 8020f68:	78da      	ldrb	r2, [r3, #3]
 8020f6a:	9210      	str	r2, [sp, #64]	; 0x40
 8020f6c:	791a      	ldrb	r2, [r3, #4]
 8020f6e:	795b      	ldrb	r3, [r3, #5]
 8020f70:	9212      	str	r2, [sp, #72]	; 0x48
 8020f72:	9314      	str	r3, [sp, #80]	; 0x50
 8020f74:	b28b      	uxth	r3, r1
 8020f76:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020f78:	fa1f f28b 	uxth.w	r2, fp
 8020f7c:	fb03 fb02 	mul.w	fp, r3, r2
 8020f80:	011b      	lsls	r3, r3, #4
 8020f82:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8020f86:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8020f8a:	eba3 030b 	sub.w	r3, r3, fp
 8020f8e:	b292      	uxth	r2, r2
 8020f90:	b29b      	uxth	r3, r3
 8020f92:	1a89      	subs	r1, r1, r2
 8020f94:	fb03 f808 	mul.w	r8, r3, r8
 8020f98:	b289      	uxth	r1, r1
 8020f9a:	fb03 f909 	mul.w	r9, r3, r9
 8020f9e:	fb01 8800 	mla	r8, r1, r0, r8
 8020fa2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020fa4:	fb01 990c 	mla	r9, r1, ip, r9
 8020fa8:	fb02 8800 	mla	r8, r2, r0, r8
 8020fac:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020fae:	fb02 9904 	mla	r9, r2, r4, r9
 8020fb2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020fb4:	fb0b 8800 	mla	r8, fp, r0, r8
 8020fb8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020fba:	fb0b 9904 	mla	r9, fp, r4, r9
 8020fbe:	4343      	muls	r3, r0
 8020fc0:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020fc4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020fc8:	fb01 330e 	mla	r3, r1, lr, r3
 8020fcc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8020fce:	f88a 9000 	strb.w	r9, [sl]
 8020fd2:	fb02 3201 	mla	r2, r2, r1, r3
 8020fd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020fd8:	f88a 8001 	strb.w	r8, [sl, #1]
 8020fdc:	fb0b 2b03 	mla	fp, fp, r3, r2
 8020fe0:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8020fe4:	f88a b002 	strb.w	fp, [sl, #2]
 8020fe8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020fea:	f10a 0a03 	add.w	sl, sl, #3
 8020fee:	3f01      	subs	r7, #1
 8020ff0:	441e      	add	r6, r3
 8020ff2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020ff4:	441d      	add	r5, r3
 8020ff6:	e77f      	b.n	8020ef8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8020ff8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8020ffa:	441e      	add	r6, r3
 8020ffc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8020ffe:	441d      	add	r5, r3
 8021000:	9b06      	ldr	r3, [sp, #24]
 8021002:	3b01      	subs	r3, #1
 8021004:	9306      	str	r3, [sp, #24]
 8021006:	9b08      	ldr	r3, [sp, #32]
 8021008:	3303      	adds	r3, #3
 802100a:	9308      	str	r3, [sp, #32]
 802100c:	e72b      	b.n	8020e66 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 802100e:	f47f af3c 	bne.w	8020e8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8021012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021014:	2b00      	cmp	r3, #0
 8021016:	f340 80b9 	ble.w	802118c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 802101a:	ee3a aa0c 	vadd.f32	s20, s20, s24
 802101e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021020:	ee79 9aab 	vadd.f32	s19, s19, s23
 8021024:	eef0 6a48 	vmov.f32	s13, s16
 8021028:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 802102c:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8021030:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021034:	ee16 6a90 	vmov	r6, s13
 8021038:	eef0 6a68 	vmov.f32	s13, s17
 802103c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021040:	ee16 5a90 	vmov	r5, s13
 8021044:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021048:	ee69 7a27 	vmul.f32	s15, s18, s15
 802104c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8021050:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021054:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021058:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802105c:	ee18 2a10 	vmov	r2, s16
 8021060:	eeb0 8a47 	vmov.f32	s16, s14
 8021064:	fb92 f3f3 	sdiv	r3, r2, r3
 8021068:	ee18 2a90 	vmov	r2, s17
 802106c:	9333      	str	r3, [sp, #204]	; 0xcc
 802106e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021070:	eef0 8a67 	vmov.f32	s17, s15
 8021074:	fb92 f3f3 	sdiv	r3, r2, r3
 8021078:	9334      	str	r3, [sp, #208]	; 0xd0
 802107a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802107c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802107e:	3b01      	subs	r3, #1
 8021080:	930c      	str	r3, [sp, #48]	; 0x30
 8021082:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021084:	bf08      	it	eq
 8021086:	4613      	moveq	r3, r2
 8021088:	9306      	str	r3, [sp, #24]
 802108a:	e6e5      	b.n	8020e58 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 802108c:	1c54      	adds	r4, r2, #1
 802108e:	d1ab      	bne.n	8020fe8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021090:	9807      	ldr	r0, [sp, #28]
 8021092:	4282      	cmp	r2, r0
 8021094:	daa8      	bge.n	8020fe8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8021096:	1c58      	adds	r0, r3, #1
 8021098:	dba6      	blt.n	8020fe8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 802109a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802109c:	4298      	cmp	r0, r3
 802109e:	dda3      	ble.n	8020fe8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80210a0:	9000      	str	r0, [sp, #0]
 80210a2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80210a4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80210a8:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 80210ac:	9b07      	ldr	r3, [sp, #28]
 80210ae:	4651      	mov	r1, sl
 80210b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80210b2:	f7ff fdd1 	bl	8020c58 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 80210b6:	e797      	b.n	8020fe8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 80210b8:	1431      	asrs	r1, r6, #16
 80210ba:	9c07      	ldr	r4, [sp, #28]
 80210bc:	1428      	asrs	r0, r5, #16
 80210be:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80210c2:	f3c6 3303 	ubfx	r3, r6, #12, #4
 80210c6:	fb04 1000 	mla	r0, r4, r0, r1
 80210ca:	990a      	ldr	r1, [sp, #40]	; 0x28
 80210cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80210ce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80210d2:	4401      	add	r1, r0
 80210d4:	5c20      	ldrb	r0, [r4, r0]
 80210d6:	f891 8002 	ldrb.w	r8, [r1, #2]
 80210da:	900e      	str	r0, [sp, #56]	; 0x38
 80210dc:	f891 a003 	ldrb.w	sl, [r1, #3]
 80210e0:	7848      	ldrb	r0, [r1, #1]
 80210e2:	f891 9004 	ldrb.w	r9, [r1, #4]
 80210e6:	f891 b005 	ldrb.w	fp, [r1, #5]
 80210ea:	b172      	cbz	r2, 802110a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 80210ec:	3105      	adds	r1, #5
 80210ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80210f0:	190f      	adds	r7, r1, r4
 80210f2:	5d09      	ldrb	r1, [r1, r4]
 80210f4:	9115      	str	r1, [sp, #84]	; 0x54
 80210f6:	7879      	ldrb	r1, [r7, #1]
 80210f8:	9117      	str	r1, [sp, #92]	; 0x5c
 80210fa:	78b9      	ldrb	r1, [r7, #2]
 80210fc:	9119      	str	r1, [sp, #100]	; 0x64
 80210fe:	78f9      	ldrb	r1, [r7, #3]
 8021100:	9116      	str	r1, [sp, #88]	; 0x58
 8021102:	7939      	ldrb	r1, [r7, #4]
 8021104:	9118      	str	r1, [sp, #96]	; 0x60
 8021106:	7979      	ldrb	r1, [r7, #5]
 8021108:	911a      	str	r1, [sp, #104]	; 0x68
 802110a:	b29b      	uxth	r3, r3
 802110c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802110e:	b292      	uxth	r2, r2
 8021110:	f10c 0c03 	add.w	ip, ip, #3
 8021114:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021118:	fb03 f102 	mul.w	r1, r3, r2
 802111c:	011b      	lsls	r3, r3, #4
 802111e:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 8021122:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8021126:	1a5b      	subs	r3, r3, r1
 8021128:	b292      	uxth	r2, r2
 802112a:	b29b      	uxth	r3, r3
 802112c:	1abf      	subs	r7, r7, r2
 802112e:	fb03 f909 	mul.w	r9, r3, r9
 8021132:	b2bf      	uxth	r7, r7
 8021134:	fb03 fa0a 	mul.w	sl, r3, sl
 8021138:	fb03 f30b 	mul.w	r3, r3, fp
 802113c:	fb07 9900 	mla	r9, r7, r0, r9
 8021140:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8021142:	fb07 aa04 	mla	sl, r7, r4, sl
 8021146:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021148:	fb02 9900 	mla	r9, r2, r0, r9
 802114c:	9818      	ldr	r0, [sp, #96]	; 0x60
 802114e:	fb07 3308 	mla	r3, r7, r8, r3
 8021152:	fb01 9900 	mla	r9, r1, r0, r9
 8021156:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021158:	fb02 aa04 	mla	sl, r2, r4, sl
 802115c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802115e:	fb02 3200 	mla	r2, r2, r0, r3
 8021162:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021164:	fb01 aa04 	mla	sl, r1, r4, sl
 8021168:	ea4f 2929 	mov.w	r9, r9, asr #8
 802116c:	fb01 2103 	mla	r1, r1, r3, r2
 8021170:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021172:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021176:	f80c 9c05 	strb.w	r9, [ip, #-5]
 802117a:	1209      	asrs	r1, r1, #8
 802117c:	441e      	add	r6, r3
 802117e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8021180:	f80c ac06 	strb.w	sl, [ip, #-6]
 8021184:	f80c 1c04 	strb.w	r1, [ip, #-4]
 8021188:	441d      	add	r5, r3
 802118a:	e697      	b.n	8020ebc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 802118c:	b01d      	add	sp, #116	; 0x74
 802118e:	ecbd 8b0a 	vpop	{d8-d12}
 8021192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021198 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8021198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802119c:	b085      	sub	sp, #20
 802119e:	7888      	ldrb	r0, [r1, #2]
 80211a0:	4691      	mov	r9, r2
 80211a2:	9000      	str	r0, [sp, #0]
 80211a4:	7848      	ldrb	r0, [r1, #1]
 80211a6:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 80211aa:	9001      	str	r0, [sp, #4]
 80211ac:	7808      	ldrb	r0, [r1, #0]
 80211ae:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80211b2:	9002      	str	r0, [sp, #8]
 80211b4:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 80211b8:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80211bc:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 80211c0:	fb04 c603 	mla	r6, r4, r3, ip
 80211c4:	2c00      	cmp	r4, #0
 80211c6:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 80211ca:	9a00      	ldr	r2, [sp, #0]
 80211cc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80211d0:	9a01      	ldr	r2, [sp, #4]
 80211d2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80211d6:	db3a      	blt.n	802124e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 80211d8:	45a0      	cmp	r8, r4
 80211da:	dd38      	ble.n	802124e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 80211dc:	f1bc 0f00 	cmp.w	ip, #0
 80211e0:	db33      	blt.n	802124a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 80211e2:	4563      	cmp	r3, ip
 80211e4:	dd31      	ble.n	802124a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 80211e6:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 80211ea:	f11c 0601 	adds.w	r6, ip, #1
 80211ee:	d431      	bmi.n	8021254 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 80211f0:	42b3      	cmp	r3, r6
 80211f2:	dd2f      	ble.n	8021254 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 80211f4:	b375      	cbz	r5, 8021254 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 80211f6:	f8de 6004 	ldr.w	r6, [lr, #4]
 80211fa:	3401      	adds	r4, #1
 80211fc:	d42e      	bmi.n	802125c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 80211fe:	45a0      	cmp	r8, r4
 8021200:	dd2c      	ble.n	802125c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021202:	b35f      	cbz	r7, 802125c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 8021204:	f1bc 0f00 	cmp.w	ip, #0
 8021208:	db26      	blt.n	8021258 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 802120a:	4563      	cmp	r3, ip
 802120c:	dd24      	ble.n	8021258 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 802120e:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8021212:	f11c 0c01 	adds.w	ip, ip, #1
 8021216:	d405      	bmi.n	8021224 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021218:	4563      	cmp	r3, ip
 802121a:	dd03      	ble.n	8021224 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802121c:	b115      	cbz	r5, 8021224 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802121e:	3301      	adds	r3, #1
 8021220:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8021224:	2d0f      	cmp	r5, #15
 8021226:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802122a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802122e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021232:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8021236:	d801      	bhi.n	802123c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 8021238:	2f0f      	cmp	r7, #15
 802123a:	d911      	bls.n	8021260 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 802123c:	4b80      	ldr	r3, [pc, #512]	; (8021440 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 802123e:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021242:	4a80      	ldr	r2, [pc, #512]	; (8021444 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 8021244:	4880      	ldr	r0, [pc, #512]	; (8021448 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 8021246:	f003 fd07 	bl	8024c58 <__assert_func>
 802124a:	4602      	mov	r2, r0
 802124c:	e7cd      	b.n	80211ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 802124e:	4606      	mov	r6, r0
 8021250:	4602      	mov	r2, r0
 8021252:	e7d2      	b.n	80211fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8021254:	4606      	mov	r6, r0
 8021256:	e7d0      	b.n	80211fa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 8021258:	4604      	mov	r4, r0
 802125a:	e7da      	b.n	8021212 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 802125c:	4604      	mov	r4, r0
 802125e:	e7e1      	b.n	8021224 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021260:	b2ab      	uxth	r3, r5
 8021262:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021266:	b2bf      	uxth	r7, r7
 8021268:	fb03 fe07 	mul.w	lr, r3, r7
 802126c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8021270:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021274:	eba3 0c0e 	sub.w	ip, r3, lr
 8021278:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 802127c:	b2bf      	uxth	r7, r7
 802127e:	fa1f fc8c 	uxth.w	ip, ip
 8021282:	eba5 0507 	sub.w	r5, r5, r7
 8021286:	fb0c f30a 	mul.w	r3, ip, sl
 802128a:	b2ad      	uxth	r5, r5
 802128c:	fb05 330b 	mla	r3, r5, fp, r3
 8021290:	fb07 3309 	mla	r3, r7, r9, r3
 8021294:	fb0e 3308 	mla	r3, lr, r8, r3
 8021298:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802129c:	9303      	str	r3, [sp, #12]
 802129e:	d018      	beq.n	80212d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 80212a0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80212a4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80212a8:	fb0b f303 	mul.w	r3, fp, r3
 80212ac:	fb0b fb02 	mul.w	fp, fp, r2
 80212b0:	0a1a      	lsrs	r2, r3, #8
 80212b2:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80212b6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80212ba:	441a      	add	r2, r3
 80212bc:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 80212c0:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 80212c4:	0a12      	lsrs	r2, r2, #8
 80212c6:	0a1b      	lsrs	r3, r3, #8
 80212c8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80212cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80212d0:	431a      	orrs	r2, r3
 80212d2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80212d6:	d019      	beq.n	802130c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 80212d8:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80212dc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80212e0:	fb0a fb0b 	mul.w	fp, sl, fp
 80212e4:	fb0a fa06 	mul.w	sl, sl, r6
 80212e8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80212ec:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80212f0:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 80212f4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80212f8:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80212fc:	445e      	add	r6, fp
 80212fe:	0a1b      	lsrs	r3, r3, #8
 8021300:	0a36      	lsrs	r6, r6, #8
 8021302:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021306:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802130a:	431e      	orrs	r6, r3
 802130c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021310:	d019      	beq.n	8021346 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 8021312:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021316:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802131a:	fb09 fa0a 	mul.w	sl, r9, sl
 802131e:	fb09 f904 	mul.w	r9, r9, r4
 8021322:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021326:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802132a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 802132e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021332:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8021336:	4454      	add	r4, sl
 8021338:	0a1b      	lsrs	r3, r3, #8
 802133a:	0a24      	lsrs	r4, r4, #8
 802133c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021340:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021344:	431c      	orrs	r4, r3
 8021346:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802134a:	d019      	beq.n	8021380 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 802134c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8021350:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021354:	fb08 f909 	mul.w	r9, r8, r9
 8021358:	fb08 f800 	mul.w	r8, r8, r0
 802135c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8021360:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021364:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8021368:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802136c:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8021370:	4448      	add	r0, r9
 8021372:	0a1b      	lsrs	r3, r3, #8
 8021374:	0a00      	lsrs	r0, r0, #8
 8021376:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802137a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802137e:	4318      	orrs	r0, r3
 8021380:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021384:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021388:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802138c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021390:	fb0c f808 	mul.w	r8, ip, r8
 8021394:	fb0c f606 	mul.w	r6, ip, r6
 8021398:	fb05 8803 	mla	r8, r5, r3, r8
 802139c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 80213a0:	fb05 6202 	mla	r2, r5, r2, r6
 80213a4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80213a8:	fb07 8803 	mla	r8, r7, r3, r8
 80213ac:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80213b0:	fb07 2704 	mla	r7, r7, r4, r2
 80213b4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80213b8:	fb0e 8303 	mla	r3, lr, r3, r8
 80213bc:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 80213c0:	fb0e 7e00 	mla	lr, lr, r0, r7
 80213c4:	9803      	ldr	r0, [sp, #12]
 80213c6:	b292      	uxth	r2, r2
 80213c8:	9c02      	ldr	r4, [sp, #8]
 80213ca:	0a1b      	lsrs	r3, r3, #8
 80213cc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80213d0:	4350      	muls	r0, r2
 80213d2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80213d6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80213da:	ea43 0e0e 	orr.w	lr, r3, lr
 80213de:	1c43      	adds	r3, r0, #1
 80213e0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80213e4:	fa5f f08e 	uxtb.w	r0, lr
 80213e8:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80213ec:	b2db      	uxtb	r3, r3
 80213ee:	fb14 f403 	smulbb	r4, r4, r3
 80213f2:	fb00 4002 	mla	r0, r0, r2, r4
 80213f6:	b280      	uxth	r0, r0
 80213f8:	1c44      	adds	r4, r0, #1
 80213fa:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80213fe:	9c01      	ldr	r4, [sp, #4]
 8021400:	fb14 f403 	smulbb	r4, r4, r3
 8021404:	1200      	asrs	r0, r0, #8
 8021406:	7008      	strb	r0, [r1, #0]
 8021408:	f3ce 2007 	ubfx	r0, lr, #8, #8
 802140c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021410:	fb00 4002 	mla	r0, r0, r2, r4
 8021414:	b280      	uxth	r0, r0
 8021416:	1c44      	adds	r4, r0, #1
 8021418:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 802141c:	1200      	asrs	r0, r0, #8
 802141e:	7048      	strb	r0, [r1, #1]
 8021420:	9800      	ldr	r0, [sp, #0]
 8021422:	fb10 f303 	smulbb	r3, r0, r3
 8021426:	fb0e 3202 	mla	r2, lr, r2, r3
 802142a:	b292      	uxth	r2, r2
 802142c:	f102 0e01 	add.w	lr, r2, #1
 8021430:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021434:	1212      	asrs	r2, r2, #8
 8021436:	708a      	strb	r2, [r1, #2]
 8021438:	b005      	add	sp, #20
 802143a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802143e:	bf00      	nop
 8021440:	0802b67c 	.word	0x0802b67c
 8021444:	0802bb72 	.word	0x0802bb72
 8021448:	0802b745 	.word	0x0802b745

0802144c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802144c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021450:	ed2d 8b08 	vpush	{d8-d11}
 8021454:	b099      	sub	sp, #100	; 0x64
 8021456:	eeb0 aa40 	vmov.f32	s20, s0
 802145a:	eef0 9a60 	vmov.f32	s19, s1
 802145e:	9306      	str	r3, [sp, #24]
 8021460:	eeb0 9a41 	vmov.f32	s18, s2
 8021464:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 8021468:	eeb0 8a62 	vmov.f32	s16, s5
 802146c:	9216      	str	r2, [sp, #88]	; 0x58
 802146e:	eef0 8a43 	vmov.f32	s17, s6
 8021472:	9307      	str	r3, [sp, #28]
 8021474:	eef0 ba44 	vmov.f32	s23, s8
 8021478:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 802147c:	eeb0 ba64 	vmov.f32	s22, s9
 8021480:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8021482:	eef0 aa45 	vmov.f32	s21, s10
 8021486:	9310      	str	r3, [sp, #64]	; 0x40
 8021488:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 802148c:	9017      	str	r0, [sp, #92]	; 0x5c
 802148e:	9112      	str	r1, [sp, #72]	; 0x48
 8021490:	6850      	ldr	r0, [r2, #4]
 8021492:	9315      	str	r3, [sp, #84]	; 0x54
 8021494:	6812      	ldr	r2, [r2, #0]
 8021496:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8021498:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 802149c:	fb00 1303 	mla	r3, r0, r3, r1
 80214a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80214a4:	18d3      	adds	r3, r2, r3
 80214a6:	930a      	str	r3, [sp, #40]	; 0x28
 80214a8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80214aa:	681b      	ldr	r3, [r3, #0]
 80214ac:	9311      	str	r3, [sp, #68]	; 0x44
 80214ae:	9b07      	ldr	r3, [sp, #28]
 80214b0:	009b      	lsls	r3, r3, #2
 80214b2:	930e      	str	r3, [sp, #56]	; 0x38
 80214b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80214b6:	2b00      	cmp	r3, #0
 80214b8:	dc03      	bgt.n	80214c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80214ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80214bc:	2b00      	cmp	r3, #0
 80214be:	f340 833b 	ble.w	8021b38 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 80214c2:	9b06      	ldr	r3, [sp, #24]
 80214c4:	2b00      	cmp	r3, #0
 80214c6:	f340 8197 	ble.w	80217f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 80214ca:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80214cc:	1423      	asrs	r3, r4, #16
 80214ce:	1412      	asrs	r2, r2, #16
 80214d0:	d432      	bmi.n	8021538 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 80214d2:	1c51      	adds	r1, r2, #1
 80214d4:	9807      	ldr	r0, [sp, #28]
 80214d6:	4288      	cmp	r0, r1
 80214d8:	dd31      	ble.n	802153e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80214da:	2b00      	cmp	r3, #0
 80214dc:	db2f      	blt.n	802153e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80214de:	1c59      	adds	r1, r3, #1
 80214e0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80214e2:	4288      	cmp	r0, r1
 80214e4:	dd2b      	ble.n	802153e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80214e6:	9b06      	ldr	r3, [sp, #24]
 80214e8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80214ea:	3b01      	subs	r3, #1
 80214ec:	992b      	ldr	r1, [sp, #172]	; 0xac
 80214ee:	fb02 1203 	mla	r2, r2, r3, r1
 80214f2:	1412      	asrs	r2, r2, #16
 80214f4:	d42e      	bmi.n	8021554 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80214f6:	3201      	adds	r2, #1
 80214f8:	9907      	ldr	r1, [sp, #28]
 80214fa:	4291      	cmp	r1, r2
 80214fc:	dd2a      	ble.n	8021554 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 80214fe:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8021500:	fb02 4303 	mla	r3, r2, r3, r4
 8021504:	141b      	asrs	r3, r3, #16
 8021506:	d425      	bmi.n	8021554 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021508:	3301      	adds	r3, #1
 802150a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802150c:	429a      	cmp	r2, r3
 802150e:	dd21      	ble.n	8021554 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8021510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021512:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 8021516:	f103 0e03 	add.w	lr, r3, #3
 802151a:	9b06      	ldr	r3, [sp, #24]
 802151c:	9313      	str	r3, [sp, #76]	; 0x4c
 802151e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021520:	2b00      	cmp	r3, #0
 8021522:	f300 81d2 	bgt.w	80218ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 8021526:	9b06      	ldr	r3, [sp, #24]
 8021528:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802152c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802152e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021532:	4423      	add	r3, r4
 8021534:	930a      	str	r3, [sp, #40]	; 0x28
 8021536:	e161      	b.n	80217fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 8021538:	1c51      	adds	r1, r2, #1
 802153a:	f040 8150 	bne.w	80217de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802153e:	9907      	ldr	r1, [sp, #28]
 8021540:	428a      	cmp	r2, r1
 8021542:	f280 814c 	bge.w	80217de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021546:	1c5a      	adds	r2, r3, #1
 8021548:	f2c0 8149 	blt.w	80217de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 802154c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802154e:	4293      	cmp	r3, r2
 8021550:	f280 8145 	bge.w	80217de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 8021554:	9b06      	ldr	r3, [sp, #24]
 8021556:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8021558:	9314      	str	r3, [sp, #80]	; 0x50
 802155a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 802155e:	9313      	str	r3, [sp, #76]	; 0x4c
 8021560:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021562:	2b00      	cmp	r3, #0
 8021564:	dddf      	ble.n	8021526 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8021566:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021568:	1423      	asrs	r3, r4, #16
 802156a:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802156e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8021572:	1412      	asrs	r2, r2, #16
 8021574:	f100 8190 	bmi.w	8021898 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 8021578:	1c55      	adds	r5, r2, #1
 802157a:	9f07      	ldr	r7, [sp, #28]
 802157c:	42af      	cmp	r7, r5
 802157e:	f340 818d 	ble.w	802189c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8021582:	2b00      	cmp	r3, #0
 8021584:	f2c0 818a 	blt.w	802189c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8021588:	1c5d      	adds	r5, r3, #1
 802158a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802158c:	42af      	cmp	r7, r5
 802158e:	f340 8185 	ble.w	802189c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 8021592:	9d07      	ldr	r5, [sp, #28]
 8021594:	fb03 2305 	mla	r3, r3, r5, r2
 8021598:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802159a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 802159e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80215a2:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80215a6:	2800      	cmp	r0, #0
 80215a8:	f000 8167 	beq.w	802187a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 80215ac:	686a      	ldr	r2, [r5, #4]
 80215ae:	920b      	str	r2, [sp, #44]	; 0x2c
 80215b0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80215b4:	2900      	cmp	r1, #0
 80215b6:	f000 8169 	beq.w	802188c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 80215ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80215bc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80215be:	18aa      	adds	r2, r5, r2
 80215c0:	59ed      	ldr	r5, [r5, r7]
 80215c2:	6852      	ldr	r2, [r2, #4]
 80215c4:	9508      	str	r5, [sp, #32]
 80215c6:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 80215ca:	0e15      	lsrs	r5, r2, #24
 80215cc:	920c      	str	r2, [sp, #48]	; 0x30
 80215ce:	b280      	uxth	r0, r0
 80215d0:	b289      	uxth	r1, r1
 80215d2:	fb00 fb01 	mul.w	fp, r0, r1
 80215d6:	0100      	lsls	r0, r0, #4
 80215d8:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 80215dc:	eba0 090b 	sub.w	r9, r0, fp
 80215e0:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 80215e4:	b289      	uxth	r1, r1
 80215e6:	fa1f f989 	uxth.w	r9, r9
 80215ea:	1a52      	subs	r2, r2, r1
 80215ec:	fb09 f008 	mul.w	r0, r9, r8
 80215f0:	b292      	uxth	r2, r2
 80215f2:	fb02 000c 	mla	r0, r2, ip, r0
 80215f6:	fb01 000a 	mla	r0, r1, sl, r0
 80215fa:	fb0b 0005 	mla	r0, fp, r5, r0
 80215fe:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021602:	2800      	cmp	r0, #0
 8021604:	f000 80e0 	beq.w	80217c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 8021608:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802160c:	d01b      	beq.n	8021646 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 802160e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8021612:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021616:	fb0c fe0e 	mul.w	lr, ip, lr
 802161a:	fb0c fc03 	mul.w	ip, ip, r3
 802161e:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8021622:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021626:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802162a:	4473      	add	r3, lr
 802162c:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8021630:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8021634:	0a1b      	lsrs	r3, r3, #8
 8021636:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802163a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802163e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021642:	ea43 030e 	orr.w	r3, r3, lr
 8021646:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802164a:	d01e      	beq.n	802168a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 802164c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802164e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021652:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8021656:	fb08 fc0c 	mul.w	ip, r8, ip
 802165a:	fb08 f80e 	mul.w	r8, r8, lr
 802165e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021662:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021666:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802166a:	44e6      	add	lr, ip
 802166c:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8021670:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8021674:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021678:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802167c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021680:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021684:	ea4e 0708 	orr.w	r7, lr, r8
 8021688:	970b      	str	r7, [sp, #44]	; 0x2c
 802168a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802168e:	d01e      	beq.n	80216ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8021690:	9f08      	ldr	r7, [sp, #32]
 8021692:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8021696:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802169a:	fb0a f808 	mul.w	r8, sl, r8
 802169e:	fb0a fa0c 	mul.w	sl, sl, ip
 80216a2:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80216a6:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80216aa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80216ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80216b2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80216b6:	44c6      	add	lr, r8
 80216b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80216bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80216c0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80216c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80216c8:	ea4e 070a 	orr.w	r7, lr, sl
 80216cc:	9708      	str	r7, [sp, #32]
 80216ce:	2dff      	cmp	r5, #255	; 0xff
 80216d0:	d01d      	beq.n	802170e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 80216d2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80216d4:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 80216d8:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 80216dc:	fb05 f808 	mul.w	r8, r5, r8
 80216e0:	fb05 f50c 	mul.w	r5, r5, ip
 80216e4:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 80216e8:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 80216ec:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80216f0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80216f4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80216f8:	44c6      	add	lr, r8
 80216fa:	0a2d      	lsrs	r5, r5, #8
 80216fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021700:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021704:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021708:	ea4e 0505 	orr.w	r5, lr, r5
 802170c:	950c      	str	r5, [sp, #48]	; 0x30
 802170e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021710:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021714:	9f08      	ldr	r7, [sp, #32]
 8021716:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802171a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802171e:	fb09 f505 	mul.w	r5, r9, r5
 8021722:	fb02 550c 	mla	r5, r2, ip, r5
 8021726:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 802172a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802172c:	fb01 550c 	mla	r5, r1, ip, r5
 8021730:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8021734:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021736:	fb0b 550c 	mla	r5, fp, ip, r5
 802173a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 802173e:	fb09 f90c 	mul.w	r9, r9, ip
 8021742:	0a2d      	lsrs	r5, r5, #8
 8021744:	fb02 9303 	mla	r3, r2, r3, r9
 8021748:	9a08      	ldr	r2, [sp, #32]
 802174a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802174e:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8021752:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021754:	fb01 330e 	mla	r3, r1, lr, r3
 8021758:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802175c:	fb0b 3b01 	mla	fp, fp, r1, r3
 8021760:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021762:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8021764:	4343      	muls	r3, r0
 8021766:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802176a:	1c58      	adds	r0, r3, #1
 802176c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8021770:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021774:	ea45 050b 	orr.w	r5, r5, fp
 8021778:	7833      	ldrb	r3, [r6, #0]
 802177a:	b2ea      	uxtb	r2, r5
 802177c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8021780:	fb12 f201 	smulbb	r2, r2, r1
 8021784:	b2c0      	uxtb	r0, r0
 8021786:	fb03 2300 	mla	r3, r3, r0, r2
 802178a:	b29b      	uxth	r3, r3
 802178c:	1c5a      	adds	r2, r3, #1
 802178e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021792:	7872      	ldrb	r2, [r6, #1]
 8021794:	fb12 f200 	smulbb	r2, r2, r0
 8021798:	121b      	asrs	r3, r3, #8
 802179a:	7033      	strb	r3, [r6, #0]
 802179c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80217a0:	0c2d      	lsrs	r5, r5, #16
 80217a2:	fb03 2301 	mla	r3, r3, r1, r2
 80217a6:	b29b      	uxth	r3, r3
 80217a8:	1c5a      	adds	r2, r3, #1
 80217aa:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80217ae:	121b      	asrs	r3, r3, #8
 80217b0:	7073      	strb	r3, [r6, #1]
 80217b2:	78b3      	ldrb	r3, [r6, #2]
 80217b4:	fb13 f000 	smulbb	r0, r3, r0
 80217b8:	fb05 0501 	mla	r5, r5, r1, r0
 80217bc:	b2ad      	uxth	r5, r5
 80217be:	1c6b      	adds	r3, r5, #1
 80217c0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80217c4:	122d      	asrs	r5, r5, #8
 80217c6:	70b5      	strb	r5, [r6, #2]
 80217c8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80217ca:	3603      	adds	r6, #3
 80217cc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80217ce:	4413      	add	r3, r2
 80217d0:	932b      	str	r3, [sp, #172]	; 0xac
 80217d2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80217d4:	441c      	add	r4, r3
 80217d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80217d8:	3b01      	subs	r3, #1
 80217da:	9314      	str	r3, [sp, #80]	; 0x50
 80217dc:	e6c0      	b.n	8021560 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 80217de:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80217e0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80217e2:	4413      	add	r3, r2
 80217e4:	932b      	str	r3, [sp, #172]	; 0xac
 80217e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80217e8:	441c      	add	r4, r3
 80217ea:	9b06      	ldr	r3, [sp, #24]
 80217ec:	3b01      	subs	r3, #1
 80217ee:	9306      	str	r3, [sp, #24]
 80217f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80217f2:	3303      	adds	r3, #3
 80217f4:	930a      	str	r3, [sp, #40]	; 0x28
 80217f6:	e664      	b.n	80214c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80217f8:	f47f ae75 	bne.w	80214e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 80217fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80217fe:	2b00      	cmp	r3, #0
 8021800:	f340 819a 	ble.w	8021b38 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 8021804:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021808:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802180a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802180e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021812:	eef0 6a48 	vmov.f32	s13, s16
 8021816:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802181a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802181e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021822:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 8021826:	eef0 6a68 	vmov.f32	s13, s17
 802182a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802182e:	ee16 4a90 	vmov	r4, s13
 8021832:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8021836:	ee69 7a27 	vmul.f32	s15, s18, s15
 802183a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802183e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8021842:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8021846:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802184a:	ee18 2a10 	vmov	r2, s16
 802184e:	eeb0 8a47 	vmov.f32	s16, s14
 8021852:	fb92 f3f3 	sdiv	r3, r2, r3
 8021856:	ee18 2a90 	vmov	r2, s17
 802185a:	932d      	str	r3, [sp, #180]	; 0xb4
 802185c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802185e:	eef0 8a67 	vmov.f32	s17, s15
 8021862:	fb92 f3f3 	sdiv	r3, r2, r3
 8021866:	932e      	str	r3, [sp, #184]	; 0xb8
 8021868:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802186a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802186c:	3b01      	subs	r3, #1
 802186e:	9312      	str	r3, [sp, #72]	; 0x48
 8021870:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021872:	bf08      	it	eq
 8021874:	4613      	moveq	r3, r2
 8021876:	9306      	str	r3, [sp, #24]
 8021878:	e61c      	b.n	80214b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 802187a:	b151      	cbz	r1, 8021892 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 802187c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802187e:	58aa      	ldr	r2, [r5, r2]
 8021880:	25ff      	movs	r5, #255	; 0xff
 8021882:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8021886:	9208      	str	r2, [sp, #32]
 8021888:	46a8      	mov	r8, r5
 802188a:	e6a0      	b.n	80215ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 802188c:	25ff      	movs	r5, #255	; 0xff
 802188e:	46aa      	mov	sl, r5
 8021890:	e69d      	b.n	80215ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 8021892:	25ff      	movs	r5, #255	; 0xff
 8021894:	46aa      	mov	sl, r5
 8021896:	e7f7      	b.n	8021888 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 8021898:	1c57      	adds	r7, r2, #1
 802189a:	d195      	bne.n	80217c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 802189c:	9d07      	ldr	r5, [sp, #28]
 802189e:	4295      	cmp	r5, r2
 80218a0:	dd92      	ble.n	80217c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80218a2:	1c5d      	adds	r5, r3, #1
 80218a4:	db90      	blt.n	80217c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80218a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80218a8:	429d      	cmp	r5, r3
 80218aa:	dd8d      	ble.n	80217c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80218ac:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80218ae:	9201      	str	r2, [sp, #4]
 80218b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80218b2:	e9cd 3002 	strd	r3, r0, [sp, #8]
 80218b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80218b8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80218ba:	9300      	str	r3, [sp, #0]
 80218bc:	9b07      	ldr	r3, [sp, #28]
 80218be:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80218c2:	4631      	mov	r1, r6
 80218c4:	f7ff fc68 	bl	8021198 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 80218c8:	e77e      	b.n	80217c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 80218ca:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80218cc:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80218d0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80218d2:	9d07      	ldr	r5, [sp, #28]
 80218d4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80218d8:	1412      	asrs	r2, r2, #16
 80218da:	1423      	asrs	r3, r4, #16
 80218dc:	fb05 2303 	mla	r3, r5, r3, r2
 80218e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80218e2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80218e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80218ea:	0e1e      	lsrs	r6, r3, #24
 80218ec:	2900      	cmp	r1, #0
 80218ee:	f000 8114 	beq.w	8021b1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 80218f2:	686a      	ldr	r2, [r5, #4]
 80218f4:	920d      	str	r2, [sp, #52]	; 0x34
 80218f6:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80218fa:	2800      	cmp	r0, #0
 80218fc:	f000 8116 	beq.w	8021b2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 8021900:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021902:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8021904:	18aa      	adds	r2, r5, r2
 8021906:	59ed      	ldr	r5, [r5, r7]
 8021908:	6852      	ldr	r2, [r2, #4]
 802190a:	9509      	str	r5, [sp, #36]	; 0x24
 802190c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8021910:	0e15      	lsrs	r5, r2, #24
 8021912:	920f      	str	r2, [sp, #60]	; 0x3c
 8021914:	b289      	uxth	r1, r1
 8021916:	b280      	uxth	r0, r0
 8021918:	fb01 fa00 	mul.w	sl, r1, r0
 802191c:	0109      	lsls	r1, r1, #4
 802191e:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8021922:	eba1 080a 	sub.w	r8, r1, sl
 8021926:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 802192a:	b280      	uxth	r0, r0
 802192c:	fa1f f888 	uxth.w	r8, r8
 8021930:	1a12      	subs	r2, r2, r0
 8021932:	fb08 f10c 	mul.w	r1, r8, ip
 8021936:	b292      	uxth	r2, r2
 8021938:	fb02 1106 	mla	r1, r2, r6, r1
 802193c:	fb00 1109 	mla	r1, r0, r9, r1
 8021940:	fb0a 1105 	mla	r1, sl, r5, r1
 8021944:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021948:	2900      	cmp	r1, #0
 802194a:	f000 80da 	beq.w	8021b02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 802194e:	2eff      	cmp	r6, #255	; 0xff
 8021950:	d016      	beq.n	8021980 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 8021952:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8021956:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802195a:	4377      	muls	r7, r6
 802195c:	435e      	muls	r6, r3
 802195e:	0a3b      	lsrs	r3, r7, #8
 8021960:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021964:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021968:	443b      	add	r3, r7
 802196a:	f506 7780 	add.w	r7, r6, #256	; 0x100
 802196e:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8021972:	0a1b      	lsrs	r3, r3, #8
 8021974:	0a3f      	lsrs	r7, r7, #8
 8021976:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802197a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802197e:	433b      	orrs	r3, r7
 8021980:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021984:	d01d      	beq.n	80219c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 8021986:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8021988:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802198a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802198e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021992:	fb0c f606 	mul.w	r6, ip, r6
 8021996:	fb0c fc07 	mul.w	ip, ip, r7
 802199a:	0a37      	lsrs	r7, r6, #8
 802199c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80219a0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80219a4:	4437      	add	r7, r6
 80219a6:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 80219aa:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80219ae:	0a3f      	lsrs	r7, r7, #8
 80219b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80219b4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80219b8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80219bc:	ea47 060c 	orr.w	r6, r7, ip
 80219c0:	960d      	str	r6, [sp, #52]	; 0x34
 80219c2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80219c6:	d01d      	beq.n	8021a04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 80219c8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80219ca:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80219ce:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80219d2:	fb09 fc0c 	mul.w	ip, r9, ip
 80219d6:	fb09 f906 	mul.w	r9, r9, r6
 80219da:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80219de:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80219e2:	f509 7680 	add.w	r6, r9, #256	; 0x100
 80219e6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80219ea:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 80219ee:	4467      	add	r7, ip
 80219f0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80219f4:	0a3f      	lsrs	r7, r7, #8
 80219f6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80219fa:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80219fe:	ea47 0609 	orr.w	r6, r7, r9
 8021a02:	9609      	str	r6, [sp, #36]	; 0x24
 8021a04:	2dff      	cmp	r5, #255	; 0xff
 8021a06:	d01a      	beq.n	8021a3e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 8021a08:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8021a0a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8021a0e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021a12:	fb05 fc0c 	mul.w	ip, r5, ip
 8021a16:	4375      	muls	r5, r6
 8021a18:	ea4f 271c 	mov.w	r7, ip, lsr #8
 8021a1c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021a20:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8021a24:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021a28:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8021a2c:	4467      	add	r7, ip
 8021a2e:	0a2d      	lsrs	r5, r5, #8
 8021a30:	0a3f      	lsrs	r7, r7, #8
 8021a32:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021a36:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021a3a:	433d      	orrs	r5, r7
 8021a3c:	950f      	str	r5, [sp, #60]	; 0x3c
 8021a3e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021a40:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8021a44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021a48:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021a4c:	fb08 f505 	mul.w	r5, r8, r5
 8021a50:	fb02 5506 	mla	r5, r2, r6, r5
 8021a54:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8021a56:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021a5a:	fb00 5506 	mla	r5, r0, r6, r5
 8021a5e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8021a60:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021a64:	fb0a 5506 	mla	r5, sl, r6, r5
 8021a68:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8021a6a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021a6e:	0a2d      	lsrs	r5, r5, #8
 8021a70:	fb08 f806 	mul.w	r8, r8, r6
 8021a74:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021a78:	fb02 8303 	mla	r3, r2, r3, r8
 8021a7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021a7e:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8021a82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021a84:	fb00 3307 	mla	r3, r0, r7, r3
 8021a88:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8021a8c:	fb0a 3c0c 	mla	ip, sl, ip, r3
 8021a90:	fb01 f30b 	mul.w	r3, r1, fp
 8021a94:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021a98:	1c59      	adds	r1, r3, #1
 8021a9a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021a9e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021aa2:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8021aa6:	ea45 050c 	orr.w	r5, r5, ip
 8021aaa:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021aae:	b2ea      	uxtb	r2, r5
 8021ab0:	b2c9      	uxtb	r1, r1
 8021ab2:	fb12 f20b 	smulbb	r2, r2, fp
 8021ab6:	fb03 2301 	mla	r3, r3, r1, r2
 8021aba:	b29b      	uxth	r3, r3
 8021abc:	1c5a      	adds	r2, r3, #1
 8021abe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021ac2:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8021ac6:	fb12 f201 	smulbb	r2, r2, r1
 8021aca:	121b      	asrs	r3, r3, #8
 8021acc:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021ad0:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8021ad4:	0c2d      	lsrs	r5, r5, #16
 8021ad6:	fb03 230b 	mla	r3, r3, fp, r2
 8021ada:	b29b      	uxth	r3, r3
 8021adc:	1c5a      	adds	r2, r3, #1
 8021ade:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021ae2:	121b      	asrs	r3, r3, #8
 8021ae4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8021ae8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8021aec:	fb13 f101 	smulbb	r1, r3, r1
 8021af0:	fb05 150b 	mla	r5, r5, fp, r1
 8021af4:	b2ad      	uxth	r5, r5
 8021af6:	1c69      	adds	r1, r5, #1
 8021af8:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8021afc:	122d      	asrs	r5, r5, #8
 8021afe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8021b02:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8021b04:	f10e 0e03 	add.w	lr, lr, #3
 8021b08:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021b0a:	4413      	add	r3, r2
 8021b0c:	932b      	str	r3, [sp, #172]	; 0xac
 8021b0e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021b10:	441c      	add	r4, r3
 8021b12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021b14:	3b01      	subs	r3, #1
 8021b16:	9313      	str	r3, [sp, #76]	; 0x4c
 8021b18:	e501      	b.n	802151e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8021b1a:	b150      	cbz	r0, 8021b32 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 8021b1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021b1e:	58aa      	ldr	r2, [r5, r2]
 8021b20:	25ff      	movs	r5, #255	; 0xff
 8021b22:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8021b26:	9209      	str	r2, [sp, #36]	; 0x24
 8021b28:	46ac      	mov	ip, r5
 8021b2a:	e6f3      	b.n	8021914 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8021b2c:	25ff      	movs	r5, #255	; 0xff
 8021b2e:	46a9      	mov	r9, r5
 8021b30:	e6f0      	b.n	8021914 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 8021b32:	25ff      	movs	r5, #255	; 0xff
 8021b34:	46a9      	mov	r9, r5
 8021b36:	e7f7      	b.n	8021b28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 8021b38:	b019      	add	sp, #100	; 0x64
 8021b3a:	ecbd 8b08 	vpop	{d8-d11}
 8021b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08021b44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8021b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b48:	b085      	sub	sp, #20
 8021b4a:	7888      	ldrb	r0, [r1, #2]
 8021b4c:	4691      	mov	r9, r2
 8021b4e:	9000      	str	r0, [sp, #0]
 8021b50:	7848      	ldrb	r0, [r1, #1]
 8021b52:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8021b56:	9001      	str	r0, [sp, #4]
 8021b58:	7808      	ldrb	r0, [r1, #0]
 8021b5a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8021b5e:	9002      	str	r0, [sp, #8]
 8021b60:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021b64:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8021b68:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 8021b6c:	fb04 c603 	mla	r6, r4, r3, ip
 8021b70:	2c00      	cmp	r4, #0
 8021b72:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 8021b76:	9a00      	ldr	r2, [sp, #0]
 8021b78:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8021b7c:	9a01      	ldr	r2, [sp, #4]
 8021b7e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8021b82:	db3a      	blt.n	8021bfa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8021b84:	45a0      	cmp	r8, r4
 8021b86:	dd38      	ble.n	8021bfa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 8021b88:	f1bc 0f00 	cmp.w	ip, #0
 8021b8c:	db33      	blt.n	8021bf6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8021b8e:	4563      	cmp	r3, ip
 8021b90:	dd31      	ble.n	8021bf6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 8021b92:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 8021b96:	f11c 0601 	adds.w	r6, ip, #1
 8021b9a:	d431      	bmi.n	8021c00 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8021b9c:	42b3      	cmp	r3, r6
 8021b9e:	dd2f      	ble.n	8021c00 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8021ba0:	b375      	cbz	r5, 8021c00 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 8021ba2:	f8de 6004 	ldr.w	r6, [lr, #4]
 8021ba6:	3401      	adds	r4, #1
 8021ba8:	d42e      	bmi.n	8021c08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8021baa:	45a0      	cmp	r8, r4
 8021bac:	dd2c      	ble.n	8021c08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8021bae:	b35f      	cbz	r7, 8021c08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 8021bb0:	f1bc 0f00 	cmp.w	ip, #0
 8021bb4:	db26      	blt.n	8021c04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8021bb6:	4563      	cmp	r3, ip
 8021bb8:	dd24      	ble.n	8021c04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 8021bba:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 8021bbe:	f11c 0c01 	adds.w	ip, ip, #1
 8021bc2:	d405      	bmi.n	8021bd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021bc4:	4563      	cmp	r3, ip
 8021bc6:	dd03      	ble.n	8021bd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021bc8:	b115      	cbz	r5, 8021bd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021bca:	3301      	adds	r3, #1
 8021bcc:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8021bd0:	2d0f      	cmp	r5, #15
 8021bd2:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8021bd6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021bda:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021bde:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8021be2:	d801      	bhi.n	8021be8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 8021be4:	2f0f      	cmp	r7, #15
 8021be6:	d911      	bls.n	8021c0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 8021be8:	4b77      	ldr	r3, [pc, #476]	; (8021dc8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 8021bea:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8021bee:	4a77      	ldr	r2, [pc, #476]	; (8021dcc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 8021bf0:	4877      	ldr	r0, [pc, #476]	; (8021dd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 8021bf2:	f003 f831 	bl	8024c58 <__assert_func>
 8021bf6:	4602      	mov	r2, r0
 8021bf8:	e7cd      	b.n	8021b96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 8021bfa:	4606      	mov	r6, r0
 8021bfc:	4602      	mov	r2, r0
 8021bfe:	e7d2      	b.n	8021ba6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8021c00:	4606      	mov	r6, r0
 8021c02:	e7d0      	b.n	8021ba6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 8021c04:	4604      	mov	r4, r0
 8021c06:	e7da      	b.n	8021bbe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 8021c08:	4604      	mov	r4, r0
 8021c0a:	e7e1      	b.n	8021bd0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021c0c:	b2ab      	uxth	r3, r5
 8021c0e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021c12:	b2bf      	uxth	r7, r7
 8021c14:	fb03 fe07 	mul.w	lr, r3, r7
 8021c18:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8021c1c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8021c20:	eba3 0c0e 	sub.w	ip, r3, lr
 8021c24:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8021c28:	b2bf      	uxth	r7, r7
 8021c2a:	fa1f fc8c 	uxth.w	ip, ip
 8021c2e:	eba5 0507 	sub.w	r5, r5, r7
 8021c32:	fb0c f30a 	mul.w	r3, ip, sl
 8021c36:	b2ad      	uxth	r5, r5
 8021c38:	fb05 330b 	mla	r3, r5, fp, r3
 8021c3c:	fb07 3309 	mla	r3, r7, r9, r3
 8021c40:	fb0e 3308 	mla	r3, lr, r8, r3
 8021c44:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021c48:	9303      	str	r3, [sp, #12]
 8021c4a:	d018      	beq.n	8021c7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 8021c4c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021c50:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021c54:	fb0b f303 	mul.w	r3, fp, r3
 8021c58:	fb0b fb02 	mul.w	fp, fp, r2
 8021c5c:	0a1a      	lsrs	r2, r3, #8
 8021c5e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8021c62:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021c66:	441a      	add	r2, r3
 8021c68:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8021c6c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8021c70:	0a12      	lsrs	r2, r2, #8
 8021c72:	0a1b      	lsrs	r3, r3, #8
 8021c74:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021c78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021c7c:	431a      	orrs	r2, r3
 8021c7e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021c82:	d019      	beq.n	8021cb8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 8021c84:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8021c88:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021c8c:	fb0a fb0b 	mul.w	fp, sl, fp
 8021c90:	fb0a fa06 	mul.w	sl, sl, r6
 8021c94:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8021c98:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021c9c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8021ca0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021ca4:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021ca8:	445e      	add	r6, fp
 8021caa:	0a1b      	lsrs	r3, r3, #8
 8021cac:	0a36      	lsrs	r6, r6, #8
 8021cae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021cb2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8021cb6:	431e      	orrs	r6, r3
 8021cb8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021cbc:	d019      	beq.n	8021cf2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 8021cbe:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8021cc2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021cc6:	fb09 fa0a 	mul.w	sl, r9, sl
 8021cca:	fb09 f904 	mul.w	r9, r9, r4
 8021cce:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8021cd2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021cd6:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8021cda:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021cde:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8021ce2:	4454      	add	r4, sl
 8021ce4:	0a1b      	lsrs	r3, r3, #8
 8021ce6:	0a24      	lsrs	r4, r4, #8
 8021ce8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021cec:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021cf0:	431c      	orrs	r4, r3
 8021cf2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021cf6:	d019      	beq.n	8021d2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 8021cf8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8021cfc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021d00:	fb08 f909 	mul.w	r9, r8, r9
 8021d04:	fb08 f800 	mul.w	r8, r8, r0
 8021d08:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8021d0c:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8021d10:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8021d14:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021d18:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8021d1c:	4448      	add	r0, r9
 8021d1e:	0a1b      	lsrs	r3, r3, #8
 8021d20:	0a00      	lsrs	r0, r0, #8
 8021d22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021d26:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021d2a:	4318      	orrs	r0, r3
 8021d2c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8021d30:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021d34:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8021d38:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021d3c:	fb0c f808 	mul.w	r8, ip, r8
 8021d40:	fb0c f606 	mul.w	r6, ip, r6
 8021d44:	fb05 8803 	mla	r8, r5, r3, r8
 8021d48:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8021d4c:	fb05 6202 	mla	r2, r5, r2, r6
 8021d50:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021d54:	fb07 8803 	mla	r8, r7, r3, r8
 8021d58:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8021d5c:	fb07 2704 	mla	r7, r7, r4, r2
 8021d60:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021d64:	fb0e 8303 	mla	r3, lr, r3, r8
 8021d68:	fb0e 7e00 	mla	lr, lr, r0, r7
 8021d6c:	9802      	ldr	r0, [sp, #8]
 8021d6e:	0a1b      	lsrs	r3, r3, #8
 8021d70:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021d74:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021d78:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021d7c:	ea43 0e0e 	orr.w	lr, r3, lr
 8021d80:	9b03      	ldr	r3, [sp, #12]
 8021d82:	43db      	mvns	r3, r3
 8021d84:	b2db      	uxtb	r3, r3
 8021d86:	4358      	muls	r0, r3
 8021d88:	1c42      	adds	r2, r0, #1
 8021d8a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021d8e:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8021d92:	700a      	strb	r2, [r1, #0]
 8021d94:	9a01      	ldr	r2, [sp, #4]
 8021d96:	435a      	muls	r2, r3
 8021d98:	1c50      	adds	r0, r2, #1
 8021d9a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021d9e:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8021da2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021da6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021daa:	704a      	strb	r2, [r1, #1]
 8021dac:	9a00      	ldr	r2, [sp, #0]
 8021dae:	435a      	muls	r2, r3
 8021db0:	4613      	mov	r3, r2
 8021db2:	3201      	adds	r2, #1
 8021db4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021db8:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8021dbc:	f881 e002 	strb.w	lr, [r1, #2]
 8021dc0:	b005      	add	sp, #20
 8021dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021dc6:	bf00      	nop
 8021dc8:	0802b67c 	.word	0x0802b67c
 8021dcc:	0802bb72 	.word	0x0802bb72
 8021dd0:	0802b745 	.word	0x0802b745

08021dd4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8021dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021dd8:	ed2d 8b08 	vpush	{d8-d11}
 8021ddc:	b097      	sub	sp, #92	; 0x5c
 8021dde:	eeb0 aa40 	vmov.f32	s20, s0
 8021de2:	eef0 9a60 	vmov.f32	s19, s1
 8021de6:	9306      	str	r3, [sp, #24]
 8021de8:	eeb0 9a41 	vmov.f32	s18, s2
 8021dec:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8021df0:	eeb0 8a62 	vmov.f32	s16, s5
 8021df4:	9214      	str	r2, [sp, #80]	; 0x50
 8021df6:	eef0 8a43 	vmov.f32	s17, s6
 8021dfa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021dfc:	eef0 ba44 	vmov.f32	s23, s8
 8021e00:	9307      	str	r3, [sp, #28]
 8021e02:	eeb0 ba64 	vmov.f32	s22, s9
 8021e06:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8021e0a:	eef0 aa45 	vmov.f32	s21, s10
 8021e0e:	9015      	str	r0, [sp, #84]	; 0x54
 8021e10:	9112      	str	r1, [sp, #72]	; 0x48
 8021e12:	6850      	ldr	r0, [r2, #4]
 8021e14:	9310      	str	r3, [sp, #64]	; 0x40
 8021e16:	6812      	ldr	r2, [r2, #0]
 8021e18:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8021e1a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8021e1e:	fb00 1303 	mla	r3, r0, r3, r1
 8021e22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021e26:	18d3      	adds	r3, r2, r3
 8021e28:	930a      	str	r3, [sp, #40]	; 0x28
 8021e2a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021e2c:	681b      	ldr	r3, [r3, #0]
 8021e2e:	9311      	str	r3, [sp, #68]	; 0x44
 8021e30:	9b07      	ldr	r3, [sp, #28]
 8021e32:	009b      	lsls	r3, r3, #2
 8021e34:	930e      	str	r3, [sp, #56]	; 0x38
 8021e36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021e38:	2b00      	cmp	r3, #0
 8021e3a:	dc03      	bgt.n	8021e44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8021e3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021e3e:	2b00      	cmp	r3, #0
 8021e40:	f340 832e 	ble.w	80224a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8021e44:	9b06      	ldr	r3, [sp, #24]
 8021e46:	2b00      	cmp	r3, #0
 8021e48:	f340 8186 	ble.w	8022158 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 8021e4c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021e4e:	1423      	asrs	r3, r4, #16
 8021e50:	1412      	asrs	r2, r2, #16
 8021e52:	d42f      	bmi.n	8021eb4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8021e54:	1c51      	adds	r1, r2, #1
 8021e56:	9807      	ldr	r0, [sp, #28]
 8021e58:	4288      	cmp	r0, r1
 8021e5a:	dd2e      	ble.n	8021eba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021e5c:	2b00      	cmp	r3, #0
 8021e5e:	db2c      	blt.n	8021eba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021e60:	1c59      	adds	r1, r3, #1
 8021e62:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021e64:	4288      	cmp	r0, r1
 8021e66:	dd28      	ble.n	8021eba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8021e68:	9b06      	ldr	r3, [sp, #24]
 8021e6a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021e6c:	3b01      	subs	r3, #1
 8021e6e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021e70:	fb02 1203 	mla	r2, r2, r3, r1
 8021e74:	1412      	asrs	r2, r2, #16
 8021e76:	d42b      	bmi.n	8021ed0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021e78:	3201      	adds	r2, #1
 8021e7a:	9907      	ldr	r1, [sp, #28]
 8021e7c:	4291      	cmp	r1, r2
 8021e7e:	dd27      	ble.n	8021ed0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021e80:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021e82:	fb02 4303 	mla	r3, r2, r3, r4
 8021e86:	141b      	asrs	r3, r3, #16
 8021e88:	d422      	bmi.n	8021ed0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021e8a:	3301      	adds	r3, #1
 8021e8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021e8e:	429a      	cmp	r2, r3
 8021e90:	dd1e      	ble.n	8021ed0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8021e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021e94:	f8dd b018 	ldr.w	fp, [sp, #24]
 8021e98:	1cdd      	adds	r5, r3, #3
 8021e9a:	f1bb 0f00 	cmp.w	fp, #0
 8021e9e:	f300 81c4 	bgt.w	802222a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 8021ea2:	9b06      	ldr	r3, [sp, #24]
 8021ea4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021eaa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021eae:	4423      	add	r3, r4
 8021eb0:	930a      	str	r3, [sp, #40]	; 0x28
 8021eb2:	e153      	b.n	802215c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 8021eb4:	1c51      	adds	r1, r2, #1
 8021eb6:	f040 8142 	bne.w	802213e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8021eba:	9907      	ldr	r1, [sp, #28]
 8021ebc:	428a      	cmp	r2, r1
 8021ebe:	f280 813e 	bge.w	802213e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8021ec2:	1c5a      	adds	r2, r3, #1
 8021ec4:	f2c0 813b 	blt.w	802213e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8021ec8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021eca:	4293      	cmp	r3, r2
 8021ecc:	f280 8137 	bge.w	802213e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 8021ed0:	9b06      	ldr	r3, [sp, #24]
 8021ed2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8021ed4:	9313      	str	r3, [sp, #76]	; 0x4c
 8021ed6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021ed8:	2b00      	cmp	r3, #0
 8021eda:	dde2      	ble.n	8021ea2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 8021edc:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8021ede:	1423      	asrs	r3, r4, #16
 8021ee0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021ee2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8021ee6:	1409      	asrs	r1, r1, #16
 8021ee8:	f3c2 3203 	ubfx	r2, r2, #12, #4
 8021eec:	f100 8187 	bmi.w	80221fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8021ef0:	1c4e      	adds	r6, r1, #1
 8021ef2:	9f07      	ldr	r7, [sp, #28]
 8021ef4:	42b7      	cmp	r7, r6
 8021ef6:	f340 8184 	ble.w	8022202 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8021efa:	2b00      	cmp	r3, #0
 8021efc:	f2c0 8181 	blt.w	8022202 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8021f00:	1c5e      	adds	r6, r3, #1
 8021f02:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8021f04:	42b7      	cmp	r7, r6
 8021f06:	f340 817c 	ble.w	8022202 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 8021f0a:	9e07      	ldr	r6, [sp, #28]
 8021f0c:	fb03 1306 	mla	r3, r3, r6, r1
 8021f10:	9911      	ldr	r1, [sp, #68]	; 0x44
 8021f12:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8021f16:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8021f1a:	0e1f      	lsrs	r7, r3, #24
 8021f1c:	2a00      	cmp	r2, #0
 8021f1e:	f000 815c 	beq.w	80221da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8021f22:	6871      	ldr	r1, [r6, #4]
 8021f24:	910b      	str	r1, [sp, #44]	; 0x2c
 8021f26:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8021f2a:	2800      	cmp	r0, #0
 8021f2c:	f000 815e 	beq.w	80221ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 8021f30:	990e      	ldr	r1, [sp, #56]	; 0x38
 8021f32:	eb06 0c01 	add.w	ip, r6, r1
 8021f36:	5876      	ldr	r6, [r6, r1]
 8021f38:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8021f3c:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8021f40:	9608      	str	r6, [sp, #32]
 8021f42:	0e0e      	lsrs	r6, r1, #24
 8021f44:	910c      	str	r1, [sp, #48]	; 0x30
 8021f46:	b292      	uxth	r2, r2
 8021f48:	b280      	uxth	r0, r0
 8021f4a:	fb02 fa00 	mul.w	sl, r2, r0
 8021f4e:	0112      	lsls	r2, r2, #4
 8021f50:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8021f54:	eba2 080a 	sub.w	r8, r2, sl
 8021f58:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8021f5c:	b280      	uxth	r0, r0
 8021f5e:	fa1f f888 	uxth.w	r8, r8
 8021f62:	1a09      	subs	r1, r1, r0
 8021f64:	fb08 f20e 	mul.w	r2, r8, lr
 8021f68:	b289      	uxth	r1, r1
 8021f6a:	fb01 2207 	mla	r2, r1, r7, r2
 8021f6e:	fb00 2209 	mla	r2, r0, r9, r2
 8021f72:	fb0a 2206 	mla	r2, sl, r6, r2
 8021f76:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021f7a:	2a00      	cmp	r2, #0
 8021f7c:	f000 80d4 	beq.w	8022128 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8021f80:	2fff      	cmp	r7, #255	; 0xff
 8021f82:	d01a      	beq.n	8021fba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 8021f84:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021f88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021f8c:	fb07 fc0c 	mul.w	ip, r7, ip
 8021f90:	435f      	muls	r7, r3
 8021f92:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8021f96:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021f9a:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 8021f9e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021fa2:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8021fa6:	4463      	add	r3, ip
 8021fa8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021fac:	0a1b      	lsrs	r3, r3, #8
 8021fae:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8021fb2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021fb6:	ea43 030b 	orr.w	r3, r3, fp
 8021fba:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021fbe:	d01e      	beq.n	8021ffe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 8021fc0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021fc2:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 8021fc6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021fca:	fb0e fb0b 	mul.w	fp, lr, fp
 8021fce:	fb0e fe07 	mul.w	lr, lr, r7
 8021fd2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8021fd6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021fda:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 8021fde:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021fe2:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8021fe6:	44dc      	add	ip, fp
 8021fe8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021fec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021ff0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8021ff4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021ff8:	ea4c 070e 	orr.w	r7, ip, lr
 8021ffc:	970b      	str	r7, [sp, #44]	; 0x2c
 8021ffe:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022002:	d01e      	beq.n	8022042 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022004:	9f08      	ldr	r7, [sp, #32]
 8022006:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802200a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802200e:	fb09 fe0e 	mul.w	lr, r9, lr
 8022012:	fb09 f907 	mul.w	r9, r9, r7
 8022016:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802201a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802201e:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8022022:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022026:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 802202a:	44f4      	add	ip, lr
 802202c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022030:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022034:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022038:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802203c:	ea4c 0709 	orr.w	r7, ip, r9
 8022040:	9708      	str	r7, [sp, #32]
 8022042:	2eff      	cmp	r6, #255	; 0xff
 8022044:	d01c      	beq.n	8022080 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8022046:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022048:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 802204c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022050:	fb06 fe0e 	mul.w	lr, r6, lr
 8022054:	437e      	muls	r6, r7
 8022056:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802205a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802205e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022062:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022066:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 802206a:	44f4      	add	ip, lr
 802206c:	0a36      	lsrs	r6, r6, #8
 802206e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022072:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022076:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802207a:	ea4c 0606 	orr.w	r6, ip, r6
 802207e:	960c      	str	r6, [sp, #48]	; 0x30
 8022080:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8022082:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8022086:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802208a:	2aff      	cmp	r2, #255	; 0xff
 802208c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8022090:	fb08 f606 	mul.w	r6, r8, r6
 8022094:	fb01 6607 	mla	r6, r1, r7, r6
 8022098:	9f08      	ldr	r7, [sp, #32]
 802209a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802209e:	fb00 6607 	mla	r6, r0, r7, r6
 80220a2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80220a4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80220a8:	fb0a 6607 	mla	r6, sl, r7, r6
 80220ac:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80220ae:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80220b2:	ea4f 2616 	mov.w	r6, r6, lsr #8
 80220b6:	fb08 f807 	mul.w	r8, r8, r7
 80220ba:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80220be:	fb01 8303 	mla	r3, r1, r3, r8
 80220c2:	9908      	ldr	r1, [sp, #32]
 80220c4:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80220c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80220ca:	fb00 330c 	mla	r3, r0, ip, r3
 80220ce:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80220d2:	fb0a 3a00 	mla	sl, sl, r0, r3
 80220d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80220da:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80220de:	ea46 060a 	orr.w	r6, r6, sl
 80220e2:	b2f0      	uxtb	r0, r6
 80220e4:	f3c6 2107 	ubfx	r1, r6, #8, #8
 80220e8:	ea4f 4616 	mov.w	r6, r6, lsr #16
 80220ec:	f000 8084 	beq.w	80221f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 80220f0:	43d2      	mvns	r2, r2
 80220f2:	782b      	ldrb	r3, [r5, #0]
 80220f4:	b2d2      	uxtb	r2, r2
 80220f6:	fb03 f702 	mul.w	r7, r3, r2
 80220fa:	1c7b      	adds	r3, r7, #1
 80220fc:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8022100:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022104:	702b      	strb	r3, [r5, #0]
 8022106:	786b      	ldrb	r3, [r5, #1]
 8022108:	fb03 f002 	mul.w	r0, r3, r2
 802210c:	1c43      	adds	r3, r0, #1
 802210e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022112:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022116:	706b      	strb	r3, [r5, #1]
 8022118:	78ab      	ldrb	r3, [r5, #2]
 802211a:	4353      	muls	r3, r2
 802211c:	1c5a      	adds	r2, r3, #1
 802211e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022122:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8022126:	70ae      	strb	r6, [r5, #2]
 8022128:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802212a:	3503      	adds	r5, #3
 802212c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802212e:	4413      	add	r3, r2
 8022130:	9329      	str	r3, [sp, #164]	; 0xa4
 8022132:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022134:	441c      	add	r4, r3
 8022136:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022138:	3b01      	subs	r3, #1
 802213a:	9313      	str	r3, [sp, #76]	; 0x4c
 802213c:	e6cb      	b.n	8021ed6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 802213e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022140:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022142:	4413      	add	r3, r2
 8022144:	9329      	str	r3, [sp, #164]	; 0xa4
 8022146:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022148:	441c      	add	r4, r3
 802214a:	9b06      	ldr	r3, [sp, #24]
 802214c:	3b01      	subs	r3, #1
 802214e:	9306      	str	r3, [sp, #24]
 8022150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022152:	3303      	adds	r3, #3
 8022154:	930a      	str	r3, [sp, #40]	; 0x28
 8022156:	e675      	b.n	8021e44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8022158:	f47f ae86 	bne.w	8021e68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 802215c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802215e:	2b00      	cmp	r3, #0
 8022160:	f340 819e 	ble.w	80224a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 8022164:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022168:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802216a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802216e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022172:	eef0 6a48 	vmov.f32	s13, s16
 8022176:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802217a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802217e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022182:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8022186:	eef0 6a68 	vmov.f32	s13, s17
 802218a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802218e:	ee16 4a90 	vmov	r4, s13
 8022192:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022196:	ee69 7a27 	vmul.f32	s15, s18, s15
 802219a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802219e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80221a2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80221a6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80221aa:	ee18 2a10 	vmov	r2, s16
 80221ae:	eeb0 8a47 	vmov.f32	s16, s14
 80221b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80221b6:	ee18 2a90 	vmov	r2, s17
 80221ba:	932b      	str	r3, [sp, #172]	; 0xac
 80221bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80221be:	eef0 8a67 	vmov.f32	s17, s15
 80221c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80221c6:	932c      	str	r3, [sp, #176]	; 0xb0
 80221c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80221ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80221cc:	3b01      	subs	r3, #1
 80221ce:	9312      	str	r3, [sp, #72]	; 0x48
 80221d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80221d2:	bf08      	it	eq
 80221d4:	4613      	moveq	r3, r2
 80221d6:	9306      	str	r3, [sp, #24]
 80221d8:	e62d      	b.n	8021e36 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 80221da:	b150      	cbz	r0, 80221f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 80221dc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80221de:	5871      	ldr	r1, [r6, r1]
 80221e0:	26ff      	movs	r6, #255	; 0xff
 80221e2:	ea4f 6911 	mov.w	r9, r1, lsr #24
 80221e6:	9108      	str	r1, [sp, #32]
 80221e8:	46b6      	mov	lr, r6
 80221ea:	e6ac      	b.n	8021f46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 80221ec:	26ff      	movs	r6, #255	; 0xff
 80221ee:	46b1      	mov	r9, r6
 80221f0:	e6a9      	b.n	8021f46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 80221f2:	26ff      	movs	r6, #255	; 0xff
 80221f4:	46b1      	mov	r9, r6
 80221f6:	e7f7      	b.n	80221e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 80221f8:	7028      	strb	r0, [r5, #0]
 80221fa:	7069      	strb	r1, [r5, #1]
 80221fc:	e793      	b.n	8022126 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 80221fe:	1c4f      	adds	r7, r1, #1
 8022200:	d192      	bne.n	8022128 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022202:	9e07      	ldr	r6, [sp, #28]
 8022204:	428e      	cmp	r6, r1
 8022206:	dd8f      	ble.n	8022128 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022208:	1c5e      	adds	r6, r3, #1
 802220a:	db8d      	blt.n	8022128 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 802220c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 802220e:	429e      	cmp	r6, r3
 8022210:	dd8a      	ble.n	8022128 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 8022212:	9600      	str	r6, [sp, #0]
 8022214:	e9cd 2003 	strd	r2, r0, [sp, #12]
 8022218:	e9cd 1301 	strd	r1, r3, [sp, #4]
 802221c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802221e:	4629      	mov	r1, r5
 8022220:	9b07      	ldr	r3, [sp, #28]
 8022222:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022224:	f7ff fc8e 	bl	8021b44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8022228:	e77e      	b.n	8022128 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 802222a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802222c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022230:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8022232:	9e07      	ldr	r6, [sp, #28]
 8022234:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8022238:	1409      	asrs	r1, r1, #16
 802223a:	1423      	asrs	r3, r4, #16
 802223c:	fb06 1303 	mla	r3, r6, r3, r1
 8022240:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022242:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 8022246:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802224a:	0e1f      	lsrs	r7, r3, #24
 802224c:	2a00      	cmp	r2, #0
 802224e:	f000 8113 	beq.w	8022478 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 8022252:	6871      	ldr	r1, [r6, #4]
 8022254:	910d      	str	r1, [sp, #52]	; 0x34
 8022256:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 802225a:	2800      	cmp	r0, #0
 802225c:	f000 8115 	beq.w	802248a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 8022260:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022262:	eb06 0c01 	add.w	ip, r6, r1
 8022266:	5876      	ldr	r6, [r6, r1]
 8022268:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802226c:	ea4f 6916 	mov.w	r9, r6, lsr #24
 8022270:	9609      	str	r6, [sp, #36]	; 0x24
 8022272:	0e0e      	lsrs	r6, r1, #24
 8022274:	910f      	str	r1, [sp, #60]	; 0x3c
 8022276:	b292      	uxth	r2, r2
 8022278:	b280      	uxth	r0, r0
 802227a:	fb02 fa00 	mul.w	sl, r2, r0
 802227e:	0112      	lsls	r2, r2, #4
 8022280:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022284:	eba2 080a 	sub.w	r8, r2, sl
 8022288:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802228c:	b280      	uxth	r0, r0
 802228e:	fa1f f888 	uxth.w	r8, r8
 8022292:	1a09      	subs	r1, r1, r0
 8022294:	fb08 f20e 	mul.w	r2, r8, lr
 8022298:	b289      	uxth	r1, r1
 802229a:	fb01 2207 	mla	r2, r1, r7, r2
 802229e:	fb00 2209 	mla	r2, r0, r9, r2
 80222a2:	fb0a 2206 	mla	r2, sl, r6, r2
 80222a6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80222aa:	2a00      	cmp	r2, #0
 80222ac:	f000 80da 	beq.w	8022464 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 80222b0:	2fff      	cmp	r7, #255	; 0xff
 80222b2:	d01a      	beq.n	80222ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 80222b4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80222b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80222bc:	fb07 fc0c 	mul.w	ip, r7, ip
 80222c0:	435f      	muls	r7, r3
 80222c2:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80222c6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80222ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80222ce:	4463      	add	r3, ip
 80222d0:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 80222d4:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 80222d8:	0a1b      	lsrs	r3, r3, #8
 80222da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80222de:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80222e2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80222e6:	ea43 030c 	orr.w	r3, r3, ip
 80222ea:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80222ee:	d021      	beq.n	8022334 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 80222f0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80222f2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80222f6:	fb0e f707 	mul.w	r7, lr, r7
 80222fa:	9713      	str	r7, [sp, #76]	; 0x4c
 80222fc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80222fe:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8022302:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8022304:	fb0e fe0c 	mul.w	lr, lr, ip
 8022308:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802230c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022310:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022314:	44bc      	add	ip, r7
 8022316:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 802231a:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 802231e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022322:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022326:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802232a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802232e:	ea4c 070e 	orr.w	r7, ip, lr
 8022332:	970d      	str	r7, [sp, #52]	; 0x34
 8022334:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8022338:	d01e      	beq.n	8022378 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 802233a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802233c:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022340:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022344:	fb09 fe0e 	mul.w	lr, r9, lr
 8022348:	fb09 f907 	mul.w	r9, r9, r7
 802234c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022350:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022354:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8022358:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802235c:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8022360:	44f4      	add	ip, lr
 8022362:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022366:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802236a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802236e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022372:	ea4c 0709 	orr.w	r7, ip, r9
 8022376:	9709      	str	r7, [sp, #36]	; 0x24
 8022378:	2eff      	cmp	r6, #255	; 0xff
 802237a:	d01c      	beq.n	80223b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 802237c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802237e:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 8022382:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8022386:	fb06 fe0e 	mul.w	lr, r6, lr
 802238a:	437e      	muls	r6, r7
 802238c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022390:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8022394:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8022398:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802239c:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 80223a0:	44f4      	add	ip, lr
 80223a2:	0a36      	lsrs	r6, r6, #8
 80223a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80223a8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80223ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80223b0:	ea4c 0606 	orr.w	r6, ip, r6
 80223b4:	960f      	str	r6, [sp, #60]	; 0x3c
 80223b6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80223b8:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80223bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80223c0:	2aff      	cmp	r2, #255	; 0xff
 80223c2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80223c6:	fb08 f606 	mul.w	r6, r8, r6
 80223ca:	fb01 6607 	mla	r6, r1, r7, r6
 80223ce:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80223d0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80223d4:	fb00 6607 	mla	r6, r0, r7, r6
 80223d8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80223da:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80223de:	fb0a 6607 	mla	r6, sl, r7, r6
 80223e2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80223e4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80223e8:	ea4f 2616 	mov.w	r6, r6, lsr #8
 80223ec:	fb08 f807 	mul.w	r8, r8, r7
 80223f0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80223f4:	fb01 8303 	mla	r3, r1, r3, r8
 80223f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80223fa:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80223fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022400:	fb00 330c 	mla	r3, r0, ip, r3
 8022404:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8022408:	fb0a 3e0e 	mla	lr, sl, lr, r3
 802240c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022410:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022414:	ea46 060e 	orr.w	r6, r6, lr
 8022418:	b2f0      	uxtb	r0, r6
 802241a:	f3c6 2107 	ubfx	r1, r6, #8, #8
 802241e:	ea4f 4616 	mov.w	r6, r6, lsr #16
 8022422:	d038      	beq.n	8022496 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 8022424:	43d2      	mvns	r2, r2
 8022426:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 802242a:	b2d2      	uxtb	r2, r2
 802242c:	4357      	muls	r7, r2
 802242e:	1c7b      	adds	r3, r7, #1
 8022430:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8022434:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022438:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 802243c:	4350      	muls	r0, r2
 802243e:	f805 3c03 	strb.w	r3, [r5, #-3]
 8022442:	1c43      	adds	r3, r0, #1
 8022444:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022448:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802244c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8022450:	4353      	muls	r3, r2
 8022452:	f805 1c02 	strb.w	r1, [r5, #-2]
 8022456:	1c5a      	adds	r2, r3, #1
 8022458:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802245c:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8022460:	f805 6c01 	strb.w	r6, [r5, #-1]
 8022464:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022466:	3503      	adds	r5, #3
 8022468:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802246a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802246e:	4413      	add	r3, r2
 8022470:	9329      	str	r3, [sp, #164]	; 0xa4
 8022472:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022474:	441c      	add	r4, r3
 8022476:	e510      	b.n	8021e9a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 8022478:	b150      	cbz	r0, 8022490 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 802247a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802247c:	5871      	ldr	r1, [r6, r1]
 802247e:	26ff      	movs	r6, #255	; 0xff
 8022480:	ea4f 6911 	mov.w	r9, r1, lsr #24
 8022484:	9109      	str	r1, [sp, #36]	; 0x24
 8022486:	46b6      	mov	lr, r6
 8022488:	e6f5      	b.n	8022276 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 802248a:	26ff      	movs	r6, #255	; 0xff
 802248c:	46b1      	mov	r9, r6
 802248e:	e6f2      	b.n	8022276 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8022490:	26ff      	movs	r6, #255	; 0xff
 8022492:	46b1      	mov	r9, r6
 8022494:	e7f7      	b.n	8022486 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 8022496:	f805 0c03 	strb.w	r0, [r5, #-3]
 802249a:	f805 1c02 	strb.w	r1, [r5, #-2]
 802249e:	e7df      	b.n	8022460 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 80224a0:	b017      	add	sp, #92	; 0x5c
 80224a2:	ecbd 8b08 	vpop	{d8-d11}
 80224a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080224ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 80224ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224b0:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 80224b4:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80224b8:	2800      	cmp	r0, #0
 80224ba:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80224be:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 80224c2:	fb0c 0e03 	mla	lr, ip, r3, r0
 80224c6:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80224ca:	db6b      	blt.n	80225a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80224cc:	4580      	cmp	r8, r0
 80224ce:	dd69      	ble.n	80225a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80224d0:	f1bc 0f00 	cmp.w	ip, #0
 80224d4:	db66      	blt.n	80225a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80224d6:	45e1      	cmp	r9, ip
 80224d8:	dd64      	ble.n	80225a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 80224da:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80224de:	f01e 0f01 	tst.w	lr, #1
 80224e2:	5d16      	ldrb	r6, [r2, r4]
 80224e4:	bf0c      	ite	eq
 80224e6:	f006 060f 	andeq.w	r6, r6, #15
 80224ea:	1136      	asrne	r6, r6, #4
 80224ec:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80224f0:	b2f6      	uxtb	r6, r6
 80224f2:	f110 0a01 	adds.w	sl, r0, #1
 80224f6:	d457      	bmi.n	80225a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80224f8:	45d0      	cmp	r8, sl
 80224fa:	dd55      	ble.n	80225a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 80224fc:	f1bc 0f00 	cmp.w	ip, #0
 8022500:	db52      	blt.n	80225a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022502:	45e1      	cmp	r9, ip
 8022504:	dd50      	ble.n	80225a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 8022506:	2f00      	cmp	r7, #0
 8022508:	f000 80ac 	beq.w	8022664 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 802250c:	f10e 0b01 	add.w	fp, lr, #1
 8022510:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8022514:	f01b 0f01 	tst.w	fp, #1
 8022518:	5d14      	ldrb	r4, [r2, r4]
 802251a:	bf0c      	ite	eq
 802251c:	f004 040f 	andeq.w	r4, r4, #15
 8022520:	1124      	asrne	r4, r4, #4
 8022522:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022526:	b2e4      	uxtb	r4, r4
 8022528:	2d00      	cmp	r5, #0
 802252a:	f000 8096 	beq.w	802265a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 802252e:	2800      	cmp	r0, #0
 8022530:	f10c 0c01 	add.w	ip, ip, #1
 8022534:	db3c      	blt.n	80225b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022536:	4580      	cmp	r8, r0
 8022538:	dd3a      	ble.n	80225b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 802253a:	f1bc 0f00 	cmp.w	ip, #0
 802253e:	db37      	blt.n	80225b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022540:	45e1      	cmp	r9, ip
 8022542:	dd35      	ble.n	80225b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 8022544:	eb03 0b0e 	add.w	fp, r3, lr
 8022548:	ea4f 005b 	mov.w	r0, fp, lsr #1
 802254c:	f01b 0f01 	tst.w	fp, #1
 8022550:	5c10      	ldrb	r0, [r2, r0]
 8022552:	bf0c      	ite	eq
 8022554:	f000 000f 	andeq.w	r0, r0, #15
 8022558:	1100      	asrne	r0, r0, #4
 802255a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802255e:	b2c0      	uxtb	r0, r0
 8022560:	f1ba 0f00 	cmp.w	sl, #0
 8022564:	db26      	blt.n	80225b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022566:	45d0      	cmp	r8, sl
 8022568:	dd24      	ble.n	80225b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 802256a:	f1bc 0f00 	cmp.w	ip, #0
 802256e:	db21      	blt.n	80225b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022570:	45e1      	cmp	r9, ip
 8022572:	dd1f      	ble.n	80225b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 8022574:	b307      	cbz	r7, 80225b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 8022576:	3301      	adds	r3, #1
 8022578:	449e      	add	lr, r3
 802257a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802257e:	f01e 0f01 	tst.w	lr, #1
 8022582:	5cd3      	ldrb	r3, [r2, r3]
 8022584:	bf0c      	ite	eq
 8022586:	f003 030f 	andeq.w	r3, r3, #15
 802258a:	111b      	asrne	r3, r3, #4
 802258c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022590:	b2db      	uxtb	r3, r3
 8022592:	2f0f      	cmp	r7, #15
 8022594:	d911      	bls.n	80225ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 8022596:	4b35      	ldr	r3, [pc, #212]	; (802266c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 8022598:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 802259c:	4a34      	ldr	r2, [pc, #208]	; (8022670 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 802259e:	4835      	ldr	r0, [pc, #212]	; (8022674 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 80225a0:	f002 fb5a 	bl	8024c58 <__assert_func>
 80225a4:	2600      	movs	r6, #0
 80225a6:	e7a4      	b.n	80224f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 80225a8:	2400      	movs	r4, #0
 80225aa:	e7bd      	b.n	8022528 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 80225ac:	463c      	mov	r4, r7
 80225ae:	e7be      	b.n	802252e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 80225b0:	2000      	movs	r0, #0
 80225b2:	e7d5      	b.n	8022560 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 80225b4:	2300      	movs	r3, #0
 80225b6:	e7ec      	b.n	8022592 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 80225b8:	463b      	mov	r3, r7
 80225ba:	2d0f      	cmp	r5, #15
 80225bc:	d8eb      	bhi.n	8022596 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 80225be:	b2bf      	uxth	r7, r7
 80225c0:	b2ad      	uxth	r5, r5
 80225c2:	fb07 f205 	mul.w	r2, r7, r5
 80225c6:	013f      	lsls	r7, r7, #4
 80225c8:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 80225cc:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 80225d0:	1abf      	subs	r7, r7, r2
 80225d2:	b2ad      	uxth	r5, r5
 80225d4:	b2bf      	uxth	r7, r7
 80225d6:	ebac 0c05 	sub.w	ip, ip, r5
 80225da:	437c      	muls	r4, r7
 80225dc:	fa1f fc8c 	uxth.w	ip, ip
 80225e0:	fb06 440c 	mla	r4, r6, ip, r4
 80225e4:	fb05 4400 	mla	r4, r5, r0, r4
 80225e8:	fb02 4203 	mla	r2, r2, r3, r4
 80225ec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80225f0:	b38a      	cbz	r2, 8022656 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 80225f2:	4b21      	ldr	r3, [pc, #132]	; (8022678 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 80225f4:	681c      	ldr	r4, [r3, #0]
 80225f6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80225fa:	b2e5      	uxtb	r5, r4
 80225fc:	4353      	muls	r3, r2
 80225fe:	1c5a      	adds	r2, r3, #1
 8022600:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022604:	1212      	asrs	r2, r2, #8
 8022606:	b290      	uxth	r0, r2
 8022608:	43d2      	mvns	r2, r2
 802260a:	fb15 f500 	smulbb	r5, r5, r0
 802260e:	b2d3      	uxtb	r3, r2
 8022610:	780a      	ldrb	r2, [r1, #0]
 8022612:	fb02 5203 	mla	r2, r2, r3, r5
 8022616:	b292      	uxth	r2, r2
 8022618:	1c55      	adds	r5, r2, #1
 802261a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802261e:	784d      	ldrb	r5, [r1, #1]
 8022620:	fb15 f503 	smulbb	r5, r5, r3
 8022624:	1212      	asrs	r2, r2, #8
 8022626:	700a      	strb	r2, [r1, #0]
 8022628:	f3c4 2207 	ubfx	r2, r4, #8, #8
 802262c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8022630:	fb02 5200 	mla	r2, r2, r0, r5
 8022634:	b292      	uxth	r2, r2
 8022636:	1c55      	adds	r5, r2, #1
 8022638:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802263c:	1212      	asrs	r2, r2, #8
 802263e:	704a      	strb	r2, [r1, #1]
 8022640:	788a      	ldrb	r2, [r1, #2]
 8022642:	fb12 f303 	smulbb	r3, r2, r3
 8022646:	fb04 3300 	mla	r3, r4, r0, r3
 802264a:	b29b      	uxth	r3, r3
 802264c:	1c5a      	adds	r2, r3, #1
 802264e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022652:	121b      	asrs	r3, r3, #8
 8022654:	708b      	strb	r3, [r1, #2]
 8022656:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802265a:	2f0f      	cmp	r7, #15
 802265c:	d89b      	bhi.n	8022596 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 802265e:	462b      	mov	r3, r5
 8022660:	4628      	mov	r0, r5
 8022662:	e7ac      	b.n	80225be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 8022664:	2d00      	cmp	r5, #0
 8022666:	d1a1      	bne.n	80225ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 8022668:	462c      	mov	r4, r5
 802266a:	e7f8      	b.n	802265e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 802266c:	0802b67c 	.word	0x0802b67c
 8022670:	0802bb72 	.word	0x0802bb72
 8022674:	0802b745 	.word	0x0802b745
 8022678:	2000b2fc 	.word	0x2000b2fc

0802267c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 802267c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022680:	ed2d 8b08 	vpush	{d8-d11}
 8022684:	b097      	sub	sp, #92	; 0x5c
 8022686:	eeb0 aa40 	vmov.f32	s20, s0
 802268a:	eef0 9a60 	vmov.f32	s19, s1
 802268e:	9308      	str	r3, [sp, #32]
 8022690:	eeb0 9a41 	vmov.f32	s18, s2
 8022694:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8022698:	eeb0 8a62 	vmov.f32	s16, s5
 802269c:	9214      	str	r2, [sp, #80]	; 0x50
 802269e:	eef0 8a43 	vmov.f32	s17, s6
 80226a2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80226a4:	eef0 ba44 	vmov.f32	s23, s8
 80226a8:	9309      	str	r3, [sp, #36]	; 0x24
 80226aa:	eeb0 ba64 	vmov.f32	s22, s9
 80226ae:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 80226b2:	eef0 aa45 	vmov.f32	s21, s10
 80226b6:	9015      	str	r0, [sp, #84]	; 0x54
 80226b8:	910c      	str	r1, [sp, #48]	; 0x30
 80226ba:	930e      	str	r3, [sp, #56]	; 0x38
 80226bc:	6850      	ldr	r0, [r2, #4]
 80226be:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 80226c2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80226c6:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 80226ca:	fb00 1803 	mla	r8, r0, r3, r1
 80226ce:	6813      	ldr	r3, [r2, #0]
 80226d0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80226d4:	4498      	add	r8, r3
 80226d6:	f10b 0301 	add.w	r3, fp, #1
 80226da:	f023 0301 	bic.w	r3, r3, #1
 80226de:	930f      	str	r3, [sp, #60]	; 0x3c
 80226e0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80226e2:	681f      	ldr	r7, [r3, #0]
 80226e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80226e6:	2b00      	cmp	r3, #0
 80226e8:	dc03      	bgt.n	80226f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80226ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80226ec:	2b00      	cmp	r3, #0
 80226ee:	f340 8238 	ble.w	8022b62 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 80226f2:	9b08      	ldr	r3, [sp, #32]
 80226f4:	2b00      	cmp	r3, #0
 80226f6:	f340 810c 	ble.w	8022912 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 80226fa:	142a      	asrs	r2, r5, #16
 80226fc:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022700:	d42c      	bmi.n	802275c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 8022702:	1c51      	adds	r1, r2, #1
 8022704:	458b      	cmp	fp, r1
 8022706:	dd2c      	ble.n	8022762 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022708:	2b00      	cmp	r3, #0
 802270a:	db2a      	blt.n	8022762 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 802270c:	1c59      	adds	r1, r3, #1
 802270e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022710:	4288      	cmp	r0, r1
 8022712:	dd26      	ble.n	8022762 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 8022714:	9b08      	ldr	r3, [sp, #32]
 8022716:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022718:	3b01      	subs	r3, #1
 802271a:	fb02 5203 	mla	r2, r2, r3, r5
 802271e:	1412      	asrs	r2, r2, #16
 8022720:	d429      	bmi.n	8022776 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8022722:	3201      	adds	r2, #1
 8022724:	4593      	cmp	fp, r2
 8022726:	dd26      	ble.n	8022776 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8022728:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802272a:	fb02 6303 	mla	r3, r2, r3, r6
 802272e:	141b      	asrs	r3, r3, #16
 8022730:	d421      	bmi.n	8022776 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8022732:	3301      	adds	r3, #1
 8022734:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022736:	429a      	cmp	r2, r3
 8022738:	dd1d      	ble.n	8022776 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 802273a:	f108 0e03 	add.w	lr, r8, #3
 802273e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8022742:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8022746:	f1b9 0f00 	cmp.w	r9, #0
 802274a:	f300 814f 	bgt.w	80229ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 802274e:	9b08      	ldr	r3, [sp, #32]
 8022750:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022754:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022758:	44a0      	add	r8, r4
 802275a:	e0dc      	b.n	8022916 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 802275c:	1c51      	adds	r1, r2, #1
 802275e:	f040 80ce 	bne.w	80228fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022762:	4593      	cmp	fp, r2
 8022764:	f340 80cb 	ble.w	80228fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022768:	1c5a      	adds	r2, r3, #1
 802276a:	f2c0 80c8 	blt.w	80228fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 802276e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022770:	4293      	cmp	r3, r2
 8022772:	f280 80c4 	bge.w	80228fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8022776:	9b08      	ldr	r3, [sp, #32]
 8022778:	46c1      	mov	r9, r8
 802277a:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 802277e:	930d      	str	r3, [sp, #52]	; 0x34
 8022780:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022782:	2b00      	cmp	r3, #0
 8022784:	dde3      	ble.n	802274e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 8022786:	1428      	asrs	r0, r5, #16
 8022788:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802278c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022790:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022794:	f100 8111 	bmi.w	80229ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 8022798:	f100 0c01 	add.w	ip, r0, #1
 802279c:	45e3      	cmp	fp, ip
 802279e:	f340 810e 	ble.w	80229be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80227a2:	2b00      	cmp	r3, #0
 80227a4:	f2c0 810b 	blt.w	80229be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80227a8:	f103 0c01 	add.w	ip, r3, #1
 80227ac:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80227ae:	4564      	cmp	r4, ip
 80227b0:	f340 8105 	ble.w	80229be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 80227b4:	fb03 030a 	mla	r3, r3, sl, r0
 80227b8:	0858      	lsrs	r0, r3, #1
 80227ba:	07dc      	lsls	r4, r3, #31
 80227bc:	5c38      	ldrb	r0, [r7, r0]
 80227be:	bf54      	ite	pl
 80227c0:	f000 000f 	andpl.w	r0, r0, #15
 80227c4:	1100      	asrmi	r0, r0, #4
 80227c6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80227ca:	b2c0      	uxtb	r0, r0
 80227cc:	2a00      	cmp	r2, #0
 80227ce:	f000 80e1 	beq.w	8022994 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 80227d2:	f103 0e01 	add.w	lr, r3, #1
 80227d6:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80227da:	f01e 0f01 	tst.w	lr, #1
 80227de:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80227e2:	bf0c      	ite	eq
 80227e4:	f00c 0c0f 	andeq.w	ip, ip, #15
 80227e8:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80227ec:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80227f0:	fa5f f48c 	uxtb.w	r4, ip
 80227f4:	9410      	str	r4, [sp, #64]	; 0x40
 80227f6:	b1f9      	cbz	r1, 8022838 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80227f8:	4453      	add	r3, sl
 80227fa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80227fe:	07dc      	lsls	r4, r3, #31
 8022800:	f103 0301 	add.w	r3, r3, #1
 8022804:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022808:	bf54      	ite	pl
 802280a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802280e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022812:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022816:	fa5f f48c 	uxtb.w	r4, ip
 802281a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802281e:	940a      	str	r4, [sp, #40]	; 0x28
 8022820:	07dc      	lsls	r4, r3, #31
 8022822:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022826:	bf54      	ite	pl
 8022828:	f00c 030f 	andpl.w	r3, ip, #15
 802282c:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8022830:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022834:	b2db      	uxtb	r3, r3
 8022836:	9311      	str	r3, [sp, #68]	; 0x44
 8022838:	b292      	uxth	r2, r2
 802283a:	b289      	uxth	r1, r1
 802283c:	0113      	lsls	r3, r2, #4
 802283e:	fb02 fc01 	mul.w	ip, r2, r1
 8022842:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022844:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8022848:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 802284c:	eba3 030c 	sub.w	r3, r3, ip
 8022850:	b289      	uxth	r1, r1
 8022852:	b29b      	uxth	r3, r3
 8022854:	ebae 0e01 	sub.w	lr, lr, r1
 8022858:	4353      	muls	r3, r2
 802285a:	fa1f fe8e 	uxth.w	lr, lr
 802285e:	fb00 320e 	mla	r2, r0, lr, r3
 8022862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022864:	fb01 2203 	mla	r2, r1, r3, r2
 8022868:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802286a:	fb0c 2203 	mla	r2, ip, r3, r2
 802286e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022872:	2a00      	cmp	r2, #0
 8022874:	d039      	beq.n	80228ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 8022876:	4bbd      	ldr	r3, [pc, #756]	; (8022b6c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8022878:	6819      	ldr	r1, [r3, #0]
 802287a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802287c:	fa5f fc81 	uxtb.w	ip, r1
 8022880:	435a      	muls	r2, r3
 8022882:	1c53      	adds	r3, r2, #1
 8022884:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022888:	1212      	asrs	r2, r2, #8
 802288a:	b290      	uxth	r0, r2
 802288c:	43d2      	mvns	r2, r2
 802288e:	fb1c fc00 	smulbb	ip, ip, r0
 8022892:	b2d3      	uxtb	r3, r2
 8022894:	f899 2000 	ldrb.w	r2, [r9]
 8022898:	fb02 c203 	mla	r2, r2, r3, ip
 802289c:	b292      	uxth	r2, r2
 802289e:	f102 0c01 	add.w	ip, r2, #1
 80228a2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80228a6:	f899 c001 	ldrb.w	ip, [r9, #1]
 80228aa:	fb1c fc03 	smulbb	ip, ip, r3
 80228ae:	1212      	asrs	r2, r2, #8
 80228b0:	f889 2000 	strb.w	r2, [r9]
 80228b4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80228b8:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80228bc:	fb02 c200 	mla	r2, r2, r0, ip
 80228c0:	b292      	uxth	r2, r2
 80228c2:	f102 0c01 	add.w	ip, r2, #1
 80228c6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80228ca:	1212      	asrs	r2, r2, #8
 80228cc:	f889 2001 	strb.w	r2, [r9, #1]
 80228d0:	f899 2002 	ldrb.w	r2, [r9, #2]
 80228d4:	fb12 f303 	smulbb	r3, r2, r3
 80228d8:	fb01 3300 	mla	r3, r1, r0, r3
 80228dc:	b29b      	uxth	r3, r3
 80228de:	1c5a      	adds	r2, r3, #1
 80228e0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80228e4:	121b      	asrs	r3, r3, #8
 80228e6:	f889 3002 	strb.w	r3, [r9, #2]
 80228ea:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80228ec:	f109 0903 	add.w	r9, r9, #3
 80228f0:	441d      	add	r5, r3
 80228f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80228f4:	441e      	add	r6, r3
 80228f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80228f8:	3b01      	subs	r3, #1
 80228fa:	930d      	str	r3, [sp, #52]	; 0x34
 80228fc:	e740      	b.n	8022780 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80228fe:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022900:	f108 0803 	add.w	r8, r8, #3
 8022904:	441d      	add	r5, r3
 8022906:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022908:	441e      	add	r6, r3
 802290a:	9b08      	ldr	r3, [sp, #32]
 802290c:	3b01      	subs	r3, #1
 802290e:	9308      	str	r3, [sp, #32]
 8022910:	e6ef      	b.n	80226f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8022912:	f47f aeff 	bne.w	8022714 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8022916:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022918:	2b00      	cmp	r3, #0
 802291a:	f340 8122 	ble.w	8022b62 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 802291e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022922:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022924:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022928:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802292c:	eef0 6a48 	vmov.f32	s13, s16
 8022930:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022934:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022938:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802293c:	ee16 5a90 	vmov	r5, s13
 8022940:	eef0 6a68 	vmov.f32	s13, s17
 8022944:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022948:	ee16 6a90 	vmov	r6, s13
 802294c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022950:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022954:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022958:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802295c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022960:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022964:	ee18 2a10 	vmov	r2, s16
 8022968:	eeb0 8a47 	vmov.f32	s16, s14
 802296c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022970:	ee18 2a90 	vmov	r2, s17
 8022974:	932b      	str	r3, [sp, #172]	; 0xac
 8022976:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022978:	eef0 8a67 	vmov.f32	s17, s15
 802297c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022980:	932c      	str	r3, [sp, #176]	; 0xb0
 8022982:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022984:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022986:	3b01      	subs	r3, #1
 8022988:	930c      	str	r3, [sp, #48]	; 0x30
 802298a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802298c:	bf08      	it	eq
 802298e:	4613      	moveq	r3, r2
 8022990:	9308      	str	r3, [sp, #32]
 8022992:	e6a7      	b.n	80226e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8022994:	2900      	cmp	r1, #0
 8022996:	f43f af4f 	beq.w	8022838 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 802299a:	4453      	add	r3, sl
 802299c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80229a0:	07db      	lsls	r3, r3, #31
 80229a2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80229a6:	bf54      	ite	pl
 80229a8:	f00c 030f 	andpl.w	r3, ip, #15
 80229ac:	ea4f 132c 	movmi.w	r3, ip, asr #4
 80229b0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80229b4:	b2db      	uxtb	r3, r3
 80229b6:	930a      	str	r3, [sp, #40]	; 0x28
 80229b8:	e73e      	b.n	8022838 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 80229ba:	1c44      	adds	r4, r0, #1
 80229bc:	d195      	bne.n	80228ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80229be:	4583      	cmp	fp, r0
 80229c0:	dd93      	ble.n	80228ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80229c2:	1c5c      	adds	r4, r3, #1
 80229c4:	db91      	blt.n	80228ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80229c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80229c8:	429c      	cmp	r4, r3
 80229ca:	dd8e      	ble.n	80228ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80229cc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80229ce:	9002      	str	r0, [sp, #8]
 80229d0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80229d2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80229d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80229d8:	463a      	mov	r2, r7
 80229da:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80229de:	e9cd b300 	strd	fp, r3, [sp]
 80229e2:	4649      	mov	r1, r9
 80229e4:	4653      	mov	r3, sl
 80229e6:	f7ff fd61 	bl	80224ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 80229ea:	e77e      	b.n	80228ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 80229ec:	142a      	asrs	r2, r5, #16
 80229ee:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80229f2:	1433      	asrs	r3, r6, #16
 80229f4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80229f8:	fb0a 2303 	mla	r3, sl, r3, r2
 80229fc:	085a      	lsrs	r2, r3, #1
 80229fe:	07dc      	lsls	r4, r3, #31
 8022a00:	5cba      	ldrb	r2, [r7, r2]
 8022a02:	bf54      	ite	pl
 8022a04:	f002 020f 	andpl.w	r2, r2, #15
 8022a08:	1112      	asrmi	r2, r2, #4
 8022a0a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022a0e:	b2d2      	uxtb	r2, r2
 8022a10:	2900      	cmp	r1, #0
 8022a12:	f000 8093 	beq.w	8022b3c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 8022a16:	1c5c      	adds	r4, r3, #1
 8022a18:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 8022a1c:	07e4      	lsls	r4, r4, #31
 8022a1e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022a22:	bf54      	ite	pl
 8022a24:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022a28:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022a2c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022a30:	fa5f f48c 	uxtb.w	r4, ip
 8022a34:	9412      	str	r4, [sp, #72]	; 0x48
 8022a36:	b300      	cbz	r0, 8022a7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8022a38:	4453      	add	r3, sl
 8022a3a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022a3e:	07dc      	lsls	r4, r3, #31
 8022a40:	f103 0301 	add.w	r3, r3, #1
 8022a44:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022a48:	bf54      	ite	pl
 8022a4a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022a4e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022a52:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022a56:	fa5f f48c 	uxtb.w	r4, ip
 8022a5a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022a5e:	940b      	str	r4, [sp, #44]	; 0x2c
 8022a60:	07dc      	lsls	r4, r3, #31
 8022a62:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022a66:	bf54      	ite	pl
 8022a68:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022a6c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022a70:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022a74:	fa5f f38c 	uxtb.w	r3, ip
 8022a78:	9313      	str	r3, [sp, #76]	; 0x4c
 8022a7a:	b289      	uxth	r1, r1
 8022a7c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022a7e:	b280      	uxth	r0, r0
 8022a80:	fb01 f300 	mul.w	r3, r1, r0
 8022a84:	0109      	lsls	r1, r1, #4
 8022a86:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8022a8a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8022a8e:	1ac9      	subs	r1, r1, r3
 8022a90:	b280      	uxth	r0, r0
 8022a92:	b289      	uxth	r1, r1
 8022a94:	ebac 0c00 	sub.w	ip, ip, r0
 8022a98:	4361      	muls	r1, r4
 8022a9a:	fa1f fc8c 	uxth.w	ip, ip
 8022a9e:	fb02 120c 	mla	r2, r2, ip, r1
 8022aa2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022aa4:	fb00 2001 	mla	r0, r0, r1, r2
 8022aa8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022aaa:	fb03 0302 	mla	r3, r3, r2, r0
 8022aae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022ab2:	2b00      	cmp	r3, #0
 8022ab4:	d039      	beq.n	8022b2a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 8022ab6:	4a2d      	ldr	r2, [pc, #180]	; (8022b6c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 8022ab8:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8022abc:	6810      	ldr	r0, [r2, #0]
 8022abe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022ac0:	fa5f fc80 	uxtb.w	ip, r0
 8022ac4:	4353      	muls	r3, r2
 8022ac6:	1c5a      	adds	r2, r3, #1
 8022ac8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022acc:	121b      	asrs	r3, r3, #8
 8022ace:	b29a      	uxth	r2, r3
 8022ad0:	43db      	mvns	r3, r3
 8022ad2:	fb1c fc02 	smulbb	ip, ip, r2
 8022ad6:	b2db      	uxtb	r3, r3
 8022ad8:	fb01 c103 	mla	r1, r1, r3, ip
 8022adc:	b289      	uxth	r1, r1
 8022ade:	f101 0c01 	add.w	ip, r1, #1
 8022ae2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8022ae6:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8022aea:	fb1c fc03 	smulbb	ip, ip, r3
 8022aee:	1209      	asrs	r1, r1, #8
 8022af0:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8022af4:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8022af8:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8022afc:	fb01 c102 	mla	r1, r1, r2, ip
 8022b00:	b289      	uxth	r1, r1
 8022b02:	f101 0c01 	add.w	ip, r1, #1
 8022b06:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8022b0a:	1209      	asrs	r1, r1, #8
 8022b0c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8022b10:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8022b14:	fb11 f303 	smulbb	r3, r1, r3
 8022b18:	fb00 3002 	mla	r0, r0, r2, r3
 8022b1c:	b280      	uxth	r0, r0
 8022b1e:	1c42      	adds	r2, r0, #1
 8022b20:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022b24:	1200      	asrs	r0, r0, #8
 8022b26:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8022b2a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8022b2c:	f10e 0e03 	add.w	lr, lr, #3
 8022b30:	f109 39ff 	add.w	r9, r9, #4294967295
 8022b34:	441d      	add	r5, r3
 8022b36:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022b38:	441e      	add	r6, r3
 8022b3a:	e604      	b.n	8022746 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8022b3c:	2800      	cmp	r0, #0
 8022b3e:	d09c      	beq.n	8022a7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8022b40:	4453      	add	r3, sl
 8022b42:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022b46:	07db      	lsls	r3, r3, #31
 8022b48:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022b4c:	bf54      	ite	pl
 8022b4e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022b52:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022b56:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022b5a:	fa5f f38c 	uxtb.w	r3, ip
 8022b5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8022b60:	e78b      	b.n	8022a7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 8022b62:	b017      	add	sp, #92	; 0x5c
 8022b64:	ecbd 8b08 	vpop	{d8-d11}
 8022b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b6c:	2000b2fc 	.word	0x2000b2fc

08022b70 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8022b70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b74:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 8022b78:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022b7c:	2800      	cmp	r0, #0
 8022b7e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8022b82:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8022b86:	fb0c 0e03 	mla	lr, ip, r3, r0
 8022b8a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8022b8e:	db6b      	blt.n	8022c68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022b90:	4580      	cmp	r8, r0
 8022b92:	dd69      	ble.n	8022c68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022b94:	f1bc 0f00 	cmp.w	ip, #0
 8022b98:	db66      	blt.n	8022c68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022b9a:	45e1      	cmp	r9, ip
 8022b9c:	dd64      	ble.n	8022c68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 8022b9e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8022ba2:	f01e 0f01 	tst.w	lr, #1
 8022ba6:	5d16      	ldrb	r6, [r2, r4]
 8022ba8:	bf0c      	ite	eq
 8022baa:	f006 060f 	andeq.w	r6, r6, #15
 8022bae:	1136      	asrne	r6, r6, #4
 8022bb0:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022bb4:	b2f6      	uxtb	r6, r6
 8022bb6:	f110 0a01 	adds.w	sl, r0, #1
 8022bba:	d457      	bmi.n	8022c6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022bbc:	45d0      	cmp	r8, sl
 8022bbe:	dd55      	ble.n	8022c6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022bc0:	f1bc 0f00 	cmp.w	ip, #0
 8022bc4:	db52      	blt.n	8022c6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022bc6:	45e1      	cmp	r9, ip
 8022bc8:	dd50      	ble.n	8022c6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 8022bca:	2f00      	cmp	r7, #0
 8022bcc:	f000 80a5 	beq.w	8022d1a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 8022bd0:	f10e 0b01 	add.w	fp, lr, #1
 8022bd4:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8022bd8:	f01b 0f01 	tst.w	fp, #1
 8022bdc:	5d14      	ldrb	r4, [r2, r4]
 8022bde:	bf0c      	ite	eq
 8022be0:	f004 040f 	andeq.w	r4, r4, #15
 8022be4:	1124      	asrne	r4, r4, #4
 8022be6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022bea:	b2e4      	uxtb	r4, r4
 8022bec:	2d00      	cmp	r5, #0
 8022bee:	f000 808f 	beq.w	8022d10 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 8022bf2:	2800      	cmp	r0, #0
 8022bf4:	f10c 0c01 	add.w	ip, ip, #1
 8022bf8:	db3c      	blt.n	8022c74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022bfa:	4580      	cmp	r8, r0
 8022bfc:	dd3a      	ble.n	8022c74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022bfe:	f1bc 0f00 	cmp.w	ip, #0
 8022c02:	db37      	blt.n	8022c74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022c04:	45e1      	cmp	r9, ip
 8022c06:	dd35      	ble.n	8022c74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 8022c08:	eb03 0b0e 	add.w	fp, r3, lr
 8022c0c:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8022c10:	f01b 0f01 	tst.w	fp, #1
 8022c14:	5c10      	ldrb	r0, [r2, r0]
 8022c16:	bf0c      	ite	eq
 8022c18:	f000 000f 	andeq.w	r0, r0, #15
 8022c1c:	1100      	asrne	r0, r0, #4
 8022c1e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022c22:	b2c0      	uxtb	r0, r0
 8022c24:	f1ba 0f00 	cmp.w	sl, #0
 8022c28:	db26      	blt.n	8022c78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022c2a:	45d0      	cmp	r8, sl
 8022c2c:	dd24      	ble.n	8022c78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022c2e:	f1bc 0f00 	cmp.w	ip, #0
 8022c32:	db21      	blt.n	8022c78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022c34:	45e1      	cmp	r9, ip
 8022c36:	dd1f      	ble.n	8022c78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 8022c38:	b307      	cbz	r7, 8022c7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 8022c3a:	3301      	adds	r3, #1
 8022c3c:	449e      	add	lr, r3
 8022c3e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022c42:	f01e 0f01 	tst.w	lr, #1
 8022c46:	5cd3      	ldrb	r3, [r2, r3]
 8022c48:	bf0c      	ite	eq
 8022c4a:	f003 030f 	andeq.w	r3, r3, #15
 8022c4e:	111b      	asrne	r3, r3, #4
 8022c50:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022c54:	b2db      	uxtb	r3, r3
 8022c56:	2f0f      	cmp	r7, #15
 8022c58:	d911      	bls.n	8022c7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 8022c5a:	4b32      	ldr	r3, [pc, #200]	; (8022d24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 8022c5c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8022c60:	4a31      	ldr	r2, [pc, #196]	; (8022d28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 8022c62:	4832      	ldr	r0, [pc, #200]	; (8022d2c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 8022c64:	f001 fff8 	bl	8024c58 <__assert_func>
 8022c68:	2600      	movs	r6, #0
 8022c6a:	e7a4      	b.n	8022bb6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 8022c6c:	2400      	movs	r4, #0
 8022c6e:	e7bd      	b.n	8022bec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 8022c70:	463c      	mov	r4, r7
 8022c72:	e7be      	b.n	8022bf2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 8022c74:	2000      	movs	r0, #0
 8022c76:	e7d5      	b.n	8022c24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 8022c78:	2300      	movs	r3, #0
 8022c7a:	e7ec      	b.n	8022c56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 8022c7c:	463b      	mov	r3, r7
 8022c7e:	2d0f      	cmp	r5, #15
 8022c80:	d8eb      	bhi.n	8022c5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8022c82:	b2bf      	uxth	r7, r7
 8022c84:	b2ad      	uxth	r5, r5
 8022c86:	fb07 f205 	mul.w	r2, r7, r5
 8022c8a:	013f      	lsls	r7, r7, #4
 8022c8c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 8022c90:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 8022c94:	1abf      	subs	r7, r7, r2
 8022c96:	b2ad      	uxth	r5, r5
 8022c98:	b2bf      	uxth	r7, r7
 8022c9a:	ebac 0c05 	sub.w	ip, ip, r5
 8022c9e:	437c      	muls	r4, r7
 8022ca0:	fa1f fc8c 	uxth.w	ip, ip
 8022ca4:	fb06 440c 	mla	r4, r6, ip, r4
 8022ca8:	fb05 4400 	mla	r4, r5, r0, r4
 8022cac:	fb02 4303 	mla	r3, r2, r3, r4
 8022cb0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022cb4:	b353      	cbz	r3, 8022d0c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 8022cb6:	4a1e      	ldr	r2, [pc, #120]	; (8022d30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 8022cb8:	7808      	ldrb	r0, [r1, #0]
 8022cba:	6814      	ldr	r4, [r2, #0]
 8022cbc:	b29a      	uxth	r2, r3
 8022cbe:	43db      	mvns	r3, r3
 8022cc0:	b2e5      	uxtb	r5, r4
 8022cc2:	b2db      	uxtb	r3, r3
 8022cc4:	fb15 f502 	smulbb	r5, r5, r2
 8022cc8:	fb00 5003 	mla	r0, r0, r3, r5
 8022ccc:	b280      	uxth	r0, r0
 8022cce:	1c45      	adds	r5, r0, #1
 8022cd0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022cd4:	784d      	ldrb	r5, [r1, #1]
 8022cd6:	fb15 f503 	smulbb	r5, r5, r3
 8022cda:	1200      	asrs	r0, r0, #8
 8022cdc:	7008      	strb	r0, [r1, #0]
 8022cde:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8022ce2:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8022ce6:	fb00 5002 	mla	r0, r0, r2, r5
 8022cea:	b280      	uxth	r0, r0
 8022cec:	1c45      	adds	r5, r0, #1
 8022cee:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022cf2:	1200      	asrs	r0, r0, #8
 8022cf4:	7048      	strb	r0, [r1, #1]
 8022cf6:	7888      	ldrb	r0, [r1, #2]
 8022cf8:	fb10 f303 	smulbb	r3, r0, r3
 8022cfc:	fb04 3202 	mla	r2, r4, r2, r3
 8022d00:	b292      	uxth	r2, r2
 8022d02:	1c53      	adds	r3, r2, #1
 8022d04:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022d08:	1212      	asrs	r2, r2, #8
 8022d0a:	708a      	strb	r2, [r1, #2]
 8022d0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d10:	2f0f      	cmp	r7, #15
 8022d12:	d8a2      	bhi.n	8022c5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 8022d14:	462b      	mov	r3, r5
 8022d16:	4628      	mov	r0, r5
 8022d18:	e7b3      	b.n	8022c82 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 8022d1a:	2d00      	cmp	r5, #0
 8022d1c:	d1a8      	bne.n	8022c70 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 8022d1e:	462c      	mov	r4, r5
 8022d20:	e7f8      	b.n	8022d14 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 8022d22:	bf00      	nop
 8022d24:	0802b67c 	.word	0x0802b67c
 8022d28:	0802bb72 	.word	0x0802bb72
 8022d2c:	0802b745 	.word	0x0802b745
 8022d30:	2000b2fc 	.word	0x2000b2fc

08022d34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8022d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d38:	ed2d 8b08 	vpush	{d8-d11}
 8022d3c:	b095      	sub	sp, #84	; 0x54
 8022d3e:	461c      	mov	r4, r3
 8022d40:	eeb0 aa40 	vmov.f32	s20, s0
 8022d44:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 8022d48:	eef0 9a60 	vmov.f32	s19, s1
 8022d4c:	920e      	str	r2, [sp, #56]	; 0x38
 8022d4e:	eeb0 9a41 	vmov.f32	s18, s2
 8022d52:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022d54:	eeb0 8a62 	vmov.f32	s16, s5
 8022d58:	9307      	str	r3, [sp, #28]
 8022d5a:	eef0 8a43 	vmov.f32	s17, s6
 8022d5e:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8022d62:	eef0 ba44 	vmov.f32	s23, s8
 8022d66:	9013      	str	r0, [sp, #76]	; 0x4c
 8022d68:	eeb0 ba64 	vmov.f32	s22, s9
 8022d6c:	9109      	str	r1, [sp, #36]	; 0x24
 8022d6e:	eef0 aa45 	vmov.f32	s21, s10
 8022d72:	9308      	str	r3, [sp, #32]
 8022d74:	6850      	ldr	r0, [r2, #4]
 8022d76:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8022d7a:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 8022d7e:	fb00 1803 	mla	r8, r0, r3, r1
 8022d82:	6813      	ldr	r3, [r2, #0]
 8022d84:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022d88:	4498      	add	r8, r3
 8022d8a:	9b07      	ldr	r3, [sp, #28]
 8022d8c:	3301      	adds	r3, #1
 8022d8e:	f023 0301 	bic.w	r3, r3, #1
 8022d92:	930b      	str	r3, [sp, #44]	; 0x2c
 8022d94:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8022d96:	681f      	ldr	r7, [r3, #0]
 8022d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d9a:	2b00      	cmp	r3, #0
 8022d9c:	dc03      	bgt.n	8022da6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8022d9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022da0:	2b00      	cmp	r3, #0
 8022da2:	f340 8238 	ble.w	8023216 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8022da6:	2c00      	cmp	r4, #0
 8022da8:	f340 8109 	ble.w	8022fbe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 8022dac:	142a      	asrs	r2, r5, #16
 8022dae:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022db2:	d42b      	bmi.n	8022e0c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8022db4:	1c51      	adds	r1, r2, #1
 8022db6:	9807      	ldr	r0, [sp, #28]
 8022db8:	4288      	cmp	r0, r1
 8022dba:	dd2a      	ble.n	8022e12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8022dbc:	2b00      	cmp	r3, #0
 8022dbe:	db28      	blt.n	8022e12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8022dc0:	1c59      	adds	r1, r3, #1
 8022dc2:	9808      	ldr	r0, [sp, #32]
 8022dc4:	4288      	cmp	r0, r1
 8022dc6:	dd24      	ble.n	8022e12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8022dc8:	1e63      	subs	r3, r4, #1
 8022dca:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8022dcc:	fb02 5203 	mla	r2, r2, r3, r5
 8022dd0:	1412      	asrs	r2, r2, #16
 8022dd2:	d429      	bmi.n	8022e28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022dd4:	3201      	adds	r2, #1
 8022dd6:	9907      	ldr	r1, [sp, #28]
 8022dd8:	4291      	cmp	r1, r2
 8022dda:	dd25      	ble.n	8022e28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022ddc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022dde:	fb02 6303 	mla	r3, r2, r3, r6
 8022de2:	141b      	asrs	r3, r3, #16
 8022de4:	d420      	bmi.n	8022e28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022de6:	3301      	adds	r3, #1
 8022de8:	9a08      	ldr	r2, [sp, #32]
 8022dea:	429a      	cmp	r2, r3
 8022dec:	dd1c      	ble.n	8022e28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8022dee:	f108 0e03 	add.w	lr, r8, #3
 8022df2:	46a1      	mov	r9, r4
 8022df4:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8022df8:	f1b9 0f00 	cmp.w	r9, #0
 8022dfc:	f300 8155 	bgt.w	80230aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 8022e00:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8022e04:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022e08:	44a0      	add	r8, r4
 8022e0a:	e0da      	b.n	8022fc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8022e0c:	1c50      	adds	r0, r2, #1
 8022e0e:	f040 80ce 	bne.w	8022fae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022e12:	9907      	ldr	r1, [sp, #28]
 8022e14:	4291      	cmp	r1, r2
 8022e16:	f340 80ca 	ble.w	8022fae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022e1a:	1c59      	adds	r1, r3, #1
 8022e1c:	f2c0 80c7 	blt.w	8022fae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022e20:	9a08      	ldr	r2, [sp, #32]
 8022e22:	4293      	cmp	r3, r2
 8022e24:	f280 80c3 	bge.w	8022fae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 8022e28:	46a3      	mov	fp, r4
 8022e2a:	46c1      	mov	r9, r8
 8022e2c:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8022e30:	f1bb 0f00 	cmp.w	fp, #0
 8022e34:	dde4      	ble.n	8022e00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8022e36:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8022e3a:	1428      	asrs	r0, r5, #16
 8022e3c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022e40:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022e44:	920a      	str	r2, [sp, #40]	; 0x28
 8022e46:	f100 8116 	bmi.w	8023076 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8022e4a:	f100 0c01 	add.w	ip, r0, #1
 8022e4e:	9a07      	ldr	r2, [sp, #28]
 8022e50:	4562      	cmp	r2, ip
 8022e52:	f340 8112 	ble.w	802307a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8022e56:	2b00      	cmp	r3, #0
 8022e58:	f2c0 810f 	blt.w	802307a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8022e5c:	f103 0c01 	add.w	ip, r3, #1
 8022e60:	9a08      	ldr	r2, [sp, #32]
 8022e62:	4562      	cmp	r2, ip
 8022e64:	f340 8109 	ble.w	802307a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 8022e68:	fb03 030a 	mla	r3, r3, sl, r0
 8022e6c:	0858      	lsrs	r0, r3, #1
 8022e6e:	07da      	lsls	r2, r3, #31
 8022e70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022e72:	5c38      	ldrb	r0, [r7, r0]
 8022e74:	bf54      	ite	pl
 8022e76:	f000 000f 	andpl.w	r0, r0, #15
 8022e7a:	1100      	asrmi	r0, r0, #4
 8022e7c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022e80:	b2c0      	uxtb	r0, r0
 8022e82:	2a00      	cmp	r2, #0
 8022e84:	f000 80dd 	beq.w	8023042 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 8022e88:	f103 0e01 	add.w	lr, r3, #1
 8022e8c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8022e90:	f01e 0f01 	tst.w	lr, #1
 8022e94:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022e98:	bf0c      	ite	eq
 8022e9a:	f00c 0c0f 	andeq.w	ip, ip, #15
 8022e9e:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8022ea2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022ea6:	fa5f fc8c 	uxtb.w	ip, ip
 8022eaa:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8022eae:	b301      	cbz	r1, 8022ef2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8022eb0:	4453      	add	r3, sl
 8022eb2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022eb6:	07da      	lsls	r2, r3, #31
 8022eb8:	f103 0301 	add.w	r3, r3, #1
 8022ebc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022ec0:	bf54      	ite	pl
 8022ec2:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022ec6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022eca:	07da      	lsls	r2, r3, #31
 8022ecc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022ed0:	fa5f fc8c 	uxtb.w	ip, ip
 8022ed4:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 8022ed8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022edc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022ee0:	bf54      	ite	pl
 8022ee2:	f00c 030f 	andpl.w	r3, ip, #15
 8022ee6:	ea4f 132c 	movmi.w	r3, ip, asr #4
 8022eea:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022eee:	b2db      	uxtb	r3, r3
 8022ef0:	9310      	str	r3, [sp, #64]	; 0x40
 8022ef2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8022ef6:	b289      	uxth	r1, r1
 8022ef8:	fb02 f301 	mul.w	r3, r2, r1
 8022efc:	0112      	lsls	r2, r2, #4
 8022efe:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8022f02:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8022f06:	1ad2      	subs	r2, r2, r3
 8022f08:	fa1f fe81 	uxth.w	lr, r1
 8022f0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022f0e:	b292      	uxth	r2, r2
 8022f10:	ebac 0c0e 	sub.w	ip, ip, lr
 8022f14:	434a      	muls	r2, r1
 8022f16:	fa1f fc8c 	uxth.w	ip, ip
 8022f1a:	fb00 200c 	mla	r0, r0, ip, r2
 8022f1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022f20:	fb0e 0002 	mla	r0, lr, r2, r0
 8022f24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022f26:	fb03 0002 	mla	r0, r3, r2, r0
 8022f2a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022f2e:	b3a8      	cbz	r0, 8022f9c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8022f30:	4bbb      	ldr	r3, [pc, #748]	; (8023220 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 8022f32:	28ff      	cmp	r0, #255	; 0xff
 8022f34:	681b      	ldr	r3, [r3, #0]
 8022f36:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8022f3a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8022f3e:	b2db      	uxtb	r3, r3
 8022f40:	f000 8092 	beq.w	8023068 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 8022f44:	b282      	uxth	r2, r0
 8022f46:	43c0      	mvns	r0, r0
 8022f48:	f899 e000 	ldrb.w	lr, [r9]
 8022f4c:	fb13 f302 	smulbb	r3, r3, r2
 8022f50:	b2c0      	uxtb	r0, r0
 8022f52:	fb11 f102 	smulbb	r1, r1, r2
 8022f56:	fb0e 3300 	mla	r3, lr, r0, r3
 8022f5a:	fb1c f202 	smulbb	r2, ip, r2
 8022f5e:	b29b      	uxth	r3, r3
 8022f60:	f103 0e01 	add.w	lr, r3, #1
 8022f64:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8022f68:	121b      	asrs	r3, r3, #8
 8022f6a:	f889 3000 	strb.w	r3, [r9]
 8022f6e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8022f72:	fb03 1100 	mla	r1, r3, r0, r1
 8022f76:	b289      	uxth	r1, r1
 8022f78:	1c4b      	adds	r3, r1, #1
 8022f7a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8022f7e:	f899 3002 	ldrb.w	r3, [r9, #2]
 8022f82:	fb03 2000 	mla	r0, r3, r0, r2
 8022f86:	1209      	asrs	r1, r1, #8
 8022f88:	b280      	uxth	r0, r0
 8022f8a:	f889 1001 	strb.w	r1, [r9, #1]
 8022f8e:	f100 0c01 	add.w	ip, r0, #1
 8022f92:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 8022f96:	1200      	asrs	r0, r0, #8
 8022f98:	f889 0002 	strb.w	r0, [r9, #2]
 8022f9c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022f9e:	f109 0903 	add.w	r9, r9, #3
 8022fa2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022fa6:	441d      	add	r5, r3
 8022fa8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022faa:	441e      	add	r6, r3
 8022fac:	e740      	b.n	8022e30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 8022fae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8022fb0:	3c01      	subs	r4, #1
 8022fb2:	f108 0803 	add.w	r8, r8, #3
 8022fb6:	441d      	add	r5, r3
 8022fb8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022fba:	441e      	add	r6, r3
 8022fbc:	e6f3      	b.n	8022da6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8022fbe:	f47f af03 	bne.w	8022dc8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8022fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022fc4:	2b00      	cmp	r3, #0
 8022fc6:	f340 8126 	ble.w	8023216 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 8022fca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022fce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022fd0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022fd4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022fd8:	eef0 6a48 	vmov.f32	s13, s16
 8022fdc:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022fe0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022fe4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022fe8:	ee16 5a90 	vmov	r5, s13
 8022fec:	eef0 6a68 	vmov.f32	s13, s17
 8022ff0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022ff4:	ee16 6a90 	vmov	r6, s13
 8022ff8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022ffc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023000:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023004:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023008:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802300c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023010:	ee18 2a10 	vmov	r2, s16
 8023014:	eeb0 8a47 	vmov.f32	s16, s14
 8023018:	fb92 f3f3 	sdiv	r3, r2, r3
 802301c:	ee18 2a90 	vmov	r2, s17
 8023020:	9329      	str	r3, [sp, #164]	; 0xa4
 8023022:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023024:	eef0 8a67 	vmov.f32	s17, s15
 8023028:	fb92 f3f3 	sdiv	r3, r2, r3
 802302c:	932a      	str	r3, [sp, #168]	; 0xa8
 802302e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023030:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023032:	3b01      	subs	r3, #1
 8023034:	9309      	str	r3, [sp, #36]	; 0x24
 8023036:	bf08      	it	eq
 8023038:	4614      	moveq	r4, r2
 802303a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802303c:	bf18      	it	ne
 802303e:	461c      	movne	r4, r3
 8023040:	e6aa      	b.n	8022d98 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8023042:	2900      	cmp	r1, #0
 8023044:	f43f af55 	beq.w	8022ef2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023048:	4453      	add	r3, sl
 802304a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802304e:	07db      	lsls	r3, r3, #31
 8023050:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023054:	bf54      	ite	pl
 8023056:	f00c 030f 	andpl.w	r3, ip, #15
 802305a:	ea4f 132c 	movmi.w	r3, ip, asr #4
 802305e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023062:	b2db      	uxtb	r3, r3
 8023064:	930c      	str	r3, [sp, #48]	; 0x30
 8023066:	e744      	b.n	8022ef2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 8023068:	f889 3000 	strb.w	r3, [r9]
 802306c:	f889 1001 	strb.w	r1, [r9, #1]
 8023070:	f889 c002 	strb.w	ip, [r9, #2]
 8023074:	e792      	b.n	8022f9c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023076:	1c42      	adds	r2, r0, #1
 8023078:	d190      	bne.n	8022f9c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802307a:	9a07      	ldr	r2, [sp, #28]
 802307c:	4282      	cmp	r2, r0
 802307e:	dd8d      	ble.n	8022f9c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023080:	1c5a      	adds	r2, r3, #1
 8023082:	db8b      	blt.n	8022f9c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8023084:	9a08      	ldr	r2, [sp, #32]
 8023086:	429a      	cmp	r2, r3
 8023088:	dd88      	ble.n	8022f9c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 802308a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802308c:	9105      	str	r1, [sp, #20]
 802308e:	4649      	mov	r1, r9
 8023090:	9002      	str	r0, [sp, #8]
 8023092:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023094:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8023098:	9b08      	ldr	r3, [sp, #32]
 802309a:	463a      	mov	r2, r7
 802309c:	9301      	str	r3, [sp, #4]
 802309e:	9b07      	ldr	r3, [sp, #28]
 80230a0:	9300      	str	r3, [sp, #0]
 80230a2:	4653      	mov	r3, sl
 80230a4:	f7ff fd64 	bl	8022b70 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80230a8:	e778      	b.n	8022f9c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80230aa:	142a      	asrs	r2, r5, #16
 80230ac:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80230b0:	1433      	asrs	r3, r6, #16
 80230b2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80230b6:	fb0a 2303 	mla	r3, sl, r3, r2
 80230ba:	085a      	lsrs	r2, r3, #1
 80230bc:	07d9      	lsls	r1, r3, #31
 80230be:	5cba      	ldrb	r2, [r7, r2]
 80230c0:	bf54      	ite	pl
 80230c2:	f002 020f 	andpl.w	r2, r2, #15
 80230c6:	1112      	asrmi	r2, r2, #4
 80230c8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80230cc:	b2d2      	uxtb	r2, r2
 80230ce:	2800      	cmp	r0, #0
 80230d0:	f000 808a 	beq.w	80231e8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 80230d4:	f103 0b01 	add.w	fp, r3, #1
 80230d8:	ea4f 015b 	mov.w	r1, fp, lsr #1
 80230dc:	f01b 0f01 	tst.w	fp, #1
 80230e0:	5c79      	ldrb	r1, [r7, r1]
 80230e2:	bf0c      	ite	eq
 80230e4:	f001 010f 	andeq.w	r1, r1, #15
 80230e8:	1109      	asrne	r1, r1, #4
 80230ea:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80230ee:	b2c9      	uxtb	r1, r1
 80230f0:	9111      	str	r1, [sp, #68]	; 0x44
 80230f2:	f1bc 0f00 	cmp.w	ip, #0
 80230f6:	d019      	beq.n	802312c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80230f8:	4453      	add	r3, sl
 80230fa:	0859      	lsrs	r1, r3, #1
 80230fc:	f013 0f01 	tst.w	r3, #1
 8023100:	f103 0301 	add.w	r3, r3, #1
 8023104:	5c79      	ldrb	r1, [r7, r1]
 8023106:	bf0c      	ite	eq
 8023108:	f001 010f 	andeq.w	r1, r1, #15
 802310c:	1109      	asrne	r1, r1, #4
 802310e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023112:	b2c9      	uxtb	r1, r1
 8023114:	910d      	str	r1, [sp, #52]	; 0x34
 8023116:	0859      	lsrs	r1, r3, #1
 8023118:	07db      	lsls	r3, r3, #31
 802311a:	5c79      	ldrb	r1, [r7, r1]
 802311c:	bf54      	ite	pl
 802311e:	f001 010f 	andpl.w	r1, r1, #15
 8023122:	1109      	asrmi	r1, r1, #4
 8023124:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023128:	b2c9      	uxtb	r1, r1
 802312a:	9112      	str	r1, [sp, #72]	; 0x48
 802312c:	b280      	uxth	r0, r0
 802312e:	fa1f fc8c 	uxth.w	ip, ip
 8023132:	fb00 f30c 	mul.w	r3, r0, ip
 8023136:	0100      	lsls	r0, r0, #4
 8023138:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802313c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8023140:	1ac0      	subs	r0, r0, r3
 8023142:	fa1f fc8c 	uxth.w	ip, ip
 8023146:	b280      	uxth	r0, r0
 8023148:	eba1 010c 	sub.w	r1, r1, ip
 802314c:	fa1f fb81 	uxth.w	fp, r1
 8023150:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023152:	4348      	muls	r0, r1
 8023154:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023156:	fb02 020b 	mla	r2, r2, fp, r0
 802315a:	fb0c 2c01 	mla	ip, ip, r1, r2
 802315e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023160:	fb03 c302 	mla	r3, r3, r2, ip
 8023164:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023168:	b3ab      	cbz	r3, 80231d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 802316a:	4a2d      	ldr	r2, [pc, #180]	; (8023220 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 802316c:	2bff      	cmp	r3, #255	; 0xff
 802316e:	6811      	ldr	r1, [r2, #0]
 8023170:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8023174:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8023178:	b2c9      	uxtb	r1, r1
 802317a:	d045      	beq.n	8023208 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 802317c:	b298      	uxth	r0, r3
 802317e:	43db      	mvns	r3, r3
 8023180:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 8023184:	fb11 f100 	smulbb	r1, r1, r0
 8023188:	b2db      	uxtb	r3, r3
 802318a:	fb1c fc00 	smulbb	ip, ip, r0
 802318e:	fb02 1103 	mla	r1, r2, r3, r1
 8023192:	fb1b f000 	smulbb	r0, fp, r0
 8023196:	b289      	uxth	r1, r1
 8023198:	1c4a      	adds	r2, r1, #1
 802319a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802319e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80231a2:	fb02 cc03 	mla	ip, r2, r3, ip
 80231a6:	1209      	asrs	r1, r1, #8
 80231a8:	fa1f fc8c 	uxth.w	ip, ip
 80231ac:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80231b0:	f10c 0201 	add.w	r2, ip, #1
 80231b4:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80231b8:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 80231bc:	fb02 0303 	mla	r3, r2, r3, r0
 80231c0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80231c4:	b29b      	uxth	r3, r3
 80231c6:	f80e cc02 	strb.w	ip, [lr, #-2]
 80231ca:	1c5a      	adds	r2, r3, #1
 80231cc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80231d0:	121b      	asrs	r3, r3, #8
 80231d2:	f80e 3c01 	strb.w	r3, [lr, #-1]
 80231d6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80231d8:	f10e 0e03 	add.w	lr, lr, #3
 80231dc:	f109 39ff 	add.w	r9, r9, #4294967295
 80231e0:	441d      	add	r5, r3
 80231e2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80231e4:	441e      	add	r6, r3
 80231e6:	e607      	b.n	8022df8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 80231e8:	f1bc 0f00 	cmp.w	ip, #0
 80231ec:	d09e      	beq.n	802312c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 80231ee:	4453      	add	r3, sl
 80231f0:	0859      	lsrs	r1, r3, #1
 80231f2:	07db      	lsls	r3, r3, #31
 80231f4:	5c79      	ldrb	r1, [r7, r1]
 80231f6:	bf54      	ite	pl
 80231f8:	f001 010f 	andpl.w	r1, r1, #15
 80231fc:	1109      	asrmi	r1, r1, #4
 80231fe:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023202:	b2c9      	uxtb	r1, r1
 8023204:	910d      	str	r1, [sp, #52]	; 0x34
 8023206:	e791      	b.n	802312c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8023208:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802320c:	f80e cc02 	strb.w	ip, [lr, #-2]
 8023210:	f80e bc01 	strb.w	fp, [lr, #-1]
 8023214:	e7df      	b.n	80231d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8023216:	b015      	add	sp, #84	; 0x54
 8023218:	ecbd 8b08 	vpop	{d8-d11}
 802321c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023220:	2000b2fc 	.word	0x2000b2fc

08023224 <CRC_Lock>:
 8023224:	4a1d      	ldr	r2, [pc, #116]	; (802329c <CRC_Lock+0x78>)
 8023226:	b530      	push	{r4, r5, lr}
 8023228:	6813      	ldr	r3, [r2, #0]
 802322a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802322e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8023232:	f023 0301 	bic.w	r3, r3, #1
 8023236:	6013      	str	r3, [r2, #0]
 8023238:	4b19      	ldr	r3, [pc, #100]	; (80232a0 <CRC_Lock+0x7c>)
 802323a:	681a      	ldr	r2, [r3, #0]
 802323c:	4022      	ands	r2, r4
 802323e:	42aa      	cmp	r2, r5
 8023240:	d005      	beq.n	802324e <CRC_Lock+0x2a>
 8023242:	681b      	ldr	r3, [r3, #0]
 8023244:	f24c 2270 	movw	r2, #49776	; 0xc270
 8023248:	4023      	ands	r3, r4
 802324a:	4293      	cmp	r3, r2
 802324c:	d11d      	bne.n	802328a <CRC_Lock+0x66>
 802324e:	4b15      	ldr	r3, [pc, #84]	; (80232a4 <CRC_Lock+0x80>)
 8023250:	681b      	ldr	r3, [r3, #0]
 8023252:	b9d3      	cbnz	r3, 802328a <CRC_Lock+0x66>
 8023254:	4a14      	ldr	r2, [pc, #80]	; (80232a8 <CRC_Lock+0x84>)
 8023256:	6813      	ldr	r3, [r2, #0]
 8023258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802325c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8023260:	d006      	beq.n	8023270 <CRC_Lock+0x4c>
 8023262:	6813      	ldr	r3, [r2, #0]
 8023264:	f240 4283 	movw	r2, #1155	; 0x483
 8023268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802326c:	4293      	cmp	r3, r2
 802326e:	d10c      	bne.n	802328a <CRC_Lock+0x66>
 8023270:	4b0e      	ldr	r3, [pc, #56]	; (80232ac <CRC_Lock+0x88>)
 8023272:	2201      	movs	r2, #1
 8023274:	601a      	str	r2, [r3, #0]
 8023276:	681a      	ldr	r2, [r3, #0]
 8023278:	2a00      	cmp	r2, #0
 802327a:	d1fc      	bne.n	8023276 <CRC_Lock+0x52>
 802327c:	4b0c      	ldr	r3, [pc, #48]	; (80232b0 <CRC_Lock+0x8c>)
 802327e:	6018      	str	r0, [r3, #0]
 8023280:	6818      	ldr	r0, [r3, #0]
 8023282:	1a43      	subs	r3, r0, r1
 8023284:	4258      	negs	r0, r3
 8023286:	4158      	adcs	r0, r3
 8023288:	bd30      	pop	{r4, r5, pc}
 802328a:	4b0a      	ldr	r3, [pc, #40]	; (80232b4 <CRC_Lock+0x90>)
 802328c:	2201      	movs	r2, #1
 802328e:	601a      	str	r2, [r3, #0]
 8023290:	681a      	ldr	r2, [r3, #0]
 8023292:	2a00      	cmp	r2, #0
 8023294:	d1fc      	bne.n	8023290 <CRC_Lock+0x6c>
 8023296:	4b08      	ldr	r3, [pc, #32]	; (80232b8 <CRC_Lock+0x94>)
 8023298:	e7f1      	b.n	802327e <CRC_Lock+0x5a>
 802329a:	bf00      	nop
 802329c:	e0002000 	.word	0xe0002000
 80232a0:	e000ed00 	.word	0xe000ed00
 80232a4:	e0042000 	.word	0xe0042000
 80232a8:	5c001000 	.word	0x5c001000
 80232ac:	58024c08 	.word	0x58024c08
 80232b0:	58024c00 	.word	0x58024c00
 80232b4:	40023008 	.word	0x40023008
 80232b8:	40023000 	.word	0x40023000

080232bc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80232bc:	6101      	str	r1, [r0, #16]
 80232be:	4770      	bx	lr

080232c0 <_ZN8touchgfx8Gestures4tickEv>:
 80232c0:	7b83      	ldrb	r3, [r0, #14]
 80232c2:	b14b      	cbz	r3, 80232d8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80232c4:	8903      	ldrh	r3, [r0, #8]
 80232c6:	3301      	adds	r3, #1
 80232c8:	b29b      	uxth	r3, r3
 80232ca:	2b07      	cmp	r3, #7
 80232cc:	8103      	strh	r3, [r0, #8]
 80232ce:	bf81      	itttt	hi
 80232d0:	2300      	movhi	r3, #0
 80232d2:	8143      	strhhi	r3, [r0, #10]
 80232d4:	8183      	strhhi	r3, [r0, #12]
 80232d6:	7383      	strbhi	r3, [r0, #14]
 80232d8:	4770      	bx	lr
	...

080232dc <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80232dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80232e0:	4604      	mov	r4, r0
 80232e2:	4698      	mov	r8, r3
 80232e4:	8880      	ldrh	r0, [r0, #4]
 80232e6:	4617      	mov	r7, r2
 80232e8:	4b1d      	ldr	r3, [pc, #116]	; (8023360 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 80232ea:	460e      	mov	r6, r1
 80232ec:	f8ad 0006 	strh.w	r0, [sp, #6]
 80232f0:	eba8 0000 	sub.w	r0, r8, r0
 80232f4:	9300      	str	r3, [sp, #0]
 80232f6:	2300      	movs	r3, #0
 80232f8:	b280      	uxth	r0, r0
 80232fa:	8aa2      	ldrh	r2, [r4, #20]
 80232fc:	f88d 3004 	strb.w	r3, [sp, #4]
 8023300:	b203      	sxth	r3, r0
 8023302:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8023306:	88e1      	ldrh	r1, [r4, #6]
 8023308:	2b00      	cmp	r3, #0
 802330a:	f8ad 800a 	strh.w	r8, [sp, #10]
 802330e:	f8ad 1008 	strh.w	r1, [sp, #8]
 8023312:	bfb8      	it	lt
 8023314:	4240      	neglt	r0, r0
 8023316:	f8ad 500c 	strh.w	r5, [sp, #12]
 802331a:	bfb8      	it	lt
 802331c:	b203      	sxthlt	r3, r0
 802331e:	4293      	cmp	r3, r2
 8023320:	dc08      	bgt.n	8023334 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8023322:	1a69      	subs	r1, r5, r1
 8023324:	b289      	uxth	r1, r1
 8023326:	b20b      	sxth	r3, r1
 8023328:	2b00      	cmp	r3, #0
 802332a:	bfbc      	itt	lt
 802332c:	4249      	neglt	r1, r1
 802332e:	b20b      	sxthlt	r3, r1
 8023330:	429a      	cmp	r2, r3
 8023332:	da13      	bge.n	802335c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8023334:	6920      	ldr	r0, [r4, #16]
 8023336:	4669      	mov	r1, sp
 8023338:	eba8 0606 	sub.w	r6, r8, r6
 802333c:	1bef      	subs	r7, r5, r7
 802333e:	6803      	ldr	r3, [r0, #0]
 8023340:	685b      	ldr	r3, [r3, #4]
 8023342:	4798      	blx	r3
 8023344:	2300      	movs	r3, #0
 8023346:	2001      	movs	r0, #1
 8023348:	8166      	strh	r6, [r4, #10]
 802334a:	8123      	strh	r3, [r4, #8]
 802334c:	81a7      	strh	r7, [r4, #12]
 802334e:	f8a4 8004 	strh.w	r8, [r4, #4]
 8023352:	80e5      	strh	r5, [r4, #6]
 8023354:	73a0      	strb	r0, [r4, #14]
 8023356:	b004      	add	sp, #16
 8023358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802335c:	2000      	movs	r0, #0
 802335e:	e7fa      	b.n	8023356 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8023360:	0802a8a8 	.word	0x0802a8a8

08023364 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8023364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023366:	461e      	mov	r6, r3
 8023368:	1e4b      	subs	r3, r1, #1
 802336a:	b085      	sub	sp, #20
 802336c:	4604      	mov	r4, r0
 802336e:	2b01      	cmp	r3, #1
 8023370:	460d      	mov	r5, r1
 8023372:	4617      	mov	r7, r2
 8023374:	d84b      	bhi.n	802340e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8023376:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802337a:	1cd3      	adds	r3, r2, #3
 802337c:	b29b      	uxth	r3, r3
 802337e:	2b06      	cmp	r3, #6
 8023380:	d916      	bls.n	80233b0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8023382:	f8df c098 	ldr.w	ip, [pc, #152]	; 802341c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 8023386:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802338a:	f8cd c004 	str.w	ip, [sp, #4]
 802338e:	f04f 0c00 	mov.w	ip, #0
 8023392:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023396:	6900      	ldr	r0, [r0, #16]
 8023398:	f8ad 100c 	strh.w	r1, [sp, #12]
 802339c:	a901      	add	r1, sp, #4
 802339e:	f88d c008 	strb.w	ip, [sp, #8]
 80233a2:	f8ad 200a 	strh.w	r2, [sp, #10]
 80233a6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80233aa:	6803      	ldr	r3, [r0, #0]
 80233ac:	689b      	ldr	r3, [r3, #8]
 80233ae:	4798      	blx	r3
 80233b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80233b4:	1cd3      	adds	r3, r2, #3
 80233b6:	b29b      	uxth	r3, r3
 80233b8:	2b06      	cmp	r3, #6
 80233ba:	d916      	bls.n	80233ea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80233bc:	f8df c05c 	ldr.w	ip, [pc, #92]	; 802341c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 80233c0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80233c4:	f8cd c004 	str.w	ip, [sp, #4]
 80233c8:	f04f 0c01 	mov.w	ip, #1
 80233cc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80233d0:	6920      	ldr	r0, [r4, #16]
 80233d2:	f8ad 100c 	strh.w	r1, [sp, #12]
 80233d6:	a901      	add	r1, sp, #4
 80233d8:	f88d c008 	strb.w	ip, [sp, #8]
 80233dc:	f8ad 200a 	strh.w	r2, [sp, #10]
 80233e0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80233e4:	6803      	ldr	r3, [r0, #0]
 80233e6:	689b      	ldr	r3, [r3, #8]
 80233e8:	4798      	blx	r3
 80233ea:	4b0b      	ldr	r3, [pc, #44]	; (8023418 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 80233ec:	a901      	add	r1, sp, #4
 80233ee:	6920      	ldr	r0, [r4, #16]
 80233f0:	9301      	str	r3, [sp, #4]
 80233f2:	2300      	movs	r3, #0
 80233f4:	f88d 5008 	strb.w	r5, [sp, #8]
 80233f8:	f8ad 700a 	strh.w	r7, [sp, #10]
 80233fc:	f8ad 600c 	strh.w	r6, [sp, #12]
 8023400:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023404:	6803      	ldr	r3, [r0, #0]
 8023406:	681b      	ldr	r3, [r3, #0]
 8023408:	4798      	blx	r3
 802340a:	b005      	add	sp, #20
 802340c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802340e:	2900      	cmp	r1, #0
 8023410:	d1eb      	bne.n	80233ea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023412:	80a2      	strh	r2, [r4, #4]
 8023414:	80c6      	strh	r6, [r0, #6]
 8023416:	e7e8      	b.n	80233ea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023418:	0802a894 	.word	0x0802a894
 802341c:	0802a8bc 	.word	0x0802a8bc

08023420 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 8023420:	10c9      	asrs	r1, r1, #3
 8023422:	2900      	cmp	r1, #0
 8023424:	bfb8      	it	lt
 8023426:	4249      	neglt	r1, r1
 8023428:	2801      	cmp	r0, #1
 802342a:	d108      	bne.n	802343e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 802342c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8023430:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8023434:	4601      	mov	r1, r0
 8023436:	dd02      	ble.n	802343e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8023438:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 802343c:	4770      	bx	lr
 802343e:	29ff      	cmp	r1, #255	; 0xff
 8023440:	bfa8      	it	ge
 8023442:	21ff      	movge	r1, #255	; 0xff
 8023444:	4608      	mov	r0, r1
 8023446:	4770      	bx	lr

08023448 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8023448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802344c:	688c      	ldr	r4, [r1, #8]
 802344e:	b087      	sub	sp, #28
 8023450:	4607      	mov	r7, r0
 8023452:	2c00      	cmp	r4, #0
 8023454:	db2b      	blt.n	80234ae <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 8023456:	6803      	ldr	r3, [r0, #0]
 8023458:	68da      	ldr	r2, [r3, #12]
 802345a:	42a2      	cmp	r2, r4
 802345c:	dd27      	ble.n	80234ae <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 802345e:	681a      	ldr	r2, [r3, #0]
 8023460:	691e      	ldr	r6, [r3, #16]
 8023462:	68cd      	ldr	r5, [r1, #12]
 8023464:	fb06 2604 	mla	r6, r6, r4, r2
 8023468:	f8d1 901c 	ldr.w	r9, [r1, #28]
 802346c:	698a      	ldr	r2, [r1, #24]
 802346e:	f893 a004 	ldrb.w	sl, [r3, #4]
 8023472:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8023476:	9205      	str	r2, [sp, #20]
 8023478:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 802347c:	9b05      	ldr	r3, [sp, #20]
 802347e:	6839      	ldr	r1, [r7, #0]
 8023480:	eb03 0c02 	add.w	ip, r3, r2
 8023484:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 8023488:	6889      	ldr	r1, [r1, #8]
 802348a:	1898      	adds	r0, r3, r2
 802348c:	4288      	cmp	r0, r1
 802348e:	db02      	blt.n	8023496 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 8023490:	1a8b      	subs	r3, r1, r2
 8023492:	2b00      	cmp	r3, #0
 8023494:	dd09      	ble.n	80234aa <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 8023496:	6878      	ldr	r0, [r7, #4]
 8023498:	6801      	ldr	r1, [r0, #0]
 802349a:	9400      	str	r4, [sp, #0]
 802349c:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 80234a0:	4653      	mov	r3, sl
 80234a2:	f8d1 b008 	ldr.w	fp, [r1, #8]
 80234a6:	4631      	mov	r1, r6
 80234a8:	47d8      	blx	fp
 80234aa:	3d01      	subs	r5, #1
 80234ac:	d1e4      	bne.n	8023478 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 80234ae:	b007      	add	sp, #28
 80234b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080234b4 <_ZN8touchgfx10Rasterizer6lineToEii>:
 80234b4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80234b8:	b90b      	cbnz	r3, 80234be <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 80234ba:	f001 b974 	b.w	80247a6 <_ZN8touchgfx7Outline6lineToEii>
 80234be:	4770      	bx	lr

080234c0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 80234c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80234c4:	4604      	mov	r4, r0
 80234c6:	2600      	movs	r6, #0
 80234c8:	4b8e      	ldr	r3, [pc, #568]	; (8023704 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 80234ca:	f100 0518 	add.w	r5, r0, #24
 80234ce:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 80234d2:	b086      	sub	sp, #24
 80234d4:	4690      	mov	r8, r2
 80234d6:	e9c0 3100 	strd	r3, r1, [r0]
 80234da:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80234de:	e9c0 6604 	strd	r6, r6, [r0, #16]
 80234e2:	4628      	mov	r0, r5
 80234e4:	f001 fb75 	bl	8024bd2 <_ZN8touchgfx15RenderingBufferC1Ev>
 80234e8:	4638      	mov	r0, r7
 80234ea:	f000 fb45 	bl	8023b78 <_ZN8touchgfx7OutlineC1Ev>
 80234ee:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80234f2:	f001 fb23 	bl	8024b3c <_ZN8touchgfx8ScanlineC1Ev>
 80234f6:	2301      	movs	r3, #1
 80234f8:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 80234fc:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 8023500:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023504:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 8023508:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 802350c:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 8023510:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 8023514:	f7f4 fc80 	bl	8017e18 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8023518:	b928      	cbnz	r0, 8023526 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 802351a:	4b7b      	ldr	r3, [pc, #492]	; (8023708 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 802351c:	2118      	movs	r1, #24
 802351e:	4a7b      	ldr	r2, [pc, #492]	; (802370c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8023520:	487b      	ldr	r0, [pc, #492]	; (8023710 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 8023522:	f001 fb99 	bl	8024c58 <__assert_func>
 8023526:	f9b8 2000 	ldrsh.w	r2, [r8]
 802352a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802352e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8023532:	4410      	add	r0, r2
 8023534:	9602      	str	r6, [sp, #8]
 8023536:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802353a:	b280      	uxth	r0, r0
 802353c:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8023540:	fa0f fa80 	sxth.w	sl, r0
 8023544:	f1ba 0f00 	cmp.w	sl, #0
 8023548:	dd70      	ble.n	802362c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 802354a:	4591      	cmp	r9, r2
 802354c:	dd6e      	ble.n	802362c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 802354e:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8023552:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8023556:	440b      	add	r3, r1
 8023558:	b29b      	uxth	r3, r3
 802355a:	b21e      	sxth	r6, r3
 802355c:	2e00      	cmp	r6, #0
 802355e:	dd65      	ble.n	802362c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8023560:	458e      	cmp	lr, r1
 8023562:	dd63      	ble.n	802362c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8023564:	45d1      	cmp	r9, sl
 8023566:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802356a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802356e:	bfb8      	it	lt
 8023570:	fa1f f089 	uxthlt.w	r0, r9
 8023574:	45b6      	cmp	lr, r6
 8023576:	f8ad 2008 	strh.w	r2, [sp, #8]
 802357a:	bfb8      	it	lt
 802357c:	fa1f f38e 	uxthlt.w	r3, lr
 8023580:	1a80      	subs	r0, r0, r2
 8023582:	f8ad 100a 	strh.w	r1, [sp, #10]
 8023586:	1a5b      	subs	r3, r3, r1
 8023588:	f8ad 000c 	strh.w	r0, [sp, #12]
 802358c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023590:	f10d 0808 	add.w	r8, sp, #8
 8023594:	ae04      	add	r6, sp, #16
 8023596:	e898 0003 	ldmia.w	r8, {r0, r1}
 802359a:	e886 0003 	stmia.w	r6, {r0, r1}
 802359e:	f8dc 3000 	ldr.w	r3, [ip]
 80235a2:	4660      	mov	r0, ip
 80235a4:	4631      	mov	r1, r6
 80235a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80235a8:	4798      	blx	r3
 80235aa:	6861      	ldr	r1, [r4, #4]
 80235ac:	4640      	mov	r0, r8
 80235ae:	3104      	adds	r1, #4
 80235b0:	f7f5 faa0 	bl	8018af4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80235b4:	4630      	mov	r0, r6
 80235b6:	f7f5 fab5 	bl	8018b24 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80235ba:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 80235be:	f7f4 fbbb 	bl	8017d38 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 80235c2:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 80235c6:	4638      	mov	r0, r7
 80235c8:	f000 fab2 	bl	8023b30 <_ZN8touchgfx7Outline5resetEv>
 80235cc:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80235d0:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80235d4:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 80235d8:	015b      	lsls	r3, r3, #5
 80235da:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 80235de:	0152      	lsls	r2, r2, #5
 80235e0:	60e3      	str	r3, [r4, #12]
 80235e2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80235e6:	60a2      	str	r2, [r4, #8]
 80235e8:	015b      	lsls	r3, r3, #5
 80235ea:	6123      	str	r3, [r4, #16]
 80235ec:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80235f0:	015b      	lsls	r3, r3, #5
 80235f2:	6163      	str	r3, [r4, #20]
 80235f4:	4b47      	ldr	r3, [pc, #284]	; (8023714 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 80235f6:	6818      	ldr	r0, [r3, #0]
 80235f8:	6803      	ldr	r3, [r0, #0]
 80235fa:	6a1b      	ldr	r3, [r3, #32]
 80235fc:	4798      	blx	r3
 80235fe:	4606      	mov	r6, r0
 8023600:	f7e6 fd18 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8023604:	6803      	ldr	r3, [r0, #0]
 8023606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023608:	4798      	blx	r3
 802360a:	4607      	mov	r7, r0
 802360c:	f7e6 fd12 	bl	800a034 <_ZN8touchgfx3HAL3lcdEv>
 8023610:	6803      	ldr	r3, [r0, #0]
 8023612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023614:	4798      	blx	r3
 8023616:	280c      	cmp	r0, #12
 8023618:	d854      	bhi.n	80236c4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 802361a:	e8df f000 	tbb	[pc, r0]
 802361e:	554b      	.short	0x554b
 8023620:	2b6e0a66 	.word	0x2b6e0a66
 8023624:	5f5f5f3b 	.word	0x5f5f5f3b
 8023628:	5f5f      	.short	0x5f5f
 802362a:	6e          	.byte	0x6e
 802362b:	00          	.byte	0x00
 802362c:	2300      	movs	r3, #0
 802362e:	9303      	str	r3, [sp, #12]
 8023630:	e7ae      	b.n	8023590 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 8023632:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023636:	2108      	movs	r1, #8
 8023638:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802363c:	fb92 f1f1 	sdiv	r1, r2, r1
 8023640:	fb07 1303 	mla	r3, r7, r3, r1
 8023644:	441e      	add	r6, r3
 8023646:	4253      	negs	r3, r2
 8023648:	f002 0207 	and.w	r2, r2, #7
 802364c:	f003 0307 	and.w	r3, r3, #7
 8023650:	bf58      	it	pl
 8023652:	425a      	negpl	r2, r3
 8023654:	b2d2      	uxtb	r2, r2
 8023656:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 802365a:	4628      	mov	r0, r5
 802365c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8023660:	66e1      	str	r1, [r4, #108]	; 0x6c
 8023662:	e9cd 1700 	strd	r1, r7, [sp]
 8023666:	4631      	mov	r1, r6
 8023668:	f001 fabb 	bl	8024be2 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 802366c:	4620      	mov	r0, r4
 802366e:	b006      	add	sp, #24
 8023670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023674:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023678:	2104      	movs	r1, #4
 802367a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802367e:	fb92 f1f1 	sdiv	r1, r2, r1
 8023682:	fb07 1303 	mla	r3, r7, r3, r1
 8023686:	441e      	add	r6, r3
 8023688:	4253      	negs	r3, r2
 802368a:	f002 0203 	and.w	r2, r2, #3
 802368e:	f003 0303 	and.w	r3, r3, #3
 8023692:	e7dd      	b.n	8023650 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 8023694:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023698:	2102      	movs	r1, #2
 802369a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802369e:	2a00      	cmp	r2, #0
 80236a0:	fb92 f1f1 	sdiv	r1, r2, r1
 80236a4:	f002 0201 	and.w	r2, r2, #1
 80236a8:	fb07 1303 	mla	r3, r7, r3, r1
 80236ac:	bfb8      	it	lt
 80236ae:	4252      	neglt	r2, r2
 80236b0:	441e      	add	r6, r3
 80236b2:	e7cf      	b.n	8023654 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 80236b4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80236b8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80236bc:	437b      	muls	r3, r7
 80236be:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80236c2:	441e      	add	r6, r3
 80236c4:	2200      	movs	r2, #0
 80236c6:	e7c6      	b.n	8023656 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 80236c8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80236cc:	2103      	movs	r1, #3
 80236ce:	fb07 f203 	mul.w	r2, r7, r3
 80236d2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80236d6:	fb13 2301 	smlabb	r3, r3, r1, r2
 80236da:	e7f2      	b.n	80236c2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 80236dc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80236e0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80236e4:	fb07 2303 	mla	r3, r7, r3, r2
 80236e8:	e7eb      	b.n	80236c2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 80236ea:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80236ee:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80236f2:	437b      	muls	r3, r7
 80236f4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80236f8:	e7e3      	b.n	80236c2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 80236fa:	4b07      	ldr	r3, [pc, #28]	; (8023718 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 80236fc:	2156      	movs	r1, #86	; 0x56
 80236fe:	4a03      	ldr	r2, [pc, #12]	; (802370c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 8023700:	e70e      	b.n	8023520 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 8023702:	bf00      	nop
 8023704:	0802be98 	.word	0x0802be98
 8023708:	0802bde2 	.word	0x0802bde2
 802370c:	0802bea0 	.word	0x0802bea0
 8023710:	0802be3e 	.word	0x0802be3e
 8023714:	2000b2d4 	.word	0x2000b2d4
 8023718:	0802be72 	.word	0x0802be72

0802371c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 802371c:	6812      	ldr	r2, [r2, #0]
 802371e:	2a00      	cmp	r2, #0
 8023720:	db0b      	blt.n	802373a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 8023722:	9800      	ldr	r0, [sp, #0]
 8023724:	6800      	ldr	r0, [r0, #0]
 8023726:	4290      	cmp	r0, r2
 8023728:	bfd4      	ite	le
 802372a:	2002      	movle	r0, #2
 802372c:	2000      	movgt	r0, #0
 802372e:	680a      	ldr	r2, [r1, #0]
 8023730:	2a00      	cmp	r2, #0
 8023732:	da04      	bge.n	802373e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8023734:	f040 0004 	orr.w	r0, r0, #4
 8023738:	4770      	bx	lr
 802373a:	2001      	movs	r0, #1
 802373c:	e7f7      	b.n	802372e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 802373e:	681b      	ldr	r3, [r3, #0]
 8023740:	4293      	cmp	r3, r2
 8023742:	bfd8      	it	le
 8023744:	f040 0008 	orrle.w	r0, r0, #8
 8023748:	4770      	bx	lr
	...

0802374c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802374c:	4b07      	ldr	r3, [pc, #28]	; (802376c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802374e:	b510      	push	{r4, lr}
 8023750:	781b      	ldrb	r3, [r3, #0]
 8023752:	2b01      	cmp	r3, #1
 8023754:	d108      	bne.n	8023768 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8023756:	6843      	ldr	r3, [r0, #4]
 8023758:	6814      	ldr	r4, [r2, #0]
 802375a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802375e:	680b      	ldr	r3, [r1, #0]
 8023760:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8023764:	6013      	str	r3, [r2, #0]
 8023766:	600c      	str	r4, [r1, #0]
 8023768:	bd10      	pop	{r4, pc}
 802376a:	bf00      	nop
 802376c:	2000b2cc 	.word	0x2000b2cc

08023770 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8023770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023772:	b085      	sub	sp, #20
 8023774:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8023778:	4604      	mov	r4, r0
 802377a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 802377e:	b33b      	cbz	r3, 80237d0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 8023780:	aa02      	add	r2, sp, #8
 8023782:	a903      	add	r1, sp, #12
 8023784:	f7ff ffe2 	bl	802374c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8023788:	68a3      	ldr	r3, [r4, #8]
 802378a:	9e03      	ldr	r6, [sp, #12]
 802378c:	aa02      	add	r2, sp, #8
 802378e:	9f02      	ldr	r7, [sp, #8]
 8023790:	a903      	add	r1, sp, #12
 8023792:	1af6      	subs	r6, r6, r3
 8023794:	68e3      	ldr	r3, [r4, #12]
 8023796:	4620      	mov	r0, r4
 8023798:	1aff      	subs	r7, r7, r3
 802379a:	f104 0314 	add.w	r3, r4, #20
 802379e:	9603      	str	r6, [sp, #12]
 80237a0:	9300      	str	r3, [sp, #0]
 80237a2:	f104 0310 	add.w	r3, r4, #16
 80237a6:	9702      	str	r7, [sp, #8]
 80237a8:	f7ff ffb8 	bl	802371c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80237ac:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 80237b0:	4605      	mov	r5, r0
 80237b2:	b97b      	cbnz	r3, 80237d4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 80237b4:	463a      	mov	r2, r7
 80237b6:	4631      	mov	r1, r6
 80237b8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80237bc:	f7ff fe7a 	bl	80234b4 <_ZN8touchgfx10Rasterizer6lineToEii>
 80237c0:	9b03      	ldr	r3, [sp, #12]
 80237c2:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 80237c6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 80237ca:	9b02      	ldr	r3, [sp, #8]
 80237cc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 80237d0:	b005      	add	sp, #20
 80237d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80237d4:	b110      	cbz	r0, 80237dc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 80237d6:	ea13 0200 	ands.w	r2, r3, r0
 80237da:	d11c      	bne.n	8023816 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 80237dc:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 80237e0:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 80237e4:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 80237e8:	b188      	cbz	r0, 802380e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 80237ea:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 80237ee:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 80237f2:	b913      	cbnz	r3, 80237fa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 80237f4:	4630      	mov	r0, r6
 80237f6:	f001 f806 	bl	8024806 <_ZN8touchgfx7Outline6moveToEii>
 80237fa:	2300      	movs	r3, #0
 80237fc:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023800:	2301      	movs	r3, #1
 8023802:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8023806:	4630      	mov	r0, r6
 8023808:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802380c:	e7d6      	b.n	80237bc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 802380e:	4630      	mov	r0, r6
 8023810:	f7ff fe50 	bl	80234b4 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023814:	e7f7      	b.n	8023806 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8023816:	4615      	mov	r5, r2
 8023818:	e7d2      	b.n	80237c0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0802381a <_ZN8touchgfx6Canvas5closeEv>:
 802381a:	b538      	push	{r3, r4, r5, lr}
 802381c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8023820:	4604      	mov	r4, r0
 8023822:	b993      	cbnz	r3, 802384a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8023824:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8023828:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 802382c:	4213      	tst	r3, r2
 802382e:	d10c      	bne.n	802384a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8023830:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 8023834:	b123      	cbz	r3, 8023840 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8023836:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 802383a:	4628      	mov	r0, r5
 802383c:	f7ff fe3a 	bl	80234b4 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023840:	4628      	mov	r0, r5
 8023842:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 8023846:	f7ff fe35 	bl	80234b4 <_ZN8touchgfx10Rasterizer6lineToEii>
 802384a:	2300      	movs	r3, #0
 802384c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8023850:	bd38      	pop	{r3, r4, r5, pc}

08023852 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8023852:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023854:	b085      	sub	sp, #20
 8023856:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 802385a:	4604      	mov	r4, r0
 802385c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8023860:	b353      	cbz	r3, 80238b8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 8023862:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8023866:	b90b      	cbnz	r3, 802386c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 8023868:	f7ff ffd7 	bl	802381a <_ZN8touchgfx6Canvas5closeEv>
 802386c:	aa02      	add	r2, sp, #8
 802386e:	a903      	add	r1, sp, #12
 8023870:	4620      	mov	r0, r4
 8023872:	f7ff ff6b 	bl	802374c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8023876:	68a3      	ldr	r3, [r4, #8]
 8023878:	9d03      	ldr	r5, [sp, #12]
 802387a:	aa02      	add	r2, sp, #8
 802387c:	9e02      	ldr	r6, [sp, #8]
 802387e:	a903      	add	r1, sp, #12
 8023880:	1aed      	subs	r5, r5, r3
 8023882:	68e3      	ldr	r3, [r4, #12]
 8023884:	4620      	mov	r0, r4
 8023886:	1af6      	subs	r6, r6, r3
 8023888:	f104 0314 	add.w	r3, r4, #20
 802388c:	9503      	str	r5, [sp, #12]
 802388e:	9300      	str	r3, [sp, #0]
 8023890:	f104 0310 	add.w	r3, r4, #16
 8023894:	9602      	str	r6, [sp, #8]
 8023896:	f7ff ff41 	bl	802371c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 802389a:	4607      	mov	r7, r0
 802389c:	b170      	cbz	r0, 80238bc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 802389e:	2301      	movs	r3, #1
 80238a0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80238a4:	9a03      	ldr	r2, [sp, #12]
 80238a6:	9b02      	ldr	r3, [sp, #8]
 80238a8:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 80238ac:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 80238b0:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 80238b4:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 80238b8:	b005      	add	sp, #20
 80238ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80238bc:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 80238c0:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 80238c4:	b92b      	cbnz	r3, 80238d2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 80238c6:	4632      	mov	r2, r6
 80238c8:	4629      	mov	r1, r5
 80238ca:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80238ce:	f000 ff9a 	bl	8024806 <_ZN8touchgfx7Outline6moveToEii>
 80238d2:	2300      	movs	r3, #0
 80238d4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80238d8:	2301      	movs	r3, #1
 80238da:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 80238de:	e7e1      	b.n	80238a4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

080238e0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 80238e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238e4:	4604      	mov	r4, r0
 80238e6:	b087      	sub	sp, #28
 80238e8:	9105      	str	r1, [sp, #20]
 80238ea:	f001 f8d0 	bl	8024a8e <_ZN8touchgfx7Outline8getCellsEv>
 80238ee:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80238f2:	4605      	mov	r5, r0
 80238f4:	f1b9 0f00 	cmp.w	r9, #0
 80238f8:	d103      	bne.n	8023902 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 80238fa:	2001      	movs	r0, #1
 80238fc:	b007      	add	sp, #28
 80238fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023902:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8023906:	2e00      	cmp	r6, #0
 8023908:	d139      	bne.n	802397e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 802390a:	f104 0848 	add.w	r8, r4, #72	; 0x48
 802390e:	f105 0708 	add.w	r7, r5, #8
 8023912:	4640      	mov	r0, r8
 8023914:	f001 f8fd 	bl	8024b12 <_ZN8touchgfx8Scanline5resetEv>
 8023918:	f109 33ff 	add.w	r3, r9, #4294967295
 802391c:	9303      	str	r3, [sp, #12]
 802391e:	f9b5 b000 	ldrsh.w	fp, [r5]
 8023922:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8023926:	46da      	mov	sl, fp
 8023928:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 802392c:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 8023930:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8023934:	9b03      	ldr	r3, [sp, #12]
 8023936:	4416      	add	r6, r2
 8023938:	9504      	str	r5, [sp, #16]
 802393a:	463d      	mov	r5, r7
 802393c:	3b01      	subs	r3, #1
 802393e:	9303      	str	r3, [sp, #12]
 8023940:	3301      	adds	r3, #1
 8023942:	d01e      	beq.n	8023982 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8023944:	3708      	adds	r7, #8
 8023946:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 802394a:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 802394e:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 8023952:	4290      	cmp	r0, r2
 8023954:	d11e      	bne.n	8023994 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 8023956:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 802395a:	4411      	add	r1, r2
 802395c:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 8023960:	e7e8      	b.n	8023934 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 8023962:	1c91      	adds	r1, r2, #2
 8023964:	f04f 0301 	mov.w	r3, #1
 8023968:	65e1      	str	r1, [r4, #92]	; 0x5c
 802396a:	8053      	strh	r3, [r2, #2]
 802396c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 802396e:	1c91      	adds	r1, r2, #2
 8023970:	65a1      	str	r1, [r4, #88]	; 0x58
 8023972:	f8a2 b002 	strh.w	fp, [r2, #2]
 8023976:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8023978:	3201      	adds	r2, #1
 802397a:	6562      	str	r2, [r4, #84]	; 0x54
 802397c:	e03a      	b.n	80239f4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 802397e:	2000      	movs	r0, #0
 8023980:	e7bc      	b.n	80238fc <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 8023982:	b951      	cbnz	r1, 802399a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 8023984:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8023986:	2b00      	cmp	r3, #0
 8023988:	d0b7      	beq.n	80238fa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 802398a:	4641      	mov	r1, r8
 802398c:	9805      	ldr	r0, [sp, #20]
 802398e:	f7ff fd5b 	bl	8023448 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8023992:	e7b2      	b.n	80238fa <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 8023994:	2900      	cmp	r1, #0
 8023996:	d035      	beq.n	8023a04 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 8023998:	9504      	str	r5, [sp, #16]
 802399a:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 802399e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80239a2:	f7ff fd3d 	bl	8023420 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 80239a6:	4605      	mov	r5, r0
 80239a8:	b330      	cbz	r0, 80239f8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80239aa:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80239ac:	b182      	cbz	r2, 80239d0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80239ae:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80239b0:	454a      	cmp	r2, r9
 80239b2:	d00d      	beq.n	80239d0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80239b4:	4641      	mov	r1, r8
 80239b6:	9805      	ldr	r0, [sp, #20]
 80239b8:	f7ff fd46 	bl	8023448 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80239bc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80239c0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80239c2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80239c6:	65e2      	str	r2, [r4, #92]	; 0x5c
 80239c8:	2300      	movs	r3, #0
 80239ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80239cc:	6563      	str	r3, [r4, #84]	; 0x54
 80239ce:	65a2      	str	r2, [r4, #88]	; 0x58
 80239d0:	f1bb 0f00 	cmp.w	fp, #0
 80239d4:	db10      	blt.n	80239f8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80239d6:	f7f4 fa2d 	bl	8017e34 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80239da:	4583      	cmp	fp, r0
 80239dc:	d20c      	bcs.n	80239f8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80239de:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80239e0:	f802 500b 	strb.w	r5, [r2, fp]
 80239e4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80239e6:	3201      	adds	r2, #1
 80239e8:	455a      	cmp	r2, fp
 80239ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80239ec:	d1b9      	bne.n	8023962 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 80239ee:	8811      	ldrh	r1, [r2, #0]
 80239f0:	3101      	adds	r1, #1
 80239f2:	8011      	strh	r1, [r2, #0]
 80239f4:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 80239f8:	9b03      	ldr	r3, [sp, #12]
 80239fa:	3301      	adds	r3, #1
 80239fc:	d0c2      	beq.n	8023984 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 80239fe:	f10b 0a01 	add.w	sl, fp, #1
 8023a02:	9d04      	ldr	r5, [sp, #16]
 8023a04:	f9b5 3000 	ldrsh.w	r3, [r5]
 8023a08:	4553      	cmp	r3, sl
 8023a0a:	dd88      	ble.n	802391e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8023a0c:	01b1      	lsls	r1, r6, #6
 8023a0e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8023a12:	f7ff fd05 	bl	8023420 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8023a16:	4683      	mov	fp, r0
 8023a18:	2800      	cmp	r0, #0
 8023a1a:	d080      	beq.n	802391e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8023a1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8023a1e:	b183      	cbz	r3, 8023a42 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8023a20:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8023a22:	454b      	cmp	r3, r9
 8023a24:	d00d      	beq.n	8023a42 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8023a26:	4641      	mov	r1, r8
 8023a28:	9805      	ldr	r0, [sp, #20]
 8023a2a:	f7ff fd0d 	bl	8023448 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8023a2e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023a32:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8023a36:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8023a38:	65e3      	str	r3, [r4, #92]	; 0x5c
 8023a3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023a3c:	65a3      	str	r3, [r4, #88]	; 0x58
 8023a3e:	2300      	movs	r3, #0
 8023a40:	6563      	str	r3, [r4, #84]	; 0x54
 8023a42:	f9b5 3000 	ldrsh.w	r3, [r5]
 8023a46:	464a      	mov	r2, r9
 8023a48:	f8cd b000 	str.w	fp, [sp]
 8023a4c:	4651      	mov	r1, sl
 8023a4e:	eba3 030a 	sub.w	r3, r3, sl
 8023a52:	4640      	mov	r0, r8
 8023a54:	f001 f884 	bl	8024b60 <_ZN8touchgfx8Scanline7addSpanEiijj>
 8023a58:	e761      	b.n	802391e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

08023a5a <_ZN8touchgfx6Canvas6renderEv>:
 8023a5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023a5c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8023a60:	4604      	mov	r4, r0
 8023a62:	b913      	cbnz	r3, 8023a6a <_ZN8touchgfx6Canvas6renderEv+0x10>
 8023a64:	2001      	movs	r0, #1
 8023a66:	b003      	add	sp, #12
 8023a68:	bd30      	pop	{r4, r5, pc}
 8023a6a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8023a6e:	2b00      	cmp	r3, #0
 8023a70:	d131      	bne.n	8023ad6 <_ZN8touchgfx6Canvas6renderEv+0x7c>
 8023a72:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 8023a76:	2b00      	cmp	r3, #0
 8023a78:	d0f4      	beq.n	8023a64 <_ZN8touchgfx6Canvas6renderEv+0xa>
 8023a7a:	6840      	ldr	r0, [r0, #4]
 8023a7c:	6803      	ldr	r3, [r0, #0]
 8023a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023a80:	4798      	blx	r3
 8023a82:	2800      	cmp	r0, #0
 8023a84:	d0ee      	beq.n	8023a64 <_ZN8touchgfx6Canvas6renderEv+0xa>
 8023a86:	4620      	mov	r0, r4
 8023a88:	f7ff fec7 	bl	802381a <_ZN8touchgfx6Canvas5closeEv>
 8023a8c:	6860      	ldr	r0, [r4, #4]
 8023a8e:	6803      	ldr	r3, [r0, #0]
 8023a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023a92:	4798      	blx	r3
 8023a94:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 8023a98:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8023a9c:	f7f3 f959 	bl	8016d52 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 8023aa0:	6860      	ldr	r0, [r4, #4]
 8023aa2:	6803      	ldr	r3, [r0, #0]
 8023aa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023aa6:	4798      	blx	r3
 8023aa8:	4605      	mov	r5, r0
 8023aaa:	6860      	ldr	r0, [r4, #4]
 8023aac:	6803      	ldr	r3, [r0, #0]
 8023aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8023ab0:	4798      	blx	r3
 8023ab2:	4601      	mov	r1, r0
 8023ab4:	4628      	mov	r0, r5
 8023ab6:	f7f3 f94f 	bl	8016d58 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 8023aba:	6860      	ldr	r0, [r4, #4]
 8023abc:	6803      	ldr	r3, [r0, #0]
 8023abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8023ac0:	4798      	blx	r3
 8023ac2:	f104 0318 	add.w	r3, r4, #24
 8023ac6:	4669      	mov	r1, sp
 8023ac8:	e9cd 3000 	strd	r3, r0, [sp]
 8023acc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8023ad0:	f7ff ff06 	bl	80238e0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8023ad4:	e7c7      	b.n	8023a66 <_ZN8touchgfx6Canvas6renderEv+0xc>
 8023ad6:	2000      	movs	r0, #0
 8023ad8:	e7c5      	b.n	8023a66 <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

08023adc <_ZN8touchgfx6CanvasD1Ev>:
 8023adc:	b538      	push	{r3, r4, r5, lr}
 8023ade:	4605      	mov	r5, r0
 8023ae0:	4b08      	ldr	r3, [pc, #32]	; (8023b04 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 8023ae2:	4604      	mov	r4, r0
 8023ae4:	f845 3b2c 	str.w	r3, [r5], #44
 8023ae8:	4b07      	ldr	r3, [pc, #28]	; (8023b08 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8023aea:	6818      	ldr	r0, [r3, #0]
 8023aec:	6803      	ldr	r3, [r0, #0]
 8023aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023af0:	4798      	blx	r3
 8023af2:	4628      	mov	r0, r5
 8023af4:	f000 f814 	bl	8023b20 <_ZN8touchgfx7OutlineD1Ev>
 8023af8:	f104 0018 	add.w	r0, r4, #24
 8023afc:	f001 f870 	bl	8024be0 <_ZN8touchgfx15RenderingBufferD1Ev>
 8023b00:	4620      	mov	r0, r4
 8023b02:	bd38      	pop	{r3, r4, r5, pc}
 8023b04:	0802be98 	.word	0x0802be98
 8023b08:	2000b2d4 	.word	0x2000b2d4

08023b0c <_ZN8touchgfx6CanvasD0Ev>:
 8023b0c:	b510      	push	{r4, lr}
 8023b0e:	4604      	mov	r4, r0
 8023b10:	f7ff ffe4 	bl	8023adc <_ZN8touchgfx6CanvasD1Ev>
 8023b14:	21b8      	movs	r1, #184	; 0xb8
 8023b16:	4620      	mov	r0, r4
 8023b18:	f001 f873 	bl	8024c02 <_ZdlPvj>
 8023b1c:	4620      	mov	r0, r4
 8023b1e:	bd10      	pop	{r4, pc}

08023b20 <_ZN8touchgfx7OutlineD1Ev>:
 8023b20:	4770      	bx	lr

08023b22 <_ZN8touchgfx7OutlineD0Ev>:
 8023b22:	b510      	push	{r4, lr}
 8023b24:	4604      	mov	r4, r0
 8023b26:	2148      	movs	r1, #72	; 0x48
 8023b28:	f001 f86b 	bl	8024c02 <_ZdlPvj>
 8023b2c:	4620      	mov	r0, r4
 8023b2e:	bd10      	pop	{r4, pc}

08023b30 <_ZN8touchgfx7Outline5resetEv>:
 8023b30:	b510      	push	{r4, lr}
 8023b32:	4604      	mov	r4, r0
 8023b34:	f7f4 f996 	bl	8017e64 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8023b38:	60e0      	str	r0, [r4, #12]
 8023b3a:	f7f4 f999 	bl	8017e70 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8023b3e:	68e3      	ldr	r3, [r4, #12]
 8023b40:	2200      	movs	r2, #0
 8023b42:	08c0      	lsrs	r0, r0, #3
 8023b44:	6123      	str	r3, [r4, #16]
 8023b46:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8023b4a:	6060      	str	r0, [r4, #4]
 8023b4c:	82a3      	strh	r3, [r4, #20]
 8023b4e:	82e3      	strh	r3, [r4, #22]
 8023b50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8023b52:	60a2      	str	r2, [r4, #8]
 8023b54:	f023 0301 	bic.w	r3, r3, #1
 8023b58:	8322      	strh	r2, [r4, #24]
 8023b5a:	8362      	strh	r2, [r4, #26]
 8023b5c:	f043 0302 	orr.w	r3, r3, #2
 8023b60:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8023b64:	63e3      	str	r3, [r4, #60]	; 0x3c
 8023b66:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8023b6a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8023b6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8023b72:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8023b76:	bd10      	pop	{r4, pc}

08023b78 <_ZN8touchgfx7OutlineC1Ev>:
 8023b78:	4b0f      	ldr	r3, [pc, #60]	; (8023bb8 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 8023b7a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8023b7e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8023b82:	b510      	push	{r4, lr}
 8023b84:	6003      	str	r3, [r0, #0]
 8023b86:	2300      	movs	r3, #0
 8023b88:	4604      	mov	r4, r0
 8023b8a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8023b8e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8023b92:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8023b96:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8023b9a:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8023b9e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8023ba2:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8023ba6:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 8023baa:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 8023bae:	f7ff ffbf 	bl	8023b30 <_ZN8touchgfx7Outline5resetEv>
 8023bb2:	4620      	mov	r0, r4
 8023bb4:	bd10      	pop	{r4, pc}
 8023bb6:	bf00      	nop
 8023bb8:	0802bef8 	.word	0x0802bef8

08023bbc <_ZN8touchgfx7Outline10renderLineEiiii>:
 8023bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023bc0:	b093      	sub	sp, #76	; 0x4c
 8023bc2:	4604      	mov	r4, r0
 8023bc4:	1156      	asrs	r6, r2, #5
 8023bc6:	f002 0e1f 	and.w	lr, r2, #31
 8023bca:	981c      	ldr	r0, [sp, #112]	; 0x70
 8023bcc:	9305      	str	r3, [sp, #20]
 8023bce:	1143      	asrs	r3, r0, #5
 8023bd0:	1145      	asrs	r5, r0, #5
 8023bd2:	930c      	str	r3, [sp, #48]	; 0x30
 8023bd4:	f000 031f 	and.w	r3, r0, #31
 8023bd8:	9303      	str	r3, [sp, #12]
 8023bda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023bdc:	42b3      	cmp	r3, r6
 8023bde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023be0:	bfc8      	it	gt
 8023be2:	6326      	strgt	r6, [r4, #48]	; 0x30
 8023be4:	42b3      	cmp	r3, r6
 8023be6:	bfdc      	itt	le
 8023be8:	1c73      	addle	r3, r6, #1
 8023bea:	63a3      	strle	r3, [r4, #56]	; 0x38
 8023bec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8023bee:	42ab      	cmp	r3, r5
 8023bf0:	bfc8      	it	gt
 8023bf2:	462b      	movgt	r3, r5
 8023bf4:	ea4f 1560 	mov.w	r5, r0, asr #5
 8023bf8:	bfc8      	it	gt
 8023bfa:	6323      	strgt	r3, [r4, #48]	; 0x30
 8023bfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023bfe:	42ab      	cmp	r3, r5
 8023c00:	bfd8      	it	le
 8023c02:	462b      	movle	r3, r5
 8023c04:	ea4f 1561 	mov.w	r5, r1, asr #5
 8023c08:	bfdc      	itt	le
 8023c0a:	3301      	addle	r3, #1
 8023c0c:	63a3      	strle	r3, [r4, #56]	; 0x38
 8023c0e:	9b05      	ldr	r3, [sp, #20]
 8023c10:	eba3 0a01 	sub.w	sl, r3, r1
 8023c14:	1143      	asrs	r3, r0, #5
 8023c16:	429e      	cmp	r6, r3
 8023c18:	f040 8119 	bne.w	8023e4e <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 8023c1c:	9b05      	ldr	r3, [sp, #20]
 8023c1e:	ea4f 1c63 	mov.w	ip, r3, asr #5
 8023c22:	9b03      	ldr	r3, [sp, #12]
 8023c24:	459e      	cmp	lr, r3
 8023c26:	d12c      	bne.n	8023c82 <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8023c28:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023c2c:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 8023c30:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8023c34:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8023c38:	4291      	cmp	r1, r2
 8023c3a:	d037      	beq.n	8023cac <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8023c3c:	8b61      	ldrh	r1, [r4, #26]
 8023c3e:	8b22      	ldrh	r2, [r4, #24]
 8023c40:	430a      	orrs	r2, r1
 8023c42:	d00b      	beq.n	8023c5c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023c44:	2b00      	cmp	r3, #0
 8023c46:	db09      	blt.n	8023c5c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023c48:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8023c4a:	429a      	cmp	r2, r3
 8023c4c:	dd06      	ble.n	8023c5c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023c4e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8023c52:	429a      	cmp	r2, r3
 8023c54:	d308      	bcc.n	8023c68 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 8023c56:	2301      	movs	r3, #1
 8023c58:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023c5c:	f8a4 c014 	strh.w	ip, [r4, #20]
 8023c60:	82e6      	strh	r6, [r4, #22]
 8023c62:	2300      	movs	r3, #0
 8023c64:	8323      	strh	r3, [r4, #24]
 8023c66:	e0c6      	b.n	8023df6 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8023c68:	f104 0314 	add.w	r3, r4, #20
 8023c6c:	6922      	ldr	r2, [r4, #16]
 8023c6e:	cb03      	ldmia	r3!, {r0, r1}
 8023c70:	6010      	str	r0, [r2, #0]
 8023c72:	6051      	str	r1, [r2, #4]
 8023c74:	6923      	ldr	r3, [r4, #16]
 8023c76:	3308      	adds	r3, #8
 8023c78:	6123      	str	r3, [r4, #16]
 8023c7a:	68a3      	ldr	r3, [r4, #8]
 8023c7c:	3301      	adds	r3, #1
 8023c7e:	60a3      	str	r3, [r4, #8]
 8023c80:	e7ec      	b.n	8023c5c <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8023c82:	9b05      	ldr	r3, [sp, #20]
 8023c84:	45ac      	cmp	ip, r5
 8023c86:	f001 011f 	and.w	r1, r1, #31
 8023c8a:	8b20      	ldrh	r0, [r4, #24]
 8023c8c:	f003 031f 	and.w	r3, r3, #31
 8023c90:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8023c94:	9304      	str	r3, [sp, #16]
 8023c96:	9b03      	ldr	r3, [sp, #12]
 8023c98:	eba3 020e 	sub.w	r2, r3, lr
 8023c9c:	d109      	bne.n	8023cb2 <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 8023c9e:	9b04      	ldr	r3, [sp, #16]
 8023ca0:	4410      	add	r0, r2
 8023ca2:	4419      	add	r1, r3
 8023ca4:	8320      	strh	r0, [r4, #24]
 8023ca6:	fb02 8201 	mla	r2, r2, r1, r8
 8023caa:	8362      	strh	r2, [r4, #26]
 8023cac:	b013      	add	sp, #76	; 0x4c
 8023cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023cb2:	f1ba 0f00 	cmp.w	sl, #0
 8023cb6:	f2c0 80a0 	blt.w	8023dfa <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 8023cba:	f1c1 0320 	rsb	r3, r1, #32
 8023cbe:	f04f 0b20 	mov.w	fp, #32
 8023cc2:	435a      	muls	r2, r3
 8023cc4:	2301      	movs	r3, #1
 8023cc6:	9302      	str	r3, [sp, #8]
 8023cc8:	4459      	add	r1, fp
 8023cca:	fb92 f7fa 	sdiv	r7, r2, sl
 8023cce:	fb0a 2217 	mls	r2, sl, r7, r2
 8023cd2:	2a00      	cmp	r2, #0
 8023cd4:	bfbc      	itt	lt
 8023cd6:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8023cda:	4452      	addlt	r2, sl
 8023cdc:	fb07 8101 	mla	r1, r7, r1, r8
 8023ce0:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8023ce4:	4438      	add	r0, r7
 8023ce6:	b20b      	sxth	r3, r1
 8023ce8:	9902      	ldr	r1, [sp, #8]
 8023cea:	b200      	sxth	r0, r0
 8023cec:	9301      	str	r3, [sp, #4]
 8023cee:	8363      	strh	r3, [r4, #26]
 8023cf0:	186b      	adds	r3, r5, r1
 8023cf2:	0435      	lsls	r5, r6, #16
 8023cf4:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8023cf8:	8320      	strh	r0, [r4, #24]
 8023cfa:	eb03 0905 	add.w	r9, r3, r5
 8023cfe:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 8023d02:	9300      	str	r3, [sp, #0]
 8023d04:	45c1      	cmp	r9, r8
 8023d06:	9505      	str	r5, [sp, #20]
 8023d08:	d014      	beq.n	8023d34 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 8023d0a:	9b01      	ldr	r3, [sp, #4]
 8023d0c:	4303      	orrs	r3, r0
 8023d0e:	d00b      	beq.n	8023d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023d10:	2900      	cmp	r1, #0
 8023d12:	db09      	blt.n	8023d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023d14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023d16:	428b      	cmp	r3, r1
 8023d18:	dd06      	ble.n	8023d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023d1a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8023d1e:	4299      	cmp	r1, r3
 8023d20:	d374      	bcc.n	8023e0c <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 8023d22:	2301      	movs	r3, #1
 8023d24:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023d28:	9b00      	ldr	r3, [sp, #0]
 8023d2a:	82e6      	strh	r6, [r4, #22]
 8023d2c:	82a3      	strh	r3, [r4, #20]
 8023d2e:	2300      	movs	r3, #0
 8023d30:	8323      	strh	r3, [r4, #24]
 8023d32:	8363      	strh	r3, [r4, #26]
 8023d34:	9900      	ldr	r1, [sp, #0]
 8023d36:	eb0e 0307 	add.w	r3, lr, r7
 8023d3a:	458c      	cmp	ip, r1
 8023d3c:	d04e      	beq.n	8023ddc <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 8023d3e:	9903      	ldr	r1, [sp, #12]
 8023d40:	eba2 020a 	sub.w	r2, r2, sl
 8023d44:	1ac9      	subs	r1, r1, r3
 8023d46:	9201      	str	r2, [sp, #4]
 8023d48:	440f      	add	r7, r1
 8023d4a:	017f      	lsls	r7, r7, #5
 8023d4c:	fb97 fefa 	sdiv	lr, r7, sl
 8023d50:	fb0a 771e 	mls	r7, sl, lr, r7
 8023d54:	2f00      	cmp	r7, #0
 8023d56:	bfbc      	itt	lt
 8023d58:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8023d5c:	4457      	addlt	r7, sl
 8023d5e:	f10e 0101 	add.w	r1, lr, #1
 8023d62:	9106      	str	r1, [sp, #24]
 8023d64:	9a01      	ldr	r2, [sp, #4]
 8023d66:	8b20      	ldrh	r0, [r4, #24]
 8023d68:	19d2      	adds	r2, r2, r7
 8023d6a:	8b61      	ldrh	r1, [r4, #26]
 8023d6c:	9d02      	ldr	r5, [sp, #8]
 8023d6e:	9201      	str	r2, [sp, #4]
 8023d70:	bf5b      	ittet	pl
 8023d72:	eba2 020a 	subpl.w	r2, r2, sl
 8023d76:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 8023d7a:	46f0      	movmi	r8, lr
 8023d7c:	9201      	strpl	r2, [sp, #4]
 8023d7e:	9a00      	ldr	r2, [sp, #0]
 8023d80:	4440      	add	r0, r8
 8023d82:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8023d86:	4443      	add	r3, r8
 8023d88:	442a      	add	r2, r5
 8023d8a:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8023d8e:	9d05      	ldr	r5, [sp, #20]
 8023d90:	b200      	sxth	r0, r0
 8023d92:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8023d96:	b209      	sxth	r1, r1
 8023d98:	4415      	add	r5, r2
 8023d9a:	8320      	strh	r0, [r4, #24]
 8023d9c:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8023da0:	8361      	strh	r1, [r4, #26]
 8023da2:	9200      	str	r2, [sp, #0]
 8023da4:	454d      	cmp	r5, r9
 8023da6:	d016      	beq.n	8023dd6 <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 8023da8:	4301      	orrs	r1, r0
 8023daa:	d00d      	beq.n	8023dc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023dac:	f1b8 0f00 	cmp.w	r8, #0
 8023db0:	db0a      	blt.n	8023dc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023db2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023db4:	4541      	cmp	r1, r8
 8023db6:	dd07      	ble.n	8023dc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023db8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023dbc:	4288      	cmp	r0, r1
 8023dbe:	d335      	bcc.n	8023e2c <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8023dc0:	f04f 0101 	mov.w	r1, #1
 8023dc4:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8023dc8:	9900      	ldr	r1, [sp, #0]
 8023dca:	82e6      	strh	r6, [r4, #22]
 8023dcc:	82a1      	strh	r1, [r4, #20]
 8023dce:	f04f 0100 	mov.w	r1, #0
 8023dd2:	8321      	strh	r1, [r4, #24]
 8023dd4:	8361      	strh	r1, [r4, #26]
 8023dd6:	9a00      	ldr	r2, [sp, #0]
 8023dd8:	4594      	cmp	ip, r2
 8023dda:	d1c3      	bne.n	8023d64 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8023ddc:	9a03      	ldr	r2, [sp, #12]
 8023dde:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 8023de2:	1ad3      	subs	r3, r2, r3
 8023de4:	8b22      	ldrh	r2, [r4, #24]
 8023de6:	441a      	add	r2, r3
 8023de8:	8322      	strh	r2, [r4, #24]
 8023dea:	9a04      	ldr	r2, [sp, #16]
 8023dec:	3220      	adds	r2, #32
 8023dee:	eba2 020b 	sub.w	r2, r2, fp
 8023df2:	fb03 c302 	mla	r3, r3, r2, ip
 8023df6:	8363      	strh	r3, [r4, #26]
 8023df8:	e758      	b.n	8023cac <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8023dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8023dfe:	434a      	muls	r2, r1
 8023e00:	f1ca 0a00 	rsb	sl, sl, #0
 8023e04:	f04f 0b00 	mov.w	fp, #0
 8023e08:	9302      	str	r3, [sp, #8]
 8023e0a:	e75d      	b.n	8023cc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 8023e0c:	f104 0314 	add.w	r3, r4, #20
 8023e10:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8023e14:	cb03      	ldmia	r3!, {r0, r1}
 8023e16:	f8c8 0000 	str.w	r0, [r8]
 8023e1a:	f8c8 1004 	str.w	r1, [r8, #4]
 8023e1e:	6923      	ldr	r3, [r4, #16]
 8023e20:	3308      	adds	r3, #8
 8023e22:	6123      	str	r3, [r4, #16]
 8023e24:	68a3      	ldr	r3, [r4, #8]
 8023e26:	3301      	adds	r3, #1
 8023e28:	60a3      	str	r3, [r4, #8]
 8023e2a:	e77d      	b.n	8023d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8023e2c:	f104 0814 	add.w	r8, r4, #20
 8023e30:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8023e34:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8023e38:	f8c9 0000 	str.w	r0, [r9]
 8023e3c:	f8c9 1004 	str.w	r1, [r9, #4]
 8023e40:	6921      	ldr	r1, [r4, #16]
 8023e42:	3108      	adds	r1, #8
 8023e44:	6121      	str	r1, [r4, #16]
 8023e46:	68a1      	ldr	r1, [r4, #8]
 8023e48:	3101      	adds	r1, #1
 8023e4a:	60a1      	str	r1, [r4, #8]
 8023e4c:	e7bc      	b.n	8023dc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8023e4e:	1a83      	subs	r3, r0, r2
 8023e50:	9301      	str	r3, [sp, #4]
 8023e52:	f1ba 0f00 	cmp.w	sl, #0
 8023e56:	f040 8094 	bne.w	8023f82 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 8023e5a:	9a01      	ldr	r2, [sp, #4]
 8023e5c:	0049      	lsls	r1, r1, #1
 8023e5e:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8023e62:	2a00      	cmp	r2, #0
 8023e64:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8023e68:	8b62      	ldrh	r2, [r4, #26]
 8023e6a:	bfaa      	itet	ge
 8023e6c:	f04f 0a20 	movge.w	sl, #32
 8023e70:	f04f 38ff 	movlt.w	r8, #4294967295
 8023e74:	f04f 0801 	movge.w	r8, #1
 8023e78:	8b21      	ldrh	r1, [r4, #24]
 8023e7a:	ebaa 0e0e 	sub.w	lr, sl, lr
 8023e7e:	4471      	add	r1, lr
 8023e80:	fb0e 2e03 	mla	lr, lr, r3, r2
 8023e84:	eb08 0206 	add.w	r2, r8, r6
 8023e88:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8023e8c:	b209      	sxth	r1, r1
 8023e8e:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 8023e92:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 8023e96:	8321      	strh	r1, [r4, #24]
 8023e98:	fa0f fe8e 	sxth.w	lr, lr
 8023e9c:	42b7      	cmp	r7, r6
 8023e9e:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8023ea2:	d013      	beq.n	8023ecc <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8023ea4:	ea51 010e 	orrs.w	r1, r1, lr
 8023ea8:	d00b      	beq.n	8023ec2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8023eaa:	2800      	cmp	r0, #0
 8023eac:	db09      	blt.n	8023ec2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8023eae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023eb0:	4281      	cmp	r1, r0
 8023eb2:	dd06      	ble.n	8023ec2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8023eb4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023eb8:	4288      	cmp	r0, r1
 8023eba:	d339      	bcc.n	8023f30 <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8023ebc:	2101      	movs	r1, #1
 8023ebe:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8023ec2:	2100      	movs	r1, #0
 8023ec4:	82a5      	strh	r5, [r4, #20]
 8023ec6:	82e2      	strh	r2, [r4, #22]
 8023ec8:	8321      	strh	r1, [r4, #24]
 8023eca:	8361      	strh	r1, [r4, #26]
 8023ecc:	f1aa 0610 	sub.w	r6, sl, #16
 8023ed0:	f04f 0e00 	mov.w	lr, #0
 8023ed4:	f04f 0b01 	mov.w	fp, #1
 8023ed8:	0076      	lsls	r6, r6, #1
 8023eda:	fb06 f703 	mul.w	r7, r6, r3
 8023ede:	b236      	sxth	r6, r6
 8023ee0:	b23f      	sxth	r7, r7
 8023ee2:	ea46 0107 	orr.w	r1, r6, r7
 8023ee6:	9100      	str	r1, [sp, #0]
 8023ee8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023eea:	428a      	cmp	r2, r1
 8023eec:	d03e      	beq.n	8023f6c <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 8023eee:	4442      	add	r2, r8
 8023ef0:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8023ef4:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8023ef8:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8023efc:	8326      	strh	r6, [r4, #24]
 8023efe:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8023f02:	8367      	strh	r7, [r4, #26]
 8023f04:	4584      	cmp	ip, r0
 8023f06:	d0ef      	beq.n	8023ee8 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8023f08:	9800      	ldr	r0, [sp, #0]
 8023f0a:	b150      	cbz	r0, 8023f22 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8023f0c:	2900      	cmp	r1, #0
 8023f0e:	db08      	blt.n	8023f22 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8023f10:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8023f12:	4288      	cmp	r0, r1
 8023f14:	dd05      	ble.n	8023f22 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8023f16:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8023f1a:	4288      	cmp	r0, r1
 8023f1c:	d315      	bcc.n	8023f4a <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8023f1e:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8023f22:	82a5      	strh	r5, [r4, #20]
 8023f24:	82e2      	strh	r2, [r4, #22]
 8023f26:	f8a4 e018 	strh.w	lr, [r4, #24]
 8023f2a:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8023f2e:	e7db      	b.n	8023ee8 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8023f30:	f104 0614 	add.w	r6, r4, #20
 8023f34:	6927      	ldr	r7, [r4, #16]
 8023f36:	ce03      	ldmia	r6!, {r0, r1}
 8023f38:	6038      	str	r0, [r7, #0]
 8023f3a:	6079      	str	r1, [r7, #4]
 8023f3c:	6921      	ldr	r1, [r4, #16]
 8023f3e:	3108      	adds	r1, #8
 8023f40:	6121      	str	r1, [r4, #16]
 8023f42:	68a1      	ldr	r1, [r4, #8]
 8023f44:	3101      	adds	r1, #1
 8023f46:	60a1      	str	r1, [r4, #8]
 8023f48:	e7bb      	b.n	8023ec2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8023f4a:	f104 0c14 	add.w	ip, r4, #20
 8023f4e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8023f52:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8023f56:	f8c9 0000 	str.w	r0, [r9]
 8023f5a:	f8c9 1004 	str.w	r1, [r9, #4]
 8023f5e:	6921      	ldr	r1, [r4, #16]
 8023f60:	3108      	adds	r1, #8
 8023f62:	6121      	str	r1, [r4, #16]
 8023f64:	68a1      	ldr	r1, [r4, #8]
 8023f66:	3101      	adds	r1, #1
 8023f68:	60a1      	str	r1, [r4, #8]
 8023f6a:	e7da      	b.n	8023f22 <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8023f6c:	9a03      	ldr	r2, [sp, #12]
 8023f6e:	8b61      	ldrh	r1, [r4, #26]
 8023f70:	f1a2 0c20 	sub.w	ip, r2, #32
 8023f74:	8b22      	ldrh	r2, [r4, #24]
 8023f76:	44d4      	add	ip, sl
 8023f78:	4462      	add	r2, ip
 8023f7a:	fb0c 1303 	mla	r3, ip, r3, r1
 8023f7e:	8322      	strh	r2, [r4, #24]
 8023f80:	e739      	b.n	8023df6 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8023f82:	9b01      	ldr	r3, [sp, #4]
 8023f84:	2b00      	cmp	r3, #0
 8023f86:	db3f      	blt.n	8024008 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8023f88:	2201      	movs	r2, #1
 8023f8a:	f1ce 0320 	rsb	r3, lr, #32
 8023f8e:	920b      	str	r2, [sp, #44]	; 0x2c
 8023f90:	2220      	movs	r2, #32
 8023f92:	fb0a f303 	mul.w	r3, sl, r3
 8023f96:	9202      	str	r2, [sp, #8]
 8023f98:	9a01      	ldr	r2, [sp, #4]
 8023f9a:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8023f9e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8023fa2:	fb93 f7f2 	sdiv	r7, r3, r2
 8023fa6:	fb02 3317 	mls	r3, r2, r7, r3
 8023faa:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8023fae:	2b00      	cmp	r3, #0
 8023fb0:	9308      	str	r3, [sp, #32]
 8023fb2:	bfbc      	itt	lt
 8023fb4:	f107 37ff 	addlt.w	r7, r7, #4294967295
 8023fb8:	189b      	addlt	r3, r3, r2
 8023fba:	eb07 0b01 	add.w	fp, r7, r1
 8023fbe:	bfb8      	it	lt
 8023fc0:	9308      	strlt	r3, [sp, #32]
 8023fc2:	ea4f 136b 	mov.w	r3, fp, asr #5
 8023fc6:	9304      	str	r3, [sp, #16]
 8023fc8:	9b02      	ldr	r3, [sp, #8]
 8023fca:	4573      	cmp	r3, lr
 8023fcc:	d133      	bne.n	8024036 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8023fce:	9b04      	ldr	r3, [sp, #16]
 8023fd0:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8023fd4:	454b      	cmp	r3, r9
 8023fd6:	d045      	beq.n	8024064 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8023fd8:	8b62      	ldrh	r2, [r4, #26]
 8023fda:	8b23      	ldrh	r3, [r4, #24]
 8023fdc:	4313      	orrs	r3, r2
 8023fde:	d00c      	beq.n	8023ffa <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8023fe0:	f1b8 0f00 	cmp.w	r8, #0
 8023fe4:	db09      	blt.n	8023ffa <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8023fe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023fe8:	4543      	cmp	r3, r8
 8023fea:	dd06      	ble.n	8023ffa <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8023fec:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8023ff0:	429a      	cmp	r2, r3
 8023ff2:	d313      	bcc.n	802401c <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8023ff4:	2301      	movs	r3, #1
 8023ff6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8023ffa:	9b04      	ldr	r3, [sp, #16]
 8023ffc:	82e6      	strh	r6, [r4, #22]
 8023ffe:	82a3      	strh	r3, [r4, #20]
 8024000:	2300      	movs	r3, #0
 8024002:	8323      	strh	r3, [r4, #24]
 8024004:	8363      	strh	r3, [r4, #26]
 8024006:	e02d      	b.n	8024064 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8024008:	9a01      	ldr	r2, [sp, #4]
 802400a:	fb0a f30e 	mul.w	r3, sl, lr
 802400e:	4252      	negs	r2, r2
 8024010:	9201      	str	r2, [sp, #4]
 8024012:	f04f 32ff 	mov.w	r2, #4294967295
 8024016:	920b      	str	r2, [sp, #44]	; 0x2c
 8024018:	2200      	movs	r2, #0
 802401a:	e7bc      	b.n	8023f96 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 802401c:	f104 0314 	add.w	r3, r4, #20
 8024020:	6922      	ldr	r2, [r4, #16]
 8024022:	cb03      	ldmia	r3!, {r0, r1}
 8024024:	6010      	str	r0, [r2, #0]
 8024026:	6051      	str	r1, [r2, #4]
 8024028:	6923      	ldr	r3, [r4, #16]
 802402a:	3308      	adds	r3, #8
 802402c:	6123      	str	r3, [r4, #16]
 802402e:	68a3      	ldr	r3, [r4, #8]
 8024030:	3301      	adds	r3, #1
 8024032:	60a3      	str	r3, [r4, #8]
 8024034:	e7e1      	b.n	8023ffa <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8024036:	f00b 031f 	and.w	r3, fp, #31
 802403a:	f001 011f 	and.w	r1, r1, #31
 802403e:	8b20      	ldrh	r0, [r4, #24]
 8024040:	9309      	str	r3, [sp, #36]	; 0x24
 8024042:	9b02      	ldr	r3, [sp, #8]
 8024044:	eba3 020e 	sub.w	r2, r3, lr
 8024048:	8b63      	ldrh	r3, [r4, #26]
 802404a:	9300      	str	r3, [sp, #0]
 802404c:	9b04      	ldr	r3, [sp, #16]
 802404e:	42ab      	cmp	r3, r5
 8024050:	f040 80ef 	bne.w	8024232 <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8024054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024056:	4410      	add	r0, r2
 8024058:	4419      	add	r1, r3
 802405a:	9b00      	ldr	r3, [sp, #0]
 802405c:	8320      	strh	r0, [r4, #24]
 802405e:	fb02 3101 	mla	r1, r2, r1, r3
 8024062:	8361      	strh	r1, [r4, #26]
 8024064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024066:	9904      	ldr	r1, [sp, #16]
 8024068:	4433      	add	r3, r6
 802406a:	9300      	str	r3, [sp, #0]
 802406c:	9a00      	ldr	r2, [sp, #0]
 802406e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024072:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8024076:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 802407a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802407e:	4288      	cmp	r0, r1
 8024080:	d018      	beq.n	80240b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8024082:	8b60      	ldrh	r0, [r4, #26]
 8024084:	8b21      	ldrh	r1, [r4, #24]
 8024086:	ea50 0201 	orrs.w	r2, r0, r1
 802408a:	d00c      	beq.n	80240a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 802408c:	2b00      	cmp	r3, #0
 802408e:	db0a      	blt.n	80240a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024090:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024092:	4299      	cmp	r1, r3
 8024094:	dd07      	ble.n	80240a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8024096:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802409a:	4299      	cmp	r1, r3
 802409c:	f0c0 818b 	bcc.w	80243b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 80240a0:	2301      	movs	r3, #1
 80240a2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80240a6:	9b04      	ldr	r3, [sp, #16]
 80240a8:	82a3      	strh	r3, [r4, #20]
 80240aa:	9b00      	ldr	r3, [sp, #0]
 80240ac:	82e3      	strh	r3, [r4, #22]
 80240ae:	2300      	movs	r3, #0
 80240b0:	8323      	strh	r3, [r4, #24]
 80240b2:	8363      	strh	r3, [r4, #26]
 80240b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80240b6:	9a00      	ldr	r2, [sp, #0]
 80240b8:	4293      	cmp	r3, r2
 80240ba:	f000 808d 	beq.w	80241d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 80240be:	ea4f 134a 	mov.w	r3, sl, lsl #5
 80240c2:	9901      	ldr	r1, [sp, #4]
 80240c4:	9801      	ldr	r0, [sp, #4]
 80240c6:	fb93 f1f1 	sdiv	r1, r3, r1
 80240ca:	fb00 3311 	mls	r3, r0, r1, r3
 80240ce:	9106      	str	r1, [sp, #24]
 80240d0:	2b00      	cmp	r3, #0
 80240d2:	9307      	str	r3, [sp, #28]
 80240d4:	da04      	bge.n	80240e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 80240d6:	1e4b      	subs	r3, r1, #1
 80240d8:	9306      	str	r3, [sp, #24]
 80240da:	9b07      	ldr	r3, [sp, #28]
 80240dc:	4403      	add	r3, r0
 80240de:	9307      	str	r3, [sp, #28]
 80240e0:	9b08      	ldr	r3, [sp, #32]
 80240e2:	f04f 0c00 	mov.w	ip, #0
 80240e6:	9901      	ldr	r1, [sp, #4]
 80240e8:	1a5b      	subs	r3, r3, r1
 80240ea:	4659      	mov	r1, fp
 80240ec:	9308      	str	r3, [sp, #32]
 80240ee:	9b02      	ldr	r3, [sp, #8]
 80240f0:	f1c3 0320 	rsb	r3, r3, #32
 80240f4:	930a      	str	r3, [sp, #40]	; 0x28
 80240f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80240f8:	9b02      	ldr	r3, [sp, #8]
 80240fa:	1a1b      	subs	r3, r3, r0
 80240fc:	9309      	str	r3, [sp, #36]	; 0x24
 80240fe:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8024102:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8024106:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 802410a:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 802410e:	181b      	adds	r3, r3, r0
 8024110:	bf58      	it	pl
 8024112:	9801      	ldrpl	r0, [sp, #4]
 8024114:	9308      	str	r3, [sp, #32]
 8024116:	bf54      	ite	pl
 8024118:	1a1b      	subpl	r3, r3, r0
 802411a:	9d06      	ldrmi	r5, [sp, #24]
 802411c:	9802      	ldr	r0, [sp, #8]
 802411e:	bf5e      	ittt	pl
 8024120:	9308      	strpl	r3, [sp, #32]
 8024122:	9b06      	ldrpl	r3, [sp, #24]
 8024124:	1c5d      	addpl	r5, r3, #1
 8024126:	44ab      	add	fp, r5
 8024128:	ea4f 136b 	mov.w	r3, fp, asr #5
 802412c:	9304      	str	r3, [sp, #16]
 802412e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024130:	4283      	cmp	r3, r0
 8024132:	f040 815a 	bne.w	80243ea <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8024136:	9b04      	ldr	r3, [sp, #16]
 8024138:	9a00      	ldr	r2, [sp, #0]
 802413a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 802413e:	4543      	cmp	r3, r8
 8024140:	d01a      	beq.n	8024178 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024142:	8b61      	ldrh	r1, [r4, #26]
 8024144:	8b23      	ldrh	r3, [r4, #24]
 8024146:	430b      	orrs	r3, r1
 8024148:	d00e      	beq.n	8024168 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 802414a:	f1be 0f00 	cmp.w	lr, #0
 802414e:	db0b      	blt.n	8024168 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024150:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024152:	4573      	cmp	r3, lr
 8024154:	dd08      	ble.n	8024168 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8024156:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802415a:	4299      	cmp	r1, r3
 802415c:	f0c0 8138 	bcc.w	80243d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8024160:	f04f 0301 	mov.w	r3, #1
 8024164:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024168:	9b04      	ldr	r3, [sp, #16]
 802416a:	f8a4 c018 	strh.w	ip, [r4, #24]
 802416e:	82a3      	strh	r3, [r4, #20]
 8024170:	9b00      	ldr	r3, [sp, #0]
 8024172:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024176:	82e3      	strh	r3, [r4, #22]
 8024178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802417a:	9a00      	ldr	r2, [sp, #0]
 802417c:	441a      	add	r2, r3
 802417e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024182:	9200      	str	r2, [sp, #0]
 8024184:	9900      	ldr	r1, [sp, #0]
 8024186:	9a04      	ldr	r2, [sp, #16]
 8024188:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 802418c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8024190:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8024194:	4288      	cmp	r0, r1
 8024196:	d01a      	beq.n	80241ce <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8024198:	8b60      	ldrh	r0, [r4, #26]
 802419a:	8b21      	ldrh	r1, [r4, #24]
 802419c:	ea50 0201 	orrs.w	r2, r0, r1
 80241a0:	d00d      	beq.n	80241be <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 80241a2:	2b00      	cmp	r3, #0
 80241a4:	db0b      	blt.n	80241be <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 80241a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80241a8:	4299      	cmp	r1, r3
 80241aa:	dd08      	ble.n	80241be <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 80241ac:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80241b0:	4299      	cmp	r1, r3
 80241b2:	f0c0 81f9 	bcc.w	80245a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 80241b6:	f04f 0301 	mov.w	r3, #1
 80241ba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80241be:	9b04      	ldr	r3, [sp, #16]
 80241c0:	f8a4 c018 	strh.w	ip, [r4, #24]
 80241c4:	82a3      	strh	r3, [r4, #20]
 80241c6:	9b00      	ldr	r3, [sp, #0]
 80241c8:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80241cc:	82e3      	strh	r3, [r4, #22]
 80241ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80241d0:	4659      	mov	r1, fp
 80241d2:	9a00      	ldr	r2, [sp, #0]
 80241d4:	4293      	cmp	r3, r2
 80241d6:	d192      	bne.n	80240fe <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 80241d8:	9b02      	ldr	r3, [sp, #8]
 80241da:	f1c3 0c20 	rsb	ip, r3, #32
 80241de:	9b05      	ldr	r3, [sp, #20]
 80241e0:	ea4f 1e63 	mov.w	lr, r3, asr #5
 80241e4:	9b03      	ldr	r3, [sp, #12]
 80241e6:	459c      	cmp	ip, r3
 80241e8:	f040 81f8 	bne.w	80245dc <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 80241ec:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80241f0:	9a00      	ldr	r2, [sp, #0]
 80241f2:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80241f6:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 80241fa:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80241fe:	4288      	cmp	r0, r1
 8024200:	f43f ad54 	beq.w	8023cac <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8024204:	8b60      	ldrh	r0, [r4, #26]
 8024206:	8b21      	ldrh	r1, [r4, #24]
 8024208:	ea50 0201 	orrs.w	r2, r0, r1
 802420c:	d00c      	beq.n	8024228 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 802420e:	2b00      	cmp	r3, #0
 8024210:	db0a      	blt.n	8024228 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024212:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024214:	4299      	cmp	r1, r3
 8024216:	dd07      	ble.n	8024228 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8024218:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802421c:	4299      	cmp	r1, r3
 802421e:	f0c0 81d0 	bcc.w	80245c2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8024222:	2301      	movs	r3, #1
 8024224:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024228:	9b00      	ldr	r3, [sp, #0]
 802422a:	f8a4 e014 	strh.w	lr, [r4, #20]
 802422e:	82e3      	strh	r3, [r4, #22]
 8024230:	e517      	b.n	8023c62 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8024232:	2f00      	cmp	r7, #0
 8024234:	f2c0 8097 	blt.w	8024366 <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8024238:	2301      	movs	r3, #1
 802423a:	f1c1 0c20 	rsb	ip, r1, #32
 802423e:	9307      	str	r3, [sp, #28]
 8024240:	2320      	movs	r3, #32
 8024242:	fb02 f20c 	mul.w	r2, r2, ip
 8024246:	9306      	str	r3, [sp, #24]
 8024248:	9b06      	ldr	r3, [sp, #24]
 802424a:	fb92 fcf7 	sdiv	ip, r2, r7
 802424e:	fb07 221c 	mls	r2, r7, ip, r2
 8024252:	4419      	add	r1, r3
 8024254:	9b00      	ldr	r3, [sp, #0]
 8024256:	2a00      	cmp	r2, #0
 8024258:	bfbc      	itt	lt
 802425a:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 802425e:	19d2      	addlt	r2, r2, r7
 8024260:	fb0c 3101 	mla	r1, ip, r1, r3
 8024264:	9b07      	ldr	r3, [sp, #28]
 8024266:	4460      	add	r0, ip
 8024268:	441d      	add	r5, r3
 802426a:	0433      	lsls	r3, r6, #16
 802426c:	b200      	sxth	r0, r0
 802426e:	930a      	str	r3, [sp, #40]	; 0x28
 8024270:	18eb      	adds	r3, r5, r3
 8024272:	b209      	sxth	r1, r1
 8024274:	8320      	strh	r0, [r4, #24]
 8024276:	454b      	cmp	r3, r9
 8024278:	8361      	strh	r1, [r4, #26]
 802427a:	d014      	beq.n	80242a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 802427c:	ea50 0301 	orrs.w	r3, r0, r1
 8024280:	d00c      	beq.n	802429c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024282:	f1b8 0f00 	cmp.w	r8, #0
 8024286:	db09      	blt.n	802429c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024288:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802428a:	4543      	cmp	r3, r8
 802428c:	dd06      	ble.n	802429c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 802428e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8024292:	4299      	cmp	r1, r3
 8024294:	d36e      	bcc.n	8024374 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8024296:	2301      	movs	r3, #1
 8024298:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802429c:	2300      	movs	r3, #0
 802429e:	82a5      	strh	r5, [r4, #20]
 80242a0:	82e6      	strh	r6, [r4, #22]
 80242a2:	8323      	strh	r3, [r4, #24]
 80242a4:	8363      	strh	r3, [r4, #26]
 80242a6:	9904      	ldr	r1, [sp, #16]
 80242a8:	eb0e 030c 	add.w	r3, lr, ip
 80242ac:	42a9      	cmp	r1, r5
 80242ae:	d04d      	beq.n	802434c <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 80242b0:	9902      	ldr	r1, [sp, #8]
 80242b2:	1bd2      	subs	r2, r2, r7
 80242b4:	1ac9      	subs	r1, r1, r3
 80242b6:	9200      	str	r2, [sp, #0]
 80242b8:	448c      	add	ip, r1
 80242ba:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 80242be:	fb9c fef7 	sdiv	lr, ip, r7
 80242c2:	fb07 cc1e 	mls	ip, r7, lr, ip
 80242c6:	f1bc 0f00 	cmp.w	ip, #0
 80242ca:	bfbc      	itt	lt
 80242cc:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80242d0:	44bc      	addlt	ip, r7
 80242d2:	f10e 0101 	add.w	r1, lr, #1
 80242d6:	910d      	str	r1, [sp, #52]	; 0x34
 80242d8:	9a00      	ldr	r2, [sp, #0]
 80242da:	8b20      	ldrh	r0, [r4, #24]
 80242dc:	eb12 020c 	adds.w	r2, r2, ip
 80242e0:	8b61      	ldrh	r1, [r4, #26]
 80242e2:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80242e6:	9200      	str	r2, [sp, #0]
 80242e8:	bf5b      	ittet	pl
 80242ea:	1bd2      	subpl	r2, r2, r7
 80242ec:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 80242f0:	46f0      	movmi	r8, lr
 80242f2:	9200      	strpl	r2, [sp, #0]
 80242f4:	9a07      	ldr	r2, [sp, #28]
 80242f6:	4440      	add	r0, r8
 80242f8:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 80242fc:	4443      	add	r3, r8
 80242fe:	4415      	add	r5, r2
 8024300:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8024304:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024306:	b200      	sxth	r0, r0
 8024308:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 802430c:	442a      	add	r2, r5
 802430e:	b209      	sxth	r1, r1
 8024310:	8320      	strh	r0, [r4, #24]
 8024312:	454a      	cmp	r2, r9
 8024314:	8361      	strh	r1, [r4, #26]
 8024316:	d016      	beq.n	8024346 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8024318:	ea50 0201 	orrs.w	r2, r0, r1
 802431c:	d00d      	beq.n	802433a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802431e:	f1b8 0f00 	cmp.w	r8, #0
 8024322:	db0a      	blt.n	802433a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8024324:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024326:	4541      	cmp	r1, r8
 8024328:	dd07      	ble.n	802433a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 802432a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802432e:	4288      	cmp	r0, r1
 8024330:	d330      	bcc.n	8024394 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8024332:	f04f 0201 	mov.w	r2, #1
 8024336:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802433a:	f04f 0200 	mov.w	r2, #0
 802433e:	82a5      	strh	r5, [r4, #20]
 8024340:	82e6      	strh	r6, [r4, #22]
 8024342:	8322      	strh	r2, [r4, #24]
 8024344:	8362      	strh	r2, [r4, #26]
 8024346:	9904      	ldr	r1, [sp, #16]
 8024348:	42a9      	cmp	r1, r5
 802434a:	d1c5      	bne.n	80242d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 802434c:	9a02      	ldr	r2, [sp, #8]
 802434e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024350:	1ad3      	subs	r3, r2, r3
 8024352:	8b22      	ldrh	r2, [r4, #24]
 8024354:	3120      	adds	r1, #32
 8024356:	441a      	add	r2, r3
 8024358:	8322      	strh	r2, [r4, #24]
 802435a:	9a06      	ldr	r2, [sp, #24]
 802435c:	1a89      	subs	r1, r1, r2
 802435e:	8b62      	ldrh	r2, [r4, #26]
 8024360:	fb03 2301 	mla	r3, r3, r1, r2
 8024364:	e64e      	b.n	8024004 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8024366:	f04f 33ff 	mov.w	r3, #4294967295
 802436a:	434a      	muls	r2, r1
 802436c:	427f      	negs	r7, r7
 802436e:	9307      	str	r3, [sp, #28]
 8024370:	2300      	movs	r3, #0
 8024372:	e768      	b.n	8024246 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8024374:	f104 0314 	add.w	r3, r4, #20
 8024378:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802437c:	cb03      	ldmia	r3!, {r0, r1}
 802437e:	f8c8 0000 	str.w	r0, [r8]
 8024382:	f8c8 1004 	str.w	r1, [r8, #4]
 8024386:	6923      	ldr	r3, [r4, #16]
 8024388:	3308      	adds	r3, #8
 802438a:	6123      	str	r3, [r4, #16]
 802438c:	68a3      	ldr	r3, [r4, #8]
 802438e:	3301      	adds	r3, #1
 8024390:	60a3      	str	r3, [r4, #8]
 8024392:	e783      	b.n	802429c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8024394:	f104 0814 	add.w	r8, r4, #20
 8024398:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802439c:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80243a0:	f8c9 0000 	str.w	r0, [r9]
 80243a4:	f8c9 1004 	str.w	r1, [r9, #4]
 80243a8:	6921      	ldr	r1, [r4, #16]
 80243aa:	3108      	adds	r1, #8
 80243ac:	6121      	str	r1, [r4, #16]
 80243ae:	68a1      	ldr	r1, [r4, #8]
 80243b0:	3101      	adds	r1, #1
 80243b2:	60a1      	str	r1, [r4, #8]
 80243b4:	e7c1      	b.n	802433a <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 80243b6:	f104 0314 	add.w	r3, r4, #20
 80243ba:	6925      	ldr	r5, [r4, #16]
 80243bc:	cb03      	ldmia	r3!, {r0, r1}
 80243be:	6028      	str	r0, [r5, #0]
 80243c0:	6069      	str	r1, [r5, #4]
 80243c2:	6923      	ldr	r3, [r4, #16]
 80243c4:	3308      	adds	r3, #8
 80243c6:	6123      	str	r3, [r4, #16]
 80243c8:	68a3      	ldr	r3, [r4, #8]
 80243ca:	3301      	adds	r3, #1
 80243cc:	60a3      	str	r3, [r4, #8]
 80243ce:	e66a      	b.n	80240a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 80243d0:	f104 0314 	add.w	r3, r4, #20
 80243d4:	6925      	ldr	r5, [r4, #16]
 80243d6:	cb03      	ldmia	r3!, {r0, r1}
 80243d8:	6028      	str	r0, [r5, #0]
 80243da:	6069      	str	r1, [r5, #4]
 80243dc:	6923      	ldr	r3, [r4, #16]
 80243de:	3308      	adds	r3, #8
 80243e0:	6123      	str	r3, [r4, #16]
 80243e2:	68a3      	ldr	r3, [r4, #8]
 80243e4:	3301      	adds	r3, #1
 80243e6:	60a3      	str	r3, [r4, #8]
 80243e8:	e6be      	b.n	8024168 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 80243ea:	f00b 031f 	and.w	r3, fp, #31
 80243ee:	114f      	asrs	r7, r1, #5
 80243f0:	8b20      	ldrh	r0, [r4, #24]
 80243f2:	f001 011f 	and.w	r1, r1, #31
 80243f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80243f8:	9b04      	ldr	r3, [sp, #16]
 80243fa:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 80243fe:	429f      	cmp	r7, r3
 8024400:	d10a      	bne.n	8024418 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 8024402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024404:	4418      	add	r0, r3
 8024406:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024408:	4419      	add	r1, r3
 802440a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802440c:	8320      	strh	r0, [r4, #24]
 802440e:	fb03 9901 	mla	r9, r3, r1, r9
 8024412:	f8a4 901a 	strh.w	r9, [r4, #26]
 8024416:	e6af      	b.n	8024178 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024418:	2d00      	cmp	r5, #0
 802441a:	f2c0 809b 	blt.w	8024554 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 802441e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8024420:	f1c1 0320 	rsb	r3, r1, #32
 8024424:	4373      	muls	r3, r6
 8024426:	2601      	movs	r6, #1
 8024428:	960e      	str	r6, [sp, #56]	; 0x38
 802442a:	2620      	movs	r6, #32
 802442c:	960d      	str	r6, [sp, #52]	; 0x34
 802442e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024430:	fb93 f6f5 	sdiv	r6, r3, r5
 8024434:	4411      	add	r1, r2
 8024436:	fb05 3316 	mls	r3, r5, r6, r3
 802443a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802443c:	2b00      	cmp	r3, #0
 802443e:	4417      	add	r7, r2
 8024440:	9a00      	ldr	r2, [sp, #0]
 8024442:	bfbc      	itt	lt
 8024444:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8024448:	195b      	addlt	r3, r3, r5
 802444a:	0412      	lsls	r2, r2, #16
 802444c:	fb06 9101 	mla	r1, r6, r1, r9
 8024450:	4430      	add	r0, r6
 8024452:	eb07 0902 	add.w	r9, r7, r2
 8024456:	9210      	str	r2, [sp, #64]	; 0x40
 8024458:	b200      	sxth	r0, r0
 802445a:	b209      	sxth	r1, r1
 802445c:	45c1      	cmp	r9, r8
 802445e:	8320      	strh	r0, [r4, #24]
 8024460:	8361      	strh	r1, [r4, #26]
 8024462:	d017      	beq.n	8024494 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 8024464:	ea50 0201 	orrs.w	r2, r0, r1
 8024468:	d00d      	beq.n	8024486 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 802446a:	f1be 0f00 	cmp.w	lr, #0
 802446e:	db0a      	blt.n	8024486 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024470:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024472:	4571      	cmp	r1, lr
 8024474:	dd07      	ble.n	8024486 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024476:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802447a:	4288      	cmp	r0, r1
 802447c:	d372      	bcc.n	8024564 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 802447e:	f04f 0201 	mov.w	r2, #1
 8024482:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024486:	9a00      	ldr	r2, [sp, #0]
 8024488:	82a7      	strh	r7, [r4, #20]
 802448a:	82e2      	strh	r2, [r4, #22]
 802448c:	f8a4 c018 	strh.w	ip, [r4, #24]
 8024490:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8024494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024496:	eb02 0e06 	add.w	lr, r2, r6
 802449a:	9a04      	ldr	r2, [sp, #16]
 802449c:	42ba      	cmp	r2, r7
 802449e:	d049      	beq.n	8024534 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 80244a0:	9a02      	ldr	r2, [sp, #8]
 80244a2:	1b5b      	subs	r3, r3, r5
 80244a4:	eba2 010e 	sub.w	r1, r2, lr
 80244a8:	440e      	add	r6, r1
 80244aa:	0176      	lsls	r6, r6, #5
 80244ac:	fb96 f8f5 	sdiv	r8, r6, r5
 80244b0:	fb05 6618 	mls	r6, r5, r8, r6
 80244b4:	2e00      	cmp	r6, #0
 80244b6:	bfbc      	itt	lt
 80244b8:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80244bc:	1976      	addlt	r6, r6, r5
 80244be:	f108 0201 	add.w	r2, r8, #1
 80244c2:	9211      	str	r2, [sp, #68]	; 0x44
 80244c4:	199b      	adds	r3, r3, r6
 80244c6:	8b20      	ldrh	r0, [r4, #24]
 80244c8:	8b61      	ldrh	r1, [r4, #26]
 80244ca:	bf54      	ite	pl
 80244cc:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 80244d0:	46c1      	movmi	r9, r8
 80244d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80244d4:	bf58      	it	pl
 80244d6:	1b5b      	subpl	r3, r3, r5
 80244d8:	4448      	add	r0, r9
 80244da:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 80244de:	4417      	add	r7, r2
 80244e0:	44ce      	add	lr, r9
 80244e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80244e4:	b200      	sxth	r0, r0
 80244e6:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 80244ea:	b209      	sxth	r1, r1
 80244ec:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 80244f0:	443a      	add	r2, r7
 80244f2:	8320      	strh	r0, [r4, #24]
 80244f4:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 80244f8:	8361      	strh	r1, [r4, #26]
 80244fa:	4552      	cmp	r2, sl
 80244fc:	d017      	beq.n	802452e <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 80244fe:	ea50 0201 	orrs.w	r2, r0, r1
 8024502:	d00d      	beq.n	8024520 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024504:	f1b9 0f00 	cmp.w	r9, #0
 8024508:	db0a      	blt.n	8024520 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802450a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802450c:	4549      	cmp	r1, r9
 802450e:	dd07      	ble.n	8024520 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8024510:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024514:	4288      	cmp	r0, r1
 8024516:	d336      	bcc.n	8024586 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8024518:	f04f 0201 	mov.w	r2, #1
 802451c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8024520:	9a00      	ldr	r2, [sp, #0]
 8024522:	82a7      	strh	r7, [r4, #20]
 8024524:	82e2      	strh	r2, [r4, #22]
 8024526:	f8a4 c018 	strh.w	ip, [r4, #24]
 802452a:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802452e:	9a04      	ldr	r2, [sp, #16]
 8024530:	42ba      	cmp	r2, r7
 8024532:	d1c7      	bne.n	80244c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8024534:	9b02      	ldr	r3, [sp, #8]
 8024536:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024538:	eba3 0e0e 	sub.w	lr, r3, lr
 802453c:	8b23      	ldrh	r3, [r4, #24]
 802453e:	3120      	adds	r1, #32
 8024540:	4473      	add	r3, lr
 8024542:	8323      	strh	r3, [r4, #24]
 8024544:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024546:	1ac9      	subs	r1, r1, r3
 8024548:	8b63      	ldrh	r3, [r4, #26]
 802454a:	fb0e 3e01 	mla	lr, lr, r1, r3
 802454e:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8024552:	e611      	b.n	8024178 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8024554:	f04f 36ff 	mov.w	r6, #4294967295
 8024558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802455a:	426d      	negs	r5, r5
 802455c:	960e      	str	r6, [sp, #56]	; 0x38
 802455e:	2600      	movs	r6, #0
 8024560:	434b      	muls	r3, r1
 8024562:	e763      	b.n	802442c <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 8024564:	f104 0e14 	add.w	lr, r4, #20
 8024568:	f8d4 8010 	ldr.w	r8, [r4, #16]
 802456c:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 8024570:	f8c8 0000 	str.w	r0, [r8]
 8024574:	f8c8 1004 	str.w	r1, [r8, #4]
 8024578:	6921      	ldr	r1, [r4, #16]
 802457a:	3108      	adds	r1, #8
 802457c:	6121      	str	r1, [r4, #16]
 802457e:	68a1      	ldr	r1, [r4, #8]
 8024580:	3101      	adds	r1, #1
 8024582:	60a1      	str	r1, [r4, #8]
 8024584:	e77f      	b.n	8024486 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 8024586:	f104 0914 	add.w	r9, r4, #20
 802458a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802458e:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8024592:	f8ca 0000 	str.w	r0, [sl]
 8024596:	f8ca 1004 	str.w	r1, [sl, #4]
 802459a:	6921      	ldr	r1, [r4, #16]
 802459c:	3108      	adds	r1, #8
 802459e:	6121      	str	r1, [r4, #16]
 80245a0:	68a1      	ldr	r1, [r4, #8]
 80245a2:	3101      	adds	r1, #1
 80245a4:	60a1      	str	r1, [r4, #8]
 80245a6:	e7bb      	b.n	8024520 <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80245a8:	f104 0314 	add.w	r3, r4, #20
 80245ac:	6925      	ldr	r5, [r4, #16]
 80245ae:	cb03      	ldmia	r3!, {r0, r1}
 80245b0:	6028      	str	r0, [r5, #0]
 80245b2:	6069      	str	r1, [r5, #4]
 80245b4:	6923      	ldr	r3, [r4, #16]
 80245b6:	3308      	adds	r3, #8
 80245b8:	6123      	str	r3, [r4, #16]
 80245ba:	68a3      	ldr	r3, [r4, #8]
 80245bc:	3301      	adds	r3, #1
 80245be:	60a3      	str	r3, [r4, #8]
 80245c0:	e5fd      	b.n	80241be <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 80245c2:	f104 0314 	add.w	r3, r4, #20
 80245c6:	6925      	ldr	r5, [r4, #16]
 80245c8:	cb03      	ldmia	r3!, {r0, r1}
 80245ca:	6028      	str	r0, [r5, #0]
 80245cc:	6069      	str	r1, [r5, #4]
 80245ce:	6923      	ldr	r3, [r4, #16]
 80245d0:	3308      	adds	r3, #8
 80245d2:	6123      	str	r3, [r4, #16]
 80245d4:	68a3      	ldr	r3, [r4, #8]
 80245d6:	3301      	adds	r3, #1
 80245d8:	60a3      	str	r3, [r4, #8]
 80245da:	e625      	b.n	8024228 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 80245dc:	9b05      	ldr	r3, [sp, #20]
 80245de:	ea4f 176b 	mov.w	r7, fp, asr #5
 80245e2:	f00b 081f 	and.w	r8, fp, #31
 80245e6:	8b20      	ldrh	r0, [r4, #24]
 80245e8:	f003 031f 	and.w	r3, r3, #31
 80245ec:	4577      	cmp	r7, lr
 80245ee:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 80245f2:	9302      	str	r3, [sp, #8]
 80245f4:	9b03      	ldr	r3, [sp, #12]
 80245f6:	eba3 050c 	sub.w	r5, r3, ip
 80245fa:	d108      	bne.n	802460e <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 80245fc:	9b02      	ldr	r3, [sp, #8]
 80245fe:	4428      	add	r0, r5
 8024600:	4498      	add	r8, r3
 8024602:	8320      	strh	r0, [r4, #24]
 8024604:	fb05 9508 	mla	r5, r5, r8, r9
 8024608:	8365      	strh	r5, [r4, #26]
 802460a:	f7ff bb4f 	b.w	8023cac <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802460e:	9b05      	ldr	r3, [sp, #20]
 8024610:	ebb3 030b 	subs.w	r3, r3, fp
 8024614:	f100 809c 	bmi.w	8024750 <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 8024618:	f1c8 0120 	rsb	r1, r8, #32
 802461c:	2201      	movs	r2, #1
 802461e:	f04f 0b20 	mov.w	fp, #32
 8024622:	434d      	muls	r5, r1
 8024624:	9201      	str	r2, [sp, #4]
 8024626:	9a01      	ldr	r2, [sp, #4]
 8024628:	44d8      	add	r8, fp
 802462a:	fb95 f6f3 	sdiv	r6, r5, r3
 802462e:	fb03 5516 	mls	r5, r3, r6, r5
 8024632:	4417      	add	r7, r2
 8024634:	9a00      	ldr	r2, [sp, #0]
 8024636:	2d00      	cmp	r5, #0
 8024638:	ea4f 4202 	mov.w	r2, r2, lsl #16
 802463c:	bfbc      	itt	lt
 802463e:	f106 36ff 	addlt.w	r6, r6, #4294967295
 8024642:	18ed      	addlt	r5, r5, r3
 8024644:	eb07 0a02 	add.w	sl, r7, r2
 8024648:	9204      	str	r2, [sp, #16]
 802464a:	fb06 9808 	mla	r8, r6, r8, r9
 802464e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8024652:	4430      	add	r0, r6
 8024654:	fa0f f188 	sxth.w	r1, r8
 8024658:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 802465c:	b200      	sxth	r0, r0
 802465e:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8024662:	8361      	strh	r1, [r4, #26]
 8024664:	8320      	strh	r0, [r4, #24]
 8024666:	45ca      	cmp	sl, r9
 8024668:	d015      	beq.n	8024696 <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 802466a:	ea50 0201 	orrs.w	r2, r0, r1
 802466e:	d00c      	beq.n	802468a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8024670:	f1b8 0f00 	cmp.w	r8, #0
 8024674:	db09      	blt.n	802468a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8024676:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024678:	4541      	cmp	r1, r8
 802467a:	dd06      	ble.n	802468a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 802467c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024680:	4288      	cmp	r0, r1
 8024682:	d36e      	bcc.n	8024762 <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 8024684:	2101      	movs	r1, #1
 8024686:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 802468a:	2100      	movs	r1, #0
 802468c:	9a00      	ldr	r2, [sp, #0]
 802468e:	82a7      	strh	r7, [r4, #20]
 8024690:	82e2      	strh	r2, [r4, #22]
 8024692:	8321      	strh	r1, [r4, #24]
 8024694:	8361      	strh	r1, [r4, #26]
 8024696:	45be      	cmp	lr, r7
 8024698:	44b4      	add	ip, r6
 802469a:	d048      	beq.n	802472e <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 802469c:	9a03      	ldr	r2, [sp, #12]
 802469e:	1aed      	subs	r5, r5, r3
 80246a0:	eba2 010c 	sub.w	r1, r2, ip
 80246a4:	440e      	add	r6, r1
 80246a6:	0176      	lsls	r6, r6, #5
 80246a8:	fb96 f8f3 	sdiv	r8, r6, r3
 80246ac:	fb03 6618 	mls	r6, r3, r8, r6
 80246b0:	2e00      	cmp	r6, #0
 80246b2:	bfbc      	itt	lt
 80246b4:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80246b8:	18f6      	addlt	r6, r6, r3
 80246ba:	f108 0201 	add.w	r2, r8, #1
 80246be:	9205      	str	r2, [sp, #20]
 80246c0:	19ad      	adds	r5, r5, r6
 80246c2:	8b20      	ldrh	r0, [r4, #24]
 80246c4:	8b61      	ldrh	r1, [r4, #26]
 80246c6:	bf54      	ite	pl
 80246c8:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 80246cc:	46c1      	movmi	r9, r8
 80246ce:	9a01      	ldr	r2, [sp, #4]
 80246d0:	bf58      	it	pl
 80246d2:	1aed      	subpl	r5, r5, r3
 80246d4:	4448      	add	r0, r9
 80246d6:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 80246da:	4417      	add	r7, r2
 80246dc:	44cc      	add	ip, r9
 80246de:	9a04      	ldr	r2, [sp, #16]
 80246e0:	b200      	sxth	r0, r0
 80246e2:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 80246e6:	b209      	sxth	r1, r1
 80246e8:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 80246ec:	443a      	add	r2, r7
 80246ee:	8320      	strh	r0, [r4, #24]
 80246f0:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 80246f4:	8361      	strh	r1, [r4, #26]
 80246f6:	4552      	cmp	r2, sl
 80246f8:	d017      	beq.n	802472a <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 80246fa:	ea50 0201 	orrs.w	r2, r0, r1
 80246fe:	d00d      	beq.n	802471c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8024700:	f1b9 0f00 	cmp.w	r9, #0
 8024704:	db0a      	blt.n	802471c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8024706:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8024708:	4549      	cmp	r1, r9
 802470a:	dd07      	ble.n	802471c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802470c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8024710:	4288      	cmp	r0, r1
 8024712:	d337      	bcc.n	8024784 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 8024714:	f04f 0201 	mov.w	r2, #1
 8024718:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802471c:	9a00      	ldr	r2, [sp, #0]
 802471e:	82a7      	strh	r7, [r4, #20]
 8024720:	82e2      	strh	r2, [r4, #22]
 8024722:	f04f 0200 	mov.w	r2, #0
 8024726:	8322      	strh	r2, [r4, #24]
 8024728:	8362      	strh	r2, [r4, #26]
 802472a:	45be      	cmp	lr, r7
 802472c:	d1c8      	bne.n	80246c0 <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 802472e:	9b03      	ldr	r3, [sp, #12]
 8024730:	8b62      	ldrh	r2, [r4, #26]
 8024732:	eba3 0c0c 	sub.w	ip, r3, ip
 8024736:	8b23      	ldrh	r3, [r4, #24]
 8024738:	4463      	add	r3, ip
 802473a:	8323      	strh	r3, [r4, #24]
 802473c:	9b02      	ldr	r3, [sp, #8]
 802473e:	3320      	adds	r3, #32
 8024740:	eba3 030b 	sub.w	r3, r3, fp
 8024744:	fb0c 2c03 	mla	ip, ip, r3, r2
 8024748:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802474c:	f7ff baae 	b.w	8023cac <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8024750:	f04f 32ff 	mov.w	r2, #4294967295
 8024754:	fb05 f508 	mul.w	r5, r5, r8
 8024758:	425b      	negs	r3, r3
 802475a:	f04f 0b00 	mov.w	fp, #0
 802475e:	9201      	str	r2, [sp, #4]
 8024760:	e761      	b.n	8024626 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 8024762:	f104 0814 	add.w	r8, r4, #20
 8024766:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802476a:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 802476e:	f8c9 0000 	str.w	r0, [r9]
 8024772:	f8c9 1004 	str.w	r1, [r9, #4]
 8024776:	6921      	ldr	r1, [r4, #16]
 8024778:	3108      	adds	r1, #8
 802477a:	6121      	str	r1, [r4, #16]
 802477c:	68a1      	ldr	r1, [r4, #8]
 802477e:	3101      	adds	r1, #1
 8024780:	60a1      	str	r1, [r4, #8]
 8024782:	e782      	b.n	802468a <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 8024784:	f104 0914 	add.w	r9, r4, #20
 8024788:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802478c:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 8024790:	f8ca 0000 	str.w	r0, [sl]
 8024794:	f8ca 1004 	str.w	r1, [sl, #4]
 8024798:	6921      	ldr	r1, [r4, #16]
 802479a:	3108      	adds	r1, #8
 802479c:	6121      	str	r1, [r4, #16]
 802479e:	68a1      	ldr	r1, [r4, #8]
 80247a0:	3101      	adds	r1, #1
 80247a2:	60a1      	str	r1, [r4, #8]
 80247a4:	e7ba      	b.n	802471c <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

080247a6 <_ZN8touchgfx7Outline6lineToEii>:
 80247a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80247a8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80247aa:	4604      	mov	r4, r0
 80247ac:	460d      	mov	r5, r1
 80247ae:	4616      	mov	r6, r2
 80247b0:	079b      	lsls	r3, r3, #30
 80247b2:	d526      	bpl.n	8024802 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 80247b4:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80247b8:	ea85 0001 	eor.w	r0, r5, r1
 80247bc:	ea86 0302 	eor.w	r3, r6, r2
 80247c0:	4303      	orrs	r3, r0
 80247c2:	d01e      	beq.n	8024802 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 80247c4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80247c6:	114b      	asrs	r3, r1, #5
 80247c8:	9600      	str	r6, [sp, #0]
 80247ca:	4283      	cmp	r3, r0
 80247cc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80247ce:	bfb8      	it	lt
 80247d0:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 80247d2:	3301      	adds	r3, #1
 80247d4:	4283      	cmp	r3, r0
 80247d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80247d8:	bfc8      	it	gt
 80247da:	6363      	strgt	r3, [r4, #52]	; 0x34
 80247dc:	116b      	asrs	r3, r5, #5
 80247de:	4283      	cmp	r3, r0
 80247e0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80247e2:	bfb8      	it	lt
 80247e4:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 80247e6:	3301      	adds	r3, #1
 80247e8:	4283      	cmp	r3, r0
 80247ea:	4620      	mov	r0, r4
 80247ec:	bfc8      	it	gt
 80247ee:	6363      	strgt	r3, [r4, #52]	; 0x34
 80247f0:	462b      	mov	r3, r5
 80247f2:	f7ff f9e3 	bl	8023bbc <_ZN8touchgfx7Outline10renderLineEiiii>
 80247f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80247f8:	f043 0301 	orr.w	r3, r3, #1
 80247fc:	e9c4 5607 	strd	r5, r6, [r4, #28]
 8024800:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024802:	b002      	add	sp, #8
 8024804:	bd70      	pop	{r4, r5, r6, pc}

08024806 <_ZN8touchgfx7Outline6moveToEii>:
 8024806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024808:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802480a:	4615      	mov	r5, r2
 802480c:	4604      	mov	r4, r0
 802480e:	460e      	mov	r6, r1
 8024810:	079a      	lsls	r2, r3, #30
 8024812:	d401      	bmi.n	8024818 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8024814:	f7ff f98c 	bl	8023b30 <_ZN8touchgfx7Outline5resetEv>
 8024818:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802481a:	07db      	lsls	r3, r3, #31
 802481c:	d504      	bpl.n	8024828 <_ZN8touchgfx7Outline6moveToEii+0x22>
 802481e:	4620      	mov	r0, r4
 8024820:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 8024824:	f7ff ffbf 	bl	80247a6 <_ZN8touchgfx7Outline6lineToEii>
 8024828:	ea4f 1c66 	mov.w	ip, r6, asr #5
 802482c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024830:	116f      	asrs	r7, r5, #5
 8024832:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8024836:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 802483a:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802483e:	4291      	cmp	r1, r2
 8024840:	d015      	beq.n	802486e <_ZN8touchgfx7Outline6moveToEii+0x68>
 8024842:	8b61      	ldrh	r1, [r4, #26]
 8024844:	8b22      	ldrh	r2, [r4, #24]
 8024846:	430a      	orrs	r2, r1
 8024848:	d00b      	beq.n	8024862 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802484a:	2b00      	cmp	r3, #0
 802484c:	db09      	blt.n	8024862 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802484e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8024850:	429a      	cmp	r2, r3
 8024852:	dd06      	ble.n	8024862 <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8024854:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8024858:	429a      	cmp	r2, r3
 802485a:	d30d      	bcc.n	8024878 <_ZN8touchgfx7Outline6moveToEii+0x72>
 802485c:	2301      	movs	r3, #1
 802485e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024862:	2300      	movs	r3, #0
 8024864:	f8a4 c014 	strh.w	ip, [r4, #20]
 8024868:	82e7      	strh	r7, [r4, #22]
 802486a:	8323      	strh	r3, [r4, #24]
 802486c:	8363      	strh	r3, [r4, #26]
 802486e:	61e6      	str	r6, [r4, #28]
 8024870:	62a5      	str	r5, [r4, #40]	; 0x28
 8024872:	e9c4 5608 	strd	r5, r6, [r4, #32]
 8024876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024878:	f104 0314 	add.w	r3, r4, #20
 802487c:	6922      	ldr	r2, [r4, #16]
 802487e:	cb03      	ldmia	r3!, {r0, r1}
 8024880:	6010      	str	r0, [r2, #0]
 8024882:	6051      	str	r1, [r2, #4]
 8024884:	6923      	ldr	r3, [r4, #16]
 8024886:	3308      	adds	r3, #8
 8024888:	6123      	str	r3, [r4, #16]
 802488a:	68a3      	ldr	r3, [r4, #8]
 802488c:	3301      	adds	r3, #1
 802488e:	60a3      	str	r3, [r4, #8]
 8024890:	e7e7      	b.n	8024862 <_ZN8touchgfx7Outline6moveToEii+0x5c>

08024892 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8024892:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024896:	b0d1      	sub	sp, #324	; 0x144
 8024898:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 802489c:	466c      	mov	r4, sp
 802489e:	1a0d      	subs	r5, r1, r0
 80248a0:	f100 0208 	add.w	r2, r0, #8
 80248a4:	2d48      	cmp	r5, #72	; 0x48
 80248a6:	f340 80ba 	ble.w	8024a1e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80248aa:	112d      	asrs	r5, r5, #4
 80248ac:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 80248b0:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 80248b4:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 80248b8:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 80248bc:	f9b0 8000 	ldrsh.w	r8, [r0]
 80248c0:	681e      	ldr	r6, [r3, #0]
 80248c2:	6006      	str	r6, [r0, #0]
 80248c4:	685e      	ldr	r6, [r3, #4]
 80248c6:	6046      	str	r6, [r0, #4]
 80248c8:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 80248cc:	f8a3 c004 	strh.w	ip, [r3, #4]
 80248d0:	f8a3 e002 	strh.w	lr, [r3, #2]
 80248d4:	80df      	strh	r7, [r3, #6]
 80248d6:	f1a1 0308 	sub.w	r3, r1, #8
 80248da:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 80248de:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 80248e2:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 80248e6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80248ea:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80248ee:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80248f2:	45ac      	cmp	ip, r5
 80248f4:	dd0f      	ble.n	8024916 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 80248f6:	681d      	ldr	r5, [r3, #0]
 80248f8:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 80248fc:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8024900:	6015      	str	r5, [r2, #0]
 8024902:	685d      	ldr	r5, [r3, #4]
 8024904:	6055      	str	r5, [r2, #4]
 8024906:	f821 7c08 	strh.w	r7, [r1, #-8]
 802490a:	f821 6c06 	strh.w	r6, [r1, #-6]
 802490e:	f821 ec04 	strh.w	lr, [r1, #-4]
 8024912:	f821 cc02 	strh.w	ip, [r1, #-2]
 8024916:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 802491a:	f9b0 7000 	ldrsh.w	r7, [r0]
 802491e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8024922:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8024926:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 802492a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802492e:	4565      	cmp	r5, ip
 8024930:	dd0d      	ble.n	802494e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 8024932:	6815      	ldr	r5, [r2, #0]
 8024934:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8024938:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 802493c:	6005      	str	r5, [r0, #0]
 802493e:	6855      	ldr	r5, [r2, #4]
 8024940:	8107      	strh	r7, [r0, #8]
 8024942:	6045      	str	r5, [r0, #4]
 8024944:	8146      	strh	r6, [r0, #10]
 8024946:	f8a0 e00c 	strh.w	lr, [r0, #12]
 802494a:	f8a0 c00e 	strh.w	ip, [r0, #14]
 802494e:	f9b0 7000 	ldrsh.w	r7, [r0]
 8024952:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8024956:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 802495a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 802495e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 8024962:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 8024966:	45ac      	cmp	ip, r5
 8024968:	dd0f      	ble.n	802498a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802496a:	681d      	ldr	r5, [r3, #0]
 802496c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8024970:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8024974:	6005      	str	r5, [r0, #0]
 8024976:	685d      	ldr	r5, [r3, #4]
 8024978:	6045      	str	r5, [r0, #4]
 802497a:	f821 7c08 	strh.w	r7, [r1, #-8]
 802497e:	f821 6c06 	strh.w	r6, [r1, #-6]
 8024982:	f821 ec04 	strh.w	lr, [r1, #-4]
 8024986:	f821 cc02 	strh.w	ip, [r1, #-2]
 802498a:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 802498e:	f102 0508 	add.w	r5, r2, #8
 8024992:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 8024996:	f9b0 e000 	ldrsh.w	lr, [r0]
 802499a:	462f      	mov	r7, r5
 802499c:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80249a0:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 80249a4:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 80249a8:	45b2      	cmp	sl, r6
 80249aa:	dc18      	bgt.n	80249de <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 80249ac:	3b08      	subs	r3, #8
 80249ae:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 80249b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80249b6:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 80249ba:	45b2      	cmp	sl, r6
 80249bc:	dbf6      	blt.n	80249ac <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 80249be:	42ab      	cmp	r3, r5
 80249c0:	681e      	ldr	r6, [r3, #0]
 80249c2:	d30e      	bcc.n	80249e2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 80249c4:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 80249c8:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80249cc:	602e      	str	r6, [r5, #0]
 80249ce:	685e      	ldr	r6, [r3, #4]
 80249d0:	606e      	str	r6, [r5, #4]
 80249d2:	f8a3 9000 	strh.w	r9, [r3]
 80249d6:	f8a3 8002 	strh.w	r8, [r3, #2]
 80249da:	809f      	strh	r7, [r3, #4]
 80249dc:	80da      	strh	r2, [r3, #6]
 80249de:	462a      	mov	r2, r5
 80249e0:	e7d3      	b.n	802498a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80249e2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80249e6:	6006      	str	r6, [r0, #0]
 80249e8:	685e      	ldr	r6, [r3, #4]
 80249ea:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 80249ee:	6046      	str	r6, [r0, #4]
 80249f0:	1a1e      	subs	r6, r3, r0
 80249f2:	80da      	strh	r2, [r3, #6]
 80249f4:	1b4a      	subs	r2, r1, r5
 80249f6:	f8a3 e000 	strh.w	lr, [r3]
 80249fa:	10d2      	asrs	r2, r2, #3
 80249fc:	f8a3 c002 	strh.w	ip, [r3, #2]
 8024a00:	f8a3 8004 	strh.w	r8, [r3, #4]
 8024a04:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8024a08:	bfb5      	itete	lt
 8024a0a:	e9c4 0300 	strdlt	r0, r3, [r4]
 8024a0e:	4607      	movge	r7, r0
 8024a10:	460b      	movlt	r3, r1
 8024a12:	e9c4 5100 	strdge	r5, r1, [r4]
 8024a16:	4638      	mov	r0, r7
 8024a18:	3408      	adds	r4, #8
 8024a1a:	4619      	mov	r1, r3
 8024a1c:	e73f      	b.n	802489e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8024a1e:	4291      	cmp	r1, r2
 8024a20:	d925      	bls.n	8024a6e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 8024a22:	f1a2 0310 	sub.w	r3, r2, #16
 8024a26:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 8024a2a:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 8024a2e:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 8024a32:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8024a36:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8024a3a:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 8024a3e:	42b5      	cmp	r5, r6
 8024a40:	dd13      	ble.n	8024a6a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 8024a42:	461d      	mov	r5, r3
 8024a44:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8024a48:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8024a4c:	3b08      	subs	r3, #8
 8024a4e:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8024a52:	619e      	str	r6, [r3, #24]
 8024a54:	42a8      	cmp	r0, r5
 8024a56:	686e      	ldr	r6, [r5, #4]
 8024a58:	f8a3 c010 	strh.w	ip, [r3, #16]
 8024a5c:	61de      	str	r6, [r3, #28]
 8024a5e:	825f      	strh	r7, [r3, #18]
 8024a60:	f8a3 8014 	strh.w	r8, [r3, #20]
 8024a64:	f8a3 e016 	strh.w	lr, [r3, #22]
 8024a68:	d1dd      	bne.n	8024a26 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 8024a6a:	3208      	adds	r2, #8
 8024a6c:	e7d7      	b.n	8024a1e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 8024a6e:	466b      	mov	r3, sp
 8024a70:	429c      	cmp	r4, r3
 8024a72:	d903      	bls.n	8024a7c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 8024a74:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8024a78:	3c08      	subs	r4, #8
 8024a7a:	e710      	b.n	802489e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 8024a7c:	b051      	add	sp, #324	; 0x144
 8024a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024a82 <_ZN8touchgfx7Outline9sortCellsEv>:
 8024a82:	6881      	ldr	r1, [r0, #8]
 8024a84:	b111      	cbz	r1, 8024a8c <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 8024a86:	68c0      	ldr	r0, [r0, #12]
 8024a88:	f7ff bf03 	b.w	8024892 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8024a8c:	4770      	bx	lr

08024a8e <_ZN8touchgfx7Outline8getCellsEv>:
 8024a8e:	b510      	push	{r4, lr}
 8024a90:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8024a92:	4604      	mov	r4, r0
 8024a94:	07da      	lsls	r2, r3, #31
 8024a96:	d507      	bpl.n	8024aa8 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 8024a98:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 8024a9c:	f7ff fe83 	bl	80247a6 <_ZN8touchgfx7Outline6lineToEii>
 8024aa0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024aa2:	f023 0301 	bic.w	r3, r3, #1
 8024aa6:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024aa8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024aaa:	079b      	lsls	r3, r3, #30
 8024aac:	d51a      	bpl.n	8024ae4 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 8024aae:	8b62      	ldrh	r2, [r4, #26]
 8024ab0:	8b23      	ldrh	r3, [r4, #24]
 8024ab2:	4313      	orrs	r3, r2
 8024ab4:	d00d      	beq.n	8024ad2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024ab6:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8024aba:	2b00      	cmp	r3, #0
 8024abc:	db09      	blt.n	8024ad2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024abe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8024ac0:	4293      	cmp	r3, r2
 8024ac2:	da06      	bge.n	8024ad2 <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8024ac4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8024ac8:	429a      	cmp	r2, r3
 8024aca:	d80d      	bhi.n	8024ae8 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8024acc:	2301      	movs	r3, #1
 8024ace:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8024ad2:	68a0      	ldr	r0, [r4, #8]
 8024ad4:	b138      	cbz	r0, 8024ae6 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8024ad6:	4620      	mov	r0, r4
 8024ad8:	f7ff ffd3 	bl	8024a82 <_ZN8touchgfx7Outline9sortCellsEv>
 8024adc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024ade:	f023 0302 	bic.w	r3, r3, #2
 8024ae2:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024ae4:	68e0      	ldr	r0, [r4, #12]
 8024ae6:	bd10      	pop	{r4, pc}
 8024ae8:	f104 0314 	add.w	r3, r4, #20
 8024aec:	6922      	ldr	r2, [r4, #16]
 8024aee:	cb03      	ldmia	r3!, {r0, r1}
 8024af0:	6010      	str	r0, [r2, #0]
 8024af2:	6051      	str	r1, [r2, #4]
 8024af4:	6923      	ldr	r3, [r4, #16]
 8024af6:	3308      	adds	r3, #8
 8024af8:	6123      	str	r3, [r4, #16]
 8024afa:	68a3      	ldr	r3, [r4, #8]
 8024afc:	3301      	adds	r3, #1
 8024afe:	60a3      	str	r3, [r4, #8]
 8024b00:	e7e7      	b.n	8024ad2 <_ZN8touchgfx7Outline8getCellsEv+0x44>

08024b02 <_ZN8touchgfx8ScanlineD1Ev>:
 8024b02:	4770      	bx	lr

08024b04 <_ZN8touchgfx8ScanlineD0Ev>:
 8024b04:	b510      	push	{r4, lr}
 8024b06:	4604      	mov	r4, r0
 8024b08:	2124      	movs	r1, #36	; 0x24
 8024b0a:	f000 f87a 	bl	8024c02 <_ZdlPvj>
 8024b0e:	4620      	mov	r0, r4
 8024b10:	bd10      	pop	{r4, pc}

08024b12 <_ZN8touchgfx8Scanline5resetEv>:
 8024b12:	b510      	push	{r4, lr}
 8024b14:	4604      	mov	r4, r0
 8024b16:	f7f3 f993 	bl	8017e40 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8024b1a:	61a0      	str	r0, [r4, #24]
 8024b1c:	f7f3 f996 	bl	8017e4c <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 8024b20:	61e0      	str	r0, [r4, #28]
 8024b22:	f7f3 f999 	bl	8017e58 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8024b26:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024b2a:	6220      	str	r0, [r4, #32]
 8024b2c:	6160      	str	r0, [r4, #20]
 8024b2e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8024b32:	69e3      	ldr	r3, [r4, #28]
 8024b34:	6123      	str	r3, [r4, #16]
 8024b36:	2300      	movs	r3, #0
 8024b38:	60e3      	str	r3, [r4, #12]
 8024b3a:	bd10      	pop	{r4, pc}

08024b3c <_ZN8touchgfx8ScanlineC1Ev>:
 8024b3c:	4b07      	ldr	r3, [pc, #28]	; (8024b5c <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 8024b3e:	b510      	push	{r4, lr}
 8024b40:	6003      	str	r3, [r0, #0]
 8024b42:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8024b46:	4604      	mov	r4, r0
 8024b48:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8024b4c:	2300      	movs	r3, #0
 8024b4e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8024b52:	6143      	str	r3, [r0, #20]
 8024b54:	f7ff ffdd 	bl	8024b12 <_ZN8touchgfx8Scanline5resetEv>
 8024b58:	4620      	mov	r0, r4
 8024b5a:	bd10      	pop	{r4, pc}
 8024b5c:	0802bf08 	.word	0x0802bf08

08024b60 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 8024b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024b64:	1e0c      	subs	r4, r1, #0
 8024b66:	4605      	mov	r5, r0
 8024b68:	4617      	mov	r7, r2
 8024b6a:	461e      	mov	r6, r3
 8024b6c:	da03      	bge.n	8024b76 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 8024b6e:	4426      	add	r6, r4
 8024b70:	2e01      	cmp	r6, #1
 8024b72:	d421      	bmi.n	8024bb8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8024b74:	2400      	movs	r4, #0
 8024b76:	f7f3 f95d 	bl	8017e34 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024b7a:	42a0      	cmp	r0, r4
 8024b7c:	d91c      	bls.n	8024bb8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 8024b7e:	eb04 0806 	add.w	r8, r4, r6
 8024b82:	f7f3 f957 	bl	8017e34 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024b86:	4580      	cmp	r8, r0
 8024b88:	d902      	bls.n	8024b90 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 8024b8a:	f7f3 f953 	bl	8017e34 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8024b8e:	1b06      	subs	r6, r0, r4
 8024b90:	69a8      	ldr	r0, [r5, #24]
 8024b92:	4632      	mov	r2, r6
 8024b94:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8024b98:	4420      	add	r0, r4
 8024b9a:	f7f4 fe92 	bl	80198c2 <_ZN8touchgfx6memsetEPvhm>
 8024b9e:	686b      	ldr	r3, [r5, #4]
 8024ba0:	b2b2      	uxth	r2, r6
 8024ba2:	3301      	adds	r3, #1
 8024ba4:	42a3      	cmp	r3, r4
 8024ba6:	696b      	ldr	r3, [r5, #20]
 8024ba8:	d108      	bne.n	8024bbc <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 8024baa:	8819      	ldrh	r1, [r3, #0]
 8024bac:	440a      	add	r2, r1
 8024bae:	801a      	strh	r2, [r3, #0]
 8024bb0:	3c01      	subs	r4, #1
 8024bb2:	4434      	add	r4, r6
 8024bb4:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8024bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024bbc:	1c99      	adds	r1, r3, #2
 8024bbe:	6169      	str	r1, [r5, #20]
 8024bc0:	805a      	strh	r2, [r3, #2]
 8024bc2:	692b      	ldr	r3, [r5, #16]
 8024bc4:	1c9a      	adds	r2, r3, #2
 8024bc6:	612a      	str	r2, [r5, #16]
 8024bc8:	805c      	strh	r4, [r3, #2]
 8024bca:	68eb      	ldr	r3, [r5, #12]
 8024bcc:	3301      	adds	r3, #1
 8024bce:	60eb      	str	r3, [r5, #12]
 8024bd0:	e7ee      	b.n	8024bb0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

08024bd2 <_ZN8touchgfx15RenderingBufferC1Ev>:
 8024bd2:	2200      	movs	r2, #0
 8024bd4:	6002      	str	r2, [r0, #0]
 8024bd6:	7102      	strb	r2, [r0, #4]
 8024bd8:	6102      	str	r2, [r0, #16]
 8024bda:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8024bde:	4770      	bx	lr

08024be0 <_ZN8touchgfx15RenderingBufferD1Ev>:
 8024be0:	4770      	bx	lr

08024be2 <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 8024be2:	6083      	str	r3, [r0, #8]
 8024be4:	9b00      	ldr	r3, [sp, #0]
 8024be6:	6001      	str	r1, [r0, #0]
 8024be8:	60c3      	str	r3, [r0, #12]
 8024bea:	9b01      	ldr	r3, [sp, #4]
 8024bec:	7102      	strb	r2, [r0, #4]
 8024bee:	6103      	str	r3, [r0, #16]
 8024bf0:	4770      	bx	lr

08024bf2 <__aeabi_atexit>:
 8024bf2:	460b      	mov	r3, r1
 8024bf4:	4601      	mov	r1, r0
 8024bf6:	4618      	mov	r0, r3
 8024bf8:	f000 b852 	b.w	8024ca0 <__cxa_atexit>

08024bfc <__cxa_pure_virtual>:
 8024bfc:	b508      	push	{r3, lr}
 8024bfe:	f000 f81f 	bl	8024c40 <_ZSt9terminatev>

08024c02 <_ZdlPvj>:
 8024c02:	f000 b80f 	b.w	8024c24 <_ZdlPv>

08024c06 <__cxa_guard_acquire>:
 8024c06:	6803      	ldr	r3, [r0, #0]
 8024c08:	07db      	lsls	r3, r3, #31
 8024c0a:	d406      	bmi.n	8024c1a <__cxa_guard_acquire+0x14>
 8024c0c:	7843      	ldrb	r3, [r0, #1]
 8024c0e:	b103      	cbz	r3, 8024c12 <__cxa_guard_acquire+0xc>
 8024c10:	deff      	udf	#255	; 0xff
 8024c12:	2301      	movs	r3, #1
 8024c14:	7043      	strb	r3, [r0, #1]
 8024c16:	4618      	mov	r0, r3
 8024c18:	4770      	bx	lr
 8024c1a:	2000      	movs	r0, #0
 8024c1c:	4770      	bx	lr

08024c1e <__cxa_guard_release>:
 8024c1e:	2301      	movs	r3, #1
 8024c20:	6003      	str	r3, [r0, #0]
 8024c22:	4770      	bx	lr

08024c24 <_ZdlPv>:
 8024c24:	f000 b88e 	b.w	8024d44 <free>

08024c28 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8024c28:	b508      	push	{r3, lr}
 8024c2a:	4780      	blx	r0
 8024c2c:	f000 f80d 	bl	8024c4a <abort>

08024c30 <_ZSt13get_terminatev>:
 8024c30:	4b02      	ldr	r3, [pc, #8]	; (8024c3c <_ZSt13get_terminatev+0xc>)
 8024c32:	6818      	ldr	r0, [r3, #0]
 8024c34:	f3bf 8f5b 	dmb	ish
 8024c38:	4770      	bx	lr
 8024c3a:	bf00      	nop
 8024c3c:	200000a4 	.word	0x200000a4

08024c40 <_ZSt9terminatev>:
 8024c40:	b508      	push	{r3, lr}
 8024c42:	f7ff fff5 	bl	8024c30 <_ZSt13get_terminatev>
 8024c46:	f7ff ffef 	bl	8024c28 <_ZN10__cxxabiv111__terminateEPFvvE>

08024c4a <abort>:
 8024c4a:	b508      	push	{r3, lr}
 8024c4c:	2006      	movs	r0, #6
 8024c4e:	f000 fc3d 	bl	80254cc <raise>
 8024c52:	2001      	movs	r0, #1
 8024c54:	f7dc ff96 	bl	8001b84 <_exit>

08024c58 <__assert_func>:
 8024c58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024c5a:	461c      	mov	r4, r3
 8024c5c:	4b09      	ldr	r3, [pc, #36]	; (8024c84 <__assert_func+0x2c>)
 8024c5e:	681b      	ldr	r3, [r3, #0]
 8024c60:	4605      	mov	r5, r0
 8024c62:	68d8      	ldr	r0, [r3, #12]
 8024c64:	b152      	cbz	r2, 8024c7c <__assert_func+0x24>
 8024c66:	4b08      	ldr	r3, [pc, #32]	; (8024c88 <__assert_func+0x30>)
 8024c68:	9100      	str	r1, [sp, #0]
 8024c6a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8024c6e:	4907      	ldr	r1, [pc, #28]	; (8024c8c <__assert_func+0x34>)
 8024c70:	462b      	mov	r3, r5
 8024c72:	4622      	mov	r2, r4
 8024c74:	f000 f828 	bl	8024cc8 <fiprintf>
 8024c78:	f7ff ffe7 	bl	8024c4a <abort>
 8024c7c:	4b04      	ldr	r3, [pc, #16]	; (8024c90 <__assert_func+0x38>)
 8024c7e:	461a      	mov	r2, r3
 8024c80:	e7f2      	b.n	8024c68 <__assert_func+0x10>
 8024c82:	bf00      	nop
 8024c84:	200000a8 	.word	0x200000a8
 8024c88:	0802bf10 	.word	0x0802bf10
 8024c8c:	0802bf1d 	.word	0x0802bf1d
 8024c90:	0802bf4b 	.word	0x0802bf4b

08024c94 <atexit>:
 8024c94:	2300      	movs	r3, #0
 8024c96:	4601      	mov	r1, r0
 8024c98:	461a      	mov	r2, r3
 8024c9a:	4618      	mov	r0, r3
 8024c9c:	f000 bcf2 	b.w	8025684 <__register_exitproc>

08024ca0 <__cxa_atexit>:
 8024ca0:	b510      	push	{r4, lr}
 8024ca2:	4c05      	ldr	r4, [pc, #20]	; (8024cb8 <__cxa_atexit+0x18>)
 8024ca4:	4613      	mov	r3, r2
 8024ca6:	b12c      	cbz	r4, 8024cb4 <__cxa_atexit+0x14>
 8024ca8:	460a      	mov	r2, r1
 8024caa:	4601      	mov	r1, r0
 8024cac:	2002      	movs	r0, #2
 8024cae:	f000 fce9 	bl	8025684 <__register_exitproc>
 8024cb2:	bd10      	pop	{r4, pc}
 8024cb4:	4620      	mov	r0, r4
 8024cb6:	e7fc      	b.n	8024cb2 <__cxa_atexit+0x12>
 8024cb8:	08025685 	.word	0x08025685

08024cbc <__errno>:
 8024cbc:	4b01      	ldr	r3, [pc, #4]	; (8024cc4 <__errno+0x8>)
 8024cbe:	6818      	ldr	r0, [r3, #0]
 8024cc0:	4770      	bx	lr
 8024cc2:	bf00      	nop
 8024cc4:	200000a8 	.word	0x200000a8

08024cc8 <fiprintf>:
 8024cc8:	b40e      	push	{r1, r2, r3}
 8024cca:	b503      	push	{r0, r1, lr}
 8024ccc:	4601      	mov	r1, r0
 8024cce:	ab03      	add	r3, sp, #12
 8024cd0:	4805      	ldr	r0, [pc, #20]	; (8024ce8 <fiprintf+0x20>)
 8024cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8024cd6:	6800      	ldr	r0, [r0, #0]
 8024cd8:	9301      	str	r3, [sp, #4]
 8024cda:	f000 f921 	bl	8024f20 <_vfiprintf_r>
 8024cde:	b002      	add	sp, #8
 8024ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8024ce4:	b003      	add	sp, #12
 8024ce6:	4770      	bx	lr
 8024ce8:	200000a8 	.word	0x200000a8

08024cec <__libc_init_array>:
 8024cec:	b570      	push	{r4, r5, r6, lr}
 8024cee:	4e0d      	ldr	r6, [pc, #52]	; (8024d24 <__libc_init_array+0x38>)
 8024cf0:	4c0d      	ldr	r4, [pc, #52]	; (8024d28 <__libc_init_array+0x3c>)
 8024cf2:	1ba4      	subs	r4, r4, r6
 8024cf4:	10a4      	asrs	r4, r4, #2
 8024cf6:	2500      	movs	r5, #0
 8024cf8:	42a5      	cmp	r5, r4
 8024cfa:	d109      	bne.n	8024d10 <__libc_init_array+0x24>
 8024cfc:	4e0b      	ldr	r6, [pc, #44]	; (8024d2c <__libc_init_array+0x40>)
 8024cfe:	4c0c      	ldr	r4, [pc, #48]	; (8024d30 <__libc_init_array+0x44>)
 8024d00:	f000 ffb0 	bl	8025c64 <_init>
 8024d04:	1ba4      	subs	r4, r4, r6
 8024d06:	10a4      	asrs	r4, r4, #2
 8024d08:	2500      	movs	r5, #0
 8024d0a:	42a5      	cmp	r5, r4
 8024d0c:	d105      	bne.n	8024d1a <__libc_init_array+0x2e>
 8024d0e:	bd70      	pop	{r4, r5, r6, pc}
 8024d10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8024d14:	4798      	blx	r3
 8024d16:	3501      	adds	r5, #1
 8024d18:	e7ee      	b.n	8024cf8 <__libc_init_array+0xc>
 8024d1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8024d1e:	4798      	blx	r3
 8024d20:	3501      	adds	r5, #1
 8024d22:	e7f2      	b.n	8024d0a <__libc_init_array+0x1e>
 8024d24:	0802bff0 	.word	0x0802bff0
 8024d28:	0802bff0 	.word	0x0802bff0
 8024d2c:	0802bff0 	.word	0x0802bff0
 8024d30:	0802c004 	.word	0x0802c004

08024d34 <malloc>:
 8024d34:	4b02      	ldr	r3, [pc, #8]	; (8024d40 <malloc+0xc>)
 8024d36:	4601      	mov	r1, r0
 8024d38:	6818      	ldr	r0, [r3, #0]
 8024d3a:	f000 b86d 	b.w	8024e18 <_malloc_r>
 8024d3e:	bf00      	nop
 8024d40:	200000a8 	.word	0x200000a8

08024d44 <free>:
 8024d44:	4b02      	ldr	r3, [pc, #8]	; (8024d50 <free+0xc>)
 8024d46:	4601      	mov	r1, r0
 8024d48:	6818      	ldr	r0, [r3, #0]
 8024d4a:	f000 b817 	b.w	8024d7c <_free_r>
 8024d4e:	bf00      	nop
 8024d50:	200000a8 	.word	0x200000a8

08024d54 <memcpy>:
 8024d54:	b510      	push	{r4, lr}
 8024d56:	1e43      	subs	r3, r0, #1
 8024d58:	440a      	add	r2, r1
 8024d5a:	4291      	cmp	r1, r2
 8024d5c:	d100      	bne.n	8024d60 <memcpy+0xc>
 8024d5e:	bd10      	pop	{r4, pc}
 8024d60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024d64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024d68:	e7f7      	b.n	8024d5a <memcpy+0x6>

08024d6a <memset>:
 8024d6a:	4402      	add	r2, r0
 8024d6c:	4603      	mov	r3, r0
 8024d6e:	4293      	cmp	r3, r2
 8024d70:	d100      	bne.n	8024d74 <memset+0xa>
 8024d72:	4770      	bx	lr
 8024d74:	f803 1b01 	strb.w	r1, [r3], #1
 8024d78:	e7f9      	b.n	8024d6e <memset+0x4>
	...

08024d7c <_free_r>:
 8024d7c:	b538      	push	{r3, r4, r5, lr}
 8024d7e:	4605      	mov	r5, r0
 8024d80:	2900      	cmp	r1, #0
 8024d82:	d045      	beq.n	8024e10 <_free_r+0x94>
 8024d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024d88:	1f0c      	subs	r4, r1, #4
 8024d8a:	2b00      	cmp	r3, #0
 8024d8c:	bfb8      	it	lt
 8024d8e:	18e4      	addlt	r4, r4, r3
 8024d90:	f000 feba 	bl	8025b08 <__malloc_lock>
 8024d94:	4a1f      	ldr	r2, [pc, #124]	; (8024e14 <_free_r+0x98>)
 8024d96:	6813      	ldr	r3, [r2, #0]
 8024d98:	4610      	mov	r0, r2
 8024d9a:	b933      	cbnz	r3, 8024daa <_free_r+0x2e>
 8024d9c:	6063      	str	r3, [r4, #4]
 8024d9e:	6014      	str	r4, [r2, #0]
 8024da0:	4628      	mov	r0, r5
 8024da2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024da6:	f000 beb0 	b.w	8025b0a <__malloc_unlock>
 8024daa:	42a3      	cmp	r3, r4
 8024dac:	d90c      	bls.n	8024dc8 <_free_r+0x4c>
 8024dae:	6821      	ldr	r1, [r4, #0]
 8024db0:	1862      	adds	r2, r4, r1
 8024db2:	4293      	cmp	r3, r2
 8024db4:	bf04      	itt	eq
 8024db6:	681a      	ldreq	r2, [r3, #0]
 8024db8:	685b      	ldreq	r3, [r3, #4]
 8024dba:	6063      	str	r3, [r4, #4]
 8024dbc:	bf04      	itt	eq
 8024dbe:	1852      	addeq	r2, r2, r1
 8024dc0:	6022      	streq	r2, [r4, #0]
 8024dc2:	6004      	str	r4, [r0, #0]
 8024dc4:	e7ec      	b.n	8024da0 <_free_r+0x24>
 8024dc6:	4613      	mov	r3, r2
 8024dc8:	685a      	ldr	r2, [r3, #4]
 8024dca:	b10a      	cbz	r2, 8024dd0 <_free_r+0x54>
 8024dcc:	42a2      	cmp	r2, r4
 8024dce:	d9fa      	bls.n	8024dc6 <_free_r+0x4a>
 8024dd0:	6819      	ldr	r1, [r3, #0]
 8024dd2:	1858      	adds	r0, r3, r1
 8024dd4:	42a0      	cmp	r0, r4
 8024dd6:	d10b      	bne.n	8024df0 <_free_r+0x74>
 8024dd8:	6820      	ldr	r0, [r4, #0]
 8024dda:	4401      	add	r1, r0
 8024ddc:	1858      	adds	r0, r3, r1
 8024dde:	4282      	cmp	r2, r0
 8024de0:	6019      	str	r1, [r3, #0]
 8024de2:	d1dd      	bne.n	8024da0 <_free_r+0x24>
 8024de4:	6810      	ldr	r0, [r2, #0]
 8024de6:	6852      	ldr	r2, [r2, #4]
 8024de8:	605a      	str	r2, [r3, #4]
 8024dea:	4401      	add	r1, r0
 8024dec:	6019      	str	r1, [r3, #0]
 8024dee:	e7d7      	b.n	8024da0 <_free_r+0x24>
 8024df0:	d902      	bls.n	8024df8 <_free_r+0x7c>
 8024df2:	230c      	movs	r3, #12
 8024df4:	602b      	str	r3, [r5, #0]
 8024df6:	e7d3      	b.n	8024da0 <_free_r+0x24>
 8024df8:	6820      	ldr	r0, [r4, #0]
 8024dfa:	1821      	adds	r1, r4, r0
 8024dfc:	428a      	cmp	r2, r1
 8024dfe:	bf04      	itt	eq
 8024e00:	6811      	ldreq	r1, [r2, #0]
 8024e02:	6852      	ldreq	r2, [r2, #4]
 8024e04:	6062      	str	r2, [r4, #4]
 8024e06:	bf04      	itt	eq
 8024e08:	1809      	addeq	r1, r1, r0
 8024e0a:	6021      	streq	r1, [r4, #0]
 8024e0c:	605c      	str	r4, [r3, #4]
 8024e0e:	e7c7      	b.n	8024da0 <_free_r+0x24>
 8024e10:	bd38      	pop	{r3, r4, r5, pc}
 8024e12:	bf00      	nop
 8024e14:	2000b3f0 	.word	0x2000b3f0

08024e18 <_malloc_r>:
 8024e18:	b570      	push	{r4, r5, r6, lr}
 8024e1a:	1ccd      	adds	r5, r1, #3
 8024e1c:	f025 0503 	bic.w	r5, r5, #3
 8024e20:	3508      	adds	r5, #8
 8024e22:	2d0c      	cmp	r5, #12
 8024e24:	bf38      	it	cc
 8024e26:	250c      	movcc	r5, #12
 8024e28:	2d00      	cmp	r5, #0
 8024e2a:	4606      	mov	r6, r0
 8024e2c:	db01      	blt.n	8024e32 <_malloc_r+0x1a>
 8024e2e:	42a9      	cmp	r1, r5
 8024e30:	d903      	bls.n	8024e3a <_malloc_r+0x22>
 8024e32:	230c      	movs	r3, #12
 8024e34:	6033      	str	r3, [r6, #0]
 8024e36:	2000      	movs	r0, #0
 8024e38:	bd70      	pop	{r4, r5, r6, pc}
 8024e3a:	f000 fe65 	bl	8025b08 <__malloc_lock>
 8024e3e:	4a21      	ldr	r2, [pc, #132]	; (8024ec4 <_malloc_r+0xac>)
 8024e40:	6814      	ldr	r4, [r2, #0]
 8024e42:	4621      	mov	r1, r4
 8024e44:	b991      	cbnz	r1, 8024e6c <_malloc_r+0x54>
 8024e46:	4c20      	ldr	r4, [pc, #128]	; (8024ec8 <_malloc_r+0xb0>)
 8024e48:	6823      	ldr	r3, [r4, #0]
 8024e4a:	b91b      	cbnz	r3, 8024e54 <_malloc_r+0x3c>
 8024e4c:	4630      	mov	r0, r6
 8024e4e:	f000 fb05 	bl	802545c <_sbrk_r>
 8024e52:	6020      	str	r0, [r4, #0]
 8024e54:	4629      	mov	r1, r5
 8024e56:	4630      	mov	r0, r6
 8024e58:	f000 fb00 	bl	802545c <_sbrk_r>
 8024e5c:	1c43      	adds	r3, r0, #1
 8024e5e:	d124      	bne.n	8024eaa <_malloc_r+0x92>
 8024e60:	230c      	movs	r3, #12
 8024e62:	6033      	str	r3, [r6, #0]
 8024e64:	4630      	mov	r0, r6
 8024e66:	f000 fe50 	bl	8025b0a <__malloc_unlock>
 8024e6a:	e7e4      	b.n	8024e36 <_malloc_r+0x1e>
 8024e6c:	680b      	ldr	r3, [r1, #0]
 8024e6e:	1b5b      	subs	r3, r3, r5
 8024e70:	d418      	bmi.n	8024ea4 <_malloc_r+0x8c>
 8024e72:	2b0b      	cmp	r3, #11
 8024e74:	d90f      	bls.n	8024e96 <_malloc_r+0x7e>
 8024e76:	600b      	str	r3, [r1, #0]
 8024e78:	50cd      	str	r5, [r1, r3]
 8024e7a:	18cc      	adds	r4, r1, r3
 8024e7c:	4630      	mov	r0, r6
 8024e7e:	f000 fe44 	bl	8025b0a <__malloc_unlock>
 8024e82:	f104 000b 	add.w	r0, r4, #11
 8024e86:	1d23      	adds	r3, r4, #4
 8024e88:	f020 0007 	bic.w	r0, r0, #7
 8024e8c:	1ac3      	subs	r3, r0, r3
 8024e8e:	d0d3      	beq.n	8024e38 <_malloc_r+0x20>
 8024e90:	425a      	negs	r2, r3
 8024e92:	50e2      	str	r2, [r4, r3]
 8024e94:	e7d0      	b.n	8024e38 <_malloc_r+0x20>
 8024e96:	428c      	cmp	r4, r1
 8024e98:	684b      	ldr	r3, [r1, #4]
 8024e9a:	bf16      	itet	ne
 8024e9c:	6063      	strne	r3, [r4, #4]
 8024e9e:	6013      	streq	r3, [r2, #0]
 8024ea0:	460c      	movne	r4, r1
 8024ea2:	e7eb      	b.n	8024e7c <_malloc_r+0x64>
 8024ea4:	460c      	mov	r4, r1
 8024ea6:	6849      	ldr	r1, [r1, #4]
 8024ea8:	e7cc      	b.n	8024e44 <_malloc_r+0x2c>
 8024eaa:	1cc4      	adds	r4, r0, #3
 8024eac:	f024 0403 	bic.w	r4, r4, #3
 8024eb0:	42a0      	cmp	r0, r4
 8024eb2:	d005      	beq.n	8024ec0 <_malloc_r+0xa8>
 8024eb4:	1a21      	subs	r1, r4, r0
 8024eb6:	4630      	mov	r0, r6
 8024eb8:	f000 fad0 	bl	802545c <_sbrk_r>
 8024ebc:	3001      	adds	r0, #1
 8024ebe:	d0cf      	beq.n	8024e60 <_malloc_r+0x48>
 8024ec0:	6025      	str	r5, [r4, #0]
 8024ec2:	e7db      	b.n	8024e7c <_malloc_r+0x64>
 8024ec4:	2000b3f0 	.word	0x2000b3f0
 8024ec8:	2000b3f4 	.word	0x2000b3f4

08024ecc <__sfputc_r>:
 8024ecc:	6893      	ldr	r3, [r2, #8]
 8024ece:	3b01      	subs	r3, #1
 8024ed0:	2b00      	cmp	r3, #0
 8024ed2:	b410      	push	{r4}
 8024ed4:	6093      	str	r3, [r2, #8]
 8024ed6:	da08      	bge.n	8024eea <__sfputc_r+0x1e>
 8024ed8:	6994      	ldr	r4, [r2, #24]
 8024eda:	42a3      	cmp	r3, r4
 8024edc:	db01      	blt.n	8024ee2 <__sfputc_r+0x16>
 8024ede:	290a      	cmp	r1, #10
 8024ee0:	d103      	bne.n	8024eea <__sfputc_r+0x1e>
 8024ee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024ee6:	f000 bb0d 	b.w	8025504 <__swbuf_r>
 8024eea:	6813      	ldr	r3, [r2, #0]
 8024eec:	1c58      	adds	r0, r3, #1
 8024eee:	6010      	str	r0, [r2, #0]
 8024ef0:	7019      	strb	r1, [r3, #0]
 8024ef2:	4608      	mov	r0, r1
 8024ef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024ef8:	4770      	bx	lr

08024efa <__sfputs_r>:
 8024efa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024efc:	4606      	mov	r6, r0
 8024efe:	460f      	mov	r7, r1
 8024f00:	4614      	mov	r4, r2
 8024f02:	18d5      	adds	r5, r2, r3
 8024f04:	42ac      	cmp	r4, r5
 8024f06:	d101      	bne.n	8024f0c <__sfputs_r+0x12>
 8024f08:	2000      	movs	r0, #0
 8024f0a:	e007      	b.n	8024f1c <__sfputs_r+0x22>
 8024f0c:	463a      	mov	r2, r7
 8024f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024f12:	4630      	mov	r0, r6
 8024f14:	f7ff ffda 	bl	8024ecc <__sfputc_r>
 8024f18:	1c43      	adds	r3, r0, #1
 8024f1a:	d1f3      	bne.n	8024f04 <__sfputs_r+0xa>
 8024f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024f20 <_vfiprintf_r>:
 8024f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f24:	460c      	mov	r4, r1
 8024f26:	b09d      	sub	sp, #116	; 0x74
 8024f28:	4617      	mov	r7, r2
 8024f2a:	461d      	mov	r5, r3
 8024f2c:	4606      	mov	r6, r0
 8024f2e:	b118      	cbz	r0, 8024f38 <_vfiprintf_r+0x18>
 8024f30:	6983      	ldr	r3, [r0, #24]
 8024f32:	b90b      	cbnz	r3, 8024f38 <_vfiprintf_r+0x18>
 8024f34:	f000 fcfa 	bl	802592c <__sinit>
 8024f38:	4b7c      	ldr	r3, [pc, #496]	; (802512c <_vfiprintf_r+0x20c>)
 8024f3a:	429c      	cmp	r4, r3
 8024f3c:	d158      	bne.n	8024ff0 <_vfiprintf_r+0xd0>
 8024f3e:	6874      	ldr	r4, [r6, #4]
 8024f40:	89a3      	ldrh	r3, [r4, #12]
 8024f42:	0718      	lsls	r0, r3, #28
 8024f44:	d55e      	bpl.n	8025004 <_vfiprintf_r+0xe4>
 8024f46:	6923      	ldr	r3, [r4, #16]
 8024f48:	2b00      	cmp	r3, #0
 8024f4a:	d05b      	beq.n	8025004 <_vfiprintf_r+0xe4>
 8024f4c:	2300      	movs	r3, #0
 8024f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8024f50:	2320      	movs	r3, #32
 8024f52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024f56:	2330      	movs	r3, #48	; 0x30
 8024f58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024f5c:	9503      	str	r5, [sp, #12]
 8024f5e:	f04f 0b01 	mov.w	fp, #1
 8024f62:	46b8      	mov	r8, r7
 8024f64:	4645      	mov	r5, r8
 8024f66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8024f6a:	b10b      	cbz	r3, 8024f70 <_vfiprintf_r+0x50>
 8024f6c:	2b25      	cmp	r3, #37	; 0x25
 8024f6e:	d154      	bne.n	802501a <_vfiprintf_r+0xfa>
 8024f70:	ebb8 0a07 	subs.w	sl, r8, r7
 8024f74:	d00b      	beq.n	8024f8e <_vfiprintf_r+0x6e>
 8024f76:	4653      	mov	r3, sl
 8024f78:	463a      	mov	r2, r7
 8024f7a:	4621      	mov	r1, r4
 8024f7c:	4630      	mov	r0, r6
 8024f7e:	f7ff ffbc 	bl	8024efa <__sfputs_r>
 8024f82:	3001      	adds	r0, #1
 8024f84:	f000 80c2 	beq.w	802510c <_vfiprintf_r+0x1ec>
 8024f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024f8a:	4453      	add	r3, sl
 8024f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8024f8e:	f898 3000 	ldrb.w	r3, [r8]
 8024f92:	2b00      	cmp	r3, #0
 8024f94:	f000 80ba 	beq.w	802510c <_vfiprintf_r+0x1ec>
 8024f98:	2300      	movs	r3, #0
 8024f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8024f9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024fa2:	9304      	str	r3, [sp, #16]
 8024fa4:	9307      	str	r3, [sp, #28]
 8024fa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024faa:	931a      	str	r3, [sp, #104]	; 0x68
 8024fac:	46a8      	mov	r8, r5
 8024fae:	2205      	movs	r2, #5
 8024fb0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8024fb4:	485e      	ldr	r0, [pc, #376]	; (8025130 <_vfiprintf_r+0x210>)
 8024fb6:	f7db f92b 	bl	8000210 <memchr>
 8024fba:	9b04      	ldr	r3, [sp, #16]
 8024fbc:	bb78      	cbnz	r0, 802501e <_vfiprintf_r+0xfe>
 8024fbe:	06d9      	lsls	r1, r3, #27
 8024fc0:	bf44      	itt	mi
 8024fc2:	2220      	movmi	r2, #32
 8024fc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8024fc8:	071a      	lsls	r2, r3, #28
 8024fca:	bf44      	itt	mi
 8024fcc:	222b      	movmi	r2, #43	; 0x2b
 8024fce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8024fd2:	782a      	ldrb	r2, [r5, #0]
 8024fd4:	2a2a      	cmp	r2, #42	; 0x2a
 8024fd6:	d02a      	beq.n	802502e <_vfiprintf_r+0x10e>
 8024fd8:	9a07      	ldr	r2, [sp, #28]
 8024fda:	46a8      	mov	r8, r5
 8024fdc:	2000      	movs	r0, #0
 8024fde:	250a      	movs	r5, #10
 8024fe0:	4641      	mov	r1, r8
 8024fe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024fe6:	3b30      	subs	r3, #48	; 0x30
 8024fe8:	2b09      	cmp	r3, #9
 8024fea:	d969      	bls.n	80250c0 <_vfiprintf_r+0x1a0>
 8024fec:	b360      	cbz	r0, 8025048 <_vfiprintf_r+0x128>
 8024fee:	e024      	b.n	802503a <_vfiprintf_r+0x11a>
 8024ff0:	4b50      	ldr	r3, [pc, #320]	; (8025134 <_vfiprintf_r+0x214>)
 8024ff2:	429c      	cmp	r4, r3
 8024ff4:	d101      	bne.n	8024ffa <_vfiprintf_r+0xda>
 8024ff6:	68b4      	ldr	r4, [r6, #8]
 8024ff8:	e7a2      	b.n	8024f40 <_vfiprintf_r+0x20>
 8024ffa:	4b4f      	ldr	r3, [pc, #316]	; (8025138 <_vfiprintf_r+0x218>)
 8024ffc:	429c      	cmp	r4, r3
 8024ffe:	bf08      	it	eq
 8025000:	68f4      	ldreq	r4, [r6, #12]
 8025002:	e79d      	b.n	8024f40 <_vfiprintf_r+0x20>
 8025004:	4621      	mov	r1, r4
 8025006:	4630      	mov	r0, r6
 8025008:	f000 face 	bl	80255a8 <__swsetup_r>
 802500c:	2800      	cmp	r0, #0
 802500e:	d09d      	beq.n	8024f4c <_vfiprintf_r+0x2c>
 8025010:	f04f 30ff 	mov.w	r0, #4294967295
 8025014:	b01d      	add	sp, #116	; 0x74
 8025016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802501a:	46a8      	mov	r8, r5
 802501c:	e7a2      	b.n	8024f64 <_vfiprintf_r+0x44>
 802501e:	4a44      	ldr	r2, [pc, #272]	; (8025130 <_vfiprintf_r+0x210>)
 8025020:	1a80      	subs	r0, r0, r2
 8025022:	fa0b f000 	lsl.w	r0, fp, r0
 8025026:	4318      	orrs	r0, r3
 8025028:	9004      	str	r0, [sp, #16]
 802502a:	4645      	mov	r5, r8
 802502c:	e7be      	b.n	8024fac <_vfiprintf_r+0x8c>
 802502e:	9a03      	ldr	r2, [sp, #12]
 8025030:	1d11      	adds	r1, r2, #4
 8025032:	6812      	ldr	r2, [r2, #0]
 8025034:	9103      	str	r1, [sp, #12]
 8025036:	2a00      	cmp	r2, #0
 8025038:	db01      	blt.n	802503e <_vfiprintf_r+0x11e>
 802503a:	9207      	str	r2, [sp, #28]
 802503c:	e004      	b.n	8025048 <_vfiprintf_r+0x128>
 802503e:	4252      	negs	r2, r2
 8025040:	f043 0302 	orr.w	r3, r3, #2
 8025044:	9207      	str	r2, [sp, #28]
 8025046:	9304      	str	r3, [sp, #16]
 8025048:	f898 3000 	ldrb.w	r3, [r8]
 802504c:	2b2e      	cmp	r3, #46	; 0x2e
 802504e:	d10e      	bne.n	802506e <_vfiprintf_r+0x14e>
 8025050:	f898 3001 	ldrb.w	r3, [r8, #1]
 8025054:	2b2a      	cmp	r3, #42	; 0x2a
 8025056:	d138      	bne.n	80250ca <_vfiprintf_r+0x1aa>
 8025058:	9b03      	ldr	r3, [sp, #12]
 802505a:	1d1a      	adds	r2, r3, #4
 802505c:	681b      	ldr	r3, [r3, #0]
 802505e:	9203      	str	r2, [sp, #12]
 8025060:	2b00      	cmp	r3, #0
 8025062:	bfb8      	it	lt
 8025064:	f04f 33ff 	movlt.w	r3, #4294967295
 8025068:	f108 0802 	add.w	r8, r8, #2
 802506c:	9305      	str	r3, [sp, #20]
 802506e:	4d33      	ldr	r5, [pc, #204]	; (802513c <_vfiprintf_r+0x21c>)
 8025070:	f898 1000 	ldrb.w	r1, [r8]
 8025074:	2203      	movs	r2, #3
 8025076:	4628      	mov	r0, r5
 8025078:	f7db f8ca 	bl	8000210 <memchr>
 802507c:	b140      	cbz	r0, 8025090 <_vfiprintf_r+0x170>
 802507e:	2340      	movs	r3, #64	; 0x40
 8025080:	1b40      	subs	r0, r0, r5
 8025082:	fa03 f000 	lsl.w	r0, r3, r0
 8025086:	9b04      	ldr	r3, [sp, #16]
 8025088:	4303      	orrs	r3, r0
 802508a:	f108 0801 	add.w	r8, r8, #1
 802508e:	9304      	str	r3, [sp, #16]
 8025090:	f898 1000 	ldrb.w	r1, [r8]
 8025094:	482a      	ldr	r0, [pc, #168]	; (8025140 <_vfiprintf_r+0x220>)
 8025096:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802509a:	2206      	movs	r2, #6
 802509c:	f108 0701 	add.w	r7, r8, #1
 80250a0:	f7db f8b6 	bl	8000210 <memchr>
 80250a4:	2800      	cmp	r0, #0
 80250a6:	d037      	beq.n	8025118 <_vfiprintf_r+0x1f8>
 80250a8:	4b26      	ldr	r3, [pc, #152]	; (8025144 <_vfiprintf_r+0x224>)
 80250aa:	bb1b      	cbnz	r3, 80250f4 <_vfiprintf_r+0x1d4>
 80250ac:	9b03      	ldr	r3, [sp, #12]
 80250ae:	3307      	adds	r3, #7
 80250b0:	f023 0307 	bic.w	r3, r3, #7
 80250b4:	3308      	adds	r3, #8
 80250b6:	9303      	str	r3, [sp, #12]
 80250b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80250ba:	444b      	add	r3, r9
 80250bc:	9309      	str	r3, [sp, #36]	; 0x24
 80250be:	e750      	b.n	8024f62 <_vfiprintf_r+0x42>
 80250c0:	fb05 3202 	mla	r2, r5, r2, r3
 80250c4:	2001      	movs	r0, #1
 80250c6:	4688      	mov	r8, r1
 80250c8:	e78a      	b.n	8024fe0 <_vfiprintf_r+0xc0>
 80250ca:	2300      	movs	r3, #0
 80250cc:	f108 0801 	add.w	r8, r8, #1
 80250d0:	9305      	str	r3, [sp, #20]
 80250d2:	4619      	mov	r1, r3
 80250d4:	250a      	movs	r5, #10
 80250d6:	4640      	mov	r0, r8
 80250d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80250dc:	3a30      	subs	r2, #48	; 0x30
 80250de:	2a09      	cmp	r2, #9
 80250e0:	d903      	bls.n	80250ea <_vfiprintf_r+0x1ca>
 80250e2:	2b00      	cmp	r3, #0
 80250e4:	d0c3      	beq.n	802506e <_vfiprintf_r+0x14e>
 80250e6:	9105      	str	r1, [sp, #20]
 80250e8:	e7c1      	b.n	802506e <_vfiprintf_r+0x14e>
 80250ea:	fb05 2101 	mla	r1, r5, r1, r2
 80250ee:	2301      	movs	r3, #1
 80250f0:	4680      	mov	r8, r0
 80250f2:	e7f0      	b.n	80250d6 <_vfiprintf_r+0x1b6>
 80250f4:	ab03      	add	r3, sp, #12
 80250f6:	9300      	str	r3, [sp, #0]
 80250f8:	4622      	mov	r2, r4
 80250fa:	4b13      	ldr	r3, [pc, #76]	; (8025148 <_vfiprintf_r+0x228>)
 80250fc:	a904      	add	r1, sp, #16
 80250fe:	4630      	mov	r0, r6
 8025100:	f3af 8000 	nop.w
 8025104:	f1b0 3fff 	cmp.w	r0, #4294967295
 8025108:	4681      	mov	r9, r0
 802510a:	d1d5      	bne.n	80250b8 <_vfiprintf_r+0x198>
 802510c:	89a3      	ldrh	r3, [r4, #12]
 802510e:	065b      	lsls	r3, r3, #25
 8025110:	f53f af7e 	bmi.w	8025010 <_vfiprintf_r+0xf0>
 8025114:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025116:	e77d      	b.n	8025014 <_vfiprintf_r+0xf4>
 8025118:	ab03      	add	r3, sp, #12
 802511a:	9300      	str	r3, [sp, #0]
 802511c:	4622      	mov	r2, r4
 802511e:	4b0a      	ldr	r3, [pc, #40]	; (8025148 <_vfiprintf_r+0x228>)
 8025120:	a904      	add	r1, sp, #16
 8025122:	4630      	mov	r0, r6
 8025124:	f000 f888 	bl	8025238 <_printf_i>
 8025128:	e7ec      	b.n	8025104 <_vfiprintf_r+0x1e4>
 802512a:	bf00      	nop
 802512c:	0802bfa8 	.word	0x0802bfa8
 8025130:	0802bf50 	.word	0x0802bf50
 8025134:	0802bfc8 	.word	0x0802bfc8
 8025138:	0802bf88 	.word	0x0802bf88
 802513c:	0802bf56 	.word	0x0802bf56
 8025140:	0802bf5a 	.word	0x0802bf5a
 8025144:	00000000 	.word	0x00000000
 8025148:	08024efb 	.word	0x08024efb

0802514c <_printf_common>:
 802514c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025150:	4691      	mov	r9, r2
 8025152:	461f      	mov	r7, r3
 8025154:	688a      	ldr	r2, [r1, #8]
 8025156:	690b      	ldr	r3, [r1, #16]
 8025158:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802515c:	4293      	cmp	r3, r2
 802515e:	bfb8      	it	lt
 8025160:	4613      	movlt	r3, r2
 8025162:	f8c9 3000 	str.w	r3, [r9]
 8025166:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802516a:	4606      	mov	r6, r0
 802516c:	460c      	mov	r4, r1
 802516e:	b112      	cbz	r2, 8025176 <_printf_common+0x2a>
 8025170:	3301      	adds	r3, #1
 8025172:	f8c9 3000 	str.w	r3, [r9]
 8025176:	6823      	ldr	r3, [r4, #0]
 8025178:	0699      	lsls	r1, r3, #26
 802517a:	bf42      	ittt	mi
 802517c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8025180:	3302      	addmi	r3, #2
 8025182:	f8c9 3000 	strmi.w	r3, [r9]
 8025186:	6825      	ldr	r5, [r4, #0]
 8025188:	f015 0506 	ands.w	r5, r5, #6
 802518c:	d107      	bne.n	802519e <_printf_common+0x52>
 802518e:	f104 0a19 	add.w	sl, r4, #25
 8025192:	68e3      	ldr	r3, [r4, #12]
 8025194:	f8d9 2000 	ldr.w	r2, [r9]
 8025198:	1a9b      	subs	r3, r3, r2
 802519a:	42ab      	cmp	r3, r5
 802519c:	dc28      	bgt.n	80251f0 <_printf_common+0xa4>
 802519e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80251a2:	6822      	ldr	r2, [r4, #0]
 80251a4:	3300      	adds	r3, #0
 80251a6:	bf18      	it	ne
 80251a8:	2301      	movne	r3, #1
 80251aa:	0692      	lsls	r2, r2, #26
 80251ac:	d42d      	bmi.n	802520a <_printf_common+0xbe>
 80251ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80251b2:	4639      	mov	r1, r7
 80251b4:	4630      	mov	r0, r6
 80251b6:	47c0      	blx	r8
 80251b8:	3001      	adds	r0, #1
 80251ba:	d020      	beq.n	80251fe <_printf_common+0xb2>
 80251bc:	6823      	ldr	r3, [r4, #0]
 80251be:	68e5      	ldr	r5, [r4, #12]
 80251c0:	f8d9 2000 	ldr.w	r2, [r9]
 80251c4:	f003 0306 	and.w	r3, r3, #6
 80251c8:	2b04      	cmp	r3, #4
 80251ca:	bf08      	it	eq
 80251cc:	1aad      	subeq	r5, r5, r2
 80251ce:	68a3      	ldr	r3, [r4, #8]
 80251d0:	6922      	ldr	r2, [r4, #16]
 80251d2:	bf0c      	ite	eq
 80251d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80251d8:	2500      	movne	r5, #0
 80251da:	4293      	cmp	r3, r2
 80251dc:	bfc4      	itt	gt
 80251de:	1a9b      	subgt	r3, r3, r2
 80251e0:	18ed      	addgt	r5, r5, r3
 80251e2:	f04f 0900 	mov.w	r9, #0
 80251e6:	341a      	adds	r4, #26
 80251e8:	454d      	cmp	r5, r9
 80251ea:	d11a      	bne.n	8025222 <_printf_common+0xd6>
 80251ec:	2000      	movs	r0, #0
 80251ee:	e008      	b.n	8025202 <_printf_common+0xb6>
 80251f0:	2301      	movs	r3, #1
 80251f2:	4652      	mov	r2, sl
 80251f4:	4639      	mov	r1, r7
 80251f6:	4630      	mov	r0, r6
 80251f8:	47c0      	blx	r8
 80251fa:	3001      	adds	r0, #1
 80251fc:	d103      	bne.n	8025206 <_printf_common+0xba>
 80251fe:	f04f 30ff 	mov.w	r0, #4294967295
 8025202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025206:	3501      	adds	r5, #1
 8025208:	e7c3      	b.n	8025192 <_printf_common+0x46>
 802520a:	18e1      	adds	r1, r4, r3
 802520c:	1c5a      	adds	r2, r3, #1
 802520e:	2030      	movs	r0, #48	; 0x30
 8025210:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025214:	4422      	add	r2, r4
 8025216:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802521a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802521e:	3302      	adds	r3, #2
 8025220:	e7c5      	b.n	80251ae <_printf_common+0x62>
 8025222:	2301      	movs	r3, #1
 8025224:	4622      	mov	r2, r4
 8025226:	4639      	mov	r1, r7
 8025228:	4630      	mov	r0, r6
 802522a:	47c0      	blx	r8
 802522c:	3001      	adds	r0, #1
 802522e:	d0e6      	beq.n	80251fe <_printf_common+0xb2>
 8025230:	f109 0901 	add.w	r9, r9, #1
 8025234:	e7d8      	b.n	80251e8 <_printf_common+0x9c>
	...

08025238 <_printf_i>:
 8025238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802523c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8025240:	460c      	mov	r4, r1
 8025242:	7e09      	ldrb	r1, [r1, #24]
 8025244:	b085      	sub	sp, #20
 8025246:	296e      	cmp	r1, #110	; 0x6e
 8025248:	4617      	mov	r7, r2
 802524a:	4606      	mov	r6, r0
 802524c:	4698      	mov	r8, r3
 802524e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025250:	f000 80b3 	beq.w	80253ba <_printf_i+0x182>
 8025254:	d822      	bhi.n	802529c <_printf_i+0x64>
 8025256:	2963      	cmp	r1, #99	; 0x63
 8025258:	d036      	beq.n	80252c8 <_printf_i+0x90>
 802525a:	d80a      	bhi.n	8025272 <_printf_i+0x3a>
 802525c:	2900      	cmp	r1, #0
 802525e:	f000 80b9 	beq.w	80253d4 <_printf_i+0x19c>
 8025262:	2958      	cmp	r1, #88	; 0x58
 8025264:	f000 8083 	beq.w	802536e <_printf_i+0x136>
 8025268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802526c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8025270:	e032      	b.n	80252d8 <_printf_i+0xa0>
 8025272:	2964      	cmp	r1, #100	; 0x64
 8025274:	d001      	beq.n	802527a <_printf_i+0x42>
 8025276:	2969      	cmp	r1, #105	; 0x69
 8025278:	d1f6      	bne.n	8025268 <_printf_i+0x30>
 802527a:	6820      	ldr	r0, [r4, #0]
 802527c:	6813      	ldr	r3, [r2, #0]
 802527e:	0605      	lsls	r5, r0, #24
 8025280:	f103 0104 	add.w	r1, r3, #4
 8025284:	d52a      	bpl.n	80252dc <_printf_i+0xa4>
 8025286:	681b      	ldr	r3, [r3, #0]
 8025288:	6011      	str	r1, [r2, #0]
 802528a:	2b00      	cmp	r3, #0
 802528c:	da03      	bge.n	8025296 <_printf_i+0x5e>
 802528e:	222d      	movs	r2, #45	; 0x2d
 8025290:	425b      	negs	r3, r3
 8025292:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8025296:	486f      	ldr	r0, [pc, #444]	; (8025454 <_printf_i+0x21c>)
 8025298:	220a      	movs	r2, #10
 802529a:	e039      	b.n	8025310 <_printf_i+0xd8>
 802529c:	2973      	cmp	r1, #115	; 0x73
 802529e:	f000 809d 	beq.w	80253dc <_printf_i+0x1a4>
 80252a2:	d808      	bhi.n	80252b6 <_printf_i+0x7e>
 80252a4:	296f      	cmp	r1, #111	; 0x6f
 80252a6:	d020      	beq.n	80252ea <_printf_i+0xb2>
 80252a8:	2970      	cmp	r1, #112	; 0x70
 80252aa:	d1dd      	bne.n	8025268 <_printf_i+0x30>
 80252ac:	6823      	ldr	r3, [r4, #0]
 80252ae:	f043 0320 	orr.w	r3, r3, #32
 80252b2:	6023      	str	r3, [r4, #0]
 80252b4:	e003      	b.n	80252be <_printf_i+0x86>
 80252b6:	2975      	cmp	r1, #117	; 0x75
 80252b8:	d017      	beq.n	80252ea <_printf_i+0xb2>
 80252ba:	2978      	cmp	r1, #120	; 0x78
 80252bc:	d1d4      	bne.n	8025268 <_printf_i+0x30>
 80252be:	2378      	movs	r3, #120	; 0x78
 80252c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80252c4:	4864      	ldr	r0, [pc, #400]	; (8025458 <_printf_i+0x220>)
 80252c6:	e055      	b.n	8025374 <_printf_i+0x13c>
 80252c8:	6813      	ldr	r3, [r2, #0]
 80252ca:	1d19      	adds	r1, r3, #4
 80252cc:	681b      	ldr	r3, [r3, #0]
 80252ce:	6011      	str	r1, [r2, #0]
 80252d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80252d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80252d8:	2301      	movs	r3, #1
 80252da:	e08c      	b.n	80253f6 <_printf_i+0x1be>
 80252dc:	681b      	ldr	r3, [r3, #0]
 80252de:	6011      	str	r1, [r2, #0]
 80252e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80252e4:	bf18      	it	ne
 80252e6:	b21b      	sxthne	r3, r3
 80252e8:	e7cf      	b.n	802528a <_printf_i+0x52>
 80252ea:	6813      	ldr	r3, [r2, #0]
 80252ec:	6825      	ldr	r5, [r4, #0]
 80252ee:	1d18      	adds	r0, r3, #4
 80252f0:	6010      	str	r0, [r2, #0]
 80252f2:	0628      	lsls	r0, r5, #24
 80252f4:	d501      	bpl.n	80252fa <_printf_i+0xc2>
 80252f6:	681b      	ldr	r3, [r3, #0]
 80252f8:	e002      	b.n	8025300 <_printf_i+0xc8>
 80252fa:	0668      	lsls	r0, r5, #25
 80252fc:	d5fb      	bpl.n	80252f6 <_printf_i+0xbe>
 80252fe:	881b      	ldrh	r3, [r3, #0]
 8025300:	4854      	ldr	r0, [pc, #336]	; (8025454 <_printf_i+0x21c>)
 8025302:	296f      	cmp	r1, #111	; 0x6f
 8025304:	bf14      	ite	ne
 8025306:	220a      	movne	r2, #10
 8025308:	2208      	moveq	r2, #8
 802530a:	2100      	movs	r1, #0
 802530c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8025310:	6865      	ldr	r5, [r4, #4]
 8025312:	60a5      	str	r5, [r4, #8]
 8025314:	2d00      	cmp	r5, #0
 8025316:	f2c0 8095 	blt.w	8025444 <_printf_i+0x20c>
 802531a:	6821      	ldr	r1, [r4, #0]
 802531c:	f021 0104 	bic.w	r1, r1, #4
 8025320:	6021      	str	r1, [r4, #0]
 8025322:	2b00      	cmp	r3, #0
 8025324:	d13d      	bne.n	80253a2 <_printf_i+0x16a>
 8025326:	2d00      	cmp	r5, #0
 8025328:	f040 808e 	bne.w	8025448 <_printf_i+0x210>
 802532c:	4665      	mov	r5, ip
 802532e:	2a08      	cmp	r2, #8
 8025330:	d10b      	bne.n	802534a <_printf_i+0x112>
 8025332:	6823      	ldr	r3, [r4, #0]
 8025334:	07db      	lsls	r3, r3, #31
 8025336:	d508      	bpl.n	802534a <_printf_i+0x112>
 8025338:	6923      	ldr	r3, [r4, #16]
 802533a:	6862      	ldr	r2, [r4, #4]
 802533c:	429a      	cmp	r2, r3
 802533e:	bfde      	ittt	le
 8025340:	2330      	movle	r3, #48	; 0x30
 8025342:	f805 3c01 	strble.w	r3, [r5, #-1]
 8025346:	f105 35ff 	addle.w	r5, r5, #4294967295
 802534a:	ebac 0305 	sub.w	r3, ip, r5
 802534e:	6123      	str	r3, [r4, #16]
 8025350:	f8cd 8000 	str.w	r8, [sp]
 8025354:	463b      	mov	r3, r7
 8025356:	aa03      	add	r2, sp, #12
 8025358:	4621      	mov	r1, r4
 802535a:	4630      	mov	r0, r6
 802535c:	f7ff fef6 	bl	802514c <_printf_common>
 8025360:	3001      	adds	r0, #1
 8025362:	d14d      	bne.n	8025400 <_printf_i+0x1c8>
 8025364:	f04f 30ff 	mov.w	r0, #4294967295
 8025368:	b005      	add	sp, #20
 802536a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802536e:	4839      	ldr	r0, [pc, #228]	; (8025454 <_printf_i+0x21c>)
 8025370:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8025374:	6813      	ldr	r3, [r2, #0]
 8025376:	6821      	ldr	r1, [r4, #0]
 8025378:	1d1d      	adds	r5, r3, #4
 802537a:	681b      	ldr	r3, [r3, #0]
 802537c:	6015      	str	r5, [r2, #0]
 802537e:	060a      	lsls	r2, r1, #24
 8025380:	d50b      	bpl.n	802539a <_printf_i+0x162>
 8025382:	07ca      	lsls	r2, r1, #31
 8025384:	bf44      	itt	mi
 8025386:	f041 0120 	orrmi.w	r1, r1, #32
 802538a:	6021      	strmi	r1, [r4, #0]
 802538c:	b91b      	cbnz	r3, 8025396 <_printf_i+0x15e>
 802538e:	6822      	ldr	r2, [r4, #0]
 8025390:	f022 0220 	bic.w	r2, r2, #32
 8025394:	6022      	str	r2, [r4, #0]
 8025396:	2210      	movs	r2, #16
 8025398:	e7b7      	b.n	802530a <_printf_i+0xd2>
 802539a:	064d      	lsls	r5, r1, #25
 802539c:	bf48      	it	mi
 802539e:	b29b      	uxthmi	r3, r3
 80253a0:	e7ef      	b.n	8025382 <_printf_i+0x14a>
 80253a2:	4665      	mov	r5, ip
 80253a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80253a8:	fb02 3311 	mls	r3, r2, r1, r3
 80253ac:	5cc3      	ldrb	r3, [r0, r3]
 80253ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80253b2:	460b      	mov	r3, r1
 80253b4:	2900      	cmp	r1, #0
 80253b6:	d1f5      	bne.n	80253a4 <_printf_i+0x16c>
 80253b8:	e7b9      	b.n	802532e <_printf_i+0xf6>
 80253ba:	6813      	ldr	r3, [r2, #0]
 80253bc:	6825      	ldr	r5, [r4, #0]
 80253be:	6961      	ldr	r1, [r4, #20]
 80253c0:	1d18      	adds	r0, r3, #4
 80253c2:	6010      	str	r0, [r2, #0]
 80253c4:	0628      	lsls	r0, r5, #24
 80253c6:	681b      	ldr	r3, [r3, #0]
 80253c8:	d501      	bpl.n	80253ce <_printf_i+0x196>
 80253ca:	6019      	str	r1, [r3, #0]
 80253cc:	e002      	b.n	80253d4 <_printf_i+0x19c>
 80253ce:	066a      	lsls	r2, r5, #25
 80253d0:	d5fb      	bpl.n	80253ca <_printf_i+0x192>
 80253d2:	8019      	strh	r1, [r3, #0]
 80253d4:	2300      	movs	r3, #0
 80253d6:	6123      	str	r3, [r4, #16]
 80253d8:	4665      	mov	r5, ip
 80253da:	e7b9      	b.n	8025350 <_printf_i+0x118>
 80253dc:	6813      	ldr	r3, [r2, #0]
 80253de:	1d19      	adds	r1, r3, #4
 80253e0:	6011      	str	r1, [r2, #0]
 80253e2:	681d      	ldr	r5, [r3, #0]
 80253e4:	6862      	ldr	r2, [r4, #4]
 80253e6:	2100      	movs	r1, #0
 80253e8:	4628      	mov	r0, r5
 80253ea:	f7da ff11 	bl	8000210 <memchr>
 80253ee:	b108      	cbz	r0, 80253f4 <_printf_i+0x1bc>
 80253f0:	1b40      	subs	r0, r0, r5
 80253f2:	6060      	str	r0, [r4, #4]
 80253f4:	6863      	ldr	r3, [r4, #4]
 80253f6:	6123      	str	r3, [r4, #16]
 80253f8:	2300      	movs	r3, #0
 80253fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80253fe:	e7a7      	b.n	8025350 <_printf_i+0x118>
 8025400:	6923      	ldr	r3, [r4, #16]
 8025402:	462a      	mov	r2, r5
 8025404:	4639      	mov	r1, r7
 8025406:	4630      	mov	r0, r6
 8025408:	47c0      	blx	r8
 802540a:	3001      	adds	r0, #1
 802540c:	d0aa      	beq.n	8025364 <_printf_i+0x12c>
 802540e:	6823      	ldr	r3, [r4, #0]
 8025410:	079b      	lsls	r3, r3, #30
 8025412:	d413      	bmi.n	802543c <_printf_i+0x204>
 8025414:	68e0      	ldr	r0, [r4, #12]
 8025416:	9b03      	ldr	r3, [sp, #12]
 8025418:	4298      	cmp	r0, r3
 802541a:	bfb8      	it	lt
 802541c:	4618      	movlt	r0, r3
 802541e:	e7a3      	b.n	8025368 <_printf_i+0x130>
 8025420:	2301      	movs	r3, #1
 8025422:	464a      	mov	r2, r9
 8025424:	4639      	mov	r1, r7
 8025426:	4630      	mov	r0, r6
 8025428:	47c0      	blx	r8
 802542a:	3001      	adds	r0, #1
 802542c:	d09a      	beq.n	8025364 <_printf_i+0x12c>
 802542e:	3501      	adds	r5, #1
 8025430:	68e3      	ldr	r3, [r4, #12]
 8025432:	9a03      	ldr	r2, [sp, #12]
 8025434:	1a9b      	subs	r3, r3, r2
 8025436:	42ab      	cmp	r3, r5
 8025438:	dcf2      	bgt.n	8025420 <_printf_i+0x1e8>
 802543a:	e7eb      	b.n	8025414 <_printf_i+0x1dc>
 802543c:	2500      	movs	r5, #0
 802543e:	f104 0919 	add.w	r9, r4, #25
 8025442:	e7f5      	b.n	8025430 <_printf_i+0x1f8>
 8025444:	2b00      	cmp	r3, #0
 8025446:	d1ac      	bne.n	80253a2 <_printf_i+0x16a>
 8025448:	7803      	ldrb	r3, [r0, #0]
 802544a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802544e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025452:	e76c      	b.n	802532e <_printf_i+0xf6>
 8025454:	0802bf61 	.word	0x0802bf61
 8025458:	0802bf72 	.word	0x0802bf72

0802545c <_sbrk_r>:
 802545c:	b538      	push	{r3, r4, r5, lr}
 802545e:	4c06      	ldr	r4, [pc, #24]	; (8025478 <_sbrk_r+0x1c>)
 8025460:	2300      	movs	r3, #0
 8025462:	4605      	mov	r5, r0
 8025464:	4608      	mov	r0, r1
 8025466:	6023      	str	r3, [r4, #0]
 8025468:	f7dc fc04 	bl	8001c74 <_sbrk>
 802546c:	1c43      	adds	r3, r0, #1
 802546e:	d102      	bne.n	8025476 <_sbrk_r+0x1a>
 8025470:	6823      	ldr	r3, [r4, #0]
 8025472:	b103      	cbz	r3, 8025476 <_sbrk_r+0x1a>
 8025474:	602b      	str	r3, [r5, #0]
 8025476:	bd38      	pop	{r3, r4, r5, pc}
 8025478:	2000b7fc 	.word	0x2000b7fc

0802547c <_raise_r>:
 802547c:	291f      	cmp	r1, #31
 802547e:	b538      	push	{r3, r4, r5, lr}
 8025480:	4604      	mov	r4, r0
 8025482:	460d      	mov	r5, r1
 8025484:	d904      	bls.n	8025490 <_raise_r+0x14>
 8025486:	2316      	movs	r3, #22
 8025488:	6003      	str	r3, [r0, #0]
 802548a:	f04f 30ff 	mov.w	r0, #4294967295
 802548e:	bd38      	pop	{r3, r4, r5, pc}
 8025490:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8025492:	b112      	cbz	r2, 802549a <_raise_r+0x1e>
 8025494:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025498:	b94b      	cbnz	r3, 80254ae <_raise_r+0x32>
 802549a:	4620      	mov	r0, r4
 802549c:	f000 f830 	bl	8025500 <_getpid_r>
 80254a0:	462a      	mov	r2, r5
 80254a2:	4601      	mov	r1, r0
 80254a4:	4620      	mov	r0, r4
 80254a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80254aa:	f000 b817 	b.w	80254dc <_kill_r>
 80254ae:	2b01      	cmp	r3, #1
 80254b0:	d00a      	beq.n	80254c8 <_raise_r+0x4c>
 80254b2:	1c59      	adds	r1, r3, #1
 80254b4:	d103      	bne.n	80254be <_raise_r+0x42>
 80254b6:	2316      	movs	r3, #22
 80254b8:	6003      	str	r3, [r0, #0]
 80254ba:	2001      	movs	r0, #1
 80254bc:	e7e7      	b.n	802548e <_raise_r+0x12>
 80254be:	2400      	movs	r4, #0
 80254c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80254c4:	4628      	mov	r0, r5
 80254c6:	4798      	blx	r3
 80254c8:	2000      	movs	r0, #0
 80254ca:	e7e0      	b.n	802548e <_raise_r+0x12>

080254cc <raise>:
 80254cc:	4b02      	ldr	r3, [pc, #8]	; (80254d8 <raise+0xc>)
 80254ce:	4601      	mov	r1, r0
 80254d0:	6818      	ldr	r0, [r3, #0]
 80254d2:	f7ff bfd3 	b.w	802547c <_raise_r>
 80254d6:	bf00      	nop
 80254d8:	200000a8 	.word	0x200000a8

080254dc <_kill_r>:
 80254dc:	b538      	push	{r3, r4, r5, lr}
 80254de:	4c07      	ldr	r4, [pc, #28]	; (80254fc <_kill_r+0x20>)
 80254e0:	2300      	movs	r3, #0
 80254e2:	4605      	mov	r5, r0
 80254e4:	4608      	mov	r0, r1
 80254e6:	4611      	mov	r1, r2
 80254e8:	6023      	str	r3, [r4, #0]
 80254ea:	f7dc fb3b 	bl	8001b64 <_kill>
 80254ee:	1c43      	adds	r3, r0, #1
 80254f0:	d102      	bne.n	80254f8 <_kill_r+0x1c>
 80254f2:	6823      	ldr	r3, [r4, #0]
 80254f4:	b103      	cbz	r3, 80254f8 <_kill_r+0x1c>
 80254f6:	602b      	str	r3, [r5, #0]
 80254f8:	bd38      	pop	{r3, r4, r5, pc}
 80254fa:	bf00      	nop
 80254fc:	2000b7fc 	.word	0x2000b7fc

08025500 <_getpid_r>:
 8025500:	f7dc bb28 	b.w	8001b54 <_getpid>

08025504 <__swbuf_r>:
 8025504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025506:	460e      	mov	r6, r1
 8025508:	4614      	mov	r4, r2
 802550a:	4605      	mov	r5, r0
 802550c:	b118      	cbz	r0, 8025516 <__swbuf_r+0x12>
 802550e:	6983      	ldr	r3, [r0, #24]
 8025510:	b90b      	cbnz	r3, 8025516 <__swbuf_r+0x12>
 8025512:	f000 fa0b 	bl	802592c <__sinit>
 8025516:	4b21      	ldr	r3, [pc, #132]	; (802559c <__swbuf_r+0x98>)
 8025518:	429c      	cmp	r4, r3
 802551a:	d12a      	bne.n	8025572 <__swbuf_r+0x6e>
 802551c:	686c      	ldr	r4, [r5, #4]
 802551e:	69a3      	ldr	r3, [r4, #24]
 8025520:	60a3      	str	r3, [r4, #8]
 8025522:	89a3      	ldrh	r3, [r4, #12]
 8025524:	071a      	lsls	r2, r3, #28
 8025526:	d52e      	bpl.n	8025586 <__swbuf_r+0x82>
 8025528:	6923      	ldr	r3, [r4, #16]
 802552a:	b363      	cbz	r3, 8025586 <__swbuf_r+0x82>
 802552c:	6923      	ldr	r3, [r4, #16]
 802552e:	6820      	ldr	r0, [r4, #0]
 8025530:	1ac0      	subs	r0, r0, r3
 8025532:	6963      	ldr	r3, [r4, #20]
 8025534:	b2f6      	uxtb	r6, r6
 8025536:	4283      	cmp	r3, r0
 8025538:	4637      	mov	r7, r6
 802553a:	dc04      	bgt.n	8025546 <__swbuf_r+0x42>
 802553c:	4621      	mov	r1, r4
 802553e:	4628      	mov	r0, r5
 8025540:	f000 f98a 	bl	8025858 <_fflush_r>
 8025544:	bb28      	cbnz	r0, 8025592 <__swbuf_r+0x8e>
 8025546:	68a3      	ldr	r3, [r4, #8]
 8025548:	3b01      	subs	r3, #1
 802554a:	60a3      	str	r3, [r4, #8]
 802554c:	6823      	ldr	r3, [r4, #0]
 802554e:	1c5a      	adds	r2, r3, #1
 8025550:	6022      	str	r2, [r4, #0]
 8025552:	701e      	strb	r6, [r3, #0]
 8025554:	6963      	ldr	r3, [r4, #20]
 8025556:	3001      	adds	r0, #1
 8025558:	4283      	cmp	r3, r0
 802555a:	d004      	beq.n	8025566 <__swbuf_r+0x62>
 802555c:	89a3      	ldrh	r3, [r4, #12]
 802555e:	07db      	lsls	r3, r3, #31
 8025560:	d519      	bpl.n	8025596 <__swbuf_r+0x92>
 8025562:	2e0a      	cmp	r6, #10
 8025564:	d117      	bne.n	8025596 <__swbuf_r+0x92>
 8025566:	4621      	mov	r1, r4
 8025568:	4628      	mov	r0, r5
 802556a:	f000 f975 	bl	8025858 <_fflush_r>
 802556e:	b190      	cbz	r0, 8025596 <__swbuf_r+0x92>
 8025570:	e00f      	b.n	8025592 <__swbuf_r+0x8e>
 8025572:	4b0b      	ldr	r3, [pc, #44]	; (80255a0 <__swbuf_r+0x9c>)
 8025574:	429c      	cmp	r4, r3
 8025576:	d101      	bne.n	802557c <__swbuf_r+0x78>
 8025578:	68ac      	ldr	r4, [r5, #8]
 802557a:	e7d0      	b.n	802551e <__swbuf_r+0x1a>
 802557c:	4b09      	ldr	r3, [pc, #36]	; (80255a4 <__swbuf_r+0xa0>)
 802557e:	429c      	cmp	r4, r3
 8025580:	bf08      	it	eq
 8025582:	68ec      	ldreq	r4, [r5, #12]
 8025584:	e7cb      	b.n	802551e <__swbuf_r+0x1a>
 8025586:	4621      	mov	r1, r4
 8025588:	4628      	mov	r0, r5
 802558a:	f000 f80d 	bl	80255a8 <__swsetup_r>
 802558e:	2800      	cmp	r0, #0
 8025590:	d0cc      	beq.n	802552c <__swbuf_r+0x28>
 8025592:	f04f 37ff 	mov.w	r7, #4294967295
 8025596:	4638      	mov	r0, r7
 8025598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802559a:	bf00      	nop
 802559c:	0802bfa8 	.word	0x0802bfa8
 80255a0:	0802bfc8 	.word	0x0802bfc8
 80255a4:	0802bf88 	.word	0x0802bf88

080255a8 <__swsetup_r>:
 80255a8:	4b32      	ldr	r3, [pc, #200]	; (8025674 <__swsetup_r+0xcc>)
 80255aa:	b570      	push	{r4, r5, r6, lr}
 80255ac:	681d      	ldr	r5, [r3, #0]
 80255ae:	4606      	mov	r6, r0
 80255b0:	460c      	mov	r4, r1
 80255b2:	b125      	cbz	r5, 80255be <__swsetup_r+0x16>
 80255b4:	69ab      	ldr	r3, [r5, #24]
 80255b6:	b913      	cbnz	r3, 80255be <__swsetup_r+0x16>
 80255b8:	4628      	mov	r0, r5
 80255ba:	f000 f9b7 	bl	802592c <__sinit>
 80255be:	4b2e      	ldr	r3, [pc, #184]	; (8025678 <__swsetup_r+0xd0>)
 80255c0:	429c      	cmp	r4, r3
 80255c2:	d10f      	bne.n	80255e4 <__swsetup_r+0x3c>
 80255c4:	686c      	ldr	r4, [r5, #4]
 80255c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80255ca:	b29a      	uxth	r2, r3
 80255cc:	0715      	lsls	r5, r2, #28
 80255ce:	d42c      	bmi.n	802562a <__swsetup_r+0x82>
 80255d0:	06d0      	lsls	r0, r2, #27
 80255d2:	d411      	bmi.n	80255f8 <__swsetup_r+0x50>
 80255d4:	2209      	movs	r2, #9
 80255d6:	6032      	str	r2, [r6, #0]
 80255d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80255dc:	81a3      	strh	r3, [r4, #12]
 80255de:	f04f 30ff 	mov.w	r0, #4294967295
 80255e2:	e03e      	b.n	8025662 <__swsetup_r+0xba>
 80255e4:	4b25      	ldr	r3, [pc, #148]	; (802567c <__swsetup_r+0xd4>)
 80255e6:	429c      	cmp	r4, r3
 80255e8:	d101      	bne.n	80255ee <__swsetup_r+0x46>
 80255ea:	68ac      	ldr	r4, [r5, #8]
 80255ec:	e7eb      	b.n	80255c6 <__swsetup_r+0x1e>
 80255ee:	4b24      	ldr	r3, [pc, #144]	; (8025680 <__swsetup_r+0xd8>)
 80255f0:	429c      	cmp	r4, r3
 80255f2:	bf08      	it	eq
 80255f4:	68ec      	ldreq	r4, [r5, #12]
 80255f6:	e7e6      	b.n	80255c6 <__swsetup_r+0x1e>
 80255f8:	0751      	lsls	r1, r2, #29
 80255fa:	d512      	bpl.n	8025622 <__swsetup_r+0x7a>
 80255fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80255fe:	b141      	cbz	r1, 8025612 <__swsetup_r+0x6a>
 8025600:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025604:	4299      	cmp	r1, r3
 8025606:	d002      	beq.n	802560e <__swsetup_r+0x66>
 8025608:	4630      	mov	r0, r6
 802560a:	f7ff fbb7 	bl	8024d7c <_free_r>
 802560e:	2300      	movs	r3, #0
 8025610:	6363      	str	r3, [r4, #52]	; 0x34
 8025612:	89a3      	ldrh	r3, [r4, #12]
 8025614:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025618:	81a3      	strh	r3, [r4, #12]
 802561a:	2300      	movs	r3, #0
 802561c:	6063      	str	r3, [r4, #4]
 802561e:	6923      	ldr	r3, [r4, #16]
 8025620:	6023      	str	r3, [r4, #0]
 8025622:	89a3      	ldrh	r3, [r4, #12]
 8025624:	f043 0308 	orr.w	r3, r3, #8
 8025628:	81a3      	strh	r3, [r4, #12]
 802562a:	6923      	ldr	r3, [r4, #16]
 802562c:	b94b      	cbnz	r3, 8025642 <__swsetup_r+0x9a>
 802562e:	89a3      	ldrh	r3, [r4, #12]
 8025630:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025638:	d003      	beq.n	8025642 <__swsetup_r+0x9a>
 802563a:	4621      	mov	r1, r4
 802563c:	4630      	mov	r0, r6
 802563e:	f000 fa23 	bl	8025a88 <__smakebuf_r>
 8025642:	89a2      	ldrh	r2, [r4, #12]
 8025644:	f012 0301 	ands.w	r3, r2, #1
 8025648:	d00c      	beq.n	8025664 <__swsetup_r+0xbc>
 802564a:	2300      	movs	r3, #0
 802564c:	60a3      	str	r3, [r4, #8]
 802564e:	6963      	ldr	r3, [r4, #20]
 8025650:	425b      	negs	r3, r3
 8025652:	61a3      	str	r3, [r4, #24]
 8025654:	6923      	ldr	r3, [r4, #16]
 8025656:	b953      	cbnz	r3, 802566e <__swsetup_r+0xc6>
 8025658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802565c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8025660:	d1ba      	bne.n	80255d8 <__swsetup_r+0x30>
 8025662:	bd70      	pop	{r4, r5, r6, pc}
 8025664:	0792      	lsls	r2, r2, #30
 8025666:	bf58      	it	pl
 8025668:	6963      	ldrpl	r3, [r4, #20]
 802566a:	60a3      	str	r3, [r4, #8]
 802566c:	e7f2      	b.n	8025654 <__swsetup_r+0xac>
 802566e:	2000      	movs	r0, #0
 8025670:	e7f7      	b.n	8025662 <__swsetup_r+0xba>
 8025672:	bf00      	nop
 8025674:	200000a8 	.word	0x200000a8
 8025678:	0802bfa8 	.word	0x0802bfa8
 802567c:	0802bfc8 	.word	0x0802bfc8
 8025680:	0802bf88 	.word	0x0802bf88

08025684 <__register_exitproc>:
 8025684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025688:	4d2c      	ldr	r5, [pc, #176]	; (802573c <__register_exitproc+0xb8>)
 802568a:	682c      	ldr	r4, [r5, #0]
 802568c:	4607      	mov	r7, r0
 802568e:	460e      	mov	r6, r1
 8025690:	4691      	mov	r9, r2
 8025692:	4698      	mov	r8, r3
 8025694:	b934      	cbnz	r4, 80256a4 <__register_exitproc+0x20>
 8025696:	4b2a      	ldr	r3, [pc, #168]	; (8025740 <__register_exitproc+0xbc>)
 8025698:	4c2a      	ldr	r4, [pc, #168]	; (8025744 <__register_exitproc+0xc0>)
 802569a:	602c      	str	r4, [r5, #0]
 802569c:	b113      	cbz	r3, 80256a4 <__register_exitproc+0x20>
 802569e:	681b      	ldr	r3, [r3, #0]
 80256a0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80256a4:	6863      	ldr	r3, [r4, #4]
 80256a6:	2b1f      	cmp	r3, #31
 80256a8:	dd3d      	ble.n	8025726 <__register_exitproc+0xa2>
 80256aa:	4b27      	ldr	r3, [pc, #156]	; (8025748 <__register_exitproc+0xc4>)
 80256ac:	b91b      	cbnz	r3, 80256b6 <__register_exitproc+0x32>
 80256ae:	f04f 30ff 	mov.w	r0, #4294967295
 80256b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80256b6:	208c      	movs	r0, #140	; 0x8c
 80256b8:	f7ff fb3c 	bl	8024d34 <malloc>
 80256bc:	4604      	mov	r4, r0
 80256be:	2800      	cmp	r0, #0
 80256c0:	d0f5      	beq.n	80256ae <__register_exitproc+0x2a>
 80256c2:	2300      	movs	r3, #0
 80256c4:	682a      	ldr	r2, [r5, #0]
 80256c6:	6002      	str	r2, [r0, #0]
 80256c8:	6043      	str	r3, [r0, #4]
 80256ca:	6028      	str	r0, [r5, #0]
 80256cc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 80256d0:	b30f      	cbz	r7, 8025716 <__register_exitproc+0x92>
 80256d2:	f44f 7084 	mov.w	r0, #264	; 0x108
 80256d6:	f7ff fb2d 	bl	8024d34 <malloc>
 80256da:	2800      	cmp	r0, #0
 80256dc:	d0e7      	beq.n	80256ae <__register_exitproc+0x2a>
 80256de:	2300      	movs	r3, #0
 80256e0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80256e4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80256e8:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80256ec:	6862      	ldr	r2, [r4, #4]
 80256ee:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 80256f2:	2301      	movs	r3, #1
 80256f4:	4093      	lsls	r3, r2
 80256f6:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80256fa:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 80256fe:	431a      	orrs	r2, r3
 8025700:	2f02      	cmp	r7, #2
 8025702:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8025706:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 802570a:	bf02      	ittt	eq
 802570c:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8025710:	4313      	orreq	r3, r2
 8025712:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8025716:	6863      	ldr	r3, [r4, #4]
 8025718:	1c5a      	adds	r2, r3, #1
 802571a:	3302      	adds	r3, #2
 802571c:	6062      	str	r2, [r4, #4]
 802571e:	2000      	movs	r0, #0
 8025720:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8025724:	e7c5      	b.n	80256b2 <__register_exitproc+0x2e>
 8025726:	2f00      	cmp	r7, #0
 8025728:	d0f5      	beq.n	8025716 <__register_exitproc+0x92>
 802572a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802572e:	2800      	cmp	r0, #0
 8025730:	d1dc      	bne.n	80256ec <__register_exitproc+0x68>
 8025732:	4b05      	ldr	r3, [pc, #20]	; (8025748 <__register_exitproc+0xc4>)
 8025734:	2b00      	cmp	r3, #0
 8025736:	d0ba      	beq.n	80256ae <__register_exitproc+0x2a>
 8025738:	e7cb      	b.n	80256d2 <__register_exitproc+0x4e>
 802573a:	bf00      	nop
 802573c:	2000b58c 	.word	0x2000b58c
 8025740:	0802bf84 	.word	0x0802bf84
 8025744:	2000b500 	.word	0x2000b500
 8025748:	08024d35 	.word	0x08024d35

0802574c <__sflush_r>:
 802574c:	898a      	ldrh	r2, [r1, #12]
 802574e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025752:	4605      	mov	r5, r0
 8025754:	0710      	lsls	r0, r2, #28
 8025756:	460c      	mov	r4, r1
 8025758:	d458      	bmi.n	802580c <__sflush_r+0xc0>
 802575a:	684b      	ldr	r3, [r1, #4]
 802575c:	2b00      	cmp	r3, #0
 802575e:	dc05      	bgt.n	802576c <__sflush_r+0x20>
 8025760:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025762:	2b00      	cmp	r3, #0
 8025764:	dc02      	bgt.n	802576c <__sflush_r+0x20>
 8025766:	2000      	movs	r0, #0
 8025768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802576c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802576e:	2e00      	cmp	r6, #0
 8025770:	d0f9      	beq.n	8025766 <__sflush_r+0x1a>
 8025772:	2300      	movs	r3, #0
 8025774:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025778:	682f      	ldr	r7, [r5, #0]
 802577a:	6a21      	ldr	r1, [r4, #32]
 802577c:	602b      	str	r3, [r5, #0]
 802577e:	d032      	beq.n	80257e6 <__sflush_r+0x9a>
 8025780:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025782:	89a3      	ldrh	r3, [r4, #12]
 8025784:	075a      	lsls	r2, r3, #29
 8025786:	d505      	bpl.n	8025794 <__sflush_r+0x48>
 8025788:	6863      	ldr	r3, [r4, #4]
 802578a:	1ac0      	subs	r0, r0, r3
 802578c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802578e:	b10b      	cbz	r3, 8025794 <__sflush_r+0x48>
 8025790:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025792:	1ac0      	subs	r0, r0, r3
 8025794:	2300      	movs	r3, #0
 8025796:	4602      	mov	r2, r0
 8025798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802579a:	6a21      	ldr	r1, [r4, #32]
 802579c:	4628      	mov	r0, r5
 802579e:	47b0      	blx	r6
 80257a0:	1c43      	adds	r3, r0, #1
 80257a2:	89a3      	ldrh	r3, [r4, #12]
 80257a4:	d106      	bne.n	80257b4 <__sflush_r+0x68>
 80257a6:	6829      	ldr	r1, [r5, #0]
 80257a8:	291d      	cmp	r1, #29
 80257aa:	d848      	bhi.n	802583e <__sflush_r+0xf2>
 80257ac:	4a29      	ldr	r2, [pc, #164]	; (8025854 <__sflush_r+0x108>)
 80257ae:	40ca      	lsrs	r2, r1
 80257b0:	07d6      	lsls	r6, r2, #31
 80257b2:	d544      	bpl.n	802583e <__sflush_r+0xf2>
 80257b4:	2200      	movs	r2, #0
 80257b6:	6062      	str	r2, [r4, #4]
 80257b8:	04d9      	lsls	r1, r3, #19
 80257ba:	6922      	ldr	r2, [r4, #16]
 80257bc:	6022      	str	r2, [r4, #0]
 80257be:	d504      	bpl.n	80257ca <__sflush_r+0x7e>
 80257c0:	1c42      	adds	r2, r0, #1
 80257c2:	d101      	bne.n	80257c8 <__sflush_r+0x7c>
 80257c4:	682b      	ldr	r3, [r5, #0]
 80257c6:	b903      	cbnz	r3, 80257ca <__sflush_r+0x7e>
 80257c8:	6560      	str	r0, [r4, #84]	; 0x54
 80257ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80257cc:	602f      	str	r7, [r5, #0]
 80257ce:	2900      	cmp	r1, #0
 80257d0:	d0c9      	beq.n	8025766 <__sflush_r+0x1a>
 80257d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80257d6:	4299      	cmp	r1, r3
 80257d8:	d002      	beq.n	80257e0 <__sflush_r+0x94>
 80257da:	4628      	mov	r0, r5
 80257dc:	f7ff face 	bl	8024d7c <_free_r>
 80257e0:	2000      	movs	r0, #0
 80257e2:	6360      	str	r0, [r4, #52]	; 0x34
 80257e4:	e7c0      	b.n	8025768 <__sflush_r+0x1c>
 80257e6:	2301      	movs	r3, #1
 80257e8:	4628      	mov	r0, r5
 80257ea:	47b0      	blx	r6
 80257ec:	1c41      	adds	r1, r0, #1
 80257ee:	d1c8      	bne.n	8025782 <__sflush_r+0x36>
 80257f0:	682b      	ldr	r3, [r5, #0]
 80257f2:	2b00      	cmp	r3, #0
 80257f4:	d0c5      	beq.n	8025782 <__sflush_r+0x36>
 80257f6:	2b1d      	cmp	r3, #29
 80257f8:	d001      	beq.n	80257fe <__sflush_r+0xb2>
 80257fa:	2b16      	cmp	r3, #22
 80257fc:	d101      	bne.n	8025802 <__sflush_r+0xb6>
 80257fe:	602f      	str	r7, [r5, #0]
 8025800:	e7b1      	b.n	8025766 <__sflush_r+0x1a>
 8025802:	89a3      	ldrh	r3, [r4, #12]
 8025804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025808:	81a3      	strh	r3, [r4, #12]
 802580a:	e7ad      	b.n	8025768 <__sflush_r+0x1c>
 802580c:	690f      	ldr	r7, [r1, #16]
 802580e:	2f00      	cmp	r7, #0
 8025810:	d0a9      	beq.n	8025766 <__sflush_r+0x1a>
 8025812:	0793      	lsls	r3, r2, #30
 8025814:	680e      	ldr	r6, [r1, #0]
 8025816:	bf08      	it	eq
 8025818:	694b      	ldreq	r3, [r1, #20]
 802581a:	600f      	str	r7, [r1, #0]
 802581c:	bf18      	it	ne
 802581e:	2300      	movne	r3, #0
 8025820:	eba6 0807 	sub.w	r8, r6, r7
 8025824:	608b      	str	r3, [r1, #8]
 8025826:	f1b8 0f00 	cmp.w	r8, #0
 802582a:	dd9c      	ble.n	8025766 <__sflush_r+0x1a>
 802582c:	4643      	mov	r3, r8
 802582e:	463a      	mov	r2, r7
 8025830:	6a21      	ldr	r1, [r4, #32]
 8025832:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025834:	4628      	mov	r0, r5
 8025836:	47b0      	blx	r6
 8025838:	2800      	cmp	r0, #0
 802583a:	dc06      	bgt.n	802584a <__sflush_r+0xfe>
 802583c:	89a3      	ldrh	r3, [r4, #12]
 802583e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025842:	81a3      	strh	r3, [r4, #12]
 8025844:	f04f 30ff 	mov.w	r0, #4294967295
 8025848:	e78e      	b.n	8025768 <__sflush_r+0x1c>
 802584a:	4407      	add	r7, r0
 802584c:	eba8 0800 	sub.w	r8, r8, r0
 8025850:	e7e9      	b.n	8025826 <__sflush_r+0xda>
 8025852:	bf00      	nop
 8025854:	20400001 	.word	0x20400001

08025858 <_fflush_r>:
 8025858:	b538      	push	{r3, r4, r5, lr}
 802585a:	690b      	ldr	r3, [r1, #16]
 802585c:	4605      	mov	r5, r0
 802585e:	460c      	mov	r4, r1
 8025860:	b1db      	cbz	r3, 802589a <_fflush_r+0x42>
 8025862:	b118      	cbz	r0, 802586c <_fflush_r+0x14>
 8025864:	6983      	ldr	r3, [r0, #24]
 8025866:	b90b      	cbnz	r3, 802586c <_fflush_r+0x14>
 8025868:	f000 f860 	bl	802592c <__sinit>
 802586c:	4b0c      	ldr	r3, [pc, #48]	; (80258a0 <_fflush_r+0x48>)
 802586e:	429c      	cmp	r4, r3
 8025870:	d109      	bne.n	8025886 <_fflush_r+0x2e>
 8025872:	686c      	ldr	r4, [r5, #4]
 8025874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025878:	b17b      	cbz	r3, 802589a <_fflush_r+0x42>
 802587a:	4621      	mov	r1, r4
 802587c:	4628      	mov	r0, r5
 802587e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025882:	f7ff bf63 	b.w	802574c <__sflush_r>
 8025886:	4b07      	ldr	r3, [pc, #28]	; (80258a4 <_fflush_r+0x4c>)
 8025888:	429c      	cmp	r4, r3
 802588a:	d101      	bne.n	8025890 <_fflush_r+0x38>
 802588c:	68ac      	ldr	r4, [r5, #8]
 802588e:	e7f1      	b.n	8025874 <_fflush_r+0x1c>
 8025890:	4b05      	ldr	r3, [pc, #20]	; (80258a8 <_fflush_r+0x50>)
 8025892:	429c      	cmp	r4, r3
 8025894:	bf08      	it	eq
 8025896:	68ec      	ldreq	r4, [r5, #12]
 8025898:	e7ec      	b.n	8025874 <_fflush_r+0x1c>
 802589a:	2000      	movs	r0, #0
 802589c:	bd38      	pop	{r3, r4, r5, pc}
 802589e:	bf00      	nop
 80258a0:	0802bfa8 	.word	0x0802bfa8
 80258a4:	0802bfc8 	.word	0x0802bfc8
 80258a8:	0802bf88 	.word	0x0802bf88

080258ac <std>:
 80258ac:	2300      	movs	r3, #0
 80258ae:	b510      	push	{r4, lr}
 80258b0:	4604      	mov	r4, r0
 80258b2:	e9c0 3300 	strd	r3, r3, [r0]
 80258b6:	6083      	str	r3, [r0, #8]
 80258b8:	8181      	strh	r1, [r0, #12]
 80258ba:	6643      	str	r3, [r0, #100]	; 0x64
 80258bc:	81c2      	strh	r2, [r0, #14]
 80258be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80258c2:	6183      	str	r3, [r0, #24]
 80258c4:	4619      	mov	r1, r3
 80258c6:	2208      	movs	r2, #8
 80258c8:	305c      	adds	r0, #92	; 0x5c
 80258ca:	f7ff fa4e 	bl	8024d6a <memset>
 80258ce:	4b05      	ldr	r3, [pc, #20]	; (80258e4 <std+0x38>)
 80258d0:	6263      	str	r3, [r4, #36]	; 0x24
 80258d2:	4b05      	ldr	r3, [pc, #20]	; (80258e8 <std+0x3c>)
 80258d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80258d6:	4b05      	ldr	r3, [pc, #20]	; (80258ec <std+0x40>)
 80258d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80258da:	4b05      	ldr	r3, [pc, #20]	; (80258f0 <std+0x44>)
 80258dc:	6224      	str	r4, [r4, #32]
 80258de:	6323      	str	r3, [r4, #48]	; 0x30
 80258e0:	bd10      	pop	{r4, pc}
 80258e2:	bf00      	nop
 80258e4:	08025b0d 	.word	0x08025b0d
 80258e8:	08025b2f 	.word	0x08025b2f
 80258ec:	08025b67 	.word	0x08025b67
 80258f0:	08025b8b 	.word	0x08025b8b

080258f4 <_cleanup_r>:
 80258f4:	4901      	ldr	r1, [pc, #4]	; (80258fc <_cleanup_r+0x8>)
 80258f6:	f000 b885 	b.w	8025a04 <_fwalk_reent>
 80258fa:	bf00      	nop
 80258fc:	08025859 	.word	0x08025859

08025900 <__sfmoreglue>:
 8025900:	b570      	push	{r4, r5, r6, lr}
 8025902:	1e4a      	subs	r2, r1, #1
 8025904:	2568      	movs	r5, #104	; 0x68
 8025906:	4355      	muls	r5, r2
 8025908:	460e      	mov	r6, r1
 802590a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802590e:	f7ff fa83 	bl	8024e18 <_malloc_r>
 8025912:	4604      	mov	r4, r0
 8025914:	b140      	cbz	r0, 8025928 <__sfmoreglue+0x28>
 8025916:	2100      	movs	r1, #0
 8025918:	e9c0 1600 	strd	r1, r6, [r0]
 802591c:	300c      	adds	r0, #12
 802591e:	60a0      	str	r0, [r4, #8]
 8025920:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025924:	f7ff fa21 	bl	8024d6a <memset>
 8025928:	4620      	mov	r0, r4
 802592a:	bd70      	pop	{r4, r5, r6, pc}

0802592c <__sinit>:
 802592c:	6983      	ldr	r3, [r0, #24]
 802592e:	b510      	push	{r4, lr}
 8025930:	4604      	mov	r4, r0
 8025932:	bb33      	cbnz	r3, 8025982 <__sinit+0x56>
 8025934:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8025938:	6503      	str	r3, [r0, #80]	; 0x50
 802593a:	4b12      	ldr	r3, [pc, #72]	; (8025984 <__sinit+0x58>)
 802593c:	4a12      	ldr	r2, [pc, #72]	; (8025988 <__sinit+0x5c>)
 802593e:	681b      	ldr	r3, [r3, #0]
 8025940:	6282      	str	r2, [r0, #40]	; 0x28
 8025942:	4298      	cmp	r0, r3
 8025944:	bf04      	itt	eq
 8025946:	2301      	moveq	r3, #1
 8025948:	6183      	streq	r3, [r0, #24]
 802594a:	f000 f81f 	bl	802598c <__sfp>
 802594e:	6060      	str	r0, [r4, #4]
 8025950:	4620      	mov	r0, r4
 8025952:	f000 f81b 	bl	802598c <__sfp>
 8025956:	60a0      	str	r0, [r4, #8]
 8025958:	4620      	mov	r0, r4
 802595a:	f000 f817 	bl	802598c <__sfp>
 802595e:	2200      	movs	r2, #0
 8025960:	60e0      	str	r0, [r4, #12]
 8025962:	2104      	movs	r1, #4
 8025964:	6860      	ldr	r0, [r4, #4]
 8025966:	f7ff ffa1 	bl	80258ac <std>
 802596a:	2201      	movs	r2, #1
 802596c:	2109      	movs	r1, #9
 802596e:	68a0      	ldr	r0, [r4, #8]
 8025970:	f7ff ff9c 	bl	80258ac <std>
 8025974:	2202      	movs	r2, #2
 8025976:	2112      	movs	r1, #18
 8025978:	68e0      	ldr	r0, [r4, #12]
 802597a:	f7ff ff97 	bl	80258ac <std>
 802597e:	2301      	movs	r3, #1
 8025980:	61a3      	str	r3, [r4, #24]
 8025982:	bd10      	pop	{r4, pc}
 8025984:	0802bf4c 	.word	0x0802bf4c
 8025988:	080258f5 	.word	0x080258f5

0802598c <__sfp>:
 802598c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802598e:	4b1b      	ldr	r3, [pc, #108]	; (80259fc <__sfp+0x70>)
 8025990:	681e      	ldr	r6, [r3, #0]
 8025992:	69b3      	ldr	r3, [r6, #24]
 8025994:	4607      	mov	r7, r0
 8025996:	b913      	cbnz	r3, 802599e <__sfp+0x12>
 8025998:	4630      	mov	r0, r6
 802599a:	f7ff ffc7 	bl	802592c <__sinit>
 802599e:	3648      	adds	r6, #72	; 0x48
 80259a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80259a4:	3b01      	subs	r3, #1
 80259a6:	d503      	bpl.n	80259b0 <__sfp+0x24>
 80259a8:	6833      	ldr	r3, [r6, #0]
 80259aa:	b133      	cbz	r3, 80259ba <__sfp+0x2e>
 80259ac:	6836      	ldr	r6, [r6, #0]
 80259ae:	e7f7      	b.n	80259a0 <__sfp+0x14>
 80259b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80259b4:	b16d      	cbz	r5, 80259d2 <__sfp+0x46>
 80259b6:	3468      	adds	r4, #104	; 0x68
 80259b8:	e7f4      	b.n	80259a4 <__sfp+0x18>
 80259ba:	2104      	movs	r1, #4
 80259bc:	4638      	mov	r0, r7
 80259be:	f7ff ff9f 	bl	8025900 <__sfmoreglue>
 80259c2:	6030      	str	r0, [r6, #0]
 80259c4:	2800      	cmp	r0, #0
 80259c6:	d1f1      	bne.n	80259ac <__sfp+0x20>
 80259c8:	230c      	movs	r3, #12
 80259ca:	603b      	str	r3, [r7, #0]
 80259cc:	4604      	mov	r4, r0
 80259ce:	4620      	mov	r0, r4
 80259d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80259d2:	4b0b      	ldr	r3, [pc, #44]	; (8025a00 <__sfp+0x74>)
 80259d4:	6665      	str	r5, [r4, #100]	; 0x64
 80259d6:	e9c4 5500 	strd	r5, r5, [r4]
 80259da:	60a5      	str	r5, [r4, #8]
 80259dc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80259e0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80259e4:	2208      	movs	r2, #8
 80259e6:	4629      	mov	r1, r5
 80259e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80259ec:	f7ff f9bd 	bl	8024d6a <memset>
 80259f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80259f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80259f8:	e7e9      	b.n	80259ce <__sfp+0x42>
 80259fa:	bf00      	nop
 80259fc:	0802bf4c 	.word	0x0802bf4c
 8025a00:	ffff0001 	.word	0xffff0001

08025a04 <_fwalk_reent>:
 8025a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025a08:	4680      	mov	r8, r0
 8025a0a:	4689      	mov	r9, r1
 8025a0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025a10:	2600      	movs	r6, #0
 8025a12:	b914      	cbnz	r4, 8025a1a <_fwalk_reent+0x16>
 8025a14:	4630      	mov	r0, r6
 8025a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025a1a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8025a1e:	3f01      	subs	r7, #1
 8025a20:	d501      	bpl.n	8025a26 <_fwalk_reent+0x22>
 8025a22:	6824      	ldr	r4, [r4, #0]
 8025a24:	e7f5      	b.n	8025a12 <_fwalk_reent+0xe>
 8025a26:	89ab      	ldrh	r3, [r5, #12]
 8025a28:	2b01      	cmp	r3, #1
 8025a2a:	d907      	bls.n	8025a3c <_fwalk_reent+0x38>
 8025a2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025a30:	3301      	adds	r3, #1
 8025a32:	d003      	beq.n	8025a3c <_fwalk_reent+0x38>
 8025a34:	4629      	mov	r1, r5
 8025a36:	4640      	mov	r0, r8
 8025a38:	47c8      	blx	r9
 8025a3a:	4306      	orrs	r6, r0
 8025a3c:	3568      	adds	r5, #104	; 0x68
 8025a3e:	e7ee      	b.n	8025a1e <_fwalk_reent+0x1a>

08025a40 <__swhatbuf_r>:
 8025a40:	b570      	push	{r4, r5, r6, lr}
 8025a42:	460e      	mov	r6, r1
 8025a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025a48:	2900      	cmp	r1, #0
 8025a4a:	b096      	sub	sp, #88	; 0x58
 8025a4c:	4614      	mov	r4, r2
 8025a4e:	461d      	mov	r5, r3
 8025a50:	da07      	bge.n	8025a62 <__swhatbuf_r+0x22>
 8025a52:	2300      	movs	r3, #0
 8025a54:	602b      	str	r3, [r5, #0]
 8025a56:	89b3      	ldrh	r3, [r6, #12]
 8025a58:	061a      	lsls	r2, r3, #24
 8025a5a:	d410      	bmi.n	8025a7e <__swhatbuf_r+0x3e>
 8025a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025a60:	e00e      	b.n	8025a80 <__swhatbuf_r+0x40>
 8025a62:	466a      	mov	r2, sp
 8025a64:	f000 f8b8 	bl	8025bd8 <_fstat_r>
 8025a68:	2800      	cmp	r0, #0
 8025a6a:	dbf2      	blt.n	8025a52 <__swhatbuf_r+0x12>
 8025a6c:	9a01      	ldr	r2, [sp, #4]
 8025a6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8025a72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025a76:	425a      	negs	r2, r3
 8025a78:	415a      	adcs	r2, r3
 8025a7a:	602a      	str	r2, [r5, #0]
 8025a7c:	e7ee      	b.n	8025a5c <__swhatbuf_r+0x1c>
 8025a7e:	2340      	movs	r3, #64	; 0x40
 8025a80:	2000      	movs	r0, #0
 8025a82:	6023      	str	r3, [r4, #0]
 8025a84:	b016      	add	sp, #88	; 0x58
 8025a86:	bd70      	pop	{r4, r5, r6, pc}

08025a88 <__smakebuf_r>:
 8025a88:	898b      	ldrh	r3, [r1, #12]
 8025a8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025a8c:	079d      	lsls	r5, r3, #30
 8025a8e:	4606      	mov	r6, r0
 8025a90:	460c      	mov	r4, r1
 8025a92:	d507      	bpl.n	8025aa4 <__smakebuf_r+0x1c>
 8025a94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025a98:	6023      	str	r3, [r4, #0]
 8025a9a:	6123      	str	r3, [r4, #16]
 8025a9c:	2301      	movs	r3, #1
 8025a9e:	6163      	str	r3, [r4, #20]
 8025aa0:	b002      	add	sp, #8
 8025aa2:	bd70      	pop	{r4, r5, r6, pc}
 8025aa4:	ab01      	add	r3, sp, #4
 8025aa6:	466a      	mov	r2, sp
 8025aa8:	f7ff ffca 	bl	8025a40 <__swhatbuf_r>
 8025aac:	9900      	ldr	r1, [sp, #0]
 8025aae:	4605      	mov	r5, r0
 8025ab0:	4630      	mov	r0, r6
 8025ab2:	f7ff f9b1 	bl	8024e18 <_malloc_r>
 8025ab6:	b948      	cbnz	r0, 8025acc <__smakebuf_r+0x44>
 8025ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025abc:	059a      	lsls	r2, r3, #22
 8025abe:	d4ef      	bmi.n	8025aa0 <__smakebuf_r+0x18>
 8025ac0:	f023 0303 	bic.w	r3, r3, #3
 8025ac4:	f043 0302 	orr.w	r3, r3, #2
 8025ac8:	81a3      	strh	r3, [r4, #12]
 8025aca:	e7e3      	b.n	8025a94 <__smakebuf_r+0xc>
 8025acc:	4b0d      	ldr	r3, [pc, #52]	; (8025b04 <__smakebuf_r+0x7c>)
 8025ace:	62b3      	str	r3, [r6, #40]	; 0x28
 8025ad0:	89a3      	ldrh	r3, [r4, #12]
 8025ad2:	6020      	str	r0, [r4, #0]
 8025ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025ad8:	81a3      	strh	r3, [r4, #12]
 8025ada:	9b00      	ldr	r3, [sp, #0]
 8025adc:	6163      	str	r3, [r4, #20]
 8025ade:	9b01      	ldr	r3, [sp, #4]
 8025ae0:	6120      	str	r0, [r4, #16]
 8025ae2:	b15b      	cbz	r3, 8025afc <__smakebuf_r+0x74>
 8025ae4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025ae8:	4630      	mov	r0, r6
 8025aea:	f000 f887 	bl	8025bfc <_isatty_r>
 8025aee:	b128      	cbz	r0, 8025afc <__smakebuf_r+0x74>
 8025af0:	89a3      	ldrh	r3, [r4, #12]
 8025af2:	f023 0303 	bic.w	r3, r3, #3
 8025af6:	f043 0301 	orr.w	r3, r3, #1
 8025afa:	81a3      	strh	r3, [r4, #12]
 8025afc:	89a3      	ldrh	r3, [r4, #12]
 8025afe:	431d      	orrs	r5, r3
 8025b00:	81a5      	strh	r5, [r4, #12]
 8025b02:	e7cd      	b.n	8025aa0 <__smakebuf_r+0x18>
 8025b04:	080258f5 	.word	0x080258f5

08025b08 <__malloc_lock>:
 8025b08:	4770      	bx	lr

08025b0a <__malloc_unlock>:
 8025b0a:	4770      	bx	lr

08025b0c <__sread>:
 8025b0c:	b510      	push	{r4, lr}
 8025b0e:	460c      	mov	r4, r1
 8025b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025b14:	f000 f894 	bl	8025c40 <_read_r>
 8025b18:	2800      	cmp	r0, #0
 8025b1a:	bfab      	itete	ge
 8025b1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8025b1e:	89a3      	ldrhlt	r3, [r4, #12]
 8025b20:	181b      	addge	r3, r3, r0
 8025b22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8025b26:	bfac      	ite	ge
 8025b28:	6563      	strge	r3, [r4, #84]	; 0x54
 8025b2a:	81a3      	strhlt	r3, [r4, #12]
 8025b2c:	bd10      	pop	{r4, pc}

08025b2e <__swrite>:
 8025b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025b32:	461f      	mov	r7, r3
 8025b34:	898b      	ldrh	r3, [r1, #12]
 8025b36:	05db      	lsls	r3, r3, #23
 8025b38:	4605      	mov	r5, r0
 8025b3a:	460c      	mov	r4, r1
 8025b3c:	4616      	mov	r6, r2
 8025b3e:	d505      	bpl.n	8025b4c <__swrite+0x1e>
 8025b40:	2302      	movs	r3, #2
 8025b42:	2200      	movs	r2, #0
 8025b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025b48:	f000 f868 	bl	8025c1c <_lseek_r>
 8025b4c:	89a3      	ldrh	r3, [r4, #12]
 8025b4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025b52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8025b56:	81a3      	strh	r3, [r4, #12]
 8025b58:	4632      	mov	r2, r6
 8025b5a:	463b      	mov	r3, r7
 8025b5c:	4628      	mov	r0, r5
 8025b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025b62:	f000 b817 	b.w	8025b94 <_write_r>

08025b66 <__sseek>:
 8025b66:	b510      	push	{r4, lr}
 8025b68:	460c      	mov	r4, r1
 8025b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025b6e:	f000 f855 	bl	8025c1c <_lseek_r>
 8025b72:	1c43      	adds	r3, r0, #1
 8025b74:	89a3      	ldrh	r3, [r4, #12]
 8025b76:	bf15      	itete	ne
 8025b78:	6560      	strne	r0, [r4, #84]	; 0x54
 8025b7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025b7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8025b82:	81a3      	strheq	r3, [r4, #12]
 8025b84:	bf18      	it	ne
 8025b86:	81a3      	strhne	r3, [r4, #12]
 8025b88:	bd10      	pop	{r4, pc}

08025b8a <__sclose>:
 8025b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025b8e:	f000 b813 	b.w	8025bb8 <_close_r>
	...

08025b94 <_write_r>:
 8025b94:	b538      	push	{r3, r4, r5, lr}
 8025b96:	4c07      	ldr	r4, [pc, #28]	; (8025bb4 <_write_r+0x20>)
 8025b98:	4605      	mov	r5, r0
 8025b9a:	4608      	mov	r0, r1
 8025b9c:	4611      	mov	r1, r2
 8025b9e:	2200      	movs	r2, #0
 8025ba0:	6022      	str	r2, [r4, #0]
 8025ba2:	461a      	mov	r2, r3
 8025ba4:	f7dc f815 	bl	8001bd2 <_write>
 8025ba8:	1c43      	adds	r3, r0, #1
 8025baa:	d102      	bne.n	8025bb2 <_write_r+0x1e>
 8025bac:	6823      	ldr	r3, [r4, #0]
 8025bae:	b103      	cbz	r3, 8025bb2 <_write_r+0x1e>
 8025bb0:	602b      	str	r3, [r5, #0]
 8025bb2:	bd38      	pop	{r3, r4, r5, pc}
 8025bb4:	2000b7fc 	.word	0x2000b7fc

08025bb8 <_close_r>:
 8025bb8:	b538      	push	{r3, r4, r5, lr}
 8025bba:	4c06      	ldr	r4, [pc, #24]	; (8025bd4 <_close_r+0x1c>)
 8025bbc:	2300      	movs	r3, #0
 8025bbe:	4605      	mov	r5, r0
 8025bc0:	4608      	mov	r0, r1
 8025bc2:	6023      	str	r3, [r4, #0]
 8025bc4:	f7dc f821 	bl	8001c0a <_close>
 8025bc8:	1c43      	adds	r3, r0, #1
 8025bca:	d102      	bne.n	8025bd2 <_close_r+0x1a>
 8025bcc:	6823      	ldr	r3, [r4, #0]
 8025bce:	b103      	cbz	r3, 8025bd2 <_close_r+0x1a>
 8025bd0:	602b      	str	r3, [r5, #0]
 8025bd2:	bd38      	pop	{r3, r4, r5, pc}
 8025bd4:	2000b7fc 	.word	0x2000b7fc

08025bd8 <_fstat_r>:
 8025bd8:	b538      	push	{r3, r4, r5, lr}
 8025bda:	4c07      	ldr	r4, [pc, #28]	; (8025bf8 <_fstat_r+0x20>)
 8025bdc:	2300      	movs	r3, #0
 8025bde:	4605      	mov	r5, r0
 8025be0:	4608      	mov	r0, r1
 8025be2:	4611      	mov	r1, r2
 8025be4:	6023      	str	r3, [r4, #0]
 8025be6:	f7dc f81c 	bl	8001c22 <_fstat>
 8025bea:	1c43      	adds	r3, r0, #1
 8025bec:	d102      	bne.n	8025bf4 <_fstat_r+0x1c>
 8025bee:	6823      	ldr	r3, [r4, #0]
 8025bf0:	b103      	cbz	r3, 8025bf4 <_fstat_r+0x1c>
 8025bf2:	602b      	str	r3, [r5, #0]
 8025bf4:	bd38      	pop	{r3, r4, r5, pc}
 8025bf6:	bf00      	nop
 8025bf8:	2000b7fc 	.word	0x2000b7fc

08025bfc <_isatty_r>:
 8025bfc:	b538      	push	{r3, r4, r5, lr}
 8025bfe:	4c06      	ldr	r4, [pc, #24]	; (8025c18 <_isatty_r+0x1c>)
 8025c00:	2300      	movs	r3, #0
 8025c02:	4605      	mov	r5, r0
 8025c04:	4608      	mov	r0, r1
 8025c06:	6023      	str	r3, [r4, #0]
 8025c08:	f7dc f81b 	bl	8001c42 <_isatty>
 8025c0c:	1c43      	adds	r3, r0, #1
 8025c0e:	d102      	bne.n	8025c16 <_isatty_r+0x1a>
 8025c10:	6823      	ldr	r3, [r4, #0]
 8025c12:	b103      	cbz	r3, 8025c16 <_isatty_r+0x1a>
 8025c14:	602b      	str	r3, [r5, #0]
 8025c16:	bd38      	pop	{r3, r4, r5, pc}
 8025c18:	2000b7fc 	.word	0x2000b7fc

08025c1c <_lseek_r>:
 8025c1c:	b538      	push	{r3, r4, r5, lr}
 8025c1e:	4c07      	ldr	r4, [pc, #28]	; (8025c3c <_lseek_r+0x20>)
 8025c20:	4605      	mov	r5, r0
 8025c22:	4608      	mov	r0, r1
 8025c24:	4611      	mov	r1, r2
 8025c26:	2200      	movs	r2, #0
 8025c28:	6022      	str	r2, [r4, #0]
 8025c2a:	461a      	mov	r2, r3
 8025c2c:	f7dc f814 	bl	8001c58 <_lseek>
 8025c30:	1c43      	adds	r3, r0, #1
 8025c32:	d102      	bne.n	8025c3a <_lseek_r+0x1e>
 8025c34:	6823      	ldr	r3, [r4, #0]
 8025c36:	b103      	cbz	r3, 8025c3a <_lseek_r+0x1e>
 8025c38:	602b      	str	r3, [r5, #0]
 8025c3a:	bd38      	pop	{r3, r4, r5, pc}
 8025c3c:	2000b7fc 	.word	0x2000b7fc

08025c40 <_read_r>:
 8025c40:	b538      	push	{r3, r4, r5, lr}
 8025c42:	4c07      	ldr	r4, [pc, #28]	; (8025c60 <_read_r+0x20>)
 8025c44:	4605      	mov	r5, r0
 8025c46:	4608      	mov	r0, r1
 8025c48:	4611      	mov	r1, r2
 8025c4a:	2200      	movs	r2, #0
 8025c4c:	6022      	str	r2, [r4, #0]
 8025c4e:	461a      	mov	r2, r3
 8025c50:	f7db ffa2 	bl	8001b98 <_read>
 8025c54:	1c43      	adds	r3, r0, #1
 8025c56:	d102      	bne.n	8025c5e <_read_r+0x1e>
 8025c58:	6823      	ldr	r3, [r4, #0]
 8025c5a:	b103      	cbz	r3, 8025c5e <_read_r+0x1e>
 8025c5c:	602b      	str	r3, [r5, #0]
 8025c5e:	bd38      	pop	{r3, r4, r5, pc}
 8025c60:	2000b7fc 	.word	0x2000b7fc

08025c64 <_init>:
 8025c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025c66:	bf00      	nop
 8025c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025c6a:	bc08      	pop	{r3}
 8025c6c:	469e      	mov	lr, r3
 8025c6e:	4770      	bx	lr

08025c70 <_fini>:
 8025c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025c72:	bf00      	nop
 8025c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025c76:	bc08      	pop	{r3}
 8025c78:	469e      	mov	lr, r3
 8025c7a:	4770      	bx	lr
