/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/menu_screen/MenuViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

MenuViewBase::MenuViewBase() :
    buttonCallback(this, &MenuViewBase::buttonCallbackHandler),
    updateItemCallback(this, &MenuViewBase::updateItemCallbackHandler)
{

    imageBg.setXY(0, 0);
    imageBg.setBitmap(touchgfx::Bitmap(BITMAP_GREEN_POLYGONS_BACKGROUND_480X272_ID));

    image1.setXY(50, 70);
    image1.setBitmap(touchgfx::Bitmap(BITMAP_WHEEL_SELECTOR_BACKGROUND_380_ID));
    image1.setAlpha(191);

    image2.setXY(180, 60);
    image2.setBitmap(touchgfx::Bitmap(BITMAP_WHEEL_SELECTOR_OVERLAY_380_ID));
    image2.setAlpha(215);

    scrollWheel.setPosition(50, 76, 380, 88);
    scrollWheel.setHorizontal(true);
    scrollWheel.setCircular(true);
    scrollWheel.setEasingEquation(touchgfx::EasingEquations::linearEaseOut);
    scrollWheel.setSwipeAcceleration(10);
    scrollWheel.setDragAcceleration(10);
    scrollWheel.setNumberOfItems(7);
    scrollWheel.setSelectedItemOffset(130);
    scrollWheel.setDrawableSize(120, 0);
    scrollWheel.setDrawables(scrollWheelListItems, updateItemCallback);
    scrollWheel.animateToItem(1, 0);

    buttonOk.setXY(175, 194);
    buttonOk.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_EMPTY_RELEASED_ID), touchgfx::Bitmap(BITMAP_BUTTON_EMPTY_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICONS8_OK_60_ID), touchgfx::Bitmap(BITMAP_ICONS8_OK_60_ID));
    buttonOk.setIconXY(49, 12);
    buttonOk.setAction(buttonCallback);

    textArea.setXY(172, 17);
    textArea.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    textArea.setLinespacing(0);
    textArea.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));

    add(imageBg);
    add(image1);
    add(image2);
    add(scrollWheel);
    add(buttonOk);
    add(textArea);
}

void MenuViewBase::setupScreen()
{
    scrollWheel.initialize();
    for (int i = 0; i < scrollWheelListItems.getNumberOfDrawables(); i++)
    {
        scrollWheelListItems[i].initialize();
    }
}

void MenuViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonOk)
    {
        //InteractionButtonOKClicked
        //When buttonOk clicked call virtual function
        //Call ButtonOKClicked
        ButtonOKClicked();
    }
}

void MenuViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &scrollWheelListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        MenuContainer* cc = (MenuContainer*)d;
        scrollWheelUpdateItem(*cc, itemIndex);
    }
}
