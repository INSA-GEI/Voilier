/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/testrotationplateau_screen/TestRotationPlateauViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

TestRotationPlateauViewBase::TestRotationPlateauViewBase() :
    buttonCallback(this, &TestRotationPlateauViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &TestRotationPlateauViewBase::sliderValueChangedCallbackHandler),
    sliderValueConfirmedCallback(this, &TestRotationPlateauViewBase::sliderValueConfirmedCallbackHandler)
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    imageBg.setXY(0, 0);
    imageBg.setBitmap(touchgfx::Bitmap(BITMAP_GREEN_POLYGONS_BACKGROUND_480X272_ID));

    sliderRotation.setXY(91, 216);
    sliderRotation.setBitmaps(touchgfx::Bitmap(BITMAP_SLIDER_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_SLIDER_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_SLIDER_KNOB_ID));
    sliderRotation.setupHorizontalSlider(0, 10, 0, 0, 318);
    sliderRotation.setValueRange(0, 100);
    sliderRotation.setValue(50);
    sliderRotation.setNewValueCallback(sliderValueChangedCallback);
    sliderRotation.setStopValueCallback(sliderValueConfirmedCallback);

    circleRotation.setPosition(167, 13, 170, 161);
    circleRotation.setCenter(100, 100);
    circleRotation.setRadius(95);
    circleRotation.setLineWidth(7);
    circleRotation.setArc(180, 180);
    circleRotation.setCapPrecision(10);
    circleRotationPainter.setColor(touchgfx::Color::getColorFrom24BitRGB(249, 186, 109));
    circleRotation.setPainter(circleRotationPainter);
    circleRotation.setVisible(false);

    imageRotBg.setXY(202, 43);
    imageRotBg.setBitmap(touchgfx::Bitmap(BITMAP_SAILBOAT_2_LARGE_ID));

    textRotationSpeed.setPosition(206, 18, 92, 25);
    textRotationSpeed.setColor(touchgfx::Color::getColorFrom24BitRGB(249, 186, 109));
    textRotationSpeed.setLinespacing(0);
    Unicode::snprintf(textRotationSpeedBuffer, TEXTROTATIONSPEED_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID6).getText());
    textRotationSpeed.setWildcard(textRotationSpeedBuffer);
    textRotationSpeed.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5));

    imageRotLeft.setXY(110, 158);
    imageRotLeft.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_UP_3_52_ID));

    imageRotRight.setXY(390, 164);
    imageRotRight.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_UP_2_52_ID));

    buttonReturn.setXY(10, 230);
    buttonReturn.setBitmaps(touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID), touchgfx::Bitmap(BITMAP_ICONS8_GO_BACK_60_ID));
    buttonReturn.setAction(buttonCallback);

    textArea1.setXY(20, 20);
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID26));

    add(imageBg);
    add(sliderRotation);
    add(circleRotation);
    add(imageRotBg);
    add(textRotationSpeed);
    add(imageRotLeft);
    add(imageRotRight);
    add(buttonReturn);
    add(textArea1);
}

void TestRotationPlateauViewBase::setupScreen()
{

}

void TestRotationPlateauViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonReturn)
    {
        //InteractionbuttonReturnClicked
        //When buttonReturn clicked call virtual function
        //Call buttonReturnClicked
        buttonReturnClicked();

        //InteractionReturnToMenu
        //When InteractionbuttonReturnClicked completed change screen to Menu
        //Go to Menu with screen transition towards West
        application().gotoMenuScreenSlideTransitionWest();
    }
}

void TestRotationPlateauViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &sliderRotation)
    {
        //InteractionsliderRotationChanged
        //When sliderRotation value changed call virtual function
        //Call sliderRotationChanged
        sliderRotationChanged(value);
    }
}

void TestRotationPlateauViewBase::sliderValueConfirmedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &sliderRotation)
    {
        //InteractionRotationReleased
        //When sliderRotation value confirmed call virtual function
        //Call sliderRotationReleased
        sliderRotationReleased(value);
    }
}
