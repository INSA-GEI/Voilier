/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef TESTORIENTATIONVOILEVIEWBASE_HPP
#define TESTORIENTATIONVOILEVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/testorientationvoile_screen/TestOrientationVoilePresenter.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>
#include <touchgfx/widgets/canvas/PainterRGB888.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/canvas/Circle.hpp>

class TestOrientationVoileViewBase : public touchgfx::View<TestOrientationVoilePresenter>
{
public:
    TestOrientationVoileViewBase();
    virtual ~TestOrientationVoileViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void buttonReturnClicked()
    {
        // Override and implement this function in TestOrientationVoile
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Image imageBg;
    touchgfx::TextArea textArea1;
    touchgfx::Button buttonReturn;
    touchgfx::Image image1;
    touchgfx::Line lineSail;
    touchgfx::PainterRGB888 lineSailPainter;
    touchgfx::Slider slider1;
    touchgfx::TextArea textArea;
    touchgfx::TextArea textArea2;
    touchgfx::TextAreaWithOneWildcard textArea3;
    touchgfx::Circle circleBg;
    touchgfx::PainterRGB888 circleBgPainter;
    touchgfx::Circle circleBoat;
    touchgfx::PainterRGB888 circleBoatPainter;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREA3_SIZE = 20;
    touchgfx::Unicode::UnicodeChar textArea3Buffer[TEXTAREA3_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<TestOrientationVoileViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

    /*
     * Canvas Buffer Size
     */
    static const uint16_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];
};

#endif // TESTORIENTATIONVOILEVIEWBASE_HPP
