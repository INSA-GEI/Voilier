/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef TESTROTATIONPLATEAUVIEWBASE_HPP
#define TESTROTATIONPLATEAUVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/testrotationplateau_screen/TestRotationPlateauPresenter.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/canvas/Circle.hpp>
#include <touchgfx/widgets/canvas/PainterRGB888.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/TextArea.hpp>

class TestRotationPlateauViewBase : public touchgfx::View<TestRotationPlateauPresenter>
{
public:
    TestRotationPlateauViewBase();
    virtual ~TestRotationPlateauViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void sliderRotationChanged(int value)
    {
        // Override and implement this function in TestRotationPlateau
    }

    virtual void sliderRotationReleased(int value)
    {
        // Override and implement this function in TestRotationPlateau
    }

    virtual void buttonReturnClicked()
    {
        // Override and implement this function in TestRotationPlateau
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Image imageBg;
    touchgfx::Slider sliderRotation;
    touchgfx::Circle circleRotation;
    touchgfx::PainterRGB888 circleRotationPainter;
    touchgfx::Image imageRotBg;
    touchgfx::TextAreaWithOneWildcard textRotationSpeed;
    touchgfx::Image imageRotLeft;
    touchgfx::Image imageRotRight;
    touchgfx::Button buttonReturn;
    touchgfx::TextArea textArea1;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTROTATIONSPEED_SIZE = 10;
    touchgfx::Unicode::UnicodeChar textRotationSpeedBuffer[TEXTROTATIONSPEED_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<TestRotationPlateauViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<TestRotationPlateauViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;
    touchgfx::Callback<TestRotationPlateauViewBase, const touchgfx::Slider&, int> sliderValueConfirmedCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);
    void sliderValueConfirmedCallbackHandler(const touchgfx::Slider& src, int value);

    /*
     * Canvas Buffer Size
     */
    static const uint16_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];
};

#endif // TESTROTATIONPLATEAUVIEWBASE_HPP
