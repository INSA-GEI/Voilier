/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/Texts.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/TypedText.hpp>
#include <texts/TypedTextDatabase.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <touchgfx/TextProvider.hpp>

touchgfx::Font::StringWidthFunctionPointer touchgfx::Font::getStringWidthFunction = &touchgfx::Font::getStringWidthLTR;
touchgfx::LCD::DrawStringFunctionPointer touchgfx::LCD::drawStringFunction = &touchgfx::LCD::drawStringLTR;
touchgfx::TextProvider::UnicodeConverterInitFunctionPointer touchgfx::TextProvider::unicodeConverterInitFunction = static_cast<touchgfx::TextProvider::UnicodeConverterInitFunctionPointer>(0);
touchgfx::TextProvider::UnicodeConverterFunctionPointer touchgfx::TextProvider::unicodeConverterFunction = static_cast<touchgfx::TextProvider::UnicodeConverterFunctionPointer>(0);

//Default typed text database
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE =
{
    0x55, 0x74, 0x69, 0x6c, 0x69, 0x73, 0x65, 0x7a, 0x20, 0x6c, 0x27, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x75, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x71, 0x75, 0x65, 0xa, 0x70, 0x6f, 0x75, 0x72, 0x20, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x72, 0x20, 0x6c, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xa, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x20, 0x6c, 0x65, 0x20, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x20, 0x65, 0x74, 0x20, 0x6c, 0x65, 0x73, 0x20, 0x70, 0x65, 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x69, 0x71, 0x75, 0x65, 0x73, 0xa, 0x49, 0x32, 0x43, 0x20, 0x65, 0x74, 0x20, 0x53, 0x50, 0x49, 0x0, // @0 "Utilisez l'analyseur logique?pour visualiser les communications?entre le micro et les peripheriques?I2C et SPI"
    0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x20, 0x6c, 0x61, 0x20, 0x76, 0x6f, 0x69, 0x6c, 0x65, 0x0, // @111 "Orientation de la voile"
    0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x61, 0x74, 0x65, 0x61, 0x75, 0x3a, 0x20, 0x0, // @135 "Orientation bateau: "
    0x54, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x65, 0x0, // @156 "Tension batterie"
    0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xa, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x61, 0x75, 0x0, // @173 "Rotation?plateau"
    0x43, 0x68, 0x6f, 0x69, 0x78, 0x20, 0x64, 0x75, 0x20, 0x54, 0x65, 0x73, 0x74, 0x0, // @190 "Choix du Test"
    0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0, // @204 "Communication"
    0x30, 0x2e, 0x30, 0x56, 0xa, 0x5b, 0x30, 0x78, 0x30, 0x30, 0x30, 0x5d, 0x0, // @218 "0.0V?[0x000]"
    0x54, 0x65, 0x73, 0x74, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x0, // @231 "Test Complet"
    0x2d, 0x2d, 0xb0, 0x20, 0x28, 0x2d, 0x2d, 0x20, 0x6d, 0x73, 0x29, 0x0, // @244 "--? (-- ms)"
    0x47, 0x69, 0x72, 0x6f, 0x75, 0x65, 0x74, 0x74, 0x65, 0x0, // @256 "Girouette"
    0x49, 0x32, 0x43, 0x20, 0x2f, 0x20, 0x53, 0x50, 0x49, 0x0, // @266 "I2C / SPI"
    0x2, 0x25, 0x0, // @276 "<>%"
    0x2, 0x0, // @279 "<>"
    0x53, 0x65, 0x72, 0x76, 0x6f, 0x0, // @281 "Servo"
    0x54, 0x6f, 0x74, 0x6f, 0x0, // @287 "Toto"
    0x30, 0x0 // @292 "0"
};
extern uint32_t const indicesGb[];

//array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

//Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] =
{
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}

