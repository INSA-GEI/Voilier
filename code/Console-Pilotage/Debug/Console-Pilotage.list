
Console-Pilotage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023194  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005408  08023364  08023364  00033364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802876c  0802876c  0018e728  2**0
                  CONTENTS
  4 .ARM          00000008  0802876c  0802876c  0003876c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028774  08028774  0018e728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  08028774  08028774  00038774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08028788  08028788  00038788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08028790  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b680  2000010c  0802889c  0004010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b78c  0802889c  0004b78c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0018e728  2**0
                  CONTENTS, READONLY
 12 ExtFlashSection 00139990  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 FontFlashSection 00004d38  90139990  90139990  00189990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 00000060  9013e6c8  9013e6c8  0018e6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .debug_info   00076fde  00000000  00000000  0018e758  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00010c51  00000000  00000000  00205736  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00004d78  00000000  00000000  00216388  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000045d8  00000000  00000000  0021b100  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  000342e9  00000000  00000000  0021f6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0003e9e3  00000000  00000000  002539c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    001244c2  00000000  00000000  002923a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  003b6866  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00014c28  00000000  00000000  003b6960  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000010c 	.word	0x2000010c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802334c 	.word	0x0802334c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000110 	.word	0x20000110
 800020c:	0802334c 	.word	0x0802334c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005ec:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <SCB_EnableICache+0x3c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005fc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <SCB_EnableICache+0x3c>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <SCB_EnableICache+0x3c>)
 8000606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800060c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000610:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800062a:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <SCB_EnableDCache+0x7c>)
 800062c:	2200      	movs	r2, #0
 800062e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000632:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000636:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <SCB_EnableDCache+0x7c>)
 8000638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800063c:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	0b5b      	lsrs	r3, r3, #13
 8000642:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000646:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	08db      	lsrs	r3, r3, #3
 800064c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000650:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	015a      	lsls	r2, r3, #5
 8000656:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800065a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800065c:	68ba      	ldr	r2, [r7, #8]
 800065e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000660:	490f      	ldr	r1, [pc, #60]	; (80006a0 <SCB_EnableDCache+0x7c>)
 8000662:	4313      	orrs	r3, r2
 8000664:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	1e5a      	subs	r2, r3, #1
 800066c:	60ba      	str	r2, [r7, #8]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1ef      	bne.n	8000652 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	1e5a      	subs	r2, r3, #1
 8000676:	60fa      	str	r2, [r7, #12]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1e5      	bne.n	8000648 <SCB_EnableDCache+0x24>
 800067c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <SCB_EnableDCache+0x7c>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <SCB_EnableDCache+0x7c>)
 8000686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800068a:	6153      	str	r3, [r2, #20]
 800068c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000690:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000694:	bf00      	nop
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b5b0      	push	{r4, r5, r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006aa:	f000 fe5b 	bl	8001364 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006ae:	f7ff ff99 	bl	80005e4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006b2:	f7ff ffb7 	bl	8000624 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b6:	f001 ffad 	bl	8002614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 f827 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006be:	f000 fabb 	bl	8000c38 <MX_GPIO_Init>
  MX_CRC_Init();
 80006c2:	f000 f8c3 	bl	800084c <MX_CRC_Init>
  MX_QUADSPI_Init();
 80006c6:	f000 f9d7 	bl	8000a78 <MX_QUADSPI_Init>
  MX_DMA2D_Init();
 80006ca:	f000 f8e1 	bl	8000890 <MX_DMA2D_Init>
  MX_FMC_Init();
 80006ce:	f000 fa07 	bl	8000ae0 <MX_FMC_Init>
  MX_LTDC_Init();
 80006d2:	f000 f94f 	bl	8000974 <MX_LTDC_Init>
  MX_I2C3_Init();
 80006d6:	f000 f90d 	bl	80008f4 <MX_I2C3_Init>
  MX_TouchGFX_Init();
 80006da:	f008 ffbb 	bl	8009654 <MX_TouchGFX_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTaskHand */
  osThreadDef(defaultTaskHand, StartDefaultTask, osPriorityNormal, 0, 4096);
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <main+0x60>)
 80006e0:	1d3c      	adds	r4, r7, #4
 80006e2:	461d      	mov	r5, r3
 80006e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e8:	682b      	ldr	r3, [r5, #0]
 80006ea:	6023      	str	r3, [r4, #0]
  defaultTaskHandHandle = osThreadCreate(osThread(defaultTaskHand), NULL);
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f006 fcf0 	bl	80070d6 <osThreadCreate>
 80006f6:	4602      	mov	r2, r0
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <main+0x64>)
 80006fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006fc:	f006 fce4 	bl	80070c8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000700:	e7fe      	b.n	8000700 <main+0x5c>
 8000702:	bf00      	nop
 8000704:	08023374 	.word	0x08023374
 8000708:	2000b58c 	.word	0x2000b58c

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b0b4      	sub	sp, #208	; 0xd0
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000716:	2230      	movs	r2, #48	; 0x30
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f021 fe99 	bl	8022452 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	2284      	movs	r2, #132	; 0x84
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f021 fe8a 	bl	8022452 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	4b40      	ldr	r3, [pc, #256]	; (8000840 <SystemClock_Config+0x134>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	4a3f      	ldr	r2, [pc, #252]	; (8000840 <SystemClock_Config+0x134>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000748:	6413      	str	r3, [r2, #64]	; 0x40
 800074a:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <SystemClock_Config+0x134>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000756:	4b3b      	ldr	r3, [pc, #236]	; (8000844 <SystemClock_Config+0x138>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a3a      	ldr	r2, [pc, #232]	; (8000844 <SystemClock_Config+0x138>)
 800075c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000760:	6013      	str	r3, [r2, #0]
 8000762:	4b38      	ldr	r3, [pc, #224]	; (8000844 <SystemClock_Config+0x138>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800076e:	2301      	movs	r3, #1
 8000770:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000778:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077c:	2302      	movs	r3, #2
 800077e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000782:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000786:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800078a:	2319      	movs	r3, #25
 800078c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000790:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000794:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000798:	2302      	movs	r3, #2
 800079a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800079e:	2309      	movs	r3, #9
 80007a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f005 f821 	bl	80057f0 <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80007b4:	f000 fe30 	bl	8001418 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007b8:	f004 fa6e 	bl	8004c98 <HAL_PWREx_EnableOverDrive>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007c2:	f000 fe29 	bl	8001418 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c6:	230f      	movs	r3, #15
 80007c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007cc:	2302      	movs	r3, #2
 80007ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80007e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007ec:	2106      	movs	r1, #6
 80007ee:	4618      	mov	r0, r3
 80007f0:	f005 fa6e 	bl	8005cd0 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80007fa:	f000 fe0d 	bl	8001418 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_I2C3;
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <SystemClock_Config+0x13c>)
 8000800:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000802:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000806:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000808:	2305      	movs	r3, #5
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000810:	2303      	movs	r3, #3
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000814:	2301      	movs	r3, #1
 8000816:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000818:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800081c:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800081e:	2300      	movs	r3, #0
 8000820:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000822:	f107 0308 	add.w	r3, r7, #8
 8000826:	4618      	mov	r0, r3
 8000828:	f005 fc3e 	bl	80060a8 <HAL_RCCEx_PeriphCLKConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x12a>
  {
    Error_Handler();
 8000832:	f000 fdf1 	bl	8001418 <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	37d0      	adds	r7, #208	; 0xd0
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000
 8000848:	00010008 	.word	0x00010008

0800084c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000850:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <MX_CRC_Init+0x3c>)
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <MX_CRC_Init+0x40>)
 8000854:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_CRC_Init+0x3c>)
 8000858:	2200      	movs	r2, #0
 800085a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_CRC_Init+0x3c>)
 800085e:	2200      	movs	r2, #0
 8000860:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_CRC_Init+0x3c>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_CRC_Init+0x3c>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_CRC_Init+0x3c>)
 8000870:	2201      	movs	r2, #1
 8000872:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_CRC_Init+0x3c>)
 8000876:	f002 f8b5 	bl	80029e4 <HAL_CRC_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000880:	f000 fdca 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	2000b568 	.word	0x2000b568
 800088c:	40023000 	.word	0x40023000

08000890 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_DMA2D_Init+0x5c>)
 8000896:	4a16      	ldr	r2, [pc, #88]	; (80008f0 <MX_DMA2D_Init+0x60>)
 8000898:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_DMA2D_Init+0x5c>)
 800089c:	2200      	movs	r2, #0
 800089e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_DMA2D_Init+0x5c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_DMA2D_Init+0x5c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_DMA2D_Init+0x5c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_DMA2D_Init+0x5c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_DMA2D_Init+0x5c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_DMA2D_Init+0x5c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008c4:	4809      	ldr	r0, [pc, #36]	; (80008ec <MX_DMA2D_Init+0x5c>)
 80008c6:	f002 f9e7 	bl	8002c98 <HAL_DMA2D_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008d0:	f000 fda2 	bl	8001418 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008d4:	2101      	movs	r1, #1
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_DMA2D_Init+0x5c>)
 80008d8:	f002 fca8 	bl	800322c <HAL_DMA2D_ConfigLayer>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008e2:	f000 fd99 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000b638 	.word	0x2000b638
 80008f0:	4002b000 	.word	0x4002b000

080008f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <MX_I2C3_Init+0x74>)
 80008fa:	4a1c      	ldr	r2, [pc, #112]	; (800096c <MX_I2C3_Init+0x78>)
 80008fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_I2C3_Init+0x74>)
 8000900:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <MX_I2C3_Init+0x7c>)
 8000902:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_I2C3_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_I2C3_Init+0x74>)
 800090c:	2201      	movs	r2, #1
 800090e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_I2C3_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_I2C3_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_I2C3_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_I2C3_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_I2C3_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800092e:	480e      	ldr	r0, [pc, #56]	; (8000968 <MX_I2C3_Init+0x74>)
 8000930:	f003 f878 	bl	8003a24 <HAL_I2C_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800093a:	f000 fd6d 	bl	8001418 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800093e:	2100      	movs	r1, #0
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <MX_I2C3_Init+0x74>)
 8000942:	f003 fd79 	bl	8004438 <HAL_I2CEx_ConfigAnalogFilter>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800094c:	f000 fd64 	bl	8001418 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000950:	2100      	movs	r1, #0
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_I2C3_Init+0x74>)
 8000954:	f003 fdbb 	bl	80044ce <HAL_I2CEx_ConfigDigitalFilter>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800095e:	f000 fd5b 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000b51c 	.word	0x2000b51c
 800096c:	40005c00 	.word	0x40005c00
 8000970:	00c0eaff 	.word	0x00c0eaff

08000974 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08e      	sub	sp, #56	; 0x38
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2234      	movs	r2, #52	; 0x34
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f021 fd66 	bl	8022452 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000986:	4b3a      	ldr	r3, [pc, #232]	; (8000a70 <MX_LTDC_Init+0xfc>)
 8000988:	4a3a      	ldr	r2, [pc, #232]	; (8000a74 <MX_LTDC_Init+0x100>)
 800098a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800098c:	4b38      	ldr	r3, [pc, #224]	; (8000a70 <MX_LTDC_Init+0xfc>)
 800098e:	2200      	movs	r2, #0
 8000990:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000992:	4b37      	ldr	r3, [pc, #220]	; (8000a70 <MX_LTDC_Init+0xfc>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000998:	4b35      	ldr	r3, [pc, #212]	; (8000a70 <MX_LTDC_Init+0xfc>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800099e:	4b34      	ldr	r3, [pc, #208]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80009a4:	4b32      	ldr	r3, [pc, #200]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009a6:	2228      	movs	r2, #40	; 0x28
 80009a8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80009aa:	4b31      	ldr	r3, [pc, #196]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009ac:	2209      	movs	r2, #9
 80009ae:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80009b0:	4b2f      	ldr	r3, [pc, #188]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009b2:	2235      	movs	r2, #53	; 0x35
 80009b4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80009b6:	4b2e      	ldr	r3, [pc, #184]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009b8:	220b      	movs	r2, #11
 80009ba:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80009bc:	4b2c      	ldr	r3, [pc, #176]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009be:	f240 2215 	movw	r2, #533	; 0x215
 80009c2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80009c4:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009c6:	f240 121b 	movw	r2, #283	; 0x11b
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80009cc:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009ce:	f240 2235 	movw	r2, #565	; 0x235
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80009d4:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009d6:	f240 121d 	movw	r2, #285	; 0x11d
 80009da:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80009dc:	4b24      	ldr	r3, [pc, #144]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009de:	2200      	movs	r2, #0
 80009e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80009e4:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80009ec:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80009f4:	481e      	ldr	r0, [pc, #120]	; (8000a70 <MX_LTDC_Init+0xfc>)
 80009f6:	f003 fdb7 	bl	8004568 <HAL_LTDC_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000a00:	f000 fd0a 	bl	8001418 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000a08:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a0c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000a12:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a16:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000a1c:	23ff      	movs	r3, #255	; 0xff
 8000a1e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a28:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a2a:	2305      	movs	r3, #5
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000a2e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000a34:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000a3a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a3e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2200      	movs	r2, #0
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_LTDC_Init+0xfc>)
 8000a5a:	f003 ff0d 	bl	8004878 <HAL_LTDC_ConfigLayer>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000a64:	f000 fcd8 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	3738      	adds	r7, #56	; 0x38
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	2000b590 	.word	0x2000b590
 8000a74:	40016800 	.word	0x40016800

08000a78 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000a7e:	4a17      	ldr	r2, [pc, #92]	; (8000adc <MX_QUADSPI_Init+0x64>)
 8000a80:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a8e:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000a90:	2210      	movs	r2, #16
 8000a92:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000a94:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000a96:	2218      	movs	r2, #24
 8000a98:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000a9c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000aa0:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ab4:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <MX_QUADSPI_Init+0x60>)
 8000ab6:	f004 f93f 	bl	8004d38 <HAL_QSPI_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000ac0:	f000 fcaa 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  BSP_QSPI_Init();
 8000ac4:	f001 f942 	bl	8001d4c <BSP_QSPI_Init>

  BSP_QSPI_MemoryMappedMode();
 8000ac8:	f001 f998 	bl	8001dfc <BSP_QSPI_EnableMemoryMappedMode>
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8000acc:	205c      	movs	r0, #92	; 0x5c
 8000ace:	f001 ff03 	bl	80028d8 <HAL_NVIC_DisableIRQ>

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000b6ac 	.word	0x2000b6ac
 8000adc:	a0001000 	.word	0xa0001000

08000ae0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
 8000af4:	615a      	str	r2, [r3, #20]
 8000af6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000af8:	4b4c      	ldr	r3, [pc, #304]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000afa:	4a4d      	ldr	r2, [pc, #308]	; (8000c30 <MX_FMC_Init+0x150>)
 8000afc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000afe:	4b4b      	ldr	r3, [pc, #300]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b04:	4b49      	ldr	r3, [pc, #292]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b0a:	4b48      	ldr	r3, [pc, #288]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b10:	4b46      	ldr	r3, [pc, #280]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b12:	2210      	movs	r2, #16
 8000b14:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b16:	4b45      	ldr	r3, [pc, #276]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b18:	2240      	movs	r2, #64	; 0x40
 8000b1a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b1c:	4b43      	ldr	r3, [pc, #268]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b1e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000b22:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b24:	4b41      	ldr	r3, [pc, #260]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b2a:	4b40      	ldr	r3, [pc, #256]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b30:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000b32:	4b3e      	ldr	r3, [pc, #248]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000b3a:	4b3c      	ldr	r3, [pc, #240]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b44:	2307      	movs	r3, #7
 8000b46:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b4c:	2307      	movs	r3, #7
 8000b4e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b50:	2303      	movs	r3, #3
 8000b52:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b54:	2302      	movs	r3, #2
 8000b56:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4832      	ldr	r0, [pc, #200]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b62:	f005 fe8f 	bl	8006884 <HAL_SDRAM_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b6c:	f000 fc54 	bl	8001418 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
    __IO uint32_t tmpmrd = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]

    /* Step 1: Configure a clock configuration enable command */
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8000b74:	4b2f      	ldr	r3, [pc, #188]	; (8000c34 <MX_FMC_Init+0x154>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8000b7a:	4b2e      	ldr	r3, [pc, #184]	; (8000c34 <MX_FMC_Init+0x154>)
 8000b7c:	2210      	movs	r2, #16
 8000b7e:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8000b80:	4b2c      	ldr	r3, [pc, #176]	; (8000c34 <MX_FMC_Init+0x154>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8000b86:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <MX_FMC_Init+0x154>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b90:	4928      	ldr	r1, [pc, #160]	; (8000c34 <MX_FMC_Init+0x154>)
 8000b92:	4826      	ldr	r0, [pc, #152]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000b94:	f005 feaa 	bl	80068ec <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f001 fd77 	bl	800268c <HAL_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8000b9e:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <MX_FMC_Init+0x154>)
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000ba4:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <MX_FMC_Init+0x154>)
 8000ba6:	2210      	movs	r2, #16
 8000ba8:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8000baa:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8000bb0:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bba:	491e      	ldr	r1, [pc, #120]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bbc:	481b      	ldr	r0, [pc, #108]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000bbe:	f005 fe95 	bl	80068ec <HAL_SDRAM_SendCommand>

    /* Step 4: Configure an Auto Refresh command */
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bca:	2210      	movs	r2, #16
 8000bcc:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 8;
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bd0:	2208      	movs	r2, #8
 8000bd2:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = 0;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000bda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bde:	4915      	ldr	r1, [pc, #84]	; (8000c34 <MX_FMC_Init+0x154>)
 8000be0:	4812      	ldr	r0, [pc, #72]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000be2:	f005 fe83 	bl	80068ec <HAL_SDRAM_SendCommand>

    /* Step 5: Program the external memory mode register */
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8000be6:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000bea:	603b      	str	r3, [r7, #0]
             SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL    | \
             SDRAM_MODEREG_CAS_LATENCY_3            | \
             SDRAM_MODEREG_OPERATING_MODE_STANDARD  | \
             SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bee:	2204      	movs	r2, #4
 8000bf0:	601a      	str	r2, [r3, #0]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bf4:	2210      	movs	r2, #16
 8000bf6:	605a      	str	r2, [r3, #4]
    Command.AutoRefreshNumber      = 1;
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_FMC_Init+0x154>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	609a      	str	r2, [r3, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <MX_FMC_Init+0x154>)
 8000c02:	60d3      	str	r3, [r2, #12]

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8000c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c08:	490a      	ldr	r1, [pc, #40]	; (8000c34 <MX_FMC_Init+0x154>)
 8000c0a:	4808      	ldr	r0, [pc, #32]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000c0c:	f005 fe6e 	bl	80068ec <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8000c10:	f240 712b 	movw	r1, #1835	; 0x72b
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_FMC_Init+0x14c>)
 8000c16:	f005 fe94 	bl	8006942 <HAL_SDRAM_ProgramRefreshRate>
    
    //Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 8000c1a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8000c1e:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c22:	601a      	str	r2, [r3, #0]
  /* USER CODE END FMC_Init 2 */
}
 8000c24:	bf00      	nop
 8000c26:	3720      	adds	r7, #32
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	2000b678 	.word	0x2000b678
 8000c30:	a0000140 	.word	0xa0000140
 8000c34:	20000128 	.word	0x20000128

08000c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b090      	sub	sp, #64	; 0x40
 8000c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c4e:	4bae      	ldr	r3, [pc, #696]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4aad      	ldr	r2, [pc, #692]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c54:	f043 0310 	orr.w	r3, r3, #16
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4bab      	ldr	r3, [pc, #684]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0310 	and.w	r3, r3, #16
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c66:	4ba8      	ldr	r3, [pc, #672]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4aa7      	ldr	r2, [pc, #668]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4ba5      	ldr	r3, [pc, #660]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	4ba2      	ldr	r3, [pc, #648]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4aa1      	ldr	r2, [pc, #644]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b9f      	ldr	r3, [pc, #636]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	623b      	str	r3, [r7, #32]
 8000c94:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c96:	4b9c      	ldr	r3, [pc, #624]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a9b      	ldr	r2, [pc, #620]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000c9c:	f043 0308 	orr.w	r3, r3, #8
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b99      	ldr	r3, [pc, #612]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0308 	and.w	r3, r3, #8
 8000caa:	61fb      	str	r3, [r7, #28]
 8000cac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	4b96      	ldr	r3, [pc, #600]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a95      	ldr	r2, [pc, #596]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000cb4:	f043 0304 	orr.w	r3, r3, #4
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b93      	ldr	r3, [pc, #588]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	61bb      	str	r3, [r7, #24]
 8000cc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	4b90      	ldr	r3, [pc, #576]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a8f      	ldr	r2, [pc, #572]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b8d      	ldr	r3, [pc, #564]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000cde:	4b8a      	ldr	r3, [pc, #552]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a89      	ldr	r2, [pc, #548]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000ce4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b87      	ldr	r3, [pc, #540]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cf6:	4b84      	ldr	r3, [pc, #528]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a83      	ldr	r2, [pc, #524]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b81      	ldr	r3, [pc, #516]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d0e:	4b7e      	ldr	r3, [pc, #504]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a7d      	ldr	r2, [pc, #500]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b7b      	ldr	r3, [pc, #492]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d26:	4b78      	ldr	r3, [pc, #480]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a77      	ldr	r2, [pc, #476]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d2c:	f043 0320 	orr.w	r3, r3, #32
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b75      	ldr	r3, [pc, #468]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0320 	and.w	r3, r3, #32
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3e:	4b72      	ldr	r3, [pc, #456]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a71      	ldr	r2, [pc, #452]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b6f      	ldr	r3, [pc, #444]	; (8000f08 <MX_GPIO_Init+0x2d0>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d56:	2201      	movs	r2, #1
 8000d58:	2120      	movs	r1, #32
 8000d5a:	486c      	ldr	r0, [pc, #432]	; (8000f0c <MX_GPIO_Init+0x2d4>)
 8000d5c:	f002 fe48 	bl	80039f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	210c      	movs	r1, #12
 8000d64:	486a      	ldr	r0, [pc, #424]	; (8000f10 <MX_GPIO_Init+0x2d8>)
 8000d66:	f002 fe43 	bl	80039f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2108      	movs	r1, #8
 8000d6e:	4869      	ldr	r0, [pc, #420]	; (8000f14 <MX_GPIO_Init+0x2dc>)
 8000d70:	f002 fe3e 	bl	80039f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d7a:	4865      	ldr	r0, [pc, #404]	; (8000f10 <MX_GPIO_Init+0x2d8>)
 8000d7c:	f002 fe38 	bl	80039f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d86:	4864      	ldr	r0, [pc, #400]	; (8000f18 <MX_GPIO_Init+0x2e0>)
 8000d88:	f002 fe32 	bl	80039f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	21c8      	movs	r1, #200	; 0xc8
 8000d90:	4862      	ldr	r0, [pc, #392]	; (8000f1c <MX_GPIO_Init+0x2e4>)
 8000d92:	f002 fe2d 	bl	80039f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000d96:	2308      	movs	r3, #8
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da6:	4619      	mov	r1, r3
 8000da8:	485d      	ldr	r0, [pc, #372]	; (8000f20 <MX_GPIO_Init+0x2e8>)
 8000daa:	f002 fb6d 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000dae:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dc0:	230b      	movs	r3, #11
 8000dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4854      	ldr	r0, [pc, #336]	; (8000f1c <MX_GPIO_Init+0x2e4>)
 8000dcc:	f002 fb5c 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000dd0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd6:	2312      	movs	r3, #18
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000de2:	2304      	movs	r3, #4
 8000de4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dea:	4619      	mov	r1, r3
 8000dec:	484d      	ldr	r0, [pc, #308]	; (8000f24 <MX_GPIO_Init+0x2ec>)
 8000dee:	f002 fb4b 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8000df2:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e04:	230a      	movs	r3, #10
 8000e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4845      	ldr	r0, [pc, #276]	; (8000f24 <MX_GPIO_Init+0x2ec>)
 8000e10:	f002 fb3a 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000e14:	2310      	movs	r3, #16
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e24:	2302      	movs	r3, #2
 8000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	483d      	ldr	r0, [pc, #244]	; (8000f24 <MX_GPIO_Init+0x2ec>)
 8000e30:	f002 fb2a 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000e44:	2308      	movs	r3, #8
 8000e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	482f      	ldr	r0, [pc, #188]	; (8000f0c <MX_GPIO_Init+0x2d4>)
 8000e50:	f002 fb1a 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9 
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8000e54:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e66:	230c      	movs	r3, #12
 8000e68:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e6e:	4619      	mov	r1, r3
 8000e70:	482d      	ldr	r0, [pc, #180]	; (8000f28 <MX_GPIO_Init+0x2f0>)
 8000e72:	f002 fb09 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e90:	4619      	mov	r1, r3
 8000e92:	4826      	ldr	r0, [pc, #152]	; (8000f2c <MX_GPIO_Init+0x2f4>)
 8000e94:	f002 faf8 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000e98:	2360      	movs	r3, #96	; 0x60
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ea8:	230d      	movs	r3, #13
 8000eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	481b      	ldr	r0, [pc, #108]	; (8000f20 <MX_GPIO_Init+0x2e8>)
 8000eb4:	f002 fae8 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ec8:	2307      	movs	r3, #7
 8000eca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4814      	ldr	r0, [pc, #80]	; (8000f24 <MX_GPIO_Init+0x2ec>)
 8000ed4:	f002 fad8 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eea:	4619      	mov	r1, r3
 8000eec:	4810      	ldr	r0, [pc, #64]	; (8000f30 <MX_GPIO_Init+0x2f8>)
 8000eee:	f002 facb 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000ef2:	2340      	movs	r3, #64	; 0x40
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_GPIO_Init+0x2fc>)
 8000ef8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000efe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f02:	4619      	mov	r1, r3
 8000f04:	e018      	b.n	8000f38 <MX_GPIO_Init+0x300>
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020c00 	.word	0x40020c00
 8000f10:	40022000 	.word	0x40022000
 8000f14:	40022800 	.word	0x40022800
 8000f18:	40021c00 	.word	0x40021c00
 8000f1c:	40021800 	.word	0x40021800
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40020400 	.word	0x40020400
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	40022400 	.word	0x40022400
 8000f34:	10120000 	.word	0x10120000
 8000f38:	48bb      	ldr	r0, [pc, #748]	; (8001228 <MX_GPIO_Init+0x5f0>)
 8000f3a:	f002 faa5 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000f3e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f50:	230a      	movs	r3, #10
 8000f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f58:	4619      	mov	r1, r3
 8000f5a:	48b4      	ldr	r0, [pc, #720]	; (800122c <MX_GPIO_Init+0x5f4>)
 8000f5c:	f002 fa94 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000f60:	23f0      	movs	r3, #240	; 0xf0
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000f70:	230a      	movs	r3, #10
 8000f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	48ad      	ldr	r0, [pc, #692]	; (8001230 <MX_GPIO_Init+0x5f8>)
 8000f7c:	f002 fa84 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000f80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000f92:	230a      	movs	r3, #10
 8000f94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	48a5      	ldr	r0, [pc, #660]	; (8001234 <MX_GPIO_Init+0x5fc>)
 8000f9e:	f002 fa73 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fa2:	2320      	movs	r3, #32
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	489b      	ldr	r0, [pc, #620]	; (8001228 <MX_GPIO_Init+0x5f0>)
 8000fba:	f002 fa65 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000fbe:	2308      	movs	r3, #8
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000fce:	230d      	movs	r3, #13
 8000fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4893      	ldr	r0, [pc, #588]	; (8001228 <MX_GPIO_Init+0x5f0>)
 8000fda:	f002 fa55 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000fde:	f241 030c 	movw	r3, #4108	; 0x100c
 8000fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ff0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	488e      	ldr	r0, [pc, #568]	; (8001230 <MX_GPIO_Init+0x5f8>)
 8000ff8:	f002 fa46 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000ffc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001002:	2300      	movs	r3, #0
 8001004:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800100e:	4619      	mov	r1, r3
 8001010:	4889      	ldr	r0, [pc, #548]	; (8001238 <MX_GPIO_Init+0x600>)
 8001012:	f002 fa39 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001016:	2308      	movs	r3, #8
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2301      	movs	r3, #1
 800101c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800102a:	4619      	mov	r1, r3
 800102c:	4883      	ldr	r0, [pc, #524]	; (800123c <MX_GPIO_Init+0x604>)
 800102e:	f002 fa2b 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001032:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001044:	230d      	movs	r3, #13
 8001046:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001048:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800104c:	4619      	mov	r1, r3
 800104e:	4879      	ldr	r0, [pc, #484]	; (8001234 <MX_GPIO_Init+0x5fc>)
 8001050:	f002 fa1a 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001054:	2310      	movs	r3, #16
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001058:	2300      	movs	r3, #0
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001064:	4619      	mov	r1, r3
 8001066:	4870      	ldr	r0, [pc, #448]	; (8001228 <MX_GPIO_Init+0x5f0>)
 8001068:	f002 fa0e 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800106c:	2304      	movs	r3, #4
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800107c:	230c      	movs	r3, #12
 800107e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001084:	4619      	mov	r1, r3
 8001086:	4868      	ldr	r0, [pc, #416]	; (8001228 <MX_GPIO_Init+0x5f0>)
 8001088:	f002 f9fe 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800108c:	f248 0304 	movw	r3, #32772	; 0x8004
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001092:	2300      	movs	r3, #0
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800109a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800109e:	4619      	mov	r1, r3
 80010a0:	4867      	ldr	r0, [pc, #412]	; (8001240 <MX_GPIO_Init+0x608>)
 80010a2:	f002 f9f1 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80010a6:	2302      	movs	r3, #2
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010b6:	2305      	movs	r3, #5
 80010b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010be:	4619      	mov	r1, r3
 80010c0:	485b      	ldr	r0, [pc, #364]	; (8001230 <MX_GPIO_Init+0x5f8>)
 80010c2:	f002 f9e1 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80010c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010dc:	4619      	mov	r1, r3
 80010de:	4858      	ldr	r0, [pc, #352]	; (8001240 <MX_GPIO_Init+0x608>)
 80010e0:	f002 f9d2 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin 
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80010e4:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010f6:	230d      	movs	r3, #13
 80010f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010fe:	4619      	mov	r1, r3
 8001100:	484f      	ldr	r0, [pc, #316]	; (8001240 <MX_GPIO_Init+0x608>)
 8001102:	f002 f9c1 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001106:	2301      	movs	r3, #1
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001116:	2302      	movs	r3, #2
 8001118:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800111e:	4619      	mov	r1, r3
 8001120:	4843      	ldr	r0, [pc, #268]	; (8001230 <MX_GPIO_Init+0x5f8>)
 8001122:	f002 f9b1 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001138:	2307      	movs	r3, #7
 800113a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001140:	4619      	mov	r1, r3
 8001142:	483a      	ldr	r0, [pc, #232]	; (800122c <MX_GPIO_Init+0x5f4>)
 8001144:	f002 f9a0 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001148:	f44f 7380 	mov.w	r3, #256	; 0x100
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800115a:	2301      	movs	r3, #1
 800115c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001162:	4619      	mov	r1, r3
 8001164:	4831      	ldr	r0, [pc, #196]	; (800122c <MX_GPIO_Init+0x5f4>)
 8001166:	f002 f98f 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800116a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001170:	4b34      	ldr	r3, [pc, #208]	; (8001244 <MX_GPIO_Init+0x60c>)
 8001172:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117c:	4619      	mov	r1, r3
 800117e:	482c      	ldr	r0, [pc, #176]	; (8001230 <MX_GPIO_Init+0x5f8>)
 8001180:	f002 f982 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001184:	23c0      	movs	r3, #192	; 0xc0
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001194:	2308      	movs	r3, #8
 8001196:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800119c:	4619      	mov	r1, r3
 800119e:	4826      	ldr	r0, [pc, #152]	; (8001238 <MX_GPIO_Init+0x600>)
 80011a0:	f002 f972 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80011a4:	2310      	movs	r3, #16
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80011b4:	230a      	movs	r3, #10
 80011b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011bc:	4619      	mov	r1, r3
 80011be:	4820      	ldr	r0, [pc, #128]	; (8001240 <MX_GPIO_Init+0x608>)
 80011c0:	f002 f962 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80011c4:	23c8      	movs	r3, #200	; 0xc8
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d8:	4619      	mov	r1, r3
 80011da:	4816      	ldr	r0, [pc, #88]	; (8001234 <MX_GPIO_Init+0x5fc>)
 80011dc:	f002 f954 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin 
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 80011e0:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e6:	2303      	movs	r3, #3
 80011e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f2:	4619      	mov	r1, r3
 80011f4:	4814      	ldr	r0, [pc, #80]	; (8001248 <MX_GPIO_Init+0x610>)
 80011f6:	f002 f947 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80011fa:	2305      	movs	r3, #5
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800120a:	230a      	movs	r3, #10
 800120c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001212:	4619      	mov	r1, r3
 8001214:	4808      	ldr	r0, [pc, #32]	; (8001238 <MX_GPIO_Init+0x600>)
 8001216:	f002 f937 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800121a:	2332      	movs	r3, #50	; 0x32
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	e012      	b.n	800124c <MX_GPIO_Init+0x614>
 8001226:	bf00      	nop
 8001228:	40020c00 	.word	0x40020c00
 800122c:	40020000 	.word	0x40020000
 8001230:	40022000 	.word	0x40022000
 8001234:	40021800 	.word	0x40021800
 8001238:	40020800 	.word	0x40020800
 800123c:	40022800 	.word	0x40022800
 8001240:	40021c00 	.word	0x40021c00
 8001244:	10120000 	.word	0x10120000
 8001248:	40021400 	.word	0x40021400
 800124c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001252:	230b      	movs	r3, #11
 8001254:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001256:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800125a:	4619      	mov	r1, r3
 800125c:	4837      	ldr	r0, [pc, #220]	; (800133c <MX_GPIO_Init+0x704>)
 800125e:	f002 f913 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001262:	2304      	movs	r3, #4
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001266:	2300      	movs	r3, #0
 8001268:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800126e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001272:	4619      	mov	r1, r3
 8001274:	4832      	ldr	r0, [pc, #200]	; (8001340 <MX_GPIO_Init+0x708>)
 8001276:	f002 f907 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800127a:	2386      	movs	r3, #134	; 0x86
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800128a:	230b      	movs	r3, #11
 800128c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001292:	4619      	mov	r1, r3
 8001294:	482b      	ldr	r0, [pc, #172]	; (8001344 <MX_GPIO_Init+0x70c>)
 8001296:	f002 f8f7 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800129a:	2301      	movs	r3, #1
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129e:	2303      	movs	r3, #3
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012aa:	4619      	mov	r1, r3
 80012ac:	4825      	ldr	r0, [pc, #148]	; (8001344 <MX_GPIO_Init+0x70c>)
 80012ae:	f002 f8eb 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80012b2:	2350      	movs	r3, #80	; 0x50
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012c2:	230d      	movs	r3, #13
 80012c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ca:	4619      	mov	r1, r3
 80012cc:	481d      	ldr	r0, [pc, #116]	; (8001344 <MX_GPIO_Init+0x70c>)
 80012ce:	f002 f8db 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80012d2:	2328      	movs	r3, #40	; 0x28
 80012d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80012e2:	230a      	movs	r3, #10
 80012e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ea:	4619      	mov	r1, r3
 80012ec:	4815      	ldr	r0, [pc, #84]	; (8001344 <MX_GPIO_Init+0x70c>)
 80012ee:	f002 f8cb 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80012f2:	2340      	movs	r3, #64	; 0x40
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001302:	2309      	movs	r3, #9
 8001304:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800130a:	4619      	mov	r1, r3
 800130c:	480e      	ldr	r0, [pc, #56]	; (8001348 <MX_GPIO_Init+0x710>)
 800130e:	f002 f8bb 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001312:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001324:	2305      	movs	r3, #5
 8001326:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001328:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800132c:	4619      	mov	r1, r3
 800132e:	4807      	ldr	r0, [pc, #28]	; (800134c <MX_GPIO_Init+0x714>)
 8001330:	f002 f8aa 	bl	8003488 <HAL_GPIO_Init>

}
 8001334:	bf00      	nop
 8001336:	3740      	adds	r7, #64	; 0x40
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40020800 	.word	0x40020800
 8001340:	40021800 	.word	0x40021800
 8001344:	40020000 	.word	0x40020000
 8001348:	40021c00 	.word	0x40021c00
 800134c:	40020400 	.word	0x40020400

08001350 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  MX_TouchGFX_Process();
 8001358:	f008 f982 	bl	8009660 <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    
    osDelay(1);
 800135c:	2001      	movs	r0, #1
 800135e:	f005 fee1 	bl	8007124 <osDelay>
 8001362:	e7fb      	b.n	800135c <StartDefaultTask+0xc>

08001364 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800136a:	463b      	mov	r3, r7
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001376:	f001 fabd 	bl	80028f4 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800137a:	2301      	movs	r3, #1
 800137c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800137e:	2300      	movs	r3, #0
 8001380:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8001382:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8001386:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8001388:	231b      	movs	r3, #27
 800138a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800138c:	2300      	movs	r3, #0
 800138e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001390:	2300      	movs	r3, #0
 8001392:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001394:	2303      	movs	r3, #3
 8001396:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013a8:	463b      	mov	r3, r7
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 fad6 	bl	800295c <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80013b0:	2301      	movs	r3, #1
 80013b2:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80013b4:	2301      	movs	r3, #1
 80013b6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 80013b8:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80013bc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80013be:	2317      	movs	r3, #23
 80013c0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80013ca:	2303      	movs	r3, #3
 80013cc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80013d6:	2301      	movs	r3, #1
 80013d8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80013de:	463b      	mov	r3, r7
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 fabb 	bl	800295c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80013e6:	2004      	movs	r0, #4
 80013e8:	f001 fa9a 	bl	8002920 <HAL_MPU_Enable>

}
 80013ec:	bf00      	nop
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d101      	bne.n	800140a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001406:	f001 f921 	bl	800264c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40001000 	.word	0x40001000

08001418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <HAL_MspInit+0x4c>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a10      	ldr	r2, [pc, #64]	; (8001474 <HAL_MspInit+0x4c>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <HAL_MspInit+0x4c>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_MspInit+0x4c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <HAL_MspInit+0x4c>)
 800144c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001450:	6453      	str	r3, [r2, #68]	; 0x44
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <HAL_MspInit+0x4c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	210f      	movs	r1, #15
 8001462:	f06f 0001 	mvn.w	r0, #1
 8001466:	f001 fa0d 	bl	8002884 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800

08001478 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <HAL_CRC_MspInit+0x38>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d10b      	bne.n	80014a2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_CRC_MspInit+0x3c>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <HAL_CRC_MspInit+0x3c>)
 8001490:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <HAL_CRC_MspInit+0x3c>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40023000 	.word	0x40023000
 80014b4:	40023800 	.word	0x40023800

080014b8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <HAL_DMA2D_MspInit+0x44>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d113      	bne.n	80014f2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <HAL_DMA2D_MspInit+0x48>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a0c      	ldr	r2, [pc, #48]	; (8001500 <HAL_DMA2D_MspInit+0x48>)
 80014d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <HAL_DMA2D_MspInit+0x48>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2105      	movs	r1, #5
 80014e6:	205a      	movs	r0, #90	; 0x5a
 80014e8:	f001 f9cc 	bl	8002884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80014ec:	205a      	movs	r0, #90	; 0x5a
 80014ee:	f001 f9e5 	bl	80028bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	4002b000 	.word	0x4002b000
 8001500:	40023800 	.word	0x40023800

08001504 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a07      	ldr	r2, [pc, #28]	; (8001530 <HAL_DMA2D_MspDeInit+0x2c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d108      	bne.n	8001528 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <HAL_DMA2D_MspDeInit+0x30>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a06      	ldr	r2, [pc, #24]	; (8001534 <HAL_DMA2D_MspDeInit+0x30>)
 800151c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001520:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8001522:	205a      	movs	r0, #90	; 0x5a
 8001524:	f001 f9d8 	bl	80028d8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	4002b000 	.word	0x4002b000
 8001534:	40023800 	.word	0x40023800

08001538 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a17      	ldr	r2, [pc, #92]	; (80015b4 <HAL_I2C_MspInit+0x7c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d128      	bne.n	80015ac <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_I2C_MspInit+0x80>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a16      	ldr	r2, [pc, #88]	; (80015b8 <HAL_I2C_MspInit+0x80>)
 8001560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_I2C_MspInit+0x80>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001572:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001578:	2312      	movs	r3, #18
 800157a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800157c:	2301      	movs	r3, #1
 800157e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001584:	2304      	movs	r3, #4
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	480b      	ldr	r0, [pc, #44]	; (80015bc <HAL_I2C_MspInit+0x84>)
 8001590:	f001 ff7a 	bl	8003488 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <HAL_I2C_MspInit+0x80>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	4a07      	ldr	r2, [pc, #28]	; (80015b8 <HAL_I2C_MspInit+0x80>)
 800159a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800159e:	6413      	str	r3, [r2, #64]	; 0x40
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_I2C_MspInit+0x80>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80015ac:	bf00      	nop
 80015ae:	3728      	adds	r7, #40	; 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40005c00 	.word	0x40005c00
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40021c00 	.word	0x40021c00

080015c0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <HAL_I2C_MspDeInit+0x30>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d10a      	bne.n	80015e8 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <HAL_I2C_MspDeInit+0x34>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <HAL_I2C_MspDeInit+0x34>)
 80015d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 80015de:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <HAL_I2C_MspDeInit+0x38>)
 80015e4:	f002 f8fa 	bl	80037dc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40005c00 	.word	0x40005c00
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40021c00 	.word	0x40021c00

080015fc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08e      	sub	sp, #56	; 0x38
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a55      	ldr	r2, [pc, #340]	; (8001770 <HAL_LTDC_MspInit+0x174>)
 800161a:	4293      	cmp	r3, r2
 800161c:	f040 80a3 	bne.w	8001766 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001620:	4b54      	ldr	r3, [pc, #336]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 8001622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001624:	4a53      	ldr	r2, [pc, #332]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 8001626:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800162a:	6453      	str	r3, [r2, #68]	; 0x44
 800162c:	4b51      	ldr	r3, [pc, #324]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800162e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001630:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001634:	623b      	str	r3, [r7, #32]
 8001636:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001638:	4b4e      	ldr	r3, [pc, #312]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	4a4d      	ldr	r2, [pc, #308]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800163e:	f043 0310 	orr.w	r3, r3, #16
 8001642:	6313      	str	r3, [r2, #48]	; 0x30
 8001644:	4b4b      	ldr	r3, [pc, #300]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001650:	4b48      	ldr	r3, [pc, #288]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	4a47      	ldr	r2, [pc, #284]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 8001656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800165a:	6313      	str	r3, [r2, #48]	; 0x30
 800165c:	4b45      	ldr	r3, [pc, #276]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001664:	61bb      	str	r3, [r7, #24]
 8001666:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001668:	4b42      	ldr	r3, [pc, #264]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	4a41      	ldr	r2, [pc, #260]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800166e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001672:	6313      	str	r3, [r2, #48]	; 0x30
 8001674:	4b3f      	ldr	r3, [pc, #252]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001680:	4b3c      	ldr	r3, [pc, #240]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	4a3b      	ldr	r2, [pc, #236]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 8001686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800168a:	6313      	str	r3, [r2, #48]	; 0x30
 800168c:	4b39      	ldr	r3, [pc, #228]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001698:	4b36      	ldr	r3, [pc, #216]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169c:	4a35      	ldr	r2, [pc, #212]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 800169e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a2:	6313      	str	r3, [r2, #48]	; 0x30
 80016a4:	4b33      	ldr	r3, [pc, #204]	; (8001774 <HAL_LTDC_MspInit+0x178>)
 80016a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80016b0:	2310      	movs	r3, #16
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016c0:	230e      	movs	r3, #14
 80016c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80016c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c8:	4619      	mov	r1, r3
 80016ca:	482b      	ldr	r0, [pc, #172]	; (8001778 <HAL_LTDC_MspInit+0x17c>)
 80016cc:	f001 fedc 	bl	8003488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 80016d0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016e2:	230e      	movs	r3, #14
 80016e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80016e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ea:	4619      	mov	r1, r3
 80016ec:	4823      	ldr	r0, [pc, #140]	; (800177c <HAL_LTDC_MspInit+0x180>)
 80016ee:	f001 fecb 	bl	8003488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80016f2:	23f7      	movs	r3, #247	; 0xf7
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001702:	230e      	movs	r3, #14
 8001704:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170a:	4619      	mov	r1, r3
 800170c:	481c      	ldr	r0, [pc, #112]	; (8001780 <HAL_LTDC_MspInit+0x184>)
 800170e:	f001 febb 	bl	8003488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001724:	2309      	movs	r3, #9
 8001726:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172c:	4619      	mov	r1, r3
 800172e:	4815      	ldr	r0, [pc, #84]	; (8001784 <HAL_LTDC_MspInit+0x188>)
 8001730:	f001 feaa 	bl	8003488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001734:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001746:	230e      	movs	r3, #14
 8001748:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800174a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174e:	4619      	mov	r1, r3
 8001750:	480d      	ldr	r0, [pc, #52]	; (8001788 <HAL_LTDC_MspInit+0x18c>)
 8001752:	f001 fe99 	bl	8003488 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2105      	movs	r1, #5
 800175a:	2058      	movs	r0, #88	; 0x58
 800175c:	f001 f892 	bl	8002884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001760:	2058      	movs	r0, #88	; 0x58
 8001762:	f001 f8ab 	bl	80028bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001766:	bf00      	nop
 8001768:	3738      	adds	r7, #56	; 0x38
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40016800 	.word	0x40016800
 8001774:	40023800 	.word	0x40023800
 8001778:	40021000 	.word	0x40021000
 800177c:	40022400 	.word	0x40022400
 8001780:	40022800 	.word	0x40022800
 8001784:	40021800 	.word	0x40021800
 8001788:	40022000 	.word	0x40022000

0800178c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08c      	sub	sp, #48	; 0x30
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 031c 	add.w	r3, r7, #28
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a3b      	ldr	r2, [pc, #236]	; (8001898 <HAL_QSPI_MspInit+0x10c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d170      	bne.n	8001890 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80017ae:	4b3b      	ldr	r3, [pc, #236]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b2:	4a3a      	ldr	r2, [pc, #232]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	6393      	str	r3, [r2, #56]	; 0x38
 80017ba:	4b38      	ldr	r3, [pc, #224]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	61bb      	str	r3, [r7, #24]
 80017c4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017c6:	4b35      	ldr	r3, [pc, #212]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a34      	ldr	r2, [pc, #208]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017cc:	f043 0310 	orr.w	r3, r3, #16
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b32      	ldr	r3, [pc, #200]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017de:	4b2f      	ldr	r3, [pc, #188]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a2e      	ldr	r2, [pc, #184]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017e4:	f043 0302 	orr.w	r3, r3, #2
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b2c      	ldr	r3, [pc, #176]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f6:	4b29      	ldr	r3, [pc, #164]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a28      	ldr	r2, [pc, #160]	; (800189c <HAL_QSPI_MspInit+0x110>)
 80017fc:	f043 0308 	orr.w	r3, r3, #8
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b26      	ldr	r3, [pc, #152]	; (800189c <HAL_QSPI_MspInit+0x110>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800180e:	2304      	movs	r3, #4
 8001810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800181e:	2309      	movs	r3, #9
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	4619      	mov	r1, r3
 8001828:	481d      	ldr	r0, [pc, #116]	; (80018a0 <HAL_QSPI_MspInit+0x114>)
 800182a:	f001 fe2d 	bl	8003488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800182e:	2340      	movs	r3, #64	; 0x40
 8001830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183a:	2303      	movs	r3, #3
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800183e:	230a      	movs	r3, #10
 8001840:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	4619      	mov	r1, r3
 8001848:	4816      	ldr	r0, [pc, #88]	; (80018a4 <HAL_QSPI_MspInit+0x118>)
 800184a:	f001 fe1d 	bl	8003488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800184e:	2304      	movs	r3, #4
 8001850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185a:	2303      	movs	r3, #3
 800185c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800185e:	2309      	movs	r3, #9
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001862:	f107 031c 	add.w	r3, r7, #28
 8001866:	4619      	mov	r1, r3
 8001868:	480e      	ldr	r0, [pc, #56]	; (80018a4 <HAL_QSPI_MspInit+0x118>)
 800186a:	f001 fe0d 	bl	8003488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800186e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001880:	2309      	movs	r3, #9
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	4619      	mov	r1, r3
 800188a:	4807      	ldr	r0, [pc, #28]	; (80018a8 <HAL_QSPI_MspInit+0x11c>)
 800188c:	f001 fdfc 	bl	8003488 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001890:	bf00      	nop
 8001892:	3730      	adds	r7, #48	; 0x30
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	a0001000 	.word	0xa0001000
 800189c:	40023800 	.word	0x40023800
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40020400 	.word	0x40020400
 80018a8:	40020c00 	.word	0x40020c00

080018ac <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0c      	ldr	r2, [pc, #48]	; (80018ec <HAL_QSPI_MspDeInit+0x40>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d112      	bne.n	80018e4 <HAL_QSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_QSPI_MspDeInit+0x44>)
 80018c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c2:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <HAL_QSPI_MspDeInit+0x44>)
 80018c4:	f023 0302 	bic.w	r3, r3, #2
 80018c8:	6393      	str	r3, [r2, #56]	; 0x38
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    HAL_GPIO_DeInit(QSPI_D2_GPIO_Port, QSPI_D2_Pin);
 80018ca:	2104      	movs	r1, #4
 80018cc:	4809      	ldr	r0, [pc, #36]	; (80018f4 <HAL_QSPI_MspDeInit+0x48>)
 80018ce:	f001 ff85 	bl	80037dc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, QSPI_NCS_Pin|GPIO_PIN_2);
 80018d2:	2144      	movs	r1, #68	; 0x44
 80018d4:	4808      	ldr	r0, [pc, #32]	; (80018f8 <HAL_QSPI_MspDeInit+0x4c>)
 80018d6:	f001 ff81 	bl	80037dc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin);
 80018da:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80018de:	4807      	ldr	r0, [pc, #28]	; (80018fc <HAL_QSPI_MspDeInit+0x50>)
 80018e0:	f001 ff7c 	bl	80037dc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	a0001000 	.word	0xa0001000
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40020400 	.word	0x40020400
 80018fc:	40020c00 	.word	0x40020c00

08001900 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001914:	4b3a      	ldr	r3, [pc, #232]	; (8001a00 <HAL_FMC_MspInit+0x100>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d16d      	bne.n	80019f8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800191c:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <HAL_FMC_MspInit+0x100>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001922:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HAL_FMC_MspInit+0x104>)
 8001924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001926:	4a37      	ldr	r2, [pc, #220]	; (8001a04 <HAL_FMC_MspInit+0x104>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6393      	str	r3, [r2, #56]	; 0x38
 800192e:	4b35      	ldr	r3, [pc, #212]	; (8001a04 <HAL_FMC_MspInit+0x104>)
 8001930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800193a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800193e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800194c:	230c      	movs	r3, #12
 800194e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	4619      	mov	r1, r3
 8001954:	482c      	ldr	r0, [pc, #176]	; (8001a08 <HAL_FMC_MspInit+0x108>)
 8001956:	f001 fd97 	bl	8003488 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800195a:	f248 1333 	movw	r3, #33075	; 0x8133
 800195e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800196c:	230c      	movs	r3, #12
 800196e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	4619      	mov	r1, r3
 8001974:	4825      	ldr	r0, [pc, #148]	; (8001a0c <HAL_FMC_MspInit+0x10c>)
 8001976:	f001 fd87 	bl	8003488 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800197a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800197e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800198c:	230c      	movs	r3, #12
 800198e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	4619      	mov	r1, r3
 8001994:	481e      	ldr	r0, [pc, #120]	; (8001a10 <HAL_FMC_MspInit+0x110>)
 8001996:	f001 fd77 	bl	8003488 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800199a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800199e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a8:	2303      	movs	r3, #3
 80019aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019ac:	230c      	movs	r3, #12
 80019ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	4619      	mov	r1, r3
 80019b4:	4817      	ldr	r0, [pc, #92]	; (8001a14 <HAL_FMC_MspInit+0x114>)
 80019b6:	f001 fd67 	bl	8003488 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80019ba:	2328      	movs	r3, #40	; 0x28
 80019bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c6:	2303      	movs	r3, #3
 80019c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019ca:	230c      	movs	r3, #12
 80019cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	4619      	mov	r1, r3
 80019d2:	4811      	ldr	r0, [pc, #68]	; (8001a18 <HAL_FMC_MspInit+0x118>)
 80019d4:	f001 fd58 	bl	8003488 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80019d8:	2308      	movs	r3, #8
 80019da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019e8:	230c      	movs	r3, #12
 80019ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	4619      	mov	r1, r3
 80019f0:	480a      	ldr	r0, [pc, #40]	; (8001a1c <HAL_FMC_MspInit+0x11c>)
 80019f2:	f001 fd49 	bl	8003488 <HAL_GPIO_Init>
 80019f6:	e000      	b.n	80019fa <HAL_FMC_MspInit+0xfa>
    return;
 80019f8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000138 	.word	0x20000138
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40021800 	.word	0x40021800
 8001a10:	40020c00 	.word	0x40020c00
 8001a14:	40021400 	.word	0x40021400
 8001a18:	40021c00 	.word	0x40021c00
 8001a1c:	40020800 	.word	0x40020800

08001a20 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001a28:	f7ff ff6a 	bl	8001900 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08c      	sub	sp, #48	; 0x30
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001a44:	2200      	movs	r2, #0
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	2036      	movs	r0, #54	; 0x36
 8001a4a:	f000 ff1b 	bl	8002884 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001a4e:	2036      	movs	r0, #54	; 0x36
 8001a50:	f000 ff34 	bl	80028bc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <HAL_InitTick+0xa0>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	4a1e      	ldr	r2, [pc, #120]	; (8001ad4 <HAL_InitTick+0xa0>)
 8001a5a:	f043 0310 	orr.w	r3, r3, #16
 8001a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a60:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <HAL_InitTick+0xa0>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	f003 0310 	and.w	r3, r3, #16
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a6c:	f107 0210 	add.w	r2, r7, #16
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f004 fae4 	bl	8006044 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001a7c:	f004 face 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8001a80:	4603      	mov	r3, r0
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a88:	4a13      	ldr	r2, [pc, #76]	; (8001ad8 <HAL_InitTick+0xa4>)
 8001a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8e:	0c9b      	lsrs	r3, r3, #18
 8001a90:	3b01      	subs	r3, #1
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_InitTick+0xa8>)
 8001a96:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <HAL_InitTick+0xac>)
 8001a98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <HAL_InitTick+0xa8>)
 8001a9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aa0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001aa2:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <HAL_InitTick+0xa8>)
 8001aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <HAL_InitTick+0xa8>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_InitTick+0xa8>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001ab4:	4809      	ldr	r0, [pc, #36]	; (8001adc <HAL_InitTick+0xa8>)
 8001ab6:	f004 ff64 	bl	8006982 <HAL_TIM_Base_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d104      	bne.n	8001aca <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001ac0:	4806      	ldr	r0, [pc, #24]	; (8001adc <HAL_InitTick+0xa8>)
 8001ac2:	f004 ff93 	bl	80069ec <HAL_TIM_Base_Start_IT>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	e000      	b.n	8001acc <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3730      	adds	r7, #48	; 0x30
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	431bde83 	.word	0x431bde83
 8001adc:	2000b6f8 	.word	0x2000b6f8
 8001ae0:	40001000 	.word	0x40001000

08001ae4 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8001af6:	e7fe      	b.n	8001af6 <HardFault_Handler+0x4>

08001af8 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8001afc:	e7fe      	b.n	8001afc <MemManage_Handler+0x4>

08001afe <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8001b02:	e7fe      	b.n	8001b02 <BusFault_Handler+0x4>

08001b04 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8001b08:	e7fe      	b.n	8001b08 <UsageFault_Handler+0x4>

08001b0a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <TIM6_DAC_IRQHandler+0x10>)
 8001b1e:	f004 ff8f 	bl	8006a40 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2000b6f8 	.word	0x2000b6f8

08001b2c <LTDC_IRQHandler>:

/**
 * @brief This function handles LTDC global interrupt.
 */
void LTDC_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN LTDC_IRQn 0 */

	/* USER CODE END LTDC_IRQn 0 */
	HAL_LTDC_IRQHandler(&hltdc);
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <LTDC_IRQHandler+0x10>)
 8001b32:	f002 fde9 	bl	8004708 <HAL_LTDC_IRQHandler>
	/* USER CODE BEGIN LTDC_IRQn 1 */

	/* USER CODE END LTDC_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2000b590 	.word	0x2000b590

08001b40 <DMA2D_IRQHandler>:

/**
 * @brief This function handles DMA2D global interrupt.
 */
void DMA2D_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA2D_IRQn 0 */

	/* USER CODE END DMA2D_IRQn 0 */
	HAL_DMA2D_IRQHandler(&hdma2d);
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <DMA2D_IRQHandler+0x10>)
 8001b46:	f001 fa60 	bl	800300a <HAL_DMA2D_IRQHandler>
	/* USER CODE BEGIN DMA2D_IRQn 1 */

	/* USER CODE END DMA2D_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2000b638 	.word	0x2000b638

08001b54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
	return 1;
 8001b58:	2301      	movs	r3, #1
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <_kill>:

int _kill(int pid, int sig)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b6e:	f020 fc19 	bl	80223a4 <__errno>
 8001b72:	4602      	mov	r2, r0
 8001b74:	2316      	movs	r3, #22
 8001b76:	6013      	str	r3, [r2, #0]
	return -1;
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_exit>:

void _exit (int status)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ffe7 	bl	8001b64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b96:	e7fe      	b.n	8001b96 <_exit+0x12>

08001b98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	e00a      	b.n	8001bc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001baa:	f3af 8000 	nop.w
 8001bae:	4601      	mov	r1, r0
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	60ba      	str	r2, [r7, #8]
 8001bb6:	b2ca      	uxtb	r2, r1
 8001bb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	dbf0      	blt.n	8001baa <_read+0x12>
	}

return len;
 8001bc8:	687b      	ldr	r3, [r7, #4]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	e009      	b.n	8001bf8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	60ba      	str	r2, [r7, #8]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	dbf1      	blt.n	8001be4 <_write+0x12>
	}
	return len;
 8001c00:	687b      	ldr	r3, [r7, #4]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <_close>:

int _close(int file)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
	return -1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c32:	605a      	str	r2, [r3, #4]
	return 0;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <_isatty>:

int _isatty(int file)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
	return 1;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
	return 0;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <_sbrk+0x50>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <_sbrk+0x16>
		heap_end = &end;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <_sbrk+0x50>)
 8001c86:	4a10      	ldr	r2, [pc, #64]	; (8001cc8 <_sbrk+0x54>)
 8001c88:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <_sbrk+0x50>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <_sbrk+0x50>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4413      	add	r3, r2
 8001c98:	466a      	mov	r2, sp
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d907      	bls.n	8001cae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001c9e:	f020 fb81 	bl	80223a4 <__errno>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	230c      	movs	r3, #12
 8001ca6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cac:	e006      	b.n	8001cbc <_sbrk+0x48>
	}

	heap_end += incr;
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <_sbrk+0x50>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a03      	ldr	r2, [pc, #12]	; (8001cc4 <_sbrk+0x50>)
 8001cb8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001cba:	68fb      	ldr	r3, [r7, #12]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	2000013c 	.word	0x2000013c
 8001cc8:	2000b790 	.word	0x2000b790

08001ccc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <SystemInit+0x28>)
 8001cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd6:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <SystemInit+0x28>)
 8001cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <SystemInit+0x28>)
 8001ce2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ce6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cfc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cfe:	e003      	b.n	8001d08 <LoopCopyDataInit>

08001d00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d06:	3104      	adds	r1, #4

08001d08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d08:	480b      	ldr	r0, [pc, #44]	; (8001d38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d10:	d3f6      	bcc.n	8001d00 <CopyDataInit>
  ldr  r2, =_sbss
 8001d12:	4a0b      	ldr	r2, [pc, #44]	; (8001d40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d14:	e002      	b.n	8001d1c <LoopFillZerobss>

08001d16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d18:	f842 3b04 	str.w	r3, [r2], #4

08001d1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d20:	d3f9      	bcc.n	8001d16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d22:	f7ff ffd3 	bl	8001ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d26:	f020 fb55 	bl	80223d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d2a:	f7fe fcbb 	bl	80006a4 <main>
  bx  lr    
 8001d2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d30:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001d34:	08028790 	.word	0x08028790
  ldr  r0, =_sdata
 8001d38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d3c:	2000010c 	.word	0x2000010c
  ldr  r2, =_sbss
 8001d40:	2000010c 	.word	0x2000010c
  ldr  r3, = _ebss
 8001d44:	2000b78c 	.word	0x2000b78c

08001d48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d48:	e7fe      	b.n	8001d48 <ADC_IRQHandler>
	...

08001d4c <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 8001d52:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001d54:	4a28      	ldr	r2, [pc, #160]	; (8001df8 <BSP_QSPI_Init+0xac>)
 8001d56:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8001d58:	4826      	ldr	r0, [pc, #152]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001d5a:	f003 f877 	bl	8004e4c <HAL_QSPI_DeInit>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e041      	b.n	8001dec <BSP_QSPI_Init+0xa0>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4822      	ldr	r0, [pc, #136]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001d6c:	f000 f878 	bl	8001e60 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI freq = 216 MHz/(1+1) = 108 Mhz */
 8001d70:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 8001d76:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001d78:	2204      	movs	r2, #4
 8001d7a:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001d7e:	2210      	movs	r2, #16
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d86:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d90:	683b      	ldr	r3, [r7, #0]
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8001d92:	fab3 f383 	clz	r3, r3
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001d9e:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001da2:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001da6:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	621a      	str	r2, [r3, #32]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8001dba:	480e      	ldr	r0, [pc, #56]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001dbc:	f002 ffbc 	bl	8004d38 <HAL_QSPI_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <BSP_QSPI_Init+0x7e>
  {
    return QSPI_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e010      	b.n	8001dec <BSP_QSPI_Init+0xa0>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 8001dca:	480a      	ldr	r0, [pc, #40]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001dcc:	f000 f908 	bl	8001fe0 <QSPI_ResetMemory>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <BSP_QSPI_Init+0x8e>
  {
    return QSPI_NOT_SUPPORTED;
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	e008      	b.n	8001dec <BSP_QSPI_Init+0xa0>
  }
 
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 8001dda:	4806      	ldr	r0, [pc, #24]	; (8001df4 <BSP_QSPI_Init+0xa8>)
 8001ddc:	f000 f942 	bl	8002064 <QSPI_DummyCyclesCfg>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <BSP_QSPI_Init+0x9e>
  {
    return QSPI_NOT_SUPPORTED;
 8001de6:	2304      	movs	r3, #4
 8001de8:	e000      	b.n	8001dec <BSP_QSPI_Init+0xa0>
  }
  
  return QSPI_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	2000b738 	.word	0x2000b738
 8001df8:	a0001000 	.word	0xa0001000

08001dfc <BSP_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_EnableMemoryMappedMode(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b090      	sub	sp, #64	; 0x40
 8001e00:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001e02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e06:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8001e08:	23eb      	movs	r3, #235	; 0xeb
 8001e0a:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001e0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001e12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e16:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8001e1c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8001e22:	230a      	movs	r3, #10
 8001e24:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	603b      	str	r3, [r7, #0]
  
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8001e3a:	463a      	mov	r2, r7
 8001e3c:	f107 0308 	add.w	r3, r7, #8
 8001e40:	4619      	mov	r1, r3
 8001e42:	4806      	ldr	r0, [pc, #24]	; (8001e5c <BSP_QSPI_EnableMemoryMappedMode+0x60>)
 8001e44:	f003 fa40 	bl	80052c8 <HAL_QSPI_MemoryMapped>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <BSP_QSPI_EnableMemoryMappedMode+0x56>
  {
    return QSPI_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <BSP_QSPI_EnableMemoryMappedMode+0x58>
  }

  return QSPI_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3740      	adds	r7, #64	; 0x40
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	2000b738 	.word	0x2000b738

08001e60 <BSP_QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08e      	sub	sp, #56	; 0x38
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8001e6a:	4b59      	ldr	r3, [pc, #356]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6e:	4a58      	ldr	r2, [pc, #352]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	6393      	str	r3, [r2, #56]	; 0x38
 8001e76:	4b56      	ldr	r3, [pc, #344]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	623b      	str	r3, [r7, #32]
 8001e80:	6a3b      	ldr	r3, [r7, #32]
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8001e82:	4b53      	ldr	r3, [pc, #332]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	4a52      	ldr	r2, [pc, #328]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 8001e8e:	4b50      	ldr	r3, [pc, #320]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	4a4f      	ldr	r2, [pc, #316]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001e94:	f023 0302 	bic.w	r3, r3, #2
 8001e98:	6193      	str	r3, [r2, #24]
  /* Enable GPIO clocks */
  QSPI_CS_GPIO_CLK_ENABLE();
 8001e9a:	4b4d      	ldr	r3, [pc, #308]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a4c      	ldr	r2, [pc, #304]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b4a      	ldr	r3, [pc, #296]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	61fb      	str	r3, [r7, #28]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8001eb2:	4b47      	ldr	r3, [pc, #284]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a46      	ldr	r2, [pc, #280]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b44      	ldr	r3, [pc, #272]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	61bb      	str	r3, [r7, #24]
 8001ec8:	69bb      	ldr	r3, [r7, #24]
  QSPI_D0_GPIO_CLK_ENABLE();
 8001eca:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a40      	ldr	r2, [pc, #256]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ed0:	f043 0308 	orr.w	r3, r3, #8
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b3e      	ldr	r3, [pc, #248]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697b      	ldr	r3, [r7, #20]
  QSPI_D1_GPIO_CLK_ENABLE();
 8001ee2:	4b3b      	ldr	r3, [pc, #236]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a3a      	ldr	r2, [pc, #232]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ee8:	f043 0308 	orr.w	r3, r3, #8
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b38      	ldr	r3, [pc, #224]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8001efa:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a34      	ldr	r2, [pc, #208]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001f00:	f043 0310 	orr.w	r3, r3, #16
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b32      	ldr	r3, [pc, #200]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
  QSPI_D3_GPIO_CLK_ENABLE();
 8001f12:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a2e      	ldr	r2, [pc, #184]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001f18:	f043 0308 	orr.w	r3, r3, #8
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b2c      	ldr	r3, [pc, #176]	; (8001fd0 <BSP_QSPI_MspInit+0x170>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 8001f2a:	2340      	movs	r3, #64	; 0x40
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001f32:	2301      	movs	r3, #1
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8001f36:	2303      	movs	r3, #3
 8001f38:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8001f3a:	230a      	movs	r3, #10
 8001f3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8001f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f42:	4619      	mov	r1, r3
 8001f44:	4823      	ldr	r0, [pc, #140]	; (8001fd4 <BSP_QSPI_MspInit+0x174>)
 8001f46:	f001 fa9f 	bl	8003488 <HAL_GPIO_Init>

  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001f52:	2309      	movs	r3, #9
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8001f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	481d      	ldr	r0, [pc, #116]	; (8001fd4 <BSP_QSPI_MspInit+0x174>)
 8001f5e:	f001 fa93 	bl	8003488 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8001f62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001f68:	2309      	movs	r3, #9
 8001f6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8001f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f70:	4619      	mov	r1, r3
 8001f72:	4819      	ldr	r0, [pc, #100]	; (8001fd8 <BSP_QSPI_MspInit+0x178>)
 8001f74:	f001 fa88 	bl	8003488 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8001f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001f7e:	2309      	movs	r3, #9
 8001f80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8001f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f86:	4619      	mov	r1, r3
 8001f88:	4813      	ldr	r0, [pc, #76]	; (8001fd8 <BSP_QSPI_MspInit+0x178>)
 8001f8a:	f001 fa7d 	bl	8003488 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8001f8e:	2304      	movs	r3, #4
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001f92:	2309      	movs	r3, #9
 8001f94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8001f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	480f      	ldr	r0, [pc, #60]	; (8001fdc <BSP_QSPI_MspInit+0x17c>)
 8001f9e:	f001 fa73 	bl	8003488 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8001fa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8001fa8:	2309      	movs	r3, #9
 8001faa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8001fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4809      	ldr	r0, [pc, #36]	; (8001fd8 <BSP_QSPI_MspInit+0x178>)
 8001fb4:	f001 fa68 	bl	8003488 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	210f      	movs	r1, #15
 8001fbc:	205c      	movs	r0, #92	; 0x5c
 8001fbe:	f000 fc61 	bl	8002884 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8001fc2:	205c      	movs	r0, #92	; 0x5c
 8001fc4:	f000 fc7a 	bl	80028bc <HAL_NVIC_EnableIRQ>
}
 8001fc8:	bf00      	nop
 8001fca:	3738      	adds	r7, #56	; 0x38
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020400 	.word	0x40020400
 8001fd8:	40020c00 	.word	0x40020c00
 8001fdc:	40021000 	.word	0x40021000

08001fe0 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b090      	sub	sp, #64	; 0x40
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fec:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8001fee:	2366      	movs	r3, #102	; 0x66
 8001ff0:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002006:	2300      	movs	r3, #0
 8002008:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800200a:	2300      	movs	r3, #0
 800200c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800200e:	f107 0308 	add.w	r3, r7, #8
 8002012:	f241 3288 	movw	r2, #5000	; 0x1388
 8002016:	4619      	mov	r1, r3
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f002 ff47 	bl	8004eac <HAL_QSPI_Command>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e019      	b.n	800205c <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 8002028:	2399      	movs	r3, #153	; 0x99
 800202a:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800202c:	f107 0308 	add.w	r3, r7, #8
 8002030:	f241 3288 	movw	r2, #5000	; 0x1388
 8002034:	4619      	mov	r1, r3
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f002 ff38 	bl	8004eac <HAL_QSPI_Command>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e00a      	b.n	800205c <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002046:	f241 3188 	movw	r1, #5000	; 0x1388
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8c7 	bl	80021de <QSPI_AutoPollingMemReady>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3740      	adds	r7, #64	; 0x40
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b094      	sub	sp, #80	; 0x50
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800206c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8002072:	2385      	movs	r3, #133	; 0x85
 8002074:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002076:	2300      	movs	r3, #0
 8002078:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800207a:	2300      	movs	r3, #0
 800207c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800207e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002082:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 8002088:	2301      	movs	r3, #1
 800208a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002090:	2300      	movs	r3, #0
 8002092:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002094:	2300      	movs	r3, #0
 8002096:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a0:	4619      	mov	r1, r3
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f002 ff02 	bl	8004eac <HAL_QSPI_Command>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e048      	b.n	8002144 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80020b2:	f107 030f 	add.w	r3, r7, #15
 80020b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ba:	4619      	mov	r1, r3
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f002 ffea 	bl	8005096 <HAL_QSPI_Receive>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e03b      	b.n	8002144 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f83d 	bl	800214c <QSPI_WriteEnable>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e033      	b.n	8002144 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */  
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 80020dc:	2381      	movs	r3, #129	; 0x81
 80020de:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	b25b      	sxtb	r3, r3
 80020e4:	f003 030f 	and.w	r3, r3, #15
 80020e8:	b25a      	sxtb	r2, r3
 80020ea:	23f0      	movs	r3, #240	; 0xf0
 80020ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80020f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020f8:	fab3 f383 	clz	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	4619      	mov	r1, r3
 8002100:	230a      	movs	r3, #10
 8002102:	408b      	lsls	r3, r1
 8002104:	b25b      	sxtb	r3, r3
 8002106:	4313      	orrs	r3, r2
 8002108:	b25b      	sxtb	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	73fb      	strb	r3, [r7, #15]
      
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800210e:	f107 0310 	add.w	r3, r7, #16
 8002112:	f241 3288 	movw	r2, #5000	; 0x1388
 8002116:	4619      	mov	r1, r3
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f002 fec7 	bl	8004eac <HAL_QSPI_Command>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <QSPI_DummyCyclesCfg+0xc4>
  {
    return QSPI_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e00d      	b.n	8002144 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002128:	f107 030f 	add.w	r3, r7, #15
 800212c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002130:	4619      	mov	r1, r3
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f002 ff1a 	bl	8004f6c <HAL_QSPI_Transmit>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <QSPI_DummyCyclesCfg+0xde>
  {
    return QSPI_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <QSPI_DummyCyclesCfg+0xe0>
  }
  
  return QSPI_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3750      	adds	r7, #80	; 0x50
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b096      	sub	sp, #88	; 0x58
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002154:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002158:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 800215a:	2306      	movs	r3, #6
 800215c:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800215e:	2300      	movs	r3, #0
 8002160:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002162:	2300      	movs	r3, #0
 8002164:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8002166:	2300      	movs	r3, #0
 8002168:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800216e:	2300      	movs	r3, #0
 8002170:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002172:	2300      	movs	r3, #0
 8002174:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002176:	2300      	movs	r3, #0
 8002178:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800217a:	f107 0320 	add.w	r3, r7, #32
 800217e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002182:	4619      	mov	r1, r3
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f002 fe91 	bl	8004eac <HAL_QSPI_Command>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e020      	b.n	80021d6 <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = N25Q128A_SR_WREN;
 8002194:	2302      	movs	r3, #2
 8002196:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 8002198:	2302      	movs	r3, #2
 800219a:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800219c:	2300      	movs	r3, #0
 800219e:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80021a0:	2301      	movs	r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80021a4:	2310      	movs	r3, #16
 80021a6:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80021a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021ac:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 80021ae:	2305      	movs	r3, #5
 80021b0:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 80021b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80021b8:	f107 0208 	add.w	r2, r7, #8
 80021bc:	f107 0120 	add.w	r1, r7, #32
 80021c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f003 f806 	bl	80051d6 <HAL_QSPI_AutoPolling>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3758      	adds	r7, #88	; 0x58
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b096      	sub	sp, #88	; 0x58
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80021e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ec:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80021ee:	2305      	movs	r3, #5
 80021f0:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80021fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021fe:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002204:	2300      	movs	r3, #0
 8002206:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002208:	2300      	movs	r3, #0
 800220a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800220c:	2300      	movs	r3, #0
 800220e:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 8002214:	2301      	movs	r3, #1
 8002216:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002218:	2300      	movs	r3, #0
 800221a:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 800221c:	2301      	movs	r3, #1
 800221e:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8002220:	2310      	movs	r3, #16
 8002222:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002224:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002228:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800222a:	f107 0208 	add.w	r2, r7, #8
 800222e:	f107 0120 	add.w	r1, r7, #32
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f002 ffce 	bl	80051d6 <HAL_QSPI_AutoPolling>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3758      	adds	r7, #88	; 0x58
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  //TS_IO_Delay(200);

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002258:	f000 f9b4 	bl	80025c4 <ft5336_I2C_InitializeIfRequired>
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b084      	sub	sp, #16
 800227e:	af00      	add	r7, sp, #0
 8002280:	4603      	mov	r3, r0
 8002282:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800228c:	2300      	movs	r3, #0
 800228e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002290:	f000 f998 	bl	80025c4 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8002294:	2300      	movs	r3, #0
 8002296:	73fb      	strb	r3, [r7, #15]
 8002298:	e010      	b.n	80022bc <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	21a8      	movs	r1, #168	; 0xa8
 80022a0:	4618      	mov	r0, r3
 80022a2:	f00d ff3b 	bl	801011c <TS_IO_Read>
 80022a6:	4603      	mov	r3, r0
 80022a8:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80022aa:	7b7b      	ldrb	r3, [r7, #13]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b51      	cmp	r3, #81	; 0x51
 80022b0:	d101      	bne.n	80022b6 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	3301      	adds	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d802      	bhi.n	80022c8 <ft5336_ReadID+0x4e>
 80022c2:	7bbb      	ldrb	r3, [r7, #14]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0e8      	beq.n	800229a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80022c8:	7b7b      	ldrb	r3, [r7, #13]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	b29b      	uxth	r3, r3
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	4603      	mov	r3, r0
 80022de:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 f97c 	bl	80025e0 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f932 	bl	8002554 <ft5336_TS_DisableIT>
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8002306:	88fb      	ldrh	r3, [r7, #6]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2102      	movs	r1, #2
 800230c:	4618      	mov	r0, r3
 800230e:	f00d ff05 	bl	801011c <TS_IO_Read>
 8002312:	4603      	mov	r3, r0
 8002314:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	b2db      	uxtb	r3, r3
 8002320:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b05      	cmp	r3, #5
 8002328:	d901      	bls.n	800232e <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4b05      	ldr	r3, [pc, #20]	; (8002348 <ft5336_TS_DetectTouch+0x50>)
 8002334:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8002336:	4b04      	ldr	r3, [pc, #16]	; (8002348 <ft5336_TS_DetectTouch+0x50>)
 8002338:	2200      	movs	r2, #0
 800233a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	b2db      	uxtb	r3, r3
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20000140 	.word	0x20000140

0800234c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
 8002358:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800236e:	4b6d      	ldr	r3, [pc, #436]	; (8002524 <ft5336_TS_GetXY+0x1d8>)
 8002370:	789a      	ldrb	r2, [r3, #2]
 8002372:	4b6c      	ldr	r3, [pc, #432]	; (8002524 <ft5336_TS_GetXY+0x1d8>)
 8002374:	785b      	ldrb	r3, [r3, #1]
 8002376:	429a      	cmp	r2, r3
 8002378:	f080 80cf 	bcs.w	800251a <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800237c:	4b69      	ldr	r3, [pc, #420]	; (8002524 <ft5336_TS_GetXY+0x1d8>)
 800237e:	789b      	ldrb	r3, [r3, #2]
 8002380:	2b09      	cmp	r3, #9
 8002382:	d871      	bhi.n	8002468 <ft5336_TS_GetXY+0x11c>
 8002384:	a201      	add	r2, pc, #4	; (adr r2, 800238c <ft5336_TS_GetXY+0x40>)
 8002386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238a:	bf00      	nop
 800238c:	080023b5 	.word	0x080023b5
 8002390:	080023c7 	.word	0x080023c7
 8002394:	080023d9 	.word	0x080023d9
 8002398:	080023eb 	.word	0x080023eb
 800239c:	080023fd 	.word	0x080023fd
 80023a0:	0800240f 	.word	0x0800240f
 80023a4:	08002421 	.word	0x08002421
 80023a8:	08002433 	.word	0x08002433
 80023ac:	08002445 	.word	0x08002445
 80023b0:	08002457 	.word	0x08002457
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80023b4:	2304      	movs	r3, #4
 80023b6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80023b8:	2303      	movs	r3, #3
 80023ba:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80023bc:	2306      	movs	r3, #6
 80023be:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80023c0:	2305      	movs	r3, #5
 80023c2:	753b      	strb	r3, [r7, #20]
      break;
 80023c4:	e051      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80023c6:	230a      	movs	r3, #10
 80023c8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80023ca:	2309      	movs	r3, #9
 80023cc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80023ce:	230c      	movs	r3, #12
 80023d0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80023d2:	230b      	movs	r3, #11
 80023d4:	753b      	strb	r3, [r7, #20]
      break;
 80023d6:	e048      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80023d8:	2310      	movs	r3, #16
 80023da:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80023dc:	230f      	movs	r3, #15
 80023de:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80023e0:	2312      	movs	r3, #18
 80023e2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80023e4:	2311      	movs	r3, #17
 80023e6:	753b      	strb	r3, [r7, #20]
      break;
 80023e8:	e03f      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80023ea:	2316      	movs	r3, #22
 80023ec:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80023ee:	2315      	movs	r3, #21
 80023f0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80023f2:	2318      	movs	r3, #24
 80023f4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80023f6:	2317      	movs	r3, #23
 80023f8:	753b      	strb	r3, [r7, #20]
      break;
 80023fa:	e036      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80023fc:	231c      	movs	r3, #28
 80023fe:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8002400:	231b      	movs	r3, #27
 8002402:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8002404:	231e      	movs	r3, #30
 8002406:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8002408:	231d      	movs	r3, #29
 800240a:	753b      	strb	r3, [r7, #20]
      break;
 800240c:	e02d      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800240e:	2322      	movs	r3, #34	; 0x22
 8002410:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8002412:	2321      	movs	r3, #33	; 0x21
 8002414:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8002416:	2324      	movs	r3, #36	; 0x24
 8002418:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800241a:	2323      	movs	r3, #35	; 0x23
 800241c:	753b      	strb	r3, [r7, #20]
      break;
 800241e:	e024      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8002420:	2328      	movs	r3, #40	; 0x28
 8002422:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8002424:	2327      	movs	r3, #39	; 0x27
 8002426:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8002428:	232a      	movs	r3, #42	; 0x2a
 800242a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 800242c:	2329      	movs	r3, #41	; 0x29
 800242e:	753b      	strb	r3, [r7, #20]
      break;
 8002430:	e01b      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8002432:	232e      	movs	r3, #46	; 0x2e
 8002434:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8002436:	232d      	movs	r3, #45	; 0x2d
 8002438:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800243a:	2330      	movs	r3, #48	; 0x30
 800243c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800243e:	232f      	movs	r3, #47	; 0x2f
 8002440:	753b      	strb	r3, [r7, #20]
      break;
 8002442:	e012      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8002444:	2334      	movs	r3, #52	; 0x34
 8002446:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8002448:	2333      	movs	r3, #51	; 0x33
 800244a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 800244c:	2336      	movs	r3, #54	; 0x36
 800244e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8002450:	2335      	movs	r3, #53	; 0x35
 8002452:	753b      	strb	r3, [r7, #20]
      break;
 8002454:	e009      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8002456:	233a      	movs	r3, #58	; 0x3a
 8002458:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800245a:	2339      	movs	r3, #57	; 0x39
 800245c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800245e:	233c      	movs	r3, #60	; 0x3c
 8002460:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8002462:	233b      	movs	r3, #59	; 0x3b
 8002464:	753b      	strb	r3, [r7, #20]
      break;
 8002466:	e000      	b.n	800246a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8002468:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800246a:	89fb      	ldrh	r3, [r7, #14]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	7dfa      	ldrb	r2, [r7, #23]
 8002470:	4611      	mov	r1, r2
 8002472:	4618      	mov	r0, r3
 8002474:	f00d fe52 	bl	801011c <TS_IO_Read>
 8002478:	4603      	mov	r3, r0
 800247a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	b29a      	uxth	r2, r3
 8002482:	4b29      	ldr	r3, [pc, #164]	; (8002528 <ft5336_TS_GetXY+0x1dc>)
 8002484:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8002486:	89fb      	ldrh	r3, [r7, #14]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	7dba      	ldrb	r2, [r7, #22]
 800248c:	4611      	mov	r1, r2
 800248e:	4618      	mov	r0, r3
 8002490:	f00d fe44 	bl	801011c <TS_IO_Read>
 8002494:	4603      	mov	r3, r0
 8002496:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	021b      	lsls	r3, r3, #8
 800249e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80024a2:	b21a      	sxth	r2, r3
 80024a4:	4b20      	ldr	r3, [pc, #128]	; (8002528 <ft5336_TS_GetXY+0x1dc>)
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	b21b      	sxth	r3, r3
 80024aa:	4313      	orrs	r3, r2
 80024ac:	b21b      	sxth	r3, r3
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	4b1d      	ldr	r3, [pc, #116]	; (8002528 <ft5336_TS_GetXY+0x1dc>)
 80024b2:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80024b4:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <ft5336_TS_GetXY+0x1dc>)
 80024b6:	881a      	ldrh	r2, [r3, #0]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80024bc:	89fb      	ldrh	r3, [r7, #14]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	7d7a      	ldrb	r2, [r7, #21]
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f00d fe29 	bl	801011c <TS_IO_Read>
 80024ca:	4603      	mov	r3, r0
 80024cc:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80024ce:	7cfb      	ldrb	r3, [r7, #19]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	4b14      	ldr	r3, [pc, #80]	; (8002528 <ft5336_TS_GetXY+0x1dc>)
 80024d6:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80024d8:	89fb      	ldrh	r3, [r7, #14]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	7d3a      	ldrb	r2, [r7, #20]
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f00d fe1b 	bl	801011c <TS_IO_Read>
 80024e6:	4603      	mov	r3, r0
 80024e8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80024ea:	7cfb      	ldrb	r3, [r7, #19]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	021b      	lsls	r3, r3, #8
 80024f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80024f4:	b21a      	sxth	r2, r3
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <ft5336_TS_GetXY+0x1dc>)
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	b21b      	sxth	r3, r3
 80024fc:	4313      	orrs	r3, r2
 80024fe:	b21b      	sxth	r3, r3
 8002500:	b29a      	uxth	r2, r3
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <ft5336_TS_GetXY+0x1dc>)
 8002504:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8002506:	4b08      	ldr	r3, [pc, #32]	; (8002528 <ft5336_TS_GetXY+0x1dc>)
 8002508:	881a      	ldrh	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800250e:	4b05      	ldr	r3, [pc, #20]	; (8002524 <ft5336_TS_GetXY+0x1d8>)
 8002510:	789b      	ldrb	r3, [r3, #2]
 8002512:	3301      	adds	r3, #1
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4b03      	ldr	r3, [pc, #12]	; (8002524 <ft5336_TS_GetXY+0x1d8>)
 8002518:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800251a:	bf00      	nop
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20000140 	.word	0x20000140
 8002528:	20000144 	.word	0x20000144

0800252c <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	7bfa      	ldrb	r2, [r7, #15]
 8002544:	21a4      	movs	r1, #164	; 0xa4
 8002546:	4618      	mov	r0, r3
 8002548:	f00d fdce 	bl	80100e8 <TS_IO_Write>
}
 800254c:	bf00      	nop
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8002562:	2300      	movs	r3, #0
 8002564:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	7bfa      	ldrb	r2, [r7, #15]
 800256c:	21a4      	movs	r1, #164	; 0xa4
 800256e:	4618      	mov	r0, r3
 8002570:	f00d fdba 	bl	80100e8 <TS_IO_Write>
}
 8002574:	bf00      	nop
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80025b0:	4b03      	ldr	r3, [pc, #12]	; (80025c0 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	20000140 	.word	0x20000140

080025c4 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80025c8:	f7ff fff0 	bl	80025ac <ft5336_Get_I2C_InitializedStatus>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d102      	bne.n	80025d8 <ft5336_I2C_InitializeIfRequired+0x14>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80025d2:	4b02      	ldr	r3, [pc, #8]	; (80025dc <ft5336_I2C_InitializeIfRequired+0x18>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	701a      	strb	r2, [r3, #0]
  }
}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20000140 	.word	0x20000140

080025e0 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80025ee:	68fb      	ldr	r3, [r7, #12]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_Init+0x34>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <HAL_Init+0x34>)
 800261e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002622:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002624:	4b08      	ldr	r3, [pc, #32]	; (8002648 <HAL_Init+0x34>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a07      	ldr	r2, [pc, #28]	; (8002648 <HAL_Init+0x34>)
 800262a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800262e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002630:	2003      	movs	r0, #3
 8002632:	f000 f91c 	bl	800286e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002636:	2000      	movs	r0, #0
 8002638:	f7ff f9fc 	bl	8001a34 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800263c:	f7fe fef4 	bl	8001428 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40023c00 	.word	0x40023c00

0800264c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <HAL_IncTick+0x20>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_IncTick+0x24>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4413      	add	r3, r2
 800265c:	4a04      	ldr	r2, [pc, #16]	; (8002670 <HAL_IncTick+0x24>)
 800265e:	6013      	str	r3, [r2, #0]
}
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	20000030 	.word	0x20000030
 8002670:	2000b784 	.word	0x2000b784

08002674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return uwTick;
 8002678:	4b03      	ldr	r3, [pc, #12]	; (8002688 <HAL_GetTick+0x14>)
 800267a:	681b      	ldr	r3, [r3, #0]
}
 800267c:	4618      	mov	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	2000b784 	.word	0x2000b784

0800268c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002694:	f7ff ffee 	bl	8002674 <HAL_GetTick>
 8002698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026a4:	d005      	beq.n	80026b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026a6:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_Delay+0x40>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4413      	add	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026b2:	bf00      	nop
 80026b4:	f7ff ffde 	bl	8002674 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d8f7      	bhi.n	80026b4 <HAL_Delay+0x28>
  {
  }
}
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000030 	.word	0x20000030

080026d0 <__NVIC_SetPriorityGrouping>:
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <__NVIC_SetPriorityGrouping+0x40>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026ec:	4013      	ands	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <__NVIC_SetPriorityGrouping+0x44>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026fe:	4a04      	ldr	r2, [pc, #16]	; (8002710 <__NVIC_SetPriorityGrouping+0x40>)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	60d3      	str	r3, [r2, #12]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000ed00 	.word	0xe000ed00
 8002714:	05fa0000 	.word	0x05fa0000

08002718 <__NVIC_GetPriorityGrouping>:
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <__NVIC_GetPriorityGrouping+0x18>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	0a1b      	lsrs	r3, r3, #8
 8002722:	f003 0307 	and.w	r3, r3, #7
}
 8002726:	4618      	mov	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <__NVIC_EnableIRQ>:
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	2b00      	cmp	r3, #0
 8002744:	db0b      	blt.n	800275e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	f003 021f 	and.w	r2, r3, #31
 800274c:	4907      	ldr	r1, [pc, #28]	; (800276c <__NVIC_EnableIRQ+0x38>)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	2001      	movs	r0, #1
 8002756:	fa00 f202 	lsl.w	r2, r0, r2
 800275a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	e000e100 	.word	0xe000e100

08002770 <__NVIC_DisableIRQ>:
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	2b00      	cmp	r3, #0
 8002780:	db10      	blt.n	80027a4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	f003 021f 	and.w	r2, r3, #31
 8002788:	4909      	ldr	r1, [pc, #36]	; (80027b0 <__NVIC_DisableIRQ+0x40>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	2001      	movs	r0, #1
 8002792:	fa00 f202 	lsl.w	r2, r0, r2
 8002796:	3320      	adds	r3, #32
 8002798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800279c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80027a0:	f3bf 8f6f 	isb	sy
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	e000e100 	.word	0xe000e100

080027b4 <__NVIC_SetPriority>:
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	6039      	str	r1, [r7, #0]
 80027be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	db0a      	blt.n	80027de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	490c      	ldr	r1, [pc, #48]	; (8002800 <__NVIC_SetPriority+0x4c>)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	0112      	lsls	r2, r2, #4
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	440b      	add	r3, r1
 80027d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027dc:	e00a      	b.n	80027f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	4908      	ldr	r1, [pc, #32]	; (8002804 <__NVIC_SetPriority+0x50>)
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	3b04      	subs	r3, #4
 80027ec:	0112      	lsls	r2, r2, #4
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	440b      	add	r3, r1
 80027f2:	761a      	strb	r2, [r3, #24]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000e100 	.word	0xe000e100
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <NVIC_EncodePriority>:
{
 8002808:	b480      	push	{r7}
 800280a:	b089      	sub	sp, #36	; 0x24
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f1c3 0307 	rsb	r3, r3, #7
 8002822:	2b04      	cmp	r3, #4
 8002824:	bf28      	it	cs
 8002826:	2304      	movcs	r3, #4
 8002828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3304      	adds	r3, #4
 800282e:	2b06      	cmp	r3, #6
 8002830:	d902      	bls.n	8002838 <NVIC_EncodePriority+0x30>
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3b03      	subs	r3, #3
 8002836:	e000      	b.n	800283a <NVIC_EncodePriority+0x32>
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43da      	mvns	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	401a      	ands	r2, r3
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002850:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	43d9      	mvns	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	4313      	orrs	r3, r2
}
 8002862:	4618      	mov	r0, r3
 8002864:	3724      	adds	r7, #36	; 0x24
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ff2a 	bl	80026d0 <__NVIC_SetPriorityGrouping>
}
 800287c:	bf00      	nop
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002896:	f7ff ff3f 	bl	8002718 <__NVIC_GetPriorityGrouping>
 800289a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	68b9      	ldr	r1, [r7, #8]
 80028a0:	6978      	ldr	r0, [r7, #20]
 80028a2:	f7ff ffb1 	bl	8002808 <NVIC_EncodePriority>
 80028a6:	4602      	mov	r2, r0
 80028a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ac:	4611      	mov	r1, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff ff80 	bl	80027b4 <__NVIC_SetPriority>
}
 80028b4:	bf00      	nop
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff ff32 	bl	8002734 <__NVIC_EnableIRQ>
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80028e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff ff42 	bl	8002770 <__NVIC_DisableIRQ>
}
 80028ec:	bf00      	nop
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80028f8:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_MPU_Disable+0x24>)
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	4a05      	ldr	r2, [pc, #20]	; (8002918 <HAL_MPU_Disable+0x24>)
 8002902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002906:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002908:	4b04      	ldr	r3, [pc, #16]	; (800291c <HAL_MPU_Disable+0x28>)
 800290a:	2200      	movs	r2, #0
 800290c:	605a      	str	r2, [r3, #4]
}
 800290e:	bf00      	nop
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000ed00 	.word	0xe000ed00
 800291c:	e000ed90 	.word	0xe000ed90

08002920 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002928:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <HAL_MPU_Enable+0x34>)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002932:	4b09      	ldr	r3, [pc, #36]	; (8002958 <HAL_MPU_Enable+0x38>)
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	4a08      	ldr	r2, [pc, #32]	; (8002958 <HAL_MPU_Enable+0x38>)
 8002938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800293e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002942:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	e000ed90 	.word	0xe000ed90
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	785a      	ldrb	r2, [r3, #1]
 8002968:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <HAL_MPU_ConfigRegion+0x84>)
 800296a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d029      	beq.n	80029c8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8002974:	4a1a      	ldr	r2, [pc, #104]	; (80029e0 <HAL_MPU_ConfigRegion+0x84>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	7b1b      	ldrb	r3, [r3, #12]
 8002980:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7adb      	ldrb	r3, [r3, #11]
 8002986:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002988:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	7a9b      	ldrb	r3, [r3, #10]
 800298e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002990:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7b5b      	ldrb	r3, [r3, #13]
 8002996:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002998:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	7b9b      	ldrb	r3, [r3, #14]
 800299e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80029a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	7bdb      	ldrb	r3, [r3, #15]
 80029a6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80029a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	7a5b      	ldrb	r3, [r3, #9]
 80029ae:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80029b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	7a1b      	ldrb	r3, [r3, #8]
 80029b6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80029b8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	7812      	ldrb	r2, [r2, #0]
 80029be:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029c0:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029c2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029c4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80029c6:	e005      	b.n	80029d4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_MPU_ConfigRegion+0x84>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80029ce:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <HAL_MPU_ConfigRegion+0x84>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	611a      	str	r2, [r3, #16]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed90 	.word	0xe000ed90

080029e4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e054      	b.n	8002aa0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	7f5b      	ldrb	r3, [r3, #29]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d105      	bne.n	8002a0c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7fe fd36 	bl	8001478 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	791b      	ldrb	r3, [r3, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10c      	bne.n	8002a34 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a22      	ldr	r2, [pc, #136]	; (8002aa8 <HAL_CRC_Init+0xc4>)
 8002a20:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0218 	bic.w	r2, r2, #24
 8002a30:	609a      	str	r2, [r3, #8]
 8002a32:	e00c      	b.n	8002a4e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6899      	ldr	r1, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f834 	bl	8002aac <HAL_CRCEx_Polynomial_Set>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e028      	b.n	8002aa0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	795b      	ldrb	r3, [r3, #5]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d105      	bne.n	8002a62 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a5e:	611a      	str	r2, [r3, #16]
 8002a60:	e004      	b.n	8002a6c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6912      	ldr	r2, [r2, #16]
 8002a6a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695a      	ldr	r2, [r3, #20]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699a      	ldr	r2, [r3, #24]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	04c11db7 	.word	0x04c11db7

08002aac <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002abc:	231f      	movs	r3, #31
 8002abe:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002ac0:	bf00      	nop
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1e5a      	subs	r2, r3, #1
 8002ac6:	613a      	str	r2, [r7, #16]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d009      	beq.n	8002ae0 <HAL_CRCEx_Polynomial_Set+0x34>
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b18      	cmp	r3, #24
 8002ae4:	d846      	bhi.n	8002b74 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002ae6:	a201      	add	r2, pc, #4	; (adr r2, 8002aec <HAL_CRCEx_Polynomial_Set+0x40>)
 8002ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aec:	08002b7b 	.word	0x08002b7b
 8002af0:	08002b75 	.word	0x08002b75
 8002af4:	08002b75 	.word	0x08002b75
 8002af8:	08002b75 	.word	0x08002b75
 8002afc:	08002b75 	.word	0x08002b75
 8002b00:	08002b75 	.word	0x08002b75
 8002b04:	08002b75 	.word	0x08002b75
 8002b08:	08002b75 	.word	0x08002b75
 8002b0c:	08002b69 	.word	0x08002b69
 8002b10:	08002b75 	.word	0x08002b75
 8002b14:	08002b75 	.word	0x08002b75
 8002b18:	08002b75 	.word	0x08002b75
 8002b1c:	08002b75 	.word	0x08002b75
 8002b20:	08002b75 	.word	0x08002b75
 8002b24:	08002b75 	.word	0x08002b75
 8002b28:	08002b75 	.word	0x08002b75
 8002b2c:	08002b5d 	.word	0x08002b5d
 8002b30:	08002b75 	.word	0x08002b75
 8002b34:	08002b75 	.word	0x08002b75
 8002b38:	08002b75 	.word	0x08002b75
 8002b3c:	08002b75 	.word	0x08002b75
 8002b40:	08002b75 	.word	0x08002b75
 8002b44:	08002b75 	.word	0x08002b75
 8002b48:	08002b75 	.word	0x08002b75
 8002b4c:	08002b51 	.word	0x08002b51
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	2b06      	cmp	r3, #6
 8002b54:	d913      	bls.n	8002b7e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002b5a:	e010      	b.n	8002b7e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	2b07      	cmp	r3, #7
 8002b60:	d90f      	bls.n	8002b82 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002b66:	e00c      	b.n	8002b82 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	2b0f      	cmp	r3, #15
 8002b6c:	d90b      	bls.n	8002b86 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002b72:	e008      	b.n	8002b86 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	75fb      	strb	r3, [r7, #23]
      break;
 8002b78:	e006      	b.n	8002b88 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b7a:	bf00      	nop
 8002b7c:	e004      	b.n	8002b88 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b7e:	bf00      	nop
 8002b80:	e002      	b.n	8002b88 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b82:	bf00      	nop
 8002b84:	e000      	b.n	8002b88 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002b86:	bf00      	nop
  }
  if (status == HAL_OK)
 8002b88:	7dfb      	ldrb	r3, [r7, #23]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10d      	bne.n	8002baa <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f023 0118 	bic.w	r1, r3, #24
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bc6:	f7ff fd55 	bl	8002674 <HAL_GetTick>
 8002bca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d008      	beq.n	8002bea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2280      	movs	r2, #128	; 0x80
 8002bdc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e052      	b.n	8002c90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0216 	bic.w	r2, r2, #22
 8002bf8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d103      	bne.n	8002c1a <HAL_DMA_Abort+0x62>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d007      	beq.n	8002c2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0208 	bic.w	r2, r2, #8
 8002c28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0201 	bic.w	r2, r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c3a:	e013      	b.n	8002c64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c3c:	f7ff fd1a 	bl	8002674 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b05      	cmp	r3, #5
 8002c48:	d90c      	bls.n	8002c64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e015      	b.n	8002c90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1e4      	bne.n	8002c3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c76:	223f      	movs	r2, #63	; 0x3f
 8002c78:	409a      	lsls	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e039      	b.n	8002d1e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d106      	bne.n	8002cc4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fe fbfa 	bl	80014b8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce8:	f023 0107 	bic.w	r1, r3, #7
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <HAL_DMA2D_Init+0x90>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	68d1      	ldr	r1, [r2, #12]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	430b      	orrs	r3, r1
 8002d0c:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	ffffc000 	.word	0xffffc000

08002d2c <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e05f      	b.n	8002dfe <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8002d3e:	4b32      	ldr	r3, [pc, #200]	; (8002e08 <HAL_DMA2D_DeInit+0xdc>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d02e      	beq.n	8002da8 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d107      	bne.n	8002d68 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f8c1 	bl	8002ee0 <HAL_DMA2D_Abort>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d021      	beq.n	8002da8 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e04a      	b.n	8002dfe <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	d108      	bne.n	8002d88 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8002d76:	2100      	movs	r1, #0
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 f8f7 	bl	8002f6c <HAL_DMA2D_CLUTLoading_Abort>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d011      	beq.n	8002da8 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e03a      	b.n	8002dfe <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	d108      	bne.n	8002da8 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8002d96:	2101      	movs	r1, #1
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f8e7 	bl	8002f6c <HAL_DMA2D_CLUTLoading_Abort>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e02a      	b.n	8002dfe <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	223f      	movs	r2, #63	; 0x3f
 8002db6:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7fe fb8f 	bl	8001504 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800

08002e0c <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_DMA2D_Start_IT+0x1c>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e020      	b.n	8002e6a <HAL_DMA2D_Start_IT+0x5e>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68b9      	ldr	r1, [r7, #8]
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 fa84 	bl	8003350 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8002e56:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b086      	sub	sp, #24
 8002e76:	af02      	add	r7, sp, #8
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	607a      	str	r2, [r7, #4]
 8002e7e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_DMA2D_BlendingStart_IT+0x1c>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e024      	b.n	8002ed8 <HAL_DMA2D_BlendingStart_IT+0x66>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2202      	movs	r2, #2
 8002e9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	68b9      	ldr	r1, [r7, #8]
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 fa4d 	bl	8003350 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8002ec4:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f042 0201 	orr.w	r2, r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 0205 	bic.w	r2, r3, #5
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0204 	orr.w	r2, r2, #4
 8002efa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002efc:	f7ff fbba 	bl	8002674 <HAL_GetTick>
 8002f00:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002f02:	e017      	b.n	8002f34 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8002f04:	f7ff fbb6 	bl	8002674 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f12:	d90f      	bls.n	8002f34 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f18:	f043 0220 	orr.w	r2, r3, #32
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2203      	movs	r2, #3
 8002f24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e017      	b.n	8002f64 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1e0      	bne.n	8002f04 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8002f50:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	3324      	adds	r3, #36	; 0x24
 8002f7c:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 0204 	orr.w	r2, r2, #4
 8002f8c:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d103      	bne.n	8002f9c <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	331c      	adds	r3, #28
 8002f9a:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8002f9c:	f7ff fb6a 	bl	8002674 <HAL_GetTick>
 8002fa0:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8002fa2:	e017      	b.n	8002fd4 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8002fa4:	f7ff fb66 	bl	8002674 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fb2:	d90f      	bls.n	8002fd4 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb8:	f043 0220 	orr.w	r2, r3, #32
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e016      	b.n	8003002 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1e1      	bne.n	8002fa4 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8002fee:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d026      	beq.n	800307a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003032:	2b00      	cmp	r3, #0
 8003034:	d021      	beq.n	800307a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003044:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304a:	f043 0201 	orr.w	r2, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2201      	movs	r2, #1
 8003058:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2204      	movs	r2, #4
 800305e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f003 0320 	and.w	r3, r3, #32
 8003080:	2b00      	cmp	r3, #0
 8003082:	d026      	beq.n	80030d2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d021      	beq.n	80030d2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800309c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2220      	movs	r2, #32
 80030a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030aa:	f043 0202 	orr.w	r2, r3, #2
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2204      	movs	r2, #4
 80030b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d026      	beq.n	800312a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d021      	beq.n	800312a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030f4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2208      	movs	r2, #8
 80030fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003102:	f043 0204 	orr.w	r2, r3, #4
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2204      	movs	r2, #4
 800310e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d013      	beq.n	800315c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00e      	beq.n	800315c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800314c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2204      	movs	r2, #4
 8003154:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f853 	bl	8003202 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d024      	beq.n	80031b0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800316c:	2b00      	cmp	r3, #0
 800316e:	d01f      	beq.n	80031b0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800317e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2202      	movs	r2, #2
 8003186:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d01f      	beq.n	80031fa <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d01a      	beq.n	80031fa <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031d2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2210      	movs	r2, #16
 80031da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f80e 	bl	8003216 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80031fa:	bf00      	nop
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
	...

0800322c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800322c:	b480      	push	{r7}
 800322e:	b087      	sub	sp, #28
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_DMA2D_ConfigLayer+0x20>
 8003248:	2302      	movs	r3, #2
 800324a:	e079      	b.n	8003340 <HAL_DMA2D_ConfigLayer+0x114>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	3318      	adds	r3, #24
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	041b      	lsls	r3, r3, #16
 8003272:	4313      	orrs	r3, r2
 8003274:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003276:	4b35      	ldr	r3, [pc, #212]	; (800334c <HAL_DMA2D_ConfigLayer+0x120>)
 8003278:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b0a      	cmp	r3, #10
 8003280:	d003      	beq.n	800328a <HAL_DMA2D_ConfigLayer+0x5e>
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b09      	cmp	r3, #9
 8003288:	d107      	bne.n	800329a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	4313      	orrs	r3, r2
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	e005      	b.n	80032a6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	061b      	lsls	r3, r3, #24
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d120      	bne.n	80032ee <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	43db      	mvns	r3, r3
 80032b6:	ea02 0103 	and.w	r1, r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	6812      	ldr	r2, [r2, #0]
 80032cc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b0a      	cmp	r3, #10
 80032d4:	d003      	beq.n	80032de <HAL_DMA2D_ConfigLayer+0xb2>
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b09      	cmp	r3, #9
 80032dc:	d127      	bne.n	800332e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80032ea:	629a      	str	r2, [r3, #40]	; 0x28
 80032ec:	e01f      	b.n	800332e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	43db      	mvns	r3, r3
 80032f8:	ea02 0103 	and.w	r1, r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	430a      	orrs	r2, r1
 8003304:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	6812      	ldr	r2, [r2, #0]
 800330e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b0a      	cmp	r3, #10
 8003316:	d003      	beq.n	8003320 <HAL_DMA2D_ConfigLayer+0xf4>
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b09      	cmp	r3, #9
 800331e:	d106      	bne.n	800332e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800332c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	371c      	adds	r7, #28
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	ff03000f 	.word	0xff03000f

08003350 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003350:	b480      	push	{r7}
 8003352:	b08b      	sub	sp, #44	; 0x2c
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003364:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	041a      	lsls	r2, r3, #16
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336e:	431a      	orrs	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003388:	d174      	bne.n	8003474 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003390:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003398:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80033a0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d108      	bne.n	80033c2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	431a      	orrs	r2, r3
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
 80033c0:	e053      	b.n	800346a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d106      	bne.n	80033d8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
 80033d6:	e048      	b.n	800346a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d111      	bne.n	8003404 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	0cdb      	lsrs	r3, r3, #19
 80033e4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	0a9b      	lsrs	r3, r3, #10
 80033ea:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	08db      	lsrs	r3, r3, #3
 80033f0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	02db      	lsls	r3, r3, #11
 80033fa:	4313      	orrs	r3, r2
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
 8003402:	e032      	b.n	800346a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b03      	cmp	r3, #3
 800340a:	d117      	bne.n	800343c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	0fdb      	lsrs	r3, r3, #31
 8003410:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	0cdb      	lsrs	r3, r3, #19
 8003416:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	0adb      	lsrs	r3, r3, #11
 800341c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	08db      	lsrs	r3, r3, #3
 8003422:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	029b      	lsls	r3, r3, #10
 800342c:	431a      	orrs	r2, r3
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	03db      	lsls	r3, r3, #15
 8003432:	4313      	orrs	r3, r2
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	4313      	orrs	r3, r2
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
 800343a:	e016      	b.n	800346a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	0f1b      	lsrs	r3, r3, #28
 8003440:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	0d1b      	lsrs	r3, r3, #20
 8003446:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	0b1b      	lsrs	r3, r3, #12
 800344c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	091b      	lsrs	r3, r3, #4
 8003452:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	011a      	lsls	r2, r3, #4
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	431a      	orrs	r2, r3
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	031b      	lsls	r3, r3, #12
 8003462:	4313      	orrs	r3, r2
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	4313      	orrs	r3, r2
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003470:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003472:	e003      	b.n	800347c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	60da      	str	r2, [r3, #12]
}
 800347c:	bf00      	nop
 800347e:	372c      	adds	r7, #44	; 0x2c
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003488:	b480      	push	{r7}
 800348a:	b089      	sub	sp, #36	; 0x24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003492:	2300      	movs	r3, #0
 8003494:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800349a:	2300      	movs	r3, #0
 800349c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800349e:	2300      	movs	r3, #0
 80034a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80034a2:	2300      	movs	r3, #0
 80034a4:	61fb      	str	r3, [r7, #28]
 80034a6:	e175      	b.n	8003794 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80034a8:	2201      	movs	r2, #1
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4013      	ands	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	f040 8164 	bne.w	800378e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d003      	beq.n	80034d6 <HAL_GPIO_Init+0x4e>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b12      	cmp	r3, #18
 80034d4:	d123      	bne.n	800351e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	08da      	lsrs	r2, r3, #3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3208      	adds	r2, #8
 80034de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	220f      	movs	r2, #15
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4013      	ands	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4313      	orrs	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	08da      	lsrs	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3208      	adds	r2, #8
 8003518:	69b9      	ldr	r1, [r7, #24]
 800351a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	2203      	movs	r2, #3
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43db      	mvns	r3, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4013      	ands	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f003 0203 	and.w	r2, r3, #3
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d00b      	beq.n	8003572 <HAL_GPIO_Init+0xea>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d007      	beq.n	8003572 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003566:	2b11      	cmp	r3, #17
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b12      	cmp	r3, #18
 8003570:	d130      	bne.n	80035d4 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	2203      	movs	r2, #3
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43db      	mvns	r3, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4013      	ands	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035a8:	2201      	movs	r2, #1
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f003 0201 	and.w	r2, r3, #1
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	2203      	movs	r2, #3
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	43db      	mvns	r3, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4013      	ands	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 80be 	beq.w	800378e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003612:	4b65      	ldr	r3, [pc, #404]	; (80037a8 <HAL_GPIO_Init+0x320>)
 8003614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003616:	4a64      	ldr	r2, [pc, #400]	; (80037a8 <HAL_GPIO_Init+0x320>)
 8003618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800361c:	6453      	str	r3, [r2, #68]	; 0x44
 800361e:	4b62      	ldr	r3, [pc, #392]	; (80037a8 <HAL_GPIO_Init+0x320>)
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800362a:	4a60      	ldr	r2, [pc, #384]	; (80037ac <HAL_GPIO_Init+0x324>)
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	089b      	lsrs	r3, r3, #2
 8003630:	3302      	adds	r3, #2
 8003632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	220f      	movs	r2, #15
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43db      	mvns	r3, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4013      	ands	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a57      	ldr	r2, [pc, #348]	; (80037b0 <HAL_GPIO_Init+0x328>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d037      	beq.n	80036c6 <HAL_GPIO_Init+0x23e>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a56      	ldr	r2, [pc, #344]	; (80037b4 <HAL_GPIO_Init+0x32c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d031      	beq.n	80036c2 <HAL_GPIO_Init+0x23a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a55      	ldr	r2, [pc, #340]	; (80037b8 <HAL_GPIO_Init+0x330>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d02b      	beq.n	80036be <HAL_GPIO_Init+0x236>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a54      	ldr	r2, [pc, #336]	; (80037bc <HAL_GPIO_Init+0x334>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d025      	beq.n	80036ba <HAL_GPIO_Init+0x232>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a53      	ldr	r2, [pc, #332]	; (80037c0 <HAL_GPIO_Init+0x338>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d01f      	beq.n	80036b6 <HAL_GPIO_Init+0x22e>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a52      	ldr	r2, [pc, #328]	; (80037c4 <HAL_GPIO_Init+0x33c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d019      	beq.n	80036b2 <HAL_GPIO_Init+0x22a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a51      	ldr	r2, [pc, #324]	; (80037c8 <HAL_GPIO_Init+0x340>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d013      	beq.n	80036ae <HAL_GPIO_Init+0x226>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a50      	ldr	r2, [pc, #320]	; (80037cc <HAL_GPIO_Init+0x344>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00d      	beq.n	80036aa <HAL_GPIO_Init+0x222>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a4f      	ldr	r2, [pc, #316]	; (80037d0 <HAL_GPIO_Init+0x348>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d007      	beq.n	80036a6 <HAL_GPIO_Init+0x21e>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a4e      	ldr	r2, [pc, #312]	; (80037d4 <HAL_GPIO_Init+0x34c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d101      	bne.n	80036a2 <HAL_GPIO_Init+0x21a>
 800369e:	2309      	movs	r3, #9
 80036a0:	e012      	b.n	80036c8 <HAL_GPIO_Init+0x240>
 80036a2:	230a      	movs	r3, #10
 80036a4:	e010      	b.n	80036c8 <HAL_GPIO_Init+0x240>
 80036a6:	2308      	movs	r3, #8
 80036a8:	e00e      	b.n	80036c8 <HAL_GPIO_Init+0x240>
 80036aa:	2307      	movs	r3, #7
 80036ac:	e00c      	b.n	80036c8 <HAL_GPIO_Init+0x240>
 80036ae:	2306      	movs	r3, #6
 80036b0:	e00a      	b.n	80036c8 <HAL_GPIO_Init+0x240>
 80036b2:	2305      	movs	r3, #5
 80036b4:	e008      	b.n	80036c8 <HAL_GPIO_Init+0x240>
 80036b6:	2304      	movs	r3, #4
 80036b8:	e006      	b.n	80036c8 <HAL_GPIO_Init+0x240>
 80036ba:	2303      	movs	r3, #3
 80036bc:	e004      	b.n	80036c8 <HAL_GPIO_Init+0x240>
 80036be:	2302      	movs	r3, #2
 80036c0:	e002      	b.n	80036c8 <HAL_GPIO_Init+0x240>
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <HAL_GPIO_Init+0x240>
 80036c6:	2300      	movs	r3, #0
 80036c8:	69fa      	ldr	r2, [r7, #28]
 80036ca:	f002 0203 	and.w	r2, r2, #3
 80036ce:	0092      	lsls	r2, r2, #2
 80036d0:	4093      	lsls	r3, r2
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80036d8:	4934      	ldr	r1, [pc, #208]	; (80037ac <HAL_GPIO_Init+0x324>)
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	089b      	lsrs	r3, r3, #2
 80036de:	3302      	adds	r3, #2
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036e6:	4b3c      	ldr	r3, [pc, #240]	; (80037d8 <HAL_GPIO_Init+0x350>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	43db      	mvns	r3, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4013      	ands	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4313      	orrs	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800370a:	4a33      	ldr	r2, [pc, #204]	; (80037d8 <HAL_GPIO_Init+0x350>)
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003710:	4b31      	ldr	r3, [pc, #196]	; (80037d8 <HAL_GPIO_Init+0x350>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	43db      	mvns	r3, r3
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	4013      	ands	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003734:	4a28      	ldr	r2, [pc, #160]	; (80037d8 <HAL_GPIO_Init+0x350>)
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800373a:	4b27      	ldr	r3, [pc, #156]	; (80037d8 <HAL_GPIO_Init+0x350>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	43db      	mvns	r3, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4013      	ands	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	4313      	orrs	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800375e:	4a1e      	ldr	r2, [pc, #120]	; (80037d8 <HAL_GPIO_Init+0x350>)
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003764:	4b1c      	ldr	r3, [pc, #112]	; (80037d8 <HAL_GPIO_Init+0x350>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	43db      	mvns	r3, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4013      	ands	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	4313      	orrs	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003788:	4a13      	ldr	r2, [pc, #76]	; (80037d8 <HAL_GPIO_Init+0x350>)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	3301      	adds	r3, #1
 8003792:	61fb      	str	r3, [r7, #28]
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	2b0f      	cmp	r3, #15
 8003798:	f67f ae86 	bls.w	80034a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800379c:	bf00      	nop
 800379e:	3724      	adds	r7, #36	; 0x24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40013800 	.word	0x40013800
 80037b0:	40020000 	.word	0x40020000
 80037b4:	40020400 	.word	0x40020400
 80037b8:	40020800 	.word	0x40020800
 80037bc:	40020c00 	.word	0x40020c00
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40021400 	.word	0x40021400
 80037c8:	40021800 	.word	0x40021800
 80037cc:	40021c00 	.word	0x40021c00
 80037d0:	40022000 	.word	0x40022000
 80037d4:	40022400 	.word	0x40022400
 80037d8:	40013c00 	.word	0x40013c00

080037dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80037e6:	2300      	movs	r3, #0
 80037e8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80037ee:	2300      	movs	r3, #0
 80037f0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	e0d9      	b.n	80039ac <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80037f8:	2201      	movs	r2, #1
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	4013      	ands	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	429a      	cmp	r2, r3
 8003810:	f040 80c9 	bne.w	80039a6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003814:	4a6a      	ldr	r2, [pc, #424]	; (80039c0 <HAL_GPIO_DeInit+0x1e4>)
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	089b      	lsrs	r3, r3, #2
 800381a:	3302      	adds	r3, #2
 800381c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003820:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f003 0303 	and.w	r3, r3, #3
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	220f      	movs	r2, #15
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	4013      	ands	r3, r2
 8003834:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a62      	ldr	r2, [pc, #392]	; (80039c4 <HAL_GPIO_DeInit+0x1e8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d037      	beq.n	80038ae <HAL_GPIO_DeInit+0xd2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a61      	ldr	r2, [pc, #388]	; (80039c8 <HAL_GPIO_DeInit+0x1ec>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d031      	beq.n	80038aa <HAL_GPIO_DeInit+0xce>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a60      	ldr	r2, [pc, #384]	; (80039cc <HAL_GPIO_DeInit+0x1f0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d02b      	beq.n	80038a6 <HAL_GPIO_DeInit+0xca>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a5f      	ldr	r2, [pc, #380]	; (80039d0 <HAL_GPIO_DeInit+0x1f4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d025      	beq.n	80038a2 <HAL_GPIO_DeInit+0xc6>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a5e      	ldr	r2, [pc, #376]	; (80039d4 <HAL_GPIO_DeInit+0x1f8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d01f      	beq.n	800389e <HAL_GPIO_DeInit+0xc2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a5d      	ldr	r2, [pc, #372]	; (80039d8 <HAL_GPIO_DeInit+0x1fc>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d019      	beq.n	800389a <HAL_GPIO_DeInit+0xbe>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a5c      	ldr	r2, [pc, #368]	; (80039dc <HAL_GPIO_DeInit+0x200>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d013      	beq.n	8003896 <HAL_GPIO_DeInit+0xba>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a5b      	ldr	r2, [pc, #364]	; (80039e0 <HAL_GPIO_DeInit+0x204>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00d      	beq.n	8003892 <HAL_GPIO_DeInit+0xb6>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a5a      	ldr	r2, [pc, #360]	; (80039e4 <HAL_GPIO_DeInit+0x208>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d007      	beq.n	800388e <HAL_GPIO_DeInit+0xb2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a59      	ldr	r2, [pc, #356]	; (80039e8 <HAL_GPIO_DeInit+0x20c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d101      	bne.n	800388a <HAL_GPIO_DeInit+0xae>
 8003886:	2309      	movs	r3, #9
 8003888:	e012      	b.n	80038b0 <HAL_GPIO_DeInit+0xd4>
 800388a:	230a      	movs	r3, #10
 800388c:	e010      	b.n	80038b0 <HAL_GPIO_DeInit+0xd4>
 800388e:	2308      	movs	r3, #8
 8003890:	e00e      	b.n	80038b0 <HAL_GPIO_DeInit+0xd4>
 8003892:	2307      	movs	r3, #7
 8003894:	e00c      	b.n	80038b0 <HAL_GPIO_DeInit+0xd4>
 8003896:	2306      	movs	r3, #6
 8003898:	e00a      	b.n	80038b0 <HAL_GPIO_DeInit+0xd4>
 800389a:	2305      	movs	r3, #5
 800389c:	e008      	b.n	80038b0 <HAL_GPIO_DeInit+0xd4>
 800389e:	2304      	movs	r3, #4
 80038a0:	e006      	b.n	80038b0 <HAL_GPIO_DeInit+0xd4>
 80038a2:	2303      	movs	r3, #3
 80038a4:	e004      	b.n	80038b0 <HAL_GPIO_DeInit+0xd4>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e002      	b.n	80038b0 <HAL_GPIO_DeInit+0xd4>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <HAL_GPIO_DeInit+0xd4>
 80038ae:	2300      	movs	r3, #0
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	f002 0203 	and.w	r2, r2, #3
 80038b6:	0092      	lsls	r2, r2, #2
 80038b8:	4093      	lsls	r3, r2
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d132      	bne.n	8003926 <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	220f      	movs	r2, #15
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80038d0:	4a3b      	ldr	r2, [pc, #236]	; (80039c0 <HAL_GPIO_DeInit+0x1e4>)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	089b      	lsrs	r3, r3, #2
 80038d6:	3302      	adds	r3, #2
 80038d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	43da      	mvns	r2, r3
 80038e0:	4837      	ldr	r0, [pc, #220]	; (80039c0 <HAL_GPIO_DeInit+0x1e4>)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	089b      	lsrs	r3, r3, #2
 80038e6:	400a      	ands	r2, r1
 80038e8:	3302      	adds	r3, #2
 80038ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80038ee:	4b3f      	ldr	r3, [pc, #252]	; (80039ec <HAL_GPIO_DeInit+0x210>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	43db      	mvns	r3, r3
 80038f6:	493d      	ldr	r1, [pc, #244]	; (80039ec <HAL_GPIO_DeInit+0x210>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80038fc:	4b3b      	ldr	r3, [pc, #236]	; (80039ec <HAL_GPIO_DeInit+0x210>)
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	43db      	mvns	r3, r3
 8003904:	4939      	ldr	r1, [pc, #228]	; (80039ec <HAL_GPIO_DeInit+0x210>)
 8003906:	4013      	ands	r3, r2
 8003908:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800390a:	4b38      	ldr	r3, [pc, #224]	; (80039ec <HAL_GPIO_DeInit+0x210>)
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	43db      	mvns	r3, r3
 8003912:	4936      	ldr	r1, [pc, #216]	; (80039ec <HAL_GPIO_DeInit+0x210>)
 8003914:	4013      	ands	r3, r2
 8003916:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003918:	4b34      	ldr	r3, [pc, #208]	; (80039ec <HAL_GPIO_DeInit+0x210>)
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	43db      	mvns	r3, r3
 8003920:	4932      	ldr	r1, [pc, #200]	; (80039ec <HAL_GPIO_DeInit+0x210>)
 8003922:	4013      	ands	r3, r2
 8003924:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	2103      	movs	r1, #3
 8003930:	fa01 f303 	lsl.w	r3, r1, r3
 8003934:	43db      	mvns	r3, r3
 8003936:	401a      	ands	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	08da      	lsrs	r2, r3, #3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3208      	adds	r2, #8
 8003944:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	220f      	movs	r2, #15
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43db      	mvns	r3, r3
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	08d2      	lsrs	r2, r2, #3
 800395c:	4019      	ands	r1, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3208      	adds	r2, #8
 8003962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	2103      	movs	r1, #3
 8003970:	fa01 f303 	lsl.w	r3, r1, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	401a      	ands	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	2101      	movs	r1, #1
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	fa01 f303 	lsl.w	r3, r1, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	401a      	ands	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	2103      	movs	r1, #3
 800399a:	fa01 f303 	lsl.w	r3, r1, r3
 800399e:	43db      	mvns	r3, r3
 80039a0:	401a      	ands	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	3301      	adds	r3, #1
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2b0f      	cmp	r3, #15
 80039b0:	f67f af22 	bls.w	80037f8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80039b4:	bf00      	nop
 80039b6:	371c      	adds	r7, #28
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	40013800 	.word	0x40013800
 80039c4:	40020000 	.word	0x40020000
 80039c8:	40020400 	.word	0x40020400
 80039cc:	40020800 	.word	0x40020800
 80039d0:	40020c00 	.word	0x40020c00
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40021400 	.word	0x40021400
 80039dc:	40021800 	.word	0x40021800
 80039e0:	40021c00 	.word	0x40021c00
 80039e4:	40022000 	.word	0x40022000
 80039e8:	40022400 	.word	0x40022400
 80039ec:	40013c00 	.word	0x40013c00

080039f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	807b      	strh	r3, [r7, #2]
 80039fc:	4613      	mov	r3, r2
 80039fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a00:	787b      	ldrb	r3, [r7, #1]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a06:	887a      	ldrh	r2, [r7, #2]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003a0c:	e003      	b.n	8003a16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003a0e:	887b      	ldrh	r3, [r7, #2]
 8003a10:	041a      	lsls	r2, r3, #16
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	619a      	str	r2, [r3, #24]
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
	...

08003a24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e07f      	b.n	8003b36 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fd fd74 	bl	8001538 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2224      	movs	r2, #36	; 0x24
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0201 	bic.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d107      	bne.n	8003a9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a9a:	609a      	str	r2, [r3, #8]
 8003a9c:	e006      	b.n	8003aac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003aaa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d104      	bne.n	8003abe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003abc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6859      	ldr	r1, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	4b1d      	ldr	r3, [pc, #116]	; (8003b40 <HAL_I2C_Init+0x11c>)
 8003aca:	430b      	orrs	r3, r1
 8003acc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003adc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691a      	ldr	r2, [r3, #16]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	ea42 0103 	orr.w	r1, r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	021a      	lsls	r2, r3, #8
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69d9      	ldr	r1, [r3, #28]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1a      	ldr	r2, [r3, #32]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	02008000 	.word	0x02008000

08003b44 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e021      	b.n	8003b9a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2224      	movs	r2, #36	; 0x24
 8003b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fd fd26 	bl	80015c0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	4608      	mov	r0, r1
 8003bae:	4611      	mov	r1, r2
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	817b      	strh	r3, [r7, #10]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	813b      	strh	r3, [r7, #8]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b20      	cmp	r3, #32
 8003bc8:	f040 80f9 	bne.w	8003dbe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <HAL_I2C_Mem_Write+0x34>
 8003bd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d105      	bne.n	8003be4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bde:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0ed      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_I2C_Mem_Write+0x4e>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e0e6      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x21c>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bfa:	f7fe fd3b 	bl	8002674 <HAL_GetTick>
 8003bfe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	2319      	movs	r3, #25
 8003c06:	2201      	movs	r2, #1
 8003c08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 fac3 	bl	8004198 <I2C_WaitOnFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0d1      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2221      	movs	r2, #33	; 0x21
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2240      	movs	r2, #64	; 0x40
 8003c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a3a      	ldr	r2, [r7, #32]
 8003c36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c44:	88f8      	ldrh	r0, [r7, #6]
 8003c46:	893a      	ldrh	r2, [r7, #8]
 8003c48:	8979      	ldrh	r1, [r7, #10]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	9301      	str	r3, [sp, #4]
 8003c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	4603      	mov	r3, r0
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f9d3 	bl	8004000 <I2C_RequestMemoryWrite>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0a9      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2bff      	cmp	r3, #255	; 0xff
 8003c74:	d90e      	bls.n	8003c94 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	22ff      	movs	r2, #255	; 0xff
 8003c7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	8979      	ldrh	r1, [r7, #10]
 8003c84:	2300      	movs	r3, #0
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 fba5 	bl	80043dc <I2C_TransferConfig>
 8003c92:	e00f      	b.n	8003cb4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	8979      	ldrh	r1, [r7, #10]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 fb94 	bl	80043dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 faad 	bl	8004218 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e07b      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	781a      	ldrb	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d034      	beq.n	8003d6c <HAL_I2C_Mem_Write+0x1c8>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d130      	bne.n	8003d6c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d10:	2200      	movs	r2, #0
 8003d12:	2180      	movs	r1, #128	; 0x80
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 fa3f 	bl	8004198 <I2C_WaitOnFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e04d      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2bff      	cmp	r3, #255	; 0xff
 8003d2c:	d90e      	bls.n	8003d4c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	22ff      	movs	r2, #255	; 0xff
 8003d32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	8979      	ldrh	r1, [r7, #10]
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 fb49 	bl	80043dc <I2C_TransferConfig>
 8003d4a:	e00f      	b.n	8003d6c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	8979      	ldrh	r1, [r7, #10]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 fb38 	bl	80043dc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d19e      	bne.n	8003cb4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 fa8c 	bl	8004298 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e01a      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6859      	ldr	r1, [r3, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <HAL_I2C_Mem_Write+0x224>)
 8003d9e:	400b      	ands	r3, r1
 8003da0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e000      	b.n	8003dc0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003dbe:	2302      	movs	r3, #2
  }
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	fe00e800 	.word	0xfe00e800

08003dcc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	4608      	mov	r0, r1
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	461a      	mov	r2, r3
 8003dda:	4603      	mov	r3, r0
 8003ddc:	817b      	strh	r3, [r7, #10]
 8003dde:	460b      	mov	r3, r1
 8003de0:	813b      	strh	r3, [r7, #8]
 8003de2:	4613      	mov	r3, r2
 8003de4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	f040 80fd 	bne.w	8003fee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <HAL_I2C_Mem_Read+0x34>
 8003dfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d105      	bne.n	8003e0c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e06:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0f1      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d101      	bne.n	8003e1a <HAL_I2C_Mem_Read+0x4e>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e0ea      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x224>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e22:	f7fe fc27 	bl	8002674 <HAL_GetTick>
 8003e26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	2319      	movs	r3, #25
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f9af 	bl	8004198 <I2C_WaitOnFlagUntilTimeout>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e0d5      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2222      	movs	r2, #34	; 0x22
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2240      	movs	r2, #64	; 0x40
 8003e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a3a      	ldr	r2, [r7, #32]
 8003e5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e6c:	88f8      	ldrh	r0, [r7, #6]
 8003e6e:	893a      	ldrh	r2, [r7, #8]
 8003e70:	8979      	ldrh	r1, [r7, #10]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	9301      	str	r3, [sp, #4]
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 f913 	bl	80040a8 <I2C_RequestMemoryRead>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0ad      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2bff      	cmp	r3, #255	; 0xff
 8003e9c:	d90e      	bls.n	8003ebc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	22ff      	movs	r2, #255	; 0xff
 8003ea2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	8979      	ldrh	r1, [r7, #10]
 8003eac:	4b52      	ldr	r3, [pc, #328]	; (8003ff8 <HAL_I2C_Mem_Read+0x22c>)
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 fa91 	bl	80043dc <I2C_TransferConfig>
 8003eba:	e00f      	b.n	8003edc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	8979      	ldrh	r1, [r7, #10]
 8003ece:	4b4a      	ldr	r3, [pc, #296]	; (8003ff8 <HAL_I2C_Mem_Read+0x22c>)
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 fa80 	bl	80043dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2104      	movs	r1, #4
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 f956 	bl	8004198 <I2C_WaitOnFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e07c      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d034      	beq.n	8003f9c <HAL_I2C_Mem_Read+0x1d0>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d130      	bne.n	8003f9c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f40:	2200      	movs	r2, #0
 8003f42:	2180      	movs	r1, #128	; 0x80
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 f927 	bl	8004198 <I2C_WaitOnFlagUntilTimeout>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e04d      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2bff      	cmp	r3, #255	; 0xff
 8003f5c:	d90e      	bls.n	8003f7c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	22ff      	movs	r2, #255	; 0xff
 8003f62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	8979      	ldrh	r1, [r7, #10]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 fa31 	bl	80043dc <I2C_TransferConfig>
 8003f7a:	e00f      	b.n	8003f9c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	8979      	ldrh	r1, [r7, #10]
 8003f8e:	2300      	movs	r3, #0
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 fa20 	bl	80043dc <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d19a      	bne.n	8003edc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 f974 	bl	8004298 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e01a      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6859      	ldr	r1, [r3, #4]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <HAL_I2C_Mem_Read+0x230>)
 8003fce:	400b      	ands	r3, r1
 8003fd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e000      	b.n	8003ff0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003fee:	2302      	movs	r3, #2
  }
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	80002400 	.word	0x80002400
 8003ffc:	fe00e800 	.word	0xfe00e800

08004000 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af02      	add	r7, sp, #8
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	4608      	mov	r0, r1
 800400a:	4611      	mov	r1, r2
 800400c:	461a      	mov	r2, r3
 800400e:	4603      	mov	r3, r0
 8004010:	817b      	strh	r3, [r7, #10]
 8004012:	460b      	mov	r3, r1
 8004014:	813b      	strh	r3, [r7, #8]
 8004016:	4613      	mov	r3, r2
 8004018:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	b2da      	uxtb	r2, r3
 800401e:	8979      	ldrh	r1, [r7, #10]
 8004020:	4b20      	ldr	r3, [pc, #128]	; (80040a4 <I2C_RequestMemoryWrite+0xa4>)
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 f9d7 	bl	80043dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800402e:	69fa      	ldr	r2, [r7, #28]
 8004030:	69b9      	ldr	r1, [r7, #24]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f8f0 	bl	8004218 <I2C_WaitOnTXISFlagUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e02c      	b.n	800409c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004042:	88fb      	ldrh	r3, [r7, #6]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d105      	bne.n	8004054 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004048:	893b      	ldrh	r3, [r7, #8]
 800404a:	b2da      	uxtb	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	629a      	str	r2, [r3, #40]	; 0x28
 8004052:	e015      	b.n	8004080 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004054:	893b      	ldrh	r3, [r7, #8]
 8004056:	0a1b      	lsrs	r3, r3, #8
 8004058:	b29b      	uxth	r3, r3
 800405a:	b2da      	uxtb	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004062:	69fa      	ldr	r2, [r7, #28]
 8004064:	69b9      	ldr	r1, [r7, #24]
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 f8d6 	bl	8004218 <I2C_WaitOnTXISFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e012      	b.n	800409c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004076:	893b      	ldrh	r3, [r7, #8]
 8004078:	b2da      	uxtb	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	2200      	movs	r2, #0
 8004088:	2180      	movs	r1, #128	; 0x80
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 f884 	bl	8004198 <I2C_WaitOnFlagUntilTimeout>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	80002000 	.word	0x80002000

080040a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	4608      	mov	r0, r1
 80040b2:	4611      	mov	r1, r2
 80040b4:	461a      	mov	r2, r3
 80040b6:	4603      	mov	r3, r0
 80040b8:	817b      	strh	r3, [r7, #10]
 80040ba:	460b      	mov	r3, r1
 80040bc:	813b      	strh	r3, [r7, #8]
 80040be:	4613      	mov	r3, r2
 80040c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80040c2:	88fb      	ldrh	r3, [r7, #6]
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	8979      	ldrh	r1, [r7, #10]
 80040c8:	4b20      	ldr	r3, [pc, #128]	; (800414c <I2C_RequestMemoryRead+0xa4>)
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	2300      	movs	r3, #0
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 f984 	bl	80043dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040d4:	69fa      	ldr	r2, [r7, #28]
 80040d6:	69b9      	ldr	r1, [r7, #24]
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f89d 	bl	8004218 <I2C_WaitOnTXISFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e02c      	b.n	8004142 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040e8:	88fb      	ldrh	r3, [r7, #6]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d105      	bne.n	80040fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040ee:	893b      	ldrh	r3, [r7, #8]
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	629a      	str	r2, [r3, #40]	; 0x28
 80040f8:	e015      	b.n	8004126 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040fa:	893b      	ldrh	r3, [r7, #8]
 80040fc:	0a1b      	lsrs	r3, r3, #8
 80040fe:	b29b      	uxth	r3, r3
 8004100:	b2da      	uxtb	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	69b9      	ldr	r1, [r7, #24]
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 f883 	bl	8004218 <I2C_WaitOnTXISFlagUntilTimeout>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e012      	b.n	8004142 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800411c:	893b      	ldrh	r3, [r7, #8]
 800411e:	b2da      	uxtb	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	2200      	movs	r2, #0
 800412e:	2140      	movs	r1, #64	; 0x40
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 f831 	bl	8004198 <I2C_WaitOnFlagUntilTimeout>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e000      	b.n	8004142 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	80002000 	.word	0x80002000

08004150 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b02      	cmp	r3, #2
 8004164:	d103      	bne.n	800416e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2200      	movs	r2, #0
 800416c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b01      	cmp	r3, #1
 800417a:	d007      	beq.n	800418c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699a      	ldr	r2, [r3, #24]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	619a      	str	r2, [r3, #24]
  }
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	4613      	mov	r3, r2
 80041a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041a8:	e022      	b.n	80041f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041b0:	d01e      	beq.n	80041f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b2:	f7fe fa5f 	bl	8002674 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d302      	bcc.n	80041c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d113      	bne.n	80041f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041cc:	f043 0220 	orr.w	r2, r3, #32
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e00f      	b.n	8004210 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	4013      	ands	r3, r2
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	bf0c      	ite	eq
 8004200:	2301      	moveq	r3, #1
 8004202:	2300      	movne	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	461a      	mov	r2, r3
 8004208:	79fb      	ldrb	r3, [r7, #7]
 800420a:	429a      	cmp	r2, r3
 800420c:	d0cd      	beq.n	80041aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004224:	e02c      	b.n	8004280 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f870 	bl	8004310 <I2C_IsAcknowledgeFailed>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e02a      	b.n	8004290 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004240:	d01e      	beq.n	8004280 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004242:	f7fe fa17 	bl	8002674 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	429a      	cmp	r2, r3
 8004250:	d302      	bcc.n	8004258 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d113      	bne.n	8004280 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425c:	f043 0220 	orr.w	r2, r3, #32
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e007      	b.n	8004290 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b02      	cmp	r3, #2
 800428c:	d1cb      	bne.n	8004226 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042a4:	e028      	b.n	80042f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	68b9      	ldr	r1, [r7, #8]
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 f830 	bl	8004310 <I2C_IsAcknowledgeFailed>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e026      	b.n	8004308 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ba:	f7fe f9db 	bl	8002674 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d302      	bcc.n	80042d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d113      	bne.n	80042f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d4:	f043 0220 	orr.w	r2, r3, #32
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e007      	b.n	8004308 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b20      	cmp	r3, #32
 8004304:	d1cf      	bne.n	80042a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f003 0310 	and.w	r3, r3, #16
 8004326:	2b10      	cmp	r3, #16
 8004328:	d151      	bne.n	80043ce <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800432a:	e022      	b.n	8004372 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004332:	d01e      	beq.n	8004372 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004334:	f7fe f99e 	bl	8002674 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	429a      	cmp	r2, r3
 8004342:	d302      	bcc.n	800434a <I2C_IsAcknowledgeFailed+0x3a>
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d113      	bne.n	8004372 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434e:	f043 0220 	orr.w	r2, r3, #32
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2220      	movs	r2, #32
 800435a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e02e      	b.n	80043d0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b20      	cmp	r3, #32
 800437e:	d1d5      	bne.n	800432c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2210      	movs	r2, #16
 8004386:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2220      	movs	r2, #32
 800438e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f7ff fedd 	bl	8004150 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6859      	ldr	r1, [r3, #4]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <I2C_IsAcknowledgeFailed+0xc8>)
 80043a2:	400b      	ands	r3, r1
 80043a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043aa:	f043 0204 	orr.w	r2, r3, #4
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	fe00e800 	.word	0xfe00e800

080043dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	607b      	str	r3, [r7, #4]
 80043e6:	460b      	mov	r3, r1
 80043e8:	817b      	strh	r3, [r7, #10]
 80043ea:	4613      	mov	r3, r2
 80043ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	0d5b      	lsrs	r3, r3, #21
 80043f8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80043fc:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <I2C_TransferConfig+0x58>)
 80043fe:	430b      	orrs	r3, r1
 8004400:	43db      	mvns	r3, r3
 8004402:	ea02 0103 	and.w	r1, r2, r3
 8004406:	897b      	ldrh	r3, [r7, #10]
 8004408:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800440c:	7a7b      	ldrb	r3, [r7, #9]
 800440e:	041b      	lsls	r3, r3, #16
 8004410:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	431a      	orrs	r2, r3
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	431a      	orrs	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004426:	bf00      	nop
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	03ff63ff 	.word	0x03ff63ff

08004438 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b20      	cmp	r3, #32
 800444c:	d138      	bne.n	80044c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004458:	2302      	movs	r3, #2
 800445a:	e032      	b.n	80044c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2224      	movs	r2, #36	; 0x24
 8004468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 0201 	bic.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800448a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6819      	ldr	r1, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044bc:	2300      	movs	r3, #0
 80044be:	e000      	b.n	80044c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044c0:	2302      	movs	r3, #2
  }
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b085      	sub	sp, #20
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b20      	cmp	r3, #32
 80044e2:	d139      	bne.n	8004558 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e033      	b.n	800455a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2224      	movs	r2, #36	; 0x24
 80044fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0201 	bic.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004520:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	021b      	lsls	r3, r3, #8
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4313      	orrs	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0201 	orr.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	e000      	b.n	800455a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004558:	2302      	movs	r3, #2
  }
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
	...

08004568 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e0bf      	b.n	80046fa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fd f834 	bl	80015fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699a      	ldr	r2, [r3, #24]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80045aa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6999      	ldr	r1, [r3, #24]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80045c0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6899      	ldr	r1, [r3, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	4b4a      	ldr	r3, [pc, #296]	; (8004704 <HAL_LTDC_Init+0x19c>)
 80045dc:	400b      	ands	r3, r1
 80045de:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	041b      	lsls	r3, r3, #16
 80045e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6899      	ldr	r1, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68d9      	ldr	r1, [r3, #12]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	4b3e      	ldr	r3, [pc, #248]	; (8004704 <HAL_LTDC_Init+0x19c>)
 800460a:	400b      	ands	r3, r1
 800460c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	041b      	lsls	r3, r3, #16
 8004614:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68d9      	ldr	r1, [r3, #12]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1a      	ldr	r2, [r3, #32]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6919      	ldr	r1, [r3, #16]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4b33      	ldr	r3, [pc, #204]	; (8004704 <HAL_LTDC_Init+0x19c>)
 8004638:	400b      	ands	r3, r1
 800463a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	041b      	lsls	r3, r3, #16
 8004642:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6919      	ldr	r1, [r3, #16]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6959      	ldr	r1, [r3, #20]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	4b27      	ldr	r3, [pc, #156]	; (8004704 <HAL_LTDC_Init+0x19c>)
 8004666:	400b      	ands	r3, r1
 8004668:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	041b      	lsls	r3, r3, #16
 8004670:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6959      	ldr	r1, [r3, #20]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800468e:	021b      	lsls	r3, r3, #8
 8004690:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004698:	041b      	lsls	r3, r3, #16
 800469a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80046aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0206 	orr.w	r2, r2, #6
 80046d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699a      	ldr	r2, [r3, #24]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	f000f800 	.word	0xf000f800

08004708 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	d023      	beq.n	8004772 <HAL_LTDC_IRQHandler+0x6a>
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d01e      	beq.n	8004772 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0204 	bic.w	r2, r2, #4
 8004742:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2204      	movs	r2, #4
 800474a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004752:	f043 0201 	orr.w	r2, r3, #1
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2204      	movs	r2, #4
 8004760:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f86f 	bl	8004850 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d023      	beq.n	80047c4 <HAL_LTDC_IRQHandler+0xbc>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d01e      	beq.n	80047c4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0202 	bic.w	r2, r2, #2
 8004794:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2202      	movs	r2, #2
 800479c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047a4:	f043 0202 	orr.w	r2, r3, #2
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2204      	movs	r2, #4
 80047b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f846 	bl	8004850 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d01b      	beq.n	8004806 <HAL_LTDC_IRQHandler+0xfe>
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d016      	beq.n	8004806 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0201 	bic.w	r2, r2, #1
 80047e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2201      	movs	r2, #1
 80047ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f00d fa51 	bl	8011ca8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b00      	cmp	r3, #0
 800480e:	d01b      	beq.n	8004848 <HAL_LTDC_IRQHandler+0x140>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d016      	beq.n	8004848 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0208 	bic.w	r2, r2, #8
 8004828:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2208      	movs	r2, #8
 8004830:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f80e 	bl	8004864 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004848:	bf00      	nop
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004878:	b5b0      	push	{r4, r5, r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <HAL_LTDC_ConfigLayer+0x1a>
 800488e:	2302      	movs	r3, #2
 8004890:	e02c      	b.n	80048ec <HAL_LTDC_ConfigLayer+0x74>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2202      	movs	r2, #2
 800489e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2134      	movs	r1, #52	; 0x34
 80048a8:	fb01 f303 	mul.w	r3, r1, r3
 80048ac:	4413      	add	r3, r2
 80048ae:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	4614      	mov	r4, r2
 80048b6:	461d      	mov	r5, r3
 80048b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048c4:	682b      	ldr	r3, [r5, #0]
 80048c6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	68b9      	ldr	r1, [r7, #8]
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 f849 	bl	8004964 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2201      	movs	r2, #1
 80048d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bdb0      	pop	{r4, r5, r7, pc}

080048f4 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_LTDC_ProgramLineEvent+0x18>
 8004908:	2302      	movs	r3, #2
 800490a:	e023      	b.n	8004954 <HAL_LTDC_ProgramLineEvent+0x60>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0201 	bic.w	r2, r2, #1
 800492a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800492c:	4a0c      	ldr	r2, [pc, #48]	; (8004960 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f042 0201 	orr.w	r2, r2, #1
 8004940:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	40016800 	.word	0x40016800

08004964 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004964:	b480      	push	{r7}
 8004966:	b089      	sub	sp, #36	; 0x24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	0c1b      	lsrs	r3, r3, #16
 800497c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004980:	4413      	add	r3, r2
 8004982:	041b      	lsls	r3, r3, #16
 8004984:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	461a      	mov	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	01db      	lsls	r3, r3, #7
 8004990:	4413      	add	r3, r2
 8004992:	3384      	adds	r3, #132	; 0x84
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	6812      	ldr	r2, [r2, #0]
 800499a:	4611      	mov	r1, r2
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	01d2      	lsls	r2, r2, #7
 80049a0:	440a      	add	r2, r1
 80049a2:	3284      	adds	r2, #132	; 0x84
 80049a4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80049a8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	0c1b      	lsrs	r3, r3, #16
 80049b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ba:	4413      	add	r3, r2
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4619      	mov	r1, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	01db      	lsls	r3, r3, #7
 80049c8:	440b      	add	r3, r1
 80049ca:	3384      	adds	r3, #132	; 0x84
 80049cc:	4619      	mov	r1, r3
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049e2:	4413      	add	r3, r2
 80049e4:	041b      	lsls	r3, r3, #16
 80049e6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	461a      	mov	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	01db      	lsls	r3, r3, #7
 80049f2:	4413      	add	r3, r2
 80049f4:	3384      	adds	r3, #132	; 0x84
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	6812      	ldr	r2, [r2, #0]
 80049fc:	4611      	mov	r1, r2
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	01d2      	lsls	r2, r2, #7
 8004a02:	440a      	add	r2, r1
 8004a04:	3284      	adds	r2, #132	; 0x84
 8004a06:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004a0a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a1a:	4413      	add	r3, r2
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4619      	mov	r1, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	01db      	lsls	r3, r3, #7
 8004a28:	440b      	add	r3, r1
 8004a2a:	3384      	adds	r3, #132	; 0x84
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	01db      	lsls	r3, r3, #7
 8004a3e:	4413      	add	r3, r2
 8004a40:	3384      	adds	r3, #132	; 0x84
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	6812      	ldr	r2, [r2, #0]
 8004a48:	4611      	mov	r1, r2
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	01d2      	lsls	r2, r2, #7
 8004a4e:	440a      	add	r2, r1
 8004a50:	3284      	adds	r2, #132	; 0x84
 8004a52:	f023 0307 	bic.w	r3, r3, #7
 8004a56:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	01db      	lsls	r3, r3, #7
 8004a62:	4413      	add	r3, r2
 8004a64:	3384      	adds	r3, #132	; 0x84
 8004a66:	461a      	mov	r2, r3
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004a74:	021b      	lsls	r3, r3, #8
 8004a76:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004a7e:	041b      	lsls	r3, r3, #16
 8004a80:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	061b      	lsls	r3, r3, #24
 8004a88:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	01db      	lsls	r3, r3, #7
 8004a94:	4413      	add	r3, r2
 8004a96:	3384      	adds	r3, #132	; 0x84
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	01db      	lsls	r3, r3, #7
 8004aa4:	4413      	add	r3, r2
 8004aa6:	3384      	adds	r3, #132	; 0x84
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	2300      	movs	r3, #0
 8004aac:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	431a      	orrs	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	01db      	lsls	r3, r3, #7
 8004ac8:	440b      	add	r3, r1
 8004aca:	3384      	adds	r3, #132	; 0x84
 8004acc:	4619      	mov	r1, r3
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	01db      	lsls	r3, r3, #7
 8004ade:	4413      	add	r3, r2
 8004ae0:	3384      	adds	r3, #132	; 0x84
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	6812      	ldr	r2, [r2, #0]
 8004ae8:	4611      	mov	r1, r2
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	01d2      	lsls	r2, r2, #7
 8004aee:	440a      	add	r2, r1
 8004af0:	3284      	adds	r2, #132	; 0x84
 8004af2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004af6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	01db      	lsls	r3, r3, #7
 8004b02:	4413      	add	r3, r2
 8004b04:	3384      	adds	r3, #132	; 0x84
 8004b06:	461a      	mov	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	01db      	lsls	r3, r3, #7
 8004b18:	4413      	add	r3, r2
 8004b1a:	3384      	adds	r3, #132	; 0x84
 8004b1c:	69da      	ldr	r2, [r3, #28]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4619      	mov	r1, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	01db      	lsls	r3, r3, #7
 8004b28:	440b      	add	r3, r1
 8004b2a:	3384      	adds	r3, #132	; 0x84
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4b58      	ldr	r3, [pc, #352]	; (8004c90 <LTDC_SetConfig+0x32c>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	68f9      	ldr	r1, [r7, #12]
 8004b3e:	6809      	ldr	r1, [r1, #0]
 8004b40:	4608      	mov	r0, r1
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	01c9      	lsls	r1, r1, #7
 8004b46:	4401      	add	r1, r0
 8004b48:	3184      	adds	r1, #132	; 0x84
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	461a      	mov	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	01db      	lsls	r3, r3, #7
 8004b58:	4413      	add	r3, r2
 8004b5a:	3384      	adds	r3, #132	; 0x84
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	461a      	mov	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	01db      	lsls	r3, r3, #7
 8004b68:	4413      	add	r3, r2
 8004b6a:	3384      	adds	r3, #132	; 0x84
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	2300      	movs	r3, #0
 8004b70:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	01db      	lsls	r3, r3, #7
 8004b7c:	4413      	add	r3, r2
 8004b7e:	3384      	adds	r3, #132	; 0x84
 8004b80:	461a      	mov	r2, r3
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d102      	bne.n	8004b96 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004b90:	2304      	movs	r3, #4
 8004b92:	61fb      	str	r3, [r7, #28]
 8004b94:	e01b      	b.n	8004bce <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d102      	bne.n	8004ba4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	61fb      	str	r3, [r7, #28]
 8004ba2:	e014      	b.n	8004bce <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d00b      	beq.n	8004bc4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d007      	beq.n	8004bc4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d003      	beq.n	8004bc4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004bc0:	2b07      	cmp	r3, #7
 8004bc2:	d102      	bne.n	8004bca <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	61fb      	str	r3, [r7, #28]
 8004bc8:	e001      	b.n	8004bce <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	01db      	lsls	r3, r3, #7
 8004bd8:	4413      	add	r3, r2
 8004bda:	3384      	adds	r3, #132	; 0x84
 8004bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	6812      	ldr	r2, [r2, #0]
 8004be2:	4611      	mov	r1, r2
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	01d2      	lsls	r2, r2, #7
 8004be8:	440a      	add	r2, r1
 8004bea:	3284      	adds	r2, #132	; 0x84
 8004bec:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004bf0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	69fa      	ldr	r2, [r7, #28]
 8004bf8:	fb02 f303 	mul.w	r3, r2, r3
 8004bfc:	041a      	lsls	r2, r3, #16
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	6859      	ldr	r1, [r3, #4]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	1acb      	subs	r3, r1, r3
 8004c08:	69f9      	ldr	r1, [r7, #28]
 8004c0a:	fb01 f303 	mul.w	r3, r1, r3
 8004c0e:	3303      	adds	r3, #3
 8004c10:	68f9      	ldr	r1, [r7, #12]
 8004c12:	6809      	ldr	r1, [r1, #0]
 8004c14:	4608      	mov	r0, r1
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	01c9      	lsls	r1, r1, #7
 8004c1a:	4401      	add	r1, r0
 8004c1c:	3184      	adds	r1, #132	; 0x84
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	01db      	lsls	r3, r3, #7
 8004c2c:	4413      	add	r3, r2
 8004c2e:	3384      	adds	r3, #132	; 0x84
 8004c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4619      	mov	r1, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	01db      	lsls	r3, r3, #7
 8004c3c:	440b      	add	r3, r1
 8004c3e:	3384      	adds	r3, #132	; 0x84
 8004c40:	4619      	mov	r1, r3
 8004c42:	4b14      	ldr	r3, [pc, #80]	; (8004c94 <LTDC_SetConfig+0x330>)
 8004c44:	4013      	ands	r3, r2
 8004c46:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	01db      	lsls	r3, r3, #7
 8004c52:	4413      	add	r3, r2
 8004c54:	3384      	adds	r3, #132	; 0x84
 8004c56:	461a      	mov	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	461a      	mov	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	01db      	lsls	r3, r3, #7
 8004c68:	4413      	add	r3, r2
 8004c6a:	3384      	adds	r3, #132	; 0x84
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	6812      	ldr	r2, [r2, #0]
 8004c72:	4611      	mov	r1, r2
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	01d2      	lsls	r2, r2, #7
 8004c78:	440a      	add	r2, r1
 8004c7a:	3284      	adds	r2, #132	; 0x84
 8004c7c:	f043 0301 	orr.w	r3, r3, #1
 8004c80:	6013      	str	r3, [r2, #0]
}
 8004c82:	bf00      	nop
 8004c84:	3724      	adds	r7, #36	; 0x24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	fffff8f8 	.word	0xfffff8f8
 8004c94:	fffff800 	.word	0xfffff800

08004c98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004ca2:	4b23      	ldr	r3, [pc, #140]	; (8004d30 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	4a22      	ldr	r2, [pc, #136]	; (8004d30 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cac:	6413      	str	r3, [r2, #64]	; 0x40
 8004cae:	4b20      	ldr	r3, [pc, #128]	; (8004d30 <HAL_PWREx_EnableOverDrive+0x98>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004cba:	4b1e      	ldr	r3, [pc, #120]	; (8004d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a1d      	ldr	r2, [pc, #116]	; (8004d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cc6:	f7fd fcd5 	bl	8002674 <HAL_GetTick>
 8004cca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ccc:	e009      	b.n	8004ce2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004cce:	f7fd fcd1 	bl	8002674 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cdc:	d901      	bls.n	8004ce2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e022      	b.n	8004d28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ce2:	4b14      	ldr	r3, [pc, #80]	; (8004d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cee:	d1ee      	bne.n	8004cce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004cf0:	4b10      	ldr	r3, [pc, #64]	; (8004d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a0f      	ldr	r2, [pc, #60]	; (8004d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cfa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cfc:	f7fd fcba 	bl	8002674 <HAL_GetTick>
 8004d00:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d02:	e009      	b.n	8004d18 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d04:	f7fd fcb6 	bl	8002674 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d12:	d901      	bls.n	8004d18 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e007      	b.n	8004d28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d18:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d24:	d1ee      	bne.n	8004d04 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40023800 	.word	0x40023800
 8004d34:	40007000 	.word	0x40007000

08004d38 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af02      	add	r7, sp, #8
 8004d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004d44:	f7fd fc96 	bl	8002674 <HAL_GetTick>
 8004d48:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e073      	b.n	8004e3c <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_QSPI_Init+0x2c>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e06b      	b.n	8004e3c <HAL_QSPI_Init+0x104>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10b      	bne.n	8004d90 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7fc fd03 	bl	800178c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8004d86:	f241 3188 	movw	r1, #5000	; 0x1388
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fb65 	bl	800545a <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	021a      	lsls	r2, r3, #8
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2200      	movs	r2, #0
 8004db4:	2120      	movs	r1, #32
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fb5d 	bl	8005476 <QSPI_WaitFlagStateUntilTimeout>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d135      	bne.n	8004e32 <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	4b1d      	ldr	r3, [pc, #116]	; (8004e44 <HAL_QSPI_Init+0x10c>)
 8004dce:	4013      	ands	r3, r2
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6852      	ldr	r2, [r2, #4]
 8004dd4:	0611      	lsls	r1, r2, #24
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	68d2      	ldr	r2, [r2, #12]
 8004dda:	4311      	orrs	r1, r2
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	69d2      	ldr	r2, [r2, #28]
 8004de0:	4311      	orrs	r1, r2
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6a12      	ldr	r2, [r2, #32]
 8004de6:	4311      	orrs	r1, r2
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6812      	ldr	r2, [r2, #0]
 8004dec:	430b      	orrs	r3, r1
 8004dee:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	4b14      	ldr	r3, [pc, #80]	; (8004e48 <HAL_QSPI_Init+0x110>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6912      	ldr	r2, [r2, #16]
 8004dfe:	0411      	lsls	r1, r2, #16
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6952      	ldr	r2, [r2, #20]
 8004e04:	4311      	orrs	r1, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6992      	ldr	r2, [r2, #24]
 8004e0a:	4311      	orrs	r1, r2
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6812      	ldr	r2, [r2, #0]
 8004e10:	430b      	orrs	r3, r1
 8004e12:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0201 	orr.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	00ffff2f 	.word	0x00ffff2f
 8004e48:	ffe0f8fe 	.word	0xffe0f8fe

08004e4c <HAL_QSPI_DeInit>:
  * @brief DeInitializes the QSPI peripheral 
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e022      	b.n	8004ea4 <HAL_QSPI_DeInit+0x58>
  }

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d101      	bne.n	8004e6e <HAL_QSPI_DeInit+0x22>
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	e01a      	b.n	8004ea4 <HAL_QSPI_DeInit+0x58>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0201 	bic.w	r2, r2, #1
 8004e84:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7fc fd10 	bl	80018ac <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_QSPI_Command>:
  * @param Timeout  Time out duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af02      	add	r7, sp, #8
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 8004ebc:	f7fd fbda 	bl	8002674 <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_QSPI_Command+0x26>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e048      	b.n	8004f64 <HAL_QSPI_Command+0xb8>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d137      	bne.n	8004f56 <HAL_QSPI_Command+0xaa>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;   
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	2200      	movs	r2, #0
 8004efc:	2120      	movs	r1, #32
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 fab9 	bl	8005476 <QSPI_WaitFlagStateUntilTimeout>
 8004f04:	4603      	mov	r3, r0
 8004f06:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 8004f08:	7dfb      	ldrb	r3, [r7, #23]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d125      	bne.n	8004f5a <HAL_QSPI_Command+0xae>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004f0e:	2200      	movs	r2, #0
 8004f10:	68b9      	ldr	r1, [r7, #8]
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 fae6 	bl	80054e4 <QSPI_Config>
      
      if (cmd->DataMode == QSPI_DATA_NONE)
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d115      	bne.n	8004f4c <HAL_QSPI_Command+0xa0>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done 
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	2201      	movs	r2, #1
 8004f28:	2102      	movs	r1, #2
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 faa3 	bl	8005476 <QSPI_WaitFlagStateUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10f      	bne.n	8004f5a <HAL_QSPI_Command+0xae>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	60da      	str	r2, [r3, #12]
          
          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;   
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f4a:	e006      	b.n	8004f5a <HAL_QSPI_Command+0xae>
        
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;   
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f54:	e001      	b.n	8004f5a <HAL_QSPI_Command+0xae>
      }
    }
  }
  else
  {
    status = HAL_BUSY;   
 8004f56:	2302      	movs	r3, #2
 8004f58:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_QSPI_Transmit>:
  * @param Timeout  Time out duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08a      	sub	sp, #40	; 0x28
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
   HAL_StatusTypeDef status = HAL_OK;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8004f7c:	f7fd fb7a 	bl	8002674 <HAL_GetTick>
 8004f80:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	3320      	adds	r3, #32
 8004f88:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d101      	bne.n	8004f9a <HAL_QSPI_Transmit+0x2e>
 8004f96:	2302      	movs	r3, #2
 8004f98:	e079      	b.n	800508e <HAL_QSPI_Transmit+0x122>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d168      	bne.n	8005080 <HAL_QSPI_Transmit+0x114>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d059      	beq.n	800506e <HAL_QSPI_Transmit+0x102>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2212      	movs	r2, #18
 8004fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      
      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	625a      	str	r2, [r3, #36]	; 0x24
    
      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695a      	ldr	r2, [r3, #20]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004fee:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0)
 8004ff0:	e019      	b.n	8005026 <HAL_QSPI_Transmit+0xba>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	2104      	movs	r1, #4
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 fa3a 	bl	8005476 <QSPI_WaitFlagStateUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8005006:	7ffb      	ldrb	r3, [r7, #31]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d111      	bne.n	8005030 <HAL_QSPI_Transmit+0xc4>
        { 
          break;
        }

        *(__IO uint8_t *)data_reg = *hqspi->pTxBuffPtr++;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	1c59      	adds	r1, r3, #1
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	6251      	str	r1, [r2, #36]	; 0x24
 8005016:	781a      	ldrb	r2, [r3, #0]
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	701a      	strb	r2, [r3, #0]
        hqspi->TxXferCount--;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	1e5a      	subs	r2, r3, #1
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1e1      	bne.n	8004ff2 <HAL_QSPI_Transmit+0x86>
 800502e:	e000      	b.n	8005032 <HAL_QSPI_Transmit+0xc6>
          break;
 8005030:	bf00      	nop
      }
    
      if (status == HAL_OK)
 8005032:	7ffb      	ldrb	r3, [r7, #31]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d115      	bne.n	8005064 <HAL_QSPI_Transmit+0xf8>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	2201      	movs	r2, #1
 8005040:	2102      	movs	r1, #2
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 fa17 	bl	8005476 <QSPI_WaitFlagStateUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800504c:	7ffb      	ldrb	r3, [r7, #31]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d108      	bne.n	8005064 <HAL_QSPI_Transmit+0xf8>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2202      	movs	r2, #2
 8005058:	60da      	str	r2, [r3, #12]
          
#if defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 f998 	bl	8005390 <HAL_QSPI_Abort>
 8005060:	4603      	mov	r3, r0
 8005062:	77fb      	strb	r3, [r7, #31]
#endif /* QSPI_V1_0 */ 
        }
      }
    
      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;    
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800506c:	e00a      	b.n	8005084 <HAL_QSPI_Transmit+0x118>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005072:	f043 0208 	orr.w	r2, r3, #8
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	77fb      	strb	r3, [r7, #31]
 800507e:	e001      	b.n	8005084 <HAL_QSPI_Transmit+0x118>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005080:	2302      	movs	r3, #2
 8005082:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800508c:	7ffb      	ldrb	r3, [r7, #31]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3720      	adds	r7, #32
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <HAL_QSPI_Receive>:
  * @param Timeout  Time out duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b08a      	sub	sp, #40	; 0x28
 800509a:	af02      	add	r7, sp, #8
 800509c:	60f8      	str	r0, [r7, #12]
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80050a6:	f7fd fae5 	bl	8002674 <HAL_GetTick>
 80050aa:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3320      	adds	r3, #32
 80050ba:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_QSPI_Receive+0x36>
 80050c8:	2302      	movs	r3, #2
 80050ca:	e080      	b.n	80051ce <HAL_QSPI_Receive+0x138>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d16f      	bne.n	80051c0 <HAL_QSPI_Receive+0x12a>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	645a      	str	r2, [r3, #68]	; 0x44
    if(pData != NULL )
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d060      	beq.n	80051ae <HAL_QSPI_Receive+0x118>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2222      	movs	r2, #34	; 0x22
 80050f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005124:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	619a      	str	r2, [r3, #24]
      
      while(hqspi->RxXferCount > 0)
 800512e:	e01a      	b.n	8005166 <HAL_QSPI_Receive+0xd0>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	2201      	movs	r2, #1
 8005138:	2106      	movs	r1, #6
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 f99b 	bl	8005476 <QSPI_WaitFlagStateUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8005144:	7ffb      	ldrb	r3, [r7, #31]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d112      	bne.n	8005170 <HAL_QSPI_Receive+0xda>
        { 
          break;
        }

        *hqspi->pRxBuffPtr++ = *(__IO uint8_t *)data_reg;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514e:	1c59      	adds	r1, r3, #1
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	6311      	str	r1, [r2, #48]	; 0x30
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	7812      	ldrb	r2, [r2, #0]
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	701a      	strb	r2, [r3, #0]
        hqspi->RxXferCount--;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	1e5a      	subs	r2, r3, #1
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1e0      	bne.n	8005130 <HAL_QSPI_Receive+0x9a>
 800516e:	e000      	b.n	8005172 <HAL_QSPI_Receive+0xdc>
          break;
 8005170:	bf00      	nop
      }
    
      if (status == HAL_OK)
 8005172:	7ffb      	ldrb	r3, [r7, #31]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d115      	bne.n	80051a4 <HAL_QSPI_Receive+0x10e>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	2201      	movs	r2, #1
 8005180:	2102      	movs	r1, #2
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 f977 	bl	8005476 <QSPI_WaitFlagStateUntilTimeout>
 8005188:	4603      	mov	r3, r0
 800518a:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800518c:	7ffb      	ldrb	r3, [r7, #31]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d108      	bne.n	80051a4 <HAL_QSPI_Receive+0x10e>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2202      	movs	r2, #2
 8005198:	60da      	str	r2, [r3, #12]
          
#if defined(QSPI1_V1_0)
         /* Workaround - Extra data written in the FIFO at the end of a read transfer */
         status = HAL_QSPI_Abort(hqspi);
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 f8f8 	bl	8005390 <HAL_QSPI_Abort>
 80051a0:	4603      	mov	r3, r0
 80051a2:	77fb      	strb	r3, [r7, #31]
#endif /* QSPI_V1_0 */  
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;    
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051ac:	e00a      	b.n	80051c4 <HAL_QSPI_Receive+0x12e>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b2:	f043 0208 	orr.w	r2, r3, #8
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	77fb      	strb	r3, [r7, #31]
 80051be:	e001      	b.n	80051c4 <HAL_QSPI_Receive+0x12e>
    }
  }
  else
  {
    status = HAL_BUSY;
 80051c0:	2302      	movs	r3, #2
 80051c2:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80051cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3720      	adds	r7, #32
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_QSPI_AutoPolling>:
  * @param  Timeout  Time out duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b088      	sub	sp, #32
 80051da:	af02      	add	r7, sp, #8
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	607a      	str	r2, [r7, #4]
 80051e2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 80051e8:	f7fd fa44 	bl	8002674 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d101      	bne.n	80051fe <HAL_QSPI_AutoPolling+0x28>
 80051fa:	2302      	movs	r3, #2
 80051fc:	e060      	b.n	80052c0 <HAL_QSPI_AutoPolling+0xea>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b01      	cmp	r3, #1
 8005210:	d14f      	bne.n	80052b2 <HAL_QSPI_AutoPolling+0xdc>
  {
    
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2242      	movs	r2, #66	; 0x42
 800521c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	2200      	movs	r2, #0
 8005228:	2120      	movs	r1, #32
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 f923 	bl	8005476 <QSPI_WaitFlagStateUntilTimeout>
 8005230:	4603      	mov	r3, r0
 8005232:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 8005234:	7dfb      	ldrb	r3, [r7, #23]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d13d      	bne.n	80052b6 <HAL_QSPI_AutoPolling+0xe0>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6812      	ldr	r2, [r2, #0]
 8005242:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6852      	ldr	r2, [r2, #4]
 800524c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6892      	ldr	r2, [r2, #8]
 8005256:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Configure QSPI: CR register with Match mode and Automatic stop enabled 
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS), 
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	431a      	orrs	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005270:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));
      
      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800527a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800527e:	68b9      	ldr	r1, [r7, #8]
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 f92f 	bl	80054e4 <QSPI_Config>
      
      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	2201      	movs	r2, #1
 800528e:	2108      	movs	r1, #8
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 f8f0 	bl	8005476 <QSPI_WaitFlagStateUntilTimeout>
 8005296:	4603      	mov	r3, r0
 8005298:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800529a:	7dfb      	ldrb	r3, [r7, #23]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10a      	bne.n	80052b6 <HAL_QSPI_AutoPolling+0xe0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2208      	movs	r2, #8
 80052a6:	60da      	str	r2, [r3, #12]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052b0:	e001      	b.n	80052b6 <HAL_QSPI_AutoPolling+0xe0>
      }
    }
  }
  else
  {
    status = HAL_BUSY;   
 80052b2:	2302      	movs	r3, #2
 80052b4:	75fb      	strb	r3, [r7, #23]
  }
  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return status;  
 80052be:	7dfb      	ldrb	r3, [r7, #23]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart = HAL_GetTick();
 80052d8:	f7fd f9cc 	bl	8002674 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <HAL_QSPI_MemoryMapped+0x26>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e04c      	b.n	8005388 <HAL_QSPI_MemoryMapped+0xc0>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d13b      	bne.n	800537a <HAL_QSPI_MemoryMapped+0xb2>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2282      	movs	r2, #130	; 0x82
 800530c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    
    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	2200      	movs	r2, #0
 800531a:	2120      	movs	r1, #32
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 f8aa 	bl	8005476 <QSPI_WaitFlagStateUntilTimeout>
 8005322:	4603      	mov	r3, r0
 8005324:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 8005326:	7dfb      	ldrb	r3, [r7, #23]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d128      	bne.n	800537e <HAL_QSPI_MemoryMapped+0xb6>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f023 0108 	bic.w	r1, r3, #8
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2b08      	cmp	r3, #8
 8005348:	d110      	bne.n	800536c <HAL_QSPI_MemoryMapped+0xa4>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));
        
        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6812      	ldr	r2, [r2, #0]
 8005352:	631a      	str	r2, [r3, #48]	; 0x30
        
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2210      	movs	r2, #16
 800535a:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800536a:	601a      	str	r2, [r3, #0]
      }
      
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800536c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8005370:	68b9      	ldr	r1, [r7, #8]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 f8b6 	bl	80054e4 <QSPI_Config>
 8005378:	e001      	b.n	800537e <HAL_QSPI_MemoryMapped+0xb6>
    }
  }
  else
  {
    status = HAL_BUSY;   
 800537a:	2302      	movs	r3, #2
 800537c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return status;  
 8005386:	7dfb      	ldrb	r3, [r7, #23]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af02      	add	r7, sp, #8
 8005396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800539c:	f7fd f96a 	bl	8002674 <HAL_GetTick>
 80053a0:	60b8      	str	r0, [r7, #8]
  
  /* Check if the state is in one of the busy states */
  if ((hqspi->State & 0x2) != 0)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d04e      	beq.n	8005450 <HAL_QSPI_Abort+0xc0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN)!= RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d017      	beq.n	80053f8 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0204 	bic.w	r2, r2, #4
 80053d6:	601a      	str	r2, [r3, #0]
      
      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fd fbeb 	bl	8002bb8 <HAL_DMA_Abort>
 80053e2:	4603      	mov	r3, r0
 80053e4:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f0:	f043 0204 	orr.w	r2, r3, #4
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }  
    
    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0202 	orr.w	r2, r2, #2
 8005406:	601a      	str	r2, [r3, #0]
    
    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2201      	movs	r2, #1
 8005412:	2102      	movs	r1, #2
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f82e 	bl	8005476 <QSPI_WaitFlagStateUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	73fb      	strb	r3, [r7, #15]

    if(status == HAL_OK)
 800541e:	7bfb      	ldrb	r3, [r7, #15]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10e      	bne.n	8005442 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2202      	movs	r2, #2
 800542a:	60da      	str	r2, [r3, #12]
      
      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2200      	movs	r2, #0
 8005436:	2120      	movs	r1, #32
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f81c 	bl	8005476 <QSPI_WaitFlagStateUntilTimeout>
 800543e:	4603      	mov	r3, r0
 8005440:	73fb      	strb	r3, [r7, #15]
    }
    
    if (status == HAL_OK)
 8005442:	7bfb      	ldrb	r3, [r7, #15]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d103      	bne.n	8005450 <HAL_QSPI_Abort+0xc0>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8005450:	7bfb      	ldrb	r3, [r7, #15]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	649a      	str	r2, [r3, #72]	; 0x48
}
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b084      	sub	sp, #16
 800547a:	af00      	add	r7, sp, #0
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	603b      	str	r3, [r7, #0]
 8005482:	4613      	mov	r3, r2
 8005484:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005486:	e01a      	b.n	80054be <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800548e:	d016      	beq.n	80054be <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d007      	beq.n	80054a6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005496:	f7fd f8ed 	bl	8002674 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d20b      	bcs.n	80054be <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2204      	movs	r2, #4
 80054aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b2:	f043 0201 	orr.w	r2, r3, #1
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e00e      	b.n	80054dc <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4013      	ands	r3, r2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	bf14      	ite	ne
 80054cc:	2301      	movne	r3, #1
 80054ce:	2300      	moveq	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	461a      	mov	r2, r3
 80054d4:	79fb      	ldrb	r3, [r7, #7]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d1d6      	bne.n	8005488 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d009      	beq.n	800550c <QSPI_Config+0x28>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80054fe:	d005      	beq.n	800550c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1));
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3a01      	subs	r2, #1
 800550a:	611a      	str	r2, [r3, #16]
  }
      
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 80b9 	beq.w	8005688 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d05f      	beq.n	80055de <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	6892      	ldr	r2, [r2, #8]
 8005526:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d031      	beq.n	8005594 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	431a      	orrs	r2, r3
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553e:	431a      	orrs	r2, r3
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	431a      	orrs	r2, r3
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	049b      	lsls	r3, r3, #18
 800554c:	431a      	orrs	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	431a      	orrs	r2, r3
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	431a      	orrs	r2, r3
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	431a      	orrs	r2, r3
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	431a      	orrs	r2, r3
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	431a      	orrs	r2, r3
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	ea42 0103 	orr.w	r1, r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	430a      	orrs	r2, r1
 800557c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << 18) | cmd->AlternateBytesSize |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005584:	f000 812e 	beq.w	80057e4 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	6852      	ldr	r2, [r2, #4]
 8005590:	619a      	str	r2, [r3, #24]
                                           cmd->AddressMode | cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8005592:	e127      	b.n	80057e4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559c:	431a      	orrs	r2, r3
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a2:	431a      	orrs	r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	431a      	orrs	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	049b      	lsls	r3, r3, #18
 80055b0:	431a      	orrs	r2, r3
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	431a      	orrs	r2, r3
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	431a      	orrs	r2, r3
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	431a      	orrs	r2, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	431a      	orrs	r2, r3
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	ea42 0103 	orr.w	r1, r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	430a      	orrs	r2, r1
 80055da:	615a      	str	r2, [r3, #20]
}
 80055dc:	e102      	b.n	80057e4 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d02e      	beq.n	8005644 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ee:	431a      	orrs	r2, r3
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f4:	431a      	orrs	r2, r3
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	431a      	orrs	r2, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	049b      	lsls	r3, r3, #18
 8005602:	431a      	orrs	r2, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	6a1b      	ldr	r3, [r3, #32]
 8005608:	431a      	orrs	r2, r3
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	431a      	orrs	r2, r3
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	431a      	orrs	r2, r3
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	431a      	orrs	r2, r3
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	ea42 0103 	orr.w	r1, r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	430a      	orrs	r2, r1
 800562c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005634:	f000 80d6 	beq.w	80057e4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	6852      	ldr	r2, [r2, #4]
 8005640:	619a      	str	r2, [r3, #24]
}
 8005642:	e0cf      	b.n	80057e4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564c:	431a      	orrs	r2, r3
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005652:	431a      	orrs	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	431a      	orrs	r2, r3
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	049b      	lsls	r3, r3, #18
 8005660:	431a      	orrs	r2, r3
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	431a      	orrs	r2, r3
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	431a      	orrs	r2, r3
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	431a      	orrs	r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	ea42 0103 	orr.w	r1, r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	430a      	orrs	r2, r1
 8005684:	615a      	str	r2, [r3, #20]
}
 8005686:	e0ad      	b.n	80057e4 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d058      	beq.n	8005742 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	6892      	ldr	r2, [r2, #8]
 8005698:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d02d      	beq.n	80056fe <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056aa:	431a      	orrs	r2, r3
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b0:	431a      	orrs	r2, r3
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	431a      	orrs	r2, r3
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	049b      	lsls	r3, r3, #18
 80056be:	431a      	orrs	r2, r3
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	431a      	orrs	r2, r3
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	431a      	orrs	r2, r3
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	431a      	orrs	r2, r3
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	ea42 0103 	orr.w	r1, r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80056f0:	d078      	beq.n	80057e4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	6852      	ldr	r2, [r2, #4]
 80056fa:	619a      	str	r2, [r3, #24]
}
 80056fc:	e072      	b.n	80057e4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	431a      	orrs	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570c:	431a      	orrs	r2, r3
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	431a      	orrs	r2, r3
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	049b      	lsls	r3, r3, #18
 800571a:	431a      	orrs	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	431a      	orrs	r2, r3
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	431a      	orrs	r2, r3
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	431a      	orrs	r2, r3
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	ea42 0103 	orr.w	r1, r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	430a      	orrs	r2, r1
 800573e:	615a      	str	r2, [r3, #20]
}
 8005740:	e050      	b.n	80057e4 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d02a      	beq.n	80057a0 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005752:	431a      	orrs	r2, r3
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005758:	431a      	orrs	r2, r3
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	431a      	orrs	r2, r3
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	049b      	lsls	r3, r3, #18
 8005766:	431a      	orrs	r2, r3
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	431a      	orrs	r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	431a      	orrs	r2, r3
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	431a      	orrs	r2, r3
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	ea42 0103 	orr.w	r1, r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	430a      	orrs	r2, r1
 800578a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005792:	d027      	beq.n	80057e4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	6852      	ldr	r2, [r2, #4]
 800579c:	619a      	str	r2, [r3, #24]
}
 800579e:	e021      	b.n	80057e4 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d01d      	beq.n	80057e4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b0:	431a      	orrs	r2, r3
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b6:	431a      	orrs	r2, r3
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	431a      	orrs	r2, r3
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	049b      	lsls	r3, r3, #18
 80057c4:	431a      	orrs	r2, r3
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	431a      	orrs	r2, r3
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	431a      	orrs	r2, r3
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	ea42 0103 	orr.w	r1, r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	615a      	str	r2, [r3, #20]
}
 80057e4:	bf00      	nop
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80057f8:	2300      	movs	r3, #0
 80057fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e25c      	b.n	8005cc0 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	f000 8087 	beq.w	8005922 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005814:	4b96      	ldr	r3, [pc, #600]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 030c 	and.w	r3, r3, #12
 800581c:	2b04      	cmp	r3, #4
 800581e:	d00c      	beq.n	800583a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005820:	4b93      	ldr	r3, [pc, #588]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f003 030c 	and.w	r3, r3, #12
 8005828:	2b08      	cmp	r3, #8
 800582a:	d112      	bne.n	8005852 <HAL_RCC_OscConfig+0x62>
 800582c:	4b90      	ldr	r3, [pc, #576]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005834:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005838:	d10b      	bne.n	8005852 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800583a:	4b8d      	ldr	r3, [pc, #564]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d06c      	beq.n	8005920 <HAL_RCC_OscConfig+0x130>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d168      	bne.n	8005920 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e236      	b.n	8005cc0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800585a:	d106      	bne.n	800586a <HAL_RCC_OscConfig+0x7a>
 800585c:	4b84      	ldr	r3, [pc, #528]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a83      	ldr	r2, [pc, #524]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 8005862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	e02e      	b.n	80058c8 <HAL_RCC_OscConfig+0xd8>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10c      	bne.n	800588c <HAL_RCC_OscConfig+0x9c>
 8005872:	4b7f      	ldr	r3, [pc, #508]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a7e      	ldr	r2, [pc, #504]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 8005878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	4b7c      	ldr	r3, [pc, #496]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a7b      	ldr	r2, [pc, #492]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 8005884:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	e01d      	b.n	80058c8 <HAL_RCC_OscConfig+0xd8>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005894:	d10c      	bne.n	80058b0 <HAL_RCC_OscConfig+0xc0>
 8005896:	4b76      	ldr	r3, [pc, #472]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a75      	ldr	r2, [pc, #468]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 800589c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058a0:	6013      	str	r3, [r2, #0]
 80058a2:	4b73      	ldr	r3, [pc, #460]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a72      	ldr	r2, [pc, #456]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 80058a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	e00b      	b.n	80058c8 <HAL_RCC_OscConfig+0xd8>
 80058b0:	4b6f      	ldr	r3, [pc, #444]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a6e      	ldr	r2, [pc, #440]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 80058b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ba:	6013      	str	r3, [r2, #0]
 80058bc:	4b6c      	ldr	r3, [pc, #432]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a6b      	ldr	r2, [pc, #428]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 80058c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d013      	beq.n	80058f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d0:	f7fc fed0 	bl	8002674 <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058d6:	e008      	b.n	80058ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058d8:	f7fc fecc 	bl	8002674 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b64      	cmp	r3, #100	; 0x64
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e1ea      	b.n	8005cc0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ea:	4b61      	ldr	r3, [pc, #388]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d0f0      	beq.n	80058d8 <HAL_RCC_OscConfig+0xe8>
 80058f6:	e014      	b.n	8005922 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f8:	f7fc febc 	bl	8002674 <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058fe:	e008      	b.n	8005912 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005900:	f7fc feb8 	bl	8002674 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b64      	cmp	r3, #100	; 0x64
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e1d6      	b.n	8005cc0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005912:	4b57      	ldr	r3, [pc, #348]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1f0      	bne.n	8005900 <HAL_RCC_OscConfig+0x110>
 800591e:	e000      	b.n	8005922 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d069      	beq.n	8005a02 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800592e:	4b50      	ldr	r3, [pc, #320]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f003 030c 	and.w	r3, r3, #12
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00b      	beq.n	8005952 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800593a:	4b4d      	ldr	r3, [pc, #308]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f003 030c 	and.w	r3, r3, #12
 8005942:	2b08      	cmp	r3, #8
 8005944:	d11c      	bne.n	8005980 <HAL_RCC_OscConfig+0x190>
 8005946:	4b4a      	ldr	r3, [pc, #296]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d116      	bne.n	8005980 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005952:	4b47      	ldr	r3, [pc, #284]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d005      	beq.n	800596a <HAL_RCC_OscConfig+0x17a>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d001      	beq.n	800596a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e1aa      	b.n	8005cc0 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800596a:	4b41      	ldr	r3, [pc, #260]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	493d      	ldr	r1, [pc, #244]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 800597a:	4313      	orrs	r3, r2
 800597c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800597e:	e040      	b.n	8005a02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d023      	beq.n	80059d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005988:	4b39      	ldr	r3, [pc, #228]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a38      	ldr	r2, [pc, #224]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 800598e:	f043 0301 	orr.w	r3, r3, #1
 8005992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005994:	f7fc fe6e 	bl	8002674 <HAL_GetTick>
 8005998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800599a:	e008      	b.n	80059ae <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800599c:	f7fc fe6a 	bl	8002674 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e188      	b.n	8005cc0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ae:	4b30      	ldr	r3, [pc, #192]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d0f0      	beq.n	800599c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ba:	4b2d      	ldr	r3, [pc, #180]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	4929      	ldr	r1, [pc, #164]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	600b      	str	r3, [r1, #0]
 80059ce:	e018      	b.n	8005a02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059d0:	4b27      	ldr	r3, [pc, #156]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a26      	ldr	r2, [pc, #152]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 80059d6:	f023 0301 	bic.w	r3, r3, #1
 80059da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059dc:	f7fc fe4a 	bl	8002674 <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059e4:	f7fc fe46 	bl	8002674 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e164      	b.n	8005cc0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059f6:	4b1e      	ldr	r3, [pc, #120]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1f0      	bne.n	80059e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d038      	beq.n	8005a80 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d019      	beq.n	8005a4a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a16:	4b16      	ldr	r3, [pc, #88]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 8005a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a1a:	4a15      	ldr	r2, [pc, #84]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 8005a1c:	f043 0301 	orr.w	r3, r3, #1
 8005a20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a22:	f7fc fe27 	bl	8002674 <HAL_GetTick>
 8005a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a28:	e008      	b.n	8005a3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a2a:	f7fc fe23 	bl	8002674 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e141      	b.n	8005cc0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a3c:	4b0c      	ldr	r3, [pc, #48]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 8005a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0f0      	beq.n	8005a2a <HAL_RCC_OscConfig+0x23a>
 8005a48:	e01a      	b.n	8005a80 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a4a:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 8005a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a4e:	4a08      	ldr	r2, [pc, #32]	; (8005a70 <HAL_RCC_OscConfig+0x280>)
 8005a50:	f023 0301 	bic.w	r3, r3, #1
 8005a54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a56:	f7fc fe0d 	bl	8002674 <HAL_GetTick>
 8005a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a5c:	e00a      	b.n	8005a74 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a5e:	f7fc fe09 	bl	8002674 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d903      	bls.n	8005a74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e127      	b.n	8005cc0 <HAL_RCC_OscConfig+0x4d0>
 8005a70:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a74:	4b94      	ldr	r3, [pc, #592]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1ee      	bne.n	8005a5e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 80a4 	beq.w	8005bd6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a8e:	4b8e      	ldr	r3, [pc, #568]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10d      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a9a:	4b8b      	ldr	r3, [pc, #556]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	4a8a      	ldr	r2, [pc, #552]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8005aa6:	4b88      	ldr	r3, [pc, #544]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aae:	60fb      	str	r3, [r7, #12]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ab6:	4b85      	ldr	r3, [pc, #532]	; (8005ccc <HAL_RCC_OscConfig+0x4dc>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d118      	bne.n	8005af4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005ac2:	4b82      	ldr	r3, [pc, #520]	; (8005ccc <HAL_RCC_OscConfig+0x4dc>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a81      	ldr	r2, [pc, #516]	; (8005ccc <HAL_RCC_OscConfig+0x4dc>)
 8005ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ace:	f7fc fdd1 	bl	8002674 <HAL_GetTick>
 8005ad2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ad4:	e008      	b.n	8005ae8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ad6:	f7fc fdcd 	bl	8002674 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b64      	cmp	r3, #100	; 0x64
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e0eb      	b.n	8005cc0 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ae8:	4b78      	ldr	r3, [pc, #480]	; (8005ccc <HAL_RCC_OscConfig+0x4dc>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0f0      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d106      	bne.n	8005b0a <HAL_RCC_OscConfig+0x31a>
 8005afc:	4b72      	ldr	r3, [pc, #456]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b00:	4a71      	ldr	r2, [pc, #452]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005b02:	f043 0301 	orr.w	r3, r3, #1
 8005b06:	6713      	str	r3, [r2, #112]	; 0x70
 8005b08:	e02d      	b.n	8005b66 <HAL_RCC_OscConfig+0x376>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10c      	bne.n	8005b2c <HAL_RCC_OscConfig+0x33c>
 8005b12:	4b6d      	ldr	r3, [pc, #436]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b16:	4a6c      	ldr	r2, [pc, #432]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005b18:	f023 0301 	bic.w	r3, r3, #1
 8005b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b1e:	4b6a      	ldr	r3, [pc, #424]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b22:	4a69      	ldr	r2, [pc, #420]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005b24:	f023 0304 	bic.w	r3, r3, #4
 8005b28:	6713      	str	r3, [r2, #112]	; 0x70
 8005b2a:	e01c      	b.n	8005b66 <HAL_RCC_OscConfig+0x376>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	2b05      	cmp	r3, #5
 8005b32:	d10c      	bne.n	8005b4e <HAL_RCC_OscConfig+0x35e>
 8005b34:	4b64      	ldr	r3, [pc, #400]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b38:	4a63      	ldr	r2, [pc, #396]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005b3a:	f043 0304 	orr.w	r3, r3, #4
 8005b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b40:	4b61      	ldr	r3, [pc, #388]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b44:	4a60      	ldr	r2, [pc, #384]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005b46:	f043 0301 	orr.w	r3, r3, #1
 8005b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b4c:	e00b      	b.n	8005b66 <HAL_RCC_OscConfig+0x376>
 8005b4e:	4b5e      	ldr	r3, [pc, #376]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b52:	4a5d      	ldr	r2, [pc, #372]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005b54:	f023 0301 	bic.w	r3, r3, #1
 8005b58:	6713      	str	r3, [r2, #112]	; 0x70
 8005b5a:	4b5b      	ldr	r3, [pc, #364]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5e:	4a5a      	ldr	r2, [pc, #360]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005b60:	f023 0304 	bic.w	r3, r3, #4
 8005b64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d015      	beq.n	8005b9a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b6e:	f7fc fd81 	bl	8002674 <HAL_GetTick>
 8005b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b74:	e00a      	b.n	8005b8c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b76:	f7fc fd7d 	bl	8002674 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e099      	b.n	8005cc0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b8c:	4b4e      	ldr	r3, [pc, #312]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0ee      	beq.n	8005b76 <HAL_RCC_OscConfig+0x386>
 8005b98:	e014      	b.n	8005bc4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b9a:	f7fc fd6b 	bl	8002674 <HAL_GetTick>
 8005b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ba0:	e00a      	b.n	8005bb8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ba2:	f7fc fd67 	bl	8002674 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e083      	b.n	8005cc0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bb8:	4b43      	ldr	r3, [pc, #268]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1ee      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d105      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bca:	4b3f      	ldr	r3, [pc, #252]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	4a3e      	ldr	r2, [pc, #248]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d06f      	beq.n	8005cbe <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bde:	4b3a      	ldr	r3, [pc, #232]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f003 030c 	and.w	r3, r3, #12
 8005be6:	2b08      	cmp	r3, #8
 8005be8:	d067      	beq.n	8005cba <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d149      	bne.n	8005c86 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bf2:	4b35      	ldr	r3, [pc, #212]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a34      	ldr	r2, [pc, #208]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005bf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfe:	f7fc fd39 	bl	8002674 <HAL_GetTick>
 8005c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c04:	e008      	b.n	8005c18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c06:	f7fc fd35 	bl	8002674 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d901      	bls.n	8005c18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e053      	b.n	8005cc0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c18:	4b2b      	ldr	r3, [pc, #172]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1f0      	bne.n	8005c06 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	69da      	ldr	r2, [r3, #28]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c32:	019b      	lsls	r3, r3, #6
 8005c34:	431a      	orrs	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3a:	085b      	lsrs	r3, r3, #1
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	041b      	lsls	r3, r3, #16
 8005c40:	431a      	orrs	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c46:	061b      	lsls	r3, r3, #24
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	4a1f      	ldr	r2, [pc, #124]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005c4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c50:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c52:	4b1d      	ldr	r3, [pc, #116]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a1c      	ldr	r2, [pc, #112]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005c58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5e:	f7fc fd09 	bl	8002674 <HAL_GetTick>
 8005c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c64:	e008      	b.n	8005c78 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c66:	f7fc fd05 	bl	8002674 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e023      	b.n	8005cc0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c78:	4b13      	ldr	r3, [pc, #76]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d0f0      	beq.n	8005c66 <HAL_RCC_OscConfig+0x476>
 8005c84:	e01b      	b.n	8005cbe <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c86:	4b10      	ldr	r3, [pc, #64]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a0f      	ldr	r2, [pc, #60]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005c8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c92:	f7fc fcef 	bl	8002674 <HAL_GetTick>
 8005c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c98:	e008      	b.n	8005cac <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c9a:	f7fc fceb 	bl	8002674 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d901      	bls.n	8005cac <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e009      	b.n	8005cc0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cac:	4b06      	ldr	r3, [pc, #24]	; (8005cc8 <HAL_RCC_OscConfig+0x4d8>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1f0      	bne.n	8005c9a <HAL_RCC_OscConfig+0x4aa>
 8005cb8:	e001      	b.n	8005cbe <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e000      	b.n	8005cc0 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3718      	adds	r7, #24
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	40023800 	.word	0x40023800
 8005ccc:	40007000 	.word	0x40007000

08005cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e0ce      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ce8:	4b69      	ldr	r3, [pc, #420]	; (8005e90 <HAL_RCC_ClockConfig+0x1c0>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 030f 	and.w	r3, r3, #15
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d910      	bls.n	8005d18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf6:	4b66      	ldr	r3, [pc, #408]	; (8005e90 <HAL_RCC_ClockConfig+0x1c0>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f023 020f 	bic.w	r2, r3, #15
 8005cfe:	4964      	ldr	r1, [pc, #400]	; (8005e90 <HAL_RCC_ClockConfig+0x1c0>)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d06:	4b62      	ldr	r3, [pc, #392]	; (8005e90 <HAL_RCC_ClockConfig+0x1c0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d001      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e0b6      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d020      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d005      	beq.n	8005d3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d30:	4b58      	ldr	r3, [pc, #352]	; (8005e94 <HAL_RCC_ClockConfig+0x1c4>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	4a57      	ldr	r2, [pc, #348]	; (8005e94 <HAL_RCC_ClockConfig+0x1c4>)
 8005d36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0308 	and.w	r3, r3, #8
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d005      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d48:	4b52      	ldr	r3, [pc, #328]	; (8005e94 <HAL_RCC_ClockConfig+0x1c4>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	4a51      	ldr	r2, [pc, #324]	; (8005e94 <HAL_RCC_ClockConfig+0x1c4>)
 8005d4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d54:	4b4f      	ldr	r3, [pc, #316]	; (8005e94 <HAL_RCC_ClockConfig+0x1c4>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	494c      	ldr	r1, [pc, #304]	; (8005e94 <HAL_RCC_ClockConfig+0x1c4>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d040      	beq.n	8005df4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d107      	bne.n	8005d8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d7a:	4b46      	ldr	r3, [pc, #280]	; (8005e94 <HAL_RCC_ClockConfig+0x1c4>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d115      	bne.n	8005db2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e07d      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d107      	bne.n	8005da2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d92:	4b40      	ldr	r3, [pc, #256]	; (8005e94 <HAL_RCC_ClockConfig+0x1c4>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d109      	bne.n	8005db2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e071      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005da2:	4b3c      	ldr	r3, [pc, #240]	; (8005e94 <HAL_RCC_ClockConfig+0x1c4>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e069      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005db2:	4b38      	ldr	r3, [pc, #224]	; (8005e94 <HAL_RCC_ClockConfig+0x1c4>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f023 0203 	bic.w	r2, r3, #3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	4935      	ldr	r1, [pc, #212]	; (8005e94 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dc4:	f7fc fc56 	bl	8002674 <HAL_GetTick>
 8005dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dca:	e00a      	b.n	8005de2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dcc:	f7fc fc52 	bl	8002674 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e051      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005de2:	4b2c      	ldr	r3, [pc, #176]	; (8005e94 <HAL_RCC_ClockConfig+0x1c4>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 020c 	and.w	r2, r3, #12
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d1eb      	bne.n	8005dcc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005df4:	4b26      	ldr	r3, [pc, #152]	; (8005e90 <HAL_RCC_ClockConfig+0x1c0>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 030f 	and.w	r3, r3, #15
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d210      	bcs.n	8005e24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e02:	4b23      	ldr	r3, [pc, #140]	; (8005e90 <HAL_RCC_ClockConfig+0x1c0>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f023 020f 	bic.w	r2, r3, #15
 8005e0a:	4921      	ldr	r1, [pc, #132]	; (8005e90 <HAL_RCC_ClockConfig+0x1c0>)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e12:	4b1f      	ldr	r3, [pc, #124]	; (8005e90 <HAL_RCC_ClockConfig+0x1c0>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 030f 	and.w	r3, r3, #15
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d001      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e030      	b.n	8005e86 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d008      	beq.n	8005e42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e30:	4b18      	ldr	r3, [pc, #96]	; (8005e94 <HAL_RCC_ClockConfig+0x1c4>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	4915      	ldr	r1, [pc, #84]	; (8005e94 <HAL_RCC_ClockConfig+0x1c4>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0308 	and.w	r3, r3, #8
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d009      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e4e:	4b11      	ldr	r3, [pc, #68]	; (8005e94 <HAL_RCC_ClockConfig+0x1c4>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	00db      	lsls	r3, r3, #3
 8005e5c:	490d      	ldr	r1, [pc, #52]	; (8005e94 <HAL_RCC_ClockConfig+0x1c4>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e62:	f000 f81d 	bl	8005ea0 <HAL_RCC_GetSysClockFreq>
 8005e66:	4601      	mov	r1, r0
 8005e68:	4b0a      	ldr	r3, [pc, #40]	; (8005e94 <HAL_RCC_ClockConfig+0x1c4>)
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	091b      	lsrs	r3, r3, #4
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	4a09      	ldr	r2, [pc, #36]	; (8005e98 <HAL_RCC_ClockConfig+0x1c8>)
 8005e74:	5cd3      	ldrb	r3, [r2, r3]
 8005e76:	fa21 f303 	lsr.w	r3, r1, r3
 8005e7a:	4a08      	ldr	r2, [pc, #32]	; (8005e9c <HAL_RCC_ClockConfig+0x1cc>)
 8005e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005e7e:	2000      	movs	r0, #0
 8005e80:	f7fb fdd8 	bl	8001a34 <HAL_InitTick>

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	40023c00 	.word	0x40023c00
 8005e94:	40023800 	.word	0x40023800
 8005e98:	08023d14 	.word	0x08023d14
 8005e9c:	20000004 	.word	0x20000004

08005ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	607b      	str	r3, [r7, #4]
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	2300      	movs	r3, #0
 8005eb0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005eb6:	4b50      	ldr	r3, [pc, #320]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x158>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f003 030c 	and.w	r3, r3, #12
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	d007      	beq.n	8005ed2 <HAL_RCC_GetSysClockFreq+0x32>
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	d008      	beq.n	8005ed8 <HAL_RCC_GetSysClockFreq+0x38>
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f040 808d 	bne.w	8005fe6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ecc:	4b4b      	ldr	r3, [pc, #300]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x15c>)
 8005ece:	60bb      	str	r3, [r7, #8]
       break;
 8005ed0:	e08c      	b.n	8005fec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ed2:	4b4b      	ldr	r3, [pc, #300]	; (8006000 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ed4:	60bb      	str	r3, [r7, #8]
      break;
 8005ed6:	e089      	b.n	8005fec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ed8:	4b47      	ldr	r3, [pc, #284]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x158>)
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ee0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005ee2:	4b45      	ldr	r3, [pc, #276]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d023      	beq.n	8005f36 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eee:	4b42      	ldr	r3, [pc, #264]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	099b      	lsrs	r3, r3, #6
 8005ef4:	f04f 0400 	mov.w	r4, #0
 8005ef8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005efc:	f04f 0200 	mov.w	r2, #0
 8005f00:	ea03 0501 	and.w	r5, r3, r1
 8005f04:	ea04 0602 	and.w	r6, r4, r2
 8005f08:	4a3d      	ldr	r2, [pc, #244]	; (8006000 <HAL_RCC_GetSysClockFreq+0x160>)
 8005f0a:	fb02 f106 	mul.w	r1, r2, r6
 8005f0e:	2200      	movs	r2, #0
 8005f10:	fb02 f205 	mul.w	r2, r2, r5
 8005f14:	440a      	add	r2, r1
 8005f16:	493a      	ldr	r1, [pc, #232]	; (8006000 <HAL_RCC_GetSysClockFreq+0x160>)
 8005f18:	fba5 0101 	umull	r0, r1, r5, r1
 8005f1c:	1853      	adds	r3, r2, r1
 8005f1e:	4619      	mov	r1, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f04f 0400 	mov.w	r4, #0
 8005f26:	461a      	mov	r2, r3
 8005f28:	4623      	mov	r3, r4
 8005f2a:	f7fa f9c1 	bl	80002b0 <__aeabi_uldivmod>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	460c      	mov	r4, r1
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	e049      	b.n	8005fca <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f36:	4b30      	ldr	r3, [pc, #192]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	099b      	lsrs	r3, r3, #6
 8005f3c:	f04f 0400 	mov.w	r4, #0
 8005f40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	ea03 0501 	and.w	r5, r3, r1
 8005f4c:	ea04 0602 	and.w	r6, r4, r2
 8005f50:	4629      	mov	r1, r5
 8005f52:	4632      	mov	r2, r6
 8005f54:	f04f 0300 	mov.w	r3, #0
 8005f58:	f04f 0400 	mov.w	r4, #0
 8005f5c:	0154      	lsls	r4, r2, #5
 8005f5e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f62:	014b      	lsls	r3, r1, #5
 8005f64:	4619      	mov	r1, r3
 8005f66:	4622      	mov	r2, r4
 8005f68:	1b49      	subs	r1, r1, r5
 8005f6a:	eb62 0206 	sbc.w	r2, r2, r6
 8005f6e:	f04f 0300 	mov.w	r3, #0
 8005f72:	f04f 0400 	mov.w	r4, #0
 8005f76:	0194      	lsls	r4, r2, #6
 8005f78:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005f7c:	018b      	lsls	r3, r1, #6
 8005f7e:	1a5b      	subs	r3, r3, r1
 8005f80:	eb64 0402 	sbc.w	r4, r4, r2
 8005f84:	f04f 0100 	mov.w	r1, #0
 8005f88:	f04f 0200 	mov.w	r2, #0
 8005f8c:	00e2      	lsls	r2, r4, #3
 8005f8e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005f92:	00d9      	lsls	r1, r3, #3
 8005f94:	460b      	mov	r3, r1
 8005f96:	4614      	mov	r4, r2
 8005f98:	195b      	adds	r3, r3, r5
 8005f9a:	eb44 0406 	adc.w	r4, r4, r6
 8005f9e:	f04f 0100 	mov.w	r1, #0
 8005fa2:	f04f 0200 	mov.w	r2, #0
 8005fa6:	02a2      	lsls	r2, r4, #10
 8005fa8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005fac:	0299      	lsls	r1, r3, #10
 8005fae:	460b      	mov	r3, r1
 8005fb0:	4614      	mov	r4, r2
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f04f 0400 	mov.w	r4, #0
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	4623      	mov	r3, r4
 8005fc0:	f7fa f976 	bl	80002b0 <__aeabi_uldivmod>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8005fca:	4b0b      	ldr	r3, [pc, #44]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0x158>)
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	0c1b      	lsrs	r3, r3, #16
 8005fd0:	f003 0303 	and.w	r3, r3, #3
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	005b      	lsls	r3, r3, #1
 8005fd8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe2:	60bb      	str	r3, [r7, #8]
      break;
 8005fe4:	e002      	b.n	8005fec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fe6:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <HAL_RCC_GetSysClockFreq+0x15c>)
 8005fe8:	60bb      	str	r3, [r7, #8]
      break;
 8005fea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fec:	68bb      	ldr	r3, [r7, #8]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	00f42400 	.word	0x00f42400
 8006000:	017d7840 	.word	0x017d7840

08006004 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006008:	4b03      	ldr	r3, [pc, #12]	; (8006018 <HAL_RCC_GetHCLKFreq+0x14>)
 800600a:	681b      	ldr	r3, [r3, #0]
}
 800600c:	4618      	mov	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	20000004 	.word	0x20000004

0800601c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006020:	f7ff fff0 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 8006024:	4601      	mov	r1, r0
 8006026:	4b05      	ldr	r3, [pc, #20]	; (800603c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	0a9b      	lsrs	r3, r3, #10
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	4a03      	ldr	r2, [pc, #12]	; (8006040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006032:	5cd3      	ldrb	r3, [r2, r3]
 8006034:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006038:	4618      	mov	r0, r3
 800603a:	bd80      	pop	{r7, pc}
 800603c:	40023800 	.word	0x40023800
 8006040:	08023d24 	.word	0x08023d24

08006044 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	220f      	movs	r2, #15
 8006052:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006054:	4b12      	ldr	r3, [pc, #72]	; (80060a0 <HAL_RCC_GetClockConfig+0x5c>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f003 0203 	and.w	r2, r3, #3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006060:	4b0f      	ldr	r3, [pc, #60]	; (80060a0 <HAL_RCC_GetClockConfig+0x5c>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800606c:	4b0c      	ldr	r3, [pc, #48]	; (80060a0 <HAL_RCC_GetClockConfig+0x5c>)
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006078:	4b09      	ldr	r3, [pc, #36]	; (80060a0 <HAL_RCC_GetClockConfig+0x5c>)
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	08db      	lsrs	r3, r3, #3
 800607e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006086:	4b07      	ldr	r3, [pc, #28]	; (80060a4 <HAL_RCC_GetClockConfig+0x60>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 020f 	and.w	r2, r3, #15
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	601a      	str	r2, [r3, #0]
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	40023800 	.word	0x40023800
 80060a4:	40023c00 	.word	0x40023c00

080060a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b088      	sub	sp, #32
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80060b0:	2300      	movs	r3, #0
 80060b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80060b4:	2300      	movs	r3, #0
 80060b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80060b8:	2300      	movs	r3, #0
 80060ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80060bc:	2300      	movs	r3, #0
 80060be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80060c0:	2300      	movs	r3, #0
 80060c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d012      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060d0:	4b69      	ldr	r3, [pc, #420]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	4a68      	ldr	r2, [pc, #416]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80060da:	6093      	str	r3, [r2, #8]
 80060dc:	4b66      	ldr	r3, [pc, #408]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e4:	4964      	ldr	r1, [pc, #400]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80060f2:	2301      	movs	r3, #1
 80060f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d017      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006102:	4b5d      	ldr	r3, [pc, #372]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006108:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006110:	4959      	ldr	r1, [pc, #356]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006112:	4313      	orrs	r3, r2
 8006114:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006120:	d101      	bne.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006122:	2301      	movs	r3, #1
 8006124:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800612e:	2301      	movs	r3, #1
 8006130:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d017      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800613e:	4b4e      	ldr	r3, [pc, #312]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006144:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614c:	494a      	ldr	r1, [pc, #296]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800614e:	4313      	orrs	r3, r2
 8006150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006158:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800615c:	d101      	bne.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800615e:	2301      	movs	r3, #1
 8006160:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800616a:	2301      	movs	r3, #1
 800616c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800617a:	2301      	movs	r3, #1
 800617c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b00      	cmp	r3, #0
 8006188:	f000 808b 	beq.w	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800618c:	4b3a      	ldr	r3, [pc, #232]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800618e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006190:	4a39      	ldr	r2, [pc, #228]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006196:	6413      	str	r3, [r2, #64]	; 0x40
 8006198:	4b37      	ldr	r3, [pc, #220]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800619a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a0:	60bb      	str	r3, [r7, #8]
 80061a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80061a4:	4b35      	ldr	r3, [pc, #212]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a34      	ldr	r2, [pc, #208]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061b0:	f7fc fa60 	bl	8002674 <HAL_GetTick>
 80061b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80061b6:	e008      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061b8:	f7fc fa5c 	bl	8002674 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b64      	cmp	r3, #100	; 0x64
 80061c4:	d901      	bls.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e355      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80061ca:	4b2c      	ldr	r3, [pc, #176]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d0f0      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061d6:	4b28      	ldr	r3, [pc, #160]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d035      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d02e      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061f4:	4b20      	ldr	r3, [pc, #128]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061fe:	4b1e      	ldr	r3, [pc, #120]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006202:	4a1d      	ldr	r2, [pc, #116]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006208:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800620a:	4b1b      	ldr	r3, [pc, #108]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800620c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620e:	4a1a      	ldr	r2, [pc, #104]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006214:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006216:	4a18      	ldr	r2, [pc, #96]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800621c:	4b16      	ldr	r3, [pc, #88]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800621e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b01      	cmp	r3, #1
 8006226:	d114      	bne.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006228:	f7fc fa24 	bl	8002674 <HAL_GetTick>
 800622c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800622e:	e00a      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006230:	f7fc fa20 	bl	8002674 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	f241 3288 	movw	r2, #5000	; 0x1388
 800623e:	4293      	cmp	r3, r2
 8006240:	d901      	bls.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e317      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006246:	4b0c      	ldr	r3, [pc, #48]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0ee      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800625a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800625e:	d111      	bne.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006260:	4b05      	ldr	r3, [pc, #20]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800626c:	4b04      	ldr	r3, [pc, #16]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800626e:	400b      	ands	r3, r1
 8006270:	4901      	ldr	r1, [pc, #4]	; (8006278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006272:	4313      	orrs	r3, r2
 8006274:	608b      	str	r3, [r1, #8]
 8006276:	e00b      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006278:	40023800 	.word	0x40023800
 800627c:	40007000 	.word	0x40007000
 8006280:	0ffffcff 	.word	0x0ffffcff
 8006284:	4bb0      	ldr	r3, [pc, #704]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	4aaf      	ldr	r2, [pc, #700]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800628a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800628e:	6093      	str	r3, [r2, #8]
 8006290:	4bad      	ldr	r3, [pc, #692]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006292:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800629c:	49aa      	ldr	r1, [pc, #680]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0310 	and.w	r3, r3, #16
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d010      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80062ae:	4ba6      	ldr	r3, [pc, #664]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062b4:	4aa4      	ldr	r2, [pc, #656]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80062be:	4ba2      	ldr	r3, [pc, #648]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c8:	499f      	ldr	r1, [pc, #636]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00a      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062dc:	4b9a      	ldr	r3, [pc, #616]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ea:	4997      	ldr	r1, [pc, #604]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00a      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062fe:	4b92      	ldr	r3, [pc, #584]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006304:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800630c:	498e      	ldr	r1, [pc, #568]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800630e:	4313      	orrs	r3, r2
 8006310:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00a      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006320:	4b89      	ldr	r3, [pc, #548]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006326:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800632e:	4986      	ldr	r1, [pc, #536]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006330:	4313      	orrs	r3, r2
 8006332:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00a      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006342:	4b81      	ldr	r3, [pc, #516]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006348:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006350:	497d      	ldr	r1, [pc, #500]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006352:	4313      	orrs	r3, r2
 8006354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00a      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006364:	4b78      	ldr	r3, [pc, #480]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636a:	f023 0203 	bic.w	r2, r3, #3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006372:	4975      	ldr	r1, [pc, #468]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006374:	4313      	orrs	r3, r2
 8006376:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00a      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006386:	4b70      	ldr	r3, [pc, #448]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638c:	f023 020c 	bic.w	r2, r3, #12
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006394:	496c      	ldr	r1, [pc, #432]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006396:	4313      	orrs	r3, r2
 8006398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063a8:	4b67      	ldr	r3, [pc, #412]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063b6:	4964      	ldr	r1, [pc, #400]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063ca:	4b5f      	ldr	r3, [pc, #380]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d8:	495b      	ldr	r1, [pc, #364]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00a      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063ec:	4b56      	ldr	r3, [pc, #344]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063fa:	4953      	ldr	r1, [pc, #332]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00a      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800640e:	4b4e      	ldr	r3, [pc, #312]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006414:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800641c:	494a      	ldr	r1, [pc, #296]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800641e:	4313      	orrs	r3, r2
 8006420:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00a      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006430:	4b45      	ldr	r3, [pc, #276]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006436:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800643e:	4942      	ldr	r1, [pc, #264]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006440:	4313      	orrs	r3, r2
 8006442:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00a      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006452:	4b3d      	ldr	r3, [pc, #244]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006458:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006460:	4939      	ldr	r1, [pc, #228]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006462:	4313      	orrs	r3, r2
 8006464:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00a      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006474:	4b34      	ldr	r3, [pc, #208]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006482:	4931      	ldr	r1, [pc, #196]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006484:	4313      	orrs	r3, r2
 8006486:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d011      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006496:	4b2c      	ldr	r3, [pc, #176]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800649c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064a4:	4928      	ldr	r1, [pc, #160]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064b4:	d101      	bne.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80064b6:	2301      	movs	r3, #1
 80064b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0308 	and.w	r3, r3, #8
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d001      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80064c6:	2301      	movs	r3, #1
 80064c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064d6:	4b1c      	ldr	r3, [pc, #112]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064e4:	4918      	ldr	r1, [pc, #96]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00b      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80064f8:	4b13      	ldr	r3, [pc, #76]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006508:	490f      	ldr	r1, [pc, #60]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800650a:	4313      	orrs	r3, r2
 800650c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d005      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800651e:	f040 80d8 	bne.w	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006522:	4b09      	ldr	r3, [pc, #36]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a08      	ldr	r2, [pc, #32]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006528:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800652c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800652e:	f7fc f8a1 	bl	8002674 <HAL_GetTick>
 8006532:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006534:	e00a      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006536:	f7fc f89d 	bl	8002674 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b64      	cmp	r3, #100	; 0x64
 8006542:	d903      	bls.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e196      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006548:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800654c:	4b6c      	ldr	r3, [pc, #432]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1ee      	bne.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d021      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006568:	2b00      	cmp	r3, #0
 800656a:	d11d      	bne.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800656c:	4b64      	ldr	r3, [pc, #400]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800656e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006572:	0c1b      	lsrs	r3, r3, #16
 8006574:	f003 0303 	and.w	r3, r3, #3
 8006578:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800657a:	4b61      	ldr	r3, [pc, #388]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800657c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006580:	0e1b      	lsrs	r3, r3, #24
 8006582:	f003 030f 	and.w	r3, r3, #15
 8006586:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	019a      	lsls	r2, r3, #6
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	041b      	lsls	r3, r3, #16
 8006592:	431a      	orrs	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	061b      	lsls	r3, r3, #24
 8006598:	431a      	orrs	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	071b      	lsls	r3, r3, #28
 80065a0:	4957      	ldr	r1, [pc, #348]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d004      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x516>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065bc:	d00a      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d02e      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065d2:	d129      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80065d4:	4b4a      	ldr	r3, [pc, #296]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065da:	0c1b      	lsrs	r3, r3, #16
 80065dc:	f003 0303 	and.w	r3, r3, #3
 80065e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80065e2:	4b47      	ldr	r3, [pc, #284]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80065e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065e8:	0f1b      	lsrs	r3, r3, #28
 80065ea:	f003 0307 	and.w	r3, r3, #7
 80065ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	019a      	lsls	r2, r3, #6
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	041b      	lsls	r3, r3, #16
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	061b      	lsls	r3, r3, #24
 8006602:	431a      	orrs	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	071b      	lsls	r3, r3, #28
 8006608:	493d      	ldr	r1, [pc, #244]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800660a:	4313      	orrs	r3, r2
 800660c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006610:	4b3b      	ldr	r3, [pc, #236]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006616:	f023 021f 	bic.w	r2, r3, #31
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	3b01      	subs	r3, #1
 8006620:	4937      	ldr	r1, [pc, #220]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006622:	4313      	orrs	r3, r2
 8006624:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d01d      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006634:	4b32      	ldr	r3, [pc, #200]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800663a:	0e1b      	lsrs	r3, r3, #24
 800663c:	f003 030f 	and.w	r3, r3, #15
 8006640:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006642:	4b2f      	ldr	r3, [pc, #188]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006648:	0f1b      	lsrs	r3, r3, #28
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	019a      	lsls	r2, r3, #6
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	041b      	lsls	r3, r3, #16
 800665c:	431a      	orrs	r2, r3
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	061b      	lsls	r3, r3, #24
 8006662:	431a      	orrs	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	071b      	lsls	r3, r3, #28
 8006668:	4925      	ldr	r1, [pc, #148]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800666a:	4313      	orrs	r3, r2
 800666c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d011      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	019a      	lsls	r2, r3, #6
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	041b      	lsls	r3, r3, #16
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	061b      	lsls	r3, r3, #24
 8006690:	431a      	orrs	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	071b      	lsls	r3, r3, #28
 8006698:	4919      	ldr	r1, [pc, #100]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800669a:	4313      	orrs	r3, r2
 800669c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066a0:	4b17      	ldr	r3, [pc, #92]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a16      	ldr	r2, [pc, #88]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066ac:	f7fb ffe2 	bl	8002674 <HAL_GetTick>
 80066b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066b2:	e008      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80066b4:	f7fb ffde 	bl	8002674 <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	2b64      	cmp	r3, #100	; 0x64
 80066c0:	d901      	bls.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e0d7      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066c6:	4b0e      	ldr	r3, [pc, #56]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0f0      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	f040 80cd 	bne.w	8006874 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80066da:	4b09      	ldr	r3, [pc, #36]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a08      	ldr	r2, [pc, #32]	; (8006700 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80066e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066e6:	f7fb ffc5 	bl	8002674 <HAL_GetTick>
 80066ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066ec:	e00a      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80066ee:	f7fb ffc1 	bl	8002674 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	2b64      	cmp	r3, #100	; 0x64
 80066fa:	d903      	bls.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e0ba      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006700:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006704:	4b5e      	ldr	r3, [pc, #376]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800670c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006710:	d0ed      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006722:	2b00      	cmp	r3, #0
 8006724:	d009      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800672e:	2b00      	cmp	r3, #0
 8006730:	d02e      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006736:	2b00      	cmp	r3, #0
 8006738:	d12a      	bne.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800673a:	4b51      	ldr	r3, [pc, #324]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800673c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006740:	0c1b      	lsrs	r3, r3, #16
 8006742:	f003 0303 	and.w	r3, r3, #3
 8006746:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006748:	4b4d      	ldr	r3, [pc, #308]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800674a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800674e:	0f1b      	lsrs	r3, r3, #28
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	019a      	lsls	r2, r3, #6
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	041b      	lsls	r3, r3, #16
 8006760:	431a      	orrs	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	061b      	lsls	r3, r3, #24
 8006768:	431a      	orrs	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	071b      	lsls	r3, r3, #28
 800676e:	4944      	ldr	r1, [pc, #272]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006770:	4313      	orrs	r3, r2
 8006772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006776:	4b42      	ldr	r3, [pc, #264]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800677c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006784:	3b01      	subs	r3, #1
 8006786:	021b      	lsls	r3, r3, #8
 8006788:	493d      	ldr	r1, [pc, #244]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800678a:	4313      	orrs	r3, r2
 800678c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d022      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067a4:	d11d      	bne.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067a6:	4b36      	ldr	r3, [pc, #216]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ac:	0e1b      	lsrs	r3, r3, #24
 80067ae:	f003 030f 	and.w	r3, r3, #15
 80067b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067b4:	4b32      	ldr	r3, [pc, #200]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ba:	0f1b      	lsrs	r3, r3, #28
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	019a      	lsls	r2, r3, #6
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a1b      	ldr	r3, [r3, #32]
 80067cc:	041b      	lsls	r3, r3, #16
 80067ce:	431a      	orrs	r2, r3
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	061b      	lsls	r3, r3, #24
 80067d4:	431a      	orrs	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	071b      	lsls	r3, r3, #28
 80067da:	4929      	ldr	r1, [pc, #164]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0308 	and.w	r3, r3, #8
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d028      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067ee:	4b24      	ldr	r3, [pc, #144]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f4:	0e1b      	lsrs	r3, r3, #24
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80067fc:	4b20      	ldr	r3, [pc, #128]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80067fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006802:	0c1b      	lsrs	r3, r3, #16
 8006804:	f003 0303 	and.w	r3, r3, #3
 8006808:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	019a      	lsls	r2, r3, #6
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	041b      	lsls	r3, r3, #16
 8006814:	431a      	orrs	r2, r3
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	061b      	lsls	r3, r3, #24
 800681a:	431a      	orrs	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	071b      	lsls	r3, r3, #28
 8006822:	4917      	ldr	r1, [pc, #92]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006824:	4313      	orrs	r3, r2
 8006826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800682a:	4b15      	ldr	r3, [pc, #84]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800682c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006830:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006838:	4911      	ldr	r1, [pc, #68]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800683a:	4313      	orrs	r3, r2
 800683c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006840:	4b0f      	ldr	r3, [pc, #60]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a0e      	ldr	r2, [pc, #56]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800684a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800684c:	f7fb ff12 	bl	8002674 <HAL_GetTick>
 8006850:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006852:	e008      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006854:	f7fb ff0e 	bl	8002674 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b64      	cmp	r3, #100	; 0x64
 8006860:	d901      	bls.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e007      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006866:	4b06      	ldr	r3, [pc, #24]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800686e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006872:	d1ef      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3720      	adds	r7, #32
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	40023800 	.word	0x40023800

08006884 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e025      	b.n	80068e4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d106      	bne.n	80068b2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7fb f8b7 	bl	8001a20 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2202      	movs	r2, #2
 80068b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	3304      	adds	r3, #4
 80068c2:	4619      	mov	r1, r3
 80068c4:	4610      	mov	r0, r2
 80068c6:	f000 fac1 	bl	8006e4c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6818      	ldr	r0, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	461a      	mov	r2, r3
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	f000 fb2b 	bl	8006f30 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b02      	cmp	r3, #2
 8006902:	d101      	bne.n	8006908 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006904:	2302      	movs	r3, #2
 8006906:	e018      	b.n	800693a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	68b9      	ldr	r1, [r7, #8]
 8006918:	4618      	mov	r0, r3
 800691a:	f000 fb89 	bl	8007030 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b02      	cmp	r3, #2
 8006924:	d104      	bne.n	8006930 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2205      	movs	r2, #5
 800692a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800692e:	e003      	b.n	8006938 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b082      	sub	sp, #8
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b02      	cmp	r3, #2
 8006956:	d101      	bne.n	800695c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006958:	2302      	movs	r3, #2
 800695a:	e00e      	b.n	800697a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6839      	ldr	r1, [r7, #0]
 800696a:	4618      	mov	r0, r3
 800696c:	f000 fb81 	bl	8007072 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b082      	sub	sp, #8
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e01d      	b.n	80069d0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	d106      	bne.n	80069ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f815 	bl	80069d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2202      	movs	r2, #2
 80069b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	3304      	adds	r3, #4
 80069be:	4619      	mov	r1, r3
 80069c0:	4610      	mov	r0, r2
 80069c2:	f000 f985 	bl	8006cd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68da      	ldr	r2, [r3, #12]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0201 	orr.w	r2, r2, #1
 8006a02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689a      	ldr	r2, [r3, #8]
 8006a0a:	4b0c      	ldr	r3, [pc, #48]	; (8006a3c <HAL_TIM_Base_Start_IT+0x50>)
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2b06      	cmp	r3, #6
 8006a14:	d00b      	beq.n	8006a2e <HAL_TIM_Base_Start_IT+0x42>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a1c:	d007      	beq.n	8006a2e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f042 0201 	orr.w	r2, r2, #1
 8006a2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	00010007 	.word	0x00010007

08006a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d122      	bne.n	8006a9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d11b      	bne.n	8006a9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f06f 0202 	mvn.w	r2, #2
 8006a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f905 	bl	8006c92 <HAL_TIM_IC_CaptureCallback>
 8006a88:	e005      	b.n	8006a96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f8f7 	bl	8006c7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f908 	bl	8006ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	f003 0304 	and.w	r3, r3, #4
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d122      	bne.n	8006af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f003 0304 	and.w	r3, r3, #4
 8006ab4:	2b04      	cmp	r3, #4
 8006ab6:	d11b      	bne.n	8006af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f06f 0204 	mvn.w	r2, #4
 8006ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f8db 	bl	8006c92 <HAL_TIM_IC_CaptureCallback>
 8006adc:	e005      	b.n	8006aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f8cd 	bl	8006c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f8de 	bl	8006ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	f003 0308 	and.w	r3, r3, #8
 8006afa:	2b08      	cmp	r3, #8
 8006afc:	d122      	bne.n	8006b44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f003 0308 	and.w	r3, r3, #8
 8006b08:	2b08      	cmp	r3, #8
 8006b0a:	d11b      	bne.n	8006b44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f06f 0208 	mvn.w	r2, #8
 8006b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2204      	movs	r2, #4
 8006b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	f003 0303 	and.w	r3, r3, #3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f8b1 	bl	8006c92 <HAL_TIM_IC_CaptureCallback>
 8006b30:	e005      	b.n	8006b3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f8a3 	bl	8006c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f8b4 	bl	8006ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	f003 0310 	and.w	r3, r3, #16
 8006b4e:	2b10      	cmp	r3, #16
 8006b50:	d122      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f003 0310 	and.w	r3, r3, #16
 8006b5c:	2b10      	cmp	r3, #16
 8006b5e:	d11b      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f06f 0210 	mvn.w	r2, #16
 8006b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2208      	movs	r2, #8
 8006b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f887 	bl	8006c92 <HAL_TIM_IC_CaptureCallback>
 8006b84:	e005      	b.n	8006b92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f879 	bl	8006c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f88a 	bl	8006ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d10e      	bne.n	8006bc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d107      	bne.n	8006bc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f06f 0201 	mvn.w	r2, #1
 8006bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7fa fc18 	bl	80013f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bce:	2b80      	cmp	r3, #128	; 0x80
 8006bd0:	d10e      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bdc:	2b80      	cmp	r3, #128	; 0x80
 8006bde:	d107      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f91a 	bl	8006e24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bfe:	d10e      	bne.n	8006c1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0a:	2b80      	cmp	r3, #128	; 0x80
 8006c0c:	d107      	bne.n	8006c1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f90d 	bl	8006e38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c28:	2b40      	cmp	r3, #64	; 0x40
 8006c2a:	d10e      	bne.n	8006c4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c36:	2b40      	cmp	r3, #64	; 0x40
 8006c38:	d107      	bne.n	8006c4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f838 	bl	8006cba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	f003 0320 	and.w	r3, r3, #32
 8006c54:	2b20      	cmp	r3, #32
 8006c56:	d10e      	bne.n	8006c76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	2b20      	cmp	r3, #32
 8006c64:	d107      	bne.n	8006c76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f06f 0220 	mvn.w	r2, #32
 8006c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 f8cd 	bl	8006e10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c76:	bf00      	nop
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b083      	sub	sp, #12
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c86:	bf00      	nop
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c9a:	bf00      	nop
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b083      	sub	sp, #12
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cae:	bf00      	nop
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b083      	sub	sp, #12
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cc2:	bf00      	nop
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
	...

08006cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a40      	ldr	r2, [pc, #256]	; (8006de4 <TIM_Base_SetConfig+0x114>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d013      	beq.n	8006d10 <TIM_Base_SetConfig+0x40>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cee:	d00f      	beq.n	8006d10 <TIM_Base_SetConfig+0x40>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a3d      	ldr	r2, [pc, #244]	; (8006de8 <TIM_Base_SetConfig+0x118>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d00b      	beq.n	8006d10 <TIM_Base_SetConfig+0x40>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a3c      	ldr	r2, [pc, #240]	; (8006dec <TIM_Base_SetConfig+0x11c>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d007      	beq.n	8006d10 <TIM_Base_SetConfig+0x40>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a3b      	ldr	r2, [pc, #236]	; (8006df0 <TIM_Base_SetConfig+0x120>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d003      	beq.n	8006d10 <TIM_Base_SetConfig+0x40>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a3a      	ldr	r2, [pc, #232]	; (8006df4 <TIM_Base_SetConfig+0x124>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d108      	bne.n	8006d22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a2f      	ldr	r2, [pc, #188]	; (8006de4 <TIM_Base_SetConfig+0x114>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d02b      	beq.n	8006d82 <TIM_Base_SetConfig+0xb2>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d30:	d027      	beq.n	8006d82 <TIM_Base_SetConfig+0xb2>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a2c      	ldr	r2, [pc, #176]	; (8006de8 <TIM_Base_SetConfig+0x118>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d023      	beq.n	8006d82 <TIM_Base_SetConfig+0xb2>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a2b      	ldr	r2, [pc, #172]	; (8006dec <TIM_Base_SetConfig+0x11c>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d01f      	beq.n	8006d82 <TIM_Base_SetConfig+0xb2>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a2a      	ldr	r2, [pc, #168]	; (8006df0 <TIM_Base_SetConfig+0x120>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d01b      	beq.n	8006d82 <TIM_Base_SetConfig+0xb2>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a29      	ldr	r2, [pc, #164]	; (8006df4 <TIM_Base_SetConfig+0x124>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d017      	beq.n	8006d82 <TIM_Base_SetConfig+0xb2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a28      	ldr	r2, [pc, #160]	; (8006df8 <TIM_Base_SetConfig+0x128>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d013      	beq.n	8006d82 <TIM_Base_SetConfig+0xb2>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a27      	ldr	r2, [pc, #156]	; (8006dfc <TIM_Base_SetConfig+0x12c>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d00f      	beq.n	8006d82 <TIM_Base_SetConfig+0xb2>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a26      	ldr	r2, [pc, #152]	; (8006e00 <TIM_Base_SetConfig+0x130>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d00b      	beq.n	8006d82 <TIM_Base_SetConfig+0xb2>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a25      	ldr	r2, [pc, #148]	; (8006e04 <TIM_Base_SetConfig+0x134>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d007      	beq.n	8006d82 <TIM_Base_SetConfig+0xb2>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a24      	ldr	r2, [pc, #144]	; (8006e08 <TIM_Base_SetConfig+0x138>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d003      	beq.n	8006d82 <TIM_Base_SetConfig+0xb2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a23      	ldr	r2, [pc, #140]	; (8006e0c <TIM_Base_SetConfig+0x13c>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d108      	bne.n	8006d94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	689a      	ldr	r2, [r3, #8]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a0a      	ldr	r2, [pc, #40]	; (8006de4 <TIM_Base_SetConfig+0x114>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d003      	beq.n	8006dc8 <TIM_Base_SetConfig+0xf8>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a0c      	ldr	r2, [pc, #48]	; (8006df4 <TIM_Base_SetConfig+0x124>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d103      	bne.n	8006dd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	691a      	ldr	r2, [r3, #16]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	615a      	str	r2, [r3, #20]
}
 8006dd6:	bf00      	nop
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	40010000 	.word	0x40010000
 8006de8:	40000400 	.word	0x40000400
 8006dec:	40000800 	.word	0x40000800
 8006df0:	40000c00 	.word	0x40000c00
 8006df4:	40010400 	.word	0x40010400
 8006df8:	40014000 	.word	0x40014000
 8006dfc:	40014400 	.word	0x40014400
 8006e00:	40014800 	.word	0x40014800
 8006e04:	40001800 	.word	0x40001800
 8006e08:	40001c00 	.word	0x40001c00
 8006e0c:	40002000 	.word	0x40002000

08006e10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8006e56:	2300      	movs	r3, #0
 8006e58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d027      	beq.n	8006eb6 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	4b2f      	ldr	r3, [pc, #188]	; (8006f2c <FMC_SDRAM_Init+0xe0>)
 8006e70:	4013      	ands	r3, r2
 8006e72:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006e7c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8006e82:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8006e88:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8006e8e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8006e94:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8006e9a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8006ea0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006ea6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	e032      	b.n	8006f1c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ec2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006ecc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006ed2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	4b12      	ldr	r3, [pc, #72]	; (8006f2c <FMC_SDRAM_Init+0xe0>)
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006ef0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8006ef6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8006efc:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8006f02:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8006f08:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	ffff8000 	.word	0xffff8000

08006f30 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8006f40:	2300      	movs	r3, #0
 8006f42:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d02e      	beq.n	8006fa8 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006f56:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	3b01      	subs	r3, #1
 8006f64:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006f66:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006f70:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006f7a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	3b01      	subs	r3, #1
 8006f82:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8006f84:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006f8e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	3b01      	subs	r3, #1
 8006f96:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	609a      	str	r2, [r3, #8]
 8006fa6:	e039      	b.n	800701c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	4b1e      	ldr	r3, [pc, #120]	; (800702c <FMC_SDRAM_Timing_Init+0xfc>)
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006fda:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006fea:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8006ff4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006ffe:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	3b01      	subs	r3, #1
 8007006:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007008:	4313      	orrs	r3, r2
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	4313      	orrs	r3, r2
 800700e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	371c      	adds	r7, #28
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	ff0f0fff 	.word	0xff0f0fff

08007030 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007030:	b480      	push	{r7}
 8007032:	b087      	sub	sp, #28
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800703c:	2300      	movs	r3, #0
 800703e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007048:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	3b01      	subs	r3, #1
 8007050:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8007052:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800705a:	4313      	orrs	r3, r2
 800705c:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	371c      	adds	r7, #28
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007072:	b480      	push	{r7}
 8007074:	b083      	sub	sp, #12
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	695a      	ldr	r2, [r3, #20]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	005b      	lsls	r3, r3, #1
 8007084:	431a      	orrs	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	4603      	mov	r3, r0
 80070a0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80070a2:	2300      	movs	r3, #0
 80070a4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80070a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070aa:	2b84      	cmp	r3, #132	; 0x84
 80070ac:	d005      	beq.n	80070ba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80070ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	4413      	add	r3, r2
 80070b6:	3303      	adds	r3, #3
 80070b8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80070ba:	68fb      	ldr	r3, [r7, #12]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80070cc:	f001 f86c 	bl	80081a8 <vTaskStartScheduler>
  
  return osOK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80070d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070d8:	b087      	sub	sp, #28
 80070da:	af02      	add	r7, sp, #8
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685c      	ldr	r4, [r3, #4]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070ec:	b29e      	uxth	r6, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7ff ffcf 	bl	8007098 <makeFreeRtosPriority>
 80070fa:	4602      	mov	r2, r0
 80070fc:	f107 030c 	add.w	r3, r7, #12
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	9200      	str	r2, [sp, #0]
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	4632      	mov	r2, r6
 8007108:	4629      	mov	r1, r5
 800710a:	4620      	mov	r0, r4
 800710c:	f000 fee0 	bl	8007ed0 <xTaskCreate>
 8007110:	4603      	mov	r3, r0
 8007112:	2b01      	cmp	r3, #1
 8007114:	d001      	beq.n	800711a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8007116:	2300      	movs	r3, #0
 8007118:	e000      	b.n	800711c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800711a:	68fb      	ldr	r3, [r7, #12]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3714      	adds	r7, #20
 8007120:	46bd      	mov	sp, r7
 8007122:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007124 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <osDelay+0x16>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	e000      	b.n	800713c <osDelay+0x18>
 800713a:	2301      	movs	r3, #1
 800713c:	4618      	mov	r0, r3
 800713e:	f000 fffd 	bl	800813c <vTaskDelay>
  
  return osOK;
 8007142:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f103 0208 	add.w	r2, r3, #8
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007164:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f103 0208 	add.w	r2, r3, #8
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f103 0208 	add.w	r2, r3, #8
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800719a:	bf00      	nop
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071a6:	b480      	push	{r7}
 80071a8:	b085      	sub	sp, #20
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	1c5a      	adds	r2, r3, #1
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	601a      	str	r2, [r3, #0]
}
 80071e2:	bf00      	nop
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071ee:	b480      	push	{r7}
 80071f0:	b085      	sub	sp, #20
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007204:	d103      	bne.n	800720e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	60fb      	str	r3, [r7, #12]
 800720c:	e00c      	b.n	8007228 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	3308      	adds	r3, #8
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	e002      	b.n	800721c <vListInsert+0x2e>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	60fb      	str	r3, [r7, #12]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	429a      	cmp	r2, r3
 8007226:	d2f6      	bcs.n	8007216 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	601a      	str	r2, [r3, #0]
}
 8007254:	bf00      	nop
 8007256:	3714      	adds	r7, #20
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	6892      	ldr	r2, [r2, #8]
 8007276:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	6852      	ldr	r2, [r2, #4]
 8007280:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	429a      	cmp	r2, r3
 800728a:	d103      	bne.n	8007294 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	1e5a      	subs	r2, r3, #1
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3714      	adds	r7, #20
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10b      	bne.n	80072e0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80072c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072cc:	b672      	cpsid	i
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	b662      	cpsie	i
 80072dc:	60bb      	str	r3, [r7, #8]
 80072de:	e7fe      	b.n	80072de <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80072e0:	f001 feb2 	bl	8009048 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ec:	68f9      	ldr	r1, [r7, #12]
 80072ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80072f0:	fb01 f303 	mul.w	r3, r1, r3
 80072f4:	441a      	add	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007310:	3b01      	subs	r3, #1
 8007312:	68f9      	ldr	r1, [r7, #12]
 8007314:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007316:	fb01 f303 	mul.w	r3, r1, r3
 800731a:	441a      	add	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	22ff      	movs	r2, #255	; 0xff
 8007324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	22ff      	movs	r2, #255	; 0xff
 800732c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d114      	bne.n	8007360 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d01a      	beq.n	8007374 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	3310      	adds	r3, #16
 8007342:	4618      	mov	r0, r3
 8007344:	f001 f98c 	bl	8008660 <xTaskRemoveFromEventList>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d012      	beq.n	8007374 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800734e:	4b0d      	ldr	r3, [pc, #52]	; (8007384 <xQueueGenericReset+0xd0>)
 8007350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007354:	601a      	str	r2, [r3, #0]
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	e009      	b.n	8007374 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	3310      	adds	r3, #16
 8007364:	4618      	mov	r0, r3
 8007366:	f7ff fef1 	bl	800714c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	3324      	adds	r3, #36	; 0x24
 800736e:	4618      	mov	r0, r3
 8007370:	f7ff feec 	bl	800714c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007374:	f001 fe9a 	bl	80090ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007378:	2301      	movs	r3, #1
}
 800737a:	4618      	mov	r0, r3
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	e000ed04 	.word	0xe000ed04

08007388 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007388:	b580      	push	{r7, lr}
 800738a:	b08a      	sub	sp, #40	; 0x28
 800738c:	af02      	add	r7, sp, #8
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	4613      	mov	r3, r2
 8007394:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10b      	bne.n	80073b4 <xQueueGenericCreate+0x2c>
 800739c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a0:	b672      	cpsid	i
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	b662      	cpsie	i
 80073b0:	613b      	str	r3, [r7, #16]
 80073b2:	e7fe      	b.n	80073b2 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d102      	bne.n	80073c0 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80073ba:	2300      	movs	r3, #0
 80073bc:	61fb      	str	r3, [r7, #28]
 80073be:	e004      	b.n	80073ca <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	fb02 f303 	mul.w	r3, r2, r3
 80073c8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	3348      	adds	r3, #72	; 0x48
 80073ce:	4618      	mov	r0, r3
 80073d0:	f001 ff5c 	bl	800928c <pvPortMalloc>
 80073d4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00b      	beq.n	80073f4 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	3348      	adds	r3, #72	; 0x48
 80073e0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073e2:	79fa      	ldrb	r2, [r7, #7]
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	4613      	mov	r3, r2
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	68b9      	ldr	r1, [r7, #8]
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 f805 	bl	80073fe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80073f4:	69bb      	ldr	r3, [r7, #24]
	}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3720      	adds	r7, #32
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b084      	sub	sp, #16
 8007402:	af00      	add	r7, sp, #0
 8007404:	60f8      	str	r0, [r7, #12]
 8007406:	60b9      	str	r1, [r7, #8]
 8007408:	607a      	str	r2, [r7, #4]
 800740a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d103      	bne.n	800741a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	e002      	b.n	8007420 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800742c:	2101      	movs	r1, #1
 800742e:	69b8      	ldr	r0, [r7, #24]
 8007430:	f7ff ff40 	bl	80072b4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007434:	bf00      	nop
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b08e      	sub	sp, #56	; 0x38
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
 8007448:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800744a:	2300      	movs	r3, #0
 800744c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10b      	bne.n	8007470 <xQueueGenericSend+0x34>
 8007458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745c:	b672      	cpsid	i
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	b662      	cpsie	i
 800746c:	62bb      	str	r3, [r7, #40]	; 0x28
 800746e:	e7fe      	b.n	800746e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d103      	bne.n	800747e <xQueueGenericSend+0x42>
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <xQueueGenericSend+0x46>
 800747e:	2301      	movs	r3, #1
 8007480:	e000      	b.n	8007484 <xQueueGenericSend+0x48>
 8007482:	2300      	movs	r3, #0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10b      	bne.n	80074a0 <xQueueGenericSend+0x64>
 8007488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748c:	b672      	cpsid	i
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	b662      	cpsie	i
 800749c:	627b      	str	r3, [r7, #36]	; 0x24
 800749e:	e7fe      	b.n	800749e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d103      	bne.n	80074ae <xQueueGenericSend+0x72>
 80074a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d101      	bne.n	80074b2 <xQueueGenericSend+0x76>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e000      	b.n	80074b4 <xQueueGenericSend+0x78>
 80074b2:	2300      	movs	r3, #0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10b      	bne.n	80074d0 <xQueueGenericSend+0x94>
 80074b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074bc:	b672      	cpsid	i
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	b662      	cpsie	i
 80074cc:	623b      	str	r3, [r7, #32]
 80074ce:	e7fe      	b.n	80074ce <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074d0:	f001 fa6c 	bl	80089ac <xTaskGetSchedulerState>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d102      	bne.n	80074e0 <xQueueGenericSend+0xa4>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <xQueueGenericSend+0xa8>
 80074e0:	2301      	movs	r3, #1
 80074e2:	e000      	b.n	80074e6 <xQueueGenericSend+0xaa>
 80074e4:	2300      	movs	r3, #0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10b      	bne.n	8007502 <xQueueGenericSend+0xc6>
 80074ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ee:	b672      	cpsid	i
 80074f0:	f383 8811 	msr	BASEPRI, r3
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	b662      	cpsie	i
 80074fe:	61fb      	str	r3, [r7, #28]
 8007500:	e7fe      	b.n	8007500 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007502:	f001 fda1 	bl	8009048 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800750a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750e:	429a      	cmp	r2, r3
 8007510:	d302      	bcc.n	8007518 <xQueueGenericSend+0xdc>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b02      	cmp	r3, #2
 8007516:	d129      	bne.n	800756c <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	68b9      	ldr	r1, [r7, #8]
 800751c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800751e:	f000 fbc7 	bl	8007cb0 <prvCopyDataToQueue>
 8007522:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007528:	2b00      	cmp	r3, #0
 800752a:	d010      	beq.n	800754e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752e:	3324      	adds	r3, #36	; 0x24
 8007530:	4618      	mov	r0, r3
 8007532:	f001 f895 	bl	8008660 <xTaskRemoveFromEventList>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d013      	beq.n	8007564 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800753c:	4b3f      	ldr	r3, [pc, #252]	; (800763c <xQueueGenericSend+0x200>)
 800753e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	e00a      	b.n	8007564 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800754e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007550:	2b00      	cmp	r3, #0
 8007552:	d007      	beq.n	8007564 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007554:	4b39      	ldr	r3, [pc, #228]	; (800763c <xQueueGenericSend+0x200>)
 8007556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007564:	f001 fda2 	bl	80090ac <vPortExitCritical>
				return pdPASS;
 8007568:	2301      	movs	r3, #1
 800756a:	e063      	b.n	8007634 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d103      	bne.n	800757a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007572:	f001 fd9b 	bl	80090ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007576:	2300      	movs	r3, #0
 8007578:	e05c      	b.n	8007634 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800757a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757c:	2b00      	cmp	r3, #0
 800757e:	d106      	bne.n	800758e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007580:	f107 0314 	add.w	r3, r7, #20
 8007584:	4618      	mov	r0, r3
 8007586:	f001 f8cf 	bl	8008728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800758a:	2301      	movs	r3, #1
 800758c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800758e:	f001 fd8d 	bl	80090ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007592:	f000 fe53 	bl	800823c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007596:	f001 fd57 	bl	8009048 <vPortEnterCritical>
 800759a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075a0:	b25b      	sxtb	r3, r3
 80075a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075a6:	d103      	bne.n	80075b0 <xQueueGenericSend+0x174>
 80075a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075b6:	b25b      	sxtb	r3, r3
 80075b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075bc:	d103      	bne.n	80075c6 <xQueueGenericSend+0x18a>
 80075be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075c6:	f001 fd71 	bl	80090ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075ca:	1d3a      	adds	r2, r7, #4
 80075cc:	f107 0314 	add.w	r3, r7, #20
 80075d0:	4611      	mov	r1, r2
 80075d2:	4618      	mov	r0, r3
 80075d4:	f001 f8be 	bl	8008754 <xTaskCheckForTimeOut>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d124      	bne.n	8007628 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80075de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075e0:	f000 fc5e 	bl	8007ea0 <prvIsQueueFull>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d018      	beq.n	800761c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ec:	3310      	adds	r3, #16
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	4611      	mov	r1, r2
 80075f2:	4618      	mov	r0, r3
 80075f4:	f001 f80e 	bl	8008614 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80075f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075fa:	f000 fbe9 	bl	8007dd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80075fe:	f000 fe2b 	bl	8008258 <xTaskResumeAll>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	f47f af7c 	bne.w	8007502 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800760a:	4b0c      	ldr	r3, [pc, #48]	; (800763c <xQueueGenericSend+0x200>)
 800760c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007610:	601a      	str	r2, [r3, #0]
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	e772      	b.n	8007502 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800761c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800761e:	f000 fbd7 	bl	8007dd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007622:	f000 fe19 	bl	8008258 <xTaskResumeAll>
 8007626:	e76c      	b.n	8007502 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800762a:	f000 fbd1 	bl	8007dd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800762e:	f000 fe13 	bl	8008258 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007632:	2300      	movs	r3, #0
		}
	}
}
 8007634:	4618      	mov	r0, r3
 8007636:	3738      	adds	r7, #56	; 0x38
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	e000ed04 	.word	0xe000ed04

08007640 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b08e      	sub	sp, #56	; 0x38
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
 800764c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10b      	bne.n	8007670 <xQueueGenericSendFromISR+0x30>
 8007658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765c:	b672      	cpsid	i
 800765e:	f383 8811 	msr	BASEPRI, r3
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	b662      	cpsie	i
 800766c:	627b      	str	r3, [r7, #36]	; 0x24
 800766e:	e7fe      	b.n	800766e <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d103      	bne.n	800767e <xQueueGenericSendFromISR+0x3e>
 8007676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <xQueueGenericSendFromISR+0x42>
 800767e:	2301      	movs	r3, #1
 8007680:	e000      	b.n	8007684 <xQueueGenericSendFromISR+0x44>
 8007682:	2300      	movs	r3, #0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10b      	bne.n	80076a0 <xQueueGenericSendFromISR+0x60>
 8007688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768c:	b672      	cpsid	i
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	b662      	cpsie	i
 800769c:	623b      	str	r3, [r7, #32]
 800769e:	e7fe      	b.n	800769e <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d103      	bne.n	80076ae <xQueueGenericSendFromISR+0x6e>
 80076a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d101      	bne.n	80076b2 <xQueueGenericSendFromISR+0x72>
 80076ae:	2301      	movs	r3, #1
 80076b0:	e000      	b.n	80076b4 <xQueueGenericSendFromISR+0x74>
 80076b2:	2300      	movs	r3, #0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10b      	bne.n	80076d0 <xQueueGenericSendFromISR+0x90>
 80076b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076bc:	b672      	cpsid	i
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	b662      	cpsie	i
 80076cc:	61fb      	str	r3, [r7, #28]
 80076ce:	e7fe      	b.n	80076ce <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076d0:	f001 fd9a 	bl	8009208 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80076d4:	f3ef 8211 	mrs	r2, BASEPRI
 80076d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076dc:	b672      	cpsid	i
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	b662      	cpsie	i
 80076ec:	61ba      	str	r2, [r7, #24]
 80076ee:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80076f0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d302      	bcc.n	8007706 <xQueueGenericSendFromISR+0xc6>
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	2b02      	cmp	r3, #2
 8007704:	d12c      	bne.n	8007760 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800770c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007710:	683a      	ldr	r2, [r7, #0]
 8007712:	68b9      	ldr	r1, [r7, #8]
 8007714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007716:	f000 facb 	bl	8007cb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800771a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800771e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007722:	d112      	bne.n	800774a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	2b00      	cmp	r3, #0
 800772a:	d016      	beq.n	800775a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800772c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772e:	3324      	adds	r3, #36	; 0x24
 8007730:	4618      	mov	r0, r3
 8007732:	f000 ff95 	bl	8008660 <xTaskRemoveFromEventList>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00e      	beq.n	800775a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00b      	beq.n	800775a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	601a      	str	r2, [r3, #0]
 8007748:	e007      	b.n	800775a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800774a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800774e:	3301      	adds	r3, #1
 8007750:	b2db      	uxtb	r3, r3
 8007752:	b25a      	sxtb	r2, r3
 8007754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800775a:	2301      	movs	r3, #1
 800775c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800775e:	e001      	b.n	8007764 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007760:	2300      	movs	r3, #0
 8007762:	637b      	str	r3, [r7, #52]	; 0x34
 8007764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007766:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800776e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007770:	4618      	mov	r0, r3
 8007772:	3738      	adds	r7, #56	; 0x38
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b08e      	sub	sp, #56	; 0x38
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10b      	bne.n	80077a4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800778c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007790:	b672      	cpsid	i
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	b662      	cpsie	i
 80077a0:	623b      	str	r3, [r7, #32]
 80077a2:	e7fe      	b.n	80077a2 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80077a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00b      	beq.n	80077c4 <xQueueGiveFromISR+0x4c>
 80077ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b0:	b672      	cpsid	i
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	b662      	cpsie	i
 80077c0:	61fb      	str	r3, [r7, #28]
 80077c2:	e7fe      	b.n	80077c2 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d103      	bne.n	80077d4 <xQueueGiveFromISR+0x5c>
 80077cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d101      	bne.n	80077d8 <xQueueGiveFromISR+0x60>
 80077d4:	2301      	movs	r3, #1
 80077d6:	e000      	b.n	80077da <xQueueGiveFromISR+0x62>
 80077d8:	2300      	movs	r3, #0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10b      	bne.n	80077f6 <xQueueGiveFromISR+0x7e>
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	b672      	cpsid	i
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	b662      	cpsie	i
 80077f2:	61bb      	str	r3, [r7, #24]
 80077f4:	e7fe      	b.n	80077f4 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077f6:	f001 fd07 	bl	8009208 <vPortValidateInterruptPriority>
	__asm volatile
 80077fa:	f3ef 8211 	mrs	r2, BASEPRI
 80077fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007802:	b672      	cpsid	i
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	b662      	cpsie	i
 8007812:	617a      	str	r2, [r7, #20]
 8007814:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007816:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007818:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800781a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007826:	429a      	cmp	r2, r3
 8007828:	d22b      	bcs.n	8007882 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007836:	1c5a      	adds	r2, r3, #1
 8007838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800783c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007844:	d112      	bne.n	800786c <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784a:	2b00      	cmp	r3, #0
 800784c:	d016      	beq.n	800787c <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800784e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007850:	3324      	adds	r3, #36	; 0x24
 8007852:	4618      	mov	r0, r3
 8007854:	f000 ff04 	bl	8008660 <xTaskRemoveFromEventList>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00e      	beq.n	800787c <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00b      	beq.n	800787c <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	2201      	movs	r2, #1
 8007868:	601a      	str	r2, [r3, #0]
 800786a:	e007      	b.n	800787c <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800786c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007870:	3301      	adds	r3, #1
 8007872:	b2db      	uxtb	r3, r3
 8007874:	b25a      	sxtb	r2, r3
 8007876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800787c:	2301      	movs	r3, #1
 800787e:	637b      	str	r3, [r7, #52]	; 0x34
 8007880:	e001      	b.n	8007886 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007882:	2300      	movs	r3, #0
 8007884:	637b      	str	r3, [r7, #52]	; 0x34
 8007886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007888:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007892:	4618      	mov	r0, r3
 8007894:	3738      	adds	r7, #56	; 0x38
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
	...

0800789c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b08c      	sub	sp, #48	; 0x30
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80078a8:	2300      	movs	r3, #0
 80078aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80078b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10b      	bne.n	80078ce <xQueueReceive+0x32>
	__asm volatile
 80078b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ba:	b672      	cpsid	i
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	b662      	cpsie	i
 80078ca:	623b      	str	r3, [r7, #32]
 80078cc:	e7fe      	b.n	80078cc <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d103      	bne.n	80078dc <xQueueReceive+0x40>
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d101      	bne.n	80078e0 <xQueueReceive+0x44>
 80078dc:	2301      	movs	r3, #1
 80078de:	e000      	b.n	80078e2 <xQueueReceive+0x46>
 80078e0:	2300      	movs	r3, #0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10b      	bne.n	80078fe <xQueueReceive+0x62>
 80078e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ea:	b672      	cpsid	i
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	b662      	cpsie	i
 80078fa:	61fb      	str	r3, [r7, #28]
 80078fc:	e7fe      	b.n	80078fc <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078fe:	f001 f855 	bl	80089ac <xTaskGetSchedulerState>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d102      	bne.n	800790e <xQueueReceive+0x72>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <xQueueReceive+0x76>
 800790e:	2301      	movs	r3, #1
 8007910:	e000      	b.n	8007914 <xQueueReceive+0x78>
 8007912:	2300      	movs	r3, #0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10b      	bne.n	8007930 <xQueueReceive+0x94>
 8007918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791c:	b672      	cpsid	i
 800791e:	f383 8811 	msr	BASEPRI, r3
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	b662      	cpsie	i
 800792c:	61bb      	str	r3, [r7, #24]
 800792e:	e7fe      	b.n	800792e <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007930:	f001 fb8a 	bl	8009048 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007938:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	2b00      	cmp	r3, #0
 800793e:	d01f      	beq.n	8007980 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007940:	68b9      	ldr	r1, [r7, #8]
 8007942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007944:	f000 fa1e 	bl	8007d84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	1e5a      	subs	r2, r3, #1
 800794c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00f      	beq.n	8007978 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795a:	3310      	adds	r3, #16
 800795c:	4618      	mov	r0, r3
 800795e:	f000 fe7f 	bl	8008660 <xTaskRemoveFromEventList>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d007      	beq.n	8007978 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007968:	4b3c      	ldr	r3, [pc, #240]	; (8007a5c <xQueueReceive+0x1c0>)
 800796a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800796e:	601a      	str	r2, [r3, #0]
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007978:	f001 fb98 	bl	80090ac <vPortExitCritical>
				return pdPASS;
 800797c:	2301      	movs	r3, #1
 800797e:	e069      	b.n	8007a54 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d103      	bne.n	800798e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007986:	f001 fb91 	bl	80090ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800798a:	2300      	movs	r3, #0
 800798c:	e062      	b.n	8007a54 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800798e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007990:	2b00      	cmp	r3, #0
 8007992:	d106      	bne.n	80079a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007994:	f107 0310 	add.w	r3, r7, #16
 8007998:	4618      	mov	r0, r3
 800799a:	f000 fec5 	bl	8008728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800799e:	2301      	movs	r3, #1
 80079a0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079a2:	f001 fb83 	bl	80090ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079a6:	f000 fc49 	bl	800823c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079aa:	f001 fb4d 	bl	8009048 <vPortEnterCritical>
 80079ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079b4:	b25b      	sxtb	r3, r3
 80079b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079ba:	d103      	bne.n	80079c4 <xQueueReceive+0x128>
 80079bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079ca:	b25b      	sxtb	r3, r3
 80079cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079d0:	d103      	bne.n	80079da <xQueueReceive+0x13e>
 80079d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079da:	f001 fb67 	bl	80090ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079de:	1d3a      	adds	r2, r7, #4
 80079e0:	f107 0310 	add.w	r3, r7, #16
 80079e4:	4611      	mov	r1, r2
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 feb4 	bl	8008754 <xTaskCheckForTimeOut>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d123      	bne.n	8007a3a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079f4:	f000 fa3e 	bl	8007e74 <prvIsQueueEmpty>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d017      	beq.n	8007a2e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80079fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a00:	3324      	adds	r3, #36	; 0x24
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	4611      	mov	r1, r2
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 fe04 	bl	8008614 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a0e:	f000 f9df 	bl	8007dd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a12:	f000 fc21 	bl	8008258 <xTaskResumeAll>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d189      	bne.n	8007930 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007a1c:	4b0f      	ldr	r3, [pc, #60]	; (8007a5c <xQueueReceive+0x1c0>)
 8007a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	e780      	b.n	8007930 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007a2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a30:	f000 f9ce 	bl	8007dd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a34:	f000 fc10 	bl	8008258 <xTaskResumeAll>
 8007a38:	e77a      	b.n	8007930 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007a3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a3c:	f000 f9c8 	bl	8007dd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a40:	f000 fc0a 	bl	8008258 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a46:	f000 fa15 	bl	8007e74 <prvIsQueueEmpty>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f43f af6f 	beq.w	8007930 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a52:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3730      	adds	r7, #48	; 0x30
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	e000ed04 	.word	0xe000ed04

08007a60 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b08e      	sub	sp, #56	; 0x38
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007a72:	2300      	movs	r3, #0
 8007a74:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10b      	bne.n	8007a94 <xQueueSemaphoreTake+0x34>
 8007a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a80:	b672      	cpsid	i
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	b662      	cpsie	i
 8007a90:	623b      	str	r3, [r7, #32]
 8007a92:	e7fe      	b.n	8007a92 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00b      	beq.n	8007ab4 <xQueueSemaphoreTake+0x54>
 8007a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa0:	b672      	cpsid	i
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	b662      	cpsie	i
 8007ab0:	61fb      	str	r3, [r7, #28]
 8007ab2:	e7fe      	b.n	8007ab2 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ab4:	f000 ff7a 	bl	80089ac <xTaskGetSchedulerState>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d102      	bne.n	8007ac4 <xQueueSemaphoreTake+0x64>
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d101      	bne.n	8007ac8 <xQueueSemaphoreTake+0x68>
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e000      	b.n	8007aca <xQueueSemaphoreTake+0x6a>
 8007ac8:	2300      	movs	r3, #0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10b      	bne.n	8007ae6 <xQueueSemaphoreTake+0x86>
 8007ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad2:	b672      	cpsid	i
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	b662      	cpsie	i
 8007ae2:	61bb      	str	r3, [r7, #24]
 8007ae4:	e7fe      	b.n	8007ae4 <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ae6:	f001 faaf 	bl	8009048 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aee:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d024      	beq.n	8007b40 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af8:	1e5a      	subs	r2, r3, #1
 8007afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d104      	bne.n	8007b10 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007b06:	f001 f91f 	bl	8008d48 <pvTaskIncrementMutexHeldCount>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00f      	beq.n	8007b38 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1a:	3310      	adds	r3, #16
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f000 fd9f 	bl	8008660 <xTaskRemoveFromEventList>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d007      	beq.n	8007b38 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b28:	4b54      	ldr	r3, [pc, #336]	; (8007c7c <xQueueSemaphoreTake+0x21c>)
 8007b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b38:	f001 fab8 	bl	80090ac <vPortExitCritical>
				return pdPASS;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e098      	b.n	8007c72 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d112      	bne.n	8007b6c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00b      	beq.n	8007b64 <xQueueSemaphoreTake+0x104>
 8007b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b50:	b672      	cpsid	i
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	b662      	cpsie	i
 8007b60:	617b      	str	r3, [r7, #20]
 8007b62:	e7fe      	b.n	8007b62 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007b64:	f001 faa2 	bl	80090ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	e082      	b.n	8007c72 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d106      	bne.n	8007b80 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b72:	f107 030c 	add.w	r3, r7, #12
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 fdd6 	bl	8008728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b80:	f001 fa94 	bl	80090ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b84:	f000 fb5a 	bl	800823c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b88:	f001 fa5e 	bl	8009048 <vPortEnterCritical>
 8007b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b92:	b25b      	sxtb	r3, r3
 8007b94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b98:	d103      	bne.n	8007ba2 <xQueueSemaphoreTake+0x142>
 8007b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ba8:	b25b      	sxtb	r3, r3
 8007baa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bae:	d103      	bne.n	8007bb8 <xQueueSemaphoreTake+0x158>
 8007bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bb8:	f001 fa78 	bl	80090ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bbc:	463a      	mov	r2, r7
 8007bbe:	f107 030c 	add.w	r3, r7, #12
 8007bc2:	4611      	mov	r1, r2
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 fdc5 	bl	8008754 <xTaskCheckForTimeOut>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d132      	bne.n	8007c36 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bd2:	f000 f94f 	bl	8007e74 <prvIsQueueEmpty>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d026      	beq.n	8007c2a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d109      	bne.n	8007bf8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007be4:	f001 fa30 	bl	8009048 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	4618      	mov	r0, r3
 8007bee:	f000 fefb 	bl	80089e8 <xTaskPriorityInherit>
 8007bf2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007bf4:	f001 fa5a 	bl	80090ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfa:	3324      	adds	r3, #36	; 0x24
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	4611      	mov	r1, r2
 8007c00:	4618      	mov	r0, r3
 8007c02:	f000 fd07 	bl	8008614 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c08:	f000 f8e2 	bl	8007dd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c0c:	f000 fb24 	bl	8008258 <xTaskResumeAll>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f47f af67 	bne.w	8007ae6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007c18:	4b18      	ldr	r3, [pc, #96]	; (8007c7c <xQueueSemaphoreTake+0x21c>)
 8007c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c1e:	601a      	str	r2, [r3, #0]
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	e75d      	b.n	8007ae6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007c2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c2c:	f000 f8d0 	bl	8007dd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c30:	f000 fb12 	bl	8008258 <xTaskResumeAll>
 8007c34:	e757      	b.n	8007ae6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007c36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c38:	f000 f8ca 	bl	8007dd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c3c:	f000 fb0c 	bl	8008258 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c42:	f000 f917 	bl	8007e74 <prvIsQueueEmpty>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f43f af4c 	beq.w	8007ae6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00d      	beq.n	8007c70 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007c54:	f001 f9f8 	bl	8009048 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007c58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c5a:	f000 f811 	bl	8007c80 <prvGetDisinheritPriorityAfterTimeout>
 8007c5e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8007c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c66:	4618      	mov	r0, r3
 8007c68:	f000 ffcc 	bl	8008c04 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007c6c:	f001 fa1e 	bl	80090ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3738      	adds	r7, #56	; 0x38
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	e000ed04 	.word	0xe000ed04

08007c80 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d006      	beq.n	8007c9e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f1c3 0307 	rsb	r3, r3, #7
 8007c9a:	60fb      	str	r3, [r7, #12]
 8007c9c:	e001      	b.n	8007ca2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
	}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10d      	bne.n	8007cea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d14d      	bne.n	8007d72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 ff0a 	bl	8008af4 <xTaskPriorityDisinherit>
 8007ce0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	605a      	str	r2, [r3, #4]
 8007ce8:	e043      	b.n	8007d72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d119      	bne.n	8007d24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6898      	ldr	r0, [r3, #8]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	68b9      	ldr	r1, [r7, #8]
 8007cfc:	f01a fb9e 	bl	802243c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	689a      	ldr	r2, [r3, #8]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d08:	441a      	add	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	689a      	ldr	r2, [r3, #8]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d32b      	bcc.n	8007d72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	609a      	str	r2, [r3, #8]
 8007d22:	e026      	b.n	8007d72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	68d8      	ldr	r0, [r3, #12]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	68b9      	ldr	r1, [r7, #8]
 8007d30:	f01a fb84 	bl	802243c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	68da      	ldr	r2, [r3, #12]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3c:	425b      	negs	r3, r3
 8007d3e:	441a      	add	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	68da      	ldr	r2, [r3, #12]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d207      	bcs.n	8007d60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	685a      	ldr	r2, [r3, #4]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d58:	425b      	negs	r3, r3
 8007d5a:	441a      	add	r2, r3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d105      	bne.n	8007d72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d002      	beq.n	8007d72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	1c5a      	adds	r2, r3, #1
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007d7a:	697b      	ldr	r3, [r7, #20]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3718      	adds	r7, #24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d018      	beq.n	8007dc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68da      	ldr	r2, [r3, #12]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9e:	441a      	add	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68da      	ldr	r2, [r3, #12]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d303      	bcc.n	8007db8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68d9      	ldr	r1, [r3, #12]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	6838      	ldr	r0, [r7, #0]
 8007dc4:	f01a fb3a 	bl	802243c <memcpy>
	}
}
 8007dc8:	bf00      	nop
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007dd8:	f001 f936 	bl	8009048 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007de2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007de4:	e011      	b.n	8007e0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d012      	beq.n	8007e14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	3324      	adds	r3, #36	; 0x24
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 fc34 	bl	8008660 <xTaskRemoveFromEventList>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007dfe:	f000 fd0d 	bl	800881c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
 8007e04:	3b01      	subs	r3, #1
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	dce9      	bgt.n	8007de6 <prvUnlockQueue+0x16>
 8007e12:	e000      	b.n	8007e16 <prvUnlockQueue+0x46>
					break;
 8007e14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	22ff      	movs	r2, #255	; 0xff
 8007e1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e1e:	f001 f945 	bl	80090ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e22:	f001 f911 	bl	8009048 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e2e:	e011      	b.n	8007e54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d012      	beq.n	8007e5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	3310      	adds	r3, #16
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f000 fc0f 	bl	8008660 <xTaskRemoveFromEventList>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d001      	beq.n	8007e4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e48:	f000 fce8 	bl	800881c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e4c:	7bbb      	ldrb	r3, [r7, #14]
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	dce9      	bgt.n	8007e30 <prvUnlockQueue+0x60>
 8007e5c:	e000      	b.n	8007e60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	22ff      	movs	r2, #255	; 0xff
 8007e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007e68:	f001 f920 	bl	80090ac <vPortExitCritical>
}
 8007e6c:	bf00      	nop
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e7c:	f001 f8e4 	bl	8009048 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d102      	bne.n	8007e8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	60fb      	str	r3, [r7, #12]
 8007e8c:	e001      	b.n	8007e92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e92:	f001 f90b 	bl	80090ac <vPortExitCritical>

	return xReturn;
 8007e96:	68fb      	ldr	r3, [r7, #12]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ea8:	f001 f8ce 	bl	8009048 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d102      	bne.n	8007ebe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	60fb      	str	r3, [r7, #12]
 8007ebc:	e001      	b.n	8007ec2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ec2:	f001 f8f3 	bl	80090ac <vPortExitCritical>

	return xReturn;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b08c      	sub	sp, #48	; 0x30
 8007ed4:	af04      	add	r7, sp, #16
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	603b      	str	r3, [r7, #0]
 8007edc:	4613      	mov	r3, r2
 8007ede:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ee0:	88fb      	ldrh	r3, [r7, #6]
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f001 f9d1 	bl	800928c <pvPortMalloc>
 8007eea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00e      	beq.n	8007f10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007ef2:	2058      	movs	r0, #88	; 0x58
 8007ef4:	f001 f9ca 	bl	800928c <pvPortMalloc>
 8007ef8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d003      	beq.n	8007f08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	631a      	str	r2, [r3, #48]	; 0x30
 8007f06:	e005      	b.n	8007f14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007f08:	6978      	ldr	r0, [r7, #20]
 8007f0a:	f001 fa8b 	bl	8009424 <vPortFree>
 8007f0e:	e001      	b.n	8007f14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f10:	2300      	movs	r3, #0
 8007f12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d013      	beq.n	8007f42 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f1a:	88fa      	ldrh	r2, [r7, #6]
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	9303      	str	r3, [sp, #12]
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	9302      	str	r3, [sp, #8]
 8007f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f26:	9301      	str	r3, [sp, #4]
 8007f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	68b9      	ldr	r1, [r7, #8]
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 f80e 	bl	8007f52 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f36:	69f8      	ldr	r0, [r7, #28]
 8007f38:	f000 f896 	bl	8008068 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	61bb      	str	r3, [r7, #24]
 8007f40:	e002      	b.n	8007f48 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f46:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f48:	69bb      	ldr	r3, [r7, #24]
	}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3720      	adds	r7, #32
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b088      	sub	sp, #32
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	60f8      	str	r0, [r7, #12]
 8007f5a:	60b9      	str	r1, [r7, #8]
 8007f5c:	607a      	str	r2, [r7, #4]
 8007f5e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f62:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	461a      	mov	r2, r3
 8007f6a:	21a5      	movs	r1, #165	; 0xa5
 8007f6c:	f01a fa71 	bl	8022452 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f74:	6879      	ldr	r1, [r7, #4]
 8007f76:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007f7a:	440b      	add	r3, r1
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	f023 0307 	bic.w	r3, r3, #7
 8007f88:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	f003 0307 	and.w	r3, r3, #7
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00b      	beq.n	8007fac <prvInitialiseNewTask+0x5a>
 8007f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f98:	b672      	cpsid	i
 8007f9a:	f383 8811 	msr	BASEPRI, r3
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	b662      	cpsie	i
 8007fa8:	617b      	str	r3, [r7, #20]
 8007faa:	e7fe      	b.n	8007faa <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fac:	2300      	movs	r3, #0
 8007fae:	61fb      	str	r3, [r7, #28]
 8007fb0:	e012      	b.n	8007fd8 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	7819      	ldrb	r1, [r3, #0]
 8007fba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	3334      	adds	r3, #52	; 0x34
 8007fc2:	460a      	mov	r2, r1
 8007fc4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	4413      	add	r3, r2
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d006      	beq.n	8007fe0 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	61fb      	str	r3, [r7, #28]
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	2b0f      	cmp	r3, #15
 8007fdc:	d9e9      	bls.n	8007fb2 <prvInitialiseNewTask+0x60>
 8007fde:	e000      	b.n	8007fe2 <prvInitialiseNewTask+0x90>
		{
			break;
 8007fe0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fec:	2b06      	cmp	r3, #6
 8007fee:	d901      	bls.n	8007ff4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ff0:	2306      	movs	r3, #6
 8007ff2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ff8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ffe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008002:	2200      	movs	r2, #0
 8008004:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	3304      	adds	r3, #4
 800800a:	4618      	mov	r0, r3
 800800c:	f7ff f8be 	bl	800718c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008012:	3318      	adds	r3, #24
 8008014:	4618      	mov	r0, r3
 8008016:	f7ff f8b9 	bl	800718c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800801a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800801e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008022:	f1c3 0207 	rsb	r2, r3, #7
 8008026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008028:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800802a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800802e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8008030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008032:	2200      	movs	r2, #0
 8008034:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008038:	2200      	movs	r2, #0
 800803a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800803c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008044:	683a      	ldr	r2, [r7, #0]
 8008046:	68f9      	ldr	r1, [r7, #12]
 8008048:	69b8      	ldr	r0, [r7, #24]
 800804a:	f000 fef7 	bl	8008e3c <pxPortInitialiseStack>
 800804e:	4602      	mov	r2, r0
 8008050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008052:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008056:	2b00      	cmp	r3, #0
 8008058:	d002      	beq.n	8008060 <prvInitialiseNewTask+0x10e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800805a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800805e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008060:	bf00      	nop
 8008062:	3720      	adds	r7, #32
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008070:	f000 ffea 	bl	8009048 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008074:	4b2a      	ldr	r3, [pc, #168]	; (8008120 <prvAddNewTaskToReadyList+0xb8>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	3301      	adds	r3, #1
 800807a:	4a29      	ldr	r2, [pc, #164]	; (8008120 <prvAddNewTaskToReadyList+0xb8>)
 800807c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800807e:	4b29      	ldr	r3, [pc, #164]	; (8008124 <prvAddNewTaskToReadyList+0xbc>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d109      	bne.n	800809a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008086:	4a27      	ldr	r2, [pc, #156]	; (8008124 <prvAddNewTaskToReadyList+0xbc>)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800808c:	4b24      	ldr	r3, [pc, #144]	; (8008120 <prvAddNewTaskToReadyList+0xb8>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d110      	bne.n	80080b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008094:	f000 fbe8 	bl	8008868 <prvInitialiseTaskLists>
 8008098:	e00d      	b.n	80080b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800809a:	4b23      	ldr	r3, [pc, #140]	; (8008128 <prvAddNewTaskToReadyList+0xc0>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d109      	bne.n	80080b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80080a2:	4b20      	ldr	r3, [pc, #128]	; (8008124 <prvAddNewTaskToReadyList+0xbc>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d802      	bhi.n	80080b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80080b0:	4a1c      	ldr	r2, [pc, #112]	; (8008124 <prvAddNewTaskToReadyList+0xbc>)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80080b6:	4b1d      	ldr	r3, [pc, #116]	; (800812c <prvAddNewTaskToReadyList+0xc4>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3301      	adds	r3, #1
 80080bc:	4a1b      	ldr	r2, [pc, #108]	; (800812c <prvAddNewTaskToReadyList+0xc4>)
 80080be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c4:	2201      	movs	r2, #1
 80080c6:	409a      	lsls	r2, r3
 80080c8:	4b19      	ldr	r3, [pc, #100]	; (8008130 <prvAddNewTaskToReadyList+0xc8>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	4a18      	ldr	r2, [pc, #96]	; (8008130 <prvAddNewTaskToReadyList+0xc8>)
 80080d0:	6013      	str	r3, [r2, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d6:	4613      	mov	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4a15      	ldr	r2, [pc, #84]	; (8008134 <prvAddNewTaskToReadyList+0xcc>)
 80080e0:	441a      	add	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	3304      	adds	r3, #4
 80080e6:	4619      	mov	r1, r3
 80080e8:	4610      	mov	r0, r2
 80080ea:	f7ff f85c 	bl	80071a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080ee:	f000 ffdd 	bl	80090ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80080f2:	4b0d      	ldr	r3, [pc, #52]	; (8008128 <prvAddNewTaskToReadyList+0xc0>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00e      	beq.n	8008118 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80080fa:	4b0a      	ldr	r3, [pc, #40]	; (8008124 <prvAddNewTaskToReadyList+0xbc>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008104:	429a      	cmp	r2, r3
 8008106:	d207      	bcs.n	8008118 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008108:	4b0b      	ldr	r3, [pc, #44]	; (8008138 <prvAddNewTaskToReadyList+0xd0>)
 800810a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800810e:	601a      	str	r2, [r3, #0]
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008118:	bf00      	nop
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	20000248 	.word	0x20000248
 8008124:	20000148 	.word	0x20000148
 8008128:	20000254 	.word	0x20000254
 800812c:	20000264 	.word	0x20000264
 8008130:	20000250 	.word	0x20000250
 8008134:	2000014c 	.word	0x2000014c
 8008138:	e000ed04 	.word	0xe000ed04

0800813c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008144:	2300      	movs	r3, #0
 8008146:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d018      	beq.n	8008180 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800814e:	4b14      	ldr	r3, [pc, #80]	; (80081a0 <vTaskDelay+0x64>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00b      	beq.n	800816e <vTaskDelay+0x32>
 8008156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815a:	b672      	cpsid	i
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	b662      	cpsie	i
 800816a:	60bb      	str	r3, [r7, #8]
 800816c:	e7fe      	b.n	800816c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800816e:	f000 f865 	bl	800823c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008172:	2100      	movs	r1, #0
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fdfb 	bl	8008d70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800817a:	f000 f86d 	bl	8008258 <xTaskResumeAll>
 800817e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d107      	bne.n	8008196 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008186:	4b07      	ldr	r3, [pc, #28]	; (80081a4 <vTaskDelay+0x68>)
 8008188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008196:	bf00      	nop
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	20000270 	.word	0x20000270
 80081a4:	e000ed04 	.word	0xe000ed04

080081a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80081ae:	4b1d      	ldr	r3, [pc, #116]	; (8008224 <vTaskStartScheduler+0x7c>)
 80081b0:	9301      	str	r3, [sp, #4]
 80081b2:	2300      	movs	r3, #0
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	2300      	movs	r3, #0
 80081b8:	2280      	movs	r2, #128	; 0x80
 80081ba:	491b      	ldr	r1, [pc, #108]	; (8008228 <vTaskStartScheduler+0x80>)
 80081bc:	481b      	ldr	r0, [pc, #108]	; (800822c <vTaskStartScheduler+0x84>)
 80081be:	f7ff fe87 	bl	8007ed0 <xTaskCreate>
 80081c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d117      	bne.n	80081fa <vTaskStartScheduler+0x52>
 80081ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ce:	b672      	cpsid	i
 80081d0:	f383 8811 	msr	BASEPRI, r3
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	b662      	cpsie	i
 80081de:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80081e0:	4b13      	ldr	r3, [pc, #76]	; (8008230 <vTaskStartScheduler+0x88>)
 80081e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80081e8:	4b12      	ldr	r3, [pc, #72]	; (8008234 <vTaskStartScheduler+0x8c>)
 80081ea:	2201      	movs	r2, #1
 80081ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80081ee:	4b12      	ldr	r3, [pc, #72]	; (8008238 <vTaskStartScheduler+0x90>)
 80081f0:	2200      	movs	r2, #0
 80081f2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80081f4:	f000 feac 	bl	8008f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80081f8:	e00f      	b.n	800821a <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008200:	d10b      	bne.n	800821a <vTaskStartScheduler+0x72>
 8008202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008206:	b672      	cpsid	i
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	b662      	cpsie	i
 8008216:	607b      	str	r3, [r7, #4]
 8008218:	e7fe      	b.n	8008218 <vTaskStartScheduler+0x70>
}
 800821a:	bf00      	nop
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	2000026c 	.word	0x2000026c
 8008228:	08023388 	.word	0x08023388
 800822c:	08008835 	.word	0x08008835
 8008230:	20000268 	.word	0x20000268
 8008234:	20000254 	.word	0x20000254
 8008238:	2000024c 	.word	0x2000024c

0800823c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800823c:	b480      	push	{r7}
 800823e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008240:	4b04      	ldr	r3, [pc, #16]	; (8008254 <vTaskSuspendAll+0x18>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	3301      	adds	r3, #1
 8008246:	4a03      	ldr	r2, [pc, #12]	; (8008254 <vTaskSuspendAll+0x18>)
 8008248:	6013      	str	r3, [r2, #0]
}
 800824a:	bf00      	nop
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr
 8008254:	20000270 	.word	0x20000270

08008258 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800825e:	2300      	movs	r3, #0
 8008260:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008262:	2300      	movs	r3, #0
 8008264:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008266:	4b42      	ldr	r3, [pc, #264]	; (8008370 <xTaskResumeAll+0x118>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10b      	bne.n	8008286 <xTaskResumeAll+0x2e>
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	b672      	cpsid	i
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	b662      	cpsie	i
 8008282:	603b      	str	r3, [r7, #0]
 8008284:	e7fe      	b.n	8008284 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008286:	f000 fedf 	bl	8009048 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800828a:	4b39      	ldr	r3, [pc, #228]	; (8008370 <xTaskResumeAll+0x118>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	3b01      	subs	r3, #1
 8008290:	4a37      	ldr	r2, [pc, #220]	; (8008370 <xTaskResumeAll+0x118>)
 8008292:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008294:	4b36      	ldr	r3, [pc, #216]	; (8008370 <xTaskResumeAll+0x118>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d161      	bne.n	8008360 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800829c:	4b35      	ldr	r3, [pc, #212]	; (8008374 <xTaskResumeAll+0x11c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d05d      	beq.n	8008360 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082a4:	e02e      	b.n	8008304 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80082a6:	4b34      	ldr	r3, [pc, #208]	; (8008378 <xTaskResumeAll+0x120>)
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	3318      	adds	r3, #24
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7fe ffd4 	bl	8007260 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	3304      	adds	r3, #4
 80082bc:	4618      	mov	r0, r3
 80082be:	f7fe ffcf 	bl	8007260 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c6:	2201      	movs	r2, #1
 80082c8:	409a      	lsls	r2, r3
 80082ca:	4b2c      	ldr	r3, [pc, #176]	; (800837c <xTaskResumeAll+0x124>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	4a2a      	ldr	r2, [pc, #168]	; (800837c <xTaskResumeAll+0x124>)
 80082d2:	6013      	str	r3, [r2, #0]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d8:	4613      	mov	r3, r2
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	4413      	add	r3, r2
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4a27      	ldr	r2, [pc, #156]	; (8008380 <xTaskResumeAll+0x128>)
 80082e2:	441a      	add	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	3304      	adds	r3, #4
 80082e8:	4619      	mov	r1, r3
 80082ea:	4610      	mov	r0, r2
 80082ec:	f7fe ff5b 	bl	80071a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f4:	4b23      	ldr	r3, [pc, #140]	; (8008384 <xTaskResumeAll+0x12c>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d302      	bcc.n	8008304 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80082fe:	4b22      	ldr	r3, [pc, #136]	; (8008388 <xTaskResumeAll+0x130>)
 8008300:	2201      	movs	r2, #1
 8008302:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008304:	4b1c      	ldr	r3, [pc, #112]	; (8008378 <xTaskResumeAll+0x120>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1cc      	bne.n	80082a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d001      	beq.n	8008316 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008312:	f000 fb25 	bl	8008960 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008316:	4b1d      	ldr	r3, [pc, #116]	; (800838c <xTaskResumeAll+0x134>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d010      	beq.n	8008344 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008322:	f000 f837 	bl	8008394 <xTaskIncrementTick>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d002      	beq.n	8008332 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800832c:	4b16      	ldr	r3, [pc, #88]	; (8008388 <xTaskResumeAll+0x130>)
 800832e:	2201      	movs	r2, #1
 8008330:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	3b01      	subs	r3, #1
 8008336:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1f1      	bne.n	8008322 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800833e:	4b13      	ldr	r3, [pc, #76]	; (800838c <xTaskResumeAll+0x134>)
 8008340:	2200      	movs	r2, #0
 8008342:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008344:	4b10      	ldr	r3, [pc, #64]	; (8008388 <xTaskResumeAll+0x130>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d009      	beq.n	8008360 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800834c:	2301      	movs	r3, #1
 800834e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008350:	4b0f      	ldr	r3, [pc, #60]	; (8008390 <xTaskResumeAll+0x138>)
 8008352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008356:	601a      	str	r2, [r3, #0]
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008360:	f000 fea4 	bl	80090ac <vPortExitCritical>

	return xAlreadyYielded;
 8008364:	68bb      	ldr	r3, [r7, #8]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	20000270 	.word	0x20000270
 8008374:	20000248 	.word	0x20000248
 8008378:	20000208 	.word	0x20000208
 800837c:	20000250 	.word	0x20000250
 8008380:	2000014c 	.word	0x2000014c
 8008384:	20000148 	.word	0x20000148
 8008388:	2000025c 	.word	0x2000025c
 800838c:	20000258 	.word	0x20000258
 8008390:	e000ed04 	.word	0xe000ed04

08008394 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800839a:	2300      	movs	r3, #0
 800839c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800839e:	4b51      	ldr	r3, [pc, #324]	; (80084e4 <xTaskIncrementTick+0x150>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f040 808e 	bne.w	80084c4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083a8:	4b4f      	ldr	r3, [pc, #316]	; (80084e8 <xTaskIncrementTick+0x154>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	3301      	adds	r3, #1
 80083ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083b0:	4a4d      	ldr	r2, [pc, #308]	; (80084e8 <xTaskIncrementTick+0x154>)
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d121      	bne.n	8008400 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80083bc:	4b4b      	ldr	r3, [pc, #300]	; (80084ec <xTaskIncrementTick+0x158>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00b      	beq.n	80083de <xTaskIncrementTick+0x4a>
 80083c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ca:	b672      	cpsid	i
 80083cc:	f383 8811 	msr	BASEPRI, r3
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	b662      	cpsie	i
 80083da:	603b      	str	r3, [r7, #0]
 80083dc:	e7fe      	b.n	80083dc <xTaskIncrementTick+0x48>
 80083de:	4b43      	ldr	r3, [pc, #268]	; (80084ec <xTaskIncrementTick+0x158>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	60fb      	str	r3, [r7, #12]
 80083e4:	4b42      	ldr	r3, [pc, #264]	; (80084f0 <xTaskIncrementTick+0x15c>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a40      	ldr	r2, [pc, #256]	; (80084ec <xTaskIncrementTick+0x158>)
 80083ea:	6013      	str	r3, [r2, #0]
 80083ec:	4a40      	ldr	r2, [pc, #256]	; (80084f0 <xTaskIncrementTick+0x15c>)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6013      	str	r3, [r2, #0]
 80083f2:	4b40      	ldr	r3, [pc, #256]	; (80084f4 <xTaskIncrementTick+0x160>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	3301      	adds	r3, #1
 80083f8:	4a3e      	ldr	r2, [pc, #248]	; (80084f4 <xTaskIncrementTick+0x160>)
 80083fa:	6013      	str	r3, [r2, #0]
 80083fc:	f000 fab0 	bl	8008960 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008400:	4b3d      	ldr	r3, [pc, #244]	; (80084f8 <xTaskIncrementTick+0x164>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	429a      	cmp	r2, r3
 8008408:	d34d      	bcc.n	80084a6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800840a:	4b38      	ldr	r3, [pc, #224]	; (80084ec <xTaskIncrementTick+0x158>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d101      	bne.n	8008418 <xTaskIncrementTick+0x84>
 8008414:	2301      	movs	r3, #1
 8008416:	e000      	b.n	800841a <xTaskIncrementTick+0x86>
 8008418:	2300      	movs	r3, #0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d004      	beq.n	8008428 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800841e:	4b36      	ldr	r3, [pc, #216]	; (80084f8 <xTaskIncrementTick+0x164>)
 8008420:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008424:	601a      	str	r2, [r3, #0]
					break;
 8008426:	e03e      	b.n	80084a6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008428:	4b30      	ldr	r3, [pc, #192]	; (80084ec <xTaskIncrementTick+0x158>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	429a      	cmp	r2, r3
 800843e:	d203      	bcs.n	8008448 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008440:	4a2d      	ldr	r2, [pc, #180]	; (80084f8 <xTaskIncrementTick+0x164>)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6013      	str	r3, [r2, #0]
						break;
 8008446:	e02e      	b.n	80084a6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	3304      	adds	r3, #4
 800844c:	4618      	mov	r0, r3
 800844e:	f7fe ff07 	bl	8007260 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008456:	2b00      	cmp	r3, #0
 8008458:	d004      	beq.n	8008464 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	3318      	adds	r3, #24
 800845e:	4618      	mov	r0, r3
 8008460:	f7fe fefe 	bl	8007260 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008468:	2201      	movs	r2, #1
 800846a:	409a      	lsls	r2, r3
 800846c:	4b23      	ldr	r3, [pc, #140]	; (80084fc <xTaskIncrementTick+0x168>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4313      	orrs	r3, r2
 8008472:	4a22      	ldr	r2, [pc, #136]	; (80084fc <xTaskIncrementTick+0x168>)
 8008474:	6013      	str	r3, [r2, #0]
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800847a:	4613      	mov	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4a1f      	ldr	r2, [pc, #124]	; (8008500 <xTaskIncrementTick+0x16c>)
 8008484:	441a      	add	r2, r3
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	3304      	adds	r3, #4
 800848a:	4619      	mov	r1, r3
 800848c:	4610      	mov	r0, r2
 800848e:	f7fe fe8a 	bl	80071a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008496:	4b1b      	ldr	r3, [pc, #108]	; (8008504 <xTaskIncrementTick+0x170>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849c:	429a      	cmp	r2, r3
 800849e:	d3b4      	bcc.n	800840a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80084a0:	2301      	movs	r3, #1
 80084a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084a4:	e7b1      	b.n	800840a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084a6:	4b17      	ldr	r3, [pc, #92]	; (8008504 <xTaskIncrementTick+0x170>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ac:	4914      	ldr	r1, [pc, #80]	; (8008500 <xTaskIncrementTick+0x16c>)
 80084ae:	4613      	mov	r3, r2
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4413      	add	r3, r2
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	440b      	add	r3, r1
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d907      	bls.n	80084ce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80084be:	2301      	movs	r3, #1
 80084c0:	617b      	str	r3, [r7, #20]
 80084c2:	e004      	b.n	80084ce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80084c4:	4b10      	ldr	r3, [pc, #64]	; (8008508 <xTaskIncrementTick+0x174>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3301      	adds	r3, #1
 80084ca:	4a0f      	ldr	r2, [pc, #60]	; (8008508 <xTaskIncrementTick+0x174>)
 80084cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80084ce:	4b0f      	ldr	r3, [pc, #60]	; (800850c <xTaskIncrementTick+0x178>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d001      	beq.n	80084da <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80084d6:	2301      	movs	r3, #1
 80084d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80084da:	697b      	ldr	r3, [r7, #20]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3718      	adds	r7, #24
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	20000270 	.word	0x20000270
 80084e8:	2000024c 	.word	0x2000024c
 80084ec:	20000200 	.word	0x20000200
 80084f0:	20000204 	.word	0x20000204
 80084f4:	20000260 	.word	0x20000260
 80084f8:	20000268 	.word	0x20000268
 80084fc:	20000250 	.word	0x20000250
 8008500:	2000014c 	.word	0x2000014c
 8008504:	20000148 	.word	0x20000148
 8008508:	20000258 	.word	0x20000258
 800850c:	2000025c 	.word	0x2000025c

08008510 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b088      	sub	sp, #32
 8008514:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008516:	4b3a      	ldr	r3, [pc, #232]	; (8008600 <vTaskSwitchContext+0xf0>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d003      	beq.n	8008526 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800851e:	4b39      	ldr	r3, [pc, #228]	; (8008604 <vTaskSwitchContext+0xf4>)
 8008520:	2201      	movs	r2, #1
 8008522:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008524:	e067      	b.n	80085f6 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 8008526:	4b37      	ldr	r3, [pc, #220]	; (8008604 <vTaskSwitchContext+0xf4>)
 8008528:	2200      	movs	r2, #0
 800852a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800852c:	4b36      	ldr	r3, [pc, #216]	; (8008608 <vTaskSwitchContext+0xf8>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008532:	61fb      	str	r3, [r7, #28]
 8008534:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8008538:	61bb      	str	r3, [r7, #24]
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	69ba      	ldr	r2, [r7, #24]
 8008540:	429a      	cmp	r2, r3
 8008542:	d111      	bne.n	8008568 <vTaskSwitchContext+0x58>
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	3304      	adds	r3, #4
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	69ba      	ldr	r2, [r7, #24]
 800854c:	429a      	cmp	r2, r3
 800854e:	d10b      	bne.n	8008568 <vTaskSwitchContext+0x58>
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	3308      	adds	r3, #8
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	69ba      	ldr	r2, [r7, #24]
 8008558:	429a      	cmp	r2, r3
 800855a:	d105      	bne.n	8008568 <vTaskSwitchContext+0x58>
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	330c      	adds	r3, #12
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	69ba      	ldr	r2, [r7, #24]
 8008564:	429a      	cmp	r2, r3
 8008566:	d008      	beq.n	800857a <vTaskSwitchContext+0x6a>
 8008568:	4b27      	ldr	r3, [pc, #156]	; (8008608 <vTaskSwitchContext+0xf8>)
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	4b26      	ldr	r3, [pc, #152]	; (8008608 <vTaskSwitchContext+0xf8>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	3334      	adds	r3, #52	; 0x34
 8008572:	4619      	mov	r1, r3
 8008574:	4610      	mov	r0, r2
 8008576:	f7f8 f822 	bl	80005be <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800857a:	4b24      	ldr	r3, [pc, #144]	; (800860c <vTaskSwitchContext+0xfc>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	fab3 f383 	clz	r3, r3
 8008586:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008588:	7afb      	ldrb	r3, [r7, #11]
 800858a:	f1c3 031f 	rsb	r3, r3, #31
 800858e:	617b      	str	r3, [r7, #20]
 8008590:	491f      	ldr	r1, [pc, #124]	; (8008610 <vTaskSwitchContext+0x100>)
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	4613      	mov	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	4413      	add	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	440b      	add	r3, r1
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10b      	bne.n	80085bc <vTaskSwitchContext+0xac>
	__asm volatile
 80085a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a8:	b672      	cpsid	i
 80085aa:	f383 8811 	msr	BASEPRI, r3
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f3bf 8f4f 	dsb	sy
 80085b6:	b662      	cpsie	i
 80085b8:	607b      	str	r3, [r7, #4]
 80085ba:	e7fe      	b.n	80085ba <vTaskSwitchContext+0xaa>
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	4613      	mov	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4413      	add	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4a12      	ldr	r2, [pc, #72]	; (8008610 <vTaskSwitchContext+0x100>)
 80085c8:	4413      	add	r3, r2
 80085ca:	613b      	str	r3, [r7, #16]
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	605a      	str	r2, [r3, #4]
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	685a      	ldr	r2, [r3, #4]
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	3308      	adds	r3, #8
 80085de:	429a      	cmp	r2, r3
 80085e0:	d104      	bne.n	80085ec <vTaskSwitchContext+0xdc>
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	685a      	ldr	r2, [r3, #4]
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	605a      	str	r2, [r3, #4]
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	4a05      	ldr	r2, [pc, #20]	; (8008608 <vTaskSwitchContext+0xf8>)
 80085f4:	6013      	str	r3, [r2, #0]
}
 80085f6:	bf00      	nop
 80085f8:	3720      	adds	r7, #32
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	20000270 	.word	0x20000270
 8008604:	2000025c 	.word	0x2000025c
 8008608:	20000148 	.word	0x20000148
 800860c:	20000250 	.word	0x20000250
 8008610:	2000014c 	.word	0x2000014c

08008614 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10b      	bne.n	800863c <vTaskPlaceOnEventList+0x28>
 8008624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008628:	b672      	cpsid	i
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	b662      	cpsie	i
 8008638:	60fb      	str	r3, [r7, #12]
 800863a:	e7fe      	b.n	800863a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800863c:	4b07      	ldr	r3, [pc, #28]	; (800865c <vTaskPlaceOnEventList+0x48>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	3318      	adds	r3, #24
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7fe fdd2 	bl	80071ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800864a:	2101      	movs	r1, #1
 800864c:	6838      	ldr	r0, [r7, #0]
 800864e:	f000 fb8f 	bl	8008d70 <prvAddCurrentTaskToDelayedList>
}
 8008652:	bf00      	nop
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	20000148 	.word	0x20000148

08008660 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10b      	bne.n	800868e <xTaskRemoveFromEventList+0x2e>
 8008676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867a:	b672      	cpsid	i
 800867c:	f383 8811 	msr	BASEPRI, r3
 8008680:	f3bf 8f6f 	isb	sy
 8008684:	f3bf 8f4f 	dsb	sy
 8008688:	b662      	cpsie	i
 800868a:	60fb      	str	r3, [r7, #12]
 800868c:	e7fe      	b.n	800868c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	3318      	adds	r3, #24
 8008692:	4618      	mov	r0, r3
 8008694:	f7fe fde4 	bl	8007260 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008698:	4b1d      	ldr	r3, [pc, #116]	; (8008710 <xTaskRemoveFromEventList+0xb0>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d11c      	bne.n	80086da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	3304      	adds	r3, #4
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fe fddb 	bl	8007260 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ae:	2201      	movs	r2, #1
 80086b0:	409a      	lsls	r2, r3
 80086b2:	4b18      	ldr	r3, [pc, #96]	; (8008714 <xTaskRemoveFromEventList+0xb4>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	4a16      	ldr	r2, [pc, #88]	; (8008714 <xTaskRemoveFromEventList+0xb4>)
 80086ba:	6013      	str	r3, [r2, #0]
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c0:	4613      	mov	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4413      	add	r3, r2
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	4a13      	ldr	r2, [pc, #76]	; (8008718 <xTaskRemoveFromEventList+0xb8>)
 80086ca:	441a      	add	r2, r3
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	3304      	adds	r3, #4
 80086d0:	4619      	mov	r1, r3
 80086d2:	4610      	mov	r0, r2
 80086d4:	f7fe fd67 	bl	80071a6 <vListInsertEnd>
 80086d8:	e005      	b.n	80086e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	3318      	adds	r3, #24
 80086de:	4619      	mov	r1, r3
 80086e0:	480e      	ldr	r0, [pc, #56]	; (800871c <xTaskRemoveFromEventList+0xbc>)
 80086e2:	f7fe fd60 	bl	80071a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ea:	4b0d      	ldr	r3, [pc, #52]	; (8008720 <xTaskRemoveFromEventList+0xc0>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d905      	bls.n	8008700 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80086f4:	2301      	movs	r3, #1
 80086f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80086f8:	4b0a      	ldr	r3, [pc, #40]	; (8008724 <xTaskRemoveFromEventList+0xc4>)
 80086fa:	2201      	movs	r2, #1
 80086fc:	601a      	str	r2, [r3, #0]
 80086fe:	e001      	b.n	8008704 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008700:	2300      	movs	r3, #0
 8008702:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008704:	697b      	ldr	r3, [r7, #20]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3718      	adds	r7, #24
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	20000270 	.word	0x20000270
 8008714:	20000250 	.word	0x20000250
 8008718:	2000014c 	.word	0x2000014c
 800871c:	20000208 	.word	0x20000208
 8008720:	20000148 	.word	0x20000148
 8008724:	2000025c 	.word	0x2000025c

08008728 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008730:	4b06      	ldr	r3, [pc, #24]	; (800874c <vTaskInternalSetTimeOutState+0x24>)
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008738:	4b05      	ldr	r3, [pc, #20]	; (8008750 <vTaskInternalSetTimeOutState+0x28>)
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	605a      	str	r2, [r3, #4]
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	20000260 	.word	0x20000260
 8008750:	2000024c 	.word	0x2000024c

08008754 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b088      	sub	sp, #32
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10b      	bne.n	800877c <xTaskCheckForTimeOut+0x28>
 8008764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008768:	b672      	cpsid	i
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	b662      	cpsie	i
 8008778:	613b      	str	r3, [r7, #16]
 800877a:	e7fe      	b.n	800877a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d10b      	bne.n	800879a <xTaskCheckForTimeOut+0x46>
 8008782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008786:	b672      	cpsid	i
 8008788:	f383 8811 	msr	BASEPRI, r3
 800878c:	f3bf 8f6f 	isb	sy
 8008790:	f3bf 8f4f 	dsb	sy
 8008794:	b662      	cpsie	i
 8008796:	60fb      	str	r3, [r7, #12]
 8008798:	e7fe      	b.n	8008798 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800879a:	f000 fc55 	bl	8009048 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800879e:	4b1d      	ldr	r3, [pc, #116]	; (8008814 <xTaskCheckForTimeOut+0xc0>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	69ba      	ldr	r2, [r7, #24]
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087b6:	d102      	bne.n	80087be <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80087b8:	2300      	movs	r3, #0
 80087ba:	61fb      	str	r3, [r7, #28]
 80087bc:	e023      	b.n	8008806 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	4b15      	ldr	r3, [pc, #84]	; (8008818 <xTaskCheckForTimeOut+0xc4>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d007      	beq.n	80087da <xTaskCheckForTimeOut+0x86>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	69ba      	ldr	r2, [r7, #24]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d302      	bcc.n	80087da <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80087d4:	2301      	movs	r3, #1
 80087d6:	61fb      	str	r3, [r7, #28]
 80087d8:	e015      	b.n	8008806 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	697a      	ldr	r2, [r7, #20]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d20b      	bcs.n	80087fc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	1ad2      	subs	r2, r2, r3
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f7ff ff99 	bl	8008728 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80087f6:	2300      	movs	r3, #0
 80087f8:	61fb      	str	r3, [r7, #28]
 80087fa:	e004      	b.n	8008806 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	2200      	movs	r2, #0
 8008800:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008802:	2301      	movs	r3, #1
 8008804:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008806:	f000 fc51 	bl	80090ac <vPortExitCritical>

	return xReturn;
 800880a:	69fb      	ldr	r3, [r7, #28]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3720      	adds	r7, #32
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	2000024c 	.word	0x2000024c
 8008818:	20000260 	.word	0x20000260

0800881c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800881c:	b480      	push	{r7}
 800881e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008820:	4b03      	ldr	r3, [pc, #12]	; (8008830 <vTaskMissedYield+0x14>)
 8008822:	2201      	movs	r2, #1
 8008824:	601a      	str	r2, [r3, #0]
}
 8008826:	bf00      	nop
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr
 8008830:	2000025c 	.word	0x2000025c

08008834 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800883c:	f000 f854 	bl	80088e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008840:	4b07      	ldr	r3, [pc, #28]	; (8008860 <prvIdleTask+0x2c>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d907      	bls.n	8008858 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008848:	4b06      	ldr	r3, [pc, #24]	; (8008864 <prvIdleTask+0x30>)
 800884a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800884e:	601a      	str	r2, [r3, #0]
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008858:	f7f7 feaa 	bl	80005b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800885c:	e7ee      	b.n	800883c <prvIdleTask+0x8>
 800885e:	bf00      	nop
 8008860:	2000014c 	.word	0x2000014c
 8008864:	e000ed04 	.word	0xe000ed04

08008868 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800886e:	2300      	movs	r3, #0
 8008870:	607b      	str	r3, [r7, #4]
 8008872:	e00c      	b.n	800888e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	4613      	mov	r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	4413      	add	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4a12      	ldr	r2, [pc, #72]	; (80088c8 <prvInitialiseTaskLists+0x60>)
 8008880:	4413      	add	r3, r2
 8008882:	4618      	mov	r0, r3
 8008884:	f7fe fc62 	bl	800714c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	3301      	adds	r3, #1
 800888c:	607b      	str	r3, [r7, #4]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2b06      	cmp	r3, #6
 8008892:	d9ef      	bls.n	8008874 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008894:	480d      	ldr	r0, [pc, #52]	; (80088cc <prvInitialiseTaskLists+0x64>)
 8008896:	f7fe fc59 	bl	800714c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800889a:	480d      	ldr	r0, [pc, #52]	; (80088d0 <prvInitialiseTaskLists+0x68>)
 800889c:	f7fe fc56 	bl	800714c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088a0:	480c      	ldr	r0, [pc, #48]	; (80088d4 <prvInitialiseTaskLists+0x6c>)
 80088a2:	f7fe fc53 	bl	800714c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80088a6:	480c      	ldr	r0, [pc, #48]	; (80088d8 <prvInitialiseTaskLists+0x70>)
 80088a8:	f7fe fc50 	bl	800714c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80088ac:	480b      	ldr	r0, [pc, #44]	; (80088dc <prvInitialiseTaskLists+0x74>)
 80088ae:	f7fe fc4d 	bl	800714c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80088b2:	4b0b      	ldr	r3, [pc, #44]	; (80088e0 <prvInitialiseTaskLists+0x78>)
 80088b4:	4a05      	ldr	r2, [pc, #20]	; (80088cc <prvInitialiseTaskLists+0x64>)
 80088b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80088b8:	4b0a      	ldr	r3, [pc, #40]	; (80088e4 <prvInitialiseTaskLists+0x7c>)
 80088ba:	4a05      	ldr	r2, [pc, #20]	; (80088d0 <prvInitialiseTaskLists+0x68>)
 80088bc:	601a      	str	r2, [r3, #0]
}
 80088be:	bf00      	nop
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	2000014c 	.word	0x2000014c
 80088cc:	200001d8 	.word	0x200001d8
 80088d0:	200001ec 	.word	0x200001ec
 80088d4:	20000208 	.word	0x20000208
 80088d8:	2000021c 	.word	0x2000021c
 80088dc:	20000234 	.word	0x20000234
 80088e0:	20000200 	.word	0x20000200
 80088e4:	20000204 	.word	0x20000204

080088e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088ee:	e019      	b.n	8008924 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80088f0:	f000 fbaa 	bl	8009048 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80088f4:	4b0f      	ldr	r3, [pc, #60]	; (8008934 <prvCheckTasksWaitingTermination+0x4c>)
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	3304      	adds	r3, #4
 8008900:	4618      	mov	r0, r3
 8008902:	f7fe fcad 	bl	8007260 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008906:	4b0c      	ldr	r3, [pc, #48]	; (8008938 <prvCheckTasksWaitingTermination+0x50>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3b01      	subs	r3, #1
 800890c:	4a0a      	ldr	r2, [pc, #40]	; (8008938 <prvCheckTasksWaitingTermination+0x50>)
 800890e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008910:	4b0a      	ldr	r3, [pc, #40]	; (800893c <prvCheckTasksWaitingTermination+0x54>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	3b01      	subs	r3, #1
 8008916:	4a09      	ldr	r2, [pc, #36]	; (800893c <prvCheckTasksWaitingTermination+0x54>)
 8008918:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800891a:	f000 fbc7 	bl	80090ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f80e 	bl	8008940 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008924:	4b05      	ldr	r3, [pc, #20]	; (800893c <prvCheckTasksWaitingTermination+0x54>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1e1      	bne.n	80088f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800892c:	bf00      	nop
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	2000021c 	.word	0x2000021c
 8008938:	20000248 	.word	0x20000248
 800893c:	20000230 	.word	0x20000230

08008940 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894c:	4618      	mov	r0, r3
 800894e:	f000 fd69 	bl	8009424 <vPortFree>
			vPortFree( pxTCB );
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fd66 	bl	8009424 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008958:	bf00      	nop
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008966:	4b0f      	ldr	r3, [pc, #60]	; (80089a4 <prvResetNextTaskUnblockTime+0x44>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d101      	bne.n	8008974 <prvResetNextTaskUnblockTime+0x14>
 8008970:	2301      	movs	r3, #1
 8008972:	e000      	b.n	8008976 <prvResetNextTaskUnblockTime+0x16>
 8008974:	2300      	movs	r3, #0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d004      	beq.n	8008984 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800897a:	4b0b      	ldr	r3, [pc, #44]	; (80089a8 <prvResetNextTaskUnblockTime+0x48>)
 800897c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008980:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008982:	e008      	b.n	8008996 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008984:	4b07      	ldr	r3, [pc, #28]	; (80089a4 <prvResetNextTaskUnblockTime+0x44>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	4a05      	ldr	r2, [pc, #20]	; (80089a8 <prvResetNextTaskUnblockTime+0x48>)
 8008994:	6013      	str	r3, [r2, #0]
}
 8008996:	bf00      	nop
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	20000200 	.word	0x20000200
 80089a8:	20000268 	.word	0x20000268

080089ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80089b2:	4b0b      	ldr	r3, [pc, #44]	; (80089e0 <xTaskGetSchedulerState+0x34>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d102      	bne.n	80089c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80089ba:	2301      	movs	r3, #1
 80089bc:	607b      	str	r3, [r7, #4]
 80089be:	e008      	b.n	80089d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089c0:	4b08      	ldr	r3, [pc, #32]	; (80089e4 <xTaskGetSchedulerState+0x38>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d102      	bne.n	80089ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80089c8:	2302      	movs	r3, #2
 80089ca:	607b      	str	r3, [r7, #4]
 80089cc:	e001      	b.n	80089d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80089ce:	2300      	movs	r3, #0
 80089d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80089d2:	687b      	ldr	r3, [r7, #4]
	}
 80089d4:	4618      	mov	r0, r3
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr
 80089e0:	20000254 	.word	0x20000254
 80089e4:	20000270 	.word	0x20000270

080089e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80089f4:	2300      	movs	r3, #0
 80089f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d06e      	beq.n	8008adc <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a02:	4b39      	ldr	r3, [pc, #228]	; (8008ae8 <xTaskPriorityInherit+0x100>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d25e      	bcs.n	8008aca <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	699b      	ldr	r3, [r3, #24]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	db06      	blt.n	8008a22 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a14:	4b34      	ldr	r3, [pc, #208]	; (8008ae8 <xTaskPriorityInherit+0x100>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1a:	f1c3 0207 	rsb	r2, r3, #7
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	6959      	ldr	r1, [r3, #20]
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4413      	add	r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4a2e      	ldr	r2, [pc, #184]	; (8008aec <xTaskPriorityInherit+0x104>)
 8008a34:	4413      	add	r3, r2
 8008a36:	4299      	cmp	r1, r3
 8008a38:	d101      	bne.n	8008a3e <xTaskPriorityInherit+0x56>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e000      	b.n	8008a40 <xTaskPriorityInherit+0x58>
 8008a3e:	2300      	movs	r3, #0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d03a      	beq.n	8008aba <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	3304      	adds	r3, #4
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7fe fc09 	bl	8007260 <uxListRemove>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d115      	bne.n	8008a80 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a58:	4924      	ldr	r1, [pc, #144]	; (8008aec <xTaskPriorityInherit+0x104>)
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	440b      	add	r3, r1
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d10a      	bne.n	8008a80 <xTaskPriorityInherit+0x98>
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6e:	2201      	movs	r2, #1
 8008a70:	fa02 f303 	lsl.w	r3, r2, r3
 8008a74:	43da      	mvns	r2, r3
 8008a76:	4b1e      	ldr	r3, [pc, #120]	; (8008af0 <xTaskPriorityInherit+0x108>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	4a1c      	ldr	r2, [pc, #112]	; (8008af0 <xTaskPriorityInherit+0x108>)
 8008a7e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a80:	4b19      	ldr	r3, [pc, #100]	; (8008ae8 <xTaskPriorityInherit+0x100>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8e:	2201      	movs	r2, #1
 8008a90:	409a      	lsls	r2, r3
 8008a92:	4b17      	ldr	r3, [pc, #92]	; (8008af0 <xTaskPriorityInherit+0x108>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	4a15      	ldr	r2, [pc, #84]	; (8008af0 <xTaskPriorityInherit+0x108>)
 8008a9a:	6013      	str	r3, [r2, #0]
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	4413      	add	r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	4a10      	ldr	r2, [pc, #64]	; (8008aec <xTaskPriorityInherit+0x104>)
 8008aaa:	441a      	add	r2, r3
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	3304      	adds	r3, #4
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	4610      	mov	r0, r2
 8008ab4:	f7fe fb77 	bl	80071a6 <vListInsertEnd>
 8008ab8:	e004      	b.n	8008ac4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008aba:	4b0b      	ldr	r3, [pc, #44]	; (8008ae8 <xTaskPriorityInherit+0x100>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	60fb      	str	r3, [r7, #12]
 8008ac8:	e008      	b.n	8008adc <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ace:	4b06      	ldr	r3, [pc, #24]	; (8008ae8 <xTaskPriorityInherit+0x100>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d201      	bcs.n	8008adc <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008adc:	68fb      	ldr	r3, [r7, #12]
	}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	20000148 	.word	0x20000148
 8008aec:	2000014c 	.word	0x2000014c
 8008af0:	20000250 	.word	0x20000250

08008af4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008b00:	2300      	movs	r3, #0
 8008b02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d070      	beq.n	8008bec <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008b0a:	4b3b      	ldr	r3, [pc, #236]	; (8008bf8 <xTaskPriorityDisinherit+0x104>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	693a      	ldr	r2, [r7, #16]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d00b      	beq.n	8008b2c <xTaskPriorityDisinherit+0x38>
 8008b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b18:	b672      	cpsid	i
 8008b1a:	f383 8811 	msr	BASEPRI, r3
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	b662      	cpsie	i
 8008b28:	60fb      	str	r3, [r7, #12]
 8008b2a:	e7fe      	b.n	8008b2a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10b      	bne.n	8008b4c <xTaskPriorityDisinherit+0x58>
 8008b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b38:	b672      	cpsid	i
 8008b3a:	f383 8811 	msr	BASEPRI, r3
 8008b3e:	f3bf 8f6f 	isb	sy
 8008b42:	f3bf 8f4f 	dsb	sy
 8008b46:	b662      	cpsie	i
 8008b48:	60bb      	str	r3, [r7, #8]
 8008b4a:	e7fe      	b.n	8008b4a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b50:	1e5a      	subs	r2, r3, #1
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d044      	beq.n	8008bec <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d140      	bne.n	8008bec <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	3304      	adds	r3, #4
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7fe fb76 	bl	8007260 <uxListRemove>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d115      	bne.n	8008ba6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7e:	491f      	ldr	r1, [pc, #124]	; (8008bfc <xTaskPriorityDisinherit+0x108>)
 8008b80:	4613      	mov	r3, r2
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	4413      	add	r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	440b      	add	r3, r1
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10a      	bne.n	8008ba6 <xTaskPriorityDisinherit+0xb2>
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b94:	2201      	movs	r2, #1
 8008b96:	fa02 f303 	lsl.w	r3, r2, r3
 8008b9a:	43da      	mvns	r2, r3
 8008b9c:	4b18      	ldr	r3, [pc, #96]	; (8008c00 <xTaskPriorityDisinherit+0x10c>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	4a17      	ldr	r2, [pc, #92]	; (8008c00 <xTaskPriorityDisinherit+0x10c>)
 8008ba4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb2:	f1c3 0207 	rsb	r2, r3, #7
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	409a      	lsls	r2, r3
 8008bc2:	4b0f      	ldr	r3, [pc, #60]	; (8008c00 <xTaskPriorityDisinherit+0x10c>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	4a0d      	ldr	r2, [pc, #52]	; (8008c00 <xTaskPriorityDisinherit+0x10c>)
 8008bca:	6013      	str	r3, [r2, #0]
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4413      	add	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4a08      	ldr	r2, [pc, #32]	; (8008bfc <xTaskPriorityDisinherit+0x108>)
 8008bda:	441a      	add	r2, r3
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	3304      	adds	r3, #4
 8008be0:	4619      	mov	r1, r3
 8008be2:	4610      	mov	r0, r2
 8008be4:	f7fe fadf 	bl	80071a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008be8:	2301      	movs	r3, #1
 8008bea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008bec:	697b      	ldr	r3, [r7, #20]
	}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3718      	adds	r7, #24
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	20000148 	.word	0x20000148
 8008bfc:	2000014c 	.word	0x2000014c
 8008c00:	20000250 	.word	0x20000250

08008c04 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b088      	sub	sp, #32
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008c12:	2301      	movs	r3, #1
 8008c14:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f000 808a 	beq.w	8008d32 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10b      	bne.n	8008c3e <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8008c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2a:	b672      	cpsid	i
 8008c2c:	f383 8811 	msr	BASEPRI, r3
 8008c30:	f3bf 8f6f 	isb	sy
 8008c34:	f3bf 8f4f 	dsb	sy
 8008c38:	b662      	cpsie	i
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	e7fe      	b.n	8008c3c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c42:	683a      	ldr	r2, [r7, #0]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d902      	bls.n	8008c4e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	61fb      	str	r3, [r7, #28]
 8008c4c:	e002      	b.n	8008c54 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c52:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c58:	69fa      	ldr	r2, [r7, #28]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d069      	beq.n	8008d32 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c62:	697a      	ldr	r2, [r7, #20]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d164      	bne.n	8008d32 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008c68:	4b34      	ldr	r3, [pc, #208]	; (8008d3c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	69ba      	ldr	r2, [r7, #24]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d10b      	bne.n	8008c8a <vTaskPriorityDisinheritAfterTimeout+0x86>
 8008c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c76:	b672      	cpsid	i
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	b662      	cpsie	i
 8008c86:	60bb      	str	r3, [r7, #8]
 8008c88:	e7fe      	b.n	8008c88 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	69fa      	ldr	r2, [r7, #28]
 8008c94:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	db04      	blt.n	8008ca8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	f1c3 0207 	rsb	r2, r3, #7
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	6959      	ldr	r1, [r3, #20]
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	4413      	add	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4a22      	ldr	r2, [pc, #136]	; (8008d40 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008cb8:	4413      	add	r3, r2
 8008cba:	4299      	cmp	r1, r3
 8008cbc:	d101      	bne.n	8008cc2 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e000      	b.n	8008cc4 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d034      	beq.n	8008d32 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	3304      	adds	r3, #4
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7fe fac7 	bl	8007260 <uxListRemove>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d115      	bne.n	8008d04 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cdc:	4918      	ldr	r1, [pc, #96]	; (8008d40 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008cde:	4613      	mov	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	440b      	add	r3, r1
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10a      	bne.n	8008d04 <vTaskPriorityDisinheritAfterTimeout+0x100>
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf8:	43da      	mvns	r2, r3
 8008cfa:	4b12      	ldr	r3, [pc, #72]	; (8008d44 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4013      	ands	r3, r2
 8008d00:	4a10      	ldr	r2, [pc, #64]	; (8008d44 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8008d02:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d08:	2201      	movs	r2, #1
 8008d0a:	409a      	lsls	r2, r3
 8008d0c:	4b0d      	ldr	r3, [pc, #52]	; (8008d44 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	4a0c      	ldr	r2, [pc, #48]	; (8008d44 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8008d14:	6013      	str	r3, [r2, #0]
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4413      	add	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	4a07      	ldr	r2, [pc, #28]	; (8008d40 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008d24:	441a      	add	r2, r3
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	3304      	adds	r3, #4
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	4610      	mov	r0, r2
 8008d2e:	f7fe fa3a 	bl	80071a6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d32:	bf00      	nop
 8008d34:	3720      	adds	r7, #32
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	20000148 	.word	0x20000148
 8008d40:	2000014c 	.word	0x2000014c
 8008d44:	20000250 	.word	0x20000250

08008d48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008d48:	b480      	push	{r7}
 8008d4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008d4c:	4b07      	ldr	r3, [pc, #28]	; (8008d6c <pvTaskIncrementMutexHeldCount+0x24>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d004      	beq.n	8008d5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008d54:	4b05      	ldr	r3, [pc, #20]	; (8008d6c <pvTaskIncrementMutexHeldCount+0x24>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d5a:	3201      	adds	r2, #1
 8008d5c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008d5e:	4b03      	ldr	r3, [pc, #12]	; (8008d6c <pvTaskIncrementMutexHeldCount+0x24>)
 8008d60:	681b      	ldr	r3, [r3, #0]
	}
 8008d62:	4618      	mov	r0, r3
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	20000148 	.word	0x20000148

08008d70 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d7a:	4b29      	ldr	r3, [pc, #164]	; (8008e20 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d80:	4b28      	ldr	r3, [pc, #160]	; (8008e24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	3304      	adds	r3, #4
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7fe fa6a 	bl	8007260 <uxListRemove>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10b      	bne.n	8008daa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008d92:	4b24      	ldr	r3, [pc, #144]	; (8008e24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d98:	2201      	movs	r2, #1
 8008d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9e:	43da      	mvns	r2, r3
 8008da0:	4b21      	ldr	r3, [pc, #132]	; (8008e28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4013      	ands	r3, r2
 8008da6:	4a20      	ldr	r2, [pc, #128]	; (8008e28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008da8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008db0:	d10a      	bne.n	8008dc8 <prvAddCurrentTaskToDelayedList+0x58>
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d007      	beq.n	8008dc8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008db8:	4b1a      	ldr	r3, [pc, #104]	; (8008e24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	481a      	ldr	r0, [pc, #104]	; (8008e2c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008dc2:	f7fe f9f0 	bl	80071a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008dc6:	e026      	b.n	8008e16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4413      	add	r3, r2
 8008dce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008dd0:	4b14      	ldr	r3, [pc, #80]	; (8008e24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008dd8:	68ba      	ldr	r2, [r7, #8]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d209      	bcs.n	8008df4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008de0:	4b13      	ldr	r3, [pc, #76]	; (8008e30 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	4b0f      	ldr	r3, [pc, #60]	; (8008e24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3304      	adds	r3, #4
 8008dea:	4619      	mov	r1, r3
 8008dec:	4610      	mov	r0, r2
 8008dee:	f7fe f9fe 	bl	80071ee <vListInsert>
}
 8008df2:	e010      	b.n	8008e16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008df4:	4b0f      	ldr	r3, [pc, #60]	; (8008e34 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	4b0a      	ldr	r3, [pc, #40]	; (8008e24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	3304      	adds	r3, #4
 8008dfe:	4619      	mov	r1, r3
 8008e00:	4610      	mov	r0, r2
 8008e02:	f7fe f9f4 	bl	80071ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e06:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d202      	bcs.n	8008e16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008e10:	4a09      	ldr	r2, [pc, #36]	; (8008e38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	6013      	str	r3, [r2, #0]
}
 8008e16:	bf00      	nop
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	2000024c 	.word	0x2000024c
 8008e24:	20000148 	.word	0x20000148
 8008e28:	20000250 	.word	0x20000250
 8008e2c:	20000234 	.word	0x20000234
 8008e30:	20000204 	.word	0x20000204
 8008e34:	20000200 	.word	0x20000200
 8008e38:	20000268 	.word	0x20000268

08008e3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	3b04      	subs	r3, #4
 8008e4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	3b04      	subs	r3, #4
 8008e5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	f023 0201 	bic.w	r2, r3, #1
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	3b04      	subs	r3, #4
 8008e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e6c:	4a0c      	ldr	r2, [pc, #48]	; (8008ea0 <pxPortInitialiseStack+0x64>)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	3b14      	subs	r3, #20
 8008e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	3b04      	subs	r3, #4
 8008e82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f06f 0202 	mvn.w	r2, #2
 8008e8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	3b20      	subs	r3, #32
 8008e90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e92:	68fb      	ldr	r3, [r7, #12]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3714      	adds	r7, #20
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr
 8008ea0:	08008ea5 	.word	0x08008ea5

08008ea4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008eae:	4b13      	ldr	r3, [pc, #76]	; (8008efc <prvTaskExitError+0x58>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008eb6:	d00b      	beq.n	8008ed0 <prvTaskExitError+0x2c>
 8008eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebc:	b672      	cpsid	i
 8008ebe:	f383 8811 	msr	BASEPRI, r3
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	b662      	cpsie	i
 8008ecc:	60fb      	str	r3, [r7, #12]
 8008ece:	e7fe      	b.n	8008ece <prvTaskExitError+0x2a>
 8008ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed4:	b672      	cpsid	i
 8008ed6:	f383 8811 	msr	BASEPRI, r3
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	b662      	cpsie	i
 8008ee4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ee6:	bf00      	nop
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d0fc      	beq.n	8008ee8 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008eee:	bf00      	nop
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	20000034 	.word	0x20000034

08008f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f00:	4b07      	ldr	r3, [pc, #28]	; (8008f20 <pxCurrentTCBConst2>)
 8008f02:	6819      	ldr	r1, [r3, #0]
 8008f04:	6808      	ldr	r0, [r1, #0]
 8008f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f0a:	f380 8809 	msr	PSP, r0
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f04f 0000 	mov.w	r0, #0
 8008f16:	f380 8811 	msr	BASEPRI, r0
 8008f1a:	4770      	bx	lr
 8008f1c:	f3af 8000 	nop.w

08008f20 <pxCurrentTCBConst2>:
 8008f20:	20000148 	.word	0x20000148
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop

08008f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f28:	4808      	ldr	r0, [pc, #32]	; (8008f4c <prvPortStartFirstTask+0x24>)
 8008f2a:	6800      	ldr	r0, [r0, #0]
 8008f2c:	6800      	ldr	r0, [r0, #0]
 8008f2e:	f380 8808 	msr	MSP, r0
 8008f32:	f04f 0000 	mov.w	r0, #0
 8008f36:	f380 8814 	msr	CONTROL, r0
 8008f3a:	b662      	cpsie	i
 8008f3c:	b661      	cpsie	f
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	f3bf 8f6f 	isb	sy
 8008f46:	df00      	svc	0
 8008f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f4a:	bf00      	nop
 8008f4c:	e000ed08 	.word	0xe000ed08

08008f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f56:	4b36      	ldr	r3, [pc, #216]	; (8009030 <xPortStartScheduler+0xe0>)
 8008f58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	22ff      	movs	r2, #255	; 0xff
 8008f66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f70:	78fb      	ldrb	r3, [r7, #3]
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f78:	b2da      	uxtb	r2, r3
 8008f7a:	4b2e      	ldr	r3, [pc, #184]	; (8009034 <xPortStartScheduler+0xe4>)
 8008f7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f7e:	4b2e      	ldr	r3, [pc, #184]	; (8009038 <xPortStartScheduler+0xe8>)
 8008f80:	2207      	movs	r2, #7
 8008f82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f84:	e009      	b.n	8008f9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008f86:	4b2c      	ldr	r3, [pc, #176]	; (8009038 <xPortStartScheduler+0xe8>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	4a2a      	ldr	r2, [pc, #168]	; (8009038 <xPortStartScheduler+0xe8>)
 8008f8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	005b      	lsls	r3, r3, #1
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f9a:	78fb      	ldrb	r3, [r7, #3]
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fa2:	2b80      	cmp	r3, #128	; 0x80
 8008fa4:	d0ef      	beq.n	8008f86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008fa6:	4b24      	ldr	r3, [pc, #144]	; (8009038 <xPortStartScheduler+0xe8>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f1c3 0307 	rsb	r3, r3, #7
 8008fae:	2b04      	cmp	r3, #4
 8008fb0:	d00b      	beq.n	8008fca <xPortStartScheduler+0x7a>
 8008fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb6:	b672      	cpsid	i
 8008fb8:	f383 8811 	msr	BASEPRI, r3
 8008fbc:	f3bf 8f6f 	isb	sy
 8008fc0:	f3bf 8f4f 	dsb	sy
 8008fc4:	b662      	cpsie	i
 8008fc6:	60bb      	str	r3, [r7, #8]
 8008fc8:	e7fe      	b.n	8008fc8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008fca:	4b1b      	ldr	r3, [pc, #108]	; (8009038 <xPortStartScheduler+0xe8>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	021b      	lsls	r3, r3, #8
 8008fd0:	4a19      	ldr	r2, [pc, #100]	; (8009038 <xPortStartScheduler+0xe8>)
 8008fd2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008fd4:	4b18      	ldr	r3, [pc, #96]	; (8009038 <xPortStartScheduler+0xe8>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fdc:	4a16      	ldr	r2, [pc, #88]	; (8009038 <xPortStartScheduler+0xe8>)
 8008fde:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	b2da      	uxtb	r2, r3
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fe8:	4b14      	ldr	r3, [pc, #80]	; (800903c <xPortStartScheduler+0xec>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a13      	ldr	r2, [pc, #76]	; (800903c <xPortStartScheduler+0xec>)
 8008fee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ff2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ff4:	4b11      	ldr	r3, [pc, #68]	; (800903c <xPortStartScheduler+0xec>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a10      	ldr	r2, [pc, #64]	; (800903c <xPortStartScheduler+0xec>)
 8008ffa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008ffe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009000:	f000 f8d4 	bl	80091ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009004:	4b0e      	ldr	r3, [pc, #56]	; (8009040 <xPortStartScheduler+0xf0>)
 8009006:	2200      	movs	r2, #0
 8009008:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800900a:	f000 f8f3 	bl	80091f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800900e:	4b0d      	ldr	r3, [pc, #52]	; (8009044 <xPortStartScheduler+0xf4>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a0c      	ldr	r2, [pc, #48]	; (8009044 <xPortStartScheduler+0xf4>)
 8009014:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009018:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800901a:	f7ff ff85 	bl	8008f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800901e:	f7ff fa77 	bl	8008510 <vTaskSwitchContext>
	prvTaskExitError();
 8009022:	f7ff ff3f 	bl	8008ea4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	e000e400 	.word	0xe000e400
 8009034:	20000274 	.word	0x20000274
 8009038:	20000278 	.word	0x20000278
 800903c:	e000ed20 	.word	0xe000ed20
 8009040:	20000034 	.word	0x20000034
 8009044:	e000ef34 	.word	0xe000ef34

08009048 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009052:	b672      	cpsid	i
 8009054:	f383 8811 	msr	BASEPRI, r3
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	b662      	cpsie	i
 8009062:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009064:	4b0f      	ldr	r3, [pc, #60]	; (80090a4 <vPortEnterCritical+0x5c>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3301      	adds	r3, #1
 800906a:	4a0e      	ldr	r2, [pc, #56]	; (80090a4 <vPortEnterCritical+0x5c>)
 800906c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800906e:	4b0d      	ldr	r3, [pc, #52]	; (80090a4 <vPortEnterCritical+0x5c>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d110      	bne.n	8009098 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009076:	4b0c      	ldr	r3, [pc, #48]	; (80090a8 <vPortEnterCritical+0x60>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00b      	beq.n	8009098 <vPortEnterCritical+0x50>
 8009080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009084:	b672      	cpsid	i
 8009086:	f383 8811 	msr	BASEPRI, r3
 800908a:	f3bf 8f6f 	isb	sy
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	b662      	cpsie	i
 8009094:	603b      	str	r3, [r7, #0]
 8009096:	e7fe      	b.n	8009096 <vPortEnterCritical+0x4e>
	}
}
 8009098:	bf00      	nop
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr
 80090a4:	20000034 	.word	0x20000034
 80090a8:	e000ed04 	.word	0xe000ed04

080090ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80090b2:	4b12      	ldr	r3, [pc, #72]	; (80090fc <vPortExitCritical+0x50>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10b      	bne.n	80090d2 <vPortExitCritical+0x26>
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	b672      	cpsid	i
 80090c0:	f383 8811 	msr	BASEPRI, r3
 80090c4:	f3bf 8f6f 	isb	sy
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	b662      	cpsie	i
 80090ce:	607b      	str	r3, [r7, #4]
 80090d0:	e7fe      	b.n	80090d0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80090d2:	4b0a      	ldr	r3, [pc, #40]	; (80090fc <vPortExitCritical+0x50>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	3b01      	subs	r3, #1
 80090d8:	4a08      	ldr	r2, [pc, #32]	; (80090fc <vPortExitCritical+0x50>)
 80090da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090dc:	4b07      	ldr	r3, [pc, #28]	; (80090fc <vPortExitCritical+0x50>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d104      	bne.n	80090ee <vPortExitCritical+0x42>
 80090e4:	2300      	movs	r3, #0
 80090e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80090ee:	bf00      	nop
 80090f0:	370c      	adds	r7, #12
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	20000034 	.word	0x20000034

08009100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009100:	f3ef 8009 	mrs	r0, PSP
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	4b15      	ldr	r3, [pc, #84]	; (8009160 <pxCurrentTCBConst>)
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	f01e 0f10 	tst.w	lr, #16
 8009110:	bf08      	it	eq
 8009112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911a:	6010      	str	r0, [r2, #0]
 800911c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009124:	b672      	cpsid	i
 8009126:	f380 8811 	msr	BASEPRI, r0
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	f3bf 8f6f 	isb	sy
 8009132:	b662      	cpsie	i
 8009134:	f7ff f9ec 	bl	8008510 <vTaskSwitchContext>
 8009138:	f04f 0000 	mov.w	r0, #0
 800913c:	f380 8811 	msr	BASEPRI, r0
 8009140:	bc09      	pop	{r0, r3}
 8009142:	6819      	ldr	r1, [r3, #0]
 8009144:	6808      	ldr	r0, [r1, #0]
 8009146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914a:	f01e 0f10 	tst.w	lr, #16
 800914e:	bf08      	it	eq
 8009150:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009154:	f380 8809 	msr	PSP, r0
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop

08009160 <pxCurrentTCBConst>:
 8009160:	20000148 	.word	0x20000148
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009164:	bf00      	nop
 8009166:	bf00      	nop

08009168 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
	__asm volatile
 800916e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009172:	b672      	cpsid	i
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	b662      	cpsie	i
 8009182:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009184:	f7ff f906 	bl	8008394 <xTaskIncrementTick>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d003      	beq.n	8009196 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800918e:	4b06      	ldr	r3, [pc, #24]	; (80091a8 <SysTick_Handler+0x40>)
 8009190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009194:	601a      	str	r2, [r3, #0]
 8009196:	2300      	movs	r3, #0
 8009198:	603b      	str	r3, [r7, #0]
	__asm volatile
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80091a0:	bf00      	nop
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	e000ed04 	.word	0xe000ed04

080091ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80091ac:	b480      	push	{r7}
 80091ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091b0:	4b0b      	ldr	r3, [pc, #44]	; (80091e0 <vPortSetupTimerInterrupt+0x34>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091b6:	4b0b      	ldr	r3, [pc, #44]	; (80091e4 <vPortSetupTimerInterrupt+0x38>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091bc:	4b0a      	ldr	r3, [pc, #40]	; (80091e8 <vPortSetupTimerInterrupt+0x3c>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a0a      	ldr	r2, [pc, #40]	; (80091ec <vPortSetupTimerInterrupt+0x40>)
 80091c2:	fba2 2303 	umull	r2, r3, r2, r3
 80091c6:	099b      	lsrs	r3, r3, #6
 80091c8:	4a09      	ldr	r2, [pc, #36]	; (80091f0 <vPortSetupTimerInterrupt+0x44>)
 80091ca:	3b01      	subs	r3, #1
 80091cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091ce:	4b04      	ldr	r3, [pc, #16]	; (80091e0 <vPortSetupTimerInterrupt+0x34>)
 80091d0:	2207      	movs	r2, #7
 80091d2:	601a      	str	r2, [r3, #0]
}
 80091d4:	bf00      	nop
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	e000e010 	.word	0xe000e010
 80091e4:	e000e018 	.word	0xe000e018
 80091e8:	20000004 	.word	0x20000004
 80091ec:	10624dd3 	.word	0x10624dd3
 80091f0:	e000e014 	.word	0xe000e014

080091f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009204 <vPortEnableVFP+0x10>
 80091f8:	6801      	ldr	r1, [r0, #0]
 80091fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80091fe:	6001      	str	r1, [r0, #0]
 8009200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009202:	bf00      	nop
 8009204:	e000ed88 	.word	0xe000ed88

08009208 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800920e:	f3ef 8305 	mrs	r3, IPSR
 8009212:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2b0f      	cmp	r3, #15
 8009218:	d915      	bls.n	8009246 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800921a:	4a18      	ldr	r2, [pc, #96]	; (800927c <vPortValidateInterruptPriority+0x74>)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	4413      	add	r3, r2
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009224:	4b16      	ldr	r3, [pc, #88]	; (8009280 <vPortValidateInterruptPriority+0x78>)
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	7afa      	ldrb	r2, [r7, #11]
 800922a:	429a      	cmp	r2, r3
 800922c:	d20b      	bcs.n	8009246 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009232:	b672      	cpsid	i
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	b662      	cpsie	i
 8009242:	607b      	str	r3, [r7, #4]
 8009244:	e7fe      	b.n	8009244 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009246:	4b0f      	ldr	r3, [pc, #60]	; (8009284 <vPortValidateInterruptPriority+0x7c>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800924e:	4b0e      	ldr	r3, [pc, #56]	; (8009288 <vPortValidateInterruptPriority+0x80>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	429a      	cmp	r2, r3
 8009254:	d90b      	bls.n	800926e <vPortValidateInterruptPriority+0x66>
 8009256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925a:	b672      	cpsid	i
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	b662      	cpsie	i
 800926a:	603b      	str	r3, [r7, #0]
 800926c:	e7fe      	b.n	800926c <vPortValidateInterruptPriority+0x64>
	}
 800926e:	bf00      	nop
 8009270:	3714      	adds	r7, #20
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	e000e3f0 	.word	0xe000e3f0
 8009280:	20000274 	.word	0x20000274
 8009284:	e000ed0c 	.word	0xe000ed0c
 8009288:	20000278 	.word	0x20000278

0800928c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b08a      	sub	sp, #40	; 0x28
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009294:	2300      	movs	r3, #0
 8009296:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009298:	f7fe ffd0 	bl	800823c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800929c:	4b5c      	ldr	r3, [pc, #368]	; (8009410 <pvPortMalloc+0x184>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d101      	bne.n	80092a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80092a4:	f000 f91a 	bl	80094dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092a8:	4b5a      	ldr	r3, [pc, #360]	; (8009414 <pvPortMalloc+0x188>)
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4013      	ands	r3, r2
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f040 8090 	bne.w	80093d6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d01e      	beq.n	80092fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80092bc:	2208      	movs	r2, #8
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4413      	add	r3, r2
 80092c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f003 0307 	and.w	r3, r3, #7
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d015      	beq.n	80092fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f023 0307 	bic.w	r3, r3, #7
 80092d4:	3308      	adds	r3, #8
 80092d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f003 0307 	and.w	r3, r3, #7
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00b      	beq.n	80092fa <pvPortMalloc+0x6e>
 80092e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e6:	b672      	cpsid	i
 80092e8:	f383 8811 	msr	BASEPRI, r3
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	b662      	cpsie	i
 80092f6:	617b      	str	r3, [r7, #20]
 80092f8:	e7fe      	b.n	80092f8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d06a      	beq.n	80093d6 <pvPortMalloc+0x14a>
 8009300:	4b45      	ldr	r3, [pc, #276]	; (8009418 <pvPortMalloc+0x18c>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	429a      	cmp	r2, r3
 8009308:	d865      	bhi.n	80093d6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800930a:	4b44      	ldr	r3, [pc, #272]	; (800941c <pvPortMalloc+0x190>)
 800930c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800930e:	4b43      	ldr	r3, [pc, #268]	; (800941c <pvPortMalloc+0x190>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009314:	e004      	b.n	8009320 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009318:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800931a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	429a      	cmp	r2, r3
 8009328:	d903      	bls.n	8009332 <pvPortMalloc+0xa6>
 800932a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1f1      	bne.n	8009316 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009332:	4b37      	ldr	r3, [pc, #220]	; (8009410 <pvPortMalloc+0x184>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009338:	429a      	cmp	r2, r3
 800933a:	d04c      	beq.n	80093d6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800933c:	6a3b      	ldr	r3, [r7, #32]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2208      	movs	r2, #8
 8009342:	4413      	add	r3, r2
 8009344:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	6a3b      	ldr	r3, [r7, #32]
 800934c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800934e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009350:	685a      	ldr	r2, [r3, #4]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	1ad2      	subs	r2, r2, r3
 8009356:	2308      	movs	r3, #8
 8009358:	005b      	lsls	r3, r3, #1
 800935a:	429a      	cmp	r2, r3
 800935c:	d920      	bls.n	80093a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800935e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4413      	add	r3, r2
 8009364:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	f003 0307 	and.w	r3, r3, #7
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00b      	beq.n	8009388 <pvPortMalloc+0xfc>
 8009370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009374:	b672      	cpsid	i
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	b662      	cpsie	i
 8009384:	613b      	str	r3, [r7, #16]
 8009386:	e7fe      	b.n	8009386 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938a:	685a      	ldr	r2, [r3, #4]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	1ad2      	subs	r2, r2, r3
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800939a:	69b8      	ldr	r0, [r7, #24]
 800939c:	f000 f900 	bl	80095a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093a0:	4b1d      	ldr	r3, [pc, #116]	; (8009418 <pvPortMalloc+0x18c>)
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	1ad3      	subs	r3, r2, r3
 80093aa:	4a1b      	ldr	r2, [pc, #108]	; (8009418 <pvPortMalloc+0x18c>)
 80093ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093ae:	4b1a      	ldr	r3, [pc, #104]	; (8009418 <pvPortMalloc+0x18c>)
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	4b1b      	ldr	r3, [pc, #108]	; (8009420 <pvPortMalloc+0x194>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d203      	bcs.n	80093c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093ba:	4b17      	ldr	r3, [pc, #92]	; (8009418 <pvPortMalloc+0x18c>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a18      	ldr	r2, [pc, #96]	; (8009420 <pvPortMalloc+0x194>)
 80093c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c4:	685a      	ldr	r2, [r3, #4]
 80093c6:	4b13      	ldr	r3, [pc, #76]	; (8009414 <pvPortMalloc+0x188>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	431a      	orrs	r2, r3
 80093cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d2:	2200      	movs	r2, #0
 80093d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80093d6:	f7fe ff3f 	bl	8008258 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d101      	bne.n	80093e4 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80093e0:	f7f7 f8f8 	bl	80005d4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	f003 0307 	and.w	r3, r3, #7
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00b      	beq.n	8009406 <pvPortMalloc+0x17a>
 80093ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f2:	b672      	cpsid	i
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	b662      	cpsie	i
 8009402:	60fb      	str	r3, [r7, #12]
 8009404:	e7fe      	b.n	8009404 <pvPortMalloc+0x178>
	return pvReturn;
 8009406:	69fb      	ldr	r3, [r7, #28]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3728      	adds	r7, #40	; 0x28
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	20008284 	.word	0x20008284
 8009414:	20008290 	.word	0x20008290
 8009418:	20008288 	.word	0x20008288
 800941c:	2000827c 	.word	0x2000827c
 8009420:	2000828c 	.word	0x2000828c

08009424 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d04a      	beq.n	80094cc <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009436:	2308      	movs	r3, #8
 8009438:	425b      	negs	r3, r3
 800943a:	697a      	ldr	r2, [r7, #20]
 800943c:	4413      	add	r3, r2
 800943e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	685a      	ldr	r2, [r3, #4]
 8009448:	4b22      	ldr	r3, [pc, #136]	; (80094d4 <vPortFree+0xb0>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4013      	ands	r3, r2
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10b      	bne.n	800946a <vPortFree+0x46>
 8009452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009456:	b672      	cpsid	i
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	b662      	cpsie	i
 8009466:	60fb      	str	r3, [r7, #12]
 8009468:	e7fe      	b.n	8009468 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00b      	beq.n	800948a <vPortFree+0x66>
 8009472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009476:	b672      	cpsid	i
 8009478:	f383 8811 	msr	BASEPRI, r3
 800947c:	f3bf 8f6f 	isb	sy
 8009480:	f3bf 8f4f 	dsb	sy
 8009484:	b662      	cpsie	i
 8009486:	60bb      	str	r3, [r7, #8]
 8009488:	e7fe      	b.n	8009488 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	685a      	ldr	r2, [r3, #4]
 800948e:	4b11      	ldr	r3, [pc, #68]	; (80094d4 <vPortFree+0xb0>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4013      	ands	r3, r2
 8009494:	2b00      	cmp	r3, #0
 8009496:	d019      	beq.n	80094cc <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d115      	bne.n	80094cc <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	685a      	ldr	r2, [r3, #4]
 80094a4:	4b0b      	ldr	r3, [pc, #44]	; (80094d4 <vPortFree+0xb0>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	43db      	mvns	r3, r3
 80094aa:	401a      	ands	r2, r3
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80094b0:	f7fe fec4 	bl	800823c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	685a      	ldr	r2, [r3, #4]
 80094b8:	4b07      	ldr	r3, [pc, #28]	; (80094d8 <vPortFree+0xb4>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4413      	add	r3, r2
 80094be:	4a06      	ldr	r2, [pc, #24]	; (80094d8 <vPortFree+0xb4>)
 80094c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80094c2:	6938      	ldr	r0, [r7, #16]
 80094c4:	f000 f86c 	bl	80095a0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80094c8:	f7fe fec6 	bl	8008258 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80094cc:	bf00      	nop
 80094ce:	3718      	adds	r7, #24
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	20008290 	.word	0x20008290
 80094d8:	20008288 	.word	0x20008288

080094dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80094e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094e8:	4b27      	ldr	r3, [pc, #156]	; (8009588 <prvHeapInit+0xac>)
 80094ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f003 0307 	and.w	r3, r3, #7
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00c      	beq.n	8009510 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	3307      	adds	r3, #7
 80094fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f023 0307 	bic.w	r3, r3, #7
 8009502:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	4a1f      	ldr	r2, [pc, #124]	; (8009588 <prvHeapInit+0xac>)
 800950c:	4413      	add	r3, r2
 800950e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009514:	4a1d      	ldr	r2, [pc, #116]	; (800958c <prvHeapInit+0xb0>)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800951a:	4b1c      	ldr	r3, [pc, #112]	; (800958c <prvHeapInit+0xb0>)
 800951c:	2200      	movs	r2, #0
 800951e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	4413      	add	r3, r2
 8009526:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009528:	2208      	movs	r2, #8
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	1a9b      	subs	r3, r3, r2
 800952e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f023 0307 	bic.w	r3, r3, #7
 8009536:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	4a15      	ldr	r2, [pc, #84]	; (8009590 <prvHeapInit+0xb4>)
 800953c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800953e:	4b14      	ldr	r3, [pc, #80]	; (8009590 <prvHeapInit+0xb4>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2200      	movs	r2, #0
 8009544:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009546:	4b12      	ldr	r3, [pc, #72]	; (8009590 <prvHeapInit+0xb4>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2200      	movs	r2, #0
 800954c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	1ad2      	subs	r2, r2, r3
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800955c:	4b0c      	ldr	r3, [pc, #48]	; (8009590 <prvHeapInit+0xb4>)
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	4a0a      	ldr	r2, [pc, #40]	; (8009594 <prvHeapInit+0xb8>)
 800956a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	4a09      	ldr	r2, [pc, #36]	; (8009598 <prvHeapInit+0xbc>)
 8009572:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009574:	4b09      	ldr	r3, [pc, #36]	; (800959c <prvHeapInit+0xc0>)
 8009576:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800957a:	601a      	str	r2, [r3, #0]
}
 800957c:	bf00      	nop
 800957e:	3714      	adds	r7, #20
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr
 8009588:	2000027c 	.word	0x2000027c
 800958c:	2000827c 	.word	0x2000827c
 8009590:	20008284 	.word	0x20008284
 8009594:	2000828c 	.word	0x2000828c
 8009598:	20008288 	.word	0x20008288
 800959c:	20008290 	.word	0x20008290

080095a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80095a8:	4b28      	ldr	r3, [pc, #160]	; (800964c <prvInsertBlockIntoFreeList+0xac>)
 80095aa:	60fb      	str	r3, [r7, #12]
 80095ac:	e002      	b.n	80095b4 <prvInsertBlockIntoFreeList+0x14>
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	60fb      	str	r3, [r7, #12]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d8f7      	bhi.n	80095ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	68ba      	ldr	r2, [r7, #8]
 80095c8:	4413      	add	r3, r2
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d108      	bne.n	80095e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	685a      	ldr	r2, [r3, #4]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	441a      	add	r2, r3
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	68ba      	ldr	r2, [r7, #8]
 80095ec:	441a      	add	r2, r3
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d118      	bne.n	8009628 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	4b15      	ldr	r3, [pc, #84]	; (8009650 <prvInsertBlockIntoFreeList+0xb0>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d00d      	beq.n	800961e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	685a      	ldr	r2, [r3, #4]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	441a      	add	r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	601a      	str	r2, [r3, #0]
 800961c:	e008      	b.n	8009630 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800961e:	4b0c      	ldr	r3, [pc, #48]	; (8009650 <prvInsertBlockIntoFreeList+0xb0>)
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	601a      	str	r2, [r3, #0]
 8009626:	e003      	b.n	8009630 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	429a      	cmp	r2, r3
 8009636:	d002      	beq.n	800963e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800963e:	bf00      	nop
 8009640:	3714      	adds	r7, #20
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	2000827c 	.word	0x2000827c
 8009650:	20008284 	.word	0x20008284

08009654 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 8009658:	f007 ffb4 	bl	80115c4 <touchgfx_init>
}
 800965c:	bf00      	nop
 800965e:	bd80      	pop	{r7, pc}

08009660 <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 8009664:	f007 ffd8 	bl	8011618 <touchgfx_taskEntry>
}
 8009668:	bf00      	nop
 800966a:	bd80      	pop	{r7, pc}

0800966c <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
    {
 8009674:	4a04      	ldr	r2, [pc, #16]	; (8009688 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	601a      	str	r2, [r3, #0]
    }
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4618      	mov	r0, r3
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	08023d48 	.word	0x08023d48

0800968c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
    }
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f7ff ffe9 	bl	800966c <_ZN8touchgfx12FontProviderD1Ev>
 800969a:	2104      	movs	r1, #4
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f018 f8d6 	bl	802184e <_ZdlPvj>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4618      	mov	r0, r3
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	460b      	mov	r3, r1
 80096b6:	807b      	strh	r3, [r7, #2]
    switch (typography)
 80096b8:	887b      	ldrh	r3, [r7, #2]
 80096ba:	2b03      	cmp	r3, #3
 80096bc:	d81e      	bhi.n	80096fc <_ZN23ApplicationFontProvider7getFontEt+0x50>
 80096be:	a201      	add	r2, pc, #4	; (adr r2, 80096c4 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 80096c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c4:	080096d5 	.word	0x080096d5
 80096c8:	080096df 	.word	0x080096df
 80096cc:	080096e9 	.word	0x080096e9
 80096d0:	080096f3 	.word	0x080096f3
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80096d4:	f005 fe5e 	bl	800f394 <_ZN17TypedTextDatabase8getFontsEv>
 80096d8:	4603      	mov	r3, r0
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	e00f      	b.n	80096fe <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80096de:	f005 fe59 	bl	800f394 <_ZN17TypedTextDatabase8getFontsEv>
 80096e2:	4603      	mov	r3, r0
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	e00a      	b.n	80096fe <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80096e8:	f005 fe54 	bl	800f394 <_ZN17TypedTextDatabase8getFontsEv>
 80096ec:	4603      	mov	r3, r0
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	e005      	b.n	80096fe <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::CANAL:
        // verdana_80_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 80096f2:	f005 fe4f 	bl	800f394 <_ZN17TypedTextDatabase8getFontsEv>
 80096f6:	4603      	mov	r3, r0
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	e000      	b.n	80096fe <_ZN23ApplicationFontProvider7getFontEt+0x52>
    default:
        return 0;
 80096fc:	2300      	movs	r3, #0
    }
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop

08009708 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const touchgfx::FontId CANAL = 3;   // verdana_80_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	4a05      	ldr	r2, [pc, #20]	; (8009728 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	601a      	str	r2, [r3, #0]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4618      	mov	r0, r3
 800971a:	f7ff ffa7 	bl	800966c <_ZN8touchgfx12FontProviderD1Ev>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4618      	mov	r0, r3
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	08023d34 	.word	0x08023d34

0800972c <_ZN23ApplicationFontProviderD0Ev>:
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7ff ffe7 	bl	8009708 <_ZN23ApplicationFontProviderD1Ev>
 800973a:	2104      	movs	r1, #4
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f018 f886 	bl	802184e <_ZdlPvj>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	4a04      	ldr	r2, [pc, #16]	; (8009768 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	601a      	str	r2, [r3, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4618      	mov	r0, r3
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr
 8009768:	08026b3c 	.word	0x08026b3c

0800976c <_ZN8touchgfx4FontD0Ev>:
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f7ff ffe9 	bl	800974c <_ZN8touchgfx4FontD1Ev>
 800977a:	2110      	movs	r1, #16
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f018 f866 	bl	802184e <_ZdlPvj>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4618      	mov	r0, r3
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800978c:	b590      	push	{r4, r7, lr}
 800978e:	b087      	sub	sp, #28
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	460b      	mov	r3, r1
 8009796:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 8009798:	2300      	movs	r3, #0
 800979a:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	3308      	adds	r3, #8
 80097a6:	681c      	ldr	r4, [r3, #0]
 80097a8:	f107 030f 	add.w	r3, r7, #15
 80097ac:	f107 0210 	add.w	r2, r7, #16
 80097b0:	8879      	ldrh	r1, [r7, #2]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	47a0      	blx	r4
 80097b6:	6178      	str	r0, [r7, #20]
        return glyph;
 80097b8:	697b      	ldr	r3, [r7, #20]
    }
 80097ba:	4618      	mov	r0, r3
 80097bc:	371c      	adds	r7, #28
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd90      	pop	{r4, r7, pc}

080097c2 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80097c2:	b480      	push	{r7}
 80097c4:	b083      	sub	sp, #12
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	895b      	ldrh	r3, [r3, #10]
    }
 80097ce:	4618      	mov	r0, r3
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr

080097da <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 80097da:	b480      	push	{r7}
 80097dc:	b083      	sub	sp, #12
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	899b      	ldrh	r3, [r3, #12]
    }
 80097e6:	4618      	mov	r0, r3
 80097e8:	370c      	adds	r7, #12
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 80097f2:	b480      	push	{r7}
 80097f4:	b083      	sub	sp, #12
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	889b      	ldrh	r3, [r3, #4]
    }
 80097fe:	4618      	mov	r0, r3
 8009800:	370c      	adds	r7, #12
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr

0800980a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 800980a:	b480      	push	{r7}
 800980c:	b083      	sub	sp, #12
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	889a      	ldrh	r2, [r3, #4]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	799b      	ldrb	r3, [r3, #6]
 800981a:	b29b      	uxth	r3, r3
 800981c:	4413      	add	r3, r2
 800981e:	b29b      	uxth	r3, r3
    }
 8009820:	4618      	mov	r0, r3
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	79db      	ldrb	r3, [r3, #7]
 8009838:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800983c:	b2db      	uxtb	r3, r3
    }
 800983e:	4618      	mov	r0, r3
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 800984a:	b480      	push	{r7}
 800984c:	b083      	sub	sp, #12
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
    {
        return a4;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	79db      	ldrb	r3, [r3, #7]
 8009856:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800985a:	b2db      	uxtb	r3, r3
    }
 800985c:	4618      	mov	r0, r3
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	4a05      	ldr	r2, [pc, #20]	; (8009888 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	601a      	str	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4618      	mov	r0, r3
 800987a:	f7ff ff67 	bl	800974c <_ZN8touchgfx4FontD1Ev>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	4618      	mov	r0, r3
 8009882:	3708      	adds	r7, #8
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	08026bf4 	.word	0x08026bf4

0800988c <_ZN8touchgfx9ConstFontD0Ev>:
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f7ff ffe7 	bl	8009868 <_ZN8touchgfx9ConstFontD1Ev>
 800989a:	2118      	movs	r1, #24
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f017 ffd6 	bl	802184e <_ZdlPvj>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4618      	mov	r0, r3
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	4a05      	ldr	r2, [pc, #20]	; (80098cc <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	601a      	str	r2, [r3, #0]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4618      	mov	r0, r3
 80098be:	f7ff ffd3 	bl	8009868 <_ZN8touchgfx9ConstFontD1Ev>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4618      	mov	r0, r3
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	08023d8c 	.word	0x08023d8c

080098d0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7ff ffe7 	bl	80098ac <_ZN8touchgfx13GeneratedFontD1Ev>
 80098de:	2124      	movs	r1, #36	; 0x24
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f017 ffb4 	bl	802184e <_ZdlPvj>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4618      	mov	r0, r3
 80098ea:	3708      	adds	r7, #8
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f82d 	bl	8009958 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 80098fe:	4b08      	ldr	r3, [pc, #32]	; (8009920 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	4b08      	ldr	r3, [pc, #32]	; (8009924 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 8009904:	6819      	ldr	r1, [r3, #0]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	881b      	ldrh	r3, [r3, #0]
 800990a:	005b      	lsls	r3, r3, #1
 800990c:	440b      	add	r3, r1
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	4413      	add	r3, r2
 8009914:	681b      	ldr	r3, [r3, #0]
    }
 8009916:	4618      	mov	r0, r3
 8009918:	3708      	adds	r7, #8
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	2000b2f8 	.word	0x2000b2f8
 8009924:	2000b2f0 	.word	0x2000b2f0

08009928 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 f811 	bl	8009958 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 8009936:	4b07      	ldr	r3, [pc, #28]	; (8009954 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	881b      	ldrh	r3, [r3, #0]
 800993e:	005b      	lsls	r3, r3, #1
 8009940:	4413      	add	r3, r2
 8009942:	785b      	ldrb	r3, [r3, #1]
 8009944:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8009948:	b2db      	uxtb	r3, r3
    }
 800994a:	4618      	mov	r0, r3
 800994c:	3708      	adds	r7, #8
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	2000b2f0 	.word	0x2000b2f0

08009958 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8009960:	4b0c      	ldr	r3, [pc, #48]	; (8009994 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d105      	bne.n	8009974 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 8009968:	4b0b      	ldr	r3, [pc, #44]	; (8009998 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800996a:	4a0c      	ldr	r2, [pc, #48]	; (800999c <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800996c:	21de      	movs	r1, #222	; 0xde
 800996e:	480c      	ldr	r0, [pc, #48]	; (80099a0 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 8009970:	f018 fce6 	bl	8022340 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	881a      	ldrh	r2, [r3, #0]
 8009978:	4b0a      	ldr	r3, [pc, #40]	; (80099a4 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800997a:	881b      	ldrh	r3, [r3, #0]
 800997c:	429a      	cmp	r2, r3
 800997e:	d305      	bcc.n	800998c <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 8009980:	4b09      	ldr	r3, [pc, #36]	; (80099a8 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 8009982:	4a06      	ldr	r2, [pc, #24]	; (800999c <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 8009984:	21df      	movs	r1, #223	; 0xdf
 8009986:	4806      	ldr	r0, [pc, #24]	; (80099a0 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 8009988:	f018 fcda 	bl	8022340 <__assert_func>
    }
 800998c:	bf00      	nop
 800998e:	3708      	adds	r7, #8
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	2000b2f0 	.word	0x2000b2f0
 8009998:	08023390 	.word	0x08023390
 800999c:	08023d54 	.word	0x08023d54
 80099a0:	080233d4 	.word	0x080233d4
 80099a4:	2000b2f4 	.word	0x2000b2f4
 80099a8:	08023418 	.word	0x08023418

080099ac <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	7b5b      	ldrb	r3, [r3, #13]
 80099b8:	021b      	lsls	r3, r3, #8
 80099ba:	b21b      	sxth	r3, r3
 80099bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80099c0:	b21a      	sxth	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	7adb      	ldrb	r3, [r3, #11]
 80099c6:	b21b      	sxth	r3, r3
 80099c8:	4313      	orrs	r3, r2
 80099ca:	b21b      	sxth	r3, r3
 80099cc:	b29b      	uxth	r3, r3
    }
 80099ce:	4618      	mov	r0, r3
 80099d0:	370c      	adds	r7, #12
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr

080099da <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 80099da:	b480      	push	{r7}
 80099dc:	b083      	sub	sp, #12
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a1b      	ldr	r3, [r3, #32]
    }
 80099e6:	4618      	mov	r0, r3
 80099e8:	370c      	adds	r7, #12
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
	...

080099f4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b08c      	sub	sp, #48	; 0x30
 80099f8:	af08      	add	r7, sp, #32
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	4611      	mov	r1, r2
 8009a00:	461a      	mov	r2, r3
 8009a02:	460b      	mov	r3, r1
 8009a04:	80fb      	strh	r3, [r7, #6]
 8009a06:	4613      	mov	r3, r2
 8009a08:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 8009a0a:	68f8      	ldr	r0, [r7, #12]
 8009a0c:	88b9      	ldrh	r1, [r7, #4]
 8009a0e:	88fa      	ldrh	r2, [r7, #6]
 8009a10:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009a12:	9306      	str	r3, [sp, #24]
 8009a14:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009a16:	9305      	str	r3, [sp, #20]
 8009a18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a1c:	9304      	str	r3, [sp, #16]
 8009a1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a22:	9303      	str	r3, [sp, #12]
 8009a24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a28:	9302      	str	r3, [sp, #8]
 8009a2a:	7f3b      	ldrb	r3, [r7, #28]
 8009a2c:	9301      	str	r3, [sp, #4]
 8009a2e:	7e3b      	ldrb	r3, [r7, #24]
 8009a30:	9300      	str	r3, [sp, #0]
 8009a32:	460b      	mov	r3, r1
 8009a34:	68b9      	ldr	r1, [r7, #8]
 8009a36:	f00c fcf5 	bl	8016424 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8009a3a:	4a08      	ldr	r2, [pc, #32]	; (8009a5c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	601a      	str	r2, [r3, #0]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a44:	619a      	str	r2, [r3, #24]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a4a:	61da      	str	r2, [r3, #28]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a50:	621a      	str	r2, [r3, #32]
{
}
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	4618      	mov	r0, r3
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	08023d8c 	.word	0x08023d8c

08009a60 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	699b      	ldr	r3, [r3, #24]
 8009a6e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	889b      	ldrh	r3, [r3, #4]
 8009a74:	0adb      	lsrs	r3, r3, #11
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4413      	add	r3, r2
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3714      	adds	r7, #20
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr

08009a92 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b086      	sub	sp, #24
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	60f8      	str	r0, [r7, #12]
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	607a      	str	r2, [r7, #4]
 8009a9e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d003      	beq.n	8009aae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	7b1b      	ldrb	r3, [r3, #12]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d101      	bne.n	8009ab2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	e023      	b.n	8009afa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7ff ff7a 	bl	80099ac <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 8009abc:	8abb      	ldrh	r3, [r7, #20]
 8009abe:	82fb      	strh	r3, [r7, #22]
 8009ac0:	8afa      	ldrh	r2, [r7, #22]
 8009ac2:	8abb      	ldrh	r3, [r7, #20]
 8009ac4:	6879      	ldr	r1, [r7, #4]
 8009ac6:	7b09      	ldrb	r1, [r1, #12]
 8009ac8:	440b      	add	r3, r1
 8009aca:	429a      	cmp	r2, r3
 8009acc:	da14      	bge.n	8009af8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	69da      	ldr	r2, [r3, #28]
 8009ad2:	8afb      	ldrh	r3, [r7, #22]
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4413      	add	r3, r2
 8009ad8:	881b      	ldrh	r3, [r3, #0]
 8009ada:	897a      	ldrh	r2, [r7, #10]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d107      	bne.n	8009af0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	69da      	ldr	r2, [r3, #28]
 8009ae4:	8afb      	ldrh	r3, [r7, #22]
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	4413      	add	r3, r2
 8009aea:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8009aee:	e004      	b.n	8009afa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 8009af0:	8afb      	ldrh	r3, [r7, #22]
 8009af2:	3301      	adds	r3, #1
 8009af4:	82fb      	strh	r3, [r7, #22]
 8009af6:	e7e3      	b.n	8009ac0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3718      	adds	r7, #24
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
	...

08009b04 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_10_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 104, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 95, 0, 0);
 8009b04:	b580      	push	{r7, lr}
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	4801      	ldr	r0, [pc, #4]	; (8009b10 <__tcf_0+0xc>)
 8009b0a:	f7ff fecf 	bl	80098ac <_ZN8touchgfx13GeneratedFontD1Ev>
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	20008294 	.word	0x20008294

08009b14 <_Z23getFont_verdana_10_4bppv>:
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b08a      	sub	sp, #40	; 0x28
 8009b18:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 104, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 95, 0, 0);
 8009b1a:	4b15      	ldr	r3, [pc, #84]	; (8009b70 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f003 0301 	and.w	r3, r3, #1
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d11f      	bne.n	8009b66 <_Z23getFont_verdana_10_4bppv+0x52>
 8009b26:	2300      	movs	r3, #0
 8009b28:	9309      	str	r3, [sp, #36]	; 0x24
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	9308      	str	r3, [sp, #32]
 8009b2e:	235f      	movs	r3, #95	; 0x5f
 8009b30:	9307      	str	r3, [sp, #28]
 8009b32:	4b10      	ldr	r3, [pc, #64]	; (8009b74 <_Z23getFont_verdana_10_4bppv+0x60>)
 8009b34:	9306      	str	r3, [sp, #24]
 8009b36:	4b10      	ldr	r3, [pc, #64]	; (8009b78 <_Z23getFont_verdana_10_4bppv+0x64>)
 8009b38:	9305      	str	r3, [sp, #20]
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	9304      	str	r3, [sp, #16]
 8009b3e:	2301      	movs	r3, #1
 8009b40:	9303      	str	r3, [sp, #12]
 8009b42:	2301      	movs	r3, #1
 8009b44:	9302      	str	r3, [sp, #8]
 8009b46:	2304      	movs	r3, #4
 8009b48:	9301      	str	r3, [sp, #4]
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	9300      	str	r3, [sp, #0]
 8009b4e:	230a      	movs	r3, #10
 8009b50:	2268      	movs	r2, #104	; 0x68
 8009b52:	490a      	ldr	r1, [pc, #40]	; (8009b7c <_Z23getFont_verdana_10_4bppv+0x68>)
 8009b54:	480a      	ldr	r0, [pc, #40]	; (8009b80 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8009b56:	f7ff ff4d 	bl	80099f4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8009b5a:	4b05      	ldr	r3, [pc, #20]	; (8009b70 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	601a      	str	r2, [r3, #0]
 8009b60:	4808      	ldr	r0, [pc, #32]	; (8009b84 <_Z23getFont_verdana_10_4bppv+0x70>)
 8009b62:	f018 fc0b 	bl	802237c <atexit>
    return verdana_10_4bpp;
 8009b66:	4b06      	ldr	r3, [pc, #24]	; (8009b80 <_Z23getFont_verdana_10_4bppv+0x6c>)
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	200082b8 	.word	0x200082b8
 8009b74:	9013deb0 	.word	0x9013deb0
 8009b78:	08023dd8 	.word	0x08023dd8
 8009b7c:	9013def0 	.word	0x9013def0
 8009b80:	20008294 	.word	0x20008294
 8009b84:	08009b05 	.word	0x08009b05

08009b88 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 27, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	4801      	ldr	r0, [pc, #4]	; (8009b94 <__tcf_0+0xc>)
 8009b8e:	f7ff fe8d 	bl	80098ac <_ZN8touchgfx13GeneratedFontD1Ev>
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	200082bc 	.word	0x200082bc

08009b98 <_Z23getFont_verdana_20_4bppv>:
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b08a      	sub	sp, #40	; 0x28
 8009b9c:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 27, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8009b9e:	4b15      	ldr	r3, [pc, #84]	; (8009bf4 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f003 0301 	and.w	r3, r3, #1
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d11f      	bne.n	8009bea <_Z23getFont_verdana_20_4bppv+0x52>
 8009baa:	2300      	movs	r3, #0
 8009bac:	9309      	str	r3, [sp, #36]	; 0x24
 8009bae:	2300      	movs	r3, #0
 8009bb0:	9308      	str	r3, [sp, #32]
 8009bb2:	233f      	movs	r3, #63	; 0x3f
 8009bb4:	9307      	str	r3, [sp, #28]
 8009bb6:	4b10      	ldr	r3, [pc, #64]	; (8009bf8 <_Z23getFont_verdana_20_4bppv+0x60>)
 8009bb8:	9306      	str	r3, [sp, #24]
 8009bba:	4b10      	ldr	r3, [pc, #64]	; (8009bfc <_Z23getFont_verdana_20_4bppv+0x64>)
 8009bbc:	9305      	str	r3, [sp, #20]
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	9304      	str	r3, [sp, #16]
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	9303      	str	r3, [sp, #12]
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	9302      	str	r3, [sp, #8]
 8009bca:	2304      	movs	r3, #4
 8009bcc:	9301      	str	r3, [sp, #4]
 8009bce:	2300      	movs	r3, #0
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	2314      	movs	r3, #20
 8009bd4:	221b      	movs	r2, #27
 8009bd6:	490a      	ldr	r1, [pc, #40]	; (8009c00 <_Z23getFont_verdana_20_4bppv+0x68>)
 8009bd8:	480a      	ldr	r0, [pc, #40]	; (8009c04 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8009bda:	f7ff ff0b 	bl	80099f4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8009bde:	4b05      	ldr	r3, [pc, #20]	; (8009bf4 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8009be0:	2201      	movs	r2, #1
 8009be2:	601a      	str	r2, [r3, #0]
 8009be4:	4808      	ldr	r0, [pc, #32]	; (8009c08 <_Z23getFont_verdana_20_4bppv+0x70>)
 8009be6:	f018 fbc9 	bl	802237c <atexit>
    return verdana_20_4bpp;
 8009bea:	4b06      	ldr	r3, [pc, #24]	; (8009c04 <_Z23getFont_verdana_20_4bppv+0x6c>)
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	200082e0 	.word	0x200082e0
 8009bf8:	9013dee4 	.word	0x9013dee4
 8009bfc:	08023ddc 	.word	0x08023ddc
 8009c00:	9013e4a0 	.word	0x9013e4a0
 8009c04:	200082bc 	.word	0x200082bc
 8009c08:	08009b89 	.word	0x08009b89

08009c0c <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	4801      	ldr	r0, [pc, #4]	; (8009c18 <__tcf_0+0xc>)
 8009c12:	f7ff fe4b 	bl	80098ac <_ZN8touchgfx13GeneratedFontD1Ev>
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	200082e4 	.word	0x200082e4

08009c1c <_Z23getFont_verdana_40_4bppv>:
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b08a      	sub	sp, #40	; 0x28
 8009c20:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 8009c22:	4b15      	ldr	r3, [pc, #84]	; (8009c78 <_Z23getFont_verdana_40_4bppv+0x5c>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f003 0301 	and.w	r3, r3, #1
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d11f      	bne.n	8009c6e <_Z23getFont_verdana_40_4bppv+0x52>
 8009c2e:	2300      	movs	r3, #0
 8009c30:	9309      	str	r3, [sp, #36]	; 0x24
 8009c32:	2300      	movs	r3, #0
 8009c34:	9308      	str	r3, [sp, #32]
 8009c36:	233f      	movs	r3, #63	; 0x3f
 8009c38:	9307      	str	r3, [sp, #28]
 8009c3a:	4b10      	ldr	r3, [pc, #64]	; (8009c7c <_Z23getFont_verdana_40_4bppv+0x60>)
 8009c3c:	9306      	str	r3, [sp, #24]
 8009c3e:	4b10      	ldr	r3, [pc, #64]	; (8009c80 <_Z23getFont_verdana_40_4bppv+0x64>)
 8009c40:	9305      	str	r3, [sp, #20]
 8009c42:	2300      	movs	r3, #0
 8009c44:	9304      	str	r3, [sp, #16]
 8009c46:	2300      	movs	r3, #0
 8009c48:	9303      	str	r3, [sp, #12]
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	9302      	str	r3, [sp, #8]
 8009c4e:	2304      	movs	r3, #4
 8009c50:	9301      	str	r3, [sp, #4]
 8009c52:	2300      	movs	r3, #0
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	2328      	movs	r3, #40	; 0x28
 8009c58:	2201      	movs	r2, #1
 8009c5a:	490a      	ldr	r1, [pc, #40]	; (8009c84 <_Z23getFont_verdana_40_4bppv+0x68>)
 8009c5c:	480a      	ldr	r0, [pc, #40]	; (8009c88 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8009c5e:	f7ff fec9 	bl	80099f4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8009c62:	4b05      	ldr	r3, [pc, #20]	; (8009c78 <_Z23getFont_verdana_40_4bppv+0x5c>)
 8009c64:	2201      	movs	r2, #1
 8009c66:	601a      	str	r2, [r3, #0]
 8009c68:	4808      	ldr	r0, [pc, #32]	; (8009c8c <_Z23getFont_verdana_40_4bppv+0x70>)
 8009c6a:	f018 fb87 	bl	802237c <atexit>
    return verdana_40_4bpp;
 8009c6e:	4b06      	ldr	r3, [pc, #24]	; (8009c88 <_Z23getFont_verdana_40_4bppv+0x6c>)
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	20008308 	.word	0x20008308
 8009c7c:	9013dee8 	.word	0x9013dee8
 8009c80:	08023de0 	.word	0x08023de0
 8009c84:	9013e61c 	.word	0x9013e61c
 8009c88:	200082e4 	.word	0x200082e4
 8009c8c:	08009c0d 	.word	0x08009c0d

08009c90 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_80_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_80_4bpp();

touchgfx::GeneratedFont& getFont_verdana_80_4bpp()
{
    static touchgfx::GeneratedFont verdana_80_4bpp(glyphs_verdana_80_4bpp, 11, 80, 1, 4, 1, 0, 0, unicodes_verdana_80_4bpp, kerning_verdana_80_4bpp, 63, 0, 0);
 8009c90:	b580      	push	{r7, lr}
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	4801      	ldr	r0, [pc, #4]	; (8009c9c <__tcf_0+0xc>)
 8009c96:	f7ff fe09 	bl	80098ac <_ZN8touchgfx13GeneratedFontD1Ev>
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	2000830c 	.word	0x2000830c

08009ca0 <_Z23getFont_verdana_80_4bppv>:
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b08a      	sub	sp, #40	; 0x28
 8009ca4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_80_4bpp(glyphs_verdana_80_4bpp, 11, 80, 1, 4, 1, 0, 0, unicodes_verdana_80_4bpp, kerning_verdana_80_4bpp, 63, 0, 0);
 8009ca6:	4b15      	ldr	r3, [pc, #84]	; (8009cfc <_Z23getFont_verdana_80_4bppv+0x5c>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f003 0301 	and.w	r3, r3, #1
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d11f      	bne.n	8009cf2 <_Z23getFont_verdana_80_4bppv+0x52>
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	9308      	str	r3, [sp, #32]
 8009cba:	233f      	movs	r3, #63	; 0x3f
 8009cbc:	9307      	str	r3, [sp, #28]
 8009cbe:	4b10      	ldr	r3, [pc, #64]	; (8009d00 <_Z23getFont_verdana_80_4bppv+0x60>)
 8009cc0:	9306      	str	r3, [sp, #24]
 8009cc2:	4b10      	ldr	r3, [pc, #64]	; (8009d04 <_Z23getFont_verdana_80_4bppv+0x64>)
 8009cc4:	9305      	str	r3, [sp, #20]
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	9304      	str	r3, [sp, #16]
 8009cca:	2300      	movs	r3, #0
 8009ccc:	9303      	str	r3, [sp, #12]
 8009cce:	2301      	movs	r3, #1
 8009cd0:	9302      	str	r3, [sp, #8]
 8009cd2:	2304      	movs	r3, #4
 8009cd4:	9301      	str	r3, [sp, #4]
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	9300      	str	r3, [sp, #0]
 8009cda:	2350      	movs	r3, #80	; 0x50
 8009cdc:	220b      	movs	r2, #11
 8009cde:	490a      	ldr	r1, [pc, #40]	; (8009d08 <_Z23getFont_verdana_80_4bppv+0x68>)
 8009ce0:	480a      	ldr	r0, [pc, #40]	; (8009d0c <_Z23getFont_verdana_80_4bppv+0x6c>)
 8009ce2:	f7ff fe87 	bl	80099f4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8009ce6:	4b05      	ldr	r3, [pc, #20]	; (8009cfc <_Z23getFont_verdana_80_4bppv+0x5c>)
 8009ce8:	2201      	movs	r2, #1
 8009cea:	601a      	str	r2, [r3, #0]
 8009cec:	4808      	ldr	r0, [pc, #32]	; (8009d10 <_Z23getFont_verdana_80_4bppv+0x70>)
 8009cee:	f018 fb45 	bl	802237c <atexit>
    return verdana_80_4bpp;
 8009cf2:	4b06      	ldr	r3, [pc, #24]	; (8009d0c <_Z23getFont_verdana_80_4bppv+0x6c>)
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	20008330 	.word	0x20008330
 8009d00:	9013deec 	.word	0x9013deec
 8009d04:	08023de4 	.word	0x08023de4
 8009d08:	9013e62c 	.word	0x9013e62c
 8009d0c:	2000830c 	.word	0x2000830c
 8009d10:	08009c91 	.word	0x08009c91

08009d14 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
    {
        color = col;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	683a      	ldr	r2, [r7, #0]
 8009d22:	601a      	str	r2, [r3, #0]
    }
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4618      	mov	r0, r3
 8009d28:	370c      	adds	r7, #12
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr

08009d32 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 8009d32:	b480      	push	{r7}
 8009d34:	b083      	sub	sp, #12
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	80da      	strh	r2, [r3, #6]
    }
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4618      	mov	r0, r3
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8009d60:	b480      	push	{r7}
 8009d62:	b085      	sub	sp, #20
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	4608      	mov	r0, r1
 8009d6a:	4611      	mov	r1, r2
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	4603      	mov	r3, r0
 8009d70:	817b      	strh	r3, [r7, #10]
 8009d72:	460b      	mov	r3, r1
 8009d74:	813b      	strh	r3, [r7, #8]
 8009d76:	4613      	mov	r3, r2
 8009d78:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	897a      	ldrh	r2, [r7, #10]
 8009d7e:	801a      	strh	r2, [r3, #0]
        this->y = y;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	893a      	ldrh	r2, [r7, #8]
 8009d84:	805a      	strh	r2, [r3, #2]
        this->width = width;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	88fa      	ldrh	r2, [r7, #6]
 8009d8a:	809a      	strh	r2, [r3, #4]
        this->height = height;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	8b3a      	ldrh	r2, [r7, #24]
 8009d90:	80da      	strh	r2, [r3, #6]
    }
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	4618      	mov	r0, r3
 8009d96:	3714      	adds	r7, #20
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	460b      	mov	r3, r1
 8009daa:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	887a      	ldrh	r2, [r7, #2]
 8009db0:	801a      	strh	r2, [r3, #0]
    {
    }
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4618      	mov	r0, r3
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af02      	add	r7, sp, #8
 8009dc6:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 8009dc8:	4a13      	ldr	r2, [pc, #76]	; (8009e18 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	601a      	str	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	1d18      	adds	r0, r3, #4
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	2200      	movs	r2, #0
 8009dda:	2100      	movs	r1, #0
 8009ddc:	f7ff ffc0 	bl	8009d60 <_ZN8touchgfx4RectC1Essss>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	330c      	adds	r3, #12
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7ff ffa4 	bl	8009d32 <_ZN8touchgfx4RectC1Ev>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	615a      	str	r2, [r3, #20]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	619a      	str	r2, [r3, #24]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	61da      	str	r2, [r3, #28]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2201      	movs	r2, #1
 8009e08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	08026b8c 	.word	0x08026b8c

08009e1c <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	4a04      	ldr	r2, [pc, #16]	; (8009e38 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	601a      	str	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr
 8009e38:	08026b8c 	.word	0x08026b8c

08009e3c <_ZN8touchgfx8DrawableD0Ev>:
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f7ff ffe9 	bl	8009e1c <_ZN8touchgfx8DrawableD1Ev>
 8009e4a:	2128      	movs	r1, #40	; 0x28
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f017 fcfe 	bl	802184e <_ZdlPvj>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4618      	mov	r0, r3
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	4608      	mov	r0, r1
 8009e66:	4611      	mov	r1, r2
 8009e68:	461a      	mov	r2, r3
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	817b      	strh	r3, [r7, #10]
 8009e6e:	460b      	mov	r3, r1
 8009e70:	813b      	strh	r3, [r7, #8]
 8009e72:	4613      	mov	r3, r2
 8009e74:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	3334      	adds	r3, #52	; 0x34
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009e82:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	4798      	blx	r3
        setWidth(width);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	3338      	adds	r3, #56	; 0x38
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009e96:	4611      	mov	r1, r2
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	4798      	blx	r3
        setHeight(height);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	333c      	adds	r3, #60	; 0x3c
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8009ea8:	4611      	mov	r1, r2
 8009eaa:	68f8      	ldr	r0, [r7, #12]
 8009eac:	4798      	blx	r3
    }
 8009eae:	bf00      	nop
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <_ZNK8touchgfx8Drawable4getXEv>:
     *
     *        Gets the x coordinate of this drawable.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 8009eb6:	b480      	push	{r7}
 8009eb8:	b083      	sub	sp, #12
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <_ZNK8touchgfx8Drawable4getYEv>:
     *
     *        Gets the y coordinate of this drawable.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 8009ede:	4618      	mov	r0, r3
 8009ee0:	370c      	adds	r7, #12
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 8009eea:	b480      	push	{r7}
 8009eec:	b083      	sub	sp, #12
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	887a      	ldrh	r2, [r7, #2]
 8009efa:	809a      	strh	r2, [r3, #4]
    }
 8009efc:	bf00      	nop
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	460b      	mov	r3, r1
 8009f12:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	887a      	ldrh	r2, [r7, #2]
 8009f18:	80da      	strh	r2, [r3, #6]
    }
 8009f1a:	bf00      	nop
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b082      	sub	sp, #8
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
 8009f2e:	460b      	mov	r3, r1
 8009f30:	807b      	strh	r3, [r7, #2]
 8009f32:	4613      	mov	r3, r2
 8009f34:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	332c      	adds	r3, #44	; 0x2c
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009f42:	4611      	mov	r1, r2
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	4798      	blx	r3
        setY(y);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	3330      	adds	r3, #48	; 0x30
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009f54:	4611      	mov	r1, r2
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	4798      	blx	r3
    }
 8009f5a:	bf00      	nop
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 8009f62:	b480      	push	{r7}
 8009f64:	b083      	sub	sp, #12
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	887a      	ldrh	r2, [r7, #2]
 8009f72:	811a      	strh	r2, [r3, #8]
    }
 8009f74:	bf00      	nop
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	460b      	mov	r3, r1
 8009f8a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	887a      	ldrh	r2, [r7, #2]
 8009f90:	815a      	strh	r2, [r3, #10]
    }
 8009f92:	bf00      	nop
 8009f94:	370c      	adds	r7, #12
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr

08009f9e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 8009f9e:	b480      	push	{r7}
 8009fa0:	b083      	sub	sp, #12
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	bf00      	nop
 8009fa8:	370c      	adds	r7, #12
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr

08009fb2 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 8009fb2:	b480      	push	{r7}
 8009fb4:	b083      	sub	sp, #12
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
 8009fba:	6039      	str	r1, [r7, #0]
 8009fbc:	bf00      	nop
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
 8009fd2:	bf00      	nop
 8009fd4:	370c      	adds	r7, #12
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr

08009fde <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 8009fde:	b480      	push	{r7}
 8009fe0:	b083      	sub	sp, #12
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
 8009fe6:	6039      	str	r1, [r7, #0]
 8009fe8:	bf00      	nop
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	bf00      	nop
 8009ffe:	370c      	adds	r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <_ZN8touchgfx8Drawable12setTouchableEb>:
     *
     *        Controls whether this Drawable receives touch events or not.
     *
     * @param touch If true  it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	460b      	mov	r3, r1
 800a012:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	78fa      	ldrb	r2, [r7, #3]
 800a018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800a01c:	bf00      	nop
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800a036:	4618      	mov	r0, r3
 800a038:	370c      	adds	r7, #12
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr

0800a042 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800a042:	b480      	push	{r7}
 800a044:	b083      	sub	sp, #12
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800a050:	4618      	mov	r0, r3
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	460b      	mov	r3, r1
 800a066:	807b      	strh	r3, [r7, #2]
 800a068:	4613      	mov	r3, r2
 800a06a:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	3354      	adds	r3, #84	; 0x54
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	8879      	ldrh	r1, [r7, #2]
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800a07c:	b292      	uxth	r2, r2
 800a07e:	1a8a      	subs	r2, r1, r2
 800a080:	b292      	uxth	r2, r2
 800a082:	b210      	sxth	r0, r2
 800a084:	8839      	ldrh	r1, [r7, #0]
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800a08c:	b292      	uxth	r2, r2
 800a08e:	1a8a      	subs	r2, r1, r2
 800a090:	b292      	uxth	r2, r2
 800a092:	b212      	sxth	r2, r2
 800a094:	4601      	mov	r1, r0
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	4798      	blx	r3
    }
 800a09a:	bf00      	nop
 800a09c:	3708      	adds	r7, #8
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800a0a2:	b480      	push	{r7}
 800a0a4:	b083      	sub	sp, #12
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0b0:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0b8:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0c0:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800a0c2:	bf00      	nop
 800a0c4:	370c      	adds	r7, #12
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b084      	sub	sp, #16
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	60f8      	str	r0, [r7, #12]
 800a0d6:	60b9      	str	r1, [r7, #8]
 800a0d8:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f7ff ffe1 	bl	800a0a2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	601a      	str	r2, [r3, #0]
    }
 800a0ee:	bf00      	nop
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
	...

0800a0f8 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800a0f8:	b480      	push	{r7}
 800a0fa:	af00      	add	r7, sp, #0
    {
        return instance;
 800a0fc:	4b03      	ldr	r3, [pc, #12]	; (800a10c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
    }
 800a100:	4618      	mov	r0, r3
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	2000b260 	.word	0x2000b260

0800a110 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800a110:	b480      	push	{r7}
 800a112:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800a114:	4b0b      	ldr	r3, [pc, #44]	; (800a144 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d008      	beq.n	800a132 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800a120:	4b08      	ldr	r3, [pc, #32]	; (800a144 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a126:	2b00      	cmp	r3, #0
 800a128:	d003      	beq.n	800a132 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800a12a:	4b06      	ldr	r3, [pc, #24]	; (800a144 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a130:	e002      	b.n	800a138 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800a132:	4b04      	ldr	r3, [pc, #16]	; (800a144 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	689b      	ldr	r3, [r3, #8]
        }
    }
 800a138:	4618      	mov	r0, r3
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr
 800a142:	bf00      	nop
 800a144:	2000b260 	.word	0x2000b260

0800a148 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	4a05      	ldr	r2, [pc, #20]	; (800a168 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	601a      	str	r2, [r3, #0]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4618      	mov	r0, r3
 800a15a:	f7ff fe5f 	bl	8009e1c <_ZN8touchgfx8DrawableD1Ev>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4618      	mov	r0, r3
 800a162:	3708      	adds	r7, #8
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	08025440 	.word	0x08025440

0800a16c <_ZN8touchgfx9ContainerD0Ev>:
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f7ff ffe7 	bl	800a148 <_ZN8touchgfx9ContainerD1Ev>
 800a17a:	212c      	movs	r1, #44	; 0x2c
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f017 fb66 	bl	802184e <_ZdlPvj>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4618      	mov	r0, r3
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	4a06      	ldr	r2, [pc, #24]	; (800a1b0 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	601a      	str	r2, [r3, #0]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	3304      	adds	r3, #4
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7ff ffd2 	bl	800a148 <_ZN8touchgfx9ContainerD1Ev>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3708      	adds	r7, #8
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	08026c84 	.word	0x08026c84

0800a1b4 <_ZN8touchgfx6ScreenD0Ev>:
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f7ff ffe5 	bl	800a18c <_ZN8touchgfx6ScreenD1Ev>
 800a1c2:	213c      	movs	r1, #60	; 0x3c
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f017 fb42 	bl	802184e <_ZdlPvj>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3708      	adds	r7, #8
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	bf00      	nop
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	bf00      	nop
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
    {
    }
 800a218:	bf00      	nop
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	460b      	mov	r3, r1
 800a22e:	70fb      	strb	r3, [r7, #3]
    {
    }
 800a230:	bf00      	nop
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr

0800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	3304      	adds	r3, #4
 800a24a:	6839      	ldr	r1, [r7, #0]
 800a24c:	4618      	mov	r0, r3
 800a24e:	f007 fe91 	bl	8011f74 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800a252:	bf00      	nop
 800a254:	3708      	adds	r7, #8
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
	...

0800a25c <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4618      	mov	r0, r3
 800a268:	f7ff fdaa 	bl	8009dc0 <_ZN8touchgfx8DrawableC1Ev>
 800a26c:	4a03      	ldr	r2, [pc, #12]	; (800a27c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	601a      	str	r2, [r3, #0]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4618      	mov	r0, r3
 800a276:	3708      	adds	r7, #8
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	08024154 	.word	0x08024154

0800a280 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	4a05      	ldr	r2, [pc, #20]	; (800a2a0 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	601a      	str	r2, [r3, #0]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4618      	mov	r0, r3
 800a292:	f7ff fdc3 	bl	8009e1c <_ZN8touchgfx8DrawableD1Ev>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4618      	mov	r0, r3
 800a29a:	3708      	adds	r7, #8
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	08024154 	.word	0x08024154

0800a2a4 <_ZN8touchgfx6WidgetD0Ev>:
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f7ff ffe7 	bl	800a280 <_ZN8touchgfx6WidgetD1Ev>
 800a2b2:	2128      	movs	r1, #40	; 0x28
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f017 faca 	bl	802184e <_ZdlPvj>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3708      	adds	r7, #8
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	607b      	str	r3, [r7, #4]
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	817b      	strh	r3, [r7, #10]
 800a2d2:	4613      	mov	r3, r2
 800a2d4:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7ff fea5 	bl	800a028 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d008      	beq.n	800a2f6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7ff feab 	bl	800a042 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d001      	beq.n	800a2f6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e000      	b.n	800a2f8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d002      	beq.n	800a302 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	601a      	str	r2, [r3, #0]
        }
    }
 800a302:	bf00      	nop
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
	...

0800a30c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4618      	mov	r0, r3
 800a31a:	f7ff ff9f 	bl	800a25c <_ZN8touchgfx6WidgetC1Ev>
 800a31e:	4a0b      	ldr	r2, [pc, #44]	; (800a34c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	601a      	str	r2, [r3, #0]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	3326      	adds	r3, #38	; 0x26
 800a328:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7ff fd37 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	22ff      	movs	r2, #255	; 0xff
 800a336:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 800a33a:	6839      	ldr	r1, [r7, #0]
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f00a fa4d 	bl	80147dc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4618      	mov	r0, r3
 800a346:	3708      	adds	r7, #8
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	0802678c 	.word	0x0802678c

0800a350 <_ZN8touchgfx14AbstractButtonC1Ev>:
     * @brief Constructor.
     *
     *        Constructs an AbstractButton instance in released state without an associated
     *        action.
     */
    AbstractButton() : Widget(), action(), pressed(false)
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7ff ff7e 	bl	800a25c <_ZN8touchgfx6WidgetC1Ev>
 800a360:	4a09      	ldr	r2, [pc, #36]	; (800a388 <_ZN8touchgfx14AbstractButtonC1Ev+0x38>)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	601a      	str	r2, [r3, #0]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	629a      	str	r2, [r3, #40]	; 0x28
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2200      	movs	r2, #0
 800a370:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2101      	movs	r1, #1
 800a378:	4618      	mov	r0, r3
 800a37a:	f7ff fe45 	bl	800a008 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4618      	mov	r0, r3
 800a382:	3708      	adds	r7, #8
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	08026478 	.word	0x08026478

0800a38c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the AbstractButton.
     *
     * @see GenericCallback
     */
    void setAction(GenericCallback< const AbstractButton& >& callback)
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	683a      	ldr	r2, [r7, #0]
 800a39a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
     *
     *        Function to determine whether this AbstractButton is currently pressed.
     *
     * @return true if button is pressed, false otherwise.
     */
    virtual bool getPressedState() const
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	370c      	adds	r7, #12
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
	...

0800a3c4 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	4a05      	ldr	r2, [pc, #20]	; (800a3e4 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	601a      	str	r2, [r3, #0]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7ff ff53 	bl	800a280 <_ZN8touchgfx6WidgetD1Ev>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3708      	adds	r7, #8
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	08026478 	.word	0x08026478

0800a3e8 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f7ff ffe7 	bl	800a3c4 <_ZN8touchgfx14AbstractButtonD1Ev>
 800a3f6:	2130      	movs	r1, #48	; 0x30
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f017 fa28 	bl	802184e <_ZdlPvj>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4618      	mov	r0, r3
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <_ZN8touchgfx6ButtonC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Button() : AbstractButton(), up(), down(), alpha(255) { }
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4618      	mov	r0, r3
 800a414:	f7ff ff9c 	bl	800a350 <_ZN8touchgfx14AbstractButtonC1Ev>
 800a418:	4a0c      	ldr	r2, [pc, #48]	; (800a44c <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	601a      	str	r2, [r3, #0]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	332e      	adds	r3, #46	; 0x2e
 800a422:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a426:	4618      	mov	r0, r3
 800a428:	f7ff fcba 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	3330      	adds	r3, #48	; 0x30
 800a430:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a434:	4618      	mov	r0, r3
 800a436:	f7ff fcb3 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	22ff      	movs	r2, #255	; 0xff
 800a43e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4618      	mov	r0, r3
 800a446:	3708      	adds	r7, #8
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	080265c4 	.word	0x080265c4

0800a450 <_ZN8touchgfx6ButtonD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Button() { }
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	4a05      	ldr	r2, [pc, #20]	; (800a470 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	601a      	str	r2, [r3, #0]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4618      	mov	r0, r3
 800a462:	f7ff ffaf 	bl	800a3c4 <_ZN8touchgfx14AbstractButtonD1Ev>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	4618      	mov	r0, r3
 800a46a:	3708      	adds	r7, #8
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	080265c4 	.word	0x080265c4

0800a474 <_ZN8touchgfx6ButtonD0Ev>:
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f7ff ffe7 	bl	800a450 <_ZN8touchgfx6ButtonD1Ev>
 800a482:	2134      	movs	r1, #52	; 0x34
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f017 f9e2 	bl	802184e <_ZdlPvj>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4618      	mov	r0, r3
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	460b      	mov	r3, r1
 800a49e:	807b      	strh	r3, [r7, #2]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	887a      	ldrh	r2, [r7, #2]
 800a4a4:	801a      	strh	r2, [r3, #0]
    }
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <_ZNK8touchgfx9TypedText10hasValidIdEv>:
    bool hasValidId() const
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
        return typedTextId != TYPED_TEXT_INVALID;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	881b      	ldrh	r3, [r3, #0]
 800a4c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	bf14      	ite	ne
 800a4c8:	2301      	movne	r3, #1
 800a4ca:	2300      	moveq	r3, #0
 800a4cc:	b2db      	uxtb	r3, r3
    }
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	370c      	adds	r7, #12
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr
	...

0800a4dc <_ZNK8touchgfx9TypedText7getTextEv>:
    const Unicode::UnicodeChar* getText() const
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
        assertValid();
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f7ff fa37 	bl	8009958 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 800a4ea:	4b06      	ldr	r3, [pc, #24]	; (800a504 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	881b      	ldrh	r3, [r3, #0]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	4610      	mov	r0, r2
 800a4f6:	f004 ff2b 	bl	800f350 <_ZNK8touchgfx5Texts7getTextEt>
 800a4fa:	4603      	mov	r3, r0
    }
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3708      	adds	r7, #8
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	2000b2fc 	.word	0x2000b2fc

0800a508 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4618      	mov	r0, r3
 800a514:	f7ff fea2 	bl	800a25c <_ZN8touchgfx6WidgetC1Ev>
 800a518:	4a13      	ldr	r2, [pc, #76]	; (800a568 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	601a      	str	r2, [r3, #0]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	3326      	adds	r3, #38	; 0x26
 800a522:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a526:	4618      	mov	r0, r3
 800a528:	f7ff ffb4 	bl	800a494 <_ZN8touchgfx9TypedTextC1Et>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	3328      	adds	r3, #40	; 0x28
 800a530:	2100      	movs	r1, #0
 800a532:	4618      	mov	r0, r3
 800a534:	f7ff fbee 	bl	8009d14 <_ZN8touchgfx9colortypeC1Em>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	859a      	strh	r2, [r3, #44]	; 0x2c
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	22ff      	movs	r2, #255	; 0xff
 800a542:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4618      	mov	r0, r3
 800a562:	3708      	adds	r7, #8
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}
 800a568:	080264e4 	.word	0x080264e4

0800a56c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af02      	add	r7, sp, #8
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 800a576:	2300      	movs	r3, #0
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	2300      	movs	r3, #0
 800a57c:	2200      	movs	r2, #0
 800a57e:	2100      	movs	r1, #0
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f7ff fbed 	bl	8009d60 <_ZN8touchgfx4RectC1Essss>
    }
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	3708      	adds	r7, #8
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 800a58e:	b480      	push	{r7}
 800a590:	b083      	sub	sp, #12
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
 800a596:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	683a      	ldr	r2, [r7, #0]
 800a59c:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800a59e:	bf00      	nop
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800a5aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5ac:	b085      	sub	sp, #20
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800a5b6:	687e      	ldr	r6, [r7, #4]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	3330      	adds	r3, #48	; 0x30
 800a5be:	681c      	ldr	r4, [r3, #0]
 800a5c0:	887d      	ldrh	r5, [r7, #2]
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 f845 	bl	800a652 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	81bb      	strh	r3, [r7, #12]
 800a5cc:	f107 030c 	add.w	r3, r7, #12
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7ff f98d 	bl	80098f0 <_ZNK8touchgfx9TypedText7getFontEv>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	6813      	ldr	r3, [r2, #0]
 800a5da:	332c      	adds	r3, #44	; 0x2c
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4610      	mov	r0, r2
 800a5e0:	4798      	blx	r3
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	1aeb      	subs	r3, r5, r3
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	b21b      	sxth	r3, r3
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	47a0      	blx	r4
    }
 800a5f0:	bf00      	nop
 800a5f2:	3714      	adds	r7, #20
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a5f8 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	460b      	mov	r3, r1
 800a602:	807b      	strh	r3, [r7, #2]
 800a604:	4613      	mov	r3, r2
 800a606:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	332c      	adds	r3, #44	; 0x2c
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800a616:	4610      	mov	r0, r2
 800a618:	4798      	blx	r3
        setBaselineY(baselineY);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	3360      	adds	r3, #96	; 0x60
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f9b7 2000 	ldrsh.w	r2, [r7]
 800a626:	4611      	mov	r1, r2
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	4798      	blx	r3
    }
 800a62c:	bf00      	nop
 800a62e:	3708      	adds	r7, #8
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	460b      	mov	r3, r1
 800a63e:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	887a      	ldrh	r2, [r7, #2]
 800a644:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 800a646:	bf00      	nop
 800a648:	370c      	adds	r7, #12
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr

0800a652 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 800a652:	b480      	push	{r7}
 800a654:	b083      	sub	sp, #12
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 800a65e:	4618      	mov	r0, r3
 800a660:	370c      	adds	r7, #12
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr
	...

0800a66c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	4a05      	ldr	r2, [pc, #20]	; (800a68c <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	601a      	str	r2, [r3, #0]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7ff fdff 	bl	800a280 <_ZN8touchgfx6WidgetD1Ev>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4618      	mov	r0, r3
 800a686:	3708      	adds	r7, #8
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	080264e4 	.word	0x080264e4

0800a690 <_ZN8touchgfx8TextAreaD0Ev>:
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f7ff ffe7 	bl	800a66c <_ZN8touchgfx8TextAreaD1Ev>
 800a69e:	2134      	movs	r1, #52	; 0x34
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f017 f8d4 	bl	802184e <_ZdlPvj>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
        : TextArea()
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7ff ff24 	bl	800a508 <_ZN8touchgfx8TextAreaC1Ev>
 800a6c0:	4a03      	ldr	r2, [pc, #12]	; (800a6d0 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	601a      	str	r2, [r3, #0]
    {
    }
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3708      	adds	r7, #8
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	080240c0 	.word	0x080240c0

0800a6d4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	4a05      	ldr	r2, [pc, #20]	; (800a6f4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	601a      	str	r2, [r3, #0]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7ff ffc1 	bl	800a66c <_ZN8touchgfx8TextAreaD1Ev>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	080240c0 	.word	0x080240c0

0800a6f8 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f7ff ffe7 	bl	800a6d4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800a706:	2134      	movs	r1, #52	; 0x34
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f017 f8a0 	bl	802184e <_ZdlPvj>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4618      	mov	r0, r3
 800a712:	3708      	adds	r7, #8
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	4618      	mov	r0, r3
 800a724:	f7ff ffc4 	bl	800a6b0 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800a728:	4a05      	ldr	r2, [pc, #20]	; (800a740 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	601a      	str	r2, [r3, #0]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	4618      	mov	r0, r3
 800a738:	3708      	adds	r7, #8
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	08026668 	.word	0x08026668

0800a744 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
     *
     *        Gets text height.
     *
     * @return The text height.
     */
    virtual int16_t getTextHeight()
 800a744:	b5b0      	push	{r4, r5, r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
    {
        return typedText.hasValidId() ? calculateTextHeight(typedText.getText(), wildcard, 0) : 0;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	3326      	adds	r3, #38	; 0x26
 800a750:	4618      	mov	r0, r3
 800a752:	f7ff feaf 	bl	800a4b4 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800a756:	4603      	mov	r3, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d011      	beq.n	800a780 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x3c>
 800a75c:	687d      	ldr	r5, [r7, #4]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	3370      	adds	r3, #112	; 0x70
 800a764:	681c      	ldr	r4, [r3, #0]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	3326      	adds	r3, #38	; 0x26
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7ff feb6 	bl	800a4dc <_ZNK8touchgfx9TypedText7getTextEv>
 800a770:	4601      	mov	r1, r0
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a776:	2300      	movs	r3, #0
 800a778:	4628      	mov	r0, r5
 800a77a:	47a0      	blx	r4
 800a77c:	4603      	mov	r3, r0
 800a77e:	e000      	b.n	800a782 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x3e>
 800a780:	2300      	movs	r3, #0
    }
 800a782:	4618      	mov	r0, r3
 800a784:	3708      	adds	r7, #8
 800a786:	46bd      	mov	sp, r7
 800a788:	bdb0      	pop	{r4, r5, r7, pc}

0800a78a <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800a78a:	b480      	push	{r7}
 800a78c:	b083      	sub	sp, #12
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	683a      	ldr	r2, [r7, #0]
 800a798:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800a79a:	bf00      	nop
 800a79c:	370c      	adds	r7, #12
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr

0800a7a6 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
     *         Gets the width in pixels of the current associated text in the current selected
     *         language. In case of multi-lined text the width of the widest line is returned.
     *
     * @return The width in pixels of the current text.
     */
    virtual uint16_t getTextWidth() const
 800a7a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7a8:	b085      	sub	sp, #20
 800a7aa:	af02      	add	r7, sp, #8
 800a7ac:	6078      	str	r0, [r7, #4]
    {
        return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText(), wildcard, 0) : 0;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	3326      	adds	r3, #38	; 0x26
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7ff fe7e 	bl	800a4b4 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d020      	beq.n	800a800 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x5a>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	3326      	adds	r3, #38	; 0x26
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7ff f894 	bl	80098f0 <_ZNK8touchgfx9TypedText7getFontEv>
 800a7c8:	4605      	mov	r5, r0
 800a7ca:	682b      	ldr	r3, [r5, #0]
 800a7cc:	331c      	adds	r3, #28
 800a7ce:	681c      	ldr	r4, [r3, #0]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	3326      	adds	r3, #38	; 0x26
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7ff f8a7 	bl	8009928 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	461e      	mov	r6, r3
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	3326      	adds	r3, #38	; 0x26
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7ff fe7a 	bl	800a4dc <_ZNK8touchgfx9TypedText7getTextEv>
 800a7e8:	4601      	mov	r1, r0
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	9300      	str	r3, [sp, #0]
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	460a      	mov	r2, r1
 800a7f6:	4631      	mov	r1, r6
 800a7f8:	4628      	mov	r0, r5
 800a7fa:	47a0      	blx	r4
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	e000      	b.n	800a802 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x5c>
 800a800:	2300      	movs	r3, #0
    }
 800a802:	4618      	mov	r0, r3
 800a804:	370c      	adds	r7, #12
 800a806:	46bd      	mov	sp, r7
 800a808:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a80c <_ZN8touchgfx4ViewI19ChoixCanalPresenterED1Ev>:
 * @tparam T The type of Presenter associated with this view.
 *
 * @see Screen
 */
template<class T>
class View : public Screen
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	4a05      	ldr	r2, [pc, #20]	; (800a82c <_ZN8touchgfx4ViewI19ChoixCanalPresenterED1Ev+0x20>)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	601a      	str	r2, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7ff fcb5 	bl	800a18c <_ZN8touchgfx6ScreenD1Ev>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4618      	mov	r0, r3
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	0802408c 	.word	0x0802408c

0800a830 <_ZN8touchgfx4ViewI19ChoixCanalPresenterED0Ev>:
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f7ff ffe7 	bl	800a80c <_ZN8touchgfx4ViewI19ChoixCanalPresenterED1Ev>
 800a83e:	2140      	movs	r1, #64	; 0x40
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f017 f804 	bl	802184e <_ZdlPvj>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4618      	mov	r0, r3
 800a84a:	3708      	adds	r7, #8
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <_ZN18ChoixCanalViewBaseD1Ev>:

class ChoixCanalViewBase : public touchgfx::View<ChoixCanalPresenter>
{
public:
    ChoixCanalViewBase();
    virtual ~ChoixCanalViewBase() {}
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	4a1f      	ldr	r2, [pc, #124]	; (800a8d8 <_ZN18ChoixCanalViewBaseD1Ev+0x88>)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	601a      	str	r2, [r3, #0]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800a864:	4618      	mov	r0, r3
 800a866:	f001 f95b 	bl	800bb20 <_ZN8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_12MoveAnimatorINS_6ButtonEEEvvED1Ev>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800a870:	4618      	mov	r0, r3
 800a872:	f001 f977 	bl	800bb64 <_ZN8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a87c:	4618      	mov	r0, r3
 800a87e:	f000 fb0b 	bl	800ae98 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEED1Ev>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 800a888:	4618      	mov	r0, r3
 800a88a:	f000 fbaf 	bl	800afec <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEED1Ev>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a894:	4618      	mov	r0, r3
 800a896:	f000 fb65 	bl	800af64 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEED1Ev>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f000 fb3d 	bl	800af20 <_ZN8touchgfx12MoveAnimatorINS_5ImageEED1Ev>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	33bc      	adds	r3, #188	; 0xbc
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f000 faf4 	bl	800ae98 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEED1Ev>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	336c      	adds	r3, #108	; 0x6c
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f000 faef 	bl	800ae98 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEED1Ev>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	3340      	adds	r3, #64	; 0x40
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f000 fb0c 	bl	800aedc <_ZN8touchgfx5ImageD1Ev>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7ff ffa0 	bl	800a80c <_ZN8touchgfx4ViewI19ChoixCanalPresenterED1Ev>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3708      	adds	r7, #8
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	08023df0 	.word	0x08023df0

0800a8dc <_ZN18ChoixCanalViewBaseD0Ev>:
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f7ff ffb3 	bl	800a850 <_ZN18ChoixCanalViewBaseD1Ev>
 800a8ea:	f44f 711f 	mov.w	r1, #636	; 0x27c
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f016 ffad 	bl	802184e <_ZdlPvj>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3708      	adds	r7, #8
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <_ZN18ChoixCanalViewBase20buttonConnectClickedEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void buttonConnectClicked()
 800a8fe:	b480      	push	{r7}
 800a900:	b083      	sub	sp, #12
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in ChoixCanal
    }
 800a906:	bf00      	nop
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr

0800a912 <_ZN18ChoixCanalViewBase15buttonUpClickedEv>:

    virtual void buttonUpClicked()
 800a912:	b480      	push	{r7}
 800a914:	b083      	sub	sp, #12
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in ChoixCanal
    }
 800a91a:	bf00      	nop
 800a91c:	370c      	adds	r7, #12
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr

0800a926 <_ZN18ChoixCanalViewBase17buttonDownClickedEv>:

    virtual void buttonDownClicked()
 800a926:	b480      	push	{r7}
 800a928:	b083      	sub	sp, #12
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in ChoixCanal
    }
 800a92e:	bf00      	nop
 800a930:	370c      	adds	r7, #12
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr

0800a93a <_ZN18ChoixCanalViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b082      	sub	sp, #8
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800a942:	f00b f83f 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 800a946:	4603      	mov	r3, r0
    }
 800a948:	4618      	mov	r0, r3
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 800a950:	b590      	push	{r4, r7, lr}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	4603      	mov	r3, r0
 800a958:	71fb      	strb	r3, [r7, #7]
 800a95a:	460b      	mov	r3, r1
 800a95c:	71bb      	strb	r3, [r7, #6]
 800a95e:	4613      	mov	r3, r2
 800a960:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800a962:	f7ff fbc9 	bl	800a0f8 <_ZN8touchgfx3HAL11getInstanceEv>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d105      	bne.n	800a978 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 800a96c:	4b0a      	ldr	r3, [pc, #40]	; (800a998 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 800a96e:	4a0b      	ldr	r2, [pc, #44]	; (800a99c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 800a970:	2138      	movs	r1, #56	; 0x38
 800a972:	480b      	ldr	r0, [pc, #44]	; (800a9a0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 800a974:	f017 fce4 	bl	8022340 <__assert_func>
 800a978:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 800a97a:	f7ff fbc9 	bl	800a110 <_ZN8touchgfx3HAL3lcdEv>
 800a97e:	6803      	ldr	r3, [r0, #0]
 800a980:	332c      	adds	r3, #44	; 0x2c
 800a982:	681c      	ldr	r4, [r3, #0]
 800a984:	797b      	ldrb	r3, [r7, #5]
 800a986:	79ba      	ldrb	r2, [r7, #6]
 800a988:	79f9      	ldrb	r1, [r7, #7]
 800a98a:	47a0      	blx	r4
 800a98c:	4603      	mov	r3, r0
    }
 800a98e:	4618      	mov	r0, r3
 800a990:	370c      	adds	r7, #12
 800a992:	46bd      	mov	sp, r7
 800a994:	bd90      	pop	{r4, r7, pc}
 800a996:	bf00      	nop
 800a998:	08023548 	.word	0x08023548
 800a99c:	080241b4 	.word	0x080241b4
 800a9a0:	0802358c 	.word	0x0802358c

0800a9a4 <_ZN18ChoixCanalViewBaseC1Ev>:
#include <gui_generated/choixcanal_screen/ChoixCanalViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

ChoixCanalViewBase::ChoixCanalViewBase() :
 800a9a4:	b590      	push	{r4, r7, lr}
 800a9a6:	b095      	sub	sp, #84	; 0x54
 800a9a8:	af02      	add	r7, sp, #8
 800a9aa:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &ChoixCanalViewBase::buttonCallbackHandler),
    interactionButtonConnectMoveEndedCallback(this, &ChoixCanalViewBase::interactionButtonConnectMoveEndedCallbackHandler)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f000 fb3e 	bl	800b030 <_ZN8touchgfx4ViewI19ChoixCanalPresenterEC1Ev>
 800a9b4:	4ad2      	ldr	r2, [pc, #840]	; (800ad00 <_ZN18ChoixCanalViewBaseC1Ev+0x35c>)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	601a      	str	r2, [r3, #0]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800a9c0:	f107 0308 	add.w	r3, r7, #8
 800a9c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f7ff f9e9 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800a9ce:	f107 0308 	add.w	r3, r7, #8
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f7ff fc99 	bl	800a30c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	336c      	adds	r3, #108	; 0x6c
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f000 fb3c 	bl	800b05c <_ZN8touchgfx12MoveAnimatorINS_6ButtonEEC1Ev>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	33bc      	adds	r3, #188	; 0xbc
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f000 fb37 	bl	800b05c <_ZN8touchgfx12MoveAnimatorINS_6ButtonEEC1Ev>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f000 fb51 	bl	800b09c <_ZN8touchgfx12MoveAnimatorINS_5ImageEEC1Ev>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aa00:	4618      	mov	r0, r3
 800aa02:	f000 fb75 	bl	800b0f0 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEEC1Ev>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f000 fb8f 	bl	800b130 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEEC1Ev>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f000 fb1f 	bl	800b05c <_ZN8touchgfx12MoveAnimatorINS_6ButtonEEC1Ev>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f503 7017 	add.w	r0, r3, #604	; 0x25c
 800aa24:	4bb7      	ldr	r3, [pc, #732]	; (800ad04 <_ZN18ChoixCanalViewBaseC1Ev+0x360>)
 800aa26:	60fb      	str	r3, [r7, #12]
 800aa28:	2300      	movs	r3, #0
 800aa2a:	613b      	str	r3, [r7, #16]
 800aa2c:	f107 030c 	add.w	r3, r7, #12
 800aa30:	cb0c      	ldmia	r3, {r2, r3}
 800aa32:	6879      	ldr	r1, [r7, #4]
 800aa34:	f000 fbac 	bl	800b190 <_ZN8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f503 701b 	add.w	r0, r3, #620	; 0x26c
 800aa3e:	4bb2      	ldr	r3, [pc, #712]	; (800ad08 <_ZN18ChoixCanalViewBaseC1Ev+0x364>)
 800aa40:	617b      	str	r3, [r7, #20]
 800aa42:	2300      	movs	r3, #0
 800aa44:	61bb      	str	r3, [r7, #24]
 800aa46:	f107 0314 	add.w	r3, r7, #20
 800aa4a:	cb0c      	ldmia	r3, {r2, r3}
 800aa4c:	6879      	ldr	r1, [r7, #4]
 800aa4e:	f000 fbcf 	bl	800b1f0 <_ZN8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_12MoveAnimatorINS_6ButtonEEEvvEC1EPS1_MS1_FvS6_E>
{

    imageBg.setXY(0, 0);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	3340      	adds	r3, #64	; 0x40
 800aa56:	2200      	movs	r2, #0
 800aa58:	2100      	movs	r1, #0
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7ff fa63 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
    imageBg.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800aa66:	f107 031c 	add.w	r3, r7, #28
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7ff f997 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800aa72:	f107 031c 	add.w	r3, r7, #28
 800aa76:	4619      	mov	r1, r3
 800aa78:	4620      	mov	r0, r4
 800aa7a:	f009 feaf 	bl	80147dc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    buttonUp.setXY(272, 12);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	336c      	adds	r3, #108	; 0x6c
 800aa82:	220c      	movs	r2, #12
 800aa84:	f44f 7188 	mov.w	r1, #272	; 0x110
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7ff fa4c 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
    buttonUp.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_UP_RELEASED_ID), touchgfx::Bitmap(BITMAP_BUTTON_UP_PRESSED_ID));
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800aa94:	f107 0320 	add.w	r3, r7, #32
 800aa98:	2109      	movs	r1, #9
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7ff f980 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800aaa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aaa4:	2108      	movs	r1, #8
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7ff f97a 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800aaac:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800aab0:	f107 0320 	add.w	r3, r7, #32
 800aab4:	4619      	mov	r1, r3
 800aab6:	4620      	mov	r0, r4
 800aab8:	f009 fcc0 	bl	801443c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonUp.setAction(buttonCallback);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800aac8:	4619      	mov	r1, r3
 800aaca:	4610      	mov	r0, r2
 800aacc:	f7ff fc5e 	bl	800a38c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonDown.setXY(272, 205);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	33bc      	adds	r3, #188	; 0xbc
 800aad4:	22cd      	movs	r2, #205	; 0xcd
 800aad6:	f44f 7188 	mov.w	r1, #272	; 0x110
 800aada:	4618      	mov	r0, r3
 800aadc:	f7ff fa23 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
    buttonDown.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_DOWN_RELEASED_ID), touchgfx::Bitmap(BITMAP_BUTTON_DOWN_PRESSED_ID));
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f103 04bc 	add.w	r4, r3, #188	; 0xbc
 800aae6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aaea:	2105      	movs	r1, #5
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7ff f957 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800aaf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aaf6:	2104      	movs	r1, #4
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7ff f951 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800aafe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800ab02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ab06:	4619      	mov	r1, r3
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f009 fc97 	bl	801443c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonDown.setAction(buttonCallback);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	4610      	mov	r0, r2
 800ab1e:	f7ff fc35 	bl	800a38c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    imageBgCanal.setXY(277, 75);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800ab28:	224b      	movs	r2, #75	; 0x4b
 800ab2a:	f240 1115 	movw	r1, #277	; 0x115
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7ff f9f9 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
    imageBgCanal.setBitmap(touchgfx::Bitmap(BITMAP_COUNTER_BOX_120X122_ID));
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 800ab3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ab3e:	210b      	movs	r1, #11
 800ab40:	4618      	mov	r0, r3
 800ab42:	f7ff f92d 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800ab46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f009 fe45 	bl	80147dc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textArea1.setXY(81, 50);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ab58:	2232      	movs	r2, #50	; 0x32
 800ab5a:	2151      	movs	r1, #81	; 0x51
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7ff f9e2 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(250, 160, 50));
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 800ab68:	2232      	movs	r2, #50	; 0x32
 800ab6a:	21a0      	movs	r1, #160	; 0xa0
 800ab6c:	20fa      	movs	r0, #250	; 0xfa
 800ab6e:	f7ff feef 	bl	800a950 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800ab72:	4603      	mov	r3, r0
 800ab74:	4619      	mov	r1, r3
 800ab76:	4620      	mov	r0, r4
 800ab78:	f7ff fd09 	bl	800a58e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ab82:	2100      	movs	r1, #0
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7ff fd55 	bl	800a634 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 800ab90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ab94:	2100      	movs	r1, #0
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7ff fc7c 	bl	800a494 <_ZN8touchgfx9TypedTextC1Et>
 800ab9c:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800ab9e:	4620      	mov	r0, r4
 800aba0:	f009 fc42 	bl	8014428 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    textCanalVoilier.setPosition(261, 87, 152, 99);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 800abaa:	2363      	movs	r3, #99	; 0x63
 800abac:	9300      	str	r3, [sp, #0]
 800abae:	2398      	movs	r3, #152	; 0x98
 800abb0:	2257      	movs	r2, #87	; 0x57
 800abb2:	f240 1105 	movw	r1, #261	; 0x105
 800abb6:	f7ff f951 	bl	8009e5c <_ZN8touchgfx8Drawable11setPositionEssss>
    textCanalVoilier.setColor(touchgfx::Color::getColorFrom24BitRGB(250, 160, 50));
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 800abc0:	2232      	movs	r2, #50	; 0x32
 800abc2:	21a0      	movs	r1, #160	; 0xa0
 800abc4:	20fa      	movs	r0, #250	; 0xfa
 800abc6:	f7ff fec3 	bl	800a950 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800abca:	4603      	mov	r3, r0
 800abcc:	4619      	mov	r1, r3
 800abce:	4620      	mov	r0, r4
 800abd0:	f7ff fcdd 	bl	800a58e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textCanalVoilier.setLinespacing(0);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 800abda:	2100      	movs	r1, #0
 800abdc:	4618      	mov	r0, r3
 800abde:	f7ff fd29 	bl	800a634 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(textCanalVoilierBuffer, TEXTCANALVOILIER_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID4).getText());
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f503 7412 	add.w	r4, r3, #584	; 0x248
 800abe8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800abec:	2102      	movs	r1, #2
 800abee:	4618      	mov	r0, r3
 800abf0:	f7ff fc50 	bl	800a494 <_ZN8touchgfx9TypedTextC1Et>
 800abf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7ff fc6f 	bl	800a4dc <_ZNK8touchgfx9TypedText7getTextEv>
 800abfe:	4603      	mov	r3, r0
 800ac00:	4a42      	ldr	r2, [pc, #264]	; (800ad0c <_ZN18ChoixCanalViewBaseC1Ev+0x368>)
 800ac02:	210a      	movs	r1, #10
 800ac04:	4620      	mov	r0, r4
 800ac06:	f00c ffe9 	bl	8017bdc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textCanalVoilier.setWildcard(textCanalVoilierBuffer);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f503 72d2 	add.w	r2, r3, #420	; 0x1a4
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800ac16:	4619      	mov	r1, r3
 800ac18:	4610      	mov	r0, r2
 800ac1a:	f7ff fdb6 	bl	800a78a <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textCanalVoilier.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f503 74d2 	add.w	r4, r3, #420	; 0x1a4
 800ac24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ac28:	2101      	movs	r1, #1
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7ff fc32 	bl	800a494 <_ZN8touchgfx9TypedTextC1Et>
 800ac30:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 800ac32:	4620      	mov	r0, r4
 800ac34:	f009 fbf8 	bl	8014428 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    buttonConnect.setXY(65, 130);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ac3e:	2282      	movs	r2, #130	; 0x82
 800ac40:	2141      	movs	r1, #65	; 0x41
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7ff f96f 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
    buttonConnect.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_CONNECT_RELEASED_ID), touchgfx::Bitmap(BITMAP_BUTTON_CONNECT_PRESSED_ID));
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f503 74fc 	add.w	r4, r3, #504	; 0x1f8
 800ac4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ac52:	2102      	movs	r1, #2
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7ff f8a3 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800ac5a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ac5e:	2101      	movs	r1, #1
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7ff f89d 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800ac66:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800ac6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ac6e:	4619      	mov	r1, r3
 800ac70:	4620      	mov	r0, r4
 800ac72:	f009 fbe3 	bl	801443c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonConnect.setAction(buttonCallback);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800ac82:	4619      	mov	r1, r3
 800ac84:	4610      	mov	r0, r2
 800ac86:	f7ff fb81 	bl	800a38c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(imageBg);
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	3340      	adds	r3, #64	; 0x40
 800ac90:	4619      	mov	r1, r3
 800ac92:	4610      	mov	r0, r2
 800ac94:	f7ff fad2 	bl	800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonUp);
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	336c      	adds	r3, #108	; 0x6c
 800ac9e:	4619      	mov	r1, r3
 800aca0:	4610      	mov	r0, r2
 800aca2:	f7ff facb 	bl	800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonDown);
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	33bc      	adds	r3, #188	; 0xbc
 800acac:	4619      	mov	r1, r3
 800acae:	4610      	mov	r0, r2
 800acb0:	f7ff fac4 	bl	800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(imageBgCanal);
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800acbc:	4619      	mov	r1, r3
 800acbe:	4610      	mov	r0, r2
 800acc0:	f7ff fabc 	bl	800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800accc:	4619      	mov	r1, r3
 800acce:	4610      	mov	r0, r2
 800acd0:	f7ff fab4 	bl	800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textCanalVoilier);
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 800acdc:	4619      	mov	r1, r3
 800acde:	4610      	mov	r0, r2
 800ace0:	f7ff faac 	bl	800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonConnect);
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800acec:	4619      	mov	r1, r3
 800acee:	4610      	mov	r0, r2
 800acf0:	f7ff faa4 	bl	800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4618      	mov	r0, r3
 800acf8:	374c      	adds	r7, #76	; 0x4c
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd90      	pop	{r4, r7, pc}
 800acfe:	bf00      	nop
 800ad00:	08023df0 	.word	0x08023df0
 800ad04:	0800ad45 	.word	0x0800ad45
 800ad08:	0800ad25 	.word	0x0800ad25
 800ad0c:	080235cc 	.word	0x080235cc

0800ad10 <_ZN18ChoixCanalViewBase11setupScreenEv>:

void ChoixCanalViewBase::setupScreen()
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]

}
 800ad18:	bf00      	nop
 800ad1a:	370c      	adds	r7, #12
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <_ZN18ChoixCanalViewBase48interactionButtonConnectMoveEndedCallbackHandlerERKN8touchgfx12MoveAnimatorINS0_6ButtonEEE>:

void ChoixCanalViewBase::interactionButtonConnectMoveEndedCallbackHandler(const touchgfx::MoveAnimator<touchgfx::Button>& comp)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
    //InteractionChangeScreen
    //When InteractionButtonConnectMove completed change screen to RotationVoilier
    //Go to RotationVoilier with no screen transition
    application().gotoRotationVoilierScreenNoTransition();
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f7ff fe03 	bl	800a93a <_ZN18ChoixCanalViewBase11applicationEv>
 800ad34:	4603      	mov	r3, r0
 800ad36:	4618      	mov	r0, r3
 800ad38:	f001 fc16 	bl	800c568 <_ZN23FrontendApplicationBase37gotoRotationVoilierScreenNoTransitionEv>
}
 800ad3c:	bf00      	nop
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <_ZN18ChoixCanalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void ChoixCanalViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af02      	add	r7, sp, #8
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]
    if (&src == &buttonUp)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	336c      	adds	r3, #108	; 0x6c
 800ad52:	683a      	ldr	r2, [r7, #0]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d106      	bne.n	800ad66 <_ZN18ChoixCanalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //InteractionButtonUpClicked
        //When buttonUp clicked call virtual function
        //Call buttonUpClicked
        buttonUpClicked();
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	3330      	adds	r3, #48	; 0x30
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	4798      	blx	r3
        //When InteractionButtonConnectClicked completed move imageBgCanal
        //Move imageBgCanal to x:600, y:75 with SineOut easing in 500 ms (30 Ticks)
        imageBgCanal.clearMoveAnimationEndedAction();
        imageBgCanal.startMoveAnimation(600, 75, 30, touchgfx::EasingEquations::sineEaseOut, touchgfx::EasingEquations::sineEaseOut);
    }
}
 800ad64:	e091      	b.n	800ae8a <_ZN18ChoixCanalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x146>
    else if (&src == &buttonDown)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	33bc      	adds	r3, #188	; 0xbc
 800ad6a:	683a      	ldr	r2, [r7, #0]
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d106      	bne.n	800ad7e <_ZN18ChoixCanalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3a>
        buttonDownClicked();
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	3334      	adds	r3, #52	; 0x34
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	4798      	blx	r3
}
 800ad7c:	e085      	b.n	800ae8a <_ZN18ChoixCanalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x146>
    else if (&src == &buttonConnect)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ad84:	683a      	ldr	r2, [r7, #0]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d17f      	bne.n	800ae8a <_ZN18ChoixCanalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x146>
        buttonConnectClicked();
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	332c      	adds	r3, #44	; 0x2c
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	4798      	blx	r3
        buttonUp.clearMoveAnimationEndedAction();
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	336c      	adds	r3, #108	; 0x6c
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f000 fa48 	bl	800b230 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE29clearMoveAnimationEndedActionEv>
        buttonUp.startMoveAnimation(600, 12, 24, touchgfx::EasingEquations::sineEaseOut, touchgfx::EasingEquations::sineEaseOut);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800ada6:	4b3b      	ldr	r3, [pc, #236]	; (800ae94 <_ZN18ChoixCanalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x150>)
 800ada8:	9301      	str	r3, [sp, #4]
 800adaa:	4b3a      	ldr	r3, [pc, #232]	; (800ae94 <_ZN18ChoixCanalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x150>)
 800adac:	9300      	str	r3, [sp, #0]
 800adae:	2318      	movs	r3, #24
 800adb0:	220c      	movs	r2, #12
 800adb2:	f44f 7116 	mov.w	r1, #600	; 0x258
 800adb6:	f000 fa48 	bl	800b24a <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE18startMoveAnimationEsstPFstsstES4_>
        buttonDown.clearMoveAnimationEndedAction();
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	33bc      	adds	r3, #188	; 0xbc
 800adbe:	4618      	mov	r0, r3
 800adc0:	f000 fa36 	bl	800b230 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE29clearMoveAnimationEndedActionEv>
        buttonDown.startMoveAnimation(600, 205, 24, touchgfx::EasingEquations::sineEaseOut, touchgfx::EasingEquations::sineEaseOut);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f103 00bc 	add.w	r0, r3, #188	; 0xbc
 800adca:	4b32      	ldr	r3, [pc, #200]	; (800ae94 <_ZN18ChoixCanalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x150>)
 800adcc:	9301      	str	r3, [sp, #4]
 800adce:	4b31      	ldr	r3, [pc, #196]	; (800ae94 <_ZN18ChoixCanalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x150>)
 800add0:	9300      	str	r3, [sp, #0]
 800add2:	2318      	movs	r3, #24
 800add4:	22cd      	movs	r2, #205	; 0xcd
 800add6:	f44f 7116 	mov.w	r1, #600	; 0x258
 800adda:	f000 fa36 	bl	800b24a <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE18startMoveAnimationEsstPFstsstES4_>
        textCanalVoilier.clearMoveAnimationEndedAction();
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 800ade4:	4618      	mov	r0, r3
 800ade6:	f000 fa83 	bl	800b2f0 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE29clearMoveAnimationEndedActionEv>
        textCanalVoilier.startMoveAnimation(600, 87, 24, touchgfx::EasingEquations::sineEaseOut, touchgfx::EasingEquations::sineEaseOut);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f503 70d2 	add.w	r0, r3, #420	; 0x1a4
 800adf0:	4b28      	ldr	r3, [pc, #160]	; (800ae94 <_ZN18ChoixCanalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x150>)
 800adf2:	9301      	str	r3, [sp, #4]
 800adf4:	4b27      	ldr	r3, [pc, #156]	; (800ae94 <_ZN18ChoixCanalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x150>)
 800adf6:	9300      	str	r3, [sp, #0]
 800adf8:	2318      	movs	r3, #24
 800adfa:	2257      	movs	r2, #87	; 0x57
 800adfc:	f44f 7116 	mov.w	r1, #600	; 0x258
 800ae00:	f000 fa83 	bl	800b30a <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE18startMoveAnimationEsstPFstsstES4_>
        buttonConnect.clearMoveAnimationEndedAction();
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f000 fa10 	bl	800b230 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE29clearMoveAnimationEndedActionEv>
        buttonConnect.startMoveAnimation(-160, 130, 30, touchgfx::EasingEquations::sineEaseOut, touchgfx::EasingEquations::sineEaseOut);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
 800ae16:	4b1f      	ldr	r3, [pc, #124]	; (800ae94 <_ZN18ChoixCanalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x150>)
 800ae18:	9301      	str	r3, [sp, #4]
 800ae1a:	4b1e      	ldr	r3, [pc, #120]	; (800ae94 <_ZN18ChoixCanalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x150>)
 800ae1c:	9300      	str	r3, [sp, #0]
 800ae1e:	231e      	movs	r3, #30
 800ae20:	2282      	movs	r2, #130	; 0x82
 800ae22:	f06f 019f 	mvn.w	r1, #159	; 0x9f
 800ae26:	f000 fa10 	bl	800b24a <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE18startMoveAnimationEsstPFstsstES4_>
        buttonConnect.setMoveAnimationEndedAction(interactionButtonConnectMoveEndedCallback);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 800ae36:	4619      	mov	r1, r3
 800ae38:	4610      	mov	r0, r2
 800ae3a:	f000 fabc 	bl	800b3b6 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE27setMoveAnimationEndedActionERNS_15GenericCallbackIRKS2_vvEE>
        textArea1.clearMoveAnimationEndedAction();
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ae44:	4618      	mov	r0, r3
 800ae46:	f000 fac4 	bl	800b3d2 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE29clearMoveAnimationEndedActionEv>
        textArea1.startMoveAnimation(-100, 50, 24, touchgfx::EasingEquations::sineEaseOut, touchgfx::EasingEquations::sineEaseOut);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f503 70aa 	add.w	r0, r3, #340	; 0x154
 800ae50:	4b10      	ldr	r3, [pc, #64]	; (800ae94 <_ZN18ChoixCanalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x150>)
 800ae52:	9301      	str	r3, [sp, #4]
 800ae54:	4b0f      	ldr	r3, [pc, #60]	; (800ae94 <_ZN18ChoixCanalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x150>)
 800ae56:	9300      	str	r3, [sp, #0]
 800ae58:	2318      	movs	r3, #24
 800ae5a:	2232      	movs	r2, #50	; 0x32
 800ae5c:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800ae60:	f000 fac4 	bl	800b3ec <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE18startMoveAnimationEsstPFstsstES4_>
        imageBgCanal.clearMoveAnimationEndedAction();
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f000 fb11 	bl	800b492 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE29clearMoveAnimationEndedActionEv>
        imageBgCanal.startMoveAnimation(600, 75, 30, touchgfx::EasingEquations::sineEaseOut, touchgfx::EasingEquations::sineEaseOut);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f503 7086 	add.w	r0, r3, #268	; 0x10c
 800ae76:	4b07      	ldr	r3, [pc, #28]	; (800ae94 <_ZN18ChoixCanalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x150>)
 800ae78:	9301      	str	r3, [sp, #4]
 800ae7a:	4b06      	ldr	r3, [pc, #24]	; (800ae94 <_ZN18ChoixCanalViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x150>)
 800ae7c:	9300      	str	r3, [sp, #0]
 800ae7e:	231e      	movs	r3, #30
 800ae80:	224b      	movs	r2, #75	; 0x4b
 800ae82:	f44f 7116 	mov.w	r1, #600	; 0x258
 800ae86:	f000 fb11 	bl	800b4ac <_ZN8touchgfx12MoveAnimatorINS_5ImageEE18startMoveAnimationEsstPFstsstES4_>
}
 800ae8a:	bf00      	nop
 800ae8c:	3708      	adds	r7, #8
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	08016cf1 	.word	0x08016cf1

0800ae98 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEED1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor. Destroys the MoveAnimator.
     */
    virtual ~MoveAnimator()
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
    {
    }
 800aea0:	4a05      	ldr	r2, [pc, #20]	; (800aeb8 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEED1Ev+0x20>)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	601a      	str	r2, [r3, #0]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7ff fad1 	bl	800a450 <_ZN8touchgfx6ButtonD1Ev>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3708      	adds	r7, #8
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}
 800aeb8:	0802400c 	.word	0x0802400c

0800aebc <_ZN8touchgfx12MoveAnimatorINS_6ButtonEED0Ev>:
    virtual ~MoveAnimator()
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b082      	sub	sp, #8
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
    }
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f7ff ffe7 	bl	800ae98 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEED1Ev>
 800aeca:	2150      	movs	r1, #80	; 0x50
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f016 fcbe 	bl	802184e <_ZdlPvj>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	4618      	mov	r0, r3
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	4a05      	ldr	r2, [pc, #20]	; (800aefc <_ZN8touchgfx5ImageD1Ev+0x20>)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	601a      	str	r2, [r3, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7ff f9c7 	bl	800a280 <_ZN8touchgfx6WidgetD1Ev>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4618      	mov	r0, r3
 800aef6:	3708      	adds	r7, #8
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	0802678c 	.word	0x0802678c

0800af00 <_ZN8touchgfx5ImageD0Ev>:
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f7ff ffe7 	bl	800aedc <_ZN8touchgfx5ImageD1Ev>
 800af0e:	212c      	movs	r1, #44	; 0x2c
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f016 fc9c 	bl	802184e <_ZdlPvj>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4618      	mov	r0, r3
 800af1a:	3708      	adds	r7, #8
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <_ZN8touchgfx12MoveAnimatorINS_5ImageEED1Ev>:
    virtual ~MoveAnimator()
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
    }
 800af28:	4a05      	ldr	r2, [pc, #20]	; (800af40 <_ZN8touchgfx12MoveAnimatorINS_5ImageEED1Ev+0x20>)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	601a      	str	r2, [r3, #0]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4618      	mov	r0, r3
 800af32:	f7ff ffd3 	bl	800aedc <_ZN8touchgfx5ImageD1Ev>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4618      	mov	r0, r3
 800af3a:	3708      	adds	r7, #8
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	08023f90 	.word	0x08023f90

0800af44 <_ZN8touchgfx12MoveAnimatorINS_5ImageEED0Ev>:
    virtual ~MoveAnimator()
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
    }
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f7ff ffe7 	bl	800af20 <_ZN8touchgfx12MoveAnimatorINS_5ImageEED1Ev>
 800af52:	2148      	movs	r1, #72	; 0x48
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f016 fc7a 	bl	802184e <_ZdlPvj>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4618      	mov	r0, r3
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEED1Ev>:
    virtual ~MoveAnimator()
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
    }
 800af6c:	4a05      	ldr	r2, [pc, #20]	; (800af84 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEED1Ev+0x20>)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	601a      	str	r2, [r3, #0]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4618      	mov	r0, r3
 800af76:	f7ff fb79 	bl	800a66c <_ZN8touchgfx8TextAreaD1Ev>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4618      	mov	r0, r3
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	08023f04 	.word	0x08023f04

0800af88 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEED0Ev>:
    virtual ~MoveAnimator()
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
    }
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f7ff ffe7 	bl	800af64 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEED1Ev>
 800af96:	2150      	movs	r1, #80	; 0x50
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f016 fc58 	bl	802184e <_ZdlPvj>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4618      	mov	r0, r3
 800afa2:	3708      	adds	r7, #8
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	4a05      	ldr	r2, [pc, #20]	; (800afc8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	601a      	str	r2, [r3, #0]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	4618      	mov	r0, r3
 800afba:	f7ff fb8b 	bl	800a6d4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	4618      	mov	r0, r3
 800afc2:	3708      	adds	r7, #8
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	08026668 	.word	0x08026668

0800afcc <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f7ff ffe7 	bl	800afa8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800afda:	2138      	movs	r1, #56	; 0x38
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f016 fc36 	bl	802184e <_ZdlPvj>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	4618      	mov	r0, r3
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEED1Ev>:
    virtual ~MoveAnimator()
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
    }
 800aff4:	4a05      	ldr	r2, [pc, #20]	; (800b00c <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEED1Ev+0x20>)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	601a      	str	r2, [r3, #0]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4618      	mov	r0, r3
 800affe:	f7ff ffd3 	bl	800afa8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	4618      	mov	r0, r3
 800b006:	3708      	adds	r7, #8
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	08023e78 	.word	0x08023e78

0800b010 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEED0Ev>:
    virtual ~MoveAnimator()
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
    }
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f7ff ffe7 	bl	800afec <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEED1Ev>
 800b01e:	2154      	movs	r1, #84	; 0x54
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f016 fc14 	bl	802184e <_ZdlPvj>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	4618      	mov	r0, r3
 800b02a:	3708      	adds	r7, #8
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <_ZN8touchgfx4ViewI19ChoixCanalPresenterEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    View() : presenter(0)
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4618      	mov	r0, r3
 800b03c:	f00b fca0 	bl	8016980 <_ZN8touchgfx6ScreenC1Ev>
 800b040:	4a05      	ldr	r2, [pc, #20]	; (800b058 <_ZN8touchgfx4ViewI19ChoixCanalPresenterEC1Ev+0x28>)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	601a      	str	r2, [r3, #0]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	4618      	mov	r0, r3
 800b050:	3708      	adds	r7, #8
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	0802408c 	.word	0x0802408c

0800b05c <_ZN8touchgfx12MoveAnimatorINS_6ButtonEEC1Ev>:
    MoveAnimator() :
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b082      	sub	sp, #8
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
        moveAnimationEndedCallback(0)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4618      	mov	r0, r3
 800b068:	f7ff f9ce 	bl	800a408 <_ZN8touchgfx6ButtonC1Ev>
 800b06c:	4a0a      	ldr	r2, [pc, #40]	; (800b098 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEEC1Ev+0x3c>)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	601a      	str	r2, [r3, #0]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	869a      	strh	r2, [r3, #52]	; 0x34
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	86da      	strh	r2, [r3, #54]	; 0x36
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	64da      	str	r2, [r3, #76]	; 0x4c
    }
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	4618      	mov	r0, r3
 800b090:	3708      	adds	r7, #8
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	0802400c 	.word	0x0802400c

0800b09c <_ZN8touchgfx12MoveAnimatorINS_5ImageEEC1Ev>:
    MoveAnimator() :
 800b09c:	b590      	push	{r4, r7, lr}
 800b09e:	b085      	sub	sp, #20
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
        moveAnimationEndedCallback(0)
 800b0a4:	687c      	ldr	r4, [r7, #4]
 800b0a6:	f107 030c 	add.w	r3, r7, #12
 800b0aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7fe fe76 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800b0b4:	f107 030c 	add.w	r3, r7, #12
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f7ff f926 	bl	800a30c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800b0c0:	4a0a      	ldr	r2, [pc, #40]	; (800b0ec <_ZN8touchgfx12MoveAnimatorINS_5ImageEEC1Ev+0x50>)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	601a      	str	r2, [r3, #0]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	859a      	strh	r2, [r3, #44]	; 0x2c
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	85da      	strh	r2, [r3, #46]	; 0x2e
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	645a      	str	r2, [r3, #68]	; 0x44
    }
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3714      	adds	r7, #20
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd90      	pop	{r4, r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	08023f90 	.word	0x08023f90

0800b0f0 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEEC1Ev>:
    MoveAnimator() :
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
        moveAnimationEndedCallback(0)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7ff fa04 	bl	800a508 <_ZN8touchgfx8TextAreaC1Ev>
 800b100:	4a0a      	ldr	r2, [pc, #40]	; (800b12c <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEEC1Ev+0x3c>)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	601a      	str	r2, [r3, #0]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	869a      	strh	r2, [r3, #52]	; 0x34
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	86da      	strh	r2, [r3, #54]	; 0x36
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	64da      	str	r2, [r3, #76]	; 0x4c
    }
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	4618      	mov	r0, r3
 800b124:	3708      	adds	r7, #8
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	08023f04 	.word	0x08023f04

0800b130 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEEC1Ev>:
    MoveAnimator() :
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
        moveAnimationEndedCallback(0)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7ff faec 	bl	800a718 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800b140:	4a0a      	ldr	r2, [pc, #40]	; (800b16c <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEEC1Ev+0x3c>)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	601a      	str	r2, [r3, #0]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	875a      	strh	r2, [r3, #58]	; 0x3a
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	879a      	strh	r2, [r3, #60]	; 0x3c
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2200      	movs	r2, #0
 800b15e:	651a      	str	r2, [r3, #80]	; 0x50
    }
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	4618      	mov	r0, r3
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	08023e78 	.word	0x08023e78

0800b170 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
 *       taking zero, one, two or three arguments.
 *
 * @tparam T1 The type of the first argument in the member function, or void if none.
 */
template <class T1>
class GenericCallback<T1, void, void>
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	4a04      	ldr	r2, [pc, #16]	; (800b18c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	601a      	str	r2, [r3, #0]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4618      	mov	r0, r3
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	0802413c 	.word	0x0802413c

0800b190 <_ZN8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_1 Address of member function. This is the version where function
     *                       takes one argument.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	4639      	mov	r1, r7
 800b19c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7ff ffe4 	bl	800b170 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800b1a8:	4a08      	ldr	r2, [pc, #32]	; (800b1cc <_ZN8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	68ba      	ldr	r2, [r7, #8]
 800b1b2:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	3308      	adds	r3, #8
 800b1b8:	463a      	mov	r2, r7
 800b1ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b1be:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3710      	adds	r7, #16
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	08023e60 	.word	0x08023e60

0800b1d0 <_ZN8touchgfx15GenericCallbackIRKNS_12MoveAnimatorINS_6ButtonEEEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	4a04      	ldr	r2, [pc, #16]	; (800b1ec <_ZN8touchgfx15GenericCallbackIRKNS_12MoveAnimatorINS_6ButtonEEEvvEC1Ev+0x1c>)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	601a      	str	r2, [r3, #0]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr
 800b1ec:	08023e48 	.word	0x08023e48

0800b1f0 <_ZN8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_12MoveAnimatorINS_6ButtonEEEvvEC1EPS1_MS1_FvS6_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	4639      	mov	r1, r7
 800b1fc:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	4618      	mov	r0, r3
 800b204:	f7ff ffe4 	bl	800b1d0 <_ZN8touchgfx15GenericCallbackIRKNS_12MoveAnimatorINS_6ButtonEEEvvEC1Ev>
 800b208:	4a08      	ldr	r2, [pc, #32]	; (800b22c <_ZN8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_12MoveAnimatorINS_6ButtonEEEvvEC1EPS1_MS1_FvS6_E+0x3c>)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	3308      	adds	r3, #8
 800b218:	463a      	mov	r2, r7
 800b21a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b21e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	4618      	mov	r0, r3
 800b226:	3710      	adds	r7, #16
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}
 800b22c:	08023e30 	.word	0x08023e30

0800b230 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE29clearMoveAnimationEndedActionEv>:
     *        Clears the move animation ended action previously set by
     *        setMoveAnimationEndedAction.
     *
     * @see setMoveAnimationEndedAction
     */
    void clearMoveAnimationEndedAction()
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
    {
        moveAnimationEndedCallback = 0;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
 800b23e:	bf00      	nop
 800b240:	370c      	adds	r7, #12
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr

0800b24a <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE18startMoveAnimationEsstPFstsstES4_>:
     *                             EasingEquations::linearEaseNone.
     * @param yProgressionEquation The equation that describes the development of the Y position
     *                             during the animation. Default =
     *                             EasingEquations::linearEaseNone.
     */
    void startMoveAnimation(int16_t endX, int16_t endY, uint16_t duration, EasingEquation xProgressionEquation = &EasingEquations::linearEaseNone, EasingEquation yProgressionEquation = &EasingEquations::linearEaseNone)
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b084      	sub	sp, #16
 800b24e:	af00      	add	r7, sp, #0
 800b250:	60f8      	str	r0, [r7, #12]
 800b252:	4608      	mov	r0, r1
 800b254:	4611      	mov	r1, r2
 800b256:	461a      	mov	r2, r3
 800b258:	4603      	mov	r3, r0
 800b25a:	817b      	strh	r3, [r7, #10]
 800b25c:	460b      	mov	r3, r1
 800b25e:	813b      	strh	r3, [r7, #8]
 800b260:	4613      	mov	r3, r2
 800b262:	80fb      	strh	r3, [r7, #6]
    {
        if (!moveAnimationRunning)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800b26a:	f083 0301 	eor.w	r3, r3, #1
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	2b00      	cmp	r3, #0
 800b272:	d007      	beq.n	800b284 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE18startMoveAnimationEsstPFstsstES4_+0x3a>
        {
            Application::getInstance()->registerTimerWidget(this);
 800b274:	f00a fba6 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 800b278:	4602      	mov	r2, r0
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	4619      	mov	r1, r3
 800b27e:	4610      	mov	r0, r2
 800b280:	f00a fba6 	bl	80159d0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        }

        moveAnimationCounter = 0;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2200      	movs	r2, #0
 800b288:	869a      	strh	r2, [r3, #52]	; 0x34
        moveAnimationStartX = T::getX();
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7fe fe12 	bl	8009eb6 <_ZNK8touchgfx8Drawable4getXEv>
 800b292:	4603      	mov	r3, r0
 800b294:	461a      	mov	r2, r3
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	875a      	strh	r2, [r3, #58]	; 0x3a
        moveAnimationStartY = T::getY();
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7fe fe17 	bl	8009ed0 <_ZNK8touchgfx8Drawable4getYEv>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	879a      	strh	r2, [r3, #60]	; 0x3c
        moveAnimationEndX = endX;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	897a      	ldrh	r2, [r7, #10]
 800b2ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        moveAnimationEndY = endY;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	893a      	ldrh	r2, [r7, #8]
 800b2b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
        moveAnimationDuration = duration;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	88fa      	ldrh	r2, [r7, #6]
 800b2bc:	871a      	strh	r2, [r3, #56]	; 0x38
        moveAnimationXEquation = xProgressionEquation;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	69ba      	ldr	r2, [r7, #24]
 800b2c2:	645a      	str	r2, [r3, #68]	; 0x44
        moveAnimationYEquation = yProgressionEquation;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	69fa      	ldr	r2, [r7, #28]
 800b2c8:	649a      	str	r2, [r3, #72]	; 0x48

        moveAnimationRunning = true;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

        if (moveAnimationDelay == 0 && moveAnimationDuration == 0)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d106      	bne.n	800b2e8 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE18startMoveAnimationEsstPFstsstES4_+0x9e>
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d102      	bne.n	800b2e8 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE18startMoveAnimationEsstPFstsstES4_+0x9e>
        {
            nextMoveAnimationStep(); // Set end position and shut down
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	f000 f974 	bl	800b5d0 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE21nextMoveAnimationStepEv>
        }
    }
 800b2e8:	bf00      	nop
 800b2ea:	3710      	adds	r7, #16
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE29clearMoveAnimationEndedActionEv>:
    void clearMoveAnimationEndedAction()
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
        moveAnimationEndedCallback = 0;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	651a      	str	r2, [r3, #80]	; 0x50
    }
 800b2fe:	bf00      	nop
 800b300:	370c      	adds	r7, #12
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr

0800b30a <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE18startMoveAnimationEsstPFstsstES4_>:
    void startMoveAnimation(int16_t endX, int16_t endY, uint16_t duration, EasingEquation xProgressionEquation = &EasingEquations::linearEaseNone, EasingEquation yProgressionEquation = &EasingEquations::linearEaseNone)
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b084      	sub	sp, #16
 800b30e:	af00      	add	r7, sp, #0
 800b310:	60f8      	str	r0, [r7, #12]
 800b312:	4608      	mov	r0, r1
 800b314:	4611      	mov	r1, r2
 800b316:	461a      	mov	r2, r3
 800b318:	4603      	mov	r3, r0
 800b31a:	817b      	strh	r3, [r7, #10]
 800b31c:	460b      	mov	r3, r1
 800b31e:	813b      	strh	r3, [r7, #8]
 800b320:	4613      	mov	r3, r2
 800b322:	80fb      	strh	r3, [r7, #6]
        if (!moveAnimationRunning)
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b32a:	f083 0301 	eor.w	r3, r3, #1
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	2b00      	cmp	r3, #0
 800b332:	d007      	beq.n	800b344 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE18startMoveAnimationEsstPFstsstES4_+0x3a>
            Application::getInstance()->registerTimerWidget(this);
 800b334:	f00a fb46 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 800b338:	4602      	mov	r2, r0
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	4619      	mov	r1, r3
 800b33e:	4610      	mov	r0, r2
 800b340:	f00a fb46 	bl	80159d0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        moveAnimationCounter = 0;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2200      	movs	r2, #0
 800b348:	875a      	strh	r2, [r3, #58]	; 0x3a
        moveAnimationStartX = T::getX();
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7fe fdb2 	bl	8009eb6 <_ZNK8touchgfx8Drawable4getXEv>
 800b352:	4603      	mov	r3, r0
 800b354:	461a      	mov	r2, r3
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
        moveAnimationStartY = T::getY();
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	4618      	mov	r0, r3
 800b360:	f7fe fdb6 	bl	8009ed0 <_ZNK8touchgfx8Drawable4getYEv>
 800b364:	4603      	mov	r3, r0
 800b366:	461a      	mov	r2, r3
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        moveAnimationEndX = endX;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	897a      	ldrh	r2, [r7, #10]
 800b372:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        moveAnimationEndY = endY;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	893a      	ldrh	r2, [r7, #8]
 800b37a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        moveAnimationDuration = duration;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	88fa      	ldrh	r2, [r7, #6]
 800b382:	87da      	strh	r2, [r3, #62]	; 0x3e
        moveAnimationXEquation = xProgressionEquation;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	69ba      	ldr	r2, [r7, #24]
 800b388:	649a      	str	r2, [r3, #72]	; 0x48
        moveAnimationYEquation = yProgressionEquation;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	69fa      	ldr	r2, [r7, #28]
 800b38e:	64da      	str	r2, [r3, #76]	; 0x4c
        moveAnimationRunning = true;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        if (moveAnimationDelay == 0 && moveAnimationDuration == 0)
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d106      	bne.n	800b3ae <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE18startMoveAnimationEsstPFstsstES4_+0xa4>
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d102      	bne.n	800b3ae <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE18startMoveAnimationEsstPFstsstES4_+0xa4>
            nextMoveAnimationStep(); // Set end position and shut down
 800b3a8:	68f8      	ldr	r0, [r7, #12]
 800b3aa:	f000 f9bb 	bl	800b724 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv>
    }
 800b3ae:	bf00      	nop
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE27setMoveAnimationEndedActionERNS_15GenericCallbackIRKS2_vvEE>:
    void setMoveAnimationEndedAction(GenericCallback<const MoveAnimator<T>& >& callback)
 800b3b6:	b480      	push	{r7}
 800b3b8:	b083      	sub	sp, #12
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
 800b3be:	6039      	str	r1, [r7, #0]
        moveAnimationEndedCallback = &callback;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	683a      	ldr	r2, [r7, #0]
 800b3c4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
 800b3c6:	bf00      	nop
 800b3c8:	370c      	adds	r7, #12
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr

0800b3d2 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE29clearMoveAnimationEndedActionEv>:
    void clearMoveAnimationEndedAction()
 800b3d2:	b480      	push	{r7}
 800b3d4:	b083      	sub	sp, #12
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
        moveAnimationEndedCallback = 0;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	64da      	str	r2, [r3, #76]	; 0x4c
    }
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE18startMoveAnimationEsstPFstsstES4_>:
    void startMoveAnimation(int16_t endX, int16_t endY, uint16_t duration, EasingEquation xProgressionEquation = &EasingEquations::linearEaseNone, EasingEquation yProgressionEquation = &EasingEquations::linearEaseNone)
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	4608      	mov	r0, r1
 800b3f6:	4611      	mov	r1, r2
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	817b      	strh	r3, [r7, #10]
 800b3fe:	460b      	mov	r3, r1
 800b400:	813b      	strh	r3, [r7, #8]
 800b402:	4613      	mov	r3, r2
 800b404:	80fb      	strh	r3, [r7, #6]
        if (!moveAnimationRunning)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b40c:	f083 0301 	eor.w	r3, r3, #1
 800b410:	b2db      	uxtb	r3, r3
 800b412:	2b00      	cmp	r3, #0
 800b414:	d007      	beq.n	800b426 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE18startMoveAnimationEsstPFstsstES4_+0x3a>
            Application::getInstance()->registerTimerWidget(this);
 800b416:	f00a fad5 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 800b41a:	4602      	mov	r2, r0
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	4619      	mov	r1, r3
 800b420:	4610      	mov	r0, r2
 800b422:	f00a fad5 	bl	80159d0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        moveAnimationCounter = 0;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2200      	movs	r2, #0
 800b42a:	869a      	strh	r2, [r3, #52]	; 0x34
        moveAnimationStartX = T::getX();
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fe fd41 	bl	8009eb6 <_ZNK8touchgfx8Drawable4getXEv>
 800b434:	4603      	mov	r3, r0
 800b436:	461a      	mov	r2, r3
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	875a      	strh	r2, [r3, #58]	; 0x3a
        moveAnimationStartY = T::getY();
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	4618      	mov	r0, r3
 800b440:	f7fe fd46 	bl	8009ed0 <_ZNK8touchgfx8Drawable4getYEv>
 800b444:	4603      	mov	r3, r0
 800b446:	461a      	mov	r2, r3
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	879a      	strh	r2, [r3, #60]	; 0x3c
        moveAnimationEndX = endX;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	897a      	ldrh	r2, [r7, #10]
 800b450:	87da      	strh	r2, [r3, #62]	; 0x3e
        moveAnimationEndY = endY;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	893a      	ldrh	r2, [r7, #8]
 800b456:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
        moveAnimationDuration = duration;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	88fa      	ldrh	r2, [r7, #6]
 800b45e:	871a      	strh	r2, [r3, #56]	; 0x38
        moveAnimationXEquation = xProgressionEquation;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	69ba      	ldr	r2, [r7, #24]
 800b464:	645a      	str	r2, [r3, #68]	; 0x44
        moveAnimationYEquation = yProgressionEquation;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	69fa      	ldr	r2, [r7, #28]
 800b46a:	649a      	str	r2, [r3, #72]	; 0x48
        moveAnimationRunning = true;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2201      	movs	r2, #1
 800b470:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        if (moveAnimationDelay == 0 && moveAnimationDuration == 0)
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d106      	bne.n	800b48a <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE18startMoveAnimationEsstPFstsstES4_+0x9e>
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b480:	2b00      	cmp	r3, #0
 800b482:	d102      	bne.n	800b48a <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE18startMoveAnimationEsstPFstsstES4_+0x9e>
            nextMoveAnimationStep(); // Set end position and shut down
 800b484:	68f8      	ldr	r0, [r7, #12]
 800b486:	f000 f9f7 	bl	800b878 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv>
    }
 800b48a:	bf00      	nop
 800b48c:	3710      	adds	r7, #16
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}

0800b492 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE29clearMoveAnimationEndedActionEv>:
    void clearMoveAnimationEndedAction()
 800b492:	b480      	push	{r7}
 800b494:	b083      	sub	sp, #12
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
        moveAnimationEndedCallback = 0;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2200      	movs	r2, #0
 800b49e:	645a      	str	r2, [r3, #68]	; 0x44
    }
 800b4a0:	bf00      	nop
 800b4a2:	370c      	adds	r7, #12
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr

0800b4ac <_ZN8touchgfx12MoveAnimatorINS_5ImageEE18startMoveAnimationEsstPFstsstES4_>:
    void startMoveAnimation(int16_t endX, int16_t endY, uint16_t duration, EasingEquation xProgressionEquation = &EasingEquations::linearEaseNone, EasingEquation yProgressionEquation = &EasingEquations::linearEaseNone)
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b084      	sub	sp, #16
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	4608      	mov	r0, r1
 800b4b6:	4611      	mov	r1, r2
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	817b      	strh	r3, [r7, #10]
 800b4be:	460b      	mov	r3, r1
 800b4c0:	813b      	strh	r3, [r7, #8]
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	80fb      	strh	r3, [r7, #6]
        if (!moveAnimationRunning)
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b4cc:	f083 0301 	eor.w	r3, r3, #1
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d007      	beq.n	800b4e6 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE18startMoveAnimationEsstPFstsstES4_+0x3a>
            Application::getInstance()->registerTimerWidget(this);
 800b4d6:	f00a fa75 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	4619      	mov	r1, r3
 800b4e0:	4610      	mov	r0, r2
 800b4e2:	f00a fa75 	bl	80159d0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        moveAnimationCounter = 0;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	859a      	strh	r2, [r3, #44]	; 0x2c
        moveAnimationStartX = T::getX();
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7fe fce1 	bl	8009eb6 <_ZNK8touchgfx8Drawable4getXEv>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	865a      	strh	r2, [r3, #50]	; 0x32
        moveAnimationStartY = T::getY();
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7fe fce6 	bl	8009ed0 <_ZNK8touchgfx8Drawable4getYEv>
 800b504:	4603      	mov	r3, r0
 800b506:	461a      	mov	r2, r3
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	869a      	strh	r2, [r3, #52]	; 0x34
        moveAnimationEndX = endX;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	897a      	ldrh	r2, [r7, #10]
 800b510:	86da      	strh	r2, [r3, #54]	; 0x36
        moveAnimationEndY = endY;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	893a      	ldrh	r2, [r7, #8]
 800b516:	871a      	strh	r2, [r3, #56]	; 0x38
        moveAnimationDuration = duration;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	88fa      	ldrh	r2, [r7, #6]
 800b51c:	861a      	strh	r2, [r3, #48]	; 0x30
        moveAnimationXEquation = xProgressionEquation;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	69ba      	ldr	r2, [r7, #24]
 800b522:	63da      	str	r2, [r3, #60]	; 0x3c
        moveAnimationYEquation = yProgressionEquation;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	69fa      	ldr	r2, [r7, #28]
 800b528:	641a      	str	r2, [r3, #64]	; 0x40
        moveAnimationRunning = true;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2201      	movs	r2, #1
 800b52e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        if (moveAnimationDelay == 0 && moveAnimationDuration == 0)
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b536:	2b00      	cmp	r3, #0
 800b538:	d106      	bne.n	800b548 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE18startMoveAnimationEsstPFstsstES4_+0x9c>
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d102      	bne.n	800b548 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE18startMoveAnimationEsstPFstsstES4_+0x9c>
            nextMoveAnimationStep(); // Set end position and shut down
 800b542:	68f8      	ldr	r0, [r7, #12]
 800b544:	f000 fa42 	bl	800b9cc <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv>
    }
 800b548:	bf00      	nop
 800b54a:	3710      	adds	r7, #16
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
    }
 800b558:	4a04      	ldr	r2, [pc, #16]	; (800b56c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	601a      	str	r2, [r3, #0]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	4618      	mov	r0, r3
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr
 800b56c:	0802413c 	.word	0x0802413c

0800b570 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
    }
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f7ff ffe9 	bl	800b550 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800b57e:	2104      	movs	r1, #4
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f016 f964 	bl	802184e <_ZdlPvj>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	4618      	mov	r0, r3
 800b58a:	3708      	adds	r7, #8
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <_ZN8touchgfx15GenericCallbackIRKNS_12MoveAnimatorINS_6ButtonEEEvvED1Ev>:
    virtual ~GenericCallback()
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
    }
 800b598:	4a04      	ldr	r2, [pc, #16]	; (800b5ac <_ZN8touchgfx15GenericCallbackIRKNS_12MoveAnimatorINS_6ButtonEEEvvED1Ev+0x1c>)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	601a      	str	r2, [r3, #0]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr
 800b5ac:	08023e48 	.word	0x08023e48

0800b5b0 <_ZN8touchgfx15GenericCallbackIRKNS_12MoveAnimatorINS_6ButtonEEEvvED0Ev>:
    virtual ~GenericCallback()
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
    }
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f7ff ffe9 	bl	800b590 <_ZN8touchgfx15GenericCallbackIRKNS_12MoveAnimatorINS_6ButtonEEEvvED1Ev>
 800b5be:	2104      	movs	r1, #4
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f016 f944 	bl	802184e <_ZdlPvj>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3708      	adds	r7, #8
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE21nextMoveAnimationStepEv>:
     *
     * @brief Execute next step in move animation.
     *
     *        Execute next step in move animation and stop the timer if necessary.
     */
    void nextMoveAnimationStep()
 800b5d0:	b590      	push	{r4, r7, lr}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
    {
        if (moveAnimationRunning)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	f000 809c 	beq.w	800b71c <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE21nextMoveAnimationStepEv+0x14c>
        {
            if (moveAnimationCounter < moveAnimationDelay)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d206      	bcs.n	800b5fe <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE21nextMoveAnimationStepEv+0x2e>
            {
                // Just wait for the delay time to pass
                moveAnimationCounter++;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	b29a      	uxth	r2, r3
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	869a      	strh	r2, [r3, #52]	; 0x34
                        moveAnimationEndedCallback->execute(*this);
                    }
                }
            }
        }
    }
 800b5fc:	e08e      	b.n	800b71c <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE21nextMoveAnimationStepEv+0x14c>
                if (moveAnimationCounter <= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b602:	461a      	mov	r2, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b608:	4619      	mov	r1, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b60e:	440b      	add	r3, r1
 800b610:	429a      	cmp	r2, r3
 800b612:	d84a      	bhi.n	800b6aa <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE21nextMoveAnimationStepEv+0xda>
                    uint32_t actualAnimationCounter = moveAnimationCounter - moveAnimationDelay;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b618:	461a      	mov	r2, r3
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b61e:	1ad3      	subs	r3, r2, r3
 800b620:	60fb      	str	r3, [r7, #12]
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	b298      	uxth	r0, r3
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b630:	b29a      	uxth	r2, r3
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800b638:	b29b      	uxth	r3, r3
 800b63a:	1ad3      	subs	r3, r2, r3
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	b21a      	sxth	r2, r3
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b644:	2100      	movs	r1, #0
 800b646:	47a0      	blx	r4
 800b648:	4603      	mov	r3, r0
 800b64a:	817b      	strh	r3, [r7, #10]
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	b298      	uxth	r0, r3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b65a:	b29a      	uxth	r2, r3
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b662:	b29b      	uxth	r3, r3
 800b664:	1ad3      	subs	r3, r2, r3
 800b666:	b29b      	uxth	r3, r3
 800b668:	b21a      	sxth	r2, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b66e:	2100      	movs	r1, #0
 800b670:	47a0      	blx	r4
 800b672:	4603      	mov	r3, r0
 800b674:	813b      	strh	r3, [r7, #8]
                    T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800b67e:	b29a      	uxth	r2, r3
 800b680:	897b      	ldrh	r3, [r7, #10]
 800b682:	4413      	add	r3, r2
 800b684:	b29b      	uxth	r3, r3
 800b686:	b219      	sxth	r1, r3
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b68e:	b29a      	uxth	r2, r3
 800b690:	893b      	ldrh	r3, [r7, #8]
 800b692:	4413      	add	r3, r2
 800b694:	b29b      	uxth	r3, r3
 800b696:	b21b      	sxth	r3, r3
 800b698:	461a      	mov	r2, r3
 800b69a:	f7fe fcdf 	bl	800a05c <_ZN8touchgfx8Drawable6moveToEss>
                    moveAnimationCounter++;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	b29a      	uxth	r2, r3
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	869a      	strh	r2, [r3, #52]	; 0x34
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b6ba:	440b      	add	r3, r1
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d92d      	bls.n	800b71c <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE21nextMoveAnimationStepEv+0x14c>
                    moveAnimationRunning = false;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                    moveAnimationCounter = 0;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	869a      	strh	r2, [r3, #52]	; 0x34
                    Application::getInstance()->unregisterTimerWidget(this);
 800b6ce:	f00a f979 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	4610      	mov	r0, r2
 800b6da:	f00a f9ab 	bl	8015a34 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00d      	beq.n	800b702 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE21nextMoveAnimationStepEv+0x132>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	330c      	adds	r3, #12
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4610      	mov	r0, r2
 800b6f6:	4798      	blx	r3
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d001      	beq.n	800b702 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE21nextMoveAnimationStepEv+0x132>
 800b6fe:	2301      	movs	r3, #1
 800b700:	e000      	b.n	800b704 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE21nextMoveAnimationStepEv+0x134>
 800b702:	2300      	movs	r3, #0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d009      	beq.n	800b71c <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE21nextMoveAnimationStepEv+0x14c>
                        moveAnimationEndedCallback->execute(*this);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	3308      	adds	r3, #8
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	6879      	ldr	r1, [r7, #4]
 800b718:	4610      	mov	r0, r2
 800b71a:	4798      	blx	r3
    }
 800b71c:	bf00      	nop
 800b71e:	3714      	adds	r7, #20
 800b720:	46bd      	mov	sp, r7
 800b722:	bd90      	pop	{r4, r7, pc}

0800b724 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv>:
    void nextMoveAnimationStep()
 800b724:	b590      	push	{r4, r7, lr}
 800b726:	b085      	sub	sp, #20
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
        if (moveAnimationRunning)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b732:	2b00      	cmp	r3, #0
 800b734:	f000 809c 	beq.w	800b870 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv+0x14c>
            if (moveAnimationCounter < moveAnimationDelay)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b740:	429a      	cmp	r2, r3
 800b742:	d206      	bcs.n	800b752 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv+0x2e>
                moveAnimationCounter++;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800b748:	3301      	adds	r3, #1
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	875a      	strh	r2, [r3, #58]	; 0x3a
    }
 800b750:	e08e      	b.n	800b870 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv+0x14c>
                if (moveAnimationCounter <= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800b756:	461a      	mov	r2, r3
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b75c:	4619      	mov	r1, r3
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b762:	440b      	add	r3, r1
 800b764:	429a      	cmp	r2, r3
 800b766:	d84a      	bhi.n	800b7fe <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv+0xda>
                    uint32_t actualAnimationCounter = moveAnimationCounter - moveAnimationDelay;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800b76c:	461a      	mov	r2, r3
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b772:	1ad3      	subs	r3, r2, r3
 800b774:	60fb      	str	r3, [r7, #12]
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	b298      	uxth	r0, r3
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800b784:	b29a      	uxth	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b78c:	b29b      	uxth	r3, r3
 800b78e:	1ad3      	subs	r3, r2, r3
 800b790:	b29b      	uxth	r3, r3
 800b792:	b21a      	sxth	r2, r3
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b798:	2100      	movs	r1, #0
 800b79a:	47a0      	blx	r4
 800b79c:	4603      	mov	r3, r0
 800b79e:	817b      	strh	r3, [r7, #10]
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	b298      	uxth	r0, r3
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800b7ae:	b29a      	uxth	r2, r3
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	1ad3      	subs	r3, r2, r3
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	b21a      	sxth	r2, r3
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	47a0      	blx	r4
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	813b      	strh	r3, [r7, #8]
                    T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b7d2:	b29a      	uxth	r2, r3
 800b7d4:	897b      	ldrh	r3, [r7, #10]
 800b7d6:	4413      	add	r3, r2
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	b219      	sxth	r1, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800b7e2:	b29a      	uxth	r2, r3
 800b7e4:	893b      	ldrh	r3, [r7, #8]
 800b7e6:	4413      	add	r3, r2
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	b21b      	sxth	r3, r3
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	f7fe fc35 	bl	800a05c <_ZN8touchgfx8Drawable6moveToEss>
                    moveAnimationCounter++;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	875a      	strh	r2, [r3, #58]	; 0x3a
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800b802:	461a      	mov	r2, r3
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b808:	4619      	mov	r1, r3
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b80e:	440b      	add	r3, r1
 800b810:	429a      	cmp	r2, r3
 800b812:	d92d      	bls.n	800b870 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv+0x14c>
                    moveAnimationRunning = false;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                    moveAnimationCounter = 0;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2200      	movs	r2, #0
 800b820:	875a      	strh	r2, [r3, #58]	; 0x3a
                    Application::getInstance()->unregisterTimerWidget(this);
 800b822:	f00a f8cf 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 800b826:	4602      	mov	r2, r0
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	4619      	mov	r1, r3
 800b82c:	4610      	mov	r0, r2
 800b82e:	f00a f901 	bl	8015a34 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b836:	2b00      	cmp	r3, #0
 800b838:	d00d      	beq.n	800b856 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv+0x132>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	330c      	adds	r3, #12
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4610      	mov	r0, r2
 800b84a:	4798      	blx	r3
 800b84c:	4603      	mov	r3, r0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d001      	beq.n	800b856 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv+0x132>
 800b852:	2301      	movs	r3, #1
 800b854:	e000      	b.n	800b858 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv+0x134>
 800b856:	2300      	movs	r3, #0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d009      	beq.n	800b870 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv+0x14c>
                        moveAnimationEndedCallback->execute(*this);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	3308      	adds	r3, #8
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	6879      	ldr	r1, [r7, #4]
 800b86c:	4610      	mov	r0, r2
 800b86e:	4798      	blx	r3
    }
 800b870:	bf00      	nop
 800b872:	3714      	adds	r7, #20
 800b874:	46bd      	mov	sp, r7
 800b876:	bd90      	pop	{r4, r7, pc}

0800b878 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv>:
    void nextMoveAnimationStep()
 800b878:	b590      	push	{r4, r7, lr}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
        if (moveAnimationRunning)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b886:	2b00      	cmp	r3, #0
 800b888:	f000 809c 	beq.w	800b9c4 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv+0x14c>
            if (moveAnimationCounter < moveAnimationDelay)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b894:	429a      	cmp	r2, r3
 800b896:	d206      	bcs.n	800b8a6 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv+0x2e>
                moveAnimationCounter++;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b89c:	3301      	adds	r3, #1
 800b89e:	b29a      	uxth	r2, r3
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800b8a4:	e08e      	b.n	800b9c4 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv+0x14c>
                if (moveAnimationCounter <= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b8b6:	440b      	add	r3, r1
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d84a      	bhi.n	800b952 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv+0xda>
                    uint32_t actualAnimationCounter = moveAnimationCounter - moveAnimationDelay;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8c6:	1ad3      	subs	r3, r2, r3
 800b8c8:	60fb      	str	r3, [r7, #12]
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	b298      	uxth	r0, r3
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b8d8:	b29a      	uxth	r2, r3
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	1ad3      	subs	r3, r2, r3
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	b21a      	sxth	r2, r3
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b8ec:	2100      	movs	r1, #0
 800b8ee:	47a0      	blx	r4
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	817b      	strh	r3, [r7, #10]
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	b298      	uxth	r0, r3
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b902:	b29a      	uxth	r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	1ad3      	subs	r3, r2, r3
 800b90e:	b29b      	uxth	r3, r3
 800b910:	b21a      	sxth	r2, r3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b916:	2100      	movs	r1, #0
 800b918:	47a0      	blx	r4
 800b91a:	4603      	mov	r3, r0
 800b91c:	813b      	strh	r3, [r7, #8]
                    T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800b926:	b29a      	uxth	r2, r3
 800b928:	897b      	ldrh	r3, [r7, #10]
 800b92a:	4413      	add	r3, r2
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	b219      	sxth	r1, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b936:	b29a      	uxth	r2, r3
 800b938:	893b      	ldrh	r3, [r7, #8]
 800b93a:	4413      	add	r3, r2
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	b21b      	sxth	r3, r3
 800b940:	461a      	mov	r2, r3
 800b942:	f7fe fb8b 	bl	800a05c <_ZN8touchgfx8Drawable6moveToEss>
                    moveAnimationCounter++;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b94a:	3301      	adds	r3, #1
 800b94c:	b29a      	uxth	r2, r3
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	869a      	strh	r2, [r3, #52]	; 0x34
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b956:	461a      	mov	r2, r3
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b95c:	4619      	mov	r1, r3
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800b962:	440b      	add	r3, r1
 800b964:	429a      	cmp	r2, r3
 800b966:	d92d      	bls.n	800b9c4 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv+0x14c>
                    moveAnimationRunning = false;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2200      	movs	r2, #0
 800b96c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                    moveAnimationCounter = 0;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	869a      	strh	r2, [r3, #52]	; 0x34
                    Application::getInstance()->unregisterTimerWidget(this);
 800b976:	f00a f825 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 800b97a:	4602      	mov	r2, r0
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	4619      	mov	r1, r3
 800b980:	4610      	mov	r0, r2
 800b982:	f00a f857 	bl	8015a34 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d00d      	beq.n	800b9aa <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv+0x132>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	330c      	adds	r3, #12
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4610      	mov	r0, r2
 800b99e:	4798      	blx	r3
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d001      	beq.n	800b9aa <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv+0x132>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e000      	b.n	800b9ac <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv+0x134>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d009      	beq.n	800b9c4 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv+0x14c>
                        moveAnimationEndedCallback->execute(*this);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	3308      	adds	r3, #8
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	6879      	ldr	r1, [r7, #4]
 800b9c0:	4610      	mov	r0, r2
 800b9c2:	4798      	blx	r3
    }
 800b9c4:	bf00      	nop
 800b9c6:	3714      	adds	r7, #20
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd90      	pop	{r4, r7, pc}

0800b9cc <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv>:
    void nextMoveAnimationStep()
 800b9cc:	b590      	push	{r4, r7, lr}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
        if (moveAnimationRunning)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	f000 809c 	beq.w	800bb18 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x14c>
            if (moveAnimationCounter < moveAnimationDelay)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d206      	bcs.n	800b9fa <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x2e>
                moveAnimationCounter++;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	b29a      	uxth	r2, r3
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 800b9f8:	e08e      	b.n	800bb18 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x14c>
                if (moveAnimationCounter <= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b9fe:	461a      	mov	r2, r3
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba04:	4619      	mov	r1, r3
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ba0a:	440b      	add	r3, r1
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d84a      	bhi.n	800baa6 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0xda>
                    uint32_t actualAnimationCounter = moveAnimationCounter - moveAnimationDelay;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ba14:	461a      	mov	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba1a:	1ad3      	subs	r3, r2, r3
 800ba1c:	60fb      	str	r3, [r7, #12]
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	b298      	uxth	r0, r3
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800ba2c:	b29a      	uxth	r2, r3
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	1ad3      	subs	r3, r2, r3
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	b21a      	sxth	r2, r3
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ba40:	2100      	movs	r1, #0
 800ba42:	47a0      	blx	r4
 800ba44:	4603      	mov	r3, r0
 800ba46:	817b      	strh	r3, [r7, #10]
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	b298      	uxth	r0, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800ba56:	b29a      	uxth	r2, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	1ad3      	subs	r3, r2, r3
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	b21a      	sxth	r2, r3
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	47a0      	blx	r4
 800ba6e:	4603      	mov	r3, r0
 800ba70:	813b      	strh	r3, [r7, #8]
                    T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800ba7a:	b29a      	uxth	r2, r3
 800ba7c:	897b      	ldrh	r3, [r7, #10]
 800ba7e:	4413      	add	r3, r2
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	b219      	sxth	r1, r3
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800ba8a:	b29a      	uxth	r2, r3
 800ba8c:	893b      	ldrh	r3, [r7, #8]
 800ba8e:	4413      	add	r3, r2
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	b21b      	sxth	r3, r3
 800ba94:	461a      	mov	r2, r3
 800ba96:	f7fe fae1 	bl	800a05c <_ZN8touchgfx8Drawable6moveToEss>
                    moveAnimationCounter++;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ba9e:	3301      	adds	r3, #1
 800baa0:	b29a      	uxth	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	859a      	strh	r2, [r3, #44]	; 0x2c
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800baaa:	461a      	mov	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bab0:	4619      	mov	r1, r3
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800bab6:	440b      	add	r3, r1
 800bab8:	429a      	cmp	r2, r3
 800baba:	d92d      	bls.n	800bb18 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x14c>
                    moveAnimationRunning = false;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
                    moveAnimationCounter = 0;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	859a      	strh	r2, [r3, #44]	; 0x2c
                    Application::getInstance()->unregisterTimerWidget(this);
 800baca:	f009 ff7b 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 800bace:	4602      	mov	r2, r0
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	4619      	mov	r1, r3
 800bad4:	4610      	mov	r0, r2
 800bad6:	f009 ffad 	bl	8015a34 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00d      	beq.n	800bafe <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x132>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	330c      	adds	r3, #12
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4610      	mov	r0, r2
 800baf2:	4798      	blx	r3
 800baf4:	4603      	mov	r3, r0
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d001      	beq.n	800bafe <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x132>
 800bafa:	2301      	movs	r3, #1
 800bafc:	e000      	b.n	800bb00 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x134>
 800bafe:	2300      	movs	r3, #0
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d009      	beq.n	800bb18 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv+0x14c>
                        moveAnimationEndedCallback->execute(*this);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	3308      	adds	r3, #8
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	6879      	ldr	r1, [r7, #4]
 800bb14:	4610      	mov	r0, r2
 800bb16:	4798      	blx	r3
    }
 800bb18:	bf00      	nop
 800bb1a:	3714      	adds	r7, #20
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd90      	pop	{r4, r7, pc}

0800bb20 <_ZN8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_12MoveAnimatorINS_6ButtonEEEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	4a05      	ldr	r2, [pc, #20]	; (800bb40 <_ZN8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_12MoveAnimatorINS_6ButtonEEEvvED1Ev+0x20>)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	601a      	str	r2, [r3, #0]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4618      	mov	r0, r3
 800bb32:	f7ff fd2d 	bl	800b590 <_ZN8touchgfx15GenericCallbackIRKNS_12MoveAnimatorINS_6ButtonEEEvvED1Ev>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3708      	adds	r7, #8
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	08023e30 	.word	0x08023e30

0800bb44 <_ZN8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_12MoveAnimatorINS_6ButtonEEEvvED0Ev>:
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f7ff ffe7 	bl	800bb20 <_ZN8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_12MoveAnimatorINS_6ButtonEEEvvED1Ev>
 800bb52:	2110      	movs	r1, #16
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f015 fe7a 	bl	802184e <_ZdlPvj>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3708      	adds	r7, #8
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <_ZN8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_14AbstractButtonEvvED1Ev>:
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	4a05      	ldr	r2, [pc, #20]	; (800bb84 <_ZN8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	601a      	str	r2, [r3, #0]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7ff fceb 	bl	800b550 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3708      	adds	r7, #8
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	08023e60 	.word	0x08023e60

0800bb88 <_ZN8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f7ff ffe7 	bl	800bb64 <_ZN8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800bb96:	2110      	movs	r1, #16
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f015 fe58 	bl	802184e <_ZdlPvj>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4618      	mov	r0, r3
 800bba2:	3708      	adds	r7, #8
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <_ZN8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_12MoveAnimatorINS_6ButtonEEEvvE7executeES6_>:
     *
     * @param t1 This value will be passed as the first argument in the function call.
     *
     * @see isValid()
     */
    virtual void execute(T1 t1)
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
    {
        (pobject->*pmemfun_1)(t1);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	68d2      	ldr	r2, [r2, #12]
 800bbba:	1052      	asrs	r2, r2, #1
 800bbbc:	1898      	adds	r0, r3, r2
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	f003 0301 	and.w	r3, r3, #1
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d102      	bne.n	800bbd0 <_ZN8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_12MoveAnimatorINS_6ButtonEEEvvE7executeES6_+0x28>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	e00a      	b.n	800bbe6 <_ZN8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_12MoveAnimatorINS_6ButtonEEEvvE7executeES6_+0x3e>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	687a      	ldr	r2, [r7, #4]
 800bbd6:	68d2      	ldr	r2, [r2, #12]
 800bbd8:	1052      	asrs	r2, r2, #1
 800bbda:	4413      	add	r3, r2
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	6892      	ldr	r2, [r2, #8]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	6839      	ldr	r1, [r7, #0]
 800bbe8:	4798      	blx	r3
    }
 800bbea:	bf00      	nop
 800bbec:	3708      	adds	r7, #8
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}

0800bbf2 <_ZNK8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_12MoveAnimatorINS_6ButtonEEEvvE7isValidEv>:
     *
     *        Query if this object is valid.
     *
     * @return true if valid, false if not.
     */
    virtual bool isValid() const
 800bbf2:	b480      	push	{r7}
 800bbf4:	b083      	sub	sp, #12
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_1 != 0);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d010      	beq.n	800bc24 <_ZNK8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_12MoveAnimatorINS_6ButtonEEEvvE7isValidEv+0x32>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	689b      	ldr	r3, [r3, #8]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d107      	bne.n	800bc1a <_ZNK8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_12MoveAnimatorINS_6ButtonEEEvvE7isValidEv+0x28>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	68db      	ldr	r3, [r3, #12]
 800bc0e:	f003 0301 	and.w	r3, r3, #1
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d101      	bne.n	800bc1a <_ZNK8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_12MoveAnimatorINS_6ButtonEEEvvE7isValidEv+0x28>
 800bc16:	2301      	movs	r3, #1
 800bc18:	e000      	b.n	800bc1c <_ZNK8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_12MoveAnimatorINS_6ButtonEEEvvE7isValidEv+0x2a>
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d001      	beq.n	800bc24 <_ZNK8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_12MoveAnimatorINS_6ButtonEEEvvE7isValidEv+0x32>
 800bc20:	2301      	movs	r3, #1
 800bc22:	e000      	b.n	800bc26 <_ZNK8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_12MoveAnimatorINS_6ButtonEEEvvE7isValidEv+0x34>
 800bc24:	2300      	movs	r3, #0
    }
 800bc26:	4618      	mov	r0, r3
 800bc28:	370c      	adds	r7, #12
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr

0800bc32 <_ZN8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800bc32:	b580      	push	{r7, lr}
 800bc34:	b082      	sub	sp, #8
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	6078      	str	r0, [r7, #4]
 800bc3a:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	68d2      	ldr	r2, [r2, #12]
 800bc44:	1052      	asrs	r2, r2, #1
 800bc46:	1898      	adds	r0, r3, r2
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	f003 0301 	and.w	r3, r3, #1
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d102      	bne.n	800bc5a <_ZN8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	e00a      	b.n	800bc70 <_ZN8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	68d2      	ldr	r2, [r2, #12]
 800bc62:	1052      	asrs	r2, r2, #1
 800bc64:	4413      	add	r3, r2
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	6892      	ldr	r2, [r2, #8]
 800bc6c:	4413      	add	r3, r2
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	6839      	ldr	r1, [r7, #0]
 800bc72:	4798      	blx	r3
    }
 800bc74:	bf00      	nop
 800bc76:	3708      	adds	r7, #8
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <_ZNK8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800bc7c:	b480      	push	{r7}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d010      	beq.n	800bcae <_ZNK8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	689b      	ldr	r3, [r3, #8]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d107      	bne.n	800bca4 <_ZNK8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	f003 0301 	and.w	r3, r3, #1
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d101      	bne.n	800bca4 <_ZNK8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800bca0:	2301      	movs	r3, #1
 800bca2:	e000      	b.n	800bca6 <_ZNK8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800bca4:	2300      	movs	r3, #0
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d001      	beq.n	800bcae <_ZNK8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e000      	b.n	800bcb0 <_ZNK8touchgfx8CallbackI18ChoixCanalViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800bcae:	2300      	movs	r3, #0
    }
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	370c      	adds	r7, #12
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE15handleTickEventEv>:
    virtual void handleTickEvent()
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
        T::handleTickEvent();
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7fe f994 	bl	8009ff4 <_ZN8touchgfx8Drawable15handleTickEventEv>
        nextMoveAnimationStep();
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f7ff fd29 	bl	800b724 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21nextMoveAnimationStepEv>
    }
 800bcd2:	bf00      	nop
 800bcd4:	3708      	adds	r7, #8
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21setMoveAnimationDelayEt>:
    virtual void setMoveAnimationDelay(uint16_t delay)
 800bcda:	b480      	push	{r7}
 800bcdc:	b083      	sub	sp, #12
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
 800bce2:	460b      	mov	r3, r1
 800bce4:	807b      	strh	r3, [r7, #2]
        moveAnimationDelay = delay;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	887a      	ldrh	r2, [r7, #2]
 800bcea:	879a      	strh	r2, [r3, #60]	; 0x3c
    }
 800bcec:	bf00      	nop
 800bcee:	370c      	adds	r7, #12
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <_ZNK8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE21getMoveAnimationDelayEv>:
    virtual uint16_t getMoveAnimationDelay() const
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
        return moveAnimationDelay;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    }
 800bd04:	4618      	mov	r0, r3
 800bd06:	370c      	adds	r7, #12
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <_ZNK8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE9isRunningEv>:
    virtual bool isRunning() const
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
        return isMoveAnimationRunning();
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	3380      	adds	r3, #128	; 0x80
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	4798      	blx	r3
 800bd24:	4603      	mov	r3, r0
    }
 800bd26:	4618      	mov	r0, r3
 800bd28:	3708      	adds	r7, #8
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}

0800bd2e <_ZNK8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE22isMoveAnimationRunningEv>:
    virtual bool isMoveAnimationRunning() const
 800bd2e:	b480      	push	{r7}
 800bd30:	b083      	sub	sp, #12
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
        return moveAnimationRunning;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    }
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	370c      	adds	r7, #12
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr

0800bd48 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE15handleTickEventEv>:
    virtual void handleTickEvent()
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
        T::handleTickEvent();
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7fe f94e 	bl	8009ff4 <_ZN8touchgfx8Drawable15handleTickEventEv>
        nextMoveAnimationStep();
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f7ff fd8d 	bl	800b878 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21nextMoveAnimationStepEv>
    }
 800bd5e:	bf00      	nop
 800bd60:	3708      	adds	r7, #8
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <_ZN8touchgfx12MoveAnimatorINS_8TextAreaEE21setMoveAnimationDelayEt>:
    virtual void setMoveAnimationDelay(uint16_t delay)
 800bd66:	b480      	push	{r7}
 800bd68:	b083      	sub	sp, #12
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
 800bd6e:	460b      	mov	r3, r1
 800bd70:	807b      	strh	r3, [r7, #2]
        moveAnimationDelay = delay;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	887a      	ldrh	r2, [r7, #2]
 800bd76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
 800bd78:	bf00      	nop
 800bd7a:	370c      	adds	r7, #12
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <_ZNK8touchgfx12MoveAnimatorINS_8TextAreaEE21getMoveAnimationDelayEv>:
    virtual uint16_t getMoveAnimationDelay() const
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
        return moveAnimationDelay;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    }
 800bd90:	4618      	mov	r0, r3
 800bd92:	370c      	adds	r7, #12
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <_ZNK8touchgfx12MoveAnimatorINS_8TextAreaEE9isRunningEv>:
    virtual bool isRunning() const
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
        return isMoveAnimationRunning();
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	3380      	adds	r3, #128	; 0x80
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	4798      	blx	r3
 800bdb0:	4603      	mov	r3, r0
    }
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <_ZNK8touchgfx12MoveAnimatorINS_8TextAreaEE22isMoveAnimationRunningEv>:
    virtual bool isMoveAnimationRunning() const
 800bdba:	b480      	push	{r7}
 800bdbc:	b083      	sub	sp, #12
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
        return moveAnimationRunning;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    }
 800bdc8:	4618      	mov	r0, r3
 800bdca:	370c      	adds	r7, #12
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr

0800bdd4 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE15handleTickEventEv>:
    virtual void handleTickEvent()
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
        T::handleTickEvent();
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7fe f908 	bl	8009ff4 <_ZN8touchgfx8Drawable15handleTickEventEv>
        nextMoveAnimationStep();
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f7ff fdf1 	bl	800b9cc <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21nextMoveAnimationStepEv>
    }
 800bdea:	bf00      	nop
 800bdec:	3708      	adds	r7, #8
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}

0800bdf2 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE21setMoveAnimationDelayEt>:
    virtual void setMoveAnimationDelay(uint16_t delay)
 800bdf2:	b480      	push	{r7}
 800bdf4:	b083      	sub	sp, #12
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	6078      	str	r0, [r7, #4]
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	807b      	strh	r3, [r7, #2]
        moveAnimationDelay = delay;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	887a      	ldrh	r2, [r7, #2]
 800be02:	85da      	strh	r2, [r3, #46]	; 0x2e
    }
 800be04:	bf00      	nop
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <_ZNK8touchgfx12MoveAnimatorINS_5ImageEE21getMoveAnimationDelayEv>:
    virtual uint16_t getMoveAnimationDelay() const
 800be10:	b480      	push	{r7}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
        return moveAnimationDelay;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    }
 800be1c:	4618      	mov	r0, r3
 800be1e:	370c      	adds	r7, #12
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <_ZNK8touchgfx12MoveAnimatorINS_5ImageEE9isRunningEv>:
    virtual bool isRunning() const
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
        return isMoveAnimationRunning();
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	3370      	adds	r3, #112	; 0x70
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	4798      	blx	r3
 800be3c:	4603      	mov	r3, r0
    }
 800be3e:	4618      	mov	r0, r3
 800be40:	3708      	adds	r7, #8
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}

0800be46 <_ZNK8touchgfx12MoveAnimatorINS_5ImageEE22isMoveAnimationRunningEv>:
    virtual bool isMoveAnimationRunning() const
 800be46:	b480      	push	{r7}
 800be48:	b083      	sub	sp, #12
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	6078      	str	r0, [r7, #4]
        return moveAnimationRunning;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    }
 800be54:	4618      	mov	r0, r3
 800be56:	370c      	adds	r7, #12
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr

0800be60 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE15handleTickEventEv>:
    virtual void handleTickEvent()
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
        T::handleTickEvent();
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7fe f8c2 	bl	8009ff4 <_ZN8touchgfx8Drawable15handleTickEventEv>
        nextMoveAnimationStep();
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f7ff fbad 	bl	800b5d0 <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE21nextMoveAnimationStepEv>
    }
 800be76:	bf00      	nop
 800be78:	3708      	adds	r7, #8
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <_ZN8touchgfx12MoveAnimatorINS_6ButtonEE21setMoveAnimationDelayEt>:
    virtual void setMoveAnimationDelay(uint16_t delay)
 800be7e:	b480      	push	{r7}
 800be80:	b083      	sub	sp, #12
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
 800be86:	460b      	mov	r3, r1
 800be88:	807b      	strh	r3, [r7, #2]
        moveAnimationDelay = delay;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	887a      	ldrh	r2, [r7, #2]
 800be8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
 800be90:	bf00      	nop
 800be92:	370c      	adds	r7, #12
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <_ZNK8touchgfx12MoveAnimatorINS_6ButtonEE21getMoveAnimationDelayEv>:
    virtual uint16_t getMoveAnimationDelay() const
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
        return moveAnimationDelay;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    }
 800bea8:	4618      	mov	r0, r3
 800beaa:	370c      	adds	r7, #12
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <_ZNK8touchgfx12MoveAnimatorINS_6ButtonEE9isRunningEv>:
    virtual bool isRunning() const
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
        return isMoveAnimationRunning();
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	3374      	adds	r3, #116	; 0x74
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	4798      	blx	r3
 800bec8:	4603      	mov	r3, r0
    }
 800beca:	4618      	mov	r0, r3
 800becc:	3708      	adds	r7, #8
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <_ZNK8touchgfx12MoveAnimatorINS_6ButtonEE22isMoveAnimationRunningEv>:
    virtual bool isMoveAnimationRunning() const
 800bed2:	b480      	push	{r7}
 800bed4:	b083      	sub	sp, #12
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
        return moveAnimationRunning;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
    }
 800bee0:	4618      	mov	r0, r3
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
    {
    }
 800bef6:	bf00      	nop
 800bef8:	370c      	adds	r7, #12
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr

0800bf02 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800bf02:	b480      	push	{r7}
 800bf04:	b083      	sub	sp, #12
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
 800bf0a:	6039      	str	r1, [r7, #0]
    {
    }
 800bf0c:	bf00      	nop
 800bf0e:	370c      	adds	r7, #12
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800bf18:	b480      	push	{r7}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	6039      	str	r1, [r7, #0]
    {
    }
 800bf22:	bf00      	nop
 800bf24:	370c      	adds	r7, #12
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800bf2e:	b480      	push	{r7}
 800bf30:	b083      	sub	sp, #12
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
 800bf36:	460b      	mov	r3, r1
 800bf38:	70fb      	strb	r3, [r7, #3]
    {
    }
 800bf3a:	bf00      	nop
 800bf3c:	370c      	adds	r7, #12
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr

0800bf46 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800bf46:	b480      	push	{r7}
 800bf48:	b083      	sub	sp, #12
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
    {
    }
 800bf4e:	bf00      	nop
 800bf50:	370c      	adds	r7, #12
 800bf52:	46bd      	mov	sp, r7
 800bf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf58:	4770      	bx	lr

0800bf5a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 800bf5a:	b480      	push	{r7}
 800bf5c:	b083      	sub	sp, #12
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
    {
    }
 800bf62:	bf00      	nop
 800bf64:	370c      	adds	r7, #12
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr
	...

0800bf70 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 800bf70:	b480      	push	{r7}
 800bf72:	b083      	sub	sp, #12
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
    {
 800bf78:	4a04      	ldr	r2, [pc, #16]	; (800bf8c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	601a      	str	r2, [r3, #0]
    }
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	4618      	mov	r0, r3
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr
 800bf8c:	08024300 	.word	0x08024300

0800bf90 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
    }
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f7ff ffe9 	bl	800bf70 <_ZN8touchgfx15UIEventListenerD1Ev>
 800bf9e:	2104      	movs	r1, #4
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f015 fc54 	bl	802184e <_ZdlPvj>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3708      	adds	r7, #8
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800bfb8:	4a07      	ldr	r2, [pc, #28]	; (800bfd8 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	601a      	str	r2, [r3, #0]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	605a      	str	r2, [r3, #4]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	721a      	strb	r2, [r3, #8]
    {
    }
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	4618      	mov	r0, r3
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr
 800bfd8:	080242e0 	.word	0x080242e0

0800bfdc <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 800bfdc:	b480      	push	{r7}
 800bfde:	b083      	sub	sp, #12
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
    {
 800bfe4:	4a04      	ldr	r2, [pc, #16]	; (800bff8 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	601a      	str	r2, [r3, #0]
    }
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4618      	mov	r0, r3
 800bfee:	370c      	adds	r7, #12
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr
 800bff8:	080242e0 	.word	0x080242e0

0800bffc <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
    }
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f7ff ffe9 	bl	800bfdc <_ZN8touchgfx10TransitionD1Ev>
 800c00a:	210c      	movs	r1, #12
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f015 fc1e 	bl	802184e <_ZdlPvj>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	4618      	mov	r0, r3
 800c016:	3708      	adds	r7, #8
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 800c01c:	b480      	push	{r7}
 800c01e:	b083      	sub	sp, #12
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	bf00      	nop
 800c026:	370c      	adds	r7, #12
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr

0800c030 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 800c030:	b480      	push	{r7}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	bf00      	nop
 800c03a:	370c      	adds	r7, #12
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr

0800c044 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 800c044:	b480      	push	{r7}
 800c046:	b083      	sub	sp, #12
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	bf00      	nop
 800c04e:	370c      	adds	r7, #12
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr

0800c058 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800c058:	b480      	push	{r7}
 800c05a:	b083      	sub	sp, #12
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	683a      	ldr	r2, [r7, #0]
 800c066:	605a      	str	r2, [r3, #4]
    }
 800c068:	bf00      	nop
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	460b      	mov	r3, r1
 800c07e:	70fb      	strb	r3, [r7, #3]
    {
    }
 800c080:	bf00      	nop
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr

0800c08c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
    virtual ~GenericCallback()
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
    {
 800c094:	4a04      	ldr	r2, [pc, #16]	; (800c0a8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	601a      	str	r2, [r3, #0]
    }
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4618      	mov	r0, r3
 800c09e:	370c      	adds	r7, #12
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr
 800c0a8:	080242c8 	.word	0x080242c8

0800c0ac <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
    }
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f7ff ffe9 	bl	800c08c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800c0ba:	2104      	movs	r1, #4
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f015 fbc6 	bl	802184e <_ZdlPvj>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3708      	adds	r7, #8
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	4a05      	ldr	r2, [pc, #20]	; (800c0ec <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	601a      	str	r2, [r3, #0]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7ff ff47 	bl	800bf70 <_ZN8touchgfx15UIEventListenerD1Ev>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3708      	adds	r7, #8
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}
 800c0ec:	08026a10 	.word	0x08026a10

0800c0f0 <_ZN8touchgfx11ApplicationD0Ev>:
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f7ff ffe7 	bl	800c0cc <_ZN8touchgfx11ApplicationD1Ev>
 800c0fe:	f44f 7198 	mov.w	r1, #304	; 0x130
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f015 fba3 	bl	802184e <_ZdlPvj>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	4618      	mov	r0, r3
 800c10c:	3708      	adds	r7, #8
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
	...

0800c114 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 800c114:	b580      	push	{r7, lr}
 800c116:	b082      	sub	sp, #8
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	4618      	mov	r0, r3
 800c120:	f009 fcba 	bl	8015a98 <_ZN8touchgfx11ApplicationC1Ev>
 800c124:	4a09      	ldr	r2, [pc, #36]	; (800c14c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	601a      	str	r2, [r3, #0]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2200      	movs	r2, #0
 800c12e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2200      	movs	r2, #0
 800c136:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4a04      	ldr	r2, [pc, #16]	; (800c150 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800c13e:	6013      	str	r3, [r2, #0]
    }
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	4618      	mov	r0, r3
 800c144:	3708      	adds	r7, #8
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	0802428c 	.word	0x0802428c
 800c150:	2000b2ec 	.word	0x2000b2ec

0800c154 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	4a05      	ldr	r2, [pc, #20]	; (800c174 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	601a      	str	r2, [r3, #0]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	4618      	mov	r0, r3
 800c166:	f7ff ffb1 	bl	800c0cc <_ZN8touchgfx11ApplicationD1Ev>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	4618      	mov	r0, r3
 800c16e:	3708      	adds	r7, #8
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}
 800c174:	0802428c 	.word	0x0802428c

0800c178 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f7ff ffe7 	bl	800c154 <_ZN8touchgfx14MVPApplicationD1Ev>
 800c186:	f44f 719c 	mov.w	r1, #312	; 0x138
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f015 fb5f 	bl	802184e <_ZdlPvj>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	4618      	mov	r0, r3
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b082      	sub	sp, #8
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 f804 	bl	800c1b0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800c1a8:	bf00      	nop
 800c1aa:	3708      	adds	r7, #8
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d00f      	beq.n	800c1e2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	330c      	adds	r3, #12
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	4610      	mov	r0, r2
 800c1d6:	4798      	blx	r3
 800c1d8:	4603      	mov	r3, r0
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d001      	beq.n	800c1e2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e000      	b.n	800c1e4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d00e      	beq.n	800c206 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	3308      	adds	r3, #8
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4610      	mov	r0, r2
 800c1fc:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 800c206:	bf00      	nop
 800c208:	3708      	adds	r7, #8
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b084      	sub	sp, #16
 800c212:	af00      	add	r7, sp, #0
 800c214:	60f8      	str	r0, [r7, #12]
 800c216:	60b9      	str	r1, [r7, #8]
 800c218:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 800c21a:	f009 fbd3 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 800c21e:	4603      	mov	r3, r0
 800c220:	4618      	mov	r0, r3
 800c222:	f009 fc1d 	bl	8015a60 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d008      	beq.n	800c240 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	330c      	adds	r3, #12
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4610      	mov	r0, r2
 800c23e:	4798      	blx	r3
    }
    if (*currentTrans)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d007      	beq.n	800c258 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4610      	mov	r0, r2
 800c256:	4798      	blx	r3
    }
    if (*currentScreen)
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d008      	beq.n	800c272 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	3314      	adds	r3, #20
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4610      	mov	r0, r2
 800c270:	4798      	blx	r3
    }
    if (*currentPresenter)
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d008      	beq.n	800c28c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	3304      	adds	r3, #4
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4610      	mov	r0, r2
 800c28a:	4798      	blx	r3
    }
    if (*currentScreen)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d007      	beq.n	800c2a4 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681a      	ldr	r2, [r3, #0]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4610      	mov	r0, r2
 800c2a2:	4798      	blx	r3
    }
    if (*currentPresenter)
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d008      	beq.n	800c2be <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	3308      	adds	r3, #8
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4610      	mov	r0, r2
 800c2bc:	4798      	blx	r3
    }
}
 800c2be:	bf00      	nop
 800c2c0:	3710      	adds	r7, #16
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}

0800c2c6 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 800c2c6:	b580      	push	{r7, lr}
 800c2c8:	b084      	sub	sp, #16
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	60f8      	str	r0, [r7, #12]
 800c2ce:	60b9      	str	r1, [r7, #8]
 800c2d0:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	330c      	adds	r3, #12
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	68f8      	ldr	r0, [r7, #12]
 800c2dc:	4798      	blx	r3
    newPresenter->activate();
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	68b8      	ldr	r0, [r7, #8]
 800c2e6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800c2e8:	6879      	ldr	r1, [r7, #4]
 800c2ea:	68f8      	ldr	r0, [r7, #12]
 800c2ec:	f00a fcc2 	bl	8016c74 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	3310      	adds	r3, #16
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	4798      	blx	r3

    Application::getInstance()->draw();
 800c2fc:	f009 fb62 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 800c300:	4602      	mov	r2, r0
 800c302:	6813      	ldr	r3, [r2, #0]
 800c304:	3328      	adds	r3, #40	; 0x28
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4610      	mov	r0, r2
 800c30a:	4798      	blx	r3
}
 800c30c:	bf00      	nop
 800c30e:	3710      	adds	r7, #16
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	683a      	ldr	r2, [r7, #0]
 800c322:	601a      	str	r2, [r3, #0]
    }
 800c324:	bf00      	nop
 800c326:	370c      	adds	r7, #12
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800c330:	b580      	push	{r7, lr}
 800c332:	b082      	sub	sp, #8
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	4a08      	ldr	r2, [pc, #32]	; (800c35c <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	601a      	str	r2, [r3, #0]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800c344:	4618      	mov	r0, r3
 800c346:	f000 fcc9 	bl	800ccdc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7ff ff01 	bl	800c154 <_ZN8touchgfx14MVPApplicationD1Ev>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	4618      	mov	r0, r3
 800c356:	3708      	adds	r7, #8
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}
 800c35c:	08024238 	.word	0x08024238

0800c360 <_ZN23FrontendApplicationBaseD0Ev>:
 800c360:	b580      	push	{r7, lr}
 800c362:	b082      	sub	sp, #8
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f7ff ffe1 	bl	800c330 <_ZN23FrontendApplicationBaseD1Ev>
 800c36e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f015 fa6b 	bl	802184e <_ZdlPvj>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	4618      	mov	r0, r3
 800c37c:	3708      	adds	r7, #8
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
	...

0800c384 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	4618      	mov	r0, r3
 800c390:	f7ff fe0e 	bl	800bfb0 <_ZN8touchgfx10TransitionC1Ev>
 800c394:	4a03      	ldr	r2, [pc, #12]	; (800c3a4 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	601a      	str	r2, [r3, #0]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	4618      	mov	r0, r3
 800c39e:	3708      	adds	r7, #8
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	08024218 	.word	0x08024218

0800c3a8 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	4a05      	ldr	r2, [pc, #20]	; (800c3c8 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	601a      	str	r2, [r3, #0]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7ff fe0f 	bl	800bfdc <_ZN8touchgfx10TransitionD1Ev>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3708      	adds	r7, #8
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	08024218 	.word	0x08024218

0800c3cc <_ZN8touchgfx12NoTransitionD0Ev>:
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f7ff ffe7 	bl	800c3a8 <_ZN8touchgfx12NoTransitionD1Ev>
 800c3da:	210c      	movs	r1, #12
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f015 fa36 	bl	802184e <_ZdlPvj>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3708      	adds	r7, #8
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 800c3ec:	b480      	push	{r7}
 800c3ee:	b083      	sub	sp, #12
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	721a      	strb	r2, [r3, #8]
    }
 800c3fa:	bf00      	nop
 800c3fc:	370c      	adds	r7, #12
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr

0800c406 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800c406:	b480      	push	{r7}
 800c408:	b083      	sub	sp, #12
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	6078      	str	r0, [r7, #4]
 800c40e:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	683a      	ldr	r2, [r7, #0]
 800c414:	605a      	str	r2, [r3, #4]
    }
 800c416:	bf00      	nop
 800c418:	370c      	adds	r7, #12
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr
	...

0800c424 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/messages_screen/MessagesView.hpp>
#include <gui/messages_screen/MessagesPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	4618      	mov	r0, r3
 800c434:	f7ff fe6e 	bl	800c114 <_ZN8touchgfx14MVPApplicationC1Ev>
 800c438:	4a13      	ldr	r2, [pc, #76]	; (800c488 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	601a      	str	r2, [r3, #0]
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800c444:	4618      	mov	r0, r3
 800c446:	f000 f92b 	bl	800c6a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	68ba      	ldr	r2, [r7, #8]
 800c456:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800c45a:	f7fd fe4d 	bl	800a0f8 <_ZN8touchgfx3HAL11getInstanceEv>
 800c45e:	4602      	mov	r2, r0
 800c460:	6813      	ldr	r3, [r2, #0]
 800c462:	3308      	adds	r3, #8
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2100      	movs	r1, #0
 800c468:	4610      	mov	r0, r2
 800c46a:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800c46c:	2000      	movs	r0, #0
 800c46e:	f002 ff19 	bl	800f2a4 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800c472:	f7fd fe4d 	bl	800a110 <_ZN8touchgfx3HAL3lcdEv>
 800c476:	4603      	mov	r3, r0
 800c478:	4618      	mov	r0, r3
 800c47a:	f00e fef6 	bl	801b26a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	4618      	mov	r0, r3
 800c482:	3710      	adds	r7, #16
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	08024238 	.word	0x08024238

0800c48c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	4618      	mov	r0, r3
 800c49a:	370c      	adds	r7, #12
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr

0800c4a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	683a      	ldr	r2, [r7, #0]
 800c4b2:	4611      	mov	r1, r2
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f7ff ffe9 	bl	800c48c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	685a      	ldr	r2, [r3, #4]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	605a      	str	r2, [r3, #4]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	683a      	ldr	r2, [r7, #0]
 800c4c6:	3308      	adds	r3, #8
 800c4c8:	3208      	adds	r2, #8
 800c4ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c4ce:	e883 0003 	stmia.w	r3, {r0, r1}
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3708      	adds	r7, #8
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <_ZN23FrontendApplicationBase32gotoChoixCanalScreenNoTransitionEv>:
 */

// ChoixCanal

void FrontendApplicationBase::gotoChoixCanalScreenNoTransition()
{
 800c4dc:	b590      	push	{r4, r7, lr}
 800c4de:	b089      	sub	sp, #36	; 0x24
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoChoixCanalScreenNoTransitionImpl);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800c4ea:	4b10      	ldr	r3, [pc, #64]	; (800c52c <_ZN23FrontendApplicationBase32gotoChoixCanalScreenNoTransitionEv+0x50>)
 800c4ec:	61bb      	str	r3, [r7, #24]
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	61fb      	str	r3, [r7, #28]
 800c4f2:	f107 0008 	add.w	r0, r7, #8
 800c4f6:	f107 0318 	add.w	r3, r7, #24
 800c4fa:	cb0c      	ldmia	r3, {r2, r3}
 800c4fc:	6879      	ldr	r1, [r7, #4]
 800c4fe:	f000 f8eb 	bl	800c6d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800c502:	f107 0308 	add.w	r3, r7, #8
 800c506:	4619      	mov	r1, r3
 800c508:	4620      	mov	r0, r4
 800c50a:	f7ff ffcb 	bl	800c4a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800c50e:	f107 0308 	add.w	r3, r7, #8
 800c512:	4618      	mov	r0, r3
 800c514:	f000 fbe2 	bl	800ccdc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800c524:	bf00      	nop
 800c526:	3724      	adds	r7, #36	; 0x24
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd90      	pop	{r4, r7, pc}
 800c52c:	0800c531 	.word	0x0800c531

0800c530 <_ZN23FrontendApplicationBase36gotoChoixCanalScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoChoixCanalScreenNoTransitionImpl()
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af02      	add	r7, sp, #8
 800c536:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<ChoixCanalView, ChoixCanalPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800c544:	461a      	mov	r2, r3
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800c54c:	9300      	str	r3, [sp, #0]
 800c54e:	4b04      	ldr	r3, [pc, #16]	; (800c560 <_ZN23FrontendApplicationBase36gotoChoixCanalScreenNoTransitionImplEv+0x30>)
 800c550:	4804      	ldr	r0, [pc, #16]	; (800c564 <_ZN23FrontendApplicationBase36gotoChoixCanalScreenNoTransitionImplEv+0x34>)
 800c552:	f000 f8e1 	bl	800c718 <_ZN8touchgfx14makeTransitionI14ChoixCanalView19ChoixCanalPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800c556:	bf00      	nop
 800c558:	3708      	adds	r7, #8
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	2000b2e0 	.word	0x2000b2e0
 800c564:	2000b2dc 	.word	0x2000b2dc

0800c568 <_ZN23FrontendApplicationBase37gotoRotationVoilierScreenNoTransitionEv>:

// RotationVoilier

void FrontendApplicationBase::gotoRotationVoilierScreenNoTransition()
{
 800c568:	b590      	push	{r4, r7, lr}
 800c56a:	b089      	sub	sp, #36	; 0x24
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoRotationVoilierScreenNoTransitionImpl);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800c576:	4b10      	ldr	r3, [pc, #64]	; (800c5b8 <_ZN23FrontendApplicationBase37gotoRotationVoilierScreenNoTransitionEv+0x50>)
 800c578:	61bb      	str	r3, [r7, #24]
 800c57a:	2300      	movs	r3, #0
 800c57c:	61fb      	str	r3, [r7, #28]
 800c57e:	f107 0008 	add.w	r0, r7, #8
 800c582:	f107 0318 	add.w	r3, r7, #24
 800c586:	cb0c      	ldmia	r3, {r2, r3}
 800c588:	6879      	ldr	r1, [r7, #4]
 800c58a:	f000 f8a5 	bl	800c6d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800c58e:	f107 0308 	add.w	r3, r7, #8
 800c592:	4619      	mov	r1, r3
 800c594:	4620      	mov	r0, r4
 800c596:	f7ff ff85 	bl	800c4a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800c59a:	f107 0308 	add.w	r3, r7, #8
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f000 fb9c 	bl	800ccdc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800c5b0:	bf00      	nop
 800c5b2:	3724      	adds	r7, #36	; 0x24
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd90      	pop	{r4, r7, pc}
 800c5b8:	0800c5bd 	.word	0x0800c5bd

0800c5bc <_ZN23FrontendApplicationBase41gotoRotationVoilierScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoRotationVoilierScreenNoTransitionImpl()
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af02      	add	r7, sp, #8
 800c5c2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<RotationVoilierView, RotationVoilierPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800c5d8:	9300      	str	r3, [sp, #0]
 800c5da:	4b04      	ldr	r3, [pc, #16]	; (800c5ec <_ZN23FrontendApplicationBase41gotoRotationVoilierScreenNoTransitionImplEv+0x30>)
 800c5dc:	4804      	ldr	r0, [pc, #16]	; (800c5f0 <_ZN23FrontendApplicationBase41gotoRotationVoilierScreenNoTransitionImplEv+0x34>)
 800c5de:	f000 f955 	bl	800c88c <_ZN8touchgfx14makeTransitionI19RotationVoilierView24RotationVoilierPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800c5e2:	bf00      	nop
 800c5e4:	3708      	adds	r7, #8
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	2000b2e0 	.word	0x2000b2e0
 800c5f0:	2000b2dc 	.word	0x2000b2dc

0800c5f4 <_ZN23FrontendApplicationBase30gotoMessagesScreenNoTransitionEv>:

// Messages

void FrontendApplicationBase::gotoMessagesScreenNoTransition()
{
 800c5f4:	b590      	push	{r4, r7, lr}
 800c5f6:	b089      	sub	sp, #36	; 0x24
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMessagesScreenNoTransitionImpl);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800c602:	4b10      	ldr	r3, [pc, #64]	; (800c644 <_ZN23FrontendApplicationBase30gotoMessagesScreenNoTransitionEv+0x50>)
 800c604:	61bb      	str	r3, [r7, #24]
 800c606:	2300      	movs	r3, #0
 800c608:	61fb      	str	r3, [r7, #28]
 800c60a:	f107 0008 	add.w	r0, r7, #8
 800c60e:	f107 0318 	add.w	r3, r7, #24
 800c612:	cb0c      	ldmia	r3, {r2, r3}
 800c614:	6879      	ldr	r1, [r7, #4]
 800c616:	f000 f85f 	bl	800c6d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800c61a:	f107 0308 	add.w	r3, r7, #8
 800c61e:	4619      	mov	r1, r3
 800c620:	4620      	mov	r0, r4
 800c622:	f7ff ff3f 	bl	800c4a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800c626:	f107 0308 	add.w	r3, r7, #8
 800c62a:	4618      	mov	r0, r3
 800c62c:	f000 fb56 	bl	800ccdc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800c63c:	bf00      	nop
 800c63e:	3724      	adds	r7, #36	; 0x24
 800c640:	46bd      	mov	sp, r7
 800c642:	bd90      	pop	{r4, r7, pc}
 800c644:	0800c649 	.word	0x0800c649

0800c648 <_ZN23FrontendApplicationBase34gotoMessagesScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMessagesScreenNoTransitionImpl()
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af02      	add	r7, sp, #8
 800c64e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MessagesView, MessagesPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800c65c:	461a      	mov	r2, r3
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800c664:	9300      	str	r3, [sp, #0]
 800c666:	4b04      	ldr	r3, [pc, #16]	; (800c678 <_ZN23FrontendApplicationBase34gotoMessagesScreenNoTransitionImplEv+0x30>)
 800c668:	4804      	ldr	r0, [pc, #16]	; (800c67c <_ZN23FrontendApplicationBase34gotoMessagesScreenNoTransitionImplEv+0x34>)
 800c66a:	f000 f9cb 	bl	800ca04 <_ZN8touchgfx14makeTransitionI12MessagesView17MessagesPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800c66e:	bf00      	nop
 800c670:	3708      	adds	r7, #8
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	2000b2e0 	.word	0x2000b2e0
 800c67c:	2000b2dc 	.word	0x2000b2dc

0800c680 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800c680:	b480      	push	{r7}
 800c682:	b083      	sub	sp, #12
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	4a04      	ldr	r2, [pc, #16]	; (800c69c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	601a      	str	r2, [r3, #0]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	4618      	mov	r0, r3
 800c692:	370c      	adds	r7, #12
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr
 800c69c:	080242c8 	.word	0x080242c8

0800c6a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7ff ffe8 	bl	800c680 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800c6b0:	4a08      	ldr	r2, [pc, #32]	; (800c6d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	601a      	str	r2, [r3, #0]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	605a      	str	r2, [r3, #4]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	609a      	str	r2, [r3, #8]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	60da      	str	r2, [r3, #12]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3708      	adds	r7, #8
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	08024274 	.word	0x08024274

0800c6d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	4639      	mov	r1, r7
 800c6e4:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7ff ffc8 	bl	800c680 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800c6f0:	4a08      	ldr	r2, [pc, #32]	; (800c714 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	68ba      	ldr	r2, [r7, #8]
 800c6fa:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	3308      	adds	r3, #8
 800c700:	463a      	mov	r2, r7
 800c702:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c706:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	4618      	mov	r0, r3
 800c70e:	3710      	adds	r7, #16
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	08024274 	.word	0x08024274

0800c718 <_ZN8touchgfx14makeTransitionI14ChoixCanalView19ChoixCanalPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800c718:	b590      	push	{r4, r7, lr}
 800c71a:	b089      	sub	sp, #36	; 0x24
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	607a      	str	r2, [r7, #4]
 800c724:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	689a      	ldr	r2, [r3, #8]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	689b      	ldr	r3, [r3, #8]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	3320      	adds	r3, #32
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4610      	mov	r0, r2
 800c736:	4798      	blx	r3
 800c738:	4603      	mov	r3, r0
 800c73a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c73e:	d205      	bcs.n	800c74c <_ZN8touchgfx14makeTransitionI14ChoixCanalView19ChoixCanalPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800c740:	4b4d      	ldr	r3, [pc, #308]	; (800c878 <_ZN8touchgfx14makeTransitionI14ChoixCanalView19ChoixCanalPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 800c742:	4a4e      	ldr	r2, [pc, #312]	; (800c87c <_ZN8touchgfx14makeTransitionI14ChoixCanalView19ChoixCanalPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800c744:	21c2      	movs	r1, #194	; 0xc2
 800c746:	484e      	ldr	r0, [pc, #312]	; (800c880 <_ZN8touchgfx14makeTransitionI14ChoixCanalView19ChoixCanalPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800c748:	f015 fdfa 	bl	8022340 <__assert_func>
 800c74c:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	685a      	ldr	r2, [r3, #4]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	3320      	adds	r3, #32
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4610      	mov	r0, r2
 800c75e:	4798      	blx	r3
 800c760:	4603      	mov	r3, r0
 800c762:	2b0f      	cmp	r3, #15
 800c764:	d805      	bhi.n	800c772 <_ZN8touchgfx14makeTransitionI14ChoixCanalView19ChoixCanalPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800c766:	4b47      	ldr	r3, [pc, #284]	; (800c884 <_ZN8touchgfx14makeTransitionI14ChoixCanalView19ChoixCanalPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800c768:	4a44      	ldr	r2, [pc, #272]	; (800c87c <_ZN8touchgfx14makeTransitionI14ChoixCanalView19ChoixCanalPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800c76a:	21c3      	movs	r1, #195	; 0xc3
 800c76c:	4844      	ldr	r0, [pc, #272]	; (800c880 <_ZN8touchgfx14makeTransitionI14ChoixCanalView19ChoixCanalPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800c76e:	f015 fde7 	bl	8022340 <__assert_func>
 800c772:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	68da      	ldr	r2, [r3, #12]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	68db      	ldr	r3, [r3, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	3320      	adds	r3, #32
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	4610      	mov	r0, r2
 800c784:	4798      	blx	r3
 800c786:	4603      	mov	r3, r0
 800c788:	2b0b      	cmp	r3, #11
 800c78a:	d805      	bhi.n	800c798 <_ZN8touchgfx14makeTransitionI14ChoixCanalView19ChoixCanalPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 800c78c:	4b3e      	ldr	r3, [pc, #248]	; (800c888 <_ZN8touchgfx14makeTransitionI14ChoixCanalView19ChoixCanalPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800c78e:	4a3b      	ldr	r2, [pc, #236]	; (800c87c <_ZN8touchgfx14makeTransitionI14ChoixCanalView19ChoixCanalPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800c790:	21c4      	movs	r1, #196	; 0xc4
 800c792:	483b      	ldr	r0, [pc, #236]	; (800c880 <_ZN8touchgfx14makeTransitionI14ChoixCanalView19ChoixCanalPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800c794:	f015 fdd4 	bl	8022340 <__assert_func>
 800c798:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800c79a:	683a      	ldr	r2, [r7, #0]
 800c79c:	68b9      	ldr	r1, [r7, #8]
 800c79e:	68f8      	ldr	r0, [r7, #12]
 800c7a0:	f7ff fd35 	bl	800c20e <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	68db      	ldr	r3, [r3, #12]
 800c7a8:	2100      	movs	r1, #0
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f000 f9e6 	bl	800cb7c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	200c      	movs	r0, #12
 800c7b6:	f7f5 ff21 	bl	80025fc <_ZnwjPv>
 800c7ba:	4604      	mov	r4, r0
 800c7bc:	2c00      	cmp	r4, #0
 800c7be:	d004      	beq.n	800c7ca <_ZN8touchgfx14makeTransitionI14ChoixCanalView19ChoixCanalPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	f7ff fddf 	bl	800c384 <_ZN8touchgfx12NoTransitionC1Ev>
 800c7c6:	4623      	mov	r3, r4
 800c7c8:	e000      	b.n	800c7cc <_ZN8touchgfx14makeTransitionI14ChoixCanalView19ChoixCanalPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800c7ca:	4623      	mov	r3, r4
 800c7cc:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	689b      	ldr	r3, [r3, #8]
 800c7d2:	2100      	movs	r1, #0
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f000 f9e4 	bl	800cba2 <_ZN8touchgfx17AbstractPartition2atI14ChoixCanalViewEERT_t>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	4619      	mov	r1, r3
 800c7de:	f44f 7020 	mov.w	r0, #640	; 0x280
 800c7e2:	f7f5 ff0b 	bl	80025fc <_ZnwjPv>
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	2c00      	cmp	r4, #0
 800c7ea:	d004      	beq.n	800c7f6 <_ZN8touchgfx14makeTransitionI14ChoixCanalView19ChoixCanalPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	f002 ff0f 	bl	800f610 <_ZN14ChoixCanalViewC1Ev>
 800c7f2:	4623      	mov	r3, r4
 800c7f4:	e000      	b.n	800c7f8 <_ZN8touchgfx14makeTransitionI14ChoixCanalView19ChoixCanalPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 800c7f6:	4623      	mov	r3, r4
 800c7f8:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	2100      	movs	r1, #0
 800c800:	4618      	mov	r0, r3
 800c802:	f000 f9e1 	bl	800cbc8 <_ZN8touchgfx17AbstractPartition2atI19ChoixCanalPresenterEERT_t>
 800c806:	4603      	mov	r3, r0
 800c808:	4619      	mov	r1, r3
 800c80a:	2010      	movs	r0, #16
 800c80c:	f7f5 fef6 	bl	80025fc <_ZnwjPv>
 800c810:	4604      	mov	r4, r0
 800c812:	2c00      	cmp	r4, #0
 800c814:	d005      	beq.n	800c822 <_ZN8touchgfx14makeTransitionI14ChoixCanalView19ChoixCanalPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 800c816:	69b9      	ldr	r1, [r7, #24]
 800c818:	4620      	mov	r0, r4
 800c81a:	f002 fea1 	bl	800f560 <_ZN19ChoixCanalPresenterC1ER14ChoixCanalView>
 800c81e:	4623      	mov	r3, r4
 800c820:	e000      	b.n	800c824 <_ZN8touchgfx14makeTransitionI14ChoixCanalView19ChoixCanalPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 800c822:	4623      	mov	r3, r4
 800c824:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	69fa      	ldr	r2, [r7, #28]
 800c82a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	697a      	ldr	r2, [r7, #20]
 800c830:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	69ba      	ldr	r2, [r7, #24]
 800c836:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d002      	beq.n	800c844 <_ZN8touchgfx14makeTransitionI14ChoixCanalView19ChoixCanalPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	3304      	adds	r3, #4
 800c842:	e000      	b.n	800c846 <_ZN8touchgfx14makeTransitionI14ChoixCanalView19ChoixCanalPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 800c844:	2300      	movs	r3, #0
 800c846:	4619      	mov	r1, r3
 800c848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c84a:	f7ff fd63 	bl	800c314 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	3304      	adds	r3, #4
 800c852:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c854:	4618      	mov	r0, r3
 800c856:	f7ff fdd6 	bl	800c406 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800c85a:	69bb      	ldr	r3, [r7, #24]
 800c85c:	6979      	ldr	r1, [r7, #20]
 800c85e:	4618      	mov	r0, r3
 800c860:	f000 f9c5 	bl	800cbee <_ZN8touchgfx4ViewI19ChoixCanalPresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800c864:	69fa      	ldr	r2, [r7, #28]
 800c866:	6979      	ldr	r1, [r7, #20]
 800c868:	69b8      	ldr	r0, [r7, #24]
 800c86a:	f7ff fd2c 	bl	800c2c6 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 800c86e:	697b      	ldr	r3, [r7, #20]
}
 800c870:	4618      	mov	r0, r3
 800c872:	3724      	adds	r7, #36	; 0x24
 800c874:	46bd      	mov	sp, r7
 800c876:	bd90      	pop	{r4, r7, pc}
 800c878:	080235d0 	.word	0x080235d0
 800c87c:	08024320 	.word	0x08024320
 800c880:	08023660 	.word	0x08023660
 800c884:	080236a4 	.word	0x080236a4
 800c888:	08023748 	.word	0x08023748

0800c88c <_ZN8touchgfx14makeTransitionI19RotationVoilierView24RotationVoilierPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800c88c:	b590      	push	{r4, r7, lr}
 800c88e:	b089      	sub	sp, #36	; 0x24
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
 800c898:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	689a      	ldr	r2, [r3, #8]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	689b      	ldr	r3, [r3, #8]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	3320      	adds	r3, #32
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4610      	mov	r0, r2
 800c8aa:	4798      	blx	r3
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	f242 0343 	movw	r3, #8259	; 0x2043
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d805      	bhi.n	800c8c2 <_ZN8touchgfx14makeTransitionI19RotationVoilierView24RotationVoilierPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800c8b6:	4b4e      	ldr	r3, [pc, #312]	; (800c9f0 <_ZN8touchgfx14makeTransitionI19RotationVoilierView24RotationVoilierPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800c8b8:	4a4e      	ldr	r2, [pc, #312]	; (800c9f4 <_ZN8touchgfx14makeTransitionI19RotationVoilierView24RotationVoilierPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800c8ba:	21c2      	movs	r1, #194	; 0xc2
 800c8bc:	484e      	ldr	r0, [pc, #312]	; (800c9f8 <_ZN8touchgfx14makeTransitionI19RotationVoilierView24RotationVoilierPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800c8be:	f015 fd3f 	bl	8022340 <__assert_func>
 800c8c2:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	685a      	ldr	r2, [r3, #4]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	3320      	adds	r3, #32
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4610      	mov	r0, r2
 800c8d4:	4798      	blx	r3
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b0f      	cmp	r3, #15
 800c8da:	d805      	bhi.n	800c8e8 <_ZN8touchgfx14makeTransitionI19RotationVoilierView24RotationVoilierPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800c8dc:	4b47      	ldr	r3, [pc, #284]	; (800c9fc <_ZN8touchgfx14makeTransitionI19RotationVoilierView24RotationVoilierPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800c8de:	4a45      	ldr	r2, [pc, #276]	; (800c9f4 <_ZN8touchgfx14makeTransitionI19RotationVoilierView24RotationVoilierPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800c8e0:	21c3      	movs	r1, #195	; 0xc3
 800c8e2:	4845      	ldr	r0, [pc, #276]	; (800c9f8 <_ZN8touchgfx14makeTransitionI19RotationVoilierView24RotationVoilierPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800c8e4:	f015 fd2c 	bl	8022340 <__assert_func>
 800c8e8:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	68da      	ldr	r2, [r3, #12]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	3320      	adds	r3, #32
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4610      	mov	r0, r2
 800c8fa:	4798      	blx	r3
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	2b0b      	cmp	r3, #11
 800c900:	d805      	bhi.n	800c90e <_ZN8touchgfx14makeTransitionI19RotationVoilierView24RotationVoilierPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800c902:	4b3f      	ldr	r3, [pc, #252]	; (800ca00 <_ZN8touchgfx14makeTransitionI19RotationVoilierView24RotationVoilierPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 800c904:	4a3b      	ldr	r2, [pc, #236]	; (800c9f4 <_ZN8touchgfx14makeTransitionI19RotationVoilierView24RotationVoilierPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800c906:	21c4      	movs	r1, #196	; 0xc4
 800c908:	483b      	ldr	r0, [pc, #236]	; (800c9f8 <_ZN8touchgfx14makeTransitionI19RotationVoilierView24RotationVoilierPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800c90a:	f015 fd19 	bl	8022340 <__assert_func>
 800c90e:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800c910:	683a      	ldr	r2, [r7, #0]
 800c912:	68b9      	ldr	r1, [r7, #8]
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f7ff fc7a 	bl	800c20e <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	2100      	movs	r1, #0
 800c920:	4618      	mov	r0, r3
 800c922:	f000 f92b 	bl	800cb7c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800c926:	4603      	mov	r3, r0
 800c928:	4619      	mov	r1, r3
 800c92a:	200c      	movs	r0, #12
 800c92c:	f7f5 fe66 	bl	80025fc <_ZnwjPv>
 800c930:	4604      	mov	r4, r0
 800c932:	2c00      	cmp	r4, #0
 800c934:	d004      	beq.n	800c940 <_ZN8touchgfx14makeTransitionI19RotationVoilierView24RotationVoilierPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800c936:	4620      	mov	r0, r4
 800c938:	f7ff fd24 	bl	800c384 <_ZN8touchgfx12NoTransitionC1Ev>
 800c93c:	4623      	mov	r3, r4
 800c93e:	e000      	b.n	800c942 <_ZN8touchgfx14makeTransitionI19RotationVoilierView24RotationVoilierPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 800c940:	4623      	mov	r3, r4
 800c942:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	689b      	ldr	r3, [r3, #8]
 800c948:	2100      	movs	r1, #0
 800c94a:	4618      	mov	r0, r3
 800c94c:	f000 f95d 	bl	800cc0a <_ZN8touchgfx17AbstractPartition2atI19RotationVoilierViewEERT_t>
 800c950:	4603      	mov	r3, r0
 800c952:	4619      	mov	r1, r3
 800c954:	f242 0044 	movw	r0, #8260	; 0x2044
 800c958:	f7f5 fe50 	bl	80025fc <_ZnwjPv>
 800c95c:	4604      	mov	r4, r0
 800c95e:	2c00      	cmp	r4, #0
 800c960:	d004      	beq.n	800c96c <_ZN8touchgfx14makeTransitionI19RotationVoilierView24RotationVoilierPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 800c962:	4620      	mov	r0, r4
 800c964:	f003 f936 	bl	800fbd4 <_ZN19RotationVoilierViewC1Ev>
 800c968:	4623      	mov	r3, r4
 800c96a:	e000      	b.n	800c96e <_ZN8touchgfx14makeTransitionI19RotationVoilierView24RotationVoilierPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 800c96c:	4623      	mov	r3, r4
 800c96e:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	2100      	movs	r1, #0
 800c976:	4618      	mov	r0, r3
 800c978:	f000 f95a 	bl	800cc30 <_ZN8touchgfx17AbstractPartition2atI24RotationVoilierPresenterEERT_t>
 800c97c:	4603      	mov	r3, r0
 800c97e:	4619      	mov	r1, r3
 800c980:	2010      	movs	r0, #16
 800c982:	f7f5 fe3b 	bl	80025fc <_ZnwjPv>
 800c986:	4604      	mov	r4, r0
 800c988:	2c00      	cmp	r4, #0
 800c98a:	d005      	beq.n	800c998 <_ZN8touchgfx14makeTransitionI19RotationVoilierView24RotationVoilierPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 800c98c:	69b9      	ldr	r1, [r7, #24]
 800c98e:	4620      	mov	r0, r4
 800c990:	f003 f8aa 	bl	800fae8 <_ZN24RotationVoilierPresenterC1ER19RotationVoilierView>
 800c994:	4623      	mov	r3, r4
 800c996:	e000      	b.n	800c99a <_ZN8touchgfx14makeTransitionI19RotationVoilierView24RotationVoilierPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 800c998:	4623      	mov	r3, r4
 800c99a:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	69fa      	ldr	r2, [r7, #28]
 800c9a0:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	697a      	ldr	r2, [r7, #20]
 800c9a6:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	69ba      	ldr	r2, [r7, #24]
 800c9ac:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d002      	beq.n	800c9ba <_ZN8touchgfx14makeTransitionI19RotationVoilierView24RotationVoilierPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	3304      	adds	r3, #4
 800c9b8:	e000      	b.n	800c9bc <_ZN8touchgfx14makeTransitionI19RotationVoilierView24RotationVoilierPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	4619      	mov	r1, r3
 800c9be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9c0:	f7ff fca8 	bl	800c314 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	3304      	adds	r3, #4
 800c9c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7ff fd1b 	bl	800c406 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	6979      	ldr	r1, [r7, #20]
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f000 f93e 	bl	800cc56 <_ZN8touchgfx4ViewI24RotationVoilierPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800c9da:	69fa      	ldr	r2, [r7, #28]
 800c9dc:	6979      	ldr	r1, [r7, #20]
 800c9de:	69b8      	ldr	r0, [r7, #24]
 800c9e0:	f7ff fc71 	bl	800c2c6 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 800c9e4:	697b      	ldr	r3, [r7, #20]
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3724      	adds	r7, #36	; 0x24
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd90      	pop	{r4, r7, pc}
 800c9ee:	bf00      	nop
 800c9f0:	080235d0 	.word	0x080235d0
 800c9f4:	0802442c 	.word	0x0802442c
 800c9f8:	08023660 	.word	0x08023660
 800c9fc:	080236a4 	.word	0x080236a4
 800ca00:	08023748 	.word	0x08023748

0800ca04 <_ZN8touchgfx14makeTransitionI12MessagesView17MessagesPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ca04:	b590      	push	{r4, r7, lr}
 800ca06:	b089      	sub	sp, #36	; 0x24
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	607a      	str	r2, [r7, #4]
 800ca10:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	689a      	ldr	r2, [r3, #8]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	689b      	ldr	r3, [r3, #8]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	3320      	adds	r3, #32
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4610      	mov	r0, r2
 800ca22:	4798      	blx	r3
 800ca24:	4602      	mov	r2, r0
 800ca26:	f641 1383 	movw	r3, #6531	; 0x1983
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d805      	bhi.n	800ca3a <_ZN8touchgfx14makeTransitionI12MessagesView17MessagesPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800ca2e:	4b4e      	ldr	r3, [pc, #312]	; (800cb68 <_ZN8touchgfx14makeTransitionI12MessagesView17MessagesPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800ca30:	4a4e      	ldr	r2, [pc, #312]	; (800cb6c <_ZN8touchgfx14makeTransitionI12MessagesView17MessagesPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800ca32:	21c2      	movs	r1, #194	; 0xc2
 800ca34:	484e      	ldr	r0, [pc, #312]	; (800cb70 <_ZN8touchgfx14makeTransitionI12MessagesView17MessagesPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800ca36:	f015 fc83 	bl	8022340 <__assert_func>
 800ca3a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	685a      	ldr	r2, [r3, #4]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	685b      	ldr	r3, [r3, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	3320      	adds	r3, #32
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4610      	mov	r0, r2
 800ca4c:	4798      	blx	r3
 800ca4e:	4603      	mov	r3, r0
 800ca50:	2b0f      	cmp	r3, #15
 800ca52:	d805      	bhi.n	800ca60 <_ZN8touchgfx14makeTransitionI12MessagesView17MessagesPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800ca54:	4b47      	ldr	r3, [pc, #284]	; (800cb74 <_ZN8touchgfx14makeTransitionI12MessagesView17MessagesPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 800ca56:	4a45      	ldr	r2, [pc, #276]	; (800cb6c <_ZN8touchgfx14makeTransitionI12MessagesView17MessagesPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800ca58:	21c3      	movs	r1, #195	; 0xc3
 800ca5a:	4845      	ldr	r0, [pc, #276]	; (800cb70 <_ZN8touchgfx14makeTransitionI12MessagesView17MessagesPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800ca5c:	f015 fc70 	bl	8022340 <__assert_func>
 800ca60:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	68da      	ldr	r2, [r3, #12]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	68db      	ldr	r3, [r3, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	3320      	adds	r3, #32
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4610      	mov	r0, r2
 800ca72:	4798      	blx	r3
 800ca74:	4603      	mov	r3, r0
 800ca76:	2b0b      	cmp	r3, #11
 800ca78:	d805      	bhi.n	800ca86 <_ZN8touchgfx14makeTransitionI12MessagesView17MessagesPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800ca7a:	4b3f      	ldr	r3, [pc, #252]	; (800cb78 <_ZN8touchgfx14makeTransitionI12MessagesView17MessagesPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 800ca7c:	4a3b      	ldr	r2, [pc, #236]	; (800cb6c <_ZN8touchgfx14makeTransitionI12MessagesView17MessagesPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800ca7e:	21c4      	movs	r1, #196	; 0xc4
 800ca80:	483b      	ldr	r0, [pc, #236]	; (800cb70 <_ZN8touchgfx14makeTransitionI12MessagesView17MessagesPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800ca82:	f015 fc5d 	bl	8022340 <__assert_func>
 800ca86:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800ca88:	683a      	ldr	r2, [r7, #0]
 800ca8a:	68b9      	ldr	r1, [r7, #8]
 800ca8c:	68f8      	ldr	r0, [r7, #12]
 800ca8e:	f7ff fbbe 	bl	800c20e <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	68db      	ldr	r3, [r3, #12]
 800ca96:	2100      	movs	r1, #0
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f000 f86f 	bl	800cb7c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	4619      	mov	r1, r3
 800caa2:	200c      	movs	r0, #12
 800caa4:	f7f5 fdaa 	bl	80025fc <_ZnwjPv>
 800caa8:	4604      	mov	r4, r0
 800caaa:	2c00      	cmp	r4, #0
 800caac:	d004      	beq.n	800cab8 <_ZN8touchgfx14makeTransitionI12MessagesView17MessagesPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 800caae:	4620      	mov	r0, r4
 800cab0:	f7ff fc68 	bl	800c384 <_ZN8touchgfx12NoTransitionC1Ev>
 800cab4:	4623      	mov	r3, r4
 800cab6:	e000      	b.n	800caba <_ZN8touchgfx14makeTransitionI12MessagesView17MessagesPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 800cab8:	4623      	mov	r3, r4
 800caba:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	689b      	ldr	r3, [r3, #8]
 800cac0:	2100      	movs	r1, #0
 800cac2:	4618      	mov	r0, r3
 800cac4:	f000 f8d5 	bl	800cc72 <_ZN8touchgfx17AbstractPartition2atI12MessagesViewEERT_t>
 800cac8:	4603      	mov	r3, r0
 800caca:	4619      	mov	r1, r3
 800cacc:	f641 1084 	movw	r0, #6532	; 0x1984
 800cad0:	f7f5 fd94 	bl	80025fc <_ZnwjPv>
 800cad4:	4604      	mov	r4, r0
 800cad6:	2c00      	cmp	r4, #0
 800cad8:	d004      	beq.n	800cae4 <_ZN8touchgfx14makeTransitionI12MessagesView17MessagesPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 800cada:	4620      	mov	r0, r4
 800cadc:	f002 fefc 	bl	800f8d8 <_ZN12MessagesViewC1Ev>
 800cae0:	4623      	mov	r3, r4
 800cae2:	e000      	b.n	800cae6 <_ZN8touchgfx14makeTransitionI12MessagesView17MessagesPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 800cae4:	4623      	mov	r3, r4
 800cae6:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	2100      	movs	r1, #0
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 f8d2 	bl	800cc98 <_ZN8touchgfx17AbstractPartition2atI17MessagesPresenterEERT_t>
 800caf4:	4603      	mov	r3, r0
 800caf6:	4619      	mov	r1, r3
 800caf8:	2010      	movs	r0, #16
 800cafa:	f7f5 fd7f 	bl	80025fc <_ZnwjPv>
 800cafe:	4604      	mov	r4, r0
 800cb00:	2c00      	cmp	r4, #0
 800cb02:	d005      	beq.n	800cb10 <_ZN8touchgfx14makeTransitionI12MessagesView17MessagesPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 800cb04:	69b9      	ldr	r1, [r7, #24]
 800cb06:	4620      	mov	r0, r4
 800cb08:	f002 fe8e 	bl	800f828 <_ZN17MessagesPresenterC1ER12MessagesView>
 800cb0c:	4623      	mov	r3, r4
 800cb0e:	e000      	b.n	800cb12 <_ZN8touchgfx14makeTransitionI12MessagesView17MessagesPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 800cb10:	4623      	mov	r3, r4
 800cb12:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	69fa      	ldr	r2, [r7, #28]
 800cb18:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	697a      	ldr	r2, [r7, #20]
 800cb1e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	69ba      	ldr	r2, [r7, #24]
 800cb24:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d002      	beq.n	800cb32 <_ZN8touchgfx14makeTransitionI12MessagesView17MessagesPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	3304      	adds	r3, #4
 800cb30:	e000      	b.n	800cb34 <_ZN8touchgfx14makeTransitionI12MessagesView17MessagesPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 800cb32:	2300      	movs	r3, #0
 800cb34:	4619      	mov	r1, r3
 800cb36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb38:	f7ff fbec 	bl	800c314 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	3304      	adds	r3, #4
 800cb40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7ff fc5f 	bl	800c406 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	6979      	ldr	r1, [r7, #20]
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f000 f8b6 	bl	800ccbe <_ZN8touchgfx4ViewI17MessagesPresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800cb52:	69fa      	ldr	r2, [r7, #28]
 800cb54:	6979      	ldr	r1, [r7, #20]
 800cb56:	69b8      	ldr	r0, [r7, #24]
 800cb58:	f7ff fbb5 	bl	800c2c6 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 800cb5c:	697b      	ldr	r3, [r7, #20]
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3724      	adds	r7, #36	; 0x24
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd90      	pop	{r4, r7, pc}
 800cb66:	bf00      	nop
 800cb68:	080235d0 	.word	0x080235d0
 800cb6c:	08024540 	.word	0x08024540
 800cb70:	08023660 	.word	0x08023660
 800cb74:	080236a4 	.word	0x080236a4
 800cb78:	08023748 	.word	0x08023748

0800cb7c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b082      	sub	sp, #8
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	460b      	mov	r3, r1
 800cb86:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	3324      	adds	r3, #36	; 0x24
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	887a      	ldrh	r2, [r7, #2]
 800cb92:	4611      	mov	r1, r2
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	4798      	blx	r3
 800cb98:	4603      	mov	r3, r0
    }
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3708      	adds	r7, #8
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <_ZN8touchgfx17AbstractPartition2atI14ChoixCanalViewEERT_t>:
    T& at(const uint16_t index)
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b082      	sub	sp, #8
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
 800cbaa:	460b      	mov	r3, r1
 800cbac:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	3324      	adds	r3, #36	; 0x24
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	887a      	ldrh	r2, [r7, #2]
 800cbb8:	4611      	mov	r1, r2
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	4798      	blx	r3
 800cbbe:	4603      	mov	r3, r0
    }
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3708      	adds	r7, #8
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <_ZN8touchgfx17AbstractPartition2atI19ChoixCanalPresenterEERT_t>:
    T& at(const uint16_t index)
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	3324      	adds	r3, #36	; 0x24
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	887a      	ldrh	r2, [r7, #2]
 800cbde:	4611      	mov	r1, r2
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	4798      	blx	r3
 800cbe4:	4603      	mov	r3, r0
    }
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3708      	adds	r7, #8
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <_ZN8touchgfx4ViewI19ChoixCanalPresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800cbee:	b480      	push	{r7}
 800cbf0:	b083      	sub	sp, #12
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
 800cbf6:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	683a      	ldr	r2, [r7, #0]
 800cbfc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800cbfe:	bf00      	nop
 800cc00:	370c      	adds	r7, #12
 800cc02:	46bd      	mov	sp, r7
 800cc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc08:	4770      	bx	lr

0800cc0a <_ZN8touchgfx17AbstractPartition2atI19RotationVoilierViewEERT_t>:
    T& at(const uint16_t index)
 800cc0a:	b580      	push	{r7, lr}
 800cc0c:	b082      	sub	sp, #8
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	6078      	str	r0, [r7, #4]
 800cc12:	460b      	mov	r3, r1
 800cc14:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	3324      	adds	r3, #36	; 0x24
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	887a      	ldrh	r2, [r7, #2]
 800cc20:	4611      	mov	r1, r2
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	4798      	blx	r3
 800cc26:	4603      	mov	r3, r0
    }
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3708      	adds	r7, #8
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <_ZN8touchgfx17AbstractPartition2atI24RotationVoilierPresenterEERT_t>:
    T& at(const uint16_t index)
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b082      	sub	sp, #8
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	460b      	mov	r3, r1
 800cc3a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	3324      	adds	r3, #36	; 0x24
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	887a      	ldrh	r2, [r7, #2]
 800cc46:	4611      	mov	r1, r2
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	4798      	blx	r3
 800cc4c:	4603      	mov	r3, r0
    }
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3708      	adds	r7, #8
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <_ZN8touchgfx4ViewI24RotationVoilierPresenterE4bindERS1_>:
    void bind(T& presenter)
 800cc56:	b480      	push	{r7}
 800cc58:	b083      	sub	sp, #12
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6078      	str	r0, [r7, #4]
 800cc5e:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	683a      	ldr	r2, [r7, #0]
 800cc64:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800cc66:	bf00      	nop
 800cc68:	370c      	adds	r7, #12
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr

0800cc72 <_ZN8touchgfx17AbstractPartition2atI12MessagesViewEERT_t>:
    T& at(const uint16_t index)
 800cc72:	b580      	push	{r7, lr}
 800cc74:	b082      	sub	sp, #8
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	6078      	str	r0, [r7, #4]
 800cc7a:	460b      	mov	r3, r1
 800cc7c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	3324      	adds	r3, #36	; 0x24
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	887a      	ldrh	r2, [r7, #2]
 800cc88:	4611      	mov	r1, r2
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	4798      	blx	r3
 800cc8e:	4603      	mov	r3, r0
    }
 800cc90:	4618      	mov	r0, r3
 800cc92:	3708      	adds	r7, #8
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <_ZN8touchgfx17AbstractPartition2atI17MessagesPresenterEERT_t>:
    T& at(const uint16_t index)
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	460b      	mov	r3, r1
 800cca2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	3324      	adds	r3, #36	; 0x24
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	887a      	ldrh	r2, [r7, #2]
 800ccae:	4611      	mov	r1, r2
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	4798      	blx	r3
 800ccb4:	4603      	mov	r3, r0
    }
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3708      	adds	r7, #8
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}

0800ccbe <_ZN8touchgfx4ViewI17MessagesPresenterE4bindERS1_>:
    void bind(T& presenter)
 800ccbe:	b480      	push	{r7}
 800ccc0:	b083      	sub	sp, #12
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
 800ccc6:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	683a      	ldr	r2, [r7, #0]
 800cccc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800ccce:	bf00      	nop
 800ccd0:	370c      	adds	r7, #12
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr
	...

0800ccdc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	4a05      	ldr	r2, [pc, #20]	; (800ccfc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	601a      	str	r2, [r3, #0]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7ff f9cd 	bl	800c08c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3708      	adds	r7, #8
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}
 800ccfc:	08024274 	.word	0x08024274

0800cd00 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f7ff ffe7 	bl	800ccdc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800cd0e:	2110      	movs	r1, #16
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f014 fd9c 	bl	802184e <_ZdlPvj>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3708      	adds	r7, #8
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	685b      	ldr	r3, [r3, #4]
 800cd2c:	687a      	ldr	r2, [r7, #4]
 800cd2e:	68d2      	ldr	r2, [r2, #12]
 800cd30:	1052      	asrs	r2, r2, #1
 800cd32:	1899      	adds	r1, r3, r2
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	68db      	ldr	r3, [r3, #12]
 800cd38:	f003 0301 	and.w	r3, r3, #1
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d102      	bne.n	800cd46 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	689b      	ldr	r3, [r3, #8]
 800cd44:	e00a      	b.n	800cd5c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	687a      	ldr	r2, [r7, #4]
 800cd4c:	68d2      	ldr	r2, [r2, #12]
 800cd4e:	1052      	asrs	r2, r2, #1
 800cd50:	4413      	add	r3, r2
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	6892      	ldr	r2, [r2, #8]
 800cd58:	4413      	add	r3, r2
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4608      	mov	r0, r1
 800cd5e:	4798      	blx	r3
    }
 800cd60:	bf00      	nop
 800cd62:	3708      	adds	r7, #8
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800cd68:	b480      	push	{r7}
 800cd6a:	b083      	sub	sp, #12
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d010      	beq.n	800cd9a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	689b      	ldr	r3, [r3, #8]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d107      	bne.n	800cd90 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	68db      	ldr	r3, [r3, #12]
 800cd84:	f003 0301 	and.w	r3, r3, #1
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d101      	bne.n	800cd90 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	e000      	b.n	800cd92 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800cd90:	2300      	movs	r3, #0
 800cd92:	2b01      	cmp	r3, #1
 800cd94:	d001      	beq.n	800cd9a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800cd96:	2301      	movs	r3, #1
 800cd98:	e000      	b.n	800cd9c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800cd9a:	2300      	movs	r3, #0
    }
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	370c      	adds	r7, #12
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr

0800cda8 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>:
     * @note Changing this does not automatically yield a redraw.
     * @note The value will be overwritten by calling.
     *
     * @param x The new x value, relative to the background bitmap. A negative value is allowed.
     */
    void setIconX(int16_t x)
 800cda8:	b480      	push	{r7}
 800cdaa:	b083      	sub	sp, #12
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	807b      	strh	r3, [r7, #2]
    {
        iconX = x;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	887a      	ldrh	r2, [r7, #2]
 800cdb8:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 800cdba:	bf00      	nop
 800cdbc:	370c      	adds	r7, #12
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc4:	4770      	bx	lr

0800cdc6 <_ZN8touchgfx14ButtonWithIcon8setIconYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the background bitmap. A negative value is allowed.
     */
    void setIconY(int16_t y)
 800cdc6:	b480      	push	{r7}
 800cdc8:	b083      	sub	sp, #12
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
 800cdce:	460b      	mov	r3, r1
 800cdd0:	807b      	strh	r3, [r7, #2]
    {
        iconY = y;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	887a      	ldrh	r2, [r7, #2]
 800cdd6:	875a      	strh	r2, [r3, #58]	; 0x3a
    }
 800cdd8:	bf00      	nop
 800cdda:	370c      	adds	r7, #12
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr

0800cde4 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the background bitmap. A negative value is allowed.
     * @param y The new y value, relative to the background bitmap. A negative value is allowed.
     */
    void setIconXY(int16_t x, int16_t y)
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b082      	sub	sp, #8
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	460b      	mov	r3, r1
 800cdee:	807b      	strh	r3, [r7, #2]
 800cdf0:	4613      	mov	r3, r2
 800cdf2:	803b      	strh	r3, [r7, #0]
    {
        setIconX(x);
 800cdf4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f7ff ffd4 	bl	800cda8 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>
        setIconY(y);
 800ce00:	f9b7 3000 	ldrsh.w	r3, [r7]
 800ce04:	4619      	mov	r1, r3
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f7ff ffdd 	bl	800cdc6 <_ZN8touchgfx14ButtonWithIcon8setIconYEs>
    }
 800ce0c:	bf00      	nop
 800ce0e:	3708      	adds	r7, #8
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <_ZN8touchgfx4ViewI17MessagesPresenterED1Ev>:
class View : public Screen
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	4a05      	ldr	r2, [pc, #20]	; (800ce34 <_ZN8touchgfx4ViewI17MessagesPresenterED1Ev+0x20>)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	601a      	str	r2, [r3, #0]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7fd f9b1 	bl	800a18c <_ZN8touchgfx6ScreenD1Ev>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3708      	adds	r7, #8
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	08024758 	.word	0x08024758

0800ce38 <_ZN8touchgfx4ViewI17MessagesPresenterED0Ev>:
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f7ff ffe7 	bl	800ce14 <_ZN8touchgfx4ViewI17MessagesPresenterED1Ev>
 800ce46:	2140      	movs	r1, #64	; 0x40
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f014 fd00 	bl	802184e <_ZdlPvj>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4618      	mov	r0, r3
 800ce52:	3708      	adds	r7, #8
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <_ZN16MessagesViewBaseD1Ev>:

class MessagesViewBase : public touchgfx::View<MessagesPresenter>
{
public:
    MessagesViewBase();
    virtual ~MessagesViewBase() {}
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	4a1e      	ldr	r2, [pc, #120]	; (800cedc <_ZN16MessagesViewBaseD1Ev+0x84>)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	601a      	str	r2, [r3, #0]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f603 53bc 	addw	r3, r3, #3516	; 0xdbc
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f000 fcfd 	bl	800d86c <_ZN8touchgfx8CallbackI16MessagesViewBaseRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvED1Ev>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f603 53ac 	addw	r3, r3, #3500	; 0xdac
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f000 fd19 	bl	800d8b0 <_ZN8touchgfx8CallbackI16MessagesViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800ce84:	4618      	mov	r0, r3
 800ce86:	f000 fb03 	bl	800d490 <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEED1Ev>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800ce90:	4618      	mov	r0, r3
 800ce92:	f7fe f8ab 	bl	800afec <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEED1Ev>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7fe f83f 	bl	800af20 <_ZN8touchgfx12MoveAnimatorINS_5ImageEED1Ev>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	33d4      	adds	r3, #212	; 0xd4
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7fe f818 	bl	800aedc <_ZN8touchgfx5ImageD1Ev>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	33a8      	adds	r3, #168	; 0xa8
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f7fe f813 	bl	800aedc <_ZN8touchgfx5ImageD1Ev>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	336c      	adds	r3, #108	; 0x6c
 800ceba:	4618      	mov	r0, r3
 800cebc:	f000 fac6 	bl	800d44c <_ZN8touchgfx14ButtonWithIconD1Ev>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	3340      	adds	r3, #64	; 0x40
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7fe f809 	bl	800aedc <_ZN8touchgfx5ImageD1Ev>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	4618      	mov	r0, r3
 800cece:	f7ff ffa1 	bl	800ce14 <_ZN8touchgfx4ViewI17MessagesPresenterED1Ev>
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	4618      	mov	r0, r3
 800ced6:	3708      	adds	r7, #8
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}
 800cedc:	08024650 	.word	0x08024650

0800cee0 <_ZN16MessagesViewBaseD0Ev>:
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f7ff ffb5 	bl	800ce58 <_ZN16MessagesViewBaseD1Ev>
 800ceee:	f640 51cc 	movw	r1, #3532	; 0xdcc
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f014 fcab 	bl	802184e <_ZdlPvj>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	4618      	mov	r0, r3
 800cefc:	3708      	adds	r7, #8
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}

0800cf02 <_ZN16MessagesViewBase21buttonMessagesClickedEv>:
    virtual void afterTransition();

    /*
     * Virtual Action Handlers
     */
    virtual void buttonMessagesClicked()
 800cf02:	b480      	push	{r7}
 800cf04:	b083      	sub	sp, #12
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Messages
    }
 800cf0a:	bf00      	nop
 800cf0c:	370c      	adds	r7, #12
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr

0800cf16 <_ZN16MessagesViewBase17buttonWipeClickedEv>:

    virtual void buttonWipeClicked()
 800cf16:	b480      	push	{r7}
 800cf18:	b083      	sub	sp, #12
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Messages
    }
 800cf1e:	bf00      	nop
 800cf20:	370c      	adds	r7, #12
 800cf22:	46bd      	mov	sp, r7
 800cf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf28:	4770      	bx	lr

0800cf2a <_ZN16MessagesViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 800cf2a:	b580      	push	{r7, lr}
 800cf2c:	b082      	sub	sp, #8
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800cf32:	f008 fd47 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 800cf36:	4603      	mov	r3, r0
    }
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3708      	adds	r7, #8
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <_ZN16MessagesViewBaseC1Ev>:
#include <gui_generated/messages_screen/MessagesViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

MessagesViewBase::MessagesViewBase() :
 800cf40:	b590      	push	{r4, r7, lr}
 800cf42:	b099      	sub	sp, #100	; 0x64
 800cf44:	af02      	add	r7, sp, #8
 800cf46:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &MessagesViewBase::buttonCallbackHandler),
    interactionExitButtonWipeEndedCallback(this, &MessagesViewBase::interactionExitButtonWipeEndedCallbackHandler)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f000 fac2 	bl	800d4d4 <_ZN8touchgfx4ViewI17MessagesPresenterEC1Ev>
 800cf50:	4ada      	ldr	r2, [pc, #872]	; (800d2bc <_ZN16MessagesViewBaseC1Ev+0x37c>)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	601a      	str	r2, [r3, #0]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800cf5c:	f107 0308 	add.w	r3, r7, #8
 800cf60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7fc ff1b 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800cf6a:	f107 0308 	add.w	r3, r7, #8
 800cf6e:	4619      	mov	r1, r3
 800cf70:	4620      	mov	r0, r4
 800cf72:	f7fd f9cb 	bl	800a30c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	336c      	adds	r3, #108	; 0x6c
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f007 fc0a 	bl	8014794 <_ZN8touchgfx14ButtonWithIconC1Ev>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 800cf86:	f107 030c 	add.w	r3, r7, #12
 800cf8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7fc ff06 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800cf94:	f107 030c 	add.w	r3, r7, #12
 800cf98:	4619      	mov	r1, r3
 800cf9a:	4620      	mov	r0, r4
 800cf9c:	f7fd f9b6 	bl	800a30c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 800cfa6:	f107 0310 	add.w	r3, r7, #16
 800cfaa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7fc fef6 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800cfb4:	f107 0310 	add.w	r3, r7, #16
 800cfb8:	4619      	mov	r1, r3
 800cfba:	4620      	mov	r0, r4
 800cfbc:	f7fd f9a6 	bl	800a30c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7fe f868 	bl	800b09c <_ZN8touchgfx12MoveAnimatorINS_5ImageEEC1Ev>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7fe f8ac 	bl	800b130 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEEC1Ev>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f000 fa8e 	bl	800d500 <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEEC1Ev>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f603 50ac 	addw	r0, r3, #3500	; 0xdac
 800cfea:	4bb5      	ldr	r3, [pc, #724]	; (800d2c0 <_ZN16MessagesViewBaseC1Ev+0x380>)
 800cfec:	617b      	str	r3, [r7, #20]
 800cfee:	2300      	movs	r3, #0
 800cff0:	61bb      	str	r3, [r7, #24]
 800cff2:	f107 0314 	add.w	r3, r7, #20
 800cff6:	cb0c      	ldmia	r3, {r2, r3}
 800cff8:	6879      	ldr	r1, [r7, #4]
 800cffa:	f000 faa1 	bl	800d540 <_ZN8touchgfx8CallbackI16MessagesViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f603 50bc 	addw	r0, r3, #3516	; 0xdbc
 800d004:	4baf      	ldr	r3, [pc, #700]	; (800d2c4 <_ZN16MessagesViewBaseC1Ev+0x384>)
 800d006:	61fb      	str	r3, [r7, #28]
 800d008:	2300      	movs	r3, #0
 800d00a:	623b      	str	r3, [r7, #32]
 800d00c:	f107 031c 	add.w	r3, r7, #28
 800d010:	cb0c      	ldmia	r3, {r2, r3}
 800d012:	6879      	ldr	r1, [r7, #4]
 800d014:	f000 fac4 	bl	800d5a0 <_ZN8touchgfx8CallbackI16MessagesViewBaseRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvEC1EPS1_MS1_FvS6_E>
{

    imageBg.setXY(0, 0);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	3340      	adds	r3, #64	; 0x40
 800d01c:	2200      	movs	r2, #0
 800d01e:	2100      	movs	r1, #0
 800d020:	4618      	mov	r0, r3
 800d022:	f7fc ff80 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
    imageBg.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800d02c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d030:	2100      	movs	r1, #0
 800d032:	4618      	mov	r0, r3
 800d034:	f7fc feb4 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800d038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d03c:	4619      	mov	r1, r3
 800d03e:	4620      	mov	r0, r4
 800d040:	f007 fbcc 	bl	80147dc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    buttonRotation.setXY(0, 0);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	336c      	adds	r3, #108	; 0x6c
 800d048:	2200      	movs	r2, #0
 800d04a:	2100      	movs	r1, #0
 800d04c:	4618      	mov	r0, r3
 800d04e:	f7fc ff6a 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
    buttonRotation.setBitmaps(touchgfx::Bitmap(BITMAP_SIDE_BUTTON_RELEASED_ID), touchgfx::Bitmap(BITMAP_SIDE_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_SAILBOAT_ORANGE_ID), touchgfx::Bitmap(BITMAP_SAILBOAT_ORANGE_LIGHT_ID));
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800d058:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d05c:	211b      	movs	r1, #27
 800d05e:	4618      	mov	r0, r3
 800d060:	f7fc fe9e 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800d064:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d068:	211a      	movs	r1, #26
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fc fe98 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800d070:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d074:	2117      	movs	r1, #23
 800d076:	4618      	mov	r0, r3
 800d078:	f7fc fe92 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800d07c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d080:	2118      	movs	r1, #24
 800d082:	4618      	mov	r0, r3
 800d084:	f7fc fe8c 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800d088:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800d08c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800d090:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d094:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d098:	9300      	str	r3, [sp, #0]
 800d09a:	4603      	mov	r3, r0
 800d09c:	4620      	mov	r0, r4
 800d09e:	f007 fad7 	bl	8014650 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    buttonRotation.setIconXY(9, 52);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	336c      	adds	r3, #108	; 0x6c
 800d0a6:	2234      	movs	r2, #52	; 0x34
 800d0a8:	2109      	movs	r1, #9
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7ff fe9a 	bl	800cde4 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    buttonRotation.setAction(buttonCallback);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f603 53ac 	addw	r3, r3, #3500	; 0xdac
 800d0bc:	4619      	mov	r1, r3
 800d0be:	4610      	mov	r0, r2
 800d0c0:	f7fd f964 	bl	800a38c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    imageMessages.setXY(0, 136);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	33a8      	adds	r3, #168	; 0xa8
 800d0c8:	2288      	movs	r2, #136	; 0x88
 800d0ca:	2100      	movs	r1, #0
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f7fc ff2a 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
    imageMessages.setBitmap(touchgfx::Bitmap(BITMAP_SIDE_BUTTON_IDLE_ID));
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 800d0d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d0dc:	2119      	movs	r1, #25
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7fc fe5e 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800d0e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	f007 fb76 	bl	80147dc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    imageMessagesIcon.setXY(9, 188);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	33d4      	adds	r3, #212	; 0xd4
 800d0f4:	22bc      	movs	r2, #188	; 0xbc
 800d0f6:	2109      	movs	r1, #9
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7fc ff14 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
    imageMessagesIcon.setBitmap(touchgfx::Bitmap(BITMAP_MESSAGES_ORANGE_LIGHT_ID));
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 800d104:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d108:	2114      	movs	r1, #20
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fc fe48 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800d110:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d114:	4619      	mov	r1, r3
 800d116:	4620      	mov	r0, r4
 800d118:	f007 fb60 	bl	80147dc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    imageMessageBoxBg.setXY(500, 14);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d122:	220e      	movs	r2, #14
 800d124:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d128:	4618      	mov	r0, r3
 800d12a:	f7fc fefc 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
    imageMessageBoxBg.setBitmap(touchgfx::Bitmap(BITMAP_COUNTER_BOX_MESSAGES_ID));
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800d134:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d138:	210c      	movs	r1, #12
 800d13a:	4618      	mov	r0, r3
 800d13c:	f7fc fe30 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800d140:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d144:	4619      	mov	r1, r3
 800d146:	4620      	mov	r0, r4
 800d148:	f007 fb48 	bl	80147dc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textMessages.setPosition(500, 14, 360, 200);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f503 70a4 	add.w	r0, r3, #328	; 0x148
 800d152:	23c8      	movs	r3, #200	; 0xc8
 800d154:	9300      	str	r3, [sp, #0]
 800d156:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800d15a:	220e      	movs	r2, #14
 800d15c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d160:	f7fc fe7c 	bl	8009e5c <_ZN8touchgfx8Drawable11setPositionEssss>
    textMessages.setColor(touchgfx::Color::getColorFrom24BitRGB(249, 186, 109));
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f503 74a4 	add.w	r4, r3, #328	; 0x148
 800d16a:	226d      	movs	r2, #109	; 0x6d
 800d16c:	21ba      	movs	r1, #186	; 0xba
 800d16e:	20f9      	movs	r0, #249	; 0xf9
 800d170:	f7fd fbee 	bl	800a950 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800d174:	4603      	mov	r3, r0
 800d176:	4619      	mov	r1, r3
 800d178:	4620      	mov	r0, r4
 800d17a:	f7fd fa08 	bl	800a58e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textMessages.setLinespacing(0);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800d184:	2100      	movs	r1, #0
 800d186:	4618      	mov	r0, r3
 800d188:	f7fd fa54 	bl	800a634 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textMessagesBuffer[0] = 0;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2200      	movs	r2, #0
 800d190:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
    textMessages.setWildcard(textMessagesBuffer);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f503 72a4 	add.w	r2, r3, #328	; 0x148
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	4610      	mov	r0, r2
 800d1a4:	f7fd faf1 	bl	800a78a <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textMessages.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f503 74a4 	add.w	r4, r3, #328	; 0x148
 800d1ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d1b2:	2105      	movs	r1, #5
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7fd f96d 	bl	800a494 <_ZN8touchgfx9TypedTextC1Et>
 800d1ba:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 800d1be:	4620      	mov	r0, r4
 800d1c0:	f007 f932 	bl	8014428 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    buttonWipe.setXY(500, 214);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800d1ca:	22d6      	movs	r2, #214	; 0xd6
 800d1cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7fc fea8 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWipe.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_EMPTY_RELEASED_ID), touchgfx::Bitmap(BITMAP_BUTTON_EMPTY_PRESSED_ID), touchgfx::Bitmap(BITMAP_ICONS8_BROOM_ORANGE_ID), touchgfx::Bitmap(BITMAP_ICONS8_BROOM_ORANGE_LIGHT_ID));
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f503 74ce 	add.w	r4, r3, #412	; 0x19c
 800d1dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d1e0:	2107      	movs	r1, #7
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7fc fddc 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800d1e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d1ec:	2106      	movs	r1, #6
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f7fc fdd6 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800d1f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d1f8:	210d      	movs	r1, #13
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7fc fdd0 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800d200:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d204:	210e      	movs	r1, #14
 800d206:	4618      	mov	r0, r3
 800d208:	f7fc fdca 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800d20c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800d210:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800d214:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800d218:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d21c:	9300      	str	r3, [sp, #0]
 800d21e:	4603      	mov	r3, r0
 800d220:	4620      	mov	r0, r4
 800d222:	f007 fa15 	bl	8014650 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    buttonWipe.setIconXY(49, 12);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800d22c:	220c      	movs	r2, #12
 800d22e:	2131      	movs	r1, #49	; 0x31
 800d230:	4618      	mov	r0, r3
 800d232:	f7ff fdd7 	bl	800cde4 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    buttonWipe.setAction(buttonCallback);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f503 72ce 	add.w	r2, r3, #412	; 0x19c
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f603 53ac 	addw	r3, r3, #3500	; 0xdac
 800d242:	4619      	mov	r1, r3
 800d244:	4610      	mov	r0, r2
 800d246:	f7fd f8a1 	bl	800a38c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(imageBg);
 800d24a:	687a      	ldr	r2, [r7, #4]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	3340      	adds	r3, #64	; 0x40
 800d250:	4619      	mov	r1, r3
 800d252:	4610      	mov	r0, r2
 800d254:	f7fc fff2 	bl	800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonRotation);
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	336c      	adds	r3, #108	; 0x6c
 800d25e:	4619      	mov	r1, r3
 800d260:	4610      	mov	r0, r2
 800d262:	f7fc ffeb 	bl	800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(imageMessages);
 800d266:	687a      	ldr	r2, [r7, #4]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	33a8      	adds	r3, #168	; 0xa8
 800d26c:	4619      	mov	r1, r3
 800d26e:	4610      	mov	r0, r2
 800d270:	f7fc ffe4 	bl	800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(imageMessagesIcon);
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	33d4      	adds	r3, #212	; 0xd4
 800d27a:	4619      	mov	r1, r3
 800d27c:	4610      	mov	r0, r2
 800d27e:	f7fc ffdd 	bl	800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(imageMessageBoxBg);
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d28a:	4619      	mov	r1, r3
 800d28c:	4610      	mov	r0, r2
 800d28e:	f7fc ffd5 	bl	800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textMessages);
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800d29a:	4619      	mov	r1, r3
 800d29c:	4610      	mov	r0, r2
 800d29e:	f7fc ffcd 	bl	800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWipe);
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	4610      	mov	r0, r2
 800d2ae:	f7fc ffc5 	bl	800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	375c      	adds	r7, #92	; 0x5c
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd90      	pop	{r4, r7, pc}
 800d2bc:	08024650 	.word	0x08024650
 800d2c0:	0800d381 	.word	0x0800d381
 800d2c4:	0800d361 	.word	0x0800d361

0800d2c8 <_ZN16MessagesViewBase11setupScreenEv>:

void MessagesViewBase::setupScreen()
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b083      	sub	sp, #12
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]

}
 800d2d0:	bf00      	nop
 800d2d2:	370c      	adds	r7, #12
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr

0800d2dc <_ZN16MessagesViewBase15afterTransitionEv>:

//Called when the screen is done with transition/load
void MessagesViewBase::afterTransition()
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b084      	sub	sp, #16
 800d2e0:	af02      	add	r7, sp, #8
 800d2e2:	6078      	str	r0, [r7, #4]
    //InteractionEnterMessageBoxBg
    //When screen is entered move imageMessageBoxBg
    //Move imageMessageBoxBg to x:81, y:14 with LinearIn easing in 250 ms (15 Ticks)
    imageMessageBoxBg.clearMoveAnimationEndedAction();
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7fe f8d1 	bl	800b492 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE29clearMoveAnimationEndedActionEv>
    imageMessageBoxBg.startMoveAnimation(81, 14, 15, touchgfx::EasingEquations::linearEaseIn, touchgfx::EasingEquations::linearEaseIn);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f503 7080 	add.w	r0, r3, #256	; 0x100
 800d2f6:	4b18      	ldr	r3, [pc, #96]	; (800d358 <_ZN16MessagesViewBase15afterTransitionEv+0x7c>)
 800d2f8:	9301      	str	r3, [sp, #4]
 800d2fa:	4b17      	ldr	r3, [pc, #92]	; (800d358 <_ZN16MessagesViewBase15afterTransitionEv+0x7c>)
 800d2fc:	9300      	str	r3, [sp, #0]
 800d2fe:	230f      	movs	r3, #15
 800d300:	220e      	movs	r2, #14
 800d302:	2151      	movs	r1, #81	; 0x51
 800d304:	f7fe f8d2 	bl	800b4ac <_ZN8touchgfx12MoveAnimatorINS_5ImageEE18startMoveAnimationEsstPFstsstES4_>

    //InteractionTextMessage
    //When screen is entered move textMessages
    //Move textMessages to x:81, y:14 with LinearIn easing in 250 ms (15 Ticks)
    textMessages.clearMoveAnimationEndedAction();
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800d30e:	4618      	mov	r0, r3
 800d310:	f7fd ffee 	bl	800b2f0 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE29clearMoveAnimationEndedActionEv>
    textMessages.startMoveAnimation(81, 14, 15, touchgfx::EasingEquations::linearEaseIn, touchgfx::EasingEquations::linearEaseIn);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f503 70a4 	add.w	r0, r3, #328	; 0x148
 800d31a:	4b0f      	ldr	r3, [pc, #60]	; (800d358 <_ZN16MessagesViewBase15afterTransitionEv+0x7c>)
 800d31c:	9301      	str	r3, [sp, #4]
 800d31e:	4b0e      	ldr	r3, [pc, #56]	; (800d358 <_ZN16MessagesViewBase15afterTransitionEv+0x7c>)
 800d320:	9300      	str	r3, [sp, #0]
 800d322:	230f      	movs	r3, #15
 800d324:	220e      	movs	r2, #14
 800d326:	2151      	movs	r1, #81	; 0x51
 800d328:	f7fd ffef 	bl	800b30a <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE18startMoveAnimationEsstPFstsstES4_>

    //InteractionEnterButtonWipe
    //When screen is entered move buttonWipe
    //Move buttonWipe to x:196, y:214 with LinearOut easing in 250 ms (15 Ticks)
    buttonWipe.clearMoveAnimationEndedAction();
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800d332:	4618      	mov	r0, r3
 800d334:	f000 f954 	bl	800d5e0 <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE29clearMoveAnimationEndedActionEv>
    buttonWipe.startMoveAnimation(196, 214, 15, touchgfx::EasingEquations::linearEaseOut, touchgfx::EasingEquations::linearEaseOut);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f503 70ce 	add.w	r0, r3, #412	; 0x19c
 800d33e:	4b07      	ldr	r3, [pc, #28]	; (800d35c <_ZN16MessagesViewBase15afterTransitionEv+0x80>)
 800d340:	9301      	str	r3, [sp, #4]
 800d342:	4b06      	ldr	r3, [pc, #24]	; (800d35c <_ZN16MessagesViewBase15afterTransitionEv+0x80>)
 800d344:	9300      	str	r3, [sp, #0]
 800d346:	230f      	movs	r3, #15
 800d348:	22d6      	movs	r2, #214	; 0xd6
 800d34a:	21c4      	movs	r1, #196	; 0xc4
 800d34c:	f000 f955 	bl	800d5fa <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE18startMoveAnimationEsstPFstsstES4_>
}
 800d350:	bf00      	nop
 800d352:	3708      	adds	r7, #8
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}
 800d358:	08016ce7 	.word	0x08016ce7
 800d35c:	08016ceb 	.word	0x08016ceb

0800d360 <_ZN16MessagesViewBase45interactionExitButtonWipeEndedCallbackHandlerERKN8touchgfx12MoveAnimatorINS0_14ButtonWithIconEEE>:

void MessagesViewBase::interactionExitButtonWipeEndedCallbackHandler(const touchgfx::MoveAnimator<touchgfx::ButtonWithIcon>& comp)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	6039      	str	r1, [r7, #0]
    //InteractionChangeScreenRotation
    //When InteractionExitButtonWipe completed change screen to RotationVoilier
    //Go to RotationVoilier with no screen transition
    application().gotoRotationVoilierScreenNoTransition();
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f7ff fddd 	bl	800cf2a <_ZN16MessagesViewBase11applicationEv>
 800d370:	4603      	mov	r3, r0
 800d372:	4618      	mov	r0, r3
 800d374:	f7ff f8f8 	bl	800c568 <_ZN23FrontendApplicationBase37gotoRotationVoilierScreenNoTransitionEv>
}
 800d378:	bf00      	nop
 800d37a:	3708      	adds	r7, #8
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <_ZN16MessagesViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MessagesViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b084      	sub	sp, #16
 800d384:	af02      	add	r7, sp, #8
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
    if (&src == &buttonRotation)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	336c      	adds	r3, #108	; 0x6c
 800d38e:	683a      	ldr	r2, [r7, #0]
 800d390:	429a      	cmp	r2, r3
 800d392:	d149      	bne.n	800d428 <_ZN16MessagesViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xa8>
    {
        //InteractionButtonMessagesClicked
        //When buttonRotation clicked call virtual function
        //Call buttonMessagesClicked
        buttonMessagesClicked();
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	332c      	adds	r3, #44	; 0x2c
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	4798      	blx	r3

        //InteractionExitMessageBoxBg
        //When InteractionButtonMessagesClicked completed move imageMessageBoxBg
        //Move imageMessageBoxBg to x:500, y:14 with LinearOut easing in 250 ms (15 Ticks)
        imageMessageBoxBg.clearMoveAnimationEndedAction();
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7fe f873 	bl	800b492 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE29clearMoveAnimationEndedActionEv>
        imageMessageBoxBg.startMoveAnimation(500, 14, 15, touchgfx::EasingEquations::linearEaseOut, touchgfx::EasingEquations::linearEaseOut);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f503 7080 	add.w	r0, r3, #256	; 0x100
 800d3b2:	4b25      	ldr	r3, [pc, #148]	; (800d448 <_ZN16MessagesViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc8>)
 800d3b4:	9301      	str	r3, [sp, #4]
 800d3b6:	4b24      	ldr	r3, [pc, #144]	; (800d448 <_ZN16MessagesViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc8>)
 800d3b8:	9300      	str	r3, [sp, #0]
 800d3ba:	230f      	movs	r3, #15
 800d3bc:	220e      	movs	r2, #14
 800d3be:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d3c2:	f7fe f873 	bl	800b4ac <_ZN8touchgfx12MoveAnimatorINS_5ImageEE18startMoveAnimationEsstPFstsstES4_>

        //InteractionExitTextMessages
        //When InteractionButtonMessagesClicked completed move textMessages
        //Move textMessages to x:500, y:14 with LinearOut easing in 250 ms (15 Ticks)
        textMessages.clearMoveAnimationEndedAction();
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f7fd ff8f 	bl	800b2f0 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE29clearMoveAnimationEndedActionEv>
        textMessages.startMoveAnimation(500, 14, 15, touchgfx::EasingEquations::linearEaseOut, touchgfx::EasingEquations::linearEaseOut);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f503 70a4 	add.w	r0, r3, #328	; 0x148
 800d3d8:	4b1b      	ldr	r3, [pc, #108]	; (800d448 <_ZN16MessagesViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc8>)
 800d3da:	9301      	str	r3, [sp, #4]
 800d3dc:	4b1a      	ldr	r3, [pc, #104]	; (800d448 <_ZN16MessagesViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc8>)
 800d3de:	9300      	str	r3, [sp, #0]
 800d3e0:	230f      	movs	r3, #15
 800d3e2:	220e      	movs	r2, #14
 800d3e4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d3e8:	f7fd ff8f 	bl	800b30a <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE18startMoveAnimationEsstPFstsstES4_>

        //InteractionExitButtonWipe
        //When InteractionButtonMessagesClicked completed move buttonWipe
        //Move buttonWipe to x:500, y:214 with LinearOut easing in 250 ms (15 Ticks)
        buttonWipe.clearMoveAnimationEndedAction();
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f000 f8f4 	bl	800d5e0 <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE29clearMoveAnimationEndedActionEv>
        buttonWipe.startMoveAnimation(500, 214, 15, touchgfx::EasingEquations::linearEaseOut, touchgfx::EasingEquations::linearEaseOut);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f503 70ce 	add.w	r0, r3, #412	; 0x19c
 800d3fe:	4b12      	ldr	r3, [pc, #72]	; (800d448 <_ZN16MessagesViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc8>)
 800d400:	9301      	str	r3, [sp, #4]
 800d402:	4b11      	ldr	r3, [pc, #68]	; (800d448 <_ZN16MessagesViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc8>)
 800d404:	9300      	str	r3, [sp, #0]
 800d406:	230f      	movs	r3, #15
 800d408:	22d6      	movs	r2, #214	; 0xd6
 800d40a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d40e:	f000 f8f4 	bl	800d5fa <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE18startMoveAnimationEsstPFstsstES4_>
        buttonWipe.setMoveAnimationEndedAction(interactionExitButtonWipeEndedCallback);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f503 72ce 	add.w	r2, r3, #412	; 0x19c
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f603 53bc 	addw	r3, r3, #3516	; 0xdbc
 800d41e:	4619      	mov	r1, r3
 800d420:	4610      	mov	r0, r2
 800d422:	f000 f943 	bl	800d6ac <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE27setMoveAnimationEndedActionERNS_15GenericCallbackIRKS2_vvEE>
        //InteractionButtonWipeClicked
        //When buttonWipe clicked call virtual function
        //Call buttonWipeClicked
        buttonWipeClicked();
    }
}
 800d426:	e00b      	b.n	800d440 <_ZN16MessagesViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc0>
    else if (&src == &buttonWipe)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800d42e:	683a      	ldr	r2, [r7, #0]
 800d430:	429a      	cmp	r2, r3
 800d432:	d105      	bne.n	800d440 <_ZN16MessagesViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc0>
        buttonWipeClicked();
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	3330      	adds	r3, #48	; 0x30
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	4798      	blx	r3
}
 800d440:	bf00      	nop
 800d442:	3708      	adds	r7, #8
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}
 800d448:	08016ceb 	.word	0x08016ceb

0800d44c <_ZN8touchgfx14ButtonWithIconD1Ev>:
class ButtonWithIcon : public Button
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b082      	sub	sp, #8
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	4a05      	ldr	r2, [pc, #20]	; (800d46c <_ZN8touchgfx14ButtonWithIconD1Ev+0x20>)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	601a      	str	r2, [r3, #0]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7fc fff7 	bl	800a450 <_ZN8touchgfx6ButtonD1Ev>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	4618      	mov	r0, r3
 800d466:	3708      	adds	r7, #8
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	080266e4 	.word	0x080266e4

0800d470 <_ZN8touchgfx14ButtonWithIconD0Ev>:
 800d470:	b580      	push	{r7, lr}
 800d472:	b082      	sub	sp, #8
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f7ff ffe7 	bl	800d44c <_ZN8touchgfx14ButtonWithIconD1Ev>
 800d47e:	213c      	movs	r1, #60	; 0x3c
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f014 f9e4 	bl	802184e <_ZdlPvj>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	4618      	mov	r0, r3
 800d48a:	3708      	adds	r7, #8
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}

0800d490 <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEED1Ev>:
    virtual ~MoveAnimator()
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
    }
 800d498:	4a05      	ldr	r2, [pc, #20]	; (800d4b0 <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEED1Ev+0x20>)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	601a      	str	r2, [r3, #0]
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7ff ffd3 	bl	800d44c <_ZN8touchgfx14ButtonWithIconD1Ev>
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3708      	adds	r7, #8
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	080246d4 	.word	0x080246d4

0800d4b4 <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEED0Ev>:
    virtual ~MoveAnimator()
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
    }
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f7ff ffe7 	bl	800d490 <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEED1Ev>
 800d4c2:	2158      	movs	r1, #88	; 0x58
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f014 f9c2 	bl	802184e <_ZdlPvj>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3708      	adds	r7, #8
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <_ZN8touchgfx4ViewI17MessagesPresenterEC1Ev>:
    View() : presenter(0)
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f009 fa4e 	bl	8016980 <_ZN8touchgfx6ScreenC1Ev>
 800d4e4:	4a05      	ldr	r2, [pc, #20]	; (800d4fc <_ZN8touchgfx4ViewI17MessagesPresenterEC1Ev+0x28>)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	601a      	str	r2, [r3, #0]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3708      	adds	r7, #8
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	08024758 	.word	0x08024758

0800d500 <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEEC1Ev>:
    MoveAnimator() :
 800d500:	b580      	push	{r7, lr}
 800d502:	b082      	sub	sp, #8
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
        moveAnimationEndedCallback(0)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	4618      	mov	r0, r3
 800d50c:	f007 f942 	bl	8014794 <_ZN8touchgfx14ButtonWithIconC1Ev>
 800d510:	4a0a      	ldr	r2, [pc, #40]	; (800d53c <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEEC1Ev+0x3c>)
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	601a      	str	r2, [r3, #0]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2200      	movs	r2, #0
 800d51a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2200      	movs	r2, #0
 800d522:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2200      	movs	r2, #0
 800d528:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2200      	movs	r2, #0
 800d530:	655a      	str	r2, [r3, #84]	; 0x54
    }
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	4618      	mov	r0, r3
 800d536:	3708      	adds	r7, #8
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}
 800d53c:	080246d4 	.word	0x080246d4

0800d540 <_ZN8touchgfx8CallbackI16MessagesViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800d540:	b580      	push	{r7, lr}
 800d542:	b084      	sub	sp, #16
 800d544:	af00      	add	r7, sp, #0
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	60b9      	str	r1, [r7, #8]
 800d54a:	4639      	mov	r1, r7
 800d54c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	4618      	mov	r0, r3
 800d554:	f7fd fe0c 	bl	800b170 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800d558:	4a08      	ldr	r2, [pc, #32]	; (800d57c <_ZN8touchgfx8CallbackI16MessagesViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	68ba      	ldr	r2, [r7, #8]
 800d562:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	3308      	adds	r3, #8
 800d568:	463a      	mov	r2, r7
 800d56a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d56e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	4618      	mov	r0, r3
 800d576:	3710      	adds	r7, #16
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}
 800d57c:	080246bc 	.word	0x080246bc

0800d580 <_ZN8touchgfx15GenericCallbackIRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800d580:	b480      	push	{r7}
 800d582:	b083      	sub	sp, #12
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	4a04      	ldr	r2, [pc, #16]	; (800d59c <_ZN8touchgfx15GenericCallbackIRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvEC1Ev+0x1c>)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	601a      	str	r2, [r3, #0]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	4618      	mov	r0, r3
 800d592:	370c      	adds	r7, #12
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr
 800d59c:	080246a4 	.word	0x080246a4

0800d5a0 <_ZN8touchgfx8CallbackI16MessagesViewBaseRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvEC1EPS1_MS1_FvS6_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b084      	sub	sp, #16
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	60f8      	str	r0, [r7, #12]
 800d5a8:	60b9      	str	r1, [r7, #8]
 800d5aa:	4639      	mov	r1, r7
 800d5ac:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f7ff ffe4 	bl	800d580 <_ZN8touchgfx15GenericCallbackIRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvEC1Ev>
 800d5b8:	4a08      	ldr	r2, [pc, #32]	; (800d5dc <_ZN8touchgfx8CallbackI16MessagesViewBaseRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvEC1EPS1_MS1_FvS6_E+0x3c>)
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	68ba      	ldr	r2, [r7, #8]
 800d5c2:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	3308      	adds	r3, #8
 800d5c8:	463a      	mov	r2, r7
 800d5ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d5ce:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	3710      	adds	r7, #16
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}
 800d5dc:	0802468c 	.word	0x0802468c

0800d5e0 <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE29clearMoveAnimationEndedActionEv>:
    void clearMoveAnimationEndedAction()
 800d5e0:	b480      	push	{r7}
 800d5e2:	b083      	sub	sp, #12
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
        moveAnimationEndedCallback = 0;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
 800d5ee:	bf00      	nop
 800d5f0:	370c      	adds	r7, #12
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f8:	4770      	bx	lr

0800d5fa <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE18startMoveAnimationEsstPFstsstES4_>:
    void startMoveAnimation(int16_t endX, int16_t endY, uint16_t duration, EasingEquation xProgressionEquation = &EasingEquations::linearEaseNone, EasingEquation yProgressionEquation = &EasingEquations::linearEaseNone)
 800d5fa:	b580      	push	{r7, lr}
 800d5fc:	b084      	sub	sp, #16
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	60f8      	str	r0, [r7, #12]
 800d602:	4608      	mov	r0, r1
 800d604:	4611      	mov	r1, r2
 800d606:	461a      	mov	r2, r3
 800d608:	4603      	mov	r3, r0
 800d60a:	817b      	strh	r3, [r7, #10]
 800d60c:	460b      	mov	r3, r1
 800d60e:	813b      	strh	r3, [r7, #8]
 800d610:	4613      	mov	r3, r2
 800d612:	80fb      	strh	r3, [r7, #6]
        if (!moveAnimationRunning)
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d61a:	f083 0301 	eor.w	r3, r3, #1
 800d61e:	b2db      	uxtb	r3, r3
 800d620:	2b00      	cmp	r3, #0
 800d622:	d007      	beq.n	800d634 <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE18startMoveAnimationEsstPFstsstES4_+0x3a>
            Application::getInstance()->registerTimerWidget(this);
 800d624:	f008 f9ce 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 800d628:	4602      	mov	r2, r0
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	4619      	mov	r1, r3
 800d62e:	4610      	mov	r0, r2
 800d630:	f008 f9ce 	bl	80159d0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        moveAnimationCounter = 0;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2200      	movs	r2, #0
 800d638:	87da      	strh	r2, [r3, #62]	; 0x3e
        moveAnimationStartX = T::getX();
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7fc fc3a 	bl	8009eb6 <_ZNK8touchgfx8Drawable4getXEv>
 800d642:	4603      	mov	r3, r0
 800d644:	461a      	mov	r2, r3
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        moveAnimationStartY = T::getY();
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	4618      	mov	r0, r3
 800d650:	f7fc fc3e 	bl	8009ed0 <_ZNK8touchgfx8Drawable4getYEv>
 800d654:	4603      	mov	r3, r0
 800d656:	461a      	mov	r2, r3
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        moveAnimationEndX = endX;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	897a      	ldrh	r2, [r7, #10]
 800d662:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        moveAnimationEndY = endY;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	893a      	ldrh	r2, [r7, #8]
 800d66a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
        moveAnimationDuration = duration;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	88fa      	ldrh	r2, [r7, #6]
 800d672:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        moveAnimationXEquation = xProgressionEquation;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	69ba      	ldr	r2, [r7, #24]
 800d67a:	64da      	str	r2, [r3, #76]	; 0x4c
        moveAnimationYEquation = yProgressionEquation;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	69fa      	ldr	r2, [r7, #28]
 800d680:	651a      	str	r2, [r3, #80]	; 0x50
        moveAnimationRunning = true;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	2201      	movs	r2, #1
 800d686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        if (moveAnimationDelay == 0 && moveAnimationDuration == 0)
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d690:	2b00      	cmp	r3, #0
 800d692:	d107      	bne.n	800d6a4 <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE18startMoveAnimationEsstPFstsstES4_+0xaa>
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d102      	bne.n	800d6a4 <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE18startMoveAnimationEsstPFstsstES4_+0xaa>
            nextMoveAnimationStep(); // Set end position and shut down
 800d69e:	68f8      	ldr	r0, [r7, #12]
 800d6a0:	f000 f832 	bl	800d708 <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE21nextMoveAnimationStepEv>
    }
 800d6a4:	bf00      	nop
 800d6a6:	3710      	adds	r7, #16
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE27setMoveAnimationEndedActionERNS_15GenericCallbackIRKS2_vvEE>:
    void setMoveAnimationEndedAction(GenericCallback<const MoveAnimator<T>& >& callback)
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]
        moveAnimationEndedCallback = &callback;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	683a      	ldr	r2, [r7, #0]
 800d6ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
 800d6bc:	bf00      	nop
 800d6be:	370c      	adds	r7, #12
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr

0800d6c8 <_ZN8touchgfx15GenericCallbackIRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvED1Ev>:
    virtual ~GenericCallback()
 800d6c8:	b480      	push	{r7}
 800d6ca:	b083      	sub	sp, #12
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
    }
 800d6d0:	4a04      	ldr	r2, [pc, #16]	; (800d6e4 <_ZN8touchgfx15GenericCallbackIRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvED1Ev+0x1c>)
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	601a      	str	r2, [r3, #0]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	4618      	mov	r0, r3
 800d6da:	370c      	adds	r7, #12
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr
 800d6e4:	080246a4 	.word	0x080246a4

0800d6e8 <_ZN8touchgfx15GenericCallbackIRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvED0Ev>:
    virtual ~GenericCallback()
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
    }
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f7ff ffe9 	bl	800d6c8 <_ZN8touchgfx15GenericCallbackIRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvED1Ev>
 800d6f6:	2104      	movs	r1, #4
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f014 f8a8 	bl	802184e <_ZdlPvj>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	4618      	mov	r0, r3
 800d702:	3708      	adds	r7, #8
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE21nextMoveAnimationStepEv>:
    void nextMoveAnimationStep()
 800d708:	b590      	push	{r4, r7, lr}
 800d70a:	b085      	sub	sp, #20
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
        if (moveAnimationRunning)
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d716:	2b00      	cmp	r3, #0
 800d718:	f000 80a4 	beq.w	800d864 <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE21nextMoveAnimationStepEv+0x15c>
            if (moveAnimationCounter < moveAnimationDelay)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d726:	429a      	cmp	r2, r3
 800d728:	d206      	bcs.n	800d738 <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE21nextMoveAnimationStepEv+0x30>
                moveAnimationCounter++;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d72e:	3301      	adds	r3, #1
 800d730:	b29a      	uxth	r2, r3
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
 800d736:	e095      	b.n	800d864 <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE21nextMoveAnimationStepEv+0x15c>
                if (moveAnimationCounter <= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d73c:	461a      	mov	r2, r3
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d744:	4619      	mov	r1, r3
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800d74c:	440b      	add	r3, r1
 800d74e:	429a      	cmp	r2, r3
 800d750:	d84d      	bhi.n	800d7ee <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE21nextMoveAnimationStepEv+0xe6>
                    uint32_t actualAnimationCounter = moveAnimationCounter - moveAnimationDelay;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d756:	461a      	mov	r2, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d75e:	1ad3      	subs	r3, r2, r3
 800d760:	60fb      	str	r3, [r7, #12]
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	b298      	uxth	r0, r3
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800d770:	b29a      	uxth	r2, r3
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800d778:	b29b      	uxth	r3, r3
 800d77a:	1ad3      	subs	r3, r2, r3
 800d77c:	b29b      	uxth	r3, r3
 800d77e:	b21a      	sxth	r2, r3
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800d786:	2100      	movs	r1, #0
 800d788:	47a0      	blx	r4
 800d78a:	4603      	mov	r3, r0
 800d78c:	817b      	strh	r3, [r7, #10]
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	b298      	uxth	r0, r3
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800d79c:	b29a      	uxth	r2, r3
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800d7a4:	b29b      	uxth	r3, r3
 800d7a6:	1ad3      	subs	r3, r2, r3
 800d7a8:	b29b      	uxth	r3, r3
 800d7aa:	b21a      	sxth	r2, r3
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800d7b2:	2100      	movs	r1, #0
 800d7b4:	47a0      	blx	r4
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	813b      	strh	r3, [r7, #8]
                    T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800d7c2:	b29a      	uxth	r2, r3
 800d7c4:	897b      	ldrh	r3, [r7, #10]
 800d7c6:	4413      	add	r3, r2
 800d7c8:	b29b      	uxth	r3, r3
 800d7ca:	b219      	sxth	r1, r3
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800d7d2:	b29a      	uxth	r2, r3
 800d7d4:	893b      	ldrh	r3, [r7, #8]
 800d7d6:	4413      	add	r3, r2
 800d7d8:	b29b      	uxth	r3, r3
 800d7da:	b21b      	sxth	r3, r3
 800d7dc:	461a      	mov	r2, r3
 800d7de:	f7fc fc3d 	bl	800a05c <_ZN8touchgfx8Drawable6moveToEss>
                    moveAnimationCounter++;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	b29a      	uxth	r2, r3
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	87da      	strh	r2, [r3, #62]	; 0x3e
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800d802:	440b      	add	r3, r1
 800d804:	429a      	cmp	r2, r3
 800d806:	d92d      	bls.n	800d864 <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE21nextMoveAnimationStepEv+0x15c>
                    moveAnimationRunning = false;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2200      	movs	r2, #0
 800d80c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                    moveAnimationCounter = 0;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2200      	movs	r2, #0
 800d814:	87da      	strh	r2, [r3, #62]	; 0x3e
                    Application::getInstance()->unregisterTimerWidget(this);
 800d816:	f008 f8d5 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 800d81a:	4602      	mov	r2, r0
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	4619      	mov	r1, r3
 800d820:	4610      	mov	r0, r2
 800d822:	f008 f907 	bl	8015a34 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d00d      	beq.n	800d84a <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE21nextMoveAnimationStepEv+0x142>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	330c      	adds	r3, #12
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	4610      	mov	r0, r2
 800d83e:	4798      	blx	r3
 800d840:	4603      	mov	r3, r0
 800d842:	2b00      	cmp	r3, #0
 800d844:	d001      	beq.n	800d84a <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE21nextMoveAnimationStepEv+0x142>
 800d846:	2301      	movs	r3, #1
 800d848:	e000      	b.n	800d84c <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE21nextMoveAnimationStepEv+0x144>
 800d84a:	2300      	movs	r3, #0
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d009      	beq.n	800d864 <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE21nextMoveAnimationStepEv+0x15c>
                        moveAnimationEndedCallback->execute(*this);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	3308      	adds	r3, #8
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	6879      	ldr	r1, [r7, #4]
 800d860:	4610      	mov	r0, r2
 800d862:	4798      	blx	r3
    }
 800d864:	bf00      	nop
 800d866:	3714      	adds	r7, #20
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd90      	pop	{r4, r7, pc}

0800d86c <_ZN8touchgfx8CallbackI16MessagesViewBaseRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	4a05      	ldr	r2, [pc, #20]	; (800d88c <_ZN8touchgfx8CallbackI16MessagesViewBaseRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvED1Ev+0x20>)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	601a      	str	r2, [r3, #0]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	4618      	mov	r0, r3
 800d87e:	f7ff ff23 	bl	800d6c8 <_ZN8touchgfx15GenericCallbackIRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvED1Ev>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	4618      	mov	r0, r3
 800d886:	3708      	adds	r7, #8
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}
 800d88c:	0802468c 	.word	0x0802468c

0800d890 <_ZN8touchgfx8CallbackI16MessagesViewBaseRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvED0Ev>:
 800d890:	b580      	push	{r7, lr}
 800d892:	b082      	sub	sp, #8
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f7ff ffe7 	bl	800d86c <_ZN8touchgfx8CallbackI16MessagesViewBaseRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvED1Ev>
 800d89e:	2110      	movs	r1, #16
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f013 ffd4 	bl	802184e <_ZdlPvj>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3708      	adds	r7, #8
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <_ZN8touchgfx8CallbackI16MessagesViewBaseRKNS_14AbstractButtonEvvED1Ev>:
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b082      	sub	sp, #8
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	4a05      	ldr	r2, [pc, #20]	; (800d8d0 <_ZN8touchgfx8CallbackI16MessagesViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	601a      	str	r2, [r3, #0]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f7fd fe45 	bl	800b550 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3708      	adds	r7, #8
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	080246bc 	.word	0x080246bc

0800d8d4 <_ZN8touchgfx8CallbackI16MessagesViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f7ff ffe7 	bl	800d8b0 <_ZN8touchgfx8CallbackI16MessagesViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800d8e2:	2110      	movs	r1, #16
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f013 ffb2 	bl	802184e <_ZdlPvj>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3708      	adds	r7, #8
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}

0800d8f4 <_ZN8touchgfx8CallbackI16MessagesViewBaseRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvE7executeES6_>:
    virtual void execute(T1 t1)
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b082      	sub	sp, #8
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	68d2      	ldr	r2, [r2, #12]
 800d906:	1052      	asrs	r2, r2, #1
 800d908:	1898      	adds	r0, r3, r2
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	68db      	ldr	r3, [r3, #12]
 800d90e:	f003 0301 	and.w	r3, r3, #1
 800d912:	2b00      	cmp	r3, #0
 800d914:	d102      	bne.n	800d91c <_ZN8touchgfx8CallbackI16MessagesViewBaseRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvE7executeES6_+0x28>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	689b      	ldr	r3, [r3, #8]
 800d91a:	e00a      	b.n	800d932 <_ZN8touchgfx8CallbackI16MessagesViewBaseRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvE7executeES6_+0x3e>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	685b      	ldr	r3, [r3, #4]
 800d920:	687a      	ldr	r2, [r7, #4]
 800d922:	68d2      	ldr	r2, [r2, #12]
 800d924:	1052      	asrs	r2, r2, #1
 800d926:	4413      	add	r3, r2
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	687a      	ldr	r2, [r7, #4]
 800d92c:	6892      	ldr	r2, [r2, #8]
 800d92e:	4413      	add	r3, r2
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	6839      	ldr	r1, [r7, #0]
 800d934:	4798      	blx	r3
    }
 800d936:	bf00      	nop
 800d938:	3708      	adds	r7, #8
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}

0800d93e <_ZNK8touchgfx8CallbackI16MessagesViewBaseRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvE7isValidEv>:
    virtual bool isValid() const
 800d93e:	b480      	push	{r7}
 800d940:	b083      	sub	sp, #12
 800d942:	af00      	add	r7, sp, #0
 800d944:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	685b      	ldr	r3, [r3, #4]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d010      	beq.n	800d970 <_ZNK8touchgfx8CallbackI16MessagesViewBaseRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvE7isValidEv+0x32>
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	689b      	ldr	r3, [r3, #8]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d107      	bne.n	800d966 <_ZNK8touchgfx8CallbackI16MessagesViewBaseRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvE7isValidEv+0x28>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	68db      	ldr	r3, [r3, #12]
 800d95a:	f003 0301 	and.w	r3, r3, #1
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d101      	bne.n	800d966 <_ZNK8touchgfx8CallbackI16MessagesViewBaseRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvE7isValidEv+0x28>
 800d962:	2301      	movs	r3, #1
 800d964:	e000      	b.n	800d968 <_ZNK8touchgfx8CallbackI16MessagesViewBaseRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvE7isValidEv+0x2a>
 800d966:	2300      	movs	r3, #0
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d001      	beq.n	800d970 <_ZNK8touchgfx8CallbackI16MessagesViewBaseRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvE7isValidEv+0x32>
 800d96c:	2301      	movs	r3, #1
 800d96e:	e000      	b.n	800d972 <_ZNK8touchgfx8CallbackI16MessagesViewBaseRKNS_12MoveAnimatorINS_14ButtonWithIconEEEvvE7isValidEv+0x34>
 800d970:	2300      	movs	r3, #0
    }
 800d972:	4618      	mov	r0, r3
 800d974:	370c      	adds	r7, #12
 800d976:	46bd      	mov	sp, r7
 800d978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97c:	4770      	bx	lr

0800d97e <_ZN8touchgfx8CallbackI16MessagesViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800d97e:	b580      	push	{r7, lr}
 800d980:	b082      	sub	sp, #8
 800d982:	af00      	add	r7, sp, #0
 800d984:	6078      	str	r0, [r7, #4]
 800d986:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	685b      	ldr	r3, [r3, #4]
 800d98c:	687a      	ldr	r2, [r7, #4]
 800d98e:	68d2      	ldr	r2, [r2, #12]
 800d990:	1052      	asrs	r2, r2, #1
 800d992:	1898      	adds	r0, r3, r2
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	68db      	ldr	r3, [r3, #12]
 800d998:	f003 0301 	and.w	r3, r3, #1
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d102      	bne.n	800d9a6 <_ZN8touchgfx8CallbackI16MessagesViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	689b      	ldr	r3, [r3, #8]
 800d9a4:	e00a      	b.n	800d9bc <_ZN8touchgfx8CallbackI16MessagesViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	685b      	ldr	r3, [r3, #4]
 800d9aa:	687a      	ldr	r2, [r7, #4]
 800d9ac:	68d2      	ldr	r2, [r2, #12]
 800d9ae:	1052      	asrs	r2, r2, #1
 800d9b0:	4413      	add	r3, r2
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	6892      	ldr	r2, [r2, #8]
 800d9b8:	4413      	add	r3, r2
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	6839      	ldr	r1, [r7, #0]
 800d9be:	4798      	blx	r3
    }
 800d9c0:	bf00      	nop
 800d9c2:	3708      	adds	r7, #8
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <_ZNK8touchgfx8CallbackI16MessagesViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800d9c8:	b480      	push	{r7}
 800d9ca:	b083      	sub	sp, #12
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	685b      	ldr	r3, [r3, #4]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d010      	beq.n	800d9fa <_ZNK8touchgfx8CallbackI16MessagesViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	689b      	ldr	r3, [r3, #8]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d107      	bne.n	800d9f0 <_ZNK8touchgfx8CallbackI16MessagesViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	68db      	ldr	r3, [r3, #12]
 800d9e4:	f003 0301 	and.w	r3, r3, #1
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d101      	bne.n	800d9f0 <_ZNK8touchgfx8CallbackI16MessagesViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	e000      	b.n	800d9f2 <_ZNK8touchgfx8CallbackI16MessagesViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	2b01      	cmp	r3, #1
 800d9f4:	d001      	beq.n	800d9fa <_ZNK8touchgfx8CallbackI16MessagesViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	e000      	b.n	800d9fc <_ZNK8touchgfx8CallbackI16MessagesViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800d9fa:	2300      	movs	r3, #0
    }
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	370c      	adds	r7, #12
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr

0800da08 <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE15handleTickEventEv>:
    virtual void handleTickEvent()
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
        T::handleTickEvent();
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	4618      	mov	r0, r3
 800da14:	f7fc faee 	bl	8009ff4 <_ZN8touchgfx8Drawable15handleTickEventEv>
        nextMoveAnimationStep();
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f7ff fe75 	bl	800d708 <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE21nextMoveAnimationStepEv>
    }
 800da1e:	bf00      	nop
 800da20:	3708      	adds	r7, #8
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}

0800da26 <_ZN8touchgfx12MoveAnimatorINS_14ButtonWithIconEE21setMoveAnimationDelayEt>:
    virtual void setMoveAnimationDelay(uint16_t delay)
 800da26:	b480      	push	{r7}
 800da28:	b083      	sub	sp, #12
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
 800da2e:	460b      	mov	r3, r1
 800da30:	807b      	strh	r3, [r7, #2]
        moveAnimationDelay = delay;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	887a      	ldrh	r2, [r7, #2]
 800da36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    }
 800da3a:	bf00      	nop
 800da3c:	370c      	adds	r7, #12
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr

0800da46 <_ZNK8touchgfx12MoveAnimatorINS_14ButtonWithIconEE21getMoveAnimationDelayEv>:
    virtual uint16_t getMoveAnimationDelay() const
 800da46:	b480      	push	{r7}
 800da48:	b083      	sub	sp, #12
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	6078      	str	r0, [r7, #4]
        return moveAnimationDelay;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
    }
 800da54:	4618      	mov	r0, r3
 800da56:	370c      	adds	r7, #12
 800da58:	46bd      	mov	sp, r7
 800da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5e:	4770      	bx	lr

0800da60 <_ZNK8touchgfx12MoveAnimatorINS_14ButtonWithIconEE9isRunningEv>:
    virtual bool isRunning() const
 800da60:	b580      	push	{r7, lr}
 800da62:	b082      	sub	sp, #8
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
        return isMoveAnimationRunning();
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	3378      	adds	r3, #120	; 0x78
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	4798      	blx	r3
 800da74:	4603      	mov	r3, r0
    }
 800da76:	4618      	mov	r0, r3
 800da78:	3708      	adds	r7, #8
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}

0800da7e <_ZNK8touchgfx12MoveAnimatorINS_14ButtonWithIconEE22isMoveAnimationRunningEv>:
    virtual bool isMoveAnimationRunning() const
 800da7e:	b480      	push	{r7}
 800da80:	b083      	sub	sp, #12
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
        return moveAnimationRunning;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    }
 800da8c:	4618      	mov	r0, r3
 800da8e:	370c      	adds	r7, #12
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 800da98:	b480      	push	{r7}
 800da9a:	b083      	sub	sp, #12
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
 800daa0:	460b      	mov	r3, r1
 800daa2:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	78fa      	ldrb	r2, [r7, #3]
 800daa8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800daac:	bf00      	nop
 800daae:	370c      	adds	r7, #12
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr

0800dab8 <_ZN8touchgfx6Slider20setStopValueCallbackERNS_15GenericCallbackIRKS0_ivEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the Slider and the current value of the slider at interaction end.
     *
     * @see GenericCallback
     */
    void setStopValueCallback(GenericCallback< const Slider&, int >& callback)
 800dab8:	b480      	push	{r7}
 800daba:	b083      	sub	sp, #12
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	6039      	str	r1, [r7, #0]
    {
        stopValueCallback = &callback;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	683a      	ldr	r2, [r7, #0]
 800dac6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    }
 800daca:	bf00      	nop
 800dacc:	370c      	adds	r7, #12
 800dace:	46bd      	mov	sp, r7
 800dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad4:	4770      	bx	lr

0800dad6 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the Slider and the current value of the slider.
     *
     * @see GenericCallback
     */
    void setNewValueCallback(GenericCallback< const Slider&, int >& callback)
 800dad6:	b480      	push	{r7}
 800dad8:	b083      	sub	sp, #12
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]
 800dade:	6039      	str	r1, [r7, #0]
    {
        newValueCallback = &callback;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	683a      	ldr	r2, [r7, #0]
 800dae4:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    }
 800dae8:	bf00      	nop
 800daea:	370c      	adds	r7, #12
 800daec:	46bd      	mov	sp, r7
 800daee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf2:	4770      	bx	lr

0800daf4 <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
     *
     * @see setupHorizontalSlider
     * @see setupVerticalSlider
     * @see getIndicatorMax
     */
    virtual uint16_t getIndicatorMin() const
 800daf4:	b480      	push	{r7}
 800daf6:	b083      	sub	sp, #12
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
    {
        return indicatorMaxPosition;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 800db02:	b29b      	uxth	r3, r3
    }
 800db04:	4618      	mov	r0, r3
 800db06:	370c      	adds	r7, #12
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr

0800db10 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
     *
     * @see setupHorizontalSlider
     * @see setupVerticalSlider
     * @see getIndicatorMin
     */
    virtual uint16_t getIndicatorMax() const
 800db10:	b480      	push	{r7}
 800db12:	b083      	sub	sp, #12
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
    {
        return indicatorMaxPosition;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 800db1e:	b29b      	uxth	r3, r3
    }
 800db20:	4618      	mov	r0, r3
 800db22:	370c      	adds	r7, #12
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr

0800db2c <_ZNK8touchgfx6Slider11getMinValueEv>:
     *
     * @return The minimum value.
     * @see setValueRange
     * @see getMaxValue
     */
    virtual uint16_t getMinValue() const
 800db2c:	b480      	push	{r7}
 800db2e:	b083      	sub	sp, #12
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
    {
        return valueRangeMin;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db38:	b29b      	uxth	r3, r3
    }
 800db3a:	4618      	mov	r0, r3
 800db3c:	370c      	adds	r7, #12
 800db3e:	46bd      	mov	sp, r7
 800db40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db44:	4770      	bx	lr

0800db46 <_ZNK8touchgfx6Slider11getMaxValueEv>:
     *
     * @return The maximum value.
     * @see setValueRange
     * @see getMinValue
     */
    virtual uint16_t getMaxValue() const
 800db46:	b480      	push	{r7}
 800db48:	b083      	sub	sp, #12
 800db4a:	af00      	add	r7, sp, #0
 800db4c:	6078      	str	r0, [r7, #4]
    {
        return valueRangeMax;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db52:	b29b      	uxth	r3, r3
    }
 800db54:	4618      	mov	r0, r3
 800db56:	370c      	adds	r7, #12
 800db58:	46bd      	mov	sp, r7
 800db5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5e:	4770      	bx	lr

0800db60 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         *        Constructor from integer. No conversion is done - the integer is assumed to
         *        already be in Q5 format.
         *
         * @param i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i) : v(i) { }
 800db60:	b480      	push	{r7}
 800db62:	b083      	sub	sp, #12
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	683a      	ldr	r2, [r7, #0]
 800db6e:	601a      	str	r2, [r3, #0]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	4618      	mov	r0, r3
 800db74:	370c      	adds	r7, #12
 800db76:	46bd      	mov	sp, r7
 800db78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7c:	4770      	bx	lr

0800db7e <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
     *
     *        Sets the alpha channel for the CanvasWidget.
     *
     * @param alpha The alpha value. 255 = completely solid.
     */
    virtual void setAlpha(uint8_t alpha)
 800db7e:	b480      	push	{r7}
 800db80:	b083      	sub	sp, #12
 800db82:	af00      	add	r7, sp, #0
 800db84:	6078      	str	r0, [r7, #4]
 800db86:	460b      	mov	r3, r1
 800db88:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	78fa      	ldrb	r2, [r7, #3]
 800db8e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    }
 800db92:	bf00      	nop
 800db94:	370c      	adds	r7, #12
 800db96:	46bd      	mov	sp, r7
 800db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9c:	4770      	bx	lr

0800db9e <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
     *
     *        Gets the current alpha value.
     *
     * @return The current alpha value.
     */
    virtual uint8_t getAlpha() const
 800db9e:	b480      	push	{r7}
 800dba0:	b083      	sub	sp, #12
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    }
 800dbac:	4618      	mov	r0, r3
 800dbae:	370c      	adds	r7, #12
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb6:	4770      	bx	lr

0800dbb8 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
    AbstractPainterRGB888()
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
    }

    virtual ~AbstractPainterRGB888() {}
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	4a05      	ldr	r2, [pc, #20]	; (800dbd8 <_ZN8touchgfx21AbstractPainterRGB888D1Ev+0x20>)
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	601a      	str	r2, [r3, #0]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f006 fa19 	bl	8014000 <_ZN8touchgfx15AbstractPainterD1Ev>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3708      	adds	r7, #8
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	080260d8 	.word	0x080260d8

0800dbdc <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b082      	sub	sp, #8
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f7ff ffe7 	bl	800dbb8 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 800dbea:	2114      	movs	r1, #20
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f013 fe2e 	bl	802184e <_ZdlPvj>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3708      	adds	r7, #8
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <_ZN8touchgfx4ViewI24RotationVoilierPresenterED1Ev>:
class View : public Screen
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	4a05      	ldr	r2, [pc, #20]	; (800dc1c <_ZN8touchgfx4ViewI24RotationVoilierPresenterED1Ev+0x20>)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	601a      	str	r2, [r3, #0]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7fc fabd 	bl	800a18c <_ZN8touchgfx6ScreenD1Ev>
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	4618      	mov	r0, r3
 800dc16:	3708      	adds	r7, #8
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}
 800dc1c:	08024994 	.word	0x08024994

0800dc20 <_ZN8touchgfx4ViewI24RotationVoilierPresenterED0Ev>:
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b082      	sub	sp, #8
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	f7ff ffe7 	bl	800dbfc <_ZN8touchgfx4ViewI24RotationVoilierPresenterED1Ev>
 800dc2e:	2140      	movs	r1, #64	; 0x40
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f013 fe0c 	bl	802184e <_ZdlPvj>
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3708      	adds	r7, #8
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}

0800dc40 <_ZN23RotationVoilierViewBaseD1Ev>:

class RotationVoilierViewBase : public touchgfx::View<RotationVoilierPresenter>
{
public:
    RotationVoilierViewBase();
    virtual ~RotationVoilierViewBase() {}
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b082      	sub	sp, #8
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
 800dc48:	4a30      	ldr	r2, [pc, #192]	; (800dd0c <_ZN23RotationVoilierViewBaseD1Ev+0xcc>)
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	601a      	str	r2, [r3, #0]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800dc54:	4618      	mov	r0, r3
 800dc56:	f001 f90d 	bl	800ee74 <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_12MoveAnimatorINS_5ImageEEEvvED1Ev>
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 800dc60:	4618      	mov	r0, r3
 800dc62:	f001 f929 	bl	800eeb8 <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_6SliderEivED1Ev>
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f001 f923 	bl	800eeb8 <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_6SliderEivED1Ev>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f001 f93f 	bl	800eefc <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7fd f94b 	bl	800af20 <_ZN8touchgfx12MoveAnimatorINS_5ImageEED1Ev>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800dc90:	4618      	mov	r0, r3
 800dc92:	f7fd f945 	bl	800af20 <_ZN8touchgfx12MoveAnimatorINS_5ImageEED1Ev>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f7fd f9a5 	bl	800afec <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEED1Ev>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7fd f939 	bl	800af20 <_ZN8touchgfx12MoveAnimatorINS_5ImageEED1Ev>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f001 f943 	bl	800ef40 <_ZN8touchgfx13PainterRGB888D1Ev>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f000 fd0f 	bl	800e6e4 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800dccc:	4618      	mov	r0, r3
 800dcce:	f000 fcc3 	bl	800e658 <_ZN8touchgfx12MoveAnimatorINS_6SliderEED1Ev>
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	33d4      	adds	r3, #212	; 0xd4
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7fd f900 	bl	800aedc <_ZN8touchgfx5ImageD1Ev>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	33a8      	adds	r3, #168	; 0xa8
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7fd f8fb 	bl	800aedc <_ZN8touchgfx5ImageD1Ev>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	336c      	adds	r3, #108	; 0x6c
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7ff fbae 	bl	800d44c <_ZN8touchgfx14ButtonWithIconD1Ev>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	3340      	adds	r3, #64	; 0x40
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f7fd f8f1 	bl	800aedc <_ZN8touchgfx5ImageD1Ev>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7ff ff7d 	bl	800dbfc <_ZN8touchgfx4ViewI24RotationVoilierPresenterED1Ev>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	4618      	mov	r0, r3
 800dd06:	3708      	adds	r7, #8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}
 800dd0c:	0802478c 	.word	0x0802478c

0800dd10 <_ZN23RotationVoilierViewBaseD0Ev>:
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b082      	sub	sp, #8
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f7ff ff91 	bl	800dc40 <_ZN23RotationVoilierViewBaseD1Ev>
 800dd1e:	f242 0138 	movw	r1, #8248	; 0x2038
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f013 fd93 	bl	802184e <_ZdlPvj>
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3708      	adds	r7, #8
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}

0800dd32 <_ZN23RotationVoilierViewBase21ButtonMessagesClickedEv>:
    virtual void afterTransition();

    /*
     * Virtual Action Handlers
     */
    virtual void ButtonMessagesClicked()
 800dd32:	b480      	push	{r7}
 800dd34:	b083      	sub	sp, #12
 800dd36:	af00      	add	r7, sp, #0
 800dd38:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in RotationVoilier
    }
 800dd3a:	bf00      	nop
 800dd3c:	370c      	adds	r7, #12
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr

0800dd46 <_ZN23RotationVoilierViewBase21sliderRotationChangedEi>:

    virtual void sliderRotationChanged(int value)
 800dd46:	b480      	push	{r7}
 800dd48:	b083      	sub	sp, #12
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	6078      	str	r0, [r7, #4]
 800dd4e:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in RotationVoilier
    }
 800dd50:	bf00      	nop
 800dd52:	370c      	adds	r7, #12
 800dd54:	46bd      	mov	sp, r7
 800dd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5a:	4770      	bx	lr

0800dd5c <_ZN23RotationVoilierViewBase22sliderRotationReleasedEi>:

    virtual void sliderRotationReleased(int value)
 800dd5c:	b480      	push	{r7}
 800dd5e:	b083      	sub	sp, #12
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in RotationVoilier
    }
 800dd66:	bf00      	nop
 800dd68:	370c      	adds	r7, #12
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr

0800dd72 <_ZN23RotationVoilierViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 800dd72:	b580      	push	{r7, lr}
 800dd74:	b082      	sub	sp, #8
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800dd7a:	f007 fe23 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 800dd7e:	4603      	mov	r3, r0
    }
 800dd80:	4618      	mov	r0, r3
 800dd82:	3708      	adds	r7, #8
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <_ZN23RotationVoilierViewBaseC1Ev>:
#include <gui_generated/rotationvoilier_screen/RotationVoilierViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

RotationVoilierViewBase::RotationVoilierViewBase() :
 800dd88:	b590      	push	{r4, r7, lr}
 800dd8a:	b0a1      	sub	sp, #132	; 0x84
 800dd8c:	af02      	add	r7, sp, #8
 800dd8e:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &RotationVoilierViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &RotationVoilierViewBase::sliderValueChangedCallbackHandler),
    sliderValueConfirmedCallback(this, &RotationVoilierViewBase::sliderValueConfirmedCallbackHandler),
    interactionExitRotRightEndedCallback(this, &RotationVoilierViewBase::interactionExitRotRightEndedCallbackHandler)
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	4618      	mov	r0, r3
 800dd94:	f000 fcc8 	bl	800e728 <_ZN8touchgfx4ViewI24RotationVoilierPresenterEC1Ev>
 800dd98:	4ada      	ldr	r2, [pc, #872]	; (800e104 <_ZN23RotationVoilierViewBaseC1Ev+0x37c>)
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	601a      	str	r2, [r3, #0]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800dda4:	f107 030c 	add.w	r3, r7, #12
 800dda8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ddac:	4618      	mov	r0, r3
 800ddae:	f7fb fff7 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800ddb2:	f107 030c 	add.w	r3, r7, #12
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f7fc faa7 	bl	800a30c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	336c      	adds	r3, #108	; 0x6c
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f006 fce6 	bl	8014794 <_ZN8touchgfx14ButtonWithIconC1Ev>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 800ddce:	f107 0310 	add.w	r3, r7, #16
 800ddd2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f7fb ffe2 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800dddc:	f107 0310 	add.w	r3, r7, #16
 800dde0:	4619      	mov	r1, r3
 800dde2:	4620      	mov	r0, r4
 800dde4:	f7fc fa92 	bl	800a30c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 800ddee:	f107 0314 	add.w	r3, r7, #20
 800ddf2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f7fb ffd2 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800ddfc:	f107 0314 	add.w	r3, r7, #20
 800de00:	4619      	mov	r1, r3
 800de02:	4620      	mov	r0, r4
 800de04:	f7fc fa82 	bl	800a30c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800de0e:	4618      	mov	r0, r3
 800de10:	f000 fca0 	bl	800e754 <_ZN8touchgfx12MoveAnimatorINS_6SliderEEC1Ev>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800de1a:	4618      	mov	r0, r3
 800de1c:	f000 fcbc 	bl	800e798 <_ZN8touchgfx12MoveAnimatorINS_6CircleEEC1Ev>
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f503 7420 	add.w	r4, r3, #640	; 0x280
 800de26:	f107 0318 	add.w	r3, r7, #24
 800de2a:	2100      	movs	r1, #0
 800de2c:	4618      	mov	r0, r3
 800de2e:	f7fb ff71 	bl	8009d14 <_ZN8touchgfx9colortypeC1Em>
 800de32:	22ff      	movs	r2, #255	; 0xff
 800de34:	69b9      	ldr	r1, [r7, #24]
 800de36:	4620      	mov	r0, r4
 800de38:	f006 f8a0 	bl	8013f7c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800de42:	4618      	mov	r0, r3
 800de44:	f7fd f92a 	bl	800b09c <_ZN8touchgfx12MoveAnimatorINS_5ImageEEC1Ev>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800de4e:	4618      	mov	r0, r3
 800de50:	f7fd f96e 	bl	800b130 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEEC1Ev>
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7fd f91e 	bl	800b09c <_ZN8touchgfx12MoveAnimatorINS_5ImageEEC1Ev>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 800de66:	4618      	mov	r0, r3
 800de68:	f7fd f918 	bl	800b09c <_ZN8touchgfx12MoveAnimatorINS_5ImageEEC1Ev>
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f503 7076 	add.w	r0, r3, #984	; 0x3d8
 800de72:	4ba5      	ldr	r3, [pc, #660]	; (800e108 <_ZN23RotationVoilierViewBaseC1Ev+0x380>)
 800de74:	61fb      	str	r3, [r7, #28]
 800de76:	2300      	movs	r3, #0
 800de78:	623b      	str	r3, [r7, #32]
 800de7a:	f107 031c 	add.w	r3, r7, #28
 800de7e:	cb0c      	ldmia	r3, {r2, r3}
 800de80:	6879      	ldr	r1, [r7, #4]
 800de82:	f000 fcab 	bl	800e7dc <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f503 707a 	add.w	r0, r3, #1000	; 0x3e8
 800de8c:	4b9f      	ldr	r3, [pc, #636]	; (800e10c <_ZN23RotationVoilierViewBaseC1Ev+0x384>)
 800de8e:	627b      	str	r3, [r7, #36]	; 0x24
 800de90:	2300      	movs	r3, #0
 800de92:	62bb      	str	r3, [r7, #40]	; 0x28
 800de94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de98:	cb0c      	ldmia	r3, {r2, r3}
 800de9a:	6879      	ldr	r1, [r7, #4]
 800de9c:	f000 fcce 	bl	800e83c <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f503 707e 	add.w	r0, r3, #1016	; 0x3f8
 800dea6:	4b9a      	ldr	r3, [pc, #616]	; (800e110 <_ZN23RotationVoilierViewBaseC1Ev+0x388>)
 800dea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800deaa:	2300      	movs	r3, #0
 800deac:	633b      	str	r3, [r7, #48]	; 0x30
 800deae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800deb2:	cb0c      	ldmia	r3, {r2, r3}
 800deb4:	6879      	ldr	r1, [r7, #4]
 800deb6:	f000 fcc1 	bl	800e83c <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 800dec0:	4b94      	ldr	r3, [pc, #592]	; (800e114 <_ZN23RotationVoilierViewBaseC1Ev+0x38c>)
 800dec2:	637b      	str	r3, [r7, #52]	; 0x34
 800dec4:	2300      	movs	r3, #0
 800dec6:	63bb      	str	r3, [r7, #56]	; 0x38
 800dec8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800decc:	cb0c      	ldmia	r3, {r2, r3}
 800dece:	6879      	ldr	r1, [r7, #4]
 800ded0:	f000 fce4 	bl	800e89c <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_12MoveAnimatorINS_5ImageEEEvvEC1EPS1_MS1_FvS6_E>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800deda:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 800dede:	4618      	mov	r0, r3
 800dee0:	f006 fcea 	bl	80148b8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    imageBg.setXY(0, 0);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	3340      	adds	r3, #64	; 0x40
 800dee8:	2200      	movs	r2, #0
 800deea:	2100      	movs	r1, #0
 800deec:	4618      	mov	r0, r3
 800deee:	f7fc f81a 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
    imageBg.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800def8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800defc:	2100      	movs	r1, #0
 800defe:	4618      	mov	r0, r3
 800df00:	f7fb ff4e 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800df04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800df08:	4619      	mov	r1, r3
 800df0a:	4620      	mov	r0, r4
 800df0c:	f006 fc66 	bl	80147dc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    buttonMessages.setXY(0, 136);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	336c      	adds	r3, #108	; 0x6c
 800df14:	2288      	movs	r2, #136	; 0x88
 800df16:	2100      	movs	r1, #0
 800df18:	4618      	mov	r0, r3
 800df1a:	f7fc f804 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
    buttonMessages.setBitmaps(touchgfx::Bitmap(BITMAP_SIDE_BUTTON_RELEASED_ID), touchgfx::Bitmap(BITMAP_SIDE_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_MESSAGES_ORANGE_ID), touchgfx::Bitmap(BITMAP_MESSAGES_ORANGE_LIGHT_ID));
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800df24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800df28:	211b      	movs	r1, #27
 800df2a:	4618      	mov	r0, r3
 800df2c:	f7fb ff38 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800df30:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800df34:	211a      	movs	r1, #26
 800df36:	4618      	mov	r0, r3
 800df38:	f7fb ff32 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800df3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800df40:	2113      	movs	r1, #19
 800df42:	4618      	mov	r0, r3
 800df44:	f7fb ff2c 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800df48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800df4c:	2114      	movs	r1, #20
 800df4e:	4618      	mov	r0, r3
 800df50:	f7fb ff26 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800df54:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800df58:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800df5c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800df60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800df64:	9300      	str	r3, [sp, #0]
 800df66:	4603      	mov	r3, r0
 800df68:	4620      	mov	r0, r4
 800df6a:	f006 fb71 	bl	8014650 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    buttonMessages.setIconXY(9, 52);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	336c      	adds	r3, #108	; 0x6c
 800df72:	2234      	movs	r2, #52	; 0x34
 800df74:	2109      	movs	r1, #9
 800df76:	4618      	mov	r0, r3
 800df78:	f7fe ff34 	bl	800cde4 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    buttonMessages.setAction(buttonCallback);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 800df88:	4619      	mov	r1, r3
 800df8a:	4610      	mov	r0, r2
 800df8c:	f7fc f9fe 	bl	800a38c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    imageRotation.setXY(0, 0);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	33a8      	adds	r3, #168	; 0xa8
 800df94:	2200      	movs	r2, #0
 800df96:	2100      	movs	r1, #0
 800df98:	4618      	mov	r0, r3
 800df9a:	f7fb ffc4 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
    imageRotation.setBitmap(touchgfx::Bitmap(BITMAP_SIDE_BUTTON_IDLE_ID));
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 800dfa4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dfa8:	2119      	movs	r1, #25
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7fb fef8 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800dfb0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	f006 fc10 	bl	80147dc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    imageRotationIcon.setXY(9, 52);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	33d4      	adds	r3, #212	; 0xd4
 800dfc0:	2234      	movs	r2, #52	; 0x34
 800dfc2:	2109      	movs	r1, #9
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f7fb ffae 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
    imageRotationIcon.setBitmap(touchgfx::Bitmap(BITMAP_SAILBOAT_ORANGE_LIGHT_ID));
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f103 04d4 	add.w	r4, r3, #212	; 0xd4
 800dfd0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800dfd4:	2118      	movs	r1, #24
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7fb fee2 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800dfdc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	f006 fbfa 	bl	80147dc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    sliderRotation.setXY(500, 220);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800dfee:	22dc      	movs	r2, #220	; 0xdc
 800dff0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7fb ff96 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
    sliderRotation.setBitmaps(touchgfx::Bitmap(BITMAP_SLIDER_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_SLIDER_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_SLIDER_KNOB_ID));
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800e000:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e004:	211d      	movs	r1, #29
 800e006:	4618      	mov	r0, r3
 800e008:	f7fb feca 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800e00c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e010:	211d      	movs	r1, #29
 800e012:	4618      	mov	r0, r3
 800e014:	f7fb fec4 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800e018:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e01c:	211c      	movs	r1, #28
 800e01e:	4618      	mov	r0, r3
 800e020:	f7fb febe 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800e024:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e028:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800e02c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e030:	4620      	mov	r0, r4
 800e032:	f004 fb81 	bl	8012738 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    sliderRotation.setupHorizontalSlider(0, 10, 0, 0, 318);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f503 7080 	add.w	r0, r3, #256	; 0x100
 800e03c:	f44f 739f 	mov.w	r3, #318	; 0x13e
 800e040:	9301      	str	r3, [sp, #4]
 800e042:	2300      	movs	r3, #0
 800e044:	9300      	str	r3, [sp, #0]
 800e046:	2300      	movs	r3, #0
 800e048:	220a      	movs	r2, #10
 800e04a:	2100      	movs	r1, #0
 800e04c:	f004 f9d6 	bl	80123fc <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
    sliderRotation.setValueRange(0, 100);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e056:	2264      	movs	r2, #100	; 0x64
 800e058:	2100      	movs	r1, #0
 800e05a:	4618      	mov	r0, r3
 800e05c:	f004 f933 	bl	80122c6 <_ZN8touchgfx6Slider13setValueRangeEii>
    sliderRotation.setValue(50);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e066:	2132      	movs	r1, #50	; 0x32
 800e068:	4618      	mov	r0, r3
 800e06a:	f004 f8b8 	bl	80121de <_ZN8touchgfx6Slider8setValueEi>
    sliderRotation.setNewValueCallback(sliderValueChangedCallback);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800e07a:	4619      	mov	r1, r3
 800e07c:	4610      	mov	r0, r2
 800e07e:	f7ff fd2a 	bl	800dad6 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>
    sliderRotation.setStopValueCallback(sliderValueConfirmedCallback);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 800e08e:	4619      	mov	r1, r3
 800e090:	4610      	mov	r0, r2
 800e092:	f7ff fd11 	bl	800dab8 <_ZN8touchgfx6Slider20setStopValueCallbackERNS_15GenericCallbackIRKS0_ivEE>

    circleRotation.setPosition(500, 12, 200, 200);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f503 7006 	add.w	r0, r3, #536	; 0x218
 800e09c:	23c8      	movs	r3, #200	; 0xc8
 800e09e:	9300      	str	r3, [sp, #0]
 800e0a0:	23c8      	movs	r3, #200	; 0xc8
 800e0a2:	220c      	movs	r2, #12
 800e0a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e0a8:	f7fb fed8 	bl	8009e5c <_ZN8touchgfx8Drawable11setPositionEssss>
    circleRotation.setCenter(100, 100);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800e0b2:	2264      	movs	r2, #100	; 0x64
 800e0b4:	2164      	movs	r1, #100	; 0x64
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f000 fa82 	bl	800e5c0 <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>
    circleRotation.setRadius(95);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800e0c2:	215f      	movs	r1, #95	; 0x5f
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f000 fc09 	bl	800e8dc <_ZN8touchgfx6Circle9setRadiusIiEEvT_>
    circleRotation.setLineWidth(7);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800e0d0:	2107      	movs	r1, #7
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f000 fc19 	bl	800e90a <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>
    circleRotation.setArc(180, 180);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800e0de:	22b4      	movs	r2, #180	; 0xb4
 800e0e0:	21b4      	movs	r1, #180	; 0xb4
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f000 fa92 	bl	800e60c <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>
    circleRotation.setCapPrecision(10);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800e0ee:	210a      	movs	r1, #10
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f005 fb11 	bl	8013718 <_ZN8touchgfx6Circle15setCapPrecisionEi>
    circleRotationPainter.setColor(touchgfx::Color::getColorFrom24BitRGB(249, 186, 109));
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f503 7420 	add.w	r4, r3, #640	; 0x280
 800e0fc:	226d      	movs	r2, #109	; 0x6d
 800e0fe:	21ba      	movs	r1, #186	; 0xba
 800e100:	20f9      	movs	r0, #249	; 0xf9
 800e102:	e009      	b.n	800e118 <_ZN23RotationVoilierViewBaseC1Ev+0x390>
 800e104:	0802478c 	.word	0x0802478c
 800e108:	0800e43d 	.word	0x0800e43d
 800e10c:	0800e565 	.word	0x0800e565
 800e110:	0800e593 	.word	0x0800e593
 800e114:	0800e41d 	.word	0x0800e41d
 800e118:	f7fc fc1a 	bl	800a950 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800e11c:	4603      	mov	r3, r0
 800e11e:	22ff      	movs	r2, #255	; 0xff
 800e120:	4619      	mov	r1, r3
 800e122:	4620      	mov	r0, r4
 800e124:	f005 ff0f 	bl	8013f46 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
    circleRotation.setPainter(circleRotationPainter);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f503 7206 	add.w	r2, r3, #536	; 0x218
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e134:	4619      	mov	r1, r3
 800e136:	4610      	mov	r0, r2
 800e138:	f005 ff68 	bl	801400c <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
    circleRotation.setVisible(false);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800e142:	2100      	movs	r1, #0
 800e144:	4618      	mov	r0, r3
 800e146:	f7ff fca7 	bl	800da98 <_ZN8touchgfx8Drawable10setVisibleEb>

    imageRotBg.setXY(500, 84);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800e150:	2254      	movs	r2, #84	; 0x54
 800e152:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e156:	4618      	mov	r0, r3
 800e158:	f7fb fee5 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
    imageRotBg.setBitmap(touchgfx::Bitmap(BITMAP_SAILBOAT_2_LARGE_ID));
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f503 7426 	add.w	r4, r3, #664	; 0x298
 800e162:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e166:	2115      	movs	r1, #21
 800e168:	4618      	mov	r0, r3
 800e16a:	f7fb fe19 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800e16e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e172:	4619      	mov	r1, r3
 800e174:	4620      	mov	r0, r4
 800e176:	f006 fb31 	bl	80147dc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textRotationSpeed.setPosition(500, 43, 92, 25);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f503 7038 	add.w	r0, r3, #736	; 0x2e0
 800e180:	2319      	movs	r3, #25
 800e182:	9300      	str	r3, [sp, #0]
 800e184:	235c      	movs	r3, #92	; 0x5c
 800e186:	222b      	movs	r2, #43	; 0x2b
 800e188:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e18c:	f7fb fe66 	bl	8009e5c <_ZN8touchgfx8Drawable11setPositionEssss>
    textRotationSpeed.setColor(touchgfx::Color::getColorFrom24BitRGB(249, 186, 109));
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f503 7438 	add.w	r4, r3, #736	; 0x2e0
 800e196:	226d      	movs	r2, #109	; 0x6d
 800e198:	21ba      	movs	r1, #186	; 0xba
 800e19a:	20f9      	movs	r0, #249	; 0xf9
 800e19c:	f7fc fbd8 	bl	800a950 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	4619      	mov	r1, r3
 800e1a4:	4620      	mov	r0, r4
 800e1a6:	f7fc f9f2 	bl	800a58e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textRotationSpeed.setLinespacing(0);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800e1b0:	2100      	movs	r1, #0
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7fc fa3e 	bl	800a634 <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(textRotationSpeedBuffer, TEXTROTATIONSPEED_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID6).getText());
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f503 7471 	add.w	r4, r3, #964	; 0x3c4
 800e1be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e1c2:	2104      	movs	r1, #4
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7fc f965 	bl	800a494 <_ZN8touchgfx9TypedTextC1Et>
 800e1ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7fc f984 	bl	800a4dc <_ZNK8touchgfx9TypedText7getTextEv>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	4a4f      	ldr	r2, [pc, #316]	; (800e314 <_ZN23RotationVoilierViewBaseC1Ev+0x58c>)
 800e1d8:	210a      	movs	r1, #10
 800e1da:	4620      	mov	r0, r4
 800e1dc:	f009 fcfe 	bl	8017bdc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textRotationSpeed.setWildcard(textRotationSpeedBuffer);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f503 7238 	add.w	r2, r3, #736	; 0x2e0
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	4610      	mov	r0, r2
 800e1f0:	f7fc facb 	bl	800a78a <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textRotationSpeed.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5));
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f503 7438 	add.w	r4, r3, #736	; 0x2e0
 800e1fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e1fe:	2103      	movs	r1, #3
 800e200:	4618      	mov	r0, r3
 800e202:	f7fc f947 	bl	800a494 <_ZN8touchgfx9TypedTextC1Et>
 800e206:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
 800e20a:	4620      	mov	r0, r4
 800e20c:	f006 f90c 	bl	8014428 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    imageRotLeft.setXY(500, 180);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800e216:	22b4      	movs	r2, #180	; 0xb4
 800e218:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e21c:	4618      	mov	r0, r3
 800e21e:	f7fb fe82 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
    imageRotLeft.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_UP_3_52_ID));
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f503 744d 	add.w	r4, r3, #820	; 0x334
 800e228:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800e22c:	2112      	movs	r1, #18
 800e22e:	4618      	mov	r0, r3
 800e230:	f7fb fdb6 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800e234:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800e238:	4619      	mov	r1, r3
 800e23a:	4620      	mov	r0, r4
 800e23c:	f006 face 	bl	80147dc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    imageRotRight.setXY(500, 180);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 800e246:	22b4      	movs	r2, #180	; 0xb4
 800e248:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7fb fe6a 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
    imageRotRight.setBitmap(touchgfx::Bitmap(BITMAP_ICONS8_UP_2_52_ID));
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f503 745f 	add.w	r4, r3, #892	; 0x37c
 800e258:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800e25c:	2111      	movs	r1, #17
 800e25e:	4618      	mov	r0, r3
 800e260:	f7fb fd9e 	bl	8009da0 <_ZN8touchgfx6BitmapC1Et>
 800e264:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800e268:	4619      	mov	r1, r3
 800e26a:	4620      	mov	r0, r4
 800e26c:	f006 fab6 	bl	80147dc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    add(imageBg);
 800e270:	687a      	ldr	r2, [r7, #4]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	3340      	adds	r3, #64	; 0x40
 800e276:	4619      	mov	r1, r3
 800e278:	4610      	mov	r0, r2
 800e27a:	f7fb ffdf 	bl	800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonMessages);
 800e27e:	687a      	ldr	r2, [r7, #4]
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	336c      	adds	r3, #108	; 0x6c
 800e284:	4619      	mov	r1, r3
 800e286:	4610      	mov	r0, r2
 800e288:	f7fb ffd8 	bl	800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(imageRotation);
 800e28c:	687a      	ldr	r2, [r7, #4]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	33a8      	adds	r3, #168	; 0xa8
 800e292:	4619      	mov	r1, r3
 800e294:	4610      	mov	r0, r2
 800e296:	f7fb ffd1 	bl	800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(imageRotationIcon);
 800e29a:	687a      	ldr	r2, [r7, #4]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	33d4      	adds	r3, #212	; 0xd4
 800e2a0:	4619      	mov	r1, r3
 800e2a2:	4610      	mov	r0, r2
 800e2a4:	f7fb ffca 	bl	800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(sliderRotation);
 800e2a8:	687a      	ldr	r2, [r7, #4]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	4610      	mov	r0, r2
 800e2b4:	f7fb ffc2 	bl	800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(circleRotation);
 800e2b8:	687a      	ldr	r2, [r7, #4]
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	4610      	mov	r0, r2
 800e2c4:	f7fb ffba 	bl	800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(imageRotBg);
 800e2c8:	687a      	ldr	r2, [r7, #4]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	4610      	mov	r0, r2
 800e2d4:	f7fb ffb2 	bl	800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textRotationSpeed);
 800e2d8:	687a      	ldr	r2, [r7, #4]
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	4610      	mov	r0, r2
 800e2e4:	f7fb ffaa 	bl	800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(imageRotLeft);
 800e2e8:	687a      	ldr	r2, [r7, #4]
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800e2f0:	4619      	mov	r1, r3
 800e2f2:	4610      	mov	r0, r2
 800e2f4:	f7fb ffa2 	bl	800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(imageRotRight);
 800e2f8:	687a      	ldr	r2, [r7, #4]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 800e300:	4619      	mov	r1, r3
 800e302:	4610      	mov	r0, r2
 800e304:	f7fb ff9a 	bl	800a23c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	4618      	mov	r0, r3
 800e30c:	377c      	adds	r7, #124	; 0x7c
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd90      	pop	{r4, r7, pc}
 800e312:	bf00      	nop
 800e314:	0802394c 	.word	0x0802394c

0800e318 <_ZN23RotationVoilierViewBase11setupScreenEv>:

void RotationVoilierViewBase::setupScreen()
{
 800e318:	b480      	push	{r7}
 800e31a:	b083      	sub	sp, #12
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]

}
 800e320:	bf00      	nop
 800e322:	370c      	adds	r7, #12
 800e324:	46bd      	mov	sp, r7
 800e326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32a:	4770      	bx	lr

0800e32c <_ZN23RotationVoilierViewBase15afterTransitionEv>:

//Called when the screen is done with transition/load
void RotationVoilierViewBase::afterTransition()
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b084      	sub	sp, #16
 800e330:	af02      	add	r7, sp, #8
 800e332:	6078      	str	r0, [r7, #4]
    //InteractionEnterCircle
    //When screen is entered move circleRotation
    //Move circleRotation to x:164, y:12 with LinearIn easing in 250 ms (15 Ticks)
    circleRotation.clearMoveAnimationEndedAction();
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800e33a:	4618      	mov	r0, r3
 800e33c:	f000 fafc 	bl	800e938 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE29clearMoveAnimationEndedActionEv>
    circleRotation.startMoveAnimation(164, 12, 15, touchgfx::EasingEquations::linearEaseIn, touchgfx::EasingEquations::linearEaseIn);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f503 7006 	add.w	r0, r3, #536	; 0x218
 800e346:	4b34      	ldr	r3, [pc, #208]	; (800e418 <_ZN23RotationVoilierViewBase15afterTransitionEv+0xec>)
 800e348:	9301      	str	r3, [sp, #4]
 800e34a:	4b33      	ldr	r3, [pc, #204]	; (800e418 <_ZN23RotationVoilierViewBase15afterTransitionEv+0xec>)
 800e34c:	9300      	str	r3, [sp, #0]
 800e34e:	230f      	movs	r3, #15
 800e350:	220c      	movs	r2, #12
 800e352:	21a4      	movs	r1, #164	; 0xa4
 800e354:	f000 fafd 	bl	800e952 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE18startMoveAnimationEsstPFstsstES4_>

    //InteractionEntreSlider
    //When screen is entered move sliderRotation
    //Move sliderRotation to x:89, y:220 with LinearIn easing in 250 ms (15 Ticks)
    sliderRotation.clearMoveAnimationEndedAction();
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e35e:	4618      	mov	r0, r3
 800e360:	f000 fb51 	bl	800ea06 <_ZN8touchgfx12MoveAnimatorINS_6SliderEE29clearMoveAnimationEndedActionEv>
    sliderRotation.startMoveAnimation(89, 220, 15, touchgfx::EasingEquations::linearEaseIn, touchgfx::EasingEquations::linearEaseIn);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f503 7080 	add.w	r0, r3, #256	; 0x100
 800e36a:	4b2b      	ldr	r3, [pc, #172]	; (800e418 <_ZN23RotationVoilierViewBase15afterTransitionEv+0xec>)
 800e36c:	9301      	str	r3, [sp, #4]
 800e36e:	4b2a      	ldr	r3, [pc, #168]	; (800e418 <_ZN23RotationVoilierViewBase15afterTransitionEv+0xec>)
 800e370:	9300      	str	r3, [sp, #0]
 800e372:	230f      	movs	r3, #15
 800e374:	22dc      	movs	r2, #220	; 0xdc
 800e376:	2159      	movs	r1, #89	; 0x59
 800e378:	f000 fb53 	bl	800ea22 <_ZN8touchgfx12MoveAnimatorINS_6SliderEE18startMoveAnimationEsstPFstsstES4_>

    //InteractionEnterImageRotBg
    //When screen is entered move imageRotBg
    //Move imageRotBg to x:214, y:84 with LinearIn easing in 250 ms (15 Ticks)
    imageRotBg.clearMoveAnimationEndedAction();
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800e382:	4618      	mov	r0, r3
 800e384:	f7fd f885 	bl	800b492 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE29clearMoveAnimationEndedActionEv>
    imageRotBg.startMoveAnimation(214, 84, 15, touchgfx::EasingEquations::linearEaseIn, touchgfx::EasingEquations::linearEaseIn);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f503 7026 	add.w	r0, r3, #664	; 0x298
 800e38e:	4b22      	ldr	r3, [pc, #136]	; (800e418 <_ZN23RotationVoilierViewBase15afterTransitionEv+0xec>)
 800e390:	9301      	str	r3, [sp, #4]
 800e392:	4b21      	ldr	r3, [pc, #132]	; (800e418 <_ZN23RotationVoilierViewBase15afterTransitionEv+0xec>)
 800e394:	9300      	str	r3, [sp, #0]
 800e396:	230f      	movs	r3, #15
 800e398:	2254      	movs	r2, #84	; 0x54
 800e39a:	21d6      	movs	r1, #214	; 0xd6
 800e39c:	f7fd f886 	bl	800b4ac <_ZN8touchgfx12MoveAnimatorINS_5ImageEE18startMoveAnimationEsstPFstsstES4_>

    //InteractionEnterTextRotationSpeed
    //When screen is entered move textRotationSpeed
    //Move textRotationSpeed to x:218, y:43 with LinearIn easing in 250 ms (15 Ticks)
    textRotationSpeed.clearMoveAnimationEndedAction();
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7fc ffa2 	bl	800b2f0 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE29clearMoveAnimationEndedActionEv>
    textRotationSpeed.startMoveAnimation(218, 43, 15, touchgfx::EasingEquations::linearEaseIn, touchgfx::EasingEquations::linearEaseIn);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f503 7038 	add.w	r0, r3, #736	; 0x2e0
 800e3b2:	4b19      	ldr	r3, [pc, #100]	; (800e418 <_ZN23RotationVoilierViewBase15afterTransitionEv+0xec>)
 800e3b4:	9301      	str	r3, [sp, #4]
 800e3b6:	4b18      	ldr	r3, [pc, #96]	; (800e418 <_ZN23RotationVoilierViewBase15afterTransitionEv+0xec>)
 800e3b8:	9300      	str	r3, [sp, #0]
 800e3ba:	230f      	movs	r3, #15
 800e3bc:	222b      	movs	r2, #43	; 0x2b
 800e3be:	21da      	movs	r1, #218	; 0xda
 800e3c0:	f7fc ffa3 	bl	800b30a <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE18startMoveAnimationEsstPFstsstES4_>

    //InteractionEnterRotLeft
    //When screen is entered move imageRotLeft
    //Move imageRotLeft to x:123, y:180 with LinearIn easing in 250 ms (15 Ticks)
    imageRotLeft.clearMoveAnimationEndedAction();
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7fd f861 	bl	800b492 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE29clearMoveAnimationEndedActionEv>
    imageRotLeft.startMoveAnimation(123, 180, 15, touchgfx::EasingEquations::linearEaseIn, touchgfx::EasingEquations::linearEaseIn);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f503 704d 	add.w	r0, r3, #820	; 0x334
 800e3d6:	4b10      	ldr	r3, [pc, #64]	; (800e418 <_ZN23RotationVoilierViewBase15afterTransitionEv+0xec>)
 800e3d8:	9301      	str	r3, [sp, #4]
 800e3da:	4b0f      	ldr	r3, [pc, #60]	; (800e418 <_ZN23RotationVoilierViewBase15afterTransitionEv+0xec>)
 800e3dc:	9300      	str	r3, [sp, #0]
 800e3de:	230f      	movs	r3, #15
 800e3e0:	22b4      	movs	r2, #180	; 0xb4
 800e3e2:	217b      	movs	r1, #123	; 0x7b
 800e3e4:	f7fd f862 	bl	800b4ac <_ZN8touchgfx12MoveAnimatorINS_5ImageEE18startMoveAnimationEsstPFstsstES4_>

    //InteractionEnterRotRight
    //When screen is entered move imageRotRight
    //Move imageRotRight to x:374, y:180 with LinearIn easing in 250 ms (15 Ticks)
    imageRotRight.clearMoveAnimationEndedAction();
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f7fd f84f 	bl	800b492 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE29clearMoveAnimationEndedActionEv>
    imageRotRight.startMoveAnimation(374, 180, 15, touchgfx::EasingEquations::linearEaseIn, touchgfx::EasingEquations::linearEaseIn);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f503 705f 	add.w	r0, r3, #892	; 0x37c
 800e3fa:	4b07      	ldr	r3, [pc, #28]	; (800e418 <_ZN23RotationVoilierViewBase15afterTransitionEv+0xec>)
 800e3fc:	9301      	str	r3, [sp, #4]
 800e3fe:	4b06      	ldr	r3, [pc, #24]	; (800e418 <_ZN23RotationVoilierViewBase15afterTransitionEv+0xec>)
 800e400:	9300      	str	r3, [sp, #0]
 800e402:	230f      	movs	r3, #15
 800e404:	22b4      	movs	r2, #180	; 0xb4
 800e406:	f44f 71bb 	mov.w	r1, #374	; 0x176
 800e40a:	f7fd f84f 	bl	800b4ac <_ZN8touchgfx12MoveAnimatorINS_5ImageEE18startMoveAnimationEsstPFstsstES4_>
}
 800e40e:	bf00      	nop
 800e410:	3708      	adds	r7, #8
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
 800e416:	bf00      	nop
 800e418:	08016ce7 	.word	0x08016ce7

0800e41c <_ZN23RotationVoilierViewBase43interactionExitRotRightEndedCallbackHandlerERKN8touchgfx12MoveAnimatorINS0_5ImageEEE>:

void RotationVoilierViewBase::interactionExitRotRightEndedCallbackHandler(const touchgfx::MoveAnimator<touchgfx::Image>& comp)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b082      	sub	sp, #8
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	6039      	str	r1, [r7, #0]
    //InteractionChangeScreenMessage
    //When InteractionExitRotRight completed change screen to Messages
    //Go to Messages with no screen transition
    application().gotoMessagesScreenNoTransition();
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f7ff fca3 	bl	800dd72 <_ZN23RotationVoilierViewBase11applicationEv>
 800e42c:	4603      	mov	r3, r0
 800e42e:	4618      	mov	r0, r3
 800e430:	f7fe f8e0 	bl	800c5f4 <_ZN23FrontendApplicationBase30gotoMessagesScreenNoTransitionEv>
}
 800e434:	bf00      	nop
 800e436:	3708      	adds	r7, #8
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <_ZN23RotationVoilierViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void RotationVoilierViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b084      	sub	sp, #16
 800e440:	af02      	add	r7, sp, #8
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	6039      	str	r1, [r7, #0]
    if (&src == &buttonMessages)
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	336c      	adds	r3, #108	; 0x6c
 800e44a:	683a      	ldr	r2, [r7, #0]
 800e44c:	429a      	cmp	r2, r3
 800e44e:	f040 8082 	bne.w	800e556 <_ZN23RotationVoilierViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x11a>
    {
        //InteractionButtonMessagesClicked
        //When buttonMessages clicked call virtual function
        //Call ButtonMessagesClicked
        ButtonMessagesClicked();
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	332c      	adds	r3, #44	; 0x2c
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	4798      	blx	r3

        //InteractionExitSliderRotation
        //When InteractionButtonMessagesClicked completed move sliderRotation
        //Move sliderRotation to x:500, y:220 with LinearOut easing in 250 ms (15 Ticks)
        sliderRotation.clearMoveAnimationEndedAction();
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e464:	4618      	mov	r0, r3
 800e466:	f000 face 	bl	800ea06 <_ZN8touchgfx12MoveAnimatorINS_6SliderEE29clearMoveAnimationEndedActionEv>
        sliderRotation.startMoveAnimation(500, 220, 15, touchgfx::EasingEquations::linearEaseOut, touchgfx::EasingEquations::linearEaseOut);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f503 7080 	add.w	r0, r3, #256	; 0x100
 800e470:	4b3b      	ldr	r3, [pc, #236]	; (800e560 <_ZN23RotationVoilierViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x124>)
 800e472:	9301      	str	r3, [sp, #4]
 800e474:	4b3a      	ldr	r3, [pc, #232]	; (800e560 <_ZN23RotationVoilierViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x124>)
 800e476:	9300      	str	r3, [sp, #0]
 800e478:	230f      	movs	r3, #15
 800e47a:	22dc      	movs	r2, #220	; 0xdc
 800e47c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e480:	f000 facf 	bl	800ea22 <_ZN8touchgfx12MoveAnimatorINS_6SliderEE18startMoveAnimationEsstPFstsstES4_>

        //InteractionExitCicleRotation
        //When InteractionButtonMessagesClicked completed move circleRotation
        //Move circleRotation to x:500, y:12 with LinearOut easing in 250 ms (15 Ticks)
        circleRotation.clearMoveAnimationEndedAction();
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800e48a:	4618      	mov	r0, r3
 800e48c:	f000 fa54 	bl	800e938 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE29clearMoveAnimationEndedActionEv>
        circleRotation.startMoveAnimation(500, 12, 15, touchgfx::EasingEquations::linearEaseOut, touchgfx::EasingEquations::linearEaseOut);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f503 7006 	add.w	r0, r3, #536	; 0x218
 800e496:	4b32      	ldr	r3, [pc, #200]	; (800e560 <_ZN23RotationVoilierViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x124>)
 800e498:	9301      	str	r3, [sp, #4]
 800e49a:	4b31      	ldr	r3, [pc, #196]	; (800e560 <_ZN23RotationVoilierViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x124>)
 800e49c:	9300      	str	r3, [sp, #0]
 800e49e:	230f      	movs	r3, #15
 800e4a0:	220c      	movs	r2, #12
 800e4a2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e4a6:	f000 fa54 	bl	800e952 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE18startMoveAnimationEsstPFstsstES4_>

        //InteractionExitImageRotBg
        //When InteractionButtonMessagesClicked completed move imageRotBg
        //Move imageRotBg to x:500, y:84 with LinearOut easing in 250 ms (15 Ticks)
        imageRotBg.clearMoveAnimationEndedAction();
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f7fc ffee 	bl	800b492 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE29clearMoveAnimationEndedActionEv>
        imageRotBg.startMoveAnimation(500, 84, 15, touchgfx::EasingEquations::linearEaseOut, touchgfx::EasingEquations::linearEaseOut);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f503 7026 	add.w	r0, r3, #664	; 0x298
 800e4bc:	4b28      	ldr	r3, [pc, #160]	; (800e560 <_ZN23RotationVoilierViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x124>)
 800e4be:	9301      	str	r3, [sp, #4]
 800e4c0:	4b27      	ldr	r3, [pc, #156]	; (800e560 <_ZN23RotationVoilierViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x124>)
 800e4c2:	9300      	str	r3, [sp, #0]
 800e4c4:	230f      	movs	r3, #15
 800e4c6:	2254      	movs	r2, #84	; 0x54
 800e4c8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e4cc:	f7fc ffee 	bl	800b4ac <_ZN8touchgfx12MoveAnimatorINS_5ImageEE18startMoveAnimationEsstPFstsstES4_>

        //InteractionTextRotationSpeed
        //When InteractionButtonMessagesClicked completed move textRotationSpeed
        //Move textRotationSpeed to x:500, y:43 with LinearOut easing in 250 ms (15 Ticks)
        textRotationSpeed.clearMoveAnimationEndedAction();
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7fc ff0a 	bl	800b2f0 <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE29clearMoveAnimationEndedActionEv>
        textRotationSpeed.startMoveAnimation(500, 43, 15, touchgfx::EasingEquations::linearEaseOut, touchgfx::EasingEquations::linearEaseOut);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f503 7038 	add.w	r0, r3, #736	; 0x2e0
 800e4e2:	4b1f      	ldr	r3, [pc, #124]	; (800e560 <_ZN23RotationVoilierViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x124>)
 800e4e4:	9301      	str	r3, [sp, #4]
 800e4e6:	4b1e      	ldr	r3, [pc, #120]	; (800e560 <_ZN23RotationVoilierViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x124>)
 800e4e8:	9300      	str	r3, [sp, #0]
 800e4ea:	230f      	movs	r3, #15
 800e4ec:	222b      	movs	r2, #43	; 0x2b
 800e4ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e4f2:	f7fc ff0a 	bl	800b30a <_ZN8touchgfx12MoveAnimatorINS_23TextAreaWithOneWildcardEE18startMoveAnimationEsstPFstsstES4_>

        //InteractionExitRotLeft
        //When InteractionButtonMessagesClicked completed move imageRotLeft
        //Move imageRotLeft to x:500, y:180 with LinearOut easing in 250 ms (15 Ticks)
        imageRotLeft.clearMoveAnimationEndedAction();
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7fc ffc8 	bl	800b492 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE29clearMoveAnimationEndedActionEv>
        imageRotLeft.startMoveAnimation(500, 180, 15, touchgfx::EasingEquations::linearEaseOut, touchgfx::EasingEquations::linearEaseOut);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f503 704d 	add.w	r0, r3, #820	; 0x334
 800e508:	4b15      	ldr	r3, [pc, #84]	; (800e560 <_ZN23RotationVoilierViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x124>)
 800e50a:	9301      	str	r3, [sp, #4]
 800e50c:	4b14      	ldr	r3, [pc, #80]	; (800e560 <_ZN23RotationVoilierViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x124>)
 800e50e:	9300      	str	r3, [sp, #0]
 800e510:	230f      	movs	r3, #15
 800e512:	22b4      	movs	r2, #180	; 0xb4
 800e514:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e518:	f7fc ffc8 	bl	800b4ac <_ZN8touchgfx12MoveAnimatorINS_5ImageEE18startMoveAnimationEsstPFstsstES4_>

        //InteractionExitRotRight
        //When InteractionButtonMessagesClicked completed move imageRotRight
        //Move imageRotRight to x:500, y:180 with LinearOut easing in 300 ms (18 Ticks)
        imageRotRight.clearMoveAnimationEndedAction();
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f503 735f 	add.w	r3, r3, #892	; 0x37c
 800e522:	4618      	mov	r0, r3
 800e524:	f7fc ffb5 	bl	800b492 <_ZN8touchgfx12MoveAnimatorINS_5ImageEE29clearMoveAnimationEndedActionEv>
        imageRotRight.startMoveAnimation(500, 180, 18, touchgfx::EasingEquations::linearEaseOut, touchgfx::EasingEquations::linearEaseOut);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f503 705f 	add.w	r0, r3, #892	; 0x37c
 800e52e:	4b0c      	ldr	r3, [pc, #48]	; (800e560 <_ZN23RotationVoilierViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x124>)
 800e530:	9301      	str	r3, [sp, #4]
 800e532:	4b0b      	ldr	r3, [pc, #44]	; (800e560 <_ZN23RotationVoilierViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x124>)
 800e534:	9300      	str	r3, [sp, #0]
 800e536:	2312      	movs	r3, #18
 800e538:	22b4      	movs	r2, #180	; 0xb4
 800e53a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e53e:	f7fc ffb5 	bl	800b4ac <_ZN8touchgfx12MoveAnimatorINS_5ImageEE18startMoveAnimationEsstPFstsstES4_>
        imageRotRight.setMoveAnimationEndedAction(interactionExitRotRightEndedCallback);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f503 725f 	add.w	r2, r3, #892	; 0x37c
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800e54e:	4619      	mov	r1, r3
 800e550:	4610      	mov	r0, r2
 800e552:	f000 fac2 	bl	800eada <_ZN8touchgfx12MoveAnimatorINS_5ImageEE27setMoveAnimationEndedActionERNS_15GenericCallbackIRKS2_vvEE>
    }
}
 800e556:	bf00      	nop
 800e558:	3708      	adds	r7, #8
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	bf00      	nop
 800e560:	08016ceb 	.word	0x08016ceb

0800e564 <_ZN23RotationVoilierViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi>:

void RotationVoilierViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b084      	sub	sp, #16
 800e568:	af00      	add	r7, sp, #0
 800e56a:	60f8      	str	r0, [r7, #12]
 800e56c:	60b9      	str	r1, [r7, #8]
 800e56e:	607a      	str	r2, [r7, #4]
    if (&src == &sliderRotation)
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e576:	68ba      	ldr	r2, [r7, #8]
 800e578:	429a      	cmp	r2, r3
 800e57a:	d106      	bne.n	800e58a <_ZN23RotationVoilierViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x26>
    {
        //InteractionsliderRotationChanged
        //When sliderRotation value changed call virtual function
        //Call sliderRotationChanged
        sliderRotationChanged(value);
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	3330      	adds	r3, #48	; 0x30
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	6879      	ldr	r1, [r7, #4]
 800e586:	68f8      	ldr	r0, [r7, #12]
 800e588:	4798      	blx	r3
    }
}
 800e58a:	bf00      	nop
 800e58c:	3710      	adds	r7, #16
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}

0800e592 <_ZN23RotationVoilierViewBase35sliderValueConfirmedCallbackHandlerERKN8touchgfx6SliderEi>:

void RotationVoilierViewBase::sliderValueConfirmedCallbackHandler(const touchgfx::Slider& src, int value)
{
 800e592:	b580      	push	{r7, lr}
 800e594:	b084      	sub	sp, #16
 800e596:	af00      	add	r7, sp, #0
 800e598:	60f8      	str	r0, [r7, #12]
 800e59a:	60b9      	str	r1, [r7, #8]
 800e59c:	607a      	str	r2, [r7, #4]
    if (&src == &sliderRotation)
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800e5a4:	68ba      	ldr	r2, [r7, #8]
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d106      	bne.n	800e5b8 <_ZN23RotationVoilierViewBase35sliderValueConfirmedCallbackHandlerERKN8touchgfx6SliderEi+0x26>
    {
        //InteractionRotationReleased
        //When sliderRotation value confirmed call virtual function
        //Call sliderRotationReleased
        sliderRotationReleased(value);
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	3334      	adds	r3, #52	; 0x34
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	6879      	ldr	r1, [r7, #4]
 800e5b4:	68f8      	ldr	r0, [r7, #12]
 800e5b6:	4798      	blx	r3
    }
}
 800e5b8:	bf00      	nop
 800e5ba:	3710      	adds	r7, #16
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}

0800e5c0 <_ZN8touchgfx6Circle9setCenterIiEEvT_S2_>:
     * @param y The y coordinate of center.
     *
     * @note The area containing the Circle is not invalidated.
     */
    template <typename T>
    void setCenter(const T x, const T y)
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b088      	sub	sp, #32
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	60f8      	str	r0, [r7, #12]
 800e5c8:	60b9      	str	r1, [r7, #8]
 800e5ca:	607a      	str	r2, [r7, #4]
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	61bb      	str	r3, [r7, #24]
#ifndef  __ICCARM__
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5(int(value * Rasterizer::POLY_BASE_SIZE));
 800e5d0:	69bb      	ldr	r3, [r7, #24]
 800e5d2:	015a      	lsls	r2, r3, #5
 800e5d4:	f107 0314 	add.w	r3, r7, #20
 800e5d8:	4611      	mov	r1, r2
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7ff fac0 	bl	800db60 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	461a      	mov	r2, r3
    {
        this->circleCenterX = CWRUtil::toQ5<T>(x);
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	631a      	str	r2, [r3, #48]	; 0x30
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	61fb      	str	r3, [r7, #28]
 800e5ec:	69fb      	ldr	r3, [r7, #28]
 800e5ee:	015a      	lsls	r2, r3, #5
 800e5f0:	f107 0310 	add.w	r3, r7, #16
 800e5f4:	4611      	mov	r1, r2
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7ff fab2 	bl	800db60 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	461a      	mov	r2, r3
        this->circleCenterY = CWRUtil::toQ5<T>(y);
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800e604:	bf00      	nop
 800e606:	3720      	adds	r7, #32
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}

0800e60c <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>:
     * @see updateArcStart
     * @see updateArcEnd
     * @see updateArc
     */
    template <typename T>
    void setArc(const T startAngle, const T endAngle)
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b088      	sub	sp, #32
 800e610:	af00      	add	r7, sp, #0
 800e612:	60f8      	str	r0, [r7, #12]
 800e614:	60b9      	str	r1, [r7, #8]
 800e616:	607a      	str	r2, [r7, #4]
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	61bb      	str	r3, [r7, #24]
 800e61c:	69bb      	ldr	r3, [r7, #24]
 800e61e:	015a      	lsls	r2, r3, #5
 800e620:	f107 0314 	add.w	r3, r7, #20
 800e624:	4611      	mov	r1, r2
 800e626:	4618      	mov	r0, r3
 800e628:	f7ff fa9a 	bl	800db60 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	461a      	mov	r2, r3
    {
        circleArcAngleStart = CWRUtil::toQ5<T>(startAngle);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	63da      	str	r2, [r3, #60]	; 0x3c
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	61fb      	str	r3, [r7, #28]
 800e638:	69fb      	ldr	r3, [r7, #28]
 800e63a:	015a      	lsls	r2, r3, #5
 800e63c:	f107 0310 	add.w	r3, r7, #16
 800e640:	4611      	mov	r1, r2
 800e642:	4618      	mov	r0, r3
 800e644:	f7ff fa8c 	bl	800db60 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	461a      	mov	r2, r3
        circleArcAngleEnd = CWRUtil::toQ5<T>(endAngle);
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	641a      	str	r2, [r3, #64]	; 0x40
    }
 800e650:	bf00      	nop
 800e652:	3720      	adds	r7, #32
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}

0800e658 <_ZN8touchgfx12MoveAnimatorINS_6SliderEED1Ev>:
    virtual ~MoveAnimator()
 800e658:	b580      	push	{r7, lr}
 800e65a:	b082      	sub	sp, #8
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
    }
 800e660:	4a05      	ldr	r2, [pc, #20]	; (800e678 <_ZN8touchgfx12MoveAnimatorINS_6SliderEED1Ev+0x20>)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	601a      	str	r2, [r3, #0]
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	4618      	mov	r0, r3
 800e66a:	f003 fdb7 	bl	80121dc <_ZN8touchgfx6SliderD1Ev>
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	4618      	mov	r0, r3
 800e672:	3708      	adds	r7, #8
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}
 800e678:	080248bc 	.word	0x080248bc

0800e67c <_ZN8touchgfx12MoveAnimatorINS_6SliderEED0Ev>:
    virtual ~MoveAnimator()
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
    }
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f7ff ffe7 	bl	800e658 <_ZN8touchgfx12MoveAnimatorINS_6SliderEED1Ev>
 800e68a:	f44f 718c 	mov.w	r1, #280	; 0x118
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f013 f8dd 	bl	802184e <_ZdlPvj>
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	4618      	mov	r0, r3
 800e698:	3708      	adds	r7, #8
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
	...

0800e6a0 <_ZN8touchgfx6CircleD1Ev>:
class Circle : public CanvasWidget
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b082      	sub	sp, #8
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	4a05      	ldr	r2, [pc, #20]	; (800e6c0 <_ZN8touchgfx6CircleD1Ev+0x20>)
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	601a      	str	r2, [r3, #0]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f005 fd89 	bl	80141c8 <_ZN8touchgfx12CanvasWidgetD1Ev>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3708      	adds	r7, #8
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}
 800e6c0:	080261b0 	.word	0x080261b0

0800e6c4 <_ZN8touchgfx6CircleD0Ev>:
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f7ff ffe7 	bl	800e6a0 <_ZN8touchgfx6CircleD1Ev>
 800e6d2:	214c      	movs	r1, #76	; 0x4c
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f013 f8ba 	bl	802184e <_ZdlPvj>
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	4618      	mov	r0, r3
 800e6de:	3708      	adds	r7, #8
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>:
    virtual ~MoveAnimator()
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b082      	sub	sp, #8
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
    }
 800e6ec:	4a05      	ldr	r2, [pc, #20]	; (800e704 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev+0x20>)
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	601a      	str	r2, [r3, #0]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f7ff ffd3 	bl	800e6a0 <_ZN8touchgfx6CircleD1Ev>
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	3708      	adds	r7, #8
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}
 800e704:	0802482c 	.word	0x0802482c

0800e708 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED0Ev>:
    virtual ~MoveAnimator()
 800e708:	b580      	push	{r7, lr}
 800e70a:	b082      	sub	sp, #8
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
    }
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f7ff ffe7 	bl	800e6e4 <_ZN8touchgfx12MoveAnimatorINS_6CircleEED1Ev>
 800e716:	2168      	movs	r1, #104	; 0x68
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f013 f898 	bl	802184e <_ZdlPvj>
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	4618      	mov	r0, r3
 800e722:	3708      	adds	r7, #8
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <_ZN8touchgfx4ViewI24RotationVoilierPresenterEC1Ev>:
    View() : presenter(0)
 800e728:	b580      	push	{r7, lr}
 800e72a:	b082      	sub	sp, #8
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	4618      	mov	r0, r3
 800e734:	f008 f924 	bl	8016980 <_ZN8touchgfx6ScreenC1Ev>
 800e738:	4a05      	ldr	r2, [pc, #20]	; (800e750 <_ZN8touchgfx4ViewI24RotationVoilierPresenterEC1Ev+0x28>)
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	601a      	str	r2, [r3, #0]
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2200      	movs	r2, #0
 800e742:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	4618      	mov	r0, r3
 800e748:	3708      	adds	r7, #8
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}
 800e74e:	bf00      	nop
 800e750:	08024994 	.word	0x08024994

0800e754 <_ZN8touchgfx12MoveAnimatorINS_6SliderEEC1Ev>:
    MoveAnimator() :
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
        moveAnimationEndedCallback(0)
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	4618      	mov	r0, r3
 800e760:	f003 ff96 	bl	8012690 <_ZN8touchgfx6SliderC1Ev>
 800e764:	4a0b      	ldr	r2, [pc, #44]	; (800e794 <_ZN8touchgfx12MoveAnimatorINS_6SliderEEC1Ev+0x40>)
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	601a      	str	r2, [r3, #0]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2200      	movs	r2, #0
 800e76e:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2200      	movs	r2, #0
 800e776:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2200      	movs	r2, #0
 800e77e:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2200      	movs	r2, #0
 800e786:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	4618      	mov	r0, r3
 800e78e:	3708      	adds	r7, #8
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}
 800e794:	080248bc 	.word	0x080248bc

0800e798 <_ZN8touchgfx12MoveAnimatorINS_6CircleEEC1Ev>:
    MoveAnimator() :
 800e798:	b580      	push	{r7, lr}
 800e79a:	b082      	sub	sp, #8
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
        moveAnimationEndedCallback(0)
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	f004 ffa0 	bl	80136e8 <_ZN8touchgfx6CircleC1Ev>
 800e7a8:	4a0b      	ldr	r2, [pc, #44]	; (800e7d8 <_ZN8touchgfx12MoveAnimatorINS_6CircleEEC1Ev+0x40>)
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	601a      	str	r2, [r3, #0]
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	665a      	str	r2, [r3, #100]	; 0x64
    }
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3708      	adds	r7, #8
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}
 800e7d6:	bf00      	nop
 800e7d8:	0802482c 	.word	0x0802482c

0800e7dc <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b084      	sub	sp, #16
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	60f8      	str	r0, [r7, #12]
 800e7e4:	60b9      	str	r1, [r7, #8]
 800e7e6:	4639      	mov	r1, r7
 800e7e8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7fc fcbe 	bl	800b170 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800e7f4:	4a08      	ldr	r2, [pc, #32]	; (800e818 <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	68ba      	ldr	r2, [r7, #8]
 800e7fe:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	3308      	adds	r3, #8
 800e804:	463a      	mov	r2, r7
 800e806:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e80a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	4618      	mov	r0, r3
 800e812:	3710      	adds	r7, #16
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}
 800e818:	08024814 	.word	0x08024814

0800e81c <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>:
class GenericCallback<T1, T2, void>
 800e81c:	b480      	push	{r7}
 800e81e:	b083      	sub	sp, #12
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	4a04      	ldr	r2, [pc, #16]	; (800e838 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev+0x1c>)
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	601a      	str	r2, [r3, #0]
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	4618      	mov	r0, r3
 800e82e:	370c      	adds	r7, #12
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr
 800e838:	080249c8 	.word	0x080249c8

0800e83c <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_2)(T1, T2))
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b084      	sub	sp, #16
 800e840:	af00      	add	r7, sp, #0
 800e842:	60f8      	str	r0, [r7, #12]
 800e844:	60b9      	str	r1, [r7, #8]
 800e846:	4639      	mov	r1, r7
 800e848:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	4618      	mov	r0, r3
 800e850:	f7ff ffe4 	bl	800e81c <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>
 800e854:	4a08      	ldr	r2, [pc, #32]	; (800e878 <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE+0x3c>)
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	68ba      	ldr	r2, [r7, #8]
 800e85e:	605a      	str	r2, [r3, #4]
        this->pmemfun_2 = pmemfun_2;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	3308      	adds	r3, #8
 800e864:	463a      	mov	r2, r7
 800e866:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e86a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	4618      	mov	r0, r3
 800e872:	3710      	adds	r7, #16
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}
 800e878:	080247fc 	.word	0x080247fc

0800e87c <_ZN8touchgfx15GenericCallbackIRKNS_12MoveAnimatorINS_5ImageEEEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800e87c:	b480      	push	{r7}
 800e87e:	b083      	sub	sp, #12
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
 800e884:	4a04      	ldr	r2, [pc, #16]	; (800e898 <_ZN8touchgfx15GenericCallbackIRKNS_12MoveAnimatorINS_5ImageEEEvvEC1Ev+0x1c>)
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	601a      	str	r2, [r3, #0]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	4618      	mov	r0, r3
 800e88e:	370c      	adds	r7, #12
 800e890:	46bd      	mov	sp, r7
 800e892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e896:	4770      	bx	lr
 800e898:	080247e4 	.word	0x080247e4

0800e89c <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_12MoveAnimatorINS_5ImageEEEvvEC1EPS1_MS1_FvS6_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b084      	sub	sp, #16
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	60f8      	str	r0, [r7, #12]
 800e8a4:	60b9      	str	r1, [r7, #8]
 800e8a6:	4639      	mov	r1, r7
 800e8a8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7ff ffe4 	bl	800e87c <_ZN8touchgfx15GenericCallbackIRKNS_12MoveAnimatorINS_5ImageEEEvvEC1Ev>
 800e8b4:	4a08      	ldr	r2, [pc, #32]	; (800e8d8 <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_12MoveAnimatorINS_5ImageEEEvvEC1EPS1_MS1_FvS6_E+0x3c>)
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	68ba      	ldr	r2, [r7, #8]
 800e8be:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	3308      	adds	r3, #8
 800e8c4:	463a      	mov	r2, r7
 800e8c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8ca:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3710      	adds	r7, #16
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}
 800e8d8:	080247cc 	.word	0x080247cc

0800e8dc <_ZN8touchgfx6Circle9setRadiusIiEEvT_>:
    void setRadius(const T r)
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b084      	sub	sp, #16
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	6039      	str	r1, [r7, #0]
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	60fb      	str	r3, [r7, #12]
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	015a      	lsls	r2, r3, #5
 800e8ee:	f107 0308 	add.w	r3, r7, #8
 800e8f2:	4611      	mov	r1, r2
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7ff f933 	bl	800db60 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	461a      	mov	r2, r3
        this->circleRadius = CWRUtil::toQ5<T>(r);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	639a      	str	r2, [r3, #56]	; 0x38
    }
 800e902:	bf00      	nop
 800e904:	3710      	adds	r7, #16
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}

0800e90a <_ZN8touchgfx6Circle12setLineWidthIiEEvT_>:
     * @note The area containing the Circle is not invalidated.
     * @note if the new line with is smaller than the old width, the circle should be invalidated
     *       before updating the width to ensure that the old circle is completely erased.
     */
    template <typename T>
    void setLineWidth(const T width)
 800e90a:	b580      	push	{r7, lr}
 800e90c:	b084      	sub	sp, #16
 800e90e:	af00      	add	r7, sp, #0
 800e910:	6078      	str	r0, [r7, #4]
 800e912:	6039      	str	r1, [r7, #0]
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	60fb      	str	r3, [r7, #12]
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	015a      	lsls	r2, r3, #5
 800e91c:	f107 0308 	add.w	r3, r7, #8
 800e920:	4611      	mov	r1, r2
 800e922:	4618      	mov	r0, r3
 800e924:	f7ff f91c 	bl	800db60 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	461a      	mov	r2, r3
    {
        this->circleLineWidth = CWRUtil::toQ5<T>(width);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	645a      	str	r2, [r3, #68]	; 0x44
    }
 800e930:	bf00      	nop
 800e932:	3710      	adds	r7, #16
 800e934:	46bd      	mov	sp, r7
 800e936:	bd80      	pop	{r7, pc}

0800e938 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE29clearMoveAnimationEndedActionEv>:
    void clearMoveAnimationEndedAction()
 800e938:	b480      	push	{r7}
 800e93a:	b083      	sub	sp, #12
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
        moveAnimationEndedCallback = 0;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2200      	movs	r2, #0
 800e944:	665a      	str	r2, [r3, #100]	; 0x64
    }
 800e946:	bf00      	nop
 800e948:	370c      	adds	r7, #12
 800e94a:	46bd      	mov	sp, r7
 800e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e950:	4770      	bx	lr

0800e952 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE18startMoveAnimationEsstPFstsstES4_>:
    void startMoveAnimation(int16_t endX, int16_t endY, uint16_t duration, EasingEquation xProgressionEquation = &EasingEquations::linearEaseNone, EasingEquation yProgressionEquation = &EasingEquations::linearEaseNone)
 800e952:	b580      	push	{r7, lr}
 800e954:	b084      	sub	sp, #16
 800e956:	af00      	add	r7, sp, #0
 800e958:	60f8      	str	r0, [r7, #12]
 800e95a:	4608      	mov	r0, r1
 800e95c:	4611      	mov	r1, r2
 800e95e:	461a      	mov	r2, r3
 800e960:	4603      	mov	r3, r0
 800e962:	817b      	strh	r3, [r7, #10]
 800e964:	460b      	mov	r3, r1
 800e966:	813b      	strh	r3, [r7, #8]
 800e968:	4613      	mov	r3, r2
 800e96a:	80fb      	strh	r3, [r7, #6]
        if (!moveAnimationRunning)
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800e972:	f083 0301 	eor.w	r3, r3, #1
 800e976:	b2db      	uxtb	r3, r3
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d007      	beq.n	800e98c <_ZN8touchgfx12MoveAnimatorINS_6CircleEE18startMoveAnimationEsstPFstsstES4_+0x3a>
            Application::getInstance()->registerTimerWidget(this);
 800e97c:	f007 f822 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 800e980:	4602      	mov	r2, r0
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	4619      	mov	r1, r3
 800e986:	4610      	mov	r0, r2
 800e988:	f007 f822 	bl	80159d0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        moveAnimationCounter = 0;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	2200      	movs	r2, #0
 800e990:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        moveAnimationStartX = T::getX();
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	4618      	mov	r0, r3
 800e998:	f7fb fa8d 	bl	8009eb6 <_ZNK8touchgfx8Drawable4getXEv>
 800e99c:	4603      	mov	r3, r0
 800e99e:	461a      	mov	r2, r3
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
        moveAnimationStartY = T::getY();
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f7fb fa91 	bl	8009ed0 <_ZNK8touchgfx8Drawable4getYEv>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
        moveAnimationEndX = endX;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	897a      	ldrh	r2, [r7, #10]
 800e9bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
        moveAnimationEndY = endY;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	893a      	ldrh	r2, [r7, #8]
 800e9c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
        moveAnimationDuration = duration;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	88fa      	ldrh	r2, [r7, #6]
 800e9cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        moveAnimationXEquation = xProgressionEquation;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	69ba      	ldr	r2, [r7, #24]
 800e9d4:	65da      	str	r2, [r3, #92]	; 0x5c
        moveAnimationYEquation = yProgressionEquation;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	69fa      	ldr	r2, [r7, #28]
 800e9da:	661a      	str	r2, [r3, #96]	; 0x60
        moveAnimationRunning = true;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2201      	movs	r2, #1
 800e9e0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
        if (moveAnimationDelay == 0 && moveAnimationDuration == 0)
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d107      	bne.n	800e9fe <_ZN8touchgfx12MoveAnimatorINS_6CircleEE18startMoveAnimationEsstPFstsstES4_+0xac>
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d102      	bne.n	800e9fe <_ZN8touchgfx12MoveAnimatorINS_6CircleEE18startMoveAnimationEsstPFstsstES4_+0xac>
            nextMoveAnimationStep(); // Set end position and shut down
 800e9f8:	68f8      	ldr	r0, [r7, #12]
 800e9fa:	f000 f8bd 	bl	800eb78 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv>
    }
 800e9fe:	bf00      	nop
 800ea00:	3710      	adds	r7, #16
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}

0800ea06 <_ZN8touchgfx12MoveAnimatorINS_6SliderEE29clearMoveAnimationEndedActionEv>:
    void clearMoveAnimationEndedAction()
 800ea06:	b480      	push	{r7}
 800ea08:	b083      	sub	sp, #12
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	6078      	str	r0, [r7, #4]
        moveAnimationEndedCallback = 0;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2200      	movs	r2, #0
 800ea12:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
 800ea16:	bf00      	nop
 800ea18:	370c      	adds	r7, #12
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea20:	4770      	bx	lr

0800ea22 <_ZN8touchgfx12MoveAnimatorINS_6SliderEE18startMoveAnimationEsstPFstsstES4_>:
    void startMoveAnimation(int16_t endX, int16_t endY, uint16_t duration, EasingEquation xProgressionEquation = &EasingEquations::linearEaseNone, EasingEquation yProgressionEquation = &EasingEquations::linearEaseNone)
 800ea22:	b580      	push	{r7, lr}
 800ea24:	b084      	sub	sp, #16
 800ea26:	af00      	add	r7, sp, #0
 800ea28:	60f8      	str	r0, [r7, #12]
 800ea2a:	4608      	mov	r0, r1
 800ea2c:	4611      	mov	r1, r2
 800ea2e:	461a      	mov	r2, r3
 800ea30:	4603      	mov	r3, r0
 800ea32:	817b      	strh	r3, [r7, #10]
 800ea34:	460b      	mov	r3, r1
 800ea36:	813b      	strh	r3, [r7, #8]
 800ea38:	4613      	mov	r3, r2
 800ea3a:	80fb      	strh	r3, [r7, #6]
        if (!moveAnimationRunning)
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800ea42:	f083 0301 	eor.w	r3, r3, #1
 800ea46:	b2db      	uxtb	r3, r3
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d007      	beq.n	800ea5c <_ZN8touchgfx12MoveAnimatorINS_6SliderEE18startMoveAnimationEsstPFstsstES4_+0x3a>
            Application::getInstance()->registerTimerWidget(this);
 800ea4c:	f006 ffba 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 800ea50:	4602      	mov	r2, r0
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	4619      	mov	r1, r3
 800ea56:	4610      	mov	r0, r2
 800ea58:	f006 ffba 	bl	80159d0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        moveAnimationCounter = 0;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
        moveAnimationStartX = T::getX();
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7fb fa25 	bl	8009eb6 <_ZNK8touchgfx8Drawable4getXEv>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	461a      	mov	r2, r3
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
        moveAnimationStartY = T::getY();
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7fb fa29 	bl	8009ed0 <_ZNK8touchgfx8Drawable4getYEv>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	461a      	mov	r2, r3
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
        moveAnimationEndX = endX;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	897a      	ldrh	r2, [r7, #10]
 800ea8c:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
        moveAnimationEndY = endY;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	893a      	ldrh	r2, [r7, #8]
 800ea94:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
        moveAnimationDuration = duration;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	88fa      	ldrh	r2, [r7, #6]
 800ea9c:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
        moveAnimationXEquation = xProgressionEquation;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	69ba      	ldr	r2, [r7, #24]
 800eaa4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        moveAnimationYEquation = yProgressionEquation;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	69fa      	ldr	r2, [r7, #28]
 800eaac:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        moveAnimationRunning = true;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2201      	movs	r2, #1
 800eab4:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
        if (moveAnimationDelay == 0 && moveAnimationDuration == 0)
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d107      	bne.n	800ead2 <_ZN8touchgfx12MoveAnimatorINS_6SliderEE18startMoveAnimationEsstPFstsstES4_+0xb0>
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d102      	bne.n	800ead2 <_ZN8touchgfx12MoveAnimatorINS_6SliderEE18startMoveAnimationEsstPFstsstES4_+0xb0>
            nextMoveAnimationStep(); // Set end position and shut down
 800eacc:	68f8      	ldr	r0, [r7, #12]
 800eace:	f000 f90e 	bl	800ecee <_ZN8touchgfx12MoveAnimatorINS_6SliderEE21nextMoveAnimationStepEv>
    }
 800ead2:	bf00      	nop
 800ead4:	3710      	adds	r7, #16
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}

0800eada <_ZN8touchgfx12MoveAnimatorINS_5ImageEE27setMoveAnimationEndedActionERNS_15GenericCallbackIRKS2_vvEE>:
    void setMoveAnimationEndedAction(GenericCallback<const MoveAnimator<T>& >& callback)
 800eada:	b480      	push	{r7}
 800eadc:	b083      	sub	sp, #12
 800eade:	af00      	add	r7, sp, #0
 800eae0:	6078      	str	r0, [r7, #4]
 800eae2:	6039      	str	r1, [r7, #0]
        moveAnimationEndedCallback = &callback;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	683a      	ldr	r2, [r7, #0]
 800eae8:	645a      	str	r2, [r3, #68]	; 0x44
    }
 800eaea:	bf00      	nop
 800eaec:	370c      	adds	r7, #12
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr
	...

0800eaf8 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>:
    virtual ~GenericCallback()
 800eaf8:	b480      	push	{r7}
 800eafa:	b083      	sub	sp, #12
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
    }
 800eb00:	4a04      	ldr	r2, [pc, #16]	; (800eb14 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev+0x1c>)
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	601a      	str	r2, [r3, #0]
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	4618      	mov	r0, r3
 800eb0a:	370c      	adds	r7, #12
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb12:	4770      	bx	lr
 800eb14:	080249c8 	.word	0x080249c8

0800eb18 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED0Ev>:
    virtual ~GenericCallback()
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
    }
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f7ff ffe9 	bl	800eaf8 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 800eb26:	2104      	movs	r1, #4
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f012 fe90 	bl	802184e <_ZdlPvj>
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	4618      	mov	r0, r3
 800eb32:	3708      	adds	r7, #8
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <_ZN8touchgfx15GenericCallbackIRKNS_12MoveAnimatorINS_5ImageEEEvvED1Ev>:
    virtual ~GenericCallback()
 800eb38:	b480      	push	{r7}
 800eb3a:	b083      	sub	sp, #12
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
    }
 800eb40:	4a04      	ldr	r2, [pc, #16]	; (800eb54 <_ZN8touchgfx15GenericCallbackIRKNS_12MoveAnimatorINS_5ImageEEEvvED1Ev+0x1c>)
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	601a      	str	r2, [r3, #0]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	4618      	mov	r0, r3
 800eb4a:	370c      	adds	r7, #12
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb52:	4770      	bx	lr
 800eb54:	080247e4 	.word	0x080247e4

0800eb58 <_ZN8touchgfx15GenericCallbackIRKNS_12MoveAnimatorINS_5ImageEEEvvED0Ev>:
    virtual ~GenericCallback()
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b082      	sub	sp, #8
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
    }
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f7ff ffe9 	bl	800eb38 <_ZN8touchgfx15GenericCallbackIRKNS_12MoveAnimatorINS_5ImageEEEvvED1Ev>
 800eb66:	2104      	movs	r1, #4
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f012 fe70 	bl	802184e <_ZdlPvj>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	4618      	mov	r0, r3
 800eb72:	3708      	adds	r7, #8
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv>:
    void nextMoveAnimationStep()
 800eb78:	b590      	push	{r4, r7, lr}
 800eb7a:	b085      	sub	sp, #20
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
        if (moveAnimationRunning)
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	f000 80ad 	beq.w	800ece6 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
            if (moveAnimationCounter < moveAnimationDelay)
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d208      	bcs.n	800ebae <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x36>
                moveAnimationCounter++;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800eba2:	3301      	adds	r3, #1
 800eba4:	b29a      	uxth	r2, r3
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    }
 800ebac:	e09b      	b.n	800ece6 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
                if (moveAnimationCounter <= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800ebb4:	461a      	mov	r2, r3
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800ebbc:	4619      	mov	r1, r3
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ebc4:	440b      	add	r3, r1
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d850      	bhi.n	800ec6c <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0xf4>
                    uint32_t actualAnimationCounter = moveAnimationCounter - moveAnimationDelay;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800ebd0:	461a      	mov	r2, r3
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800ebd8:	1ad3      	subs	r3, r2, r3
 800ebda:	60fb      	str	r3, [r7, #12]
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	b298      	uxth	r0, r3
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 800ebea:	b29a      	uxth	r2, r3
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	1ad3      	subs	r3, r2, r3
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	b21a      	sxth	r2, r3
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ec00:	2100      	movs	r1, #0
 800ec02:	47a0      	blx	r4
 800ec04:	4603      	mov	r3, r0
 800ec06:	817b      	strh	r3, [r7, #10]
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	b298      	uxth	r0, r3
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800ec16:	b29a      	uxth	r2, r3
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 800ec1e:	b29b      	uxth	r3, r3
 800ec20:	1ad3      	subs	r3, r2, r3
 800ec22:	b29b      	uxth	r3, r3
 800ec24:	b21a      	sxth	r2, r3
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ec2c:	2100      	movs	r1, #0
 800ec2e:	47a0      	blx	r4
 800ec30:	4603      	mov	r3, r0
 800ec32:	813b      	strh	r3, [r7, #8]
                    T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800ec3c:	b29a      	uxth	r2, r3
 800ec3e:	897b      	ldrh	r3, [r7, #10]
 800ec40:	4413      	add	r3, r2
 800ec42:	b29b      	uxth	r3, r3
 800ec44:	b219      	sxth	r1, r3
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 800ec4c:	b29a      	uxth	r2, r3
 800ec4e:	893b      	ldrh	r3, [r7, #8]
 800ec50:	4413      	add	r3, r2
 800ec52:	b29b      	uxth	r3, r3
 800ec54:	b21b      	sxth	r3, r3
 800ec56:	461a      	mov	r2, r3
 800ec58:	f7fb fa00 	bl	800a05c <_ZN8touchgfx8Drawable6moveToEss>
                    moveAnimationCounter++;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800ec62:	3301      	adds	r3, #1
 800ec64:	b29a      	uxth	r2, r3
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800ec72:	461a      	mov	r2, r3
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800ec7a:	4619      	mov	r1, r3
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ec82:	440b      	add	r3, r1
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d92e      	bls.n	800ece6 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
                    moveAnimationRunning = false;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                    moveAnimationCounter = 0;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2200      	movs	r2, #0
 800ec94:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                    Application::getInstance()->unregisterTimerWidget(this);
 800ec98:	f006 fe94 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 800ec9c:	4602      	mov	r2, r0
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	4619      	mov	r1, r3
 800eca2:	4610      	mov	r0, r2
 800eca4:	f006 fec6 	bl	8015a34 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d00d      	beq.n	800eccc <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x154>
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	330c      	adds	r3, #12
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	4610      	mov	r0, r2
 800ecc0:	4798      	blx	r3
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d001      	beq.n	800eccc <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x154>
 800ecc8:	2301      	movs	r3, #1
 800ecca:	e000      	b.n	800ecce <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x156>
 800eccc:	2300      	movs	r3, #0
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d009      	beq.n	800ece6 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv+0x16e>
                        moveAnimationEndedCallback->execute(*this);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	3308      	adds	r3, #8
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	6879      	ldr	r1, [r7, #4]
 800ece2:	4610      	mov	r0, r2
 800ece4:	4798      	blx	r3
    }
 800ece6:	bf00      	nop
 800ece8:	3714      	adds	r7, #20
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd90      	pop	{r4, r7, pc}

0800ecee <_ZN8touchgfx12MoveAnimatorINS_6SliderEE21nextMoveAnimationStepEv>:
    void nextMoveAnimationStep()
 800ecee:	b590      	push	{r4, r7, lr}
 800ecf0:	b085      	sub	sp, #20
 800ecf2:	af00      	add	r7, sp, #0
 800ecf4:	6078      	str	r0, [r7, #4]
        if (moveAnimationRunning)
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	f000 80b4 	beq.w	800ee6a <_ZN8touchgfx12MoveAnimatorINS_6SliderEE21nextMoveAnimationStepEv+0x17c>
            if (moveAnimationCounter < moveAnimationDelay)
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f8b3 20fe 	ldrh.w	r2, [r3, #254]	; 0xfe
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d208      	bcs.n	800ed24 <_ZN8touchgfx12MoveAnimatorINS_6SliderEE21nextMoveAnimationStepEv+0x36>
                moveAnimationCounter++;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
 800ed18:	3301      	adds	r3, #1
 800ed1a:	b29a      	uxth	r2, r3
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
    }
 800ed22:	e0a2      	b.n	800ee6a <_ZN8touchgfx12MoveAnimatorINS_6SliderEE21nextMoveAnimationStepEv+0x17c>
                if (moveAnimationCounter <= (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800ed32:	4619      	mov	r1, r3
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800ed3a:	440b      	add	r3, r1
 800ed3c:	429a      	cmp	r2, r3
 800ed3e:	d852      	bhi.n	800ede6 <_ZN8touchgfx12MoveAnimatorINS_6SliderEE21nextMoveAnimationStepEv+0xf8>
                    uint32_t actualAnimationCounter = moveAnimationCounter - moveAnimationDelay;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
 800ed46:	461a      	mov	r2, r3
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800ed4e:	1ad3      	subs	r3, r2, r3
 800ed50:	60fb      	str	r3, [r7, #12]
                    int16_t deltaX = moveAnimationXEquation(actualAnimationCounter, 0, moveAnimationEndX - moveAnimationStartX, moveAnimationDuration);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	b298      	uxth	r0, r3
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f9b3 3108 	ldrsh.w	r3, [r3, #264]	; 0x108
 800ed62:	b29a      	uxth	r2, r3
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 800ed6a:	b29b      	uxth	r3, r3
 800ed6c:	1ad3      	subs	r3, r2, r3
 800ed6e:	b29b      	uxth	r3, r3
 800ed70:	b21a      	sxth	r2, r3
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800ed78:	2100      	movs	r1, #0
 800ed7a:	47a0      	blx	r4
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	817b      	strh	r3, [r7, #10]
                    int16_t deltaY = moveAnimationYEquation(actualAnimationCounter, 0, moveAnimationEndY - moveAnimationStartY, moveAnimationDuration);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	b298      	uxth	r0, r3
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f9b3 310a 	ldrsh.w	r3, [r3, #266]	; 0x10a
 800ed90:	b29a      	uxth	r2, r3
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f9b3 3106 	ldrsh.w	r3, [r3, #262]	; 0x106
 800ed98:	b29b      	uxth	r3, r3
 800ed9a:	1ad3      	subs	r3, r2, r3
 800ed9c:	b29b      	uxth	r3, r3
 800ed9e:	b21a      	sxth	r2, r3
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800eda6:	2100      	movs	r1, #0
 800eda8:	47a0      	blx	r4
 800edaa:	4603      	mov	r3, r0
 800edac:	813b      	strh	r3, [r7, #8]
                    T::moveTo(moveAnimationStartX + deltaX, moveAnimationStartY + deltaY);
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
 800edb6:	b29a      	uxth	r2, r3
 800edb8:	897b      	ldrh	r3, [r7, #10]
 800edba:	4413      	add	r3, r2
 800edbc:	b29b      	uxth	r3, r3
 800edbe:	b219      	sxth	r1, r3
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f9b3 3106 	ldrsh.w	r3, [r3, #262]	; 0x106
 800edc6:	b29a      	uxth	r2, r3
 800edc8:	893b      	ldrh	r3, [r7, #8]
 800edca:	4413      	add	r3, r2
 800edcc:	b29b      	uxth	r3, r3
 800edce:	b21b      	sxth	r3, r3
 800edd0:	461a      	mov	r2, r3
 800edd2:	f7fb f943 	bl	800a05c <_ZN8touchgfx8Drawable6moveToEss>
                    moveAnimationCounter++;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
 800eddc:	3301      	adds	r3, #1
 800edde:	b29a      	uxth	r2, r3
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
                if (moveAnimationCounter > (uint32_t)(moveAnimationDelay + moveAnimationDuration))
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
 800edec:	461a      	mov	r2, r3
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800edf4:	4619      	mov	r1, r3
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 800edfc:	440b      	add	r3, r1
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d933      	bls.n	800ee6a <_ZN8touchgfx12MoveAnimatorINS_6SliderEE21nextMoveAnimationStepEv+0x17c>
                    moveAnimationRunning = false;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2200      	movs	r2, #0
 800ee06:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
                    moveAnimationCounter = 0;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
                    Application::getInstance()->unregisterTimerWidget(this);
 800ee12:	f006 fdd7 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 800ee16:	4602      	mov	r2, r0
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	4619      	mov	r1, r3
 800ee1c:	4610      	mov	r0, r2
 800ee1e:	f006 fe09 	bl	8015a34 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (moveAnimationEndedCallback && moveAnimationEndedCallback->isValid())
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d00f      	beq.n	800ee4c <_ZN8touchgfx12MoveAnimatorINS_6SliderEE21nextMoveAnimationStepEv+0x15e>
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	330c      	adds	r3, #12
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	4610      	mov	r0, r2
 800ee40:	4798      	blx	r3
 800ee42:	4603      	mov	r3, r0
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d001      	beq.n	800ee4c <_ZN8touchgfx12MoveAnimatorINS_6SliderEE21nextMoveAnimationStepEv+0x15e>
 800ee48:	2301      	movs	r3, #1
 800ee4a:	e000      	b.n	800ee4e <_ZN8touchgfx12MoveAnimatorINS_6SliderEE21nextMoveAnimationStepEv+0x160>
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d00b      	beq.n	800ee6a <_ZN8touchgfx12MoveAnimatorINS_6SliderEE21nextMoveAnimationStepEv+0x17c>
                        moveAnimationEndedCallback->execute(*this);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	3308      	adds	r3, #8
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	6879      	ldr	r1, [r7, #4]
 800ee66:	4610      	mov	r0, r2
 800ee68:	4798      	blx	r3
    }
 800ee6a:	bf00      	nop
 800ee6c:	3714      	adds	r7, #20
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd90      	pop	{r4, r7, pc}
	...

0800ee74 <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_12MoveAnimatorINS_5ImageEEEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b082      	sub	sp, #8
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
 800ee7c:	4a05      	ldr	r2, [pc, #20]	; (800ee94 <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_12MoveAnimatorINS_5ImageEEEvvED1Ev+0x20>)
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	601a      	str	r2, [r3, #0]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	4618      	mov	r0, r3
 800ee86:	f7ff fe57 	bl	800eb38 <_ZN8touchgfx15GenericCallbackIRKNS_12MoveAnimatorINS_5ImageEEEvvED1Ev>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3708      	adds	r7, #8
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}
 800ee94:	080247cc 	.word	0x080247cc

0800ee98 <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_12MoveAnimatorINS_5ImageEEEvvED0Ev>:
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b082      	sub	sp, #8
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f7ff ffe7 	bl	800ee74 <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_12MoveAnimatorINS_5ImageEEEvvED1Ev>
 800eea6:	2110      	movs	r1, #16
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f012 fcd0 	bl	802184e <_ZdlPvj>
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3708      	adds	r7, #8
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	4a05      	ldr	r2, [pc, #20]	; (800eed8 <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_6SliderEivED1Ev+0x20>)
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	601a      	str	r2, [r3, #0]
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	4618      	mov	r0, r3
 800eeca:	f7ff fe15 	bl	800eaf8 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	4618      	mov	r0, r3
 800eed2:	3708      	adds	r7, #8
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}
 800eed8:	080247fc 	.word	0x080247fc

0800eedc <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_6SliderEivED0Ev>:
 800eedc:	b580      	push	{r7, lr}
 800eede:	b082      	sub	sp, #8
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f7ff ffe7 	bl	800eeb8 <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_6SliderEivED1Ev>
 800eeea:	2110      	movs	r1, #16
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f012 fcae 	bl	802184e <_ZdlPvj>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	4618      	mov	r0, r3
 800eef6:	3708      	adds	r7, #8
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}

0800eefc <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b082      	sub	sp, #8
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
 800ef04:	4a05      	ldr	r2, [pc, #20]	; (800ef1c <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	601a      	str	r2, [r3, #0]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7fc fb1f 	bl	800b550 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	4618      	mov	r0, r3
 800ef16:	3708      	adds	r7, #8
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}
 800ef1c:	08024814 	.word	0x08024814

0800ef20 <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b082      	sub	sp, #8
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f7ff ffe7 	bl	800eefc <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800ef2e:	2110      	movs	r1, #16
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f012 fc8c 	bl	802184e <_ZdlPvj>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3708      	adds	r7, #8
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <_ZN8touchgfx13PainterRGB888D1Ev>:
 *        The PainterRGB888 class allows a shape to be filled with a given color and alpha
 *        value. This allows transparent, anti-aliased elements to be drawn.
 *
 * @see AbstractPainter
 */
class PainterRGB888 : public AbstractPainterRGB888
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b082      	sub	sp, #8
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	4a05      	ldr	r2, [pc, #20]	; (800ef60 <_ZN8touchgfx13PainterRGB888D1Ev+0x20>)
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	601a      	str	r2, [r3, #0]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	4618      	mov	r0, r3
 800ef52:	f7fe fe31 	bl	800dbb8 <_ZN8touchgfx21AbstractPainterRGB888D1Ev>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3708      	adds	r7, #8
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}
 800ef60:	080262d4 	.word	0x080262d4

0800ef64 <_ZN8touchgfx13PainterRGB888D0Ev>:
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b082      	sub	sp, #8
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f7ff ffe7 	bl	800ef40 <_ZN8touchgfx13PainterRGB888D1Ev>
 800ef72:	2118      	movs	r1, #24
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f012 fc6a 	bl	802184e <_ZdlPvj>
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3708      	adds	r7, #8
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}

0800ef84 <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_12MoveAnimatorINS_5ImageEEEvvE7executeES6_>:
    virtual void execute(T1 t1)
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b082      	sub	sp, #8
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	685b      	ldr	r3, [r3, #4]
 800ef92:	687a      	ldr	r2, [r7, #4]
 800ef94:	68d2      	ldr	r2, [r2, #12]
 800ef96:	1052      	asrs	r2, r2, #1
 800ef98:	1898      	adds	r0, r3, r2
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	68db      	ldr	r3, [r3, #12]
 800ef9e:	f003 0301 	and.w	r3, r3, #1
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d102      	bne.n	800efac <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_12MoveAnimatorINS_5ImageEEEvvE7executeES6_+0x28>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	689b      	ldr	r3, [r3, #8]
 800efaa:	e00a      	b.n	800efc2 <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_12MoveAnimatorINS_5ImageEEEvvE7executeES6_+0x3e>
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	687a      	ldr	r2, [r7, #4]
 800efb2:	68d2      	ldr	r2, [r2, #12]
 800efb4:	1052      	asrs	r2, r2, #1
 800efb6:	4413      	add	r3, r2
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	687a      	ldr	r2, [r7, #4]
 800efbc:	6892      	ldr	r2, [r2, #8]
 800efbe:	4413      	add	r3, r2
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	6839      	ldr	r1, [r7, #0]
 800efc4:	4798      	blx	r3
    }
 800efc6:	bf00      	nop
 800efc8:	3708      	adds	r7, #8
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}

0800efce <_ZNK8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_12MoveAnimatorINS_5ImageEEEvvE7isValidEv>:
    virtual bool isValid() const
 800efce:	b480      	push	{r7}
 800efd0:	b083      	sub	sp, #12
 800efd2:	af00      	add	r7, sp, #0
 800efd4:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	685b      	ldr	r3, [r3, #4]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d010      	beq.n	800f000 <_ZNK8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_12MoveAnimatorINS_5ImageEEEvvE7isValidEv+0x32>
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	689b      	ldr	r3, [r3, #8]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d107      	bne.n	800eff6 <_ZNK8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_12MoveAnimatorINS_5ImageEEEvvE7isValidEv+0x28>
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	68db      	ldr	r3, [r3, #12]
 800efea:	f003 0301 	and.w	r3, r3, #1
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d101      	bne.n	800eff6 <_ZNK8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_12MoveAnimatorINS_5ImageEEEvvE7isValidEv+0x28>
 800eff2:	2301      	movs	r3, #1
 800eff4:	e000      	b.n	800eff8 <_ZNK8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_12MoveAnimatorINS_5ImageEEEvvE7isValidEv+0x2a>
 800eff6:	2300      	movs	r3, #0
 800eff8:	2b01      	cmp	r3, #1
 800effa:	d001      	beq.n	800f000 <_ZNK8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_12MoveAnimatorINS_5ImageEEEvvE7isValidEv+0x32>
 800effc:	2301      	movs	r3, #1
 800effe:	e000      	b.n	800f002 <_ZNK8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_12MoveAnimatorINS_5ImageEEEvvE7isValidEv+0x34>
 800f000:	2300      	movs	r3, #0
    }
 800f002:	4618      	mov	r0, r3
 800f004:	370c      	adds	r7, #12
 800f006:	46bd      	mov	sp, r7
 800f008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00c:	4770      	bx	lr

0800f00e <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 800f00e:	b580      	push	{r7, lr}
 800f010:	b084      	sub	sp, #16
 800f012:	af00      	add	r7, sp, #0
 800f014:	60f8      	str	r0, [r7, #12]
 800f016:	60b9      	str	r1, [r7, #8]
 800f018:	607a      	str	r2, [r7, #4]
        (pobject->*pmemfun_2)(t1, t2);
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	68fa      	ldr	r2, [r7, #12]
 800f020:	68d2      	ldr	r2, [r2, #12]
 800f022:	1052      	asrs	r2, r2, #1
 800f024:	1898      	adds	r0, r3, r2
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	68db      	ldr	r3, [r3, #12]
 800f02a:	f003 0301 	and.w	r3, r3, #1
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d102      	bne.n	800f038 <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_6SliderEivE7executeES4_i+0x2a>
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	689b      	ldr	r3, [r3, #8]
 800f036:	e00a      	b.n	800f04e <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_6SliderEivE7executeES4_i+0x40>
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	68fa      	ldr	r2, [r7, #12]
 800f03e:	68d2      	ldr	r2, [r2, #12]
 800f040:	1052      	asrs	r2, r2, #1
 800f042:	4413      	add	r3, r2
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	68fa      	ldr	r2, [r7, #12]
 800f048:	6892      	ldr	r2, [r2, #8]
 800f04a:	4413      	add	r3, r2
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	687a      	ldr	r2, [r7, #4]
 800f050:	68b9      	ldr	r1, [r7, #8]
 800f052:	4798      	blx	r3
    }
 800f054:	bf00      	nop
 800f056:	3710      	adds	r7, #16
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <_ZNK8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_6SliderEivE7isValidEv>:
    virtual bool isValid() const
 800f05c:	b480      	push	{r7}
 800f05e:	b083      	sub	sp, #12
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_2 != 0);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d010      	beq.n	800f08e <_ZNK8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	689b      	ldr	r3, [r3, #8]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d107      	bne.n	800f084 <_ZNK8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	68db      	ldr	r3, [r3, #12]
 800f078:	f003 0301 	and.w	r3, r3, #1
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d101      	bne.n	800f084 <_ZNK8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 800f080:	2301      	movs	r3, #1
 800f082:	e000      	b.n	800f086 <_ZNK8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_6SliderEivE7isValidEv+0x2a>
 800f084:	2300      	movs	r3, #0
 800f086:	2b01      	cmp	r3, #1
 800f088:	d001      	beq.n	800f08e <_ZNK8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 800f08a:	2301      	movs	r3, #1
 800f08c:	e000      	b.n	800f090 <_ZNK8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_6SliderEivE7isValidEv+0x34>
 800f08e:	2300      	movs	r3, #0
    }
 800f090:	4618      	mov	r0, r3
 800f092:	370c      	adds	r7, #12
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr

0800f09c <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b082      	sub	sp, #8
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	685b      	ldr	r3, [r3, #4]
 800f0aa:	687a      	ldr	r2, [r7, #4]
 800f0ac:	68d2      	ldr	r2, [r2, #12]
 800f0ae:	1052      	asrs	r2, r2, #1
 800f0b0:	1898      	adds	r0, r3, r2
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	68db      	ldr	r3, [r3, #12]
 800f0b6:	f003 0301 	and.w	r3, r3, #1
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d102      	bne.n	800f0c4 <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	689b      	ldr	r3, [r3, #8]
 800f0c2:	e00a      	b.n	800f0da <_ZN8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	685b      	ldr	r3, [r3, #4]
 800f0c8:	687a      	ldr	r2, [r7, #4]
 800f0ca:	68d2      	ldr	r2, [r2, #12]
 800f0cc:	1052      	asrs	r2, r2, #1
 800f0ce:	4413      	add	r3, r2
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	687a      	ldr	r2, [r7, #4]
 800f0d4:	6892      	ldr	r2, [r2, #8]
 800f0d6:	4413      	add	r3, r2
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	6839      	ldr	r1, [r7, #0]
 800f0dc:	4798      	blx	r3
    }
 800f0de:	bf00      	nop
 800f0e0:	3708      	adds	r7, #8
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}

0800f0e6 <_ZNK8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800f0e6:	b480      	push	{r7}
 800f0e8:	b083      	sub	sp, #12
 800f0ea:	af00      	add	r7, sp, #0
 800f0ec:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	685b      	ldr	r3, [r3, #4]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d010      	beq.n	800f118 <_ZNK8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	689b      	ldr	r3, [r3, #8]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d107      	bne.n	800f10e <_ZNK8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	68db      	ldr	r3, [r3, #12]
 800f102:	f003 0301 	and.w	r3, r3, #1
 800f106:	2b00      	cmp	r3, #0
 800f108:	d101      	bne.n	800f10e <_ZNK8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800f10a:	2301      	movs	r3, #1
 800f10c:	e000      	b.n	800f110 <_ZNK8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800f10e:	2300      	movs	r3, #0
 800f110:	2b01      	cmp	r3, #1
 800f112:	d001      	beq.n	800f118 <_ZNK8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800f114:	2301      	movs	r3, #1
 800f116:	e000      	b.n	800f11a <_ZNK8touchgfx8CallbackI23RotationVoilierViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800f118:	2300      	movs	r3, #0
    }
 800f11a:	4618      	mov	r0, r3
 800f11c:	370c      	adds	r7, #12
 800f11e:	46bd      	mov	sp, r7
 800f120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f124:	4770      	bx	lr

0800f126 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE15handleTickEventEv>:
    virtual void handleTickEvent()
 800f126:	b580      	push	{r7, lr}
 800f128:	b082      	sub	sp, #8
 800f12a:	af00      	add	r7, sp, #0
 800f12c:	6078      	str	r0, [r7, #4]
        T::handleTickEvent();
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	4618      	mov	r0, r3
 800f132:	f7fa ff5f 	bl	8009ff4 <_ZN8touchgfx8Drawable15handleTickEventEv>
        nextMoveAnimationStep();
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f7ff fd1e 	bl	800eb78 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21nextMoveAnimationStepEv>
    }
 800f13c:	bf00      	nop
 800f13e:	3708      	adds	r7, #8
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}

0800f144 <_ZN8touchgfx12MoveAnimatorINS_6CircleEE21setMoveAnimationDelayEt>:
    virtual void setMoveAnimationDelay(uint16_t delay)
 800f144:	b480      	push	{r7}
 800f146:	b083      	sub	sp, #12
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	460b      	mov	r3, r1
 800f14e:	807b      	strh	r3, [r7, #2]
        moveAnimationDelay = delay;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	887a      	ldrh	r2, [r7, #2]
 800f154:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    }
 800f158:	bf00      	nop
 800f15a:	370c      	adds	r7, #12
 800f15c:	46bd      	mov	sp, r7
 800f15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f162:	4770      	bx	lr

0800f164 <_ZNK8touchgfx12MoveAnimatorINS_6CircleEE21getMoveAnimationDelayEv>:
    virtual uint16_t getMoveAnimationDelay() const
 800f164:	b480      	push	{r7}
 800f166:	b083      	sub	sp, #12
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
        return moveAnimationDelay;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
    }
 800f172:	4618      	mov	r0, r3
 800f174:	370c      	adds	r7, #12
 800f176:	46bd      	mov	sp, r7
 800f178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17c:	4770      	bx	lr

0800f17e <_ZNK8touchgfx12MoveAnimatorINS_6CircleEE9isRunningEv>:
    virtual bool isRunning() const
 800f17e:	b580      	push	{r7, lr}
 800f180:	b082      	sub	sp, #8
 800f182:	af00      	add	r7, sp, #0
 800f184:	6078      	str	r0, [r7, #4]
        return isMoveAnimationRunning();
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	3384      	adds	r3, #132	; 0x84
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	4798      	blx	r3
 800f192:	4603      	mov	r3, r0
    }
 800f194:	4618      	mov	r0, r3
 800f196:	3708      	adds	r7, #8
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}

0800f19c <_ZNK8touchgfx12MoveAnimatorINS_6CircleEE22isMoveAnimationRunningEv>:
    virtual bool isMoveAnimationRunning() const
 800f19c:	b480      	push	{r7}
 800f19e:	b083      	sub	sp, #12
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
        return moveAnimationRunning;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
    }
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	370c      	adds	r7, #12
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b4:	4770      	bx	lr

0800f1b6 <_ZN8touchgfx12MoveAnimatorINS_6SliderEE15handleTickEventEv>:
    virtual void handleTickEvent()
 800f1b6:	b580      	push	{r7, lr}
 800f1b8:	b082      	sub	sp, #8
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	6078      	str	r0, [r7, #4]
        T::handleTickEvent();
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f7fa ff17 	bl	8009ff4 <_ZN8touchgfx8Drawable15handleTickEventEv>
        nextMoveAnimationStep();
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f7ff fd91 	bl	800ecee <_ZN8touchgfx12MoveAnimatorINS_6SliderEE21nextMoveAnimationStepEv>
    }
 800f1cc:	bf00      	nop
 800f1ce:	3708      	adds	r7, #8
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}

0800f1d4 <_ZN8touchgfx12MoveAnimatorINS_6SliderEE21setMoveAnimationDelayEt>:
    virtual void setMoveAnimationDelay(uint16_t delay)
 800f1d4:	b480      	push	{r7}
 800f1d6:	b083      	sub	sp, #12
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
 800f1dc:	460b      	mov	r3, r1
 800f1de:	807b      	strh	r3, [r7, #2]
        moveAnimationDelay = delay;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	887a      	ldrh	r2, [r7, #2]
 800f1e4:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
    }
 800f1e8:	bf00      	nop
 800f1ea:	370c      	adds	r7, #12
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f2:	4770      	bx	lr

0800f1f4 <_ZNK8touchgfx12MoveAnimatorINS_6SliderEE21getMoveAnimationDelayEv>:
    virtual uint16_t getMoveAnimationDelay() const
 800f1f4:	b480      	push	{r7}
 800f1f6:	b083      	sub	sp, #12
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
        return moveAnimationDelay;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
    }
 800f202:	4618      	mov	r0, r3
 800f204:	370c      	adds	r7, #12
 800f206:	46bd      	mov	sp, r7
 800f208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20c:	4770      	bx	lr

0800f20e <_ZNK8touchgfx12MoveAnimatorINS_6SliderEE9isRunningEv>:
    virtual bool isRunning() const
 800f20e:	b580      	push	{r7, lr}
 800f210:	b082      	sub	sp, #8
 800f212:	af00      	add	r7, sp, #0
 800f214:	6078      	str	r0, [r7, #4]
        return isMoveAnimationRunning();
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	33cc      	adds	r3, #204	; 0xcc
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	4798      	blx	r3
 800f222:	4603      	mov	r3, r0
    }
 800f224:	4618      	mov	r0, r3
 800f226:	3708      	adds	r7, #8
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd80      	pop	{r7, pc}

0800f22c <_ZNK8touchgfx12MoveAnimatorINS_6SliderEE22isMoveAnimationRunningEv>:
    virtual bool isMoveAnimationRunning() const
 800f22c:	b480      	push	{r7}
 800f22e:	b083      	sub	sp, #12
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
        return moveAnimationRunning;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
    }
 800f23a:	4618      	mov	r0, r3
 800f23c:	370c      	adds	r7, #12
 800f23e:	46bd      	mov	sp, r7
 800f240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f244:	4770      	bx	lr
	...

0800f248 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800f248:	b480      	push	{r7}
 800f24a:	af00      	add	r7, sp, #0
    return bitmap_database;
 800f24c:	4b02      	ldr	r3, [pc, #8]	; (800f258 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800f24e:	4618      	mov	r0, r3
 800f250:	46bd      	mov	sp, r7
 800f252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f256:	4770      	bx	lr
 800f258:	080249d8 	.word	0x080249d8

0800f25c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800f25c:	b480      	push	{r7}
 800f25e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800f260:	231e      	movs	r3, #30
}
 800f262:	4618      	mov	r0, r3
 800f264:	46bd      	mov	sp, r7
 800f266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26a:	4770      	bx	lr

0800f26c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800f26c:	b480      	push	{r7}
 800f26e:	b085      	sub	sp, #20
 800f270:	af00      	add	r7, sp, #0
 800f272:	60f8      	str	r0, [r7, #12]
 800f274:	60b9      	str	r1, [r7, #8]
 800f276:	4613      	mov	r3, r2
 800f278:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 800f27a:	4a07      	ldr	r2, [pc, #28]	; (800f298 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	6013      	str	r3, [r2, #0]
        fonts = f;
 800f280:	4a06      	ldr	r2, [pc, #24]	; (800f29c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800f286:	4a06      	ldr	r2, [pc, #24]	; (800f2a0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800f288:	88fb      	ldrh	r3, [r7, #6]
 800f28a:	8013      	strh	r3, [r2, #0]
    }
 800f28c:	bf00      	nop
 800f28e:	3714      	adds	r7, #20
 800f290:	46bd      	mov	sp, r7
 800f292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f296:	4770      	bx	lr
 800f298:	2000b2f0 	.word	0x2000b2f0
 800f29c:	2000b2f8 	.word	0x2000b2f8
 800f2a0:	2000b2f4 	.word	0x2000b2f4

0800f2a4 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800f2a4:	b590      	push	{r4, r7, lr}
 800f2a6:	b085      	sub	sp, #20
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800f2b2:	88fb      	ldrh	r3, [r7, #6]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d127      	bne.n	800f308 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800f2b8:	88fb      	ldrh	r3, [r7, #6]
 800f2ba:	4a1e      	ldr	r2, [pc, #120]	; (800f334 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800f2bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d016      	beq.n	800f2f2 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800f2c4:	88fb      	ldrh	r3, [r7, #6]
 800f2c6:	4a1b      	ldr	r2, [pc, #108]	; (800f334 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800f2c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2cc:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	68ba      	ldr	r2, [r7, #8]
 800f2d4:	4413      	add	r3, r2
 800f2d6:	4a18      	ldr	r2, [pc, #96]	; (800f338 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800f2d8:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	68ba      	ldr	r2, [r7, #8]
 800f2e0:	4413      	add	r3, r2
 800f2e2:	4a16      	ldr	r2, [pc, #88]	; (800f33c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800f2e4:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	689b      	ldr	r3, [r3, #8]
 800f2ea:	68ba      	ldr	r2, [r7, #8]
 800f2ec:	4413      	add	r3, r2
 800f2ee:	60fb      	str	r3, [r7, #12]
 800f2f0:	e00a      	b.n	800f308 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800f2f2:	4b11      	ldr	r3, [pc, #68]	; (800f338 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800f2f4:	4a12      	ldr	r2, [pc, #72]	; (800f340 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800f2f6:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800f2f8:	4a12      	ldr	r2, [pc, #72]	; (800f344 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800f2fa:	4b10      	ldr	r3, [pc, #64]	; (800f33c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800f2fc:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800f2fe:	88fb      	ldrh	r3, [r7, #6]
 800f300:	4a11      	ldr	r2, [pc, #68]	; (800f348 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800f302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f306:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d00d      	beq.n	800f32a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800f30e:	4a0f      	ldr	r2, [pc, #60]	; (800f34c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800f310:	88fb      	ldrh	r3, [r7, #6]
 800f312:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800f314:	f000 f83e 	bl	800f394 <_ZN17TypedTextDatabase8getFontsEv>
 800f318:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800f31a:	f000 f833 	bl	800f384 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800f31e:	4603      	mov	r3, r0
 800f320:	461a      	mov	r2, r3
 800f322:	4621      	mov	r1, r4
 800f324:	68f8      	ldr	r0, [r7, #12]
 800f326:	f7ff ffa1 	bl	800f26c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800f32a:	bf00      	nop
 800f32c:	3714      	adds	r7, #20
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd90      	pop	{r4, r7, pc}
 800f332:	bf00      	nop
 800f334:	20008344 	.word	0x20008344
 800f338:	2000834c 	.word	0x2000834c
 800f33c:	20008350 	.word	0x20008350
 800f340:	9013e6e0 	.word	0x9013e6e0
 800f344:	9013e6c8 	.word	0x9013e6c8
 800f348:	9013e724 	.word	0x9013e724
 800f34c:	20008348 	.word	0x20008348

0800f350 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800f350:	b480      	push	{r7}
 800f352:	b083      	sub	sp, #12
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
 800f358:	460b      	mov	r3, r1
 800f35a:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800f35c:	4b07      	ldr	r3, [pc, #28]	; (800f37c <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800f35e:	681a      	ldr	r2, [r3, #0]
 800f360:	4b07      	ldr	r3, [pc, #28]	; (800f380 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800f362:	6819      	ldr	r1, [r3, #0]
 800f364:	887b      	ldrh	r3, [r7, #2]
 800f366:	009b      	lsls	r3, r3, #2
 800f368:	440b      	add	r3, r1
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	005b      	lsls	r3, r3, #1
 800f36e:	4413      	add	r3, r2
}
 800f370:	4618      	mov	r0, r3
 800f372:	370c      	adds	r7, #12
 800f374:	46bd      	mov	sp, r7
 800f376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37a:	4770      	bx	lr
 800f37c:	2000834c 	.word	0x2000834c
 800f380:	20008350 	.word	0x20008350

0800f384 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800f384:	b480      	push	{r7}
 800f386:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800f388:	2306      	movs	r3, #6
}
 800f38a:	4618      	mov	r0, r3
 800f38c:	46bd      	mov	sp, r7
 800f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f392:	4770      	bx	lr

0800f394 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800f394:	b480      	push	{r7}
 800f396:	af00      	add	r7, sp, #0
    return _fonts;
 800f398:	4b02      	ldr	r3, [pc, #8]	; (800f3a4 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	46bd      	mov	sp, r7
 800f39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a2:	4770      	bx	lr
 800f3a4:	20008354 	.word	0x20008354

0800f3a8 <_Z41__static_initialization_and_destruction_0ii>:
    case 3:
        _fonts[3] = &(getFont_verdana_80_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b082      	sub	sp, #8
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	6039      	str	r1, [r7, #0]
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2b01      	cmp	r3, #1
 800f3b6:	d118      	bne.n	800f3ea <_Z41__static_initialization_and_destruction_0ii+0x42>
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3be:	4293      	cmp	r3, r2
 800f3c0:	d113      	bne.n	800f3ea <_Z41__static_initialization_and_destruction_0ii+0x42>
    &(getFont_verdana_20_4bpp()),
 800f3c2:	f7fa fbe9 	bl	8009b98 <_Z23getFont_verdana_20_4bppv>
 800f3c6:	4602      	mov	r2, r0
};
 800f3c8:	4b0a      	ldr	r3, [pc, #40]	; (800f3f4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800f3ca:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 800f3cc:	f7fa fc26 	bl	8009c1c <_Z23getFont_verdana_40_4bppv>
 800f3d0:	4602      	mov	r2, r0
};
 800f3d2:	4b08      	ldr	r3, [pc, #32]	; (800f3f4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800f3d4:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp()),
 800f3d6:	f7fa fb9d 	bl	8009b14 <_Z23getFont_verdana_10_4bppv>
 800f3da:	4602      	mov	r2, r0
};
 800f3dc:	4b05      	ldr	r3, [pc, #20]	; (800f3f4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800f3de:	609a      	str	r2, [r3, #8]
    &(getFont_verdana_80_4bpp())
 800f3e0:	f7fa fc5e 	bl	8009ca0 <_Z23getFont_verdana_80_4bppv>
 800f3e4:	4602      	mov	r2, r0
};
 800f3e6:	4b03      	ldr	r3, [pc, #12]	; (800f3f4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800f3e8:	60da      	str	r2, [r3, #12]
}  // namespace TypedTextDatabase
 800f3ea:	bf00      	nop
 800f3ec:	3708      	adds	r7, #8
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}
 800f3f2:	bf00      	nop
 800f3f4:	20008354 	.word	0x20008354

0800f3f8 <_GLOBAL__sub_I__fonts>:
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	af00      	add	r7, sp, #0
 800f3fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f400:	2001      	movs	r0, #1
 800f402:	f7ff ffd1 	bl	800f3a8 <_Z41__static_initialization_and_destruction_0ii>
 800f406:	bd80      	pop	{r7, pc}

0800f408 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800f408:	b480      	push	{r7}
 800f40a:	b083      	sub	sp, #12
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
    {
    }
 800f410:	bf00      	nop
 800f412:	370c      	adds	r7, #12
 800f414:	46bd      	mov	sp, r7
 800f416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41a:	4770      	bx	lr

0800f41c <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800f41c:	b480      	push	{r7}
 800f41e:	b083      	sub	sp, #12
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
    {
    }
 800f424:	bf00      	nop
 800f426:	370c      	adds	r7, #12
 800f428:	46bd      	mov	sp, r7
 800f42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42e:	4770      	bx	lr

0800f430 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 800f430:	b480      	push	{r7}
 800f432:	b083      	sub	sp, #12
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
    {
 800f438:	4a04      	ldr	r2, [pc, #16]	; (800f44c <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	601a      	str	r2, [r3, #0]
    }
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	4618      	mov	r0, r3
 800f442:	370c      	adds	r7, #12
 800f444:	46bd      	mov	sp, r7
 800f446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44a:	4770      	bx	lr
 800f44c:	08024c70 	.word	0x08024c70

0800f450 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
    }
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	f7ff ffe9 	bl	800f430 <_ZN8touchgfx9PresenterD1Ev>
 800f45e:	2104      	movs	r1, #4
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f012 f9f4 	bl	802184e <_ZdlPvj>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	4618      	mov	r0, r3
 800f46a:	3708      	adds	r7, #8
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}

0800f470 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 800f470:	b480      	push	{r7}
 800f472:	b083      	sub	sp, #12
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
    {
 800f478:	4a04      	ldr	r2, [pc, #16]	; (800f48c <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	601a      	str	r2, [r3, #0]
    }
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	4618      	mov	r0, r3
 800f482:	370c      	adds	r7, #12
 800f484:	46bd      	mov	sp, r7
 800f486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48a:	4770      	bx	lr
 800f48c:	08024c70 	.word	0x08024c70

0800f490 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800f490:	b480      	push	{r7}
 800f492:	b083      	sub	sp, #12
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
 800f498:	4a06      	ldr	r2, [pc, #24]	; (800f4b4 <_ZN13ModelListenerC1Ev+0x24>)
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	601a      	str	r2, [r3, #0]
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	605a      	str	r2, [r3, #4]
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	370c      	adds	r7, #12
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b0:	4770      	bx	lr
 800f4b2:	bf00      	nop
 800f4b4:	08024c60 	.word	0x08024c60

0800f4b8 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800f4b8:	b480      	push	{r7}
 800f4ba:	b083      	sub	sp, #12
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
 800f4c0:	4a04      	ldr	r2, [pc, #16]	; (800f4d4 <_ZN13ModelListenerD1Ev+0x1c>)
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	601a      	str	r2, [r3, #0]
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	370c      	adds	r7, #12
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d2:	4770      	bx	lr
 800f4d4:	08024c60 	.word	0x08024c60

0800f4d8 <_ZN13ModelListenerD0Ev>:
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f7ff ffe9 	bl	800f4b8 <_ZN13ModelListenerD1Ev>
 800f4e6:	2108      	movs	r1, #8
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f012 f9b0 	bl	802184e <_ZdlPvj>
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3708      	adds	r7, #8
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}

0800f4f8 <_ZN19ChoixCanalPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~ChoixCanalPresenter() {};
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b082      	sub	sp, #8
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
 800f500:	4a09      	ldr	r2, [pc, #36]	; (800f528 <_ZN19ChoixCanalPresenterD1Ev+0x30>)
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	601a      	str	r2, [r3, #0]
 800f506:	4a09      	ldr	r2, [pc, #36]	; (800f52c <_ZN19ChoixCanalPresenterD1Ev+0x34>)
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	605a      	str	r2, [r3, #4]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	3304      	adds	r3, #4
 800f510:	4618      	mov	r0, r3
 800f512:	f7ff ffd1 	bl	800f4b8 <_ZN13ModelListenerD1Ev>
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	4618      	mov	r0, r3
 800f51a:	f7ff ff89 	bl	800f430 <_ZN8touchgfx9PresenterD1Ev>
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	4618      	mov	r0, r3
 800f522:	3708      	adds	r7, #8
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}
 800f528:	08024c38 	.word	0x08024c38
 800f52c:	08024c50 	.word	0x08024c50

0800f530 <_ZThn4_N19ChoixCanalPresenterD1Ev>:
 800f530:	f1a0 0004 	sub.w	r0, r0, #4
 800f534:	e7e0      	b.n	800f4f8 <_ZN19ChoixCanalPresenterD1Ev>
 800f536:	bf00      	nop

0800f538 <_ZN19ChoixCanalPresenterD0Ev>:
 800f538:	b580      	push	{r7, lr}
 800f53a:	b082      	sub	sp, #8
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f7ff ffd9 	bl	800f4f8 <_ZN19ChoixCanalPresenterD1Ev>
 800f546:	2110      	movs	r1, #16
 800f548:	6878      	ldr	r0, [r7, #4]
 800f54a:	f012 f980 	bl	802184e <_ZdlPvj>
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	4618      	mov	r0, r3
 800f552:	3708      	adds	r7, #8
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}

0800f558 <_ZThn4_N19ChoixCanalPresenterD0Ev>:
 800f558:	f1a0 0004 	sub.w	r0, r0, #4
 800f55c:	e7ec      	b.n	800f538 <_ZN19ChoixCanalPresenterD0Ev>
	...

0800f560 <_ZN19ChoixCanalPresenterC1ER14ChoixCanalView>:
#include <gui/choixcanal_screen/ChoixCanalView.hpp>
#include <gui/choixcanal_screen/ChoixCanalPresenter.hpp>

ChoixCanalPresenter::ChoixCanalPresenter(ChoixCanalView& v)
 800f560:	b580      	push	{r7, lr}
 800f562:	b082      	sub	sp, #8
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
 800f568:	6039      	str	r1, [r7, #0]
    : view(v)
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	4618      	mov	r0, r3
 800f56e:	f7ff ff7f 	bl	800f470 <_ZN8touchgfx9PresenterC1Ev>
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	3304      	adds	r3, #4
 800f576:	4618      	mov	r0, r3
 800f578:	f7ff ff8a 	bl	800f490 <_ZN13ModelListenerC1Ev>
 800f57c:	4a06      	ldr	r2, [pc, #24]	; (800f598 <_ZN19ChoixCanalPresenterC1ER14ChoixCanalView+0x38>)
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	601a      	str	r2, [r3, #0]
 800f582:	4a06      	ldr	r2, [pc, #24]	; (800f59c <_ZN19ChoixCanalPresenterC1ER14ChoixCanalView+0x3c>)
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	605a      	str	r2, [r3, #4]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	683a      	ldr	r2, [r7, #0]
 800f58c:	60da      	str	r2, [r3, #12]
{

}
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	4618      	mov	r0, r3
 800f592:	3708      	adds	r7, #8
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}
 800f598:	08024c38 	.word	0x08024c38
 800f59c:	08024c50 	.word	0x08024c50

0800f5a0 <_ZN19ChoixCanalPresenter8activateEv>:

void ChoixCanalPresenter::activate()
{
 800f5a0:	b480      	push	{r7}
 800f5a2:	b083      	sub	sp, #12
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]

}
 800f5a8:	bf00      	nop
 800f5aa:	370c      	adds	r7, #12
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b2:	4770      	bx	lr

0800f5b4 <_ZN19ChoixCanalPresenter10deactivateEv>:

void ChoixCanalPresenter::deactivate()
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b083      	sub	sp, #12
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]

}
 800f5bc:	bf00      	nop
 800f5be:	370c      	adds	r7, #12
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c6:	4770      	bx	lr

0800f5c8 <_ZN14ChoixCanalViewD1Ev>:

class ChoixCanalView : public ChoixCanalViewBase
{
public:
    ChoixCanalView();
    virtual ~ChoixCanalView() {}
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b082      	sub	sp, #8
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
 800f5d0:	4a05      	ldr	r2, [pc, #20]	; (800f5e8 <_ZN14ChoixCanalViewD1Ev+0x20>)
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	601a      	str	r2, [r3, #0]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f7fb f939 	bl	800a850 <_ZN18ChoixCanalViewBaseD1Ev>
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3708      	adds	r7, #8
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	08024c88 	.word	0x08024c88

0800f5ec <_ZN14ChoixCanalViewD0Ev>:
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b082      	sub	sp, #8
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f7ff ffe7 	bl	800f5c8 <_ZN14ChoixCanalViewD1Ev>
 800f5fa:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f012 f925 	bl	802184e <_ZdlPvj>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	4618      	mov	r0, r3
 800f608:	3708      	adds	r7, #8
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}
	...

0800f610 <_ZN14ChoixCanalViewC1Ev>:
#include <gui/choixcanal_screen/ChoixCanalView.hpp>

ChoixCanalView::ChoixCanalView()
 800f610:	b580      	push	{r7, lr}
 800f612:	b082      	sub	sp, #8
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	4618      	mov	r0, r3
 800f61c:	f7fb f9c2 	bl	800a9a4 <_ZN18ChoixCanalViewBaseC1Ev>
 800f620:	4a05      	ldr	r2, [pc, #20]	; (800f638 <_ZN14ChoixCanalViewC1Ev+0x28>)
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	601a      	str	r2, [r3, #0]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2200      	movs	r2, #0
 800f62a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
{

}
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	4618      	mov	r0, r3
 800f632:	3708      	adds	r7, #8
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}
 800f638:	08024c88 	.word	0x08024c88

0800f63c <_ZN14ChoixCanalView11setupScreenEv>:

void ChoixCanalView::setupScreen()
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b082      	sub	sp, #8
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
	ChoixCanalViewBase::setupScreen();
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	4618      	mov	r0, r3
 800f648:	f7fb fb62 	bl	800ad10 <_ZN18ChoixCanalViewBase11setupScreenEv>
}
 800f64c:	bf00      	nop
 800f64e:	3708      	adds	r7, #8
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}

0800f654 <_ZN14ChoixCanalView14tearDownScreenEv>:

void ChoixCanalView::tearDownScreen()
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b082      	sub	sp, #8
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
	ChoixCanalViewBase::tearDownScreen();
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	4618      	mov	r0, r3
 800f660:	f7fa fdcc 	bl	800a1fc <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800f664:	bf00      	nop
 800f666:	3708      	adds	r7, #8
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}

0800f66c <_ZN14ChoixCanalView20buttonConnectClickedEv>:

void ChoixCanalView::buttonConnectClicked()
{
 800f66c:	b480      	push	{r7}
 800f66e:	b083      	sub	sp, #12
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
	//touchgfx_printf("Bouton demarrer appuye\n");
}
 800f674:	bf00      	nop
 800f676:	370c      	adds	r7, #12
 800f678:	46bd      	mov	sp, r7
 800f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67e:	4770      	bx	lr

0800f680 <_ZN14ChoixCanalView15buttonUpClickedEv>:

void ChoixCanalView::buttonUpClicked()
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b082      	sub	sp, #8
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
	touchgfx_printf("Bouton Up appuye\n");

	canalVoilier++;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800f68e:	1c5a      	adds	r2, r3, #1
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
	if (canalVoilier>7) canalVoilier=7;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800f69c:	2b07      	cmp	r3, #7
 800f69e:	dd03      	ble.n	800f6a8 <_ZN14ChoixCanalView15buttonUpClickedEv+0x28>
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2207      	movs	r2, #7
 800f6a4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

	Unicode::snprintf(textCanalVoilierBuffer, TEXTCANALVOILIER_SIZE, "%d", canalVoilier);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f503 7012 	add.w	r0, r3, #584	; 0x248
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800f6b4:	4a06      	ldr	r2, [pc, #24]	; (800f6d0 <_ZN14ChoixCanalView15buttonUpClickedEv+0x50>)
 800f6b6:	210a      	movs	r1, #10
 800f6b8:	f008 fa90 	bl	8017bdc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textCanalVoilier.invalidate();
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f006 fdf4 	bl	80162b0 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800f6c8:	bf00      	nop
 800f6ca:	3708      	adds	r7, #8
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}
 800f6d0:	08023a2c 	.word	0x08023a2c

0800f6d4 <_ZN14ChoixCanalView17buttonDownClickedEv>:

void ChoixCanalView::buttonDownClicked()
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b082      	sub	sp, #8
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
	touchgfx_printf("Bouton Down appuye\n");

	canalVoilier--;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800f6e2:	1e5a      	subs	r2, r3, #1
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
	if (canalVoilier<0) canalVoilier=0;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	da03      	bge.n	800f6fc <_ZN14ChoixCanalView17buttonDownClickedEv+0x28>
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

	Unicode::snprintf(textCanalVoilierBuffer, TEXTCANALVOILIER_SIZE, "%d", canalVoilier);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f503 7012 	add.w	r0, r3, #584	; 0x248
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800f708:	4a06      	ldr	r2, [pc, #24]	; (800f724 <_ZN14ChoixCanalView17buttonDownClickedEv+0x50>)
 800f70a:	210a      	movs	r1, #10
 800f70c:	f008 fa66 	bl	8017bdc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textCanalVoilier.invalidate();
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 800f716:	4618      	mov	r0, r3
 800f718:	f006 fdca 	bl	80162b0 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800f71c:	bf00      	nop
 800f71e:	3708      	adds	r7, #8
 800f720:	46bd      	mov	sp, r7
 800f722:	bd80      	pop	{r7, pc}
 800f724:	08023a2c 	.word	0x08023a2c

0800f728 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800f728:	b580      	push	{r7, lr}
 800f72a:	b082      	sub	sp, #8
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
 800f730:	4a05      	ldr	r2, [pc, #20]	; (800f748 <_ZN19FrontendApplicationD1Ev+0x20>)
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	601a      	str	r2, [r3, #0]
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	4618      	mov	r0, r3
 800f73a:	f7fc fdf9 	bl	800c330 <_ZN23FrontendApplicationBaseD1Ev>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	4618      	mov	r0, r3
 800f742:	3708      	adds	r7, #8
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}
 800f748:	08024cc8 	.word	0x08024cc8

0800f74c <_ZN19FrontendApplicationD0Ev>:
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b082      	sub	sp, #8
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
 800f754:	6878      	ldr	r0, [r7, #4]
 800f756:	f7ff ffe7 	bl	800f728 <_ZN19FrontendApplicationD1Ev>
 800f75a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f012 f875 	bl	802184e <_ZdlPvj>
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	4618      	mov	r0, r3
 800f768:	3708      	adds	r7, #8
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}

0800f76e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800f76e:	b580      	push	{r7, lr}
 800f770:	b082      	sub	sp, #8
 800f772:	af00      	add	r7, sp, #0
 800f774:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800f77c:	4618      	mov	r0, r3
 800f77e:	f000 f975 	bl	800fa6c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	4618      	mov	r0, r3
 800f786:	f005 fff1 	bl	801576c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800f78a:	bf00      	nop
 800f78c:	3708      	adds	r7, #8
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}
	...

0800f794 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800f794:	b580      	push	{r7, lr}
 800f796:	b084      	sub	sp, #16
 800f798:	af00      	add	r7, sp, #0
 800f79a:	60f8      	str	r0, [r7, #12]
 800f79c:	60b9      	str	r1, [r7, #8]
 800f79e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	687a      	ldr	r2, [r7, #4]
 800f7a4:	68b9      	ldr	r1, [r7, #8]
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f7fc fe3c 	bl	800c424 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800f7ac:	4a03      	ldr	r2, [pc, #12]	; (800f7bc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	601a      	str	r2, [r3, #0]
{

}
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	3710      	adds	r7, #16
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}
 800f7bc:	08024cc8 	.word	0x08024cc8

0800f7c0 <_ZN17MessagesPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MessagesPresenter() {};
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b082      	sub	sp, #8
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	4a09      	ldr	r2, [pc, #36]	; (800f7f0 <_ZN17MessagesPresenterD1Ev+0x30>)
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	601a      	str	r2, [r3, #0]
 800f7ce:	4a09      	ldr	r2, [pc, #36]	; (800f7f4 <_ZN17MessagesPresenterD1Ev+0x34>)
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	605a      	str	r2, [r3, #4]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	3304      	adds	r3, #4
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7ff fe6d 	bl	800f4b8 <_ZN13ModelListenerD1Ev>
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f7ff fe25 	bl	800f430 <_ZN8touchgfx9PresenterD1Ev>
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	3708      	adds	r7, #8
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd80      	pop	{r7, pc}
 800f7f0:	08024d04 	.word	0x08024d04
 800f7f4:	08024d1c 	.word	0x08024d1c

0800f7f8 <_ZThn4_N17MessagesPresenterD1Ev>:
 800f7f8:	f1a0 0004 	sub.w	r0, r0, #4
 800f7fc:	e7e0      	b.n	800f7c0 <_ZN17MessagesPresenterD1Ev>
 800f7fe:	bf00      	nop

0800f800 <_ZN17MessagesPresenterD0Ev>:
 800f800:	b580      	push	{r7, lr}
 800f802:	b082      	sub	sp, #8
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f7ff ffd9 	bl	800f7c0 <_ZN17MessagesPresenterD1Ev>
 800f80e:	2110      	movs	r1, #16
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f012 f81c 	bl	802184e <_ZdlPvj>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	4618      	mov	r0, r3
 800f81a:	3708      	adds	r7, #8
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}

0800f820 <_ZThn4_N17MessagesPresenterD0Ev>:
 800f820:	f1a0 0004 	sub.w	r0, r0, #4
 800f824:	e7ec      	b.n	800f800 <_ZN17MessagesPresenterD0Ev>
	...

0800f828 <_ZN17MessagesPresenterC1ER12MessagesView>:
#include <gui/messages_screen/MessagesView.hpp>
#include <gui/messages_screen/MessagesPresenter.hpp>

MessagesPresenter::MessagesPresenter(MessagesView& v)
 800f828:	b580      	push	{r7, lr}
 800f82a:	b082      	sub	sp, #8
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	6039      	str	r1, [r7, #0]
    : view(v)
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	4618      	mov	r0, r3
 800f836:	f7ff fe1b 	bl	800f470 <_ZN8touchgfx9PresenterC1Ev>
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	3304      	adds	r3, #4
 800f83e:	4618      	mov	r0, r3
 800f840:	f7ff fe26 	bl	800f490 <_ZN13ModelListenerC1Ev>
 800f844:	4a06      	ldr	r2, [pc, #24]	; (800f860 <_ZN17MessagesPresenterC1ER12MessagesView+0x38>)
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	601a      	str	r2, [r3, #0]
 800f84a:	4a06      	ldr	r2, [pc, #24]	; (800f864 <_ZN17MessagesPresenterC1ER12MessagesView+0x3c>)
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	605a      	str	r2, [r3, #4]
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	683a      	ldr	r2, [r7, #0]
 800f854:	60da      	str	r2, [r3, #12]
{

}
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	4618      	mov	r0, r3
 800f85a:	3708      	adds	r7, #8
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	08024d04 	.word	0x08024d04
 800f864:	08024d1c 	.word	0x08024d1c

0800f868 <_ZN17MessagesPresenter8activateEv>:

void MessagesPresenter::activate()
{
 800f868:	b480      	push	{r7}
 800f86a:	b083      	sub	sp, #12
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]

}
 800f870:	bf00      	nop
 800f872:	370c      	adds	r7, #12
 800f874:	46bd      	mov	sp, r7
 800f876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87a:	4770      	bx	lr

0800f87c <_ZN17MessagesPresenter10deactivateEv>:

void MessagesPresenter::deactivate()
{
 800f87c:	b480      	push	{r7}
 800f87e:	b083      	sub	sp, #12
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]

}
 800f884:	bf00      	nop
 800f886:	370c      	adds	r7, #12
 800f888:	46bd      	mov	sp, r7
 800f88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88e:	4770      	bx	lr

0800f890 <_ZN12MessagesViewD1Ev>:

class MessagesView : public MessagesViewBase
{
public:
    MessagesView();
    virtual ~MessagesView() {}
 800f890:	b580      	push	{r7, lr}
 800f892:	b082      	sub	sp, #8
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	4a05      	ldr	r2, [pc, #20]	; (800f8b0 <_ZN12MessagesViewD1Ev+0x20>)
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	601a      	str	r2, [r3, #0]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f7fd fad9 	bl	800ce58 <_ZN16MessagesViewBaseD1Ev>
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	3708      	adds	r7, #8
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}
 800f8b0:	08024d2c 	.word	0x08024d2c

0800f8b4 <_ZN12MessagesViewD0Ev>:
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b082      	sub	sp, #8
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f7ff ffe7 	bl	800f890 <_ZN12MessagesViewD1Ev>
 800f8c2:	f641 1184 	movw	r1, #6532	; 0x1984
 800f8c6:	6878      	ldr	r0, [r7, #4]
 800f8c8:	f011 ffc1 	bl	802184e <_ZdlPvj>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3708      	adds	r7, #8
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
	...

0800f8d8 <_ZN12MessagesViewC1Ev>:
#include <gui/messages_screen/MessagesView.hpp>

MessagesView::MessagesView()
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7fd fb2c 	bl	800cf40 <_ZN16MessagesViewBaseC1Ev>
 800f8e8:	4a03      	ldr	r2, [pc, #12]	; (800f8f8 <_ZN12MessagesViewC1Ev+0x20>)
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	601a      	str	r2, [r3, #0]
{

}
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3708      	adds	r7, #8
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	08024d2c 	.word	0x08024d2c

0800f8fc <_ZN12MessagesView11setupScreenEv>:

void MessagesView::setupScreen()
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b084      	sub	sp, #16
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
	MessagesViewBase::setupScreen();
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	4618      	mov	r0, r3
 800f908:	f7fd fcde 	bl	800d2c8 <_ZN16MessagesViewBase11setupScreenEv>

	for (int i=0; i<TEXTMESSAGES_SIZE; i++)
 800f90c:	2300      	movs	r3, #0
 800f90e:	60fb      	str	r3, [r7, #12]
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	f240 52db 	movw	r2, #1499	; 0x5db
 800f916:	4293      	cmp	r3, r2
 800f918:	dc0a      	bgt.n	800f930 <_ZN12MessagesView11setupScreenEv+0x34>
	{
		textMessagesBuffer[i]=0;
 800f91a:	687a      	ldr	r2, [r7, #4]
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	33f8      	adds	r3, #248	; 0xf8
 800f920:	005b      	lsls	r3, r3, #1
 800f922:	4413      	add	r3, r2
 800f924:	2200      	movs	r2, #0
 800f926:	809a      	strh	r2, [r3, #4]
	for (int i=0; i<TEXTMESSAGES_SIZE; i++)
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	3301      	adds	r3, #1
 800f92c:	60fb      	str	r3, [r7, #12]
 800f92e:	e7ef      	b.n	800f910 <_ZN12MessagesView11setupScreenEv+0x14>
	}

	textMessagesBuffer[0]='\n';
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	220a      	movs	r2, #10
 800f934:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
}
 800f938:	bf00      	nop
 800f93a:	3710      	adds	r7, #16
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd80      	pop	{r7, pc}

0800f940 <_ZN12MessagesView14tearDownScreenEv>:

void MessagesView::tearDownScreen()
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b082      	sub	sp, #8
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
	MessagesViewBase::tearDownScreen();
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	4618      	mov	r0, r3
 800f94c:	f7fa fc56 	bl	800a1fc <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800f950:	bf00      	nop
 800f952:	3708      	adds	r7, #8
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}

0800f958 <_ZN12MessagesView15handleTickEventEv>:

void MessagesView::handleTickEvent()
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b09c      	sub	sp, #112	; 0x70
 800f95c:	af02      	add	r7, sp, #8
 800f95e:	6078      	str	r0, [r7, #4]
	static int counter=0;
	Unicode::UnicodeChar localStr[40];
	uint8_t utf8str[]="lorem_ipsum";
 800f960:	4a21      	ldr	r2, [pc, #132]	; (800f9e8 <_ZN12MessagesView15handleTickEventEv+0x90>)
 800f962:	f107 030c 	add.w	r3, r7, #12
 800f966:	ca07      	ldmia	r2, {r0, r1, r2}
 800f968:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	counter++;
 800f96c:	4b1f      	ldr	r3, [pc, #124]	; (800f9ec <_ZN12MessagesView15handleTickEventEv+0x94>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	3301      	adds	r3, #1
 800f972:	4a1e      	ldr	r2, [pc, #120]	; (800f9ec <_ZN12MessagesView15handleTickEventEv+0x94>)
 800f974:	6013      	str	r3, [r2, #0]
	if (counter>100)
 800f976:	4b1d      	ldr	r3, [pc, #116]	; (800f9ec <_ZN12MessagesView15handleTickEventEv+0x94>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	2b64      	cmp	r3, #100	; 0x64
 800f97c:	dd30      	ble.n	800f9e0 <_ZN12MessagesView15handleTickEventEv+0x88>
	{
		counter=0;
 800f97e:	4b1b      	ldr	r3, [pc, #108]	; (800f9ec <_ZN12MessagesView15handleTickEventEv+0x94>)
 800f980:	2200      	movs	r2, #0
 800f982:	601a      	str	r2, [r3, #0]

		if (Unicode::strlen(textMessagesBuffer)<TEXTMESSAGES_SIZE-20)
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f98a:	4618      	mov	r0, r3
 800f98c:	f007 fe2f 	bl	80175ee <_ZN8touchgfx7Unicode6strlenEPKt>
 800f990:	4603      	mov	r3, r0
 800f992:	461a      	mov	r2, r3
 800f994:	f240 53c7 	movw	r3, #1479	; 0x5c7
 800f998:	429a      	cmp	r2, r3
 800f99a:	bf94      	ite	ls
 800f99c:	2301      	movls	r3, #1
 800f99e:	2300      	movhi	r3, #0
 800f9a0:	b2db      	uxtb	r3, r3
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d01c      	beq.n	800f9e0 <_ZN12MessagesView15handleTickEventEv+0x88>
		{
			Unicode::fromUTF8(utf8str, localStr, 40);
 800f9a6:	f107 0118 	add.w	r1, r7, #24
 800f9aa:	f107 030c 	add.w	r3, r7, #12
 800f9ae:	2228      	movs	r2, #40	; 0x28
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f008 f920 	bl	8017bf6 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt>
			Unicode::snprintf(textMessagesBuffer, TEXTMESSAGES_SIZE,
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f503 70fa 	add.w	r0, r3, #500	; 0x1f4
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f9c2:	f107 0218 	add.w	r2, r7, #24
 800f9c6:	9300      	str	r3, [sp, #0]
 800f9c8:	4613      	mov	r3, r2
 800f9ca:	4a09      	ldr	r2, [pc, #36]	; (800f9f0 <_ZN12MessagesView15handleTickEventEv+0x98>)
 800f9cc:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800f9d0:	f008 f904 	bl	8017bdc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
					"%s\n%s",localStr, textMessagesBuffer);

			textMessages.invalidate();
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f006 fc68 	bl	80162b0 <_ZNK8touchgfx8Drawable10invalidateEv>
		}
	}
}
 800f9e0:	bf00      	nop
 800f9e2:	3768      	adds	r7, #104	; 0x68
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}
 800f9e8:	08023b14 	.word	0x08023b14
 800f9ec:	20008364 	.word	0x20008364
 800f9f0:	08023b0c 	.word	0x08023b0c

0800f9f4 <_ZN12MessagesView21buttonMessagesClickedEv>:

void MessagesView::buttonMessagesClicked()
{
 800f9f4:	b480      	push	{r7}
 800f9f6:	b083      	sub	sp, #12
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]

}
 800f9fc:	bf00      	nop
 800f9fe:	370c      	adds	r7, #12
 800fa00:	46bd      	mov	sp, r7
 800fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa06:	4770      	bx	lr

0800fa08 <_ZN12MessagesView17buttonWipeClickedEv>:

void MessagesView::buttonWipeClicked()
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b084      	sub	sp, #16
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
	textMessages.invalidate();
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800fa16:	4618      	mov	r0, r3
 800fa18:	f006 fc4a 	bl	80162b0 <_ZNK8touchgfx8Drawable10invalidateEv>

	for (int i=0; i<TEXTMESSAGES_SIZE; i++)
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	60fb      	str	r3, [r7, #12]
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	f240 52db 	movw	r2, #1499	; 0x5db
 800fa26:	4293      	cmp	r3, r2
 800fa28:	dc0a      	bgt.n	800fa40 <_ZN12MessagesView17buttonWipeClickedEv+0x38>
	{
		textMessagesBuffer[i]=0;
 800fa2a:	687a      	ldr	r2, [r7, #4]
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	33f8      	adds	r3, #248	; 0xf8
 800fa30:	005b      	lsls	r3, r3, #1
 800fa32:	4413      	add	r3, r2
 800fa34:	2200      	movs	r2, #0
 800fa36:	809a      	strh	r2, [r3, #4]
	for (int i=0; i<TEXTMESSAGES_SIZE; i++)
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	60fb      	str	r3, [r7, #12]
 800fa3e:	e7ef      	b.n	800fa20 <_ZN12MessagesView17buttonWipeClickedEv+0x18>
	}

	textMessagesBuffer[0]='\n';
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	220a      	movs	r2, #10
 800fa44:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
}
 800fa48:	bf00      	nop
 800fa4a:	3710      	adds	r7, #16
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}

0800fa50 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800fa50:	b480      	push	{r7}
 800fa52:	b083      	sub	sp, #12
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	601a      	str	r2, [r3, #0]
{

}
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	4618      	mov	r0, r3
 800fa62:	370c      	adds	r7, #12
 800fa64:	46bd      	mov	sp, r7
 800fa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6a:	4770      	bx	lr

0800fa6c <_ZN5Model4tickEv>:

void Model::tick()
{
 800fa6c:	b480      	push	{r7}
 800fa6e:	b083      	sub	sp, #12
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]

}
 800fa74:	bf00      	nop
 800fa76:	370c      	adds	r7, #12
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7e:	4770      	bx	lr

0800fa80 <_ZN24RotationVoilierPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~RotationVoilierPresenter() {};
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b082      	sub	sp, #8
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	4a09      	ldr	r2, [pc, #36]	; (800fab0 <_ZN24RotationVoilierPresenterD1Ev+0x30>)
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	601a      	str	r2, [r3, #0]
 800fa8e:	4a09      	ldr	r2, [pc, #36]	; (800fab4 <_ZN24RotationVoilierPresenterD1Ev+0x34>)
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	605a      	str	r2, [r3, #4]
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	3304      	adds	r3, #4
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7ff fd0d 	bl	800f4b8 <_ZN13ModelListenerD1Ev>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	4618      	mov	r0, r3
 800faa2:	f7ff fcc5 	bl	800f430 <_ZN8touchgfx9PresenterD1Ev>
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	4618      	mov	r0, r3
 800faaa:	3708      	adds	r7, #8
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}
 800fab0:	08024d68 	.word	0x08024d68
 800fab4:	08024d80 	.word	0x08024d80

0800fab8 <_ZThn4_N24RotationVoilierPresenterD1Ev>:
 800fab8:	f1a0 0004 	sub.w	r0, r0, #4
 800fabc:	e7e0      	b.n	800fa80 <_ZN24RotationVoilierPresenterD1Ev>
 800fabe:	bf00      	nop

0800fac0 <_ZN24RotationVoilierPresenterD0Ev>:
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b082      	sub	sp, #8
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f7ff ffd9 	bl	800fa80 <_ZN24RotationVoilierPresenterD1Ev>
 800face:	2110      	movs	r1, #16
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f011 febc 	bl	802184e <_ZdlPvj>
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	4618      	mov	r0, r3
 800fada:	3708      	adds	r7, #8
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}

0800fae0 <_ZThn4_N24RotationVoilierPresenterD0Ev>:
 800fae0:	f1a0 0004 	sub.w	r0, r0, #4
 800fae4:	e7ec      	b.n	800fac0 <_ZN24RotationVoilierPresenterD0Ev>
	...

0800fae8 <_ZN24RotationVoilierPresenterC1ER19RotationVoilierView>:
#include <gui/rotationvoilier_screen/RotationVoilierView.hpp>
#include <gui/rotationvoilier_screen/RotationVoilierPresenter.hpp>

RotationVoilierPresenter::RotationVoilierPresenter(RotationVoilierView& v)
 800fae8:	b580      	push	{r7, lr}
 800faea:	b082      	sub	sp, #8
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
 800faf0:	6039      	str	r1, [r7, #0]
    : view(v)
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	4618      	mov	r0, r3
 800faf6:	f7ff fcbb 	bl	800f470 <_ZN8touchgfx9PresenterC1Ev>
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	3304      	adds	r3, #4
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7ff fcc6 	bl	800f490 <_ZN13ModelListenerC1Ev>
 800fb04:	4a06      	ldr	r2, [pc, #24]	; (800fb20 <_ZN24RotationVoilierPresenterC1ER19RotationVoilierView+0x38>)
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	601a      	str	r2, [r3, #0]
 800fb0a:	4a06      	ldr	r2, [pc, #24]	; (800fb24 <_ZN24RotationVoilierPresenterC1ER19RotationVoilierView+0x3c>)
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	605a      	str	r2, [r3, #4]
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	683a      	ldr	r2, [r7, #0]
 800fb14:	60da      	str	r2, [r3, #12]
{

}
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3708      	adds	r7, #8
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	08024d68 	.word	0x08024d68
 800fb24:	08024d80 	.word	0x08024d80

0800fb28 <_ZN24RotationVoilierPresenter8activateEv>:

void RotationVoilierPresenter::activate()
{
 800fb28:	b480      	push	{r7}
 800fb2a:	b083      	sub	sp, #12
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]

}
 800fb30:	bf00      	nop
 800fb32:	370c      	adds	r7, #12
 800fb34:	46bd      	mov	sp, r7
 800fb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3a:	4770      	bx	lr

0800fb3c <_ZN24RotationVoilierPresenter10deactivateEv>:

void RotationVoilierPresenter::deactivate()
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	b083      	sub	sp, #12
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]

}
 800fb44:	bf00      	nop
 800fb46:	370c      	adds	r7, #12
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4e:	4770      	bx	lr

0800fb50 <_ZNK8touchgfx6Circle11getArcStartEv>:
    int16_t getArcStart() const
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b082      	sub	sp, #8
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
        return circleArcAngleStart.to<int>();
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	333c      	adds	r3, #60	; 0x3c
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f000 f9dd 	bl	800ff1c <_ZNK8touchgfx7CWRUtil2Q52toIiEET_v>
 800fb62:	4603      	mov	r3, r0
 800fb64:	b21b      	sxth	r3, r3
    }
 800fb66:	4618      	mov	r0, r3
 800fb68:	3708      	adds	r7, #8
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}

0800fb6e <_ZNK8touchgfx6Circle9getArcEndEv>:
    int16_t getArcEnd() const
 800fb6e:	b580      	push	{r7, lr}
 800fb70:	b082      	sub	sp, #8
 800fb72:	af00      	add	r7, sp, #0
 800fb74:	6078      	str	r0, [r7, #4]
        return circleArcAngleEnd.to<int>();
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	3340      	adds	r3, #64	; 0x40
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f000 f9ce 	bl	800ff1c <_ZNK8touchgfx7CWRUtil2Q52toIiEET_v>
 800fb80:	4603      	mov	r3, r0
 800fb82:	b21b      	sxth	r3, r3
    }
 800fb84:	4618      	mov	r0, r3
 800fb86:	3708      	adds	r7, #8
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <_ZN19RotationVoilierViewD1Ev>:

class RotationVoilierView : public RotationVoilierViewBase
{
public:
    RotationVoilierView();
    virtual ~RotationVoilierView() {}
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
 800fb94:	4a05      	ldr	r2, [pc, #20]	; (800fbac <_ZN19RotationVoilierViewD1Ev+0x20>)
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	601a      	str	r2, [r3, #0]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7fe f84f 	bl	800dc40 <_ZN23RotationVoilierViewBaseD1Ev>
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	4618      	mov	r0, r3
 800fba6:	3708      	adds	r7, #8
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}
 800fbac:	08024d90 	.word	0x08024d90

0800fbb0 <_ZN19RotationVoilierViewD0Ev>:
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b082      	sub	sp, #8
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
 800fbb8:	6878      	ldr	r0, [r7, #4]
 800fbba:	f7ff ffe7 	bl	800fb8c <_ZN19RotationVoilierViewD1Ev>
 800fbbe:	f242 0144 	movw	r1, #8260	; 0x2044
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	f011 fe43 	bl	802184e <_ZdlPvj>
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	4618      	mov	r0, r3
 800fbcc:	3708      	adds	r7, #8
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}
	...

0800fbd4 <_ZN19RotationVoilierViewC1Ev>:
#include <gui/rotationvoilier_screen/RotationVoilierView.hpp>

RotationVoilierView::RotationVoilierView()
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b082      	sub	sp, #8
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7fe f8d2 	bl	800dd88 <_ZN23RotationVoilierViewBaseC1Ev>
 800fbe4:	4a0c      	ldr	r2, [pc, #48]	; (800fc18 <_ZN19RotationVoilierViewC1Ev+0x44>)
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	601a      	str	r2, [r3, #0]
 800fbea:	687a      	ldr	r2, [r7, #4]
 800fbec:	f242 0338 	movw	r3, #8248	; 0x2038
 800fbf0:	4413      	add	r3, r2
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	601a      	str	r2, [r3, #0]
 800fbf6:	687a      	ldr	r2, [r7, #4]
 800fbf8:	f242 033c 	movw	r3, #8252	; 0x203c
 800fbfc:	4413      	add	r3, r2
 800fbfe:	2200      	movs	r2, #0
 800fc00:	601a      	str	r2, [r3, #0]
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800fc08:	2200      	movs	r2, #0
 800fc0a:	601a      	str	r2, [r3, #0]
{

}
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	4618      	mov	r0, r3
 800fc10:	3708      	adds	r7, #8
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}
 800fc16:	bf00      	nop
 800fc18:	08024d90 	.word	0x08024d90

0800fc1c <_ZN19RotationVoilierView11setupScreenEv>:

void RotationVoilierView::setupScreen()
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b082      	sub	sp, #8
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
	RotationVoilierViewBase::setupScreen();
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7fe fb76 	bl	800e318 <_ZN23RotationVoilierViewBase11setupScreenEv>
}
 800fc2c:	bf00      	nop
 800fc2e:	3708      	adds	r7, #8
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bd80      	pop	{r7, pc}

0800fc34 <_ZN19RotationVoilierView14tearDownScreenEv>:

void RotationVoilierView::tearDownScreen()
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
	RotationVoilierViewBase::tearDownScreen();
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f7fa fadc 	bl	800a1fc <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800fc44:	bf00      	nop
 800fc46:	3708      	adds	r7, #8
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}

0800fc4c <_ZN19RotationVoilierView21ButtonMessagesClickedEv>:

void RotationVoilierView::ButtonMessagesClicked()
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b083      	sub	sp, #12
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]

}
 800fc54:	bf00      	nop
 800fc56:	370c      	adds	r7, #12
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5e:	4770      	bx	lr

0800fc60 <_ZN19RotationVoilierView21sliderRotationChangedEi>:

void RotationVoilierView::sliderRotationChanged(int value)
{
 800fc60:	b590      	push	{r4, r7, lr}
 800fc62:	b083      	sub	sp, #12
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	6039      	str	r1, [r7, #0]
	rotationValue=value;
 800fc6a:	687a      	ldr	r2, [r7, #4]
 800fc6c:	f242 0338 	movw	r3, #8248	; 0x2038
 800fc70:	4413      	add	r3, r2
 800fc72:	683a      	ldr	r2, [r7, #0]
 800fc74:	601a      	str	r2, [r3, #0]
	rotationValue=(rotationValue-50)*2;
 800fc76:	687a      	ldr	r2, [r7, #4]
 800fc78:	f242 0338 	movw	r3, #8248	; 0x2038
 800fc7c:	4413      	add	r3, r2
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	3b32      	subs	r3, #50	; 0x32
 800fc82:	005a      	lsls	r2, r3, #1
 800fc84:	6879      	ldr	r1, [r7, #4]
 800fc86:	f242 0338 	movw	r3, #8248	; 0x2038
 800fc8a:	440b      	add	r3, r1
 800fc8c:	601a      	str	r2, [r3, #0]
	rotationValue = -rotationValue;
 800fc8e:	687a      	ldr	r2, [r7, #4]
 800fc90:	f242 0338 	movw	r3, #8248	; 0x2038
 800fc94:	4413      	add	r3, r2
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	425a      	negs	r2, r3
 800fc9a:	6879      	ldr	r1, [r7, #4]
 800fc9c:	f242 0338 	movw	r3, #8248	; 0x2038
 800fca0:	440b      	add	r3, r1
 800fca2:	601a      	str	r2, [r3, #0]

	textRotationSpeed.invalidate();
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f006 fb00 	bl	80162b0 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(textRotationSpeedBuffer,TEXTROTATIONSPEED_SIZE,"%d",abs(rotationValue));
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f503 7471 	add.w	r4, r3, #964	; 0x3c4
 800fcb6:	687a      	ldr	r2, [r7, #4]
 800fcb8:	f242 0338 	movw	r3, #8248	; 0x2038
 800fcbc:	4413      	add	r3, r2
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f000 f93b 	bl	800ff3c <_ZN8touchgfx3absIiEET_S1_>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	4a0d      	ldr	r2, [pc, #52]	; (800fd00 <_ZN19RotationVoilierView21sliderRotationChangedEi+0xa0>)
 800fcca:	210a      	movs	r1, #10
 800fccc:	4620      	mov	r0, r4
 800fcce:	f007 ff85 	bl	8017bdc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>

	if (!circleRotation.isVisible()) circleRotation.setVisible(true);
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7fa f9a5 	bl	800a028 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800fcde:	4603      	mov	r3, r0
 800fce0:	f083 0301 	eor.w	r3, r3, #1
 800fce4:	b2db      	uxtb	r3, r3
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d006      	beq.n	800fcf8 <_ZN19RotationVoilierView21sliderRotationChangedEi+0x98>
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800fcf0:	2101      	movs	r1, #1
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f7fd fed0 	bl	800da98 <_ZN8touchgfx8Drawable10setVisibleEb>
}
 800fcf8:	bf00      	nop
 800fcfa:	370c      	adds	r7, #12
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd90      	pop	{r4, r7, pc}
 800fd00:	08023bfc 	.word	0x08023bfc

0800fd04 <_ZN19RotationVoilierView22sliderRotationReleasedEi>:

void RotationVoilierView::sliderRotationReleased(int value)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b082      	sub	sp, #8
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	6039      	str	r1, [r7, #0]
	rotationValue=0;
 800fd0e:	687a      	ldr	r2, [r7, #4]
 800fd10:	f242 0338 	movw	r3, #8248	; 0x2038
 800fd14:	4413      	add	r3, r2
 800fd16:	2200      	movs	r2, #0
 800fd18:	601a      	str	r2, [r3, #0]

	sliderRotation.setValue(50);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800fd20:	2132      	movs	r1, #50	; 0x32
 800fd22:	4618      	mov	r0, r3
 800fd24:	f002 fa5b 	bl	80121de <_ZN8touchgfx6Slider8setValueEi>
	textRotationSpeed.invalidate();
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f006 fabe 	bl	80162b0 <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintf(textRotationSpeedBuffer,TEXTROTATIONSPEED_SIZE,"%d",rotationValue);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	f503 7071 	add.w	r0, r3, #964	; 0x3c4
 800fd3a:	687a      	ldr	r2, [r7, #4]
 800fd3c:	f242 0338 	movw	r3, #8248	; 0x2038
 800fd40:	4413      	add	r3, r2
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	4a13      	ldr	r2, [pc, #76]	; (800fd94 <_ZN19RotationVoilierView22sliderRotationReleasedEi+0x90>)
 800fd46:	210a      	movs	r1, #10
 800fd48:	f007 ff48 	bl	8017bdc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>

	circleRotation.invalidate();
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800fd52:	4618      	mov	r0, r3
 800fd54:	f004 f95c 	bl	8014010 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
	circleRotation.setArc(180, 180);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800fd5e:	22b4      	movs	r2, #180	; 0xb4
 800fd60:	21b4      	movs	r1, #180	; 0xb4
 800fd62:	4618      	mov	r0, r3
 800fd64:	f7fe fc52 	bl	800e60c <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>
	circleRotation.setVisible(false);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800fd6e:	2100      	movs	r1, #0
 800fd70:	4618      	mov	r0, r3
 800fd72:	f7fd fe91 	bl	800da98 <_ZN8touchgfx8Drawable10setVisibleEb>
	circleRotation.invalidate();
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f004 f947 	bl	8014010 <_ZNK8touchgfx12CanvasWidget10invalidateEv>

	rotationAnimate=0;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800fd88:	2200      	movs	r2, #0
 800fd8a:	601a      	str	r2, [r3, #0]
}
 800fd8c:	bf00      	nop
 800fd8e:	3708      	adds	r7, #8
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	08023bfc 	.word	0x08023bfc

0800fd98 <_ZN19RotationVoilierView15handleTickEventEv>:

void RotationVoilierView::handleTickEvent()
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b084      	sub	sp, #16
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
	if (rotationValue!=0)
 800fda0:	687a      	ldr	r2, [r7, #4]
 800fda2:	f242 0338 	movw	r3, #8248	; 0x2038
 800fda6:	4413      	add	r3, r2
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	f000 80b0 	beq.w	800ff10 <_ZN19RotationVoilierView15handleTickEventEv+0x178>
	{
		int arcStart, arcEnd;

		angleAdd=rotationValue/6;
 800fdb0:	687a      	ldr	r2, [r7, #4]
 800fdb2:	f242 0338 	movw	r3, #8248	; 0x2038
 800fdb6:	4413      	add	r3, r2
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	4a57      	ldr	r2, [pc, #348]	; (800ff18 <_ZN19RotationVoilierView15handleTickEventEv+0x180>)
 800fdbc:	fb82 1203 	smull	r1, r2, r2, r3
 800fdc0:	17db      	asrs	r3, r3, #31
 800fdc2:	1ad2      	subs	r2, r2, r3
 800fdc4:	6879      	ldr	r1, [r7, #4]
 800fdc6:	f242 033c 	movw	r3, #8252	; 0x203c
 800fdca:	440b      	add	r3, r1
 800fdcc:	601a      	str	r2, [r3, #0]
		if (angleAdd==0)
 800fdce:	687a      	ldr	r2, [r7, #4]
 800fdd0:	f242 033c 	movw	r3, #8252	; 0x203c
 800fdd4:	4413      	add	r3, r2
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d114      	bne.n	800fe06 <_ZN19RotationVoilierView15handleTickEventEv+0x6e>
		{
			if (rotationValue<0) angleAdd=-1;
 800fddc:	687a      	ldr	r2, [r7, #4]
 800fdde:	f242 0338 	movw	r3, #8248	; 0x2038
 800fde2:	4413      	add	r3, r2
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	da07      	bge.n	800fdfa <_ZN19RotationVoilierView15handleTickEventEv+0x62>
 800fdea:	687a      	ldr	r2, [r7, #4]
 800fdec:	f242 033c 	movw	r3, #8252	; 0x203c
 800fdf0:	4413      	add	r3, r2
 800fdf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fdf6:	601a      	str	r2, [r3, #0]
 800fdf8:	e005      	b.n	800fe06 <_ZN19RotationVoilierView15handleTickEventEv+0x6e>
			else  angleAdd=1;
 800fdfa:	687a      	ldr	r2, [r7, #4]
 800fdfc:	f242 033c 	movw	r3, #8252	; 0x203c
 800fe00:	4413      	add	r3, r2
 800fe02:	2201      	movs	r2, #1
 800fe04:	601a      	str	r2, [r3, #0]
		}

		if (rotationAnimate==1)
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	2b01      	cmp	r3, #1
 800fe10:	d12a      	bne.n	800fe68 <_ZN19RotationVoilierView15handleTickEventEv+0xd0>
		{
			/* fait bouger l'arc de cercle */
			arcStart = circleRotation.getArcStart() + angleAdd;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f7ff fe99 	bl	800fb50 <_ZNK8touchgfx6Circle11getArcStartEv>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	4619      	mov	r1, r3
 800fe22:	687a      	ldr	r2, [r7, #4]
 800fe24:	f242 033c 	movw	r3, #8252	; 0x203c
 800fe28:	4413      	add	r3, r2
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	440b      	add	r3, r1
 800fe2e:	60fb      	str	r3, [r7, #12]
			arcEnd = circleRotation.getArcEnd() +angleAdd;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800fe36:	4618      	mov	r0, r3
 800fe38:	f7ff fe99 	bl	800fb6e <_ZNK8touchgfx6Circle9getArcEndEv>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	4619      	mov	r1, r3
 800fe40:	687a      	ldr	r2, [r7, #4]
 800fe42:	f242 033c 	movw	r3, #8252	; 0x203c
 800fe46:	4413      	add	r3, r2
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	440b      	add	r3, r1
 800fe4c:	60bb      	str	r3, [r7, #8]

			if (arcEnd>=360)
 800fe4e:	68bb      	ldr	r3, [r7, #8]
 800fe50:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800fe54:	db48      	blt.n	800fee8 <_ZN19RotationVoilierView15handleTickEventEv+0x150>
			{
				arcEnd-=360;
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800fe5c:	60bb      	str	r3, [r7, #8]
				arcStart-=360;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800fe64:	60fb      	str	r3, [r7, #12]
 800fe66:	e03f      	b.n	800fee8 <_ZN19RotationVoilierView15handleTickEventEv+0x150>
			}
		}
		else
		{
			/* agrandi l'arc de cercle */
			if (rotationValue>0)
 800fe68:	687a      	ldr	r2, [r7, #4]
 800fe6a:	f242 0338 	movw	r3, #8248	; 0x2038
 800fe6e:	4413      	add	r3, r2
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	dd17      	ble.n	800fea6 <_ZN19RotationVoilierView15handleTickEventEv+0x10e>
			{
				arcStart = circleRotation.getArcStart() + angleAdd;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f7ff fe67 	bl	800fb50 <_ZNK8touchgfx6Circle11getArcStartEv>
 800fe82:	4603      	mov	r3, r0
 800fe84:	4619      	mov	r1, r3
 800fe86:	687a      	ldr	r2, [r7, #4]
 800fe88:	f242 033c 	movw	r3, #8252	; 0x203c
 800fe8c:	4413      	add	r3, r2
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	440b      	add	r3, r1
 800fe92:	60fb      	str	r3, [r7, #12]
				arcEnd = circleRotation.getArcEnd();
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f7ff fe67 	bl	800fb6e <_ZNK8touchgfx6Circle9getArcEndEv>
 800fea0:	4603      	mov	r3, r0
 800fea2:	60bb      	str	r3, [r7, #8]
 800fea4:	e016      	b.n	800fed4 <_ZN19RotationVoilierView15handleTickEventEv+0x13c>
			}
			else
			{
				arcStart = circleRotation.getArcStart() ;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800feac:	4618      	mov	r0, r3
 800feae:	f7ff fe4f 	bl	800fb50 <_ZNK8touchgfx6Circle11getArcStartEv>
 800feb2:	4603      	mov	r3, r0
 800feb4:	60fb      	str	r3, [r7, #12]
				arcEnd = circleRotation.getArcEnd()+ angleAdd;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800febc:	4618      	mov	r0, r3
 800febe:	f7ff fe56 	bl	800fb6e <_ZNK8touchgfx6Circle9getArcEndEv>
 800fec2:	4603      	mov	r3, r0
 800fec4:	4619      	mov	r1, r3
 800fec6:	687a      	ldr	r2, [r7, #4]
 800fec8:	f242 033c 	movw	r3, #8252	; 0x203c
 800fecc:	4413      	add	r3, r2
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	440b      	add	r3, r1
 800fed2:	60bb      	str	r3, [r7, #8]
			}

			if (arcStart-arcEnd>=60) rotationAnimate=1;
 800fed4:	68fa      	ldr	r2, [r7, #12]
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	1ad3      	subs	r3, r2, r3
 800feda:	2b3b      	cmp	r3, #59	; 0x3b
 800fedc:	dd04      	ble.n	800fee8 <_ZN19RotationVoilierView15handleTickEventEv+0x150>
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800fee4:	2201      	movs	r2, #1
 800fee6:	601a      	str	r2, [r3, #0]
		}

		circleRotation.invalidate();
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800feee:	4618      	mov	r0, r3
 800fef0:	f004 f88e 	bl	8014010 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
		circleRotation.setArc(arcStart, arcEnd);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800fefa:	68ba      	ldr	r2, [r7, #8]
 800fefc:	68f9      	ldr	r1, [r7, #12]
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7fe fb84 	bl	800e60c <_ZN8touchgfx6Circle6setArcIiEEvT_S2_>
		circleRotation.invalidate();
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f004 f880 	bl	8014010 <_ZNK8touchgfx12CanvasWidget10invalidateEv>
	}
}
 800ff10:	bf00      	nop
 800ff12:	3710      	adds	r7, #16
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}
 800ff18:	2aaaaaab 	.word	0x2aaaaaab

0800ff1c <_ZNK8touchgfx7CWRUtil2Q52toIiEET_v>:
        T to() const
 800ff1c:	b480      	push	{r7}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
            return (T)v / (T)Rasterizer::POLY_BASE_SIZE;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	da00      	bge.n	800ff2e <_ZNK8touchgfx7CWRUtil2Q52toIiEET_v+0x12>
 800ff2c:	331f      	adds	r3, #31
 800ff2e:	115b      	asrs	r3, r3, #5
        }
 800ff30:	4618      	mov	r0, r3
 800ff32:	370c      	adds	r7, #12
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr

0800ff3c <_ZN8touchgfx3absIiEET_S1_>:
 * @param d The entity on which to perform the abs.
 *
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
 800ff3c:	b480      	push	{r7}
 800ff3e:	b083      	sub	sp, #12
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
{
    if (d < 0)
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	da02      	bge.n	800ff50 <_ZN8touchgfx3absIiEET_S1_+0x14>
    {
        return -d;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	425b      	negs	r3, r3
 800ff4e:	e000      	b.n	800ff52 <_ZN8touchgfx3absIiEET_S1_+0x16>
    }
    return d;
 800ff50:	687b      	ldr	r3, [r7, #4]
}
 800ff52:	4618      	mov	r0, r3
 800ff54:	370c      	adds	r7, #12
 800ff56:	46bd      	mov	sp, r7
 800ff58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5c:	4770      	bx	lr
	...

0800ff60 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 800ff60:	b480      	push	{r7}
 800ff62:	b083      	sub	sp, #12
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
    {
 800ff68:	4a04      	ldr	r2, [pc, #16]	; (800ff7c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	601a      	str	r2, [r3, #0]
    }
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	4618      	mov	r0, r3
 800ff72:	370c      	adds	r7, #12
 800ff74:	46bd      	mov	sp, r7
 800ff76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7a:	4770      	bx	lr
 800ff7c:	08024de8 	.word	0x08024de8

0800ff80 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b082      	sub	sp, #8
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
    }
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f7ff ffe9 	bl	800ff60 <_ZN8touchgfx15TouchControllerD1Ev>
 800ff8e:	2104      	movs	r1, #4
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f011 fc5c 	bl	802184e <_ZdlPvj>
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	4618      	mov	r0, r3
 800ff9a:	3708      	adds	r7, #8
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}

0800ffa0 <_ZN20STM32TouchController4initEv>:

static TS_DrvTypeDef* tsDriver;
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b082      	sub	sp, #8
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800ffa8:	4b05      	ldr	r3, [pc, #20]	; (800ffc0 <_ZN20STM32TouchController4initEv+0x20>)
 800ffaa:	4a06      	ldr	r2, [pc, #24]	; (800ffc4 <_ZN20STM32TouchController4initEv+0x24>)
 800ffac:	601a      	str	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 800ffae:	4b04      	ldr	r3, [pc, #16]	; (800ffc0 <_ZN20STM32TouchController4initEv+0x20>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	68db      	ldr	r3, [r3, #12]
 800ffb4:	2070      	movs	r0, #112	; 0x70
 800ffb6:	4798      	blx	r3
}
 800ffb8:	bf00      	nop
 800ffba:	3708      	adds	r7, #8
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}
 800ffc0:	20008368 	.word	0x20008368
 800ffc4:	20000008 	.word	0x20000008

0800ffc8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b084      	sub	sp, #16
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	60f8      	str	r0, [r7, #12]
 800ffd0:	60b9      	str	r1, [r7, #8]
 800ffd2:	607a      	str	r2, [r7, #4]
    /* Checking if the screen has been touched */

    if (tsDriver)
 800ffd4:	4b0f      	ldr	r3, [pc, #60]	; (8010014 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d015      	beq.n	8010008 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
    {
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 800ffdc:	4b0d      	ldr	r3, [pc, #52]	; (8010014 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	691b      	ldr	r3, [r3, #16]
 800ffe2:	2070      	movs	r0, #112	; 0x70
 800ffe4:	4798      	blx	r3
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	bf14      	ite	ne
 800ffec:	2301      	movne	r3, #1
 800ffee:	2300      	moveq	r3, #0
 800fff0:	b2db      	uxtb	r3, r3
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d008      	beq.n	8010008 <_ZN20STM32TouchController11sampleTouchERlS0_+0x40>
        {
            /* Get each touch coordinates */
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 800fff6:	4b07      	ldr	r3, [pc, #28]	; (8010014 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	695b      	ldr	r3, [r3, #20]
 800fffc:	68ba      	ldr	r2, [r7, #8]
 800fffe:	6879      	ldr	r1, [r7, #4]
 8010000:	2070      	movs	r0, #112	; 0x70
 8010002:	4798      	blx	r3
            return true;
 8010004:	2301      	movs	r3, #1
 8010006:	e000      	b.n	801000a <_ZN20STM32TouchController11sampleTouchERlS0_+0x42>
        }
    }
    return false;
 8010008:	2300      	movs	r3, #0
}
 801000a:	4618      	mov	r0, r3
 801000c:	3710      	adds	r7, #16
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}
 8010012:	bf00      	nop
 8010014:	20008368 	.word	0x20008368

08010018 <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef* i2c_handler, uint8_t Addr)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b082      	sub	sp, #8
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
 8010020:	460b      	mov	r3, r1
 8010022:	70fb      	strb	r3, [r7, #3]
    /* De-initialize the I2C communication bus */
    HAL_I2C_DeInit(i2c_handler);
 8010024:	6878      	ldr	r0, [r7, #4]
 8010026:	f7f3 fd8d 	bl	8003b44 <HAL_I2C_DeInit>

    /* Re-Initialize the I2C communication bus */
    //I2Cx_Init(i2c_handler);
}
 801002a:	bf00      	nop
 801002c:	3708      	adds	r7, #8
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}

08010032 <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t* Buffer,
                                           uint16_t Length)
{
 8010032:	b580      	push	{r7, lr}
 8010034:	b08a      	sub	sp, #40	; 0x28
 8010036:	af04      	add	r7, sp, #16
 8010038:	60f8      	str	r0, [r7, #12]
 801003a:	4608      	mov	r0, r1
 801003c:	4611      	mov	r1, r2
 801003e:	461a      	mov	r2, r3
 8010040:	4603      	mov	r3, r0
 8010042:	72fb      	strb	r3, [r7, #11]
 8010044:	460b      	mov	r3, r1
 8010046:	813b      	strh	r3, [r7, #8]
 8010048:	4613      	mov	r3, r2
 801004a:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_OK;
 801004c:	2300      	movs	r3, #0
 801004e:	75fb      	strb	r3, [r7, #23]

    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8010050:	7afb      	ldrb	r3, [r7, #11]
 8010052:	b299      	uxth	r1, r3
 8010054:	88f8      	ldrh	r0, [r7, #6]
 8010056:	893a      	ldrh	r2, [r7, #8]
 8010058:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801005c:	9302      	str	r3, [sp, #8]
 801005e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010060:	9301      	str	r3, [sp, #4]
 8010062:	6a3b      	ldr	r3, [r7, #32]
 8010064:	9300      	str	r3, [sp, #0]
 8010066:	4603      	mov	r3, r0
 8010068:	68f8      	ldr	r0, [r7, #12]
 801006a:	f7f3 feaf 	bl	8003dcc <HAL_I2C_Mem_Read>
 801006e:	4603      	mov	r3, r0
 8010070:	75fb      	strb	r3, [r7, #23]

    /* Check the communication status */
    if (status != HAL_OK)
 8010072:	7dfb      	ldrb	r3, [r7, #23]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d004      	beq.n	8010082 <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht+0x50>
    {
        /* I2C error occurred */
        I2Cx_Error(i2c_handler, Addr);
 8010078:	7afb      	ldrb	r3, [r7, #11]
 801007a:	4619      	mov	r1, r3
 801007c:	68f8      	ldr	r0, [r7, #12]
 801007e:	f7ff ffcb 	bl	8010018 <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>
    }
    return status;
 8010082:	7dfb      	ldrb	r3, [r7, #23]
}
 8010084:	4618      	mov	r0, r3
 8010086:	3718      	adds	r7, #24
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}

0801008c <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t* Buffer,
                                            uint16_t Length)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b08a      	sub	sp, #40	; 0x28
 8010090:	af04      	add	r7, sp, #16
 8010092:	60f8      	str	r0, [r7, #12]
 8010094:	4608      	mov	r0, r1
 8010096:	4611      	mov	r1, r2
 8010098:	461a      	mov	r2, r3
 801009a:	4603      	mov	r3, r0
 801009c:	72fb      	strb	r3, [r7, #11]
 801009e:	460b      	mov	r3, r1
 80100a0:	813b      	strh	r3, [r7, #8]
 80100a2:	4613      	mov	r3, r2
 80100a4:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_OK;
 80100a6:	2300      	movs	r3, #0
 80100a8:	75fb      	strb	r3, [r7, #23]

    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80100aa:	7afb      	ldrb	r3, [r7, #11]
 80100ac:	b299      	uxth	r1, r3
 80100ae:	88f8      	ldrh	r0, [r7, #6]
 80100b0:	893a      	ldrh	r2, [r7, #8]
 80100b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80100b6:	9302      	str	r3, [sp, #8]
 80100b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80100ba:	9301      	str	r3, [sp, #4]
 80100bc:	6a3b      	ldr	r3, [r7, #32]
 80100be:	9300      	str	r3, [sp, #0]
 80100c0:	4603      	mov	r3, r0
 80100c2:	68f8      	ldr	r0, [r7, #12]
 80100c4:	f7f3 fd6e 	bl	8003ba4 <HAL_I2C_Mem_Write>
 80100c8:	4603      	mov	r3, r0
 80100ca:	75fb      	strb	r3, [r7, #23]

    /* Check the communication status */
    if (status != HAL_OK)
 80100cc:	7dfb      	ldrb	r3, [r7, #23]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d004      	beq.n	80100dc <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht+0x50>
    {
        /* Re-Initiaize the I2C Bus */
        I2Cx_Error(i2c_handler, Addr);
 80100d2:	7afb      	ldrb	r3, [r7, #11]
 80100d4:	4619      	mov	r1, r3
 80100d6:	68f8      	ldr	r0, [r7, #12]
 80100d8:	f7ff ff9e 	bl	8010018 <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>
    }
    return status;
 80100dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3718      	adds	r7, #24
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}
	...

080100e8 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b084      	sub	sp, #16
 80100ec:	af02      	add	r7, sp, #8
 80100ee:	4603      	mov	r3, r0
 80100f0:	71fb      	strb	r3, [r7, #7]
 80100f2:	460b      	mov	r3, r1
 80100f4:	71bb      	strb	r3, [r7, #6]
 80100f6:	4613      	mov	r3, r2
 80100f8:	717b      	strb	r3, [r7, #5]
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
 80100fa:	79bb      	ldrb	r3, [r7, #6]
 80100fc:	b29a      	uxth	r2, r3
 80100fe:	79f9      	ldrb	r1, [r7, #7]
 8010100:	2301      	movs	r3, #1
 8010102:	9301      	str	r3, [sp, #4]
 8010104:	1d7b      	adds	r3, r7, #5
 8010106:	9300      	str	r3, [sp, #0]
 8010108:	2301      	movs	r3, #1
 801010a:	4803      	ldr	r0, [pc, #12]	; (8010118 <TS_IO_Write+0x30>)
 801010c:	f7ff ffbe 	bl	801008c <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht>
}
 8010110:	bf00      	nop
 8010112:	3708      	adds	r7, #8
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}
 8010118:	2000b51c 	.word	0x2000b51c

0801011c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b086      	sub	sp, #24
 8010120:	af02      	add	r7, sp, #8
 8010122:	4603      	mov	r3, r0
 8010124:	460a      	mov	r2, r1
 8010126:	71fb      	strb	r3, [r7, #7]
 8010128:	4613      	mov	r3, r2
 801012a:	71bb      	strb	r3, [r7, #6]
    uint8_t read_value = 0;
 801012c:	2300      	movs	r3, #0
 801012e:	73fb      	strb	r3, [r7, #15]

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8010130:	79bb      	ldrb	r3, [r7, #6]
 8010132:	b29a      	uxth	r2, r3
 8010134:	79f9      	ldrb	r1, [r7, #7]
 8010136:	2301      	movs	r3, #1
 8010138:	9301      	str	r3, [sp, #4]
 801013a:	f107 030f 	add.w	r3, r7, #15
 801013e:	9300      	str	r3, [sp, #0]
 8010140:	2301      	movs	r3, #1
 8010142:	4804      	ldr	r0, [pc, #16]	; (8010154 <TS_IO_Read+0x38>)
 8010144:	f7ff ff75 	bl	8010032 <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht>

    return read_value;
 8010148:	7bfb      	ldrb	r3, [r7, #15]
}
 801014a:	4618      	mov	r0, r3
 801014c:	3710      	adds	r7, #16
 801014e:	46bd      	mov	sp, r7
 8010150:	bd80      	pop	{r7, pc}
 8010152:	bf00      	nop
 8010154:	2000b51c 	.word	0x2000b51c

08010158 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8010158:	b580      	push	{r7, lr}
 801015a:	b082      	sub	sp, #8
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
 8010160:	4a05      	ldr	r2, [pc, #20]	; (8010178 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	601a      	str	r2, [r3, #0]
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	4618      	mov	r0, r3
 801016a:	f7ff fef9 	bl	800ff60 <_ZN8touchgfx15TouchControllerD1Ev>
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	4618      	mov	r0, r3
 8010172:	3708      	adds	r7, #8
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}
 8010178:	08024dd0 	.word	0x08024dd0

0801017c <_ZN20STM32TouchControllerD0Ev>:
 801017c:	b580      	push	{r7, lr}
 801017e:	b082      	sub	sp, #8
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f7ff ffe7 	bl	8010158 <_ZN20STM32TouchControllerD1Ev>
 801018a:	2104      	movs	r1, #4
 801018c:	6878      	ldr	r0, [r7, #4]
 801018e:	f011 fb5e 	bl	802184e <_ZdlPvj>
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	4618      	mov	r0, r3
 8010196:	3708      	adds	r7, #8
 8010198:	46bd      	mov	sp, r7
 801019a:	bd80      	pop	{r7, pc}

0801019c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 801019c:	b480      	push	{r7}
 801019e:	b083      	sub	sp, #12
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	4603      	mov	r3, r0
 80101a4:	71fb      	strb	r3, [r7, #7]

}
 80101a6:	bf00      	nop
 80101a8:	370c      	adds	r7, #12
 80101aa:	46bd      	mov	sp, r7
 80101ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b0:	4770      	bx	lr

080101b2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80101b2:	b480      	push	{r7}
 80101b4:	b083      	sub	sp, #12
 80101b6:	af00      	add	r7, sp, #0
 80101b8:	4603      	mov	r3, r0
 80101ba:	71fb      	strb	r3, [r7, #7]

}
 80101bc:	bf00      	nop
 80101be:	370c      	adds	r7, #12
 80101c0:	46bd      	mov	sp, r7
 80101c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c6:	4770      	bx	lr

080101c8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80101c8:	b480      	push	{r7}
 80101ca:	b083      	sub	sp, #12
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	4603      	mov	r3, r0
 80101d0:	71fb      	strb	r3, [r7, #7]

}
 80101d2:	bf00      	nop
 80101d4:	370c      	adds	r7, #12
 80101d6:	46bd      	mov	sp, r7
 80101d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101dc:	4770      	bx	lr
	...

080101e0 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80101e0:	b480      	push	{r7}
 80101e2:	b083      	sub	sp, #12
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
    {
 80101e8:	4a04      	ldr	r2, [pc, #16]	; (80101fc <_ZN8touchgfx3HALD1Ev+0x1c>)
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	601a      	str	r2, [r3, #0]
    }
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	4618      	mov	r0, r3
 80101f2:	370c      	adds	r7, #12
 80101f4:	46bd      	mov	sp, r7
 80101f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fa:	4770      	bx	lr
 80101fc:	08025b70 	.word	0x08025b70

08010200 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8010200:	b580      	push	{r7, lr}
 8010202:	b082      	sub	sp, #8
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
    }
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	f7ff ffe9 	bl	80101e0 <_ZN8touchgfx3HALD1Ev>
 801020e:	2178      	movs	r1, #120	; 0x78
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f011 fb1c 	bl	802184e <_ZdlPvj>
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	4618      	mov	r0, r3
 801021a:	3708      	adds	r7, #8
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}

08010220 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8010220:	b480      	push	{r7}
 8010222:	b083      	sub	sp, #12
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
 8010228:	460b      	mov	r3, r1
 801022a:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	78fa      	ldrb	r2, [r7, #3]
 8010230:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2201      	movs	r2, #1
 8010238:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 801023c:	bf00      	nop
 801023e:	370c      	adds	r7, #12
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr

08010248 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	685a      	ldr	r2, [r3, #4]
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	685b      	ldr	r3, [r3, #4]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	4610      	mov	r0, r2
 801025e:	4798      	blx	r3
 8010260:	4603      	mov	r3, r0
    }
 8010262:	4618      	mov	r0, r3
 8010264:	3708      	adds	r7, #8
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}

0801026a <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 801026a:	b580      	push	{r7, lr}
 801026c:	b082      	sub	sp, #8
 801026e:	af00      	add	r7, sp, #0
 8010270:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f003 f826 	bl	80132c4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	3390      	adds	r3, #144	; 0x90
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	6878      	ldr	r0, [r7, #4]
 8010282:	4798      	blx	r3
    }
 8010284:	bf00      	nop
 8010286:	3708      	adds	r7, #8
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}

0801028c <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 801028c:	b480      	push	{r7}
 801028e:	b083      	sub	sp, #12
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	6039      	str	r1, [r7, #0]
    {
        return false;
 8010296:	2300      	movs	r3, #0
    }
 8010298:	4618      	mov	r0, r3
 801029a:	370c      	adds	r7, #12
 801029c:	46bd      	mov	sp, r7
 801029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a2:	4770      	bx	lr

080102a4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 80102a4:	b590      	push	{r4, r7, lr}
 80102a6:	b08b      	sub	sp, #44	; 0x2c
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	60f8      	str	r0, [r7, #12]
 80102ac:	60b9      	str	r1, [r7, #8]
 80102ae:	4611      	mov	r1, r2
 80102b0:	461a      	mov	r2, r3
 80102b2:	460b      	mov	r3, r1
 80102b4:	80fb      	strh	r3, [r7, #6]
 80102b6:	4613      	mov	r3, r2
 80102b8:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 80102ba:	f7f9 ff29 	bl	800a110 <_ZN8touchgfx3HAL3lcdEv>
 80102be:	4602      	mov	r2, r0
 80102c0:	6813      	ldr	r3, [r2, #0]
 80102c2:	3328      	adds	r3, #40	; 0x28
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	4610      	mov	r0, r2
 80102c8:	4798      	blx	r3
 80102ca:	4603      	mov	r3, r0
 80102cc:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 80102ce:	8b7b      	ldrh	r3, [r7, #26]
 80102d0:	4a3d      	ldr	r2, [pc, #244]	; (80103c8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 80102d2:	8812      	ldrh	r2, [r2, #0]
 80102d4:	fb02 f303 	mul.w	r3, r2, r3
 80102d8:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 80102da:	68bb      	ldr	r3, [r7, #8]
 80102dc:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 80102de:	2300      	movs	r3, #0
 80102e0:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 80102e2:	2300      	movs	r3, #0
 80102e4:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 80102e6:	797b      	ldrb	r3, [r7, #5]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d005      	beq.n	80102f8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 80102ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	4413      	add	r3, r2
 80102f2:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 80102f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f6:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 80102f8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d005      	beq.n	801030c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8010300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	4413      	add	r3, r2
 8010306:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8010308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801030a:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 801030c:	88fb      	ldrh	r3, [r7, #6]
 801030e:	3b01      	subs	r3, #1
 8010310:	2b1f      	cmp	r3, #31
 8010312:	d84d      	bhi.n	80103b0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8010314:	a201      	add	r2, pc, #4	; (adr r2, 801031c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8010316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801031a:	bf00      	nop
 801031c:	0801039d 	.word	0x0801039d
 8010320:	0801039d 	.word	0x0801039d
 8010324:	080103b1 	.word	0x080103b1
 8010328:	0801039d 	.word	0x0801039d
 801032c:	080103b1 	.word	0x080103b1
 8010330:	080103b1 	.word	0x080103b1
 8010334:	080103b1 	.word	0x080103b1
 8010338:	0801039d 	.word	0x0801039d
 801033c:	080103b1 	.word	0x080103b1
 8010340:	080103b1 	.word	0x080103b1
 8010344:	080103b1 	.word	0x080103b1
 8010348:	080103b1 	.word	0x080103b1
 801034c:	080103b1 	.word	0x080103b1
 8010350:	080103b1 	.word	0x080103b1
 8010354:	080103b1 	.word	0x080103b1
 8010358:	0801039d 	.word	0x0801039d
 801035c:	080103b1 	.word	0x080103b1
 8010360:	080103b1 	.word	0x080103b1
 8010364:	080103b1 	.word	0x080103b1
 8010368:	080103b1 	.word	0x080103b1
 801036c:	080103b1 	.word	0x080103b1
 8010370:	080103b1 	.word	0x080103b1
 8010374:	080103b1 	.word	0x080103b1
 8010378:	0801039d 	.word	0x0801039d
 801037c:	080103b1 	.word	0x080103b1
 8010380:	080103b1 	.word	0x080103b1
 8010384:	080103b1 	.word	0x080103b1
 8010388:	080103b1 	.word	0x080103b1
 801038c:	080103b1 	.word	0x080103b1
 8010390:	080103b1 	.word	0x080103b1
 8010394:	080103b1 	.word	0x080103b1
 8010398:	0801039d 	.word	0x0801039d
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	3374      	adds	r3, #116	; 0x74
 80103a2:	681c      	ldr	r4, [r3, #0]
 80103a4:	69fb      	ldr	r3, [r7, #28]
 80103a6:	6a3a      	ldr	r2, [r7, #32]
 80103a8:	68b9      	ldr	r1, [r7, #8]
 80103aa:	68f8      	ldr	r0, [r7, #12]
 80103ac:	47a0      	blx	r4
            break;
 80103ae:	e006      	b.n	80103be <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 80103b0:	4b06      	ldr	r3, [pc, #24]	; (80103cc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 80103b2:	4a07      	ldr	r2, [pc, #28]	; (80103d0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 80103b4:	f240 3125 	movw	r1, #805	; 0x325
 80103b8:	4806      	ldr	r0, [pc, #24]	; (80103d4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 80103ba:	f011 ffc1 	bl	8022340 <__assert_func>
            break;
        }
    }
 80103be:	bf00      	nop
 80103c0:	372c      	adds	r7, #44	; 0x2c
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd90      	pop	{r4, r7, pc}
 80103c6:	bf00      	nop
 80103c8:	2000b25c 	.word	0x2000b25c
 80103cc:	08023c00 	.word	0x08023c00
 80103d0:	08024efc 	.word	0x08024efc
 80103d4:	08023c20 	.word	0x08023c20

080103d8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80103d8:	b580      	push	{r7, lr}
 80103da:	b084      	sub	sp, #16
 80103dc:	af00      	add	r7, sp, #0
 80103de:	60f8      	str	r0, [r7, #12]
 80103e0:	60b9      	str	r1, [r7, #8]
 80103e2:	607a      	str	r2, [r7, #4]
 80103e4:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d106      	bne.n	80103fa <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80103ec:	4b11      	ldr	r3, [pc, #68]	; (8010434 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80103ee:	4a12      	ldr	r2, [pc, #72]	; (8010438 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80103f0:	f240 3137 	movw	r1, #823	; 0x337
 80103f4:	4811      	ldr	r0, [pc, #68]	; (801043c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 80103f6:	f011 ffa3 	bl	8022340 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	68ba      	ldr	r2, [r7, #8]
 80103fe:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	687a      	ldr	r2, [r7, #4]
 8010404:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	683a      	ldr	r2, [r7, #0]
 801040a:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2b00      	cmp	r3, #0
 8010410:	bf14      	ite	ne
 8010412:	2301      	movne	r3, #1
 8010414:	2300      	moveq	r3, #0
 8010416:	b2da      	uxtb	r2, r3
 8010418:	4b09      	ldr	r3, [pc, #36]	; (8010440 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 801041a:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	2b00      	cmp	r3, #0
 8010420:	bf14      	ite	ne
 8010422:	2301      	movne	r3, #1
 8010424:	2300      	moveq	r3, #0
 8010426:	b2da      	uxtb	r2, r3
 8010428:	4b06      	ldr	r3, [pc, #24]	; (8010444 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 801042a:	701a      	strb	r2, [r3, #0]
    }
 801042c:	bf00      	nop
 801042e:	3710      	adds	r7, #16
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}
 8010434:	08023c64 	.word	0x08023c64
 8010438:	08024eac 	.word	0x08024eac
 801043c:	08023c20 	.word	0x08023c20
 8010440:	2000b25e 	.word	0x2000b25e
 8010444:	2000b25f 	.word	0x2000b25f

08010448 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8010448:	b580      	push	{r7, lr}
 801044a:	b082      	sub	sp, #8
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	460b      	mov	r3, r1
 8010452:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010458:	2b00      	cmp	r3, #0
 801045a:	d004      	beq.n	8010466 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010460:	887a      	ldrh	r2, [r7, #2]
 8010462:	4610      	mov	r0, r2
 8010464:	4798      	blx	r3
        }
    }
 8010466:	bf00      	nop
 8010468:	3708      	adds	r7, #8
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}

0801046e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *        not used, then the getTFTCurrentLine function is never called and can be
     *        disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 801046e:	b480      	push	{r7}
 8010470:	b083      	sub	sp, #12
 8010472:	af00      	add	r7, sp, #0
 8010474:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8010476:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 801047a:	4618      	mov	r0, r3
 801047c:	370c      	adds	r7, #12
 801047e:	46bd      	mov	sp, r7
 8010480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010484:	4770      	bx	lr

08010486 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8010486:	b580      	push	{r7, lr}
 8010488:	b082      	sub	sp, #8
 801048a:	af00      	add	r7, sp, #0
 801048c:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	685a      	ldr	r2, [r3, #4]
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	685b      	ldr	r3, [r3, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	3318      	adds	r3, #24
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	4610      	mov	r0, r2
 801049e:	4798      	blx	r3
 80104a0:	4603      	mov	r3, r0
    }
 80104a2:	4618      	mov	r0, r3
 80104a4:	3708      	adds	r7, #8
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}
	...

080104ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 80104ac:	b480      	push	{r7}
 80104ae:	b083      	sub	sp, #12
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80104c0:	429a      	cmp	r2, r3
 80104c2:	d017      	beq.n	80104f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 80104c4:	4b1a      	ldr	r3, [pc, #104]	; (8010530 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80104c6:	781b      	ldrb	r3, [r3, #0]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d12a      	bne.n	8010522 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80104cc:	4b19      	ldr	r3, [pc, #100]	; (8010534 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80104ce:	881a      	ldrh	r2, [r3, #0]
 80104d0:	4b19      	ldr	r3, [pc, #100]	; (8010538 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80104d2:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80104d4:	4b19      	ldr	r3, [pc, #100]	; (801053c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80104d6:	881a      	ldrh	r2, [r3, #0]
 80104d8:	4b19      	ldr	r3, [pc, #100]	; (8010540 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80104da:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 80104dc:	4b16      	ldr	r3, [pc, #88]	; (8010538 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80104de:	881a      	ldrh	r2, [r3, #0]
 80104e0:	4b16      	ldr	r3, [pc, #88]	; (801053c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80104e2:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 80104e4:	4b16      	ldr	r3, [pc, #88]	; (8010540 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80104e6:	881a      	ldrh	r2, [r3, #0]
 80104e8:	4b12      	ldr	r3, [pc, #72]	; (8010534 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80104ea:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 80104ec:	4b10      	ldr	r3, [pc, #64]	; (8010530 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80104ee:	2201      	movs	r2, #1
 80104f0:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80104f2:	e016      	b.n	8010522 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 80104f4:	4b0e      	ldr	r3, [pc, #56]	; (8010530 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80104f6:	781b      	ldrb	r3, [r3, #0]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d012      	beq.n	8010522 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 80104fc:	4b0f      	ldr	r3, [pc, #60]	; (801053c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80104fe:	881a      	ldrh	r2, [r3, #0]
 8010500:	4b0d      	ldr	r3, [pc, #52]	; (8010538 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8010502:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8010504:	4b0b      	ldr	r3, [pc, #44]	; (8010534 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8010506:	881a      	ldrh	r2, [r3, #0]
 8010508:	4b0d      	ldr	r3, [pc, #52]	; (8010540 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801050a:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 801050c:	4b0c      	ldr	r3, [pc, #48]	; (8010540 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801050e:	881a      	ldrh	r2, [r3, #0]
 8010510:	4b0a      	ldr	r3, [pc, #40]	; (801053c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8010512:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8010514:	4b08      	ldr	r3, [pc, #32]	; (8010538 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8010516:	881a      	ldrh	r2, [r3, #0]
 8010518:	4b06      	ldr	r3, [pc, #24]	; (8010534 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801051a:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 801051c:	4b04      	ldr	r3, [pc, #16]	; (8010530 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801051e:	2200      	movs	r2, #0
 8010520:	701a      	strb	r2, [r3, #0]
    }
 8010522:	bf00      	nop
 8010524:	370c      	adds	r7, #12
 8010526:	46bd      	mov	sp, r7
 8010528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052c:	4770      	bx	lr
 801052e:	bf00      	nop
 8010530:	2000b258 	.word	0x2000b258
 8010534:	2000b254 	.word	0x2000b254
 8010538:	2000b25a 	.word	0x2000b25a
 801053c:	2000b256 	.word	0x2000b256
 8010540:	2000b25c 	.word	0x2000b25c

08010544 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8010544:	b580      	push	{r7, lr}
 8010546:	b082      	sub	sp, #8
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	4618      	mov	r0, r3
 8010550:	f002 f93b 	bl	80127ca <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8010554:	bf00      	nop
 8010556:	3708      	adds	r7, #8
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}

0801055c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 801055c:	b580      	push	{r7, lr}
 801055e:	b082      	sub	sp, #8
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
 8010564:	4a05      	ldr	r2, [pc, #20]	; (801057c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	601a      	str	r2, [r3, #0]
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	4618      	mov	r0, r3
 801056e:	f7ff fe37 	bl	80101e0 <_ZN8touchgfx3HALD1Ev>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	4618      	mov	r0, r3
 8010576:	3708      	adds	r7, #8
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}
 801057c:	080250d4 	.word	0x080250d4

08010580 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8010580:	b580      	push	{r7, lr}
 8010582:	b082      	sub	sp, #8
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f7ff ffe7 	bl	801055c <_ZN20TouchGFXGeneratedHALD1Ev>
 801058e:	2178      	movs	r1, #120	; 0x78
 8010590:	6878      	ldr	r0, [r7, #4]
 8010592:	f011 f95c 	bl	802184e <_ZdlPvj>
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	4618      	mov	r0, r3
 801059a:	3708      	adds	r7, #8
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}

080105a0 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b082      	sub	sp, #8
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7ff ffca 	bl	8010544 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80105b0:	bf00      	nop
 80105b2:	3708      	adds	r7, #8
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bd80      	pop	{r7, pc}

080105b8 <_ZN11TouchGFXHAL10initializeEv>:
#include "stm32f7xx.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b082      	sub	sp, #8
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	4618      	mov	r0, r3
 80105c4:	f001 fabc 	bl	8011b40 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80105c8:	bf00      	nop
 80105ca:	3708      	adds	r7, #8
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}

080105d0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b082      	sub	sp, #8
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	4618      	mov	r0, r3
 80105dc:	f001 fb32 	bl	8011c44 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80105e0:	4603      	mov	r3, r0
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3708      	adds	r7, #8
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}

080105ea <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80105ea:	b580      	push	{r7, lr}
 80105ec:	b082      	sub	sp, #8
 80105ee:	af00      	add	r7, sp, #0
 80105f0:	6078      	str	r0, [r7, #4]
 80105f2:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6839      	ldr	r1, [r7, #0]
 80105f8:	4618      	mov	r0, r3
 80105fa:	f001 fb31 	bl	8011c60 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80105fe:	bf00      	nop
 8010600:	3708      	adds	r7, #8
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}

08010606 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8010606:	b580      	push	{r7, lr}
 8010608:	b082      	sub	sp, #8
 801060a:	af00      	add	r7, sp, #0
 801060c:	6078      	str	r0, [r7, #4]
 801060e:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	6839      	ldr	r1, [r7, #0]
 8010614:	4618      	mov	r0, r3
 8010616:	f001 fb39 	bl	8011c8c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
}
 801061a:	bf00      	nop
 801061c:	3708      	adds	r7, #8
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}

08010622 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8010622:	b580      	push	{r7, lr}
 8010624:	b082      	sub	sp, #8
 8010626:	af00      	add	r7, sp, #0
 8010628:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	4618      	mov	r0, r3
 801062e:	f001 faaf 	bl	8011b90 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8010632:	bf00      	nop
 8010634:	3708      	adds	r7, #8
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}

0801063a <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 801063a:	b580      	push	{r7, lr}
 801063c:	b082      	sub	sp, #8
 801063e:	af00      	add	r7, sp, #0
 8010640:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	4618      	mov	r0, r3
 8010646:	f001 fab3 	bl	8011bb0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 801064a:	bf00      	nop
 801064c:	3708      	adds	r7, #8
 801064e:	46bd      	mov	sp, r7
 8010650:	bd80      	pop	{r7, pc}

08010652 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8010652:	b580      	push	{r7, lr}
 8010654:	b082      	sub	sp, #8
 8010656:	af00      	add	r7, sp, #0
 8010658:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	4618      	mov	r0, r3
 801065e:	f001 fab5 	bl	8011bcc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8010662:	bf00      	nop
 8010664:	3708      	adds	r7, #8
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}

0801066a <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 801066a:	b580      	push	{r7, lr}
 801066c:	b082      	sub	sp, #8
 801066e:	af00      	add	r7, sp, #0
 8010670:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	4618      	mov	r0, r3
 8010676:	f001 fab7 	bl	8011be8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 801067a:	bf00      	nop
 801067c:	3708      	adds	r7, #8
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}
	...

08010684 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8010684:	b580      	push	{r7, lr}
 8010686:	b082      	sub	sp, #8
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
 801068c:	4a05      	ldr	r2, [pc, #20]	; (80106a4 <_ZN11TouchGFXHALD1Ev+0x20>)
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	601a      	str	r2, [r3, #0]
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	4618      	mov	r0, r3
 8010696:	f7ff ff61 	bl	801055c <_ZN20TouchGFXGeneratedHALD1Ev>
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	4618      	mov	r0, r3
 801069e:	3708      	adds	r7, #8
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}
 80106a4:	08024e00 	.word	0x08024e00

080106a8 <_ZN11TouchGFXHALD0Ev>:
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b082      	sub	sp, #8
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
 80106b0:	6878      	ldr	r0, [r7, #4]
 80106b2:	f7ff ffe7 	bl	8010684 <_ZN11TouchGFXHALD1Ev>
 80106b6:	2178      	movs	r1, #120	; 0x78
 80106b8:	6878      	ldr	r0, [r7, #4]
 80106ba:	f011 f8c8 	bl	802184e <_ZdlPvj>
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	4618      	mov	r0, r3
 80106c2:	3708      	adds	r7, #8
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bd80      	pop	{r7, pc}

080106c8 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 80106cc:	2203      	movs	r2, #3
 80106ce:	2100      	movs	r1, #0
 80106d0:	2001      	movs	r0, #1
 80106d2:	f7f6 fe59 	bl	8007388 <xQueueGenericCreate>
 80106d6:	4602      	mov	r2, r0
 80106d8:	4b0b      	ldr	r3, [pc, #44]	; (8010708 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80106da:	601a      	str	r2, [r3, #0]
 80106dc:	4b0a      	ldr	r3, [pc, #40]	; (8010708 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d006      	beq.n	80106f2 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 80106e4:	4b08      	ldr	r3, [pc, #32]	; (8010708 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80106e6:	6818      	ldr	r0, [r3, #0]
 80106e8:	2300      	movs	r3, #0
 80106ea:	2200      	movs	r2, #0
 80106ec:	2100      	movs	r1, #0
 80106ee:	f7f6 fea5 	bl	800743c <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 80106f2:	2200      	movs	r2, #0
 80106f4:	2101      	movs	r1, #1
 80106f6:	2001      	movs	r0, #1
 80106f8:	f7f6 fe46 	bl	8007388 <xQueueGenericCreate>
 80106fc:	4602      	mov	r2, r0
 80106fe:	4b03      	ldr	r3, [pc, #12]	; (801070c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8010700:	601a      	str	r2, [r3, #0]
}
 8010702:	bf00      	nop
 8010704:	bd80      	pop	{r7, pc}
 8010706:	bf00      	nop
 8010708:	2000836c 	.word	0x2000836c
 801070c:	20008370 	.word	0x20008370

08010710 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8010710:	b580      	push	{r7, lr}
 8010712:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8010714:	4b04      	ldr	r3, [pc, #16]	; (8010728 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801071c:	4618      	mov	r0, r3
 801071e:	f7f7 f99f 	bl	8007a60 <xQueueSemaphoreTake>
}
 8010722:	bf00      	nop
 8010724:	bd80      	pop	{r7, pc}
 8010726:	bf00      	nop
 8010728:	2000836c 	.word	0x2000836c

0801072c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 801072c:	b580      	push	{r7, lr}
 801072e:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 8010730:	4b04      	ldr	r3, [pc, #16]	; (8010744 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 8010732:	6818      	ldr	r0, [r3, #0]
 8010734:	2300      	movs	r3, #0
 8010736:	2200      	movs	r2, #0
 8010738:	2100      	movs	r1, #0
 801073a:	f7f6 fe7f 	bl	800743c <xQueueGenericSend>
}
 801073e:	bf00      	nop
 8010740:	bd80      	pop	{r7, pc}
 8010742:	bf00      	nop
 8010744:	2000836c 	.word	0x2000836c

08010748 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8010748:	b580      	push	{r7, lr}
 801074a:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 801074c:	4b03      	ldr	r3, [pc, #12]	; (801075c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	2100      	movs	r1, #0
 8010752:	4618      	mov	r0, r3
 8010754:	f7f7 f984 	bl	8007a60 <xQueueSemaphoreTake>
}
 8010758:	bf00      	nop
 801075a:	bd80      	pop	{r7, pc}
 801075c:	2000836c 	.word	0x2000836c

08010760 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b082      	sub	sp, #8
 8010764:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 8010766:	2300      	movs	r3, #0
 8010768:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 801076a:	4b0b      	ldr	r3, [pc, #44]	; (8010798 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	1d3a      	adds	r2, r7, #4
 8010770:	4611      	mov	r1, r2
 8010772:	4618      	mov	r0, r3
 8010774:	f7f7 f800 	bl	8007778 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d007      	beq.n	801078e <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 801077e:	4b07      	ldr	r3, [pc, #28]	; (801079c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8010780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010784:	601a      	str	r2, [r3, #0]
 8010786:	f3bf 8f4f 	dsb	sy
 801078a:	f3bf 8f6f 	isb	sy
}
 801078e:	bf00      	nop
 8010790:	3708      	adds	r7, #8
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}
 8010796:	bf00      	nop
 8010798:	2000836c 	.word	0x2000836c
 801079c:	e000ed04 	.word	0xe000ed04

080107a0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b082      	sub	sp, #8
 80107a4:	af00      	add	r7, sp, #0
    if (vsync_q)
 80107a6:	4b0e      	ldr	r3, [pc, #56]	; (80107e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d013      	beq.n	80107d6 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 80107ae:	2300      	movs	r3, #0
 80107b0:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 80107b2:	4b0b      	ldr	r3, [pc, #44]	; (80107e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 80107b4:	6818      	ldr	r0, [r3, #0]
 80107b6:	1d3a      	adds	r2, r7, #4
 80107b8:	2300      	movs	r3, #0
 80107ba:	490a      	ldr	r1, [pc, #40]	; (80107e4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 80107bc:	f7f6 ff40 	bl	8007640 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d007      	beq.n	80107d6 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 80107c6:	4b08      	ldr	r3, [pc, #32]	; (80107e8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 80107c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107cc:	601a      	str	r2, [r3, #0]
 80107ce:	f3bf 8f4f 	dsb	sy
 80107d2:	f3bf 8f6f 	isb	sy
    }
}
 80107d6:	bf00      	nop
 80107d8:	3708      	adds	r7, #8
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}
 80107de:	bf00      	nop
 80107e0:	20008370 	.word	0x20008370
 80107e4:	20000048 	.word	0x20000048
 80107e8:	e000ed04 	.word	0xe000ed04

080107ec <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 80107f0:	4b08      	ldr	r3, [pc, #32]	; (8010814 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	2200      	movs	r2, #0
 80107f6:	4908      	ldr	r1, [pc, #32]	; (8010818 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80107f8:	4618      	mov	r0, r3
 80107fa:	f7f7 f84f 	bl	800789c <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 80107fe:	4b05      	ldr	r3, [pc, #20]	; (8010814 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010806:	4904      	ldr	r1, [pc, #16]	; (8010818 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8010808:	4618      	mov	r0, r3
 801080a:	f7f7 f847 	bl	800789c <xQueueReceive>
}
 801080e:	bf00      	nop
 8010810:	bd80      	pop	{r7, pc}
 8010812:	bf00      	nop
 8010814:	20008370 	.word	0x20008370
 8010818:	20000048 	.word	0x20000048

0801081c <__NVIC_EnableIRQ>:
{
 801081c:	b480      	push	{r7}
 801081e:	b083      	sub	sp, #12
 8010820:	af00      	add	r7, sp, #0
 8010822:	4603      	mov	r3, r0
 8010824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801082a:	2b00      	cmp	r3, #0
 801082c:	db0d      	blt.n	801084a <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010832:	b2db      	uxtb	r3, r3
 8010834:	f003 021f 	and.w	r2, r3, #31
 8010838:	4907      	ldr	r1, [pc, #28]	; (8010858 <__NVIC_EnableIRQ+0x3c>)
 801083a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801083e:	095b      	lsrs	r3, r3, #5
 8010840:	2001      	movs	r0, #1
 8010842:	fa00 f202 	lsl.w	r2, r0, r2
 8010846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801084a:	bf00      	nop
 801084c:	370c      	adds	r7, #12
 801084e:	46bd      	mov	sp, r7
 8010850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010854:	4770      	bx	lr
 8010856:	bf00      	nop
 8010858:	e000e100 	.word	0xe000e100

0801085c <__NVIC_DisableIRQ>:
{
 801085c:	b480      	push	{r7}
 801085e:	b083      	sub	sp, #12
 8010860:	af00      	add	r7, sp, #0
 8010862:	4603      	mov	r3, r0
 8010864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801086a:	2b00      	cmp	r3, #0
 801086c:	db12      	blt.n	8010894 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010872:	b2db      	uxtb	r3, r3
 8010874:	f003 021f 	and.w	r2, r3, #31
 8010878:	4909      	ldr	r1, [pc, #36]	; (80108a0 <__NVIC_DisableIRQ+0x44>)
 801087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801087e:	095b      	lsrs	r3, r3, #5
 8010880:	2001      	movs	r0, #1
 8010882:	fa00 f202 	lsl.w	r2, r0, r2
 8010886:	3320      	adds	r3, #32
 8010888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801088c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8010890:	f3bf 8f6f 	isb	sy
}
 8010894:	bf00      	nop
 8010896:	370c      	adds	r7, #12
 8010898:	46bd      	mov	sp, r7
 801089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089e:	4770      	bx	lr
 80108a0:	e000e100 	.word	0xe000e100

080108a4 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 80108a4:	b480      	push	{r7}
 80108a6:	b083      	sub	sp, #12
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2200      	movs	r2, #0
 80108b0:	601a      	str	r2, [r3, #0]
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	4618      	mov	r0, r3
 80108b6:	370c      	adds	r7, #12
 80108b8:	46bd      	mov	sp, r7
 80108ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108be:	4770      	bx	lr

080108c0 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 80108c0:	b480      	push	{r7}
 80108c2:	b083      	sub	sp, #12
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
        return color;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
    }
 80108cc:	4618      	mov	r0, r3
 80108ce:	370c      	adds	r7, #12
 80108d0:	46bd      	mov	sp, r7
 80108d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d6:	4770      	bx	lr

080108d8 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 80108d8:	b480      	push	{r7}
 80108da:	b083      	sub	sp, #12
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	b29b      	uxth	r3, r3
    }
 80108e6:	4618      	mov	r0, r3
 80108e8:	370c      	adds	r7, #12
 80108ea:	46bd      	mov	sp, r7
 80108ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f0:	4770      	bx	lr
	...

080108f4 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 80108f4:	b480      	push	{r7}
 80108f6:	b083      	sub	sp, #12
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
    {
 80108fc:	4a04      	ldr	r2, [pc, #16]	; (8010910 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	601a      	str	r2, [r3, #0]
    }
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	4618      	mov	r0, r3
 8010906:	370c      	adds	r7, #12
 8010908:	46bd      	mov	sp, r7
 801090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090e:	4770      	bx	lr
 8010910:	08024fa8 	.word	0x08024fa8

08010914 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8010914:	b580      	push	{r7, lr}
 8010916:	b082      	sub	sp, #8
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
    }
 801091c:	6878      	ldr	r0, [r7, #4]
 801091e:	f7ff ffe9 	bl	80108f4 <_ZN8touchgfx9DMA_QueueD1Ev>
 8010922:	2104      	movs	r1, #4
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f010 ff92 	bl	802184e <_ZdlPvj>
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	4618      	mov	r0, r3
 801092e:	3708      	adds	r7, #8
 8010930:	46bd      	mov	sp, r7
 8010932:	bd80      	pop	{r7, pc}

08010934 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8010934:	b580      	push	{r7, lr}
 8010936:	b082      	sub	sp, #8
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	3344      	adds	r3, #68	; 0x44
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	4798      	blx	r3
    }
 8010948:	bf00      	nop
 801094a:	3708      	adds	r7, #8
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}

08010950 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8010950:	b480      	push	{r7}
 8010952:	b083      	sub	sp, #12
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8010958:	2300      	movs	r3, #0
    }
 801095a:	4618      	mov	r0, r3
 801095c:	370c      	adds	r7, #12
 801095e:	46bd      	mov	sp, r7
 8010960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010964:	4770      	bx	lr
	...

08010968 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8010968:	b480      	push	{r7}
 801096a:	b083      	sub	sp, #12
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
    {
 8010970:	4a04      	ldr	r2, [pc, #16]	; (8010984 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	601a      	str	r2, [r3, #0]
    }
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	4618      	mov	r0, r3
 801097a:	370c      	adds	r7, #12
 801097c:	46bd      	mov	sp, r7
 801097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010982:	4770      	bx	lr
 8010984:	08025fb4 	.word	0x08025fb4

08010988 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8010988:	b580      	push	{r7, lr}
 801098a:	b082      	sub	sp, #8
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
    }
 8010990:	6878      	ldr	r0, [r7, #4]
 8010992:	f7ff ffe9 	bl	8010968 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8010996:	210c      	movs	r1, #12
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f010 ff58 	bl	802184e <_ZdlPvj>
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	4618      	mov	r0, r3
 80109a2:	3708      	adds	r7, #8
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bd80      	pop	{r7, pc}

080109a8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80109a8:	b480      	push	{r7}
 80109aa:	b083      	sub	sp, #12
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80109b2:	4a09      	ldr	r2, [pc, #36]	; (80109d8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	601a      	str	r2, [r3, #0]
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	683a      	ldr	r2, [r7, #0]
 80109bc:	605a      	str	r2, [r3, #4]
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	2200      	movs	r2, #0
 80109c2:	721a      	strb	r2, [r3, #8]
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2200      	movs	r2, #0
 80109c8:	725a      	strb	r2, [r3, #9]
    {
    }
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	4618      	mov	r0, r3
 80109ce:	370c      	adds	r7, #12
 80109d0:	46bd      	mov	sp, r7
 80109d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d6:	4770      	bx	lr
 80109d8:	08025fb4 	.word	0x08025fb4

080109dc <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80109dc:	b580      	push	{r7, lr}
 80109de:	b082      	sub	sp, #8
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	685a      	ldr	r2, [r3, #4]
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	685b      	ldr	r3, [r3, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	3314      	adds	r3, #20
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	4610      	mov	r0, r2
 80109f4:	4798      	blx	r3
    }
 80109f6:	bf00      	nop
 80109f8:	3708      	adds	r7, #8
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}

080109fe <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80109fe:	b580      	push	{r7, lr}
 8010a00:	b082      	sub	sp, #8
 8010a02:	af00      	add	r7, sp, #0
 8010a04:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8010a06:	687a      	ldr	r2, [r7, #4]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	3328      	adds	r3, #40	; 0x28
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	4610      	mov	r0, r2
 8010a12:	4798      	blx	r3
    }
 8010a14:	bf00      	nop
 8010a16:	3708      	adds	r7, #8
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}

08010a1c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8010a1c:	b480      	push	{r7}
 8010a1e:	b085      	sub	sp, #20
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	60f8      	str	r0, [r7, #12]
 8010a24:	60b9      	str	r1, [r7, #8]
 8010a26:	607a      	str	r2, [r7, #4]
 8010a28:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8010a34:	68ba      	ldr	r2, [r7, #8]
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	430a      	orrs	r2, r1
 8010a3c:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a44:	f023 0107 	bic.w	r1, r3, #7
 8010a48:	687a      	ldr	r2, [r7, #4]
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	430a      	orrs	r2, r1
 8010a50:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010a58:	4b06      	ldr	r3, [pc, #24]	; (8010a74 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 8010a5a:	4013      	ands	r3, r2
 8010a5c:	6839      	ldr	r1, [r7, #0]
 8010a5e:	68fa      	ldr	r2, [r7, #12]
 8010a60:	6812      	ldr	r2, [r2, #0]
 8010a62:	430b      	orrs	r3, r1
 8010a64:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8010a66:	2300      	movs	r3, #0
}
 8010a68:	4618      	mov	r0, r3
 8010a6a:	3714      	adds	r7, #20
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a72:	4770      	bx	lr
 8010a74:	ffffc000 	.word	0xffffc000

08010a78 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b082      	sub	sp, #8
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END DMA2D_XferCpltCallback */

    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8010a80:	f7f9 fb3a 	bl	800a0f8 <_ZN8touchgfx3HAL11getInstanceEv>
 8010a84:	4603      	mov	r3, r0
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7ff ffa8 	bl	80109dc <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8010a8c:	bf00      	nop
 8010a8e:	3708      	adds	r7, #8
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}

08010a94 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b082      	sub	sp, #8
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
    assert(0);
 8010a9c:	4b02      	ldr	r3, [pc, #8]	; (8010aa8 <DMA2D_XferErrorCallback+0x14>)
 8010a9e:	4a03      	ldr	r2, [pc, #12]	; (8010aac <DMA2D_XferErrorCallback+0x18>)
 8010aa0:	213e      	movs	r1, #62	; 0x3e
 8010aa2:	4803      	ldr	r0, [pc, #12]	; (8010ab0 <DMA2D_XferErrorCallback+0x1c>)
 8010aa4:	f011 fc4c 	bl	8022340 <__assert_func>
 8010aa8:	08023c9c 	.word	0x08023c9c
 8010aac:	08024fc4 	.word	0x08024fc4
 8010ab0:	08023ca0 	.word	0x08023ca0

08010ab4 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b082      	sub	sp, #8
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	3318      	adds	r3, #24
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f7ff feef 	bl	80108a4 <_ZN8touchgfx9colortypeC1Ev>
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3708      	adds	r7, #8
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}

08010ad0 <_ZN10STM32F7DMAC1Ev>:
}

}

STM32F7DMA::STM32F7DMA()
 8010ad0:	b5b0      	push	{r4, r5, r7, lr}
 8010ad2:	b082      	sub	sp, #8
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8010ad8:	687a      	ldr	r2, [r7, #4]
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	330c      	adds	r3, #12
 8010ade:	4619      	mov	r1, r3
 8010ae0:	4610      	mov	r0, r2
 8010ae2:	f7ff ff61 	bl	80109a8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8010ae6:	4a0e      	ldr	r2, [pc, #56]	; (8010b20 <_ZN10STM32F7DMAC1Ev+0x50>)
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	601a      	str	r2, [r3, #0]
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	f103 000c 	add.w	r0, r3, #12
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	3320      	adds	r3, #32
 8010af6:	2260      	movs	r2, #96	; 0x60
 8010af8:	4619      	mov	r1, r3
 8010afa:	f002 fd09 	bl	8013510 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	3320      	adds	r3, #32
 8010b02:	245f      	movs	r4, #95	; 0x5f
 8010b04:	461d      	mov	r5, r3
 8010b06:	2c00      	cmp	r4, #0
 8010b08:	db05      	blt.n	8010b16 <_ZN10STM32F7DMAC1Ev+0x46>
 8010b0a:	4628      	mov	r0, r5
 8010b0c:	f7ff ffd2 	bl	8010ab4 <_ZN8touchgfx6BlitOpC1Ev>
 8010b10:	3520      	adds	r5, #32
 8010b12:	3c01      	subs	r4, #1
 8010b14:	e7f7      	b.n	8010b06 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	4618      	mov	r0, r3
 8010b1a:	3708      	adds	r7, #8
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bdb0      	pop	{r4, r5, r7, pc}
 8010b20:	08024f58 	.word	0x08024f58

08010b24 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b082      	sub	sp, #8
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
 8010b2c:	4a0b      	ldr	r2, [pc, #44]	; (8010b5c <_ZN10STM32F7DMAD1Ev+0x38>)
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 8010b32:	480b      	ldr	r0, [pc, #44]	; (8010b60 <_ZN10STM32F7DMAD1Ev+0x3c>)
 8010b34:	f7f2 f8fa 	bl	8002d2c <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8010b38:	205a      	movs	r0, #90	; 0x5a
 8010b3a:	f7ff fe8f 	bl	801085c <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	330c      	adds	r3, #12
 8010b42:	4618      	mov	r0, r3
 8010b44:	f000 faa0 	bl	8011088 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f7ff ff0c 	bl	8010968 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	4618      	mov	r0, r3
 8010b54:	3708      	adds	r7, #8
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}
 8010b5a:	bf00      	nop
 8010b5c:	08024f58 	.word	0x08024f58
 8010b60:	2000b638 	.word	0x2000b638

08010b64 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b082      	sub	sp, #8
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
}
 8010b6c:	6878      	ldr	r0, [r7, #4]
 8010b6e:	f7ff ffd9 	bl	8010b24 <_ZN10STM32F7DMAD1Ev>
 8010b72:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f010 fe69 	bl	802184e <_ZdlPvj>
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	4618      	mov	r0, r3
 8010b80:	3708      	adds	r7, #8
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}
	...

08010b88 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b082      	sub	sp, #8
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8010b90:	4b09      	ldr	r3, [pc, #36]	; (8010bb8 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8010b92:	4a0a      	ldr	r2, [pc, #40]	; (8010bbc <_ZN10STM32F7DMA10initializeEv+0x34>)
 8010b94:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8010b96:	4808      	ldr	r0, [pc, #32]	; (8010bb8 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8010b98:	f7f2 f87e 	bl	8002c98 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8010b9c:	4b06      	ldr	r3, [pc, #24]	; (8010bb8 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8010b9e:	4a08      	ldr	r2, [pc, #32]	; (8010bc0 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8010ba0:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8010ba2:	4b05      	ldr	r3, [pc, #20]	; (8010bb8 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8010ba4:	4a07      	ldr	r2, [pc, #28]	; (8010bc4 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8010ba6:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8010ba8:	205a      	movs	r0, #90	; 0x5a
 8010baa:	f7ff fe37 	bl	801081c <__NVIC_EnableIRQ>
}
 8010bae:	bf00      	nop
 8010bb0:	3708      	adds	r7, #8
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd80      	pop	{r7, pc}
 8010bb6:	bf00      	nop
 8010bb8:	2000b638 	.word	0x2000b638
 8010bbc:	4002b000 	.word	0x4002b000
 8010bc0:	08010a79 	.word	0x08010a79
 8010bc4:	08010a95 	.word	0x08010a95

08010bc8 <_ZN10STM32F7DMA11getBlitCapsEv>:

BlitOperations STM32F7DMA::getBlitCaps()
{
 8010bc8:	b480      	push	{r7}
 8010bca:	b083      	sub	sp, #12
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 8010bd0:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	370c      	adds	r7, #12
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bde:	4770      	bx	lr

08010be0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8010be0:	b590      	push	{r4, r7, lr}
 8010be2:	b08d      	sub	sp, #52	; 0x34
 8010be4:	af02      	add	r7, sp, #8
 8010be6:	6078      	str	r0, [r7, #4]
 8010be8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 8010bea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010bee:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8010bf8:	2b20      	cmp	r3, #32
 8010bfa:	d007      	beq.n	8010c0c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 8010bfc:	683b      	ldr	r3, [r7, #0]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	2b40      	cmp	r3, #64	; 0x40
 8010c02:	d003      	beq.n	8010c0c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	2b04      	cmp	r3, #4
 8010c0a:	d101      	bne.n	8010c10 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 8010c0c:	2301      	movs	r3, #1
 8010c0e:	e000      	b.n	8010c12 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8010c10:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8010c12:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8010c18:	2b80      	cmp	r3, #128	; 0x80
 8010c1a:	d004      	beq.n	8010c26 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c24:	d101      	bne.n	8010c2a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8010c26:	2301      	movs	r3, #1
 8010c28:	e000      	b.n	8010c2c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 8010c2a:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8010c2c:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 8010c2e:	f7f9 fa6f 	bl	800a110 <_ZN8touchgfx3HAL3lcdEv>
 8010c32:	4602      	mov	r2, r0
 8010c34:	6813      	ldr	r3, [r2, #0]
 8010c36:	3320      	adds	r3, #32
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	4610      	mov	r0, r2
 8010c3c:	4798      	blx	r3
 8010c3e:	4603      	mov	r3, r0
 8010c40:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	2b40      	cmp	r3, #64	; 0x40
 8010c48:	d01d      	beq.n	8010c86 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8010c4a:	2b40      	cmp	r3, #64	; 0x40
 8010c4c:	d804      	bhi.n	8010c58 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 8010c4e:	2b04      	cmp	r3, #4
 8010c50:	d00e      	beq.n	8010c70 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8010c52:	2b20      	cmp	r3, #32
 8010c54:	d017      	beq.n	8010c86 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8010c56:	e019      	b.n	8010c8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8010c58:	2b80      	cmp	r3, #128	; 0x80
 8010c5a:	d003      	beq.n	8010c64 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8010c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c60:	d003      	beq.n	8010c6a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 8010c62:	e013      	b.n	8010c8c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8010c64:	230a      	movs	r3, #10
 8010c66:	623b      	str	r3, [r7, #32]
        break;
 8010c68:	e01a      	b.n	8010ca0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8010c6a:	2309      	movs	r3, #9
 8010c6c:	623b      	str	r3, [r7, #32]
        break;
 8010c6e:	e017      	b.n	8010ca0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8010c70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010c74:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8010c76:	7f7b      	ldrb	r3, [r7, #29]
 8010c78:	2b10      	cmp	r3, #16
 8010c7a:	d101      	bne.n	8010c80 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8010c7c:	2302      	movs	r3, #2
 8010c7e:	e000      	b.n	8010c82 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8010c80:	2301      	movs	r3, #1
 8010c82:	623b      	str	r3, [r7, #32]
        break;
 8010c84:	e00c      	b.n	8010ca0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8010c86:	2300      	movs	r3, #0
 8010c88:	623b      	str	r3, [r7, #32]
        break;
 8010c8a:	e009      	b.n	8010ca0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8010c90:	7f7b      	ldrb	r3, [r7, #29]
 8010c92:	2b10      	cmp	r3, #16
 8010c94:	d101      	bne.n	8010c9a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8010c96:	2302      	movs	r3, #2
 8010c98:	e000      	b.n	8010c9c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	623b      	str	r3, [r7, #32]
        break;
 8010c9e:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8010ca0:	4a76      	ldr	r2, [pc, #472]	; (8010e7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8010ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca4:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8010ca6:	7f7b      	ldrb	r3, [r7, #29]
 8010ca8:	2b10      	cmp	r3, #16
 8010caa:	d101      	bne.n	8010cb0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8010cac:	2302      	movs	r3, #2
 8010cae:	e000      	b.n	8010cb2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	4a72      	ldr	r2, [pc, #456]	; (8010e7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8010cb4:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	8adb      	ldrh	r3, [r3, #22]
 8010cba:	461a      	mov	r2, r3
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	8a1b      	ldrh	r3, [r3, #16]
 8010cc0:	1ad3      	subs	r3, r2, r3
 8010cc2:	461a      	mov	r2, r3
 8010cc4:	4b6d      	ldr	r3, [pc, #436]	; (8010e7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8010cc6:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8010cc8:	7f7b      	ldrb	r3, [r7, #29]
 8010cca:	2b10      	cmp	r3, #16
 8010ccc:	d101      	bne.n	8010cd2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8010cce:	2202      	movs	r2, #2
 8010cd0:	e000      	b.n	8010cd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8010cd2:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	8adb      	ldrh	r3, [r3, #22]
 8010cd8:	4619      	mov	r1, r3
 8010cda:	683b      	ldr	r3, [r7, #0]
 8010cdc:	8a1b      	ldrh	r3, [r3, #16]
 8010cde:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8010ce0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ce2:	4866      	ldr	r0, [pc, #408]	; (8010e7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8010ce4:	f7ff fe9a 	bl	8010a1c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8010ce8:	4a64      	ldr	r2, [pc, #400]	; (8010e7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8010cea:	6a3b      	ldr	r3, [r7, #32]
 8010cec:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	8a9b      	ldrh	r3, [r3, #20]
 8010cf2:	461a      	mov	r2, r3
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	8a1b      	ldrh	r3, [r3, #16]
 8010cf8:	1ad3      	subs	r3, r2, r3
 8010cfa:	461a      	mov	r2, r3
 8010cfc:	4b5f      	ldr	r3, [pc, #380]	; (8010e7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8010cfe:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8010d00:	7ffb      	ldrb	r3, [r7, #31]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d103      	bne.n	8010d0e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8010d06:	7fbb      	ldrb	r3, [r7, #30]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	f000 8082 	beq.w	8010e12 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	7f1b      	ldrb	r3, [r3, #28]
 8010d12:	2bff      	cmp	r3, #255	; 0xff
 8010d14:	d008      	beq.n	8010d28 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8010d16:	4b59      	ldr	r3, [pc, #356]	; (8010e7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8010d18:	2202      	movs	r2, #2
 8010d1a:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	7f1b      	ldrb	r3, [r3, #28]
 8010d20:	461a      	mov	r2, r3
 8010d22:	4b56      	ldr	r3, [pc, #344]	; (8010e7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8010d24:	635a      	str	r2, [r3, #52]	; 0x34
 8010d26:	e002      	b.n	8010d2e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8010d28:	4b54      	ldr	r3, [pc, #336]	; (8010e7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8010d2e:	7fbb      	ldrb	r3, [r7, #30]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d059      	beq.n	8010de8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 8010d34:	7f7b      	ldrb	r3, [r7, #29]
 8010d36:	2b10      	cmp	r3, #16
 8010d38:	d14a      	bne.n	8010dd0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	3318      	adds	r3, #24
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f7ff fdca 	bl	80108d8 <_ZNK8touchgfx9colortypecvtEv>
 8010d44:	4603      	mov	r3, r0
 8010d46:	12db      	asrs	r3, r3, #11
 8010d48:	f003 021f 	and.w	r2, r3, #31
 8010d4c:	4613      	mov	r3, r2
 8010d4e:	021b      	lsls	r3, r3, #8
 8010d50:	1a9b      	subs	r3, r3, r2
 8010d52:	4a4b      	ldr	r2, [pc, #300]	; (8010e80 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8010d54:	fb82 1203 	smull	r1, r2, r2, r3
 8010d58:	441a      	add	r2, r3
 8010d5a:	1112      	asrs	r2, r2, #4
 8010d5c:	17db      	asrs	r3, r3, #31
 8010d5e:	1ad3      	subs	r3, r2, r3
 8010d60:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	3318      	adds	r3, #24
 8010d66:	4618      	mov	r0, r3
 8010d68:	f7ff fdb6 	bl	80108d8 <_ZNK8touchgfx9colortypecvtEv>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	115b      	asrs	r3, r3, #5
 8010d70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010d74:	4613      	mov	r3, r2
 8010d76:	021b      	lsls	r3, r3, #8
 8010d78:	1a9b      	subs	r3, r3, r2
 8010d7a:	4a42      	ldr	r2, [pc, #264]	; (8010e84 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8010d7c:	fb82 1203 	smull	r1, r2, r2, r3
 8010d80:	441a      	add	r2, r3
 8010d82:	1152      	asrs	r2, r2, #5
 8010d84:	17db      	asrs	r3, r3, #31
 8010d86:	1ad3      	subs	r3, r2, r3
 8010d88:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	3318      	adds	r3, #24
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f7ff fda2 	bl	80108d8 <_ZNK8touchgfx9colortypecvtEv>
 8010d94:	4603      	mov	r3, r0
 8010d96:	f003 021f 	and.w	r2, r3, #31
 8010d9a:	4613      	mov	r3, r2
 8010d9c:	021b      	lsls	r3, r3, #8
 8010d9e:	1a9b      	subs	r3, r3, r2
 8010da0:	4a37      	ldr	r2, [pc, #220]	; (8010e80 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8010da2:	fb82 1203 	smull	r1, r2, r2, r3
 8010da6:	441a      	add	r2, r3
 8010da8:	1112      	asrs	r2, r2, #4
 8010daa:	17db      	asrs	r3, r3, #31
 8010dac:	1ad3      	subs	r3, r2, r3
 8010dae:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	7f1b      	ldrb	r3, [r3, #28]
 8010db4:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	061a      	lsls	r2, r3, #24
 8010dba:	69bb      	ldr	r3, [r7, #24]
 8010dbc:	041b      	lsls	r3, r3, #16
 8010dbe:	431a      	orrs	r2, r3
 8010dc0:	697b      	ldr	r3, [r7, #20]
 8010dc2:	021b      	lsls	r3, r3, #8
 8010dc4:	431a      	orrs	r2, r3
 8010dc6:	693b      	ldr	r3, [r7, #16]
 8010dc8:	4313      	orrs	r3, r2
 8010dca:	4a2c      	ldr	r2, [pc, #176]	; (8010e7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8010dcc:	6353      	str	r3, [r2, #52]	; 0x34
 8010dce:	e00b      	b.n	8010de8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	3318      	adds	r3, #24
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7ff fd73 	bl	80108c0 <_ZNK8touchgfx9colortype10getColor32Ev>
 8010dda:	4602      	mov	r2, r0
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	7f1b      	ldrb	r3, [r3, #28]
 8010de0:	061b      	lsls	r3, r3, #24
 8010de2:	4313      	orrs	r3, r2
 8010de4:	4a25      	ldr	r2, [pc, #148]	; (8010e7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8010de6:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	8adb      	ldrh	r3, [r3, #22]
 8010dec:	461a      	mov	r2, r3
 8010dee:	683b      	ldr	r3, [r7, #0]
 8010df0:	8a1b      	ldrh	r3, [r3, #16]
 8010df2:	1ad3      	subs	r3, r2, r3
 8010df4:	461a      	mov	r2, r3
 8010df6:	4b21      	ldr	r3, [pc, #132]	; (8010e7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8010df8:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8010dfa:	7f7b      	ldrb	r3, [r7, #29]
 8010dfc:	2b10      	cmp	r3, #16
 8010dfe:	d101      	bne.n	8010e04 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8010e00:	2302      	movs	r3, #2
 8010e02:	e000      	b.n	8010e06 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 8010e04:	2301      	movs	r3, #1
 8010e06:	4a1d      	ldr	r2, [pc, #116]	; (8010e7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8010e08:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8010e0a:	2100      	movs	r1, #0
 8010e0c:	481b      	ldr	r0, [pc, #108]	; (8010e7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8010e0e:	f7f2 fa0d 	bl	800322c <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8010e12:	2101      	movs	r1, #1
 8010e14:	4819      	ldr	r0, [pc, #100]	; (8010e7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8010e16:	f7f2 fa09 	bl	800322c <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataCopy cache invalidation */

    if (blendingImage || blendingText)
 8010e1a:	7ffb      	ldrb	r3, [r7, #31]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d102      	bne.n	8010e26 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 8010e20:	7fbb      	ldrb	r3, [r7, #30]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d015      	beq.n	8010e52 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8010e2a:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8010e30:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8010e32:	683b      	ldr	r3, [r7, #0]
 8010e34:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8010e36:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8010e3c:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8010e42:	9301      	str	r3, [sp, #4]
 8010e44:	9200      	str	r2, [sp, #0]
 8010e46:	4623      	mov	r3, r4
 8010e48:	4602      	mov	r2, r0
 8010e4a:	480c      	ldr	r0, [pc, #48]	; (8010e7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8010e4c:	f7f2 f811 	bl	8002e72 <HAL_DMA2D_BlendingStart_IT>
 8010e50:	e00f      	b.n	8010e72 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8010e56:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8010e58:	683b      	ldr	r3, [r7, #0]
 8010e5a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8010e5c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8010e5e:	683b      	ldr	r3, [r7, #0]
 8010e60:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 8010e62:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8010e64:	683b      	ldr	r3, [r7, #0]
 8010e66:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 8010e68:	9300      	str	r3, [sp, #0]
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	4803      	ldr	r0, [pc, #12]	; (8010e7c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8010e6e:	f7f1 ffcd 	bl	8002e0c <HAL_DMA2D_Start_IT>
    }
}
 8010e72:	bf00      	nop
 8010e74:	372c      	adds	r7, #44	; 0x2c
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd90      	pop	{r4, r7, pc}
 8010e7a:	bf00      	nop
 8010e7c:	2000b638 	.word	0x2000b638
 8010e80:	84210843 	.word	0x84210843
 8010e84:	82082083 	.word	0x82082083

08010e88 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8010e88:	b590      	push	{r4, r7, lr}
 8010e8a:	b08d      	sub	sp, #52	; 0x34
 8010e8c:	af02      	add	r7, sp, #8
 8010e8e:	6078      	str	r0, [r7, #4]
 8010e90:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8010e92:	f7f9 f93d 	bl	800a110 <_ZN8touchgfx3HAL3lcdEv>
 8010e96:	4602      	mov	r2, r0
 8010e98:	6813      	ldr	r3, [r2, #0]
 8010e9a:	3320      	adds	r3, #32
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	4610      	mov	r0, r2
 8010ea0:	4798      	blx	r3
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8010ea6:	7ffb      	ldrb	r3, [r7, #31]
 8010ea8:	2b10      	cmp	r3, #16
 8010eaa:	d101      	bne.n	8010eb0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8010eac:	2302      	movs	r3, #2
 8010eae:	e000      	b.n	8010eb2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8010eb0:	2301      	movs	r3, #1
 8010eb2:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8010eb8:	7ffb      	ldrb	r3, [r7, #31]
 8010eba:	2b10      	cmp	r3, #16
 8010ebc:	d149      	bne.n	8010f52 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8010ebe:	683b      	ldr	r3, [r7, #0]
 8010ec0:	3318      	adds	r3, #24
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7ff fd08 	bl	80108d8 <_ZNK8touchgfx9colortypecvtEv>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	12db      	asrs	r3, r3, #11
 8010ecc:	f003 021f 	and.w	r2, r3, #31
 8010ed0:	4613      	mov	r3, r2
 8010ed2:	021b      	lsls	r3, r3, #8
 8010ed4:	1a9b      	subs	r3, r3, r2
 8010ed6:	4a69      	ldr	r2, [pc, #420]	; (801107c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8010ed8:	fb82 1203 	smull	r1, r2, r2, r3
 8010edc:	441a      	add	r2, r3
 8010ede:	1112      	asrs	r2, r2, #4
 8010ee0:	17db      	asrs	r3, r3, #31
 8010ee2:	1ad3      	subs	r3, r2, r3
 8010ee4:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8010ee6:	683b      	ldr	r3, [r7, #0]
 8010ee8:	3318      	adds	r3, #24
 8010eea:	4618      	mov	r0, r3
 8010eec:	f7ff fcf4 	bl	80108d8 <_ZNK8touchgfx9colortypecvtEv>
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	115b      	asrs	r3, r3, #5
 8010ef4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010ef8:	4613      	mov	r3, r2
 8010efa:	021b      	lsls	r3, r3, #8
 8010efc:	1a9b      	subs	r3, r3, r2
 8010efe:	4a60      	ldr	r2, [pc, #384]	; (8011080 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8010f00:	fb82 1203 	smull	r1, r2, r2, r3
 8010f04:	441a      	add	r2, r3
 8010f06:	1152      	asrs	r2, r2, #5
 8010f08:	17db      	asrs	r3, r3, #31
 8010f0a:	1ad3      	subs	r3, r2, r3
 8010f0c:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	3318      	adds	r3, #24
 8010f12:	4618      	mov	r0, r3
 8010f14:	f7ff fce0 	bl	80108d8 <_ZNK8touchgfx9colortypecvtEv>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	f003 021f 	and.w	r2, r3, #31
 8010f1e:	4613      	mov	r3, r2
 8010f20:	021b      	lsls	r3, r3, #8
 8010f22:	1a9b      	subs	r3, r3, r2
 8010f24:	4a55      	ldr	r2, [pc, #340]	; (801107c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8010f26:	fb82 1203 	smull	r1, r2, r2, r3
 8010f2a:	441a      	add	r2, r3
 8010f2c:	1112      	asrs	r2, r2, #4
 8010f2e:	17db      	asrs	r3, r3, #31
 8010f30:	1ad3      	subs	r3, r2, r3
 8010f32:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	7f1b      	ldrb	r3, [r3, #28]
 8010f38:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8010f3a:	68bb      	ldr	r3, [r7, #8]
 8010f3c:	061a      	lsls	r2, r3, #24
 8010f3e:	697b      	ldr	r3, [r7, #20]
 8010f40:	041b      	lsls	r3, r3, #16
 8010f42:	431a      	orrs	r2, r3
 8010f44:	693b      	ldr	r3, [r7, #16]
 8010f46:	021b      	lsls	r3, r3, #8
 8010f48:	4313      	orrs	r3, r2
 8010f4a:	68fa      	ldr	r2, [r7, #12]
 8010f4c:	4313      	orrs	r3, r2
 8010f4e:	623b      	str	r3, [r7, #32]
 8010f50:	e00b      	b.n	8010f6a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8010f52:	683b      	ldr	r3, [r7, #0]
 8010f54:	7f1b      	ldrb	r3, [r3, #28]
 8010f56:	061b      	lsls	r3, r3, #24
 8010f58:	461c      	mov	r4, r3
 8010f5a:	683b      	ldr	r3, [r7, #0]
 8010f5c:	3318      	adds	r3, #24
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f7ff fcae 	bl	80108c0 <_ZNK8touchgfx9colortype10getColor32Ev>
 8010f64:	4603      	mov	r3, r0
 8010f66:	4323      	orrs	r3, r4
 8010f68:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	2b08      	cmp	r3, #8
 8010f70:	d103      	bne.n	8010f7a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8010f72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010f76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010f78:	e003      	b.n	8010f82 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8010f7a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8010f7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010f80:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8010f82:	4a40      	ldr	r2, [pc, #256]	; (8011084 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8010f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f86:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8010f88:	7ffb      	ldrb	r3, [r7, #31]
 8010f8a:	2b10      	cmp	r3, #16
 8010f8c:	d101      	bne.n	8010f92 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 8010f8e:	2302      	movs	r3, #2
 8010f90:	e000      	b.n	8010f94 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 8010f92:	2301      	movs	r3, #1
 8010f94:	4a3b      	ldr	r2, [pc, #236]	; (8011084 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8010f96:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	8adb      	ldrh	r3, [r3, #22]
 8010f9c:	461a      	mov	r2, r3
 8010f9e:	683b      	ldr	r3, [r7, #0]
 8010fa0:	8a1b      	ldrh	r3, [r3, #16]
 8010fa2:	1ad3      	subs	r3, r2, r3
 8010fa4:	461a      	mov	r2, r3
 8010fa6:	4b37      	ldr	r3, [pc, #220]	; (8011084 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8010fa8:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8010faa:	7ffb      	ldrb	r3, [r7, #31]
 8010fac:	2b10      	cmp	r3, #16
 8010fae:	d101      	bne.n	8010fb4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 8010fb0:	2202      	movs	r2, #2
 8010fb2:	e000      	b.n	8010fb6 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 8010fb4:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	8adb      	ldrh	r3, [r3, #22]
 8010fba:	4619      	mov	r1, r3
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	8a1b      	ldrh	r3, [r3, #16]
 8010fc0:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8010fc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010fc4:	482f      	ldr	r0, [pc, #188]	; (8011084 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8010fc6:	f7ff fd29 	bl	8010a1c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8010fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010fd0:	d11e      	bne.n	8011010 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8010fd2:	4b2c      	ldr	r3, [pc, #176]	; (8011084 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8010fd4:	2201      	movs	r2, #1
 8010fd6:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8010fd8:	4a2a      	ldr	r2, [pc, #168]	; (8011084 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8010fda:	6a3b      	ldr	r3, [r7, #32]
 8010fdc:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8010fde:	4b29      	ldr	r3, [pc, #164]	; (8011084 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8010fe0:	2209      	movs	r2, #9
 8010fe2:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8010fe4:	683b      	ldr	r3, [r7, #0]
 8010fe6:	8adb      	ldrh	r3, [r3, #22]
 8010fe8:	461a      	mov	r2, r3
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	8a1b      	ldrh	r3, [r3, #16]
 8010fee:	1ad3      	subs	r3, r2, r3
 8010ff0:	461a      	mov	r2, r3
 8010ff2:	4b24      	ldr	r3, [pc, #144]	; (8011084 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8010ff4:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8010ff6:	7ffb      	ldrb	r3, [r7, #31]
 8010ff8:	2b10      	cmp	r3, #16
 8010ffa:	d101      	bne.n	8011000 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 8010ffc:	2302      	movs	r3, #2
 8010ffe:	e000      	b.n	8011002 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8011000:	2301      	movs	r3, #1
 8011002:	4a20      	ldr	r2, [pc, #128]	; (8011084 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011004:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8011006:	2100      	movs	r1, #0
 8011008:	481e      	ldr	r0, [pc, #120]	; (8011084 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801100a:	f7f2 f90f 	bl	800322c <HAL_DMA2D_ConfigLayer>
 801100e:	e005      	b.n	801101c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8011010:	4a1c      	ldr	r2, [pc, #112]	; (8011084 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011012:	69bb      	ldr	r3, [r7, #24]
 8011014:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8011016:	4b1b      	ldr	r3, [pc, #108]	; (8011084 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011018:	2200      	movs	r2, #0
 801101a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801101c:	2101      	movs	r1, #1
 801101e:	4819      	ldr	r0, [pc, #100]	; (8011084 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011020:	f7f2 f904 	bl	800322c <HAL_DMA2D_ConfigLayer>
    // using SCB_CleanInvalidateDCache().

    // SCB_CleanInvalidateDCache();
    /* USER CODE END setupDataFill cache invalidation */

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8011024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011026:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801102a:	d115      	bne.n	8011058 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 801102c:	683b      	ldr	r3, [r7, #0]
 801102e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011030:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011036:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8011038:	683b      	ldr	r3, [r7, #0]
 801103a:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801103c:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011042:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8011044:	683b      	ldr	r3, [r7, #0]
 8011046:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8011048:	9301      	str	r3, [sp, #4]
 801104a:	9200      	str	r2, [sp, #0]
 801104c:	4623      	mov	r3, r4
 801104e:	4602      	mov	r2, r0
 8011050:	480c      	ldr	r0, [pc, #48]	; (8011084 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011052:	f7f1 ff0e 	bl	8002e72 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8011056:	e00d      	b.n	8011074 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	68db      	ldr	r3, [r3, #12]
 801105c:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8011062:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8011064:	683b      	ldr	r3, [r7, #0]
 8011066:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8011068:	9300      	str	r3, [sp, #0]
 801106a:	460b      	mov	r3, r1
 801106c:	6a39      	ldr	r1, [r7, #32]
 801106e:	4805      	ldr	r0, [pc, #20]	; (8011084 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8011070:	f7f1 fecc 	bl	8002e0c <HAL_DMA2D_Start_IT>
}
 8011074:	bf00      	nop
 8011076:	372c      	adds	r7, #44	; 0x2c
 8011078:	46bd      	mov	sp, r7
 801107a:	bd90      	pop	{r4, r7, pc}
 801107c:	84210843 	.word	0x84210843
 8011080:	82082083 	.word	0x82082083
 8011084:	2000b638 	.word	0x2000b638

08011088 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8011088:	b580      	push	{r7, lr}
 801108a:	b082      	sub	sp, #8
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
 8011090:	4a05      	ldr	r2, [pc, #20]	; (80110a8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	601a      	str	r2, [r3, #0]
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	4618      	mov	r0, r3
 801109a:	f7ff fc2b 	bl	80108f4 <_ZN8touchgfx9DMA_QueueD1Ev>
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	4618      	mov	r0, r3
 80110a2:	3708      	adds	r7, #8
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}
 80110a8:	08026004 	.word	0x08026004

080110ac <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b082      	sub	sp, #8
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	f7ff ffe7 	bl	8011088 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80110ba:	2114      	movs	r1, #20
 80110bc:	6878      	ldr	r0, [r7, #4]
 80110be:	f010 fbc6 	bl	802184e <_ZdlPvj>
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	4618      	mov	r0, r3
 80110c6:	3708      	adds	r7, #8
 80110c8:	46bd      	mov	sp, r7
 80110ca:	bd80      	pop	{r7, pc}

080110cc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 80110cc:	b480      	push	{r7}
 80110ce:	b083      	sub	sp, #12
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
        texts = t;
 80110d4:	4a04      	ldr	r2, [pc, #16]	; (80110e8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	6013      	str	r3, [r2, #0]
    }
 80110da:	bf00      	nop
 80110dc:	370c      	adds	r7, #12
 80110de:	46bd      	mov	sp, r7
 80110e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e4:	4770      	bx	lr
 80110e6:	bf00      	nop
 80110e8:	2000b2fc 	.word	0x2000b2fc

080110ec <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80110ec:	b480      	push	{r7}
 80110ee:	b085      	sub	sp, #20
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	60f8      	str	r0, [r7, #12]
 80110f4:	60b9      	str	r1, [r7, #8]
 80110f6:	607a      	str	r2, [r7, #4]
 80110f8:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 80110fa:	4a0b      	ldr	r2, [pc, #44]	; (8011128 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	601a      	str	r2, [r3, #0]
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	68ba      	ldr	r2, [r7, #8]
 8011104:	605a      	str	r2, [r3, #4]
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	687a      	ldr	r2, [r7, #4]
 801110a:	609a      	str	r2, [r3, #8]
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	683a      	ldr	r2, [r7, #0]
 8011110:	60da      	str	r2, [r3, #12]
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	69ba      	ldr	r2, [r7, #24]
 8011116:	611a      	str	r2, [r3, #16]
    {
    }
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	4618      	mov	r0, r3
 801111c:	3714      	adds	r7, #20
 801111e:	46bd      	mov	sp, r7
 8011120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011124:	4770      	bx	lr
 8011126:	bf00      	nop
 8011128:	080250c4 	.word	0x080250c4

0801112c <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 801112c:	b480      	push	{r7}
 801112e:	b083      	sub	sp, #12
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
    {
 8011134:	4a04      	ldr	r2, [pc, #16]	; (8011148 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	601a      	str	r2, [r3, #0]
    }
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	4618      	mov	r0, r3
 801113e:	370c      	adds	r7, #12
 8011140:	46bd      	mov	sp, r7
 8011142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011146:	4770      	bx	lr
 8011148:	080250c4 	.word	0x080250c4

0801114c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 801114c:	b580      	push	{r7, lr}
 801114e:	b082      	sub	sp, #8
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
    }
 8011154:	6878      	ldr	r0, [r7, #4]
 8011156:	f7ff ffe9 	bl	801112c <_ZN8touchgfx7MVPHeapD1Ev>
 801115a:	2114      	movs	r1, #20
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f010 fb76 	bl	802184e <_ZdlPvj>
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	4618      	mov	r0, r3
 8011166:	3708      	adds	r7, #8
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}

0801116c <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 801116c:	b480      	push	{r7}
 801116e:	b083      	sub	sp, #12
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
    {
 8011174:	4a04      	ldr	r2, [pc, #16]	; (8011188 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	601a      	str	r2, [r3, #0]
    }
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	4618      	mov	r0, r3
 801117e:	370c      	adds	r7, #12
 8011180:	46bd      	mov	sp, r7
 8011182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011186:	4770      	bx	lr
 8011188:	0802690c 	.word	0x0802690c

0801118c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 801118c:	b580      	push	{r7, lr}
 801118e:	b082      	sub	sp, #8
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
    }
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	f7ff ffe9 	bl	801116c <_ZN8touchgfx3LCDD1Ev>
 801119a:	2108      	movs	r1, #8
 801119c:	6878      	ldr	r0, [r7, #4]
 801119e:	f010 fb56 	bl	802184e <_ZdlPvj>
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	4618      	mov	r0, r3
 80111a6:	3708      	adds	r7, #8
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}

080111ac <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 80111ac:	b480      	push	{r7}
 80111ae:	b083      	sub	sp, #12
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2200      	movs	r2, #0
 80111b8:	801a      	strh	r2, [r3, #0]
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	2200      	movs	r2, #0
 80111be:	805a      	strh	r2, [r3, #2]
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2200      	movs	r2, #0
 80111c4:	809a      	strh	r2, [r3, #4]
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	2200      	movs	r2, #0
 80111ca:	80da      	strh	r2, [r3, #6]
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2200      	movs	r2, #0
 80111d0:	811a      	strh	r2, [r3, #8]
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	2200      	movs	r2, #0
 80111d6:	815a      	strh	r2, [r3, #10]
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	2200      	movs	r2, #0
 80111dc:	819a      	strh	r2, [r3, #12]
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	2200      	movs	r2, #0
 80111e2:	739a      	strb	r2, [r3, #14]
        {
        }
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	4618      	mov	r0, r3
 80111e8:	370c      	adds	r7, #12
 80111ea:	46bd      	mov	sp, r7
 80111ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f0:	4770      	bx	lr

080111f2 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 80111f2:	b580      	push	{r7, lr}
 80111f4:	b082      	sub	sp, #8
 80111f6:	af00      	add	r7, sp, #0
 80111f8:	6078      	str	r0, [r7, #4]
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	4618      	mov	r0, r3
 80111fe:	f7ff ffd5 	bl	80111ac <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	2200      	movs	r2, #0
 8011206:	611a      	str	r2, [r3, #16]
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	2200      	movs	r2, #0
 801120c:	829a      	strh	r2, [r3, #20]
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	4618      	mov	r0, r3
 8011212:	3708      	adds	r7, #8
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8011218:	b580      	push	{r7, lr}
 801121a:	b084      	sub	sp, #16
 801121c:	af00      	add	r7, sp, #0
 801121e:	60f8      	str	r0, [r7, #12]
 8011220:	60b9      	str	r1, [r7, #8]
 8011222:	607a      	str	r2, [r7, #4]
 8011224:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 8011226:	4a44      	ldr	r2, [pc, #272]	; (8011338 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	601a      	str	r2, [r3, #0]
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	68ba      	ldr	r2, [r7, #8]
 8011230:	605a      	str	r2, [r3, #4]
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	687a      	ldr	r2, [r7, #4]
 8011236:	609a      	str	r2, [r3, #8]
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	683a      	ldr	r2, [r7, #0]
 801123c:	60da      	str	r2, [r3, #12]
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	2200      	movs	r2, #0
 8011242:	611a      	str	r2, [r3, #16]
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	2200      	movs	r2, #0
 8011248:	615a      	str	r2, [r3, #20]
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	2200      	movs	r2, #0
 801124e:	619a      	str	r2, [r3, #24]
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	331c      	adds	r3, #28
 8011254:	4618      	mov	r0, r3
 8011256:	f7ff ffcc 	bl	80111f2 <_ZN8touchgfx8GesturesC1Ev>
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	2200      	movs	r2, #0
 801125e:	639a      	str	r2, [r3, #56]	; 0x38
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	2200      	movs	r2, #0
 8011264:	63da      	str	r2, [r3, #60]	; 0x3c
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	2200      	movs	r2, #0
 801126a:	641a      	str	r2, [r3, #64]	; 0x40
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	2200      	movs	r2, #0
 8011270:	645a      	str	r2, [r3, #68]	; 0x44
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	2200      	movs	r2, #0
 8011276:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	2201      	movs	r2, #1
 801127e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	2201      	movs	r2, #1
 8011286:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	2200      	movs	r2, #0
 801128e:	64da      	str	r2, [r3, #76]	; 0x4c
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	3350      	adds	r3, #80	; 0x50
 8011294:	4618      	mov	r0, r3
 8011296:	f7f8 fd4c 	bl	8009d32 <_ZN8touchgfx4RectC1Ev>
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	2201      	movs	r2, #1
 801129e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	2200      	movs	r2, #0
 80112a6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	2200      	movs	r2, #0
 80112ae:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	2201      	movs	r2, #1
 80112b6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	2200      	movs	r2, #0
 80112be:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	2200      	movs	r2, #0
 80112c6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	2200      	movs	r2, #0
 80112ce:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	2200      	movs	r2, #0
 80112d6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	2200      	movs	r2, #0
 80112de:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	2200      	movs	r2, #0
 80112e6:	671a      	str	r2, [r3, #112]	; 0x70
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	2200      	movs	r2, #0
 80112ec:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 80112f0:	4a12      	ldr	r2, [pc, #72]	; (801133c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 80112f6:	4a12      	ldr	r2, [pc, #72]	; (8011340 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 80112f8:	8b3b      	ldrh	r3, [r7, #24]
 80112fa:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 80112fc:	4a11      	ldr	r2, [pc, #68]	; (8011344 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 80112fe:	8bbb      	ldrh	r3, [r7, #28]
 8011300:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8011302:	4b11      	ldr	r3, [pc, #68]	; (8011348 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8011304:	2200      	movs	r2, #0
 8011306:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8011308:	4b0d      	ldr	r3, [pc, #52]	; (8011340 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 801130a:	881a      	ldrh	r2, [r3, #0]
 801130c:	4b0f      	ldr	r3, [pc, #60]	; (801134c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 801130e:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8011310:	4b0c      	ldr	r3, [pc, #48]	; (8011344 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8011312:	881a      	ldrh	r2, [r3, #0]
 8011314:	4b0e      	ldr	r3, [pc, #56]	; (8011350 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8011316:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8011318:	8b3a      	ldrh	r2, [r7, #24]
 801131a:	8bbb      	ldrh	r3, [r7, #28]
 801131c:	429a      	cmp	r2, r3
 801131e:	d301      	bcc.n	8011324 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8011320:	2200      	movs	r2, #0
 8011322:	e000      	b.n	8011326 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8011324:	2201      	movs	r2, #1
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	4618      	mov	r0, r3
 8011330:	3710      	adds	r7, #16
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}
 8011336:	bf00      	nop
 8011338:	08025b70 	.word	0x08025b70
 801133c:	2000b260 	.word	0x2000b260
 8011340:	2000b254 	.word	0x2000b254
 8011344:	2000b256 	.word	0x2000b256
 8011348:	2000b258 	.word	0x2000b258
 801134c:	2000b25a 	.word	0x2000b25a
 8011350:	2000b25c 	.word	0x2000b25c

08011354 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8011354:	b580      	push	{r7, lr}
 8011356:	b082      	sub	sp, #8
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
 801135c:	6039      	str	r1, [r7, #0]
    {
        app.gotoChoixCanalScreenNoTransition();
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	4618      	mov	r0, r3
 8011362:	f7fb f8bb 	bl	800c4dc <_ZN23FrontendApplicationBase32gotoChoixCanalScreenNoTransitionEv>
    }
 8011366:	bf00      	nop
 8011368:	3708      	adds	r7, #8
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}
	...

08011370 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8011370:	b580      	push	{r7, lr}
 8011372:	b086      	sub	sp, #24
 8011374:	af02      	add	r7, sp, #8
 8011376:	60f8      	str	r0, [r7, #12]
 8011378:	60b9      	str	r1, [r7, #8]
 801137a:	607a      	str	r2, [r7, #4]
 801137c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 801137e:	68f8      	ldr	r0, [r7, #12]
 8011380:	69bb      	ldr	r3, [r7, #24]
 8011382:	9300      	str	r3, [sp, #0]
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	687a      	ldr	r2, [r7, #4]
 8011388:	68b9      	ldr	r1, [r7, #8]
 801138a:	f7ff feaf 	bl	80110ec <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 801138e:	4a04      	ldr	r2, [pc, #16]	; (80113a0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	601a      	str	r2, [r3, #0]
    {

    }
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	4618      	mov	r0, r3
 8011398:	3710      	adds	r7, #16
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}
 801139e:	bf00      	nop
 80113a0:	080250b0 	.word	0x080250b0

080113a4 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80113a4:	b580      	push	{r7, lr}
 80113a6:	af00      	add	r7, sp, #0
 80113a8:	4801      	ldr	r0, [pc, #4]	; (80113b0 <__tcf_0+0xc>)
 80113aa:	f000 f9dd 	bl	8011768 <_ZN12FrontendHeapD1Ev>
 80113ae:	bd80      	pop	{r7, pc}
 80113b0:	20008374 	.word	0x20008374

080113b4 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80113b4:	b580      	push	{r7, lr}
 80113b6:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80113b8:	4b08      	ldr	r3, [pc, #32]	; (80113dc <_ZN12FrontendHeap11getInstanceEv+0x28>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	f003 0301 	and.w	r3, r3, #1
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d108      	bne.n	80113d6 <_ZN12FrontendHeap11getInstanceEv+0x22>
 80113c4:	4806      	ldr	r0, [pc, #24]	; (80113e0 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 80113c6:	f000 f831 	bl	801142c <_ZN12FrontendHeapC1Ev>
 80113ca:	4b04      	ldr	r3, [pc, #16]	; (80113dc <_ZN12FrontendHeap11getInstanceEv+0x28>)
 80113cc:	2201      	movs	r2, #1
 80113ce:	601a      	str	r2, [r3, #0]
 80113d0:	4804      	ldr	r0, [pc, #16]	; (80113e4 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 80113d2:	f010 ffd3 	bl	802237c <atexit>
        return instance;
 80113d6:	4b02      	ldr	r3, [pc, #8]	; (80113e0 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 80113d8:	4618      	mov	r0, r3
 80113da:	bd80      	pop	{r7, pc}
 80113dc:	2000a554 	.word	0x2000a554
 80113e0:	20008374 	.word	0x20008374
 80113e4:	080113a5 	.word	0x080113a5

080113e8 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b082      	sub	sp, #8
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
 80113f0:	4a05      	ldr	r2, [pc, #20]	; (8011408 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	601a      	str	r2, [r3, #0]
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7ff fe97 	bl	801112c <_ZN8touchgfx7MVPHeapD1Ev>
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	4618      	mov	r0, r3
 8011402:	3708      	adds	r7, #8
 8011404:	46bd      	mov	sp, r7
 8011406:	bd80      	pop	{r7, pc}
 8011408:	080250b0 	.word	0x080250b0

0801140c <_ZN16FrontendHeapBaseD0Ev>:
 801140c:	b580      	push	{r7, lr}
 801140e:	b082      	sub	sp, #8
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
 8011414:	6878      	ldr	r0, [r7, #4]
 8011416:	f7ff ffe7 	bl	80113e8 <_ZN16FrontendHeapBaseD1Ev>
 801141a:	2114      	movs	r1, #20
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f010 fa16 	bl	802184e <_ZdlPvj>
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	4618      	mov	r0, r3
 8011426:	3708      	adds	r7, #8
 8011428:	46bd      	mov	sp, r7
 801142a:	bd80      	pop	{r7, pc}

0801142c <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 801142c:	b5b0      	push	{r4, r5, r7, lr}
 801142e:	b084      	sub	sp, #16
 8011430:	af02      	add	r7, sp, #8
 8011432:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8011434:	6878      	ldr	r0, [r7, #4]
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f103 0414 	add.w	r4, r3, #20
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	f242 0278 	movw	r2, #8312	; 0x2078
 8011448:	441a      	add	r2, r3
 801144a:	6879      	ldr	r1, [r7, #4]
 801144c:	f242 038c 	movw	r3, #8332	; 0x208c
 8011450:	440b      	add	r3, r1
 8011452:	9300      	str	r3, [sp, #0]
 8011454:	4613      	mov	r3, r2
 8011456:	462a      	mov	r2, r5
 8011458:	4621      	mov	r1, r4
 801145a:	f7ff ff89 	bl	8011370 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801145e:	4a1a      	ldr	r2, [pc, #104]	; (80114c8 <_ZN12FrontendHeapC1Ev+0x9c>)
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	601a      	str	r2, [r3, #0]
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	3314      	adds	r3, #20
 8011468:	4618      	mov	r0, r3
 801146a:	f000 f8df 	bl	801162c <_ZN8touchgfx9PartitionINS_4meta8TypeListI17MessagesPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	332c      	adds	r3, #44	; 0x2c
 8011472:	4618      	mov	r0, r3
 8011474:	f000 f90e 	bl	8011694 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19RotationVoilierViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8011478:	687a      	ldr	r2, [r7, #4]
 801147a:	f242 0378 	movw	r3, #8312	; 0x2078
 801147e:	4413      	add	r3, r2
 8011480:	4618      	mov	r0, r3
 8011482:	f000 f93d 	bl	8011700 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8011486:	687a      	ldr	r2, [r7, #4]
 8011488:	f242 038c 	movw	r3, #8332	; 0x208c
 801148c:	4413      	add	r3, r2
 801148e:	687a      	ldr	r2, [r7, #4]
 8011490:	f242 11dc 	movw	r1, #8668	; 0x21dc
 8011494:	4411      	add	r1, r2
 8011496:	687a      	ldr	r2, [r7, #4]
 8011498:	4618      	mov	r0, r3
 801149a:	f7fe f97b 	bl	800f794 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 801149e:	687a      	ldr	r2, [r7, #4]
 80114a0:	f242 13dc 	movw	r3, #8668	; 0x21dc
 80114a4:	4413      	add	r3, r2
 80114a6:	4618      	mov	r0, r3
 80114a8:	f7fe fad2 	bl	800fa50 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 80114ac:	6878      	ldr	r0, [r7, #4]
 80114ae:	687a      	ldr	r2, [r7, #4]
 80114b0:	f242 038c 	movw	r3, #8332	; 0x208c
 80114b4:	4413      	add	r3, r2
 80114b6:	4619      	mov	r1, r3
 80114b8:	f7ff ff4c 	bl	8011354 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	4618      	mov	r0, r3
 80114c0:	3708      	adds	r7, #8
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bdb0      	pop	{r4, r5, r7, pc}
 80114c6:	bf00      	nop
 80114c8:	08025000 	.word	0x08025000

080114cc <_ZN8touchgfx8LCD24bppD1Ev>:
class LCD24bpp : public LCD
{
public:
    LCD24bpp();

    virtual ~LCD24bpp()
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b082      	sub	sp, #8
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	6078      	str	r0, [r7, #4]
    {
 80114d4:	4a05      	ldr	r2, [pc, #20]	; (80114ec <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	601a      	str	r2, [r3, #0]
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	4618      	mov	r0, r3
 80114de:	f7ff fe45 	bl	801116c <_ZN8touchgfx3LCDD1Ev>
    }
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	4618      	mov	r0, r3
 80114e6:	3708      	adds	r7, #8
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}
 80114ec:	08027cc4 	.word	0x08027cc4

080114f0 <_ZN8touchgfx8LCD24bppD0Ev>:
    virtual ~LCD24bpp()
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b082      	sub	sp, #8
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
    }
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f7ff ffe7 	bl	80114cc <_ZN8touchgfx8LCD24bppD1Ev>
 80114fe:	2158      	movs	r1, #88	; 0x58
 8011500:	6878      	ldr	r0, [r7, #4]
 8011502:	f010 f9a4 	bl	802184e <_ZdlPvj>
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	4618      	mov	r0, r3
 801150a:	3708      	adds	r7, #8
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}

08011510 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8011510:	b580      	push	{r7, lr}
 8011512:	b086      	sub	sp, #24
 8011514:	af02      	add	r7, sp, #8
 8011516:	60f8      	str	r0, [r7, #12]
 8011518:	60b9      	str	r1, [r7, #8]
 801151a:	607a      	str	r2, [r7, #4]
 801151c:	603b      	str	r3, [r7, #0]
 801151e:	68f8      	ldr	r0, [r7, #12]
 8011520:	8bbb      	ldrh	r3, [r7, #28]
 8011522:	9301      	str	r3, [sp, #4]
 8011524:	8b3b      	ldrh	r3, [r7, #24]
 8011526:	9300      	str	r3, [sp, #0]
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	687a      	ldr	r2, [r7, #4]
 801152c:	68b9      	ldr	r1, [r7, #8]
 801152e:	f7ff fe73 	bl	8011218 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8011532:	4a04      	ldr	r2, [pc, #16]	; (8011544 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	601a      	str	r2, [r3, #0]
    }
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	4618      	mov	r0, r3
 801153c:	3710      	adds	r7, #16
 801153e:	46bd      	mov	sp, r7
 8011540:	bd80      	pop	{r7, pc}
 8011542:	bf00      	nop
 8011544:	080250d4 	.word	0x080250d4

08011548 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8011548:	b580      	push	{r7, lr}
 801154a:	b086      	sub	sp, #24
 801154c:	af02      	add	r7, sp, #8
 801154e:	60f8      	str	r0, [r7, #12]
 8011550:	60b9      	str	r1, [r7, #8]
 8011552:	607a      	str	r2, [r7, #4]
 8011554:	603b      	str	r3, [r7, #0]
 8011556:	68f8      	ldr	r0, [r7, #12]
 8011558:	8bbb      	ldrh	r3, [r7, #28]
 801155a:	9301      	str	r3, [sp, #4]
 801155c:	8b3b      	ldrh	r3, [r7, #24]
 801155e:	9300      	str	r3, [sp, #0]
 8011560:	683b      	ldr	r3, [r7, #0]
 8011562:	687a      	ldr	r2, [r7, #4]
 8011564:	68b9      	ldr	r1, [r7, #8]
 8011566:	f7ff ffd3 	bl	8011510 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 801156a:	4a04      	ldr	r2, [pc, #16]	; (801157c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	601a      	str	r2, [r3, #0]
    }
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	4618      	mov	r0, r3
 8011574:	3710      	adds	r7, #16
 8011576:	46bd      	mov	sp, r7
 8011578:	bd80      	pop	{r7, pc}
 801157a:	bf00      	nop
 801157c:	08024e00 	.word	0x08024e00

08011580 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8011580:	b480      	push	{r7}
 8011582:	b083      	sub	sp, #12
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
 8011588:	4a04      	ldr	r2, [pc, #16]	; (801159c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	601a      	str	r2, [r3, #0]
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	4618      	mov	r0, r3
 8011592:	370c      	adds	r7, #12
 8011594:	46bd      	mov	sp, r7
 8011596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159a:	4770      	bx	lr
 801159c:	08024de8 	.word	0x08024de8

080115a0 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b082      	sub	sp, #8
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	4618      	mov	r0, r3
 80115ac:	f7ff ffe8 	bl	8011580 <_ZN8touchgfx15TouchControllerC1Ev>
 80115b0:	4a03      	ldr	r2, [pc, #12]	; (80115c0 <_ZN20STM32TouchControllerC1Ev+0x20>)
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	601a      	str	r2, [r3, #0]
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	4618      	mov	r0, r3
 80115ba:	3708      	adds	r7, #8
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}
 80115c0:	08024dd0 	.word	0x08024dd0

080115c4 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 80115c4:	b590      	push	{r4, r7, lr}
 80115c6:	b085      	sub	sp, #20
 80115c8:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80115ca:	f7fd fe3d 	bl	800f248 <_ZN14BitmapDatabase11getInstanceEv>
 80115ce:	4604      	mov	r4, r0
 80115d0:	f7fd fe44 	bl	800f25c <_ZN14BitmapDatabase15getInstanceSizeEv>
 80115d4:	4603      	mov	r3, r0
 80115d6:	4619      	mov	r1, r3
 80115d8:	2300      	movs	r3, #0
 80115da:	9300      	str	r3, [sp, #0]
 80115dc:	2300      	movs	r3, #0
 80115de:	2200      	movs	r2, #0
 80115e0:	4620      	mov	r0, r4
 80115e2:	f006 fbf9 	bl	8017dd8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 80115e6:	4809      	ldr	r0, [pc, #36]	; (801160c <touchgfx_init+0x48>)
 80115e8:	f7ff fd70 	bl	80110cc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 80115ec:	2000      	movs	r0, #0
 80115ee:	f7fd fe59 	bl	800f2a4 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 80115f2:	4807      	ldr	r0, [pc, #28]	; (8011610 <touchgfx_init+0x4c>)
 80115f4:	f006 fb3e 	bl	8017c74 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 80115f8:	f7ff fedc 	bl	80113b4 <_ZN12FrontendHeap11getInstanceEv>
 80115fc:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 80115fe:	4805      	ldr	r0, [pc, #20]	; (8011614 <touchgfx_init+0x50>)
 8011600:	f7fe ffda 	bl	80105b8 <_ZN11TouchGFXHAL10initializeEv>
}
 8011604:	bf00      	nop
 8011606:	370c      	adds	r7, #12
 8011608:	46bd      	mov	sp, r7
 801160a:	bd90      	pop	{r4, r7, pc}
 801160c:	2000b1d4 	.word	0x2000b1d4
 8011610:	2000004c 	.word	0x2000004c
 8011614:	2000b1d8 	.word	0x2000b1d8

08011618 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8011618:	b580      	push	{r7, lr}
 801161a:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 801161c:	4802      	ldr	r0, [pc, #8]	; (8011628 <touchgfx_taskEntry+0x10>)
 801161e:	f001 f904 	bl	801282a <_ZN8touchgfx3HAL9taskEntryEv>
}
 8011622:	bf00      	nop
 8011624:	bd80      	pop	{r7, pc}
 8011626:	bf00      	nop
 8011628:	2000b1d8 	.word	0x2000b1d8

0801162c <_ZN8touchgfx9PartitionINS_4meta8TypeListI17MessagesPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 801162c:	b580      	push	{r7, lr}
 801162e:	b082      	sub	sp, #8
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	4618      	mov	r0, r3
 8011638:	f000 fbfc 	bl	8011e34 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801163c:	4a03      	ldr	r2, [pc, #12]	; (801164c <_ZN8touchgfx9PartitionINS_4meta8TypeListI17MessagesPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	601a      	str	r2, [r3, #0]
    {
    }
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	4618      	mov	r0, r3
 8011646:	3708      	adds	r7, #8
 8011648:	46bd      	mov	sp, r7
 801164a:	bd80      	pop	{r7, pc}
 801164c:	0802507c 	.word	0x0802507c

08011650 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17MessagesPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8011650:	b580      	push	{r7, lr}
 8011652:	b082      	sub	sp, #8
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
    {
    }
 8011658:	4a05      	ldr	r2, [pc, #20]	; (8011670 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17MessagesPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	601a      	str	r2, [r3, #0]
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	4618      	mov	r0, r3
 8011662:	f000 fbe5 	bl	8011e30 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	4618      	mov	r0, r3
 801166a:	3708      	adds	r7, #8
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}
 8011670:	0802507c 	.word	0x0802507c

08011674 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17MessagesPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8011674:	b580      	push	{r7, lr}
 8011676:	b082      	sub	sp, #8
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
    }
 801167c:	6878      	ldr	r0, [r7, #4]
 801167e:	f7ff ffe7 	bl	8011650 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17MessagesPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011682:	2118      	movs	r1, #24
 8011684:	6878      	ldr	r0, [r7, #4]
 8011686:	f010 f8e2 	bl	802184e <_ZdlPvj>
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	4618      	mov	r0, r3
 801168e:	3708      	adds	r7, #8
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}

08011694 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19RotationVoilierViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8011694:	b580      	push	{r7, lr}
 8011696:	b082      	sub	sp, #8
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	4618      	mov	r0, r3
 80116a0:	f000 fbc8 	bl	8011e34 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80116a4:	4a03      	ldr	r2, [pc, #12]	; (80116b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19RotationVoilierViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	601a      	str	r2, [r3, #0]
    }
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	4618      	mov	r0, r3
 80116ae:	3708      	adds	r7, #8
 80116b0:	46bd      	mov	sp, r7
 80116b2:	bd80      	pop	{r7, pc}
 80116b4:	08025048 	.word	0x08025048

080116b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19RotationVoilierViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b082      	sub	sp, #8
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
    }
 80116c0:	4a05      	ldr	r2, [pc, #20]	; (80116d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19RotationVoilierViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	601a      	str	r2, [r3, #0]
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	4618      	mov	r0, r3
 80116ca:	f000 fbb1 	bl	8011e30 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	4618      	mov	r0, r3
 80116d2:	3708      	adds	r7, #8
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bd80      	pop	{r7, pc}
 80116d8:	08025048 	.word	0x08025048

080116dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI19RotationVoilierViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80116dc:	b580      	push	{r7, lr}
 80116de:	b082      	sub	sp, #8
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
    }
 80116e4:	6878      	ldr	r0, [r7, #4]
 80116e6:	f7ff ffe7 	bl	80116b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19RotationVoilierViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80116ea:	f242 014c 	movw	r1, #8268	; 0x204c
 80116ee:	6878      	ldr	r0, [r7, #4]
 80116f0:	f010 f8ad 	bl	802184e <_ZdlPvj>
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	4618      	mov	r0, r3
 80116f8:	3708      	adds	r7, #8
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}
	...

08011700 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8011700:	b580      	push	{r7, lr}
 8011702:	b082      	sub	sp, #8
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	4618      	mov	r0, r3
 801170c:	f000 fb92 	bl	8011e34 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8011710:	4a03      	ldr	r2, [pc, #12]	; (8011720 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	601a      	str	r2, [r3, #0]
    }
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	4618      	mov	r0, r3
 801171a:	3708      	adds	r7, #8
 801171c:	46bd      	mov	sp, r7
 801171e:	bd80      	pop	{r7, pc}
 8011720:	08025014 	.word	0x08025014

08011724 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8011724:	b580      	push	{r7, lr}
 8011726:	b082      	sub	sp, #8
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
    }
 801172c:	4a05      	ldr	r2, [pc, #20]	; (8011744 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	601a      	str	r2, [r3, #0]
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	4618      	mov	r0, r3
 8011736:	f000 fb7b 	bl	8011e30 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	4618      	mov	r0, r3
 801173e:	3708      	adds	r7, #8
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}
 8011744:	08025014 	.word	0x08025014

08011748 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8011748:	b580      	push	{r7, lr}
 801174a:	b082      	sub	sp, #8
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
    }
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f7ff ffe7 	bl	8011724 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011756:	2114      	movs	r1, #20
 8011758:	6878      	ldr	r0, [r7, #4]
 801175a:	f010 f878 	bl	802184e <_ZdlPvj>
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	4618      	mov	r0, r3
 8011762:	3708      	adds	r7, #8
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}

08011768 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8011768:	b580      	push	{r7, lr}
 801176a:	b082      	sub	sp, #8
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
 8011770:	4a11      	ldr	r2, [pc, #68]	; (80117b8 <_ZN12FrontendHeapD1Ev+0x50>)
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	601a      	str	r2, [r3, #0]
 8011776:	687a      	ldr	r2, [r7, #4]
 8011778:	f242 038c 	movw	r3, #8332	; 0x208c
 801177c:	4413      	add	r3, r2
 801177e:	4618      	mov	r0, r3
 8011780:	f7fd ffd2 	bl	800f728 <_ZN19FrontendApplicationD1Ev>
 8011784:	687a      	ldr	r2, [r7, #4]
 8011786:	f242 0378 	movw	r3, #8312	; 0x2078
 801178a:	4413      	add	r3, r2
 801178c:	4618      	mov	r0, r3
 801178e:	f7ff ffc9 	bl	8011724 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	332c      	adds	r3, #44	; 0x2c
 8011796:	4618      	mov	r0, r3
 8011798:	f7ff ff8e 	bl	80116b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19RotationVoilierViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	3314      	adds	r3, #20
 80117a0:	4618      	mov	r0, r3
 80117a2:	f7ff ff55 	bl	8011650 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17MessagesPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	4618      	mov	r0, r3
 80117aa:	f7ff fe1d 	bl	80113e8 <_ZN16FrontendHeapBaseD1Ev>
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	4618      	mov	r0, r3
 80117b2:	3708      	adds	r7, #8
 80117b4:	46bd      	mov	sp, r7
 80117b6:	bd80      	pop	{r7, pc}
 80117b8:	08025000 	.word	0x08025000

080117bc <_ZN12FrontendHeapD0Ev>:
 80117bc:	b580      	push	{r7, lr}
 80117be:	b082      	sub	sp, #8
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	6078      	str	r0, [r7, #4]
 80117c4:	6878      	ldr	r0, [r7, #4]
 80117c6:	f7ff ffcf 	bl	8011768 <_ZN12FrontendHeapD1Ev>
 80117ca:	f242 11e0 	movw	r1, #8672	; 0x21e0
 80117ce:	6878      	ldr	r0, [r7, #4]
 80117d0:	f010 f83d 	bl	802184e <_ZdlPvj>
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	4618      	mov	r0, r3
 80117d8:	3708      	adds	r7, #8
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}
	...

080117e0 <_Z41__static_initialization_and_destruction_0ii>:
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b084      	sub	sp, #16
 80117e4:	af02      	add	r7, sp, #8
 80117e6:	6078      	str	r0, [r7, #4]
 80117e8:	6039      	str	r1, [r7, #0]
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	2b01      	cmp	r3, #1
 80117ee:	d119      	bne.n	8011824 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80117f0:	683b      	ldr	r3, [r7, #0]
 80117f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117f6:	4293      	cmp	r3, r2
 80117f8:	d114      	bne.n	8011824 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80117fa:	4818      	ldr	r0, [pc, #96]	; (801185c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80117fc:	f7ff fed0 	bl	80115a0 <_ZN20STM32TouchControllerC1Ev>
static STM32F7DMA dma;
 8011800:	4817      	ldr	r0, [pc, #92]	; (8011860 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8011802:	f7ff f965 	bl	8010ad0 <_ZN10STM32F7DMAC1Ev>
static LCD24bpp display;
 8011806:	4817      	ldr	r0, [pc, #92]	; (8011864 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8011808:	f008 fd0c 	bl	801a224 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 801180c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8011810:	9301      	str	r3, [sp, #4]
 8011812:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8011816:	9300      	str	r3, [sp, #0]
 8011818:	4b10      	ldr	r3, [pc, #64]	; (801185c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801181a:	4a12      	ldr	r2, [pc, #72]	; (8011864 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 801181c:	4910      	ldr	r1, [pc, #64]	; (8011860 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801181e:	4812      	ldr	r0, [pc, #72]	; (8011868 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8011820:	f7ff fe92 	bl	8011548 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d113      	bne.n	8011852 <_Z41__static_initialization_and_destruction_0ii+0x72>
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011830:	4293      	cmp	r3, r2
 8011832:	d10e      	bne.n	8011852 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8011834:	480c      	ldr	r0, [pc, #48]	; (8011868 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8011836:	f7fe ff25 	bl	8010684 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 801183a:	480c      	ldr	r0, [pc, #48]	; (801186c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 801183c:	f7f7 ff64 	bl	8009708 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8011840:	4808      	ldr	r0, [pc, #32]	; (8011864 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8011842:	f7ff fe43 	bl	80114cc <_ZN8touchgfx8LCD24bppD1Ev>
static STM32F7DMA dma;
 8011846:	4806      	ldr	r0, [pc, #24]	; (8011860 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8011848:	f7ff f96c 	bl	8010b24 <_ZN10STM32F7DMAD1Ev>
static STM32TouchController tc;
 801184c:	4803      	ldr	r0, [pc, #12]	; (801185c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801184e:	f7fe fc83 	bl	8010158 <_ZN20STM32TouchControllerD1Ev>
}
 8011852:	bf00      	nop
 8011854:	3708      	adds	r7, #8
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}
 801185a:	bf00      	nop
 801185c:	2000a558 	.word	0x2000a558
 8011860:	2000a55c 	.word	0x2000a55c
 8011864:	2000b17c 	.word	0x2000b17c
 8011868:	2000b1d8 	.word	0x2000b1d8
 801186c:	2000004c 	.word	0x2000004c

08011870 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8011870:	b480      	push	{r7}
 8011872:	b083      	sub	sp, #12
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8011878:	2301      	movs	r3, #1
    }
 801187a:	4618      	mov	r0, r3
 801187c:	370c      	adds	r7, #12
 801187e:	46bd      	mov	sp, r7
 8011880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011884:	4770      	bx	lr

08011886 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8011886:	b480      	push	{r7}
 8011888:	b083      	sub	sp, #12
 801188a:	af00      	add	r7, sp, #0
 801188c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801188e:	230c      	movs	r3, #12
    }
 8011890:	4618      	mov	r0, r3
 8011892:	370c      	adds	r7, #12
 8011894:	46bd      	mov	sp, r7
 8011896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189a:	4770      	bx	lr

0801189c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 801189c:	b480      	push	{r7}
 801189e:	b083      	sub	sp, #12
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
 80118a4:	460b      	mov	r3, r1
 80118a6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80118a8:	887a      	ldrh	r2, [r7, #2]
 80118aa:	4613      	mov	r3, r2
 80118ac:	005b      	lsls	r3, r3, #1
 80118ae:	4413      	add	r3, r2
 80118b0:	009b      	lsls	r3, r3, #2
 80118b2:	3308      	adds	r3, #8
 80118b4:	687a      	ldr	r2, [r7, #4]
 80118b6:	4413      	add	r3, r2
    }
 80118b8:	4618      	mov	r0, r3
 80118ba:	370c      	adds	r7, #12
 80118bc:	46bd      	mov	sp, r7
 80118be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c2:	4770      	bx	lr

080118c4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 80118c4:	b480      	push	{r7}
 80118c6:	b083      	sub	sp, #12
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
 80118cc:	460b      	mov	r3, r1
 80118ce:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80118d0:	887a      	ldrh	r2, [r7, #2]
 80118d2:	4613      	mov	r3, r2
 80118d4:	005b      	lsls	r3, r3, #1
 80118d6:	4413      	add	r3, r2
 80118d8:	009b      	lsls	r3, r3, #2
 80118da:	3308      	adds	r3, #8
 80118dc:	687a      	ldr	r2, [r7, #4]
 80118de:	4413      	add	r3, r2
    }
 80118e0:	4618      	mov	r0, r3
 80118e2:	370c      	adds	r7, #12
 80118e4:	46bd      	mov	sp, r7
 80118e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ea:	4770      	bx	lr

080118ec <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19RotationVoilierViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80118ec:	b480      	push	{r7}
 80118ee:	b083      	sub	sp, #12
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80118f4:	2301      	movs	r3, #1
    }
 80118f6:	4618      	mov	r0, r3
 80118f8:	370c      	adds	r7, #12
 80118fa:	46bd      	mov	sp, r7
 80118fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011900:	4770      	bx	lr

08011902 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19RotationVoilierViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8011902:	b480      	push	{r7}
 8011904:	b083      	sub	sp, #12
 8011906:	af00      	add	r7, sp, #0
 8011908:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801190a:	f242 0344 	movw	r3, #8260	; 0x2044
    }
 801190e:	4618      	mov	r0, r3
 8011910:	370c      	adds	r7, #12
 8011912:	46bd      	mov	sp, r7
 8011914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011918:	4770      	bx	lr

0801191a <_ZN8touchgfx9PartitionINS_4meta8TypeListI19RotationVoilierViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801191a:	b480      	push	{r7}
 801191c:	b083      	sub	sp, #12
 801191e:	af00      	add	r7, sp, #0
 8011920:	6078      	str	r0, [r7, #4]
 8011922:	460b      	mov	r3, r1
 8011924:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8011926:	887b      	ldrh	r3, [r7, #2]
 8011928:	f242 0244 	movw	r2, #8260	; 0x2044
 801192c:	fb02 f303 	mul.w	r3, r2, r3
 8011930:	3308      	adds	r3, #8
 8011932:	687a      	ldr	r2, [r7, #4]
 8011934:	4413      	add	r3, r2
    }
 8011936:	4618      	mov	r0, r3
 8011938:	370c      	adds	r7, #12
 801193a:	46bd      	mov	sp, r7
 801193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011940:	4770      	bx	lr

08011942 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19RotationVoilierViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8011942:	b480      	push	{r7}
 8011944:	b083      	sub	sp, #12
 8011946:	af00      	add	r7, sp, #0
 8011948:	6078      	str	r0, [r7, #4]
 801194a:	460b      	mov	r3, r1
 801194c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801194e:	887b      	ldrh	r3, [r7, #2]
 8011950:	f242 0244 	movw	r2, #8260	; 0x2044
 8011954:	fb02 f303 	mul.w	r3, r2, r3
 8011958:	3308      	adds	r3, #8
 801195a:	687a      	ldr	r2, [r7, #4]
 801195c:	4413      	add	r3, r2
    }
 801195e:	4618      	mov	r0, r3
 8011960:	370c      	adds	r7, #12
 8011962:	46bd      	mov	sp, r7
 8011964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011968:	4770      	bx	lr

0801196a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI17MessagesPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801196a:	b480      	push	{r7}
 801196c:	b083      	sub	sp, #12
 801196e:	af00      	add	r7, sp, #0
 8011970:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8011972:	2301      	movs	r3, #1
    }
 8011974:	4618      	mov	r0, r3
 8011976:	370c      	adds	r7, #12
 8011978:	46bd      	mov	sp, r7
 801197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197e:	4770      	bx	lr

08011980 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17MessagesPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8011980:	b480      	push	{r7}
 8011982:	b083      	sub	sp, #12
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8011988:	2310      	movs	r3, #16
    }
 801198a:	4618      	mov	r0, r3
 801198c:	370c      	adds	r7, #12
 801198e:	46bd      	mov	sp, r7
 8011990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011994:	4770      	bx	lr

08011996 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17MessagesPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8011996:	b480      	push	{r7}
 8011998:	b083      	sub	sp, #12
 801199a:	af00      	add	r7, sp, #0
 801199c:	6078      	str	r0, [r7, #4]
 801199e:	460b      	mov	r3, r1
 80119a0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80119a2:	887b      	ldrh	r3, [r7, #2]
 80119a4:	011b      	lsls	r3, r3, #4
 80119a6:	3308      	adds	r3, #8
 80119a8:	687a      	ldr	r2, [r7, #4]
 80119aa:	4413      	add	r3, r2
    }
 80119ac:	4618      	mov	r0, r3
 80119ae:	370c      	adds	r7, #12
 80119b0:	46bd      	mov	sp, r7
 80119b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b6:	4770      	bx	lr

080119b8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI17MessagesPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80119b8:	b480      	push	{r7}
 80119ba:	b083      	sub	sp, #12
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
 80119c0:	460b      	mov	r3, r1
 80119c2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80119c4:	887b      	ldrh	r3, [r7, #2]
 80119c6:	011b      	lsls	r3, r3, #4
 80119c8:	3308      	adds	r3, #8
 80119ca:	687a      	ldr	r2, [r7, #4]
 80119cc:	4413      	add	r3, r2
    }
 80119ce:	4618      	mov	r0, r3
 80119d0:	370c      	adds	r7, #12
 80119d2:	46bd      	mov	sp, r7
 80119d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d8:	4770      	bx	lr

080119da <_GLOBAL__sub_I_touchgfx_init>:
 80119da:	b580      	push	{r7, lr}
 80119dc:	af00      	add	r7, sp, #0
 80119de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80119e2:	2001      	movs	r0, #1
 80119e4:	f7ff fefc 	bl	80117e0 <_Z41__static_initialization_and_destruction_0ii>
 80119e8:	bd80      	pop	{r7, pc}

080119ea <_GLOBAL__sub_D_touchgfx_init>:
 80119ea:	b580      	push	{r7, lr}
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80119f2:	2000      	movs	r0, #0
 80119f4:	f7ff fef4 	bl	80117e0 <_Z41__static_initialization_and_destruction_0ii>
 80119f8:	bd80      	pop	{r7, pc}

080119fa <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80119fa:	b580      	push	{r7, lr}
 80119fc:	b082      	sub	sp, #8
 80119fe:	af00      	add	r7, sp, #0
 8011a00:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	3318      	adds	r3, #24
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	6878      	ldr	r0, [r7, #4]
 8011a0c:	4798      	blx	r3
    }
 8011a0e:	bf00      	nop
 8011a10:	3708      	adds	r7, #8
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}

08011a16 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8011a16:	b480      	push	{r7}
 8011a18:	b083      	sub	sp, #12
 8011a1a:	af00      	add	r7, sp, #0
 8011a1c:	6078      	str	r0, [r7, #4]
 8011a1e:	460b      	mov	r3, r1
 8011a20:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	78fa      	ldrb	r2, [r7, #3]
 8011a26:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8011a2a:	bf00      	nop
 8011a2c:	370c      	adds	r7, #12
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a34:	4770      	bx	lr

08011a36 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8011a36:	b480      	push	{r7}
 8011a38:	b083      	sub	sp, #12
 8011a3a:	af00      	add	r7, sp, #0
 8011a3c:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8011a44:	3301      	adds	r3, #1
 8011a46:	b2da      	uxtb	r2, r3
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8011a4e:	bf00      	nop
 8011a50:	370c      	adds	r7, #12
 8011a52:	46bd      	mov	sp, r7
 8011a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a58:	4770      	bx	lr
	...

08011a5c <__NVIC_EnableIRQ>:
{
 8011a5c:	b480      	push	{r7}
 8011a5e:	b083      	sub	sp, #12
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	4603      	mov	r3, r0
 8011a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	db0d      	blt.n	8011a8a <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a72:	b2db      	uxtb	r3, r3
 8011a74:	f003 021f 	and.w	r2, r3, #31
 8011a78:	4907      	ldr	r1, [pc, #28]	; (8011a98 <__NVIC_EnableIRQ+0x3c>)
 8011a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a7e:	095b      	lsrs	r3, r3, #5
 8011a80:	2001      	movs	r0, #1
 8011a82:	fa00 f202 	lsl.w	r2, r0, r2
 8011a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011a8a:	bf00      	nop
 8011a8c:	370c      	adds	r7, #12
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a94:	4770      	bx	lr
 8011a96:	bf00      	nop
 8011a98:	e000e100 	.word	0xe000e100

08011a9c <__NVIC_DisableIRQ>:
{
 8011a9c:	b480      	push	{r7}
 8011a9e:	b083      	sub	sp, #12
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	db12      	blt.n	8011ad4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011ab2:	b2db      	uxtb	r3, r3
 8011ab4:	f003 021f 	and.w	r2, r3, #31
 8011ab8:	4909      	ldr	r1, [pc, #36]	; (8011ae0 <__NVIC_DisableIRQ+0x44>)
 8011aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011abe:	095b      	lsrs	r3, r3, #5
 8011ac0:	2001      	movs	r0, #1
 8011ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8011ac6:	3320      	adds	r3, #32
 8011ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8011acc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8011ad0:	f3bf 8f6f 	isb	sy
}
 8011ad4:	bf00      	nop
 8011ad6:	370c      	adds	r7, #12
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ade:	4770      	bx	lr
 8011ae0:	e000e100 	.word	0xe000e100

08011ae4 <__NVIC_SetPriority>:
{
 8011ae4:	b480      	push	{r7}
 8011ae6:	b083      	sub	sp, #12
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	4603      	mov	r3, r0
 8011aec:	6039      	str	r1, [r7, #0]
 8011aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	db0c      	blt.n	8011b12 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011af8:	683b      	ldr	r3, [r7, #0]
 8011afa:	b2db      	uxtb	r3, r3
 8011afc:	4a0e      	ldr	r2, [pc, #56]	; (8011b38 <__NVIC_SetPriority+0x54>)
 8011afe:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8011b02:	4608      	mov	r0, r1
 8011b04:	011b      	lsls	r3, r3, #4
 8011b06:	b2d9      	uxtb	r1, r3
 8011b08:	1813      	adds	r3, r2, r0
 8011b0a:	460a      	mov	r2, r1
 8011b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011b10:	e00c      	b.n	8011b2c <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011b12:	683b      	ldr	r3, [r7, #0]
 8011b14:	b2da      	uxtb	r2, r3
 8011b16:	4909      	ldr	r1, [pc, #36]	; (8011b3c <__NVIC_SetPriority+0x58>)
 8011b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b1c:	b2db      	uxtb	r3, r3
 8011b1e:	f003 030f 	and.w	r3, r3, #15
 8011b22:	3b04      	subs	r3, #4
 8011b24:	0112      	lsls	r2, r2, #4
 8011b26:	b2d2      	uxtb	r2, r2
 8011b28:	440b      	add	r3, r1
 8011b2a:	761a      	strb	r2, [r3, #24]
}
 8011b2c:	bf00      	nop
 8011b2e:	370c      	adds	r7, #12
 8011b30:	46bd      	mov	sp, r7
 8011b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b36:	4770      	bx	lr
 8011b38:	e000e100 	.word	0xe000e100
 8011b3c:	e000ed00 	.word	0xe000ed00

08011b40 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8011b40:	b5b0      	push	{r4, r5, r7, lr}
 8011b42:	b082      	sub	sp, #8
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f001 f932 	bl	8012db4 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 8011b50:	687d      	ldr	r5, [r7, #4]
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	334c      	adds	r3, #76	; 0x4c
 8011b58:	681c      	ldr	r4, [r3, #0]
 8011b5a:	f003 ff33 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	4619      	mov	r1, r3
 8011b62:	4628      	mov	r0, r5
 8011b64:	47a0      	blx	r4

    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0xC005FA00, (void*)0);
 8011b66:	6878      	ldr	r0, [r7, #4]
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	3374      	adds	r3, #116	; 0x74
 8011b6e:	681c      	ldr	r4, [r3, #0]
 8011b70:	2300      	movs	r3, #0
 8011b72:	4a06      	ldr	r2, [pc, #24]	; (8011b8c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 8011b74:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8011b78:	47a0      	blx	r4
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     *
     * Setting to false to increase performance when using double buffering
     */
    lockDMAToFrontPorch(false);
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2100      	movs	r1, #0
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f7ff ff49 	bl	8011a16 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 8011b84:	bf00      	nop
 8011b86:	3708      	adds	r7, #8
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8011b8c:	c005fa00 	.word	0xc005fa00

08011b90 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b082      	sub	sp, #8
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8011b98:	2109      	movs	r1, #9
 8011b9a:	205a      	movs	r0, #90	; 0x5a
 8011b9c:	f7ff ffa2 	bl	8011ae4 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8011ba0:	2109      	movs	r1, #9
 8011ba2:	2058      	movs	r0, #88	; 0x58
 8011ba4:	f7ff ff9e 	bl	8011ae4 <__NVIC_SetPriority>
}
 8011ba8:	bf00      	nop
 8011baa:	3708      	adds	r7, #8
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}

08011bb0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b082      	sub	sp, #8
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8011bb8:	205a      	movs	r0, #90	; 0x5a
 8011bba:	f7ff ff4f 	bl	8011a5c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8011bbe:	2058      	movs	r0, #88	; 0x58
 8011bc0:	f7ff ff4c 	bl	8011a5c <__NVIC_EnableIRQ>
}
 8011bc4:	bf00      	nop
 8011bc6:	3708      	adds	r7, #8
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}

08011bcc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b082      	sub	sp, #8
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8011bd4:	205a      	movs	r0, #90	; 0x5a
 8011bd6:	f7ff ff61 	bl	8011a9c <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8011bda:	2058      	movs	r0, #88	; 0x58
 8011bdc:	f7ff ff5e 	bl	8011a9c <__NVIC_DisableIRQ>
}
 8011be0:	bf00      	nop
 8011be2:	3708      	adds	r7, #8
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd80      	pop	{r7, pc}

08011be8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8011be8:	b480      	push	{r7}
 8011bea:	b083      	sub	sp, #12
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8011bf0:	4b11      	ldr	r3, [pc, #68]	; (8011c38 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8011bf2:	68db      	ldr	r3, [r3, #12]
 8011bf4:	b29b      	uxth	r3, r3
 8011bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011bfa:	b29b      	uxth	r3, r3
 8011bfc:	3b01      	subs	r3, #1
 8011bfe:	b29a      	uxth	r2, r3
 8011c00:	4b0e      	ldr	r3, [pc, #56]	; (8011c3c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8011c02:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8011c04:	4b0c      	ldr	r3, [pc, #48]	; (8011c38 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8011c06:	691b      	ldr	r3, [r3, #16]
 8011c08:	b29b      	uxth	r3, r3
 8011c0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011c0e:	b29b      	uxth	r3, r3
 8011c10:	3b01      	subs	r3, #1
 8011c12:	b29a      	uxth	r2, r3
 8011c14:	4b0a      	ldr	r3, [pc, #40]	; (8011c40 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8011c16:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8011c18:	4b08      	ldr	r3, [pc, #32]	; (8011c3c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8011c1a:	881a      	ldrh	r2, [r3, #0]
 8011c1c:	4b06      	ldr	r3, [pc, #24]	; (8011c38 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8011c1e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8011c20:	4b05      	ldr	r3, [pc, #20]	; (8011c38 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8011c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c24:	4a04      	ldr	r2, [pc, #16]	; (8011c38 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8011c26:	f043 0301 	orr.w	r3, r3, #1
 8011c2a:	6353      	str	r3, [r2, #52]	; 0x34
}
 8011c2c:	bf00      	nop
 8011c2e:	370c      	adds	r7, #12
 8011c30:	46bd      	mov	sp, r7
 8011c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c36:	4770      	bx	lr
 8011c38:	40016800 	.word	0x40016800
 8011c3c:	2000b250 	.word	0x2000b250
 8011c40:	2000b252 	.word	0x2000b252

08011c44 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8011c44:	b480      	push	{r7}
 8011c46:	b083      	sub	sp, #12
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8011c4c:	4b03      	ldr	r3, [pc, #12]	; (8011c5c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8011c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8011c50:	4618      	mov	r0, r3
 8011c52:	370c      	adds	r7, #12
 8011c54:	46bd      	mov	sp, r7
 8011c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5a:	4770      	bx	lr
 8011c5c:	40016884 	.word	0x40016884

08011c60 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8011c60:	b480      	push	{r7}
 8011c62:	b083      	sub	sp, #12
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
 8011c68:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8011c6a:	4a06      	ldr	r2, [pc, #24]	; (8011c84 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8011c70:	4b05      	ldr	r3, [pc, #20]	; (8011c88 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8011c72:	2201      	movs	r2, #1
 8011c74:	625a      	str	r2, [r3, #36]	; 0x24
}
 8011c76:	bf00      	nop
 8011c78:	370c      	adds	r7, #12
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c80:	4770      	bx	lr
 8011c82:	bf00      	nop
 8011c84:	40016884 	.word	0x40016884
 8011c88:	40016800 	.word	0x40016800

08011c8c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b082      	sub	sp, #8
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
 8011c94:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	6839      	ldr	r1, [r7, #0]
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f000 fd9b 	bl	80127d6 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8011ca0:	bf00      	nop
 8011ca2:	3708      	adds	r7, #8
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}

08011ca8 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b082      	sub	sp, #8
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8011cb0:	4b1a      	ldr	r3, [pc, #104]	; (8011d1c <HAL_LTDC_LineEventCallback+0x74>)
 8011cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cb4:	4a1a      	ldr	r2, [pc, #104]	; (8011d20 <HAL_LTDC_LineEventCallback+0x78>)
 8011cb6:	8812      	ldrh	r2, [r2, #0]
 8011cb8:	4293      	cmp	r3, r2
 8011cba:	bf0c      	ite	eq
 8011cbc:	2301      	moveq	r3, #1
 8011cbe:	2300      	movne	r3, #0
 8011cc0:	b2db      	uxtb	r3, r3
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d017      	beq.n	8011cf6 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8011cc6:	4b17      	ldr	r3, [pc, #92]	; (8011d24 <HAL_LTDC_LineEventCallback+0x7c>)
 8011cc8:	881b      	ldrh	r3, [r3, #0]
 8011cca:	4619      	mov	r1, r3
 8011ccc:	6878      	ldr	r0, [r7, #4]
 8011cce:	f7f2 fe11 	bl	80048f4 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8011cd2:	f7f8 fa11 	bl	800a0f8 <_ZN8touchgfx3HAL11getInstanceEv>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f7ff feac 	bl	8011a36 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8011cde:	f7fe fd5f 	bl	80107a0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8011ce2:	f7f8 fa09 	bl	800a0f8 <_ZN8touchgfx3HAL11getInstanceEv>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f001 faeb 	bl	80132c4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8011cee:	2000      	movs	r0, #0
 8011cf0:	f7fe fa54 	bl	801019c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8011cf4:	e00e      	b.n	8011d14 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8011cf6:	4b0a      	ldr	r3, [pc, #40]	; (8011d20 <HAL_LTDC_LineEventCallback+0x78>)
 8011cf8:	881b      	ldrh	r3, [r3, #0]
 8011cfa:	4619      	mov	r1, r3
 8011cfc:	6878      	ldr	r0, [r7, #4]
 8011cfe:	f7f2 fdf9 	bl	80048f4 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8011d02:	2000      	movs	r0, #0
 8011d04:	f7fe fa55 	bl	80101b2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8011d08:	f7f8 f9f6 	bl	800a0f8 <_ZN8touchgfx3HAL11getInstanceEv>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f7ff fe73 	bl	80119fa <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8011d14:	bf00      	nop
 8011d16:	3708      	adds	r7, #8
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}
 8011d1c:	40016800 	.word	0x40016800
 8011d20:	2000b250 	.word	0x2000b250
 8011d24:	2000b252 	.word	0x2000b252

08011d28 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8011d28:	8880      	ldrh	r0, [r0, #4]
 8011d2a:	4770      	bx	lr

08011d2c <_ZN8touchgfx17AbstractPartition5clearEv>:
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	8083      	strh	r3, [r0, #4]
 8011d30:	4770      	bx	lr
	...

08011d34 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8011d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d36:	6803      	ldr	r3, [r0, #0]
 8011d38:	460e      	mov	r6, r1
 8011d3a:	2100      	movs	r1, #0
 8011d3c:	4605      	mov	r5, r0
 8011d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d40:	4798      	blx	r3
 8011d42:	4604      	mov	r4, r0
 8011d44:	682b      	ldr	r3, [r5, #0]
 8011d46:	4628      	mov	r0, r5
 8011d48:	1b34      	subs	r4, r6, r4
 8011d4a:	6a1b      	ldr	r3, [r3, #32]
 8011d4c:	b2a4      	uxth	r4, r4
 8011d4e:	4798      	blx	r3
 8011d50:	88ab      	ldrh	r3, [r5, #4]
 8011d52:	fbb4 f4f0 	udiv	r4, r4, r0
 8011d56:	42a3      	cmp	r3, r4
 8011d58:	d805      	bhi.n	8011d66 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8011d5a:	4b0e      	ldr	r3, [pc, #56]	; (8011d94 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8011d5c:	211e      	movs	r1, #30
 8011d5e:	4a0e      	ldr	r2, [pc, #56]	; (8011d98 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8011d60:	480e      	ldr	r0, [pc, #56]	; (8011d9c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8011d62:	f010 faed 	bl	8022340 <__assert_func>
 8011d66:	682b      	ldr	r3, [r5, #0]
 8011d68:	2100      	movs	r1, #0
 8011d6a:	4628      	mov	r0, r5
 8011d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d6e:	4798      	blx	r3
 8011d70:	682b      	ldr	r3, [r5, #0]
 8011d72:	4607      	mov	r7, r0
 8011d74:	4628      	mov	r0, r5
 8011d76:	6a1b      	ldr	r3, [r3, #32]
 8011d78:	4798      	blx	r3
 8011d7a:	1bf3      	subs	r3, r6, r7
 8011d7c:	b29b      	uxth	r3, r3
 8011d7e:	fbb3 f2f0 	udiv	r2, r3, r0
 8011d82:	fb02 3010 	mls	r0, r2, r0, r3
 8011d86:	b118      	cbz	r0, 8011d90 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8011d88:	4b05      	ldr	r3, [pc, #20]	; (8011da0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8011d8a:	211f      	movs	r1, #31
 8011d8c:	4a02      	ldr	r2, [pc, #8]	; (8011d98 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8011d8e:	e7e7      	b.n	8011d60 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8011d90:	4620      	mov	r0, r4
 8011d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d94:	08025180 	.word	0x08025180
 8011d98:	080252ee 	.word	0x080252ee
 8011d9c:	08025195 	.word	0x08025195
 8011da0:	080251c3 	.word	0x080251c3

08011da4 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8011da4:	b538      	push	{r3, r4, r5, lr}
 8011da6:	6803      	ldr	r3, [r0, #0]
 8011da8:	460d      	mov	r5, r1
 8011daa:	4604      	mov	r4, r0
 8011dac:	6a1b      	ldr	r3, [r3, #32]
 8011dae:	4798      	blx	r3
 8011db0:	4285      	cmp	r5, r0
 8011db2:	d905      	bls.n	8011dc0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8011db4:	4b0c      	ldr	r3, [pc, #48]	; (8011de8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8011db6:	212f      	movs	r1, #47	; 0x2f
 8011db8:	4a0c      	ldr	r2, [pc, #48]	; (8011dec <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8011dba:	480d      	ldr	r0, [pc, #52]	; (8011df0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8011dbc:	f010 fac0 	bl	8022340 <__assert_func>
 8011dc0:	6823      	ldr	r3, [r4, #0]
 8011dc2:	4620      	mov	r0, r4
 8011dc4:	88a5      	ldrh	r5, [r4, #4]
 8011dc6:	69db      	ldr	r3, [r3, #28]
 8011dc8:	4798      	blx	r3
 8011dca:	4285      	cmp	r5, r0
 8011dcc:	d303      	bcc.n	8011dd6 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8011dce:	4b09      	ldr	r3, [pc, #36]	; (8011df4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8011dd0:	2130      	movs	r1, #48	; 0x30
 8011dd2:	4a06      	ldr	r2, [pc, #24]	; (8011dec <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8011dd4:	e7f1      	b.n	8011dba <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8011dd6:	6823      	ldr	r3, [r4, #0]
 8011dd8:	4620      	mov	r0, r4
 8011dda:	88a1      	ldrh	r1, [r4, #4]
 8011ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dde:	4798      	blx	r3
 8011de0:	88a3      	ldrh	r3, [r4, #4]
 8011de2:	3301      	adds	r3, #1
 8011de4:	80a3      	strh	r3, [r4, #4]
 8011de6:	bd38      	pop	{r3, r4, r5, pc}
 8011de8:	0802523d 	.word	0x0802523d
 8011dec:	08025331 	.word	0x08025331
 8011df0:	08025195 	.word	0x08025195
 8011df4:	08025254 	.word	0x08025254

08011df8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8011df8:	b570      	push	{r4, r5, r6, lr}
 8011dfa:	6803      	ldr	r3, [r0, #0]
 8011dfc:	4616      	mov	r6, r2
 8011dfe:	4604      	mov	r4, r0
 8011e00:	460d      	mov	r5, r1
 8011e02:	6a1b      	ldr	r3, [r3, #32]
 8011e04:	4798      	blx	r3
 8011e06:	4286      	cmp	r6, r0
 8011e08:	d905      	bls.n	8011e16 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8011e0a:	4b06      	ldr	r3, [pc, #24]	; (8011e24 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8011e0c:	2139      	movs	r1, #57	; 0x39
 8011e0e:	4a06      	ldr	r2, [pc, #24]	; (8011e28 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8011e10:	4806      	ldr	r0, [pc, #24]	; (8011e2c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8011e12:	f010 fa95 	bl	8022340 <__assert_func>
 8011e16:	6823      	ldr	r3, [r4, #0]
 8011e18:	4629      	mov	r1, r5
 8011e1a:	4620      	mov	r0, r4
 8011e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e22:	4718      	bx	r3
 8011e24:	0802523d 	.word	0x0802523d
 8011e28:	080252a4 	.word	0x080252a4
 8011e2c:	08025195 	.word	0x08025195

08011e30 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8011e30:	4770      	bx	lr
	...

08011e34 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8011e34:	4a02      	ldr	r2, [pc, #8]	; (8011e40 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8011e36:	6002      	str	r2, [r0, #0]
 8011e38:	2200      	movs	r2, #0
 8011e3a:	8082      	strh	r2, [r0, #4]
 8011e3c:	4770      	bx	lr
 8011e3e:	bf00      	nop
 8011e40:	08025278 	.word	0x08025278

08011e44 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8011e44:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011e46:	2000      	movs	r0, #0
 8011e48:	b12b      	cbz	r3, 8011e56 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8011e4a:	b920      	cbnz	r0, 8011e56 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8011e4c:	1a5a      	subs	r2, r3, r1
 8011e4e:	699b      	ldr	r3, [r3, #24]
 8011e50:	4250      	negs	r0, r2
 8011e52:	4150      	adcs	r0, r2
 8011e54:	e7f8      	b.n	8011e48 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8011e56:	4770      	bx	lr

08011e58 <_ZN8touchgfx9Container9removeAllEv>:
 8011e58:	2200      	movs	r2, #0
 8011e5a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011e5c:	b123      	cbz	r3, 8011e68 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8011e5e:	6999      	ldr	r1, [r3, #24]
 8011e60:	6281      	str	r1, [r0, #40]	; 0x28
 8011e62:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8011e66:	e7f8      	b.n	8011e5a <_ZN8touchgfx9Container9removeAllEv+0x2>
 8011e68:	4770      	bx	lr

08011e6a <_ZN8touchgfx9Container6unlinkEv>:
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	6283      	str	r3, [r0, #40]	; 0x28
 8011e6e:	4770      	bx	lr

08011e70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8011e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e74:	461f      	mov	r7, r3
 8011e76:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8011e7a:	460d      	mov	r5, r1
 8011e7c:	4616      	mov	r6, r2
 8011e7e:	b103      	cbz	r3, 8011e82 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8011e80:	6038      	str	r0, [r7, #0]
 8011e82:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011e84:	b314      	cbz	r4, 8011ecc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8011e86:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8011e8a:	b1eb      	cbz	r3, 8011ec8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011e8c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011e90:	428d      	cmp	r5, r1
 8011e92:	db19      	blt.n	8011ec8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011e94:	b289      	uxth	r1, r1
 8011e96:	8923      	ldrh	r3, [r4, #8]
 8011e98:	440b      	add	r3, r1
 8011e9a:	b21b      	sxth	r3, r3
 8011e9c:	429d      	cmp	r5, r3
 8011e9e:	da13      	bge.n	8011ec8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011ea0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011ea4:	4296      	cmp	r6, r2
 8011ea6:	db0f      	blt.n	8011ec8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011ea8:	b292      	uxth	r2, r2
 8011eaa:	8963      	ldrh	r3, [r4, #10]
 8011eac:	4413      	add	r3, r2
 8011eae:	b21b      	sxth	r3, r3
 8011eb0:	429e      	cmp	r6, r3
 8011eb2:	da09      	bge.n	8011ec8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011eb4:	6823      	ldr	r3, [r4, #0]
 8011eb6:	1ab2      	subs	r2, r6, r2
 8011eb8:	1a69      	subs	r1, r5, r1
 8011eba:	4620      	mov	r0, r4
 8011ebc:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8011ec0:	b212      	sxth	r2, r2
 8011ec2:	463b      	mov	r3, r7
 8011ec4:	b209      	sxth	r1, r1
 8011ec6:	47c0      	blx	r8
 8011ec8:	69a4      	ldr	r4, [r4, #24]
 8011eca:	e7db      	b.n	8011e84 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8011ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011ed0 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	8002      	strh	r2, [r0, #0]
 8011ed4:	8042      	strh	r2, [r0, #2]
 8011ed6:	8082      	strh	r2, [r0, #4]
 8011ed8:	80c2      	strh	r2, [r0, #6]
 8011eda:	4770      	bx	lr

08011edc <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8011edc:	b570      	push	{r4, r5, r6, lr}
 8011ede:	460d      	mov	r5, r1
 8011ee0:	4616      	mov	r6, r2
 8011ee2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011ee4:	b13c      	cbz	r4, 8011ef6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8011ee6:	6823      	ldr	r3, [r4, #0]
 8011ee8:	4620      	mov	r0, r4
 8011eea:	4632      	mov	r2, r6
 8011eec:	4629      	mov	r1, r5
 8011eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ef0:	4798      	blx	r3
 8011ef2:	69a4      	ldr	r4, [r4, #24]
 8011ef4:	e7f6      	b.n	8011ee4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8011ef6:	bd70      	pop	{r4, r5, r6, pc}

08011ef8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8011ef8:	b538      	push	{r3, r4, r5, lr}
 8011efa:	460d      	mov	r5, r1
 8011efc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011efe:	b134      	cbz	r4, 8011f0e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8011f00:	682b      	ldr	r3, [r5, #0]
 8011f02:	4621      	mov	r1, r4
 8011f04:	4628      	mov	r0, r5
 8011f06:	689b      	ldr	r3, [r3, #8]
 8011f08:	4798      	blx	r3
 8011f0a:	69a4      	ldr	r4, [r4, #24]
 8011f0c:	e7f7      	b.n	8011efe <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8011f0e:	bd38      	pop	{r3, r4, r5, pc}

08011f10 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8011f10:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011f12:	b19b      	cbz	r3, 8011f3c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8011f14:	428b      	cmp	r3, r1
 8011f16:	d109      	bne.n	8011f2c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8011f18:	699a      	ldr	r2, [r3, #24]
 8011f1a:	2100      	movs	r1, #0
 8011f1c:	6159      	str	r1, [r3, #20]
 8011f1e:	6282      	str	r2, [r0, #40]	; 0x28
 8011f20:	b902      	cbnz	r2, 8011f24 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8011f22:	4770      	bx	lr
 8011f24:	6199      	str	r1, [r3, #24]
 8011f26:	4770      	bx	lr
 8011f28:	4613      	mov	r3, r2
 8011f2a:	b13a      	cbz	r2, 8011f3c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8011f2c:	699a      	ldr	r2, [r3, #24]
 8011f2e:	428a      	cmp	r2, r1
 8011f30:	d1fa      	bne.n	8011f28 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8011f32:	698a      	ldr	r2, [r1, #24]
 8011f34:	619a      	str	r2, [r3, #24]
 8011f36:	2300      	movs	r3, #0
 8011f38:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8011f3c:	4770      	bx	lr

08011f3e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8011f3e:	b410      	push	{r4}
 8011f40:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011f42:	4604      	mov	r4, r0
 8011f44:	b92b      	cbnz	r3, 8011f52 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8011f46:	6803      	ldr	r3, [r0, #0]
 8011f48:	4611      	mov	r1, r2
 8011f4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011f50:	4718      	bx	r3
 8011f52:	b941      	cbnz	r1, 8011f66 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8011f54:	6193      	str	r3, [r2, #24]
 8011f56:	6282      	str	r2, [r0, #40]	; 0x28
 8011f58:	6154      	str	r4, [r2, #20]
 8011f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f5e:	4770      	bx	lr
 8011f60:	4603      	mov	r3, r0
 8011f62:	2800      	cmp	r0, #0
 8011f64:	d0f9      	beq.n	8011f5a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8011f66:	4299      	cmp	r1, r3
 8011f68:	6998      	ldr	r0, [r3, #24]
 8011f6a:	d1f9      	bne.n	8011f60 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8011f6c:	6190      	str	r0, [r2, #24]
 8011f6e:	618a      	str	r2, [r1, #24]
 8011f70:	e7f2      	b.n	8011f58 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08011f74 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8011f74:	4288      	cmp	r0, r1
 8011f76:	b508      	push	{r3, lr}
 8011f78:	d105      	bne.n	8011f86 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8011f7a:	4b11      	ldr	r3, [pc, #68]	; (8011fc0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8011f7c:	2123      	movs	r1, #35	; 0x23
 8011f7e:	4a11      	ldr	r2, [pc, #68]	; (8011fc4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8011f80:	4811      	ldr	r0, [pc, #68]	; (8011fc8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8011f82:	f010 f9dd 	bl	8022340 <__assert_func>
 8011f86:	694b      	ldr	r3, [r1, #20]
 8011f88:	b11b      	cbz	r3, 8011f92 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8011f8a:	4b10      	ldr	r3, [pc, #64]	; (8011fcc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8011f8c:	2124      	movs	r1, #36	; 0x24
 8011f8e:	4a0d      	ldr	r2, [pc, #52]	; (8011fc4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8011f90:	e7f6      	b.n	8011f80 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8011f92:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8011f96:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011f98:	b913      	cbnz	r3, 8011fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8011f9a:	6281      	str	r1, [r0, #40]	; 0x28
 8011f9c:	bd08      	pop	{r3, pc}
 8011f9e:	4613      	mov	r3, r2
 8011fa0:	699a      	ldr	r2, [r3, #24]
 8011fa2:	b12a      	cbz	r2, 8011fb0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8011fa4:	428b      	cmp	r3, r1
 8011fa6:	d1fa      	bne.n	8011f9e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8011fa8:	4b09      	ldr	r3, [pc, #36]	; (8011fd0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8011faa:	2135      	movs	r1, #53	; 0x35
 8011fac:	4a05      	ldr	r2, [pc, #20]	; (8011fc4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8011fae:	e7e7      	b.n	8011f80 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8011fb0:	428b      	cmp	r3, r1
 8011fb2:	d103      	bne.n	8011fbc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8011fb4:	4b06      	ldr	r3, [pc, #24]	; (8011fd0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8011fb6:	2138      	movs	r1, #56	; 0x38
 8011fb8:	4a02      	ldr	r2, [pc, #8]	; (8011fc4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8011fba:	e7e1      	b.n	8011f80 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8011fbc:	6199      	str	r1, [r3, #24]
 8011fbe:	e7ed      	b.n	8011f9c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8011fc0:	0802536f 	.word	0x0802536f
 8011fc4:	080254c4 	.word	0x080254c4
 8011fc8:	0802539b 	.word	0x0802539b
 8011fcc:	080253ce 	.word	0x080253ce
 8011fd0:	08025404 	.word	0x08025404

08011fd4 <_ZN8touchgfx4RectaNERKS0_>:
 8011fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fd8:	888b      	ldrh	r3, [r1, #4]
 8011fda:	f9b1 9000 	ldrsh.w	r9, [r1]
 8011fde:	f9b0 a000 	ldrsh.w	sl, [r0]
 8011fe2:	444b      	add	r3, r9
 8011fe4:	b29b      	uxth	r3, r3
 8011fe6:	fa0f f883 	sxth.w	r8, r3
 8011fea:	45c2      	cmp	sl, r8
 8011fec:	da30      	bge.n	8012050 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8011fee:	8882      	ldrh	r2, [r0, #4]
 8011ff0:	4452      	add	r2, sl
 8011ff2:	b292      	uxth	r2, r2
 8011ff4:	fa0f fe82 	sxth.w	lr, r2
 8011ff8:	45f1      	cmp	r9, lr
 8011ffa:	da29      	bge.n	8012050 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8011ffc:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8012000:	88cc      	ldrh	r4, [r1, #6]
 8012002:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8012006:	442c      	add	r4, r5
 8012008:	b224      	sxth	r4, r4
 801200a:	42a6      	cmp	r6, r4
 801200c:	da20      	bge.n	8012050 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801200e:	88c7      	ldrh	r7, [r0, #6]
 8012010:	4437      	add	r7, r6
 8012012:	b2bf      	uxth	r7, r7
 8012014:	fa0f fc87 	sxth.w	ip, r7
 8012018:	4565      	cmp	r5, ip
 801201a:	da19      	bge.n	8012050 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 801201c:	45ca      	cmp	sl, r9
 801201e:	4654      	mov	r4, sl
 8012020:	bfb8      	it	lt
 8012022:	464c      	movlt	r4, r9
 8012024:	42b5      	cmp	r5, r6
 8012026:	bfb8      	it	lt
 8012028:	4635      	movlt	r5, r6
 801202a:	45f0      	cmp	r8, lr
 801202c:	bfc8      	it	gt
 801202e:	4613      	movgt	r3, r2
 8012030:	1b1b      	subs	r3, r3, r4
 8012032:	8083      	strh	r3, [r0, #4]
 8012034:	88ca      	ldrh	r2, [r1, #6]
 8012036:	884b      	ldrh	r3, [r1, #2]
 8012038:	8004      	strh	r4, [r0, #0]
 801203a:	4413      	add	r3, r2
 801203c:	8045      	strh	r5, [r0, #2]
 801203e:	b29b      	uxth	r3, r3
 8012040:	b21a      	sxth	r2, r3
 8012042:	4594      	cmp	ip, r2
 8012044:	bfb8      	it	lt
 8012046:	463b      	movlt	r3, r7
 8012048:	1b5b      	subs	r3, r3, r5
 801204a:	80c3      	strh	r3, [r0, #6]
 801204c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012050:	2300      	movs	r3, #0
 8012052:	8003      	strh	r3, [r0, #0]
 8012054:	8043      	strh	r3, [r0, #2]
 8012056:	8083      	strh	r3, [r0, #4]
 8012058:	80c3      	strh	r3, [r0, #6]
 801205a:	e7f7      	b.n	801204c <_ZN8touchgfx4RectaNERKS0_+0x78>

0801205c <_ZNK8touchgfx4Rect7isEmptyEv>:
 801205c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012060:	b12b      	cbz	r3, 801206e <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 8012062:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8012066:	fab0 f080 	clz	r0, r0
 801206a:	0940      	lsrs	r0, r0, #5
 801206c:	4770      	bx	lr
 801206e:	2001      	movs	r0, #1
 8012070:	4770      	bx	lr

08012072 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8012072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012076:	2300      	movs	r3, #0
 8012078:	4604      	mov	r4, r0
 801207a:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801207c:	8003      	strh	r3, [r0, #0]
 801207e:	8043      	strh	r3, [r0, #2]
 8012080:	8083      	strh	r3, [r0, #4]
 8012082:	80c3      	strh	r3, [r0, #6]
 8012084:	2d00      	cmp	r5, #0
 8012086:	d040      	beq.n	801210a <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8012088:	1d28      	adds	r0, r5, #4
 801208a:	f7ff ffe7 	bl	801205c <_ZNK8touchgfx4Rect7isEmptyEv>
 801208e:	b988      	cbnz	r0, 80120b4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012090:	4620      	mov	r0, r4
 8012092:	f7ff ffe3 	bl	801205c <_ZNK8touchgfx4Rect7isEmptyEv>
 8012096:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801209a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801209e:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80120a2:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80120a6:	b138      	cbz	r0, 80120b8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80120a8:	8022      	strh	r2, [r4, #0]
 80120aa:	8063      	strh	r3, [r4, #2]
 80120ac:	f8a4 e004 	strh.w	lr, [r4, #4]
 80120b0:	f8a4 c006 	strh.w	ip, [r4, #6]
 80120b4:	69ad      	ldr	r5, [r5, #24]
 80120b6:	e7e5      	b.n	8012084 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80120b8:	f9b4 0000 	ldrsh.w	r0, [r4]
 80120bc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80120c0:	4290      	cmp	r0, r2
 80120c2:	4607      	mov	r7, r0
 80120c4:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80120c8:	460e      	mov	r6, r1
 80120ca:	bfa8      	it	ge
 80120cc:	4617      	movge	r7, r2
 80120ce:	4299      	cmp	r1, r3
 80120d0:	4472      	add	r2, lr
 80120d2:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80120d6:	bfa8      	it	ge
 80120d8:	461e      	movge	r6, r3
 80120da:	4440      	add	r0, r8
 80120dc:	4471      	add	r1, lr
 80120de:	4463      	add	r3, ip
 80120e0:	b200      	sxth	r0, r0
 80120e2:	8027      	strh	r7, [r4, #0]
 80120e4:	b212      	sxth	r2, r2
 80120e6:	8066      	strh	r6, [r4, #2]
 80120e8:	b209      	sxth	r1, r1
 80120ea:	b21b      	sxth	r3, r3
 80120ec:	4290      	cmp	r0, r2
 80120ee:	bfac      	ite	ge
 80120f0:	ebc7 0200 	rsbge	r2, r7, r0
 80120f4:	ebc7 0202 	rsblt	r2, r7, r2
 80120f8:	4299      	cmp	r1, r3
 80120fa:	bfac      	ite	ge
 80120fc:	ebc6 0301 	rsbge	r3, r6, r1
 8012100:	ebc6 0303 	rsblt	r3, r6, r3
 8012104:	80a2      	strh	r2, [r4, #4]
 8012106:	80e3      	strh	r3, [r4, #6]
 8012108:	e7d4      	b.n	80120b4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801210a:	4620      	mov	r0, r4
 801210c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012110 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8012110:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012114:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8012118:	b383      	cbz	r3, 801217c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801211a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801211c:	b374      	cbz	r4, 801217c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801211e:	f9b1 5000 	ldrsh.w	r5, [r1]
 8012122:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8012126:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801212a:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801212e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012132:	b303      	cbz	r3, 8012176 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8012134:	4668      	mov	r0, sp
 8012136:	1d21      	adds	r1, r4, #4
 8012138:	f8ad 5000 	strh.w	r5, [sp]
 801213c:	f8ad 6002 	strh.w	r6, [sp, #2]
 8012140:	f8ad 7004 	strh.w	r7, [sp, #4]
 8012144:	f8ad 8006 	strh.w	r8, [sp, #6]
 8012148:	f7ff ff44 	bl	8011fd4 <_ZN8touchgfx4RectaNERKS0_>
 801214c:	4668      	mov	r0, sp
 801214e:	f7ff ff85 	bl	801205c <_ZNK8touchgfx4Rect7isEmptyEv>
 8012152:	b980      	cbnz	r0, 8012176 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8012154:	f8bd 3000 	ldrh.w	r3, [sp]
 8012158:	4669      	mov	r1, sp
 801215a:	88a2      	ldrh	r2, [r4, #4]
 801215c:	4620      	mov	r0, r4
 801215e:	1a9b      	subs	r3, r3, r2
 8012160:	88e2      	ldrh	r2, [r4, #6]
 8012162:	f8ad 3000 	strh.w	r3, [sp]
 8012166:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801216a:	1a9b      	subs	r3, r3, r2
 801216c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012170:	6823      	ldr	r3, [r4, #0]
 8012172:	689b      	ldr	r3, [r3, #8]
 8012174:	4798      	blx	r3
 8012176:	69a4      	ldr	r4, [r4, #24]
 8012178:	2c00      	cmp	r4, #0
 801217a:	d1d8      	bne.n	801212e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801217c:	b002      	add	sp, #8
 801217e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012182 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8012182:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012184:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8012188:	460d      	mov	r5, r1
 801218a:	4616      	mov	r6, r2
 801218c:	b323      	cbz	r3, 80121d8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801218e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012190:	b314      	cbz	r4, 80121d8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012192:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012196:	b1eb      	cbz	r3, 80121d4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012198:	6828      	ldr	r0, [r5, #0]
 801219a:	466b      	mov	r3, sp
 801219c:	6869      	ldr	r1, [r5, #4]
 801219e:	c303      	stmia	r3!, {r0, r1}
 80121a0:	4668      	mov	r0, sp
 80121a2:	1d21      	adds	r1, r4, #4
 80121a4:	f7ff ff16 	bl	8011fd4 <_ZN8touchgfx4RectaNERKS0_>
 80121a8:	4668      	mov	r0, sp
 80121aa:	f7ff ff57 	bl	801205c <_ZNK8touchgfx4Rect7isEmptyEv>
 80121ae:	b988      	cbnz	r0, 80121d4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80121b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80121b4:	4669      	mov	r1, sp
 80121b6:	88a2      	ldrh	r2, [r4, #4]
 80121b8:	4620      	mov	r0, r4
 80121ba:	1a9b      	subs	r3, r3, r2
 80121bc:	88e2      	ldrh	r2, [r4, #6]
 80121be:	f8ad 3000 	strh.w	r3, [sp]
 80121c2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80121c6:	1a9b      	subs	r3, r3, r2
 80121c8:	4632      	mov	r2, r6
 80121ca:	f8ad 3002 	strh.w	r3, [sp, #2]
 80121ce:	6823      	ldr	r3, [r4, #0]
 80121d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80121d2:	4798      	blx	r3
 80121d4:	69a4      	ldr	r4, [r4, #24]
 80121d6:	e7db      	b.n	8012190 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80121d8:	b002      	add	sp, #8
 80121da:	bd70      	pop	{r4, r5, r6, pc}

080121dc <_ZN8touchgfx6SliderD1Ev>:
 80121dc:	4770      	bx	lr

080121de <_ZN8touchgfx6Slider8setValueEi>:
 80121de:	b570      	push	{r4, r5, r6, lr}
 80121e0:	6803      	ldr	r3, [r0, #0]
 80121e2:	4604      	mov	r4, r0
 80121e4:	e9d3 532a 	ldrd	r5, r3, [r3, #168]	; 0xa8
 80121e8:	4798      	blx	r3
 80121ea:	4601      	mov	r1, r0
 80121ec:	462b      	mov	r3, r5
 80121ee:	4620      	mov	r0, r4
 80121f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80121f4:	4718      	bx	r3

080121f6 <_ZNK8touchgfx6Slider15valueToPositionEi>:
 80121f6:	b538      	push	{r3, r4, r5, lr}
 80121f8:	e9d0 340d 	ldrd	r3, r4, [r0, #52]	; 0x34
 80121fc:	4605      	mov	r5, r0
 80121fe:	428c      	cmp	r4, r1
 8012200:	bfa8      	it	ge
 8012202:	460c      	movge	r4, r1
 8012204:	429c      	cmp	r4, r3
 8012206:	bfac      	ite	ge
 8012208:	ebc3 0404 	rsbge	r4, r3, r4
 801220c:	ebc3 0403 	rsblt	r4, r3, r3
 8012210:	6803      	ldr	r3, [r0, #0]
 8012212:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8012216:	4798      	blx	r3
 8012218:	682b      	ldr	r3, [r5, #0]
 801221a:	fb00 4404 	mla	r4, r0, r4, r4
 801221e:	4628      	mov	r0, r5
 8012220:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8012224:	4798      	blx	r3
 8012226:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 801222a:	f9b5 30ec 	ldrsh.w	r3, [r5, #236]	; 0xec
 801222e:	2a01      	cmp	r2, #1
 8012230:	fb94 f0f0 	sdiv	r0, r4, r0
 8012234:	bf08      	it	eq
 8012236:	f9b5 20ee 	ldrsheq.w	r2, [r5, #238]	; 0xee
 801223a:	4418      	add	r0, r3
 801223c:	bf04      	itt	eq
 801223e:	1a10      	subeq	r0, r2, r0
 8012240:	18c0      	addeq	r0, r0, r3
 8012242:	b200      	sxth	r0, r0
 8012244:	bd38      	pop	{r3, r4, r5, pc}

08012246 <_ZNK8touchgfx6Slider15positionToValueEs>:
 8012246:	b570      	push	{r4, r5, r6, lr}
 8012248:	f9b0 30ec 	ldrsh.w	r3, [r0, #236]	; 0xec
 801224c:	4605      	mov	r5, r0
 801224e:	460c      	mov	r4, r1
 8012250:	428b      	cmp	r3, r1
 8012252:	d109      	bne.n	8012268 <_ZNK8touchgfx6Slider15positionToValueEs+0x22>
 8012254:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8012256:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801225a:	2b01      	cmp	r3, #1
 801225c:	bf01      	itttt	eq
 801225e:	6bab      	ldreq	r3, [r5, #56]	; 0x38
 8012260:	1a18      	subeq	r0, r3, r0
 8012262:	6b6b      	ldreq	r3, [r5, #52]	; 0x34
 8012264:	18c0      	addeq	r0, r0, r3
 8012266:	bd70      	pop	{r4, r5, r6, pc}
 8012268:	f9b0 30ee 	ldrsh.w	r3, [r0, #238]	; 0xee
 801226c:	428b      	cmp	r3, r1
 801226e:	d101      	bne.n	8012274 <_ZNK8touchgfx6Slider15positionToValueEs+0x2e>
 8012270:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8012272:	e7f0      	b.n	8012256 <_ZNK8touchgfx6Slider15positionToValueEs+0x10>
 8012274:	6803      	ldr	r3, [r0, #0]
 8012276:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801227a:	4798      	blx	r3
 801227c:	682b      	ldr	r3, [r5, #0]
 801227e:	f9b5 10ec 	ldrsh.w	r1, [r5, #236]	; 0xec
 8012282:	4606      	mov	r6, r0
 8012284:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8012288:	4628      	mov	r0, r5
 801228a:	1a64      	subs	r4, r4, r1
 801228c:	4798      	blx	r3
 801228e:	2102      	movs	r1, #2
 8012290:	682b      	ldr	r3, [r5, #0]
 8012292:	fb96 f6f1 	sdiv	r6, r6, r1
 8012296:	fb00 6404 	mla	r4, r0, r4, r6
 801229a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801229e:	4628      	mov	r0, r5
 80122a0:	4798      	blx	r3
 80122a2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80122a4:	fb94 f0f0 	sdiv	r0, r4, r0
 80122a8:	4418      	add	r0, r3
 80122aa:	e7d4      	b.n	8012256 <_ZNK8touchgfx6Slider15positionToValueEs+0x10>

080122ac <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 80122ac:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 80122b0:	2302      	movs	r3, #2
 80122b2:	b92a      	cbnz	r2, 80122c0 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x14>
 80122b4:	f9b0 009c 	ldrsh.w	r0, [r0, #156]	; 0x9c
 80122b8:	fb90 f0f3 	sdiv	r0, r0, r3
 80122bc:	b280      	uxth	r0, r0
 80122be:	4770      	bx	lr
 80122c0:	f9b0 009e 	ldrsh.w	r0, [r0, #158]	; 0x9e
 80122c4:	e7f8      	b.n	80122b8 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

080122c6 <_ZN8touchgfx6Slider13setValueRangeEii>:
 80122c6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80122c8:	428b      	cmp	r3, r1
 80122ca:	b410      	push	{r4}
 80122cc:	db09      	blt.n	80122e2 <_ZN8touchgfx6Slider13setValueRangeEii+0x1c>
 80122ce:	4293      	cmp	r3, r2
 80122d0:	bfa8      	it	ge
 80122d2:	4613      	movge	r3, r2
 80122d4:	6804      	ldr	r4, [r0, #0]
 80122d6:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
 80122da:	46a4      	mov	ip, r4
 80122dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122e0:	4760      	bx	ip
 80122e2:	460b      	mov	r3, r1
 80122e4:	e7f6      	b.n	80122d4 <_ZN8touchgfx6Slider13setValueRangeEii+0xe>

080122e6 <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 80122e6:	f9b0 20ee 	ldrsh.w	r2, [r0, #238]	; 0xee
 80122ea:	f9b0 00ec 	ldrsh.w	r0, [r0, #236]	; 0xec
 80122ee:	1a10      	subs	r0, r2, r0
 80122f0:	4770      	bx	lr

080122f2 <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 80122f2:	e9d0 020d 	ldrd	r0, r2, [r0, #52]	; 0x34
 80122f6:	1a10      	subs	r0, r2, r0
 80122f8:	4770      	bx	lr

080122fa <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 80122fa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80122fe:	f9b0 60ec 	ldrsh.w	r6, [r0, #236]	; 0xec
 8012302:	4604      	mov	r4, r0
 8012304:	3094      	adds	r0, #148	; 0x94
 8012306:	428e      	cmp	r6, r1
 8012308:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801230c:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
 8012310:	bfb8      	it	lt
 8012312:	460e      	movlt	r6, r1
 8012314:	f9b0 105a 	ldrsh.w	r1, [r0, #90]	; 0x5a
 8012318:	428e      	cmp	r6, r1
 801231a:	bfa8      	it	ge
 801231c:	460e      	movge	r6, r1
 801231e:	fa1f f886 	uxth.w	r8, r6
 8012322:	2b00      	cmp	r3, #0
 8012324:	d132      	bne.n	801238c <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x92>
 8012326:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 801232a:	4631      	mov	r1, r6
 801232c:	f7f7 fe96 	bl	800a05c <_ZN8touchgfx8Drawable6moveToEss>
 8012330:	4638      	mov	r0, r7
 8012332:	f003 ffbd 	bl	80162b0 <_ZNK8touchgfx8Drawable10invalidateEv>
 8012336:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
 801233a:	6823      	ldr	r3, [r4, #0]
 801233c:	4620      	mov	r0, r4
 801233e:	eba8 0802 	sub.w	r8, r8, r2
 8012342:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012346:	fa1f f888 	uxth.w	r8, r8
 801234a:	4798      	blx	r3
 801234c:	4480      	add	r8, r0
 801234e:	f8a4 80c8 	strh.w	r8, [r4, #200]	; 0xc8
 8012352:	4638      	mov	r0, r7
 8012354:	f003 ffac 	bl	80162b0 <_ZNK8touchgfx8Drawable10invalidateEv>
 8012358:	6823      	ldr	r3, [r4, #0]
 801235a:	4631      	mov	r1, r6
 801235c:	4620      	mov	r0, r4
 801235e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012362:	4798      	blx	r3
 8012364:	6320      	str	r0, [r4, #48]	; 0x30
 8012366:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 801236a:	2800      	cmp	r0, #0
 801236c:	d03c      	beq.n	80123e8 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xee>
 801236e:	6803      	ldr	r3, [r0, #0]
 8012370:	68db      	ldr	r3, [r3, #12]
 8012372:	4798      	blx	r3
 8012374:	2800      	cmp	r0, #0
 8012376:	d037      	beq.n	80123e8 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xee>
 8012378:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 801237c:	4621      	mov	r1, r4
 801237e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012380:	6803      	ldr	r3, [r0, #0]
 8012382:	689b      	ldr	r3, [r3, #8]
 8012384:	b003      	add	sp, #12
 8012386:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801238a:	4718      	bx	r3
 801238c:	4632      	mov	r2, r6
 801238e:	f9b4 1098 	ldrsh.w	r1, [r4, #152]	; 0x98
 8012392:	f7f7 fe63 	bl	800a05c <_ZN8touchgfx8Drawable6moveToEss>
 8012396:	4638      	mov	r0, r7
 8012398:	f003 ff8a 	bl	80162b0 <_ZNK8touchgfx8Drawable10invalidateEv>
 801239c:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 80123a0:	f8b4 5042 	ldrh.w	r5, [r4, #66]	; 0x42
 80123a4:	6823      	ldr	r3, [r4, #0]
 80123a6:	4405      	add	r5, r0
 80123a8:	4620      	mov	r0, r4
 80123aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80123ae:	b2ad      	uxth	r5, r5
 80123b0:	4798      	blx	r3
 80123b2:	6823      	ldr	r3, [r4, #0]
 80123b4:	eba5 0508 	sub.w	r5, r5, r8
 80123b8:	f9b4 90c4 	ldrsh.w	r9, [r4, #196]	; 0xc4
 80123bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80123c0:	1a2d      	subs	r5, r5, r0
 80123c2:	4620      	mov	r0, r4
 80123c4:	4798      	blx	r3
 80123c6:	4440      	add	r0, r8
 80123c8:	b2ad      	uxth	r5, r5
 80123ca:	f9b4 30c8 	ldrsh.w	r3, [r4, #200]	; 0xc8
 80123ce:	4649      	mov	r1, r9
 80123d0:	b22a      	sxth	r2, r5
 80123d2:	9200      	str	r2, [sp, #0]
 80123d4:	b202      	sxth	r2, r0
 80123d6:	4638      	mov	r0, r7
 80123d8:	f7f7 fd40 	bl	8009e5c <_ZN8touchgfx8Drawable11setPositionEssss>
 80123dc:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
 80123e0:	1a2d      	subs	r5, r5, r0
 80123e2:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
 80123e6:	e7b4      	b.n	8012352 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x58>
 80123e8:	b003      	add	sp, #12
 80123ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080123ee <_ZN8touchgfx6SliderD0Ev>:
 80123ee:	b510      	push	{r4, lr}
 80123f0:	4604      	mov	r4, r0
 80123f2:	21fc      	movs	r1, #252	; 0xfc
 80123f4:	f00f fa2b 	bl	802184e <_ZdlPvj>
 80123f8:	4620      	mov	r0, r4
 80123fa:	bd10      	pop	{r4, pc}

080123fc <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>:
 80123fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012400:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8012404:	4604      	mov	r4, r0
 8012406:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 801240a:	4689      	mov	r9, r1
 801240c:	4616      	mov	r6, r2
 801240e:	461d      	mov	r5, r3
 8012410:	45b8      	cmp	r8, r7
 8012412:	d305      	bcc.n	8012420 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x24>
 8012414:	4b28      	ldr	r3, [pc, #160]	; (80124b8 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xbc>)
 8012416:	2147      	movs	r1, #71	; 0x47
 8012418:	4a28      	ldr	r2, [pc, #160]	; (80124bc <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xc0>)
 801241a:	4829      	ldr	r0, [pc, #164]	; (80124c0 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xc4>)
 801241c:	f00f ff90 	bl	8022340 <__assert_func>
 8012420:	f04f 0a00 	mov.w	sl, #0
 8012424:	b213      	sxth	r3, r2
 8012426:	fa0f fb81 	sxth.w	fp, r1
 801242a:	303c      	adds	r0, #60	; 0x3c
 801242c:	f800 ac10 	strb.w	sl, [r0, #-16]
 8012430:	461a      	mov	r2, r3
 8012432:	4659      	mov	r1, fp
 8012434:	9301      	str	r3, [sp, #4]
 8012436:	f7f7 fd76 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
 801243a:	9b01      	ldr	r3, [sp, #4]
 801243c:	4659      	mov	r1, fp
 801243e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8012442:	461a      	mov	r2, r3
 8012444:	f7f7 fd6f 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
 8012448:	4652      	mov	r2, sl
 801244a:	4651      	mov	r1, sl
 801244c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012450:	f7f7 fd69 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
 8012454:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 8012458:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 801245c:	4620      	mov	r0, r4
 801245e:	4449      	add	r1, r9
 8012460:	f8a4 80ec 	strh.w	r8, [r4, #236]	; 0xec
 8012464:	f8a4 70ee 	strh.w	r7, [r4, #238]	; 0xee
 8012468:	b28b      	uxth	r3, r1
 801246a:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 801246e:	4439      	add	r1, r7
 8012470:	b289      	uxth	r1, r1
 8012472:	428b      	cmp	r3, r1
 8012474:	bf88      	it	hi
 8012476:	b219      	sxthhi	r1, r3
 8012478:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 801247c:	bf98      	it	ls
 801247e:	b209      	sxthls	r1, r1
 8012480:	441e      	add	r6, r3
 8012482:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
 8012486:	441d      	add	r5, r3
 8012488:	b2b6      	uxth	r6, r6
 801248a:	6823      	ldr	r3, [r4, #0]
 801248c:	b2ad      	uxth	r5, r5
 801248e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012490:	42ae      	cmp	r6, r5
 8012492:	bf8c      	ite	hi
 8012494:	b235      	sxthhi	r5, r6
 8012496:	b22d      	sxthls	r5, r5
 8012498:	4798      	blx	r3
 801249a:	6823      	ldr	r3, [r4, #0]
 801249c:	4629      	mov	r1, r5
 801249e:	4620      	mov	r0, r4
 80124a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124a2:	4798      	blx	r3
 80124a4:	6823      	ldr	r3, [r4, #0]
 80124a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80124a8:	4620      	mov	r0, r4
 80124aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80124ae:	b003      	add	sp, #12
 80124b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124b4:	4718      	bx	r3
 80124b6:	bf00      	nop
 80124b8:	080256a8 	.word	0x080256a8
 80124bc:	08025922 	.word	0x08025922
 80124c0:	0802571c 	.word	0x0802571c

080124c4 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>:
 80124c4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124c8:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 80124cc:	4604      	mov	r4, r0
 80124ce:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 80124d2:	4689      	mov	r9, r1
 80124d4:	4690      	mov	r8, r2
 80124d6:	461d      	mov	r5, r3
 80124d8:	42b7      	cmp	r7, r6
 80124da:	d305      	bcc.n	80124e8 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x24>
 80124dc:	4b25      	ldr	r3, [pc, #148]	; (8012574 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb0>)
 80124de:	2163      	movs	r1, #99	; 0x63
 80124e0:	4a25      	ldr	r2, [pc, #148]	; (8012578 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb4>)
 80124e2:	4826      	ldr	r0, [pc, #152]	; (801257c <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xb8>)
 80124e4:	f00f ff2c 	bl	8022340 <__assert_func>
 80124e8:	2301      	movs	r3, #1
 80124ea:	fa0f fa81 	sxth.w	sl, r1
 80124ee:	fa0f fb82 	sxth.w	fp, r2
 80124f2:	303c      	adds	r0, #60	; 0x3c
 80124f4:	f800 3c10 	strb.w	r3, [r0, #-16]
 80124f8:	4651      	mov	r1, sl
 80124fa:	465a      	mov	r2, fp
 80124fc:	f7f7 fd13 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
 8012500:	465a      	mov	r2, fp
 8012502:	4651      	mov	r1, sl
 8012504:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8012508:	f7f7 fd0d 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
 801250c:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 8012510:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 8012514:	4620      	mov	r0, r4
 8012516:	4489      	add	r9, r1
 8012518:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 801251c:	6823      	ldr	r3, [r4, #0]
 801251e:	4429      	add	r1, r5
 8012520:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
 8012524:	fa1f f989 	uxth.w	r9, r9
 8012528:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
 801252c:	44a8      	add	r8, r5
 801252e:	f8b4 509e 	ldrh.w	r5, [r4, #158]	; 0x9e
 8012532:	b289      	uxth	r1, r1
 8012534:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
 8012538:	4435      	add	r5, r6
 801253a:	fa1f f888 	uxth.w	r8, r8
 801253e:	4589      	cmp	r9, r1
 8012540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012542:	b2ad      	uxth	r5, r5
 8012544:	bf8c      	ite	hi
 8012546:	fa0f f189 	sxthhi.w	r1, r9
 801254a:	b209      	sxthls	r1, r1
 801254c:	45a8      	cmp	r8, r5
 801254e:	bf8c      	ite	hi
 8012550:	fa0f f588 	sxthhi.w	r5, r8
 8012554:	b22d      	sxthls	r5, r5
 8012556:	4798      	blx	r3
 8012558:	6823      	ldr	r3, [r4, #0]
 801255a:	4629      	mov	r1, r5
 801255c:	4620      	mov	r0, r4
 801255e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012560:	4798      	blx	r3
 8012562:	6823      	ldr	r3, [r4, #0]
 8012564:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012566:	4620      	mov	r0, r4
 8012568:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801256c:	b001      	add	sp, #4
 801256e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012572:	4718      	bx	r3
 8012574:	08025636 	.word	0x08025636
 8012578:	080258bd 	.word	0x080258bd
 801257c:	0802571c 	.word	0x0802571c

08012580 <_ZN8touchgfx6Slider13setValueRangeEiii>:
 8012580:	4291      	cmp	r1, r2
 8012582:	b510      	push	{r4, lr}
 8012584:	db06      	blt.n	8012594 <_ZN8touchgfx6Slider13setValueRangeEiii+0x14>
 8012586:	4b08      	ldr	r3, [pc, #32]	; (80125a8 <_ZN8touchgfx6Slider13setValueRangeEiii+0x28>)
 8012588:	f240 110b 	movw	r1, #267	; 0x10b
 801258c:	4a07      	ldr	r2, [pc, #28]	; (80125ac <_ZN8touchgfx6Slider13setValueRangeEiii+0x2c>)
 801258e:	4808      	ldr	r0, [pc, #32]	; (80125b0 <_ZN8touchgfx6Slider13setValueRangeEiii+0x30>)
 8012590:	f00f fed6 	bl	8022340 <__assert_func>
 8012594:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 8012598:	6802      	ldr	r2, [r0, #0]
 801259a:	4619      	mov	r1, r3
 801259c:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 80125a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125a4:	4710      	bx	r2
 80125a6:	bf00      	nop
 80125a8:	080255de 	.word	0x080255de
 80125ac:	08025881 	.word	0x08025881
 80125b0:	0802571c 	.word	0x0802571c

080125b4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 80125b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125b8:	790b      	ldrb	r3, [r1, #4]
 80125ba:	4604      	mov	r4, r0
 80125bc:	460d      	mov	r5, r1
 80125be:	b323      	cbz	r3, 801260a <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x56>
 80125c0:	2b01      	cmp	r3, #1
 80125c2:	d135      	bne.n	8012630 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 80125c4:	6823      	ldr	r3, [r4, #0]
 80125c6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80125ca:	f8d3 70a8 	ldr.w	r7, [r3, #168]	; 0xa8
 80125ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80125d2:	2a00      	cmp	r2, #0
 80125d4:	d12a      	bne.n	801262c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x78>
 80125d6:	88ee      	ldrh	r6, [r5, #6]
 80125d8:	4620      	mov	r0, r4
 80125da:	4798      	blx	r3
 80125dc:	1a31      	subs	r1, r6, r0
 80125de:	4620      	mov	r0, r4
 80125e0:	b209      	sxth	r1, r1
 80125e2:	47b8      	blx	r7
 80125e4:	792b      	ldrb	r3, [r5, #4]
 80125e6:	2b01      	cmp	r3, #1
 80125e8:	d122      	bne.n	8012630 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 80125ea:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 80125ee:	b1f8      	cbz	r0, 8012630 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 80125f0:	6803      	ldr	r3, [r0, #0]
 80125f2:	68db      	ldr	r3, [r3, #12]
 80125f4:	4798      	blx	r3
 80125f6:	b1d8      	cbz	r0, 8012630 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 80125f8:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 80125fc:	4621      	mov	r1, r4
 80125fe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012600:	6803      	ldr	r3, [r0, #0]
 8012602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012606:	689b      	ldr	r3, [r3, #8]
 8012608:	4718      	bx	r3
 801260a:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 801260e:	2800      	cmp	r0, #0
 8012610:	d0d8      	beq.n	80125c4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8012612:	6803      	ldr	r3, [r0, #0]
 8012614:	68db      	ldr	r3, [r3, #12]
 8012616:	4798      	blx	r3
 8012618:	2800      	cmp	r0, #0
 801261a:	d0d3      	beq.n	80125c4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801261c:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 8012620:	4621      	mov	r1, r4
 8012622:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012624:	6803      	ldr	r3, [r0, #0]
 8012626:	689b      	ldr	r3, [r3, #8]
 8012628:	4798      	blx	r3
 801262a:	e7cb      	b.n	80125c4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801262c:	892e      	ldrh	r6, [r5, #8]
 801262e:	e7d3      	b.n	80125d8 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x24>
 8012630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012634 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 8012634:	b570      	push	{r4, r5, r6, lr}
 8012636:	6803      	ldr	r3, [r0, #0]
 8012638:	4604      	mov	r4, r0
 801263a:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 801263e:	f8d3 60a8 	ldr.w	r6, [r3, #168]	; 0xa8
 8012642:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012646:	b942      	cbnz	r2, 801265a <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x26>
 8012648:	894d      	ldrh	r5, [r1, #10]
 801264a:	4798      	blx	r3
 801264c:	1a29      	subs	r1, r5, r0
 801264e:	4633      	mov	r3, r6
 8012650:	4620      	mov	r0, r4
 8012652:	b209      	sxth	r1, r1
 8012654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012658:	4718      	bx	r3
 801265a:	898d      	ldrh	r5, [r1, #12]
 801265c:	e7f5      	b.n	801264a <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x16>
	...

08012660 <_ZN8touchgfx9ContainerC1Ev>:
 8012660:	2101      	movs	r1, #1
 8012662:	2200      	movs	r2, #0
 8012664:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8012668:	4908      	ldr	r1, [pc, #32]	; (801268c <_ZN8touchgfx9ContainerC1Ev+0x2c>)
 801266a:	8082      	strh	r2, [r0, #4]
 801266c:	80c2      	strh	r2, [r0, #6]
 801266e:	8102      	strh	r2, [r0, #8]
 8012670:	8142      	strh	r2, [r0, #10]
 8012672:	8182      	strh	r2, [r0, #12]
 8012674:	81c2      	strh	r2, [r0, #14]
 8012676:	8202      	strh	r2, [r0, #16]
 8012678:	8242      	strh	r2, [r0, #18]
 801267a:	61c2      	str	r2, [r0, #28]
 801267c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8012680:	6001      	str	r1, [r0, #0]
 8012682:	6282      	str	r2, [r0, #40]	; 0x28
 8012684:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8012688:	4770      	bx	lr
 801268a:	bf00      	nop
 801268c:	08025440 	.word	0x08025440

08012690 <_ZN8touchgfx6SliderC1Ev>:
 8012690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012694:	4604      	mov	r4, r0
 8012696:	2500      	movs	r5, #0
 8012698:	f7ff ffe2 	bl	8012660 <_ZN8touchgfx9ContainerC1Ev>
 801269c:	ae02      	add	r6, sp, #8
 801269e:	4b25      	ldr	r3, [pc, #148]	; (8012734 <_ZN8touchgfx6SliderC1Ev+0xa4>)
 80126a0:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80126a4:	f04f 0b01 	mov.w	fp, #1
 80126a8:	f104 093c 	add.w	r9, r4, #60	; 0x3c
 80126ac:	f104 0a68 	add.w	sl, r4, #104	; 0x68
 80126b0:	6023      	str	r3, [r4, #0]
 80126b2:	f826 7d04 	strh.w	r7, [r6, #-4]!
 80126b6:	4648      	mov	r0, r9
 80126b8:	4631      	mov	r1, r6
 80126ba:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 80126be:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
 80126c2:	f104 0894 	add.w	r8, r4, #148	; 0x94
 80126c6:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 80126ca:	f7f7 fe1f 	bl	800a30c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80126ce:	4631      	mov	r1, r6
 80126d0:	4650      	mov	r0, sl
 80126d2:	f8ad 7004 	strh.w	r7, [sp, #4]
 80126d6:	f7f7 fe19 	bl	800a30c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80126da:	4631      	mov	r1, r6
 80126dc:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
 80126e0:	4640      	mov	r0, r8
 80126e2:	f8ad 7004 	strh.w	r7, [sp, #4]
 80126e6:	f7f7 fe11 	bl	800a30c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80126ea:	4630      	mov	r0, r6
 80126ec:	f7ff ffb8 	bl	8012660 <_ZN8touchgfx9ContainerC1Ev>
 80126f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80126f4:	4651      	mov	r1, sl
 80126f6:	4630      	mov	r0, r6
 80126f8:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
 80126fc:	e9c4 353b 	strd	r3, r5, [r4, #236]	; 0xec
 8012700:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
 8012704:	f7ff fc36 	bl	8011f74 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012708:	4649      	mov	r1, r9
 801270a:	4620      	mov	r0, r4
 801270c:	f7ff fc32 	bl	8011f74 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012710:	4631      	mov	r1, r6
 8012712:	4620      	mov	r0, r4
 8012714:	f7ff fc2e 	bl	8011f74 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012718:	4641      	mov	r1, r8
 801271a:	4620      	mov	r0, r4
 801271c:	f7ff fc2a 	bl	8011f74 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012720:	4620      	mov	r0, r4
 8012722:	2264      	movs	r2, #100	; 0x64
 8012724:	4629      	mov	r1, r5
 8012726:	f7ff fdce 	bl	80122c6 <_ZN8touchgfx6Slider13setValueRangeEii>
 801272a:	4620      	mov	r0, r4
 801272c:	b003      	add	sp, #12
 801272e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012732:	bf00      	nop
 8012734:	08025754 	.word	0x08025754

08012738 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 8012738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801273c:	4615      	mov	r5, r2
 801273e:	4604      	mov	r4, r0
 8012740:	4608      	mov	r0, r1
 8012742:	460e      	mov	r6, r1
 8012744:	461f      	mov	r7, r3
 8012746:	f005 fb5b 	bl	8017e00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801274a:	4680      	mov	r8, r0
 801274c:	4628      	mov	r0, r5
 801274e:	f005 fb57 	bl	8017e00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012752:	4580      	cmp	r8, r0
 8012754:	d005      	beq.n	8012762 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x2a>
 8012756:	4b14      	ldr	r3, [pc, #80]	; (80127a8 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x70>)
 8012758:	2137      	movs	r1, #55	; 0x37
 801275a:	4a14      	ldr	r2, [pc, #80]	; (80127ac <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x74>)
 801275c:	4814      	ldr	r0, [pc, #80]	; (80127b0 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x78>)
 801275e:	f00f fdef 	bl	8022340 <__assert_func>
 8012762:	4630      	mov	r0, r6
 8012764:	f005 fb86 	bl	8017e74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012768:	4680      	mov	r8, r0
 801276a:	4628      	mov	r0, r5
 801276c:	f005 fb82 	bl	8017e74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012770:	4580      	cmp	r8, r0
 8012772:	d1f0      	bne.n	8012756 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x1e>
 8012774:	4631      	mov	r1, r6
 8012776:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801277a:	f002 f82f 	bl	80147dc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801277e:	4629      	mov	r1, r5
 8012780:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012784:	f002 f82a 	bl	80147dc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8012788:	4639      	mov	r1, r7
 801278a:	f104 0094 	add.w	r0, r4, #148	; 0x94
 801278e:	f002 f825 	bl	80147dc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8012792:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 8012796:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
 801279a:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 801279e:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
 80127a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127a6:	bf00      	nop
 80127a8:	080254ff 	.word	0x080254ff
 80127ac:	08025814 	.word	0x08025814
 80127b0:	0802571c 	.word	0x0802571c

080127b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80127b4:	6803      	ldr	r3, [r0, #0]
 80127b6:	b513      	push	{r0, r1, r4, lr}
 80127b8:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 80127bc:	2300      	movs	r3, #0
 80127be:	e9cd 3300 	strd	r3, r3, [sp]
 80127c2:	466b      	mov	r3, sp
 80127c4:	47a0      	blx	r4
 80127c6:	b002      	add	sp, #8
 80127c8:	bd10      	pop	{r4, pc}

080127ca <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80127ca:	2301      	movs	r3, #1
 80127cc:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80127d0:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80127d4:	4770      	bx	lr

080127d6 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80127d6:	2301      	movs	r3, #1
 80127d8:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80127dc:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80127e0:	4770      	bx	lr

080127e2 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80127e2:	6843      	ldr	r3, [r0, #4]
 80127e4:	2201      	movs	r2, #1
 80127e6:	725a      	strb	r2, [r3, #9]
 80127e8:	6840      	ldr	r0, [r0, #4]
 80127ea:	6803      	ldr	r3, [r0, #0]
 80127ec:	691b      	ldr	r3, [r3, #16]
 80127ee:	4718      	bx	r3

080127f0 <_ZN8touchgfx3HAL8flushDMAEv>:
 80127f0:	6840      	ldr	r0, [r0, #4]
 80127f2:	6803      	ldr	r3, [r0, #0]
 80127f4:	689b      	ldr	r3, [r3, #8]
 80127f6:	4718      	bx	r3

080127f8 <_ZN8touchgfx3HAL10beginFrameEv>:
 80127f8:	4b04      	ldr	r3, [pc, #16]	; (801280c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80127fa:	781b      	ldrb	r3, [r3, #0]
 80127fc:	b123      	cbz	r3, 8012808 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80127fe:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8012802:	f080 0001 	eor.w	r0, r0, #1
 8012806:	4770      	bx	lr
 8012808:	2001      	movs	r0, #1
 801280a:	4770      	bx	lr
 801280c:	2000b25e 	.word	0x2000b25e

08012810 <_ZN8touchgfx3HAL8endFrameEv>:
 8012810:	b510      	push	{r4, lr}
 8012812:	4604      	mov	r4, r0
 8012814:	6840      	ldr	r0, [r0, #4]
 8012816:	6803      	ldr	r3, [r0, #0]
 8012818:	689b      	ldr	r3, [r3, #8]
 801281a:	4798      	blx	r3
 801281c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8012820:	b113      	cbz	r3, 8012828 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8012822:	2301      	movs	r3, #1
 8012824:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8012828:	bd10      	pop	{r4, pc}

0801282a <_ZN8touchgfx3HAL9taskEntryEv>:
 801282a:	b508      	push	{r3, lr}
 801282c:	6803      	ldr	r3, [r0, #0]
 801282e:	4604      	mov	r4, r0
 8012830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012832:	4798      	blx	r3
 8012834:	6823      	ldr	r3, [r4, #0]
 8012836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012838:	4620      	mov	r0, r4
 801283a:	4798      	blx	r3
 801283c:	f7fd ffd6 	bl	80107ec <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8012840:	6823      	ldr	r3, [r4, #0]
 8012842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012844:	e7f8      	b.n	8012838 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08012848 <_ZN8touchgfx3HAL4tickEv>:
 8012848:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801284a:	6803      	ldr	r3, [r0, #0]
 801284c:	4604      	mov	r4, r0
 801284e:	4d5c      	ldr	r5, [pc, #368]	; (80129c0 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8012850:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012854:	4798      	blx	r3
 8012856:	2800      	cmp	r0, #0
 8012858:	f000 8097 	beq.w	801298a <_ZN8touchgfx3HAL4tickEv+0x142>
 801285c:	2001      	movs	r0, #1
 801285e:	2600      	movs	r6, #0
 8012860:	f7fd fc9c 	bl	801019c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8012864:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8012868:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801286c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8012870:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8012874:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8012878:	b133      	cbz	r3, 8012888 <_ZN8touchgfx3HAL4tickEv+0x40>
 801287a:	6823      	ldr	r3, [r4, #0]
 801287c:	4620      	mov	r0, r4
 801287e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8012882:	4798      	blx	r3
 8012884:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8012888:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801288c:	2601      	movs	r6, #1
 801288e:	6862      	ldr	r2, [r4, #4]
 8012890:	f083 0301 	eor.w	r3, r3, #1
 8012894:	702e      	strb	r6, [r5, #0]
 8012896:	7253      	strb	r3, [r2, #9]
 8012898:	f003 f894 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 801289c:	6803      	ldr	r3, [r0, #0]
 801289e:	4631      	mov	r1, r6
 80128a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128a2:	4798      	blx	r3
 80128a4:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80128a8:	b90b      	cbnz	r3, 80128ae <_ZN8touchgfx3HAL4tickEv+0x66>
 80128aa:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80128ae:	f003 f889 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 80128b2:	6803      	ldr	r3, [r0, #0]
 80128b4:	695b      	ldr	r3, [r3, #20]
 80128b6:	4798      	blx	r3
 80128b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128ba:	6803      	ldr	r3, [r0, #0]
 80128bc:	691b      	ldr	r3, [r3, #16]
 80128be:	4798      	blx	r3
 80128c0:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80128c4:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80128c8:	3b01      	subs	r3, #1
 80128ca:	b2db      	uxtb	r3, r3
 80128cc:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80128d0:	b10a      	cbz	r2, 80128d6 <_ZN8touchgfx3HAL4tickEv+0x8e>
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d1eb      	bne.n	80128ae <_ZN8touchgfx3HAL4tickEv+0x66>
 80128d6:	4a3b      	ldr	r2, [pc, #236]	; (80129c4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80128d8:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80128dc:	7813      	ldrb	r3, [r2, #0]
 80128de:	3301      	adds	r3, #1
 80128e0:	b25b      	sxtb	r3, r3
 80128e2:	4299      	cmp	r1, r3
 80128e4:	7013      	strb	r3, [r2, #0]
 80128e6:	dc10      	bgt.n	801290a <_ZN8touchgfx3HAL4tickEv+0xc2>
 80128e8:	2300      	movs	r3, #0
 80128ea:	68e0      	ldr	r0, [r4, #12]
 80128ec:	a902      	add	r1, sp, #8
 80128ee:	7013      	strb	r3, [r2, #0]
 80128f0:	aa03      	add	r2, sp, #12
 80128f2:	6803      	ldr	r3, [r0, #0]
 80128f4:	68db      	ldr	r3, [r3, #12]
 80128f6:	4798      	blx	r3
 80128f8:	6823      	ldr	r3, [r4, #0]
 80128fa:	2800      	cmp	r0, #0
 80128fc:	d051      	beq.n	80129a2 <_ZN8touchgfx3HAL4tickEv+0x15a>
 80128fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012902:	4620      	mov	r0, r4
 8012904:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8012908:	4798      	blx	r3
 801290a:	2300      	movs	r3, #0
 801290c:	6960      	ldr	r0, [r4, #20]
 801290e:	f88d 3007 	strb.w	r3, [sp, #7]
 8012912:	b158      	cbz	r0, 801292c <_ZN8touchgfx3HAL4tickEv+0xe4>
 8012914:	6803      	ldr	r3, [r0, #0]
 8012916:	f10d 0107 	add.w	r1, sp, #7
 801291a:	68db      	ldr	r3, [r3, #12]
 801291c:	4798      	blx	r3
 801291e:	b128      	cbz	r0, 801292c <_ZN8touchgfx3HAL4tickEv+0xe4>
 8012920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012922:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012926:	6803      	ldr	r3, [r0, #0]
 8012928:	68db      	ldr	r3, [r3, #12]
 801292a:	4798      	blx	r3
 801292c:	f104 001c 	add.w	r0, r4, #28
 8012930:	f00d faec 	bl	801ff0c <_ZN8touchgfx8Gestures4tickEv>
 8012934:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8012938:	b30b      	cbz	r3, 801297e <_ZN8touchgfx3HAL4tickEv+0x136>
 801293a:	6920      	ldr	r0, [r4, #16]
 801293c:	6803      	ldr	r3, [r0, #0]
 801293e:	691b      	ldr	r3, [r3, #16]
 8012940:	4798      	blx	r3
 8012942:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012944:	4606      	mov	r6, r0
 8012946:	b903      	cbnz	r3, 801294a <_ZN8touchgfx3HAL4tickEv+0x102>
 8012948:	6720      	str	r0, [r4, #112]	; 0x70
 801294a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801294c:	4a1e      	ldr	r2, [pc, #120]	; (80129c8 <_ZN8touchgfx3HAL4tickEv+0x180>)
 801294e:	1af3      	subs	r3, r6, r3
 8012950:	4293      	cmp	r3, r2
 8012952:	d914      	bls.n	801297e <_ZN8touchgfx3HAL4tickEv+0x136>
 8012954:	6920      	ldr	r0, [r4, #16]
 8012956:	6803      	ldr	r3, [r0, #0]
 8012958:	699b      	ldr	r3, [r3, #24]
 801295a:	4798      	blx	r3
 801295c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801295e:	2264      	movs	r2, #100	; 0x64
 8012960:	1af3      	subs	r3, r6, r3
 8012962:	fbb3 f3f2 	udiv	r3, r3, r2
 8012966:	fbb0 f0f3 	udiv	r0, r0, r3
 801296a:	2800      	cmp	r0, #0
 801296c:	dc1e      	bgt.n	80129ac <_ZN8touchgfx3HAL4tickEv+0x164>
 801296e:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8012972:	6920      	ldr	r0, [r4, #16]
 8012974:	2100      	movs	r1, #0
 8012976:	6803      	ldr	r3, [r0, #0]
 8012978:	69db      	ldr	r3, [r3, #28]
 801297a:	4798      	blx	r3
 801297c:	6726      	str	r6, [r4, #112]	; 0x70
 801297e:	f003 f821 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 8012982:	6803      	ldr	r3, [r0, #0]
 8012984:	2100      	movs	r1, #0
 8012986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012988:	4798      	blx	r3
 801298a:	6823      	ldr	r3, [r4, #0]
 801298c:	4620      	mov	r0, r4
 801298e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012992:	4798      	blx	r3
 8012994:	2001      	movs	r0, #1
 8012996:	f7fd fc0c 	bl	80101b2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801299a:	2300      	movs	r3, #0
 801299c:	702b      	strb	r3, [r5, #0]
 801299e:	b004      	add	sp, #16
 80129a0:	bd70      	pop	{r4, r5, r6, pc}
 80129a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80129a6:	4620      	mov	r0, r4
 80129a8:	4798      	blx	r3
 80129aa:	e7ae      	b.n	801290a <_ZN8touchgfx3HAL4tickEv+0xc2>
 80129ac:	2863      	cmp	r0, #99	; 0x63
 80129ae:	bfcb      	itete	gt
 80129b0:	2300      	movgt	r3, #0
 80129b2:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80129b6:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80129ba:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80129be:	e7d8      	b.n	8012972 <_ZN8touchgfx3HAL4tickEv+0x12a>
 80129c0:	2000b264 	.word	0x2000b264
 80129c4:	2000b265 	.word	0x2000b265
 80129c8:	05f5e100 	.word	0x05f5e100

080129cc <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80129cc:	f7fd beae 	b.w	801072c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080129d0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80129d0:	6581      	str	r1, [r0, #88]	; 0x58
 80129d2:	301c      	adds	r0, #28
 80129d4:	f00d ba98 	b.w	801ff08 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080129d8 <_ZN8touchgfx3HAL5touchEll>:
 80129d8:	b530      	push	{r4, r5, lr}
 80129da:	b087      	sub	sp, #28
 80129dc:	4604      	mov	r4, r0
 80129de:	a804      	add	r0, sp, #16
 80129e0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80129e4:	f002 fdac 	bl	8015540 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80129e8:	9b04      	ldr	r3, [sp, #16]
 80129ea:	a906      	add	r1, sp, #24
 80129ec:	a803      	add	r0, sp, #12
 80129ee:	f8ad 300c 	strh.w	r3, [sp, #12]
 80129f2:	9b05      	ldr	r3, [sp, #20]
 80129f4:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80129f8:	f002 fdf0 	bl	80155dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80129fc:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8012a00:	f104 001c 	add.w	r0, r4, #28
 8012a04:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8012a08:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8012a0c:	b189      	cbz	r1, 8012a32 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8012a0e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8012a12:	9300      	str	r3, [sp, #0]
 8012a14:	4613      	mov	r3, r2
 8012a16:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8012a1a:	462a      	mov	r2, r5
 8012a1c:	f00d fa84 	bl	801ff28 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8012a20:	b128      	cbz	r0, 8012a2e <_ZN8touchgfx3HAL5touchEll+0x56>
 8012a22:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8012a26:	65e3      	str	r3, [r4, #92]	; 0x5c
 8012a28:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8012a2c:	6623      	str	r3, [r4, #96]	; 0x60
 8012a2e:	b007      	add	sp, #28
 8012a30:	bd30      	pop	{r4, r5, pc}
 8012a32:	f00d fabd 	bl	801ffb0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8012a36:	2301      	movs	r3, #1
 8012a38:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8012a3c:	e7f1      	b.n	8012a22 <_ZN8touchgfx3HAL5touchEll+0x4a>

08012a3e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8012a3e:	b570      	push	{r4, r5, r6, lr}
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d050      	beq.n	8012ae6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8012a44:	ea81 0002 	eor.w	r0, r1, r2
 8012a48:	07c6      	lsls	r6, r0, #31
 8012a4a:	d508      	bpl.n	8012a5e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8012a4c:	3a01      	subs	r2, #1
 8012a4e:	18cc      	adds	r4, r1, r3
 8012a50:	42a1      	cmp	r1, r4
 8012a52:	d048      	beq.n	8012ae6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8012a54:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8012a58:	f801 0b01 	strb.w	r0, [r1], #1
 8012a5c:	e7f8      	b.n	8012a50 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8012a5e:	07d5      	lsls	r5, r2, #31
 8012a60:	bf42      	ittt	mi
 8012a62:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8012a66:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 8012a6a:	f801 0b01 	strbmi.w	r0, [r1], #1
 8012a6e:	2b01      	cmp	r3, #1
 8012a70:	d915      	bls.n	8012a9e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8012a72:	ea82 0001 	eor.w	r0, r2, r1
 8012a76:	0784      	lsls	r4, r0, #30
 8012a78:	d02d      	beq.n	8012ad6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 8012a7a:	1e94      	subs	r4, r2, #2
 8012a7c:	4608      	mov	r0, r1
 8012a7e:	18ce      	adds	r6, r1, r3
 8012a80:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8012a84:	f820 5b02 	strh.w	r5, [r0], #2
 8012a88:	1a35      	subs	r5, r6, r0
 8012a8a:	2d01      	cmp	r5, #1
 8012a8c:	d8f8      	bhi.n	8012a80 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 8012a8e:	1e98      	subs	r0, r3, #2
 8012a90:	f003 0301 	and.w	r3, r3, #1
 8012a94:	f020 0001 	bic.w	r0, r0, #1
 8012a98:	3002      	adds	r0, #2
 8012a9a:	4401      	add	r1, r0
 8012a9c:	4402      	add	r2, r0
 8012a9e:	1f14      	subs	r4, r2, #4
 8012aa0:	4608      	mov	r0, r1
 8012aa2:	18ce      	adds	r6, r1, r3
 8012aa4:	1a35      	subs	r5, r6, r0
 8012aa6:	2d03      	cmp	r5, #3
 8012aa8:	d810      	bhi.n	8012acc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 8012aaa:	089c      	lsrs	r4, r3, #2
 8012aac:	00a0      	lsls	r0, r4, #2
 8012aae:	4401      	add	r1, r0
 8012ab0:	3801      	subs	r0, #1
 8012ab2:	4402      	add	r2, r0
 8012ab4:	f06f 0003 	mvn.w	r0, #3
 8012ab8:	fb00 3404 	mla	r4, r0, r4, r3
 8012abc:	440c      	add	r4, r1
 8012abe:	42a1      	cmp	r1, r4
 8012ac0:	d011      	beq.n	8012ae6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8012ac2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8012ac6:	f801 3b01 	strb.w	r3, [r1], #1
 8012aca:	e7f8      	b.n	8012abe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 8012acc:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8012ad0:	f840 5b04 	str.w	r5, [r0], #4
 8012ad4:	e7e6      	b.n	8012aa4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8012ad6:	0790      	lsls	r0, r2, #30
 8012ad8:	d0e1      	beq.n	8012a9e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8012ada:	f832 0b02 	ldrh.w	r0, [r2], #2
 8012ade:	3b02      	subs	r3, #2
 8012ae0:	f821 0b02 	strh.w	r0, [r1], #2
 8012ae4:	e7db      	b.n	8012a9e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8012ae6:	2001      	movs	r0, #1
 8012ae8:	bd70      	pop	{r4, r5, r6, pc}

08012aea <_ZN8touchgfx3HAL7noTouchEv>:
 8012aea:	b510      	push	{r4, lr}
 8012aec:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8012af0:	4604      	mov	r4, r0
 8012af2:	b153      	cbz	r3, 8012b0a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8012af4:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8012af8:	2101      	movs	r1, #1
 8012afa:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8012afe:	301c      	adds	r0, #28
 8012b00:	f00d fa56 	bl	801ffb0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8012b04:	2300      	movs	r3, #0
 8012b06:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8012b0a:	bd10      	pop	{r4, pc}

08012b0c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8012b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b10:	4605      	mov	r5, r0
 8012b12:	6980      	ldr	r0, [r0, #24]
 8012b14:	b085      	sub	sp, #20
 8012b16:	460f      	mov	r7, r1
 8012b18:	4690      	mov	r8, r2
 8012b1a:	4699      	mov	r9, r3
 8012b1c:	b930      	cbnz	r0, 8012b2c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8012b1e:	4b1f      	ldr	r3, [pc, #124]	; (8012b9c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8012b20:	f44f 7198 	mov.w	r1, #304	; 0x130
 8012b24:	4a1e      	ldr	r2, [pc, #120]	; (8012ba0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8012b26:	481f      	ldr	r0, [pc, #124]	; (8012ba4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 8012b28:	f00f fc0a 	bl	8022340 <__assert_func>
 8012b2c:	ac04      	add	r4, sp, #16
 8012b2e:	2600      	movs	r6, #0
 8012b30:	f844 6d04 	str.w	r6, [r4, #-4]!
 8012b34:	6806      	ldr	r6, [r0, #0]
 8012b36:	9401      	str	r4, [sp, #4]
 8012b38:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8012b3c:	9400      	str	r4, [sp, #0]
 8012b3e:	6834      	ldr	r4, [r6, #0]
 8012b40:	47a0      	blx	r4
 8012b42:	4c19      	ldr	r4, [pc, #100]	; (8012ba8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 8012b44:	4606      	mov	r6, r0
 8012b46:	f8a4 9000 	strh.w	r9, [r4]
 8012b4a:	f7f7 fae1 	bl	800a110 <_ZN8touchgfx3HAL3lcdEv>
 8012b4e:	6803      	ldr	r3, [r0, #0]
 8012b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b52:	4798      	blx	r3
 8012b54:	280c      	cmp	r0, #12
 8012b56:	d80f      	bhi.n	8012b78 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8012b58:	e8df f000 	tbb	[pc, r0]
 8012b5c:	1b1b1207 	.word	0x1b1b1207
 8012b60:	1b1b1b1b 	.word	0x1b1b1b1b
 8012b64:	1b1b1b1b 	.word	0x1b1b1b1b
 8012b68:	1b          	.byte	0x1b
 8012b69:	00          	.byte	0x00
 8012b6a:	8823      	ldrh	r3, [r4, #0]
 8012b6c:	fb08 7203 	mla	r2, r8, r3, r7
 8012b70:	9b03      	ldr	r3, [sp, #12]
 8012b72:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8012b76:	63eb      	str	r3, [r5, #60]	; 0x3c
 8012b78:	4630      	mov	r0, r6
 8012b7a:	b005      	add	sp, #20
 8012b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b80:	8822      	ldrh	r2, [r4, #0]
 8012b82:	9b03      	ldr	r3, [sp, #12]
 8012b84:	fb08 7202 	mla	r2, r8, r2, r7
 8012b88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012b8c:	1a9a      	subs	r2, r3, r2
 8012b8e:	63ea      	str	r2, [r5, #60]	; 0x3c
 8012b90:	e7f2      	b.n	8012b78 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8012b92:	4b06      	ldr	r3, [pc, #24]	; (8012bac <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8012b94:	f240 114d 	movw	r1, #333	; 0x14d
 8012b98:	4a01      	ldr	r2, [pc, #4]	; (8012ba0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8012b9a:	e7c4      	b.n	8012b26 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8012b9c:	080259f7 	.word	0x080259f7
 8012ba0:	08025d06 	.word	0x08025d06
 8012ba4:	08025a3c 	.word	0x08025a3c
 8012ba8:	2000b25a 	.word	0x2000b25a
 8012bac:	08025a62 	.word	0x08025a62

08012bb0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8012bb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012bb4:	4698      	mov	r8, r3
 8012bb6:	6803      	ldr	r3, [r0, #0]
 8012bb8:	b087      	sub	sp, #28
 8012bba:	460e      	mov	r6, r1
 8012bbc:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8012bbe:	4617      	mov	r7, r2
 8012bc0:	4b0d      	ldr	r3, [pc, #52]	; (8012bf8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 8012bc2:	4604      	mov	r4, r0
 8012bc4:	f8b3 9000 	ldrh.w	r9, [r3]
 8012bc8:	f7f7 faa2 	bl	800a110 <_ZN8touchgfx3HAL3lcdEv>
 8012bcc:	6803      	ldr	r3, [r0, #0]
 8012bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bd0:	4798      	blx	r3
 8012bd2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8012bd6:	463a      	mov	r2, r7
 8012bd8:	4631      	mov	r1, r6
 8012bda:	9302      	str	r3, [sp, #8]
 8012bdc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8012be0:	9301      	str	r3, [sp, #4]
 8012be2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8012be6:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8012bea:	9300      	str	r3, [sp, #0]
 8012bec:	4620      	mov	r0, r4
 8012bee:	4643      	mov	r3, r8
 8012bf0:	47a8      	blx	r5
 8012bf2:	b007      	add	sp, #28
 8012bf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bf8:	2000b25a 	.word	0x2000b25a

08012bfc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8012bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c00:	4606      	mov	r6, r0
 8012c02:	b089      	sub	sp, #36	; 0x24
 8012c04:	4610      	mov	r0, r2
 8012c06:	460c      	mov	r4, r1
 8012c08:	4691      	mov	r9, r2
 8012c0a:	4698      	mov	r8, r3
 8012c0c:	f005 f838 	bl	8017c80 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8012c10:	2800      	cmp	r0, #0
 8012c12:	f000 8092 	beq.w	8012d3a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 8012c16:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8012d54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8012c1a:	ad08      	add	r5, sp, #32
 8012c1c:	f8df b138 	ldr.w	fp, [pc, #312]	; 8012d58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8012c20:	f8da 0000 	ldr.w	r0, [sl]
 8012c24:	4f4a      	ldr	r7, [pc, #296]	; (8012d50 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8012c26:	6802      	ldr	r2, [r0, #0]
 8012c28:	6a12      	ldr	r2, [r2, #32]
 8012c2a:	4790      	blx	r2
 8012c2c:	f8da 0000 	ldr.w	r0, [sl]
 8012c30:	6802      	ldr	r2, [r0, #0]
 8012c32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012c34:	4790      	blx	r2
 8012c36:	f8bb 3000 	ldrh.w	r3, [fp]
 8012c3a:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 8012c3e:	4628      	mov	r0, r5
 8012c40:	9300      	str	r3, [sp, #0]
 8012c42:	883b      	ldrh	r3, [r7, #0]
 8012c44:	9301      	str	r3, [sp, #4]
 8012c46:	f005 f8db 	bl	8017e00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012c4a:	f8ab 0000 	strh.w	r0, [fp]
 8012c4e:	4628      	mov	r0, r5
 8012c50:	f005 f910 	bl	8017e74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012c54:	f8da b000 	ldr.w	fp, [sl]
 8012c58:	8038      	strh	r0, [r7, #0]
 8012c5a:	4648      	mov	r0, r9
 8012c5c:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 8012c60:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 8012c64:	9302      	str	r3, [sp, #8]
 8012c66:	f005 f80b 	bl	8017c80 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8012c6a:	f8da 2000 	ldr.w	r2, [sl]
 8012c6e:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8012c72:	63d0      	str	r0, [r2, #60]	; 0x3c
 8012c74:	4620      	mov	r0, r4
 8012c76:	6822      	ldr	r2, [r4, #0]
 8012c78:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 8012c7c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8012c7e:	2200      	movs	r2, #0
 8012c80:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8012c84:	4611      	mov	r1, r2
 8012c86:	4798      	blx	r3
 8012c88:	2201      	movs	r2, #1
 8012c8a:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 8012c8e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8012c92:	1d22      	adds	r2, r4, #4
 8012c94:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 8012c98:	2900      	cmp	r1, #0
 8012c9a:	d051      	beq.n	8012d40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8012c9c:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8012ca0:	2900      	cmp	r1, #0
 8012ca2:	d04d      	beq.n	8012d40 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8012ca4:	6810      	ldr	r0, [r2, #0]
 8012ca6:	f10d 0c18 	add.w	ip, sp, #24
 8012caa:	6851      	ldr	r1, [r2, #4]
 8012cac:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8012cb0:	4641      	mov	r1, r8
 8012cb2:	a806      	add	r0, sp, #24
 8012cb4:	f7ff f98e 	bl	8011fd4 <_ZN8touchgfx4RectaNERKS0_>
 8012cb8:	4628      	mov	r0, r5
 8012cba:	f005 fa2d 	bl	8018118 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012cbe:	4680      	mov	r8, r0
 8012cc0:	f7f7 fa26 	bl	800a110 <_ZN8touchgfx3HAL3lcdEv>
 8012cc4:	6802      	ldr	r2, [r0, #0]
 8012cc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012cc8:	4790      	blx	r2
 8012cca:	4580      	cmp	r8, r0
 8012ccc:	d03d      	beq.n	8012d4a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 8012cce:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8012cd0:	b150      	cbz	r0, 8012ce8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8012cd2:	4628      	mov	r0, r5
 8012cd4:	f005 fa20 	bl	8018118 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012cd8:	4605      	mov	r5, r0
 8012cda:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8012cdc:	6803      	ldr	r3, [r0, #0]
 8012cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ce0:	4798      	blx	r3
 8012ce2:	1a2b      	subs	r3, r5, r0
 8012ce4:	4258      	negs	r0, r3
 8012ce6:	4158      	adcs	r0, r3
 8012ce8:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8012cec:	2500      	movs	r5, #0
 8012cee:	6963      	ldr	r3, [r4, #20]
 8012cf0:	4620      	mov	r0, r4
 8012cf2:	6822      	ldr	r2, [r4, #0]
 8012cf4:	a906      	add	r1, sp, #24
 8012cf6:	6165      	str	r5, [r4, #20]
 8012cf8:	9303      	str	r3, [sp, #12]
 8012cfa:	6892      	ldr	r2, [r2, #8]
 8012cfc:	4790      	blx	r2
 8012cfe:	9b03      	ldr	r3, [sp, #12]
 8012d00:	4620      	mov	r0, r4
 8012d02:	4652      	mov	r2, sl
 8012d04:	6163      	str	r3, [r4, #20]
 8012d06:	4649      	mov	r1, r9
 8012d08:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8012d0c:	6823      	ldr	r3, [r4, #0]
 8012d0e:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8012d12:	4c10      	ldr	r4, [pc, #64]	; (8012d54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8012d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d16:	4798      	blx	r3
 8012d18:	6820      	ldr	r0, [r4, #0]
 8012d1a:	9b02      	ldr	r3, [sp, #8]
 8012d1c:	9a00      	ldr	r2, [sp, #0]
 8012d1e:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 8012d22:	4b0d      	ldr	r3, [pc, #52]	; (8012d58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8012d24:	801a      	strh	r2, [r3, #0]
 8012d26:	4b0a      	ldr	r3, [pc, #40]	; (8012d50 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8012d28:	9a01      	ldr	r2, [sp, #4]
 8012d2a:	801a      	strh	r2, [r3, #0]
 8012d2c:	6803      	ldr	r3, [r0, #0]
 8012d2e:	6a1b      	ldr	r3, [r3, #32]
 8012d30:	4798      	blx	r3
 8012d32:	6820      	ldr	r0, [r4, #0]
 8012d34:	6803      	ldr	r3, [r0, #0]
 8012d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d38:	4798      	blx	r3
 8012d3a:	b009      	add	sp, #36	; 0x24
 8012d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d40:	ab06      	add	r3, sp, #24
 8012d42:	6810      	ldr	r0, [r2, #0]
 8012d44:	6851      	ldr	r1, [r2, #4]
 8012d46:	c303      	stmia	r3!, {r0, r1}
 8012d48:	e7b6      	b.n	8012cb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 8012d4a:	2000      	movs	r0, #0
 8012d4c:	e7cc      	b.n	8012ce8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8012d4e:	bf00      	nop
 8012d50:	2000b25c 	.word	0x2000b25c
 8012d54:	2000b260 	.word	0x2000b260
 8012d58:	2000b25a 	.word	0x2000b25a

08012d5c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8012d5c:	4b07      	ldr	r3, [pc, #28]	; (8012d7c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8012d5e:	b510      	push	{r4, lr}
 8012d60:	781b      	ldrb	r3, [r3, #0]
 8012d62:	4604      	mov	r4, r0
 8012d64:	b13b      	cbz	r3, 8012d76 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8012d66:	6803      	ldr	r3, [r0, #0]
 8012d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d6a:	4798      	blx	r3
 8012d6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012d6e:	4283      	cmp	r3, r0
 8012d70:	d101      	bne.n	8012d76 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8012d72:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8012d74:	bd10      	pop	{r4, pc}
 8012d76:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012d78:	e7fc      	b.n	8012d74 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8012d7a:	bf00      	nop
 8012d7c:	2000b25e 	.word	0x2000b25e

08012d80 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8012d80:	4b0b      	ldr	r3, [pc, #44]	; (8012db0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8012d82:	b510      	push	{r4, lr}
 8012d84:	781b      	ldrb	r3, [r3, #0]
 8012d86:	4604      	mov	r4, r0
 8012d88:	b95b      	cbnz	r3, 8012da2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012d8a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8012d8e:	2b02      	cmp	r3, #2
 8012d90:	d007      	beq.n	8012da2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012d92:	6840      	ldr	r0, [r0, #4]
 8012d94:	f000 fbc8 	bl	8013528 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8012d98:	b118      	cbz	r0, 8012da2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012d9a:	6862      	ldr	r2, [r4, #4]
 8012d9c:	7a53      	ldrb	r3, [r2, #9]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d0fc      	beq.n	8012d9c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8012da2:	f7fd fcb5 	bl	8010710 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8012da6:	4620      	mov	r0, r4
 8012da8:	f7ff ffd8 	bl	8012d5c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012dac:	bd10      	pop	{r4, pc}
 8012dae:	bf00      	nop
 8012db0:	2000b25e 	.word	0x2000b25e

08012db4 <_ZN8touchgfx3HAL10initializeEv>:
 8012db4:	b510      	push	{r4, lr}
 8012db6:	4604      	mov	r4, r0
 8012db8:	f7fd fc86 	bl	80106c8 <_ZN8touchgfx10OSWrappers10initializeEv>
 8012dbc:	6860      	ldr	r0, [r4, #4]
 8012dbe:	6803      	ldr	r3, [r0, #0]
 8012dc0:	68db      	ldr	r3, [r3, #12]
 8012dc2:	4798      	blx	r3
 8012dc4:	68e0      	ldr	r0, [r4, #12]
 8012dc6:	6803      	ldr	r3, [r0, #0]
 8012dc8:	689b      	ldr	r3, [r3, #8]
 8012dca:	4798      	blx	r3
 8012dcc:	6823      	ldr	r3, [r4, #0]
 8012dce:	4620      	mov	r0, r4
 8012dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012dd6:	4718      	bx	r3

08012dd8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8012dd8:	b508      	push	{r3, lr}
 8012dda:	290c      	cmp	r1, #12
 8012ddc:	d817      	bhi.n	8012e0e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8012dde:	e8df f001 	tbb	[pc, r1]
 8012de2:	090b      	.short	0x090b
 8012de4:	0d0d0d07 	.word	0x0d0d0d07
 8012de8:	1414140d 	.word	0x1414140d
 8012dec:	1414      	.short	0x1414
 8012dee:	0d          	.byte	0x0d
 8012def:	00          	.byte	0x00
 8012df0:	2020      	movs	r0, #32
 8012df2:	bd08      	pop	{r3, pc}
 8012df4:	2018      	movs	r0, #24
 8012df6:	e7fc      	b.n	8012df2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8012df8:	2010      	movs	r0, #16
 8012dfa:	e7fa      	b.n	8012df2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8012dfc:	4b05      	ldr	r3, [pc, #20]	; (8012e14 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8012dfe:	f44f 710c 	mov.w	r1, #560	; 0x230
 8012e02:	4a05      	ldr	r2, [pc, #20]	; (8012e18 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8012e04:	4805      	ldr	r0, [pc, #20]	; (8012e1c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8012e06:	f00f fa9b 	bl	8022340 <__assert_func>
 8012e0a:	2008      	movs	r0, #8
 8012e0c:	e7f1      	b.n	8012df2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8012e0e:	2000      	movs	r0, #0
 8012e10:	e7ef      	b.n	8012df2 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8012e12:	bf00      	nop
 8012e14:	08025b35 	.word	0x08025b35
 8012e18:	08025ec8 	.word	0x08025ec8
 8012e1c:	08025a3c 	.word	0x08025a3c

08012e20 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8012e20:	b570      	push	{r4, r5, r6, lr}
 8012e22:	460d      	mov	r5, r1
 8012e24:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8012e28:	4616      	mov	r6, r2
 8012e2a:	461c      	mov	r4, r3
 8012e2c:	f7ff ffd4 	bl	8012dd8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8012e30:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8012e34:	10c0      	asrs	r0, r0, #3
 8012e36:	fb06 5101 	mla	r1, r6, r1, r5
 8012e3a:	fb00 4001 	mla	r0, r0, r1, r4
 8012e3e:	bd70      	pop	{r4, r5, r6, pc}

08012e40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8012e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e44:	b08a      	sub	sp, #40	; 0x28
 8012e46:	f04f 0c00 	mov.w	ip, #0
 8012e4a:	4604      	mov	r4, r0
 8012e4c:	469a      	mov	sl, r3
 8012e4e:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8012e52:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8012e56:	f1b8 0f02 	cmp.w	r8, #2
 8012e5a:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8012e5e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8012e62:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8012e66:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8012e6a:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8012e6e:	f8cd c020 	str.w	ip, [sp, #32]
 8012e72:	d030      	beq.n	8012ed6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8012e74:	2bff      	cmp	r3, #255	; 0xff
 8012e76:	d12c      	bne.n	8012ed2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8012e78:	4560      	cmp	r0, ip
 8012e7a:	bf14      	ite	ne
 8012e7c:	2004      	movne	r0, #4
 8012e7e:	2001      	moveq	r0, #1
 8012e80:	9204      	str	r2, [sp, #16]
 8012e82:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8012e86:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8012e8a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012e8e:	f8ad 6018 	strh.w	r6, [sp, #24]
 8012e92:	f8ad 501a 	strh.w	r5, [sp, #26]
 8012e96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012e9a:	4620      	mov	r0, r4
 8012e9c:	f7ff ff5e 	bl	8012d5c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012ea0:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	4651      	mov	r1, sl
 8012ea8:	4620      	mov	r0, r4
 8012eaa:	e9cd 9700 	strd	r9, r7, [sp]
 8012eae:	f7ff ffb7 	bl	8012e20 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8012eb2:	f8ad 901e 	strh.w	r9, [sp, #30]
 8012eb6:	9005      	str	r0, [sp, #20]
 8012eb8:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8012ebc:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8012ec0:	b106      	cbz	r6, 8012ec4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8012ec2:	b98d      	cbnz	r5, 8012ee8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8012ec4:	4b12      	ldr	r3, [pc, #72]	; (8012f10 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8012ec6:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8012eca:	4a12      	ldr	r2, [pc, #72]	; (8012f14 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8012ecc:	4812      	ldr	r0, [pc, #72]	; (8012f18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8012ece:	f00f fa37 	bl	8022340 <__assert_func>
 8012ed2:	2004      	movs	r0, #4
 8012ed4:	e7d4      	b.n	8012e80 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8012ed6:	2bff      	cmp	r3, #255	; 0xff
 8012ed8:	d104      	bne.n	8012ee4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8012eda:	2800      	cmp	r0, #0
 8012edc:	bf14      	ite	ne
 8012ede:	2040      	movne	r0, #64	; 0x40
 8012ee0:	2020      	moveq	r0, #32
 8012ee2:	e7cd      	b.n	8012e80 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8012ee4:	2040      	movs	r0, #64	; 0x40
 8012ee6:	e7cb      	b.n	8012e80 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8012ee8:	6823      	ldr	r3, [r4, #0]
 8012eea:	4620      	mov	r0, r4
 8012eec:	9d02      	ldr	r5, [sp, #8]
 8012eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ef0:	4798      	blx	r3
 8012ef2:	4228      	tst	r0, r5
 8012ef4:	d104      	bne.n	8012f00 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8012ef6:	4b09      	ldr	r3, [pc, #36]	; (8012f1c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8012ef8:	f240 11b1 	movw	r1, #433	; 0x1b1
 8012efc:	4a05      	ldr	r2, [pc, #20]	; (8012f14 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8012efe:	e7e5      	b.n	8012ecc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8012f00:	6860      	ldr	r0, [r4, #4]
 8012f02:	a902      	add	r1, sp, #8
 8012f04:	6803      	ldr	r3, [r0, #0]
 8012f06:	685b      	ldr	r3, [r3, #4]
 8012f08:	4798      	blx	r3
 8012f0a:	b00a      	add	sp, #40	; 0x28
 8012f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f10:	08025ab8 	.word	0x08025ab8
 8012f14:	08025d6a 	.word	0x08025d6a
 8012f18:	08025a3c 	.word	0x08025a3c
 8012f1c:	08025af0 	.word	0x08025af0

08012f20 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8012f20:	b510      	push	{r4, lr}
 8012f22:	b08a      	sub	sp, #40	; 0x28
 8012f24:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8012f28:	9408      	str	r4, [sp, #32]
 8012f2a:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8012f2e:	9407      	str	r4, [sp, #28]
 8012f30:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8012f34:	9406      	str	r4, [sp, #24]
 8012f36:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8012f3a:	9405      	str	r4, [sp, #20]
 8012f3c:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8012f40:	9404      	str	r4, [sp, #16]
 8012f42:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8012f46:	9403      	str	r4, [sp, #12]
 8012f48:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8012f4c:	9402      	str	r4, [sp, #8]
 8012f4e:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8012f52:	e9cd 3400 	strd	r3, r4, [sp]
 8012f56:	4613      	mov	r3, r2
 8012f58:	2200      	movs	r2, #0
 8012f5a:	f7ff ff71 	bl	8012e40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8012f5e:	b00a      	add	sp, #40	; 0x28
 8012f60:	bd10      	pop	{r4, pc}
	...

08012f64 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8012f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f66:	b08b      	sub	sp, #44	; 0x2c
 8012f68:	4616      	mov	r6, r2
 8012f6a:	460d      	mov	r5, r1
 8012f6c:	461f      	mov	r7, r3
 8012f6e:	4604      	mov	r4, r0
 8012f70:	f7f7 f8ce 	bl	800a110 <_ZN8touchgfx3HAL3lcdEv>
 8012f74:	6803      	ldr	r3, [r0, #0]
 8012f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f78:	4798      	blx	r3
 8012f7a:	4b0e      	ldr	r3, [pc, #56]	; (8012fb4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	4629      	mov	r1, r5
 8012f80:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8012f84:	881b      	ldrh	r3, [r3, #0]
 8012f86:	4620      	mov	r0, r4
 8012f88:	9306      	str	r3, [sp, #24]
 8012f8a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8012f8e:	9305      	str	r3, [sp, #20]
 8012f90:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8012f94:	9304      	str	r3, [sp, #16]
 8012f96:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012f9a:	9303      	str	r3, [sp, #12]
 8012f9c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012fa0:	9302      	str	r3, [sp, #8]
 8012fa2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012fa6:	e9cd 7300 	strd	r7, r3, [sp]
 8012faa:	4633      	mov	r3, r6
 8012fac:	f7ff ff48 	bl	8012e40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8012fb0:	b00b      	add	sp, #44	; 0x2c
 8012fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fb4:	2000b25a 	.word	0x2000b25a

08012fb8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8012fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fbc:	461f      	mov	r7, r3
 8012fbe:	4b14      	ldr	r3, [pc, #80]	; (8013010 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8012fc0:	b08a      	sub	sp, #40	; 0x28
 8012fc2:	4616      	mov	r6, r2
 8012fc4:	f8b3 8000 	ldrh.w	r8, [r3]
 8012fc8:	460d      	mov	r5, r1
 8012fca:	4604      	mov	r4, r0
 8012fcc:	f7f7 f8a0 	bl	800a110 <_ZN8touchgfx3HAL3lcdEv>
 8012fd0:	6803      	ldr	r3, [r0, #0]
 8012fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fd4:	4798      	blx	r3
 8012fd6:	2302      	movs	r3, #2
 8012fd8:	9008      	str	r0, [sp, #32]
 8012fda:	2200      	movs	r2, #0
 8012fdc:	4629      	mov	r1, r5
 8012fde:	4620      	mov	r0, r4
 8012fe0:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8012fe4:	2301      	movs	r3, #1
 8012fe6:	9305      	str	r3, [sp, #20]
 8012fe8:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8012fec:	9304      	str	r3, [sp, #16]
 8012fee:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012ff2:	9303      	str	r3, [sp, #12]
 8012ff4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012ff8:	9302      	str	r3, [sp, #8]
 8012ffa:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012ffe:	e9cd 7300 	strd	r7, r3, [sp]
 8013002:	4633      	mov	r3, r6
 8013004:	f7ff ff1c 	bl	8012e40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8013008:	b00a      	add	sp, #40	; 0x28
 801300a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801300e:	bf00      	nop
 8013010:	2000b25a 	.word	0x2000b25a

08013014 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8013014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013018:	b08b      	sub	sp, #44	; 0x2c
 801301a:	469b      	mov	fp, r3
 801301c:	4604      	mov	r4, r0
 801301e:	4692      	mov	sl, r2
 8013020:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8013024:	2600      	movs	r6, #0
 8013026:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 801302a:	4689      	mov	r9, r1
 801302c:	2fff      	cmp	r7, #255	; 0xff
 801302e:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8013032:	9608      	str	r6, [sp, #32]
 8013034:	bf14      	ite	ne
 8013036:	2308      	movne	r3, #8
 8013038:	2302      	moveq	r3, #2
 801303a:	e9cd 3602 	strd	r3, r6, [sp, #8]
 801303e:	f7ff fe8d 	bl	8012d5c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013042:	465a      	mov	r2, fp
 8013044:	4603      	mov	r3, r0
 8013046:	4651      	mov	r1, sl
 8013048:	4620      	mov	r0, r4
 801304a:	e9cd 8500 	strd	r8, r5, [sp]
 801304e:	f7ff fee7 	bl	8012e20 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8013052:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8013056:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801305a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801305e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8013062:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8013066:	f8ad 301a 	strh.w	r3, [sp, #26]
 801306a:	6823      	ldr	r3, [r4, #0]
 801306c:	9d02      	ldr	r5, [sp, #8]
 801306e:	9005      	str	r0, [sp, #20]
 8013070:	4620      	mov	r0, r4
 8013072:	f8ad 601c 	strh.w	r6, [sp, #28]
 8013076:	f8ad 801e 	strh.w	r8, [sp, #30]
 801307a:	f8cd 9020 	str.w	r9, [sp, #32]
 801307e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8013082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013084:	4798      	blx	r3
 8013086:	4228      	tst	r0, r5
 8013088:	d106      	bne.n	8013098 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 801308a:	4b07      	ldr	r3, [pc, #28]	; (80130a8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 801308c:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8013090:	4a06      	ldr	r2, [pc, #24]	; (80130ac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8013092:	4807      	ldr	r0, [pc, #28]	; (80130b0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8013094:	f00f f954 	bl	8022340 <__assert_func>
 8013098:	6860      	ldr	r0, [r4, #4]
 801309a:	a902      	add	r1, sp, #8
 801309c:	6803      	ldr	r3, [r0, #0]
 801309e:	685b      	ldr	r3, [r3, #4]
 80130a0:	4798      	blx	r3
 80130a2:	b00b      	add	sp, #44	; 0x2c
 80130a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130a8:	08025af0 	.word	0x08025af0
 80130ac:	08025e33 	.word	0x08025e33
 80130b0:	08025a3c 	.word	0x08025a3c

080130b4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80130b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80130b8:	461f      	mov	r7, r3
 80130ba:	4b0b      	ldr	r3, [pc, #44]	; (80130e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80130bc:	460d      	mov	r5, r1
 80130be:	4616      	mov	r6, r2
 80130c0:	f8b3 8000 	ldrh.w	r8, [r3]
 80130c4:	4604      	mov	r4, r0
 80130c6:	f7f7 f823 	bl	800a110 <_ZN8touchgfx3HAL3lcdEv>
 80130ca:	6803      	ldr	r3, [r0, #0]
 80130cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130ce:	4798      	blx	r3
 80130d0:	463b      	mov	r3, r7
 80130d2:	4632      	mov	r2, r6
 80130d4:	4629      	mov	r1, r5
 80130d6:	e9cd 8000 	strd	r8, r0, [sp]
 80130da:	4620      	mov	r0, r4
 80130dc:	f7ff fea0 	bl	8012e20 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80130e0:	b002      	add	sp, #8
 80130e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130e6:	bf00      	nop
 80130e8:	2000b25a 	.word	0x2000b25a

080130ec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 80130ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130f0:	4698      	mov	r8, r3
 80130f2:	b088      	sub	sp, #32
 80130f4:	2300      	movs	r3, #0
 80130f6:	4617      	mov	r7, r2
 80130f8:	4604      	mov	r4, r0
 80130fa:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80130fe:	9306      	str	r3, [sp, #24]
 8013100:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8013104:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8013108:	f8ad 6010 	strh.w	r6, [sp, #16]
 801310c:	f8ad 5012 	strh.w	r5, [sp, #18]
 8013110:	e9cd 3100 	strd	r3, r1, [sp]
 8013114:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013118:	f8ad 3014 	strh.w	r3, [sp, #20]
 801311c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8013120:	f88d 301c 	strb.w	r3, [sp, #28]
 8013124:	f7ff fe1a 	bl	8012d5c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013128:	4642      	mov	r2, r8
 801312a:	4603      	mov	r3, r0
 801312c:	4639      	mov	r1, r7
 801312e:	4620      	mov	r0, r4
 8013130:	f7ff ffc0 	bl	80130b4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013134:	4b16      	ldr	r3, [pc, #88]	; (8013190 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8013136:	9003      	str	r0, [sp, #12]
 8013138:	881b      	ldrh	r3, [r3, #0]
 801313a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801313e:	f7f6 ffe7 	bl	800a110 <_ZN8touchgfx3HAL3lcdEv>
 8013142:	6803      	ldr	r3, [r0, #0]
 8013144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013146:	4798      	blx	r3
 8013148:	f88d 001e 	strb.w	r0, [sp, #30]
 801314c:	f88d 001d 	strb.w	r0, [sp, #29]
 8013150:	b106      	cbz	r6, 8013154 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8013152:	b935      	cbnz	r5, 8013162 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8013154:	4b0f      	ldr	r3, [pc, #60]	; (8013194 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8013156:	f240 11cd 	movw	r1, #461	; 0x1cd
 801315a:	4a0f      	ldr	r2, [pc, #60]	; (8013198 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 801315c:	480f      	ldr	r0, [pc, #60]	; (801319c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 801315e:	f00f f8ef 	bl	8022340 <__assert_func>
 8013162:	6823      	ldr	r3, [r4, #0]
 8013164:	4620      	mov	r0, r4
 8013166:	9d00      	ldr	r5, [sp, #0]
 8013168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801316a:	4798      	blx	r3
 801316c:	4228      	tst	r0, r5
 801316e:	d104      	bne.n	801317a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8013170:	4b0b      	ldr	r3, [pc, #44]	; (80131a0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8013172:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8013176:	4a08      	ldr	r2, [pc, #32]	; (8013198 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8013178:	e7f0      	b.n	801315c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 801317a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801317c:	4669      	mov	r1, sp
 801317e:	6860      	ldr	r0, [r4, #4]
 8013180:	9306      	str	r3, [sp, #24]
 8013182:	6803      	ldr	r3, [r0, #0]
 8013184:	685b      	ldr	r3, [r3, #4]
 8013186:	4798      	blx	r3
 8013188:	b008      	add	sp, #32
 801318a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801318e:	bf00      	nop
 8013190:	2000b25a 	.word	0x2000b25a
 8013194:	08025ab8 	.word	0x08025ab8
 8013198:	08025c1c 	.word	0x08025c1c
 801319c:	08025a3c 	.word	0x08025a3c
 80131a0:	08025af0 	.word	0x08025af0

080131a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80131a4:	b570      	push	{r4, r5, r6, lr}
 80131a6:	b08a      	sub	sp, #40	; 0x28
 80131a8:	4604      	mov	r4, r0
 80131aa:	466b      	mov	r3, sp
 80131ac:	e883 0006 	stmia.w	r3, {r1, r2}
 80131b0:	4b1f      	ldr	r3, [pc, #124]	; (8013230 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 80131b2:	781b      	ldrb	r3, [r3, #0]
 80131b4:	b933      	cbnz	r3, 80131c4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 80131b6:	4b1f      	ldr	r3, [pc, #124]	; (8013234 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 80131b8:	f240 11f9 	movw	r1, #505	; 0x1f9
 80131bc:	4a1e      	ldr	r2, [pc, #120]	; (8013238 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 80131be:	481f      	ldr	r0, [pc, #124]	; (801323c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 80131c0:	f00f f8be 	bl	8022340 <__assert_func>
 80131c4:	2300      	movs	r3, #0
 80131c6:	f8bd 5000 	ldrh.w	r5, [sp]
 80131ca:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 80131ce:	9308      	str	r3, [sp, #32]
 80131d0:	2301      	movs	r3, #1
 80131d2:	9302      	str	r3, [sp, #8]
 80131d4:	6803      	ldr	r3, [r0, #0]
 80131d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131d8:	4798      	blx	r3
 80131da:	4632      	mov	r2, r6
 80131dc:	4629      	mov	r1, r5
 80131de:	4603      	mov	r3, r0
 80131e0:	4620      	mov	r0, r4
 80131e2:	f7ff ff67 	bl	80130b4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80131e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80131e8:	9003      	str	r0, [sp, #12]
 80131ea:	9305      	str	r3, [sp, #20]
 80131ec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80131f0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80131f4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80131f8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80131fc:	4b10      	ldr	r3, [pc, #64]	; (8013240 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80131fe:	881b      	ldrh	r3, [r3, #0]
 8013200:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013204:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013208:	f7f6 ff82 	bl	800a110 <_ZN8touchgfx3HAL3lcdEv>
 801320c:	6803      	ldr	r3, [r0, #0]
 801320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013210:	4798      	blx	r3
 8013212:	23ff      	movs	r3, #255	; 0xff
 8013214:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8013218:	a902      	add	r1, sp, #8
 801321a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801321e:	6860      	ldr	r0, [r4, #4]
 8013220:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013224:	6803      	ldr	r3, [r0, #0]
 8013226:	685b      	ldr	r3, [r3, #4]
 8013228:	4798      	blx	r3
 801322a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801322c:	b00a      	add	sp, #40	; 0x28
 801322e:	bd70      	pop	{r4, r5, r6, pc}
 8013230:	2000b25f 	.word	0x2000b25f
 8013234:	08025989 	.word	0x08025989
 8013238:	08025cc0 	.word	0x08025cc0
 801323c:	08025a3c 	.word	0x08025a3c
 8013240:	2000b25a 	.word	0x2000b25a

08013244 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8013244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013246:	b08b      	sub	sp, #44	; 0x2c
 8013248:	4604      	mov	r4, r0
 801324a:	466d      	mov	r5, sp
 801324c:	e885 0006 	stmia.w	r5, {r1, r2}
 8013250:	461d      	mov	r5, r3
 8013252:	2300      	movs	r3, #0
 8013254:	f8bd 6000 	ldrh.w	r6, [sp]
 8013258:	9308      	str	r3, [sp, #32]
 801325a:	2301      	movs	r3, #1
 801325c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8013260:	9302      	str	r3, [sp, #8]
 8013262:	6803      	ldr	r3, [r0, #0]
 8013264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013266:	4798      	blx	r3
 8013268:	463a      	mov	r2, r7
 801326a:	4631      	mov	r1, r6
 801326c:	4603      	mov	r3, r0
 801326e:	4620      	mov	r0, r4
 8013270:	f7ff ff20 	bl	80130b4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013274:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013278:	9003      	str	r0, [sp, #12]
 801327a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801327e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013282:	9505      	str	r5, [sp, #20]
 8013284:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013288:	4b0d      	ldr	r3, [pc, #52]	; (80132c0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 801328a:	881b      	ldrh	r3, [r3, #0]
 801328c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013290:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013292:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013296:	f7f6 ff3b 	bl	800a110 <_ZN8touchgfx3HAL3lcdEv>
 801329a:	6803      	ldr	r3, [r0, #0]
 801329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801329e:	4798      	blx	r3
 80132a0:	23ff      	movs	r3, #255	; 0xff
 80132a2:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80132a6:	a902      	add	r1, sp, #8
 80132a8:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80132ac:	6860      	ldr	r0, [r4, #4]
 80132ae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80132b2:	6803      	ldr	r3, [r0, #0]
 80132b4:	685b      	ldr	r3, [r3, #4]
 80132b6:	4798      	blx	r3
 80132b8:	4628      	mov	r0, r5
 80132ba:	b00b      	add	sp, #44	; 0x2c
 80132bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132be:	bf00      	nop
 80132c0:	2000b25a 	.word	0x2000b25a

080132c4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80132c4:	b570      	push	{r4, r5, r6, lr}
 80132c6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80132ca:	4604      	mov	r4, r0
 80132cc:	b19b      	cbz	r3, 80132f6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80132ce:	2002      	movs	r0, #2
 80132d0:	f7fc ff7a 	bl	80101c8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80132d4:	2300      	movs	r3, #0
 80132d6:	4620      	mov	r0, r4
 80132d8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80132dc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80132e0:	6823      	ldr	r3, [r4, #0]
 80132e2:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 80132e6:	f7ff fd39 	bl	8012d5c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80132ea:	4601      	mov	r1, r0
 80132ec:	4620      	mov	r0, r4
 80132ee:	462b      	mov	r3, r5
 80132f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132f4:	4718      	bx	r3
 80132f6:	bd70      	pop	{r4, r5, r6, pc}

080132f8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80132f8:	4770      	bx	lr

080132fa <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80132fa:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80132fe:	1a13      	subs	r3, r2, r0
 8013300:	4258      	negs	r0, r3
 8013302:	4158      	adcs	r0, r3
 8013304:	4770      	bx	lr

08013306 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8013306:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801330a:	1a9b      	subs	r3, r3, r2
 801330c:	2b00      	cmp	r3, #0
 801330e:	bfdc      	itt	le
 8013310:	6882      	ldrle	r2, [r0, #8]
 8013312:	189b      	addle	r3, r3, r2
 8013314:	2b01      	cmp	r3, #1
 8013316:	bfcc      	ite	gt
 8013318:	2000      	movgt	r0, #0
 801331a:	2001      	movle	r0, #1
 801331c:	4770      	bx	lr

0801331e <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801331e:	6902      	ldr	r2, [r0, #16]
 8013320:	6840      	ldr	r0, [r0, #4]
 8013322:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8013326:	4770      	bx	lr

08013328 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8013328:	6803      	ldr	r3, [r0, #0]
 801332a:	691b      	ldr	r3, [r3, #16]
 801332c:	4718      	bx	r3

0801332e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801332e:	4770      	bx	lr

08013330 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8013330:	4770      	bx	lr
	...

08013334 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8013334:	2301      	movs	r3, #1
 8013336:	b570      	push	{r4, r5, r6, lr}
 8013338:	7203      	strb	r3, [r0, #8]
 801333a:	4604      	mov	r4, r0
 801333c:	6840      	ldr	r0, [r0, #4]
 801333e:	6803      	ldr	r3, [r0, #0]
 8013340:	699b      	ldr	r3, [r3, #24]
 8013342:	4798      	blx	r3
 8013344:	6803      	ldr	r3, [r0, #0]
 8013346:	4605      	mov	r5, r0
 8013348:	2b08      	cmp	r3, #8
 801334a:	d01e      	beq.n	801338a <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 801334c:	d80b      	bhi.n	8013366 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801334e:	2b02      	cmp	r3, #2
 8013350:	d027      	beq.n	80133a2 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8013352:	2b04      	cmp	r3, #4
 8013354:	d011      	beq.n	801337a <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8013356:	2b01      	cmp	r3, #1
 8013358:	d028      	beq.n	80133ac <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801335a:	4b17      	ldr	r3, [pc, #92]	; (80133b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 801335c:	218b      	movs	r1, #139	; 0x8b
 801335e:	4a17      	ldr	r2, [pc, #92]	; (80133bc <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8013360:	4817      	ldr	r0, [pc, #92]	; (80133c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8013362:	f00e ffed 	bl	8022340 <__assert_func>
 8013366:	2b40      	cmp	r3, #64	; 0x40
 8013368:	d020      	beq.n	80133ac <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801336a:	d801      	bhi.n	8013370 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801336c:	2b20      	cmp	r3, #32
 801336e:	e7f3      	b.n	8013358 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8013370:	2b80      	cmp	r3, #128	; 0x80
 8013372:	d01b      	beq.n	80133ac <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8013374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013378:	e7ee      	b.n	8013358 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801337a:	6823      	ldr	r3, [r4, #0]
 801337c:	7f01      	ldrb	r1, [r0, #28]
 801337e:	4620      	mov	r0, r4
 8013380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013382:	4798      	blx	r3
 8013384:	6823      	ldr	r3, [r4, #0]
 8013386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013388:	e006      	b.n	8013398 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801338a:	6823      	ldr	r3, [r4, #0]
 801338c:	7f01      	ldrb	r1, [r0, #28]
 801338e:	4620      	mov	r0, r4
 8013390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013392:	4798      	blx	r3
 8013394:	6823      	ldr	r3, [r4, #0]
 8013396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013398:	4629      	mov	r1, r5
 801339a:	4620      	mov	r0, r4
 801339c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80133a0:	4718      	bx	r3
 80133a2:	6823      	ldr	r3, [r4, #0]
 80133a4:	4620      	mov	r0, r4
 80133a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80133a8:	4798      	blx	r3
 80133aa:	e7f3      	b.n	8013394 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 80133ac:	6823      	ldr	r3, [r4, #0]
 80133ae:	4620      	mov	r0, r4
 80133b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80133b2:	4798      	blx	r3
 80133b4:	e7e6      	b.n	8013384 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 80133b6:	bf00      	nop
 80133b8:	08025f11 	.word	0x08025f11
 80133bc:	08026020 	.word	0x08026020
 80133c0:	08025f36 	.word	0x08025f36

080133c4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80133c4:	b570      	push	{r4, r5, r6, lr}
 80133c6:	4604      	mov	r4, r0
 80133c8:	460e      	mov	r6, r1
 80133ca:	6860      	ldr	r0, [r4, #4]
 80133cc:	6803      	ldr	r3, [r0, #0]
 80133ce:	685b      	ldr	r3, [r3, #4]
 80133d0:	4798      	blx	r3
 80133d2:	2800      	cmp	r0, #0
 80133d4:	d1f9      	bne.n	80133ca <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80133d6:	4d0b      	ldr	r5, [pc, #44]	; (8013404 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 80133d8:	6828      	ldr	r0, [r5, #0]
 80133da:	6803      	ldr	r3, [r0, #0]
 80133dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80133de:	4798      	blx	r3
 80133e0:	f7fd f9b2 	bl	8010748 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80133e4:	6860      	ldr	r0, [r4, #4]
 80133e6:	4631      	mov	r1, r6
 80133e8:	6803      	ldr	r3, [r0, #0]
 80133ea:	689b      	ldr	r3, [r3, #8]
 80133ec:	4798      	blx	r3
 80133ee:	6823      	ldr	r3, [r4, #0]
 80133f0:	4620      	mov	r0, r4
 80133f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133f4:	4798      	blx	r3
 80133f6:	6828      	ldr	r0, [r5, #0]
 80133f8:	6803      	ldr	r3, [r0, #0]
 80133fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80133fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013400:	4718      	bx	r3
 8013402:	bf00      	nop
 8013404:	2000b260 	.word	0x2000b260

08013408 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8013408:	b508      	push	{r3, lr}
 801340a:	f7fd f981 	bl	8010710 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801340e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013412:	f7fd b98b 	b.w	801072c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013416 <_ZN8touchgfx13DMA_Interface5startEv>:
 8013416:	b510      	push	{r4, lr}
 8013418:	4604      	mov	r4, r0
 801341a:	6840      	ldr	r0, [r0, #4]
 801341c:	6803      	ldr	r3, [r0, #0]
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	4798      	blx	r3
 8013422:	b948      	cbnz	r0, 8013438 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013424:	7a63      	ldrb	r3, [r4, #9]
 8013426:	b13b      	cbz	r3, 8013438 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013428:	7a23      	ldrb	r3, [r4, #8]
 801342a:	b92b      	cbnz	r3, 8013438 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801342c:	6823      	ldr	r3, [r4, #0]
 801342e:	4620      	mov	r0, r4
 8013430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013436:	4718      	bx	r3
 8013438:	bd10      	pop	{r4, pc}
	...

0801343c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801343c:	b510      	push	{r4, lr}
 801343e:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8013442:	1b12      	subs	r2, r2, r4
 8013444:	2a00      	cmp	r2, #0
 8013446:	bfdc      	itt	le
 8013448:	6883      	ldrle	r3, [r0, #8]
 801344a:	18d2      	addle	r2, r2, r3
 801344c:	2a01      	cmp	r2, #1
 801344e:	dd18      	ble.n	8013482 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8013450:	6843      	ldr	r3, [r0, #4]
 8013452:	f101 021c 	add.w	r2, r1, #28
 8013456:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 801345a:	f851 4b04 	ldr.w	r4, [r1], #4
 801345e:	4291      	cmp	r1, r2
 8013460:	f843 4b04 	str.w	r4, [r3], #4
 8013464:	d1f9      	bne.n	801345a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8013466:	880a      	ldrh	r2, [r1, #0]
 8013468:	801a      	strh	r2, [r3, #0]
 801346a:	788a      	ldrb	r2, [r1, #2]
 801346c:	709a      	strb	r2, [r3, #2]
 801346e:	68c3      	ldr	r3, [r0, #12]
 8013470:	6882      	ldr	r2, [r0, #8]
 8013472:	f3bf 8f5b 	dmb	ish
 8013476:	3301      	adds	r3, #1
 8013478:	429a      	cmp	r2, r3
 801347a:	bfd8      	it	le
 801347c:	1a9b      	suble	r3, r3, r2
 801347e:	60c3      	str	r3, [r0, #12]
 8013480:	bd10      	pop	{r4, pc}
 8013482:	4b03      	ldr	r3, [pc, #12]	; (8013490 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8013484:	2139      	movs	r1, #57	; 0x39
 8013486:	4a03      	ldr	r2, [pc, #12]	; (8013494 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8013488:	4803      	ldr	r0, [pc, #12]	; (8013498 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 801348a:	f00e ff59 	bl	8022340 <__assert_func>
 801348e:	bf00      	nop
 8013490:	08025f5c 	.word	0x08025f5c
 8013494:	08026050 	.word	0x08026050
 8013498:	08025f36 	.word	0x08025f36

0801349c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801349c:	b510      	push	{r4, lr}
 801349e:	6803      	ldr	r3, [r0, #0]
 80134a0:	4604      	mov	r4, r0
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	4798      	blx	r3
 80134a6:	b128      	cbz	r0, 80134b4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80134a8:	4b07      	ldr	r3, [pc, #28]	; (80134c8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80134aa:	213f      	movs	r1, #63	; 0x3f
 80134ac:	4a07      	ldr	r2, [pc, #28]	; (80134cc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80134ae:	4808      	ldr	r0, [pc, #32]	; (80134d0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80134b0:	f00e ff46 	bl	8022340 <__assert_func>
 80134b4:	6923      	ldr	r3, [r4, #16]
 80134b6:	68a2      	ldr	r2, [r4, #8]
 80134b8:	f3bf 8f5b 	dmb	ish
 80134bc:	3301      	adds	r3, #1
 80134be:	429a      	cmp	r2, r3
 80134c0:	bfd8      	it	le
 80134c2:	1a9b      	suble	r3, r3, r2
 80134c4:	6123      	str	r3, [r4, #16]
 80134c6:	bd10      	pop	{r4, pc}
 80134c8:	08025f7f 	.word	0x08025f7f
 80134cc:	0802609e 	.word	0x0802609e
 80134d0:	08025f36 	.word	0x08025f36

080134d4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80134d4:	b570      	push	{r4, r5, r6, lr}
 80134d6:	4604      	mov	r4, r0
 80134d8:	6840      	ldr	r0, [r0, #4]
 80134da:	6803      	ldr	r3, [r0, #0]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	4798      	blx	r3
 80134e0:	4605      	mov	r5, r0
 80134e2:	b930      	cbnz	r0, 80134f2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80134e4:	7a23      	ldrb	r3, [r4, #8]
 80134e6:	b123      	cbz	r3, 80134f2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80134e8:	6860      	ldr	r0, [r4, #4]
 80134ea:	6803      	ldr	r3, [r0, #0]
 80134ec:	695b      	ldr	r3, [r3, #20]
 80134ee:	4798      	blx	r3
 80134f0:	7225      	strb	r5, [r4, #8]
 80134f2:	6860      	ldr	r0, [r4, #4]
 80134f4:	6803      	ldr	r3, [r0, #0]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	4798      	blx	r3
 80134fa:	b928      	cbnz	r0, 8013508 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80134fc:	6823      	ldr	r3, [r4, #0]
 80134fe:	4620      	mov	r0, r4
 8013500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013502:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013506:	4718      	bx	r3
 8013508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801350c:	f7fd b928 	b.w	8010760 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08013510 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8013510:	b510      	push	{r4, lr}
 8013512:	6082      	str	r2, [r0, #8]
 8013514:	2200      	movs	r2, #0
 8013516:	4c03      	ldr	r4, [pc, #12]	; (8013524 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8013518:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801351c:	e9c0 4100 	strd	r4, r1, [r0]
 8013520:	bd10      	pop	{r4, pc}
 8013522:	bf00      	nop
 8013524:	08026004 	.word	0x08026004

08013528 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8013528:	6840      	ldr	r0, [r0, #4]
 801352a:	6803      	ldr	r3, [r0, #0]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	4718      	bx	r3

08013530 <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 8013530:	2001      	movs	r0, #1
 8013532:	4770      	bx	lr

08013534 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 8013534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013538:	460d      	mov	r5, r1
 801353a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801353e:	b085      	sub	sp, #20
 8013540:	4690      	mov	r8, r2
 8013542:	4411      	add	r1, r2
 8013544:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8013548:	4699      	mov	r9, r3
 801354a:	6803      	ldr	r3, [r0, #0]
 801354c:	60c1      	str	r1, [r0, #12]
 801354e:	4604      	mov	r4, r0
 8013550:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013552:	440a      	add	r2, r1
 8013554:	6102      	str	r2, [r0, #16]
 8013556:	68db      	ldr	r3, [r3, #12]
 8013558:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 801355c:	4798      	blx	r3
 801355e:	2800      	cmp	r0, #0
 8013560:	d039      	beq.n	80135d6 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa2>
 8013562:	44c8      	add	r8, r9
 8013564:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8013568:	4445      	add	r5, r8
 801356a:	6823      	ldr	r3, [r4, #0]
 801356c:	f10d 020f 	add.w	r2, sp, #15
 8013570:	a903      	add	r1, sp, #12
 8013572:	4620      	mov	r0, r4
 8013574:	9200      	str	r2, [sp, #0]
 8013576:	f10d 020d 	add.w	r2, sp, #13
 801357a:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801357e:	f10d 030e 	add.w	r3, sp, #14
 8013582:	47c0      	blx	r8
 8013584:	b1f8      	cbz	r0, 80135c6 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x92>
 8013586:	f89d 300f 	ldrb.w	r3, [sp, #15]
 801358a:	7a20      	ldrb	r0, [r4, #8]
 801358c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8013590:	4358      	muls	r0, r3
 8013592:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8013596:	1c43      	adds	r3, r0, #1
 8013598:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801359c:	f817 0b01 	ldrb.w	r0, [r7], #1
 80135a0:	121b      	asrs	r3, r3, #8
 80135a2:	fb10 f003 	smulbb	r0, r0, r3
 80135a6:	b283      	uxth	r3, r0
 80135a8:	1c58      	adds	r0, r3, #1
 80135aa:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80135ae:	6823      	ldr	r3, [r4, #0]
 80135b0:	1200      	asrs	r0, r0, #8
 80135b2:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80135b6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80135ba:	28ff      	cmp	r0, #255	; 0xff
 80135bc:	d10e      	bne.n	80135dc <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa8>
 80135be:	9100      	str	r1, [sp, #0]
 80135c0:	4629      	mov	r1, r5
 80135c2:	4620      	mov	r0, r4
 80135c4:	47c0      	blx	r8
 80135c6:	68e3      	ldr	r3, [r4, #12]
 80135c8:	3e01      	subs	r6, #1
 80135ca:	f105 0503 	add.w	r5, r5, #3
 80135ce:	f103 0301 	add.w	r3, r3, #1
 80135d2:	60e3      	str	r3, [r4, #12]
 80135d4:	d1c9      	bne.n	801356a <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x36>
 80135d6:	b005      	add	sp, #20
 80135d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135dc:	fa1f fc80 	uxth.w	ip, r0
 80135e0:	43c0      	mvns	r0, r0
 80135e2:	f895 e002 	ldrb.w	lr, [r5, #2]
 80135e6:	fb12 f20c 	smulbb	r2, r2, ip
 80135ea:	b2c0      	uxtb	r0, r0
 80135ec:	fb13 f30c 	smulbb	r3, r3, ip
 80135f0:	fb0e 2200 	mla	r2, lr, r0, r2
 80135f4:	f895 e001 	ldrb.w	lr, [r5, #1]
 80135f8:	fb11 f10c 	smulbb	r1, r1, ip
 80135fc:	fb0e 3300 	mla	r3, lr, r0, r3
 8013600:	f895 e000 	ldrb.w	lr, [r5]
 8013604:	b292      	uxth	r2, r2
 8013606:	b29b      	uxth	r3, r3
 8013608:	fb0e 1000 	mla	r0, lr, r0, r1
 801360c:	1c59      	adds	r1, r3, #1
 801360e:	b280      	uxth	r0, r0
 8013610:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8013614:	1c51      	adds	r1, r2, #1
 8013616:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801361a:	1c41      	adds	r1, r0, #1
 801361c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8013620:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8013624:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8013628:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801362c:	9000      	str	r0, [sp, #0]
 801362e:	e7c7      	b.n	80135c0 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x8c>

08013630 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 8013630:	f89d 0000 	ldrb.w	r0, [sp]
 8013634:	704b      	strb	r3, [r1, #1]
 8013636:	7008      	strb	r0, [r1, #0]
 8013638:	708a      	strb	r2, [r1, #2]
 801363a:	4770      	bx	lr

0801363c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 801363c:	b507      	push	{r0, r1, r2, lr}
 801363e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013642:	ab01      	add	r3, sp, #4
 8013644:	6809      	ldr	r1, [r1, #0]
 8013646:	6800      	ldr	r0, [r0, #0]
 8013648:	f002 ff73 	bl	8016532 <_ZN8touchgfx6muldivElllRl>
 801364c:	b003      	add	sp, #12
 801364e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08013654 <_ZN8touchgfx7CWRUtil4sineEi>:
 8013654:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013658:	fb90 f3f2 	sdiv	r3, r0, r2
 801365c:	fb03 0312 	mls	r3, r3, r2, r0
 8013660:	4413      	add	r3, r2
 8013662:	fb93 f0f2 	sdiv	r0, r3, r2
 8013666:	fb02 3010 	mls	r0, r2, r0, r3
 801366a:	4b0a      	ldr	r3, [pc, #40]	; (8013694 <_ZN8touchgfx7CWRUtil4sineEi+0x40>)
 801366c:	285a      	cmp	r0, #90	; 0x5a
 801366e:	dc02      	bgt.n	8013676 <_ZN8touchgfx7CWRUtil4sineEi+0x22>
 8013670:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8013674:	4770      	bx	lr
 8013676:	28b4      	cmp	r0, #180	; 0xb4
 8013678:	dc02      	bgt.n	8013680 <_ZN8touchgfx7CWRUtil4sineEi+0x2c>
 801367a:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 801367e:	e7f7      	b.n	8013670 <_ZN8touchgfx7CWRUtil4sineEi+0x1c>
 8013680:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8013684:	bfd4      	ite	le
 8013686:	38b4      	suble	r0, #180	; 0xb4
 8013688:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 801368c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8013690:	4240      	negs	r0, r0
 8013692:	4770      	bx	lr
 8013694:	080260f0 	.word	0x080260f0

08013698 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 8013698:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 801369c:	fb90 f3f2 	sdiv	r3, r0, r2
 80136a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80136a2:	fb03 0012 	mls	r0, r3, r2, r0
 80136a6:	4410      	add	r0, r2
 80136a8:	fb90 f4f2 	sdiv	r4, r0, r2
 80136ac:	fb02 0414 	mls	r4, r2, r4, r0
 80136b0:	f004 061f 	and.w	r6, r4, #31
 80136b4:	1164      	asrs	r4, r4, #5
 80136b6:	4620      	mov	r0, r4
 80136b8:	f7ff ffcc 	bl	8013654 <_ZN8touchgfx7CWRUtil4sineEi>
 80136bc:	4605      	mov	r5, r0
 80136be:	b90e      	cbnz	r6, 80136c4 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x2c>
 80136c0:	b002      	add	sp, #8
 80136c2:	bd70      	pop	{r4, r5, r6, pc}
 80136c4:	1c60      	adds	r0, r4, #1
 80136c6:	f7ff ffc5 	bl	8013654 <_ZN8touchgfx7CWRUtil4sineEi>
 80136ca:	ab01      	add	r3, sp, #4
 80136cc:	2220      	movs	r2, #32
 80136ce:	4631      	mov	r1, r6
 80136d0:	1b40      	subs	r0, r0, r5
 80136d2:	f002 ff2e 	bl	8016532 <_ZN8touchgfx6muldivElllRl>
 80136d6:	4428      	add	r0, r5
 80136d8:	e7f2      	b.n	80136c0 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>

080136da <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 80136da:	b508      	push	{r3, lr}
 80136dc:	f5c0 6034 	rsb	r0, r0, #2880	; 0xb40
 80136e0:	f7ff ffda 	bl	8013698 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80136e4:	bd08      	pop	{r3, pc}
	...

080136e8 <_ZN8touchgfx6CircleC1Ev>:
 80136e8:	b510      	push	{r4, lr}
 80136ea:	4604      	mov	r4, r0
 80136ec:	f000 fd4e 	bl	801418c <_ZN8touchgfx12CanvasWidgetC1Ev>
 80136f0:	4b08      	ldr	r3, [pc, #32]	; (8013714 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 80136f2:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 80136f6:	4620      	mov	r0, r4
 80136f8:	6023      	str	r3, [r4, #0]
 80136fa:	2300      	movs	r3, #0
 80136fc:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 8013700:	f24b 4205 	movw	r2, #46085	; 0xb405
 8013704:	60a3      	str	r3, [r4, #8]
 8013706:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 801370a:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 801370e:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 8013712:	bd10      	pop	{r4, pc}
 8013714:	080261b0 	.word	0x080261b0

08013718 <_ZN8touchgfx6Circle15setCapPrecisionEi>:
 8013718:	29b4      	cmp	r1, #180	; 0xb4
 801371a:	bfa8      	it	ge
 801371c:	21b4      	movge	r1, #180	; 0xb4
 801371e:	2901      	cmp	r1, #1
 8013720:	bfb8      	it	lt
 8013722:	2101      	movlt	r1, #1
 8013724:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
 8013728:	4770      	bx	lr

0801372a <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 801372a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801372e:	4606      	mov	r6, r0
 8013730:	6810      	ldr	r0, [r2, #0]
 8013732:	4698      	mov	r8, r3
 8013734:	4691      	mov	r9, r2
 8013736:	460f      	mov	r7, r1
 8013738:	f7ff ffae 	bl	8013698 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801373c:	a902      	add	r1, sp, #8
 801373e:	2402      	movs	r4, #2
 8013740:	f841 0d08 	str.w	r0, [r1, #-8]!
 8013744:	4640      	mov	r0, r8
 8013746:	f7ff ff79 	bl	801363c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801374a:	6b35      	ldr	r5, [r6, #48]	; 0x30
 801374c:	fb90 f0f4 	sdiv	r0, r0, r4
 8013750:	4405      	add	r5, r0
 8013752:	f8d9 0000 	ldr.w	r0, [r9]
 8013756:	f7ff ffc0 	bl	80136da <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801375a:	a902      	add	r1, sp, #8
 801375c:	f841 0d04 	str.w	r0, [r1, #-4]!
 8013760:	4640      	mov	r0, r8
 8013762:	f7ff ff6b 	bl	801363c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013766:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8013768:	4629      	mov	r1, r5
 801376a:	fb90 f0f4 	sdiv	r0, r0, r4
 801376e:	1a12      	subs	r2, r2, r0
 8013770:	4638      	mov	r0, r7
 8013772:	f00c fe94 	bl	802049e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8013776:	b003      	add	sp, #12
 8013778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801377c <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>:
 801377c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013780:	9e08      	ldr	r6, [sp, #32]
 8013782:	4698      	mov	r8, r3
 8013784:	4615      	mov	r5, r2
 8013786:	460f      	mov	r7, r1
 8013788:	6830      	ldr	r0, [r6, #0]
 801378a:	2402      	movs	r4, #2
 801378c:	f7ff ff84 	bl	8013698 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013790:	a902      	add	r1, sp, #8
 8013792:	f841 0d08 	str.w	r0, [r1, #-8]!
 8013796:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013798:	f7ff ff50 	bl	801363c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801379c:	682d      	ldr	r5, [r5, #0]
 801379e:	fb90 f0f4 	sdiv	r0, r0, r4
 80137a2:	4405      	add	r5, r0
 80137a4:	6830      	ldr	r0, [r6, #0]
 80137a6:	f7ff ff98 	bl	80136da <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80137aa:	a902      	add	r1, sp, #8
 80137ac:	f841 0d04 	str.w	r0, [r1, #-4]!
 80137b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80137b2:	f7ff ff43 	bl	801363c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80137b6:	f8d8 2000 	ldr.w	r2, [r8]
 80137ba:	4629      	mov	r1, r5
 80137bc:	fb90 f0f4 	sdiv	r0, r0, r4
 80137c0:	1a12      	subs	r2, r2, r0
 80137c2:	4638      	mov	r0, r7
 80137c4:	f00c fdfa 	bl	80203bc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80137c8:	b002      	add	sp, #8
 80137ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080137ce <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>:
 80137ce:	b513      	push	{r0, r1, r4, lr}
 80137d0:	e9cd 2300 	strd	r2, r3, [sp]
 80137d4:	f100 0334 	add.w	r3, r0, #52	; 0x34
 80137d8:	f100 0230 	add.w	r2, r0, #48	; 0x30
 80137dc:	f7ff ffce 	bl	801377c <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 80137e0:	b002      	add	sp, #8
 80137e2:	bd10      	pop	{r4, pc}

080137e4 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 80137e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137e6:	680e      	ldr	r6, [r1, #0]
 80137e8:	681f      	ldr	r7, [r3, #0]
 80137ea:	9807      	ldr	r0, [sp, #28]
 80137ec:	42be      	cmp	r6, r7
 80137ee:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 80137f2:	bfb8      	it	lt
 80137f4:	601e      	strlt	r6, [r3, #0]
 80137f6:	680b      	ldr	r3, [r1, #0]
 80137f8:	6829      	ldr	r1, [r5, #0]
 80137fa:	428b      	cmp	r3, r1
 80137fc:	bfc8      	it	gt
 80137fe:	602b      	strgt	r3, [r5, #0]
 8013800:	6813      	ldr	r3, [r2, #0]
 8013802:	6821      	ldr	r1, [r4, #0]
 8013804:	428b      	cmp	r3, r1
 8013806:	bfb8      	it	lt
 8013808:	6023      	strlt	r3, [r4, #0]
 801380a:	6813      	ldr	r3, [r2, #0]
 801380c:	6802      	ldr	r2, [r0, #0]
 801380e:	4293      	cmp	r3, r2
 8013810:	bfc8      	it	gt
 8013812:	6003      	strgt	r3, [r0, #0]
 8013814:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013816 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>:
 8013816:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801381a:	b089      	sub	sp, #36	; 0x24
 801381c:	4690      	mov	r8, r2
 801381e:	4606      	mov	r6, r0
 8013820:	2402      	movs	r4, #2
 8013822:	ad08      	add	r5, sp, #32
 8013824:	6808      	ldr	r0, [r1, #0]
 8013826:	461f      	mov	r7, r3
 8013828:	4689      	mov	r9, r1
 801382a:	f7ff ff35 	bl	8013698 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 801382e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8013832:	4640      	mov	r0, r8
 8013834:	4629      	mov	r1, r5
 8013836:	f7ff ff01 	bl	801363c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801383a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 801383c:	fb90 f0f4 	sdiv	r0, r0, r4
 8013840:	4418      	add	r0, r3
 8013842:	9005      	str	r0, [sp, #20]
 8013844:	f8d9 0000 	ldr.w	r0, [r9]
 8013848:	f7ff ff47 	bl	80136da <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 801384c:	4629      	mov	r1, r5
 801384e:	9007      	str	r0, [sp, #28]
 8013850:	4640      	mov	r0, r8
 8013852:	f7ff fef3 	bl	801363c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013856:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013858:	aa08      	add	r2, sp, #32
 801385a:	a905      	add	r1, sp, #20
 801385c:	fb90 f0f4 	sdiv	r0, r0, r4
 8013860:	6b74      	ldr	r4, [r6, #52]	; 0x34
 8013862:	1a24      	subs	r4, r4, r0
 8013864:	4630      	mov	r0, r6
 8013866:	f842 4d08 	str.w	r4, [r2, #-8]!
 801386a:	9302      	str	r3, [sp, #8]
 801386c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801386e:	9301      	str	r3, [sp, #4]
 8013870:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013872:	9300      	str	r3, [sp, #0]
 8013874:	463b      	mov	r3, r7
 8013876:	f7ff ffb5 	bl	80137e4 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 801387a:	b009      	add	sp, #36	; 0x24
 801387c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08013880 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 8013880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013884:	4291      	cmp	r1, r2
 8013886:	b08d      	sub	sp, #52	; 0x34
 8013888:	461e      	mov	r6, r3
 801388a:	4604      	mov	r4, r0
 801388c:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8013890:	ad0c      	add	r5, sp, #48	; 0x30
 8013892:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
 8013896:	e9cd 2106 	strd	r2, r1, [sp, #24]
 801389a:	bfc8      	it	gt
 801389c:	e9cd 1206 	strdgt	r1, r2, [sp, #24]
 80138a0:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80138a4:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 80138a8:	1a9b      	subs	r3, r3, r2
 80138aa:	a907      	add	r1, sp, #28
 80138ac:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 80138b0:	bfa2      	ittt	ge
 80138b2:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 80138b6:	2200      	movge	r2, #0
 80138b8:	e9cd 3206 	strdge	r3, r2, [sp, #24]
 80138bc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80138be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80138c0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80138c4:	f845 3d04 	str.w	r3, [r5, #-4]!
 80138c8:	4633      	mov	r3, r6
 80138ca:	462a      	mov	r2, r5
 80138cc:	9700      	str	r7, [sp, #0]
 80138ce:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80138d2:	f7ff ffa0 	bl	8013816 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80138d6:	9b07      	ldr	r3, [sp, #28]
 80138d8:	f44f 6034 	mov.w	r0, #2880	; 0xb40
 80138dc:	f103 0120 	add.w	r1, r3, #32
 80138e0:	fb91 f3f0 	sdiv	r3, r1, r0
 80138e4:	fb00 1313 	mls	r3, r0, r3, r1
 80138e8:	1ac3      	subs	r3, r0, r3
 80138ea:	fb93 f2f0 	sdiv	r2, r3, r0
 80138ee:	fb00 3312 	mls	r3, r0, r2, r3
 80138f2:	440b      	add	r3, r1
 80138f4:	f84a 3d0c 	str.w	r3, [sl, #-12]!
 80138f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80138fa:	9906      	ldr	r1, [sp, #24]
 80138fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80138fe:	4291      	cmp	r1, r2
 8013900:	db11      	blt.n	8013926 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xa6>
 8013902:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8013904:	4651      	mov	r1, sl
 8013906:	9700      	str	r7, [sp, #0]
 8013908:	4620      	mov	r0, r4
 801390a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801390e:	462a      	mov	r2, r5
 8013910:	930b      	str	r3, [sp, #44]	; 0x2c
 8013912:	4633      	mov	r3, r6
 8013914:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8013918:	f7ff ff7d 	bl	8013816 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 801391c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801391e:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8013922:	9309      	str	r3, [sp, #36]	; 0x24
 8013924:	e7e8      	b.n	80138f8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x78>
 8013926:	f5a2 6234 	sub.w	r2, r2, #2880	; 0xb40
 801392a:	4291      	cmp	r1, r2
 801392c:	dd0c      	ble.n	8013948 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xc8>
 801392e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8013930:	a906      	add	r1, sp, #24
 8013932:	9700      	str	r7, [sp, #0]
 8013934:	4620      	mov	r0, r4
 8013936:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801393a:	462a      	mov	r2, r5
 801393c:	930b      	str	r3, [sp, #44]	; 0x2c
 801393e:	4633      	mov	r3, r6
 8013940:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8013944:	f7ff ff67 	bl	8013816 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8013948:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801394a:	2b00      	cmp	r3, #0
 801394c:	f040 8097 	bne.w	8013a7e <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1fe>
 8013950:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
 8013954:	1a52      	subs	r2, r2, r1
 8013956:	f5b2 5f34 	cmp.w	r2, #11520	; 0x2d00
 801395a:	da0a      	bge.n	8013972 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xf2>
 801395c:	462a      	mov	r2, r5
 801395e:	a90a      	add	r1, sp, #40	; 0x28
 8013960:	9700      	str	r7, [sp, #0]
 8013962:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8013966:	4633      	mov	r3, r6
 8013968:	e9cd 8901 	strd	r8, r9, [sp, #4]
 801396c:	4620      	mov	r0, r4
 801396e:	f7ff ff52 	bl	8013816 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8013972:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8013976:	2bb3      	cmp	r3, #179	; 0xb3
 8013978:	d87e      	bhi.n	8013a78 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 801397a:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
 801397e:	1a1b      	subs	r3, r3, r0
 8013980:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8013984:	da78      	bge.n	8013a78 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x1f8>
 8013986:	ad0c      	add	r5, sp, #48	; 0x30
 8013988:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 801398c:	f7ff fe84 	bl	8013698 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013990:	f04f 0a02 	mov.w	sl, #2
 8013994:	f845 0d04 	str.w	r0, [r5, #-4]!
 8013998:	4658      	mov	r0, fp
 801399a:	4629      	mov	r1, r5
 801399c:	f7ff fe4e 	bl	801363c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80139a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80139a2:	18c3      	adds	r3, r0, r3
 80139a4:	9807      	ldr	r0, [sp, #28]
 80139a6:	9305      	str	r3, [sp, #20]
 80139a8:	f7ff fe97 	bl	80136da <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80139ac:	4629      	mov	r1, r5
 80139ae:	900b      	str	r0, [sp, #44]	; 0x2c
 80139b0:	4658      	mov	r0, fp
 80139b2:	f7ff fe43 	bl	801363c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80139b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80139b8:	9a05      	ldr	r2, [sp, #20]
 80139ba:	a90a      	add	r1, sp, #40	; 0x28
 80139bc:	1a1b      	subs	r3, r3, r0
 80139be:	9700      	str	r7, [sp, #0]
 80139c0:	4620      	mov	r0, r4
 80139c2:	9304      	str	r3, [sp, #16]
 80139c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80139c6:	fb93 f3fa 	sdiv	r3, r3, sl
 80139ca:	1ad2      	subs	r2, r2, r3
 80139cc:	920a      	str	r2, [sp, #40]	; 0x28
 80139ce:	9a04      	ldr	r2, [sp, #16]
 80139d0:	1ad3      	subs	r3, r2, r3
 80139d2:	462a      	mov	r2, r5
 80139d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80139d6:	4633      	mov	r3, r6
 80139d8:	e9cd 8901 	strd	r8, r9, [sp, #4]
 80139dc:	f7ff ff02 	bl	80137e4 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 80139e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80139e2:	9a05      	ldr	r2, [sp, #20]
 80139e4:	a90a      	add	r1, sp, #40	; 0x28
 80139e6:	4620      	mov	r0, r4
 80139e8:	9700      	str	r7, [sp, #0]
 80139ea:	fb93 f3fa 	sdiv	r3, r3, sl
 80139ee:	189a      	adds	r2, r3, r2
 80139f0:	920a      	str	r2, [sp, #40]	; 0x28
 80139f2:	9a04      	ldr	r2, [sp, #16]
 80139f4:	4413      	add	r3, r2
 80139f6:	462a      	mov	r2, r5
 80139f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80139fa:	4633      	mov	r3, r6
 80139fc:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8013a00:	f7ff fef0 	bl	80137e4 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8013a04:	9806      	ldr	r0, [sp, #24]
 8013a06:	f7ff fe47 	bl	8013698 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013a0a:	4629      	mov	r1, r5
 8013a0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8013a0e:	4658      	mov	r0, fp
 8013a10:	f7ff fe14 	bl	801363c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013a14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013a16:	18c3      	adds	r3, r0, r3
 8013a18:	9806      	ldr	r0, [sp, #24]
 8013a1a:	9304      	str	r3, [sp, #16]
 8013a1c:	f7ff fe5d 	bl	80136da <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8013a20:	4629      	mov	r1, r5
 8013a22:	900b      	str	r0, [sp, #44]	; 0x2c
 8013a24:	4658      	mov	r0, fp
 8013a26:	f7ff fe09 	bl	801363c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013a2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013a2c:	9a04      	ldr	r2, [sp, #16]
 8013a2e:	a90a      	add	r1, sp, #40	; 0x28
 8013a30:	eba3 0b00 	sub.w	fp, r3, r0
 8013a34:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013a36:	4620      	mov	r0, r4
 8013a38:	9700      	str	r7, [sp, #0]
 8013a3a:	fb93 f3fa 	sdiv	r3, r3, sl
 8013a3e:	1ad2      	subs	r2, r2, r3
 8013a40:	ebab 0303 	sub.w	r3, fp, r3
 8013a44:	920a      	str	r2, [sp, #40]	; 0x28
 8013a46:	462a      	mov	r2, r5
 8013a48:	930b      	str	r3, [sp, #44]	; 0x2c
 8013a4a:	4633      	mov	r3, r6
 8013a4c:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8013a50:	f7ff fec8 	bl	80137e4 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8013a54:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013a56:	9700      	str	r7, [sp, #0]
 8013a58:	462a      	mov	r2, r5
 8013a5a:	a90a      	add	r1, sp, #40	; 0x28
 8013a5c:	4620      	mov	r0, r4
 8013a5e:	fb93 fafa 	sdiv	sl, r3, sl
 8013a62:	9b04      	ldr	r3, [sp, #16]
 8013a64:	4453      	add	r3, sl
 8013a66:	930a      	str	r3, [sp, #40]	; 0x28
 8013a68:	eb0a 030b 	add.w	r3, sl, fp
 8013a6c:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8013a70:	930b      	str	r3, [sp, #44]	; 0x2c
 8013a72:	4633      	mov	r3, r6
 8013a74:	f7ff feb6 	bl	80137e4 <_ZNK8touchgfx6Circle14updateMinMaxXYERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8013a78:	b00d      	add	sp, #52	; 0x34
 8013a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8013a80:	a907      	add	r1, sp, #28
 8013a82:	9700      	str	r7, [sp, #0]
 8013a84:	4620      	mov	r0, r4
 8013a86:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8013a8a:	462a      	mov	r2, r5
 8013a8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8013a8e:	4633      	mov	r3, r6
 8013a90:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8013a94:	f7ff febf 	bl	8013816 <_ZNK8touchgfx6Circle14updateMinMaxARERKNS_7CWRUtil2Q5ES4_RS2_S5_S5_S5_>
 8013a98:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8013a9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013a9c:	a906      	add	r1, sp, #24
 8013a9e:	9700      	str	r7, [sp, #0]
 8013aa0:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8013aa4:	462a      	mov	r2, r5
 8013aa6:	930b      	str	r3, [sp, #44]	; 0x2c
 8013aa8:	4633      	mov	r3, r6
 8013aaa:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8013aae:	e75d      	b.n	801396c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xec>

08013ab0 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 8013ab0:	b530      	push	{r4, r5, lr}
 8013ab2:	4604      	mov	r4, r0
 8013ab4:	4608      	mov	r0, r1
 8013ab6:	4611      	mov	r1, r2
 8013ab8:	461a      	mov	r2, r3
 8013aba:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8013abe:	b089      	sub	sp, #36	; 0x24
 8013ac0:	2500      	movs	r5, #0
 8013ac2:	015b      	lsls	r3, r3, #5
 8013ac4:	9505      	str	r5, [sp, #20]
 8013ac6:	9304      	str	r3, [sp, #16]
 8013ac8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013acc:	015b      	lsls	r3, r3, #5
 8013ace:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8013ad2:	ab07      	add	r3, sp, #28
 8013ad4:	2520      	movs	r5, #32
 8013ad6:	9302      	str	r3, [sp, #8]
 8013ad8:	ab06      	add	r3, sp, #24
 8013ada:	9301      	str	r3, [sp, #4]
 8013adc:	ab05      	add	r3, sp, #20
 8013ade:	9300      	str	r3, [sp, #0]
 8013ae0:	ab04      	add	r3, sp, #16
 8013ae2:	f7ff fecd 	bl	8013880 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 8013ae6:	9a04      	ldr	r2, [sp, #16]
 8013ae8:	9805      	ldr	r0, [sp, #20]
 8013aea:	9b06      	ldr	r3, [sp, #24]
 8013aec:	9907      	ldr	r1, [sp, #28]
 8013aee:	fb92 f2f5 	sdiv	r2, r2, r5
 8013af2:	fb90 f0f5 	sdiv	r0, r0, r5
 8013af6:	fb93 f3f5 	sdiv	r3, r3, r5
 8013afa:	fb91 f1f5 	sdiv	r1, r1, r5
 8013afe:	b292      	uxth	r2, r2
 8013b00:	3002      	adds	r0, #2
 8013b02:	b29b      	uxth	r3, r3
 8013b04:	3102      	adds	r1, #2
 8013b06:	1a80      	subs	r0, r0, r2
 8013b08:	3a01      	subs	r2, #1
 8013b0a:	1ac9      	subs	r1, r1, r3
 8013b0c:	3b01      	subs	r3, #1
 8013b0e:	80a0      	strh	r0, [r4, #4]
 8013b10:	4620      	mov	r0, r4
 8013b12:	8022      	strh	r2, [r4, #0]
 8013b14:	8063      	strh	r3, [r4, #2]
 8013b16:	80e1      	strh	r1, [r4, #6]
 8013b18:	b009      	add	sp, #36	; 0x24
 8013b1a:	bd30      	pop	{r4, r5, pc}

08013b1c <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 8013b1c:	b510      	push	{r4, lr}
 8013b1e:	4604      	mov	r4, r0
 8013b20:	e9d1 230f 	ldrd	r2, r3, [r1, #60]	; 0x3c
 8013b24:	f7ff ffc4 	bl	8013ab0 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 8013b28:	4620      	mov	r0, r4
 8013b2a:	bd10      	pop	{r4, pc}

08013b2c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8013b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b30:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8013b32:	b0b8      	sub	sp, #224	; 0xe0
 8013b34:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013b36:	4604      	mov	r4, r0
 8013b38:	9302      	str	r3, [sp, #8]
 8013b3a:	460f      	mov	r7, r1
 8013b3c:	4293      	cmp	r3, r2
 8013b3e:	9203      	str	r2, [sp, #12]
 8013b40:	ae09      	add	r6, sp, #36	; 0x24
 8013b42:	bfc8      	it	gt
 8013b44:	e9cd 2302 	strdgt	r2, r3, [sp, #8]
 8013b48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013b4c:	1a9b      	subs	r3, r3, r2
 8013b4e:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8013b52:	bfa2      	ittt	ge
 8013b54:	2200      	movge	r2, #0
 8013b56:	f44f 5334 	movge.w	r3, #11520	; 0x2d00
 8013b5a:	e9cd 2302 	strdge	r2, r3, [sp, #8]
 8013b5e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013b60:	2a00      	cmp	r2, #0
 8013b62:	d131      	bne.n	8013bc8 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x9c>
 8013b64:	463a      	mov	r2, r7
 8013b66:	4621      	mov	r1, r4
 8013b68:	a80a      	add	r0, sp, #40	; 0x28
 8013b6a:	f00c facf 	bl	802010c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8013b6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8013b70:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013b72:	9204      	str	r2, [sp, #16]
 8013b74:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8013b78:	9305      	str	r3, [sp, #20]
 8013b7a:	dc6f      	bgt.n	8013c5c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x130>
 8013b7c:	9b02      	ldr	r3, [sp, #8]
 8013b7e:	a90a      	add	r1, sp, #40	; 0x28
 8013b80:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 8013b84:	4620      	mov	r0, r4
 8013b86:	9306      	str	r3, [sp, #24]
 8013b88:	016d      	lsls	r5, r5, #5
 8013b8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b8e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8013b92:	aa06      	add	r2, sp, #24
 8013b94:	9309      	str	r3, [sp, #36]	; 0x24
 8013b96:	4633      	mov	r3, r6
 8013b98:	f7ff fdc7 	bl	801372a <_ZNK8touchgfx6Circle9moveToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8013b9c:	9f06      	ldr	r7, [sp, #24]
 8013b9e:	2d00      	cmp	r5, #0
 8013ba0:	d165      	bne.n	8013c6e <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x142>
 8013ba2:	3720      	adds	r7, #32
 8013ba4:	4639      	mov	r1, r7
 8013ba6:	9a03      	ldr	r2, [sp, #12]
 8013ba8:	9b05      	ldr	r3, [sp, #20]
 8013baa:	442f      	add	r7, r5
 8013bac:	4291      	cmp	r1, r2
 8013bae:	dc6b      	bgt.n	8013c88 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x15c>
 8013bb0:	9a04      	ldr	r2, [sp, #16]
 8013bb2:	4620      	mov	r0, r4
 8013bb4:	9106      	str	r1, [sp, #24]
 8013bb6:	a90a      	add	r1, sp, #40	; 0x28
 8013bb8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8013bbc:	aa06      	add	r2, sp, #24
 8013bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8013bc0:	4633      	mov	r3, r6
 8013bc2:	f7ff fe04 	bl	80137ce <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8013bc6:	e7ed      	b.n	8013ba4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8013bc8:	f9b1 c000 	ldrsh.w	ip, [r1]
 8013bcc:	88bd      	ldrh	r5, [r7, #4]
 8013bce:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8013bd2:	4465      	add	r5, ip
 8013bd4:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
 8013bd8:	b22d      	sxth	r5, r5
 8013bda:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
 8013bde:	eba3 134c 	sub.w	r3, r3, ip, lsl #5
 8013be2:	2d00      	cmp	r5, #0
 8013be4:	bfb8      	it	lt
 8013be6:	426d      	neglt	r5, r5
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	bfb8      	it	lt
 8013bec:	425b      	neglt	r3, r3
 8013bee:	429d      	cmp	r5, r3
 8013bf0:	bfb8      	it	lt
 8013bf2:	461d      	movlt	r5, r3
 8013bf4:	88fb      	ldrh	r3, [r7, #6]
 8013bf6:	4403      	add	r3, r0
 8013bf8:	116d      	asrs	r5, r5, #5
 8013bfa:	b21b      	sxth	r3, r3
 8013bfc:	3501      	adds	r5, #1
 8013bfe:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
 8013c02:	eba1 1140 	sub.w	r1, r1, r0, lsl #5
 8013c06:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	f100 0001 	add.w	r0, r0, #1
 8013c10:	bfb8      	it	lt
 8013c12:	425b      	neglt	r3, r3
 8013c14:	2900      	cmp	r1, #0
 8013c16:	ea4f 0060 	mov.w	r0, r0, asr #1
 8013c1a:	bfb8      	it	lt
 8013c1c:	4249      	neglt	r1, r1
 8013c1e:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8013c22:	428b      	cmp	r3, r1
 8013c24:	bfb8      	it	lt
 8013c26:	460b      	movlt	r3, r1
 8013c28:	115b      	asrs	r3, r3, #5
 8013c2a:	3301      	adds	r3, #1
 8013c2c:	435b      	muls	r3, r3
 8013c2e:	fb05 3505 	mla	r5, r5, r5, r3
 8013c32:	2302      	movs	r3, #2
 8013c34:	fb92 f2f3 	sdiv	r2, r2, r3
 8013c38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013c3a:	1a9a      	subs	r2, r3, r2
 8013c3c:	9209      	str	r2, [sp, #36]	; 0x24
 8013c3e:	f7ff fd09 	bl	8013654 <_ZN8touchgfx7CWRUtil4sineEi>
 8013c42:	a90a      	add	r1, sp, #40	; 0x28
 8013c44:	900a      	str	r0, [sp, #40]	; 0x28
 8013c46:	4630      	mov	r0, r6
 8013c48:	f7ff fcf8 	bl	801363c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013c4c:	2320      	movs	r3, #32
 8013c4e:	fb90 f0f3 	sdiv	r0, r0, r3
 8013c52:	4340      	muls	r0, r0
 8013c54:	42a8      	cmp	r0, r5
 8013c56:	dd85      	ble.n	8013b64 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x38>
 8013c58:	2401      	movs	r4, #1
 8013c5a:	e036      	b.n	8013cca <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x19e>
 8013c5c:	2102      	movs	r1, #2
 8013c5e:	fb93 f3f1 	sdiv	r3, r3, r1
 8013c62:	4413      	add	r3, r2
 8013c64:	9305      	str	r3, [sp, #20]
 8013c66:	fb93 f3f1 	sdiv	r3, r3, r1
 8013c6a:	9304      	str	r3, [sp, #16]
 8013c6c:	e786      	b.n	8013b7c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x50>
 8013c6e:	f107 0320 	add.w	r3, r7, #32
 8013c72:	fb93 f7f5 	sdiv	r7, r3, r5
 8013c76:	fb05 3717 	mls	r7, r5, r7, r3
 8013c7a:	1bea      	subs	r2, r5, r7
 8013c7c:	fb92 f7f5 	sdiv	r7, r2, r5
 8013c80:	fb05 2717 	mls	r7, r5, r7, r2
 8013c84:	441f      	add	r7, r3
 8013c86:	e78d      	b.n	8013ba4 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x78>
 8013c88:	9906      	ldr	r1, [sp, #24]
 8013c8a:	428a      	cmp	r2, r1
 8013c8c:	dd09      	ble.n	8013ca2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x176>
 8013c8e:	9a04      	ldr	r2, [sp, #16]
 8013c90:	a90a      	add	r1, sp, #40	; 0x28
 8013c92:	4620      	mov	r0, r4
 8013c94:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8013c98:	aa03      	add	r2, sp, #12
 8013c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8013c9c:	4633      	mov	r3, r6
 8013c9e:	f7ff fd96 	bl	80137ce <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8013ca2:	9a05      	ldr	r2, [sp, #20]
 8013ca4:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 8013ca8:	1ac3      	subs	r3, r0, r3
 8013caa:	b992      	cbnz	r2, 8013cd2 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1a6>
 8013cac:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8013cb0:	da04      	bge.n	8013cbc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8013cb2:	a80a      	add	r0, sp, #40	; 0x28
 8013cb4:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8013cb8:	f00c fb80 	bl	80203bc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8013cbc:	a80a      	add	r0, sp, #40	; 0x28
 8013cbe:	f00c fcf2 	bl	80206a6 <_ZN8touchgfx6Canvas6renderEv>
 8013cc2:	4604      	mov	r4, r0
 8013cc4:	a80a      	add	r0, sp, #40	; 0x28
 8013cc6:	f00c fd2f 	bl	8020728 <_ZN8touchgfx6CanvasD1Ev>
 8013cca:	4620      	mov	r0, r4
 8013ccc:	b038      	add	sp, #224	; 0xe0
 8013cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cd2:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 8013cd6:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8013cda:	ea4f 1747 	mov.w	r7, r7, lsl #5
 8013cde:	da2b      	bge.n	8013d38 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20c>
 8013ce0:	f7ff fcda 	bl	8013698 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013ce4:	4631      	mov	r1, r6
 8013ce6:	9009      	str	r0, [sp, #36]	; 0x24
 8013ce8:	a804      	add	r0, sp, #16
 8013cea:	f7ff fca7 	bl	801363c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013cee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013cf0:	f10d 0814 	add.w	r8, sp, #20
 8013cf4:	4418      	add	r0, r3
 8013cf6:	9007      	str	r0, [sp, #28]
 8013cf8:	9803      	ldr	r0, [sp, #12]
 8013cfa:	f7ff fcee 	bl	80136da <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8013cfe:	4631      	mov	r1, r6
 8013d00:	9009      	str	r0, [sp, #36]	; 0x24
 8013d02:	a804      	add	r0, sp, #16
 8013d04:	f7ff fc9a 	bl	801363c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013d08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013d0a:	1a18      	subs	r0, r3, r0
 8013d0c:	9b03      	ldr	r3, [sp, #12]
 8013d0e:	443b      	add	r3, r7
 8013d10:	9008      	str	r0, [sp, #32]
 8013d12:	9309      	str	r3, [sp, #36]	; 0x24
 8013d14:	9b03      	ldr	r3, [sp, #12]
 8013d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d18:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8013d1c:	4293      	cmp	r3, r2
 8013d1e:	dd0b      	ble.n	8013d38 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x20c>
 8013d20:	ab08      	add	r3, sp, #32
 8013d22:	aa07      	add	r2, sp, #28
 8013d24:	a90a      	add	r1, sp, #40	; 0x28
 8013d26:	4620      	mov	r0, r4
 8013d28:	e9cd 6800 	strd	r6, r8, [sp]
 8013d2c:	f7ff fd26 	bl	801377c <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8013d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d32:	443b      	add	r3, r7
 8013d34:	9309      	str	r3, [sp, #36]	; 0x24
 8013d36:	e7ed      	b.n	8013d14 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e8>
 8013d38:	9a03      	ldr	r2, [sp, #12]
 8013d3a:	9b06      	ldr	r3, [sp, #24]
 8013d3c:	429a      	cmp	r2, r3
 8013d3e:	dd0a      	ble.n	8013d56 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22a>
 8013d40:	a90a      	add	r1, sp, #40	; 0x28
 8013d42:	4620      	mov	r0, r4
 8013d44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013d48:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8013d4c:	aa03      	add	r2, sp, #12
 8013d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8013d50:	4633      	mov	r3, r6
 8013d52:	f7ff fd3c 	bl	80137ce <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8013d56:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8013d5a:	4642      	mov	r2, r8
 8013d5c:	9b02      	ldr	r3, [sp, #8]
 8013d5e:	eba8 0805 	sub.w	r8, r8, r5
 8013d62:	429a      	cmp	r2, r3
 8013d64:	db0c      	blt.n	8013d80 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x254>
 8013d66:	9206      	str	r2, [sp, #24]
 8013d68:	a90a      	add	r1, sp, #40	; 0x28
 8013d6a:	4620      	mov	r0, r4
 8013d6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013d70:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8013d74:	aa06      	add	r2, sp, #24
 8013d76:	9309      	str	r3, [sp, #36]	; 0x24
 8013d78:	4633      	mov	r3, r6
 8013d7a:	f7ff fd28 	bl	80137ce <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8013d7e:	e7ec      	b.n	8013d5a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x22e>
 8013d80:	9a06      	ldr	r2, [sp, #24]
 8013d82:	4293      	cmp	r3, r2
 8013d84:	da0a      	bge.n	8013d9c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x270>
 8013d86:	a90a      	add	r1, sp, #40	; 0x28
 8013d88:	4620      	mov	r0, r4
 8013d8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013d8e:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8013d92:	aa02      	add	r2, sp, #8
 8013d94:	9309      	str	r3, [sp, #36]	; 0x24
 8013d96:	4633      	mov	r3, r6
 8013d98:	f7ff fd19 	bl	80137ce <_ZNK8touchgfx6Circle9lineToAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_>
 8013d9c:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8013da0:	1a1b      	subs	r3, r3, r0
 8013da2:	f5b3 5f34 	cmp.w	r3, #11520	; 0x2d00
 8013da6:	da89      	bge.n	8013cbc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8013da8:	f7ff fc76 	bl	8013698 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8013dac:	4631      	mov	r1, r6
 8013dae:	9009      	str	r0, [sp, #36]	; 0x24
 8013db0:	a804      	add	r0, sp, #16
 8013db2:	f7ff fc43 	bl	801363c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013db6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013db8:	ad05      	add	r5, sp, #20
 8013dba:	4418      	add	r0, r3
 8013dbc:	9007      	str	r0, [sp, #28]
 8013dbe:	9802      	ldr	r0, [sp, #8]
 8013dc0:	f7ff fc8b 	bl	80136da <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8013dc4:	4631      	mov	r1, r6
 8013dc6:	9009      	str	r0, [sp, #36]	; 0x24
 8013dc8:	a804      	add	r0, sp, #16
 8013dca:	f7ff fc37 	bl	801363c <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8013dce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013dd0:	1a18      	subs	r0, r3, r0
 8013dd2:	9b02      	ldr	r3, [sp, #8]
 8013dd4:	f5a3 53b4 	sub.w	r3, r3, #5760	; 0x1680
 8013dd8:	9008      	str	r0, [sp, #32]
 8013dda:	443b      	add	r3, r7
 8013ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8013dde:	9a02      	ldr	r2, [sp, #8]
 8013de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013de2:	429a      	cmp	r2, r3
 8013de4:	f77f af6a 	ble.w	8013cbc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x190>
 8013de8:	ab08      	add	r3, sp, #32
 8013dea:	aa07      	add	r2, sp, #28
 8013dec:	a90a      	add	r1, sp, #40	; 0x28
 8013dee:	4620      	mov	r0, r4
 8013df0:	e9cd 6500 	strd	r6, r5, [sp]
 8013df4:	f7ff fcc2 	bl	801377c <_ZNK8touchgfx6Circle11lineToXYAR2ERNS_6CanvasERKNS_7CWRUtil2Q5ES6_S6_S6_>
 8013df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dfa:	443b      	add	r3, r7
 8013dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8013dfe:	e7ee      	b.n	8013dde <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2b2>

08013e00 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 8013e00:	4413      	add	r3, r2
 8013e02:	7dc2      	ldrb	r2, [r0, #23]
 8013e04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013e08:	4419      	add	r1, r3
 8013e0a:	7a03      	ldrb	r3, [r0, #8]
 8013e0c:	435a      	muls	r2, r3
 8013e0e:	1c53      	adds	r3, r2, #1
 8013e10:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8013e14:	121b      	asrs	r3, r3, #8
 8013e16:	2bff      	cmp	r3, #255	; 0xff
 8013e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e1a:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 8013e1e:	d13e      	bne.n	8013e9e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x9e>
 8013e20:	4427      	add	r7, r4
 8013e22:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013e26:	3103      	adds	r1, #3
 8013e28:	7d86      	ldrb	r6, [r0, #22]
 8013e2a:	2bff      	cmp	r3, #255	; 0xff
 8013e2c:	d10a      	bne.n	8013e44 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x44>
 8013e2e:	f801 6c03 	strb.w	r6, [r1, #-3]
 8013e32:	7d43      	ldrb	r3, [r0, #21]
 8013e34:	f801 3c02 	strb.w	r3, [r1, #-2]
 8013e38:	7d03      	ldrb	r3, [r0, #20]
 8013e3a:	f801 3c01 	strb.w	r3, [r1, #-1]
 8013e3e:	42a7      	cmp	r7, r4
 8013e40:	d1ef      	bne.n	8013e22 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x22>
 8013e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e44:	b29a      	uxth	r2, r3
 8013e46:	43db      	mvns	r3, r3
 8013e48:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8013e4c:	fb16 f602 	smulbb	r6, r6, r2
 8013e50:	b2db      	uxtb	r3, r3
 8013e52:	fb05 6503 	mla	r5, r5, r3, r6
 8013e56:	b2ad      	uxth	r5, r5
 8013e58:	1c6e      	adds	r6, r5, #1
 8013e5a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8013e5e:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 8013e62:	fb16 f603 	smulbb	r6, r6, r3
 8013e66:	122d      	asrs	r5, r5, #8
 8013e68:	f801 5c03 	strb.w	r5, [r1, #-3]
 8013e6c:	7d45      	ldrb	r5, [r0, #21]
 8013e6e:	fb05 6502 	mla	r5, r5, r2, r6
 8013e72:	b2ad      	uxth	r5, r5
 8013e74:	1c6e      	adds	r6, r5, #1
 8013e76:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8013e7a:	122d      	asrs	r5, r5, #8
 8013e7c:	f801 5c02 	strb.w	r5, [r1, #-2]
 8013e80:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8013e84:	7d06      	ldrb	r6, [r0, #20]
 8013e86:	fb15 f303 	smulbb	r3, r5, r3
 8013e8a:	fb06 3202 	mla	r2, r6, r2, r3
 8013e8e:	b292      	uxth	r2, r2
 8013e90:	1c53      	adds	r3, r2, #1
 8013e92:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8013e96:	1212      	asrs	r2, r2, #8
 8013e98:	f801 2c01 	strb.w	r2, [r1, #-1]
 8013e9c:	e7cf      	b.n	8013e3e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3e>
 8013e9e:	b2de      	uxtb	r6, r3
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d0ce      	beq.n	8013e42 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>
 8013ea4:	3103      	adds	r1, #3
 8013ea6:	4427      	add	r7, r4
 8013ea8:	f814 2b01 	ldrb.w	r2, [r4], #1
 8013eac:	3103      	adds	r1, #3
 8013eae:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 8013eb2:	fb02 f306 	mul.w	r3, r2, r6
 8013eb6:	42bc      	cmp	r4, r7
 8013eb8:	f103 0201 	add.w	r2, r3, #1
 8013ebc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8013ec0:	ea4f 2222 	mov.w	r2, r2, asr #8
 8013ec4:	b295      	uxth	r5, r2
 8013ec6:	ea6f 0202 	mvn.w	r2, r2
 8013eca:	b2d3      	uxtb	r3, r2
 8013ecc:	7d82      	ldrb	r2, [r0, #22]
 8013ece:	fb1c fc03 	smulbb	ip, ip, r3
 8013ed2:	fb02 c205 	mla	r2, r2, r5, ip
 8013ed6:	b292      	uxth	r2, r2
 8013ed8:	f102 0c01 	add.w	ip, r2, #1
 8013edc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8013ee0:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 8013ee4:	fb1c fc03 	smulbb	ip, ip, r3
 8013ee8:	ea4f 2222 	mov.w	r2, r2, asr #8
 8013eec:	f801 2c06 	strb.w	r2, [r1, #-6]
 8013ef0:	7d42      	ldrb	r2, [r0, #21]
 8013ef2:	fb02 c205 	mla	r2, r2, r5, ip
 8013ef6:	b292      	uxth	r2, r2
 8013ef8:	f102 0c01 	add.w	ip, r2, #1
 8013efc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8013f00:	ea4f 2222 	mov.w	r2, r2, asr #8
 8013f04:	f801 2c05 	strb.w	r2, [r1, #-5]
 8013f08:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8013f0c:	f890 c014 	ldrb.w	ip, [r0, #20]
 8013f10:	fb12 f303 	smulbb	r3, r2, r3
 8013f14:	fb0c 3305 	mla	r3, ip, r5, r3
 8013f18:	b29b      	uxth	r3, r3
 8013f1a:	f103 0201 	add.w	r2, r3, #1
 8013f1e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8013f22:	ea4f 2323 	mov.w	r3, r3, asr #8
 8013f26:	f801 3c04 	strb.w	r3, [r1, #-4]
 8013f2a:	d1bd      	bne.n	8013ea8 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0xa8>
 8013f2c:	e789      	b.n	8013e42 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x42>

08013f2e <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 8013f2e:	b510      	push	{r4, lr}
 8013f30:	7d04      	ldrb	r4, [r0, #20]
 8013f32:	700c      	strb	r4, [r1, #0]
 8013f34:	7d41      	ldrb	r1, [r0, #21]
 8013f36:	7011      	strb	r1, [r2, #0]
 8013f38:	7d82      	ldrb	r2, [r0, #22]
 8013f3a:	701a      	strb	r2, [r3, #0]
 8013f3c:	9b02      	ldr	r3, [sp, #8]
 8013f3e:	7dc2      	ldrb	r2, [r0, #23]
 8013f40:	2001      	movs	r0, #1
 8013f42:	701a      	strb	r2, [r3, #0]
 8013f44:	bd10      	pop	{r4, pc}

08013f46 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>:
 8013f46:	b570      	push	{r4, r5, r6, lr}
 8013f48:	4616      	mov	r6, r2
 8013f4a:	4604      	mov	r4, r0
 8013f4c:	460d      	mov	r5, r1
 8013f4e:	f7f6 f8df 	bl	800a110 <_ZN8touchgfx3HAL3lcdEv>
 8013f52:	6803      	ldr	r3, [r0, #0]
 8013f54:	4629      	mov	r1, r5
 8013f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f58:	4798      	blx	r3
 8013f5a:	7520      	strb	r0, [r4, #20]
 8013f5c:	f7f6 f8d8 	bl	800a110 <_ZN8touchgfx3HAL3lcdEv>
 8013f60:	6803      	ldr	r3, [r0, #0]
 8013f62:	4629      	mov	r1, r5
 8013f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f66:	4798      	blx	r3
 8013f68:	7560      	strb	r0, [r4, #21]
 8013f6a:	f7f6 f8d1 	bl	800a110 <_ZN8touchgfx3HAL3lcdEv>
 8013f6e:	6803      	ldr	r3, [r0, #0]
 8013f70:	4629      	mov	r1, r5
 8013f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f74:	4798      	blx	r3
 8013f76:	75e6      	strb	r6, [r4, #23]
 8013f78:	75a0      	strb	r0, [r4, #22]
 8013f7a:	bd70      	pop	{r4, r5, r6, pc}

08013f7c <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh>:
 8013f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f7e:	460e      	mov	r6, r1
 8013f80:	4617      	mov	r7, r2
 8013f82:	4604      	mov	r4, r0
 8013f84:	f000 f832 	bl	8013fec <_ZN8touchgfx15AbstractPainterC1Ev>
 8013f88:	4b12      	ldr	r3, [pc, #72]	; (8013fd4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x58>)
 8013f8a:	6023      	str	r3, [r4, #0]
 8013f8c:	f7f6 f8c0 	bl	800a110 <_ZN8touchgfx3HAL3lcdEv>
 8013f90:	6803      	ldr	r3, [r0, #0]
 8013f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f94:	4798      	blx	r3
 8013f96:	1e43      	subs	r3, r0, #1
 8013f98:	425d      	negs	r5, r3
 8013f9a:	415d      	adcs	r5, r3
 8013f9c:	4b0e      	ldr	r3, [pc, #56]	; (8013fd8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x5c>)
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013fa2:	b130      	cbz	r0, 8013fb2 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x36>
 8013fa4:	6803      	ldr	r3, [r0, #0]
 8013fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fa8:	4798      	blx	r3
 8013faa:	2801      	cmp	r0, #1
 8013fac:	bf08      	it	eq
 8013fae:	f045 0501 	orreq.w	r5, r5, #1
 8013fb2:	b92d      	cbnz	r5, 8013fc0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x44>
 8013fb4:	4b09      	ldr	r3, [pc, #36]	; (8013fdc <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x60>)
 8013fb6:	2129      	movs	r1, #41	; 0x29
 8013fb8:	4a09      	ldr	r2, [pc, #36]	; (8013fe0 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x64>)
 8013fba:	480a      	ldr	r0, [pc, #40]	; (8013fe4 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x68>)
 8013fbc:	f00e f9c0 	bl	8022340 <__assert_func>
 8013fc0:	4b09      	ldr	r3, [pc, #36]	; (8013fe8 <_ZN8touchgfx13PainterRGB888C1ENS_9colortypeEh+0x6c>)
 8013fc2:	4620      	mov	r0, r4
 8013fc4:	463a      	mov	r2, r7
 8013fc6:	4631      	mov	r1, r6
 8013fc8:	6023      	str	r3, [r4, #0]
 8013fca:	f7ff ffbc 	bl	8013f46 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeEh>
 8013fce:	4620      	mov	r0, r4
 8013fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fd2:	bf00      	nop
 8013fd4:	080260d8 	.word	0x080260d8
 8013fd8:	2000b260 	.word	0x2000b260
 8013fdc:	08026228 	.word	0x08026228
 8013fe0:	080262ec 	.word	0x080262ec
 8013fe4:	08026286 	.word	0x08026286
 8013fe8:	080262d4 	.word	0x080262d4

08013fec <_ZN8touchgfx15AbstractPainterC1Ev>:
 8013fec:	4a03      	ldr	r2, [pc, #12]	; (8013ffc <_ZN8touchgfx15AbstractPainterC1Ev+0x10>)
 8013fee:	6002      	str	r2, [r0, #0]
 8013ff0:	2200      	movs	r2, #0
 8013ff2:	6042      	str	r2, [r0, #4]
 8013ff4:	22ff      	movs	r2, #255	; 0xff
 8013ff6:	7202      	strb	r2, [r0, #8]
 8013ff8:	4770      	bx	lr
 8013ffa:	bf00      	nop
 8013ffc:	08026330 	.word	0x08026330

08014000 <_ZN8touchgfx15AbstractPainterD1Ev>:
 8014000:	4770      	bx	lr

08014002 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>:
 8014002:	8081      	strh	r1, [r0, #4]
 8014004:	80c2      	strh	r2, [r0, #6]
 8014006:	4770      	bx	lr

08014008 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>:
 8014008:	7201      	strb	r1, [r0, #8]
 801400a:	4770      	bx	lr

0801400c <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 801400c:	6281      	str	r1, [r0, #40]	; 0x28
 801400e:	4770      	bx	lr

08014010 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8014010:	b513      	push	{r0, r1, r4, lr}
 8014012:	6803      	ldr	r3, [r0, #0]
 8014014:	4604      	mov	r4, r0
 8014016:	4601      	mov	r1, r0
 8014018:	4668      	mov	r0, sp
 801401a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801401c:	4798      	blx	r3
 801401e:	6823      	ldr	r3, [r4, #0]
 8014020:	4669      	mov	r1, sp
 8014022:	4620      	mov	r0, r4
 8014024:	691b      	ldr	r3, [r3, #16]
 8014026:	4798      	blx	r3
 8014028:	b002      	add	sp, #8
 801402a:	bd10      	pop	{r4, pc}

0801402c <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 801402c:	b510      	push	{r4, lr}
 801402e:	2200      	movs	r2, #0
 8014030:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8014034:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8014038:	8002      	strh	r2, [r0, #0]
 801403a:	8042      	strh	r2, [r0, #2]
 801403c:	8084      	strh	r4, [r0, #4]
 801403e:	80c1      	strh	r1, [r0, #6]
 8014040:	bd10      	pop	{r4, pc}

08014042 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8014042:	2200      	movs	r2, #0
 8014044:	8002      	strh	r2, [r0, #0]
 8014046:	8042      	strh	r2, [r0, #2]
 8014048:	8082      	strh	r2, [r0, #4]
 801404a:	80c2      	strh	r2, [r0, #6]
 801404c:	4770      	bx	lr
	...

08014050 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 8014050:	b508      	push	{r3, lr}
 8014052:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8014054:	b928      	cbnz	r0, 8014062 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 8014056:	4b03      	ldr	r3, [pc, #12]	; (8014064 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 8014058:	2127      	movs	r1, #39	; 0x27
 801405a:	4a03      	ldr	r2, [pc, #12]	; (8014068 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 801405c:	4803      	ldr	r0, [pc, #12]	; (801406c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 801405e:	f00e f96f 	bl	8022340 <__assert_func>
 8014062:	bd08      	pop	{r3, pc}
 8014064:	0802633c 	.word	0x0802633c
 8014068:	08026420 	.word	0x08026420
 801406c:	08026363 	.word	0x08026363

08014070 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8014070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014074:	b089      	sub	sp, #36	; 0x24
 8014076:	4604      	mov	r4, r0
 8014078:	6808      	ldr	r0, [r1, #0]
 801407a:	f04f 0a00 	mov.w	sl, #0
 801407e:	6849      	ldr	r1, [r1, #4]
 8014080:	ab02      	add	r3, sp, #8
 8014082:	f04f 0b01 	mov.w	fp, #1
 8014086:	c303      	stmia	r3!, {r0, r1}
 8014088:	4b3f      	ldr	r3, [pc, #252]	; (8014188 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x118>)
 801408a:	4621      	mov	r1, r4
 801408c:	a804      	add	r0, sp, #16
 801408e:	781b      	ldrb	r3, [r3, #0]
 8014090:	2b01      	cmp	r3, #1
 8014092:	6823      	ldr	r3, [r4, #0]
 8014094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014096:	bf1f      	itttt	ne
 8014098:	f10d 0906 	addne.w	r9, sp, #6
 801409c:	ae03      	addne	r6, sp, #12
 801409e:	f10d 050e 	addne.w	r5, sp, #14
 80140a2:	f10d 080a 	addne.w	r8, sp, #10
 80140a6:	bf01      	itttt	eq
 80140a8:	f10d 090e 	addeq.w	r9, sp, #14
 80140ac:	f10d 0606 	addeq.w	r6, sp, #6
 80140b0:	ad03      	addeq	r5, sp, #12
 80140b2:	f10d 0808 	addeq.w	r8, sp, #8
 80140b6:	4798      	blx	r3
 80140b8:	f9b5 3000 	ldrsh.w	r3, [r5]
 80140bc:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d056      	beq.n	8014172 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x102>
 80140c4:	4293      	cmp	r3, r2
 80140c6:	bfa8      	it	ge
 80140c8:	4613      	movge	r3, r2
 80140ca:	f8ad 3006 	strh.w	r3, [sp, #6]
 80140ce:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80140d2:	2f00      	cmp	r7, #0
 80140d4:	dd34      	ble.n	8014140 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd0>
 80140d6:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80140da:	f8bd c014 	ldrh.w	ip, [sp, #20]
 80140de:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80140e2:	4484      	add	ip, r0
 80140e4:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80140e8:	f9b6 e000 	ldrsh.w	lr, [r6]
 80140ec:	fa0f fc8c 	sxth.w	ip, ip
 80140f0:	f9b9 1000 	ldrsh.w	r1, [r9]
 80140f4:	f8ad 2018 	strh.w	r2, [sp, #24]
 80140f8:	4562      	cmp	r2, ip
 80140fa:	f8ad 301a 	strh.w	r3, [sp, #26]
 80140fe:	f8ad e01c 	strh.w	lr, [sp, #28]
 8014102:	f8ad 101e 	strh.w	r1, [sp, #30]
 8014106:	da29      	bge.n	801415c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8014108:	4472      	add	r2, lr
 801410a:	b212      	sxth	r2, r2
 801410c:	4290      	cmp	r0, r2
 801410e:	da25      	bge.n	801415c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8014110:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8014114:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8014118:	4402      	add	r2, r0
 801411a:	b212      	sxth	r2, r2
 801411c:	4293      	cmp	r3, r2
 801411e:	da1d      	bge.n	801415c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8014120:	440b      	add	r3, r1
 8014122:	b21b      	sxth	r3, r3
 8014124:	4298      	cmp	r0, r3
 8014126:	da19      	bge.n	801415c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8014128:	6823      	ldr	r3, [r4, #0]
 801412a:	a906      	add	r1, sp, #24
 801412c:	4620      	mov	r0, r4
 801412e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014130:	4798      	blx	r3
 8014132:	b998      	cbnz	r0, 801415c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8014134:	107f      	asrs	r7, r7, #1
 8014136:	f04f 0a01 	mov.w	sl, #1
 801413a:	f8ad 7006 	strh.w	r7, [sp, #6]
 801413e:	e7c6      	b.n	80140ce <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8014140:	d10c      	bne.n	801415c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>
 8014142:	f8ad b006 	strh.w	fp, [sp, #6]
 8014146:	f8b8 2000 	ldrh.w	r2, [r8]
 801414a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801414e:	440a      	add	r2, r1
 8014150:	f8a8 2000 	strh.w	r2, [r8]
 8014154:	882b      	ldrh	r3, [r5, #0]
 8014156:	1a5b      	subs	r3, r3, r1
 8014158:	802b      	strh	r3, [r5, #0]
 801415a:	e7ad      	b.n	80140b8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801415c:	f1ba 0f00 	cmp.w	sl, #0
 8014160:	d0f1      	beq.n	8014146 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8014162:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 8014166:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801416a:	429a      	cmp	r2, r3
 801416c:	bf08      	it	eq
 801416e:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 8014170:	e7e9      	b.n	8014146 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd6>
 8014172:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8014176:	429a      	cmp	r2, r3
 8014178:	bf04      	itt	eq
 801417a:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 801417e:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 8014180:	b009      	add	sp, #36	; 0x24
 8014182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014186:	bf00      	nop
 8014188:	2000b258 	.word	0x2000b258

0801418c <_ZN8touchgfx12CanvasWidgetC1Ev>:
 801418c:	2200      	movs	r2, #0
 801418e:	2101      	movs	r1, #1
 8014190:	8082      	strh	r2, [r0, #4]
 8014192:	80c2      	strh	r2, [r0, #6]
 8014194:	8102      	strh	r2, [r0, #8]
 8014196:	8142      	strh	r2, [r0, #10]
 8014198:	8182      	strh	r2, [r0, #12]
 801419a:	81c2      	strh	r2, [r0, #14]
 801419c:	8202      	strh	r2, [r0, #16]
 801419e:	8242      	strh	r2, [r0, #18]
 80141a0:	61c2      	str	r2, [r0, #28]
 80141a2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80141a6:	6282      	str	r2, [r0, #40]	; 0x28
 80141a8:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80141ac:	4905      	ldr	r1, [pc, #20]	; (80141c4 <_ZN8touchgfx12CanvasWidgetC1Ev+0x38>)
 80141ae:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80141b2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80141b6:	6001      	str	r1, [r0, #0]
 80141b8:	8582      	strh	r2, [r0, #44]	; 0x2c
 80141ba:	22ff      	movs	r2, #255	; 0xff
 80141bc:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 80141c0:	4770      	bx	lr
 80141c2:	bf00      	nop
 80141c4:	080263a8 	.word	0x080263a8

080141c8 <_ZN8touchgfx12CanvasWidgetD1Ev>:
 80141c8:	4770      	bx	lr

080141ca <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80141ca:	b570      	push	{r4, r5, r6, lr}
 80141cc:	790b      	ldrb	r3, [r1, #4]
 80141ce:	4604      	mov	r4, r0
 80141d0:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80141d4:	460e      	mov	r6, r1
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	bf0c      	ite	eq
 80141da:	2301      	moveq	r3, #1
 80141dc:	2300      	movne	r3, #0
 80141de:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 80141e2:	d110      	bne.n	8014206 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80141e4:	b185      	cbz	r5, 8014208 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 80141e6:	7933      	ldrb	r3, [r6, #4]
 80141e8:	2b01      	cmp	r3, #1
 80141ea:	d113      	bne.n	8014214 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 80141ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80141ee:	b188      	cbz	r0, 8014214 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 80141f0:	6803      	ldr	r3, [r0, #0]
 80141f2:	68db      	ldr	r3, [r3, #12]
 80141f4:	4798      	blx	r3
 80141f6:	b168      	cbz	r0, 8014214 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 80141f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80141fa:	4621      	mov	r1, r4
 80141fc:	6803      	ldr	r3, [r0, #0]
 80141fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014202:	689b      	ldr	r3, [r3, #8]
 8014204:	4718      	bx	r3
 8014206:	b12d      	cbz	r5, 8014214 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8014208:	6823      	ldr	r3, [r4, #0]
 801420a:	4620      	mov	r0, r4
 801420c:	695b      	ldr	r3, [r3, #20]
 801420e:	4798      	blx	r3
 8014210:	2d00      	cmp	r5, #0
 8014212:	d1e8      	bne.n	80141e6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8014214:	bd70      	pop	{r4, r5, r6, pc}

08014216 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8014216:	b570      	push	{r4, r5, r6, lr}
 8014218:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801421c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801421e:	4604      	mov	r4, r0
 8014220:	429a      	cmp	r2, r3
 8014222:	d00c      	beq.n	801423e <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 8014224:	f850 3b26 	ldr.w	r3, [r0], #38
 8014228:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801422a:	f7f6 f957 	bl	800a4dc <_ZNK8touchgfx9TypedText7getTextEv>
 801422e:	2300      	movs	r3, #0
 8014230:	4601      	mov	r1, r0
 8014232:	46ac      	mov	ip, r5
 8014234:	4620      	mov	r0, r4
 8014236:	461a      	mov	r2, r3
 8014238:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801423c:	4760      	bx	ip
 801423e:	2000      	movs	r0, #0
 8014240:	bd70      	pop	{r4, r5, r6, pc}

08014242 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8014242:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014244:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014248:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801424a:	429a      	cmp	r2, r3
 801424c:	d016      	beq.n	801427c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 801424e:	f100 0426 	add.w	r4, r0, #38	; 0x26
 8014252:	4620      	mov	r0, r4
 8014254:	f7f5 fb4c 	bl	80098f0 <_ZNK8touchgfx9TypedText7getFontEv>
 8014258:	6803      	ldr	r3, [r0, #0]
 801425a:	4605      	mov	r5, r0
 801425c:	4620      	mov	r0, r4
 801425e:	69de      	ldr	r6, [r3, #28]
 8014260:	f7f5 fb62 	bl	8009928 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8014264:	4607      	mov	r7, r0
 8014266:	4620      	mov	r0, r4
 8014268:	f7f6 f938 	bl	800a4dc <_ZNK8touchgfx9TypedText7getTextEv>
 801426c:	2300      	movs	r3, #0
 801426e:	4602      	mov	r2, r0
 8014270:	4639      	mov	r1, r7
 8014272:	9300      	str	r3, [sp, #0]
 8014274:	4628      	mov	r0, r5
 8014276:	47b0      	blx	r6
 8014278:	b003      	add	sp, #12
 801427a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801427c:	2000      	movs	r0, #0
 801427e:	e7fb      	b.n	8014278 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

08014280 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8014280:	b40e      	push	{r1, r2, r3}
 8014282:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801428a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801428c:	b09b      	sub	sp, #108	; 0x6c
 801428e:	4604      	mov	r4, r0
 8014290:	429a      	cmp	r2, r3
 8014292:	d03f      	beq.n	8014314 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 8014294:	f100 0726 	add.w	r7, r0, #38	; 0x26
 8014298:	ab22      	add	r3, sp, #136	; 0x88
 801429a:	4638      	mov	r0, r7
 801429c:	9303      	str	r3, [sp, #12]
 801429e:	f7f5 fb27 	bl	80098f0 <_ZNK8touchgfx9TypedText7getFontEv>
 80142a2:	6803      	ldr	r3, [r0, #0]
 80142a4:	4680      	mov	r8, r0
 80142a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142a8:	4798      	blx	r3
 80142aa:	4606      	mov	r6, r0
 80142ac:	b205      	sxth	r5, r0
 80142ae:	a804      	add	r0, sp, #16
 80142b0:	f002 ffae 	bl	8017210 <_ZN8touchgfx12TextProviderC1Ev>
 80142b4:	f8d8 3000 	ldr.w	r3, [r8]
 80142b8:	4640      	mov	r0, r8
 80142ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142bc:	4798      	blx	r3
 80142be:	9a03      	ldr	r2, [sp, #12]
 80142c0:	4603      	mov	r3, r0
 80142c2:	9921      	ldr	r1, [sp, #132]	; 0x84
 80142c4:	a804      	add	r0, sp, #16
 80142c6:	f002 ffc0 	bl	801724a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80142ca:	4638      	mov	r0, r7
 80142cc:	f7f5 fb2c 	bl	8009928 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80142d0:	4680      	mov	r8, r0
 80142d2:	4638      	mov	r0, r7
 80142d4:	f7f5 fb0c 	bl	80098f0 <_ZNK8touchgfx9TypedText7getFontEv>
 80142d8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80142dc:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 80142e0:	4642      	mov	r2, r8
 80142e2:	9300      	str	r3, [sp, #0]
 80142e4:	4603      	mov	r3, r0
 80142e6:	a804      	add	r0, sp, #16
 80142e8:	f000 ff4f 	bl	801518a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80142ec:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80142f0:	b203      	sxth	r3, r0
 80142f2:	18a9      	adds	r1, r5, r2
 80142f4:	2900      	cmp	r1, #0
 80142f6:	dd0b      	ble.n	8014310 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 80142f8:	3b01      	subs	r3, #1
 80142fa:	fb13 f302 	smulbb	r3, r3, r2
 80142fe:	fb16 3300 	smlabb	r3, r6, r0, r3
 8014302:	b21d      	sxth	r5, r3
 8014304:	4628      	mov	r0, r5
 8014306:	b01b      	add	sp, #108	; 0x6c
 8014308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801430c:	b003      	add	sp, #12
 801430e:	4770      	bx	lr
 8014310:	2b00      	cmp	r3, #0
 8014312:	dcf7      	bgt.n	8014304 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 8014314:	2500      	movs	r5, #0
 8014316:	e7f5      	b.n	8014304 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>

08014318 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8014318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801431c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014320:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 8014322:	b08d      	sub	sp, #52	; 0x34
 8014324:	4604      	mov	r4, r0
 8014326:	429e      	cmp	r6, r3
 8014328:	4688      	mov	r8, r1
 801432a:	d04b      	beq.n	80143c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 801432c:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8014330:	4628      	mov	r0, r5
 8014332:	f7f5 fadd 	bl	80098f0 <_ZNK8touchgfx9TypedText7getFontEv>
 8014336:	4607      	mov	r7, r0
 8014338:	2800      	cmp	r0, #0
 801433a:	d043      	beq.n	80143c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 801433c:	4628      	mov	r0, r5
 801433e:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8014342:	f7f5 fb09 	bl	8009958 <_ZNK8touchgfx9TypedText11assertValidEv>
 8014346:	4b21      	ldr	r3, [pc, #132]	; (80143cc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 8014348:	4628      	mov	r0, r5
 801434a:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 8014354:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8014358:	785e      	ldrb	r6, [r3, #1]
 801435a:	f7f5 fae5 	bl	8009928 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801435e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014360:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8014364:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8014368:	9309      	str	r3, [sp, #36]	; 0x24
 801436a:	4b19      	ldr	r3, [pc, #100]	; (80143d0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 801436c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8014376:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801437a:	9707      	str	r7, [sp, #28]
 801437c:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8014380:	f88d 6020 	strb.w	r6, [sp, #32]
 8014384:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8014388:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 801438c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8014390:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8014394:	b10a      	cbz	r2, 801439a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 8014396:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8014398:	b906      	cbnz	r6, 801439c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 801439a:	689e      	ldr	r6, [r3, #8]
 801439c:	af05      	add	r7, sp, #20
 801439e:	4621      	mov	r1, r4
 80143a0:	4638      	mov	r0, r7
 80143a2:	f002 f82c 	bl	80163fe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80143a6:	4628      	mov	r0, r5
 80143a8:	f7f6 f898 	bl	800a4dc <_ZNK8touchgfx9TypedText7getTextEv>
 80143ac:	2300      	movs	r3, #0
 80143ae:	9001      	str	r0, [sp, #4]
 80143b0:	4630      	mov	r0, r6
 80143b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80143b6:	ab07      	add	r3, sp, #28
 80143b8:	9300      	str	r3, [sp, #0]
 80143ba:	4643      	mov	r3, r8
 80143bc:	e897 0006 	ldmia.w	r7, {r1, r2}
 80143c0:	f000 fcb0 	bl	8014d24 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80143c4:	b00d      	add	sp, #52	; 0x34
 80143c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143ca:	bf00      	nop
 80143cc:	2000b2f0 	.word	0x2000b2f0
 80143d0:	2000b260 	.word	0x2000b260

080143d4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80143d4:	b570      	push	{r4, r5, r6, lr}
 80143d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80143da:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80143dc:	4604      	mov	r4, r0
 80143de:	429a      	cmp	r2, r3
 80143e0:	d021      	beq.n	8014426 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 80143e2:	6803      	ldr	r3, [r0, #0]
 80143e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143e6:	4798      	blx	r3
 80143e8:	6823      	ldr	r3, [r4, #0]
 80143ea:	4605      	mov	r5, r0
 80143ec:	4620      	mov	r0, r4
 80143ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80143f0:	4798      	blx	r3
 80143f2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80143f6:	4606      	mov	r6, r0
 80143f8:	b22d      	sxth	r5, r5
 80143fa:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80143fe:	6823      	ldr	r3, [r4, #0]
 8014400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014402:	d109      	bne.n	8014418 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 8014404:	4629      	mov	r1, r5
 8014406:	4620      	mov	r0, r4
 8014408:	4798      	blx	r3
 801440a:	6823      	ldr	r3, [r4, #0]
 801440c:	4631      	mov	r1, r6
 801440e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014410:	4620      	mov	r0, r4
 8014412:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014416:	4718      	bx	r3
 8014418:	4601      	mov	r1, r0
 801441a:	4620      	mov	r0, r4
 801441c:	4798      	blx	r3
 801441e:	6823      	ldr	r3, [r4, #0]
 8014420:	4629      	mov	r1, r5
 8014422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014424:	e7f4      	b.n	8014410 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 8014426:	bd70      	pop	{r4, r5, r6, pc}

08014428 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 8014428:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801442c:	84c1      	strh	r1, [r0, #38]	; 0x26
 801442e:	b922      	cbnz	r2, 801443a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8014430:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014434:	b90b      	cbnz	r3, 801443a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 8014436:	f7ff bfcd 	b.w	80143d4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801443a:	4770      	bx	lr

0801443c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 801443c:	b538      	push	{r3, r4, r5, lr}
 801443e:	880b      	ldrh	r3, [r1, #0]
 8014440:	4605      	mov	r5, r0
 8014442:	4604      	mov	r4, r0
 8014444:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8014446:	8813      	ldrh	r3, [r2, #0]
 8014448:	f825 3f30 	strh.w	r3, [r5, #48]!
 801444c:	4628      	mov	r0, r5
 801444e:	f003 fcd7 	bl	8017e00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014452:	8120      	strh	r0, [r4, #8]
 8014454:	4628      	mov	r0, r5
 8014456:	f003 fd0d 	bl	8017e74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801445a:	8160      	strh	r0, [r4, #10]
 801445c:	bd38      	pop	{r3, r4, r5, pc}

0801445e <_ZNK8touchgfx6Button12getSolidRectEv>:
 801445e:	b510      	push	{r4, lr}
 8014460:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8014464:	4604      	mov	r4, r0
 8014466:	2bff      	cmp	r3, #255	; 0xff
 8014468:	d006      	beq.n	8014478 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801446a:	2300      	movs	r3, #0
 801446c:	8003      	strh	r3, [r0, #0]
 801446e:	8043      	strh	r3, [r0, #2]
 8014470:	8083      	strh	r3, [r0, #4]
 8014472:	80c3      	strh	r3, [r0, #6]
 8014474:	4620      	mov	r0, r4
 8014476:	bd10      	pop	{r4, pc}
 8014478:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801447c:	b11b      	cbz	r3, 8014486 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801447e:	3130      	adds	r1, #48	; 0x30
 8014480:	f003 fd32 	bl	8017ee8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8014484:	e7f6      	b.n	8014474 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8014486:	312e      	adds	r1, #46	; 0x2e
 8014488:	e7fa      	b.n	8014480 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0801448c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801448c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014490:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8014494:	b08b      	sub	sp, #44	; 0x2c
 8014496:	4604      	mov	r4, r0
 8014498:	4689      	mov	r9, r1
 801449a:	2b00      	cmp	r3, #0
 801449c:	d043      	beq.n	8014526 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9a>
 801449e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80144a0:	a805      	add	r0, sp, #20
 80144a2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80144a6:	f003 fcab 	bl	8017e00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80144aa:	4607      	mov	r7, r0
 80144ac:	fa0f f880 	sxth.w	r8, r0
 80144b0:	a805      	add	r0, sp, #20
 80144b2:	f003 fcdf 	bl	8017e74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80144b6:	f9b9 6000 	ldrsh.w	r6, [r9]
 80144ba:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 80144be:	2300      	movs	r3, #0
 80144c0:	fa0f fc80 	sxth.w	ip, r0
 80144c4:	4432      	add	r2, r6
 80144c6:	9306      	str	r3, [sp, #24]
 80144c8:	b292      	uxth	r2, r2
 80144ca:	fa0f fe82 	sxth.w	lr, r2
 80144ce:	459e      	cmp	lr, r3
 80144d0:	dd2b      	ble.n	801452a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 80144d2:	45b0      	cmp	r8, r6
 80144d4:	dd29      	ble.n	801452a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 80144d6:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 80144da:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 80144de:	442b      	add	r3, r5
 80144e0:	b29b      	uxth	r3, r3
 80144e2:	b219      	sxth	r1, r3
 80144e4:	2900      	cmp	r1, #0
 80144e6:	dd20      	ble.n	801452a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 80144e8:	45ac      	cmp	ip, r5
 80144ea:	dd1e      	ble.n	801452a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 80144ec:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80144f0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80144f4:	45f0      	cmp	r8, lr
 80144f6:	bfb8      	it	lt
 80144f8:	463a      	movlt	r2, r7
 80144fa:	458c      	cmp	ip, r1
 80144fc:	bfb8      	it	lt
 80144fe:	4603      	movlt	r3, r0
 8014500:	f8ad 6018 	strh.w	r6, [sp, #24]
 8014504:	1b92      	subs	r2, r2, r6
 8014506:	1b5b      	subs	r3, r3, r5
 8014508:	f8ad 501a 	strh.w	r5, [sp, #26]
 801450c:	f8ad 201c 	strh.w	r2, [sp, #28]
 8014510:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014514:	4b1d      	ldr	r3, [pc, #116]	; (801458c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>)
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	b953      	cbnz	r3, 8014530 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa4>
 801451a:	4b1d      	ldr	r3, [pc, #116]	; (8014590 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x104>)
 801451c:	21b8      	movs	r1, #184	; 0xb8
 801451e:	4a1d      	ldr	r2, [pc, #116]	; (8014594 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8014520:	481d      	ldr	r0, [pc, #116]	; (8014598 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8014522:	f00d ff0d 	bl	8022340 <__assert_func>
 8014526:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8014528:	e7ba      	b.n	80144a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801452a:	2300      	movs	r3, #0
 801452c:	9307      	str	r3, [sp, #28]
 801452e:	e7f1      	b.n	8014514 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x88>
 8014530:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8014534:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014538:	429a      	cmp	r2, r3
 801453a:	d024      	beq.n	8014586 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 801453c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8014540:	b30b      	cbz	r3, 8014586 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 8014542:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8014546:	b1f3      	cbz	r3, 8014586 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 8014548:	2300      	movs	r3, #0
 801454a:	a908      	add	r1, sp, #32
 801454c:	4620      	mov	r0, r4
 801454e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8014552:	6823      	ldr	r3, [r4, #0]
 8014554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014556:	4798      	blx	r3
 8014558:	4b10      	ldr	r3, [pc, #64]	; (801459c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8014560:	b10a      	cbz	r2, 8014566 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8014562:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014564:	b900      	cbnz	r0, 8014568 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xdc>
 8014566:	6898      	ldr	r0, [r3, #8]
 8014568:	2501      	movs	r5, #1
 801456a:	6801      	ldr	r1, [r0, #0]
 801456c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8014570:	9502      	str	r5, [sp, #8]
 8014572:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8014576:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801457a:	9401      	str	r4, [sp, #4]
 801457c:	ac06      	add	r4, sp, #24
 801457e:	9400      	str	r4, [sp, #0]
 8014580:	68cc      	ldr	r4, [r1, #12]
 8014582:	a905      	add	r1, sp, #20
 8014584:	47a0      	blx	r4
 8014586:	b00b      	add	sp, #44	; 0x2c
 8014588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801458c:	2000b328 	.word	0x2000b328
 8014590:	08026558 	.word	0x08026558
 8014594:	0802662c 	.word	0x0802662c
 8014598:	08026594 	.word	0x08026594
 801459c:	2000b260 	.word	0x2000b260

080145a0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 80145a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80145a8:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 80145aa:	b08d      	sub	sp, #52	; 0x34
 80145ac:	4604      	mov	r4, r0
 80145ae:	429e      	cmp	r6, r3
 80145b0:	460f      	mov	r7, r1
 80145b2:	d048      	beq.n	8014646 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 80145b4:	f100 0526 	add.w	r5, r0, #38	; 0x26
 80145b8:	4628      	mov	r0, r5
 80145ba:	f7f5 f999 	bl	80098f0 <_ZNK8touchgfx9TypedText7getFontEv>
 80145be:	4680      	mov	r8, r0
 80145c0:	2800      	cmp	r0, #0
 80145c2:	d040      	beq.n	8014646 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 80145c4:	4628      	mov	r0, r5
 80145c6:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 80145ca:	f7f5 f9c5 	bl	8009958 <_ZNK8touchgfx9TypedText11assertValidEv>
 80145ce:	4b1f      	ldr	r3, [pc, #124]	; (801464c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 80145d0:	4628      	mov	r0, r5
 80145d2:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 80145dc:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80145e0:	785e      	ldrb	r6, [r3, #1]
 80145e2:	f7f5 f9a1 	bl	8009928 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80145e6:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80145ea:	f3c6 0601 	ubfx	r6, r6, #0, #2
 80145ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80145f0:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80145f4:	f88d 6020 	strb.w	r6, [sp, #32]
 80145f8:	ae05      	add	r6, sp, #20
 80145fa:	9309      	str	r3, [sp, #36]	; 0x24
 80145fc:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8014600:	f8cd 801c 	str.w	r8, [sp, #28]
 8014604:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8014608:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 801460c:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8014610:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8014614:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8014618:	f7f5 fd7a 	bl	800a110 <_ZN8touchgfx3HAL3lcdEv>
 801461c:	4621      	mov	r1, r4
 801461e:	4680      	mov	r8, r0
 8014620:	4630      	mov	r0, r6
 8014622:	f001 feec 	bl	80163fe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014626:	4628      	mov	r0, r5
 8014628:	f7f5 ff58 	bl	800a4dc <_ZNK8touchgfx9TypedText7getTextEv>
 801462c:	2300      	movs	r3, #0
 801462e:	9303      	str	r3, [sp, #12]
 8014630:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014632:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8014636:	ab07      	add	r3, sp, #28
 8014638:	4640      	mov	r0, r8
 801463a:	9300      	str	r3, [sp, #0]
 801463c:	463b      	mov	r3, r7
 801463e:	e896 0006 	ldmia.w	r6, {r1, r2}
 8014642:	f000 fb6f 	bl	8014d24 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8014646:	b00d      	add	sp, #52	; 0x34
 8014648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801464c:	2000b2f0 	.word	0x2000b2f0

08014650 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 8014650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014654:	461c      	mov	r4, r3
 8014656:	4606      	mov	r6, r0
 8014658:	9f06      	ldr	r7, [sp, #24]
 801465a:	f7ff feef 	bl	801443c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 801465e:	8823      	ldrh	r3, [r4, #0]
 8014660:	f04f 0802 	mov.w	r8, #2
 8014664:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 8014668:	4638      	mov	r0, r7
 801466a:	86b3      	strh	r3, [r6, #52]	; 0x34
 801466c:	883b      	ldrh	r3, [r7, #0]
 801466e:	fb95 f5f8 	sdiv	r5, r5, r8
 8014672:	86f3      	strh	r3, [r6, #54]	; 0x36
 8014674:	b2ad      	uxth	r5, r5
 8014676:	f003 fbc3 	bl	8017e00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801467a:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 801467e:	eba5 0050 	sub.w	r0, r5, r0, lsr #1
 8014682:	fb94 f4f8 	sdiv	r4, r4, r8
 8014686:	b2a4      	uxth	r4, r4
 8014688:	8730      	strh	r0, [r6, #56]	; 0x38
 801468a:	4638      	mov	r0, r7
 801468c:	f003 fbf2 	bl	8017e74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014690:	eba4 0050 	sub.w	r0, r4, r0, lsr #1
 8014694:	8770      	strh	r0, [r6, #58]	; 0x3a
 8014696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801469c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 801469c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146a0:	4604      	mov	r4, r0
 80146a2:	b08c      	sub	sp, #48	; 0x30
 80146a4:	460d      	mov	r5, r1
 80146a6:	f7ff fef1 	bl	801448c <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 80146aa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80146ae:	b33b      	cbz	r3, 8014700 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x64>
 80146b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80146b2:	a805      	add	r0, sp, #20
 80146b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80146b8:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	; 0x38
 80146bc:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	; 0x3a
 80146c0:	f003 fb9e 	bl	8017e00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80146c4:	4606      	mov	r6, r0
 80146c6:	a805      	add	r0, sp, #20
 80146c8:	f003 fbd4 	bl	8017e74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80146cc:	6869      	ldr	r1, [r5, #4]
 80146ce:	f8ad 001e 	strh.w	r0, [sp, #30]
 80146d2:	ab08      	add	r3, sp, #32
 80146d4:	6828      	ldr	r0, [r5, #0]
 80146d6:	ad08      	add	r5, sp, #32
 80146d8:	f8ad 8018 	strh.w	r8, [sp, #24]
 80146dc:	f8ad 701a 	strh.w	r7, [sp, #26]
 80146e0:	f8ad 601c 	strh.w	r6, [sp, #28]
 80146e4:	c303      	stmia	r3!, {r0, r1}
 80146e6:	a906      	add	r1, sp, #24
 80146e8:	4628      	mov	r0, r5
 80146ea:	f7fd fc73 	bl	8011fd4 <_ZN8touchgfx4RectaNERKS0_>
 80146ee:	4b24      	ldr	r3, [pc, #144]	; (8014780 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe4>)
 80146f0:	681b      	ldr	r3, [r3, #0]
 80146f2:	b93b      	cbnz	r3, 8014704 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x68>
 80146f4:	4b23      	ldr	r3, [pc, #140]	; (8014784 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe8>)
 80146f6:	21b8      	movs	r1, #184	; 0xb8
 80146f8:	4a23      	ldr	r2, [pc, #140]	; (8014788 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xec>)
 80146fa:	4824      	ldr	r0, [pc, #144]	; (801478c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf0>)
 80146fc:	f00d fe20 	bl	8022340 <__assert_func>
 8014700:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8014702:	e7d6      	b.n	80146b2 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x16>
 8014704:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8014708:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801470c:	429a      	cmp	r2, r3
 801470e:	d034      	beq.n	801477a <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xde>
 8014710:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8014714:	2b00      	cmp	r3, #0
 8014716:	d030      	beq.n	801477a <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xde>
 8014718:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801471c:	b36b      	cbz	r3, 801477a <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xde>
 801471e:	2300      	movs	r3, #0
 8014720:	a90a      	add	r1, sp, #40	; 0x28
 8014722:	4620      	mov	r0, r4
 8014724:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8014728:	6823      	ldr	r3, [r4, #0]
 801472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801472c:	4798      	blx	r3
 801472e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014732:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8014734:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8014738:	1a9b      	subs	r3, r3, r2
 801473a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801473e:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8014740:	1ac9      	subs	r1, r1, r3
 8014742:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8014746:	4912      	ldr	r1, [pc, #72]	; (8014790 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf4>)
 8014748:	6809      	ldr	r1, [r1, #0]
 801474a:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
 801474e:	b108      	cbz	r0, 8014754 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xb8>
 8014750:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8014752:	b900      	cbnz	r0, 8014756 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xba>
 8014754:	6888      	ldr	r0, [r1, #8]
 8014756:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 801475a:	2601      	movs	r6, #1
 801475c:	440b      	add	r3, r1
 801475e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8014762:	440a      	add	r2, r1
 8014764:	6801      	ldr	r1, [r0, #0]
 8014766:	9602      	str	r6, [sp, #8]
 8014768:	b21b      	sxth	r3, r3
 801476a:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801476e:	b212      	sxth	r2, r2
 8014770:	e9cd 5400 	strd	r5, r4, [sp]
 8014774:	68cc      	ldr	r4, [r1, #12]
 8014776:	a905      	add	r1, sp, #20
 8014778:	47a0      	blx	r4
 801477a:	b00c      	add	sp, #48	; 0x30
 801477c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014780:	2000b328 	.word	0x2000b328
 8014784:	08026558 	.word	0x08026558
 8014788:	08026750 	.word	0x08026750
 801478c:	08026594 	.word	0x08026594
 8014790:	2000b260 	.word	0x2000b260

08014794 <_ZN8touchgfx14ButtonWithIconC1Ev>:
 8014794:	2101      	movs	r1, #1
 8014796:	2200      	movs	r2, #0
 8014798:	b510      	push	{r4, lr}
 801479a:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801479e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80147a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80147a6:	4c0c      	ldr	r4, [pc, #48]	; (80147d8 <_ZN8touchgfx14ButtonWithIconC1Ev+0x44>)
 80147a8:	8082      	strh	r2, [r0, #4]
 80147aa:	80c2      	strh	r2, [r0, #6]
 80147ac:	8102      	strh	r2, [r0, #8]
 80147ae:	8142      	strh	r2, [r0, #10]
 80147b0:	8182      	strh	r2, [r0, #12]
 80147b2:	81c2      	strh	r2, [r0, #14]
 80147b4:	8202      	strh	r2, [r0, #16]
 80147b6:	8242      	strh	r2, [r0, #18]
 80147b8:	61c2      	str	r2, [r0, #28]
 80147ba:	6282      	str	r2, [r0, #40]	; 0x28
 80147bc:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 80147c0:	85c1      	strh	r1, [r0, #46]	; 0x2e
 80147c2:	8601      	strh	r1, [r0, #48]	; 0x30
 80147c4:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 80147c8:	6004      	str	r4, [r0, #0]
 80147ca:	8681      	strh	r1, [r0, #52]	; 0x34
 80147cc:	86c1      	strh	r1, [r0, #54]	; 0x36
 80147ce:	8702      	strh	r2, [r0, #56]	; 0x38
 80147d0:	8742      	strh	r2, [r0, #58]	; 0x3a
 80147d2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80147d6:	bd10      	pop	{r4, pc}
 80147d8:	080266e4 	.word	0x080266e4

080147dc <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80147dc:	b570      	push	{r4, r5, r6, lr}
 80147de:	4605      	mov	r5, r0
 80147e0:	880b      	ldrh	r3, [r1, #0]
 80147e2:	4604      	mov	r4, r0
 80147e4:	84c3      	strh	r3, [r0, #38]	; 0x26
 80147e6:	f855 3b26 	ldr.w	r3, [r5], #38
 80147ea:	4628      	mov	r0, r5
 80147ec:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 80147ee:	f003 fb07 	bl	8017e00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80147f2:	b201      	sxth	r1, r0
 80147f4:	4620      	mov	r0, r4
 80147f6:	47b0      	blx	r6
 80147f8:	6823      	ldr	r3, [r4, #0]
 80147fa:	4628      	mov	r0, r5
 80147fc:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 80147fe:	f003 fb39 	bl	8017e74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014802:	b201      	sxth	r1, r0
 8014804:	4620      	mov	r0, r4
 8014806:	47b0      	blx	r6
 8014808:	4628      	mov	r0, r5
 801480a:	f003 fbc7 	bl	8017f9c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801480e:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 8014812:	bd70      	pop	{r4, r5, r6, pc}

08014814 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8014814:	b510      	push	{r4, lr}
 8014816:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801481a:	4604      	mov	r4, r0
 801481c:	2bff      	cmp	r3, #255	; 0xff
 801481e:	d006      	beq.n	801482e <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8014820:	2300      	movs	r3, #0
 8014822:	8003      	strh	r3, [r0, #0]
 8014824:	8043      	strh	r3, [r0, #2]
 8014826:	8083      	strh	r3, [r0, #4]
 8014828:	80c3      	strh	r3, [r0, #6]
 801482a:	4620      	mov	r0, r4
 801482c:	bd10      	pop	{r4, pc}
 801482e:	3126      	adds	r1, #38	; 0x26
 8014830:	f003 fb5a 	bl	8017ee8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8014834:	e7f9      	b.n	801482a <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08014838 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8014838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801483c:	4604      	mov	r4, r0
 801483e:	b088      	sub	sp, #32
 8014840:	2500      	movs	r5, #0
 8014842:	460f      	mov	r7, r1
 8014844:	f854 3b26 	ldr.w	r3, [r4], #38
 8014848:	a904      	add	r1, sp, #16
 801484a:	4606      	mov	r6, r0
 801484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801484e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014852:	4798      	blx	r3
 8014854:	4620      	mov	r0, r4
 8014856:	f003 fad3 	bl	8017e00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801485a:	4680      	mov	r8, r0
 801485c:	4620      	mov	r0, r4
 801485e:	f003 fb09 	bl	8017e74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014862:	9506      	str	r5, [sp, #24]
 8014864:	ad06      	add	r5, sp, #24
 8014866:	f8ad 001e 	strh.w	r0, [sp, #30]
 801486a:	4639      	mov	r1, r7
 801486c:	f8ad 801c 	strh.w	r8, [sp, #28]
 8014870:	4628      	mov	r0, r5
 8014872:	f7fd fbaf 	bl	8011fd4 <_ZN8touchgfx4RectaNERKS0_>
 8014876:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801487a:	b1c3      	cbz	r3, 80148ae <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 801487c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8014880:	b1ab      	cbz	r3, 80148ae <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 8014882:	4b0c      	ldr	r3, [pc, #48]	; (80148b4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801488a:	b10a      	cbz	r2, 8014890 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 801488c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801488e:	b900      	cbnz	r0, 8014892 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 8014890:	6898      	ldr	r0, [r3, #8]
 8014892:	2701      	movs	r7, #1
 8014894:	6801      	ldr	r1, [r0, #0]
 8014896:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801489a:	9702      	str	r7, [sp, #8]
 801489c:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80148a0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80148a4:	e9cd 5600 	strd	r5, r6, [sp]
 80148a8:	68cd      	ldr	r5, [r1, #12]
 80148aa:	4621      	mov	r1, r4
 80148ac:	47a8      	blx	r5
 80148ae:	b008      	add	sp, #32
 80148b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148b4:	2000b260 	.word	0x2000b260

080148b8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 80148b8:	4b02      	ldr	r3, [pc, #8]	; (80148c4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 80148ba:	6018      	str	r0, [r3, #0]
 80148bc:	4b02      	ldr	r3, [pc, #8]	; (80148c8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 80148be:	6019      	str	r1, [r3, #0]
 80148c0:	4770      	bx	lr
 80148c2:	bf00      	nop
 80148c4:	2000b268 	.word	0x2000b268
 80148c8:	2000b27c 	.word	0x2000b27c

080148cc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 80148cc:	b538      	push	{r3, r4, r5, lr}
 80148ce:	4c2b      	ldr	r4, [pc, #172]	; (801497c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 80148d0:	4b2b      	ldr	r3, [pc, #172]	; (8014980 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 80148d2:	6821      	ldr	r1, [r4, #0]
 80148d4:	681a      	ldr	r2, [r3, #0]
 80148d6:	4281      	cmp	r1, r0
 80148d8:	4d2a      	ldr	r5, [pc, #168]	; (8014984 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 80148da:	492b      	ldr	r1, [pc, #172]	; (8014988 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 80148dc:	d108      	bne.n	80148f0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80148de:	682b      	ldr	r3, [r5, #0]
 80148e0:	4293      	cmp	r3, r2
 80148e2:	d105      	bne.n	80148f0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80148e4:	6808      	ldr	r0, [r1, #0]
 80148e6:	280f      	cmp	r0, #15
 80148e8:	bf94      	ite	ls
 80148ea:	2000      	movls	r0, #0
 80148ec:	2001      	movhi	r0, #1
 80148ee:	bd38      	pop	{r3, r4, r5, pc}
 80148f0:	4b26      	ldr	r3, [pc, #152]	; (801498c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 80148f2:	6020      	str	r0, [r4, #0]
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	602a      	str	r2, [r5, #0]
 80148f8:	4298      	cmp	r0, r3
 80148fa:	d905      	bls.n	8014908 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 80148fc:	4b24      	ldr	r3, [pc, #144]	; (8014990 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 80148fe:	2137      	movs	r1, #55	; 0x37
 8014900:	4a24      	ldr	r2, [pc, #144]	; (8014994 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8014902:	4825      	ldr	r0, [pc, #148]	; (8014998 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8014904:	f00d fd1c 	bl	8022340 <__assert_func>
 8014908:	f010 0403 	ands.w	r4, r0, #3
 801490c:	bf1f      	itttt	ne
 801490e:	f1c4 0504 	rsbne	r5, r4, #4
 8014912:	3b04      	subne	r3, #4
 8014914:	1952      	addne	r2, r2, r5
 8014916:	191b      	addne	r3, r3, r4
 8014918:	4d20      	ldr	r5, [pc, #128]	; (801499c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 801491a:	4402      	add	r2, r0
 801491c:	1a1b      	subs	r3, r3, r0
 801491e:	3001      	adds	r0, #1
 8014920:	602a      	str	r2, [r5, #0]
 8014922:	f020 0401 	bic.w	r4, r0, #1
 8014926:	42a3      	cmp	r3, r4
 8014928:	d203      	bcs.n	8014932 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 801492a:	4b19      	ldr	r3, [pc, #100]	; (8014990 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 801492c:	214a      	movs	r1, #74	; 0x4a
 801492e:	4a19      	ldr	r2, [pc, #100]	; (8014994 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8014930:	e7e7      	b.n	8014902 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8014932:	f010 0002 	ands.w	r0, r0, #2
 8014936:	bf1f      	itttt	ne
 8014938:	f1c0 0504 	rsbne	r5, r0, #4
 801493c:	1952      	addne	r2, r2, r5
 801493e:	1f05      	subne	r5, r0, #4
 8014940:	195b      	addne	r3, r3, r5
 8014942:	4422      	add	r2, r4
 8014944:	4d16      	ldr	r5, [pc, #88]	; (80149a0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 8014946:	1b1b      	subs	r3, r3, r4
 8014948:	602a      	str	r2, [r5, #0]
 801494a:	429c      	cmp	r4, r3
 801494c:	d903      	bls.n	8014956 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 801494e:	4b10      	ldr	r3, [pc, #64]	; (8014990 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8014950:	215d      	movs	r1, #93	; 0x5d
 8014952:	4a10      	ldr	r2, [pc, #64]	; (8014994 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8014954:	e7d5      	b.n	8014902 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8014956:	b120      	cbz	r0, 8014962 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 8014958:	f1c0 0504 	rsb	r5, r0, #4
 801495c:	3804      	subs	r0, #4
 801495e:	442a      	add	r2, r5
 8014960:	4403      	add	r3, r0
 8014962:	1b1b      	subs	r3, r3, r4
 8014964:	4422      	add	r2, r4
 8014966:	480f      	ldr	r0, [pc, #60]	; (80149a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 8014968:	2b0f      	cmp	r3, #15
 801496a:	600b      	str	r3, [r1, #0]
 801496c:	6002      	str	r2, [r0, #0]
 801496e:	d803      	bhi.n	8014978 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8014970:	4b0d      	ldr	r3, [pc, #52]	; (80149a8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 8014972:	2170      	movs	r1, #112	; 0x70
 8014974:	4a07      	ldr	r2, [pc, #28]	; (8014994 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8014976:	e7c4      	b.n	8014902 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8014978:	2001      	movs	r0, #1
 801497a:	e7b8      	b.n	80148ee <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 801497c:	2000b270 	.word	0x2000b270
 8014980:	2000b268 	.word	0x2000b268
 8014984:	2000b278 	.word	0x2000b278
 8014988:	2000b280 	.word	0x2000b280
 801498c:	2000b27c 	.word	0x2000b27c
 8014990:	080267f0 	.word	0x080267f0
 8014994:	080268b8 	.word	0x080268b8
 8014998:	08026829 	.word	0x08026829
 801499c:	2000b284 	.word	0x2000b284
 80149a0:	2000b274 	.word	0x2000b274
 80149a4:	2000b26c 	.word	0x2000b26c
 80149a8:	08026873 	.word	0x08026873

080149ac <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 80149ac:	4b04      	ldr	r3, [pc, #16]	; (80149c0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 80149ae:	6818      	ldr	r0, [r3, #0]
 80149b0:	b120      	cbz	r0, 80149bc <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 80149b2:	4b04      	ldr	r3, [pc, #16]	; (80149c4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 80149b4:	6818      	ldr	r0, [r3, #0]
 80149b6:	3000      	adds	r0, #0
 80149b8:	bf18      	it	ne
 80149ba:	2001      	movne	r0, #1
 80149bc:	4770      	bx	lr
 80149be:	bf00      	nop
 80149c0:	2000b268 	.word	0x2000b268
 80149c4:	2000b27c 	.word	0x2000b27c

080149c8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 80149c8:	4b01      	ldr	r3, [pc, #4]	; (80149d0 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 80149ca:	6818      	ldr	r0, [r3, #0]
 80149cc:	4770      	bx	lr
 80149ce:	bf00      	nop
 80149d0:	2000b270 	.word	0x2000b270

080149d4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 80149d4:	4b01      	ldr	r3, [pc, #4]	; (80149dc <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 80149d6:	6818      	ldr	r0, [r3, #0]
 80149d8:	4770      	bx	lr
 80149da:	bf00      	nop
 80149dc:	2000b278 	.word	0x2000b278

080149e0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 80149e0:	4b01      	ldr	r3, [pc, #4]	; (80149e8 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 80149e2:	6818      	ldr	r0, [r3, #0]
 80149e4:	4770      	bx	lr
 80149e6:	bf00      	nop
 80149e8:	2000b284 	.word	0x2000b284

080149ec <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 80149ec:	4b01      	ldr	r3, [pc, #4]	; (80149f4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 80149ee:	6818      	ldr	r0, [r3, #0]
 80149f0:	4770      	bx	lr
 80149f2:	bf00      	nop
 80149f4:	2000b274 	.word	0x2000b274

080149f8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80149f8:	4b01      	ldr	r3, [pc, #4]	; (8014a00 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80149fa:	6818      	ldr	r0, [r3, #0]
 80149fc:	4770      	bx	lr
 80149fe:	bf00      	nop
 8014a00:	2000b26c 	.word	0x2000b26c

08014a04 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8014a04:	4b01      	ldr	r3, [pc, #4]	; (8014a0c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8014a06:	6818      	ldr	r0, [r3, #0]
 8014a08:	4770      	bx	lr
 8014a0a:	bf00      	nop
 8014a0c:	2000b280 	.word	0x2000b280

08014a10 <_ZN8touchgfx3LCD4initEv>:
 8014a10:	4770      	bx	lr

08014a12 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8014a12:	2000      	movs	r0, #0
 8014a14:	4770      	bx	lr

08014a16 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8014a16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a1a:	b091      	sub	sp, #68	; 0x44
 8014a1c:	4699      	mov	r9, r3
 8014a1e:	4617      	mov	r7, r2
 8014a20:	2500      	movs	r5, #0
 8014a22:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8014a26:	4680      	mov	r8, r0
 8014a28:	a80e      	add	r0, sp, #56	; 0x38
 8014a2a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8014a2c:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 8014a30:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 8014a34:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8014a38:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8014a3c:	910d      	str	r1, [sp, #52]	; 0x34
 8014a3e:	950e      	str	r5, [sp, #56]	; 0x38
 8014a40:	f000 fe3a 	bl	80156b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014a44:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014a46:	f8d9 6000 	ldr.w	r6, [r9]
 8014a4a:	6818      	ldr	r0, [r3, #0]
 8014a4c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014a4e:	f9b4 b000 	ldrsh.w	fp, [r4]
 8014a52:	1b80      	subs	r0, r0, r6
 8014a54:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014a58:	eb02 0c06 	add.w	ip, r2, r6
 8014a5c:	ebab 0e0c 	sub.w	lr, fp, ip
 8014a60:	4570      	cmp	r0, lr
 8014a62:	f340 80bc 	ble.w	8014bde <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8014a66:	88a1      	ldrh	r1, [r4, #4]
 8014a68:	4459      	add	r1, fp
 8014a6a:	b209      	sxth	r1, r1
 8014a6c:	458c      	cmp	ip, r1
 8014a6e:	f300 80b6 	bgt.w	8014bde <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8014a72:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 8014a76:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 8014a7a:	4283      	cmp	r3, r0
 8014a7c:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 8014a80:	edd9 6a07 	vldr	s13, [r9, #28]
 8014a84:	bfa8      	it	ge
 8014a86:	4603      	movge	r3, r0
 8014a88:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 8014a8c:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 8014a90:	45e3      	cmp	fp, ip
 8014a92:	ee07 3a90 	vmov	s15, r3
 8014a96:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8014a9a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8014a9e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8014aa2:	ee65 4a24 	vmul.f32	s9, s10, s9
 8014aa6:	ee25 5a27 	vmul.f32	s10, s10, s15
 8014aaa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014aae:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8014ab2:	ee32 1a05 	vadd.f32	s2, s4, s10
 8014ab6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014aba:	ee36 0a84 	vadd.f32	s0, s13, s8
 8014abe:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014ac2:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014ac6:	f340 808d 	ble.w	8014be4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ce>
 8014aca:	fb9e f5f3 	sdiv	r5, lr, r3
 8014ace:	ee07 5a10 	vmov	s14, r5
 8014ad2:	2d00      	cmp	r5, #0
 8014ad4:	fb03 e415 	mls	r4, r3, r5, lr
 8014ad8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014adc:	eea7 0a04 	vfma.f32	s0, s14, s8
 8014ae0:	eee7 0a24 	vfma.f32	s1, s14, s9
 8014ae4:	eea7 1a05 	vfma.f32	s2, s14, s10
 8014ae8:	dd12      	ble.n	8014b10 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfa>
 8014aea:	ee70 6a44 	vsub.f32	s13, s0, s8
 8014aee:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8014af2:	ee31 2a45 	vsub.f32	s4, s2, s10
 8014af6:	eef5 6a40 	vcmp.f32	s13, #0.0
 8014afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014afe:	bf14      	ite	ne
 8014b00:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8014b04:	eeb0 7a67 	vmoveq.f32	s14, s15
 8014b08:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014b0c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014b10:	fb05 f703 	mul.w	r7, r5, r3
 8014b14:	1bc0      	subs	r0, r0, r7
 8014b16:	443e      	add	r6, r7
 8014b18:	1997      	adds	r7, r2, r6
 8014b1a:	4407      	add	r7, r0
 8014b1c:	42b9      	cmp	r1, r7
 8014b1e:	bfbc      	itt	lt
 8014b20:	1a88      	sublt	r0, r1, r2
 8014b22:	1b80      	sublt	r0, r0, r6
 8014b24:	2800      	cmp	r0, #0
 8014b26:	dd5a      	ble.n	8014bde <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c8>
 8014b28:	fb90 f1f3 	sdiv	r1, r0, r3
 8014b2c:	fb03 0211 	mls	r2, r3, r1, r0
 8014b30:	b90a      	cbnz	r2, 8014b36 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x120>
 8014b32:	3901      	subs	r1, #1
 8014b34:	461a      	mov	r2, r3
 8014b36:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8014b3a:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 8014b3e:	44a4      	add	ip, r4
 8014b40:	2900      	cmp	r1, #0
 8014b42:	bfcc      	ite	gt
 8014b44:	469e      	movgt	lr, r3
 8014b46:	4696      	movle	lr, r2
 8014b48:	fb03 c505 	mla	r5, r3, r5, ip
 8014b4c:	eef0 6a42 	vmov.f32	s13, s4
 8014b50:	eeb0 7a61 	vmov.f32	s14, s3
 8014b54:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014b58:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8014b5c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8014b60:	ee21 3a23 	vmul.f32	s6, s2, s7
 8014b64:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8014b68:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014b6c:	ee17 0a90 	vmov	r0, s15
 8014b70:	ee73 7a42 	vsub.f32	s15, s6, s4
 8014b74:	fb90 f6f3 	sdiv	r6, r0, r3
 8014b78:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014b7c:	ee17 0a90 	vmov	r0, s15
 8014b80:	fb90 f7f3 	sdiv	r7, r0, r3
 8014b84:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014b88:	f8d0 8000 	ldr.w	r8, [r0]
 8014b8c:	900c      	str	r0, [sp, #48]	; 0x30
 8014b8e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8014b90:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8014b94:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8014b98:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8014b9c:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8014ba0:	f8cd a020 	str.w	sl, [sp, #32]
 8014ba4:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 8014ba8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8014baa:	f8d9 9014 	ldr.w	r9, [r9, #20]
 8014bae:	9603      	str	r6, [sp, #12]
 8014bb0:	44ca      	add	sl, r9
 8014bb2:	9506      	str	r5, [sp, #24]
 8014bb4:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8014bb8:	ee16 0a90 	vmov	r0, s13
 8014bbc:	f8cd a01c 	str.w	sl, [sp, #28]
 8014bc0:	fb07 0704 	mla	r7, r7, r4, r0
 8014bc4:	ee17 0a10 	vmov	r0, s14
 8014bc8:	fb06 0604 	mla	r6, r6, r4, r0
 8014bcc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014bce:	9702      	str	r7, [sp, #8]
 8014bd0:	e9cd 3600 	strd	r3, r6, [sp]
 8014bd4:	ebae 0304 	sub.w	r3, lr, r4
 8014bd8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014bdc:	47a8      	blx	r5
 8014bde:	b011      	add	sp, #68	; 0x44
 8014be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014be4:	462c      	mov	r4, r5
 8014be6:	e797      	b.n	8014b18 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x102>

08014be8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8014be8:	b570      	push	{r4, r5, r6, lr}
 8014bea:	4604      	mov	r4, r0
 8014bec:	2500      	movs	r5, #0
 8014bee:	9804      	ldr	r0, [sp, #16]
 8014bf0:	7223      	strb	r3, [r4, #8]
 8014bf2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8014bf6:	8025      	strh	r5, [r4, #0]
 8014bf8:	6061      	str	r1, [r4, #4]
 8014bfa:	7263      	strb	r3, [r4, #9]
 8014bfc:	60e0      	str	r0, [r4, #12]
 8014bfe:	8222      	strh	r2, [r4, #16]
 8014c00:	8265      	strh	r5, [r4, #18]
 8014c02:	82a5      	strh	r5, [r4, #20]
 8014c04:	82e5      	strh	r5, [r4, #22]
 8014c06:	8325      	strh	r5, [r4, #24]
 8014c08:	8365      	strh	r5, [r4, #26]
 8014c0a:	83a5      	strh	r5, [r4, #28]
 8014c0c:	77a5      	strb	r5, [r4, #30]
 8014c0e:	6803      	ldr	r3, [r0, #0]
 8014c10:	695b      	ldr	r3, [r3, #20]
 8014c12:	4798      	blx	r3
 8014c14:	4606      	mov	r6, r0
 8014c16:	b1f8      	cbz	r0, 8014c58 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8014c18:	68e0      	ldr	r0, [r4, #12]
 8014c1a:	4631      	mov	r1, r6
 8014c1c:	6803      	ldr	r3, [r0, #0]
 8014c1e:	68db      	ldr	r3, [r3, #12]
 8014c20:	4798      	blx	r3
 8014c22:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8014c26:	4605      	mov	r5, r0
 8014c28:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014c2c:	7a83      	ldrb	r3, [r0, #10]
 8014c2e:	4313      	orrs	r3, r2
 8014c30:	83a3      	strh	r3, [r4, #28]
 8014c32:	7a63      	ldrb	r3, [r4, #9]
 8014c34:	2b04      	cmp	r3, #4
 8014c36:	d10f      	bne.n	8014c58 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8014c38:	68e0      	ldr	r0, [r4, #12]
 8014c3a:	462a      	mov	r2, r5
 8014c3c:	4631      	mov	r1, r6
 8014c3e:	6803      	ldr	r3, [r0, #0]
 8014c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014c42:	4798      	blx	r3
 8014c44:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8014c48:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014c4c:	7aab      	ldrb	r3, [r5, #10]
 8014c4e:	4313      	orrs	r3, r2
 8014c50:	4418      	add	r0, r3
 8014c52:	8ba3      	ldrh	r3, [r4, #28]
 8014c54:	4418      	add	r0, r3
 8014c56:	83a0      	strh	r0, [r4, #28]
 8014c58:	4620      	mov	r0, r4
 8014c5a:	bd70      	pop	{r4, r5, r6, pc}

08014c5c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8014c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c60:	2400      	movs	r4, #0
 8014c62:	b085      	sub	sp, #20
 8014c64:	4681      	mov	r9, r0
 8014c66:	460f      	mov	r7, r1
 8014c68:	4692      	mov	sl, r2
 8014c6a:	469b      	mov	fp, r3
 8014c6c:	46a0      	mov	r8, r4
 8014c6e:	4626      	mov	r6, r4
 8014c70:	4554      	cmp	r4, sl
 8014c72:	da21      	bge.n	8014cb8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8014c74:	2300      	movs	r3, #0
 8014c76:	463a      	mov	r2, r7
 8014c78:	4659      	mov	r1, fp
 8014c7a:	4648      	mov	r0, r9
 8014c7c:	9303      	str	r3, [sp, #12]
 8014c7e:	ab03      	add	r3, sp, #12
 8014c80:	f002 fc48 	bl	8017514 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014c84:	4605      	mov	r5, r0
 8014c86:	b1b8      	cbz	r0, 8014cb8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8014c88:	280a      	cmp	r0, #10
 8014c8a:	d015      	beq.n	8014cb8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8014c8c:	9a03      	ldr	r2, [sp, #12]
 8014c8e:	b182      	cbz	r2, 8014cb2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 8014c90:	f992 000d 	ldrsb.w	r0, [r2, #13]
 8014c94:	4641      	mov	r1, r8
 8014c96:	7a93      	ldrb	r3, [r2, #10]
 8014c98:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8014c9c:	8895      	ldrh	r5, [r2, #4]
 8014c9e:	4303      	orrs	r3, r0
 8014ca0:	4638      	mov	r0, r7
 8014ca2:	9301      	str	r3, [sp, #4]
 8014ca4:	683b      	ldr	r3, [r7, #0]
 8014ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014ca8:	4798      	blx	r3
 8014caa:	9b01      	ldr	r3, [sp, #4]
 8014cac:	4418      	add	r0, r3
 8014cae:	4406      	add	r6, r0
 8014cb0:	b2b6      	uxth	r6, r6
 8014cb2:	3401      	adds	r4, #1
 8014cb4:	46a8      	mov	r8, r5
 8014cb6:	e7db      	b.n	8014c70 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 8014cb8:	4630      	mov	r0, r6
 8014cba:	b005      	add	sp, #20
 8014cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014cc0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8014cc0:	2a02      	cmp	r2, #2
 8014cc2:	b530      	push	{r4, r5, lr}
 8014cc4:	d011      	beq.n	8014cea <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8014cc6:	2a03      	cmp	r2, #3
 8014cc8:	d01c      	beq.n	8014d04 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8014cca:	2a01      	cmp	r2, #1
 8014ccc:	d10c      	bne.n	8014ce8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8014cce:	888b      	ldrh	r3, [r1, #4]
 8014cd0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8014cd4:	8801      	ldrh	r1, [r0, #0]
 8014cd6:	1a9b      	subs	r3, r3, r2
 8014cd8:	8844      	ldrh	r4, [r0, #2]
 8014cda:	1a5b      	subs	r3, r3, r1
 8014cdc:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8014ce0:	8004      	strh	r4, [r0, #0]
 8014ce2:	8043      	strh	r3, [r0, #2]
 8014ce4:	8081      	strh	r1, [r0, #4]
 8014ce6:	80c2      	strh	r2, [r0, #6]
 8014ce8:	bd30      	pop	{r4, r5, pc}
 8014cea:	88cb      	ldrh	r3, [r1, #6]
 8014cec:	88c2      	ldrh	r2, [r0, #6]
 8014cee:	1a9b      	subs	r3, r3, r2
 8014cf0:	8842      	ldrh	r2, [r0, #2]
 8014cf2:	1a9b      	subs	r3, r3, r2
 8014cf4:	888a      	ldrh	r2, [r1, #4]
 8014cf6:	8881      	ldrh	r1, [r0, #4]
 8014cf8:	8043      	strh	r3, [r0, #2]
 8014cfa:	1a52      	subs	r2, r2, r1
 8014cfc:	8801      	ldrh	r1, [r0, #0]
 8014cfe:	1a52      	subs	r2, r2, r1
 8014d00:	8002      	strh	r2, [r0, #0]
 8014d02:	e7f1      	b.n	8014ce8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8014d04:	88cb      	ldrh	r3, [r1, #6]
 8014d06:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8014d0a:	8841      	ldrh	r1, [r0, #2]
 8014d0c:	1a9b      	subs	r3, r3, r2
 8014d0e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014d12:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8014d16:	1a5b      	subs	r3, r3, r1
 8014d18:	8045      	strh	r5, [r0, #2]
 8014d1a:	8082      	strh	r2, [r0, #4]
 8014d1c:	8003      	strh	r3, [r0, #0]
 8014d1e:	80c4      	strh	r4, [r0, #6]
 8014d20:	e7e2      	b.n	8014ce8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
	...

08014d24 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 8014d24:	b570      	push	{r4, r5, r6, lr}
 8014d26:	b086      	sub	sp, #24
 8014d28:	ac02      	add	r4, sp, #8
 8014d2a:	e884 0006 	stmia.w	r4, {r1, r2}
 8014d2e:	461a      	mov	r2, r3
 8014d30:	ab0c      	add	r3, sp, #48	; 0x30
 8014d32:	9305      	str	r3, [sp, #20]
 8014d34:	4b0a      	ldr	r3, [pc, #40]	; (8014d60 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 8014d36:	685d      	ldr	r5, [r3, #4]
 8014d38:	1069      	asrs	r1, r5, #1
 8014d3a:	07ed      	lsls	r5, r5, #31
 8014d3c:	eb00 0601 	add.w	r6, r0, r1
 8014d40:	bf46      	itte	mi
 8014d42:	681b      	ldrmi	r3, [r3, #0]
 8014d44:	5841      	ldrmi	r1, [r0, r1]
 8014d46:	681d      	ldrpl	r5, [r3, #0]
 8014d48:	4630      	mov	r0, r6
 8014d4a:	bf48      	it	mi
 8014d4c:	58cd      	ldrmi	r5, [r1, r3]
 8014d4e:	4621      	mov	r1, r4
 8014d50:	9b05      	ldr	r3, [sp, #20]
 8014d52:	9301      	str	r3, [sp, #4]
 8014d54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d56:	9300      	str	r3, [sp, #0]
 8014d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d5a:	47a8      	blx	r5
 8014d5c:	b006      	add	sp, #24
 8014d5e:	bd70      	pop	{r4, r5, r6, pc}
 8014d60:	20000040 	.word	0x20000040

08014d64 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8014d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d68:	b09d      	sub	sp, #116	; 0x74
 8014d6a:	9114      	str	r1, [sp, #80]	; 0x50
 8014d6c:	9315      	str	r3, [sp, #84]	; 0x54
 8014d6e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8014d70:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014d72:	8809      	ldrh	r1, [r1, #0]
 8014d74:	889b      	ldrh	r3, [r3, #4]
 8014d76:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8014d78:	440b      	add	r3, r1
 8014d7a:	9210      	str	r2, [sp, #64]	; 0x40
 8014d7c:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 8014d80:	b21b      	sxth	r3, r3
 8014d82:	900f      	str	r0, [sp, #60]	; 0x3c
 8014d84:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 8014d88:	930e      	str	r3, [sp, #56]	; 0x38
 8014d8a:	6833      	ldr	r3, [r6, #0]
 8014d8c:	7a59      	ldrb	r1, [r3, #9]
 8014d8e:	7a1b      	ldrb	r3, [r3, #8]
 8014d90:	9113      	str	r1, [sp, #76]	; 0x4c
 8014d92:	9312      	str	r3, [sp, #72]	; 0x48
 8014d94:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014d96:	f9b3 4000 	ldrsh.w	r4, [r3]
 8014d9a:	2a00      	cmp	r2, #0
 8014d9c:	d059      	beq.n	8014e52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 8014d9e:	7c33      	ldrb	r3, [r6, #16]
 8014da0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8014da2:	2b04      	cmp	r3, #4
 8014da4:	bf14      	ite	ne
 8014da6:	2301      	movne	r3, #1
 8014da8:	2302      	moveq	r3, #2
 8014daa:	4413      	add	r3, r2
 8014dac:	f04f 0800 	mov.w	r8, #0
 8014db0:	930d      	str	r3, [sp, #52]	; 0x34
 8014db2:	4645      	mov	r5, r8
 8014db4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8014db8:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8014dbc:	4293      	cmp	r3, r2
 8014dbe:	da75      	bge.n	8014eac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 8014dc0:	2300      	movs	r3, #0
 8014dc2:	992b      	ldr	r1, [sp, #172]	; 0xac
 8014dc4:	6832      	ldr	r2, [r6, #0]
 8014dc6:	931a      	str	r3, [sp, #104]	; 0x68
 8014dc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014dca:	428b      	cmp	r3, r1
 8014dcc:	db43      	blt.n	8014e56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 8014dce:	6813      	ldr	r3, [r2, #0]
 8014dd0:	4610      	mov	r0, r2
 8014dd2:	695b      	ldr	r3, [r3, #20]
 8014dd4:	4798      	blx	r3
 8014dd6:	4681      	mov	r9, r0
 8014dd8:	6830      	ldr	r0, [r6, #0]
 8014dda:	aa1b      	add	r2, sp, #108	; 0x6c
 8014ddc:	4649      	mov	r1, r9
 8014dde:	6803      	ldr	r3, [r0, #0]
 8014de0:	689f      	ldr	r7, [r3, #8]
 8014de2:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8014de6:	47b8      	blx	r7
 8014de8:	901a      	str	r0, [sp, #104]	; 0x68
 8014dea:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 8014dee:	45d1      	cmp	r9, sl
 8014df0:	d045      	beq.n	8014e7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8014df2:	f242 070b 	movw	r7, #8203	; 0x200b
 8014df6:	45b9      	cmp	r9, r7
 8014df8:	d041      	beq.n	8014e7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8014dfa:	f1b9 0f00 	cmp.w	r9, #0
 8014dfe:	f000 80ee 	beq.w	8014fde <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8014e02:	f1b9 0f0a 	cmp.w	r9, #10
 8014e06:	d057      	beq.n	8014eb8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8014e08:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014e0a:	b383      	cbz	r3, 8014e6e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 8014e0c:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8014e10:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014e12:	2a00      	cmp	r2, #0
 8014e14:	f000 80d2 	beq.w	8014fbc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 8014e18:	f1bb 0f00 	cmp.w	fp, #0
 8014e1c:	d100      	bne.n	8014e20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 8014e1e:	4444      	add	r4, r8
 8014e20:	f992 800d 	ldrsb.w	r8, [r2, #13]
 8014e24:	f1bb 0f01 	cmp.w	fp, #1
 8014e28:	f408 7380 	and.w	r3, r8, #256	; 0x100
 8014e2c:	f892 800a 	ldrb.w	r8, [r2, #10]
 8014e30:	ea48 0803 	orr.w	r8, r8, r3
 8014e34:	d128      	bne.n	8014e88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 8014e36:	eba4 0408 	sub.w	r4, r4, r8
 8014e3a:	2d00      	cmp	r5, #0
 8014e3c:	d143      	bne.n	8014ec6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8014e3e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014e40:	eb08 0304 	add.w	r3, r8, r4
 8014e44:	4413      	add	r3, r2
 8014e46:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8014e48:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014e4c:	4293      	cmp	r3, r2
 8014e4e:	da44      	bge.n	8014eda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8014e50:	e02b      	b.n	8014eaa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 8014e52:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8014e54:	e7aa      	b.n	8014dac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 8014e56:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8014e5a:	4659      	mov	r1, fp
 8014e5c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8014e5e:	9301      	str	r3, [sp, #4]
 8014e60:	ab1b      	add	r3, sp, #108	; 0x6c
 8014e62:	9300      	str	r3, [sp, #0]
 8014e64:	ab1a      	add	r3, sp, #104	; 0x68
 8014e66:	f002 fb89 	bl	801757c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8014e6a:	4681      	mov	r9, r0
 8014e6c:	e7bd      	b.n	8014dea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8014e6e:	6830      	ldr	r0, [r6, #0]
 8014e70:	6803      	ldr	r3, [r0, #0]
 8014e72:	691b      	ldr	r3, [r3, #16]
 8014e74:	4798      	blx	r3
 8014e76:	4550      	cmp	r0, sl
 8014e78:	d001      	beq.n	8014e7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8014e7a:	42b8      	cmp	r0, r7
 8014e7c:	d1c8      	bne.n	8014e10 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8014e7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e80:	464d      	mov	r5, r9
 8014e82:	3301      	adds	r3, #1
 8014e84:	930c      	str	r3, [sp, #48]	; 0x30
 8014e86:	e797      	b.n	8014db8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 8014e88:	2d00      	cmp	r5, #0
 8014e8a:	f000 80aa 	beq.w	8014fe2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 8014e8e:	f1bb 0f00 	cmp.w	fp, #0
 8014e92:	d118      	bne.n	8014ec6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8014e94:	6830      	ldr	r0, [r6, #0]
 8014e96:	4629      	mov	r1, r5
 8014e98:	6803      	ldr	r3, [r0, #0]
 8014e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014e9c:	4798      	blx	r3
 8014e9e:	4404      	add	r4, r0
 8014ea0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014ea2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014ea4:	1ae3      	subs	r3, r4, r3
 8014ea6:	4293      	cmp	r3, r2
 8014ea8:	dd17      	ble.n	8014eda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8014eaa:	464d      	mov	r5, r9
 8014eac:	2d00      	cmp	r5, #0
 8014eae:	f000 8096 	beq.w	8014fde <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8014eb2:	2d0a      	cmp	r5, #10
 8014eb4:	f040 8084 	bne.w	8014fc0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25c>
 8014eb8:	250a      	movs	r5, #10
 8014eba:	fab5 f085 	clz	r0, r5
 8014ebe:	0940      	lsrs	r0, r0, #5
 8014ec0:	b01d      	add	sp, #116	; 0x74
 8014ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ec6:	6830      	ldr	r0, [r6, #0]
 8014ec8:	4629      	mov	r1, r5
 8014eca:	6803      	ldr	r3, [r0, #0]
 8014ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014ece:	4798      	blx	r3
 8014ed0:	f1bb 0f01 	cmp.w	fp, #1
 8014ed4:	eba4 0400 	sub.w	r4, r4, r0
 8014ed8:	d0b1      	beq.n	8014e3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8014eda:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014edc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014ede:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8014ee2:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014ee6:	7b43      	ldrb	r3, [r0, #13]
 8014ee8:	4421      	add	r1, r4
 8014eea:	015b      	lsls	r3, r3, #5
 8014eec:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014ef0:	7983      	ldrb	r3, [r0, #6]
 8014ef2:	4313      	orrs	r3, r2
 8014ef4:	440b      	add	r3, r1
 8014ef6:	42ab      	cmp	r3, r5
 8014ef8:	dbc1      	blt.n	8014e7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8014efa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014efc:	4299      	cmp	r1, r3
 8014efe:	dabe      	bge.n	8014e7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8014f00:	6830      	ldr	r0, [r6, #0]
 8014f02:	42a5      	cmp	r5, r4
 8014f04:	6803      	ldr	r3, [r0, #0]
 8014f06:	bfcc      	ite	gt
 8014f08:	1b2d      	subgt	r5, r5, r4
 8014f0a:	2500      	movle	r5, #0
 8014f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f0e:	bfc8      	it	gt
 8014f10:	b2ad      	uxthgt	r5, r5
 8014f12:	4798      	blx	r3
 8014f14:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014f16:	4935      	ldr	r1, [pc, #212]	; (8014fec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>)
 8014f18:	7b5a      	ldrb	r2, [r3, #13]
 8014f1a:	f893 e008 	ldrb.w	lr, [r3, #8]
 8014f1e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8014f22:	bf18      	it	ne
 8014f24:	468c      	movne	ip, r1
 8014f26:	9915      	ldr	r1, [sp, #84]	; 0x54
 8014f28:	bf08      	it	eq
 8014f2a:	f04f 0c00 	moveq.w	ip, #0
 8014f2e:	4408      	add	r0, r1
 8014f30:	00d1      	lsls	r1, r2, #3
 8014f32:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8014f36:	ea41 070e 	orr.w	r7, r1, lr
 8014f3a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8014f3c:	ea4c 0707 	orr.w	r7, ip, r7
 8014f40:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8014f44:	1bc7      	subs	r7, r0, r7
 8014f46:	b2bf      	uxth	r7, r7
 8014f48:	fa0f fa87 	sxth.w	sl, r7
 8014f4c:	4551      	cmp	r1, sl
 8014f4e:	dd33      	ble.n	8014fb8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 8014f50:	0112      	lsls	r2, r2, #4
 8014f52:	79d8      	ldrb	r0, [r3, #7]
 8014f54:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8014f58:	4302      	orrs	r2, r0
 8014f5a:	4492      	add	sl, r2
 8014f5c:	4551      	cmp	r1, sl
 8014f5e:	dc8e      	bgt.n	8014e7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8014f60:	1bcf      	subs	r7, r1, r7
 8014f62:	468a      	mov	sl, r1
 8014f64:	b2bf      	uxth	r7, r7
 8014f66:	9317      	str	r3, [sp, #92]	; 0x5c
 8014f68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014f6a:	6830      	ldr	r0, [r6, #0]
 8014f6c:	681a      	ldr	r2, [r3, #0]
 8014f6e:	6801      	ldr	r1, [r0, #0]
 8014f70:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8014f72:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014f74:	9311      	str	r3, [sp, #68]	; 0x44
 8014f76:	9216      	str	r2, [sp, #88]	; 0x58
 8014f78:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8014f7a:	4788      	blx	r1
 8014f7c:	79b1      	ldrb	r1, [r6, #6]
 8014f7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014f80:	910b      	str	r1, [sp, #44]	; 0x2c
 8014f82:	7bb1      	ldrb	r1, [r6, #14]
 8014f84:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014f86:	910a      	str	r1, [sp, #40]	; 0x28
 8014f88:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 8014f8c:	9109      	str	r1, [sp, #36]	; 0x24
 8014f8e:	68b1      	ldr	r1, [r6, #8]
 8014f90:	9305      	str	r3, [sp, #20]
 8014f92:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8014f94:	9206      	str	r2, [sp, #24]
 8014f96:	e9cd a501 	strd	sl, r5, [sp, #4]
 8014f9a:	4425      	add	r5, r4
 8014f9c:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8014fa0:	b22d      	sxth	r5, r5
 8014fa2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014fa4:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8014fa8:	9500      	str	r5, [sp, #0]
 8014faa:	9914      	ldr	r1, [sp, #80]	; 0x50
 8014fac:	681a      	ldr	r2, [r3, #0]
 8014fae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8014fb0:	685b      	ldr	r3, [r3, #4]
 8014fb2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8014fb4:	47a8      	blx	r5
 8014fb6:	e762      	b.n	8014e7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8014fb8:	2700      	movs	r7, #0
 8014fba:	e7d4      	b.n	8014f66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x202>
 8014fbc:	4690      	mov	r8, r2
 8014fbe:	e75e      	b.n	8014e7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8014fc0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8014fc2:	3401      	adds	r4, #1
 8014fc4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8014fc6:	429c      	cmp	r4, r3
 8014fc8:	f6bf af77 	bge.w	8014eba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8014fcc:	4659      	mov	r1, fp
 8014fce:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8014fd0:	f002 fa60 	bl	8017494 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014fd4:	4605      	mov	r5, r0
 8014fd6:	b110      	cbz	r0, 8014fde <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27a>
 8014fd8:	280a      	cmp	r0, #10
 8014fda:	d1f2      	bne.n	8014fc2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 8014fdc:	e76c      	b.n	8014eb8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8014fde:	2500      	movs	r5, #0
 8014fe0:	e76b      	b.n	8014eba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8014fe2:	f1bb 0f00 	cmp.w	fp, #0
 8014fe6:	f43f af5b 	beq.w	8014ea0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 8014fea:	e776      	b.n	8014eda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8014fec:	fffffe00 	.word	0xfffffe00

08014ff0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8014ff0:	b530      	push	{r4, r5, lr}
 8014ff2:	8a44      	ldrh	r4, [r0, #18]
 8014ff4:	8ac5      	ldrh	r5, [r0, #22]
 8014ff6:	82c3      	strh	r3, [r0, #22]
 8014ff8:	442c      	add	r4, r5
 8014ffa:	1ae4      	subs	r4, r4, r3
 8014ffc:	8b03      	ldrh	r3, [r0, #24]
 8014ffe:	8244      	strh	r4, [r0, #18]
 8015000:	8a84      	ldrh	r4, [r0, #20]
 8015002:	4422      	add	r2, r4
 8015004:	440c      	add	r4, r1
 8015006:	1a59      	subs	r1, r3, r1
 8015008:	8342      	strh	r2, [r0, #26]
 801500a:	8284      	strh	r4, [r0, #20]
 801500c:	8301      	strh	r1, [r0, #24]
 801500e:	bd30      	pop	{r4, r5, pc}

08015010 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8015010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015014:	7a45      	ldrb	r5, [r0, #9]
 8015016:	b085      	sub	sp, #20
 8015018:	4604      	mov	r4, r0
 801501a:	4689      	mov	r9, r1
 801501c:	1eeb      	subs	r3, r5, #3
 801501e:	b2db      	uxtb	r3, r3
 8015020:	b329      	cbz	r1, 801506e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 8015022:	2b01      	cmp	r3, #1
 8015024:	d921      	bls.n	801506a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 8015026:	1e69      	subs	r1, r5, #1
 8015028:	f1d1 0b00 	rsbs	fp, r1, #0
 801502c:	eb4b 0b01 	adc.w	fp, fp, r1
 8015030:	1eaa      	subs	r2, r5, #2
 8015032:	2500      	movs	r5, #0
 8015034:	4253      	negs	r3, r2
 8015036:	9500      	str	r5, [sp, #0]
 8015038:	4153      	adcs	r3, r2
 801503a:	9301      	str	r3, [sp, #4]
 801503c:	2600      	movs	r6, #0
 801503e:	f242 080b 	movw	r8, #8203	; 0x200b
 8015042:	8266      	strh	r6, [r4, #18]
 8015044:	82a6      	strh	r6, [r4, #20]
 8015046:	2300      	movs	r3, #0
 8015048:	68e2      	ldr	r2, [r4, #12]
 801504a:	7a21      	ldrb	r1, [r4, #8]
 801504c:	9303      	str	r3, [sp, #12]
 801504e:	ab03      	add	r3, sp, #12
 8015050:	6860      	ldr	r0, [r4, #4]
 8015052:	8827      	ldrh	r7, [r4, #0]
 8015054:	f002 fa5e 	bl	8017514 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015058:	8020      	strh	r0, [r4, #0]
 801505a:	b9b0      	cbnz	r0, 801508a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 801505c:	8b22      	ldrh	r2, [r4, #24]
 801505e:	2300      	movs	r3, #0
 8015060:	4611      	mov	r1, r2
 8015062:	4620      	mov	r0, r4
 8015064:	f7ff ffc4 	bl	8014ff0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015068:	e062      	b.n	8015130 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 801506a:	468b      	mov	fp, r1
 801506c:	e7e0      	b.n	8015030 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 801506e:	2b01      	cmp	r3, #1
 8015070:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8015074:	9101      	str	r1, [sp, #4]
 8015076:	468b      	mov	fp, r1
 8015078:	bf8c      	ite	hi
 801507a:	2300      	movhi	r3, #0
 801507c:	2301      	movls	r3, #1
 801507e:	2d01      	cmp	r5, #1
 8015080:	9300      	str	r3, [sp, #0]
 8015082:	bf8c      	ite	hi
 8015084:	2500      	movhi	r5, #0
 8015086:	2501      	movls	r5, #1
 8015088:	e7d8      	b.n	801503c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 801508a:	8ae3      	ldrh	r3, [r4, #22]
 801508c:	280a      	cmp	r0, #10
 801508e:	f103 0301 	add.w	r3, r3, #1
 8015092:	82e3      	strh	r3, [r4, #22]
 8015094:	d0e2      	beq.n	801505c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 8015096:	9a03      	ldr	r2, [sp, #12]
 8015098:	b972      	cbnz	r2, 80150b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 801509a:	4540      	cmp	r0, r8
 801509c:	d1d3      	bne.n	8015046 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801509e:	8823      	ldrh	r3, [r4, #0]
 80150a0:	8b21      	ldrh	r1, [r4, #24]
 80150a2:	2b20      	cmp	r3, #32
 80150a4:	d001      	beq.n	80150aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 80150a6:	4543      	cmp	r3, r8
 80150a8:	d11d      	bne.n	80150e6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 80150aa:	2f20      	cmp	r7, #32
 80150ac:	d002      	beq.n	80150b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 80150ae:	4547      	cmp	r7, r8
 80150b0:	bf18      	it	ne
 80150b2:	460e      	movne	r6, r1
 80150b4:	2001      	movs	r0, #1
 80150b6:	e017      	b.n	80150e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 80150b8:	4540      	cmp	r0, r8
 80150ba:	d012      	beq.n	80150e2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 80150bc:	8893      	ldrh	r3, [r2, #4]
 80150be:	4639      	mov	r1, r7
 80150c0:	8023      	strh	r3, [r4, #0]
 80150c2:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 80150c6:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 80150ca:	f892 a00a 	ldrb.w	sl, [r2, #10]
 80150ce:	ea4a 0a00 	orr.w	sl, sl, r0
 80150d2:	68e0      	ldr	r0, [r4, #12]
 80150d4:	6803      	ldr	r3, [r0, #0]
 80150d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80150d8:	4798      	blx	r3
 80150da:	eb0a 0200 	add.w	r2, sl, r0
 80150de:	b292      	uxth	r2, r2
 80150e0:	e7dd      	b.n	801509e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 80150e2:	2200      	movs	r2, #0
 80150e4:	e7db      	b.n	801509e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 80150e6:	2000      	movs	r0, #0
 80150e8:	440a      	add	r2, r1
 80150ea:	8aa3      	ldrh	r3, [r4, #20]
 80150ec:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80150f0:	b292      	uxth	r2, r2
 80150f2:	8322      	strh	r2, [r4, #24]
 80150f4:	4413      	add	r3, r2
 80150f6:	f1b9 0f00 	cmp.w	r9, #0
 80150fa:	d022      	beq.n	8015142 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 80150fc:	f1bb 0f00 	cmp.w	fp, #0
 8015100:	d102      	bne.n	8015108 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 8015102:	9901      	ldr	r1, [sp, #4]
 8015104:	b149      	cbz	r1, 801511a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8015106:	b140      	cbz	r0, 801511a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8015108:	8ba1      	ldrh	r1, [r4, #28]
 801510a:	4419      	add	r1, r3
 801510c:	458c      	cmp	ip, r1
 801510e:	da12      	bge.n	8015136 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8015110:	8a61      	ldrh	r1, [r4, #18]
 8015112:	b181      	cbz	r1, 8015136 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8015114:	4563      	cmp	r3, ip
 8015116:	dd96      	ble.n	8015046 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8015118:	e004      	b.n	8015124 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 801511a:	4563      	cmp	r3, ip
 801511c:	dd93      	ble.n	8015046 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801511e:	8a63      	ldrh	r3, [r4, #18]
 8015120:	2b00      	cmp	r3, #0
 8015122:	d090      	beq.n	8015046 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8015124:	2301      	movs	r3, #1
 8015126:	8ba2      	ldrh	r2, [r4, #28]
 8015128:	77a3      	strb	r3, [r4, #30]
 801512a:	8b63      	ldrh	r3, [r4, #26]
 801512c:	4413      	add	r3, r2
 801512e:	8363      	strh	r3, [r4, #26]
 8015130:	b005      	add	sp, #20
 8015132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015136:	2300      	movs	r3, #0
 8015138:	4611      	mov	r1, r2
 801513a:	4620      	mov	r0, r4
 801513c:	f7ff ff58 	bl	8014ff0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015140:	e781      	b.n	8015046 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8015142:	4563      	cmp	r3, ip
 8015144:	dd16      	ble.n	8015174 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 8015146:	9b00      	ldr	r3, [sp, #0]
 8015148:	b113      	cbz	r3, 8015150 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801514a:	2301      	movs	r3, #1
 801514c:	460a      	mov	r2, r1
 801514e:	e787      	b.n	8015060 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 8015150:	2d00      	cmp	r5, #0
 8015152:	f43f af78 	beq.w	8015046 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8015156:	2800      	cmp	r0, #0
 8015158:	f47f af75 	bne.w	8015046 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801515c:	2f20      	cmp	r7, #32
 801515e:	d001      	beq.n	8015164 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 8015160:	4547      	cmp	r7, r8
 8015162:	d102      	bne.n	801516a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 8015164:	2301      	movs	r3, #1
 8015166:	4632      	mov	r2, r6
 8015168:	e77b      	b.n	8015062 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 801516a:	8a63      	ldrh	r3, [r4, #18]
 801516c:	2b00      	cmp	r3, #0
 801516e:	f43f af6a 	beq.w	8015046 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8015172:	e7dd      	b.n	8015130 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8015174:	2800      	cmp	r0, #0
 8015176:	f47f af66 	bne.w	8015046 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801517a:	2f20      	cmp	r7, #32
 801517c:	d002      	beq.n	8015184 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 801517e:	4547      	cmp	r7, r8
 8015180:	f47f af61 	bne.w	8015046 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8015184:	2301      	movs	r3, #1
 8015186:	4632      	mov	r2, r6
 8015188:	e7d7      	b.n	801513a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

0801518a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801518a:	b570      	push	{r4, r5, r6, lr}
 801518c:	4606      	mov	r6, r0
 801518e:	b08a      	sub	sp, #40	; 0x28
 8015190:	4615      	mov	r5, r2
 8015192:	b191      	cbz	r1, 80151ba <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 8015194:	2401      	movs	r4, #1
 8015196:	e9cd 3100 	strd	r3, r1, [sp]
 801519a:	4613      	mov	r3, r2
 801519c:	4601      	mov	r1, r0
 801519e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80151a2:	a802      	add	r0, sp, #8
 80151a4:	f7ff fd20 	bl	8014be8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80151a8:	2100      	movs	r1, #0
 80151aa:	a802      	add	r0, sp, #8
 80151ac:	f7ff ff30 	bl	8015010 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80151b0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80151b4:	b173      	cbz	r3, 80151d4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 80151b6:	3401      	adds	r4, #1
 80151b8:	e7f6      	b.n	80151a8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 80151ba:	2401      	movs	r4, #1
 80151bc:	4611      	mov	r1, r2
 80151be:	f002 f969 	bl	8017494 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80151c2:	280a      	cmp	r0, #10
 80151c4:	4629      	mov	r1, r5
 80151c6:	4630      	mov	r0, r6
 80151c8:	bf08      	it	eq
 80151ca:	3401      	addeq	r4, #1
 80151cc:	f002 f962 	bl	8017494 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80151d0:	2800      	cmp	r0, #0
 80151d2:	d1f6      	bne.n	80151c2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 80151d4:	b2a0      	uxth	r0, r4
 80151d6:	b00a      	add	sp, #40	; 0x28
 80151d8:	bd70      	pop	{r4, r5, r6, pc}

080151da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80151da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151de:	b0db      	sub	sp, #364	; 0x16c
 80151e0:	468a      	mov	sl, r1
 80151e2:	461c      	mov	r4, r3
 80151e4:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 80151e8:	9009      	str	r0, [sp, #36]	; 0x24
 80151ea:	f1bb 0f00 	cmp.w	fp, #0
 80151ee:	f000 80c7 	beq.w	8015380 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	f000 80c3 	beq.w	8015380 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80151fa:	7ba3      	ldrb	r3, [r4, #14]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	f000 80bf 	beq.w	8015380 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8015202:	af0c      	add	r7, sp, #48	; 0x30
 8015204:	6810      	ldr	r0, [r2, #0]
 8015206:	6851      	ldr	r1, [r2, #4]
 8015208:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 801520c:	463b      	mov	r3, r7
 801520e:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 8015212:	c303      	stmia	r3!, {r0, r1}
 8015214:	2100      	movs	r1, #0
 8015216:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 801521a:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801521e:	4638      	mov	r0, r7
 8015220:	910e      	str	r1, [sp, #56]	; 0x38
 8015222:	a90e      	add	r1, sp, #56	; 0x38
 8015224:	79a2      	ldrb	r2, [r4, #6]
 8015226:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801522a:	f7ff fd49 	bl	8014cc0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801522e:	a90e      	add	r1, sp, #56	; 0x38
 8015230:	79a2      	ldrb	r2, [r4, #6]
 8015232:	4608      	mov	r0, r1
 8015234:	f7ff fd44 	bl	8014cc0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8015238:	4648      	mov	r0, r9
 801523a:	f001 ffe9 	bl	8017210 <_ZN8touchgfx12TextProviderC1Ev>
 801523e:	6820      	ldr	r0, [r4, #0]
 8015240:	6803      	ldr	r3, [r0, #0]
 8015242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015244:	4798      	blx	r3
 8015246:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8015248:	4603      	mov	r3, r0
 801524a:	4659      	mov	r1, fp
 801524c:	4648      	mov	r0, r9
 801524e:	f001 fffc 	bl	801724a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8015252:	a82e      	add	r0, sp, #184	; 0xb8
 8015254:	f001 ffdc 	bl	8017210 <_ZN8touchgfx12TextProviderC1Ev>
 8015258:	f894 8004 	ldrb.w	r8, [r4, #4]
 801525c:	f1b8 0f00 	cmp.w	r8, #0
 8015260:	d009      	beq.n	8015276 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8015262:	6820      	ldr	r0, [r4, #0]
 8015264:	6803      	ldr	r3, [r0, #0]
 8015266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015268:	4798      	blx	r3
 801526a:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801526c:	4603      	mov	r3, r0
 801526e:	4659      	mov	r1, fp
 8015270:	a82e      	add	r0, sp, #184	; 0xb8
 8015272:	f001 ffea 	bl	801724a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8015276:	6820      	ldr	r0, [r4, #0]
 8015278:	6803      	ldr	r3, [r0, #0]
 801527a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801527c:	4798      	blx	r3
 801527e:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015282:	182e      	adds	r6, r5, r0
 8015284:	2e00      	cmp	r6, #0
 8015286:	dd45      	ble.n	8015314 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8015288:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801528c:	4283      	cmp	r3, r0
 801528e:	db41      	blt.n	8015314 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8015290:	441d      	add	r5, r3
 8015292:	fb95 f5f6 	sdiv	r5, r5, r6
 8015296:	a844      	add	r0, sp, #272	; 0x110
 8015298:	f001 ffba 	bl	8017210 <_ZN8touchgfx12TextProviderC1Ev>
 801529c:	7c23      	ldrb	r3, [r4, #16]
 801529e:	b14b      	cbz	r3, 80152b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 80152a0:	6820      	ldr	r0, [r4, #0]
 80152a2:	6803      	ldr	r3, [r0, #0]
 80152a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80152a6:	4798      	blx	r3
 80152a8:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80152aa:	4603      	mov	r3, r0
 80152ac:	4659      	mov	r1, fp
 80152ae:	a844      	add	r0, sp, #272	; 0x110
 80152b0:	f001 ffcb 	bl	801724a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80152b4:	7c21      	ldrb	r1, [r4, #16]
 80152b6:	a810      	add	r0, sp, #64	; 0x40
 80152b8:	7963      	ldrb	r3, [r4, #5]
 80152ba:	9101      	str	r1, [sp, #4]
 80152bc:	6821      	ldr	r1, [r4, #0]
 80152be:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80152c2:	9100      	str	r1, [sp, #0]
 80152c4:	a944      	add	r1, sp, #272	; 0x110
 80152c6:	f7ff fc8f 	bl	8014be8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80152ca:	7c23      	ldrb	r3, [r4, #16]
 80152cc:	bb23      	cbnz	r3, 8015318 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 80152ce:	fa1f fb86 	uxth.w	fp, r6
 80152d2:	2d00      	cmp	r5, #0
 80152d4:	dd57      	ble.n	8015386 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 80152d6:	7961      	ldrb	r1, [r4, #5]
 80152d8:	4648      	mov	r0, r9
 80152da:	f002 f8db 	bl	8017494 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80152de:	4603      	mov	r3, r0
 80152e0:	f1b8 0f00 	cmp.w	r8, #0
 80152e4:	d005      	beq.n	80152f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 80152e6:	9008      	str	r0, [sp, #32]
 80152e8:	a82e      	add	r0, sp, #184	; 0xb8
 80152ea:	7961      	ldrb	r1, [r4, #5]
 80152ec:	f002 f8d2 	bl	8017494 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80152f0:	9b08      	ldr	r3, [sp, #32]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d044      	beq.n	8015380 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 80152f6:	2b0a      	cmp	r3, #10
 80152f8:	d1eb      	bne.n	80152d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 80152fa:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80152fe:	3d01      	subs	r5, #1
 8015300:	445b      	add	r3, fp
 8015302:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8015306:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801530a:	eba3 030b 	sub.w	r3, r3, fp
 801530e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8015312:	e7de      	b.n	80152d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8015314:	2500      	movs	r5, #0
 8015316:	e7be      	b.n	8015296 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 8015318:	0073      	lsls	r3, r6, #1
 801531a:	9308      	str	r3, [sp, #32]
 801531c:	2d00      	cmp	r5, #0
 801531e:	dd32      	ble.n	8015386 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8015320:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8015324:	a810      	add	r0, sp, #64	; 0x40
 8015326:	9b08      	ldr	r3, [sp, #32]
 8015328:	428b      	cmp	r3, r1
 801532a:	bfd4      	ite	le
 801532c:	2100      	movle	r1, #0
 801532e:	2101      	movgt	r1, #1
 8015330:	f7ff fe6e 	bl	8015010 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8015334:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 8015338:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 801533c:	fa1f fb83 	uxth.w	fp, r3
 8015340:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015344:	459b      	cmp	fp, r3
 8015346:	d00b      	beq.n	8015360 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8015348:	7961      	ldrb	r1, [r4, #5]
 801534a:	4648      	mov	r0, r9
 801534c:	f002 f8a2 	bl	8017494 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015350:	f1b8 0f00 	cmp.w	r8, #0
 8015354:	d0f0      	beq.n	8015338 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8015356:	7961      	ldrb	r1, [r4, #5]
 8015358:	a82e      	add	r0, sp, #184	; 0xb8
 801535a:	f002 f89b 	bl	8017494 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801535e:	e7eb      	b.n	8015338 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8015360:	b2b3      	uxth	r3, r6
 8015362:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8015366:	3d01      	subs	r5, #1
 8015368:	441a      	add	r2, r3
 801536a:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801536e:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8015372:	1ad3      	subs	r3, r2, r3
 8015374:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8015378:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801537c:	2b00      	cmp	r3, #0
 801537e:	d1cd      	bne.n	801531c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8015380:	b05b      	add	sp, #364	; 0x16c
 8015382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015386:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 801538a:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 801538e:	7c23      	ldrb	r3, [r4, #16]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d05f      	beq.n	8015454 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 8015394:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8015398:	a810      	add	r0, sp, #64	; 0x40
 801539a:	458b      	cmp	fp, r1
 801539c:	bfd4      	ite	le
 801539e:	2100      	movle	r1, #0
 80153a0:	2101      	movgt	r1, #1
 80153a2:	f7ff fe35 	bl	8015010 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80153a6:	f1b8 0f00 	cmp.w	r8, #0
 80153aa:	d04c      	beq.n	8015446 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 80153ac:	7c23      	ldrb	r3, [r4, #16]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d053      	beq.n	801545a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 80153b2:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 80153b6:	7922      	ldrb	r2, [r4, #4]
 80153b8:	2a01      	cmp	r2, #1
 80153ba:	d13c      	bne.n	8015436 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 80153bc:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 80153c0:	1ac0      	subs	r0, r0, r3
 80153c2:	2302      	movs	r3, #2
 80153c4:	fb90 f0f3 	sdiv	r0, r0, r3
 80153c8:	b200      	sxth	r0, r0
 80153ca:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80153ce:	4418      	add	r0, r3
 80153d0:	7c23      	ldrb	r3, [r4, #16]
 80153d2:	8028      	strh	r0, [r5, #0]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d03a      	beq.n	801544e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 80153d8:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 80153dc:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 80153e0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80153e4:	f8cd 9010 	str.w	r9, [sp, #16]
 80153e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80153ea:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80153ee:	2200      	movs	r2, #0
 80153f0:	2100      	movs	r1, #0
 80153f2:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80153f6:	e9cd 5700 	strd	r5, r7, [sp]
 80153fa:	4652      	mov	r2, sl
 80153fc:	f7ff fcb2 	bl	8014d64 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8015400:	2800      	cmp	r0, #0
 8015402:	d1bd      	bne.n	8015380 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8015404:	b2b2      	uxth	r2, r6
 8015406:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801540a:	4611      	mov	r1, r2
 801540c:	4413      	add	r3, r2
 801540e:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8015412:	b21b      	sxth	r3, r3
 8015414:	1a52      	subs	r2, r2, r1
 8015416:	7c21      	ldrb	r1, [r4, #16]
 8015418:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801541c:	b212      	sxth	r2, r2
 801541e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8015422:	b109      	cbz	r1, 8015428 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8015424:	42b2      	cmp	r2, r6
 8015426:	dbab      	blt.n	8015380 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8015428:	887a      	ldrh	r2, [r7, #2]
 801542a:	88f9      	ldrh	r1, [r7, #6]
 801542c:	440a      	add	r2, r1
 801542e:	b212      	sxth	r2, r2
 8015430:	4293      	cmp	r3, r2
 8015432:	ddac      	ble.n	801538e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 8015434:	e7a4      	b.n	8015380 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8015436:	2a02      	cmp	r2, #2
 8015438:	d107      	bne.n	801544a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801543a:	7be2      	ldrb	r2, [r4, #15]
 801543c:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8015440:	1a80      	subs	r0, r0, r2
 8015442:	1ac0      	subs	r0, r0, r3
 8015444:	e7c0      	b.n	80153c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 8015446:	7be0      	ldrb	r0, [r4, #15]
 8015448:	e7bf      	b.n	80153ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801544a:	2000      	movs	r0, #0
 801544c:	e7bd      	b.n	80153ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 801544e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015452:	e7c3      	b.n	80153dc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 8015454:	f1b8 0f00 	cmp.w	r8, #0
 8015458:	d0f5      	beq.n	8015446 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801545a:	2300      	movs	r3, #0
 801545c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015460:	6821      	ldr	r1, [r4, #0]
 8015462:	a82e      	add	r0, sp, #184	; 0xb8
 8015464:	f7ff fbfa 	bl	8014c5c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8015468:	b203      	sxth	r3, r0
 801546a:	e7a4      	b.n	80153b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

0801546c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801546c:	2b02      	cmp	r3, #2
 801546e:	b510      	push	{r4, lr}
 8015470:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015474:	d00b      	beq.n	801548e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8015476:	2b03      	cmp	r3, #3
 8015478:	d00e      	beq.n	8015498 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801547a:	2b01      	cmp	r3, #1
 801547c:	d001      	beq.n	8015482 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801547e:	1860      	adds	r0, r4, r1
 8015480:	bd10      	pop	{r4, pc}
 8015482:	8880      	ldrh	r0, [r0, #4]
 8015484:	4420      	add	r0, r4
 8015486:	b200      	sxth	r0, r0
 8015488:	1a80      	subs	r0, r0, r2
 801548a:	3801      	subs	r0, #1
 801548c:	e7f8      	b.n	8015480 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801548e:	8880      	ldrh	r0, [r0, #4]
 8015490:	4420      	add	r0, r4
 8015492:	b200      	sxth	r0, r0
 8015494:	1a40      	subs	r0, r0, r1
 8015496:	e7f8      	b.n	801548a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8015498:	18a0      	adds	r0, r4, r2
 801549a:	e7f1      	b.n	8015480 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801549c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801549c:	2b02      	cmp	r3, #2
 801549e:	b510      	push	{r4, lr}
 80154a0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80154a4:	d006      	beq.n	80154b4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 80154a6:	2b03      	cmp	r3, #3
 80154a8:	d00a      	beq.n	80154c0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80154aa:	2b01      	cmp	r3, #1
 80154ac:	bf14      	ite	ne
 80154ae:	18a0      	addne	r0, r4, r2
 80154b0:	1860      	addeq	r0, r4, r1
 80154b2:	bd10      	pop	{r4, pc}
 80154b4:	88c0      	ldrh	r0, [r0, #6]
 80154b6:	4420      	add	r0, r4
 80154b8:	b200      	sxth	r0, r0
 80154ba:	1a80      	subs	r0, r0, r2
 80154bc:	3801      	subs	r0, #1
 80154be:	e7f8      	b.n	80154b2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 80154c0:	88c0      	ldrh	r0, [r0, #6]
 80154c2:	4420      	add	r0, r4
 80154c4:	b200      	sxth	r0, r0
 80154c6:	1a40      	subs	r0, r0, r1
 80154c8:	e7f8      	b.n	80154bc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

080154cc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80154cc:	4b01      	ldr	r3, [pc, #4]	; (80154d4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80154ce:	2200      	movs	r2, #0
 80154d0:	601a      	str	r2, [r3, #0]
 80154d2:	4770      	bx	lr
 80154d4:	2000b288 	.word	0x2000b288

080154d8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 80154d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154da:	1e05      	subs	r5, r0, #0
 80154dc:	f04f 0601 	mov.w	r6, #1
 80154e0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80154e4:	bfba      	itte	lt
 80154e6:	f04f 37ff 	movlt.w	r7, #4294967295	; 0xffffffff
 80154ea:	426d      	neglt	r5, r5
 80154ec:	2701      	movge	r7, #1
 80154ee:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 80154f2:	f1be 0f00 	cmp.w	lr, #0
 80154f6:	bfbc      	itt	lt
 80154f8:	f1ce 0e00 	rsblt	lr, lr, #0
 80154fc:	427f      	neglt	r7, r7
 80154fe:	2c00      	cmp	r4, #0
 8015500:	fa4e f001 	asr.w	r0, lr, r1
 8015504:	fa06 f101 	lsl.w	r1, r6, r1
 8015508:	bfbc      	itt	lt
 801550a:	4264      	neglt	r4, r4
 801550c:	427f      	neglt	r7, r7
 801550e:	3901      	subs	r1, #1
 8015510:	ea01 010e 	and.w	r1, r1, lr
 8015514:	434d      	muls	r5, r1
 8015516:	f8dc 1000 	ldr.w	r1, [ip]
 801551a:	fb03 1300 	mla	r3, r3, r0, r1
 801551e:	fb95 f1f4 	sdiv	r1, r5, r4
 8015522:	fb04 5511 	mls	r5, r4, r1, r5
 8015526:	441d      	add	r5, r3
 8015528:	fb95 f3f4 	sdiv	r3, r5, r4
 801552c:	4419      	add	r1, r3
 801552e:	fb04 5413 	mls	r4, r4, r3, r5
 8015532:	fb02 1000 	mla	r0, r2, r0, r1
 8015536:	f8cc 4000 	str.w	r4, [ip]
 801553a:	4378      	muls	r0, r7
 801553c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08015540 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8015540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015544:	4c24      	ldr	r4, [pc, #144]	; (80155d8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 8015546:	b086      	sub	sp, #24
 8015548:	4605      	mov	r5, r0
 801554a:	6807      	ldr	r7, [r0, #0]
 801554c:	69a3      	ldr	r3, [r4, #24]
 801554e:	b92b      	cbnz	r3, 801555c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 8015550:	6840      	ldr	r0, [r0, #4]
 8015552:	e9c5 7000 	strd	r7, r0, [r5]
 8015556:	b006      	add	sp, #24
 8015558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801555c:	f04f 0802 	mov.w	r8, #2
 8015560:	68a2      	ldr	r2, [r4, #8]
 8015562:	ae06      	add	r6, sp, #24
 8015564:	6820      	ldr	r0, [r4, #0]
 8015566:	fb93 f1f8 	sdiv	r1, r3, r8
 801556a:	440a      	add	r2, r1
 801556c:	69e1      	ldr	r1, [r4, #28]
 801556e:	f846 2d04 	str.w	r2, [r6, #-4]!
 8015572:	9700      	str	r7, [sp, #0]
 8015574:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015576:	e9cd 3601 	strd	r3, r6, [sp, #4]
 801557a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801557c:	f7ff ffac 	bl	80154d8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8015580:	69a3      	ldr	r3, [r4, #24]
 8015582:	4607      	mov	r7, r0
 8015584:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015586:	9301      	str	r3, [sp, #4]
 8015588:	686b      	ldr	r3, [r5, #4]
 801558a:	6a21      	ldr	r1, [r4, #32]
 801558c:	9300      	str	r3, [sp, #0]
 801558e:	9602      	str	r6, [sp, #8]
 8015590:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015592:	6860      	ldr	r0, [r4, #4]
 8015594:	f7ff ffa0 	bl	80154d8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8015598:	69a2      	ldr	r2, [r4, #24]
 801559a:	6963      	ldr	r3, [r4, #20]
 801559c:	4407      	add	r7, r0
 801559e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80155a0:	68e0      	ldr	r0, [r4, #12]
 80155a2:	fb92 f8f8 	sdiv	r8, r2, r8
 80155a6:	4443      	add	r3, r8
 80155a8:	9305      	str	r3, [sp, #20]
 80155aa:	682b      	ldr	r3, [r5, #0]
 80155ac:	e9cd 2601 	strd	r2, r6, [sp, #4]
 80155b0:	9300      	str	r3, [sp, #0]
 80155b2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80155b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80155b6:	f7ff ff8f 	bl	80154d8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80155ba:	69a3      	ldr	r3, [r4, #24]
 80155bc:	4680      	mov	r8, r0
 80155be:	9602      	str	r6, [sp, #8]
 80155c0:	9301      	str	r3, [sp, #4]
 80155c2:	686b      	ldr	r3, [r5, #4]
 80155c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80155c6:	9300      	str	r3, [sp, #0]
 80155c8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80155ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80155cc:	6920      	ldr	r0, [r4, #16]
 80155ce:	f7ff ff83 	bl	80154d8 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80155d2:	4440      	add	r0, r8
 80155d4:	e7bd      	b.n	8015552 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 80155d6:	bf00      	nop
 80155d8:	2000b28c 	.word	0x2000b28c

080155dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80155dc:	4b07      	ldr	r3, [pc, #28]	; (80155fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80155de:	b510      	push	{r4, lr}
 80155e0:	781b      	ldrb	r3, [r3, #0]
 80155e2:	2b01      	cmp	r3, #1
 80155e4:	d108      	bne.n	80155f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80155e6:	4b06      	ldr	r3, [pc, #24]	; (8015600 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80155e8:	880c      	ldrh	r4, [r1, #0]
 80155ea:	881b      	ldrh	r3, [r3, #0]
 80155ec:	f9b0 2000 	ldrsh.w	r2, [r0]
 80155f0:	3b01      	subs	r3, #1
 80155f2:	1b1b      	subs	r3, r3, r4
 80155f4:	8003      	strh	r3, [r0, #0]
 80155f6:	800a      	strh	r2, [r1, #0]
 80155f8:	bd10      	pop	{r4, pc}
 80155fa:	bf00      	nop
 80155fc:	2000b258 	.word	0x2000b258
 8015600:	2000b25c 	.word	0x2000b25c

08015604 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8015604:	4b0a      	ldr	r3, [pc, #40]	; (8015630 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8015606:	b510      	push	{r4, lr}
 8015608:	781b      	ldrb	r3, [r3, #0]
 801560a:	2b01      	cmp	r3, #1
 801560c:	d10e      	bne.n	801562c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801560e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8015612:	8843      	ldrh	r3, [r0, #2]
 8015614:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015618:	18ca      	adds	r2, r1, r3
 801561a:	4b06      	ldr	r3, [pc, #24]	; (8015634 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801561c:	8044      	strh	r4, [r0, #2]
 801561e:	881b      	ldrh	r3, [r3, #0]
 8015620:	1a9b      	subs	r3, r3, r2
 8015622:	8003      	strh	r3, [r0, #0]
 8015624:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8015628:	8081      	strh	r1, [r0, #4]
 801562a:	80c3      	strh	r3, [r0, #6]
 801562c:	bd10      	pop	{r4, pc}
 801562e:	bf00      	nop
 8015630:	2000b258 	.word	0x2000b258
 8015634:	2000b254 	.word	0x2000b254

08015638 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8015638:	4b07      	ldr	r3, [pc, #28]	; (8015658 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801563a:	b510      	push	{r4, lr}
 801563c:	781b      	ldrb	r3, [r3, #0]
 801563e:	2b01      	cmp	r3, #1
 8015640:	d108      	bne.n	8015654 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8015642:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015646:	f9b0 4000 	ldrsh.w	r4, [r0]
 801564a:	8003      	strh	r3, [r0, #0]
 801564c:	8893      	ldrh	r3, [r2, #4]
 801564e:	3b01      	subs	r3, #1
 8015650:	1b1b      	subs	r3, r3, r4
 8015652:	800b      	strh	r3, [r1, #0]
 8015654:	bd10      	pop	{r4, pc}
 8015656:	bf00      	nop
 8015658:	2000b258 	.word	0x2000b258

0801565c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801565c:	4b08      	ldr	r3, [pc, #32]	; (8015680 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801565e:	b513      	push	{r0, r1, r4, lr}
 8015660:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015664:	2400      	movs	r4, #0
 8015666:	4b07      	ldr	r3, [pc, #28]	; (8015684 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8015668:	f8ad 2004 	strh.w	r2, [sp, #4]
 801566c:	466a      	mov	r2, sp
 801566e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015672:	9400      	str	r4, [sp, #0]
 8015674:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015678:	f7ff ffde 	bl	8015638 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801567c:	b002      	add	sp, #8
 801567e:	bd10      	pop	{r4, pc}
 8015680:	2000b254 	.word	0x2000b254
 8015684:	2000b256 	.word	0x2000b256

08015688 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8015688:	4b0a      	ldr	r3, [pc, #40]	; (80156b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801568a:	460a      	mov	r2, r1
 801568c:	b510      	push	{r4, lr}
 801568e:	781b      	ldrb	r3, [r3, #0]
 8015690:	2b01      	cmp	r3, #1
 8015692:	d10d      	bne.n	80156b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8015694:	8881      	ldrh	r1, [r0, #4]
 8015696:	8803      	ldrh	r3, [r0, #0]
 8015698:	440b      	add	r3, r1
 801569a:	4601      	mov	r1, r0
 801569c:	3b01      	subs	r3, #1
 801569e:	f821 3b02 	strh.w	r3, [r1], #2
 80156a2:	f7ff ffc9 	bl	8015638 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80156a6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80156aa:	88c2      	ldrh	r2, [r0, #6]
 80156ac:	80c3      	strh	r3, [r0, #6]
 80156ae:	8082      	strh	r2, [r0, #4]
 80156b0:	bd10      	pop	{r4, pc}
 80156b2:	bf00      	nop
 80156b4:	2000b258 	.word	0x2000b258

080156b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80156b8:	4b09      	ldr	r3, [pc, #36]	; (80156e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80156ba:	b507      	push	{r0, r1, r2, lr}
 80156bc:	2100      	movs	r1, #0
 80156be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80156c2:	4b08      	ldr	r3, [pc, #32]	; (80156e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 80156c4:	9100      	str	r1, [sp, #0]
 80156c6:	4669      	mov	r1, sp
 80156c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80156cc:	f8ad 2004 	strh.w	r2, [sp, #4]
 80156d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80156d4:	f7ff ffd8 	bl	8015688 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80156d8:	b003      	add	sp, #12
 80156da:	f85d fb04 	ldr.w	pc, [sp], #4
 80156de:	bf00      	nop
 80156e0:	2000b254 	.word	0x2000b254
 80156e4:	2000b256 	.word	0x2000b256

080156e8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80156e8:	4b03      	ldr	r3, [pc, #12]	; (80156f8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80156ea:	6818      	ldr	r0, [r3, #0]
 80156ec:	b110      	cbz	r0, 80156f4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80156ee:	6803      	ldr	r3, [r0, #0]
 80156f0:	699b      	ldr	r3, [r3, #24]
 80156f2:	4718      	bx	r3
 80156f4:	4770      	bx	lr
 80156f6:	bf00      	nop
 80156f8:	2000b2dc 	.word	0x2000b2dc

080156fc <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80156fc:	4770      	bx	lr
	...

08015700 <_ZN8touchgfx11Application4drawEv>:
 8015700:	4b09      	ldr	r3, [pc, #36]	; (8015728 <_ZN8touchgfx11Application4drawEv+0x28>)
 8015702:	b507      	push	{r0, r1, r2, lr}
 8015704:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015708:	2100      	movs	r1, #0
 801570a:	4b08      	ldr	r3, [pc, #32]	; (801572c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801570c:	9100      	str	r1, [sp, #0]
 801570e:	4669      	mov	r1, sp
 8015710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015714:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015718:	f8ad 3006 	strh.w	r3, [sp, #6]
 801571c:	6803      	ldr	r3, [r0, #0]
 801571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015720:	4798      	blx	r3
 8015722:	b003      	add	sp, #12
 8015724:	f85d fb04 	ldr.w	pc, [sp], #4
 8015728:	2000b254 	.word	0x2000b254
 801572c:	2000b256 	.word	0x2000b256

08015730 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8015730:	4b03      	ldr	r3, [pc, #12]	; (8015740 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8015732:	6818      	ldr	r0, [r3, #0]
 8015734:	b110      	cbz	r0, 801573c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8015736:	6803      	ldr	r3, [r0, #0]
 8015738:	69db      	ldr	r3, [r3, #28]
 801573a:	4718      	bx	r3
 801573c:	4770      	bx	lr
 801573e:	bf00      	nop
 8015740:	2000b2dc 	.word	0x2000b2dc

08015744 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8015744:	4b03      	ldr	r3, [pc, #12]	; (8015754 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8015746:	6818      	ldr	r0, [r3, #0]
 8015748:	b110      	cbz	r0, 8015750 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801574a:	6803      	ldr	r3, [r0, #0]
 801574c:	6a1b      	ldr	r3, [r3, #32]
 801574e:	4718      	bx	r3
 8015750:	4770      	bx	lr
 8015752:	bf00      	nop
 8015754:	2000b2dc 	.word	0x2000b2dc

08015758 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8015758:	4b03      	ldr	r3, [pc, #12]	; (8015768 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801575a:	6818      	ldr	r0, [r3, #0]
 801575c:	b110      	cbz	r0, 8015764 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801575e:	6803      	ldr	r3, [r0, #0]
 8015760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015762:	4718      	bx	r3
 8015764:	4770      	bx	lr
 8015766:	bf00      	nop
 8015768:	2000b2dc 	.word	0x2000b2dc

0801576c <_ZN8touchgfx11Application15handleTickEventEv>:
 801576c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015770:	4d3a      	ldr	r5, [pc, #232]	; (801585c <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 8015772:	4604      	mov	r4, r0
 8015774:	6828      	ldr	r0, [r5, #0]
 8015776:	b140      	cbz	r0, 801578a <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8015778:	7a03      	ldrb	r3, [r0, #8]
 801577a:	b933      	cbnz	r3, 801578a <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801577c:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8015780:	6803      	ldr	r3, [r0, #0]
 8015782:	689b      	ldr	r3, [r3, #8]
 8015784:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015788:	4718      	bx	r3
 801578a:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801578e:	b97b      	cbnz	r3, 80157b0 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8015790:	b170      	cbz	r0, 80157b0 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8015792:	7a03      	ldrb	r3, [r0, #8]
 8015794:	b163      	cbz	r3, 80157b0 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8015796:	4b32      	ldr	r3, [pc, #200]	; (8015860 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8015798:	6818      	ldr	r0, [r3, #0]
 801579a:	b110      	cbz	r0, 80157a2 <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 801579c:	6803      	ldr	r3, [r0, #0]
 801579e:	691b      	ldr	r3, [r3, #16]
 80157a0:	4798      	blx	r3
 80157a2:	6828      	ldr	r0, [r5, #0]
 80157a4:	6803      	ldr	r3, [r0, #0]
 80157a6:	68db      	ldr	r3, [r3, #12]
 80157a8:	4798      	blx	r3
 80157aa:	2301      	movs	r3, #1
 80157ac:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 80157b0:	2500      	movs	r5, #0
 80157b2:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80157b6:	42a8      	cmp	r0, r5
 80157b8:	dd0c      	ble.n	80157d4 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 80157ba:	1963      	adds	r3, r4, r5
 80157bc:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80157c0:	b132      	cbz	r2, 80157d0 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 80157c2:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80157c6:	4413      	add	r3, r2
 80157c8:	6858      	ldr	r0, [r3, #4]
 80157ca:	6803      	ldr	r3, [r0, #0]
 80157cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80157ce:	4798      	blx	r3
 80157d0:	3501      	adds	r5, #1
 80157d2:	e7ee      	b.n	80157b2 <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 80157d4:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 80157d8:	3801      	subs	r0, #1
 80157da:	f04f 0c00 	mov.w	ip, #0
 80157de:	3678      	adds	r6, #120	; 0x78
 80157e0:	1c43      	adds	r3, r0, #1
 80157e2:	d033      	beq.n	801584c <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 80157e4:	1823      	adds	r3, r4, r0
 80157e6:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80157ea:	bb6a      	cbnz	r2, 8015848 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 80157ec:	b281      	uxth	r1, r0
 80157ee:	1d25      	adds	r5, r4, #4
 80157f0:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80157f4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80157f8:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 80157fc:	4293      	cmp	r3, r2
 80157fe:	dc0a      	bgt.n	8015816 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 8015800:	f101 0288 	add.w	r2, r1, #136	; 0x88
 8015804:	4422      	add	r2, r4
 8015806:	18b1      	adds	r1, r6, r2
 8015808:	b289      	uxth	r1, r1
 801580a:	428b      	cmp	r3, r1
 801580c:	d919      	bls.n	8015842 <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 801580e:	7851      	ldrb	r1, [r2, #1]
 8015810:	f802 1b01 	strb.w	r1, [r2], #1
 8015814:	e7f7      	b.n	8015806 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8015816:	682f      	ldr	r7, [r5, #0]
 8015818:	f105 0804 	add.w	r8, r5, #4
 801581c:	45b9      	cmp	r9, r7
 801581e:	d10d      	bne.n	801583c <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 8015820:	4696      	mov	lr, r2
 8015822:	f1be 0f1e 	cmp.w	lr, #30
 8015826:	dc06      	bgt.n	8015836 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8015828:	f10e 0e01 	add.w	lr, lr, #1
 801582c:	686f      	ldr	r7, [r5, #4]
 801582e:	4573      	cmp	r3, lr
 8015830:	f845 7b04 	str.w	r7, [r5], #4
 8015834:	dcf5      	bgt.n	8015822 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8015836:	3b01      	subs	r3, #1
 8015838:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801583c:	3201      	adds	r2, #1
 801583e:	4645      	mov	r5, r8
 8015840:	e7da      	b.n	80157f8 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 8015842:	4423      	add	r3, r4
 8015844:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 8015848:	3801      	subs	r0, #1
 801584a:	e7c9      	b.n	80157e0 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 801584c:	4b04      	ldr	r3, [pc, #16]	; (8015860 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801584e:	6818      	ldr	r0, [r3, #0]
 8015850:	b110      	cbz	r0, 8015858 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 8015852:	6803      	ldr	r3, [r0, #0]
 8015854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015856:	e795      	b.n	8015784 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 8015858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801585c:	2000b2e0 	.word	0x2000b2e0
 8015860:	2000b2dc 	.word	0x2000b2dc

08015864 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8015864:	b570      	push	{r4, r5, r6, lr}
 8015866:	4606      	mov	r6, r0
 8015868:	460c      	mov	r4, r1
 801586a:	b929      	cbnz	r1, 8015878 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801586c:	4b0c      	ldr	r3, [pc, #48]	; (80158a0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801586e:	2164      	movs	r1, #100	; 0x64
 8015870:	4a0c      	ldr	r2, [pc, #48]	; (80158a4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8015872:	480d      	ldr	r0, [pc, #52]	; (80158a8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8015874:	f00c fd64 	bl	8022340 <__assert_func>
 8015878:	2300      	movs	r3, #0
 801587a:	4d0c      	ldr	r5, [pc, #48]	; (80158ac <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801587c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8015880:	6828      	ldr	r0, [r5, #0]
 8015882:	b110      	cbz	r0, 801588a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8015884:	6803      	ldr	r3, [r0, #0]
 8015886:	695b      	ldr	r3, [r3, #20]
 8015888:	4798      	blx	r3
 801588a:	602c      	str	r4, [r5, #0]
 801588c:	4620      	mov	r0, r4
 801588e:	6823      	ldr	r3, [r4, #0]
 8015890:	68db      	ldr	r3, [r3, #12]
 8015892:	4798      	blx	r3
 8015894:	6833      	ldr	r3, [r6, #0]
 8015896:	4630      	mov	r0, r6
 8015898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801589a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801589e:	4718      	bx	r3
 80158a0:	08026954 	.word	0x08026954
 80158a4:	08026a44 	.word	0x08026a44
 80158a8:	0802695e 	.word	0x0802695e
 80158ac:	2000b2dc 	.word	0x2000b2dc

080158b0 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80158b0:	b510      	push	{r4, lr}
 80158b2:	f9b1 4000 	ldrsh.w	r4, [r1]
 80158b6:	888a      	ldrh	r2, [r1, #4]
 80158b8:	f9b0 3000 	ldrsh.w	r3, [r0]
 80158bc:	4422      	add	r2, r4
 80158be:	b212      	sxth	r2, r2
 80158c0:	4293      	cmp	r3, r2
 80158c2:	da15      	bge.n	80158f0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80158c4:	8882      	ldrh	r2, [r0, #4]
 80158c6:	4413      	add	r3, r2
 80158c8:	b21b      	sxth	r3, r3
 80158ca:	429c      	cmp	r4, r3
 80158cc:	da10      	bge.n	80158f0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80158ce:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80158d2:	88c9      	ldrh	r1, [r1, #6]
 80158d4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80158d8:	4419      	add	r1, r3
 80158da:	b209      	sxth	r1, r1
 80158dc:	428a      	cmp	r2, r1
 80158de:	da07      	bge.n	80158f0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80158e0:	88c0      	ldrh	r0, [r0, #6]
 80158e2:	4410      	add	r0, r2
 80158e4:	b200      	sxth	r0, r0
 80158e6:	4283      	cmp	r3, r0
 80158e8:	bfac      	ite	ge
 80158ea:	2000      	movge	r0, #0
 80158ec:	2001      	movlt	r0, #1
 80158ee:	bd10      	pop	{r4, pc}
 80158f0:	2000      	movs	r0, #0
 80158f2:	e7fc      	b.n	80158ee <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080158f4 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80158f4:	b570      	push	{r4, r5, r6, lr}
 80158f6:	f9b1 4000 	ldrsh.w	r4, [r1]
 80158fa:	f9b0 5000 	ldrsh.w	r5, [r0]
 80158fe:	42ac      	cmp	r4, r5
 8015900:	db18      	blt.n	8015934 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 8015902:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8015906:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801590a:	429a      	cmp	r2, r3
 801590c:	db12      	blt.n	8015934 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801590e:	8886      	ldrh	r6, [r0, #4]
 8015910:	4435      	add	r5, r6
 8015912:	888e      	ldrh	r6, [r1, #4]
 8015914:	4434      	add	r4, r6
 8015916:	b22d      	sxth	r5, r5
 8015918:	b224      	sxth	r4, r4
 801591a:	42a5      	cmp	r5, r4
 801591c:	db0a      	blt.n	8015934 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801591e:	88c0      	ldrh	r0, [r0, #6]
 8015920:	4418      	add	r0, r3
 8015922:	88cb      	ldrh	r3, [r1, #6]
 8015924:	441a      	add	r2, r3
 8015926:	b200      	sxth	r0, r0
 8015928:	b212      	sxth	r2, r2
 801592a:	4290      	cmp	r0, r2
 801592c:	bfb4      	ite	lt
 801592e:	2000      	movlt	r0, #0
 8015930:	2001      	movge	r0, #1
 8015932:	bd70      	pop	{r4, r5, r6, pc}
 8015934:	2000      	movs	r0, #0
 8015936:	e7fc      	b.n	8015932 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08015938 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8015938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801593a:	4604      	mov	r4, r0
 801593c:	4608      	mov	r0, r1
 801593e:	460d      	mov	r5, r1
 8015940:	f7fc fb8c 	bl	801205c <_ZNK8touchgfx4Rect7isEmptyEv>
 8015944:	b978      	cbnz	r0, 8015966 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8015946:	4620      	mov	r0, r4
 8015948:	f7fc fb88 	bl	801205c <_ZNK8touchgfx4Rect7isEmptyEv>
 801594c:	f9b5 6000 	ldrsh.w	r6, [r5]
 8015950:	b150      	cbz	r0, 8015968 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8015952:	8026      	strh	r6, [r4, #0]
 8015954:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8015958:	8063      	strh	r3, [r4, #2]
 801595a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801595e:	80a3      	strh	r3, [r4, #4]
 8015960:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015964:	80e3      	strh	r3, [r4, #6]
 8015966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015968:	f9b4 1000 	ldrsh.w	r1, [r4]
 801596c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015970:	42b1      	cmp	r1, r6
 8015972:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8015976:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801597a:	460f      	mov	r7, r1
 801597c:	88ed      	ldrh	r5, [r5, #6]
 801597e:	bfa8      	it	ge
 8015980:	4637      	movge	r7, r6
 8015982:	4293      	cmp	r3, r2
 8015984:	4618      	mov	r0, r3
 8015986:	4466      	add	r6, ip
 8015988:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801598c:	bfa8      	it	ge
 801598e:	4610      	movge	r0, r2
 8015990:	442a      	add	r2, r5
 8015992:	88e5      	ldrh	r5, [r4, #6]
 8015994:	4461      	add	r1, ip
 8015996:	b236      	sxth	r6, r6
 8015998:	8027      	strh	r7, [r4, #0]
 801599a:	442b      	add	r3, r5
 801599c:	b209      	sxth	r1, r1
 801599e:	b212      	sxth	r2, r2
 80159a0:	8060      	strh	r0, [r4, #2]
 80159a2:	b21b      	sxth	r3, r3
 80159a4:	428e      	cmp	r6, r1
 80159a6:	bfac      	ite	ge
 80159a8:	ebc7 0106 	rsbge	r1, r7, r6
 80159ac:	ebc7 0101 	rsblt	r1, r7, r1
 80159b0:	429a      	cmp	r2, r3
 80159b2:	bfac      	ite	ge
 80159b4:	ebc0 0202 	rsbge	r2, r0, r2
 80159b8:	ebc0 0203 	rsblt	r2, r0, r3
 80159bc:	80a1      	strh	r1, [r4, #4]
 80159be:	80e2      	strh	r2, [r4, #6]
 80159c0:	e7d1      	b.n	8015966 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080159c4 <_ZN8touchgfx11Application11getInstanceEv>:
 80159c4:	4b01      	ldr	r3, [pc, #4]	; (80159cc <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80159c6:	6818      	ldr	r0, [r3, #0]
 80159c8:	4770      	bx	lr
 80159ca:	bf00      	nop
 80159cc:	2000b2ec 	.word	0x2000b2ec

080159d0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 80159d0:	b570      	push	{r4, r5, r6, lr}
 80159d2:	2200      	movs	r2, #0
 80159d4:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 80159d8:	1d04      	adds	r4, r0, #4
 80159da:	b295      	uxth	r5, r2
 80159dc:	42ab      	cmp	r3, r5
 80159de:	d90e      	bls.n	80159fe <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 80159e0:	f854 6b04 	ldr.w	r6, [r4], #4
 80159e4:	4615      	mov	r5, r2
 80159e6:	3201      	adds	r2, #1
 80159e8:	428e      	cmp	r6, r1
 80159ea:	d1f6      	bne.n	80159da <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 80159ec:	4428      	add	r0, r5
 80159ee:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 80159f2:	2bff      	cmp	r3, #255	; 0xff
 80159f4:	d002      	beq.n	80159fc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 80159f6:	3301      	adds	r3, #1
 80159f8:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 80159fc:	bd70      	pop	{r4, r5, r6, pc}
 80159fe:	2b20      	cmp	r3, #32
 8015a00:	d106      	bne.n	8015a10 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 8015a02:	4b09      	ldr	r3, [pc, #36]	; (8015a28 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 8015a04:	f44f 7193 	mov.w	r1, #294	; 0x126
 8015a08:	4a08      	ldr	r2, [pc, #32]	; (8015a2c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 8015a0a:	4809      	ldr	r0, [pc, #36]	; (8015a30 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 8015a0c:	f00c fc98 	bl	8022340 <__assert_func>
 8015a10:	18c2      	adds	r2, r0, r3
 8015a12:	2401      	movs	r4, #1
 8015a14:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 8015a18:	191a      	adds	r2, r3, r4
 8015a1a:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 8015a1e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8015a22:	6041      	str	r1, [r0, #4]
 8015a24:	e7ea      	b.n	80159fc <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 8015a26:	bf00      	nop
 8015a28:	08026988 	.word	0x08026988
 8015a2c:	08026a88 	.word	0x08026a88
 8015a30:	0802695e 	.word	0x0802695e

08015a34 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 8015a34:	b570      	push	{r4, r5, r6, lr}
 8015a36:	2300      	movs	r3, #0
 8015a38:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 8015a3c:	1d04      	adds	r4, r0, #4
 8015a3e:	b29a      	uxth	r2, r3
 8015a40:	4296      	cmp	r6, r2
 8015a42:	d90a      	bls.n	8015a5a <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 8015a44:	f854 2b04 	ldr.w	r2, [r4], #4
 8015a48:	428a      	cmp	r2, r1
 8015a4a:	d107      	bne.n	8015a5c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8015a4c:	18c5      	adds	r5, r0, r3
 8015a4e:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 8015a52:	b11a      	cbz	r2, 8015a5c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 8015a54:	3a01      	subs	r2, #1
 8015a56:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 8015a5a:	bd70      	pop	{r4, r5, r6, pc}
 8015a5c:	3301      	adds	r3, #1
 8015a5e:	e7ee      	b.n	8015a3e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

08015a60 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8015a60:	2300      	movs	r3, #0
 8015a62:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8015a66:	30a8      	adds	r0, #168	; 0xa8
 8015a68:	f820 3c24 	strh.w	r3, [r0, #-36]
 8015a6c:	f802 3b01 	strb.w	r3, [r2], #1
 8015a70:	4282      	cmp	r2, r0
 8015a72:	d1fb      	bne.n	8015a6c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8015a74:	4770      	bx	lr

08015a76 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8015a76:	4603      	mov	r3, r0
 8015a78:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	801a      	strh	r2, [r3, #0]
 8015a80:	3308      	adds	r3, #8
 8015a82:	f823 2c06 	strh.w	r2, [r3, #-6]
 8015a86:	f823 2c04 	strh.w	r2, [r3, #-4]
 8015a8a:	f823 2c02 	strh.w	r2, [r3, #-2]
 8015a8e:	428b      	cmp	r3, r1
 8015a90:	d1f5      	bne.n	8015a7e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8015a92:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8015a96:	4770      	bx	lr

08015a98 <_ZN8touchgfx11ApplicationC1Ev>:
 8015a98:	b570      	push	{r4, r5, r6, lr}
 8015a9a:	4b16      	ldr	r3, [pc, #88]	; (8015af4 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 8015a9c:	2500      	movs	r5, #0
 8015a9e:	4604      	mov	r4, r0
 8015aa0:	30a8      	adds	r0, #168	; 0xa8
 8015aa2:	f840 3ca8 	str.w	r3, [r0, #-168]
 8015aa6:	f820 5c24 	strh.w	r5, [r0, #-36]
 8015aaa:	f7ff ffe4 	bl	8015a76 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015aae:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8015ab2:	f7ff ffe0 	bl	8015a76 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015ab6:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 8015aba:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 8015abe:	490e      	ldr	r1, [pc, #56]	; (8015af8 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 8015ac0:	480e      	ldr	r0, [pc, #56]	; (8015afc <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 8015ac2:	f00a f9d5 	bl	801fe70 <CRC_Lock>
 8015ac6:	4e0e      	ldr	r6, [pc, #56]	; (8015b00 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8015ac8:	4b0e      	ldr	r3, [pc, #56]	; (8015b04 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8015aca:	b158      	cbz	r0, 8015ae4 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 8015acc:	801d      	strh	r5, [r3, #0]
 8015ace:	2300      	movs	r3, #0
 8015ad0:	4a0d      	ldr	r2, [pc, #52]	; (8015b08 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8015ad2:	4620      	mov	r0, r4
 8015ad4:	6013      	str	r3, [r2, #0]
 8015ad6:	4a0d      	ldr	r2, [pc, #52]	; (8015b0c <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8015ad8:	6033      	str	r3, [r6, #0]
 8015ada:	6013      	str	r3, [r2, #0]
 8015adc:	f7ff ffc0 	bl	8015a60 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8015ae0:	4620      	mov	r0, r4
 8015ae2:	bd70      	pop	{r4, r5, r6, pc}
 8015ae4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015ae8:	2002      	movs	r0, #2
 8015aea:	801a      	strh	r2, [r3, #0]
 8015aec:	6030      	str	r0, [r6, #0]
 8015aee:	f000 ff81 	bl	80169f4 <_ZN8touchgfx6Screen4drawEv>
 8015af2:	e7ec      	b.n	8015ace <_ZN8touchgfx11ApplicationC1Ev+0x36>
 8015af4:	08026a10 	.word	0x08026a10
 8015af8:	b5e8b5cd 	.word	0xb5e8b5cd
 8015afc:	f407a5c2 	.word	0xf407a5c2
 8015b00:	2000b2dc 	.word	0x2000b2dc
 8015b04:	20000050 	.word	0x20000050
 8015b08:	2000b2ec 	.word	0x2000b2ec
 8015b0c:	2000b2e0 	.word	0x2000b2e0

08015b10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8015b10:	2300      	movs	r3, #0
 8015b12:	8003      	strh	r3, [r0, #0]
 8015b14:	8043      	strh	r3, [r0, #2]
 8015b16:	8083      	strh	r3, [r0, #4]
 8015b18:	80c3      	strh	r3, [r0, #6]
 8015b1a:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8015b1e:	4293      	cmp	r3, r2
 8015b20:	b530      	push	{r4, r5, lr}
 8015b22:	d912      	bls.n	8015b4a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8015b24:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8015b28:	3b01      	subs	r3, #1
 8015b2a:	6825      	ldr	r5, [r4, #0]
 8015b2c:	b29b      	uxth	r3, r3
 8015b2e:	6005      	str	r5, [r0, #0]
 8015b30:	4293      	cmp	r3, r2
 8015b32:	6865      	ldr	r5, [r4, #4]
 8015b34:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 8015b38:	6045      	str	r5, [r0, #4]
 8015b3a:	d906      	bls.n	8015b4a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8015b3c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8015b40:	681d      	ldr	r5, [r3, #0]
 8015b42:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 8015b46:	685d      	ldr	r5, [r3, #4]
 8015b48:	6065      	str	r5, [r4, #4]
 8015b4a:	bd30      	pop	{r4, r5, pc}

08015b4c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8015b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015b4e:	466b      	mov	r3, sp
 8015b50:	4604      	mov	r4, r0
 8015b52:	e883 0006 	stmia.w	r3, {r1, r2}
 8015b56:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8015b5a:	2a07      	cmp	r2, #7
 8015b5c:	d906      	bls.n	8015b6c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8015b5e:	4b09      	ldr	r3, [pc, #36]	; (8015b84 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8015b60:	f44f 7102 	mov.w	r1, #520	; 0x208
 8015b64:	4a08      	ldr	r2, [pc, #32]	; (8015b88 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8015b66:	4809      	ldr	r0, [pc, #36]	; (8015b8c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8015b68:	f00c fbea 	bl	8022340 <__assert_func>
 8015b6c:	1c51      	adds	r1, r2, #1
 8015b6e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8015b72:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8015b76:	cb03      	ldmia	r3!, {r0, r1}
 8015b78:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8015b7c:	6069      	str	r1, [r5, #4]
 8015b7e:	b003      	add	sp, #12
 8015b80:	bd30      	pop	{r4, r5, pc}
 8015b82:	bf00      	nop
 8015b84:	080269b0 	.word	0x080269b0
 8015b88:	08026acd 	.word	0x08026acd
 8015b8c:	080269df 	.word	0x080269df

08015b90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8015b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b94:	b089      	sub	sp, #36	; 0x24
 8015b96:	4606      	mov	r6, r0
 8015b98:	466c      	mov	r4, sp
 8015b9a:	4620      	mov	r0, r4
 8015b9c:	e884 0006 	stmia.w	r4, {r1, r2}
 8015ba0:	f7fc fa5c 	bl	801205c <_ZNK8touchgfx4Rect7isEmptyEv>
 8015ba4:	bbb0      	cbnz	r0, 8015c14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8015ba6:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 8015baa:	b1fd      	cbz	r5, 8015bec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 8015bac:	3d01      	subs	r5, #1
 8015bae:	af04      	add	r7, sp, #16
 8015bb0:	f04f 090a 	mov.w	r9, #10
 8015bb4:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8015bb8:	ab02      	add	r3, sp, #8
 8015bba:	fa1f f885 	uxth.w	r8, r5
 8015bbe:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8015bc2:	6851      	ldr	r1, [r2, #4]
 8015bc4:	c303      	stmia	r3!, {r0, r1}
 8015bc6:	4621      	mov	r1, r4
 8015bc8:	a802      	add	r0, sp, #8
 8015bca:	f7ff fe93 	bl	80158f4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015bce:	bb08      	cbnz	r0, 8015c14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8015bd0:	a902      	add	r1, sp, #8
 8015bd2:	4620      	mov	r0, r4
 8015bd4:	f7ff fe8e 	bl	80158f4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015bd8:	b1f8      	cbz	r0, 8015c1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 8015bda:	4642      	mov	r2, r8
 8015bdc:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8015be0:	a806      	add	r0, sp, #24
 8015be2:	f7ff ff95 	bl	8015b10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015be6:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 8015bea:	d2e3      	bcs.n	8015bb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 8015bec:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 8015bf0:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 8015bf4:	2b08      	cmp	r3, #8
 8015bf6:	d108      	bne.n	8015c0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8015bf8:	4629      	mov	r1, r5
 8015bfa:	a806      	add	r0, sp, #24
 8015bfc:	2207      	movs	r2, #7
 8015bfe:	f7ff ff87 	bl	8015b10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015c02:	a906      	add	r1, sp, #24
 8015c04:	4620      	mov	r0, r4
 8015c06:	f7ff fe97 	bl	8015938 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015c0a:	4628      	mov	r0, r5
 8015c0c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8015c10:	f7ff ff9c 	bl	8015b4c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8015c14:	b009      	add	sp, #36	; 0x24
 8015c16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c1a:	4621      	mov	r1, r4
 8015c1c:	a802      	add	r0, sp, #8
 8015c1e:	f7ff fe47 	bl	80158b0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015c22:	b150      	cbz	r0, 8015c3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 8015c24:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8015c28:	a806      	add	r0, sp, #24
 8015c2a:	4642      	mov	r2, r8
 8015c2c:	f7ff ff70 	bl	8015b10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015c30:	a902      	add	r1, sp, #8
 8015c32:	4620      	mov	r0, r4
 8015c34:	f7ff fe80 	bl	8015938 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015c38:	e7d5      	b.n	8015be6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8015c3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015c3e:	e887 0003 	stmia.w	r7, {r0, r1}
 8015c42:	a902      	add	r1, sp, #8
 8015c44:	4638      	mov	r0, r7
 8015c46:	f7ff fe77 	bl	8015938 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015c4a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8015c4e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8015c52:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8015c56:	fb13 f302 	smulbb	r3, r3, r2
 8015c5a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8015c5e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8015c62:	fb11 f102 	smulbb	r1, r1, r2
 8015c66:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8015c6a:	fb09 f303 	mul.w	r3, r9, r3
 8015c6e:	fb12 1100 	smlabb	r1, r2, r0, r1
 8015c72:	220b      	movs	r2, #11
 8015c74:	434a      	muls	r2, r1
 8015c76:	4293      	cmp	r3, r2
 8015c78:	dab5      	bge.n	8015be6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8015c7a:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8015c7e:	a806      	add	r0, sp, #24
 8015c80:	4642      	mov	r2, r8
 8015c82:	f7ff ff45 	bl	8015b10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015c86:	e897 0003 	ldmia.w	r7, {r0, r1}
 8015c8a:	e884 0003 	stmia.w	r4, {r0, r1}
 8015c8e:	e7aa      	b.n	8015be6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

08015c90 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8015c90:	4b1d      	ldr	r3, [pc, #116]	; (8015d08 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 8015c92:	b530      	push	{r4, r5, lr}
 8015c94:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015c98:	b085      	sub	sp, #20
 8015c9a:	4b1c      	ldr	r3, [pc, #112]	; (8015d0c <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8015c9c:	460c      	mov	r4, r1
 8015c9e:	2100      	movs	r1, #0
 8015ca0:	4605      	mov	r5, r0
 8015ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ca6:	6820      	ldr	r0, [r4, #0]
 8015ca8:	9100      	str	r1, [sp, #0]
 8015caa:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015cae:	ab02      	add	r3, sp, #8
 8015cb0:	6861      	ldr	r1, [r4, #4]
 8015cb2:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015cb6:	c303      	stmia	r3!, {r0, r1}
 8015cb8:	4669      	mov	r1, sp
 8015cba:	a802      	add	r0, sp, #8
 8015cbc:	f7fc f98a 	bl	8011fd4 <_ZN8touchgfx4RectaNERKS0_>
 8015cc0:	ab02      	add	r3, sp, #8
 8015cc2:	cb03      	ldmia	r3!, {r0, r1}
 8015cc4:	4b12      	ldr	r3, [pc, #72]	; (8015d10 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 8015cc6:	6020      	str	r0, [r4, #0]
 8015cc8:	6818      	ldr	r0, [r3, #0]
 8015cca:	6061      	str	r1, [r4, #4]
 8015ccc:	b138      	cbz	r0, 8015cde <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8015cce:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 8015cd2:	b133      	cbz	r3, 8015ce2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 8015cd4:	6821      	ldr	r1, [r4, #0]
 8015cd6:	4628      	mov	r0, r5
 8015cd8:	6862      	ldr	r2, [r4, #4]
 8015cda:	f7ff ff59 	bl	8015b90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8015cde:	b005      	add	sp, #20
 8015ce0:	bd30      	pop	{r4, r5, pc}
 8015ce2:	6803      	ldr	r3, [r0, #0]
 8015ce4:	4621      	mov	r1, r4
 8015ce6:	689b      	ldr	r3, [r3, #8]
 8015ce8:	4798      	blx	r3
 8015cea:	4b0a      	ldr	r3, [pc, #40]	; (8015d14 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8015cec:	6818      	ldr	r0, [r3, #0]
 8015cee:	b118      	cbz	r0, 8015cf8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8015cf0:	6803      	ldr	r3, [r0, #0]
 8015cf2:	4621      	mov	r1, r4
 8015cf4:	689b      	ldr	r3, [r3, #8]
 8015cf6:	4798      	blx	r3
 8015cf8:	4b07      	ldr	r3, [pc, #28]	; (8015d18 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8015cfa:	4621      	mov	r1, r4
 8015cfc:	6818      	ldr	r0, [r3, #0]
 8015cfe:	6803      	ldr	r3, [r0, #0]
 8015d00:	695b      	ldr	r3, [r3, #20]
 8015d02:	4798      	blx	r3
 8015d04:	e7eb      	b.n	8015cde <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8015d06:	bf00      	nop
 8015d08:	2000b254 	.word	0x2000b254
 8015d0c:	2000b256 	.word	0x2000b256
 8015d10:	2000b2dc 	.word	0x2000b2dc
 8015d14:	2000b2d8 	.word	0x2000b2d8
 8015d18:	2000b260 	.word	0x2000b260

08015d1c <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8015d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d20:	4604      	mov	r4, r0
 8015d22:	b09b      	sub	sp, #108	; 0x6c
 8015d24:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 8015d28:	b129      	cbz	r1, 8015d36 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8015d30:	b01b      	add	sp, #108	; 0x6c
 8015d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d36:	4baf      	ldr	r3, [pc, #700]	; (8015ff4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	b33b      	cbz	r3, 8015d8c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8015d3c:	4dae      	ldr	r5, [pc, #696]	; (8015ff8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 8015d3e:	4628      	mov	r0, r5
 8015d40:	f7fc f98c 	bl	801205c <_ZNK8touchgfx4Rect7isEmptyEv>
 8015d44:	4606      	mov	r6, r0
 8015d46:	bb08      	cbnz	r0, 8015d8c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8015d48:	4628      	mov	r0, r5
 8015d4a:	f7ff fc5b 	bl	8015604 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8015d4e:	6829      	ldr	r1, [r5, #0]
 8015d50:	686a      	ldr	r2, [r5, #4]
 8015d52:	4620      	mov	r0, r4
 8015d54:	f7ff ff1c 	bl	8015b90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8015d58:	802e      	strh	r6, [r5, #0]
 8015d5a:	806e      	strh	r6, [r5, #2]
 8015d5c:	80ae      	strh	r6, [r5, #4]
 8015d5e:	80ee      	strh	r6, [r5, #6]
 8015d60:	4fa6      	ldr	r7, [pc, #664]	; (8015ffc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8015d62:	a809      	add	r0, sp, #36	; 0x24
 8015d64:	f7ff fe87 	bl	8015a76 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015d68:	883d      	ldrh	r5, [r7, #0]
 8015d6a:	462e      	mov	r6, r5
 8015d6c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8015d70:	42b3      	cmp	r3, r6
 8015d72:	d910      	bls.n	8015d96 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 8015d74:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8015d78:	3601      	adds	r6, #1
 8015d7a:	a809      	add	r0, sp, #36	; 0x24
 8015d7c:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8015d80:	b2b6      	uxth	r6, r6
 8015d82:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8015d86:	f7ff fee1 	bl	8015b4c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8015d8a:	e7ef      	b.n	8015d6c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 8015d8c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d1e5      	bne.n	8015d60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 8015d94:	e7cc      	b.n	8015d30 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8015d96:	462e      	mov	r6, r5
 8015d98:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8015d9c:	42b3      	cmp	r3, r6
 8015d9e:	d90b      	bls.n	8015db8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8015da0:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8015da4:	3601      	adds	r6, #1
 8015da6:	4620      	mov	r0, r4
 8015da8:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8015dac:	b2b6      	uxth	r6, r6
 8015dae:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8015db2:	f7ff feed 	bl	8015b90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8015db6:	e7ef      	b.n	8015d98 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 8015db8:	4e91      	ldr	r6, [pc, #580]	; (8016000 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 8015dba:	6833      	ldr	r3, [r6, #0]
 8015dbc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015dc0:	2b01      	cmp	r3, #1
 8015dc2:	f040 8092 	bne.w	8015eea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 8015dc6:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8015dca:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8015dce:	f04f 0900 	mov.w	r9, #0
 8015dd2:	33aa      	adds	r3, #170	; 0xaa
 8015dd4:	42a8      	cmp	r0, r5
 8015dd6:	f103 0308 	add.w	r3, r3, #8
 8015dda:	dd0a      	ble.n	8015df2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 8015ddc:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8015de0:	3501      	adds	r5, #1
 8015de2:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8015de6:	440a      	add	r2, r1
 8015de8:	b212      	sxth	r2, r2
 8015dea:	4591      	cmp	r9, r2
 8015dec:	bfb8      	it	lt
 8015dee:	4691      	movlt	r9, r2
 8015df0:	e7f0      	b.n	8015dd4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 8015df2:	4b84      	ldr	r3, [pc, #528]	; (8016004 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8015df4:	f8df 8214 	ldr.w	r8, [pc, #532]	; 801600c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 8015df8:	881d      	ldrh	r5, [r3, #0]
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	2d0f      	cmp	r5, #15
 8015dfe:	bf8c      	ite	hi
 8015e00:	08ed      	lsrhi	r5, r5, #3
 8015e02:	2501      	movls	r5, #1
 8015e04:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8015e08:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8015e0c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8015e10:	6830      	ldr	r0, [r6, #0]
 8015e12:	440b      	add	r3, r1
 8015e14:	6802      	ldr	r2, [r0, #0]
 8015e16:	b21b      	sxth	r3, r3
 8015e18:	4599      	cmp	r9, r3
 8015e1a:	dd49      	ble.n	8015eb0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 8015e1c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8015e20:	4798      	blx	r3
 8015e22:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8015e26:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8015e2a:	4413      	add	r3, r2
 8015e2c:	b21b      	sxth	r3, r3
 8015e2e:	195a      	adds	r2, r3, r5
 8015e30:	4290      	cmp	r0, r2
 8015e32:	da07      	bge.n	8015e44 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8015e34:	4581      	cmp	r9, r0
 8015e36:	dd05      	ble.n	8015e44 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8015e38:	4298      	cmp	r0, r3
 8015e3a:	da33      	bge.n	8015ea4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	dd31      	ble.n	8015ea4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8015e40:	4648      	mov	r0, r9
 8015e42:	e004      	b.n	8015e4e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 8015e44:	4298      	cmp	r0, r3
 8015e46:	dbfb      	blt.n	8015e40 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 8015e48:	4548      	cmp	r0, r9
 8015e4a:	bfa8      	it	ge
 8015e4c:	4648      	movge	r0, r9
 8015e4e:	f9b8 2000 	ldrsh.w	r2, [r8]
 8015e52:	2100      	movs	r1, #0
 8015e54:	1ac0      	subs	r0, r0, r3
 8015e56:	f8b7 a000 	ldrh.w	sl, [r7]
 8015e5a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8015e5e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015e62:	f8ad 2018 	strh.w	r2, [sp, #24]
 8015e66:	f8ad 001a 	strh.w	r0, [sp, #26]
 8015e6a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8015e6e:	4553      	cmp	r3, sl
 8015e70:	d9ca      	bls.n	8015e08 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8015e72:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8015e76:	ab07      	add	r3, sp, #28
 8015e78:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8015e7c:	6851      	ldr	r1, [r2, #4]
 8015e7e:	c303      	stmia	r3!, {r0, r1}
 8015e80:	a807      	add	r0, sp, #28
 8015e82:	a905      	add	r1, sp, #20
 8015e84:	f7fc f8a6 	bl	8011fd4 <_ZN8touchgfx4RectaNERKS0_>
 8015e88:	a807      	add	r0, sp, #28
 8015e8a:	f7fc f8e7 	bl	801205c <_ZNK8touchgfx4Rect7isEmptyEv>
 8015e8e:	b920      	cbnz	r0, 8015e9a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 8015e90:	6823      	ldr	r3, [r4, #0]
 8015e92:	a907      	add	r1, sp, #28
 8015e94:	4620      	mov	r0, r4
 8015e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e98:	4798      	blx	r3
 8015e9a:	f10a 0a01 	add.w	sl, sl, #1
 8015e9e:	fa1f fa8a 	uxth.w	sl, sl
 8015ea2:	e7e2      	b.n	8015e6a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 8015ea4:	6830      	ldr	r0, [r6, #0]
 8015ea6:	2101      	movs	r1, #1
 8015ea8:	6803      	ldr	r3, [r0, #0]
 8015eaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015eac:	4798      	blx	r3
 8015eae:	e7ab      	b.n	8015e08 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8015eb0:	69d3      	ldr	r3, [r2, #28]
 8015eb2:	4798      	blx	r3
 8015eb4:	4b54      	ldr	r3, [pc, #336]	; (8016008 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 8015eb6:	781b      	ldrb	r3, [r3, #0]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	f43f af39 	beq.w	8015d30 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8015ebe:	2300      	movs	r3, #0
 8015ec0:	883d      	ldrh	r5, [r7, #0]
 8015ec2:	34ea      	adds	r4, #234	; 0xea
 8015ec4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8015ec8:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8015ecc:	42ab      	cmp	r3, r5
 8015ece:	f67f af2f 	bls.w	8015d30 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8015ed2:	ab1a      	add	r3, sp, #104	; 0x68
 8015ed4:	4620      	mov	r0, r4
 8015ed6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015eda:	3501      	adds	r5, #1
 8015edc:	3b44      	subs	r3, #68	; 0x44
 8015ede:	b2ad      	uxth	r5, r5
 8015ee0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8015ee4:	f7ff fe32 	bl	8015b4c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8015ee8:	e7ee      	b.n	8015ec8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 8015eea:	2b02      	cmp	r3, #2
 8015eec:	d16a      	bne.n	8015fc4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8015eee:	f8df a120 	ldr.w	sl, [pc, #288]	; 8016010 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 8015ef2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8015ef6:	42ab      	cmp	r3, r5
 8015ef8:	d9dc      	bls.n	8015eb4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 8015efa:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8015efe:	ab03      	add	r3, sp, #12
 8015f00:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8015f04:	6851      	ldr	r1, [r2, #4]
 8015f06:	c303      	stmia	r3!, {r0, r1}
 8015f08:	f89a 3000 	ldrb.w	r3, [sl]
 8015f0c:	2b01      	cmp	r3, #1
 8015f0e:	d102      	bne.n	8015f16 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 8015f10:	a803      	add	r0, sp, #12
 8015f12:	f7ff fbd1 	bl	80156b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015f16:	a803      	add	r0, sp, #12
 8015f18:	f7fc f8a0 	bl	801205c <_ZNK8touchgfx4Rect7isEmptyEv>
 8015f1c:	2800      	cmp	r0, #0
 8015f1e:	d14a      	bne.n	8015fb6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 8015f20:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8015f24:	f10d 0914 	add.w	r9, sp, #20
 8015f28:	f10d 081c 	add.w	r8, sp, #28
 8015f2c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8015f30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015f34:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015f38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015f3c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8015f40:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015f44:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8015f48:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 8015f4c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8015f50:	44dc      	add	ip, fp
 8015f52:	6830      	ldr	r0, [r6, #0]
 8015f54:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8015f58:	ebac 0c02 	sub.w	ip, ip, r2
 8015f5c:	f8d0 e000 	ldr.w	lr, [r0]
 8015f60:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8015f64:	fa1f fc8c 	uxth.w	ip, ip
 8015f68:	f8cd c000 	str.w	ip, [sp]
 8015f6c:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 8015f70:	47d8      	blx	fp
 8015f72:	f89a 3000 	ldrb.w	r3, [sl]
 8015f76:	f8ad 001a 	strh.w	r0, [sp, #26]
 8015f7a:	2b01      	cmp	r3, #1
 8015f7c:	d11e      	bne.n	8015fbc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 8015f7e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015f82:	e888 0003 	stmia.w	r8, {r0, r1}
 8015f86:	4640      	mov	r0, r8
 8015f88:	f7ff fb3c 	bl	8015604 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8015f8c:	6823      	ldr	r3, [r4, #0]
 8015f8e:	4641      	mov	r1, r8
 8015f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f92:	4620      	mov	r0, r4
 8015f94:	4798      	blx	r3
 8015f96:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8015f9a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8015f9e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8015fa2:	4413      	add	r3, r2
 8015fa4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8015fa8:	440a      	add	r2, r1
 8015faa:	b21b      	sxth	r3, r3
 8015fac:	b212      	sxth	r2, r2
 8015fae:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015fb2:	4293      	cmp	r3, r2
 8015fb4:	dbc6      	blt.n	8015f44 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 8015fb6:	3501      	adds	r5, #1
 8015fb8:	b2ad      	uxth	r5, r5
 8015fba:	e79a      	b.n	8015ef2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 8015fbc:	6823      	ldr	r3, [r4, #0]
 8015fbe:	4649      	mov	r1, r9
 8015fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fc2:	e7e6      	b.n	8015f92 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8015fc4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8015fc8:	42ab      	cmp	r3, r5
 8015fca:	f67f af73 	bls.w	8015eb4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 8015fce:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8015fd2:	ab07      	add	r3, sp, #28
 8015fd4:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8015fd8:	6851      	ldr	r1, [r2, #4]
 8015fda:	c303      	stmia	r3!, {r0, r1}
 8015fdc:	a807      	add	r0, sp, #28
 8015fde:	f7fc f83d 	bl	801205c <_ZNK8touchgfx4Rect7isEmptyEv>
 8015fe2:	b920      	cbnz	r0, 8015fee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 8015fe4:	6823      	ldr	r3, [r4, #0]
 8015fe6:	a907      	add	r1, sp, #28
 8015fe8:	4620      	mov	r0, r4
 8015fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fec:	4798      	blx	r3
 8015fee:	3501      	adds	r5, #1
 8015ff0:	b2ad      	uxth	r5, r5
 8015ff2:	e7e7      	b.n	8015fc4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8015ff4:	2000b2d8 	.word	0x2000b2d8
 8015ff8:	2000b2e4 	.word	0x2000b2e4
 8015ffc:	20000050 	.word	0x20000050
 8016000:	2000b260 	.word	0x2000b260
 8016004:	2000b256 	.word	0x2000b256
 8016008:	2000b25e 	.word	0x2000b25e
 801600c:	2000b254 	.word	0x2000b254
 8016010:	2000b258 	.word	0x2000b258

08016014 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8016014:	4b03      	ldr	r3, [pc, #12]	; (8016024 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8016016:	2200      	movs	r2, #0
 8016018:	801a      	strh	r2, [r3, #0]
 801601a:	805a      	strh	r2, [r3, #2]
 801601c:	809a      	strh	r2, [r3, #4]
 801601e:	80da      	strh	r2, [r3, #6]
 8016020:	4770      	bx	lr
 8016022:	bf00      	nop
 8016024:	2000b2e4 	.word	0x2000b2e4

08016028 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 8016028:	2000      	movs	r0, #0
 801602a:	4770      	bx	lr

0801602c <_ZNK8touchgfx4Font12getGSUBTableEv>:
 801602c:	2000      	movs	r0, #0
 801602e:	4770      	bx	lr

08016030 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8016030:	b508      	push	{r3, lr}
 8016032:	6803      	ldr	r3, [r0, #0]
 8016034:	68db      	ldr	r3, [r3, #12]
 8016036:	4798      	blx	r3
 8016038:	b128      	cbz	r0, 8016046 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801603a:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801603e:	7a80      	ldrb	r0, [r0, #10]
 8016040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016044:	4318      	orrs	r0, r3
 8016046:	bd08      	pop	{r3, pc}

08016048 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 8016048:	b40e      	push	{r1, r2, r3}
 801604a:	b533      	push	{r0, r1, r4, r5, lr}
 801604c:	ab05      	add	r3, sp, #20
 801604e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016052:	9301      	str	r3, [sp, #4]
 8016054:	4b0a      	ldr	r3, [pc, #40]	; (8016080 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 8016056:	685c      	ldr	r4, [r3, #4]
 8016058:	1061      	asrs	r1, r4, #1
 801605a:	07e4      	lsls	r4, r4, #31
 801605c:	eb00 0501 	add.w	r5, r0, r1
 8016060:	bf46      	itte	mi
 8016062:	681b      	ldrmi	r3, [r3, #0]
 8016064:	5841      	ldrmi	r1, [r0, r1]
 8016066:	681c      	ldrpl	r4, [r3, #0]
 8016068:	4628      	mov	r0, r5
 801606a:	bf48      	it	mi
 801606c:	58cc      	ldrmi	r4, [r1, r3]
 801606e:	2100      	movs	r1, #0
 8016070:	9b01      	ldr	r3, [sp, #4]
 8016072:	47a0      	blx	r4
 8016074:	b002      	add	sp, #8
 8016076:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801607a:	b003      	add	sp, #12
 801607c:	4770      	bx	lr
 801607e:	bf00      	nop
 8016080:	20000038 	.word	0x20000038

08016084 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 8016084:	b40c      	push	{r2, r3}
 8016086:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016088:	ab06      	add	r3, sp, #24
 801608a:	f853 2b04 	ldr.w	r2, [r3], #4
 801608e:	9301      	str	r3, [sp, #4]
 8016090:	4b09      	ldr	r3, [pc, #36]	; (80160b8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 8016092:	685d      	ldr	r5, [r3, #4]
 8016094:	106c      	asrs	r4, r5, #1
 8016096:	07ed      	lsls	r5, r5, #31
 8016098:	eb00 0604 	add.w	r6, r0, r4
 801609c:	bf45      	ittet	mi
 801609e:	681b      	ldrmi	r3, [r3, #0]
 80160a0:	5900      	ldrmi	r0, [r0, r4]
 80160a2:	681c      	ldrpl	r4, [r3, #0]
 80160a4:	58c4      	ldrmi	r4, [r0, r3]
 80160a6:	4630      	mov	r0, r6
 80160a8:	9b01      	ldr	r3, [sp, #4]
 80160aa:	47a0      	blx	r4
 80160ac:	b002      	add	sp, #8
 80160ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160b2:	b002      	add	sp, #8
 80160b4:	4770      	bx	lr
 80160b6:	bf00      	nop
 80160b8:	20000038 	.word	0x20000038

080160bc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80160bc:	b40e      	push	{r1, r2, r3}
 80160be:	b530      	push	{r4, r5, lr}
 80160c0:	b098      	sub	sp, #96	; 0x60
 80160c2:	4604      	mov	r4, r0
 80160c4:	ab1b      	add	r3, sp, #108	; 0x6c
 80160c6:	a802      	add	r0, sp, #8
 80160c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80160cc:	9301      	str	r3, [sp, #4]
 80160ce:	f001 f89f 	bl	8017210 <_ZN8touchgfx12TextProviderC1Ev>
 80160d2:	6823      	ldr	r3, [r4, #0]
 80160d4:	4620      	mov	r0, r4
 80160d6:	2401      	movs	r4, #1
 80160d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80160da:	4798      	blx	r3
 80160dc:	9a01      	ldr	r2, [sp, #4]
 80160de:	4603      	mov	r3, r0
 80160e0:	4629      	mov	r1, r5
 80160e2:	a802      	add	r0, sp, #8
 80160e4:	f001 f8b1 	bl	801724a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80160e8:	a802      	add	r0, sp, #8
 80160ea:	f001 f8e7 	bl	80172bc <_ZN8touchgfx12TextProvider11getNextCharEv>
 80160ee:	b2a3      	uxth	r3, r4
 80160f0:	b138      	cbz	r0, 8016102 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 80160f2:	280a      	cmp	r0, #10
 80160f4:	a802      	add	r0, sp, #8
 80160f6:	bf04      	itt	eq
 80160f8:	3301      	addeq	r3, #1
 80160fa:	b21c      	sxtheq	r4, r3
 80160fc:	f001 f8de 	bl	80172bc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016100:	e7f5      	b.n	80160ee <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8016102:	4618      	mov	r0, r3
 8016104:	b018      	add	sp, #96	; 0x60
 8016106:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801610a:	b003      	add	sp, #12
 801610c:	4770      	bx	lr
	...

08016110 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8016110:	b40e      	push	{r1, r2, r3}
 8016112:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016114:	b098      	sub	sp, #96	; 0x60
 8016116:	4605      	mov	r5, r0
 8016118:	4f25      	ldr	r7, [pc, #148]	; (80161b0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 801611a:	ab1d      	add	r3, sp, #116	; 0x74
 801611c:	a802      	add	r0, sp, #8
 801611e:	ae18      	add	r6, sp, #96	; 0x60
 8016120:	f853 4b04 	ldr.w	r4, [r3], #4
 8016124:	9300      	str	r3, [sp, #0]
 8016126:	f001 f873 	bl	8017210 <_ZN8touchgfx12TextProviderC1Ev>
 801612a:	682b      	ldr	r3, [r5, #0]
 801612c:	4628      	mov	r0, r5
 801612e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016130:	4798      	blx	r3
 8016132:	4621      	mov	r1, r4
 8016134:	2400      	movs	r4, #0
 8016136:	4603      	mov	r3, r0
 8016138:	9a00      	ldr	r2, [sp, #0]
 801613a:	a802      	add	r0, sp, #8
 801613c:	f001 f885 	bl	801724a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016140:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8016144:	462a      	mov	r2, r5
 8016146:	4633      	mov	r3, r6
 8016148:	4621      	mov	r1, r4
 801614a:	a802      	add	r0, sp, #8
 801614c:	f001 f9e2 	bl	8017514 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016150:	b340      	cbz	r0, 80161a4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x94>
 8016152:	280a      	cmp	r0, #10
 8016154:	d01f      	beq.n	8016196 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8016156:	9901      	ldr	r1, [sp, #4]
 8016158:	b1e9      	cbz	r1, 8016196 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801615a:	7b4b      	ldrb	r3, [r1, #13]
 801615c:	f891 c008 	ldrb.w	ip, [r1, #8]
 8016160:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016164:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 8016168:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801616c:	79c9      	ldrb	r1, [r1, #7]
 801616e:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 8016172:	bf18      	it	ne
 8016174:	4638      	movne	r0, r7
 8016176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801617a:	bf08      	it	eq
 801617c:	2000      	moveq	r0, #0
 801617e:	88aa      	ldrh	r2, [r5, #4]
 8016180:	ea41 010e 	orr.w	r1, r1, lr
 8016184:	ea43 030c 	orr.w	r3, r3, ip
 8016188:	440a      	add	r2, r1
 801618a:	4303      	orrs	r3, r0
 801618c:	1ad3      	subs	r3, r2, r3
 801618e:	b29b      	uxth	r3, r3
 8016190:	42a3      	cmp	r3, r4
 8016192:	bfc8      	it	gt
 8016194:	b21c      	sxthgt	r4, r3
 8016196:	4633      	mov	r3, r6
 8016198:	462a      	mov	r2, r5
 801619a:	2100      	movs	r1, #0
 801619c:	a802      	add	r0, sp, #8
 801619e:	f001 f9b9 	bl	8017514 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80161a2:	e7d5      	b.n	8016150 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 80161a4:	b2a0      	uxth	r0, r4
 80161a6:	b018      	add	sp, #96	; 0x60
 80161a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80161ac:	b003      	add	sp, #12
 80161ae:	4770      	bx	lr
 80161b0:	fffffe00 	.word	0xfffffe00

080161b4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80161b4:	b40e      	push	{r1, r2, r3}
 80161b6:	b570      	push	{r4, r5, r6, lr}
 80161b8:	b099      	sub	sp, #100	; 0x64
 80161ba:	4604      	mov	r4, r0
 80161bc:	26ff      	movs	r6, #255	; 0xff
 80161be:	ab1d      	add	r3, sp, #116	; 0x74
 80161c0:	a802      	add	r0, sp, #8
 80161c2:	f853 5b04 	ldr.w	r5, [r3], #4
 80161c6:	9300      	str	r3, [sp, #0]
 80161c8:	f001 f822 	bl	8017210 <_ZN8touchgfx12TextProviderC1Ev>
 80161cc:	6823      	ldr	r3, [r4, #0]
 80161ce:	4620      	mov	r0, r4
 80161d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80161d2:	4798      	blx	r3
 80161d4:	4629      	mov	r1, r5
 80161d6:	4603      	mov	r3, r0
 80161d8:	9a00      	ldr	r2, [sp, #0]
 80161da:	a802      	add	r0, sp, #8
 80161dc:	ad18      	add	r5, sp, #96	; 0x60
 80161de:	f001 f834 	bl	801724a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80161e2:	2100      	movs	r1, #0
 80161e4:	4622      	mov	r2, r4
 80161e6:	a802      	add	r0, sp, #8
 80161e8:	f845 1d5c 	str.w	r1, [r5, #-92]!
 80161ec:	462b      	mov	r3, r5
 80161ee:	f001 f991 	bl	8017514 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80161f2:	b190      	cbz	r0, 801621a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 80161f4:	280a      	cmp	r0, #10
 80161f6:	d009      	beq.n	801620c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 80161f8:	9a01      	ldr	r2, [sp, #4]
 80161fa:	b13a      	cbz	r2, 801620c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 80161fc:	7923      	ldrb	r3, [r4, #4]
 80161fe:	7a12      	ldrb	r2, [r2, #8]
 8016200:	1a9b      	subs	r3, r3, r2
 8016202:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8016206:	429e      	cmp	r6, r3
 8016208:	bf28      	it	cs
 801620a:	461e      	movcs	r6, r3
 801620c:	462b      	mov	r3, r5
 801620e:	4622      	mov	r2, r4
 8016210:	2100      	movs	r1, #0
 8016212:	a802      	add	r0, sp, #8
 8016214:	f001 f97e 	bl	8017514 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016218:	e7eb      	b.n	80161f2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801621a:	4630      	mov	r0, r6
 801621c:	b019      	add	sp, #100	; 0x64
 801621e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016222:	b003      	add	sp, #12
 8016224:	4770      	bx	lr

08016226 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8016226:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801622a:	b099      	sub	sp, #100	; 0x64
 801622c:	4606      	mov	r6, r0
 801622e:	4614      	mov	r4, r2
 8016230:	4688      	mov	r8, r1
 8016232:	a802      	add	r0, sp, #8
 8016234:	461d      	mov	r5, r3
 8016236:	f04f 0b00 	mov.w	fp, #0
 801623a:	f000 ffe9 	bl	8017210 <_ZN8touchgfx12TextProviderC1Ev>
 801623e:	6833      	ldr	r3, [r6, #0]
 8016240:	4630      	mov	r0, r6
 8016242:	465f      	mov	r7, fp
 8016244:	46da      	mov	sl, fp
 8016246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016248:	46d9      	mov	r9, fp
 801624a:	4798      	blx	r3
 801624c:	462a      	mov	r2, r5
 801624e:	4603      	mov	r3, r0
 8016250:	4621      	mov	r1, r4
 8016252:	a802      	add	r0, sp, #8
 8016254:	f000 fff9 	bl	801724a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8016258:	ab01      	add	r3, sp, #4
 801625a:	4632      	mov	r2, r6
 801625c:	4641      	mov	r1, r8
 801625e:	a802      	add	r0, sp, #8
 8016260:	f8cd 9004 	str.w	r9, [sp, #4]
 8016264:	f001 f956 	bl	8017514 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016268:	4605      	mov	r5, r0
 801626a:	b108      	cbz	r0, 8016270 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 801626c:	280a      	cmp	r0, #10
 801626e:	d10b      	bne.n	8016288 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 8016270:	4557      	cmp	r7, sl
 8016272:	bf38      	it	cc
 8016274:	4657      	movcc	r7, sl
 8016276:	f04f 0a00 	mov.w	sl, #0
 801627a:	b91d      	cbnz	r5, 8016284 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801627c:	4638      	mov	r0, r7
 801627e:	b019      	add	sp, #100	; 0x64
 8016280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016284:	46ab      	mov	fp, r5
 8016286:	e7e7      	b.n	8016258 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 8016288:	9a01      	ldr	r2, [sp, #4]
 801628a:	2a00      	cmp	r2, #0
 801628c:	d0fa      	beq.n	8016284 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 801628e:	f992 400d 	ldrsb.w	r4, [r2, #13]
 8016292:	4659      	mov	r1, fp
 8016294:	6833      	ldr	r3, [r6, #0]
 8016296:	f404 7080 	and.w	r0, r4, #256	; 0x100
 801629a:	7a94      	ldrb	r4, [r2, #10]
 801629c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801629e:	4304      	orrs	r4, r0
 80162a0:	4630      	mov	r0, r6
 80162a2:	8895      	ldrh	r5, [r2, #4]
 80162a4:	4798      	blx	r3
 80162a6:	4420      	add	r0, r4
 80162a8:	4450      	add	r0, sl
 80162aa:	fa1f fa80 	uxth.w	sl, r0
 80162ae:	e7e4      	b.n	801627a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

080162b0 <_ZNK8touchgfx8Drawable10invalidateEv>:
 80162b0:	b513      	push	{r0, r1, r4, lr}
 80162b2:	1d01      	adds	r1, r0, #4
 80162b4:	4603      	mov	r3, r0
 80162b6:	466a      	mov	r2, sp
 80162b8:	c903      	ldmia	r1, {r0, r1}
 80162ba:	e882 0003 	stmia.w	r2, {r0, r1}
 80162be:	2100      	movs	r1, #0
 80162c0:	4618      	mov	r0, r3
 80162c2:	9100      	str	r1, [sp, #0]
 80162c4:	6819      	ldr	r1, [r3, #0]
 80162c6:	690c      	ldr	r4, [r1, #16]
 80162c8:	4611      	mov	r1, r2
 80162ca:	47a0      	blx	r4
 80162cc:	b002      	add	sp, #8
 80162ce:	bd10      	pop	{r4, pc}

080162d0 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80162d0:	b538      	push	{r3, r4, r5, lr}
 80162d2:	680b      	ldr	r3, [r1, #0]
 80162d4:	460c      	mov	r4, r1
 80162d6:	4605      	mov	r5, r0
 80162d8:	68db      	ldr	r3, [r3, #12]
 80162da:	4798      	blx	r3
 80162dc:	6823      	ldr	r3, [r4, #0]
 80162de:	4620      	mov	r0, r4
 80162e0:	4629      	mov	r1, r5
 80162e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162e4:	4798      	blx	r3
 80162e6:	4628      	mov	r0, r5
 80162e8:	bd38      	pop	{r3, r4, r5, pc}

080162ea <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80162ea:	b410      	push	{r4}
 80162ec:	880a      	ldrh	r2, [r1, #0]
 80162ee:	8884      	ldrh	r4, [r0, #4]
 80162f0:	4422      	add	r2, r4
 80162f2:	800a      	strh	r2, [r1, #0]
 80162f4:	884a      	ldrh	r2, [r1, #2]
 80162f6:	88c4      	ldrh	r4, [r0, #6]
 80162f8:	4422      	add	r2, r4
 80162fa:	804a      	strh	r2, [r1, #2]
 80162fc:	6940      	ldr	r0, [r0, #20]
 80162fe:	b120      	cbz	r0, 801630a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8016300:	6803      	ldr	r3, [r0, #0]
 8016302:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016308:	4718      	bx	r3
 801630a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801630e:	4770      	bx	lr

08016310 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8016310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016312:	460b      	mov	r3, r1
 8016314:	b085      	sub	sp, #20
 8016316:	4604      	mov	r4, r0
 8016318:	b901      	cbnz	r1, 801631c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801631a:	b1fa      	cbz	r2, 801635c <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 801631c:	1d27      	adds	r7, r4, #4
 801631e:	466e      	mov	r6, sp
 8016320:	ad02      	add	r5, sp, #8
 8016322:	e897 0003 	ldmia.w	r7, {r0, r1}
 8016326:	e886 0003 	stmia.w	r6, {r0, r1}
 801632a:	88e1      	ldrh	r1, [r4, #6]
 801632c:	4620      	mov	r0, r4
 801632e:	440a      	add	r2, r1
 8016330:	88a1      	ldrh	r1, [r4, #4]
 8016332:	4419      	add	r1, r3
 8016334:	6823      	ldr	r3, [r4, #0]
 8016336:	b212      	sxth	r2, r2
 8016338:	b209      	sxth	r1, r1
 801633a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801633c:	4798      	blx	r3
 801633e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8016342:	e885 0003 	stmia.w	r5, {r0, r1}
 8016346:	6960      	ldr	r0, [r4, #20]
 8016348:	b150      	cbz	r0, 8016360 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 801634a:	6803      	ldr	r3, [r0, #0]
 801634c:	4631      	mov	r1, r6
 801634e:	691b      	ldr	r3, [r3, #16]
 8016350:	4798      	blx	r3
 8016352:	6960      	ldr	r0, [r4, #20]
 8016354:	6803      	ldr	r3, [r0, #0]
 8016356:	691b      	ldr	r3, [r3, #16]
 8016358:	4629      	mov	r1, r5
 801635a:	4798      	blx	r3
 801635c:	b005      	add	sp, #20
 801635e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016360:	f7ff fb30 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 8016364:	6803      	ldr	r3, [r0, #0]
 8016366:	4631      	mov	r1, r6
 8016368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801636a:	4798      	blx	r3
 801636c:	f7ff fb2a 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 8016370:	6803      	ldr	r3, [r0, #0]
 8016372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016374:	e7f0      	b.n	8016358 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

08016376 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8016376:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016378:	8882      	ldrh	r2, [r0, #4]
 801637a:	4605      	mov	r5, r0
 801637c:	880b      	ldrh	r3, [r1, #0]
 801637e:	460c      	mov	r4, r1
 8016380:	4413      	add	r3, r2
 8016382:	800b      	strh	r3, [r1, #0]
 8016384:	884b      	ldrh	r3, [r1, #2]
 8016386:	88c2      	ldrh	r2, [r0, #6]
 8016388:	4413      	add	r3, r2
 801638a:	4602      	mov	r2, r0
 801638c:	804b      	strh	r3, [r1, #2]
 801638e:	466b      	mov	r3, sp
 8016390:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016394:	6851      	ldr	r1, [r2, #4]
 8016396:	c303      	stmia	r3!, {r0, r1}
 8016398:	4621      	mov	r1, r4
 801639a:	4668      	mov	r0, sp
 801639c:	f7fb fe1a 	bl	8011fd4 <_ZN8touchgfx4RectaNERKS0_>
 80163a0:	466b      	mov	r3, sp
 80163a2:	cb03      	ldmia	r3!, {r0, r1}
 80163a4:	6020      	str	r0, [r4, #0]
 80163a6:	6061      	str	r1, [r4, #4]
 80163a8:	6968      	ldr	r0, [r5, #20]
 80163aa:	b128      	cbz	r0, 80163b8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 80163ac:	6803      	ldr	r3, [r0, #0]
 80163ae:	691b      	ldr	r3, [r3, #16]
 80163b0:	4621      	mov	r1, r4
 80163b2:	4798      	blx	r3
 80163b4:	b003      	add	sp, #12
 80163b6:	bd30      	pop	{r4, r5, pc}
 80163b8:	f7ff fb04 	bl	80159c4 <_ZN8touchgfx11Application11getInstanceEv>
 80163bc:	6803      	ldr	r3, [r0, #0]
 80163be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163c0:	e7f6      	b.n	80163b0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

080163c2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80163c2:	b570      	push	{r4, r5, r6, lr}
 80163c4:	8882      	ldrh	r2, [r0, #4]
 80163c6:	460c      	mov	r4, r1
 80163c8:	880b      	ldrh	r3, [r1, #0]
 80163ca:	4605      	mov	r5, r0
 80163cc:	4413      	add	r3, r2
 80163ce:	800b      	strh	r3, [r1, #0]
 80163d0:	884b      	ldrh	r3, [r1, #2]
 80163d2:	88c2      	ldrh	r2, [r0, #6]
 80163d4:	4413      	add	r3, r2
 80163d6:	804b      	strh	r3, [r1, #2]
 80163d8:	1d01      	adds	r1, r0, #4
 80163da:	4620      	mov	r0, r4
 80163dc:	f7fb fdfa 	bl	8011fd4 <_ZN8touchgfx4RectaNERKS0_>
 80163e0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80163e4:	b153      	cbz	r3, 80163fc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 80163e6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80163ea:	b13b      	cbz	r3, 80163fc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 80163ec:	6968      	ldr	r0, [r5, #20]
 80163ee:	b128      	cbz	r0, 80163fc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 80163f0:	6803      	ldr	r3, [r0, #0]
 80163f2:	4621      	mov	r1, r4
 80163f4:	6a1b      	ldr	r3, [r3, #32]
 80163f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80163fa:	4718      	bx	r3
 80163fc:	bd70      	pop	{r4, r5, r6, pc}

080163fe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80163fe:	b510      	push	{r4, lr}
 8016400:	2300      	movs	r3, #0
 8016402:	4604      	mov	r4, r0
 8016404:	4608      	mov	r0, r1
 8016406:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801640a:	8023      	strh	r3, [r4, #0]
 801640c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016410:	8063      	strh	r3, [r4, #2]
 8016412:	6803      	ldr	r3, [r0, #0]
 8016414:	80a1      	strh	r1, [r4, #4]
 8016416:	4621      	mov	r1, r4
 8016418:	80e2      	strh	r2, [r4, #6]
 801641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801641c:	4798      	blx	r3
 801641e:	4620      	mov	r0, r4
 8016420:	bd10      	pop	{r4, pc}
	...

08016424 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8016424:	b530      	push	{r4, r5, lr}
 8016426:	8083      	strh	r3, [r0, #4]
 8016428:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801642c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8016430:	7183      	strb	r3, [r0, #6]
 8016432:	79c3      	ldrb	r3, [r0, #7]
 8016434:	6101      	str	r1, [r0, #16]
 8016436:	f365 0306 	bfi	r3, r5, #0, #7
 801643a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801643e:	8282      	strh	r2, [r0, #20]
 8016440:	f365 13c7 	bfi	r3, r5, #7, #1
 8016444:	71c3      	strb	r3, [r0, #7]
 8016446:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801644a:	7203      	strb	r3, [r0, #8]
 801644c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8016450:	7243      	strb	r3, [r0, #9]
 8016452:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8016456:	8143      	strh	r3, [r0, #10]
 8016458:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801645c:	8183      	strh	r3, [r0, #12]
 801645e:	4b01      	ldr	r3, [pc, #4]	; (8016464 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8016460:	6003      	str	r3, [r0, #0]
 8016462:	bd30      	pop	{r4, r5, pc}
 8016464:	08026bf4 	.word	0x08026bf4

08016468 <_ZNK8touchgfx9ConstFont4findEt>:
 8016468:	b5f0      	push	{r4, r5, r6, r7, lr}
 801646a:	8a84      	ldrh	r4, [r0, #20]
 801646c:	2500      	movs	r5, #0
 801646e:	260e      	movs	r6, #14
 8016470:	3c01      	subs	r4, #1
 8016472:	42a5      	cmp	r5, r4
 8016474:	dc0c      	bgt.n	8016490 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 8016476:	192a      	adds	r2, r5, r4
 8016478:	6903      	ldr	r3, [r0, #16]
 801647a:	1052      	asrs	r2, r2, #1
 801647c:	fb06 3302 	mla	r3, r6, r2, r3
 8016480:	889f      	ldrh	r7, [r3, #4]
 8016482:	428f      	cmp	r7, r1
 8016484:	d901      	bls.n	801648a <_ZNK8touchgfx9ConstFont4findEt+0x22>
 8016486:	1e54      	subs	r4, r2, #1
 8016488:	e7f3      	b.n	8016472 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801648a:	d202      	bcs.n	8016492 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801648c:	1c55      	adds	r5, r2, #1
 801648e:	e7f0      	b.n	8016472 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8016490:	2300      	movs	r3, #0
 8016492:	4618      	mov	r0, r3
 8016494:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016496 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8016496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016498:	4605      	mov	r5, r0
 801649a:	4617      	mov	r7, r2
 801649c:	461e      	mov	r6, r3
 801649e:	f7ff ffe3 	bl	8016468 <_ZNK8touchgfx9ConstFont4findEt>
 80164a2:	b9e0      	cbnz	r0, 80164de <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 80164a4:	b911      	cbnz	r1, 80164ac <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 80164a6:	2400      	movs	r4, #0
 80164a8:	4620      	mov	r0, r4
 80164aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164ac:	290a      	cmp	r1, #10
 80164ae:	d0fa      	beq.n	80164a6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80164b0:	682b      	ldr	r3, [r5, #0]
 80164b2:	4628      	mov	r0, r5
 80164b4:	691b      	ldr	r3, [r3, #16]
 80164b6:	4798      	blx	r3
 80164b8:	4601      	mov	r1, r0
 80164ba:	4628      	mov	r0, r5
 80164bc:	f7ff ffd4 	bl	8016468 <_ZNK8touchgfx9ConstFont4findEt>
 80164c0:	4604      	mov	r4, r0
 80164c2:	2800      	cmp	r0, #0
 80164c4:	d0ef      	beq.n	80164a6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80164c6:	682b      	ldr	r3, [r5, #0]
 80164c8:	4621      	mov	r1, r4
 80164ca:	4628      	mov	r0, r5
 80164cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80164ce:	4798      	blx	r3
 80164d0:	6038      	str	r0, [r7, #0]
 80164d2:	682b      	ldr	r3, [r5, #0]
 80164d4:	4628      	mov	r0, r5
 80164d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80164d8:	4798      	blx	r3
 80164da:	7030      	strb	r0, [r6, #0]
 80164dc:	e7e4      	b.n	80164a8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 80164de:	4604      	mov	r4, r0
 80164e0:	e7f1      	b.n	80164c6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

080164e2 <_ZN8touchgfx6memsetEPvhm>:
 80164e2:	4402      	add	r2, r0
 80164e4:	4290      	cmp	r0, r2
 80164e6:	d002      	beq.n	80164ee <_ZN8touchgfx6memsetEPvhm+0xc>
 80164e8:	f800 1b01 	strb.w	r1, [r0], #1
 80164ec:	e7fa      	b.n	80164e4 <_ZN8touchgfx6memsetEPvhm+0x2>
 80164ee:	4770      	bx	lr

080164f0 <_ZN8touchgfx3clzEl>:
 80164f0:	b1e8      	cbz	r0, 801652e <_ZN8touchgfx3clzEl+0x3e>
 80164f2:	2800      	cmp	r0, #0
 80164f4:	bfb8      	it	lt
 80164f6:	4240      	neglt	r0, r0
 80164f8:	0c03      	lsrs	r3, r0, #16
 80164fa:	041b      	lsls	r3, r3, #16
 80164fc:	b9ab      	cbnz	r3, 801652a <_ZN8touchgfx3clzEl+0x3a>
 80164fe:	0400      	lsls	r0, r0, #16
 8016500:	2310      	movs	r3, #16
 8016502:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016506:	bf04      	itt	eq
 8016508:	0200      	lsleq	r0, r0, #8
 801650a:	3308      	addeq	r3, #8
 801650c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016510:	bf04      	itt	eq
 8016512:	0100      	lsleq	r0, r0, #4
 8016514:	3304      	addeq	r3, #4
 8016516:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801651a:	bf04      	itt	eq
 801651c:	0080      	lsleq	r0, r0, #2
 801651e:	3302      	addeq	r3, #2
 8016520:	2800      	cmp	r0, #0
 8016522:	bfa8      	it	ge
 8016524:	3301      	addge	r3, #1
 8016526:	1e58      	subs	r0, r3, #1
 8016528:	4770      	bx	lr
 801652a:	2300      	movs	r3, #0
 801652c:	e7e9      	b.n	8016502 <_ZN8touchgfx3clzEl+0x12>
 801652e:	201f      	movs	r0, #31
 8016530:	4770      	bx	lr

08016532 <_ZN8touchgfx6muldivElllRl>:
 8016532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016536:	4604      	mov	r4, r0
 8016538:	4698      	mov	r8, r3
 801653a:	2601      	movs	r6, #1
 801653c:	f7ff ffd8 	bl	80164f0 <_ZN8touchgfx3clzEl>
 8016540:	2c00      	cmp	r4, #0
 8016542:	fa04 f500 	lsl.w	r5, r4, r0
 8016546:	fa06 f600 	lsl.w	r6, r6, r0
 801654a:	bfba      	itte	lt
 801654c:	f04f 37ff 	movlt.w	r7, #4294967295	; 0xffffffff
 8016550:	4264      	neglt	r4, r4
 8016552:	2701      	movge	r7, #1
 8016554:	2900      	cmp	r1, #0
 8016556:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 801655a:	bfbc      	itt	lt
 801655c:	4249      	neglt	r1, r1
 801655e:	427f      	neglt	r7, r7
 8016560:	2a00      	cmp	r2, #0
 8016562:	fa41 fc00 	asr.w	ip, r1, r0
 8016566:	ea01 0106 	and.w	r1, r1, r6
 801656a:	bfb8      	it	lt
 801656c:	427f      	neglt	r7, r7
 801656e:	fb04 f401 	mul.w	r4, r4, r1
 8016572:	fb95 f3f2 	sdiv	r3, r5, r2
 8016576:	fb02 5513 	mls	r5, r2, r3, r5
 801657a:	bfb8      	it	lt
 801657c:	4252      	neglt	r2, r2
 801657e:	fb94 f0f2 	sdiv	r0, r4, r2
 8016582:	fb02 4410 	mls	r4, r2, r0, r4
 8016586:	fb0c 4405 	mla	r4, ip, r5, r4
 801658a:	fb94 f1f2 	sdiv	r1, r4, r2
 801658e:	4408      	add	r0, r1
 8016590:	fb02 4211 	mls	r2, r2, r1, r4
 8016594:	fb0c 0003 	mla	r0, ip, r3, r0
 8016598:	f8c8 2000 	str.w	r2, [r8]
 801659c:	4378      	muls	r0, r7
 801659e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080165a2 <_ZN8touchgfx10ClickEventD1Ev>:
 80165a2:	4770      	bx	lr

080165a4 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 80165a4:	2000      	movs	r0, #0
 80165a6:	4770      	bx	lr

080165a8 <_ZN8touchgfx9DragEventD1Ev>:
 80165a8:	4770      	bx	lr

080165aa <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 80165aa:	2001      	movs	r0, #1
 80165ac:	4770      	bx	lr

080165ae <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 80165ae:	2002      	movs	r0, #2
 80165b0:	4770      	bx	lr

080165b2 <_ZN8touchgfx12GestureEventD1Ev>:
 80165b2:	4770      	bx	lr

080165b4 <_ZN8touchgfx10ClickEventD0Ev>:
 80165b4:	b510      	push	{r4, lr}
 80165b6:	4604      	mov	r4, r0
 80165b8:	210c      	movs	r1, #12
 80165ba:	f00b f948 	bl	802184e <_ZdlPvj>
 80165be:	4620      	mov	r0, r4
 80165c0:	bd10      	pop	{r4, pc}

080165c2 <_ZN8touchgfx9DragEventD0Ev>:
 80165c2:	b510      	push	{r4, lr}
 80165c4:	4604      	mov	r4, r0
 80165c6:	2110      	movs	r1, #16
 80165c8:	f00b f941 	bl	802184e <_ZdlPvj>
 80165cc:	4620      	mov	r0, r4
 80165ce:	bd10      	pop	{r4, pc}

080165d0 <_ZN8touchgfx12GestureEventD0Ev>:
 80165d0:	b510      	push	{r4, lr}
 80165d2:	4604      	mov	r4, r0
 80165d4:	210c      	movs	r1, #12
 80165d6:	f00b f93a 	bl	802184e <_ZdlPvj>
 80165da:	4620      	mov	r0, r4
 80165dc:	bd10      	pop	{r4, pc}
	...

080165e0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80165e0:	b530      	push	{r4, r5, lr}
 80165e2:	460d      	mov	r5, r1
 80165e4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80165e6:	b087      	sub	sp, #28
 80165e8:	4604      	mov	r4, r0
 80165ea:	b301      	cbz	r1, 801662e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80165ec:	a801      	add	r0, sp, #4
 80165ee:	f7ff ff06 	bl	80163fe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80165f2:	892a      	ldrh	r2, [r5, #8]
 80165f4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80165f8:	7928      	ldrb	r0, [r5, #4]
 80165fa:	1ad2      	subs	r2, r2, r3
 80165fc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80165fe:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8016602:	441a      	add	r2, r3
 8016604:	896b      	ldrh	r3, [r5, #10]
 8016606:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801660a:	f88d 0010 	strb.w	r0, [sp, #16]
 801660e:	1b5b      	subs	r3, r3, r5
 8016610:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8016612:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8016614:	442b      	add	r3, r5
 8016616:	4d07      	ldr	r5, [pc, #28]	; (8016634 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8016618:	f8ad 1012 	strh.w	r1, [sp, #18]
 801661c:	a903      	add	r1, sp, #12
 801661e:	9503      	str	r5, [sp, #12]
 8016620:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016624:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016628:	6803      	ldr	r3, [r0, #0]
 801662a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801662c:	4798      	blx	r3
 801662e:	b007      	add	sp, #28
 8016630:	bd30      	pop	{r4, r5, pc}
 8016632:	bf00      	nop
 8016634:	08026c70 	.word	0x08026c70

08016638 <_ZNK8touchgfx4Rect9intersectEss>:
 8016638:	b510      	push	{r4, lr}
 801663a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801663e:	428b      	cmp	r3, r1
 8016640:	dc10      	bgt.n	8016664 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8016642:	8884      	ldrh	r4, [r0, #4]
 8016644:	4423      	add	r3, r4
 8016646:	b21b      	sxth	r3, r3
 8016648:	4299      	cmp	r1, r3
 801664a:	da0b      	bge.n	8016664 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 801664c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016650:	4293      	cmp	r3, r2
 8016652:	dc07      	bgt.n	8016664 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8016654:	88c0      	ldrh	r0, [r0, #6]
 8016656:	4418      	add	r0, r3
 8016658:	b200      	sxth	r0, r0
 801665a:	4282      	cmp	r2, r0
 801665c:	bfac      	ite	ge
 801665e:	2000      	movge	r0, #0
 8016660:	2001      	movlt	r0, #1
 8016662:	bd10      	pop	{r4, pc}
 8016664:	2000      	movs	r0, #0
 8016666:	e7fc      	b.n	8016662 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08016668 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8016668:	b5f0      	push	{r4, r5, r6, r7, lr}
 801666a:	460c      	mov	r4, r1
 801666c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801666e:	b089      	sub	sp, #36	; 0x24
 8016670:	4605      	mov	r5, r0
 8016672:	2900      	cmp	r1, #0
 8016674:	d054      	beq.n	8016720 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 8016676:	4668      	mov	r0, sp
 8016678:	f7ff fec1 	bl	80163fe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801667c:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801667e:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8016680:	4668      	mov	r0, sp
 8016682:	8922      	ldrh	r2, [r4, #8]
 8016684:	88e1      	ldrh	r1, [r4, #6]
 8016686:	443a      	add	r2, r7
 8016688:	4431      	add	r1, r6
 801668a:	b212      	sxth	r2, r2
 801668c:	b209      	sxth	r1, r1
 801668e:	f7ff ffd3 	bl	8016638 <_ZNK8touchgfx4Rect9intersectEss>
 8016692:	b1d0      	cbz	r0, 80166ca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8016694:	89a2      	ldrh	r2, [r4, #12]
 8016696:	4668      	mov	r0, sp
 8016698:	8961      	ldrh	r1, [r4, #10]
 801669a:	443a      	add	r2, r7
 801669c:	4431      	add	r1, r6
 801669e:	b212      	sxth	r2, r2
 80166a0:	b209      	sxth	r1, r1
 80166a2:	f7ff ffc9 	bl	8016638 <_ZNK8touchgfx4Rect9intersectEss>
 80166a6:	4603      	mov	r3, r0
 80166a8:	b978      	cbnz	r0, 80166ca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 80166aa:	4a1e      	ldr	r2, [pc, #120]	; (8016724 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 80166ac:	a904      	add	r1, sp, #16
 80166ae:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80166b0:	9204      	str	r2, [sp, #16]
 80166b2:	2202      	movs	r2, #2
 80166b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80166b8:	f88d 2014 	strb.w	r2, [sp, #20]
 80166bc:	f8ad 3018 	strh.w	r3, [sp, #24]
 80166c0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80166c4:	6803      	ldr	r3, [r0, #0]
 80166c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80166c8:	4798      	blx	r3
 80166ca:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80166cc:	a802      	add	r0, sp, #8
 80166ce:	f7ff fe96 	bl	80163fe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80166d2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80166d6:	88e0      	ldrh	r0, [r4, #6]
 80166d8:	8961      	ldrh	r1, [r4, #10]
 80166da:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80166de:	1a80      	subs	r0, r0, r2
 80166e0:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 80166e4:	1a89      	subs	r1, r1, r2
 80166e6:	8923      	ldrh	r3, [r4, #8]
 80166e8:	4460      	add	r0, ip
 80166ea:	89a2      	ldrh	r2, [r4, #12]
 80166ec:	4461      	add	r1, ip
 80166ee:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80166f0:	eba3 030e 	sub.w	r3, r3, lr
 80166f4:	eba2 020e 	sub.w	r2, r2, lr
 80166f8:	f8ad 0016 	strh.w	r0, [sp, #22]
 80166fc:	7927      	ldrb	r7, [r4, #4]
 80166fe:	4433      	add	r3, r6
 8016700:	4432      	add	r2, r6
 8016702:	4c09      	ldr	r4, [pc, #36]	; (8016728 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 8016704:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8016706:	f8ad 101a 	strh.w	r1, [sp, #26]
 801670a:	a904      	add	r1, sp, #16
 801670c:	9404      	str	r4, [sp, #16]
 801670e:	f88d 7014 	strb.w	r7, [sp, #20]
 8016712:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016716:	f8ad 201c 	strh.w	r2, [sp, #28]
 801671a:	6803      	ldr	r3, [r0, #0]
 801671c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801671e:	4798      	blx	r3
 8016720:	b009      	add	sp, #36	; 0x24
 8016722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016724:	08026c48 	.word	0x08026c48
 8016728:	08026c5c 	.word	0x08026c5c

0801672c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801672c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016730:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8016734:	b0a1      	sub	sp, #132	; 0x84
 8016736:	4604      	mov	r4, r0
 8016738:	460d      	mov	r5, r1
 801673a:	790b      	ldrb	r3, [r1, #4]
 801673c:	f1b9 0f00 	cmp.w	r9, #0
 8016740:	d00f      	beq.n	8016762 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 8016742:	2b00      	cmp	r3, #0
 8016744:	f040 80a2 	bne.w	801688c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8016748:	b021      	add	sp, #132	; 0x84
 801674a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801674e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8016752:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8016756:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801675a:	1d20      	adds	r0, r4, #4
 801675c:	f7fb fb88 	bl	8011e70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8016760:	e094      	b.n	801688c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x160>
 8016762:	2b00      	cmp	r3, #0
 8016764:	d1f0      	bne.n	8016748 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8016766:	4b5f      	ldr	r3, [pc, #380]	; (80168e4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801676e:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8016772:	f1ba 0f03 	cmp.w	sl, #3
 8016776:	ddea      	ble.n	801674e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8016778:	f1ba 0f0c 	cmp.w	sl, #12
 801677c:	f04f 0303 	mov.w	r3, #3
 8016780:	f04f 0600 	mov.w	r6, #0
 8016784:	4958      	ldr	r1, [pc, #352]	; (80168e8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8016786:	bfd8      	it	le
 8016788:	f10a 32ff 	addle.w	r2, sl, #4294967295	; 0xffffffff
 801678c:	960a      	str	r6, [sp, #40]	; 0x28
 801678e:	bfd8      	it	le
 8016790:	fb92 f3f3 	sdivle	r3, r2, r3
 8016794:	9301      	str	r3, [sp, #4]
 8016796:	4b55      	ldr	r3, [pc, #340]	; (80168ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8016798:	f9b3 2000 	ldrsh.w	r2, [r3]
 801679c:	4b54      	ldr	r3, [pc, #336]	; (80168f0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801679e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80167a2:	2248      	movs	r2, #72	; 0x48
 80167a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167a8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80167ac:	ab0e      	add	r3, sp, #56	; 0x38
 80167ae:	4618      	mov	r0, r3
 80167b0:	f00b fe44 	bl	802243c <memcpy>
 80167b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80167b8:	f8cd a008 	str.w	sl, [sp, #8]
 80167bc:	e9cd 2006 	strd	r2, r0, [sp, #24]
 80167c0:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80167c4:	46b3      	mov	fp, r6
 80167c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80167ca:	b29b      	uxth	r3, r3
 80167cc:	9303      	str	r3, [sp, #12]
 80167ce:	2300      	movs	r3, #0
 80167d0:	9a03      	ldr	r2, [sp, #12]
 80167d2:	88ef      	ldrh	r7, [r5, #6]
 80167d4:	a80a      	add	r0, sp, #40	; 0x28
 80167d6:	9309      	str	r3, [sp, #36]	; 0x24
 80167d8:	9b07      	ldr	r3, [sp, #28]
 80167da:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80167de:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 80167e2:	fb13 f302 	smulbb	r3, r3, r2
 80167e6:	b29b      	uxth	r3, r3
 80167e8:	9304      	str	r3, [sp, #16]
 80167ea:	9b07      	ldr	r3, [sp, #28]
 80167ec:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80167f0:	685b      	ldr	r3, [r3, #4]
 80167f2:	fb13 f302 	smulbb	r3, r3, r2
 80167f6:	b29b      	uxth	r3, r3
 80167f8:	9305      	str	r3, [sp, #20]
 80167fa:	9b04      	ldr	r3, [sp, #16]
 80167fc:	441f      	add	r7, r3
 80167fe:	9b05      	ldr	r3, [sp, #20]
 8016800:	4498      	add	r8, r3
 8016802:	b23f      	sxth	r7, r7
 8016804:	fa0f f888 	sxth.w	r8, r8
 8016808:	4639      	mov	r1, r7
 801680a:	4642      	mov	r2, r8
 801680c:	f7ff ff14 	bl	8016638 <_ZNK8touchgfx4Rect9intersectEss>
 8016810:	b380      	cbz	r0, 8016874 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8016812:	4639      	mov	r1, r7
 8016814:	ab09      	add	r3, sp, #36	; 0x24
 8016816:	4642      	mov	r2, r8
 8016818:	1d20      	adds	r0, r4, #4
 801681a:	f7fb fb29 	bl	8011e70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801681e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016820:	b341      	cbz	r1, 8016874 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8016822:	4549      	cmp	r1, r9
 8016824:	d026      	beq.n	8016874 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8016826:	a80c      	add	r0, sp, #48	; 0x30
 8016828:	f7ff fde9 	bl	80163fe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801682c:	2002      	movs	r0, #2
 801682e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8016832:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8016836:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801683a:	fb92 f2f0 	sdiv	r2, r2, r0
 801683e:	440a      	add	r2, r1
 8016840:	1a99      	subs	r1, r3, r2
 8016842:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8016846:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801684a:	fb93 f3f0 	sdiv	r3, r3, r0
 801684e:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 8016852:	4403      	add	r3, r0
 8016854:	1ad3      	subs	r3, r2, r3
 8016856:	9a06      	ldr	r2, [sp, #24]
 8016858:	435b      	muls	r3, r3
 801685a:	fb01 3301 	mla	r3, r1, r1, r3
 801685e:	4293      	cmp	r3, r2
 8016860:	d208      	bcs.n	8016874 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x148>
 8016862:	9a04      	ldr	r2, [sp, #16]
 8016864:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8016868:	86a2      	strh	r2, [r4, #52]	; 0x34
 801686a:	9a05      	ldr	r2, [sp, #20]
 801686c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8016870:	86e2      	strh	r2, [r4, #54]	; 0x36
 8016872:	9306      	str	r3, [sp, #24]
 8016874:	f10b 0b02 	add.w	fp, fp, #2
 8016878:	f1bb 0f08 	cmp.w	fp, #8
 801687c:	dda7      	ble.n	80167ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa2>
 801687e:	9b02      	ldr	r3, [sp, #8]
 8016880:	3601      	adds	r6, #1
 8016882:	4453      	add	r3, sl
 8016884:	9302      	str	r3, [sp, #8]
 8016886:	9b01      	ldr	r3, [sp, #4]
 8016888:	42b3      	cmp	r3, r6
 801688a:	d199      	bne.n	80167c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801688c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801688e:	2900      	cmp	r1, #0
 8016890:	f43f af5a 	beq.w	8016748 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8016894:	a80c      	add	r0, sp, #48	; 0x30
 8016896:	2600      	movs	r6, #0
 8016898:	f7ff fdb1 	bl	80163fe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801689c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80168a0:	88ea      	ldrh	r2, [r5, #6]
 80168a2:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 80168a6:	1ad2      	subs	r2, r2, r3
 80168a8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80168aa:	7929      	ldrb	r1, [r5, #4]
 80168ac:	441a      	add	r2, r3
 80168ae:	892b      	ldrh	r3, [r5, #8]
 80168b0:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 80168b4:	a90e      	add	r1, sp, #56	; 0x38
 80168b6:	1a1b      	subs	r3, r3, r0
 80168b8:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80168ba:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 80168be:	4403      	add	r3, r0
 80168c0:	480c      	ldr	r0, [pc, #48]	; (80168f4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 80168c2:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 80168c6:	900e      	str	r0, [sp, #56]	; 0x38
 80168c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80168ca:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80168ce:	6803      	ldr	r3, [r0, #0]
 80168d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80168d2:	4798      	blx	r3
 80168d4:	792b      	ldrb	r3, [r5, #4]
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	f43f af36 	beq.w	8016748 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80168dc:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80168e0:	e732      	b.n	8016748 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80168e2:	bf00      	nop
 80168e4:	2000b260 	.word	0x2000b260
 80168e8:	08023ccc 	.word	0x08023ccc
 80168ec:	2000b254 	.word	0x2000b254
 80168f0:	2000b256 	.word	0x2000b256
 80168f4:	08026c48 	.word	0x08026c48

080168f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80168f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80168fa:	4604      	mov	r4, r0
 80168fc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8016900:	3201      	adds	r2, #1
 8016902:	d112      	bne.n	801692a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8016904:	2500      	movs	r5, #0
 8016906:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801690a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801690e:	6803      	ldr	r3, [r0, #0]
 8016910:	9500      	str	r5, [sp, #0]
 8016912:	466d      	mov	r5, sp
 8016914:	f8ad 1004 	strh.w	r1, [sp, #4]
 8016918:	f8ad 2006 	strh.w	r2, [sp, #6]
 801691c:	4629      	mov	r1, r5
 801691e:	6a1b      	ldr	r3, [r3, #32]
 8016920:	4798      	blx	r3
 8016922:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016926:	e884 0003 	stmia.w	r4, {r0, r1}
 801692a:	4620      	mov	r0, r4
 801692c:	b003      	add	sp, #12
 801692e:	bd30      	pop	{r4, r5, pc}

08016930 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8016930:	b513      	push	{r0, r1, r4, lr}
 8016932:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8016936:	4604      	mov	r4, r0
 8016938:	3301      	adds	r3, #1
 801693a:	d109      	bne.n	8016950 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801693c:	4601      	mov	r1, r0
 801693e:	4668      	mov	r0, sp
 8016940:	f7ff fd5d 	bl	80163fe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016944:	f8bd 3000 	ldrh.w	r3, [sp]
 8016948:	8423      	strh	r3, [r4, #32]
 801694a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801694e:	8463      	strh	r3, [r4, #34]	; 0x22
 8016950:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8016954:	b002      	add	sp, #8
 8016956:	bd10      	pop	{r4, pc}

08016958 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8016958:	b513      	push	{r0, r1, r4, lr}
 801695a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801695e:	4604      	mov	r4, r0
 8016960:	3301      	adds	r3, #1
 8016962:	d109      	bne.n	8016978 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8016964:	4601      	mov	r1, r0
 8016966:	4668      	mov	r0, sp
 8016968:	f7ff fd49 	bl	80163fe <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801696c:	f8bd 3000 	ldrh.w	r3, [sp]
 8016970:	8423      	strh	r3, [r4, #32]
 8016972:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016976:	8463      	strh	r3, [r4, #34]	; 0x22
 8016978:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801697c:	b002      	add	sp, #8
 801697e:	bd10      	pop	{r4, pc}

08016980 <_ZN8touchgfx6ScreenC1Ev>:
 8016980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016982:	4605      	mov	r5, r0
 8016984:	4b17      	ldr	r3, [pc, #92]	; (80169e4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8016986:	2200      	movs	r2, #0
 8016988:	4917      	ldr	r1, [pc, #92]	; (80169e8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801698a:	f845 3b04 	str.w	r3, [r5], #4
 801698e:	2301      	movs	r3, #1
 8016990:	8102      	strh	r2, [r0, #8]
 8016992:	4604      	mov	r4, r0
 8016994:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 8016998:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801699c:	4b13      	ldr	r3, [pc, #76]	; (80169ec <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801699e:	8142      	strh	r2, [r0, #10]
 80169a0:	f9b3 7000 	ldrsh.w	r7, [r3]
 80169a4:	4b12      	ldr	r3, [pc, #72]	; (80169f0 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 80169a6:	8182      	strh	r2, [r0, #12]
 80169a8:	81c2      	strh	r2, [r0, #14]
 80169aa:	8202      	strh	r2, [r0, #16]
 80169ac:	8242      	strh	r2, [r0, #18]
 80169ae:	8282      	strh	r2, [r0, #20]
 80169b0:	82c2      	strh	r2, [r0, #22]
 80169b2:	6202      	str	r2, [r0, #32]
 80169b4:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 80169b8:	6342      	str	r2, [r0, #52]	; 0x34
 80169ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80169be:	6041      	str	r1, [r0, #4]
 80169c0:	4611      	mov	r1, r2
 80169c2:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80169c6:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80169ca:	4628      	mov	r0, r5
 80169cc:	f7f3 faab 	bl	8009f26 <_ZN8touchgfx8Drawable5setXYEss>
 80169d0:	4639      	mov	r1, r7
 80169d2:	4628      	mov	r0, r5
 80169d4:	f7f3 fac5 	bl	8009f62 <_ZN8touchgfx8Drawable8setWidthEs>
 80169d8:	4628      	mov	r0, r5
 80169da:	4631      	mov	r1, r6
 80169dc:	f7f3 fad0 	bl	8009f80 <_ZN8touchgfx8Drawable9setHeightEs>
 80169e0:	4620      	mov	r0, r4
 80169e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169e4:	08026c84 	.word	0x08026c84
 80169e8:	08025440 	.word	0x08025440
 80169ec:	2000b254 	.word	0x2000b254
 80169f0:	2000b256 	.word	0x2000b256

080169f4 <_ZN8touchgfx6Screen4drawEv>:
 80169f4:	4b09      	ldr	r3, [pc, #36]	; (8016a1c <_ZN8touchgfx6Screen4drawEv+0x28>)
 80169f6:	b507      	push	{r0, r1, r2, lr}
 80169f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80169fc:	2100      	movs	r1, #0
 80169fe:	4b08      	ldr	r3, [pc, #32]	; (8016a20 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8016a00:	9100      	str	r1, [sp, #0]
 8016a02:	4669      	mov	r1, sp
 8016a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a08:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016a0c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016a10:	6803      	ldr	r3, [r0, #0]
 8016a12:	689b      	ldr	r3, [r3, #8]
 8016a14:	4798      	blx	r3
 8016a16:	b003      	add	sp, #12
 8016a18:	f85d fb04 	ldr.w	pc, [sp], #4
 8016a1c:	2000b254 	.word	0x2000b254
 8016a20:	2000b256 	.word	0x2000b256

08016a24 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8016a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a28:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8016a2c:	b089      	sub	sp, #36	; 0x24
 8016a2e:	4680      	mov	r8, r0
 8016a30:	460c      	mov	r4, r1
 8016a32:	4615      	mov	r5, r2
 8016a34:	b16b      	cbz	r3, 8016a52 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8016a36:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8016a3a:	b153      	cbz	r3, 8016a52 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8016a3c:	4628      	mov	r0, r5
 8016a3e:	f7ff ff5b 	bl	80168f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8016a42:	4621      	mov	r1, r4
 8016a44:	f7fe ff34 	bl	80158b0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016a48:	69eb      	ldr	r3, [r5, #28]
 8016a4a:	b928      	cbnz	r0, 8016a58 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 8016a4c:	461d      	mov	r5, r3
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d1f4      	bne.n	8016a3c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 8016a52:	b009      	add	sp, #36	; 0x24
 8016a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a58:	ae04      	add	r6, sp, #16
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d051      	beq.n	8016b02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8016a5e:	682b      	ldr	r3, [r5, #0]
 8016a60:	4629      	mov	r1, r5
 8016a62:	a802      	add	r0, sp, #8
 8016a64:	68db      	ldr	r3, [r3, #12]
 8016a66:	4798      	blx	r3
 8016a68:	4628      	mov	r0, r5
 8016a6a:	f7ff ff61 	bl	8016930 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8016a6e:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8016a72:	4407      	add	r7, r0
 8016a74:	4628      	mov	r0, r5
 8016a76:	f7ff ff6f 	bl	8016958 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8016a7a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016a7e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8016a82:	b23f      	sxth	r7, r7
 8016a84:	4418      	add	r0, r3
 8016a86:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016a8a:	4621      	mov	r1, r4
 8016a8c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016a90:	f8ad 0012 	strh.w	r0, [sp, #18]
 8016a94:	4630      	mov	r0, r6
 8016a96:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016a9a:	f8ad 7010 	strh.w	r7, [sp, #16]
 8016a9e:	f7fb fa99 	bl	8011fd4 <_ZN8touchgfx4RectaNERKS0_>
 8016aa2:	4628      	mov	r0, r5
 8016aa4:	f7ff ff28 	bl	80168f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8016aa8:	ab06      	add	r3, sp, #24
 8016aaa:	4602      	mov	r2, r0
 8016aac:	e896 0003 	ldmia.w	r6, {r0, r1}
 8016ab0:	e883 0003 	stmia.w	r3, {r0, r1}
 8016ab4:	4611      	mov	r1, r2
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	f7fb fa8c 	bl	8011fd4 <_ZN8touchgfx4RectaNERKS0_>
 8016abc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8016ac0:	f9b4 1000 	ldrsh.w	r1, [r4]
 8016ac4:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8016ac8:	4299      	cmp	r1, r3
 8016aca:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8016ace:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8016ad2:	d10b      	bne.n	8016aec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8016ad4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8016ad8:	4552      	cmp	r2, sl
 8016ada:	d107      	bne.n	8016aec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8016adc:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8016ae0:	455a      	cmp	r2, fp
 8016ae2:	d103      	bne.n	8016aec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8016ae4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016ae8:	454a      	cmp	r2, r9
 8016aea:	d00a      	beq.n	8016b02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8016aec:	f1bb 0f00 	cmp.w	fp, #0
 8016af0:	d002      	beq.n	8016af8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 8016af2:	f1b9 0f00 	cmp.w	r9, #0
 8016af6:	d12e      	bne.n	8016b56 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 8016af8:	69ea      	ldr	r2, [r5, #28]
 8016afa:	4621      	mov	r1, r4
 8016afc:	4640      	mov	r0, r8
 8016afe:	f7ff ff91 	bl	8016a24 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016b02:	4628      	mov	r0, r5
 8016b04:	f7ff fef8 	bl	80168f8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8016b08:	6861      	ldr	r1, [r4, #4]
 8016b0a:	4602      	mov	r2, r0
 8016b0c:	4633      	mov	r3, r6
 8016b0e:	6820      	ldr	r0, [r4, #0]
 8016b10:	c303      	stmia	r3!, {r0, r1}
 8016b12:	4611      	mov	r1, r2
 8016b14:	4630      	mov	r0, r6
 8016b16:	f7fb fa5d 	bl	8011fd4 <_ZN8touchgfx4RectaNERKS0_>
 8016b1a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d097      	beq.n	8016a52 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8016b22:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d093      	beq.n	8016a52 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8016b2a:	4628      	mov	r0, r5
 8016b2c:	f7ff ff00 	bl	8016930 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8016b30:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8016b34:	1a18      	subs	r0, r3, r0
 8016b36:	f8ad 0010 	strh.w	r0, [sp, #16]
 8016b3a:	4628      	mov	r0, r5
 8016b3c:	f7ff ff0c 	bl	8016958 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8016b40:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8016b44:	4631      	mov	r1, r6
 8016b46:	1a18      	subs	r0, r3, r0
 8016b48:	f8ad 0012 	strh.w	r0, [sp, #18]
 8016b4c:	4628      	mov	r0, r5
 8016b4e:	682b      	ldr	r3, [r5, #0]
 8016b50:	689b      	ldr	r3, [r3, #8]
 8016b52:	4798      	blx	r3
 8016b54:	e77d      	b.n	8016a52 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8016b56:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8016b5a:	fa1f f08a 	uxth.w	r0, sl
 8016b5e:	4552      	cmp	r2, sl
 8016b60:	9000      	str	r0, [sp, #0]
 8016b62:	da12      	bge.n	8016b8a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 8016b64:	9301      	str	r3, [sp, #4]
 8016b66:	9b00      	ldr	r3, [sp, #0]
 8016b68:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8016b6c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8016b70:	1a9a      	subs	r2, r3, r2
 8016b72:	f8ad 1010 	strh.w	r1, [sp, #16]
 8016b76:	4631      	mov	r1, r6
 8016b78:	f8ad 0014 	strh.w	r0, [sp, #20]
 8016b7c:	4640      	mov	r0, r8
 8016b7e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8016b82:	69ea      	ldr	r2, [r5, #28]
 8016b84:	f7ff ff4e 	bl	8016a24 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016b88:	9b01      	ldr	r3, [sp, #4]
 8016b8a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8016b8e:	b29f      	uxth	r7, r3
 8016b90:	429a      	cmp	r2, r3
 8016b92:	da0d      	bge.n	8016bb0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 8016b94:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016b98:	1aba      	subs	r2, r7, r2
 8016b9a:	f8ad a012 	strh.w	sl, [sp, #18]
 8016b9e:	4631      	mov	r1, r6
 8016ba0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016ba4:	4640      	mov	r0, r8
 8016ba6:	f8ad 9016 	strh.w	r9, [sp, #22]
 8016baa:	69ea      	ldr	r2, [r5, #28]
 8016bac:	f7ff ff3a 	bl	8016a24 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016bb0:	8822      	ldrh	r2, [r4, #0]
 8016bb2:	445f      	add	r7, fp
 8016bb4:	88a3      	ldrh	r3, [r4, #4]
 8016bb6:	b2bf      	uxth	r7, r7
 8016bb8:	4413      	add	r3, r2
 8016bba:	b23a      	sxth	r2, r7
 8016bbc:	b29b      	uxth	r3, r3
 8016bbe:	b219      	sxth	r1, r3
 8016bc0:	4291      	cmp	r1, r2
 8016bc2:	dd0d      	ble.n	8016be0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 8016bc4:	1bdb      	subs	r3, r3, r7
 8016bc6:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016bca:	f8ad a012 	strh.w	sl, [sp, #18]
 8016bce:	4631      	mov	r1, r6
 8016bd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016bd4:	4640      	mov	r0, r8
 8016bd6:	f8ad 9016 	strh.w	r9, [sp, #22]
 8016bda:	69ea      	ldr	r2, [r5, #28]
 8016bdc:	f7ff ff22 	bl	8016a24 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016be0:	88e2      	ldrh	r2, [r4, #6]
 8016be2:	8863      	ldrh	r3, [r4, #2]
 8016be4:	4413      	add	r3, r2
 8016be6:	9a00      	ldr	r2, [sp, #0]
 8016be8:	444a      	add	r2, r9
 8016bea:	b29b      	uxth	r3, r3
 8016bec:	fa1f f982 	uxth.w	r9, r2
 8016bf0:	b219      	sxth	r1, r3
 8016bf2:	fa0f f289 	sxth.w	r2, r9
 8016bf6:	428a      	cmp	r2, r1
 8016bf8:	da83      	bge.n	8016b02 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8016bfa:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016bfe:	eba3 0309 	sub.w	r3, r3, r9
 8016c02:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016c06:	f8ad 1014 	strh.w	r1, [sp, #20]
 8016c0a:	4631      	mov	r1, r6
 8016c0c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8016c10:	f8ad 2012 	strh.w	r2, [sp, #18]
 8016c14:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016c18:	69ea      	ldr	r2, [r5, #28]
 8016c1a:	e76f      	b.n	8016afc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

08016c1c <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8016c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016c1e:	2300      	movs	r3, #0
 8016c20:	aa02      	add	r2, sp, #8
 8016c22:	4604      	mov	r4, r0
 8016c24:	3004      	adds	r0, #4
 8016c26:	f842 3d04 	str.w	r3, [r2, #-4]!
 8016c2a:	460d      	mov	r5, r1
 8016c2c:	f7fb faa9 	bl	8012182 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8016c30:	9a01      	ldr	r2, [sp, #4]
 8016c32:	b11a      	cbz	r2, 8016c3c <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 8016c34:	4629      	mov	r1, r5
 8016c36:	4620      	mov	r0, r4
 8016c38:	f7ff fef4 	bl	8016a24 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016c3c:	b003      	add	sp, #12
 8016c3e:	bd30      	pop	{r4, r5, pc}

08016c40 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8016c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016c42:	4602      	mov	r2, r0
 8016c44:	4604      	mov	r4, r0
 8016c46:	460d      	mov	r5, r1
 8016c48:	466b      	mov	r3, sp
 8016c4a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8016c4e:	6851      	ldr	r1, [r2, #4]
 8016c50:	c303      	stmia	r3!, {r0, r1}
 8016c52:	4629      	mov	r1, r5
 8016c54:	4668      	mov	r0, sp
 8016c56:	f7fb f9bd 	bl	8011fd4 <_ZN8touchgfx4RectaNERKS0_>
 8016c5a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8016c5e:	4669      	mov	r1, sp
 8016c60:	b123      	cbz	r3, 8016c6c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 8016c62:	4620      	mov	r0, r4
 8016c64:	f7ff ffda 	bl	8016c1c <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8016c68:	b003      	add	sp, #12
 8016c6a:	bd30      	pop	{r4, r5, pc}
 8016c6c:	1d20      	adds	r0, r4, #4
 8016c6e:	f7fb fa4f 	bl	8012110 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8016c72:	e7f9      	b.n	8016c68 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

08016c74 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8016c74:	460b      	mov	r3, r1
 8016c76:	680a      	ldr	r2, [r1, #0]
 8016c78:	1d01      	adds	r1, r0, #4
 8016c7a:	6952      	ldr	r2, [r2, #20]
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	4710      	bx	r2

08016c80 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>:
 8016c80:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016c84:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c8c:	bfcc      	ite	gt
 8016c8e:	ee30 0a27 	vaddgt.f32	s0, s0, s15
 8016c92:	ee30 0a67 	vsuble.f32	s0, s0, s15
 8016c96:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016c9a:	ee10 3a10 	vmov	r3, s0
 8016c9e:	b218      	sxth	r0, r3
 8016ca0:	4770      	bx	lr

08016ca2 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 8016ca2:	b510      	push	{r4, lr}
 8016ca4:	4298      	cmp	r0, r3
 8016ca6:	eb01 0402 	add.w	r4, r1, r2
 8016caa:	b224      	sxth	r4, r4
 8016cac:	d219      	bcs.n	8016ce2 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x40>
 8016cae:	b1c3      	cbz	r3, 8016ce2 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x40>
 8016cb0:	ee07 2a90 	vmov	s15, r2
 8016cb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016cb8:	ee07 0a90 	vmov	s15, r0
 8016cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016cc4:	ee07 3a10 	vmov	s14, r3
 8016cc8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016ccc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8016cd0:	ee07 1a90 	vmov	s15, r1
 8016cd4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8016cd8:	ee36 0a80 	vadd.f32	s0, s13, s0
 8016cdc:	f7ff ffd0 	bl	8016c80 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 8016ce0:	4604      	mov	r4, r0
 8016ce2:	4620      	mov	r0, r4
 8016ce4:	bd10      	pop	{r4, pc}

08016ce6 <_ZN8touchgfx15EasingEquations12linearEaseInEtsst>:
 8016ce6:	f7ff bfdc 	b.w	8016ca2 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>

08016cea <_ZN8touchgfx15EasingEquations13linearEaseOutEtsst>:
 8016cea:	f7ff bfda 	b.w	8016ca2 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>
	...

08016cf0 <_ZN8touchgfx15EasingEquations11sineEaseOutEtsst>:
 8016cf0:	b513      	push	{r0, r1, r4, lr}
 8016cf2:	4298      	cmp	r0, r3
 8016cf4:	eb01 0402 	add.w	r4, r1, r2
 8016cf8:	e9cd 1200 	strd	r1, r2, [sp]
 8016cfc:	b224      	sxth	r4, r4
 8016cfe:	d221      	bcs.n	8016d44 <_ZN8touchgfx15EasingEquations11sineEaseOutEtsst+0x54>
 8016d00:	b303      	cbz	r3, 8016d44 <_ZN8touchgfx15EasingEquations11sineEaseOutEtsst+0x54>
 8016d02:	ee07 0a90 	vmov	s15, r0
 8016d06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016d0a:	ee07 3a90 	vmov	s15, r3
 8016d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016d12:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8016d16:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8016d4c <_ZN8touchgfx15EasingEquations11sineEaseOutEtsst+0x5c>
 8016d1a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016d1e:	f00a fdbb 	bl	8021898 <sinf>
 8016d22:	9a01      	ldr	r2, [sp, #4]
 8016d24:	9900      	ldr	r1, [sp, #0]
 8016d26:	ee07 2a90 	vmov	s15, r2
 8016d2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016d2e:	ee07 1a90 	vmov	s15, r1
 8016d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016d36:	eee7 7a00 	vfma.f32	s15, s14, s0
 8016d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8016d3e:	f7ff ff9f 	bl	8016c80 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 8016d42:	4604      	mov	r4, r0
 8016d44:	4620      	mov	r0, r4
 8016d46:	b002      	add	sp, #8
 8016d48:	bd10      	pop	{r4, pc}
 8016d4a:	bf00      	nop
 8016d4c:	3fc90fdb 	.word	0x3fc90fdb

08016d50 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 8016d50:	f011 0f40 	tst.w	r1, #64	; 0x40
 8016d54:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8016d58:	4b03      	ldr	r3, [pc, #12]	; (8016d68 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 8016d5a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8016d5e:	bf08      	it	eq
 8016d60:	2300      	moveq	r3, #0
 8016d62:	4308      	orrs	r0, r1
 8016d64:	4318      	orrs	r0, r3
 8016d66:	4770      	bx	lr
 8016d68:	fffffe00 	.word	0xfffffe00

08016d6c <_ZN8touchgfx9GlyphNode6setTopEs>:
 8016d6c:	7b43      	ldrb	r3, [r0, #13]
 8016d6e:	7201      	strb	r1, [r0, #8]
 8016d70:	b289      	uxth	r1, r1
 8016d72:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8016d76:	05ca      	lsls	r2, r1, #23
 8016d78:	bf48      	it	mi
 8016d7a:	f043 0320 	orrmi.w	r3, r3, #32
 8016d7e:	7343      	strb	r3, [r0, #13]
 8016d80:	058b      	lsls	r3, r1, #22
 8016d82:	bf42      	ittt	mi
 8016d84:	7b43      	ldrbmi	r3, [r0, #13]
 8016d86:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8016d8a:	7343      	strbmi	r3, [r0, #13]
 8016d8c:	4770      	bx	lr

08016d8e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8016d8e:	b530      	push	{r4, r5, lr}
 8016d90:	2500      	movs	r5, #0
 8016d92:	2401      	movs	r4, #1
 8016d94:	6843      	ldr	r3, [r0, #4]
 8016d96:	b913      	cbnz	r3, 8016d9e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8016d98:	6803      	ldr	r3, [r0, #0]
 8016d9a:	b1f3      	cbz	r3, 8016dda <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8016d9c:	6043      	str	r3, [r0, #4]
 8016d9e:	7c03      	ldrb	r3, [r0, #16]
 8016da0:	b143      	cbz	r3, 8016db4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8016da2:	68c3      	ldr	r3, [r0, #12]
 8016da4:	b12b      	cbz	r3, 8016db2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8016da6:	881a      	ldrh	r2, [r3, #0]
 8016da8:	b11a      	cbz	r2, 8016db2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8016daa:	1c9a      	adds	r2, r3, #2
 8016dac:	60c2      	str	r2, [r0, #12]
 8016dae:	8818      	ldrh	r0, [r3, #0]
 8016db0:	bd30      	pop	{r4, r5, pc}
 8016db2:	7405      	strb	r5, [r0, #16]
 8016db4:	6843      	ldr	r3, [r0, #4]
 8016db6:	8819      	ldrh	r1, [r3, #0]
 8016db8:	b179      	cbz	r1, 8016dda <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8016dba:	1c9a      	adds	r2, r3, #2
 8016dbc:	2902      	cmp	r1, #2
 8016dbe:	6042      	str	r2, [r0, #4]
 8016dc0:	d1f5      	bne.n	8016dae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8016dc2:	6883      	ldr	r3, [r0, #8]
 8016dc4:	1d1a      	adds	r2, r3, #4
 8016dc6:	6082      	str	r2, [r0, #8]
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	60c3      	str	r3, [r0, #12]
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d0e1      	beq.n	8016d94 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016dd0:	881b      	ldrh	r3, [r3, #0]
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d0de      	beq.n	8016d94 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016dd6:	7404      	strb	r4, [r0, #16]
 8016dd8:	e7dc      	b.n	8016d94 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016dda:	2000      	movs	r0, #0
 8016ddc:	e7e8      	b.n	8016db0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08016dde <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8016dde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016de0:	4605      	mov	r5, r0
 8016de2:	4608      	mov	r0, r1
 8016de4:	b1f1      	cbz	r1, 8016e24 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8016de6:	f105 0440 	add.w	r4, r5, #64	; 0x40
 8016dea:	460b      	mov	r3, r1
 8016dec:	f101 0708 	add.w	r7, r1, #8
 8016df0:	4622      	mov	r2, r4
 8016df2:	6818      	ldr	r0, [r3, #0]
 8016df4:	3308      	adds	r3, #8
 8016df6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016dfa:	4626      	mov	r6, r4
 8016dfc:	42bb      	cmp	r3, r7
 8016dfe:	c603      	stmia	r6!, {r0, r1}
 8016e00:	4634      	mov	r4, r6
 8016e02:	d1f6      	bne.n	8016df2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8016e04:	6818      	ldr	r0, [r3, #0]
 8016e06:	6030      	str	r0, [r6, #0]
 8016e08:	4610      	mov	r0, r2
 8016e0a:	889b      	ldrh	r3, [r3, #4]
 8016e0c:	80b3      	strh	r3, [r6, #4]
 8016e0e:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 8016e12:	015b      	lsls	r3, r3, #5
 8016e14:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8016e18:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8016e1c:	430b      	orrs	r3, r1
 8016e1e:	425b      	negs	r3, r3
 8016e20:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 8016e24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016e26 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8016e26:	b538      	push	{r3, r4, r5, lr}
 8016e28:	460c      	mov	r4, r1
 8016e2a:	6811      	ldr	r1, [r2, #0]
 8016e2c:	4610      	mov	r0, r2
 8016e2e:	68cd      	ldr	r5, [r1, #12]
 8016e30:	4619      	mov	r1, r3
 8016e32:	47a8      	blx	r5
 8016e34:	2800      	cmp	r0, #0
 8016e36:	bf08      	it	eq
 8016e38:	4620      	moveq	r0, r4
 8016e3a:	bd38      	pop	{r3, r4, r5, pc}

08016e3c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8016e3c:	b570      	push	{r4, r5, r6, lr}
 8016e3e:	8810      	ldrh	r0, [r2, #0]
 8016e40:	4298      	cmp	r0, r3
 8016e42:	d817      	bhi.n	8016e74 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016e44:	1e48      	subs	r0, r1, #1
 8016e46:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8016e4a:	4298      	cmp	r0, r3
 8016e4c:	d312      	bcc.n	8016e74 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016e4e:	2400      	movs	r4, #0
 8016e50:	428c      	cmp	r4, r1
 8016e52:	d20f      	bcs.n	8016e74 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016e54:	1860      	adds	r0, r4, r1
 8016e56:	1040      	asrs	r0, r0, #1
 8016e58:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8016e5c:	0085      	lsls	r5, r0, #2
 8016e5e:	42b3      	cmp	r3, r6
 8016e60:	d902      	bls.n	8016e68 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8016e62:	3001      	adds	r0, #1
 8016e64:	b284      	uxth	r4, r0
 8016e66:	e7f3      	b.n	8016e50 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8016e68:	d102      	bne.n	8016e70 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 8016e6a:	442a      	add	r2, r5
 8016e6c:	8850      	ldrh	r0, [r2, #2]
 8016e6e:	bd70      	pop	{r4, r5, r6, pc}
 8016e70:	b281      	uxth	r1, r0
 8016e72:	e7ed      	b.n	8016e50 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8016e74:	2000      	movs	r0, #0
 8016e76:	e7fa      	b.n	8016e6e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>

08016e78 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 8016e78:	b510      	push	{r4, lr}
 8016e7a:	8ac3      	ldrh	r3, [r0, #22]
 8016e7c:	428b      	cmp	r3, r1
 8016e7e:	d805      	bhi.n	8016e8c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 8016e80:	4b07      	ldr	r3, [pc, #28]	; (8016ea0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 8016e82:	21fd      	movs	r1, #253	; 0xfd
 8016e84:	4a07      	ldr	r2, [pc, #28]	; (8016ea4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 8016e86:	4808      	ldr	r0, [pc, #32]	; (8016ea8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 8016e88:	f00b fa5a 	bl	8022340 <__assert_func>
 8016e8c:	8a83      	ldrh	r3, [r0, #20]
 8016e8e:	240a      	movs	r4, #10
 8016e90:	4419      	add	r1, r3
 8016e92:	fbb1 f3f4 	udiv	r3, r1, r4
 8016e96:	fb04 1113 	mls	r1, r4, r3, r1
 8016e9a:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8016e9e:	bd10      	pop	{r4, pc}
 8016ea0:	08026cd1 	.word	0x08026cd1
 8016ea4:	08027100 	.word	0x08027100
 8016ea8:	08026cdf 	.word	0x08026cdf

08016eac <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 8016eac:	b508      	push	{r3, lr}
 8016eae:	8ac3      	ldrh	r3, [r0, #22]
 8016eb0:	428b      	cmp	r3, r1
 8016eb2:	d805      	bhi.n	8016ec0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 8016eb4:	4b07      	ldr	r3, [pc, #28]	; (8016ed4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 8016eb6:	21d3      	movs	r1, #211	; 0xd3
 8016eb8:	4a07      	ldr	r2, [pc, #28]	; (8016ed8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 8016eba:	4808      	ldr	r0, [pc, #32]	; (8016edc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 8016ebc:	f00b fa40 	bl	8022340 <__assert_func>
 8016ec0:	8a83      	ldrh	r3, [r0, #20]
 8016ec2:	220a      	movs	r2, #10
 8016ec4:	4419      	add	r1, r3
 8016ec6:	fbb1 f3f2 	udiv	r3, r1, r2
 8016eca:	fb02 1113 	mls	r1, r2, r3, r1
 8016ece:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8016ed2:	bd08      	pop	{r3, pc}
 8016ed4:	08026cd1 	.word	0x08026cd1
 8016ed8:	08026e50 	.word	0x08026e50
 8016edc:	08026cdf 	.word	0x08026cdf

08016ee0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8016ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ee4:	4604      	mov	r4, r0
 8016ee6:	4688      	mov	r8, r1
 8016ee8:	4615      	mov	r5, r2
 8016eea:	b94a      	cbnz	r2, 8016f00 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 8016eec:	4691      	mov	r9, r2
 8016eee:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8016ef2:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 8016ef6:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8016efa:	4648      	mov	r0, r9
 8016efc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f00:	f100 0640 	add.w	r6, r0, #64	; 0x40
 8016f04:	8892      	ldrh	r2, [r2, #4]
 8016f06:	462b      	mov	r3, r5
 8016f08:	f105 0c08 	add.w	ip, r5, #8
 8016f0c:	46b3      	mov	fp, r6
 8016f0e:	6818      	ldr	r0, [r3, #0]
 8016f10:	3308      	adds	r3, #8
 8016f12:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016f16:	4637      	mov	r7, r6
 8016f18:	4563      	cmp	r3, ip
 8016f1a:	c703      	stmia	r7!, {r0, r1}
 8016f1c:	463e      	mov	r6, r7
 8016f1e:	d1f6      	bne.n	8016f0e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 8016f20:	6818      	ldr	r0, [r3, #0]
 8016f22:	46d9      	mov	r9, fp
 8016f24:	6038      	str	r0, [r7, #0]
 8016f26:	889b      	ldrh	r3, [r3, #4]
 8016f28:	80bb      	strh	r3, [r7, #4]
 8016f2a:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 8016f2e:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 8016f32:	18d3      	adds	r3, r2, r3
 8016f34:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8016f38:	b298      	uxth	r0, r3
 8016f3a:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 8016f3e:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 8016f42:	281d      	cmp	r0, #29
 8016f44:	ea4a 0a01 	orr.w	sl, sl, r1
 8016f48:	fa1f f68a 	uxth.w	r6, sl
 8016f4c:	d842      	bhi.n	8016fd4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf4>
 8016f4e:	2301      	movs	r3, #1
 8016f50:	4950      	ldr	r1, [pc, #320]	; (8017094 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>)
 8016f52:	ea4f 0aea 	mov.w	sl, sl, asr #3
 8016f56:	4083      	lsls	r3, r0
 8016f58:	420b      	tst	r3, r1
 8016f5a:	d114      	bne.n	8016f86 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8016f5c:	f413 7f60 	tst.w	r3, #896	; 0x380
 8016f60:	d03c      	beq.n	8016fdc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfc>
 8016f62:	fa1f fa8a 	uxth.w	sl, sl
 8016f66:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8016f6a:	4658      	mov	r0, fp
 8016f6c:	eba1 010a 	sub.w	r1, r1, sl
 8016f70:	b209      	sxth	r1, r1
 8016f72:	f7ff fefb 	bl	8016d6c <_ZN8touchgfx9GlyphNode6setTopEs>
 8016f76:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8016f7a:	1b86      	subs	r6, r0, r6
 8016f7c:	eba6 0a0a 	sub.w	sl, r6, sl
 8016f80:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 8016f84:	e7b9      	b.n	8016efa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8016f86:	2100      	movs	r1, #0
 8016f88:	f104 001a 	add.w	r0, r4, #26
 8016f8c:	f7ff ff8e 	bl	8016eac <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8016f90:	f640 6333 	movw	r3, #3635	; 0xe33
 8016f94:	4601      	mov	r1, r0
 8016f96:	4298      	cmp	r0, r3
 8016f98:	d10a      	bne.n	8016fb0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 8016f9a:	f8d8 3000 	ldr.w	r3, [r8]
 8016f9e:	4640      	mov	r0, r8
 8016fa0:	68db      	ldr	r3, [r3, #12]
 8016fa2:	4798      	blx	r3
 8016fa4:	7b41      	ldrb	r1, [r0, #13]
 8016fa6:	7a00      	ldrb	r0, [r0, #8]
 8016fa8:	f7ff fed2 	bl	8016d50 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8016fac:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8016fb0:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 8016fb4:	4658      	mov	r0, fp
 8016fb6:	4431      	add	r1, r6
 8016fb8:	4451      	add	r1, sl
 8016fba:	b209      	sxth	r1, r1
 8016fbc:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 8016fc0:	f7ff fed4 	bl	8016d6c <_ZN8touchgfx9GlyphNode6setTopEs>
 8016fc4:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8016fc8:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8016fcc:	1a9b      	subs	r3, r3, r2
 8016fce:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 8016fd2:	e792      	b.n	8016efa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8016fd4:	f640 631b 	movw	r3, #3611	; 0xe1b
 8016fd8:	429a      	cmp	r2, r3
 8016fda:	d005      	beq.n	8016fe8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x108>
 8016fdc:	f022 0302 	bic.w	r3, r2, #2
 8016fe0:	f640 611d 	movw	r1, #3613	; 0xe1d
 8016fe4:	428b      	cmp	r3, r1
 8016fe6:	d119      	bne.n	801701c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13c>
 8016fe8:	1e53      	subs	r3, r2, #1
 8016fea:	4629      	mov	r1, r5
 8016fec:	4642      	mov	r2, r8
 8016fee:	4620      	mov	r0, r4
 8016ff0:	b29b      	uxth	r3, r3
 8016ff2:	f7ff ff18 	bl	8016e26 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016ff6:	7b41      	ldrb	r1, [r0, #13]
 8016ff8:	7a00      	ldrb	r0, [r0, #8]
 8016ffa:	f7ff fea9 	bl	8016d50 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8016ffe:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 8017002:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8017006:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801700a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801700e:	4313      	orrs	r3, r2
 8017010:	115a      	asrs	r2, r3, #5
 8017012:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8017016:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801701a:	e02e      	b.n	801707a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801701c:	4639      	mov	r1, r7
 801701e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8017022:	f7ff fe95 	bl	8016d50 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8017026:	f640 6109 	movw	r1, #3593	; 0xe09
 801702a:	f022 0310 	bic.w	r3, r2, #16
 801702e:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8017032:	428b      	cmp	r3, r1
 8017034:	d003      	beq.n	801703e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15e>
 8017036:	f640 6313 	movw	r3, #3603	; 0xe13
 801703a:	429a      	cmp	r2, r3
 801703c:	d127      	bne.n	801708e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ae>
 801703e:	b27f      	sxtb	r7, r7
 8017040:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8017044:	4629      	mov	r1, r5
 8017046:	4620      	mov	r0, r4
 8017048:	f407 7780 	and.w	r7, r7, #256	; 0x100
 801704c:	431f      	orrs	r7, r3
 801704e:	f640 6313 	movw	r3, #3603	; 0xe13
 8017052:	429a      	cmp	r2, r3
 8017054:	bf14      	ite	ne
 8017056:	f102 33ff 	addne.w	r3, r2, #4294967295	; 0xffffffff
 801705a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801705e:	4642      	mov	r2, r8
 8017060:	bf18      	it	ne
 8017062:	b29b      	uxthne	r3, r3
 8017064:	f7ff fedf 	bl	8016e26 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8017068:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801706c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017070:	7a83      	ldrb	r3, [r0, #10]
 8017072:	4313      	orrs	r3, r2
 8017074:	1aff      	subs	r7, r7, r3
 8017076:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 801707a:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801707e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8017082:	f7ff fe65 	bl	8016d50 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8017086:	1b80      	subs	r0, r0, r6
 8017088:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 801708c:	e735      	b.n	8016efa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801708e:	2300      	movs	r3, #0
 8017090:	e7c1      	b.n	8017016 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 8017092:	bf00      	nop
 8017094:	3fc00079 	.word	0x3fc00079

08017098 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8017098:	3a01      	subs	r2, #1
 801709a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801709e:	b292      	uxth	r2, r2
 80170a0:	460c      	mov	r4, r1
 80170a2:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80170a6:	42b2      	cmp	r2, r6
 80170a8:	d018      	beq.n	80170dc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 80170aa:	8b01      	ldrh	r1, [r0, #24]
 80170ac:	f834 5b02 	ldrh.w	r5, [r4], #2
 80170b0:	4291      	cmp	r1, r2
 80170b2:	d805      	bhi.n	80170c0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 80170b4:	4b13      	ldr	r3, [pc, #76]	; (8017104 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6c>)
 80170b6:	21d3      	movs	r1, #211	; 0xd3
 80170b8:	4a13      	ldr	r2, [pc, #76]	; (8017108 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 80170ba:	4814      	ldr	r0, [pc, #80]	; (801710c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 80170bc:	f00b f940 	bl	8022340 <__assert_func>
 80170c0:	8ac1      	ldrh	r1, [r0, #22]
 80170c2:	4411      	add	r1, r2
 80170c4:	3a01      	subs	r2, #1
 80170c6:	f001 0101 	and.w	r1, r1, #1
 80170ca:	b292      	uxth	r2, r2
 80170cc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80170d0:	8a49      	ldrh	r1, [r1, #18]
 80170d2:	428d      	cmp	r5, r1
 80170d4:	d0e7      	beq.n	80170a6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 80170d6:	2000      	movs	r0, #0
 80170d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170dc:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 80170e0:	2600      	movs	r6, #0
 80170e2:	f100 051a 	add.w	r5, r0, #26
 80170e6:	441f      	add	r7, r3
 80170e8:	b2b1      	uxth	r1, r6
 80170ea:	42b9      	cmp	r1, r7
 80170ec:	da08      	bge.n	8017100 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x68>
 80170ee:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 80170f2:	4628      	mov	r0, r5
 80170f4:	f7ff feda 	bl	8016eac <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 80170f8:	3601      	adds	r6, #1
 80170fa:	4540      	cmp	r0, r8
 80170fc:	d0f4      	beq.n	80170e8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 80170fe:	e7ea      	b.n	80170d6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8017100:	2001      	movs	r0, #1
 8017102:	e7e9      	b.n	80170d8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8017104:	08026cd1 	.word	0x08026cd1
 8017108:	08027260 	.word	0x08027260
 801710c:	08026cdf 	.word	0x08026cdf

08017110 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 8017110:	b538      	push	{r3, r4, r5, lr}
 8017112:	8ac3      	ldrh	r3, [r0, #22]
 8017114:	428b      	cmp	r3, r1
 8017116:	d205      	bcs.n	8017124 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 8017118:	4b08      	ldr	r3, [pc, #32]	; (801713c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 801711a:	21d8      	movs	r1, #216	; 0xd8
 801711c:	4a08      	ldr	r2, [pc, #32]	; (8017140 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801711e:	4809      	ldr	r0, [pc, #36]	; (8017144 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 8017120:	f00b f90e 	bl	8022340 <__assert_func>
 8017124:	8a82      	ldrh	r2, [r0, #20]
 8017126:	250a      	movs	r5, #10
 8017128:	1a5b      	subs	r3, r3, r1
 801712a:	440a      	add	r2, r1
 801712c:	82c3      	strh	r3, [r0, #22]
 801712e:	fbb2 f4f5 	udiv	r4, r2, r5
 8017132:	fb05 2214 	mls	r2, r5, r4, r2
 8017136:	8282      	strh	r2, [r0, #20]
 8017138:	bd38      	pop	{r3, r4, r5, pc}
 801713a:	bf00      	nop
 801713c:	08026cc5 	.word	0x08026cc5
 8017140:	0802707c 	.word	0x0802707c
 8017144:	08026cdf 	.word	0x08026cdf

08017148 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 8017148:	b538      	push	{r3, r4, r5, lr}
 801714a:	8ac3      	ldrh	r3, [r0, #22]
 801714c:	2b09      	cmp	r3, #9
 801714e:	d905      	bls.n	801715c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 8017150:	4b08      	ldr	r3, [pc, #32]	; (8017174 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 8017152:	21f7      	movs	r1, #247	; 0xf7
 8017154:	4a08      	ldr	r2, [pc, #32]	; (8017178 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 8017156:	4809      	ldr	r0, [pc, #36]	; (801717c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 8017158:	f00b f8f2 	bl	8022340 <__assert_func>
 801715c:	8a82      	ldrh	r2, [r0, #20]
 801715e:	250a      	movs	r5, #10
 8017160:	441a      	add	r2, r3
 8017162:	3301      	adds	r3, #1
 8017164:	fbb2 f4f5 	udiv	r4, r2, r5
 8017168:	fb05 2214 	mls	r2, r5, r4, r2
 801716c:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 8017170:	82c3      	strh	r3, [r0, #22]
 8017172:	bd38      	pop	{r3, r4, r5, pc}
 8017174:	08026cb9 	.word	0x08026cb9
 8017178:	08026fcd 	.word	0x08026fcd
 801717c:	08026cdf 	.word	0x08026cdf

08017180 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8017180:	b538      	push	{r3, r4, r5, lr}
 8017182:	4604      	mov	r4, r0
 8017184:	f100 051a 	add.w	r5, r0, #26
 8017188:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801718a:	2b0a      	cmp	r3, #10
 801718c:	d01c      	beq.n	80171c8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801718e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8017190:	b962      	cbnz	r2, 80171ac <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 8017192:	f104 051a 	add.w	r5, r4, #26
 8017196:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8017198:	2b0a      	cmp	r3, #10
 801719a:	d015      	beq.n	80171c8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801719c:	4620      	mov	r0, r4
 801719e:	f7ff fdf6 	bl	8016d8e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80171a2:	4601      	mov	r1, r0
 80171a4:	4628      	mov	r0, r5
 80171a6:	f7ff ffcf 	bl	8017148 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 80171aa:	e7f4      	b.n	8017196 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 80171ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80171ae:	3a01      	subs	r2, #1
 80171b0:	4628      	mov	r0, r5
 80171b2:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 80171b6:	3301      	adds	r3, #1
 80171b8:	f003 0301 	and.w	r3, r3, #1
 80171bc:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 80171be:	8722      	strh	r2, [r4, #56]	; 0x38
 80171c0:	86e3      	strh	r3, [r4, #54]	; 0x36
 80171c2:	f7ff ffc1 	bl	8017148 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 80171c6:	e7df      	b.n	8017188 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 80171c8:	bd38      	pop	{r3, r4, r5, pc}
	...

080171cc <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 80171cc:	2300      	movs	r3, #0
 80171ce:	b510      	push	{r4, lr}
 80171d0:	6043      	str	r3, [r0, #4]
 80171d2:	4604      	mov	r4, r0
 80171d4:	60c3      	str	r3, [r0, #12]
 80171d6:	7403      	strb	r3, [r0, #16]
 80171d8:	8603      	strh	r3, [r0, #48]	; 0x30
 80171da:	8303      	strh	r3, [r0, #24]
 80171dc:	8703      	strh	r3, [r0, #56]	; 0x38
 80171de:	f7ff ffcf 	bl	8017180 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80171e2:	4a0a      	ldr	r2, [pc, #40]	; (801720c <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 80171e4:	6813      	ldr	r3, [r2, #0]
 80171e6:	4611      	mov	r1, r2
 80171e8:	b913      	cbnz	r3, 80171f0 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 80171ea:	6852      	ldr	r2, [r2, #4]
 80171ec:	07d0      	lsls	r0, r2, #31
 80171ee:	d50b      	bpl.n	8017208 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 80171f0:	6849      	ldr	r1, [r1, #4]
 80171f2:	104a      	asrs	r2, r1, #1
 80171f4:	07c9      	lsls	r1, r1, #31
 80171f6:	eb04 0002 	add.w	r0, r4, r2
 80171fa:	bf48      	it	mi
 80171fc:	58a2      	ldrmi	r2, [r4, r2]
 80171fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017202:	bf48      	it	mi
 8017204:	58d3      	ldrmi	r3, [r2, r3]
 8017206:	4718      	bx	r3
 8017208:	bd10      	pop	{r4, pc}
 801720a:	bf00      	nop
 801720c:	20008334 	.word	0x20008334

08017210 <_ZN8touchgfx12TextProviderC1Ev>:
 8017210:	2300      	movs	r3, #0
 8017212:	2201      	movs	r2, #1
 8017214:	b510      	push	{r4, lr}
 8017216:	4604      	mov	r4, r0
 8017218:	60c3      	str	r3, [r0, #12]
 801721a:	7403      	strb	r3, [r0, #16]
 801721c:	82c3      	strh	r3, [r0, #22]
 801721e:	8303      	strh	r3, [r0, #24]
 8017220:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8017222:	8603      	strh	r3, [r0, #48]	; 0x30
 8017224:	86c3      	strh	r3, [r0, #54]	; 0x36
 8017226:	8703      	strh	r3, [r0, #56]	; 0x38
 8017228:	63c3      	str	r3, [r0, #60]	; 0x3c
 801722a:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801722e:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8017232:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8017236:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801723a:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801723e:	e9c0 3300 	strd	r3, r3, [r0]
 8017242:	f7ff ffc3 	bl	80171cc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8017246:	4620      	mov	r0, r4
 8017248:	bd10      	pop	{r4, pc}

0801724a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801724a:	b410      	push	{r4}
 801724c:	6082      	str	r2, [r0, #8]
 801724e:	6001      	str	r1, [r0, #0]
 8017250:	63c3      	str	r3, [r0, #60]	; 0x3c
 8017252:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017256:	f7ff bfb9 	b.w	80171cc <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801725c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 801725c:	b508      	push	{r3, lr}
 801725e:	88c2      	ldrh	r2, [r0, #6]
 8017260:	440a      	add	r2, r1
 8017262:	2a02      	cmp	r2, #2
 8017264:	dd05      	ble.n	8017272 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 8017266:	4b06      	ldr	r3, [pc, #24]	; (8017280 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 8017268:	21ec      	movs	r1, #236	; 0xec
 801726a:	4a06      	ldr	r2, [pc, #24]	; (8017284 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 801726c:	4806      	ldr	r0, [pc, #24]	; (8017288 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 801726e:	f00b f867 	bl	8022340 <__assert_func>
 8017272:	8883      	ldrh	r3, [r0, #4]
 8017274:	80c2      	strh	r2, [r0, #6]
 8017276:	1a59      	subs	r1, r3, r1
 8017278:	f001 0101 	and.w	r1, r1, #1
 801727c:	8081      	strh	r1, [r0, #4]
 801727e:	bd08      	pop	{r3, pc}
 8017280:	08026d0b 	.word	0x08026d0b
 8017284:	080271d9 	.word	0x080271d9
 8017288:	08026cdf 	.word	0x08026cdf

0801728c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 801728c:	b508      	push	{r3, lr}
 801728e:	88c3      	ldrh	r3, [r0, #6]
 8017290:	428b      	cmp	r3, r1
 8017292:	d805      	bhi.n	80172a0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 8017294:	4b06      	ldr	r3, [pc, #24]	; (80172b0 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 8017296:	21fd      	movs	r1, #253	; 0xfd
 8017298:	4a06      	ldr	r2, [pc, #24]	; (80172b4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801729a:	4807      	ldr	r0, [pc, #28]	; (80172b8 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 801729c:	f00b f850 	bl	8022340 <__assert_func>
 80172a0:	8883      	ldrh	r3, [r0, #4]
 80172a2:	4419      	add	r1, r3
 80172a4:	f001 0101 	and.w	r1, r1, #1
 80172a8:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 80172ac:	bd08      	pop	{r3, pc}
 80172ae:	bf00      	nop
 80172b0:	08026cd1 	.word	0x08026cd1
 80172b4:	08027331 	.word	0x08027331
 80172b8:	08026cdf 	.word	0x08026cdf

080172bc <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80172bc:	b570      	push	{r4, r5, r6, lr}
 80172be:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 80172c0:	4604      	mov	r4, r0
 80172c2:	b92a      	cbnz	r2, 80172d0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 80172c4:	4b12      	ldr	r3, [pc, #72]	; (8017310 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 80172c6:	21de      	movs	r1, #222	; 0xde
 80172c8:	4a12      	ldr	r2, [pc, #72]	; (8017314 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 80172ca:	4813      	ldr	r0, [pc, #76]	; (8017318 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 80172cc:	f00b f838 	bl	8022340 <__assert_func>
 80172d0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80172d2:	260a      	movs	r6, #10
 80172d4:	3a01      	subs	r2, #1
 80172d6:	3412      	adds	r4, #18
 80172d8:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 80172dc:	3301      	adds	r3, #1
 80172de:	8b4d      	ldrh	r5, [r1, #26]
 80172e0:	8602      	strh	r2, [r0, #48]	; 0x30
 80172e2:	fbb3 f1f6 	udiv	r1, r3, r6
 80172e6:	fb06 3311 	mls	r3, r6, r1, r3
 80172ea:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80172ec:	f7ff ff48 	bl	8017180 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80172f0:	88e3      	ldrh	r3, [r4, #6]
 80172f2:	2101      	movs	r1, #1
 80172f4:	2b02      	cmp	r3, #2
 80172f6:	bf04      	itt	eq
 80172f8:	2301      	moveq	r3, #1
 80172fa:	80e3      	strheq	r3, [r4, #6]
 80172fc:	4620      	mov	r0, r4
 80172fe:	f7ff ffad 	bl	801725c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 8017302:	4620      	mov	r0, r4
 8017304:	462a      	mov	r2, r5
 8017306:	2100      	movs	r1, #0
 8017308:	f7ff ffc0 	bl	801728c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801730c:	4628      	mov	r0, r5
 801730e:	bd70      	pop	{r4, r5, r6, pc}
 8017310:	08026cb0 	.word	0x08026cb0
 8017314:	08026f22 	.word	0x08026f22
 8017318:	08026cdf 	.word	0x08026cdf

0801731c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801731c:	428a      	cmp	r2, r1
 801731e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017322:	4604      	mov	r4, r0
 8017324:	460e      	mov	r6, r1
 8017326:	4615      	mov	r5, r2
 8017328:	469a      	mov	sl, r3
 801732a:	d92b      	bls.n	8017384 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801732c:	1a57      	subs	r7, r2, r1
 801732e:	f04f 0800 	mov.w	r8, #0
 8017332:	f100 0932 	add.w	r9, r0, #50	; 0x32
 8017336:	f04f 0b0a 	mov.w	fp, #10
 801733a:	b2bf      	uxth	r7, r7
 801733c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801733e:	b92b      	cbnz	r3, 801734c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 8017340:	4b24      	ldr	r3, [pc, #144]	; (80173d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 8017342:	21e6      	movs	r1, #230	; 0xe6
 8017344:	4a24      	ldr	r2, [pc, #144]	; (80173d8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 8017346:	4825      	ldr	r0, [pc, #148]	; (80173dc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 8017348:	f00a fffa 	bl	8022340 <__assert_func>
 801734c:	3b01      	subs	r3, #1
 801734e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8017350:	2101      	movs	r1, #1
 8017352:	4648      	mov	r0, r9
 8017354:	b29b      	uxth	r3, r3
 8017356:	f108 0801 	add.w	r8, r8, #1
 801735a:	441a      	add	r2, r3
 801735c:	8623      	strh	r3, [r4, #48]	; 0x30
 801735e:	fbb2 f3fb 	udiv	r3, r2, fp
 8017362:	fb0b 2313 	mls	r3, fp, r3, r2
 8017366:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801736a:	8b5a      	ldrh	r2, [r3, #26]
 801736c:	9201      	str	r2, [sp, #4]
 801736e:	f7ff ff75 	bl	801725c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 8017372:	9a01      	ldr	r2, [sp, #4]
 8017374:	2100      	movs	r1, #0
 8017376:	4648      	mov	r0, r9
 8017378:	f7ff ff88 	bl	801728c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801737c:	fa1f f388 	uxth.w	r3, r8
 8017380:	429f      	cmp	r7, r3
 8017382:	d8db      	bhi.n	801733c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 8017384:	f104 071a 	add.w	r7, r4, #26
 8017388:	4631      	mov	r1, r6
 801738a:	260a      	movs	r6, #10
 801738c:	4638      	mov	r0, r7
 801738e:	f7ff febf 	bl	8017110 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 8017392:	b1c5      	cbz	r5, 80173c6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8017394:	3d01      	subs	r5, #1
 8017396:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8017398:	b2ad      	uxth	r5, r5
 801739a:	2b09      	cmp	r3, #9
 801739c:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 80173a0:	d903      	bls.n	80173aa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 80173a2:	4b0f      	ldr	r3, [pc, #60]	; (80173e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 80173a4:	21ec      	movs	r1, #236	; 0xec
 80173a6:	4a0f      	ldr	r2, [pc, #60]	; (80173e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 80173a8:	e7cd      	b.n	8017346 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 80173aa:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80173ac:	3301      	adds	r3, #1
 80173ae:	3109      	adds	r1, #9
 80173b0:	8623      	strh	r3, [r4, #48]	; 0x30
 80173b2:	fbb1 f0f6 	udiv	r0, r1, r6
 80173b6:	fb06 1110 	mls	r1, r6, r0, r1
 80173ba:	4638      	mov	r0, r7
 80173bc:	85e1      	strh	r1, [r4, #46]	; 0x2e
 80173be:	2100      	movs	r1, #0
 80173c0:	f7ff fd5a 	bl	8016e78 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 80173c4:	e7e5      	b.n	8017392 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 80173c6:	4620      	mov	r0, r4
 80173c8:	b003      	add	sp, #12
 80173ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173ce:	f7ff bed7 	b.w	8017180 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80173d2:	bf00      	nop
 80173d4:	08026cb0 	.word	0x08026cb0
 80173d8:	08026da6 	.word	0x08026da6
 80173dc:	08026cdf 	.word	0x08026cdf
 80173e0:	08026d0b 	.word	0x08026d0b
 80173e4:	08026d1e 	.word	0x08026d1e

080173e8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80173e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173ec:	4605      	mov	r5, r0
 80173ee:	4616      	mov	r6, r2
 80173f0:	1c8c      	adds	r4, r1, #2
 80173f2:	8809      	ldrh	r1, [r1, #0]
 80173f4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80173f8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80173fc:	42b3      	cmp	r3, r6
 80173fe:	d124      	bne.n	801744a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8017400:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8017404:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8017408:	f001 070f 	and.w	r7, r1, #15
 801740c:	4652      	mov	r2, sl
 801740e:	f8cd 8000 	str.w	r8, [sp]
 8017412:	464b      	mov	r3, r9
 8017414:	4621      	mov	r1, r4
 8017416:	4628      	mov	r0, r5
 8017418:	f7ff fe3e 	bl	8017098 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801741c:	4683      	mov	fp, r0
 801741e:	b168      	cbz	r0, 801743c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8017420:	eb0a 0109 	add.w	r1, sl, r9
 8017424:	463a      	mov	r2, r7
 8017426:	4628      	mov	r0, r5
 8017428:	4441      	add	r1, r8
 801742a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801742e:	4649      	mov	r1, r9
 8017430:	f7ff ff74 	bl	801731c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8017434:	4658      	mov	r0, fp
 8017436:	b003      	add	sp, #12
 8017438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801743c:	eb07 010a 	add.w	r1, r7, sl
 8017440:	4449      	add	r1, r9
 8017442:	4441      	add	r1, r8
 8017444:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8017448:	e7d2      	b.n	80173f0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801744a:	f04f 0b00 	mov.w	fp, #0
 801744e:	e7f1      	b.n	8017434 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08017450 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8017450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017454:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8017456:	4604      	mov	r4, r0
 8017458:	260b      	movs	r6, #11
 801745a:	f100 091a 	add.w	r9, r0, #26
 801745e:	886f      	ldrh	r7, [r5, #2]
 8017460:	087f      	lsrs	r7, r7, #1
 8017462:	3e01      	subs	r6, #1
 8017464:	d013      	beq.n	801748e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 8017466:	2100      	movs	r1, #0
 8017468:	4648      	mov	r0, r9
 801746a:	f7ff fd1f 	bl	8016eac <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801746e:	462a      	mov	r2, r5
 8017470:	4680      	mov	r8, r0
 8017472:	4603      	mov	r3, r0
 8017474:	4639      	mov	r1, r7
 8017476:	4620      	mov	r0, r4
 8017478:	f7ff fce0 	bl	8016e3c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801747c:	b138      	cbz	r0, 801748e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801747e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8017482:	4642      	mov	r2, r8
 8017484:	4620      	mov	r0, r4
 8017486:	f7ff ffaf 	bl	80173e8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801748a:	2800      	cmp	r0, #0
 801748c:	d1e9      	bne.n	8017462 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 801748e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08017494 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 8017494:	4b1e      	ldr	r3, [pc, #120]	; (8017510 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8017496:	b570      	push	{r4, r5, r6, lr}
 8017498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801749c:	4604      	mov	r4, r0
 801749e:	f003 0501 	and.w	r5, r3, #1
 80174a2:	b902      	cbnz	r2, 80174a6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 80174a4:	b165      	cbz	r5, 80174c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 80174a6:	105b      	asrs	r3, r3, #1
 80174a8:	f104 061a 	add.w	r6, r4, #26
 80174ac:	18e0      	adds	r0, r4, r3
 80174ae:	b10d      	cbz	r5, 80174b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 80174b0:	58e3      	ldr	r3, [r4, r3]
 80174b2:	589a      	ldr	r2, [r3, r2]
 80174b4:	4790      	blx	r2
 80174b6:	2100      	movs	r1, #0
 80174b8:	4602      	mov	r2, r0
 80174ba:	4630      	mov	r0, r6
 80174bc:	f7ff fcdc 	bl	8016e78 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 80174c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80174c2:	b303      	cbz	r3, 8017506 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 80174c4:	f104 051a 	add.w	r5, r4, #26
 80174c8:	2100      	movs	r1, #0
 80174ca:	4628      	mov	r0, r5
 80174cc:	f7ff fcee 	bl	8016eac <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 80174d0:	b1c8      	cbz	r0, 8017506 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 80174d2:	4620      	mov	r0, r4
 80174d4:	f7ff ffbc 	bl	8017450 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 80174d8:	2101      	movs	r1, #1
 80174da:	4628      	mov	r0, r5
 80174dc:	f7ff fce6 	bl	8016eac <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 80174e0:	f640 133f 	movw	r3, #2367	; 0x93f
 80174e4:	4606      	mov	r6, r0
 80174e6:	4298      	cmp	r0, r3
 80174e8:	d10d      	bne.n	8017506 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 80174ea:	2100      	movs	r1, #0
 80174ec:	4628      	mov	r0, r5
 80174ee:	f7ff fcdd 	bl	8016eac <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 80174f2:	2101      	movs	r1, #1
 80174f4:	4602      	mov	r2, r0
 80174f6:	4628      	mov	r0, r5
 80174f8:	f7ff fcbe 	bl	8016e78 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 80174fc:	4632      	mov	r2, r6
 80174fe:	2100      	movs	r1, #0
 8017500:	4628      	mov	r0, r5
 8017502:	f7ff fcb9 	bl	8016e78 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8017506:	4620      	mov	r0, r4
 8017508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801750c:	f7ff bed6 	b.w	80172bc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017510:	2000833c 	.word	0x2000833c

08017514 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8017514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017516:	4617      	mov	r7, r2
 8017518:	461e      	mov	r6, r3
 801751a:	4605      	mov	r5, r0
 801751c:	f7ff ffba 	bl	8017494 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017520:	683b      	ldr	r3, [r7, #0]
 8017522:	4604      	mov	r4, r0
 8017524:	4601      	mov	r1, r0
 8017526:	4638      	mov	r0, r7
 8017528:	68db      	ldr	r3, [r3, #12]
 801752a:	4798      	blx	r3
 801752c:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 8017530:	4602      	mov	r2, r0
 8017532:	6030      	str	r0, [r6, #0]
 8017534:	b29b      	uxth	r3, r3
 8017536:	2b7f      	cmp	r3, #127	; 0x7f
 8017538:	d813      	bhi.n	8017562 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 801753a:	4639      	mov	r1, r7
 801753c:	4628      	mov	r0, r5
 801753e:	f7ff fccf 	bl	8016ee0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8017542:	6030      	str	r0, [r6, #0]
 8017544:	6833      	ldr	r3, [r6, #0]
 8017546:	b143      	cbz	r3, 801755a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8017548:	f993 200d 	ldrsb.w	r2, [r3, #13]
 801754c:	7a9b      	ldrb	r3, [r3, #10]
 801754e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8017552:	4313      	orrs	r3, r2
 8017554:	bf0c      	ite	eq
 8017556:	2301      	moveq	r3, #1
 8017558:	2300      	movne	r3, #0
 801755a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801755e:	4620      	mov	r0, r4
 8017560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017562:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 8017566:	2b00      	cmp	r3, #0
 8017568:	d0ec      	beq.n	8017544 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801756a:	f640 1302 	movw	r3, #2306	; 0x902
 801756e:	429c      	cmp	r4, r3
 8017570:	d1e8      	bne.n	8017544 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 8017572:	4601      	mov	r1, r0
 8017574:	4628      	mov	r0, r5
 8017576:	f7ff fc32 	bl	8016dde <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801757a:	e7e2      	b.n	8017542 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

0801757c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801757c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017580:	4617      	mov	r7, r2
 8017582:	461e      	mov	r6, r3
 8017584:	4605      	mov	r5, r0
 8017586:	f7ff ff85 	bl	8017494 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801758a:	683b      	ldr	r3, [r7, #0]
 801758c:	4604      	mov	r4, r0
 801758e:	4601      	mov	r1, r0
 8017590:	4638      	mov	r0, r7
 8017592:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8017596:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801759a:	47c0      	blx	r8
 801759c:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 80175a0:	4602      	mov	r2, r0
 80175a2:	6030      	str	r0, [r6, #0]
 80175a4:	b29b      	uxth	r3, r3
 80175a6:	2b7f      	cmp	r3, #127	; 0x7f
 80175a8:	d814      	bhi.n	80175d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 80175aa:	4639      	mov	r1, r7
 80175ac:	4628      	mov	r0, r5
 80175ae:	f7ff fc97 	bl	8016ee0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80175b2:	6030      	str	r0, [r6, #0]
 80175b4:	6833      	ldr	r3, [r6, #0]
 80175b6:	b143      	cbz	r3, 80175ca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80175b8:	f993 200d 	ldrsb.w	r2, [r3, #13]
 80175bc:	7a9b      	ldrb	r3, [r3, #10]
 80175be:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80175c2:	4313      	orrs	r3, r2
 80175c4:	bf0c      	ite	eq
 80175c6:	2301      	moveq	r3, #1
 80175c8:	2300      	movne	r3, #0
 80175ca:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 80175ce:	4620      	mov	r0, r4
 80175d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175d4:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d0eb      	beq.n	80175b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 80175dc:	f640 1302 	movw	r3, #2306	; 0x902
 80175e0:	429c      	cmp	r4, r3
 80175e2:	d1e7      	bne.n	80175b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 80175e4:	4601      	mov	r1, r0
 80175e6:	4628      	mov	r0, r5
 80175e8:	f7ff fbf9 	bl	8016dde <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80175ec:	e7e1      	b.n	80175b2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

080175ee <_ZN8touchgfx7Unicode6strlenEPKt>:
 80175ee:	4602      	mov	r2, r0
 80175f0:	b148      	cbz	r0, 8017606 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 80175f2:	2300      	movs	r3, #0
 80175f4:	b298      	uxth	r0, r3
 80175f6:	3301      	adds	r3, #1
 80175f8:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80175fc:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8017600:	2900      	cmp	r1, #0
 8017602:	d1f7      	bne.n	80175f4 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8017604:	4770      	bx	lr
 8017606:	4770      	bx	lr

08017608 <_ZN8touchgfx7Unicode6strlenEPKc>:
 8017608:	b140      	cbz	r0, 801761c <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801760a:	4602      	mov	r2, r0
 801760c:	1a13      	subs	r3, r2, r0
 801760e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8017612:	b29b      	uxth	r3, r3
 8017614:	2900      	cmp	r1, #0
 8017616:	d1f9      	bne.n	801760c <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 8017618:	4618      	mov	r0, r3
 801761a:	4770      	bx	lr
 801761c:	4603      	mov	r3, r0
 801761e:	e7fb      	b.n	8017618 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

08017620 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8017620:	b530      	push	{r4, r5, lr}
 8017622:	4604      	mov	r4, r0
 8017624:	b159      	cbz	r1, 801763e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8017626:	b148      	cbz	r0, 801763c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8017628:	2300      	movs	r3, #0
 801762a:	b298      	uxth	r0, r3
 801762c:	4282      	cmp	r2, r0
 801762e:	d905      	bls.n	801763c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8017630:	5ccd      	ldrb	r5, [r1, r3]
 8017632:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8017636:	3301      	adds	r3, #1
 8017638:	2d00      	cmp	r5, #0
 801763a:	d1f6      	bne.n	801762a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801763c:	bd30      	pop	{r4, r5, pc}
 801763e:	4608      	mov	r0, r1
 8017640:	e7fc      	b.n	801763c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08017642 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 8017642:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017644:	468c      	mov	ip, r1
 8017646:	b08b      	sub	sp, #44	; 0x2c
 8017648:	2100      	movs	r1, #0
 801764a:	ae01      	add	r6, sp, #4
 801764c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8017650:	211f      	movs	r1, #31
 8017652:	fbb0 f7f3 	udiv	r7, r0, r3
 8017656:	fb03 0517 	mls	r5, r3, r7, r0
 801765a:	4638      	mov	r0, r7
 801765c:	b2ec      	uxtb	r4, r5
 801765e:	2d09      	cmp	r5, #9
 8017660:	bfd4      	ite	le
 8017662:	3430      	addle	r4, #48	; 0x30
 8017664:	3457      	addgt	r4, #87	; 0x57
 8017666:	b2e4      	uxtb	r4, r4
 8017668:	558c      	strb	r4, [r1, r6]
 801766a:	1e4c      	subs	r4, r1, #1
 801766c:	b92f      	cbnz	r7, 801767a <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801766e:	4431      	add	r1, r6
 8017670:	4660      	mov	r0, ip
 8017672:	f7ff ffd5 	bl	8017620 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8017676:	b00b      	add	sp, #44	; 0x2c
 8017678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801767a:	4621      	mov	r1, r4
 801767c:	e7e9      	b.n	8017652 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801767e <_ZN8touchgfx7Unicode4itoaElPtti>:
 801767e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017680:	4607      	mov	r7, r0
 8017682:	b08b      	sub	sp, #44	; 0x2c
 8017684:	4608      	mov	r0, r1
 8017686:	b341      	cbz	r1, 80176da <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8017688:	1e99      	subs	r1, r3, #2
 801768a:	290e      	cmp	r1, #14
 801768c:	d825      	bhi.n	80176da <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801768e:	2100      	movs	r1, #0
 8017690:	463c      	mov	r4, r7
 8017692:	261f      	movs	r6, #31
 8017694:	f10d 0c04 	add.w	ip, sp, #4
 8017698:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801769c:	1e71      	subs	r1, r6, #1
 801769e:	fb94 fef3 	sdiv	lr, r4, r3
 80176a2:	fb03 441e 	mls	r4, r3, lr, r4
 80176a6:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 80176aa:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 80176ae:	b2ec      	uxtb	r4, r5
 80176b0:	2d09      	cmp	r5, #9
 80176b2:	bfd4      	ite	le
 80176b4:	3430      	addle	r4, #48	; 0x30
 80176b6:	3457      	addgt	r4, #87	; 0x57
 80176b8:	b2e4      	uxtb	r4, r4
 80176ba:	f80c 4006 	strb.w	r4, [ip, r6]
 80176be:	4674      	mov	r4, lr
 80176c0:	b96c      	cbnz	r4, 80176de <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 80176c2:	2f00      	cmp	r7, #0
 80176c4:	da05      	bge.n	80176d2 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 80176c6:	ab0a      	add	r3, sp, #40	; 0x28
 80176c8:	4419      	add	r1, r3
 80176ca:	232d      	movs	r3, #45	; 0x2d
 80176cc:	f801 3c24 	strb.w	r3, [r1, #-36]
 80176d0:	1eb1      	subs	r1, r6, #2
 80176d2:	3101      	adds	r1, #1
 80176d4:	4461      	add	r1, ip
 80176d6:	f7ff ffa3 	bl	8017620 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80176da:	b00b      	add	sp, #44	; 0x2c
 80176dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176de:	460e      	mov	r6, r1
 80176e0:	e7dc      	b.n	801769c <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

080176e2 <_ZN8touchgfx7Unicode4atoiEPKt>:
 80176e2:	b510      	push	{r4, lr}
 80176e4:	b158      	cbz	r0, 80176fe <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 80176e6:	1e82      	subs	r2, r0, #2
 80176e8:	210a      	movs	r1, #10
 80176ea:	2000      	movs	r0, #0
 80176ec:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 80176f0:	3b30      	subs	r3, #48	; 0x30
 80176f2:	b29c      	uxth	r4, r3
 80176f4:	2c09      	cmp	r4, #9
 80176f6:	d802      	bhi.n	80176fe <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 80176f8:	fb01 3000 	mla	r0, r1, r0, r3
 80176fc:	e7f6      	b.n	80176ec <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 80176fe:	bd10      	pop	{r4, pc}

08017700 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 8017700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017704:	b085      	sub	sp, #20
 8017706:	f8d0 8000 	ldr.w	r8, [r0]
 801770a:	468a      	mov	sl, r1
 801770c:	461c      	mov	r4, r3
 801770e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8017712:	4681      	mov	r9, r0
 8017714:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8017718:	4640      	mov	r0, r8
 801771a:	9203      	str	r2, [sp, #12]
 801771c:	9102      	str	r1, [sp, #8]
 801771e:	9301      	str	r3, [sp, #4]
 8017720:	f7ff ff65 	bl	80175ee <_ZN8touchgfx7Unicode6strlenEPKt>
 8017724:	9a03      	ldr	r2, [sp, #12]
 8017726:	f1ba 0f00 	cmp.w	sl, #0
 801772a:	bf0c      	ite	eq
 801772c:	4684      	moveq	ip, r0
 801772e:	f100 0c01 	addne.w	ip, r0, #1
 8017732:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8017736:	8812      	ldrh	r2, [r2, #0]
 8017738:	fa1f fc8c 	uxth.w	ip, ip
 801773c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801773e:	2a69      	cmp	r2, #105	; 0x69
 8017740:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8017742:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8017744:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 8017748:	d004      	beq.n	8017754 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801774a:	d844      	bhi.n	80177d6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 801774c:	2a58      	cmp	r2, #88	; 0x58
 801774e:	d001      	beq.n	8017754 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 8017750:	2a64      	cmp	r2, #100	; 0x64
 8017752:	d14b      	bne.n	80177ec <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 8017754:	b1a4      	cbz	r4, 8017780 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 8017756:	b956      	cbnz	r6, 801776e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 8017758:	2801      	cmp	r0, #1
 801775a:	d108      	bne.n	801776e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 801775c:	f8b8 2000 	ldrh.w	r2, [r8]
 8017760:	2a30      	cmp	r2, #48	; 0x30
 8017762:	bf02      	ittt	eq
 8017764:	f108 0202 	addeq.w	r2, r8, #2
 8017768:	4630      	moveq	r0, r6
 801776a:	f8c9 2000 	streq.w	r2, [r9]
 801776e:	45b4      	cmp	ip, r6
 8017770:	da3e      	bge.n	80177f0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 8017772:	b2b6      	uxth	r6, r6
 8017774:	eba6 040c 	sub.w	r4, r6, ip
 8017778:	46b4      	mov	ip, r6
 801777a:	b2a4      	uxth	r4, r4
 801777c:	f04f 0b00 	mov.w	fp, #0
 8017780:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8017784:	3a01      	subs	r2, #1
 8017786:	b169      	cbz	r1, 80177a4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8017788:	9911      	ldr	r1, [sp, #68]	; 0x44
 801778a:	458c      	cmp	ip, r1
 801778c:	da09      	bge.n	80177a2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801778e:	eba1 010c 	sub.w	r1, r1, ip
 8017792:	b289      	uxth	r1, r1
 8017794:	b933      	cbnz	r3, 80177a4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8017796:	f1bb 0f00 	cmp.w	fp, #0
 801779a:	d02b      	beq.n	80177f4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801779c:	b350      	cbz	r0, 80177f4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801779e:	440c      	add	r4, r1
 80177a0:	b2a4      	uxth	r4, r4
 80177a2:	2100      	movs	r1, #0
 80177a4:	682b      	ldr	r3, [r5, #0]
 80177a6:	4293      	cmp	r3, r2
 80177a8:	da07      	bge.n	80177ba <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 80177aa:	f1ba 0f00 	cmp.w	sl, #0
 80177ae:	d004      	beq.n	80177ba <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 80177b0:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 80177b4:	682b      	ldr	r3, [r5, #0]
 80177b6:	3301      	adds	r3, #1
 80177b8:	602b      	str	r3, [r5, #0]
 80177ba:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80177be:	b354      	cbz	r4, 8017816 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 80177c0:	682e      	ldr	r6, [r5, #0]
 80177c2:	3c01      	subs	r4, #1
 80177c4:	42b2      	cmp	r2, r6
 80177c6:	b2a4      	uxth	r4, r4
 80177c8:	dd25      	ble.n	8017816 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 80177ca:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 80177ce:	682b      	ldr	r3, [r5, #0]
 80177d0:	3301      	adds	r3, #1
 80177d2:	602b      	str	r3, [r5, #0]
 80177d4:	e7f3      	b.n	80177be <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 80177d6:	2a73      	cmp	r2, #115	; 0x73
 80177d8:	d003      	beq.n	80177e2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 80177da:	2a78      	cmp	r2, #120	; 0x78
 80177dc:	d0ba      	beq.n	8017754 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 80177de:	2a6f      	cmp	r2, #111	; 0x6f
 80177e0:	e7b7      	b.n	8017752 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 80177e2:	2c00      	cmp	r4, #0
 80177e4:	d0cc      	beq.n	8017780 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 80177e6:	42b0      	cmp	r0, r6
 80177e8:	dd00      	ble.n	80177ec <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 80177ea:	b2b0      	uxth	r0, r6
 80177ec:	2400      	movs	r4, #0
 80177ee:	e7c7      	b.n	8017780 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 80177f0:	2400      	movs	r4, #0
 80177f2:	e7c3      	b.n	801777c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 80177f4:	2900      	cmp	r1, #0
 80177f6:	d0d5      	beq.n	80177a4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 80177f8:	f04f 0c20 	mov.w	ip, #32
 80177fc:	682e      	ldr	r6, [r5, #0]
 80177fe:	2900      	cmp	r1, #0
 8017800:	d0d0      	beq.n	80177a4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8017802:	3901      	subs	r1, #1
 8017804:	4296      	cmp	r6, r2
 8017806:	b289      	uxth	r1, r1
 8017808:	dacb      	bge.n	80177a2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801780a:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801780e:	682b      	ldr	r3, [r5, #0]
 8017810:	3301      	adds	r3, #1
 8017812:	602b      	str	r3, [r5, #0]
 8017814:	e7f2      	b.n	80177fc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 8017816:	b198      	cbz	r0, 8017840 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 8017818:	f8d9 3000 	ldr.w	r3, [r9]
 801781c:	881c      	ldrh	r4, [r3, #0]
 801781e:	b17c      	cbz	r4, 8017840 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 8017820:	682c      	ldr	r4, [r5, #0]
 8017822:	3801      	subs	r0, #1
 8017824:	42a2      	cmp	r2, r4
 8017826:	b280      	uxth	r0, r0
 8017828:	dd0a      	ble.n	8017840 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 801782a:	1c9c      	adds	r4, r3, #2
 801782c:	f8c9 4000 	str.w	r4, [r9]
 8017830:	881c      	ldrh	r4, [r3, #0]
 8017832:	682b      	ldr	r3, [r5, #0]
 8017834:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 8017838:	682b      	ldr	r3, [r5, #0]
 801783a:	3301      	adds	r3, #1
 801783c:	602b      	str	r3, [r5, #0]
 801783e:	e7ea      	b.n	8017816 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 8017840:	2620      	movs	r6, #32
 8017842:	b151      	cbz	r1, 801785a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 8017844:	6828      	ldr	r0, [r5, #0]
 8017846:	3901      	subs	r1, #1
 8017848:	4282      	cmp	r2, r0
 801784a:	b289      	uxth	r1, r1
 801784c:	dd05      	ble.n	801785a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 801784e:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 8017852:	682b      	ldr	r3, [r5, #0]
 8017854:	3301      	adds	r3, #1
 8017856:	602b      	str	r3, [r5, #0]
 8017858:	e7f3      	b.n	8017842 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 801785a:	b005      	add	sp, #20
 801785c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017860 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 8017860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017864:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8017866:	4604      	mov	r4, r0
 8017868:	f04f 0801 	mov.w	r8, #1
 801786c:	2000      	movs	r0, #0
 801786e:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 8017872:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8017876:	8008      	strh	r0, [r1, #0]
 8017878:	7010      	strb	r0, [r2, #0]
 801787a:	7018      	strb	r0, [r3, #0]
 801787c:	f88c 0000 	strb.w	r0, [ip]
 8017880:	f88e 0000 	strb.w	r0, [lr]
 8017884:	7030      	strb	r0, [r6, #0]
 8017886:	6820      	ldr	r0, [r4, #0]
 8017888:	8800      	ldrh	r0, [r0, #0]
 801788a:	b190      	cbz	r0, 80178b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801788c:	282b      	cmp	r0, #43	; 0x2b
 801788e:	d001      	beq.n	8017894 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 8017890:	2820      	cmp	r0, #32
 8017892:	d104      	bne.n	801789e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 8017894:	8008      	strh	r0, [r1, #0]
 8017896:	6820      	ldr	r0, [r4, #0]
 8017898:	3002      	adds	r0, #2
 801789a:	6020      	str	r0, [r4, #0]
 801789c:	e7f3      	b.n	8017886 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 801789e:	282d      	cmp	r0, #45	; 0x2d
 80178a0:	d102      	bne.n	80178a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 80178a2:	f882 8000 	strb.w	r8, [r2]
 80178a6:	e7f6      	b.n	8017896 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 80178a8:	2823      	cmp	r0, #35	; 0x23
 80178aa:	d102      	bne.n	80178b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 80178ac:	f883 8000 	strb.w	r8, [r3]
 80178b0:	e7f1      	b.n	8017896 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 80178b2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80178b6:	2b09      	cmp	r3, #9
 80178b8:	d901      	bls.n	80178be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 80178ba:	282a      	cmp	r0, #42	; 0x2a
 80178bc:	d114      	bne.n	80178e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 80178be:	2201      	movs	r2, #1
 80178c0:	f88e 2000 	strb.w	r2, [lr]
 80178c4:	6823      	ldr	r3, [r4, #0]
 80178c6:	8819      	ldrh	r1, [r3, #0]
 80178c8:	2930      	cmp	r1, #48	; 0x30
 80178ca:	bf02      	ittt	eq
 80178cc:	3302      	addeq	r3, #2
 80178ce:	6023      	streq	r3, [r4, #0]
 80178d0:	f88c 2000 	strbeq.w	r2, [ip]
 80178d4:	6820      	ldr	r0, [r4, #0]
 80178d6:	8803      	ldrh	r3, [r0, #0]
 80178d8:	2b2a      	cmp	r3, #42	; 0x2a
 80178da:	d11e      	bne.n	801791a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 80178dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80178e0:	603b      	str	r3, [r7, #0]
 80178e2:	6823      	ldr	r3, [r4, #0]
 80178e4:	3302      	adds	r3, #2
 80178e6:	6023      	str	r3, [r4, #0]
 80178e8:	6823      	ldr	r3, [r4, #0]
 80178ea:	881b      	ldrh	r3, [r3, #0]
 80178ec:	2b2e      	cmp	r3, #46	; 0x2e
 80178ee:	d112      	bne.n	8017916 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 80178f0:	2301      	movs	r3, #1
 80178f2:	7033      	strb	r3, [r6, #0]
 80178f4:	6823      	ldr	r3, [r4, #0]
 80178f6:	1c98      	adds	r0, r3, #2
 80178f8:	6020      	str	r0, [r4, #0]
 80178fa:	885b      	ldrh	r3, [r3, #2]
 80178fc:	2b2a      	cmp	r3, #42	; 0x2a
 80178fe:	d117      	bne.n	8017930 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 8017900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017904:	602b      	str	r3, [r5, #0]
 8017906:	6823      	ldr	r3, [r4, #0]
 8017908:	3302      	adds	r3, #2
 801790a:	6023      	str	r3, [r4, #0]
 801790c:	682b      	ldr	r3, [r5, #0]
 801790e:	2b06      	cmp	r3, #6
 8017910:	bfa8      	it	ge
 8017912:	2306      	movge	r3, #6
 8017914:	602b      	str	r3, [r5, #0]
 8017916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801791a:	f7ff fee2 	bl	80176e2 <_ZN8touchgfx7Unicode4atoiEPKt>
 801791e:	6038      	str	r0, [r7, #0]
 8017920:	6823      	ldr	r3, [r4, #0]
 8017922:	881a      	ldrh	r2, [r3, #0]
 8017924:	3a30      	subs	r2, #48	; 0x30
 8017926:	2a09      	cmp	r2, #9
 8017928:	d8de      	bhi.n	80178e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801792a:	3302      	adds	r3, #2
 801792c:	6023      	str	r3, [r4, #0]
 801792e:	e7f7      	b.n	8017920 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 8017930:	f7ff fed7 	bl	80176e2 <_ZN8touchgfx7Unicode4atoiEPKt>
 8017934:	6028      	str	r0, [r5, #0]
 8017936:	6823      	ldr	r3, [r4, #0]
 8017938:	881a      	ldrh	r2, [r3, #0]
 801793a:	3a30      	subs	r2, #48	; 0x30
 801793c:	2a09      	cmp	r2, #9
 801793e:	d8e5      	bhi.n	801790c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 8017940:	3302      	adds	r3, #2
 8017942:	6023      	str	r3, [r4, #0]
 8017944:	e7f7      	b.n	8017936 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>

08017946 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 8017946:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801794a:	b0a2      	sub	sp, #136	; 0x88
 801794c:	2500      	movs	r5, #0
 801794e:	4606      	mov	r6, r0
 8017950:	460f      	mov	r7, r1
 8017952:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 8017956:	9209      	str	r2, [sp, #36]	; 0x24
 8017958:	4629      	mov	r1, r5
 801795a:	2242      	movs	r2, #66	; 0x42
 801795c:	4640      	mov	r0, r8
 801795e:	461c      	mov	r4, r3
 8017960:	950d      	str	r5, [sp, #52]	; 0x34
 8017962:	f7fe fdbe 	bl	80164e2 <_ZN8touchgfx6memsetEPvhm>
 8017966:	b30e      	cbz	r6, 80179ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 8017968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801796a:	b1f3      	cbz	r3, 80179aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x64>
 801796c:	f107 3aff 	add.w	sl, r7, #4294967295	; 0xffffffff
 8017970:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017974:	8812      	ldrh	r2, [r2, #0]
 8017976:	2a00      	cmp	r2, #0
 8017978:	f000 80b3 	beq.w	8017ae2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 801797c:	459a      	cmp	sl, r3
 801797e:	f340 80b0 	ble.w	8017ae2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x19c>
 8017982:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8017986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017988:	f8b9 2000 	ldrh.w	r2, [r9]
 801798c:	2a00      	cmp	r2, #0
 801798e:	d0ef      	beq.n	8017970 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8017990:	2a25      	cmp	r2, #37	; 0x25
 8017992:	f000 80aa 	beq.w	8017aea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a4>
 8017996:	459a      	cmp	sl, r3
 8017998:	ddea      	ble.n	8017970 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 801799a:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801799e:	f109 0202 	add.w	r2, r9, #2
 80179a2:	3301      	adds	r3, #1
 80179a4:	9209      	str	r2, [sp, #36]	; 0x24
 80179a6:	930d      	str	r3, [sp, #52]	; 0x34
 80179a8:	e7eb      	b.n	8017982 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x3c>
 80179aa:	8033      	strh	r3, [r6, #0]
 80179ac:	4630      	mov	r0, r6
 80179ae:	b022      	add	sp, #136	; 0x88
 80179b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179b4:	3b63      	subs	r3, #99	; 0x63
 80179b6:	2b01      	cmp	r3, #1
 80179b8:	f200 80df 	bhi.w	8017b7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 80179bc:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80179c0:	8813      	ldrh	r3, [r2, #0]
 80179c2:	2b69      	cmp	r3, #105	; 0x69
 80179c4:	d058      	beq.n	8017a78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 80179c6:	d81b      	bhi.n	8017a00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xba>
 80179c8:	2b63      	cmp	r3, #99	; 0x63
 80179ca:	d02e      	beq.n	8017a2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe4>
 80179cc:	2b64      	cmp	r3, #100	; 0x64
 80179ce:	d053      	beq.n	8017a78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x132>
 80179d0:	2b58      	cmp	r3, #88	; 0x58
 80179d2:	d06f      	beq.n	8017ab4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x16e>
 80179d4:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 80179d8:	46a1      	mov	r9, r4
 80179da:	e02d      	b.n	8017a38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 80179dc:	2b73      	cmp	r3, #115	; 0x73
 80179de:	d0ed      	beq.n	80179bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 80179e0:	d803      	bhi.n	80179ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa4>
 80179e2:	2b6f      	cmp	r3, #111	; 0x6f
 80179e4:	f040 80c9 	bne.w	8017b7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x234>
 80179e8:	e7e8      	b.n	80179bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 80179ea:	2b75      	cmp	r3, #117	; 0x75
 80179ec:	d0e6      	beq.n	80179bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 80179ee:	2b78      	cmp	r3, #120	; 0x78
 80179f0:	e7f8      	b.n	80179e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 80179f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80179f4:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 80179f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179fa:	3302      	adds	r3, #2
 80179fc:	9309      	str	r3, [sp, #36]	; 0x24
 80179fe:	e7b7      	b.n	8017970 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8017a00:	2b73      	cmp	r3, #115	; 0x73
 8017a02:	d034      	beq.n	8017a6e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x128>
 8017a04:	d807      	bhi.n	8017a16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xd0>
 8017a06:	2b6f      	cmp	r3, #111	; 0x6f
 8017a08:	d1e4      	bne.n	80179d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 8017a0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017a0c:	f104 0904 	add.w	r9, r4, #4
 8017a10:	2308      	movs	r3, #8
 8017a12:	1aba      	subs	r2, r7, r2
 8017a14:	e048      	b.n	8017aa8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 8017a16:	2b75      	cmp	r3, #117	; 0x75
 8017a18:	d041      	beq.n	8017a9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x158>
 8017a1a:	2b78      	cmp	r3, #120	; 0x78
 8017a1c:	d1da      	bne.n	80179d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x8e>
 8017a1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017a20:	f104 0904 	add.w	r9, r4, #4
 8017a24:	2310      	movs	r3, #16
 8017a26:	1aba      	subs	r2, r7, r2
 8017a28:	e03e      	b.n	8017aa8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x162>
 8017a2a:	7823      	ldrb	r3, [r4, #0]
 8017a2c:	f104 0904 	add.w	r9, r4, #4
 8017a30:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 8017a34:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8017a38:	aa0d      	add	r2, sp, #52	; 0x34
 8017a3a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8017a3e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8017a42:	a810      	add	r0, sp, #64	; 0x40
 8017a44:	9205      	str	r2, [sp, #20]
 8017a46:	464c      	mov	r4, r9
 8017a48:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8017a4c:	9204      	str	r2, [sp, #16]
 8017a4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017a50:	9203      	str	r2, [sp, #12]
 8017a52:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8017a56:	9202      	str	r2, [sp, #8]
 8017a58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017a5a:	9201      	str	r2, [sp, #4]
 8017a5c:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8017a60:	e9cd 7606 	strd	r7, r6, [sp, #24]
 8017a64:	9200      	str	r2, [sp, #0]
 8017a66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017a68:	f7ff fe4a 	bl	8017700 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 8017a6c:	e7c4      	b.n	80179f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
 8017a6e:	f104 0904 	add.w	r9, r4, #4
 8017a72:	6823      	ldr	r3, [r4, #0]
 8017a74:	9310      	str	r3, [sp, #64]	; 0x40
 8017a76:	e7df      	b.n	8017a38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8017a78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017a7a:	230a      	movs	r3, #10
 8017a7c:	4641      	mov	r1, r8
 8017a7e:	6820      	ldr	r0, [r4, #0]
 8017a80:	1aba      	subs	r2, r7, r2
 8017a82:	f104 0904 	add.w	r9, r4, #4
 8017a86:	b292      	uxth	r2, r2
 8017a88:	f7ff fdf9 	bl	801767e <_ZN8touchgfx7Unicode4itoaElPtti>
 8017a8c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017a90:	2b2d      	cmp	r3, #45	; 0x2d
 8017a92:	d1d1      	bne.n	8017a38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8017a94:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8017a98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017a9a:	3302      	adds	r3, #2
 8017a9c:	e7ea      	b.n	8017a74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x12e>
 8017a9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017aa0:	f104 0904 	add.w	r9, r4, #4
 8017aa4:	230a      	movs	r3, #10
 8017aa6:	1aba      	subs	r2, r7, r2
 8017aa8:	b292      	uxth	r2, r2
 8017aaa:	4641      	mov	r1, r8
 8017aac:	6820      	ldr	r0, [r4, #0]
 8017aae:	f7ff fdc8 	bl	8017642 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8017ab2:	e7c1      	b.n	8017a38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8017ab4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017ab6:	2310      	movs	r3, #16
 8017ab8:	4641      	mov	r1, r8
 8017aba:	6820      	ldr	r0, [r4, #0]
 8017abc:	1aba      	subs	r2, r7, r2
 8017abe:	f104 0904 	add.w	r9, r4, #4
 8017ac2:	b292      	uxth	r2, r2
 8017ac4:	f7ff fdbd 	bl	8017642 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8017ac8:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8017acc:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d0b1      	beq.n	8017a38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf2>
 8017ad4:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8017ad8:	2919      	cmp	r1, #25
 8017ada:	d8f7      	bhi.n	8017acc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 8017adc:	3b20      	subs	r3, #32
 8017ade:	8013      	strh	r3, [r2, #0]
 8017ae0:	e7f4      	b.n	8017acc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x186>
 8017ae2:	2200      	movs	r2, #0
 8017ae4:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8017ae8:	e760      	b.n	80179ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x66>
 8017aea:	459a      	cmp	sl, r3
 8017aec:	f77f af40 	ble.w	8017970 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2a>
 8017af0:	f109 0302 	add.w	r3, r9, #2
 8017af4:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 8017af8:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 8017afc:	a809      	add	r0, sp, #36	; 0x24
 8017afe:	9309      	str	r3, [sp, #36]	; 0x24
 8017b00:	ab0f      	add	r3, sp, #60	; 0x3c
 8017b02:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 8017b06:	9304      	str	r3, [sp, #16]
 8017b08:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8017b0c:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 8017b10:	9303      	str	r3, [sp, #12]
 8017b12:	ab0e      	add	r3, sp, #56	; 0x38
 8017b14:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 8017b18:	9302      	str	r3, [sp, #8]
 8017b1a:	ab0c      	add	r3, sp, #48	; 0x30
 8017b1c:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 8017b20:	9301      	str	r3, [sp, #4]
 8017b22:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8017b26:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 8017b2a:	9300      	str	r3, [sp, #0]
 8017b2c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8017b30:	950e      	str	r5, [sp, #56]	; 0x38
 8017b32:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 8017b36:	950f      	str	r5, [sp, #60]	; 0x3c
 8017b38:	f7ff fe92 	bl	8017860 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 8017b3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	bfbf      	itttt	lt
 8017b44:	6823      	ldrlt	r3, [r4, #0]
 8017b46:	3404      	addlt	r4, #4
 8017b48:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8017b4c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017b4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	bfbf      	itttt	lt
 8017b54:	6823      	ldrlt	r3, [r4, #0]
 8017b56:	3404      	addlt	r4, #4
 8017b58:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8017b5c:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8017b5e:	8813      	ldrh	r3, [r2, #0]
 8017b60:	2b69      	cmp	r3, #105	; 0x69
 8017b62:	f43f af2b 	beq.w	80179bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8017b66:	f63f af39 	bhi.w	80179dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x96>
 8017b6a:	2b58      	cmp	r3, #88	; 0x58
 8017b6c:	f43f af26 	beq.w	80179bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x76>
 8017b70:	f63f af20 	bhi.w	80179b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x6e>
 8017b74:	2b25      	cmp	r3, #37	; 0x25
 8017b76:	f43f af3c 	beq.w	80179f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xac>
 8017b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b7c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017b80:	f8b9 2000 	ldrh.w	r2, [r9]
 8017b84:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8017b88:	3301      	adds	r3, #1
 8017b8a:	930d      	str	r3, [sp, #52]	; 0x34
 8017b8c:	e734      	b.n	80179f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb2>
	...

08017b90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8017b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b92:	4605      	mov	r5, r0
 8017b94:	b0a1      	sub	sp, #132	; 0x84
 8017b96:	4610      	mov	r0, r2
 8017b98:	460e      	mov	r6, r1
 8017b9a:	4614      	mov	r4, r2
 8017b9c:	461f      	mov	r7, r3
 8017b9e:	f7ff fd33 	bl	8017608 <_ZN8touchgfx7Unicode6strlenEPKc>
 8017ba2:	283f      	cmp	r0, #63	; 0x3f
 8017ba4:	d906      	bls.n	8017bb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 8017ba6:	4b0a      	ldr	r3, [pc, #40]	; (8017bd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 8017ba8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8017bac:	4a09      	ldr	r2, [pc, #36]	; (8017bd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 8017bae:	480a      	ldr	r0, [pc, #40]	; (8017bd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 8017bb0:	f00a fbc6 	bl	8022340 <__assert_func>
 8017bb4:	4621      	mov	r1, r4
 8017bb6:	2240      	movs	r2, #64	; 0x40
 8017bb8:	4668      	mov	r0, sp
 8017bba:	f7ff fd31 	bl	8017620 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8017bbe:	463b      	mov	r3, r7
 8017bc0:	466a      	mov	r2, sp
 8017bc2:	4631      	mov	r1, r6
 8017bc4:	4628      	mov	r0, r5
 8017bc6:	f7ff febe 	bl	8017946 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 8017bca:	b021      	add	sp, #132	; 0x84
 8017bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017bce:	bf00      	nop
 8017bd0:	08027409 	.word	0x08027409
 8017bd4:	0802744c 	.word	0x0802744c
 8017bd8:	08027426 	.word	0x08027426

08017bdc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8017bdc:	b40c      	push	{r2, r3}
 8017bde:	b507      	push	{r0, r1, r2, lr}
 8017be0:	ab04      	add	r3, sp, #16
 8017be2:	f853 2b04 	ldr.w	r2, [r3], #4
 8017be6:	9301      	str	r3, [sp, #4]
 8017be8:	f7ff ffd2 	bl	8017b90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8017bec:	b003      	add	sp, #12
 8017bee:	f85d eb04 	ldr.w	lr, [sp], #4
 8017bf2:	b002      	add	sp, #8
 8017bf4:	4770      	bx	lr

08017bf6 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt>:
 8017bf6:	4603      	mov	r3, r0
 8017bf8:	2000      	movs	r0, #0
 8017bfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017bfc:	4290      	cmp	r0, r2
 8017bfe:	d209      	bcs.n	8017c14 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x1e>
 8017c00:	781c      	ldrb	r4, [r3, #0]
 8017c02:	0625      	lsls	r5, r4, #24
 8017c04:	d407      	bmi.n	8017c16 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x20>
 8017c06:	3301      	adds	r3, #1
 8017c08:	800c      	strh	r4, [r1, #0]
 8017c0a:	3001      	adds	r0, #1
 8017c0c:	1c8c      	adds	r4, r1, #2
 8017c0e:	8809      	ldrh	r1, [r1, #0]
 8017c10:	b280      	uxth	r0, r0
 8017c12:	bb69      	cbnz	r1, 8017c70 <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x7a>
 8017c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c16:	f004 05e0 	and.w	r5, r4, #224	; 0xe0
 8017c1a:	2dc0      	cmp	r5, #192	; 0xc0
 8017c1c:	d10d      	bne.n	8017c3a <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x44>
 8017c1e:	785d      	ldrb	r5, [r3, #1]
 8017c20:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 8017c24:	2e80      	cmp	r6, #128	; 0x80
 8017c26:	d108      	bne.n	8017c3a <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x44>
 8017c28:	01a4      	lsls	r4, r4, #6
 8017c2a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8017c2e:	3302      	adds	r3, #2
 8017c30:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8017c34:	432c      	orrs	r4, r5
 8017c36:	800c      	strh	r4, [r1, #0]
 8017c38:	e7e7      	b.n	8017c0a <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x14>
 8017c3a:	f004 05f0 	and.w	r5, r4, #240	; 0xf0
 8017c3e:	2de0      	cmp	r5, #224	; 0xe0
 8017c40:	d114      	bne.n	8017c6c <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x76>
 8017c42:	785e      	ldrb	r6, [r3, #1]
 8017c44:	f006 05c0 	and.w	r5, r6, #192	; 0xc0
 8017c48:	2d80      	cmp	r5, #128	; 0x80
 8017c4a:	d10f      	bne.n	8017c6c <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x76>
 8017c4c:	789d      	ldrb	r5, [r3, #2]
 8017c4e:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
 8017c52:	2f80      	cmp	r7, #128	; 0x80
 8017c54:	d10a      	bne.n	8017c6c <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x76>
 8017c56:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8017c5a:	01b6      	lsls	r6, r6, #6
 8017c5c:	3303      	adds	r3, #3
 8017c5e:	ea45 3404 	orr.w	r4, r5, r4, lsl #12
 8017c62:	f406 667c 	and.w	r6, r6, #4032	; 0xfc0
 8017c66:	4334      	orrs	r4, r6
 8017c68:	800c      	strh	r4, [r1, #0]
 8017c6a:	e7ce      	b.n	8017c0a <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x14>
 8017c6c:	3301      	adds	r3, #1
 8017c6e:	460c      	mov	r4, r1
 8017c70:	4621      	mov	r1, r4
 8017c72:	e7c3      	b.n	8017bfc <_ZN8touchgfx7Unicode8fromUTF8EPKhPtt+0x6>

08017c74 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8017c74:	4b01      	ldr	r3, [pc, #4]	; (8017c7c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8017c76:	6018      	str	r0, [r3, #0]
 8017c78:	4770      	bx	lr
 8017c7a:	bf00      	nop
 8017c7c:	2000b300 	.word	0x2000b300

08017c80 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8017c80:	4b07      	ldr	r3, [pc, #28]	; (8017ca0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 8017c82:	881a      	ldrh	r2, [r3, #0]
 8017c84:	4282      	cmp	r2, r0
 8017c86:	d809      	bhi.n	8017c9c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8017c88:	4b06      	ldr	r3, [pc, #24]	; (8017ca4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 8017c8a:	881b      	ldrh	r3, [r3, #0]
 8017c8c:	4413      	add	r3, r2
 8017c8e:	4298      	cmp	r0, r3
 8017c90:	da04      	bge.n	8017c9c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8017c92:	4b05      	ldr	r3, [pc, #20]	; (8017ca8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8017c9a:	4770      	bx	lr
 8017c9c:	2000      	movs	r0, #0
 8017c9e:	4770      	bx	lr
 8017ca0:	2000b320 	.word	0x2000b320
 8017ca4:	2000b324 	.word	0x2000b324
 8017ca8:	2000b304 	.word	0x2000b304

08017cac <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8017cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cb0:	4d26      	ldr	r5, [pc, #152]	; (8017d4c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8017cb2:	682b      	ldr	r3, [r5, #0]
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d046      	beq.n	8017d46 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 8017cb8:	4a25      	ldr	r2, [pc, #148]	; (8017d50 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8017cba:	4f26      	ldr	r7, [pc, #152]	; (8017d54 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8017cbc:	8810      	ldrh	r0, [r2, #0]
 8017cbe:	883c      	ldrh	r4, [r7, #0]
 8017cc0:	4e25      	ldr	r6, [pc, #148]	; (8017d58 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8017cc2:	4420      	add	r0, r4
 8017cc4:	1c42      	adds	r2, r0, #1
 8017cc6:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8017cca:	f022 0201 	bic.w	r2, r2, #1
 8017cce:	0412      	lsls	r2, r2, #16
 8017cd0:	0c12      	lsrs	r2, r2, #16
 8017cd2:	0051      	lsls	r1, r2, #1
 8017cd4:	220e      	movs	r2, #14
 8017cd6:	eb08 0e01 	add.w	lr, r8, r1
 8017cda:	fb02 fc04 	mul.w	ip, r2, r4
 8017cde:	eb03 0208 	add.w	r2, r3, r8
 8017ce2:	4c1e      	ldr	r4, [pc, #120]	; (8017d5c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8017ce4:	6022      	str	r2, [r4, #0]
 8017ce6:	eb03 020e 	add.w	r2, r3, lr
 8017cea:	44e6      	add	lr, ip
 8017cec:	6032      	str	r2, [r6, #0]
 8017cee:	4473      	add	r3, lr
 8017cf0:	4a1b      	ldr	r2, [pc, #108]	; (8017d60 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8017cf2:	6013      	str	r3, [r2, #0]
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	4a1b      	ldr	r2, [pc, #108]	; (8017d64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8017cf8:	8013      	strh	r3, [r2, #0]
 8017cfa:	4a1b      	ldr	r2, [pc, #108]	; (8017d68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8017cfc:	6812      	ldr	r2, [r2, #0]
 8017cfe:	eba2 0208 	sub.w	r2, r2, r8
 8017d02:	1a52      	subs	r2, r2, r1
 8017d04:	4919      	ldr	r1, [pc, #100]	; (8017d6c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 8017d06:	eba2 020c 	sub.w	r2, r2, ip
 8017d0a:	469c      	mov	ip, r3
 8017d0c:	600a      	str	r2, [r1, #0]
 8017d0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017d12:	4a17      	ldr	r2, [pc, #92]	; (8017d70 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8017d14:	8013      	strh	r3, [r2, #0]
 8017d16:	4283      	cmp	r3, r0
 8017d18:	d10d      	bne.n	8017d36 <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 8017d1a:	883d      	ldrh	r5, [r7, #0]
 8017d1c:	2300      	movs	r3, #0
 8017d1e:	6830      	ldr	r0, [r6, #0]
 8017d20:	240e      	movs	r4, #14
 8017d22:	429d      	cmp	r5, r3
 8017d24:	d90f      	bls.n	8017d46 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 8017d26:	fb04 0203 	mla	r2, r4, r3, r0
 8017d2a:	3301      	adds	r3, #1
 8017d2c:	7b11      	ldrb	r1, [r2, #12]
 8017d2e:	f36f 1145 	bfc	r1, #5, #1
 8017d32:	7311      	strb	r1, [r2, #12]
 8017d34:	e7f5      	b.n	8017d22 <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 8017d36:	682a      	ldr	r2, [r5, #0]
 8017d38:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8017d3c:	6822      	ldr	r2, [r4, #0]
 8017d3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8017d42:	3301      	adds	r3, #1
 8017d44:	e7e7      	b.n	8017d16 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 8017d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d4a:	bf00      	nop
 8017d4c:	2000b304 	.word	0x2000b304
 8017d50:	2000b320 	.word	0x2000b320
 8017d54:	2000b324 	.word	0x2000b324
 8017d58:	2000b308 	.word	0x2000b308
 8017d5c:	2000b318 	.word	0x2000b318
 8017d60:	2000b310 	.word	0x2000b310
 8017d64:	2000b322 	.word	0x2000b322
 8017d68:	2000b30c 	.word	0x2000b30c
 8017d6c:	2000b31c 	.word	0x2000b31c
 8017d70:	2000b314 	.word	0x2000b314

08017d74 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8017d74:	4b10      	ldr	r3, [pc, #64]	; (8017db8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8017d76:	b510      	push	{r4, lr}
 8017d78:	681b      	ldr	r3, [r3, #0]
 8017d7a:	b9db      	cbnz	r3, 8017db4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8017d7c:	b1d1      	cbz	r1, 8017db4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8017d7e:	4b0f      	ldr	r3, [pc, #60]	; (8017dbc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8017d80:	240e      	movs	r4, #14
 8017d82:	801a      	strh	r2, [r3, #0]
 8017d84:	b292      	uxth	r2, r2
 8017d86:	4b0e      	ldr	r3, [pc, #56]	; (8017dc0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8017d88:	881b      	ldrh	r3, [r3, #0]
 8017d8a:	4413      	add	r3, r2
 8017d8c:	4362      	muls	r2, r4
 8017d8e:	2406      	movs	r4, #6
 8017d90:	fb04 2203 	mla	r2, r4, r3, r2
 8017d94:	428a      	cmp	r2, r1
 8017d96:	d305      	bcc.n	8017da4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8017d98:	4b0a      	ldr	r3, [pc, #40]	; (8017dc4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8017d9a:	2137      	movs	r1, #55	; 0x37
 8017d9c:	4a0a      	ldr	r2, [pc, #40]	; (8017dc8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8017d9e:	480b      	ldr	r0, [pc, #44]	; (8017dcc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8017da0:	f00a face 	bl	8022340 <__assert_func>
 8017da4:	4b0a      	ldr	r3, [pc, #40]	; (8017dd0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8017da6:	6019      	str	r1, [r3, #0]
 8017da8:	4b0a      	ldr	r3, [pc, #40]	; (8017dd4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8017daa:	6018      	str	r0, [r3, #0]
 8017dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017db0:	f7ff bf7c 	b.w	8017cac <_ZN8touchgfx6Bitmap10clearCacheEv>
 8017db4:	bd10      	pop	{r4, pc}
 8017db6:	bf00      	nop
 8017db8:	2000b310 	.word	0x2000b310
 8017dbc:	2000b324 	.word	0x2000b324
 8017dc0:	2000b320 	.word	0x2000b320
 8017dc4:	0802752e 	.word	0x0802752e
 8017dc8:	08027587 	.word	0x08027587
 8017dcc:	08027509 	.word	0x08027509
 8017dd0:	2000b30c 	.word	0x2000b30c
 8017dd4:	2000b304 	.word	0x2000b304

08017dd8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8017dd8:	b470      	push	{r4, r5, r6}
 8017dda:	4c07      	ldr	r4, [pc, #28]	; (8017df8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8017ddc:	4605      	mov	r5, r0
 8017dde:	4610      	mov	r0, r2
 8017de0:	9a03      	ldr	r2, [sp, #12]
 8017de2:	6826      	ldr	r6, [r4, #0]
 8017de4:	b936      	cbnz	r6, 8017df4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8017de6:	6025      	str	r5, [r4, #0]
 8017de8:	4c04      	ldr	r4, [pc, #16]	; (8017dfc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8017dea:	8021      	strh	r1, [r4, #0]
 8017dec:	4619      	mov	r1, r3
 8017dee:	bc70      	pop	{r4, r5, r6}
 8017df0:	f7ff bfc0 	b.w	8017d74 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8017df4:	bc70      	pop	{r4, r5, r6}
 8017df6:	4770      	bx	lr
 8017df8:	2000b328 	.word	0x2000b328
 8017dfc:	2000b320 	.word	0x2000b320

08017e00 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8017e00:	b508      	push	{r3, lr}
 8017e02:	4b14      	ldr	r3, [pc, #80]	; (8017e54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8017e04:	6819      	ldr	r1, [r3, #0]
 8017e06:	b931      	cbnz	r1, 8017e16 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8017e08:	4b13      	ldr	r3, [pc, #76]	; (8017e58 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8017e0a:	f240 21e6 	movw	r1, #742	; 0x2e6
 8017e0e:	4a13      	ldr	r2, [pc, #76]	; (8017e5c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8017e10:	4813      	ldr	r0, [pc, #76]	; (8017e60 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8017e12:	f00a fa95 	bl	8022340 <__assert_func>
 8017e16:	4a13      	ldr	r2, [pc, #76]	; (8017e64 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8017e18:	8803      	ldrh	r3, [r0, #0]
 8017e1a:	8812      	ldrh	r2, [r2, #0]
 8017e1c:	4293      	cmp	r3, r2
 8017e1e:	d204      	bcs.n	8017e2a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8017e20:	2214      	movs	r2, #20
 8017e22:	fb02 1303 	mla	r3, r2, r3, r1
 8017e26:	8918      	ldrh	r0, [r3, #8]
 8017e28:	bd08      	pop	{r3, pc}
 8017e2a:	490f      	ldr	r1, [pc, #60]	; (8017e68 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8017e2c:	8809      	ldrh	r1, [r1, #0]
 8017e2e:	4411      	add	r1, r2
 8017e30:	428b      	cmp	r3, r1
 8017e32:	da06      	bge.n	8017e42 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8017e34:	1a9b      	subs	r3, r3, r2
 8017e36:	4a0d      	ldr	r2, [pc, #52]	; (8017e6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8017e38:	210e      	movs	r1, #14
 8017e3a:	6812      	ldr	r2, [r2, #0]
 8017e3c:	fb01 2303 	mla	r3, r1, r3, r2
 8017e40:	e7f1      	b.n	8017e26 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8017e42:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017e46:	4293      	cmp	r3, r2
 8017e48:	bf0a      	itet	eq
 8017e4a:	4b09      	ldreq	r3, [pc, #36]	; (8017e70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8017e4c:	2000      	movne	r0, #0
 8017e4e:	8818      	ldrheq	r0, [r3, #0]
 8017e50:	e7ea      	b.n	8017e28 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8017e52:	bf00      	nop
 8017e54:	2000b328 	.word	0x2000b328
 8017e58:	08026558 	.word	0x08026558
 8017e5c:	08027634 	.word	0x08027634
 8017e60:	08027509 	.word	0x08027509
 8017e64:	2000b320 	.word	0x2000b320
 8017e68:	2000b324 	.word	0x2000b324
 8017e6c:	2000b308 	.word	0x2000b308
 8017e70:	2000b254 	.word	0x2000b254

08017e74 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8017e74:	b508      	push	{r3, lr}
 8017e76:	4b14      	ldr	r3, [pc, #80]	; (8017ec8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8017e78:	6819      	ldr	r1, [r3, #0]
 8017e7a:	b931      	cbnz	r1, 8017e8a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8017e7c:	4b13      	ldr	r3, [pc, #76]	; (8017ecc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8017e7e:	f240 21fa 	movw	r1, #762	; 0x2fa
 8017e82:	4a13      	ldr	r2, [pc, #76]	; (8017ed0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8017e84:	4813      	ldr	r0, [pc, #76]	; (8017ed4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8017e86:	f00a fa5b 	bl	8022340 <__assert_func>
 8017e8a:	4a13      	ldr	r2, [pc, #76]	; (8017ed8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8017e8c:	8803      	ldrh	r3, [r0, #0]
 8017e8e:	8812      	ldrh	r2, [r2, #0]
 8017e90:	4293      	cmp	r3, r2
 8017e92:	d204      	bcs.n	8017e9e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8017e94:	2214      	movs	r2, #20
 8017e96:	fb02 1303 	mla	r3, r2, r3, r1
 8017e9a:	8958      	ldrh	r0, [r3, #10]
 8017e9c:	bd08      	pop	{r3, pc}
 8017e9e:	490f      	ldr	r1, [pc, #60]	; (8017edc <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8017ea0:	8809      	ldrh	r1, [r1, #0]
 8017ea2:	4411      	add	r1, r2
 8017ea4:	428b      	cmp	r3, r1
 8017ea6:	da06      	bge.n	8017eb6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8017ea8:	1a9b      	subs	r3, r3, r2
 8017eaa:	4a0d      	ldr	r2, [pc, #52]	; (8017ee0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8017eac:	210e      	movs	r1, #14
 8017eae:	6812      	ldr	r2, [r2, #0]
 8017eb0:	fb01 2303 	mla	r3, r1, r3, r2
 8017eb4:	e7f1      	b.n	8017e9a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8017eb6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017eba:	4293      	cmp	r3, r2
 8017ebc:	bf0a      	itet	eq
 8017ebe:	4b09      	ldreq	r3, [pc, #36]	; (8017ee4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8017ec0:	2000      	movne	r0, #0
 8017ec2:	8818      	ldrheq	r0, [r3, #0]
 8017ec4:	e7ea      	b.n	8017e9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8017ec6:	bf00      	nop
 8017ec8:	2000b328 	.word	0x2000b328
 8017ecc:	08026558 	.word	0x08026558
 8017ed0:	08027660 	.word	0x08027660
 8017ed4:	08027509 	.word	0x08027509
 8017ed8:	2000b320 	.word	0x2000b320
 8017edc:	2000b324 	.word	0x2000b324
 8017ee0:	2000b308 	.word	0x2000b308
 8017ee4:	2000b256 	.word	0x2000b256

08017ee8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8017ee8:	4b23      	ldr	r3, [pc, #140]	; (8017f78 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8017eea:	b510      	push	{r4, lr}
 8017eec:	681c      	ldr	r4, [r3, #0]
 8017eee:	b934      	cbnz	r4, 8017efe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8017ef0:	4b22      	ldr	r3, [pc, #136]	; (8017f7c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8017ef2:	f240 310e 	movw	r1, #782	; 0x30e
 8017ef6:	4a22      	ldr	r2, [pc, #136]	; (8017f80 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8017ef8:	4822      	ldr	r0, [pc, #136]	; (8017f84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8017efa:	f00a fa21 	bl	8022340 <__assert_func>
 8017efe:	4a22      	ldr	r2, [pc, #136]	; (8017f88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8017f00:	880b      	ldrh	r3, [r1, #0]
 8017f02:	8812      	ldrh	r2, [r2, #0]
 8017f04:	4293      	cmp	r3, r2
 8017f06:	d211      	bcs.n	8017f2c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8017f08:	2214      	movs	r2, #20
 8017f0a:	fb02 4303 	mla	r3, r2, r3, r4
 8017f0e:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8017f12:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8017f16:	8a1a      	ldrh	r2, [r3, #16]
 8017f18:	8a5b      	ldrh	r3, [r3, #18]
 8017f1a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8017f1e:	8004      	strh	r4, [r0, #0]
 8017f20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017f24:	8041      	strh	r1, [r0, #2]
 8017f26:	8082      	strh	r2, [r0, #4]
 8017f28:	80c3      	strh	r3, [r0, #6]
 8017f2a:	e00e      	b.n	8017f4a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8017f2c:	4917      	ldr	r1, [pc, #92]	; (8017f8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8017f2e:	8809      	ldrh	r1, [r1, #0]
 8017f30:	4411      	add	r1, r2
 8017f32:	428b      	cmp	r3, r1
 8017f34:	da0a      	bge.n	8017f4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8017f36:	1a9b      	subs	r3, r3, r2
 8017f38:	4a15      	ldr	r2, [pc, #84]	; (8017f90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8017f3a:	210e      	movs	r1, #14
 8017f3c:	6812      	ldr	r2, [r2, #0]
 8017f3e:	fb01 2303 	mla	r3, r1, r3, r2
 8017f42:	681a      	ldr	r2, [r3, #0]
 8017f44:	6002      	str	r2, [r0, #0]
 8017f46:	685a      	ldr	r2, [r3, #4]
 8017f48:	6042      	str	r2, [r0, #4]
 8017f4a:	bd10      	pop	{r4, pc}
 8017f4c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017f50:	4293      	cmp	r3, r2
 8017f52:	d10b      	bne.n	8017f6c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8017f54:	4b0f      	ldr	r3, [pc, #60]	; (8017f94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8017f56:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017f5a:	4b0f      	ldr	r3, [pc, #60]	; (8017f98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8017f5c:	8081      	strh	r1, [r0, #4]
 8017f5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017f62:	2300      	movs	r3, #0
 8017f64:	80c2      	strh	r2, [r0, #6]
 8017f66:	8003      	strh	r3, [r0, #0]
 8017f68:	8043      	strh	r3, [r0, #2]
 8017f6a:	e7ee      	b.n	8017f4a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8017f6c:	2300      	movs	r3, #0
 8017f6e:	8003      	strh	r3, [r0, #0]
 8017f70:	8043      	strh	r3, [r0, #2]
 8017f72:	8083      	strh	r3, [r0, #4]
 8017f74:	e7d8      	b.n	8017f28 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8017f76:	bf00      	nop
 8017f78:	2000b328 	.word	0x2000b328
 8017f7c:	08026558 	.word	0x08026558
 8017f80:	080275cd 	.word	0x080275cd
 8017f84:	08027509 	.word	0x08027509
 8017f88:	2000b320 	.word	0x2000b320
 8017f8c:	2000b324 	.word	0x2000b324
 8017f90:	2000b308 	.word	0x2000b308
 8017f94:	2000b254 	.word	0x2000b254
 8017f98:	2000b256 	.word	0x2000b256

08017f9c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8017f9c:	4b18      	ldr	r3, [pc, #96]	; (8018000 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	b34b      	cbz	r3, 8017ff6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8017fa2:	4a18      	ldr	r2, [pc, #96]	; (8018004 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8017fa4:	8800      	ldrh	r0, [r0, #0]
 8017fa6:	8812      	ldrh	r2, [r2, #0]
 8017fa8:	4290      	cmp	r0, r2
 8017faa:	d211      	bcs.n	8017fd0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8017fac:	2214      	movs	r2, #20
 8017fae:	fb02 3300 	mla	r3, r2, r0, r3
 8017fb2:	8a1a      	ldrh	r2, [r3, #16]
 8017fb4:	8919      	ldrh	r1, [r3, #8]
 8017fb6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8017fba:	428a      	cmp	r2, r1
 8017fbc:	db1d      	blt.n	8017ffa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8017fbe:	8a58      	ldrh	r0, [r3, #18]
 8017fc0:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8017fc4:	895b      	ldrh	r3, [r3, #10]
 8017fc6:	4298      	cmp	r0, r3
 8017fc8:	bfac      	ite	ge
 8017fca:	2000      	movge	r0, #0
 8017fcc:	2001      	movlt	r0, #1
 8017fce:	4770      	bx	lr
 8017fd0:	4b0d      	ldr	r3, [pc, #52]	; (8018008 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8017fd2:	881b      	ldrh	r3, [r3, #0]
 8017fd4:	4413      	add	r3, r2
 8017fd6:	4298      	cmp	r0, r3
 8017fd8:	da0d      	bge.n	8017ff6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8017fda:	4b0c      	ldr	r3, [pc, #48]	; (801800c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8017fdc:	1a80      	subs	r0, r0, r2
 8017fde:	220e      	movs	r2, #14
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	fb02 3300 	mla	r3, r2, r0, r3
 8017fe6:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8017fea:	891a      	ldrh	r2, [r3, #8]
 8017fec:	4291      	cmp	r1, r2
 8017fee:	db04      	blt.n	8017ffa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8017ff0:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8017ff4:	e7e6      	b.n	8017fc4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 8017ff6:	2000      	movs	r0, #0
 8017ff8:	4770      	bx	lr
 8017ffa:	2001      	movs	r0, #1
 8017ffc:	4770      	bx	lr
 8017ffe:	bf00      	nop
 8018000:	2000b328 	.word	0x2000b328
 8018004:	2000b320 	.word	0x2000b320
 8018008:	2000b324 	.word	0x2000b324
 801800c:	2000b308 	.word	0x2000b308

08018010 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8018010:	b508      	push	{r3, lr}
 8018012:	4b12      	ldr	r3, [pc, #72]	; (801805c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8018014:	6819      	ldr	r1, [r3, #0]
 8018016:	b931      	cbnz	r1, 8018026 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8018018:	4b11      	ldr	r3, [pc, #68]	; (8018060 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801801a:	f240 3132 	movw	r1, #818	; 0x332
 801801e:	4a11      	ldr	r2, [pc, #68]	; (8018064 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8018020:	4811      	ldr	r0, [pc, #68]	; (8018068 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8018022:	f00a f98d 	bl	8022340 <__assert_func>
 8018026:	8803      	ldrh	r3, [r0, #0]
 8018028:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801802c:	4293      	cmp	r3, r2
 801802e:	d012      	beq.n	8018056 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8018030:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018034:	4293      	cmp	r3, r2
 8018036:	d103      	bne.n	8018040 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8018038:	4b0c      	ldr	r3, [pc, #48]	; (801806c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801803e:	bd08      	pop	{r3, pc}
 8018040:	4a0b      	ldr	r2, [pc, #44]	; (8018070 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8018042:	6812      	ldr	r2, [r2, #0]
 8018044:	b11a      	cbz	r2, 801804e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8018046:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801804a:	2800      	cmp	r0, #0
 801804c:	d1f7      	bne.n	801803e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801804e:	2214      	movs	r2, #20
 8018050:	4353      	muls	r3, r2
 8018052:	58c8      	ldr	r0, [r1, r3]
 8018054:	e7f3      	b.n	801803e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8018056:	2000      	movs	r0, #0
 8018058:	e7f1      	b.n	801803e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801805a:	bf00      	nop
 801805c:	2000b328 	.word	0x2000b328
 8018060:	08026558 	.word	0x08026558
 8018064:	08027603 	.word	0x08027603
 8018068:	08027509 	.word	0x08027509
 801806c:	2000b260 	.word	0x2000b260
 8018070:	2000b304 	.word	0x2000b304

08018074 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8018074:	8802      	ldrh	r2, [r0, #0]
 8018076:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801807a:	429a      	cmp	r2, r3
 801807c:	d840      	bhi.n	8018100 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801807e:	4b21      	ldr	r3, [pc, #132]	; (8018104 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 8018080:	881b      	ldrh	r3, [r3, #0]
 8018082:	429a      	cmp	r2, r3
 8018084:	d220      	bcs.n	80180c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 8018086:	4b20      	ldr	r3, [pc, #128]	; (8018108 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8018088:	6819      	ldr	r1, [r3, #0]
 801808a:	2314      	movs	r3, #20
 801808c:	fb03 1302 	mla	r3, r3, r2, r1
 8018090:	6858      	ldr	r0, [r3, #4]
 8018092:	2800      	cmp	r0, #0
 8018094:	d035      	beq.n	8018102 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8018096:	491d      	ldr	r1, [pc, #116]	; (801810c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8018098:	6809      	ldr	r1, [r1, #0]
 801809a:	2900      	cmp	r1, #0
 801809c:	d031      	beq.n	8018102 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801809e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80180a2:	b371      	cbz	r1, 8018102 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80180a4:	895a      	ldrh	r2, [r3, #10]
 80180a6:	8918      	ldrh	r0, [r3, #8]
 80180a8:	4350      	muls	r0, r2
 80180aa:	7c5a      	ldrb	r2, [r3, #17]
 80180ac:	7cdb      	ldrb	r3, [r3, #19]
 80180ae:	0952      	lsrs	r2, r2, #5
 80180b0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80180b4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80180b8:	2b0b      	cmp	r3, #11
 80180ba:	bf18      	it	ne
 80180bc:	0040      	lslne	r0, r0, #1
 80180be:	3003      	adds	r0, #3
 80180c0:	f020 0003 	bic.w	r0, r0, #3
 80180c4:	4408      	add	r0, r1
 80180c6:	4770      	bx	lr
 80180c8:	4911      	ldr	r1, [pc, #68]	; (8018110 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80180ca:	8809      	ldrh	r1, [r1, #0]
 80180cc:	4419      	add	r1, r3
 80180ce:	428a      	cmp	r2, r1
 80180d0:	da16      	bge.n	8018100 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 80180d2:	4910      	ldr	r1, [pc, #64]	; (8018114 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80180d4:	1ad3      	subs	r3, r2, r3
 80180d6:	200e      	movs	r0, #14
 80180d8:	6809      	ldr	r1, [r1, #0]
 80180da:	fb00 1303 	mla	r3, r0, r3, r1
 80180de:	7b19      	ldrb	r1, [r3, #12]
 80180e0:	f001 011f 	and.w	r1, r1, #31
 80180e4:	290b      	cmp	r1, #11
 80180e6:	d10b      	bne.n	8018100 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 80180e8:	8919      	ldrh	r1, [r3, #8]
 80180ea:	8958      	ldrh	r0, [r3, #10]
 80180ec:	4b07      	ldr	r3, [pc, #28]	; (801810c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80180ee:	4348      	muls	r0, r1
 80180f0:	6819      	ldr	r1, [r3, #0]
 80180f2:	3003      	adds	r0, #3
 80180f4:	f020 0303 	bic.w	r3, r0, #3
 80180f8:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80180fc:	4418      	add	r0, r3
 80180fe:	4770      	bx	lr
 8018100:	2000      	movs	r0, #0
 8018102:	4770      	bx	lr
 8018104:	2000b320 	.word	0x2000b320
 8018108:	2000b328 	.word	0x2000b328
 801810c:	2000b304 	.word	0x2000b304
 8018110:	2000b324 	.word	0x2000b324
 8018114:	2000b308 	.word	0x2000b308

08018118 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8018118:	4b19      	ldr	r3, [pc, #100]	; (8018180 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801811a:	6819      	ldr	r1, [r3, #0]
 801811c:	8803      	ldrh	r3, [r0, #0]
 801811e:	b1e9      	cbz	r1, 801815c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8018120:	4a18      	ldr	r2, [pc, #96]	; (8018184 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8018122:	8812      	ldrh	r2, [r2, #0]
 8018124:	429a      	cmp	r2, r3
 8018126:	d90a      	bls.n	801813e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8018128:	2214      	movs	r2, #20
 801812a:	fb02 1303 	mla	r3, r2, r3, r1
 801812e:	7c58      	ldrb	r0, [r3, #17]
 8018130:	0942      	lsrs	r2, r0, #5
 8018132:	7cd8      	ldrb	r0, [r3, #19]
 8018134:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8018138:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801813c:	4770      	bx	lr
 801813e:	4912      	ldr	r1, [pc, #72]	; (8018188 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8018140:	8809      	ldrh	r1, [r1, #0]
 8018142:	4411      	add	r1, r2
 8018144:	428b      	cmp	r3, r1
 8018146:	da09      	bge.n	801815c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8018148:	1a9b      	subs	r3, r3, r2
 801814a:	4a10      	ldr	r2, [pc, #64]	; (801818c <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801814c:	210e      	movs	r1, #14
 801814e:	6812      	ldr	r2, [r2, #0]
 8018150:	fb01 2303 	mla	r3, r1, r3, r2
 8018154:	7b18      	ldrb	r0, [r3, #12]
 8018156:	f000 001f 	and.w	r0, r0, #31
 801815a:	4770      	bx	lr
 801815c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018160:	4293      	cmp	r3, r2
 8018162:	d10a      	bne.n	801817a <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 8018164:	4b0a      	ldr	r3, [pc, #40]	; (8018190 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801816c:	b10a      	cbz	r2, 8018172 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801816e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018170:	b900      	cbnz	r0, 8018174 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8018172:	6898      	ldr	r0, [r3, #8]
 8018174:	6803      	ldr	r3, [r0, #0]
 8018176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018178:	4718      	bx	r3
 801817a:	2000      	movs	r0, #0
 801817c:	4770      	bx	lr
 801817e:	bf00      	nop
 8018180:	2000b328 	.word	0x2000b328
 8018184:	2000b320 	.word	0x2000b320
 8018188:	2000b324 	.word	0x2000b324
 801818c:	2000b308 	.word	0x2000b308
 8018190:	2000b260 	.word	0x2000b260

08018194 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8018194:	2018      	movs	r0, #24
 8018196:	4770      	bx	lr

08018198 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8018198:	2001      	movs	r0, #1
 801819a:	4770      	bx	lr

0801819c <_ZNK8touchgfx8LCD24bpp20getColorFrom24BitRGBEhhh>:
 801819c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80181a0:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 80181a4:	4770      	bx	lr

080181a6 <_ZNK8touchgfx8LCD24bpp11getRedColorENS_9colortypeE>:
 80181a6:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80181aa:	4770      	bx	lr

080181ac <_ZNK8touchgfx8LCD24bpp13getGreenColorENS_9colortypeE>:
 80181ac:	f3c1 2007 	ubfx	r0, r1, #8, #8
 80181b0:	4770      	bx	lr

080181b2 <_ZNK8touchgfx8LCD24bpp12getBlueColorENS_9colortypeE>:
 80181b2:	b2c8      	uxtb	r0, r1
 80181b4:	4770      	bx	lr

080181b6 <_ZN8touchgfx8LCD24bpp4initEv>:
 80181b6:	4770      	bx	lr

080181b8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80181b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181bc:	b085      	sub	sp, #20
 80181be:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80181c0:	9203      	str	r2, [sp, #12]
 80181c2:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 80181c6:	6878      	ldr	r0, [r7, #4]
 80181c8:	9201      	str	r2, [sp, #4]
 80181ca:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80181cc:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 80181d0:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 80181d4:	fa1f fc84 	uxth.w	ip, r4
 80181d8:	43e4      	mvns	r4, r4
 80181da:	9100      	str	r1, [sp, #0]
 80181dc:	b2e4      	uxtb	r4, r4
 80181de:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80181e2:	fb00 2505 	mla	r5, r0, r5, r2
 80181e6:	683a      	ldr	r2, [r7, #0]
 80181e8:	6877      	ldr	r7, [r6, #4]
 80181ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80181ee:	3704      	adds	r7, #4
 80181f0:	4415      	add	r5, r2
 80181f2:	6832      	ldr	r2, [r6, #0]
 80181f4:	9202      	str	r2, [sp, #8]
 80181f6:	9a00      	ldr	r2, [sp, #0]
 80181f8:	2a00      	cmp	r2, #0
 80181fa:	dc03      	bgt.n	8018204 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 80181fc:	9a03      	ldr	r2, [sp, #12]
 80181fe:	2a00      	cmp	r2, #0
 8018200:	f340 8116 	ble.w	8018430 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8018204:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018206:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801820a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801820c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018210:	2b00      	cmp	r3, #0
 8018212:	dd0f      	ble.n	8018234 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8018214:	1406      	asrs	r6, r0, #16
 8018216:	d406      	bmi.n	8018226 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8018218:	4546      	cmp	r6, r8
 801821a:	da04      	bge.n	8018226 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801821c:	1416      	asrs	r6, r2, #16
 801821e:	d402      	bmi.n	8018226 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8018220:	9901      	ldr	r1, [sp, #4]
 8018222:	428e      	cmp	r6, r1
 8018224:	db07      	blt.n	8018236 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8018226:	9911      	ldr	r1, [sp, #68]	; 0x44
 8018228:	3b01      	subs	r3, #1
 801822a:	3503      	adds	r5, #3
 801822c:	4408      	add	r0, r1
 801822e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018230:	440a      	add	r2, r1
 8018232:	e7ed      	b.n	8018210 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8018234:	d011      	beq.n	801825a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8018236:	1e5e      	subs	r6, r3, #1
 8018238:	9911      	ldr	r1, [sp, #68]	; 0x44
 801823a:	fb01 0e06 	mla	lr, r1, r6, r0
 801823e:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8018242:	d548      	bpl.n	80182d6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8018244:	4699      	mov	r9, r3
 8018246:	462e      	mov	r6, r5
 8018248:	f1b9 0f00 	cmp.w	r9, #0
 801824c:	f300 809e 	bgt.w	801838c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 8018250:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018254:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018258:	441d      	add	r5, r3
 801825a:	9b00      	ldr	r3, [sp, #0]
 801825c:	2b00      	cmp	r3, #0
 801825e:	f340 80e7 	ble.w	8018430 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8018262:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018268:	ee30 0a04 	vadd.f32	s0, s0, s8
 801826c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018270:	eef0 6a62 	vmov.f32	s13, s5
 8018274:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018278:	ee31 1a05 	vadd.f32	s2, s2, s10
 801827c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018280:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8018284:	eef0 6a43 	vmov.f32	s13, s6
 8018288:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801828c:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8018290:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018294:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018298:	ee77 2a62 	vsub.f32	s5, s14, s5
 801829c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80182a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80182a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80182a8:	ee12 2a90 	vmov	r2, s5
 80182ac:	eef0 2a47 	vmov.f32	s5, s14
 80182b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80182b4:	ee13 2a10 	vmov	r2, s6
 80182b8:	9311      	str	r3, [sp, #68]	; 0x44
 80182ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80182bc:	eeb0 3a67 	vmov.f32	s6, s15
 80182c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80182c4:	9312      	str	r3, [sp, #72]	; 0x48
 80182c6:	9b00      	ldr	r3, [sp, #0]
 80182c8:	9a03      	ldr	r2, [sp, #12]
 80182ca:	3b01      	subs	r3, #1
 80182cc:	9300      	str	r3, [sp, #0]
 80182ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80182d0:	bf08      	it	eq
 80182d2:	4613      	moveq	r3, r2
 80182d4:	e78f      	b.n	80181f6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 80182d6:	45c6      	cmp	lr, r8
 80182d8:	dab4      	bge.n	8018244 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 80182da:	9912      	ldr	r1, [sp, #72]	; 0x48
 80182dc:	fb01 2606 	mla	r6, r1, r6, r2
 80182e0:	1436      	asrs	r6, r6, #16
 80182e2:	d4af      	bmi.n	8018244 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 80182e4:	9901      	ldr	r1, [sp, #4]
 80182e6:	428e      	cmp	r6, r1
 80182e8:	daac      	bge.n	8018244 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 80182ea:	1cee      	adds	r6, r5, #3
 80182ec:	4699      	mov	r9, r3
 80182ee:	f1b9 0f00 	cmp.w	r9, #0
 80182f2:	f106 0603 	add.w	r6, r6, #3
 80182f6:	ddab      	ble.n	8018250 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80182f8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80182fc:	9902      	ldr	r1, [sp, #8]
 80182fe:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8018302:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8018306:	fb08 1e0e 	mla	lr, r8, lr, r1
 801830a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801830c:	fb1b fb04 	smulbb	fp, fp, r4
 8018310:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8018314:	f81e e00a 	ldrb.w	lr, [lr, sl]
 8018318:	4408      	add	r0, r1
 801831a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801831c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8018320:	440a      	add	r2, r1
 8018322:	eb07 0a0e 	add.w	sl, r7, lr
 8018326:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801832a:	fb0e be0c 	mla	lr, lr, ip, fp
 801832e:	fa1f fe8e 	uxth.w	lr, lr
 8018332:	f10e 0b01 	add.w	fp, lr, #1
 8018336:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801833a:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801833e:	fb1b fb04 	smulbb	fp, fp, r4
 8018342:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8018346:	f806 ec06 	strb.w	lr, [r6, #-6]
 801834a:	f89a e001 	ldrb.w	lr, [sl, #1]
 801834e:	fb0e be0c 	mla	lr, lr, ip, fp
 8018352:	fa1f fe8e 	uxth.w	lr, lr
 8018356:	f10e 0b01 	add.w	fp, lr, #1
 801835a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801835e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8018362:	f806 ec05 	strb.w	lr, [r6, #-5]
 8018366:	f89a e002 	ldrb.w	lr, [sl, #2]
 801836a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801836e:	fb1a fa04 	smulbb	sl, sl, r4
 8018372:	fb0e ae0c 	mla	lr, lr, ip, sl
 8018376:	fa1f fe8e 	uxth.w	lr, lr
 801837a:	f10e 0a01 	add.w	sl, lr, #1
 801837e:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8018382:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8018386:	f806 ec04 	strb.w	lr, [r6, #-4]
 801838a:	e7b0      	b.n	80182ee <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 801838c:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8018390:	d446      	bmi.n	8018420 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8018392:	45c2      	cmp	sl, r8
 8018394:	da44      	bge.n	8018420 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 8018396:	ea5f 4e22 	movs.w	lr, r2, asr #16
 801839a:	d441      	bmi.n	8018420 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801839c:	9901      	ldr	r1, [sp, #4]
 801839e:	458e      	cmp	lr, r1
 80183a0:	da3e      	bge.n	8018420 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 80183a2:	9902      	ldr	r1, [sp, #8]
 80183a4:	f896 b000 	ldrb.w	fp, [r6]
 80183a8:	fb08 1e0e 	mla	lr, r8, lr, r1
 80183ac:	fb1b fb04 	smulbb	fp, fp, r4
 80183b0:	f81e e00a 	ldrb.w	lr, [lr, sl]
 80183b4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80183b8:	eb07 0a0e 	add.w	sl, r7, lr
 80183bc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80183c0:	fb0e be0c 	mla	lr, lr, ip, fp
 80183c4:	fa1f fe8e 	uxth.w	lr, lr
 80183c8:	f10e 0b01 	add.w	fp, lr, #1
 80183cc:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80183d0:	f896 b001 	ldrb.w	fp, [r6, #1]
 80183d4:	fb1b fb04 	smulbb	fp, fp, r4
 80183d8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80183dc:	f886 e000 	strb.w	lr, [r6]
 80183e0:	f89a e001 	ldrb.w	lr, [sl, #1]
 80183e4:	fb0e be0c 	mla	lr, lr, ip, fp
 80183e8:	fa1f fe8e 	uxth.w	lr, lr
 80183ec:	f10e 0b01 	add.w	fp, lr, #1
 80183f0:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80183f4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80183f8:	f886 e001 	strb.w	lr, [r6, #1]
 80183fc:	f89a e002 	ldrb.w	lr, [sl, #2]
 8018400:	f896 a002 	ldrb.w	sl, [r6, #2]
 8018404:	fb1a fa04 	smulbb	sl, sl, r4
 8018408:	fb0e ae0c 	mla	lr, lr, ip, sl
 801840c:	fa1f fe8e 	uxth.w	lr, lr
 8018410:	f10e 0a01 	add.w	sl, lr, #1
 8018414:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8018418:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801841c:	f886 e002 	strb.w	lr, [r6, #2]
 8018420:	9911      	ldr	r1, [sp, #68]	; 0x44
 8018422:	3603      	adds	r6, #3
 8018424:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8018428:	4408      	add	r0, r1
 801842a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801842c:	440a      	add	r2, r1
 801842e:	e70b      	b.n	8018248 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8018430:	b005      	add	sp, #20
 8018432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018436 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8018436:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801843a:	b085      	sub	sp, #20
 801843c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018440:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8018442:	9203      	str	r2, [sp, #12]
 8018444:	6870      	ldr	r0, [r6, #4]
 8018446:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8018448:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801844c:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8018450:	9101      	str	r1, [sp, #4]
 8018452:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8018456:	e9dd c711 	ldrd	ip, r7, [sp, #68]	; 0x44
 801845a:	fb00 2404 	mla	r4, r0, r4, r2
 801845e:	6832      	ldr	r2, [r6, #0]
 8018460:	686e      	ldr	r6, [r5, #4]
 8018462:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018466:	3604      	adds	r6, #4
 8018468:	4414      	add	r4, r2
 801846a:	682a      	ldr	r2, [r5, #0]
 801846c:	9202      	str	r2, [sp, #8]
 801846e:	9a01      	ldr	r2, [sp, #4]
 8018470:	2a00      	cmp	r2, #0
 8018472:	dc03      	bgt.n	801847c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 8018474:	9a03      	ldr	r2, [sp, #12]
 8018476:	2a00      	cmp	r2, #0
 8018478:	f340 80b2 	ble.w	80185e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801847c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801847e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018482:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018484:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018488:	2b00      	cmp	r3, #0
 801848a:	dd0c      	ble.n	80184a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801848c:	1405      	asrs	r5, r0, #16
 801848e:	d405      	bmi.n	801849c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8018490:	4575      	cmp	r5, lr
 8018492:	da03      	bge.n	801849c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8018494:	1415      	asrs	r5, r2, #16
 8018496:	d401      	bmi.n	801849c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8018498:	4545      	cmp	r5, r8
 801849a:	db05      	blt.n	80184a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801849c:	4460      	add	r0, ip
 801849e:	443a      	add	r2, r7
 80184a0:	3b01      	subs	r3, #1
 80184a2:	3403      	adds	r4, #3
 80184a4:	e7f0      	b.n	8018488 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 80184a6:	d03d      	beq.n	8018524 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 80184a8:	1e5d      	subs	r5, r3, #1
 80184aa:	fb0c 0905 	mla	r9, ip, r5, r0
 80184ae:	ea5f 4929 	movs.w	r9, r9, asr #16
 80184b2:	d42c      	bmi.n	801850e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80184b4:	45f1      	cmp	r9, lr
 80184b6:	da2a      	bge.n	801850e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80184b8:	fb07 2505 	mla	r5, r7, r5, r2
 80184bc:	142d      	asrs	r5, r5, #16
 80184be:	d426      	bmi.n	801850e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80184c0:	4545      	cmp	r5, r8
 80184c2:	da24      	bge.n	801850e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 80184c4:	1ce5      	adds	r5, r4, #3
 80184c6:	469a      	mov	sl, r3
 80184c8:	f1ba 0f00 	cmp.w	sl, #0
 80184cc:	f105 0503 	add.w	r5, r5, #3
 80184d0:	dd23      	ble.n	801851a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80184d2:	ea4f 4922 	mov.w	r9, r2, asr #16
 80184d6:	9902      	ldr	r1, [sp, #8]
 80184d8:	ea4f 4b20 	mov.w	fp, r0, asr #16
 80184dc:	443a      	add	r2, r7
 80184de:	fb0e 1909 	mla	r9, lr, r9, r1
 80184e2:	4460      	add	r0, ip
 80184e4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80184e8:	f819 900b 	ldrb.w	r9, [r9, fp]
 80184ec:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80184f0:	eb06 0b09 	add.w	fp, r6, r9
 80184f4:	f816 9009 	ldrb.w	r9, [r6, r9]
 80184f8:	f805 9c06 	strb.w	r9, [r5, #-6]
 80184fc:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8018500:	f805 9c05 	strb.w	r9, [r5, #-5]
 8018504:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8018508:	f805 9c04 	strb.w	r9, [r5, #-4]
 801850c:	e7dc      	b.n	80184c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801850e:	2500      	movs	r5, #0
 8018510:	eba3 0905 	sub.w	r9, r3, r5
 8018514:	f1b9 0f00 	cmp.w	r9, #0
 8018518:	dc3c      	bgt.n	8018594 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15e>
 801851a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801851e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018522:	441c      	add	r4, r3
 8018524:	9b01      	ldr	r3, [sp, #4]
 8018526:	2b00      	cmp	r3, #0
 8018528:	dd5a      	ble.n	80185e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 801852a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801852e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018530:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018534:	eeb0 6a62 	vmov.f32	s12, s5
 8018538:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801853c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018540:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018544:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8018548:	eeb0 6a43 	vmov.f32	s12, s6
 801854c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018550:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018554:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018558:	ee61 7a27 	vmul.f32	s15, s2, s15
 801855c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018560:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018564:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018568:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801856c:	ee12 2a90 	vmov	r2, s5
 8018570:	eef0 2a47 	vmov.f32	s5, s14
 8018574:	fb92 fcf3 	sdiv	ip, r2, r3
 8018578:	ee13 2a10 	vmov	r2, s6
 801857c:	eeb0 3a67 	vmov.f32	s6, s15
 8018580:	fb92 f7f3 	sdiv	r7, r2, r3
 8018584:	9b01      	ldr	r3, [sp, #4]
 8018586:	9a03      	ldr	r2, [sp, #12]
 8018588:	3b01      	subs	r3, #1
 801858a:	9301      	str	r3, [sp, #4]
 801858c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801858e:	bf08      	it	eq
 8018590:	4613      	moveq	r3, r2
 8018592:	e76c      	b.n	801846e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 8018594:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8018598:	d41e      	bmi.n	80185d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801859a:	45f2      	cmp	sl, lr
 801859c:	da1c      	bge.n	80185d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 801859e:	ea5f 4922 	movs.w	r9, r2, asr #16
 80185a2:	d419      	bmi.n	80185d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 80185a4:	45c1      	cmp	r9, r8
 80185a6:	da17      	bge.n	80185d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a2>
 80185a8:	9902      	ldr	r1, [sp, #8]
 80185aa:	fb0e 1909 	mla	r9, lr, r9, r1
 80185ae:	f819 900a 	ldrb.w	r9, [r9, sl]
 80185b2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80185b6:	f816 b009 	ldrb.w	fp, [r6, r9]
 80185ba:	eb06 0a09 	add.w	sl, r6, r9
 80185be:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 80185c2:	f804 b009 	strb.w	fp, [r4, r9]
 80185c6:	44a1      	add	r9, r4
 80185c8:	f89a b001 	ldrb.w	fp, [sl, #1]
 80185cc:	f889 b001 	strb.w	fp, [r9, #1]
 80185d0:	f89a a002 	ldrb.w	sl, [sl, #2]
 80185d4:	f889 a002 	strb.w	sl, [r9, #2]
 80185d8:	4460      	add	r0, ip
 80185da:	443a      	add	r2, r7
 80185dc:	3501      	adds	r5, #1
 80185de:	e797      	b.n	8018510 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 80185e0:	b005      	add	sp, #20
 80185e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080185e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80185e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185ea:	b087      	sub	sp, #28
 80185ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80185f0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80185f2:	9204      	str	r2, [sp, #16]
 80185f4:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 80185f8:	6870      	ldr	r0, [r6, #4]
 80185fa:	9205      	str	r2, [sp, #20]
 80185fc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80185fe:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 8018602:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 8018606:	9101      	str	r1, [sp, #4]
 8018608:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801860c:	fb00 2505 	mla	r5, r0, r5, r2
 8018610:	6832      	ldr	r2, [r6, #0]
 8018612:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018616:	4415      	add	r5, r2
 8018618:	6822      	ldr	r2, [r4, #0]
 801861a:	9202      	str	r2, [sp, #8]
 801861c:	6862      	ldr	r2, [r4, #4]
 801861e:	3204      	adds	r2, #4
 8018620:	9203      	str	r2, [sp, #12]
 8018622:	9a01      	ldr	r2, [sp, #4]
 8018624:	2a00      	cmp	r2, #0
 8018626:	dc03      	bgt.n	8018630 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 8018628:	9a04      	ldr	r2, [sp, #16]
 801862a:	2a00      	cmp	r2, #0
 801862c:	f340 8124 	ble.w	8018878 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8018630:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018632:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8018636:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018638:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801863c:	2b00      	cmp	r3, #0
 801863e:	dd0e      	ble.n	801865e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8018640:	1422      	asrs	r2, r4, #16
 8018642:	d405      	bmi.n	8018650 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8018644:	4572      	cmp	r2, lr
 8018646:	da03      	bge.n	8018650 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8018648:	1402      	asrs	r2, r0, #16
 801864a:	d401      	bmi.n	8018650 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801864c:	4542      	cmp	r2, r8
 801864e:	db07      	blt.n	8018660 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8018650:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018652:	3b01      	subs	r3, #1
 8018654:	3503      	adds	r5, #3
 8018656:	4414      	add	r4, r2
 8018658:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801865a:	4410      	add	r0, r2
 801865c:	e7ee      	b.n	801863c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801865e:	d010      	beq.n	8018682 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8018660:	1e5a      	subs	r2, r3, #1
 8018662:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8018664:	fb06 4602 	mla	r6, r6, r2, r4
 8018668:	1436      	asrs	r6, r6, #16
 801866a:	d546      	bpl.n	80186fa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801866c:	4699      	mov	r9, r3
 801866e:	462f      	mov	r7, r5
 8018670:	f1b9 0f00 	cmp.w	r9, #0
 8018674:	f300 80a5 	bgt.w	80187c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 8018678:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801867c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018680:	441d      	add	r5, r3
 8018682:	9b01      	ldr	r3, [sp, #4]
 8018684:	2b00      	cmp	r3, #0
 8018686:	f340 80f7 	ble.w	8018878 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801868a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801868e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018690:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018694:	eeb0 6a62 	vmov.f32	s12, s5
 8018698:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801869c:	ee31 1a05 	vadd.f32	s2, s2, s10
 80186a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80186a4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80186a8:	eeb0 6a43 	vmov.f32	s12, s6
 80186ac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80186b0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80186b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80186b8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80186bc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80186c0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80186c4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80186c8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80186cc:	ee12 2a90 	vmov	r2, s5
 80186d0:	eef0 2a47 	vmov.f32	s5, s14
 80186d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80186d8:	ee13 2a10 	vmov	r2, s6
 80186dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80186de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80186e0:	eeb0 3a67 	vmov.f32	s6, s15
 80186e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80186e8:	9314      	str	r3, [sp, #80]	; 0x50
 80186ea:	9b01      	ldr	r3, [sp, #4]
 80186ec:	9a04      	ldr	r2, [sp, #16]
 80186ee:	3b01      	subs	r3, #1
 80186f0:	9301      	str	r3, [sp, #4]
 80186f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80186f4:	bf08      	it	eq
 80186f6:	4613      	moveq	r3, r2
 80186f8:	e793      	b.n	8018622 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 80186fa:	4576      	cmp	r6, lr
 80186fc:	dab6      	bge.n	801866c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 80186fe:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8018700:	fb06 0202 	mla	r2, r6, r2, r0
 8018704:	1412      	asrs	r2, r2, #16
 8018706:	d4b1      	bmi.n	801866c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8018708:	4542      	cmp	r2, r8
 801870a:	daaf      	bge.n	801866c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801870c:	1cef      	adds	r7, r5, #3
 801870e:	4699      	mov	r9, r3
 8018710:	f1b9 0f00 	cmp.w	r9, #0
 8018714:	ddb0      	ble.n	8018678 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8018716:	9902      	ldr	r1, [sp, #8]
 8018718:	1402      	asrs	r2, r0, #16
 801871a:	1426      	asrs	r6, r4, #16
 801871c:	fb0e 1202 	mla	r2, lr, r2, r1
 8018720:	9903      	ldr	r1, [sp, #12]
 8018722:	5d92      	ldrb	r2, [r2, r6]
 8018724:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8018728:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 801872c:	d041      	beq.n	80187b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 801872e:	9a05      	ldr	r2, [sp, #20]
 8018730:	fa5f fb86 	uxtb.w	fp, r6
 8018734:	fb02 fc0c 	mul.w	ip, r2, ip
 8018738:	f10c 0201 	add.w	r2, ip, #1
 801873c:	eb02 222c 	add.w	r2, r2, ip, asr #8
 8018740:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 8018744:	1212      	asrs	r2, r2, #8
 8018746:	fa1f fa82 	uxth.w	sl, r2
 801874a:	43d2      	mvns	r2, r2
 801874c:	fb1b fb0a 	smulbb	fp, fp, sl
 8018750:	b2d2      	uxtb	r2, r2
 8018752:	fb0c bc02 	mla	ip, ip, r2, fp
 8018756:	fa1f fc8c 	uxth.w	ip, ip
 801875a:	f10c 0b01 	add.w	fp, ip, #1
 801875e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8018762:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8018766:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801876a:	fb1b fb0a 	smulbb	fp, fp, sl
 801876e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8018772:	fb16 fa0a 	smulbb	sl, r6, sl
 8018776:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801877a:	f807 cc03 	strb.w	ip, [r7, #-3]
 801877e:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 8018782:	fb06 aa02 	mla	sl, r6, r2, sl
 8018786:	fb0c bc02 	mla	ip, ip, r2, fp
 801878a:	fa1f fa8a 	uxth.w	sl, sl
 801878e:	fa1f fc8c 	uxth.w	ip, ip
 8018792:	f10a 0601 	add.w	r6, sl, #1
 8018796:	f10c 0b01 	add.w	fp, ip, #1
 801879a:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801879e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80187a2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80187a6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80187aa:	f807 ac01 	strb.w	sl, [r7, #-1]
 80187ae:	f807 cc02 	strb.w	ip, [r7, #-2]
 80187b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80187b4:	3703      	adds	r7, #3
 80187b6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80187ba:	4414      	add	r4, r2
 80187bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80187be:	4410      	add	r0, r2
 80187c0:	e7a6      	b.n	8018710 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 80187c2:	1426      	asrs	r6, r4, #16
 80187c4:	d450      	bmi.n	8018868 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80187c6:	4576      	cmp	r6, lr
 80187c8:	da4e      	bge.n	8018868 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80187ca:	1402      	asrs	r2, r0, #16
 80187cc:	d44c      	bmi.n	8018868 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80187ce:	4542      	cmp	r2, r8
 80187d0:	da4a      	bge.n	8018868 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80187d2:	9902      	ldr	r1, [sp, #8]
 80187d4:	fb0e 1202 	mla	r2, lr, r2, r1
 80187d8:	9903      	ldr	r1, [sp, #12]
 80187da:	5d92      	ldrb	r2, [r2, r6]
 80187dc:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80187e0:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 80187e4:	d040      	beq.n	8018868 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80187e6:	9a05      	ldr	r2, [sp, #20]
 80187e8:	fa5f fb86 	uxtb.w	fp, r6
 80187ec:	fb02 fc0c 	mul.w	ip, r2, ip
 80187f0:	f10c 0201 	add.w	r2, ip, #1
 80187f4:	eb02 222c 	add.w	r2, r2, ip, asr #8
 80187f8:	f897 c000 	ldrb.w	ip, [r7]
 80187fc:	1212      	asrs	r2, r2, #8
 80187fe:	fa1f fa82 	uxth.w	sl, r2
 8018802:	43d2      	mvns	r2, r2
 8018804:	fb1b fb0a 	smulbb	fp, fp, sl
 8018808:	b2d2      	uxtb	r2, r2
 801880a:	fb0c bc02 	mla	ip, ip, r2, fp
 801880e:	fa1f fc8c 	uxth.w	ip, ip
 8018812:	f10c 0b01 	add.w	fp, ip, #1
 8018816:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801881a:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801881e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8018822:	fb1b fb0a 	smulbb	fp, fp, sl
 8018826:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801882a:	fb16 fa0a 	smulbb	sl, r6, sl
 801882e:	78be      	ldrb	r6, [r7, #2]
 8018830:	f887 c000 	strb.w	ip, [r7]
 8018834:	f897 c001 	ldrb.w	ip, [r7, #1]
 8018838:	fb06 aa02 	mla	sl, r6, r2, sl
 801883c:	fb0c bc02 	mla	ip, ip, r2, fp
 8018840:	fa1f fa8a 	uxth.w	sl, sl
 8018844:	fa1f fc8c 	uxth.w	ip, ip
 8018848:	f10a 0601 	add.w	r6, sl, #1
 801884c:	f10c 0b01 	add.w	fp, ip, #1
 8018850:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8018854:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8018858:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801885c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8018860:	f887 a002 	strb.w	sl, [r7, #2]
 8018864:	f887 c001 	strb.w	ip, [r7, #1]
 8018868:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801886a:	3703      	adds	r7, #3
 801886c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8018870:	4414      	add	r4, r2
 8018872:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018874:	4410      	add	r0, r2
 8018876:	e6fb      	b.n	8018670 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8018878:	b007      	add	sp, #28
 801887a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801887e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801887e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018882:	b085      	sub	sp, #20
 8018884:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018888:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801888a:	9203      	str	r2, [sp, #12]
 801888c:	6870      	ldr	r0, [r6, #4]
 801888e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8018890:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8018894:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8018898:	9100      	str	r1, [sp, #0]
 801889a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801889e:	fb00 2404 	mla	r4, r0, r4, r2
 80188a2:	6832      	ldr	r2, [r6, #0]
 80188a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80188a8:	4414      	add	r4, r2
 80188aa:	682a      	ldr	r2, [r5, #0]
 80188ac:	9201      	str	r2, [sp, #4]
 80188ae:	686a      	ldr	r2, [r5, #4]
 80188b0:	3204      	adds	r2, #4
 80188b2:	9202      	str	r2, [sp, #8]
 80188b4:	9a00      	ldr	r2, [sp, #0]
 80188b6:	2a00      	cmp	r2, #0
 80188b8:	dc03      	bgt.n	80188c2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 80188ba:	9a03      	ldr	r2, [sp, #12]
 80188bc:	2a00      	cmp	r2, #0
 80188be:	f340 8131 	ble.w	8018b24 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 80188c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80188c4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80188c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80188ca:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	dd0e      	ble.n	80188f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80188d2:	1405      	asrs	r5, r0, #16
 80188d4:	d405      	bmi.n	80188e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80188d6:	4575      	cmp	r5, lr
 80188d8:	da03      	bge.n	80188e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80188da:	1415      	asrs	r5, r2, #16
 80188dc:	d401      	bmi.n	80188e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 80188de:	4545      	cmp	r5, r8
 80188e0:	db07      	blt.n	80188f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 80188e2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80188e4:	3b01      	subs	r3, #1
 80188e6:	3403      	adds	r4, #3
 80188e8:	4428      	add	r0, r5
 80188ea:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80188ec:	442a      	add	r2, r5
 80188ee:	e7ee      	b.n	80188ce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 80188f0:	d06f      	beq.n	80189d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 80188f2:	1e5d      	subs	r5, r3, #1
 80188f4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80188f6:	fb06 0605 	mla	r6, r6, r5, r0
 80188fa:	1436      	asrs	r6, r6, #16
 80188fc:	d460      	bmi.n	80189c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 80188fe:	4576      	cmp	r6, lr
 8018900:	da5e      	bge.n	80189c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8018902:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8018904:	fb06 2505 	mla	r5, r6, r5, r2
 8018908:	142d      	asrs	r5, r5, #16
 801890a:	d459      	bmi.n	80189c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801890c:	4545      	cmp	r5, r8
 801890e:	da57      	bge.n	80189c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8018910:	1ce5      	adds	r5, r4, #3
 8018912:	469a      	mov	sl, r3
 8018914:	f1ba 0f00 	cmp.w	sl, #0
 8018918:	dd56      	ble.n	80189c8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14a>
 801891a:	9901      	ldr	r1, [sp, #4]
 801891c:	1416      	asrs	r6, r2, #16
 801891e:	1407      	asrs	r7, r0, #16
 8018920:	fb0e 1606 	mla	r6, lr, r6, r1
 8018924:	9902      	ldr	r1, [sp, #8]
 8018926:	5df6      	ldrb	r6, [r6, r7]
 8018928:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801892c:	0e37      	lsrs	r7, r6, #24
 801892e:	2fff      	cmp	r7, #255	; 0xff
 8018930:	f000 80ef 	beq.w	8018b12 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x294>
 8018934:	fa5f fc87 	uxtb.w	ip, r7
 8018938:	b3d7      	cbz	r7, 80189b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 801893a:	fa1f f78c 	uxth.w	r7, ip
 801893e:	ea6f 0c0c 	mvn.w	ip, ip
 8018942:	fa5f fb86 	uxtb.w	fp, r6
 8018946:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801894a:	fa5f fc8c 	uxtb.w	ip, ip
 801894e:	fb1b fb07 	smulbb	fp, fp, r7
 8018952:	fb09 b90c 	mla	r9, r9, ip, fp
 8018956:	fa1f f989 	uxth.w	r9, r9
 801895a:	f109 0b01 	add.w	fp, r9, #1
 801895e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018962:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8018966:	fb1b fb0c 	smulbb	fp, fp, ip
 801896a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801896e:	f805 9c03 	strb.w	r9, [r5, #-3]
 8018972:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8018976:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801897a:	fb09 b907 	mla	r9, r9, r7, fp
 801897e:	fa1f f989 	uxth.w	r9, r9
 8018982:	f109 0b01 	add.w	fp, r9, #1
 8018986:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801898a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801898e:	f805 9c02 	strb.w	r9, [r5, #-2]
 8018992:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8018996:	fb19 fc0c 	smulbb	ip, r9, ip
 801899a:	fb06 c607 	mla	r6, r6, r7, ip
 801899e:	b2b6      	uxth	r6, r6
 80189a0:	f106 0c01 	add.w	ip, r6, #1
 80189a4:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 80189a8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80189ac:	f805 cc01 	strb.w	ip, [r5, #-1]
 80189b0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80189b2:	3503      	adds	r5, #3
 80189b4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80189b8:	4408      	add	r0, r1
 80189ba:	9912      	ldr	r1, [sp, #72]	; 0x48
 80189bc:	440a      	add	r2, r1
 80189be:	e7a9      	b.n	8018914 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 80189c0:	2600      	movs	r6, #0
 80189c2:	1b9d      	subs	r5, r3, r6
 80189c4:	2d00      	cmp	r5, #0
 80189c6:	dc40      	bgt.n	8018a4a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1cc>
 80189c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80189cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80189d0:	441c      	add	r4, r3
 80189d2:	9b00      	ldr	r3, [sp, #0]
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	f340 80a5 	ble.w	8018b24 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 80189da:	ee30 0a04 	vadd.f32	s0, s0, s8
 80189de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80189e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80189e4:	eeb0 6a62 	vmov.f32	s12, s5
 80189e8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80189ec:	ee31 1a05 	vadd.f32	s2, s2, s10
 80189f0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80189f4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80189f8:	eeb0 6a43 	vmov.f32	s12, s6
 80189fc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018a00:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018a04:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018a08:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018a0c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018a10:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018a14:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018a18:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018a1c:	ee12 2a90 	vmov	r2, s5
 8018a20:	eef0 2a47 	vmov.f32	s5, s14
 8018a24:	fb92 f3f3 	sdiv	r3, r2, r3
 8018a28:	ee13 2a10 	vmov	r2, s6
 8018a2c:	9311      	str	r3, [sp, #68]	; 0x44
 8018a2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018a30:	eeb0 3a67 	vmov.f32	s6, s15
 8018a34:	fb92 f3f3 	sdiv	r3, r2, r3
 8018a38:	9312      	str	r3, [sp, #72]	; 0x48
 8018a3a:	9b00      	ldr	r3, [sp, #0]
 8018a3c:	9a03      	ldr	r2, [sp, #12]
 8018a3e:	3b01      	subs	r3, #1
 8018a40:	9300      	str	r3, [sp, #0]
 8018a42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018a44:	bf08      	it	eq
 8018a46:	4613      	moveq	r3, r2
 8018a48:	e734      	b.n	80188b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 8018a4a:	1407      	asrs	r7, r0, #16
 8018a4c:	d450      	bmi.n	8018af0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8018a4e:	4577      	cmp	r7, lr
 8018a50:	da4e      	bge.n	8018af0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8018a52:	1415      	asrs	r5, r2, #16
 8018a54:	d44c      	bmi.n	8018af0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8018a56:	4545      	cmp	r5, r8
 8018a58:	da4a      	bge.n	8018af0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8018a5a:	9901      	ldr	r1, [sp, #4]
 8018a5c:	fb0e 1505 	mla	r5, lr, r5, r1
 8018a60:	9902      	ldr	r1, [sp, #8]
 8018a62:	5ded      	ldrb	r5, [r5, r7]
 8018a64:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8018a68:	0e2f      	lsrs	r7, r5, #24
 8018a6a:	2fff      	cmp	r7, #255	; 0xff
 8018a6c:	d046      	beq.n	8018afc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 8018a6e:	fa5f f987 	uxtb.w	r9, r7
 8018a72:	b3ef      	cbz	r7, 8018af0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8018a74:	fa1f fc89 	uxth.w	ip, r9
 8018a78:	ea6f 0909 	mvn.w	r9, r9
 8018a7c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8018a80:	fa5f fb85 	uxtb.w	fp, r5
 8018a84:	f814 a007 	ldrb.w	sl, [r4, r7]
 8018a88:	fa5f f989 	uxtb.w	r9, r9
 8018a8c:	fb1b fb0c 	smulbb	fp, fp, ip
 8018a90:	fb0a ba09 	mla	sl, sl, r9, fp
 8018a94:	fa1f fa8a 	uxth.w	sl, sl
 8018a98:	f10a 0b01 	add.w	fp, sl, #1
 8018a9c:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8018aa0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018aa4:	f804 a007 	strb.w	sl, [r4, r7]
 8018aa8:	4427      	add	r7, r4
 8018aaa:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8018aae:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8018ab2:	f897 b001 	ldrb.w	fp, [r7, #1]
 8018ab6:	fb1b fb09 	smulbb	fp, fp, r9
 8018aba:	fb0a ba0c 	mla	sl, sl, ip, fp
 8018abe:	fa1f fa8a 	uxth.w	sl, sl
 8018ac2:	f10a 0b01 	add.w	fp, sl, #1
 8018ac6:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8018aca:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018ace:	f887 a001 	strb.w	sl, [r7, #1]
 8018ad2:	f897 a002 	ldrb.w	sl, [r7, #2]
 8018ad6:	fb1a f909 	smulbb	r9, sl, r9
 8018ada:	fb05 950c 	mla	r5, r5, ip, r9
 8018ade:	b2ad      	uxth	r5, r5
 8018ae0:	f105 0901 	add.w	r9, r5, #1
 8018ae4:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8018ae8:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018aec:	f887 9002 	strb.w	r9, [r7, #2]
 8018af0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8018af2:	3601      	adds	r6, #1
 8018af4:	4408      	add	r0, r1
 8018af6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018af8:	440a      	add	r2, r1
 8018afa:	e762      	b.n	80189c2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 8018afc:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8018b00:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 8018b04:	55e5      	strb	r5, [r4, r7]
 8018b06:	4427      	add	r7, r4
 8018b08:	0c2d      	lsrs	r5, r5, #16
 8018b0a:	f887 c001 	strb.w	ip, [r7, #1]
 8018b0e:	70bd      	strb	r5, [r7, #2]
 8018b10:	e7ee      	b.n	8018af0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 8018b12:	0a37      	lsrs	r7, r6, #8
 8018b14:	f805 6c03 	strb.w	r6, [r5, #-3]
 8018b18:	0c36      	lsrs	r6, r6, #16
 8018b1a:	f805 7c02 	strb.w	r7, [r5, #-2]
 8018b1e:	f805 6c01 	strb.w	r6, [r5, #-1]
 8018b22:	e745      	b.n	80189b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8018b24:	b005      	add	sp, #20
 8018b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018b2a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8018b2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b2e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018b30:	9201      	str	r2, [sp, #4]
 8018b32:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8018b36:	6870      	ldr	r0, [r6, #4]
 8018b38:	9200      	str	r2, [sp, #0]
 8018b3a:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8018b3e:	f9bd e050 	ldrsh.w	lr, [sp, #80]	; 0x50
 8018b42:	fa1f fc85 	uxth.w	ip, r5
 8018b46:	43ed      	mvns	r5, r5
 8018b48:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8018b4c:	b2ed      	uxtb	r5, r5
 8018b4e:	fb00 2404 	mla	r4, r0, r4, r2
 8018b52:	6832      	ldr	r2, [r6, #0]
 8018b54:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018b58:	4414      	add	r4, r2
 8018b5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018b5c:	f8d2 8000 	ldr.w	r8, [r2]
 8018b60:	2900      	cmp	r1, #0
 8018b62:	dc03      	bgt.n	8018b6c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 8018b64:	9a01      	ldr	r2, [sp, #4]
 8018b66:	2a00      	cmp	r2, #0
 8018b68:	f340 8104 	ble.w	8018d74 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8018b6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018b6e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018b72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018b74:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	dd0f      	ble.n	8018b9c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8018b7c:	1406      	asrs	r6, r0, #16
 8018b7e:	d406      	bmi.n	8018b8e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8018b80:	4576      	cmp	r6, lr
 8018b82:	da04      	bge.n	8018b8e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8018b84:	1416      	asrs	r6, r2, #16
 8018b86:	d402      	bmi.n	8018b8e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8018b88:	9f00      	ldr	r7, [sp, #0]
 8018b8a:	42be      	cmp	r6, r7
 8018b8c:	db07      	blt.n	8018b9e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8018b8e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8018b90:	3b01      	subs	r3, #1
 8018b92:	3403      	adds	r4, #3
 8018b94:	4430      	add	r0, r6
 8018b96:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8018b98:	4432      	add	r2, r6
 8018b9a:	e7ed      	b.n	8018b78 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 8018b9c:	d05f      	beq.n	8018c5e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x134>
 8018b9e:	1e5e      	subs	r6, r3, #1
 8018ba0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8018ba2:	fb07 0706 	mla	r7, r7, r6, r0
 8018ba6:	143f      	asrs	r7, r7, #16
 8018ba8:	d450      	bmi.n	8018c4c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8018baa:	4577      	cmp	r7, lr
 8018bac:	da4e      	bge.n	8018c4c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8018bae:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8018bb0:	fb07 2606 	mla	r6, r7, r6, r2
 8018bb4:	1436      	asrs	r6, r6, #16
 8018bb6:	d449      	bmi.n	8018c4c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8018bb8:	9f00      	ldr	r7, [sp, #0]
 8018bba:	42be      	cmp	r6, r7
 8018bbc:	da46      	bge.n	8018c4c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8018bbe:	1ce6      	adds	r6, r4, #3
 8018bc0:	4699      	mov	r9, r3
 8018bc2:	f1b9 0f00 	cmp.w	r9, #0
 8018bc6:	f106 0603 	add.w	r6, r6, #3
 8018bca:	dd43      	ble.n	8018c54 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12a>
 8018bcc:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8018bd0:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8018bd4:	1417      	asrs	r7, r2, #16
 8018bd6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8018bda:	fb1b fb05 	smulbb	fp, fp, r5
 8018bde:	fb0e a707 	mla	r7, lr, r7, sl
 8018be2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018be6:	eb08 0a07 	add.w	sl, r8, r7
 8018bea:	f818 7007 	ldrb.w	r7, [r8, r7]
 8018bee:	fb07 b70c 	mla	r7, r7, ip, fp
 8018bf2:	b2bf      	uxth	r7, r7
 8018bf4:	f107 0b01 	add.w	fp, r7, #1
 8018bf8:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8018bfc:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8018c00:	fb1b fb05 	smulbb	fp, fp, r5
 8018c04:	123f      	asrs	r7, r7, #8
 8018c06:	f806 7c06 	strb.w	r7, [r6, #-6]
 8018c0a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8018c0e:	fb07 b70c 	mla	r7, r7, ip, fp
 8018c12:	b2bf      	uxth	r7, r7
 8018c14:	f107 0b01 	add.w	fp, r7, #1
 8018c18:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8018c1c:	123f      	asrs	r7, r7, #8
 8018c1e:	f806 7c05 	strb.w	r7, [r6, #-5]
 8018c22:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8018c26:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8018c2a:	fb1a fa05 	smulbb	sl, sl, r5
 8018c2e:	fb07 a70c 	mla	r7, r7, ip, sl
 8018c32:	b2bf      	uxth	r7, r7
 8018c34:	f107 0a01 	add.w	sl, r7, #1
 8018c38:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8018c3c:	123f      	asrs	r7, r7, #8
 8018c3e:	f806 7c04 	strb.w	r7, [r6, #-4]
 8018c42:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8018c44:	4438      	add	r0, r7
 8018c46:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8018c48:	443a      	add	r2, r7
 8018c4a:	e7ba      	b.n	8018bc2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8018c4c:	2700      	movs	r7, #0
 8018c4e:	1bde      	subs	r6, r3, r7
 8018c50:	2e00      	cmp	r6, #0
 8018c52:	dc3f      	bgt.n	8018cd4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1aa>
 8018c54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018c58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018c5c:	441c      	add	r4, r3
 8018c5e:	2900      	cmp	r1, #0
 8018c60:	f340 8088 	ble.w	8018d74 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 8018c64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018c68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018c6a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018c6e:	3901      	subs	r1, #1
 8018c70:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018c74:	eef0 6a62 	vmov.f32	s13, s5
 8018c78:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018c7c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018c80:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018c84:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8018c88:	eef0 6a43 	vmov.f32	s13, s6
 8018c8c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018c90:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8018c94:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018c98:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018c9c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018ca0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018ca4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018ca8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018cac:	ee12 2a90 	vmov	r2, s5
 8018cb0:	eef0 2a47 	vmov.f32	s5, s14
 8018cb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8018cb8:	ee13 2a10 	vmov	r2, s6
 8018cbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8018cbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018cc0:	eeb0 3a67 	vmov.f32	s6, s15
 8018cc4:	fb92 f3f3 	sdiv	r3, r2, r3
 8018cc8:	9a01      	ldr	r2, [sp, #4]
 8018cca:	9310      	str	r3, [sp, #64]	; 0x40
 8018ccc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018cce:	bf08      	it	eq
 8018cd0:	4613      	moveq	r3, r2
 8018cd2:	e745      	b.n	8018b60 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 8018cd4:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8018cd8:	d446      	bmi.n	8018d68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8018cda:	45f2      	cmp	sl, lr
 8018cdc:	da44      	bge.n	8018d68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8018cde:	ea5f 4922 	movs.w	r9, r2, asr #16
 8018ce2:	d441      	bmi.n	8018d68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8018ce4:	9e00      	ldr	r6, [sp, #0]
 8018ce6:	45b1      	cmp	r9, r6
 8018ce8:	da3e      	bge.n	8018d68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 8018cea:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8018cee:	fb0e a909 	mla	r9, lr, r9, sl
 8018cf2:	f814 b006 	ldrb.w	fp, [r4, r6]
 8018cf6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8018cfa:	fb1b fb05 	smulbb	fp, fp, r5
 8018cfe:	eb08 0a09 	add.w	sl, r8, r9
 8018d02:	f818 9009 	ldrb.w	r9, [r8, r9]
 8018d06:	fb09 b90c 	mla	r9, r9, ip, fp
 8018d0a:	fa1f f989 	uxth.w	r9, r9
 8018d0e:	f109 0b01 	add.w	fp, r9, #1
 8018d12:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018d16:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018d1a:	f804 9006 	strb.w	r9, [r4, r6]
 8018d1e:	4426      	add	r6, r4
 8018d20:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8018d24:	f896 b001 	ldrb.w	fp, [r6, #1]
 8018d28:	fb1b fb05 	smulbb	fp, fp, r5
 8018d2c:	fb09 b90c 	mla	r9, r9, ip, fp
 8018d30:	fa1f f989 	uxth.w	r9, r9
 8018d34:	f109 0b01 	add.w	fp, r9, #1
 8018d38:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018d3c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018d40:	f886 9001 	strb.w	r9, [r6, #1]
 8018d44:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8018d48:	f896 a002 	ldrb.w	sl, [r6, #2]
 8018d4c:	fb1a fa05 	smulbb	sl, sl, r5
 8018d50:	fb09 a90c 	mla	r9, r9, ip, sl
 8018d54:	fa1f f989 	uxth.w	r9, r9
 8018d58:	f109 0a01 	add.w	sl, r9, #1
 8018d5c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8018d60:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018d64:	f886 9002 	strb.w	r9, [r6, #2]
 8018d68:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8018d6a:	3701      	adds	r7, #1
 8018d6c:	4430      	add	r0, r6
 8018d6e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8018d70:	4432      	add	r2, r6
 8018d72:	e76c      	b.n	8018c4e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 8018d74:	b003      	add	sp, #12
 8018d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018d7a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8018d7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d7e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018d80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018d84:	9201      	str	r2, [sp, #4]
 8018d86:	6868      	ldr	r0, [r5, #4]
 8018d88:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 8018d8c:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 8018d90:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8018d94:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 8018d98:	fb00 2404 	mla	r4, r0, r4, r2
 8018d9c:	682a      	ldr	r2, [r5, #0]
 8018d9e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018da2:	4414      	add	r4, r2
 8018da4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018da6:	f8d2 9000 	ldr.w	r9, [r2]
 8018daa:	2900      	cmp	r1, #0
 8018dac:	dc03      	bgt.n	8018db6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 8018dae:	9a01      	ldr	r2, [sp, #4]
 8018db0:	2a00      	cmp	r2, #0
 8018db2:	f340 80a8 	ble.w	8018f06 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8018db6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018db8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018dbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018dbe:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	dd0c      	ble.n	8018de0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8018dc6:	1405      	asrs	r5, r0, #16
 8018dc8:	d405      	bmi.n	8018dd6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8018dca:	4565      	cmp	r5, ip
 8018dcc:	da03      	bge.n	8018dd6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8018dce:	1415      	asrs	r5, r2, #16
 8018dd0:	d401      	bmi.n	8018dd6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 8018dd2:	4575      	cmp	r5, lr
 8018dd4:	db05      	blt.n	8018de2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8018dd6:	4438      	add	r0, r7
 8018dd8:	4432      	add	r2, r6
 8018dda:	3b01      	subs	r3, #1
 8018ddc:	3403      	adds	r4, #3
 8018dde:	e7f0      	b.n	8018dc2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8018de0:	d03a      	beq.n	8018e58 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8018de2:	1e5d      	subs	r5, r3, #1
 8018de4:	fb07 0805 	mla	r8, r7, r5, r0
 8018de8:	ea5f 4828 	movs.w	r8, r8, asr #16
 8018dec:	d429      	bmi.n	8018e42 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8018dee:	45e0      	cmp	r8, ip
 8018df0:	da27      	bge.n	8018e42 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8018df2:	fb06 2505 	mla	r5, r6, r5, r2
 8018df6:	142d      	asrs	r5, r5, #16
 8018df8:	d423      	bmi.n	8018e42 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8018dfa:	4575      	cmp	r5, lr
 8018dfc:	da21      	bge.n	8018e42 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8018dfe:	f104 0803 	add.w	r8, r4, #3
 8018e02:	469a      	mov	sl, r3
 8018e04:	f1ba 0f00 	cmp.w	sl, #0
 8018e08:	f108 0803 	add.w	r8, r8, #3
 8018e0c:	dd1f      	ble.n	8018e4e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8018e0e:	ea4f 4b20 	mov.w	fp, r0, asr #16
 8018e12:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8018e16:	1415      	asrs	r5, r2, #16
 8018e18:	4438      	add	r0, r7
 8018e1a:	4432      	add	r2, r6
 8018e1c:	fb0c b505 	mla	r5, ip, r5, fp
 8018e20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018e24:	eb09 0b05 	add.w	fp, r9, r5
 8018e28:	f819 5005 	ldrb.w	r5, [r9, r5]
 8018e2c:	f808 5c06 	strb.w	r5, [r8, #-6]
 8018e30:	f89b 5001 	ldrb.w	r5, [fp, #1]
 8018e34:	f808 5c05 	strb.w	r5, [r8, #-5]
 8018e38:	f89b 5002 	ldrb.w	r5, [fp, #2]
 8018e3c:	f808 5c04 	strb.w	r5, [r8, #-4]
 8018e40:	e7e0      	b.n	8018e04 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8018e42:	2500      	movs	r5, #0
 8018e44:	eba3 0805 	sub.w	r8, r3, r5
 8018e48:	f1b8 0f00 	cmp.w	r8, #0
 8018e4c:	dc38      	bgt.n	8018ec0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x146>
 8018e4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018e52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018e56:	441c      	add	r4, r3
 8018e58:	2900      	cmp	r1, #0
 8018e5a:	dd54      	ble.n	8018f06 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 8018e5c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018e60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018e62:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018e66:	3901      	subs	r1, #1
 8018e68:	eeb0 6a62 	vmov.f32	s12, s5
 8018e6c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018e70:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018e74:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018e78:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8018e7c:	eeb0 6a43 	vmov.f32	s12, s6
 8018e80:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018e84:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8018e88:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018e8c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018e90:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018e94:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018e98:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018e9c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018ea0:	ee12 2a90 	vmov	r2, s5
 8018ea4:	eef0 2a47 	vmov.f32	s5, s14
 8018ea8:	fb92 f7f3 	sdiv	r7, r2, r3
 8018eac:	ee13 2a10 	vmov	r2, s6
 8018eb0:	eeb0 3a67 	vmov.f32	s6, s15
 8018eb4:	fb92 f6f3 	sdiv	r6, r2, r3
 8018eb8:	9a01      	ldr	r2, [sp, #4]
 8018eba:	bf08      	it	eq
 8018ebc:	4613      	moveq	r3, r2
 8018ebe:	e774      	b.n	8018daa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 8018ec0:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8018ec4:	d41b      	bmi.n	8018efe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8018ec6:	45e2      	cmp	sl, ip
 8018ec8:	da19      	bge.n	8018efe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8018eca:	ea5f 4822 	movs.w	r8, r2, asr #16
 8018ece:	d416      	bmi.n	8018efe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8018ed0:	45f0      	cmp	r8, lr
 8018ed2:	da14      	bge.n	8018efe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8018ed4:	fb0c a808 	mla	r8, ip, r8, sl
 8018ed8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8018edc:	f819 b008 	ldrb.w	fp, [r9, r8]
 8018ee0:	eb09 0a08 	add.w	sl, r9, r8
 8018ee4:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8018ee8:	f804 b008 	strb.w	fp, [r4, r8]
 8018eec:	44a0      	add	r8, r4
 8018eee:	f89a b001 	ldrb.w	fp, [sl, #1]
 8018ef2:	f888 b001 	strb.w	fp, [r8, #1]
 8018ef6:	f89a a002 	ldrb.w	sl, [sl, #2]
 8018efa:	f888 a002 	strb.w	sl, [r8, #2]
 8018efe:	4438      	add	r0, r7
 8018f00:	4432      	add	r2, r6
 8018f02:	3501      	adds	r5, #1
 8018f04:	e79e      	b.n	8018e44 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 8018f06:	b003      	add	sp, #12
 8018f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018f0c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8018f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f10:	b085      	sub	sp, #20
 8018f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018f16:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018f18:	9202      	str	r2, [sp, #8]
 8018f1a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8018f1e:	6860      	ldr	r0, [r4, #4]
 8018f20:	9203      	str	r2, [sp, #12]
 8018f22:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8018f26:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8018f2a:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8018f2e:	fb00 2505 	mla	r5, r0, r5, r2
 8018f32:	6822      	ldr	r2, [r4, #0]
 8018f34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018f38:	4415      	add	r5, r2
 8018f3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018f3c:	6812      	ldr	r2, [r2, #0]
 8018f3e:	9201      	str	r2, [sp, #4]
 8018f40:	2900      	cmp	r1, #0
 8018f42:	dc03      	bgt.n	8018f4c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 8018f44:	9a02      	ldr	r2, [sp, #8]
 8018f46:	2a00      	cmp	r2, #0
 8018f48:	f340 811c 	ble.w	8019184 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8018f4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018f4e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8018f52:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018f54:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	dd0e      	ble.n	8018f7a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8018f5c:	1422      	asrs	r2, r4, #16
 8018f5e:	d405      	bmi.n	8018f6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8018f60:	4572      	cmp	r2, lr
 8018f62:	da03      	bge.n	8018f6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8018f64:	1402      	asrs	r2, r0, #16
 8018f66:	d401      	bmi.n	8018f6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8018f68:	4542      	cmp	r2, r8
 8018f6a:	db07      	blt.n	8018f7c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8018f6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018f6e:	3b01      	subs	r3, #1
 8018f70:	3503      	adds	r5, #3
 8018f72:	4414      	add	r4, r2
 8018f74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018f76:	4410      	add	r0, r2
 8018f78:	e7ee      	b.n	8018f58 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8018f7a:	d072      	beq.n	8019062 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x156>
 8018f7c:	1e5a      	subs	r2, r3, #1
 8018f7e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018f80:	fb06 4602 	mla	r6, r6, r2, r4
 8018f84:	1436      	asrs	r6, r6, #16
 8018f86:	d461      	bmi.n	801904c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8018f88:	4576      	cmp	r6, lr
 8018f8a:	da5f      	bge.n	801904c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8018f8c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8018f8e:	fb06 0202 	mla	r2, r6, r2, r0
 8018f92:	1412      	asrs	r2, r2, #16
 8018f94:	d45a      	bmi.n	801904c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8018f96:	4542      	cmp	r2, r8
 8018f98:	da58      	bge.n	801904c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8018f9a:	1cef      	adds	r7, r5, #3
 8018f9c:	4699      	mov	r9, r3
 8018f9e:	f1b9 0f00 	cmp.w	r9, #0
 8018fa2:	dd59      	ble.n	8019058 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 8018fa4:	1426      	asrs	r6, r4, #16
 8018fa6:	1402      	asrs	r2, r0, #16
 8018fa8:	fb0e 6202 	mla	r2, lr, r2, r6
 8018fac:	9e01      	ldr	r6, [sp, #4]
 8018fae:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8018fb2:	ea5f 6c16 	movs.w	ip, r6, lsr #24
 8018fb6:	d041      	beq.n	801903c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 8018fb8:	9a03      	ldr	r2, [sp, #12]
 8018fba:	fa5f fb86 	uxtb.w	fp, r6
 8018fbe:	fb02 fc0c 	mul.w	ip, r2, ip
 8018fc2:	f10c 0201 	add.w	r2, ip, #1
 8018fc6:	eb02 222c 	add.w	r2, r2, ip, asr #8
 8018fca:	f817 cc03 	ldrb.w	ip, [r7, #-3]
 8018fce:	1212      	asrs	r2, r2, #8
 8018fd0:	fa1f fa82 	uxth.w	sl, r2
 8018fd4:	43d2      	mvns	r2, r2
 8018fd6:	fb1b fb0a 	smulbb	fp, fp, sl
 8018fda:	b2d2      	uxtb	r2, r2
 8018fdc:	fb0c bc02 	mla	ip, ip, r2, fp
 8018fe0:	fa1f fc8c 	uxth.w	ip, ip
 8018fe4:	f10c 0b01 	add.w	fp, ip, #1
 8018fe8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8018fec:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8018ff0:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8018ff4:	fb1b fb0a 	smulbb	fp, fp, sl
 8018ff8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8018ffc:	fb16 fa0a 	smulbb	sl, r6, sl
 8019000:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8019004:	f807 cc03 	strb.w	ip, [r7, #-3]
 8019008:	f817 cc02 	ldrb.w	ip, [r7, #-2]
 801900c:	fb06 aa02 	mla	sl, r6, r2, sl
 8019010:	fb0c bc02 	mla	ip, ip, r2, fp
 8019014:	fa1f fa8a 	uxth.w	sl, sl
 8019018:	fa1f fc8c 	uxth.w	ip, ip
 801901c:	f10a 0601 	add.w	r6, sl, #1
 8019020:	f10c 0b01 	add.w	fp, ip, #1
 8019024:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8019028:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801902c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019030:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019034:	f807 ac01 	strb.w	sl, [r7, #-1]
 8019038:	f807 cc02 	strb.w	ip, [r7, #-2]
 801903c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801903e:	3703      	adds	r7, #3
 8019040:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8019044:	4414      	add	r4, r2
 8019046:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019048:	4410      	add	r0, r2
 801904a:	e7a8      	b.n	8018f9e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801904c:	f04f 0c00 	mov.w	ip, #0
 8019050:	eba3 020c 	sub.w	r2, r3, ip
 8019054:	2a00      	cmp	r2, #0
 8019056:	dc3d      	bgt.n	80190d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 8019058:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801905c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019060:	441d      	add	r5, r3
 8019062:	2900      	cmp	r1, #0
 8019064:	f340 808e 	ble.w	8019184 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 8019068:	ee30 0a04 	vadd.f32	s0, s0, s8
 801906c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801906e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019072:	3901      	subs	r1, #1
 8019074:	eeb0 6a62 	vmov.f32	s12, s5
 8019078:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801907c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019080:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019084:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019088:	eeb0 6a43 	vmov.f32	s12, s6
 801908c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019090:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019094:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019098:	ee61 7a27 	vmul.f32	s15, s2, s15
 801909c:	ee77 2a62 	vsub.f32	s5, s14, s5
 80190a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80190a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80190a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80190ac:	ee12 2a90 	vmov	r2, s5
 80190b0:	eef0 2a47 	vmov.f32	s5, s14
 80190b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80190b8:	ee13 2a10 	vmov	r2, s6
 80190bc:	9311      	str	r3, [sp, #68]	; 0x44
 80190be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80190c0:	eeb0 3a67 	vmov.f32	s6, s15
 80190c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80190c8:	9a02      	ldr	r2, [sp, #8]
 80190ca:	9312      	str	r3, [sp, #72]	; 0x48
 80190cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80190ce:	bf08      	it	eq
 80190d0:	4613      	moveq	r3, r2
 80190d2:	e735      	b.n	8018f40 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 80190d4:	1426      	asrs	r6, r4, #16
 80190d6:	d44e      	bmi.n	8019176 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 80190d8:	4576      	cmp	r6, lr
 80190da:	da4c      	bge.n	8019176 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 80190dc:	1402      	asrs	r2, r0, #16
 80190de:	d44a      	bmi.n	8019176 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 80190e0:	4542      	cmp	r2, r8
 80190e2:	da48      	bge.n	8019176 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 80190e4:	fb0e 6202 	mla	r2, lr, r2, r6
 80190e8:	9e01      	ldr	r6, [sp, #4]
 80190ea:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80190ee:	0e3a      	lsrs	r2, r7, #24
 80190f0:	d041      	beq.n	8019176 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26a>
 80190f2:	9e03      	ldr	r6, [sp, #12]
 80190f4:	fa5f fb87 	uxtb.w	fp, r7
 80190f8:	4372      	muls	r2, r6
 80190fa:	1c56      	adds	r6, r2, #1
 80190fc:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8019100:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 8019104:	1212      	asrs	r2, r2, #8
 8019106:	f815 9006 	ldrb.w	r9, [r5, r6]
 801910a:	fa1f fa82 	uxth.w	sl, r2
 801910e:	43d2      	mvns	r2, r2
 8019110:	fb1b fb0a 	smulbb	fp, fp, sl
 8019114:	b2d2      	uxtb	r2, r2
 8019116:	fb09 b902 	mla	r9, r9, r2, fp
 801911a:	fa1f f989 	uxth.w	r9, r9
 801911e:	f109 0b01 	add.w	fp, r9, #1
 8019122:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019126:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801912a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801912e:	fb1b fb0a 	smulbb	fp, fp, sl
 8019132:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019136:	fb17 fa0a 	smulbb	sl, r7, sl
 801913a:	f805 9006 	strb.w	r9, [r5, r6]
 801913e:	442e      	add	r6, r5
 8019140:	78b7      	ldrb	r7, [r6, #2]
 8019142:	f896 9001 	ldrb.w	r9, [r6, #1]
 8019146:	fb07 aa02 	mla	sl, r7, r2, sl
 801914a:	fb09 b902 	mla	r9, r9, r2, fp
 801914e:	fa1f fa8a 	uxth.w	sl, sl
 8019152:	fa1f f989 	uxth.w	r9, r9
 8019156:	f10a 0701 	add.w	r7, sl, #1
 801915a:	f109 0b01 	add.w	fp, r9, #1
 801915e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019162:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019166:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801916a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801916e:	f886 a002 	strb.w	sl, [r6, #2]
 8019172:	f886 9001 	strb.w	r9, [r6, #1]
 8019176:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019178:	f10c 0c01 	add.w	ip, ip, #1
 801917c:	4414      	add	r4, r2
 801917e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019180:	4410      	add	r0, r2
 8019182:	e765      	b.n	8019050 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 8019184:	b005      	add	sp, #20
 8019186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801918a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801918a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801918e:	b085      	sub	sp, #20
 8019190:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019194:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019196:	9203      	str	r2, [sp, #12]
 8019198:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801919c:	6860      	ldr	r0, [r4, #4]
 801919e:	9201      	str	r2, [sp, #4]
 80191a0:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 80191a4:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80191a8:	fb00 2505 	mla	r5, r0, r5, r2
 80191ac:	6822      	ldr	r2, [r4, #0]
 80191ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80191b2:	4415      	add	r5, r2
 80191b4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80191b6:	6812      	ldr	r2, [r2, #0]
 80191b8:	9202      	str	r2, [sp, #8]
 80191ba:	2900      	cmp	r1, #0
 80191bc:	dc03      	bgt.n	80191c6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 80191be:	9a03      	ldr	r2, [sp, #12]
 80191c0:	2a00      	cmp	r2, #0
 80191c2:	f340 8122 	ble.w	801940a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 80191c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80191c8:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80191cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80191ce:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	dd0f      	ble.n	80191f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 80191d6:	1422      	asrs	r2, r4, #16
 80191d8:	d406      	bmi.n	80191e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 80191da:	4572      	cmp	r2, lr
 80191dc:	da04      	bge.n	80191e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 80191de:	1402      	asrs	r2, r0, #16
 80191e0:	d402      	bmi.n	80191e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 80191e2:	9e01      	ldr	r6, [sp, #4]
 80191e4:	42b2      	cmp	r2, r6
 80191e6:	db07      	blt.n	80191f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80191e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80191ea:	3b01      	subs	r3, #1
 80191ec:	3503      	adds	r5, #3
 80191ee:	4414      	add	r4, r2
 80191f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80191f2:	4410      	add	r0, r2
 80191f4:	e7ed      	b.n	80191d2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 80191f6:	d06e      	beq.n	80192d6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 80191f8:	1e5a      	subs	r2, r3, #1
 80191fa:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80191fc:	fb06 4602 	mla	r6, r6, r2, r4
 8019200:	1436      	asrs	r6, r6, #16
 8019202:	d45d      	bmi.n	80192c0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8019204:	4576      	cmp	r6, lr
 8019206:	da5b      	bge.n	80192c0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8019208:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801920a:	fb06 0202 	mla	r2, r6, r2, r0
 801920e:	1412      	asrs	r2, r2, #16
 8019210:	d456      	bmi.n	80192c0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8019212:	9e01      	ldr	r6, [sp, #4]
 8019214:	42b2      	cmp	r2, r6
 8019216:	da53      	bge.n	80192c0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8019218:	1cee      	adds	r6, r5, #3
 801921a:	469a      	mov	sl, r3
 801921c:	f1ba 0f00 	cmp.w	sl, #0
 8019220:	dd54      	ble.n	80192cc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8019222:	1427      	asrs	r7, r4, #16
 8019224:	1402      	asrs	r2, r0, #16
 8019226:	fb0e 7202 	mla	r2, lr, r2, r7
 801922a:	9f02      	ldr	r7, [sp, #8]
 801922c:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8019230:	ea5f 6c17 	movs.w	ip, r7, lsr #24
 8019234:	d03c      	beq.n	80192b0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 8019236:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801923a:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801923e:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8019242:	fa5f f28c 	uxtb.w	r2, ip
 8019246:	b2ff      	uxtb	r7, r7
 8019248:	f000 80d8 	beq.w	80193fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801924c:	fa1f f882 	uxth.w	r8, r2
 8019250:	43d2      	mvns	r2, r2
 8019252:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 8019256:	fb17 f708 	smulbb	r7, r7, r8
 801925a:	b2d2      	uxtb	r2, r2
 801925c:	fb19 f908 	smulbb	r9, r9, r8
 8019260:	fb0c 7702 	mla	r7, ip, r2, r7
 8019264:	fb1b f808 	smulbb	r8, fp, r8
 8019268:	b2bf      	uxth	r7, r7
 801926a:	f107 0c01 	add.w	ip, r7, #1
 801926e:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8019272:	123f      	asrs	r7, r7, #8
 8019274:	f806 7c03 	strb.w	r7, [r6, #-3]
 8019278:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801927c:	fb07 9902 	mla	r9, r7, r2, r9
 8019280:	fa1f f989 	uxth.w	r9, r9
 8019284:	f109 0701 	add.w	r7, r9, #1
 8019288:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801928c:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8019290:	fb07 8802 	mla	r8, r7, r2, r8
 8019294:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019298:	fa1f f888 	uxth.w	r8, r8
 801929c:	f806 9c02 	strb.w	r9, [r6, #-2]
 80192a0:	f108 0201 	add.w	r2, r8, #1
 80192a4:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80192a8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80192ac:	f806 8c01 	strb.w	r8, [r6, #-1]
 80192b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80192b2:	3603      	adds	r6, #3
 80192b4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80192b8:	4414      	add	r4, r2
 80192ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80192bc:	4410      	add	r0, r2
 80192be:	e7ad      	b.n	801921c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 80192c0:	f04f 0c00 	mov.w	ip, #0
 80192c4:	eba3 020c 	sub.w	r2, r3, ip
 80192c8:	2a00      	cmp	r2, #0
 80192ca:	dc3d      	bgt.n	8019348 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 80192cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80192d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80192d4:	441d      	add	r5, r3
 80192d6:	2900      	cmp	r1, #0
 80192d8:	f340 8097 	ble.w	801940a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 80192dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80192e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80192e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80192e6:	3901      	subs	r1, #1
 80192e8:	eeb0 6a62 	vmov.f32	s12, s5
 80192ec:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80192f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80192f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80192f8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80192fc:	eeb0 6a43 	vmov.f32	s12, s6
 8019300:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019304:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019308:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801930c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019310:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019314:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019318:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801931c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019320:	ee12 2a90 	vmov	r2, s5
 8019324:	eef0 2a47 	vmov.f32	s5, s14
 8019328:	fb92 f3f3 	sdiv	r3, r2, r3
 801932c:	ee13 2a10 	vmov	r2, s6
 8019330:	9311      	str	r3, [sp, #68]	; 0x44
 8019332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019334:	eeb0 3a67 	vmov.f32	s6, s15
 8019338:	fb92 f3f3 	sdiv	r3, r2, r3
 801933c:	9a03      	ldr	r2, [sp, #12]
 801933e:	9312      	str	r3, [sp, #72]	; 0x48
 8019340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019342:	bf08      	it	eq
 8019344:	4613      	moveq	r3, r2
 8019346:	e738      	b.n	80191ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 8019348:	1426      	asrs	r6, r4, #16
 801934a:	d448      	bmi.n	80193de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801934c:	4576      	cmp	r6, lr
 801934e:	da46      	bge.n	80193de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8019350:	1402      	asrs	r2, r0, #16
 8019352:	d444      	bmi.n	80193de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8019354:	9f01      	ldr	r7, [sp, #4]
 8019356:	42ba      	cmp	r2, r7
 8019358:	da41      	bge.n	80193de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 801935a:	fb0e 6202 	mla	r2, lr, r2, r6
 801935e:	9e02      	ldr	r6, [sp, #8]
 8019360:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8019364:	0e3a      	lsrs	r2, r7, #24
 8019366:	d03a      	beq.n	80193de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 8019368:	2aff      	cmp	r2, #255	; 0xff
 801936a:	b2d6      	uxtb	r6, r2
 801936c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8019370:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8019374:	ea4f 024c 	mov.w	r2, ip, lsl #1
 8019378:	b2ff      	uxtb	r7, r7
 801937a:	d037      	beq.n	80193ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801937c:	fa1f f986 	uxth.w	r9, r6
 8019380:	4462      	add	r2, ip
 8019382:	43f6      	mvns	r6, r6
 8019384:	f815 8002 	ldrb.w	r8, [r5, r2]
 8019388:	fb17 f709 	smulbb	r7, r7, r9
 801938c:	fb1a fa09 	smulbb	sl, sl, r9
 8019390:	b2f6      	uxtb	r6, r6
 8019392:	fb1b f909 	smulbb	r9, fp, r9
 8019396:	fb08 7706 	mla	r7, r8, r6, r7
 801939a:	b2bf      	uxth	r7, r7
 801939c:	f107 0801 	add.w	r8, r7, #1
 80193a0:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 80193a4:	123f      	asrs	r7, r7, #8
 80193a6:	54af      	strb	r7, [r5, r2]
 80193a8:	442a      	add	r2, r5
 80193aa:	7857      	ldrb	r7, [r2, #1]
 80193ac:	fb07 aa06 	mla	sl, r7, r6, sl
 80193b0:	fa1f fa8a 	uxth.w	sl, sl
 80193b4:	f10a 0701 	add.w	r7, sl, #1
 80193b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80193bc:	7897      	ldrb	r7, [r2, #2]
 80193be:	fb07 9906 	mla	r9, r7, r6, r9
 80193c2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80193c6:	fa1f f989 	uxth.w	r9, r9
 80193ca:	f882 a001 	strb.w	sl, [r2, #1]
 80193ce:	f109 0601 	add.w	r6, r9, #1
 80193d2:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 80193d6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80193da:	f882 9002 	strb.w	r9, [r2, #2]
 80193de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80193e0:	f10c 0c01 	add.w	ip, ip, #1
 80193e4:	4414      	add	r4, r2
 80193e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80193e8:	4410      	add	r0, r2
 80193ea:	e76b      	b.n	80192c4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13a>
 80193ec:	4462      	add	r2, ip
 80193ee:	54af      	strb	r7, [r5, r2]
 80193f0:	442a      	add	r2, r5
 80193f2:	f882 a001 	strb.w	sl, [r2, #1]
 80193f6:	f882 b002 	strb.w	fp, [r2, #2]
 80193fa:	e7f0      	b.n	80193de <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x254>
 80193fc:	f806 7c03 	strb.w	r7, [r6, #-3]
 8019400:	f806 9c02 	strb.w	r9, [r6, #-2]
 8019404:	f806 bc01 	strb.w	fp, [r6, #-1]
 8019408:	e752      	b.n	80192b0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x126>
 801940a:	b005      	add	sp, #20
 801940c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019410 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019414:	b087      	sub	sp, #28
 8019416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801941a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801941c:	9204      	str	r2, [sp, #16]
 801941e:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8019422:	6860      	ldr	r0, [r4, #4]
 8019424:	9205      	str	r2, [sp, #20]
 8019426:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801942a:	f9bd 8064 	ldrsh.w	r8, [sp, #100]	; 0x64
 801942e:	9101      	str	r1, [sp, #4]
 8019430:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8019434:	fb00 2505 	mla	r5, r0, r5, r2
 8019438:	6822      	ldr	r2, [r4, #0]
 801943a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801943e:	4415      	add	r5, r2
 8019440:	f10e 0201 	add.w	r2, lr, #1
 8019444:	f022 0201 	bic.w	r2, r2, #1
 8019448:	9202      	str	r2, [sp, #8]
 801944a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801944c:	6812      	ldr	r2, [r2, #0]
 801944e:	9203      	str	r2, [sp, #12]
 8019450:	9a01      	ldr	r2, [sp, #4]
 8019452:	2a00      	cmp	r2, #0
 8019454:	dc03      	bgt.n	801945e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 8019456:	9a04      	ldr	r2, [sp, #16]
 8019458:	2a00      	cmp	r2, #0
 801945a:	f340 8132 	ble.w	80196c2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801945e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019460:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8019464:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019466:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801946a:	2b00      	cmp	r3, #0
 801946c:	dd0e      	ble.n	801948c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801946e:	1422      	asrs	r2, r4, #16
 8019470:	d405      	bmi.n	801947e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019472:	4596      	cmp	lr, r2
 8019474:	dd03      	ble.n	801947e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019476:	1402      	asrs	r2, r0, #16
 8019478:	d401      	bmi.n	801947e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801947a:	4542      	cmp	r2, r8
 801947c:	db07      	blt.n	801948e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801947e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019480:	3b01      	subs	r3, #1
 8019482:	3503      	adds	r5, #3
 8019484:	4414      	add	r4, r2
 8019486:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019488:	4410      	add	r0, r2
 801948a:	e7ee      	b.n	801946a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801948c:	d010      	beq.n	80194b0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801948e:	1e5a      	subs	r2, r3, #1
 8019490:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019492:	fb06 4602 	mla	r6, r6, r2, r4
 8019496:	1436      	asrs	r6, r6, #16
 8019498:	d546      	bpl.n	8019528 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801949a:	4699      	mov	r9, r3
 801949c:	462e      	mov	r6, r5
 801949e:	f1b9 0f00 	cmp.w	r9, #0
 80194a2:	f300 80ac 	bgt.w	80195fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ee>
 80194a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80194aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80194ae:	441d      	add	r5, r3
 80194b0:	9b01      	ldr	r3, [sp, #4]
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	f340 8105 	ble.w	80196c2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 80194b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80194bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80194be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80194c2:	eeb0 6a62 	vmov.f32	s12, s5
 80194c6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80194ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 80194ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80194d2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80194d6:	eeb0 6a43 	vmov.f32	s12, s6
 80194da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80194de:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80194e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80194e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80194ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 80194ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80194f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80194f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80194fa:	ee12 2a90 	vmov	r2, s5
 80194fe:	eef0 2a47 	vmov.f32	s5, s14
 8019502:	fb92 f3f3 	sdiv	r3, r2, r3
 8019506:	ee13 2a10 	vmov	r2, s6
 801950a:	9313      	str	r3, [sp, #76]	; 0x4c
 801950c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801950e:	eeb0 3a67 	vmov.f32	s6, s15
 8019512:	fb92 f3f3 	sdiv	r3, r2, r3
 8019516:	9314      	str	r3, [sp, #80]	; 0x50
 8019518:	9b01      	ldr	r3, [sp, #4]
 801951a:	9a04      	ldr	r2, [sp, #16]
 801951c:	3b01      	subs	r3, #1
 801951e:	9301      	str	r3, [sp, #4]
 8019520:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019522:	bf08      	it	eq
 8019524:	4613      	moveq	r3, r2
 8019526:	e793      	b.n	8019450 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 8019528:	45b6      	cmp	lr, r6
 801952a:	ddb6      	ble.n	801949a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801952c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801952e:	fb06 0202 	mla	r2, r6, r2, r0
 8019532:	1412      	asrs	r2, r2, #16
 8019534:	d4b1      	bmi.n	801949a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8019536:	4542      	cmp	r2, r8
 8019538:	daaf      	bge.n	801949a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801953a:	1cee      	adds	r6, r5, #3
 801953c:	4699      	mov	r9, r3
 801953e:	f1b9 0f00 	cmp.w	r9, #0
 8019542:	ddb0      	ble.n	80194a6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8019544:	1422      	asrs	r2, r4, #16
 8019546:	9902      	ldr	r1, [sp, #8]
 8019548:	1407      	asrs	r7, r0, #16
 801954a:	fb01 2707 	mla	r7, r1, r7, r2
 801954e:	9903      	ldr	r1, [sp, #12]
 8019550:	087a      	lsrs	r2, r7, #1
 8019552:	5c8a      	ldrb	r2, [r1, r2]
 8019554:	07f9      	lsls	r1, r7, #31
 8019556:	bf54      	ite	pl
 8019558:	f002 020f 	andpl.w	r2, r2, #15
 801955c:	1112      	asrmi	r2, r2, #4
 801955e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019562:	b2d2      	uxtb	r2, r2
 8019564:	2a00      	cmp	r2, #0
 8019566:	d042      	beq.n	80195ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1de>
 8019568:	4957      	ldr	r1, [pc, #348]	; (80196c8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 801956a:	680f      	ldr	r7, [r1, #0]
 801956c:	9905      	ldr	r1, [sp, #20]
 801956e:	fa5f fb87 	uxtb.w	fp, r7
 8019572:	434a      	muls	r2, r1
 8019574:	f102 0c01 	add.w	ip, r2, #1
 8019578:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 801957c:	f816 cc03 	ldrb.w	ip, [r6, #-3]
 8019580:	1212      	asrs	r2, r2, #8
 8019582:	fa1f fa82 	uxth.w	sl, r2
 8019586:	43d2      	mvns	r2, r2
 8019588:	fb1b fb0a 	smulbb	fp, fp, sl
 801958c:	b2d2      	uxtb	r2, r2
 801958e:	fb0c bc02 	mla	ip, ip, r2, fp
 8019592:	fa1f fc8c 	uxth.w	ip, ip
 8019596:	f10c 0b01 	add.w	fp, ip, #1
 801959a:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801959e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80195a2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80195a6:	fb1b fb0a 	smulbb	fp, fp, sl
 80195aa:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80195ae:	fb17 fa0a 	smulbb	sl, r7, sl
 80195b2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80195b6:	f806 cc03 	strb.w	ip, [r6, #-3]
 80195ba:	f816 cc02 	ldrb.w	ip, [r6, #-2]
 80195be:	fb07 aa02 	mla	sl, r7, r2, sl
 80195c2:	fb0c bc02 	mla	ip, ip, r2, fp
 80195c6:	fa1f fa8a 	uxth.w	sl, sl
 80195ca:	fa1f fc8c 	uxth.w	ip, ip
 80195ce:	f10a 0701 	add.w	r7, sl, #1
 80195d2:	f10c 0b01 	add.w	fp, ip, #1
 80195d6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80195da:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80195de:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80195e2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80195e6:	f806 ac01 	strb.w	sl, [r6, #-1]
 80195ea:	f806 cc02 	strb.w	ip, [r6, #-2]
 80195ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80195f0:	3603      	adds	r6, #3
 80195f2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80195f6:	4414      	add	r4, r2
 80195f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80195fa:	4410      	add	r0, r2
 80195fc:	e79f      	b.n	801953e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12e>
 80195fe:	1422      	asrs	r2, r4, #16
 8019600:	d457      	bmi.n	80196b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8019602:	4596      	cmp	lr, r2
 8019604:	dd55      	ble.n	80196b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8019606:	1407      	asrs	r7, r0, #16
 8019608:	d453      	bmi.n	80196b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801960a:	4547      	cmp	r7, r8
 801960c:	da51      	bge.n	80196b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801960e:	9902      	ldr	r1, [sp, #8]
 8019610:	fb07 2701 	mla	r7, r7, r1, r2
 8019614:	9903      	ldr	r1, [sp, #12]
 8019616:	087a      	lsrs	r2, r7, #1
 8019618:	07ff      	lsls	r7, r7, #31
 801961a:	5c8a      	ldrb	r2, [r1, r2]
 801961c:	bf54      	ite	pl
 801961e:	f002 020f 	andpl.w	r2, r2, #15
 8019622:	1112      	asrmi	r2, r2, #4
 8019624:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019628:	b2d2      	uxtb	r2, r2
 801962a:	2a00      	cmp	r2, #0
 801962c:	d041      	beq.n	80196b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801962e:	4926      	ldr	r1, [pc, #152]	; (80196c8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>)
 8019630:	680f      	ldr	r7, [r1, #0]
 8019632:	9905      	ldr	r1, [sp, #20]
 8019634:	fa5f fb87 	uxtb.w	fp, r7
 8019638:	434a      	muls	r2, r1
 801963a:	f102 0c01 	add.w	ip, r2, #1
 801963e:	eb0c 2222 	add.w	r2, ip, r2, asr #8
 8019642:	f896 c000 	ldrb.w	ip, [r6]
 8019646:	1212      	asrs	r2, r2, #8
 8019648:	fa1f fa82 	uxth.w	sl, r2
 801964c:	43d2      	mvns	r2, r2
 801964e:	fb1b fb0a 	smulbb	fp, fp, sl
 8019652:	b2d2      	uxtb	r2, r2
 8019654:	fb0c bc02 	mla	ip, ip, r2, fp
 8019658:	fa1f fc8c 	uxth.w	ip, ip
 801965c:	f10c 0b01 	add.w	fp, ip, #1
 8019660:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8019664:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8019668:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801966c:	fb1b fb0a 	smulbb	fp, fp, sl
 8019670:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019674:	fb17 fa0a 	smulbb	sl, r7, sl
 8019678:	78b7      	ldrb	r7, [r6, #2]
 801967a:	f886 c000 	strb.w	ip, [r6]
 801967e:	f896 c001 	ldrb.w	ip, [r6, #1]
 8019682:	fb07 aa02 	mla	sl, r7, r2, sl
 8019686:	fb0c bc02 	mla	ip, ip, r2, fp
 801968a:	fa1f fa8a 	uxth.w	sl, sl
 801968e:	fa1f fc8c 	uxth.w	ip, ip
 8019692:	f10a 0701 	add.w	r7, sl, #1
 8019696:	f10c 0b01 	add.w	fp, ip, #1
 801969a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801969e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80196a2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80196a6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80196aa:	f886 a002 	strb.w	sl, [r6, #2]
 80196ae:	f886 c001 	strb.w	ip, [r6, #1]
 80196b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80196b4:	3603      	adds	r6, #3
 80196b6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80196ba:	4414      	add	r4, r2
 80196bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80196be:	4410      	add	r0, r2
 80196c0:	e6ed      	b.n	801949e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 80196c2:	b007      	add	sp, #28
 80196c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196c8:	2000b288 	.word	0x2000b288

080196cc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80196cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196d0:	b087      	sub	sp, #28
 80196d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80196d6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80196d8:	9205      	str	r2, [sp, #20]
 80196da:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80196de:	6860      	ldr	r0, [r4, #4]
 80196e0:	9202      	str	r2, [sp, #8]
 80196e2:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 80196e6:	9101      	str	r1, [sp, #4]
 80196e8:	e9dd 2616 	ldrd	r2, r6, [sp, #88]	; 0x58
 80196ec:	fb00 2606 	mla	r6, r0, r6, r2
 80196f0:	6822      	ldr	r2, [r4, #0]
 80196f2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80196f6:	4416      	add	r6, r2
 80196f8:	f108 0201 	add.w	r2, r8, #1
 80196fc:	f022 0201 	bic.w	r2, r2, #1
 8019700:	9203      	str	r2, [sp, #12]
 8019702:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019704:	6812      	ldr	r2, [r2, #0]
 8019706:	9204      	str	r2, [sp, #16]
 8019708:	9a01      	ldr	r2, [sp, #4]
 801970a:	2a00      	cmp	r2, #0
 801970c:	dc03      	bgt.n	8019716 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 801970e:	9a05      	ldr	r2, [sp, #20]
 8019710:	2a00      	cmp	r2, #0
 8019712:	f340 813a 	ble.w	801998a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8019716:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019718:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801971c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801971e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8019722:	2b00      	cmp	r3, #0
 8019724:	dd0f      	ble.n	8019746 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8019726:	142a      	asrs	r2, r5, #16
 8019728:	d406      	bmi.n	8019738 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801972a:	4590      	cmp	r8, r2
 801972c:	dd04      	ble.n	8019738 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801972e:	1422      	asrs	r2, r4, #16
 8019730:	d402      	bmi.n	8019738 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8019732:	9802      	ldr	r0, [sp, #8]
 8019734:	4282      	cmp	r2, r0
 8019736:	db07      	blt.n	8019748 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8019738:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801973a:	3b01      	subs	r3, #1
 801973c:	3603      	adds	r6, #3
 801973e:	4415      	add	r5, r2
 8019740:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019742:	4414      	add	r4, r2
 8019744:	e7ed      	b.n	8019722 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 8019746:	d073      	beq.n	8019830 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 8019748:	1e5a      	subs	r2, r3, #1
 801974a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801974c:	fb00 5002 	mla	r0, r0, r2, r5
 8019750:	1400      	asrs	r0, r0, #16
 8019752:	d464      	bmi.n	801981e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8019754:	4580      	cmp	r8, r0
 8019756:	dd62      	ble.n	801981e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8019758:	9814      	ldr	r0, [sp, #80]	; 0x50
 801975a:	fb00 4202 	mla	r2, r0, r2, r4
 801975e:	1412      	asrs	r2, r2, #16
 8019760:	d45d      	bmi.n	801981e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8019762:	9802      	ldr	r0, [sp, #8]
 8019764:	4282      	cmp	r2, r0
 8019766:	da5a      	bge.n	801981e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x152>
 8019768:	1cf0      	adds	r0, r6, #3
 801976a:	469a      	mov	sl, r3
 801976c:	f1ba 0f00 	cmp.w	sl, #0
 8019770:	dd59      	ble.n	8019826 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8019772:	142a      	asrs	r2, r5, #16
 8019774:	9903      	ldr	r1, [sp, #12]
 8019776:	1427      	asrs	r7, r4, #16
 8019778:	fb01 2707 	mla	r7, r1, r7, r2
 801977c:	9904      	ldr	r1, [sp, #16]
 801977e:	087a      	lsrs	r2, r7, #1
 8019780:	5c8a      	ldrb	r2, [r1, r2]
 8019782:	07f9      	lsls	r1, r7, #31
 8019784:	bf54      	ite	pl
 8019786:	f002 020f 	andpl.w	r2, r2, #15
 801978a:	1112      	asrmi	r2, r2, #4
 801978c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019790:	b2d2      	uxtb	r2, r2
 8019792:	2a00      	cmp	r2, #0
 8019794:	d03b      	beq.n	801980e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 8019796:	497e      	ldr	r1, [pc, #504]	; (8019990 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 8019798:	2aff      	cmp	r2, #255	; 0xff
 801979a:	680f      	ldr	r7, [r1, #0]
 801979c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80197a0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80197a4:	b2ff      	uxtb	r7, r7
 80197a6:	f000 80e9 	beq.w	801997c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 80197aa:	fa1f fe82 	uxth.w	lr, r2
 80197ae:	43d2      	mvns	r2, r2
 80197b0:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 80197b4:	fb17 f70e 	smulbb	r7, r7, lr
 80197b8:	b2d2      	uxtb	r2, r2
 80197ba:	fb19 f90e 	smulbb	r9, r9, lr
 80197be:	fb0c 7702 	mla	r7, ip, r2, r7
 80197c2:	fb1b fe0e 	smulbb	lr, fp, lr
 80197c6:	b2bf      	uxth	r7, r7
 80197c8:	f107 0c01 	add.w	ip, r7, #1
 80197cc:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 80197d0:	123f      	asrs	r7, r7, #8
 80197d2:	f800 7c03 	strb.w	r7, [r0, #-3]
 80197d6:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 80197da:	fb07 9902 	mla	r9, r7, r2, r9
 80197de:	fa1f f989 	uxth.w	r9, r9
 80197e2:	f109 0701 	add.w	r7, r9, #1
 80197e6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80197ea:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 80197ee:	fb07 ee02 	mla	lr, r7, r2, lr
 80197f2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80197f6:	fa1f fe8e 	uxth.w	lr, lr
 80197fa:	f800 9c02 	strb.w	r9, [r0, #-2]
 80197fe:	f10e 0201 	add.w	r2, lr, #1
 8019802:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8019806:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801980a:	f800 ec01 	strb.w	lr, [r0, #-1]
 801980e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019810:	3003      	adds	r0, #3
 8019812:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8019816:	4415      	add	r5, r2
 8019818:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801981a:	4414      	add	r4, r2
 801981c:	e7a6      	b.n	801976c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801981e:	2700      	movs	r7, #0
 8019820:	1bda      	subs	r2, r3, r7
 8019822:	2a00      	cmp	r2, #0
 8019824:	dc40      	bgt.n	80198a8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1dc>
 8019826:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801982a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801982e:	441e      	add	r6, r3
 8019830:	9b01      	ldr	r3, [sp, #4]
 8019832:	2b00      	cmp	r3, #0
 8019834:	f340 80a9 	ble.w	801998a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8019838:	ee30 0a04 	vadd.f32	s0, s0, s8
 801983c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801983e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019842:	eeb0 6a62 	vmov.f32	s12, s5
 8019846:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801984a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801984e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019852:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8019856:	eeb0 6a43 	vmov.f32	s12, s6
 801985a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801985e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8019862:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019866:	ee61 7a27 	vmul.f32	s15, s2, s15
 801986a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801986e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019872:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019876:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801987a:	ee12 2a90 	vmov	r2, s5
 801987e:	eef0 2a47 	vmov.f32	s5, s14
 8019882:	fb92 f3f3 	sdiv	r3, r2, r3
 8019886:	ee13 2a10 	vmov	r2, s6
 801988a:	9313      	str	r3, [sp, #76]	; 0x4c
 801988c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801988e:	eeb0 3a67 	vmov.f32	s6, s15
 8019892:	fb92 f3f3 	sdiv	r3, r2, r3
 8019896:	9314      	str	r3, [sp, #80]	; 0x50
 8019898:	9b01      	ldr	r3, [sp, #4]
 801989a:	9a05      	ldr	r2, [sp, #20]
 801989c:	3b01      	subs	r3, #1
 801989e:	9301      	str	r3, [sp, #4]
 80198a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80198a2:	bf08      	it	eq
 80198a4:	4613      	moveq	r3, r2
 80198a6:	e72f      	b.n	8019708 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 80198a8:	142a      	asrs	r2, r5, #16
 80198aa:	d458      	bmi.n	801995e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80198ac:	4590      	cmp	r8, r2
 80198ae:	dd56      	ble.n	801995e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80198b0:	1420      	asrs	r0, r4, #16
 80198b2:	d454      	bmi.n	801995e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80198b4:	9902      	ldr	r1, [sp, #8]
 80198b6:	4288      	cmp	r0, r1
 80198b8:	da51      	bge.n	801995e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80198ba:	9903      	ldr	r1, [sp, #12]
 80198bc:	fb00 2001 	mla	r0, r0, r1, r2
 80198c0:	9904      	ldr	r1, [sp, #16]
 80198c2:	0842      	lsrs	r2, r0, #1
 80198c4:	07c0      	lsls	r0, r0, #31
 80198c6:	5c8a      	ldrb	r2, [r1, r2]
 80198c8:	bf54      	ite	pl
 80198ca:	f002 020f 	andpl.w	r2, r2, #15
 80198ce:	1112      	asrmi	r2, r2, #4
 80198d0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80198d4:	b2d2      	uxtb	r2, r2
 80198d6:	2a00      	cmp	r2, #0
 80198d8:	d041      	beq.n	801995e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 80198da:	492d      	ldr	r1, [pc, #180]	; (8019990 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c4>)
 80198dc:	2aff      	cmp	r2, #255	; 0xff
 80198de:	6808      	ldr	r0, [r1, #0]
 80198e0:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 80198e4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80198e8:	fa5f fc80 	uxtb.w	ip, r0
 80198ec:	ea4f 0047 	mov.w	r0, r7, lsl #1
 80198f0:	d03b      	beq.n	801996a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29e>
 80198f2:	fa1f f982 	uxth.w	r9, r2
 80198f6:	4438      	add	r0, r7
 80198f8:	43d2      	mvns	r2, r2
 80198fa:	f816 e000 	ldrb.w	lr, [r6, r0]
 80198fe:	fb1c fc09 	smulbb	ip, ip, r9
 8019902:	fb1a fa09 	smulbb	sl, sl, r9
 8019906:	b2d2      	uxtb	r2, r2
 8019908:	fb1b f909 	smulbb	r9, fp, r9
 801990c:	fb0e cc02 	mla	ip, lr, r2, ip
 8019910:	fa1f fc8c 	uxth.w	ip, ip
 8019914:	f10c 0e01 	add.w	lr, ip, #1
 8019918:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801991c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019920:	f806 c000 	strb.w	ip, [r6, r0]
 8019924:	4430      	add	r0, r6
 8019926:	f890 c001 	ldrb.w	ip, [r0, #1]
 801992a:	fb0c aa02 	mla	sl, ip, r2, sl
 801992e:	fa1f fa8a 	uxth.w	sl, sl
 8019932:	f10a 0c01 	add.w	ip, sl, #1
 8019936:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801993a:	f890 c002 	ldrb.w	ip, [r0, #2]
 801993e:	fb0c 9902 	mla	r9, ip, r2, r9
 8019942:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019946:	fa1f f989 	uxth.w	r9, r9
 801994a:	f880 a001 	strb.w	sl, [r0, #1]
 801994e:	f109 0201 	add.w	r2, r9, #1
 8019952:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8019956:	ea4f 2929 	mov.w	r9, r9, asr #8
 801995a:	f880 9002 	strb.w	r9, [r0, #2]
 801995e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019960:	3701      	adds	r7, #1
 8019962:	4415      	add	r5, r2
 8019964:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019966:	4414      	add	r4, r2
 8019968:	e75a      	b.n	8019820 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x154>
 801996a:	4438      	add	r0, r7
 801996c:	f806 c000 	strb.w	ip, [r6, r0]
 8019970:	4430      	add	r0, r6
 8019972:	f880 a001 	strb.w	sl, [r0, #1]
 8019976:	f880 b002 	strb.w	fp, [r0, #2]
 801997a:	e7f0      	b.n	801995e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801997c:	f800 7c03 	strb.w	r7, [r0, #-3]
 8019980:	f800 9c02 	strb.w	r9, [r0, #-2]
 8019984:	f800 bc01 	strb.w	fp, [r0, #-1]
 8019988:	e741      	b.n	801980e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801998a:	b007      	add	sp, #28
 801998c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019990:	2000b288 	.word	0x2000b288

08019994 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8019994:	4770      	bx	lr

08019996 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8019996:	4770      	bx	lr

08019998 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8019998:	4770      	bx	lr

0801999a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801999a:	4770      	bx	lr

0801999c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801999c:	4770      	bx	lr

0801999e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801999e:	4770      	bx	lr

080199a0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80199a0:	4770      	bx	lr

080199a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80199a2:	4770      	bx	lr

080199a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80199a4:	4770      	bx	lr

080199a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80199a6:	4770      	bx	lr

080199a8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80199a8:	4770      	bx	lr

080199aa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80199aa:	4770      	bx	lr

080199ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80199ac:	4770      	bx	lr

080199ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80199ae:	4770      	bx	lr

080199b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80199b0:	4770      	bx	lr

080199b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80199b2:	4770      	bx	lr

080199b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80199b4:	4770      	bx	lr

080199b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80199b6:	4770      	bx	lr

080199b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80199b8:	4770      	bx	lr

080199ba <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80199ba:	4770      	bx	lr

080199bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80199bc:	2bff      	cmp	r3, #255	; 0xff
 80199be:	b508      	push	{r3, lr}
 80199c0:	d04f      	beq.n	8019a62 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 80199c2:	2a2c      	cmp	r2, #44	; 0x2c
 80199c4:	d032      	beq.n	8019a2c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 80199c6:	d80f      	bhi.n	80199e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 80199c8:	2a08      	cmp	r2, #8
 80199ca:	d046      	beq.n	8019a5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80199cc:	d805      	bhi.n	80199da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 80199ce:	2a04      	cmp	r2, #4
 80199d0:	d041      	beq.n	8019a56 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80199d2:	2a05      	cmp	r2, #5
 80199d4:	d03d      	beq.n	8019a52 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80199d6:	2000      	movs	r0, #0
 80199d8:	e027      	b.n	8019a2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80199da:	2a0a      	cmp	r2, #10
 80199dc:	d03d      	beq.n	8019a5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80199de:	d301      	bcc.n	80199e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 80199e0:	2a0b      	cmp	r2, #11
 80199e2:	d1f8      	bne.n	80199d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80199e4:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80199e6:	e020      	b.n	8019a2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80199e8:	2a30      	cmp	r2, #48	; 0x30
 80199ea:	d038      	beq.n	8019a5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 80199ec:	d808      	bhi.n	8019a00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 80199ee:	2a2e      	cmp	r2, #46	; 0x2e
 80199f0:	684b      	ldr	r3, [r1, #4]
 80199f2:	d029      	beq.n	8019a48 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 80199f4:	d90b      	bls.n	8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 80199f6:	781b      	ldrb	r3, [r3, #0]
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d1ec      	bne.n	80199d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80199fc:	6a00      	ldr	r0, [r0, #32]
 80199fe:	e014      	b.n	8019a2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019a00:	2a32      	cmp	r2, #50	; 0x32
 8019a02:	d02c      	beq.n	8019a5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8019a04:	d301      	bcc.n	8019a0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 8019a06:	2a33      	cmp	r2, #51	; 0x33
 8019a08:	d1e5      	bne.n	80199d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8019a0a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019a0c:	e00d      	b.n	8019a2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019a0e:	781b      	ldrb	r3, [r3, #0]
 8019a10:	2b01      	cmp	r3, #1
 8019a12:	d009      	beq.n	8019a28 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8019a14:	d3f2      	bcc.n	80199fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 8019a16:	2b02      	cmp	r3, #2
 8019a18:	d1dd      	bne.n	80199d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8019a1a:	4b39      	ldr	r3, [pc, #228]	; (8019b00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8019a1c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8019a20:	4a38      	ldr	r2, [pc, #224]	; (8019b04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8019a22:	4839      	ldr	r0, [pc, #228]	; (8019b08 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 8019a24:	f008 fc8c 	bl	8022340 <__assert_func>
 8019a28:	6900      	ldr	r0, [r0, #16]
 8019a2a:	bd08      	pop	{r3, pc}
 8019a2c:	684b      	ldr	r3, [r1, #4]
 8019a2e:	781b      	ldrb	r3, [r3, #0]
 8019a30:	2b01      	cmp	r3, #1
 8019a32:	d007      	beq.n	8019a44 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 8019a34:	d30b      	bcc.n	8019a4e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8019a36:	2b02      	cmp	r3, #2
 8019a38:	d1cd      	bne.n	80199d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8019a3a:	4b31      	ldr	r3, [pc, #196]	; (8019b00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8019a3c:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8019a40:	4a30      	ldr	r2, [pc, #192]	; (8019b04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8019a42:	e7ee      	b.n	8019a22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019a44:	6880      	ldr	r0, [r0, #8]
 8019a46:	e7f0      	b.n	8019a2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019a48:	781b      	ldrb	r3, [r3, #0]
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d1c3      	bne.n	80199d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8019a4e:	6980      	ldr	r0, [r0, #24]
 8019a50:	e7eb      	b.n	8019a2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019a52:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019a54:	e7e9      	b.n	8019a2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019a56:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019a58:	e7e7      	b.n	8019a2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019a5a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8019a5c:	e7e5      	b.n	8019a2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019a5e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8019a60:	e7e3      	b.n	8019a2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019a62:	2a2c      	cmp	r2, #44	; 0x2c
 8019a64:	d030      	beq.n	8019ac8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 8019a66:	d80f      	bhi.n	8019a88 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 8019a68:	2a08      	cmp	r2, #8
 8019a6a:	d044      	beq.n	8019af6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8019a6c:	d805      	bhi.n	8019a7a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8019a6e:	2a04      	cmp	r2, #4
 8019a70:	d03f      	beq.n	8019af2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8019a72:	2a05      	cmp	r2, #5
 8019a74:	d1af      	bne.n	80199d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8019a76:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8019a78:	e7d7      	b.n	8019a2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019a7a:	2a0a      	cmp	r2, #10
 8019a7c:	d03b      	beq.n	8019af6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8019a7e:	d301      	bcc.n	8019a84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 8019a80:	2a0b      	cmp	r2, #11
 8019a82:	d1a8      	bne.n	80199d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8019a84:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8019a86:	e7d0      	b.n	8019a2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019a88:	2a30      	cmp	r2, #48	; 0x30
 8019a8a:	d036      	beq.n	8019afa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8019a8c:	d808      	bhi.n	8019aa0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 8019a8e:	2a2e      	cmp	r2, #46	; 0x2e
 8019a90:	684b      	ldr	r3, [r1, #4]
 8019a92:	d028      	beq.n	8019ae6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8019a94:	d90b      	bls.n	8019aae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 8019a96:	781b      	ldrb	r3, [r3, #0]
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	d19c      	bne.n	80199d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8019a9c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8019a9e:	e7c4      	b.n	8019a2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019aa0:	2a32      	cmp	r2, #50	; 0x32
 8019aa2:	d02a      	beq.n	8019afa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8019aa4:	d301      	bcc.n	8019aaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8019aa6:	2a33      	cmp	r2, #51	; 0x33
 8019aa8:	d195      	bne.n	80199d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8019aaa:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8019aac:	e7bd      	b.n	8019a2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019aae:	781b      	ldrb	r3, [r3, #0]
 8019ab0:	2b01      	cmp	r3, #1
 8019ab2:	d007      	beq.n	8019ac4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 8019ab4:	d3f2      	bcc.n	8019a9c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8019ab6:	2b02      	cmp	r3, #2
 8019ab8:	d18d      	bne.n	80199d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8019aba:	4b11      	ldr	r3, [pc, #68]	; (8019b00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8019abc:	f240 31e1 	movw	r1, #993	; 0x3e1
 8019ac0:	4a10      	ldr	r2, [pc, #64]	; (8019b04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8019ac2:	e7ae      	b.n	8019a22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019ac4:	6940      	ldr	r0, [r0, #20]
 8019ac6:	e7b0      	b.n	8019a2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019ac8:	684b      	ldr	r3, [r1, #4]
 8019aca:	781b      	ldrb	r3, [r3, #0]
 8019acc:	2b01      	cmp	r3, #1
 8019ace:	d008      	beq.n	8019ae2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 8019ad0:	d30d      	bcc.n	8019aee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8019ad2:	2b02      	cmp	r3, #2
 8019ad4:	f47f af7f 	bne.w	80199d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8019ad8:	4b09      	ldr	r3, [pc, #36]	; (8019b00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8019ada:	f240 31ed 	movw	r1, #1005	; 0x3ed
 8019ade:	4a09      	ldr	r2, [pc, #36]	; (8019b04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8019ae0:	e79f      	b.n	8019a22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019ae2:	68c0      	ldr	r0, [r0, #12]
 8019ae4:	e7a1      	b.n	8019a2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019ae6:	781b      	ldrb	r3, [r3, #0]
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	f47f af74 	bne.w	80199d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8019aee:	69c0      	ldr	r0, [r0, #28]
 8019af0:	e79b      	b.n	8019a2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019af2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8019af4:	e799      	b.n	8019a2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019af6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8019af8:	e797      	b.n	8019a2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019afa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8019afc:	e795      	b.n	8019a2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8019afe:	bf00      	nop
 8019b00:	0802781c 	.word	0x0802781c
 8019b04:	08027fcf 	.word	0x08027fcf
 8019b08:	08027868 	.word	0x08027868

08019b0c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8019b0c:	b508      	push	{r3, lr}
 8019b0e:	4b06      	ldr	r3, [pc, #24]	; (8019b28 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 8019b10:	8818      	ldrh	r0, [r3, #0]
 8019b12:	b928      	cbnz	r0, 8019b20 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 8019b14:	4b05      	ldr	r3, [pc, #20]	; (8019b2c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 8019b16:	21d7      	movs	r1, #215	; 0xd7
 8019b18:	4a05      	ldr	r2, [pc, #20]	; (8019b30 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 8019b1a:	4806      	ldr	r0, [pc, #24]	; (8019b34 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 8019b1c:	f008 fc10 	bl	8022340 <__assert_func>
 8019b20:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019b24:	b280      	uxth	r0, r0
 8019b26:	bd08      	pop	{r3, pc}
 8019b28:	2000b25a 	.word	0x2000b25a
 8019b2c:	08027ab7 	.word	0x08027ab7
 8019b30:	08027f94 	.word	0x08027f94
 8019b34:	08027af9 	.word	0x08027af9

08019b38 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8019b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b3c:	4616      	mov	r6, r2
 8019b3e:	b087      	sub	sp, #28
 8019b40:	461f      	mov	r7, r3
 8019b42:	b33b      	cbz	r3, 8019b94 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8019b44:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019b48:	b323      	cbz	r3, 8019b94 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8019b4a:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019b4e:	b30b      	cbz	r3, 8019b94 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8019b50:	6808      	ldr	r0, [r1, #0]
 8019b52:	ab04      	add	r3, sp, #16
 8019b54:	6849      	ldr	r1, [r1, #4]
 8019b56:	4c5a      	ldr	r4, [pc, #360]	; (8019cc0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 8019b58:	c303      	stmia	r3!, {r0, r1}
 8019b5a:	a804      	add	r0, sp, #16
 8019b5c:	f7fb fdac 	bl	80156b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019b60:	6820      	ldr	r0, [r4, #0]
 8019b62:	6803      	ldr	r3, [r0, #0]
 8019b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019b66:	4798      	blx	r3
 8019b68:	2fff      	cmp	r7, #255	; 0xff
 8019b6a:	4623      	mov	r3, r4
 8019b6c:	d015      	beq.n	8019b9a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8019b6e:	f010 0f08 	tst.w	r0, #8
 8019b72:	d015      	beq.n	8019ba0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 8019b74:	6818      	ldr	r0, [r3, #0]
 8019b76:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8019b7a:	6801      	ldr	r1, [r0, #0]
 8019b7c:	9401      	str	r4, [sp, #4]
 8019b7e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8019b82:	9702      	str	r7, [sp, #8]
 8019b84:	9400      	str	r4, [sp, #0]
 8019b86:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019b8a:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 8019b8c:	4631      	mov	r1, r6
 8019b8e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019b92:	47a0      	blx	r4
 8019b94:	b007      	add	sp, #28
 8019b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b9a:	f010 0f02 	tst.w	r0, #2
 8019b9e:	e7e8      	b.n	8019b72 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3a>
 8019ba0:	6818      	ldr	r0, [r3, #0]
 8019ba2:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8019ba6:	6803      	ldr	r3, [r0, #0]
 8019ba8:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8019bac:	6a1b      	ldr	r3, [r3, #32]
 8019bae:	4798      	blx	r3
 8019bb0:	4944      	ldr	r1, [pc, #272]	; (8019cc4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x18c>)
 8019bb2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8019bb6:	2fff      	cmp	r7, #255	; 0xff
 8019bb8:	f8b1 c000 	ldrh.w	ip, [r1]
 8019bbc:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8019bc0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019bc4:	4688      	mov	r8, r1
 8019bc6:	fb0c 2303 	mla	r3, ip, r3, r2
 8019bca:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8019bce:	b2f2      	uxtb	r2, r6
 8019bd0:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 8019bd4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019bd8:	4418      	add	r0, r3
 8019bda:	d112      	bne.n	8019c02 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xca>
 8019bdc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019be0:	2100      	movs	r1, #0
 8019be2:	42a9      	cmp	r1, r5
 8019be4:	da66      	bge.n	8019cb4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 8019be6:	4603      	mov	r3, r0
 8019be8:	2700      	movs	r7, #0
 8019bea:	42a7      	cmp	r7, r4
 8019bec:	f103 0303 	add.w	r3, r3, #3
 8019bf0:	da57      	bge.n	8019ca2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16a>
 8019bf2:	f803 2c03 	strb.w	r2, [r3, #-3]
 8019bf6:	3701      	adds	r7, #1
 8019bf8:	f803 ec02 	strb.w	lr, [r3, #-2]
 8019bfc:	f803 cc01 	strb.w	ip, [r3, #-1]
 8019c00:	e7f3      	b.n	8019bea <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 8019c02:	b2bb      	uxth	r3, r7
 8019c04:	f04f 0800 	mov.w	r8, #0
 8019c08:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019c0c:	fb0c fc03 	mul.w	ip, ip, r3
 8019c10:	fb0e fe03 	mul.w	lr, lr, r3
 8019c14:	435a      	muls	r2, r3
 8019c16:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 8019c1a:	460f      	mov	r7, r1
 8019c1c:	b29b      	uxth	r3, r3
 8019c1e:	45a8      	cmp	r8, r5
 8019c20:	da48      	bge.n	8019cb4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>
 8019c22:	4601      	mov	r1, r0
 8019c24:	f04f 0a00 	mov.w	sl, #0
 8019c28:	45a2      	cmp	sl, r4
 8019c2a:	f101 0103 	add.w	r1, r1, #3
 8019c2e:	da2f      	bge.n	8019c90 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x158>
 8019c30:	f811 9c03 	ldrb.w	r9, [r1, #-3]
 8019c34:	f10a 0a01 	add.w	sl, sl, #1
 8019c38:	fb19 f903 	smulbb	r9, r9, r3
 8019c3c:	4491      	add	r9, r2
 8019c3e:	fa1f f989 	uxth.w	r9, r9
 8019c42:	f109 0b01 	add.w	fp, r9, #1
 8019c46:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019c4a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019c4e:	f801 9c03 	strb.w	r9, [r1, #-3]
 8019c52:	f811 9c02 	ldrb.w	r9, [r1, #-2]
 8019c56:	fb19 f903 	smulbb	r9, r9, r3
 8019c5a:	44f1      	add	r9, lr
 8019c5c:	fa1f f989 	uxth.w	r9, r9
 8019c60:	f109 0b01 	add.w	fp, r9, #1
 8019c64:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019c68:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019c6c:	f801 9c02 	strb.w	r9, [r1, #-2]
 8019c70:	f811 9c01 	ldrb.w	r9, [r1, #-1]
 8019c74:	fb19 f903 	smulbb	r9, r9, r3
 8019c78:	44e1      	add	r9, ip
 8019c7a:	fa1f f989 	uxth.w	r9, r9
 8019c7e:	f109 0b01 	add.w	fp, r9, #1
 8019c82:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019c86:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019c8a:	f801 9c01 	strb.w	r9, [r1, #-1]
 8019c8e:	e7cb      	b.n	8019c28 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf0>
 8019c90:	8839      	ldrh	r1, [r7, #0]
 8019c92:	f108 0801 	add.w	r8, r8, #1
 8019c96:	1b09      	subs	r1, r1, r4
 8019c98:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019c9c:	4431      	add	r1, r6
 8019c9e:	4408      	add	r0, r1
 8019ca0:	e7bd      	b.n	8019c1e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe6>
 8019ca2:	f8b8 3000 	ldrh.w	r3, [r8]
 8019ca6:	3101      	adds	r1, #1
 8019ca8:	1b1b      	subs	r3, r3, r4
 8019caa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019cae:	4433      	add	r3, r6
 8019cb0:	4418      	add	r0, r3
 8019cb2:	e796      	b.n	8019be2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 8019cb4:	4b02      	ldr	r3, [pc, #8]	; (8019cc0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x188>)
 8019cb6:	6818      	ldr	r0, [r3, #0]
 8019cb8:	6803      	ldr	r3, [r0, #0]
 8019cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cbc:	4798      	blx	r3
 8019cbe:	e769      	b.n	8019b94 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8019cc0:	2000b260 	.word	0x2000b260
 8019cc4:	2000b25a 	.word	0x2000b25a

08019cc8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8019cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ccc:	b08d      	sub	sp, #52	; 0x34
 8019cce:	460c      	mov	r4, r1
 8019cd0:	4617      	mov	r7, r2
 8019cd2:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
 8019cd6:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 8019cda:	2e00      	cmp	r6, #0
 8019cdc:	d04a      	beq.n	8019d74 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8019cde:	6810      	ldr	r0, [r2, #0]
 8019ce0:	ad08      	add	r5, sp, #32
 8019ce2:	6851      	ldr	r1, [r2, #4]
 8019ce4:	c503      	stmia	r5!, {r0, r1}
 8019ce6:	6818      	ldr	r0, [r3, #0]
 8019ce8:	ad0a      	add	r5, sp, #40	; 0x28
 8019cea:	6859      	ldr	r1, [r3, #4]
 8019cec:	c503      	stmia	r5!, {r0, r1}
 8019cee:	a808      	add	r0, sp, #32
 8019cf0:	f7fb fce2 	bl	80156b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019cf4:	4639      	mov	r1, r7
 8019cf6:	a80a      	add	r0, sp, #40	; 0x28
 8019cf8:	4f59      	ldr	r7, [pc, #356]	; (8019e60 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>)
 8019cfa:	f7fb fcc5 	bl	8015688 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019cfe:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8019d02:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8019d06:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8019d0a:	6838      	ldr	r0, [r7, #0]
 8019d0c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019d10:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 8019d14:	f9bd 802e 	ldrsh.w	r8, [sp, #46]	; 0x2e
 8019d18:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019d1c:	440c      	add	r4, r1
 8019d1e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8019d22:	440a      	add	r2, r1
 8019d24:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8019d28:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8019d2c:	4413      	add	r3, r2
 8019d2e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8019d32:	6803      	ldr	r3, [r0, #0]
 8019d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019d36:	4798      	blx	r3
 8019d38:	2eff      	cmp	r6, #255	; 0xff
 8019d3a:	f000 8089 	beq.w	8019e50 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x188>
 8019d3e:	0743      	lsls	r3, r0, #29
 8019d40:	d405      	bmi.n	8019d4e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x86>
 8019d42:	f1b9 0f00 	cmp.w	r9, #0
 8019d46:	d018      	beq.n	8019d7a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8019d48:	f010 0f10 	tst.w	r0, #16
 8019d4c:	d015      	beq.n	8019d7a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8019d4e:	6838      	ldr	r0, [r7, #0]
 8019d50:	b2ad      	uxth	r5, r5
 8019d52:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8019d56:	6801      	ldr	r1, [r0, #0]
 8019d58:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8019d5c:	9500      	str	r5, [sp, #0]
 8019d5e:	e9cd 6903 	strd	r6, r9, [sp, #12]
 8019d62:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8019d66:	9602      	str	r6, [sp, #8]
 8019d68:	fa1f f688 	uxth.w	r6, r8
 8019d6c:	9601      	str	r6, [sp, #4]
 8019d6e:	6b8d      	ldr	r5, [r1, #56]	; 0x38
 8019d70:	4621      	mov	r1, r4
 8019d72:	47a8      	blx	r5
 8019d74:	b00d      	add	sp, #52	; 0x34
 8019d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d7a:	6838      	ldr	r0, [r7, #0]
 8019d7c:	6803      	ldr	r3, [r0, #0]
 8019d7e:	6a1b      	ldr	r3, [r3, #32]
 8019d80:	4798      	blx	r3
 8019d82:	4a38      	ldr	r2, [pc, #224]	; (8019e64 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>)
 8019d84:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8019d88:	2eff      	cmp	r6, #255	; 0xff
 8019d8a:	8813      	ldrh	r3, [r2, #0]
 8019d8c:	f9bd c02a 	ldrsh.w	ip, [sp, #42]	; 0x2a
 8019d90:	fb0c 1303 	mla	r3, ip, r3, r1
 8019d94:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8019d98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019d9c:	4418      	add	r0, r3
 8019d9e:	d032      	beq.n	8019e06 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8019da0:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
 8019da4:	f04f 0c00 	mov.w	ip, #0
 8019da8:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 8019dac:	9306      	str	r3, [sp, #24]
 8019dae:	45c4      	cmp	ip, r8
 8019db0:	da49      	bge.n	8019e46 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 8019db2:	4686      	mov	lr, r0
 8019db4:	46a1      	mov	r9, r4
 8019db6:	eba9 0304 	sub.w	r3, r9, r4
 8019dba:	428b      	cmp	r3, r1
 8019dbc:	da13      	bge.n	8019de6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11e>
 8019dbe:	f819 3b01 	ldrb.w	r3, [r9], #1
 8019dc2:	f89e b000 	ldrb.w	fp, [lr]
 8019dc6:	9307      	str	r3, [sp, #28]
 8019dc8:	9b06      	ldr	r3, [sp, #24]
 8019dca:	fb1b fb03 	smulbb	fp, fp, r3
 8019dce:	9b07      	ldr	r3, [sp, #28]
 8019dd0:	fb03 b306 	mla	r3, r3, r6, fp
 8019dd4:	b29b      	uxth	r3, r3
 8019dd6:	f103 0b01 	add.w	fp, r3, #1
 8019dda:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8019dde:	121b      	asrs	r3, r3, #8
 8019de0:	f80e 3b01 	strb.w	r3, [lr], #1
 8019de4:	e7e7      	b.n	8019db6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xee>
 8019de6:	8813      	ldrh	r3, [r2, #0]
 8019de8:	f10c 0c01 	add.w	ip, ip, #1
 8019dec:	1b5b      	subs	r3, r3, r5
 8019dee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019df2:	4453      	add	r3, sl
 8019df4:	4418      	add	r0, r3
 8019df6:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8019dfa:	1b5b      	subs	r3, r3, r5
 8019dfc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019e00:	4453      	add	r3, sl
 8019e02:	441c      	add	r4, r3
 8019e04:	e7d3      	b.n	8019dae <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe6>
 8019e06:	2600      	movs	r6, #0
 8019e08:	ea21 7ce1 	bic.w	ip, r1, r1, asr #31
 8019e0c:	4546      	cmp	r6, r8
 8019e0e:	da1a      	bge.n	8019e46 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17e>
 8019e10:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
 8019e14:	4623      	mov	r3, r4
 8019e16:	eba3 0904 	sub.w	r9, r3, r4
 8019e1a:	4589      	cmp	r9, r1
 8019e1c:	da04      	bge.n	8019e28 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>
 8019e1e:	f813 9b01 	ldrb.w	r9, [r3], #1
 8019e22:	f80e 9f01 	strb.w	r9, [lr, #1]!
 8019e26:	e7f6      	b.n	8019e16 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x14e>
 8019e28:	8813      	ldrh	r3, [r2, #0]
 8019e2a:	3601      	adds	r6, #1
 8019e2c:	1b5b      	subs	r3, r3, r5
 8019e2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019e32:	4463      	add	r3, ip
 8019e34:	4418      	add	r0, r3
 8019e36:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8019e3a:	1b5b      	subs	r3, r3, r5
 8019e3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019e40:	4463      	add	r3, ip
 8019e42:	441c      	add	r4, r3
 8019e44:	e7e2      	b.n	8019e0c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 8019e46:	6838      	ldr	r0, [r7, #0]
 8019e48:	6803      	ldr	r3, [r0, #0]
 8019e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e4c:	4798      	blx	r3
 8019e4e:	e791      	b.n	8019d74 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8019e50:	f1b9 0f00 	cmp.w	r9, #0
 8019e54:	f47f af78 	bne.w	8019d48 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x80>
 8019e58:	f010 0f01 	tst.w	r0, #1
 8019e5c:	e776      	b.n	8019d4c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x84>
 8019e5e:	bf00      	nop
 8019e60:	2000b260 	.word	0x2000b260
 8019e64:	2000b25a 	.word	0x2000b25a

08019e68 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019e68:	b510      	push	{r4, lr}
 8019e6a:	4604      	mov	r4, r0
 8019e6c:	2104      	movs	r1, #4
 8019e6e:	f007 fcee 	bl	802184e <_ZdlPvj>
 8019e72:	4620      	mov	r0, r4
 8019e74:	bd10      	pop	{r4, pc}

08019e76 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8019e76:	b510      	push	{r4, lr}
 8019e78:	4604      	mov	r4, r0
 8019e7a:	2104      	movs	r1, #4
 8019e7c:	f007 fce7 	bl	802184e <_ZdlPvj>
 8019e80:	4620      	mov	r0, r4
 8019e82:	bd10      	pop	{r4, pc}

08019e84 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8019e84:	b510      	push	{r4, lr}
 8019e86:	4604      	mov	r4, r0
 8019e88:	2104      	movs	r1, #4
 8019e8a:	f007 fce0 	bl	802184e <_ZdlPvj>
 8019e8e:	4620      	mov	r0, r4
 8019e90:	bd10      	pop	{r4, pc}

08019e92 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8019e92:	b510      	push	{r4, lr}
 8019e94:	4604      	mov	r4, r0
 8019e96:	2104      	movs	r1, #4
 8019e98:	f007 fcd9 	bl	802184e <_ZdlPvj>
 8019e9c:	4620      	mov	r0, r4
 8019e9e:	bd10      	pop	{r4, pc}

08019ea0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8019ea0:	b510      	push	{r4, lr}
 8019ea2:	4604      	mov	r4, r0
 8019ea4:	2104      	movs	r1, #4
 8019ea6:	f007 fcd2 	bl	802184e <_ZdlPvj>
 8019eaa:	4620      	mov	r0, r4
 8019eac:	bd10      	pop	{r4, pc}

08019eae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8019eae:	b510      	push	{r4, lr}
 8019eb0:	4604      	mov	r4, r0
 8019eb2:	2104      	movs	r1, #4
 8019eb4:	f007 fccb 	bl	802184e <_ZdlPvj>
 8019eb8:	4620      	mov	r0, r4
 8019eba:	bd10      	pop	{r4, pc}

08019ebc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8019ebc:	b510      	push	{r4, lr}
 8019ebe:	4604      	mov	r4, r0
 8019ec0:	2104      	movs	r1, #4
 8019ec2:	f007 fcc4 	bl	802184e <_ZdlPvj>
 8019ec6:	4620      	mov	r0, r4
 8019ec8:	bd10      	pop	{r4, pc}

08019eca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8019eca:	b510      	push	{r4, lr}
 8019ecc:	4604      	mov	r4, r0
 8019ece:	2104      	movs	r1, #4
 8019ed0:	f007 fcbd 	bl	802184e <_ZdlPvj>
 8019ed4:	4620      	mov	r0, r4
 8019ed6:	bd10      	pop	{r4, pc}

08019ed8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019ed8:	b510      	push	{r4, lr}
 8019eda:	4604      	mov	r4, r0
 8019edc:	2104      	movs	r1, #4
 8019ede:	f007 fcb6 	bl	802184e <_ZdlPvj>
 8019ee2:	4620      	mov	r0, r4
 8019ee4:	bd10      	pop	{r4, pc}

08019ee6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8019ee6:	b510      	push	{r4, lr}
 8019ee8:	4604      	mov	r4, r0
 8019eea:	2104      	movs	r1, #4
 8019eec:	f007 fcaf 	bl	802184e <_ZdlPvj>
 8019ef0:	4620      	mov	r0, r4
 8019ef2:	bd10      	pop	{r4, pc}

08019ef4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8019ef4:	b510      	push	{r4, lr}
 8019ef6:	4604      	mov	r4, r0
 8019ef8:	2104      	movs	r1, #4
 8019efa:	f007 fca8 	bl	802184e <_ZdlPvj>
 8019efe:	4620      	mov	r0, r4
 8019f00:	bd10      	pop	{r4, pc}

08019f02 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8019f02:	b510      	push	{r4, lr}
 8019f04:	4604      	mov	r4, r0
 8019f06:	2104      	movs	r1, #4
 8019f08:	f007 fca1 	bl	802184e <_ZdlPvj>
 8019f0c:	4620      	mov	r0, r4
 8019f0e:	bd10      	pop	{r4, pc}

08019f10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8019f10:	b510      	push	{r4, lr}
 8019f12:	4604      	mov	r4, r0
 8019f14:	2104      	movs	r1, #4
 8019f16:	f007 fc9a 	bl	802184e <_ZdlPvj>
 8019f1a:	4620      	mov	r0, r4
 8019f1c:	bd10      	pop	{r4, pc}

08019f1e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8019f1e:	b510      	push	{r4, lr}
 8019f20:	4604      	mov	r4, r0
 8019f22:	2104      	movs	r1, #4
 8019f24:	f007 fc93 	bl	802184e <_ZdlPvj>
 8019f28:	4620      	mov	r0, r4
 8019f2a:	bd10      	pop	{r4, pc}

08019f2c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8019f2c:	b510      	push	{r4, lr}
 8019f2e:	4604      	mov	r4, r0
 8019f30:	2104      	movs	r1, #4
 8019f32:	f007 fc8c 	bl	802184e <_ZdlPvj>
 8019f36:	4620      	mov	r0, r4
 8019f38:	bd10      	pop	{r4, pc}

08019f3a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8019f3a:	b510      	push	{r4, lr}
 8019f3c:	4604      	mov	r4, r0
 8019f3e:	2104      	movs	r1, #4
 8019f40:	f007 fc85 	bl	802184e <_ZdlPvj>
 8019f44:	4620      	mov	r0, r4
 8019f46:	bd10      	pop	{r4, pc}

08019f48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8019f48:	b510      	push	{r4, lr}
 8019f4a:	4604      	mov	r4, r0
 8019f4c:	2104      	movs	r1, #4
 8019f4e:	f007 fc7e 	bl	802184e <_ZdlPvj>
 8019f52:	4620      	mov	r0, r4
 8019f54:	bd10      	pop	{r4, pc}

08019f56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8019f56:	b510      	push	{r4, lr}
 8019f58:	4604      	mov	r4, r0
 8019f5a:	2104      	movs	r1, #4
 8019f5c:	f007 fc77 	bl	802184e <_ZdlPvj>
 8019f60:	4620      	mov	r0, r4
 8019f62:	bd10      	pop	{r4, pc}

08019f64 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8019f64:	b510      	push	{r4, lr}
 8019f66:	4604      	mov	r4, r0
 8019f68:	2104      	movs	r1, #4
 8019f6a:	f007 fc70 	bl	802184e <_ZdlPvj>
 8019f6e:	4620      	mov	r0, r4
 8019f70:	bd10      	pop	{r4, pc}

08019f72 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8019f72:	b510      	push	{r4, lr}
 8019f74:	4604      	mov	r4, r0
 8019f76:	2104      	movs	r1, #4
 8019f78:	f007 fc69 	bl	802184e <_ZdlPvj>
 8019f7c:	4620      	mov	r0, r4
 8019f7e:	bd10      	pop	{r4, pc}

08019f80 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8019f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f84:	4d9e      	ldr	r5, [pc, #632]	; (801a200 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8019f86:	4690      	mov	r8, r2
 8019f88:	b08f      	sub	sp, #60	; 0x3c
 8019f8a:	4604      	mov	r4, r0
 8019f8c:	682a      	ldr	r2, [r5, #0]
 8019f8e:	4689      	mov	r9, r1
 8019f90:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8019f94:	2a02      	cmp	r2, #2
 8019f96:	d106      	bne.n	8019fa6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8019f98:	4b9a      	ldr	r3, [pc, #616]	; (801a204 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8019f9a:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8019f9e:	4a9a      	ldr	r2, [pc, #616]	; (801a208 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8019fa0:	489a      	ldr	r0, [pc, #616]	; (801a20c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 8019fa2:	f008 f9cd 	bl	8022340 <__assert_func>
 8019fa6:	ae0e      	add	r6, sp, #56	; 0x38
 8019fa8:	f826 3d24 	strh.w	r3, [r6, #-36]!
 8019fac:	4630      	mov	r0, r6
 8019fae:	f7fe f8b3 	bl	8018118 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019fb2:	6823      	ldr	r3, [r4, #0]
 8019fb4:	4607      	mov	r7, r0
 8019fb6:	4620      	mov	r0, r4
 8019fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fba:	4798      	blx	r3
 8019fbc:	4287      	cmp	r7, r0
 8019fbe:	d004      	beq.n	8019fca <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8019fc0:	4b93      	ldr	r3, [pc, #588]	; (801a210 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 8019fc2:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8019fc6:	4a90      	ldr	r2, [pc, #576]	; (801a208 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8019fc8:	e7ea      	b.n	8019fa0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8019fca:	4630      	mov	r0, r6
 8019fcc:	f7fe f820 	bl	8018010 <_ZNK8touchgfx6Bitmap7getDataEv>
 8019fd0:	4607      	mov	r7, r0
 8019fd2:	b920      	cbnz	r0, 8019fde <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8019fd4:	4b8f      	ldr	r3, [pc, #572]	; (801a214 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 8019fd6:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8019fda:	4a8b      	ldr	r2, [pc, #556]	; (801a208 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8019fdc:	e7e0      	b.n	8019fa0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8019fde:	f8d8 0000 	ldr.w	r0, [r8]
 8019fe2:	ab06      	add	r3, sp, #24
 8019fe4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019fe8:	f9b8 a000 	ldrsh.w	sl, [r8]
 8019fec:	c303      	stmia	r3!, {r0, r1}
 8019fee:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8019ff2:	ab08      	add	r3, sp, #32
 8019ff4:	f8d9 0000 	ldr.w	r0, [r9]
 8019ff8:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 8019ffc:	c303      	stmia	r3!, {r0, r1}
 8019ffe:	4630      	mov	r0, r6
 801a000:	f7fd fefe 	bl	8017e00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a004:	4680      	mov	r8, r0
 801a006:	4630      	mov	r0, r6
 801a008:	4e83      	ldr	r6, [pc, #524]	; (801a218 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801a00a:	f7fd ff33 	bl	8017e74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a00e:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801a012:	f10d 0920 	add.w	r9, sp, #32
 801a016:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801a01a:	a806      	add	r0, sp, #24
 801a01c:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801a020:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801a024:	f7fb fb48 	bl	80156b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a028:	4648      	mov	r0, r9
 801a02a:	f7fb fb45 	bl	80156b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a02e:	a80a      	add	r0, sp, #40	; 0x28
 801a030:	f7fb fb42 	bl	80156b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a034:	4b79      	ldr	r3, [pc, #484]	; (801a21c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801a036:	2100      	movs	r1, #0
 801a038:	f9b6 2000 	ldrsh.w	r2, [r6]
 801a03c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a040:	4648      	mov	r0, r9
 801a042:	910c      	str	r1, [sp, #48]	; 0x30
 801a044:	a90c      	add	r1, sp, #48	; 0x30
 801a046:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801a04a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801a04e:	f7f7 ffc1 	bl	8011fd4 <_ZN8touchgfx4RectaNERKS0_>
 801a052:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801a056:	9602      	str	r6, [sp, #8]
 801a058:	f1bc 0f00 	cmp.w	ip, #0
 801a05c:	f000 80a4 	beq.w	801a1a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801a060:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 801a064:	2e00      	cmp	r6, #0
 801a066:	f000 809f 	beq.w	801a1a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801a06a:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801a06e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801a072:	4288      	cmp	r0, r1
 801a074:	db36      	blt.n	801a0e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801a076:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801a07a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801a07e:	429a      	cmp	r2, r3
 801a080:	db30      	blt.n	801a0e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801a082:	4460      	add	r0, ip
 801a084:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801a088:	4461      	add	r1, ip
 801a08a:	b200      	sxth	r0, r0
 801a08c:	b209      	sxth	r1, r1
 801a08e:	4288      	cmp	r0, r1
 801a090:	dc28      	bgt.n	801a0e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801a092:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801a096:	4432      	add	r2, r6
 801a098:	440b      	add	r3, r1
 801a09a:	b212      	sxth	r2, r2
 801a09c:	b21b      	sxth	r3, r3
 801a09e:	429a      	cmp	r2, r3
 801a0a0:	dc20      	bgt.n	801a0e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801a0a2:	6823      	ldr	r3, [r4, #0]
 801a0a4:	4620      	mov	r0, r4
 801a0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a0a8:	4798      	blx	r3
 801a0aa:	4682      	mov	sl, r0
 801a0ac:	6828      	ldr	r0, [r5, #0]
 801a0ae:	6803      	ldr	r3, [r0, #0]
 801a0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a0b2:	4798      	blx	r3
 801a0b4:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801a0b8:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801a0bc:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801a0c0:	9303      	str	r3, [sp, #12]
 801a0c2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801a0c6:	1a9b      	subs	r3, r3, r2
 801a0c8:	b29b      	uxth	r3, r3
 801a0ca:	b21c      	sxth	r4, r3
 801a0cc:	2c00      	cmp	r4, #0
 801a0ce:	dc0e      	bgt.n	801a0ee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16e>
 801a0d0:	b134      	cbz	r4, 801a0e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801a0d2:	f8ad 2020 	strh.w	r2, [sp, #32]
 801a0d6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801a0da:	4413      	add	r3, r2
 801a0dc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801a0e0:	463c      	mov	r4, r7
 801a0e2:	e00b      	b.n	801a0fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x17c>
 801a0e4:	4b4e      	ldr	r3, [pc, #312]	; (801a220 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801a0e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801a0ea:	4a47      	ldr	r2, [pc, #284]	; (801a208 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 801a0ec:	e758      	b.n	8019fa0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801a0ee:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a0f2:	ebab 0303 	sub.w	r3, fp, r3
 801a0f6:	443c      	add	r4, r7
 801a0f8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801a0fc:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801a100:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801a104:	1a9b      	subs	r3, r3, r2
 801a106:	b29b      	uxth	r3, r3
 801a108:	b219      	sxth	r1, r3
 801a10a:	2900      	cmp	r1, #0
 801a10c:	dd50      	ble.n	801a1b0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801a10e:	9a03      	ldr	r2, [sp, #12]
 801a110:	fb02 4401 	mla	r4, r2, r1, r4
 801a114:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801a118:	1ad3      	subs	r3, r2, r3
 801a11a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801a11e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801a122:	f1bc 0f00 	cmp.w	ip, #0
 801a126:	dd3f      	ble.n	801a1a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801a128:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801a12c:	2e00      	cmp	r6, #0
 801a12e:	dd3b      	ble.n	801a1a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801a130:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801a134:	2203      	movs	r2, #3
 801a136:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801a13a:	fb0a f801 	mul.w	r8, sl, r1
 801a13e:	fb13 8802 	smlabb	r8, r3, r2, r8
 801a142:	9a02      	ldr	r2, [sp, #8]
 801a144:	4480      	add	r8, r0
 801a146:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 801a14a:	8812      	ldrh	r2, [r2, #0]
 801a14c:	4584      	cmp	ip, r0
 801a14e:	eba2 0303 	sub.w	r3, r2, r3
 801a152:	bfa8      	it	ge
 801a154:	4684      	movge	ip, r0
 801a156:	459c      	cmp	ip, r3
 801a158:	bfa8      	it	ge
 801a15a:	469c      	movge	ip, r3
 801a15c:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801a160:	429e      	cmp	r6, r3
 801a162:	bfa8      	it	ge
 801a164:	461e      	movge	r6, r3
 801a166:	4b2d      	ldr	r3, [pc, #180]	; (801a21c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801a168:	881b      	ldrh	r3, [r3, #0]
 801a16a:	1a59      	subs	r1, r3, r1
 801a16c:	4633      	mov	r3, r6
 801a16e:	428e      	cmp	r6, r1
 801a170:	bfa8      	it	ge
 801a172:	460b      	movge	r3, r1
 801a174:	4562      	cmp	r2, ip
 801a176:	9302      	str	r3, [sp, #8]
 801a178:	d12d      	bne.n	801a1d6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801a17a:	455a      	cmp	r2, fp
 801a17c:	d12b      	bne.n	801a1d6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x256>
 801a17e:	6828      	ldr	r0, [r5, #0]
 801a180:	6803      	ldr	r3, [r0, #0]
 801a182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a184:	4798      	blx	r3
 801a186:	07c3      	lsls	r3, r0, #31
 801a188:	d51b      	bpl.n	801a1c2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x242>
 801a18a:	6828      	ldr	r0, [r5, #0]
 801a18c:	9b02      	ldr	r3, [sp, #8]
 801a18e:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801a192:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801a196:	6803      	ldr	r3, [r0, #0]
 801a198:	f8cd b000 	str.w	fp, [sp]
 801a19c:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801a19e:	4623      	mov	r3, r4
 801a1a0:	e899 0006 	ldmia.w	r9, {r1, r2}
 801a1a4:	47a8      	blx	r5
 801a1a6:	4607      	mov	r7, r0
 801a1a8:	4638      	mov	r0, r7
 801a1aa:	b00f      	add	sp, #60	; 0x3c
 801a1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1b0:	bf1f      	itttt	ne
 801a1b2:	f8ad 2022 	strhne.w	r2, [sp, #34]	; 0x22
 801a1b6:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801a1ba:	189b      	addne	r3, r3, r2
 801a1bc:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801a1c0:	e7ad      	b.n	801a11e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x19e>
 801a1c2:	6828      	ldr	r0, [r5, #0]
 801a1c4:	4642      	mov	r2, r8
 801a1c6:	4621      	mov	r1, r4
 801a1c8:	6803      	ldr	r3, [r0, #0]
 801a1ca:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801a1cc:	9b02      	ldr	r3, [sp, #8]
 801a1ce:	fb03 f30a 	mul.w	r3, r3, sl
 801a1d2:	47a8      	blx	r5
 801a1d4:	e7e8      	b.n	801a1a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801a1d6:	eb0c 0b4c 	add.w	fp, ip, ip, lsl #1
 801a1da:	f04f 0900 	mov.w	r9, #0
 801a1de:	9b02      	ldr	r3, [sp, #8]
 801a1e0:	454b      	cmp	r3, r9
 801a1e2:	dde1      	ble.n	801a1a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 801a1e4:	6828      	ldr	r0, [r5, #0]
 801a1e6:	4642      	mov	r2, r8
 801a1e8:	4621      	mov	r1, r4
 801a1ea:	44d0      	add	r8, sl
 801a1ec:	6803      	ldr	r3, [r0, #0]
 801a1ee:	f109 0901 	add.w	r9, r9, #1
 801a1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a1f4:	461e      	mov	r6, r3
 801a1f6:	465b      	mov	r3, fp
 801a1f8:	47b0      	blx	r6
 801a1fa:	9b03      	ldr	r3, [sp, #12]
 801a1fc:	441c      	add	r4, r3
 801a1fe:	e7ee      	b.n	801a1de <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x25e>
 801a200:	2000b260 	.word	0x2000b260
 801a204:	0802789a 	.word	0x0802789a
 801a208:	08028079 	.word	0x08028079
 801a20c:	08027868 	.word	0x08027868
 801a210:	0802794e 	.word	0x0802794e
 801a214:	080279a3 	.word	0x080279a3
 801a218:	2000b25a 	.word	0x2000b25a
 801a21c:	2000b25c 	.word	0x2000b25c
 801a220:	080279e1 	.word	0x080279e1

0801a224 <_ZN8touchgfx8LCD24bppC1Ev>:
 801a224:	4a0b      	ldr	r2, [pc, #44]	; (801a254 <_ZN8touchgfx8LCD24bppC1Ev+0x30>)
 801a226:	6002      	str	r2, [r0, #0]
 801a228:	2200      	movs	r2, #0
 801a22a:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801a22e:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801a232:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801a236:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801a23a:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801a23e:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801a242:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801a246:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801a24a:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801a24e:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801a252:	4770      	bx	lr
 801a254:	08027cc4 	.word	0x08027cc4

0801a258 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801a258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a25c:	b093      	sub	sp, #76	; 0x4c
 801a25e:	880c      	ldrh	r4, [r1, #0]
 801a260:	4605      	mov	r5, r0
 801a262:	460f      	mov	r7, r1
 801a264:	4691      	mov	r9, r2
 801a266:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 801a26a:	b12c      	cbz	r4, 801a278 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 801a26c:	4b71      	ldr	r3, [pc, #452]	; (801a434 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801a26e:	2167      	movs	r1, #103	; 0x67
 801a270:	4a71      	ldr	r2, [pc, #452]	; (801a438 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 801a272:	4872      	ldr	r0, [pc, #456]	; (801a43c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801a274:	f008 f864 	bl	8022340 <__assert_func>
 801a278:	6810      	ldr	r0, [r2, #0]
 801a27a:	ae0e      	add	r6, sp, #56	; 0x38
 801a27c:	6851      	ldr	r1, [r2, #4]
 801a27e:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 801a444 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>
 801a282:	c603      	stmia	r6!, {r0, r1}
 801a284:	6818      	ldr	r0, [r3, #0]
 801a286:	ae10      	add	r6, sp, #64	; 0x40
 801a288:	6859      	ldr	r1, [r3, #4]
 801a28a:	c603      	stmia	r6!, {r0, r1}
 801a28c:	a80e      	add	r0, sp, #56	; 0x38
 801a28e:	f7fb fa13 	bl	80156b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a292:	4649      	mov	r1, r9
 801a294:	a810      	add	r0, sp, #64	; 0x40
 801a296:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 801a440 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 801a29a:	f7fb f9f5 	bl	8015688 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a29e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801a2a2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801a2a6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801a2aa:	f8d9 0000 	ldr.w	r0, [r9]
 801a2ae:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a2b2:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 801a2b6:	440d      	add	r5, r1
 801a2b8:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801a2bc:	440a      	add	r2, r1
 801a2be:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801a2c2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801a2c6:	4413      	add	r3, r2
 801a2c8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a2cc:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 801a2d0:	930b      	str	r3, [sp, #44]	; 0x2c
 801a2d2:	6803      	ldr	r3, [r0, #0]
 801a2d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a2d8:	4798      	blx	r3
 801a2da:	2801      	cmp	r0, #1
 801a2dc:	d11e      	bne.n	801a31c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc4>
 801a2de:	220b      	movs	r2, #11
 801a2e0:	9008      	str	r0, [sp, #32]
 801a2e2:	b2b6      	uxth	r6, r6
 801a2e4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a2e8:	9207      	str	r2, [sp, #28]
 801a2ea:	4629      	mov	r1, r5
 801a2ec:	f8ba 2000 	ldrh.w	r2, [sl]
 801a2f0:	f8cd 8010 	str.w	r8, [sp, #16]
 801a2f4:	9601      	str	r6, [sp, #4]
 801a2f6:	e9cd 0205 	strd	r0, r2, [sp, #20]
 801a2fa:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801a2fe:	9203      	str	r2, [sp, #12]
 801a300:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801a304:	9202      	str	r2, [sp, #8]
 801a306:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801a30a:	9200      	str	r2, [sp, #0]
 801a30c:	463a      	mov	r2, r7
 801a30e:	f8d9 0000 	ldr.w	r0, [r9]
 801a312:	f7f8 fd95 	bl	8012e40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801a316:	b013      	add	sp, #76	; 0x4c
 801a318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a31c:	f8d9 0000 	ldr.w	r0, [r9]
 801a320:	ea26 79e6 	bic.w	r9, r6, r6, asr #31
 801a324:	6803      	ldr	r3, [r0, #0]
 801a326:	6a1b      	ldr	r3, [r3, #32]
 801a328:	4798      	blx	r3
 801a32a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801a32e:	f8ba 3000 	ldrh.w	r3, [sl]
 801a332:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801a336:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801a33a:	fb01 2303 	mla	r3, r1, r3, r2
 801a33e:	4621      	mov	r1, r4
 801a340:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a344:	4418      	add	r0, r3
 801a346:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801a34a:	930c      	str	r3, [sp, #48]	; 0x30
 801a34c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a34e:	4299      	cmp	r1, r3
 801a350:	da6a      	bge.n	801a428 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d0>
 801a352:	1cc2      	adds	r2, r0, #3
 801a354:	46aa      	mov	sl, r5
 801a356:	ebaa 0305 	sub.w	r3, sl, r5
 801a35a:	429e      	cmp	r6, r3
 801a35c:	dd55      	ble.n	801a40a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b2>
 801a35e:	2404      	movs	r4, #4
 801a360:	f81a 3b01 	ldrb.w	r3, [sl], #1
 801a364:	fb14 4303 	smlabb	r3, r4, r3, r4
 801a368:	eb07 0e03 	add.w	lr, r7, r3
 801a36c:	f89e 4003 	ldrb.w	r4, [lr, #3]
 801a370:	b184      	cbz	r4, 801a394 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801a372:	2cff      	cmp	r4, #255	; 0xff
 801a374:	f817 b003 	ldrb.w	fp, [r7, r3]
 801a378:	d10e      	bne.n	801a398 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801a37a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801a37e:	d10b      	bne.n	801a398 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 801a380:	f802 bc03 	strb.w	fp, [r2, #-3]
 801a384:	f89e 3001 	ldrb.w	r3, [lr, #1]
 801a388:	f802 3c02 	strb.w	r3, [r2, #-2]
 801a38c:	f89e 3002 	ldrb.w	r3, [lr, #2]
 801a390:	f802 3c01 	strb.w	r3, [r2, #-1]
 801a394:	3203      	adds	r2, #3
 801a396:	e7de      	b.n	801a356 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfe>
 801a398:	fb08 f404 	mul.w	r4, r8, r4
 801a39c:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 801a3a0:	1c63      	adds	r3, r4, #1
 801a3a2:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801a3a6:	121b      	asrs	r3, r3, #8
 801a3a8:	b29c      	uxth	r4, r3
 801a3aa:	43db      	mvns	r3, r3
 801a3ac:	fb1b fb04 	smulbb	fp, fp, r4
 801a3b0:	b2db      	uxtb	r3, r3
 801a3b2:	fb0c bc03 	mla	ip, ip, r3, fp
 801a3b6:	fa1f fc8c 	uxth.w	ip, ip
 801a3ba:	f10c 0b01 	add.w	fp, ip, #1
 801a3be:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801a3c2:	f812 bc02 	ldrb.w	fp, [r2, #-2]
 801a3c6:	fb1b fb03 	smulbb	fp, fp, r3
 801a3ca:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a3ce:	f802 cc03 	strb.w	ip, [r2, #-3]
 801a3d2:	f89e c001 	ldrb.w	ip, [lr, #1]
 801a3d6:	fb0c bc04 	mla	ip, ip, r4, fp
 801a3da:	fa1f fc8c 	uxth.w	ip, ip
 801a3de:	f10c 0b01 	add.w	fp, ip, #1
 801a3e2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801a3e6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a3ea:	f802 cc02 	strb.w	ip, [r2, #-2]
 801a3ee:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 801a3f2:	f89e e002 	ldrb.w	lr, [lr, #2]
 801a3f6:	fb1c f303 	smulbb	r3, ip, r3
 801a3fa:	fb0e 3304 	mla	r3, lr, r4, r3
 801a3fe:	b29b      	uxth	r3, r3
 801a400:	1c5c      	adds	r4, r3, #1
 801a402:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801a406:	121b      	asrs	r3, r3, #8
 801a408:	e7c2      	b.n	801a390 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 801a40a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a40c:	3101      	adds	r1, #1
 801a40e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a410:	881b      	ldrh	r3, [r3, #0]
 801a412:	1b9b      	subs	r3, r3, r6
 801a414:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a418:	4413      	add	r3, r2
 801a41a:	4418      	add	r0, r3
 801a41c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801a420:	1b9b      	subs	r3, r3, r6
 801a422:	444b      	add	r3, r9
 801a424:	441d      	add	r5, r3
 801a426:	e791      	b.n	801a34c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801a428:	4b05      	ldr	r3, [pc, #20]	; (801a440 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801a42a:	6818      	ldr	r0, [r3, #0]
 801a42c:	6803      	ldr	r3, [r0, #0]
 801a42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a430:	4798      	blx	r3
 801a432:	e770      	b.n	801a316 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 801a434:	080277cc 	.word	0x080277cc
 801a438:	08027e9b 	.word	0x08027e9b
 801a43c:	08027868 	.word	0x08027868
 801a440:	2000b260 	.word	0x2000b260
 801a444:	2000b25a 	.word	0x2000b25a

0801a448 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801a448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a44c:	4614      	mov	r4, r2
 801a44e:	880a      	ldrh	r2, [r1, #0]
 801a450:	b091      	sub	sp, #68	; 0x44
 801a452:	4680      	mov	r8, r0
 801a454:	2a01      	cmp	r2, #1
 801a456:	460e      	mov	r6, r1
 801a458:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801a45c:	d005      	beq.n	801a46a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22>
 801a45e:	4b6d      	ldr	r3, [pc, #436]	; (801a614 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801a460:	21b5      	movs	r1, #181	; 0xb5
 801a462:	4a6d      	ldr	r2, [pc, #436]	; (801a618 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 801a464:	486d      	ldr	r0, [pc, #436]	; (801a61c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 801a466:	f007 ff6b 	bl	8022340 <__assert_func>
 801a46a:	6820      	ldr	r0, [r4, #0]
 801a46c:	ad0c      	add	r5, sp, #48	; 0x30
 801a46e:	6861      	ldr	r1, [r4, #4]
 801a470:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801a620 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>
 801a474:	c503      	stmia	r5!, {r0, r1}
 801a476:	6818      	ldr	r0, [r3, #0]
 801a478:	ad0e      	add	r5, sp, #56	; 0x38
 801a47a:	6859      	ldr	r1, [r3, #4]
 801a47c:	c503      	stmia	r5!, {r0, r1}
 801a47e:	a80c      	add	r0, sp, #48	; 0x30
 801a480:	f7fb f91a 	bl	80156b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a484:	4621      	mov	r1, r4
 801a486:	a80e      	add	r0, sp, #56	; 0x38
 801a488:	f7fb f8fe 	bl	8015688 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a48c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801a490:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801a494:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801a498:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 801a49c:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a4a0:	eb08 0401 	add.w	r4, r8, r1
 801a4a4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801a4a8:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801a624 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>
 801a4ac:	440a      	add	r2, r1
 801a4ae:	f8d8 0000 	ldr.w	r0, [r8]
 801a4b2:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801a4b6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801a4ba:	4413      	add	r3, r2
 801a4bc:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801a4c0:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801a4c4:	930a      	str	r3, [sp, #40]	; 0x28
 801a4c6:	6803      	ldr	r3, [r0, #0]
 801a4c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a4cc:	4798      	blx	r3
 801a4ce:	2801      	cmp	r0, #1
 801a4d0:	d11e      	bne.n	801a510 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc8>
 801a4d2:	220b      	movs	r2, #11
 801a4d4:	9008      	str	r0, [sp, #32]
 801a4d6:	b2ad      	uxth	r5, r5
 801a4d8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801a4dc:	9207      	str	r2, [sp, #28]
 801a4de:	4621      	mov	r1, r4
 801a4e0:	f8b9 2000 	ldrh.w	r2, [r9]
 801a4e4:	9501      	str	r5, [sp, #4]
 801a4e6:	9206      	str	r2, [sp, #24]
 801a4e8:	2200      	movs	r2, #0
 801a4ea:	e9cd 7204 	strd	r7, r2, [sp, #16]
 801a4ee:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801a4f2:	9203      	str	r2, [sp, #12]
 801a4f4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801a4f8:	9202      	str	r2, [sp, #8]
 801a4fa:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801a4fe:	9200      	str	r2, [sp, #0]
 801a500:	4632      	mov	r2, r6
 801a502:	f8d8 0000 	ldr.w	r0, [r8]
 801a506:	f7f8 fc9b 	bl	8012e40 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801a50a:	b011      	add	sp, #68	; 0x44
 801a50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a510:	f8d8 0000 	ldr.w	r0, [r8]
 801a514:	ea25 78e5 	bic.w	r8, r5, r5, asr #31
 801a518:	6803      	ldr	r3, [r0, #0]
 801a51a:	6a1b      	ldr	r3, [r3, #32]
 801a51c:	4798      	blx	r3
 801a51e:	f8b9 3000 	ldrh.w	r3, [r9]
 801a522:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801a526:	f04f 0e00 	mov.w	lr, #0
 801a52a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801a52e:	fa1f f987 	uxth.w	r9, r7
 801a532:	fb01 2303 	mla	r3, r1, r3, r2
 801a536:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
 801a53a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a53e:	b289      	uxth	r1, r1
 801a540:	4418      	add	r0, r3
 801a542:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801a546:	930b      	str	r3, [sp, #44]	; 0x2c
 801a548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a54a:	459e      	cmp	lr, r3
 801a54c:	da5c      	bge.n	801a608 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801a54e:	1cc3      	adds	r3, r0, #3
 801a550:	46a2      	mov	sl, r4
 801a552:	ebaa 0204 	sub.w	r2, sl, r4
 801a556:	4295      	cmp	r5, r2
 801a558:	dd46      	ble.n	801a5e8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a0>
 801a55a:	f04f 0c03 	mov.w	ip, #3
 801a55e:	f04f 0b04 	mov.w	fp, #4
 801a562:	f81a 2b01 	ldrb.w	r2, [sl], #1
 801a566:	2fff      	cmp	r7, #255	; 0xff
 801a568:	fb1c b202 	smlabb	r2, ip, r2, fp
 801a56c:	eb06 0c02 	add.w	ip, r6, r2
 801a570:	f816 b002 	ldrb.w	fp, [r6, r2]
 801a574:	d02f      	beq.n	801a5d6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18e>
 801a576:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 801a57a:	fb12 f201 	smulbb	r2, r2, r1
 801a57e:	fb0b 2209 	mla	r2, fp, r9, r2
 801a582:	b292      	uxth	r2, r2
 801a584:	f102 0b01 	add.w	fp, r2, #1
 801a588:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801a58c:	f813 bc02 	ldrb.w	fp, [r3, #-2]
 801a590:	fb1b fb01 	smulbb	fp, fp, r1
 801a594:	1212      	asrs	r2, r2, #8
 801a596:	f803 2c03 	strb.w	r2, [r3, #-3]
 801a59a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801a59e:	fb02 b209 	mla	r2, r2, r9, fp
 801a5a2:	b292      	uxth	r2, r2
 801a5a4:	f102 0b01 	add.w	fp, r2, #1
 801a5a8:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 801a5ac:	1212      	asrs	r2, r2, #8
 801a5ae:	f803 2c02 	strb.w	r2, [r3, #-2]
 801a5b2:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801a5b6:	f813 cc01 	ldrb.w	ip, [r3, #-1]
 801a5ba:	fb1c fc01 	smulbb	ip, ip, r1
 801a5be:	fb02 c209 	mla	r2, r2, r9, ip
 801a5c2:	b292      	uxth	r2, r2
 801a5c4:	f102 0c01 	add.w	ip, r2, #1
 801a5c8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801a5cc:	1212      	asrs	r2, r2, #8
 801a5ce:	f803 2c01 	strb.w	r2, [r3, #-1]
 801a5d2:	3303      	adds	r3, #3
 801a5d4:	e7bd      	b.n	801a552 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10a>
 801a5d6:	f803 bc03 	strb.w	fp, [r3, #-3]
 801a5da:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801a5de:	f803 2c02 	strb.w	r2, [r3, #-2]
 801a5e2:	f89c 2002 	ldrb.w	r2, [ip, #2]
 801a5e6:	e7f2      	b.n	801a5ce <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x186>
 801a5e8:	4b0d      	ldr	r3, [pc, #52]	; (801a620 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 801a5ea:	f10e 0e01 	add.w	lr, lr, #1
 801a5ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a5f0:	881b      	ldrh	r3, [r3, #0]
 801a5f2:	1b5b      	subs	r3, r3, r5
 801a5f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a5f8:	4413      	add	r3, r2
 801a5fa:	4418      	add	r0, r3
 801a5fc:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801a600:	1b5b      	subs	r3, r3, r5
 801a602:	4443      	add	r3, r8
 801a604:	441c      	add	r4, r3
 801a606:	e79f      	b.n	801a548 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x100>
 801a608:	4b06      	ldr	r3, [pc, #24]	; (801a624 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801a60a:	6818      	ldr	r0, [r3, #0]
 801a60c:	6803      	ldr	r3, [r0, #0]
 801a60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a610:	4798      	blx	r3
 801a612:	e77a      	b.n	801a50a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc2>
 801a614:	080276d8 	.word	0x080276d8
 801a618:	08027d8e 	.word	0x08027d8e
 801a61c:	08027868 	.word	0x08027868
 801a620:	2000b25a 	.word	0x2000b25a
 801a624:	2000b260 	.word	0x2000b260

0801a628 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801a628:	b570      	push	{r4, r5, r6, lr}
 801a62a:	780d      	ldrb	r5, [r1, #0]
 801a62c:	f89d 4010 	ldrb.w	r4, [sp, #16]
 801a630:	2d01      	cmp	r5, #1
 801a632:	d00d      	beq.n	801a650 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 801a634:	d307      	bcc.n	801a646 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 801a636:	2d02      	cmp	r5, #2
 801a638:	d10f      	bne.n	801a65a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 801a63a:	4b08      	ldr	r3, [pc, #32]	; (801a65c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 801a63c:	215a      	movs	r1, #90	; 0x5a
 801a63e:	4a08      	ldr	r2, [pc, #32]	; (801a660 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 801a640:	4808      	ldr	r0, [pc, #32]	; (801a664 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 801a642:	f007 fe7d 	bl	8022340 <__assert_func>
 801a646:	9404      	str	r4, [sp, #16]
 801a648:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a64c:	f7ff be04 	b.w	801a258 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801a650:	9404      	str	r4, [sp, #16]
 801a652:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a656:	f7ff bef7 	b.w	801a448 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801a65a:	bd70      	pop	{r4, r5, r6, pc}
 801a65c:	0802768d 	.word	0x0802768d
 801a660:	08027d0c 	.word	0x08027d0c
 801a664:	08027868 	.word	0x08027868

0801a668 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801a668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a66c:	b08b      	sub	sp, #44	; 0x2c
 801a66e:	460c      	mov	r4, r1
 801a670:	4680      	mov	r8, r0
 801a672:	469a      	mov	sl, r3
 801a674:	6808      	ldr	r0, [r1, #0]
 801a676:	ab06      	add	r3, sp, #24
 801a678:	6849      	ldr	r1, [r1, #4]
 801a67a:	c303      	stmia	r3!, {r0, r1}
 801a67c:	6810      	ldr	r0, [r2, #0]
 801a67e:	ab08      	add	r3, sp, #32
 801a680:	6851      	ldr	r1, [r2, #4]
 801a682:	c303      	stmia	r3!, {r0, r1}
 801a684:	a806      	add	r0, sp, #24
 801a686:	f7fb f817 	bl	80156b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a68a:	4621      	mov	r1, r4
 801a68c:	a808      	add	r0, sp, #32
 801a68e:	4c61      	ldr	r4, [pc, #388]	; (801a814 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801a690:	f7fa fffa 	bl	8015688 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a694:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801a698:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801a69c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801a6a0:	6820      	ldr	r0, [r4, #0]
 801a6a2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a6a6:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801a6aa:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801a6ae:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801a6b2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801a6b6:	440a      	add	r2, r1
 801a6b8:	f8ad 2020 	strh.w	r2, [sp, #32]
 801a6bc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a6c0:	4413      	add	r3, r2
 801a6c2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a6c6:	6803      	ldr	r3, [r0, #0]
 801a6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a6ca:	4798      	blx	r3
 801a6cc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801a6d0:	d118      	bne.n	801a704 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801a6d2:	f010 0f20 	tst.w	r0, #32
 801a6d6:	6820      	ldr	r0, [r4, #0]
 801a6d8:	d017      	beq.n	801a70a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801a6da:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801a6de:	b2bf      	uxth	r7, r7
 801a6e0:	6801      	ldr	r1, [r0, #0]
 801a6e2:	9402      	str	r4, [sp, #8]
 801a6e4:	fa1f f489 	uxth.w	r4, r9
 801a6e8:	f8cd a00c 	str.w	sl, [sp, #12]
 801a6ec:	9401      	str	r4, [sp, #4]
 801a6ee:	9700      	str	r7, [sp, #0]
 801a6f0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801a6f4:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801a6f6:	4641      	mov	r1, r8
 801a6f8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801a6fc:	47a0      	blx	r4
 801a6fe:	b00b      	add	sp, #44	; 0x2c
 801a700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a704:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a708:	e7e5      	b.n	801a6d6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801a70a:	6803      	ldr	r3, [r0, #0]
 801a70c:	6a1b      	ldr	r3, [r3, #32]
 801a70e:	4798      	blx	r3
 801a710:	4b41      	ldr	r3, [pc, #260]	; (801a818 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b0>)
 801a712:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801a716:	f04f 0c00 	mov.w	ip, #0
 801a71a:	881a      	ldrh	r2, [r3, #0]
 801a71c:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801a720:	fb04 1202 	mla	r2, r4, r2, r1
 801a724:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a728:	4410      	add	r0, r2
 801a72a:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801a72e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801a732:	0092      	lsls	r2, r2, #2
 801a734:	9105      	str	r1, [sp, #20]
 801a736:	9204      	str	r2, [sp, #16]
 801a738:	45cc      	cmp	ip, r9
 801a73a:	da65      	bge.n	801a808 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a0>
 801a73c:	1cc4      	adds	r4, r0, #3
 801a73e:	f108 0504 	add.w	r5, r8, #4
 801a742:	f04f 0e00 	mov.w	lr, #0
 801a746:	45be      	cmp	lr, r7
 801a748:	da4d      	bge.n	801a7e6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17e>
 801a74a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801a74e:	b181      	cbz	r1, 801a772 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801a750:	29ff      	cmp	r1, #255	; 0xff
 801a752:	f815 bc04 	ldrb.w	fp, [r5, #-4]
 801a756:	d111      	bne.n	801a77c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801a758:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801a75c:	d10e      	bne.n	801a77c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x114>
 801a75e:	f804 bc03 	strb.w	fp, [r4, #-3]
 801a762:	f815 2c03 	ldrb.w	r2, [r5, #-3]
 801a766:	f804 2c02 	strb.w	r2, [r4, #-2]
 801a76a:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 801a76e:	f804 2c01 	strb.w	r2, [r4, #-1]
 801a772:	f10e 0e01 	add.w	lr, lr, #1
 801a776:	3403      	adds	r4, #3
 801a778:	3504      	adds	r5, #4
 801a77a:	e7e4      	b.n	801a746 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801a77c:	fb0a f101 	mul.w	r1, sl, r1
 801a780:	1c4a      	adds	r2, r1, #1
 801a782:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801a786:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801a78a:	1212      	asrs	r2, r2, #8
 801a78c:	b296      	uxth	r6, r2
 801a78e:	43d2      	mvns	r2, r2
 801a790:	fb1b fb06 	smulbb	fp, fp, r6
 801a794:	b2d2      	uxtb	r2, r2
 801a796:	fb01 b102 	mla	r1, r1, r2, fp
 801a79a:	b289      	uxth	r1, r1
 801a79c:	f101 0b01 	add.w	fp, r1, #1
 801a7a0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801a7a4:	f814 bc02 	ldrb.w	fp, [r4, #-2]
 801a7a8:	fb1b fb02 	smulbb	fp, fp, r2
 801a7ac:	1209      	asrs	r1, r1, #8
 801a7ae:	f804 1c03 	strb.w	r1, [r4, #-3]
 801a7b2:	f815 1c03 	ldrb.w	r1, [r5, #-3]
 801a7b6:	fb01 b106 	mla	r1, r1, r6, fp
 801a7ba:	b289      	uxth	r1, r1
 801a7bc:	f101 0b01 	add.w	fp, r1, #1
 801a7c0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801a7c4:	1209      	asrs	r1, r1, #8
 801a7c6:	f804 1c02 	strb.w	r1, [r4, #-2]
 801a7ca:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801a7ce:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801a7d2:	fb11 f202 	smulbb	r2, r1, r2
 801a7d6:	fb0b 2206 	mla	r2, fp, r6, r2
 801a7da:	b292      	uxth	r2, r2
 801a7dc:	1c56      	adds	r6, r2, #1
 801a7de:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801a7e2:	1212      	asrs	r2, r2, #8
 801a7e4:	e7c3      	b.n	801a76e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801a7e6:	881a      	ldrh	r2, [r3, #0]
 801a7e8:	f10c 0c01 	add.w	ip, ip, #1
 801a7ec:	9905      	ldr	r1, [sp, #20]
 801a7ee:	1bd2      	subs	r2, r2, r7
 801a7f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a7f4:	440a      	add	r2, r1
 801a7f6:	9904      	ldr	r1, [sp, #16]
 801a7f8:	4410      	add	r0, r2
 801a7fa:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801a7fe:	1bd2      	subs	r2, r2, r7
 801a800:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801a804:	4490      	add	r8, r2
 801a806:	e797      	b.n	801a738 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801a808:	4b02      	ldr	r3, [pc, #8]	; (801a814 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>)
 801a80a:	6818      	ldr	r0, [r3, #0]
 801a80c:	6803      	ldr	r3, [r0, #0]
 801a80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a810:	4798      	blx	r3
 801a812:	e774      	b.n	801a6fe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801a814:	2000b260 	.word	0x2000b260
 801a818:	2000b25a 	.word	0x2000b25a

0801a81c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801a81c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a820:	b085      	sub	sp, #20
 801a822:	4606      	mov	r6, r0
 801a824:	460c      	mov	r4, r1
 801a826:	4691      	mov	r9, r2
 801a828:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801a82c:	4698      	mov	r8, r3
 801a82e:	b385      	cbz	r5, 801a892 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801a830:	4608      	mov	r0, r1
 801a832:	f7fd fae5 	bl	8017e00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a836:	4607      	mov	r7, r0
 801a838:	4620      	mov	r0, r4
 801a83a:	f7fd fb1b 	bl	8017e74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a83e:	f8ad 000e 	strh.w	r0, [sp, #14]
 801a842:	4620      	mov	r0, r4
 801a844:	f8ad 9008 	strh.w	r9, [sp, #8]
 801a848:	f8ad 800a 	strh.w	r8, [sp, #10]
 801a84c:	f8ad 700c 	strh.w	r7, [sp, #12]
 801a850:	f7fd fc62 	bl	8018118 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a854:	2801      	cmp	r0, #1
 801a856:	d00f      	beq.n	801a878 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801a858:	4620      	mov	r0, r4
 801a85a:	f7fd fc5d 	bl	8018118 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a85e:	2802      	cmp	r0, #2
 801a860:	d00a      	beq.n	801a878 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801a862:	4620      	mov	r0, r4
 801a864:	f7fd fc58 	bl	8018118 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a868:	280b      	cmp	r0, #11
 801a86a:	d005      	beq.n	801a878 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801a86c:	4b1b      	ldr	r3, [pc, #108]	; (801a8dc <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801a86e:	2142      	movs	r1, #66	; 0x42
 801a870:	4a1b      	ldr	r2, [pc, #108]	; (801a8e0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801a872:	481c      	ldr	r0, [pc, #112]	; (801a8e4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc8>)
 801a874:	f007 fd64 	bl	8022340 <__assert_func>
 801a878:	4620      	mov	r0, r4
 801a87a:	f7fd fc4d 	bl	8018118 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a87e:	2802      	cmp	r0, #2
 801a880:	4620      	mov	r0, r4
 801a882:	d109      	bne.n	801a898 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x7c>
 801a884:	f7fd fbc4 	bl	8018010 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a888:	462b      	mov	r3, r5
 801a88a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a88c:	a902      	add	r1, sp, #8
 801a88e:	f7ff feeb 	bl	801a668 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801a892:	b005      	add	sp, #20
 801a894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a898:	f7fd fc3e 	bl	8018118 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a89c:	280b      	cmp	r0, #11
 801a89e:	d10e      	bne.n	801a8be <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 801a8a0:	4620      	mov	r0, r4
 801a8a2:	f7fd fbb5 	bl	8018010 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a8a6:	4606      	mov	r6, r0
 801a8a8:	4620      	mov	r0, r4
 801a8aa:	f7fd fbe3 	bl	8018074 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801a8ae:	9500      	str	r5, [sp, #0]
 801a8b0:	4601      	mov	r1, r0
 801a8b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a8b4:	aa02      	add	r2, sp, #8
 801a8b6:	4630      	mov	r0, r6
 801a8b8:	f7ff feb6 	bl	801a628 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801a8bc:	e7e9      	b.n	801a892 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801a8be:	6833      	ldr	r3, [r6, #0]
 801a8c0:	4620      	mov	r0, r4
 801a8c2:	691f      	ldr	r7, [r3, #16]
 801a8c4:	f7fd fba4 	bl	8018010 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a8c8:	2300      	movs	r3, #0
 801a8ca:	4601      	mov	r1, r0
 801a8cc:	aa02      	add	r2, sp, #8
 801a8ce:	4630      	mov	r0, r6
 801a8d0:	e9cd 5300 	strd	r5, r3, [sp]
 801a8d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a8d6:	47b8      	blx	r7
 801a8d8:	e7db      	b.n	801a892 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801a8da:	bf00      	nop
 801a8dc:	08027726 	.word	0x08027726
 801a8e0:	08027e17 	.word	0x08027e17
 801a8e4:	08027868 	.word	0x08027868

0801a8e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801a8e8:	b570      	push	{r4, r5, r6, lr}
 801a8ea:	9d04      	ldr	r5, [sp, #16]
 801a8ec:	460c      	mov	r4, r1
 801a8ee:	4619      	mov	r1, r3
 801a8f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801a8f4:	2a0c      	cmp	r2, #12
 801a8f6:	d826      	bhi.n	801a946 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5e>
 801a8f8:	e8df f002 	tbb	[pc, r2]
 801a8fc:	200e1407 	.word	0x200e1407
 801a900:	20202020 	.word	0x20202020
 801a904:	20202020 	.word	0x20202020
 801a908:	20          	.byte	0x20
 801a909:	00          	.byte	0x00
 801a90a:	4b0f      	ldr	r3, [pc, #60]	; (801a948 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801a90c:	f240 117f 	movw	r1, #383	; 0x17f
 801a910:	4a0e      	ldr	r2, [pc, #56]	; (801a94c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801a912:	480f      	ldr	r0, [pc, #60]	; (801a950 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801a914:	f007 fd14 	bl	8022340 <__assert_func>
 801a918:	462a      	mov	r2, r5
 801a91a:	4620      	mov	r0, r4
 801a91c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a920:	f7ff bea2 	b.w	801a668 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801a924:	6802      	ldr	r2, [r0, #0]
 801a926:	2600      	movs	r6, #0
 801a928:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801a92c:	6916      	ldr	r6, [r2, #16]
 801a92e:	462b      	mov	r3, r5
 801a930:	460a      	mov	r2, r1
 801a932:	4621      	mov	r1, r4
 801a934:	46b4      	mov	ip, r6
 801a936:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a93a:	4760      	bx	ip
 801a93c:	4b05      	ldr	r3, [pc, #20]	; (801a954 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801a93e:	f240 1191 	movw	r1, #401	; 0x191
 801a942:	4a02      	ldr	r2, [pc, #8]	; (801a94c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 801a944:	e7e5      	b.n	801a912 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 801a946:	bd70      	pop	{r4, r5, r6, pc}
 801a948:	08027a41 	.word	0x08027a41
 801a94c:	080280ff 	.word	0x080280ff
 801a950:	08027868 	.word	0x08027868
 801a954:	08027a82 	.word	0x08027a82

0801a958 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801a958:	b158      	cbz	r0, 801a972 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 801a95a:	2902      	cmp	r1, #2
 801a95c:	d00f      	beq.n	801a97e <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 801a95e:	2903      	cmp	r1, #3
 801a960:	d010      	beq.n	801a984 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801a962:	2901      	cmp	r1, #1
 801a964:	d101      	bne.n	801a96a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801a966:	2001      	movs	r0, #1
 801a968:	4770      	bx	lr
 801a96a:	4b08      	ldr	r3, [pc, #32]	; (801a98c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801a96c:	8819      	ldrh	r1, [r3, #0]
 801a96e:	4248      	negs	r0, r1
 801a970:	4770      	bx	lr
 801a972:	2902      	cmp	r1, #2
 801a974:	d006      	beq.n	801a984 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 801a976:	2903      	cmp	r1, #3
 801a978:	d0f7      	beq.n	801a96a <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 801a97a:	2901      	cmp	r1, #1
 801a97c:	d1f3      	bne.n	801a966 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 801a97e:	4b03      	ldr	r3, [pc, #12]	; (801a98c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801a980:	8818      	ldrh	r0, [r3, #0]
 801a982:	4770      	bx	lr
 801a984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a988:	4770      	bx	lr
 801a98a:	bf00      	nop
 801a98c:	2000b25a 	.word	0x2000b25a

0801a990 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801a990:	b170      	cbz	r0, 801a9b0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 801a992:	2902      	cmp	r1, #2
 801a994:	d012      	beq.n	801a9bc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 801a996:	2903      	cmp	r1, #3
 801a998:	d006      	beq.n	801a9a8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801a99a:	2901      	cmp	r1, #1
 801a99c:	d001      	beq.n	801a9a2 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801a99e:	2001      	movs	r0, #1
 801a9a0:	4770      	bx	lr
 801a9a2:	4b08      	ldr	r3, [pc, #32]	; (801a9c4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801a9a4:	8818      	ldrh	r0, [r3, #0]
 801a9a6:	4770      	bx	lr
 801a9a8:	4b06      	ldr	r3, [pc, #24]	; (801a9c4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 801a9aa:	8818      	ldrh	r0, [r3, #0]
 801a9ac:	4240      	negs	r0, r0
 801a9ae:	4770      	bx	lr
 801a9b0:	2902      	cmp	r1, #2
 801a9b2:	d0f9      	beq.n	801a9a8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801a9b4:	2903      	cmp	r1, #3
 801a9b6:	d0f2      	beq.n	801a99e <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 801a9b8:	2901      	cmp	r1, #1
 801a9ba:	d1f2      	bne.n	801a9a2 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 801a9bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a9c0:	4770      	bx	lr
 801a9c2:	bf00      	nop
 801a9c4:	2000b25a 	.word	0x2000b25a

0801a9c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801a9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9cc:	b095      	sub	sp, #84	; 0x54
 801a9ce:	9109      	str	r1, [sp, #36]	; 0x24
 801a9d0:	a910      	add	r1, sp, #64	; 0x40
 801a9d2:	f9bd 5078 	ldrsh.w	r5, [sp, #120]	; 0x78
 801a9d6:	f8bd 6080 	ldrh.w	r6, [sp, #128]	; 0x80
 801a9da:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 801a9de:	f89d 809c 	ldrb.w	r8, [sp, #156]	; 0x9c
 801a9e2:	f89d 90a4 	ldrb.w	r9, [sp, #164]	; 0xa4
 801a9e6:	e881 000c 	stmia.w	r1, {r2, r3}
 801a9ea:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 801a9ee:	9306      	str	r3, [sp, #24]
 801a9f0:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801a9f4:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 801a9f8:	930e      	str	r3, [sp, #56]	; 0x38
 801a9fa:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
 801a9fe:	798f      	ldrb	r7, [r1, #6]
 801aa00:	930a      	str	r3, [sp, #40]	; 0x28
 801aa02:	7b4b      	ldrb	r3, [r1, #13]
 801aa04:	0158      	lsls	r0, r3, #5
 801aa06:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801aa0a:	4338      	orrs	r0, r7
 801aa0c:	9008      	str	r0, [sp, #32]
 801aa0e:	f000 8174 	beq.w	801acfa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801aa12:	011b      	lsls	r3, r3, #4
 801aa14:	79c8      	ldrb	r0, [r1, #7]
 801aa16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801aa1a:	4303      	orrs	r3, r0
 801aa1c:	9307      	str	r3, [sp, #28]
 801aa1e:	f000 816c 	beq.w	801acfa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801aa22:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801aa26:	b29b      	uxth	r3, r3
 801aa28:	2e00      	cmp	r6, #0
 801aa2a:	f000 8112 	beq.w	801ac52 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x28a>
 801aa2e:	1af6      	subs	r6, r6, r3
 801aa30:	b2b6      	uxth	r6, r6
 801aa32:	0433      	lsls	r3, r6, #16
 801aa34:	d502      	bpl.n	801aa3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801aa36:	1bad      	subs	r5, r5, r6
 801aa38:	2600      	movs	r6, #0
 801aa3a:	b22d      	sxth	r5, r5
 801aa3c:	f9b2 1000 	ldrsh.w	r1, [r2]
 801aa40:	a810      	add	r0, sp, #64	; 0x40
 801aa42:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801aa46:	428d      	cmp	r5, r1
 801aa48:	b28b      	uxth	r3, r1
 801aa4a:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801aa4e:	bfbf      	itttt	lt
 801aa50:	18f6      	addlt	r6, r6, r3
 801aa52:	1b75      	sublt	r5, r6, r5
 801aa54:	b2ae      	uxthlt	r6, r5
 801aa56:	460d      	movlt	r5, r1
 801aa58:	8891      	ldrh	r1, [r2, #4]
 801aa5a:	440b      	add	r3, r1
 801aa5c:	4629      	mov	r1, r5
 801aa5e:	b21b      	sxth	r3, r3
 801aa60:	930d      	str	r3, [sp, #52]	; 0x34
 801aa62:	88d3      	ldrh	r3, [r2, #6]
 801aa64:	9a06      	ldr	r2, [sp, #24]
 801aa66:	449a      	add	sl, r3
 801aa68:	fa0f f38a 	sxth.w	r3, sl
 801aa6c:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 801aa70:	930c      	str	r3, [sp, #48]	; 0x30
 801aa72:	4bb8      	ldr	r3, [pc, #736]	; (801ad54 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801aa74:	f893 b000 	ldrb.w	fp, [r3]
 801aa78:	f10b 3cff 	add.w	ip, fp, #4294967295	; 0xffffffff
 801aa7c:	f1dc 0300 	rsbs	r3, ip, #0
 801aa80:	eb43 030c 	adc.w	r3, r3, ip
 801aa84:	930b      	str	r3, [sp, #44]	; 0x2c
 801aa86:	464b      	mov	r3, r9
 801aa88:	f7fa fcf0 	bl	801546c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801aa8c:	4629      	mov	r1, r5
 801aa8e:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
 801aa92:	464b      	mov	r3, r9
 801aa94:	9a06      	ldr	r2, [sp, #24]
 801aa96:	a810      	add	r0, sp, #64	; 0x40
 801aa98:	f7fa fd00 	bl	801549c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801aa9c:	a914      	add	r1, sp, #80	; 0x50
 801aa9e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801aaa2:	a813      	add	r0, sp, #76	; 0x4c
 801aaa4:	f7fa fdda 	bl	801565c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801aaa8:	f1b9 0f00 	cmp.w	r9, #0
 801aaac:	f040 80d4 	bne.w	801ac58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x290>
 801aab0:	f1bb 0f01 	cmp.w	fp, #1
 801aab4:	f040 80d8 	bne.w	801ac68 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 801aab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	f040 8122 	bne.w	801ad04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x33c>
 801aac0:	4ba5      	ldr	r3, [pc, #660]	; (801ad58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801aac2:	6818      	ldr	r0, [r3, #0]
 801aac4:	6803      	ldr	r3, [r0, #0]
 801aac6:	6a1b      	ldr	r3, [r3, #32]
 801aac8:	4798      	blx	r3
 801aaca:	4aa4      	ldr	r2, [pc, #656]	; (801ad5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>)
 801aacc:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801aad0:	8811      	ldrh	r1, [r2, #0]
 801aad2:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801aad6:	fb01 2303 	mla	r3, r1, r3, r2
 801aada:	2201      	movs	r2, #1
 801aadc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aae0:	4590      	cmp	r8, r2
 801aae2:	4403      	add	r3, r0
 801aae4:	9307      	str	r3, [sp, #28]
 801aae6:	fa02 f308 	lsl.w	r3, r2, r8
 801aaea:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801aaee:	b2db      	uxtb	r3, r3
 801aaf0:	930f      	str	r3, [sp, #60]	; 0x3c
 801aaf2:	f000 8109 	beq.w	801ad08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x340>
 801aaf6:	f1b8 0f02 	cmp.w	r8, #2
 801aafa:	f000 813e 	beq.w	801ad7a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b2>
 801aafe:	f1b8 0f04 	cmp.w	r8, #4
 801ab02:	f000 8132 	beq.w	801ad6a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 801ab06:	b906      	cbnz	r6, 801ab0a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x142>
 801ab08:	b174      	cbz	r4, 801ab28 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x160>
 801ab0a:	fb17 6304 	smlabb	r3, r7, r4, r6
 801ab0e:	9924      	ldr	r1, [sp, #144]	; 0x90
 801ab10:	ebaa 0a04 	sub.w	sl, sl, r4
 801ab14:	fb13 f308 	smulbb	r3, r3, r8
 801ab18:	fa1f fa8a 	uxth.w	sl, sl
 801ab1c:	b29b      	uxth	r3, r3
 801ab1e:	eb01 01d3 	add.w	r1, r1, r3, lsr #3
 801ab22:	f003 0407 	and.w	r4, r3, #7
 801ab26:	9124      	str	r1, [sp, #144]	; 0x90
 801ab28:	4649      	mov	r1, r9
 801ab2a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ab2c:	f7ff ff14 	bl	801a958 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801ab30:	4649      	mov	r1, r9
 801ab32:	4683      	mov	fp, r0
 801ab34:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ab36:	f7ff ff2b 	bl	801a990 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801ab3a:	9906      	ldr	r1, [sp, #24]
 801ab3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ab3e:	1bad      	subs	r5, r5, r6
 801ab40:	1a5b      	subs	r3, r3, r1
 801ab42:	459a      	cmp	sl, r3
 801ab44:	bfa8      	it	ge
 801ab46:	469a      	movge	sl, r3
 801ab48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ab4a:	1b5d      	subs	r5, r3, r5
 801ab4c:	9b08      	ldr	r3, [sp, #32]
 801ab4e:	429d      	cmp	r5, r3
 801ab50:	bfd4      	ite	le
 801ab52:	ebc6 0605 	rsble	r6, r6, r5
 801ab56:	ebc6 0603 	rsbgt	r6, r6, r3
 801ab5a:	1bbf      	subs	r7, r7, r6
 801ab5c:	fb0b 0016 	mls	r0, fp, r6, r0
 801ab60:	fb08 f307 	mul.w	r3, r8, r7
 801ab64:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ab68:	9308      	str	r3, [sp, #32]
 801ab6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ab6c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801ab70:	930b      	str	r3, [sp, #44]	; 0x2c
 801ab72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ab74:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ab78:	930c      	str	r3, [sp, #48]	; 0x30
 801ab7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ab7c:	b2db      	uxtb	r3, r3
 801ab7e:	930d      	str	r3, [sp, #52]	; 0x34
 801ab80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ab82:	7819      	ldrb	r1, [r3, #0]
 801ab84:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801ab88:	ea26 7be6 	bic.w	fp, r6, r6, asr #31
 801ab8c:	4121      	asrs	r1, r4
 801ab8e:	9306      	str	r3, [sp, #24]
 801ab90:	fb03 0b0b 	mla	fp, r3, fp, r0
 801ab94:	b2c9      	uxtb	r1, r1
 801ab96:	f1ba 0f00 	cmp.w	sl, #0
 801ab9a:	f340 80d1 	ble.w	801ad40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801ab9e:	46b6      	mov	lr, r6
 801aba0:	9807      	ldr	r0, [sp, #28]
 801aba2:	f1be 0f00 	cmp.w	lr, #0
 801aba6:	f340 80b8 	ble.w	801ad1a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 801abaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801abac:	400b      	ands	r3, r1
 801abae:	d03e      	beq.n	801ac2e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801abb0:	fb13 f302 	smulbb	r3, r3, r2
 801abb4:	2bfe      	cmp	r3, #254	; 0xfe
 801abb6:	dd03      	ble.n	801abc0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f8>
 801abb8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801abba:	2dff      	cmp	r5, #255	; 0xff
 801abbc:	f000 80a6 	beq.w	801ad0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801abc0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801abc2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801abc4:	fb15 f303 	smulbb	r3, r5, r3
 801abc8:	b29b      	uxth	r3, r3
 801abca:	1c5d      	adds	r5, r3, #1
 801abcc:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801abd0:	7805      	ldrb	r5, [r0, #0]
 801abd2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801abd6:	fa1f fc83 	uxth.w	ip, r3
 801abda:	43db      	mvns	r3, r3
 801abdc:	fb17 f90c 	smulbb	r9, r7, ip
 801abe0:	b2db      	uxtb	r3, r3
 801abe2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801abe4:	fb05 9503 	mla	r5, r5, r3, r9
 801abe8:	b2ad      	uxth	r5, r5
 801abea:	f105 0901 	add.w	r9, r5, #1
 801abee:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801abf2:	fb17 f90c 	smulbb	r9, r7, ip
 801abf6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801abf8:	122d      	asrs	r5, r5, #8
 801abfa:	fb17 fc0c 	smulbb	ip, r7, ip
 801abfe:	7005      	strb	r5, [r0, #0]
 801ac00:	7845      	ldrb	r5, [r0, #1]
 801ac02:	fb05 9503 	mla	r5, r5, r3, r9
 801ac06:	b2ad      	uxth	r5, r5
 801ac08:	f105 0901 	add.w	r9, r5, #1
 801ac0c:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801ac10:	122d      	asrs	r5, r5, #8
 801ac12:	7045      	strb	r5, [r0, #1]
 801ac14:	7885      	ldrb	r5, [r0, #2]
 801ac16:	fb05 cc03 	mla	ip, r5, r3, ip
 801ac1a:	fa1f fc8c 	uxth.w	ip, ip
 801ac1e:	f10c 0301 	add.w	r3, ip, #1
 801ac22:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801ac26:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ac2a:	f880 c002 	strb.w	ip, [r0, #2]
 801ac2e:	4444      	add	r4, r8
 801ac30:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 801ac34:	b2a4      	uxth	r4, r4
 801ac36:	2c07      	cmp	r4, #7
 801ac38:	bf89      	itett	hi
 801ac3a:	9b24      	ldrhi	r3, [sp, #144]	; 0x90
 801ac3c:	fa41 f108 	asrls.w	r1, r1, r8
 801ac40:	2400      	movhi	r4, #0
 801ac42:	7859      	ldrbhi	r1, [r3, #1]
 801ac44:	bf8a      	itet	hi
 801ac46:	3301      	addhi	r3, #1
 801ac48:	b2c9      	uxtbls	r1, r1
 801ac4a:	9324      	strhi	r3, [sp, #144]	; 0x90
 801ac4c:	9b06      	ldr	r3, [sp, #24]
 801ac4e:	4418      	add	r0, r3
 801ac50:	e7a7      	b.n	801aba2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1da>
 801ac52:	441d      	add	r5, r3
 801ac54:	b22d      	sxth	r5, r5
 801ac56:	e6f1      	b.n	801aa3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801ac58:	f1b9 0f01 	cmp.w	r9, #1
 801ac5c:	f47f af2c 	bne.w	801aab8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ac60:	f1bb 0f01 	cmp.w	fp, #1
 801ac64:	f47f af28 	bne.w	801aab8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ac68:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 801ad58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801ac6c:	f8db 0000 	ldr.w	r0, [fp]
 801ac70:	6803      	ldr	r3, [r0, #0]
 801ac72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac74:	4798      	blx	r3
 801ac76:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801ac7a:	465a      	mov	r2, fp
 801ac7c:	d006      	beq.n	801ac8c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801ac7e:	f1b8 0f04 	cmp.w	r8, #4
 801ac82:	d13d      	bne.n	801ad00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x338>
 801ac84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ac86:	3300      	adds	r3, #0
 801ac88:	bf18      	it	ne
 801ac8a:	2301      	movne	r3, #1
 801ac8c:	05c0      	lsls	r0, r0, #23
 801ac8e:	d567      	bpl.n	801ad60 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801ac90:	f1b8 0f08 	cmp.w	r8, #8
 801ac94:	d164      	bne.n	801ad60 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801ac96:	2b00      	cmp	r3, #0
 801ac98:	bf0c      	ite	eq
 801ac9a:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801ac9e:	2180      	movne	r1, #128	; 0x80
 801aca0:	2e00      	cmp	r6, #0
 801aca2:	f47f af09 	bne.w	801aab8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801aca6:	2c00      	cmp	r4, #0
 801aca8:	f47f af06 	bne.w	801aab8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801acac:	9b08      	ldr	r3, [sp, #32]
 801acae:	980d      	ldr	r0, [sp, #52]	; 0x34
 801acb0:	442b      	add	r3, r5
 801acb2:	4283      	cmp	r3, r0
 801acb4:	f73f af00 	bgt.w	801aab8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801acb8:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 801acbc:	4403      	add	r3, r0
 801acbe:	980c      	ldr	r0, [sp, #48]	; 0x30
 801acc0:	4283      	cmp	r3, r0
 801acc2:	f73f aef9 	bgt.w	801aab8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801acc6:	f1b8 0f08 	cmp.w	r8, #8
 801acca:	6810      	ldr	r0, [r2, #0]
 801accc:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801acd0:	bf18      	it	ne
 801acd2:	3701      	addne	r7, #1
 801acd4:	6804      	ldr	r4, [r0, #0]
 801acd6:	9105      	str	r1, [sp, #20]
 801acd8:	bf18      	it	ne
 801acda:	f027 0701 	bicne.w	r7, r7, #1
 801acde:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ace0:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 801ace4:	bf18      	it	ne
 801ace6:	b2bf      	uxthne	r7, r7
 801ace8:	9104      	str	r1, [sp, #16]
 801acea:	9926      	ldr	r1, [sp, #152]	; 0x98
 801acec:	e9cd 7a00 	strd	r7, sl, [sp]
 801acf0:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801acf4:	9924      	ldr	r1, [sp, #144]	; 0x90
 801acf6:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801acf8:	47a0      	blx	r4
 801acfa:	b015      	add	sp, #84	; 0x54
 801acfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad00:	2300      	movs	r3, #0
 801ad02:	e7c3      	b.n	801ac8c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c4>
 801ad04:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ad06:	e6e0      	b.n	801aaca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 801ad08:	22ff      	movs	r2, #255	; 0xff
 801ad0a:	e6fc      	b.n	801ab06 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801ad0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ad0e:	7003      	strb	r3, [r0, #0]
 801ad10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ad12:	7043      	strb	r3, [r0, #1]
 801ad14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ad16:	7083      	strb	r3, [r0, #2]
 801ad18:	e789      	b.n	801ac2e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801ad1a:	9b08      	ldr	r3, [sp, #32]
 801ad1c:	b153      	cbz	r3, 801ad34 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x36c>
 801ad1e:	441c      	add	r4, r3
 801ad20:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ad22:	b2a4      	uxth	r4, r4
 801ad24:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801ad28:	f004 0407 	and.w	r4, r4, #7
 801ad2c:	7819      	ldrb	r1, [r3, #0]
 801ad2e:	9324      	str	r3, [sp, #144]	; 0x90
 801ad30:	4121      	asrs	r1, r4
 801ad32:	b2c9      	uxtb	r1, r1
 801ad34:	9b07      	ldr	r3, [sp, #28]
 801ad36:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801ad3a:	445b      	add	r3, fp
 801ad3c:	9307      	str	r3, [sp, #28]
 801ad3e:	e72a      	b.n	801ab96 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ce>
 801ad40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d1d9      	bne.n	801acfa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801ad46:	4b04      	ldr	r3, [pc, #16]	; (801ad58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>)
 801ad48:	6818      	ldr	r0, [r3, #0]
 801ad4a:	6803      	ldr	r3, [r0, #0]
 801ad4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad4e:	4798      	blx	r3
 801ad50:	e7d3      	b.n	801acfa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 801ad52:	bf00      	nop
 801ad54:	2000b258 	.word	0x2000b258
 801ad58:	2000b260 	.word	0x2000b260
 801ad5c:	2000b25a 	.word	0x2000b25a
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	f43f aea9 	beq.w	801aab8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ad66:	2180      	movs	r1, #128	; 0x80
 801ad68:	e79a      	b.n	801aca0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 801ad6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ad6c:	b11b      	cbz	r3, 801ad76 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801ad6e:	07fb      	lsls	r3, r7, #31
 801ad70:	d501      	bpl.n	801ad76 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ae>
 801ad72:	3701      	adds	r7, #1
 801ad74:	b2bf      	uxth	r7, r7
 801ad76:	2211      	movs	r2, #17
 801ad78:	e6c5      	b.n	801ab06 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801ad7a:	2255      	movs	r2, #85	; 0x55
 801ad7c:	e6c3      	b.n	801ab06 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13e>
 801ad7e:	bf00      	nop

0801ad80 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801ad80:	b538      	push	{r3, r4, r5, lr}
 801ad82:	4c15      	ldr	r4, [pc, #84]	; (801add8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801ad84:	4605      	mov	r5, r0
 801ad86:	7823      	ldrb	r3, [r4, #0]
 801ad88:	f3bf 8f5b 	dmb	ish
 801ad8c:	07da      	lsls	r2, r3, #31
 801ad8e:	d40b      	bmi.n	801ada8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ad90:	4620      	mov	r0, r4
 801ad92:	f006 fd5e 	bl	8021852 <__cxa_guard_acquire>
 801ad96:	b138      	cbz	r0, 801ada8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ad98:	4620      	mov	r0, r4
 801ad9a:	f006 fd66 	bl	802186a <__cxa_guard_release>
 801ad9e:	4a0f      	ldr	r2, [pc, #60]	; (801addc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ada0:	490f      	ldr	r1, [pc, #60]	; (801ade0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801ada2:	4810      	ldr	r0, [pc, #64]	; (801ade4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ada4:	f006 fd4b 	bl	802183e <__aeabi_atexit>
 801ada8:	4c0f      	ldr	r4, [pc, #60]	; (801ade8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801adaa:	7823      	ldrb	r3, [r4, #0]
 801adac:	f3bf 8f5b 	dmb	ish
 801adb0:	07db      	lsls	r3, r3, #31
 801adb2:	d40b      	bmi.n	801adcc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801adb4:	4620      	mov	r0, r4
 801adb6:	f006 fd4c 	bl	8021852 <__cxa_guard_acquire>
 801adba:	b138      	cbz	r0, 801adcc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801adbc:	4620      	mov	r0, r4
 801adbe:	f006 fd54 	bl	802186a <__cxa_guard_release>
 801adc2:	4a06      	ldr	r2, [pc, #24]	; (801addc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801adc4:	4909      	ldr	r1, [pc, #36]	; (801adec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801adc6:	480a      	ldr	r0, [pc, #40]	; (801adf0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801adc8:	f006 fd39 	bl	802183e <__aeabi_atexit>
 801adcc:	4b05      	ldr	r3, [pc, #20]	; (801ade4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801adce:	612b      	str	r3, [r5, #16]
 801add0:	4b07      	ldr	r3, [pc, #28]	; (801adf0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801add2:	616b      	str	r3, [r5, #20]
 801add4:	bd38      	pop	{r3, r4, r5, pc}
 801add6:	bf00      	nop
 801add8:	2000b36c 	.word	0x2000b36c
 801addc:	20000000 	.word	0x20000000
 801ade0:	080199b7 	.word	0x080199b7
 801ade4:	20000094 	.word	0x20000094
 801ade8:	2000b370 	.word	0x2000b370
 801adec:	080199b5 	.word	0x080199b5
 801adf0:	20000098 	.word	0x20000098

0801adf4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801adf4:	b538      	push	{r3, r4, r5, lr}
 801adf6:	4c15      	ldr	r4, [pc, #84]	; (801ae4c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801adf8:	4605      	mov	r5, r0
 801adfa:	7823      	ldrb	r3, [r4, #0]
 801adfc:	f3bf 8f5b 	dmb	ish
 801ae00:	07da      	lsls	r2, r3, #31
 801ae02:	d40b      	bmi.n	801ae1c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801ae04:	4620      	mov	r0, r4
 801ae06:	f006 fd24 	bl	8021852 <__cxa_guard_acquire>
 801ae0a:	b138      	cbz	r0, 801ae1c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801ae0c:	4620      	mov	r0, r4
 801ae0e:	f006 fd2c 	bl	802186a <__cxa_guard_release>
 801ae12:	4a0f      	ldr	r2, [pc, #60]	; (801ae50 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801ae14:	490f      	ldr	r1, [pc, #60]	; (801ae54 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801ae16:	4810      	ldr	r0, [pc, #64]	; (801ae58 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801ae18:	f006 fd11 	bl	802183e <__aeabi_atexit>
 801ae1c:	4c0f      	ldr	r4, [pc, #60]	; (801ae5c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801ae1e:	7823      	ldrb	r3, [r4, #0]
 801ae20:	f3bf 8f5b 	dmb	ish
 801ae24:	07db      	lsls	r3, r3, #31
 801ae26:	d40b      	bmi.n	801ae40 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801ae28:	4620      	mov	r0, r4
 801ae2a:	f006 fd12 	bl	8021852 <__cxa_guard_acquire>
 801ae2e:	b138      	cbz	r0, 801ae40 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801ae30:	4620      	mov	r0, r4
 801ae32:	f006 fd1a 	bl	802186a <__cxa_guard_release>
 801ae36:	4a06      	ldr	r2, [pc, #24]	; (801ae50 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801ae38:	4909      	ldr	r1, [pc, #36]	; (801ae60 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801ae3a:	480a      	ldr	r0, [pc, #40]	; (801ae64 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801ae3c:	f006 fcff 	bl	802183e <__aeabi_atexit>
 801ae40:	4b05      	ldr	r3, [pc, #20]	; (801ae58 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801ae42:	60ab      	str	r3, [r5, #8]
 801ae44:	4b07      	ldr	r3, [pc, #28]	; (801ae64 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801ae46:	60eb      	str	r3, [r5, #12]
 801ae48:	bd38      	pop	{r3, r4, r5, pc}
 801ae4a:	bf00      	nop
 801ae4c:	2000b34c 	.word	0x2000b34c
 801ae50:	20000000 	.word	0x20000000
 801ae54:	080199bb 	.word	0x080199bb
 801ae58:	20000074 	.word	0x20000074
 801ae5c:	2000b350 	.word	0x2000b350
 801ae60:	080199b9 	.word	0x080199b9
 801ae64:	20000078 	.word	0x20000078

0801ae68 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801ae68:	b510      	push	{r4, lr}
 801ae6a:	4604      	mov	r4, r0
 801ae6c:	f7ff ff88 	bl	801ad80 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801ae70:	4620      	mov	r0, r4
 801ae72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ae76:	f7ff bfbd 	b.w	801adf4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801ae7c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801ae7c:	b538      	push	{r3, r4, r5, lr}
 801ae7e:	4c15      	ldr	r4, [pc, #84]	; (801aed4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801ae80:	4605      	mov	r5, r0
 801ae82:	7823      	ldrb	r3, [r4, #0]
 801ae84:	f3bf 8f5b 	dmb	ish
 801ae88:	07da      	lsls	r2, r3, #31
 801ae8a:	d40b      	bmi.n	801aea4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801ae8c:	4620      	mov	r0, r4
 801ae8e:	f006 fce0 	bl	8021852 <__cxa_guard_acquire>
 801ae92:	b138      	cbz	r0, 801aea4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801ae94:	4620      	mov	r0, r4
 801ae96:	f006 fce8 	bl	802186a <__cxa_guard_release>
 801ae9a:	4a0f      	ldr	r2, [pc, #60]	; (801aed8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801ae9c:	490f      	ldr	r1, [pc, #60]	; (801aedc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801ae9e:	4810      	ldr	r0, [pc, #64]	; (801aee0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801aea0:	f006 fccd 	bl	802183e <__aeabi_atexit>
 801aea4:	4c0f      	ldr	r4, [pc, #60]	; (801aee4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801aea6:	7823      	ldrb	r3, [r4, #0]
 801aea8:	f3bf 8f5b 	dmb	ish
 801aeac:	07db      	lsls	r3, r3, #31
 801aeae:	d40b      	bmi.n	801aec8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801aeb0:	4620      	mov	r0, r4
 801aeb2:	f006 fcce 	bl	8021852 <__cxa_guard_acquire>
 801aeb6:	b138      	cbz	r0, 801aec8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801aeb8:	4620      	mov	r0, r4
 801aeba:	f006 fcd6 	bl	802186a <__cxa_guard_release>
 801aebe:	4a06      	ldr	r2, [pc, #24]	; (801aed8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801aec0:	4909      	ldr	r1, [pc, #36]	; (801aee8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801aec2:	480a      	ldr	r0, [pc, #40]	; (801aeec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801aec4:	f006 fcbb 	bl	802183e <__aeabi_atexit>
 801aec8:	4b05      	ldr	r3, [pc, #20]	; (801aee0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801aeca:	622b      	str	r3, [r5, #32]
 801aecc:	4b07      	ldr	r3, [pc, #28]	; (801aeec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801aece:	626b      	str	r3, [r5, #36]	; 0x24
 801aed0:	bd38      	pop	{r3, r4, r5, pc}
 801aed2:	bf00      	nop
 801aed4:	2000b374 	.word	0x2000b374
 801aed8:	20000000 	.word	0x20000000
 801aedc:	080199af 	.word	0x080199af
 801aee0:	2000009c 	.word	0x2000009c
 801aee4:	2000b378 	.word	0x2000b378
 801aee8:	080199ad 	.word	0x080199ad
 801aeec:	200000a0 	.word	0x200000a0

0801aef0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801aef0:	b538      	push	{r3, r4, r5, lr}
 801aef2:	4c15      	ldr	r4, [pc, #84]	; (801af48 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801aef4:	4605      	mov	r5, r0
 801aef6:	7823      	ldrb	r3, [r4, #0]
 801aef8:	f3bf 8f5b 	dmb	ish
 801aefc:	07da      	lsls	r2, r3, #31
 801aefe:	d40b      	bmi.n	801af18 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801af00:	4620      	mov	r0, r4
 801af02:	f006 fca6 	bl	8021852 <__cxa_guard_acquire>
 801af06:	b138      	cbz	r0, 801af18 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801af08:	4620      	mov	r0, r4
 801af0a:	f006 fcae 	bl	802186a <__cxa_guard_release>
 801af0e:	4a0f      	ldr	r2, [pc, #60]	; (801af4c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801af10:	490f      	ldr	r1, [pc, #60]	; (801af50 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801af12:	4810      	ldr	r0, [pc, #64]	; (801af54 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801af14:	f006 fc93 	bl	802183e <__aeabi_atexit>
 801af18:	4c0f      	ldr	r4, [pc, #60]	; (801af58 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801af1a:	7823      	ldrb	r3, [r4, #0]
 801af1c:	f3bf 8f5b 	dmb	ish
 801af20:	07db      	lsls	r3, r3, #31
 801af22:	d40b      	bmi.n	801af3c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801af24:	4620      	mov	r0, r4
 801af26:	f006 fc94 	bl	8021852 <__cxa_guard_acquire>
 801af2a:	b138      	cbz	r0, 801af3c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801af2c:	4620      	mov	r0, r4
 801af2e:	f006 fc9c 	bl	802186a <__cxa_guard_release>
 801af32:	4a06      	ldr	r2, [pc, #24]	; (801af4c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801af34:	4909      	ldr	r1, [pc, #36]	; (801af5c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801af36:	480a      	ldr	r0, [pc, #40]	; (801af60 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801af38:	f006 fc81 	bl	802183e <__aeabi_atexit>
 801af3c:	4b05      	ldr	r3, [pc, #20]	; (801af54 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801af3e:	61ab      	str	r3, [r5, #24]
 801af40:	4b07      	ldr	r3, [pc, #28]	; (801af60 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801af42:	61eb      	str	r3, [r5, #28]
 801af44:	bd38      	pop	{r3, r4, r5, pc}
 801af46:	bf00      	nop
 801af48:	2000b354 	.word	0x2000b354
 801af4c:	20000000 	.word	0x20000000
 801af50:	080199b3 	.word	0x080199b3
 801af54:	2000007c 	.word	0x2000007c
 801af58:	2000b358 	.word	0x2000b358
 801af5c:	080199b1 	.word	0x080199b1
 801af60:	20000080 	.word	0x20000080

0801af64 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801af64:	b510      	push	{r4, lr}
 801af66:	4604      	mov	r4, r0
 801af68:	f7ff ff88 	bl	801ae7c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801af6c:	4620      	mov	r0, r4
 801af6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af72:	f7ff bfbd 	b.w	801aef0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801af78 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801af78:	b538      	push	{r3, r4, r5, lr}
 801af7a:	4c15      	ldr	r4, [pc, #84]	; (801afd0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801af7c:	4605      	mov	r5, r0
 801af7e:	7823      	ldrb	r3, [r4, #0]
 801af80:	f3bf 8f5b 	dmb	ish
 801af84:	07da      	lsls	r2, r3, #31
 801af86:	d40b      	bmi.n	801afa0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801af88:	4620      	mov	r0, r4
 801af8a:	f006 fc62 	bl	8021852 <__cxa_guard_acquire>
 801af8e:	b138      	cbz	r0, 801afa0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801af90:	4620      	mov	r0, r4
 801af92:	f006 fc6a 	bl	802186a <__cxa_guard_release>
 801af96:	4a0f      	ldr	r2, [pc, #60]	; (801afd4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801af98:	490f      	ldr	r1, [pc, #60]	; (801afd8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801af9a:	4810      	ldr	r0, [pc, #64]	; (801afdc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801af9c:	f006 fc4f 	bl	802183e <__aeabi_atexit>
 801afa0:	4c0f      	ldr	r4, [pc, #60]	; (801afe0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801afa2:	7823      	ldrb	r3, [r4, #0]
 801afa4:	f3bf 8f5b 	dmb	ish
 801afa8:	07db      	lsls	r3, r3, #31
 801afaa:	d40b      	bmi.n	801afc4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801afac:	4620      	mov	r0, r4
 801afae:	f006 fc50 	bl	8021852 <__cxa_guard_acquire>
 801afb2:	b138      	cbz	r0, 801afc4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801afb4:	4620      	mov	r0, r4
 801afb6:	f006 fc58 	bl	802186a <__cxa_guard_release>
 801afba:	4a06      	ldr	r2, [pc, #24]	; (801afd4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801afbc:	4909      	ldr	r1, [pc, #36]	; (801afe4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801afbe:	480a      	ldr	r0, [pc, #40]	; (801afe8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801afc0:	f006 fc3d 	bl	802183e <__aeabi_atexit>
 801afc4:	4b05      	ldr	r3, [pc, #20]	; (801afdc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801afc6:	632b      	str	r3, [r5, #48]	; 0x30
 801afc8:	4b07      	ldr	r3, [pc, #28]	; (801afe8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801afca:	636b      	str	r3, [r5, #52]	; 0x34
 801afcc:	bd38      	pop	{r3, r4, r5, pc}
 801afce:	bf00      	nop
 801afd0:	2000b35c 	.word	0x2000b35c
 801afd4:	20000000 	.word	0x20000000
 801afd8:	080199a7 	.word	0x080199a7
 801afdc:	20000084 	.word	0x20000084
 801afe0:	2000b360 	.word	0x2000b360
 801afe4:	080199a5 	.word	0x080199a5
 801afe8:	20000088 	.word	0x20000088

0801afec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801afec:	b538      	push	{r3, r4, r5, lr}
 801afee:	4c15      	ldr	r4, [pc, #84]	; (801b044 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801aff0:	4605      	mov	r5, r0
 801aff2:	7823      	ldrb	r3, [r4, #0]
 801aff4:	f3bf 8f5b 	dmb	ish
 801aff8:	07da      	lsls	r2, r3, #31
 801affa:	d40b      	bmi.n	801b014 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801affc:	4620      	mov	r0, r4
 801affe:	f006 fc28 	bl	8021852 <__cxa_guard_acquire>
 801b002:	b138      	cbz	r0, 801b014 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801b004:	4620      	mov	r0, r4
 801b006:	f006 fc30 	bl	802186a <__cxa_guard_release>
 801b00a:	4a0f      	ldr	r2, [pc, #60]	; (801b048 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801b00c:	490f      	ldr	r1, [pc, #60]	; (801b04c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801b00e:	4810      	ldr	r0, [pc, #64]	; (801b050 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801b010:	f006 fc15 	bl	802183e <__aeabi_atexit>
 801b014:	4c0f      	ldr	r4, [pc, #60]	; (801b054 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801b016:	7823      	ldrb	r3, [r4, #0]
 801b018:	f3bf 8f5b 	dmb	ish
 801b01c:	07db      	lsls	r3, r3, #31
 801b01e:	d40b      	bmi.n	801b038 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801b020:	4620      	mov	r0, r4
 801b022:	f006 fc16 	bl	8021852 <__cxa_guard_acquire>
 801b026:	b138      	cbz	r0, 801b038 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801b028:	4620      	mov	r0, r4
 801b02a:	f006 fc1e 	bl	802186a <__cxa_guard_release>
 801b02e:	4a06      	ldr	r2, [pc, #24]	; (801b048 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801b030:	4909      	ldr	r1, [pc, #36]	; (801b058 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801b032:	480a      	ldr	r0, [pc, #40]	; (801b05c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801b034:	f006 fc03 	bl	802183e <__aeabi_atexit>
 801b038:	4b05      	ldr	r3, [pc, #20]	; (801b050 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801b03a:	62ab      	str	r3, [r5, #40]	; 0x28
 801b03c:	4b07      	ldr	r3, [pc, #28]	; (801b05c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801b03e:	62eb      	str	r3, [r5, #44]	; 0x2c
 801b040:	bd38      	pop	{r3, r4, r5, pc}
 801b042:	bf00      	nop
 801b044:	2000b334 	.word	0x2000b334
 801b048:	20000000 	.word	0x20000000
 801b04c:	080199ab 	.word	0x080199ab
 801b050:	2000005c 	.word	0x2000005c
 801b054:	2000b338 	.word	0x2000b338
 801b058:	080199a9 	.word	0x080199a9
 801b05c:	20000060 	.word	0x20000060

0801b060 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801b060:	b510      	push	{r4, lr}
 801b062:	4604      	mov	r4, r0
 801b064:	f7ff ff88 	bl	801af78 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801b068:	4620      	mov	r0, r4
 801b06a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b06e:	f7ff bfbd 	b.w	801afec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801b074 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801b074:	b538      	push	{r3, r4, r5, lr}
 801b076:	4c15      	ldr	r4, [pc, #84]	; (801b0cc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801b078:	4605      	mov	r5, r0
 801b07a:	7823      	ldrb	r3, [r4, #0]
 801b07c:	f3bf 8f5b 	dmb	ish
 801b080:	07da      	lsls	r2, r3, #31
 801b082:	d40b      	bmi.n	801b09c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801b084:	4620      	mov	r0, r4
 801b086:	f006 fbe4 	bl	8021852 <__cxa_guard_acquire>
 801b08a:	b138      	cbz	r0, 801b09c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801b08c:	4620      	mov	r0, r4
 801b08e:	f006 fbec 	bl	802186a <__cxa_guard_release>
 801b092:	4a0f      	ldr	r2, [pc, #60]	; (801b0d0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801b094:	490f      	ldr	r1, [pc, #60]	; (801b0d4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801b096:	4810      	ldr	r0, [pc, #64]	; (801b0d8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801b098:	f006 fbd1 	bl	802183e <__aeabi_atexit>
 801b09c:	4c0f      	ldr	r4, [pc, #60]	; (801b0dc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801b09e:	7823      	ldrb	r3, [r4, #0]
 801b0a0:	f3bf 8f5b 	dmb	ish
 801b0a4:	07db      	lsls	r3, r3, #31
 801b0a6:	d40b      	bmi.n	801b0c0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801b0a8:	4620      	mov	r0, r4
 801b0aa:	f006 fbd2 	bl	8021852 <__cxa_guard_acquire>
 801b0ae:	b138      	cbz	r0, 801b0c0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801b0b0:	4620      	mov	r0, r4
 801b0b2:	f006 fbda 	bl	802186a <__cxa_guard_release>
 801b0b6:	4a06      	ldr	r2, [pc, #24]	; (801b0d0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801b0b8:	4909      	ldr	r1, [pc, #36]	; (801b0e0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801b0ba:	480a      	ldr	r0, [pc, #40]	; (801b0e4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801b0bc:	f006 fbbf 	bl	802183e <__aeabi_atexit>
 801b0c0:	4b05      	ldr	r3, [pc, #20]	; (801b0d8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801b0c2:	642b      	str	r3, [r5, #64]	; 0x40
 801b0c4:	4b07      	ldr	r3, [pc, #28]	; (801b0e4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801b0c6:	646b      	str	r3, [r5, #68]	; 0x44
 801b0c8:	bd38      	pop	{r3, r4, r5, pc}
 801b0ca:	bf00      	nop
 801b0cc:	2000b364 	.word	0x2000b364
 801b0d0:	20000000 	.word	0x20000000
 801b0d4:	0801999f 	.word	0x0801999f
 801b0d8:	2000008c 	.word	0x2000008c
 801b0dc:	2000b368 	.word	0x2000b368
 801b0e0:	0801999d 	.word	0x0801999d
 801b0e4:	20000090 	.word	0x20000090

0801b0e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801b0e8:	b538      	push	{r3, r4, r5, lr}
 801b0ea:	4c15      	ldr	r4, [pc, #84]	; (801b140 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801b0ec:	4605      	mov	r5, r0
 801b0ee:	7823      	ldrb	r3, [r4, #0]
 801b0f0:	f3bf 8f5b 	dmb	ish
 801b0f4:	07da      	lsls	r2, r3, #31
 801b0f6:	d40b      	bmi.n	801b110 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801b0f8:	4620      	mov	r0, r4
 801b0fa:	f006 fbaa 	bl	8021852 <__cxa_guard_acquire>
 801b0fe:	b138      	cbz	r0, 801b110 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801b100:	4620      	mov	r0, r4
 801b102:	f006 fbb2 	bl	802186a <__cxa_guard_release>
 801b106:	4a0f      	ldr	r2, [pc, #60]	; (801b144 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801b108:	490f      	ldr	r1, [pc, #60]	; (801b148 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801b10a:	4810      	ldr	r0, [pc, #64]	; (801b14c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801b10c:	f006 fb97 	bl	802183e <__aeabi_atexit>
 801b110:	4c0f      	ldr	r4, [pc, #60]	; (801b150 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801b112:	7823      	ldrb	r3, [r4, #0]
 801b114:	f3bf 8f5b 	dmb	ish
 801b118:	07db      	lsls	r3, r3, #31
 801b11a:	d40b      	bmi.n	801b134 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801b11c:	4620      	mov	r0, r4
 801b11e:	f006 fb98 	bl	8021852 <__cxa_guard_acquire>
 801b122:	b138      	cbz	r0, 801b134 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801b124:	4620      	mov	r0, r4
 801b126:	f006 fba0 	bl	802186a <__cxa_guard_release>
 801b12a:	4a06      	ldr	r2, [pc, #24]	; (801b144 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801b12c:	4909      	ldr	r1, [pc, #36]	; (801b154 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801b12e:	480a      	ldr	r0, [pc, #40]	; (801b158 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801b130:	f006 fb85 	bl	802183e <__aeabi_atexit>
 801b134:	4b05      	ldr	r3, [pc, #20]	; (801b14c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801b136:	63ab      	str	r3, [r5, #56]	; 0x38
 801b138:	4b07      	ldr	r3, [pc, #28]	; (801b158 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801b13a:	63eb      	str	r3, [r5, #60]	; 0x3c
 801b13c:	bd38      	pop	{r3, r4, r5, pc}
 801b13e:	bf00      	nop
 801b140:	2000b344 	.word	0x2000b344
 801b144:	20000000 	.word	0x20000000
 801b148:	080199a3 	.word	0x080199a3
 801b14c:	2000006c 	.word	0x2000006c
 801b150:	2000b348 	.word	0x2000b348
 801b154:	080199a1 	.word	0x080199a1
 801b158:	20000070 	.word	0x20000070

0801b15c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801b15c:	b510      	push	{r4, lr}
 801b15e:	4604      	mov	r4, r0
 801b160:	f7ff ff88 	bl	801b074 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801b164:	4620      	mov	r0, r4
 801b166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b16a:	f7ff bfbd 	b.w	801b0e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801b170 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801b170:	b538      	push	{r3, r4, r5, lr}
 801b172:	4c15      	ldr	r4, [pc, #84]	; (801b1c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801b174:	4605      	mov	r5, r0
 801b176:	7823      	ldrb	r3, [r4, #0]
 801b178:	f3bf 8f5b 	dmb	ish
 801b17c:	07da      	lsls	r2, r3, #31
 801b17e:	d40b      	bmi.n	801b198 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801b180:	4620      	mov	r0, r4
 801b182:	f006 fb66 	bl	8021852 <__cxa_guard_acquire>
 801b186:	b138      	cbz	r0, 801b198 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801b188:	4620      	mov	r0, r4
 801b18a:	f006 fb6e 	bl	802186a <__cxa_guard_release>
 801b18e:	4a0f      	ldr	r2, [pc, #60]	; (801b1cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801b190:	490f      	ldr	r1, [pc, #60]	; (801b1d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801b192:	4810      	ldr	r0, [pc, #64]	; (801b1d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801b194:	f006 fb53 	bl	802183e <__aeabi_atexit>
 801b198:	4c0f      	ldr	r4, [pc, #60]	; (801b1d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801b19a:	7823      	ldrb	r3, [r4, #0]
 801b19c:	f3bf 8f5b 	dmb	ish
 801b1a0:	07db      	lsls	r3, r3, #31
 801b1a2:	d40b      	bmi.n	801b1bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801b1a4:	4620      	mov	r0, r4
 801b1a6:	f006 fb54 	bl	8021852 <__cxa_guard_acquire>
 801b1aa:	b138      	cbz	r0, 801b1bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801b1ac:	4620      	mov	r0, r4
 801b1ae:	f006 fb5c 	bl	802186a <__cxa_guard_release>
 801b1b2:	4a06      	ldr	r2, [pc, #24]	; (801b1cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801b1b4:	4909      	ldr	r1, [pc, #36]	; (801b1dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801b1b6:	480a      	ldr	r0, [pc, #40]	; (801b1e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801b1b8:	f006 fb41 	bl	802183e <__aeabi_atexit>
 801b1bc:	4b05      	ldr	r3, [pc, #20]	; (801b1d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801b1be:	652b      	str	r3, [r5, #80]	; 0x50
 801b1c0:	4b07      	ldr	r3, [pc, #28]	; (801b1e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801b1c2:	656b      	str	r3, [r5, #84]	; 0x54
 801b1c4:	bd38      	pop	{r3, r4, r5, pc}
 801b1c6:	bf00      	nop
 801b1c8:	2000b33c 	.word	0x2000b33c
 801b1cc:	20000000 	.word	0x20000000
 801b1d0:	08019997 	.word	0x08019997
 801b1d4:	20000064 	.word	0x20000064
 801b1d8:	2000b340 	.word	0x2000b340
 801b1dc:	08019995 	.word	0x08019995
 801b1e0:	20000068 	.word	0x20000068

0801b1e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801b1e4:	b538      	push	{r3, r4, r5, lr}
 801b1e6:	4c15      	ldr	r4, [pc, #84]	; (801b23c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801b1e8:	4605      	mov	r5, r0
 801b1ea:	7823      	ldrb	r3, [r4, #0]
 801b1ec:	f3bf 8f5b 	dmb	ish
 801b1f0:	07da      	lsls	r2, r3, #31
 801b1f2:	d40b      	bmi.n	801b20c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801b1f4:	4620      	mov	r0, r4
 801b1f6:	f006 fb2c 	bl	8021852 <__cxa_guard_acquire>
 801b1fa:	b138      	cbz	r0, 801b20c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801b1fc:	4620      	mov	r0, r4
 801b1fe:	f006 fb34 	bl	802186a <__cxa_guard_release>
 801b202:	4a0f      	ldr	r2, [pc, #60]	; (801b240 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801b204:	490f      	ldr	r1, [pc, #60]	; (801b244 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801b206:	4810      	ldr	r0, [pc, #64]	; (801b248 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801b208:	f006 fb19 	bl	802183e <__aeabi_atexit>
 801b20c:	4c0f      	ldr	r4, [pc, #60]	; (801b24c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801b20e:	7823      	ldrb	r3, [r4, #0]
 801b210:	f3bf 8f5b 	dmb	ish
 801b214:	07db      	lsls	r3, r3, #31
 801b216:	d40b      	bmi.n	801b230 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801b218:	4620      	mov	r0, r4
 801b21a:	f006 fb1a 	bl	8021852 <__cxa_guard_acquire>
 801b21e:	b138      	cbz	r0, 801b230 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801b220:	4620      	mov	r0, r4
 801b222:	f006 fb22 	bl	802186a <__cxa_guard_release>
 801b226:	4a06      	ldr	r2, [pc, #24]	; (801b240 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801b228:	4909      	ldr	r1, [pc, #36]	; (801b250 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801b22a:	480a      	ldr	r0, [pc, #40]	; (801b254 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801b22c:	f006 fb07 	bl	802183e <__aeabi_atexit>
 801b230:	4b05      	ldr	r3, [pc, #20]	; (801b248 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801b232:	64ab      	str	r3, [r5, #72]	; 0x48
 801b234:	4b07      	ldr	r3, [pc, #28]	; (801b254 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801b236:	64eb      	str	r3, [r5, #76]	; 0x4c
 801b238:	bd38      	pop	{r3, r4, r5, pc}
 801b23a:	bf00      	nop
 801b23c:	2000b32c 	.word	0x2000b32c
 801b240:	20000000 	.word	0x20000000
 801b244:	0801999b 	.word	0x0801999b
 801b248:	20000054 	.word	0x20000054
 801b24c:	2000b330 	.word	0x2000b330
 801b250:	08019999 	.word	0x08019999
 801b254:	20000058 	.word	0x20000058

0801b258 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801b258:	b510      	push	{r4, lr}
 801b25a:	4604      	mov	r4, r0
 801b25c:	f7ff ff88 	bl	801b170 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801b260:	4620      	mov	r0, r4
 801b262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b266:	f7ff bfbd 	b.w	801b1e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801b26a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801b26a:	b510      	push	{r4, lr}
 801b26c:	4604      	mov	r4, r0
 801b26e:	f7ff fff3 	bl	801b258 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801b272:	4620      	mov	r0, r4
 801b274:	f7ff ff72 	bl	801b15c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801b278:	4620      	mov	r0, r4
 801b27a:	f7ff fe73 	bl	801af64 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801b27e:	4620      	mov	r0, r4
 801b280:	f7ff fdf2 	bl	801ae68 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801b284:	4620      	mov	r0, r4
 801b286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b28a:	f7ff bee9 	b.w	801b060 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801b290 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801b290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b294:	b087      	sub	sp, #28
 801b296:	7888      	ldrb	r0, [r1, #2]
 801b298:	4616      	mov	r6, r2
 801b29a:	9001      	str	r0, [sp, #4]
 801b29c:	7848      	ldrb	r0, [r1, #1]
 801b29e:	9100      	str	r1, [sp, #0]
 801b2a0:	9002      	str	r0, [sp, #8]
 801b2a2:	7808      	ldrb	r0, [r1, #0]
 801b2a4:	9901      	ldr	r1, [sp, #4]
 801b2a6:	9003      	str	r0, [sp, #12]
 801b2a8:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801b2ac:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 801b2b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801b2b4:	9902      	ldr	r1, [sp, #8]
 801b2b6:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 801b2ba:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 801b2be:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801b2c2:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801b2c6:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801b2ca:	9005      	str	r0, [sp, #20]
 801b2cc:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 801b2d0:	fb05 ca0e 	mla	sl, r5, lr, ip
 801b2d4:	2d00      	cmp	r5, #0
 801b2d6:	eb06 080a 	add.w	r8, r6, sl
 801b2da:	db4a      	blt.n	801b372 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801b2dc:	45a9      	cmp	r9, r5
 801b2de:	dd48      	ble.n	801b372 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe2>
 801b2e0:	f1bc 0f00 	cmp.w	ip, #0
 801b2e4:	db43      	blt.n	801b36e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801b2e6:	45e6      	cmp	lr, ip
 801b2e8:	dd41      	ble.n	801b36e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xde>
 801b2ea:	f816 600a 	ldrb.w	r6, [r6, sl]
 801b2ee:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b2f2:	441e      	add	r6, r3
 801b2f4:	f11c 0001 	adds.w	r0, ip, #1
 801b2f8:	d43e      	bmi.n	801b378 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801b2fa:	4586      	cmp	lr, r0
 801b2fc:	dd3c      	ble.n	801b378 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801b2fe:	2a00      	cmp	r2, #0
 801b300:	d03a      	beq.n	801b378 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe8>
 801b302:	f898 0001 	ldrb.w	r0, [r8, #1]
 801b306:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b30a:	4418      	add	r0, r3
 801b30c:	3501      	adds	r5, #1
 801b30e:	d437      	bmi.n	801b380 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801b310:	45a9      	cmp	r9, r5
 801b312:	dd35      	ble.n	801b380 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801b314:	b3a4      	cbz	r4, 801b380 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf0>
 801b316:	f1bc 0f00 	cmp.w	ip, #0
 801b31a:	db2f      	blt.n	801b37c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801b31c:	45e6      	cmp	lr, ip
 801b31e:	dd2d      	ble.n	801b37c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xec>
 801b320:	f818 500e 	ldrb.w	r5, [r8, lr]
 801b324:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b328:	441d      	add	r5, r3
 801b32a:	f11c 0c01 	adds.w	ip, ip, #1
 801b32e:	d42a      	bmi.n	801b386 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801b330:	45e6      	cmp	lr, ip
 801b332:	dd28      	ble.n	801b386 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801b334:	b33a      	cbz	r2, 801b386 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf6>
 801b336:	44c6      	add	lr, r8
 801b338:	f89e c001 	ldrb.w	ip, [lr, #1]
 801b33c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801b340:	4463      	add	r3, ip
 801b342:	ea6f 0c07 	mvn.w	ip, r7
 801b346:	2a0f      	cmp	r2, #15
 801b348:	f896 a000 	ldrb.w	sl, [r6]
 801b34c:	fa5f fc8c 	uxtb.w	ip, ip
 801b350:	f890 b000 	ldrb.w	fp, [r0]
 801b354:	f895 9000 	ldrb.w	r9, [r5]
 801b358:	7819      	ldrb	r1, [r3, #0]
 801b35a:	d801      	bhi.n	801b360 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xd0>
 801b35c:	2c0f      	cmp	r4, #15
 801b35e:	d914      	bls.n	801b38a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xfa>
 801b360:	4b40      	ldr	r3, [pc, #256]	; (801b464 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 801b362:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801b366:	4a40      	ldr	r2, [pc, #256]	; (801b468 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 801b368:	4840      	ldr	r0, [pc, #256]	; (801b46c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1dc>)
 801b36a:	f006 ffe9 	bl	8022340 <__assert_func>
 801b36e:	ae05      	add	r6, sp, #20
 801b370:	e7c0      	b.n	801b2f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x64>
 801b372:	a805      	add	r0, sp, #20
 801b374:	4606      	mov	r6, r0
 801b376:	e7c9      	b.n	801b30c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801b378:	a805      	add	r0, sp, #20
 801b37a:	e7c7      	b.n	801b30c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7c>
 801b37c:	ad05      	add	r5, sp, #20
 801b37e:	e7d4      	b.n	801b32a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x9a>
 801b380:	ab05      	add	r3, sp, #20
 801b382:	461d      	mov	r5, r3
 801b384:	e7dd      	b.n	801b342 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801b386:	ab05      	add	r3, sp, #20
 801b388:	e7db      	b.n	801b342 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb2>
 801b38a:	b292      	uxth	r2, r2
 801b38c:	b2a4      	uxth	r4, r4
 801b38e:	fa1f fc8c 	uxth.w	ip, ip
 801b392:	fb02 f804 	mul.w	r8, r2, r4
 801b396:	0112      	lsls	r2, r2, #4
 801b398:	b2bf      	uxth	r7, r7
 801b39a:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801b39e:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 801b3a2:	eba2 0208 	sub.w	r2, r2, r8
 801b3a6:	b2a4      	uxth	r4, r4
 801b3a8:	b292      	uxth	r2, r2
 801b3aa:	ebae 0e04 	sub.w	lr, lr, r4
 801b3ae:	fb02 fb0b 	mul.w	fp, r2, fp
 801b3b2:	fa1f fe8e 	uxth.w	lr, lr
 801b3b6:	fb0e ba0a 	mla	sl, lr, sl, fp
 801b3ba:	fb04 aa09 	mla	sl, r4, r9, sl
 801b3be:	fb08 aa01 	mla	sl, r8, r1, sl
 801b3c2:	9903      	ldr	r1, [sp, #12]
 801b3c4:	fb11 f90c 	smulbb	r9, r1, ip
 801b3c8:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801b3cc:	9900      	ldr	r1, [sp, #0]
 801b3ce:	fb0a 9a07 	mla	sl, sl, r7, r9
 801b3d2:	fa1f fa8a 	uxth.w	sl, sl
 801b3d6:	f10a 0901 	add.w	r9, sl, #1
 801b3da:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 801b3de:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b3e2:	f881 a000 	strb.w	sl, [r1]
 801b3e6:	f890 a001 	ldrb.w	sl, [r0, #1]
 801b3ea:	f896 9001 	ldrb.w	r9, [r6, #1]
 801b3ee:	fb02 fa0a 	mul.w	sl, r2, sl
 801b3f2:	9902      	ldr	r1, [sp, #8]
 801b3f4:	fb0e aa09 	mla	sl, lr, r9, sl
 801b3f8:	f895 9001 	ldrb.w	r9, [r5, #1]
 801b3fc:	fb04 aa09 	mla	sl, r4, r9, sl
 801b400:	f893 9001 	ldrb.w	r9, [r3, #1]
 801b404:	fb08 a909 	mla	r9, r8, r9, sl
 801b408:	fb11 fa0c 	smulbb	sl, r1, ip
 801b40c:	9900      	ldr	r1, [sp, #0]
 801b40e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801b412:	fb09 a907 	mla	r9, r9, r7, sl
 801b416:	fa1f f989 	uxth.w	r9, r9
 801b41a:	f109 0a01 	add.w	sl, r9, #1
 801b41e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801b422:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b426:	f881 9001 	strb.w	r9, [r1, #1]
 801b42a:	7880      	ldrb	r0, [r0, #2]
 801b42c:	78b6      	ldrb	r6, [r6, #2]
 801b42e:	4342      	muls	r2, r0
 801b430:	78a8      	ldrb	r0, [r5, #2]
 801b432:	789b      	ldrb	r3, [r3, #2]
 801b434:	fb0e 2206 	mla	r2, lr, r6, r2
 801b438:	fb04 2400 	mla	r4, r4, r0, r2
 801b43c:	fb08 4803 	mla	r8, r8, r3, r4
 801b440:	9b01      	ldr	r3, [sp, #4]
 801b442:	fb13 fc0c 	smulbb	ip, r3, ip
 801b446:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801b44a:	fb08 c707 	mla	r7, r8, r7, ip
 801b44e:	b2bf      	uxth	r7, r7
 801b450:	f107 0c01 	add.w	ip, r7, #1
 801b454:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 801b458:	123f      	asrs	r7, r7, #8
 801b45a:	708f      	strb	r7, [r1, #2]
 801b45c:	b007      	add	sp, #28
 801b45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b462:	bf00      	nop
 801b464:	08027a30 	.word	0x08027a30
 801b468:	08027f26 	.word	0x08027f26
 801b46c:	08027af9 	.word	0x08027af9

0801b470 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b474:	ed2d 8b08 	vpush	{d8-d11}
 801b478:	b095      	sub	sp, #84	; 0x54
 801b47a:	eeb0 aa40 	vmov.f32	s20, s0
 801b47e:	eef0 9a60 	vmov.f32	s19, s1
 801b482:	930a      	str	r3, [sp, #40]	; 0x28
 801b484:	eeb0 9a41 	vmov.f32	s18, s2
 801b488:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801b48c:	eeb0 8a62 	vmov.f32	s16, s5
 801b490:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801b492:	eef0 8a43 	vmov.f32	s17, s6
 801b496:	930c      	str	r3, [sp, #48]	; 0x30
 801b498:	eef0 ba44 	vmov.f32	s23, s8
 801b49c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801b4a0:	eeb0 ba64 	vmov.f32	s22, s9
 801b4a4:	9013      	str	r0, [sp, #76]	; 0x4c
 801b4a6:	eef0 aa45 	vmov.f32	s21, s10
 801b4aa:	9310      	str	r3, [sp, #64]	; 0x40
 801b4ac:	6860      	ldr	r0, [r4, #4]
 801b4ae:	910f      	str	r1, [sp, #60]	; 0x3c
 801b4b0:	9212      	str	r2, [sp, #72]	; 0x48
 801b4b2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801b4b4:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801b4b8:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801b4bc:	fb00 1303 	mla	r3, r0, r3, r1
 801b4c0:	6821      	ldr	r1, [r4, #0]
 801b4c2:	6854      	ldr	r4, [r2, #4]
 801b4c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b4c8:	18cb      	adds	r3, r1, r3
 801b4ca:	930b      	str	r3, [sp, #44]	; 0x2c
 801b4cc:	6813      	ldr	r3, [r2, #0]
 801b4ce:	930e      	str	r3, [sp, #56]	; 0x38
 801b4d0:	1d23      	adds	r3, r4, #4
 801b4d2:	9309      	str	r3, [sp, #36]	; 0x24
 801b4d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b4d6:	43db      	mvns	r3, r3
 801b4d8:	b2db      	uxtb	r3, r3
 801b4da:	930d      	str	r3, [sp, #52]	; 0x34
 801b4dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b4de:	2b00      	cmp	r3, #0
 801b4e0:	dc03      	bgt.n	801b4ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801b4e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	f340 823c 	ble.w	801b962 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801b4ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b4ec:	2b00      	cmp	r3, #0
 801b4ee:	f340 8115 	ble.w	801b71c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801b4f2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801b4f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b4f6:	1412      	asrs	r2, r2, #16
 801b4f8:	ea4f 4323 	mov.w	r3, r3, asr #16
 801b4fc:	d431      	bmi.n	801b562 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801b4fe:	1c51      	adds	r1, r2, #1
 801b500:	428d      	cmp	r5, r1
 801b502:	dd31      	ble.n	801b568 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801b504:	2b00      	cmp	r3, #0
 801b506:	db2f      	blt.n	801b568 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801b508:	1c59      	adds	r1, r3, #1
 801b50a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801b50c:	4288      	cmp	r0, r1
 801b50e:	dd2b      	ble.n	801b568 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801b510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b512:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b514:	3b01      	subs	r3, #1
 801b516:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801b518:	fb02 1203 	mla	r2, r2, r3, r1
 801b51c:	1412      	asrs	r2, r2, #16
 801b51e:	d42d      	bmi.n	801b57c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801b520:	3201      	adds	r2, #1
 801b522:	4295      	cmp	r5, r2
 801b524:	dd2a      	ble.n	801b57c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801b526:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801b528:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801b52a:	fb02 1303 	mla	r3, r2, r3, r1
 801b52e:	141b      	asrs	r3, r3, #16
 801b530:	d424      	bmi.n	801b57c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801b532:	3301      	adds	r3, #1
 801b534:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b536:	429a      	cmp	r2, r3
 801b538:	dd20      	ble.n	801b57c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801b53a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b53c:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801b540:	f103 0c03 	add.w	ip, r3, #3
 801b544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b546:	9311      	str	r3, [sp, #68]	; 0x44
 801b548:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	f300 814f 	bgt.w	801b7ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37e>
 801b550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b552:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b554:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b558:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b55c:	441a      	add	r2, r3
 801b55e:	920b      	str	r2, [sp, #44]	; 0x2c
 801b560:	e0de      	b.n	801b720 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801b562:	1c51      	adds	r1, r2, #1
 801b564:	f040 80cb 	bne.w	801b6fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801b568:	42aa      	cmp	r2, r5
 801b56a:	f280 80c8 	bge.w	801b6fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801b56e:	1c5f      	adds	r7, r3, #1
 801b570:	f2c0 80c5 	blt.w	801b6fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801b574:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b576:	4293      	cmp	r3, r2
 801b578:	f280 80c1 	bge.w	801b6fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801b57c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b57e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801b580:	9311      	str	r3, [sp, #68]	; 0x44
 801b582:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b584:	2b00      	cmp	r3, #0
 801b586:	dde3      	ble.n	801b550 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801b588:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b58a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801b58c:	141a      	asrs	r2, r3, #16
 801b58e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801b590:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b592:	1400      	asrs	r0, r0, #16
 801b594:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801b598:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801b59c:	f100 810e 	bmi.w	801b7bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801b5a0:	1c46      	adds	r6, r0, #1
 801b5a2:	42b5      	cmp	r5, r6
 801b5a4:	f340 810c 	ble.w	801b7c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801b5a8:	2a00      	cmp	r2, #0
 801b5aa:	f2c0 8109 	blt.w	801b7c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801b5ae:	1c56      	adds	r6, r2, #1
 801b5b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b5b2:	42b4      	cmp	r4, r6
 801b5b4:	f340 8104 	ble.w	801b7c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 801b5b8:	fb02 0005 	mla	r0, r2, r5, r0
 801b5bc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b5be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b5c0:	f814 e000 	ldrb.w	lr, [r4, r0]
 801b5c4:	4402      	add	r2, r0
 801b5c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b5c8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b5cc:	eb00 080e 	add.w	r8, r0, lr
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	f000 80e4 	beq.w	801b79e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32e>
 801b5d6:	f892 c001 	ldrb.w	ip, [r2, #1]
 801b5da:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801b5de:	4484      	add	ip, r0
 801b5e0:	2900      	cmp	r1, #0
 801b5e2:	f000 80e5 	beq.w	801b7b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x340>
 801b5e6:	1950      	adds	r0, r2, r5
 801b5e8:	5d52      	ldrb	r2, [r2, r5]
 801b5ea:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b5ec:	7840      	ldrb	r0, [r0, #1]
 801b5ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b5f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b5f6:	4422      	add	r2, r4
 801b5f8:	4420      	add	r0, r4
 801b5fa:	b29b      	uxth	r3, r3
 801b5fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b5fe:	b289      	uxth	r1, r1
 801b600:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
 801b604:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801b608:	fb03 fa01 	mul.w	sl, r3, r1
 801b60c:	011b      	lsls	r3, r3, #4
 801b60e:	f89c e000 	ldrb.w	lr, [ip]
 801b612:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801b616:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801b61a:	eba3 030a 	sub.w	r3, r3, sl
 801b61e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b620:	b289      	uxth	r1, r1
 801b622:	b29b      	uxth	r3, r3
 801b624:	eba9 0901 	sub.w	r9, r9, r1
 801b628:	fb03 fe0e 	mul.w	lr, r3, lr
 801b62c:	fa1f f989 	uxth.w	r9, r9
 801b630:	fb09 ee0b 	mla	lr, r9, fp, lr
 801b634:	f892 b000 	ldrb.w	fp, [r2]
 801b638:	fb01 ee0b 	mla	lr, r1, fp, lr
 801b63c:	f890 b000 	ldrb.w	fp, [r0]
 801b640:	fb0a ee0b 	mla	lr, sl, fp, lr
 801b644:	f897 b000 	ldrb.w	fp, [r7]
 801b648:	fb1b fb04 	smulbb	fp, fp, r4
 801b64c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801b650:	fb0e be06 	mla	lr, lr, r6, fp
 801b654:	fa1f fe8e 	uxth.w	lr, lr
 801b658:	f10e 0b01 	add.w	fp, lr, #1
 801b65c:	eb0b 2b1e 	add.w	fp, fp, lr, lsr #8
 801b660:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801b664:	f887 b000 	strb.w	fp, [r7]
 801b668:	f89c e001 	ldrb.w	lr, [ip, #1]
 801b66c:	f898 b001 	ldrb.w	fp, [r8, #1]
 801b670:	fb03 fe0e 	mul.w	lr, r3, lr
 801b674:	fb09 ee0b 	mla	lr, r9, fp, lr
 801b678:	f892 b001 	ldrb.w	fp, [r2, #1]
 801b67c:	fb01 ee0b 	mla	lr, r1, fp, lr
 801b680:	f890 b001 	ldrb.w	fp, [r0, #1]
 801b684:	fb0a ee0b 	mla	lr, sl, fp, lr
 801b688:	f897 b001 	ldrb.w	fp, [r7, #1]
 801b68c:	fb1b fb04 	smulbb	fp, fp, r4
 801b690:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801b694:	fb0e be06 	mla	lr, lr, r6, fp
 801b698:	fa1f fe8e 	uxth.w	lr, lr
 801b69c:	f10e 0b01 	add.w	fp, lr, #1
 801b6a0:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801b6a4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b6a8:	f887 e001 	strb.w	lr, [r7, #1]
 801b6ac:	f89c c002 	ldrb.w	ip, [ip, #2]
 801b6b0:	f898 e002 	ldrb.w	lr, [r8, #2]
 801b6b4:	fb03 f30c 	mul.w	r3, r3, ip
 801b6b8:	fb09 330e 	mla	r3, r9, lr, r3
 801b6bc:	f892 e002 	ldrb.w	lr, [r2, #2]
 801b6c0:	7882      	ldrb	r2, [r0, #2]
 801b6c2:	fb01 310e 	mla	r1, r1, lr, r3
 801b6c6:	fb0a 1a02 	mla	sl, sl, r2, r1
 801b6ca:	78b9      	ldrb	r1, [r7, #2]
 801b6cc:	fb11 f104 	smulbb	r1, r1, r4
 801b6d0:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801b6d4:	fb0a 1606 	mla	r6, sl, r6, r1
 801b6d8:	b2b6      	uxth	r6, r6
 801b6da:	1c73      	adds	r3, r6, #1
 801b6dc:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801b6e0:	1236      	asrs	r6, r6, #8
 801b6e2:	70be      	strb	r6, [r7, #2]
 801b6e4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b6e6:	3703      	adds	r7, #3
 801b6e8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b6ea:	4413      	add	r3, r2
 801b6ec:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801b6ee:	9327      	str	r3, [sp, #156]	; 0x9c
 801b6f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b6f2:	4413      	add	r3, r2
 801b6f4:	9328      	str	r3, [sp, #160]	; 0xa0
 801b6f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b6f8:	3b01      	subs	r3, #1
 801b6fa:	9311      	str	r3, [sp, #68]	; 0x44
 801b6fc:	e741      	b.n	801b582 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x112>
 801b6fe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b700:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b702:	4413      	add	r3, r2
 801b704:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801b706:	9327      	str	r3, [sp, #156]	; 0x9c
 801b708:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b70a:	4413      	add	r3, r2
 801b70c:	9328      	str	r3, [sp, #160]	; 0xa0
 801b70e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b710:	3b01      	subs	r3, #1
 801b712:	930a      	str	r3, [sp, #40]	; 0x28
 801b714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b716:	3303      	adds	r3, #3
 801b718:	930b      	str	r3, [sp, #44]	; 0x2c
 801b71a:	e6e6      	b.n	801b4ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801b71c:	f47f aef8 	bne.w	801b510 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801b720:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b722:	2b00      	cmp	r3, #0
 801b724:	f340 811d 	ble.w	801b962 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f2>
 801b728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b72c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b72e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801b732:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801b736:	eef0 6a48 	vmov.f32	s13, s16
 801b73a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801b73e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801b742:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b746:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801b74a:	eef0 6a68 	vmov.f32	s13, s17
 801b74e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b752:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801b756:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801b75a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801b75e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801b762:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801b766:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801b76a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801b76e:	ee18 2a10 	vmov	r2, s16
 801b772:	eeb0 8a47 	vmov.f32	s16, s14
 801b776:	fb92 f3f3 	sdiv	r3, r2, r3
 801b77a:	ee18 2a90 	vmov	r2, s17
 801b77e:	9329      	str	r3, [sp, #164]	; 0xa4
 801b780:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b782:	eef0 8a67 	vmov.f32	s17, s15
 801b786:	fb92 f3f3 	sdiv	r3, r2, r3
 801b78a:	932a      	str	r3, [sp, #168]	; 0xa8
 801b78c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b78e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b790:	3b01      	subs	r3, #1
 801b792:	930f      	str	r3, [sp, #60]	; 0x3c
 801b794:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b796:	bf08      	it	eq
 801b798:	4613      	moveq	r3, r2
 801b79a:	930a      	str	r3, [sp, #40]	; 0x28
 801b79c:	e69e      	b.n	801b4dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801b79e:	b151      	cbz	r1, 801b7b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801b7a0:	5d52      	ldrb	r2, [r2, r5]
 801b7a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b7a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b7a8:	4402      	add	r2, r0
 801b7aa:	4640      	mov	r0, r8
 801b7ac:	46c4      	mov	ip, r8
 801b7ae:	e724      	b.n	801b5fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801b7b0:	4640      	mov	r0, r8
 801b7b2:	4642      	mov	r2, r8
 801b7b4:	e721      	b.n	801b5fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18a>
 801b7b6:	4640      	mov	r0, r8
 801b7b8:	4642      	mov	r2, r8
 801b7ba:	e7f7      	b.n	801b7ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33c>
 801b7bc:	1c46      	adds	r6, r0, #1
 801b7be:	d191      	bne.n	801b6e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801b7c0:	4285      	cmp	r5, r0
 801b7c2:	dd8f      	ble.n	801b6e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801b7c4:	1c54      	adds	r4, r2, #1
 801b7c6:	db8d      	blt.n	801b6e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801b7c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b7ca:	4294      	cmp	r4, r2
 801b7cc:	dd8a      	ble.n	801b6e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801b7ce:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b7d0:	9002      	str	r0, [sp, #8]
 801b7d2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b7d4:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801b7d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b7da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b7dc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801b7e0:	e9cd 5300 	strd	r5, r3, [sp]
 801b7e4:	4639      	mov	r1, r7
 801b7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7e8:	f7ff fd52 	bl	801b290 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801b7ec:	e77a      	b.n	801b6e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801b7ee:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801b7f0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b7f2:	1410      	asrs	r0, r2, #16
 801b7f4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801b7f8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801b7fa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b7fc:	1412      	asrs	r2, r2, #16
 801b7fe:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801b802:	fb05 2000 	mla	r0, r5, r0, r2
 801b806:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b808:	f814 8000 	ldrb.w	r8, [r4, r0]
 801b80c:	4402      	add	r2, r0
 801b80e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b810:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801b814:	eb00 0708 	add.w	r7, r0, r8
 801b818:	2b00      	cmp	r3, #0
 801b81a:	f000 8093 	beq.w	801b944 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801b81e:	7856      	ldrb	r6, [r2, #1]
 801b820:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b824:	4406      	add	r6, r0
 801b826:	2900      	cmp	r1, #0
 801b828:	f000 8095 	beq.w	801b956 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801b82c:	1950      	adds	r0, r2, r5
 801b82e:	5d52      	ldrb	r2, [r2, r5]
 801b830:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b832:	7840      	ldrb	r0, [r0, #1]
 801b834:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b838:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b83c:	4422      	add	r2, r4
 801b83e:	4420      	add	r0, r4
 801b840:	b29b      	uxth	r3, r3
 801b842:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b844:	b289      	uxth	r1, r1
 801b846:	f10c 0c03 	add.w	ip, ip, #3
 801b84a:	f814 b008 	ldrb.w	fp, [r4, r8]
 801b84e:	fb03 f901 	mul.w	r9, r3, r1
 801b852:	011b      	lsls	r3, r3, #4
 801b854:	f896 8000 	ldrb.w	r8, [r6]
 801b858:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801b85c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801b860:	eba3 0309 	sub.w	r3, r3, r9
 801b864:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b866:	b289      	uxth	r1, r1
 801b868:	b29b      	uxth	r3, r3
 801b86a:	ebae 0e01 	sub.w	lr, lr, r1
 801b86e:	fb03 f808 	mul.w	r8, r3, r8
 801b872:	fa1f fe8e 	uxth.w	lr, lr
 801b876:	fb0e 880b 	mla	r8, lr, fp, r8
 801b87a:	f892 b000 	ldrb.w	fp, [r2]
 801b87e:	fb01 880b 	mla	r8, r1, fp, r8
 801b882:	f890 b000 	ldrb.w	fp, [r0]
 801b886:	fb09 880b 	mla	r8, r9, fp, r8
 801b88a:	f81c bc06 	ldrb.w	fp, [ip, #-6]
 801b88e:	fb1b fb04 	smulbb	fp, fp, r4
 801b892:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801b896:	fb08 b80a 	mla	r8, r8, sl, fp
 801b89a:	fa1f f888 	uxth.w	r8, r8
 801b89e:	f108 0b01 	add.w	fp, r8, #1
 801b8a2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b8a6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b8aa:	f80c 8c06 	strb.w	r8, [ip, #-6]
 801b8ae:	f896 8001 	ldrb.w	r8, [r6, #1]
 801b8b2:	f897 b001 	ldrb.w	fp, [r7, #1]
 801b8b6:	fb03 f808 	mul.w	r8, r3, r8
 801b8ba:	fb0e 880b 	mla	r8, lr, fp, r8
 801b8be:	f892 b001 	ldrb.w	fp, [r2, #1]
 801b8c2:	fb01 880b 	mla	r8, r1, fp, r8
 801b8c6:	f890 b001 	ldrb.w	fp, [r0, #1]
 801b8ca:	fb09 880b 	mla	r8, r9, fp, r8
 801b8ce:	f81c bc05 	ldrb.w	fp, [ip, #-5]
 801b8d2:	fb1b fb04 	smulbb	fp, fp, r4
 801b8d6:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801b8da:	fb08 b80a 	mla	r8, r8, sl, fp
 801b8de:	fa1f f888 	uxth.w	r8, r8
 801b8e2:	f108 0b01 	add.w	fp, r8, #1
 801b8e6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b8ea:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b8ee:	f80c 8c05 	strb.w	r8, [ip, #-5]
 801b8f2:	78b6      	ldrb	r6, [r6, #2]
 801b8f4:	78bf      	ldrb	r7, [r7, #2]
 801b8f6:	4373      	muls	r3, r6
 801b8f8:	7896      	ldrb	r6, [r2, #2]
 801b8fa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b8fc:	fb0e 3307 	mla	r3, lr, r7, r3
 801b900:	fb01 3306 	mla	r3, r1, r6, r3
 801b904:	7886      	ldrb	r6, [r0, #2]
 801b906:	fb09 3906 	mla	r9, r9, r6, r3
 801b90a:	f81c 3c04 	ldrb.w	r3, [ip, #-4]
 801b90e:	fb13 f304 	smulbb	r3, r3, r4
 801b912:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801b916:	fb09 390a 	mla	r9, r9, sl, r3
 801b91a:	fa1f f989 	uxth.w	r9, r9
 801b91e:	f109 0301 	add.w	r3, r9, #1
 801b922:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801b926:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b928:	4413      	add	r3, r2
 801b92a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801b92c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b930:	9327      	str	r3, [sp, #156]	; 0x9c
 801b932:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b934:	f80c 9c04 	strb.w	r9, [ip, #-4]
 801b938:	4413      	add	r3, r2
 801b93a:	9328      	str	r3, [sp, #160]	; 0xa0
 801b93c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b93e:	3b01      	subs	r3, #1
 801b940:	9311      	str	r3, [sp, #68]	; 0x44
 801b942:	e601      	b.n	801b548 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b944:	b151      	cbz	r1, 801b95c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>
 801b946:	5d52      	ldrb	r2, [r2, r5]
 801b948:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b94a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b94e:	4402      	add	r2, r0
 801b950:	4638      	mov	r0, r7
 801b952:	463e      	mov	r6, r7
 801b954:	e774      	b.n	801b840 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801b956:	4638      	mov	r0, r7
 801b958:	463a      	mov	r2, r7
 801b95a:	e771      	b.n	801b840 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801b95c:	4638      	mov	r0, r7
 801b95e:	463a      	mov	r2, r7
 801b960:	e7f7      	b.n	801b952 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801b962:	b015      	add	sp, #84	; 0x54
 801b964:	ecbd 8b08 	vpop	{d8-d11}
 801b968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b96c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801b96c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b970:	780d      	ldrb	r5, [r1, #0]
 801b972:	f891 9002 	ldrb.w	r9, [r1, #2]
 801b976:	f045 457f 	orr.w	r5, r5, #4278190080	; 0xff000000
 801b97a:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801b97e:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801b982:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801b986:	f891 9001 	ldrb.w	r9, [r1, #1]
 801b98a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801b98e:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 801b992:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801b996:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 801b99a:	9501      	str	r5, [sp, #4]
 801b99c:	fb06 470c 	mla	r7, r6, ip, r4
 801b9a0:	2e00      	cmp	r6, #0
 801b9a2:	eb02 0e07 	add.w	lr, r2, r7
 801b9a6:	db46      	blt.n	801ba36 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801b9a8:	45b0      	cmp	r8, r6
 801b9aa:	dd44      	ble.n	801ba36 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xca>
 801b9ac:	2c00      	cmp	r4, #0
 801b9ae:	db40      	blt.n	801ba32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801b9b0:	45a4      	cmp	ip, r4
 801b9b2:	dd3e      	ble.n	801ba32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc6>
 801b9b4:	5dd7      	ldrb	r7, [r2, r7]
 801b9b6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b9ba:	441f      	add	r7, r3
 801b9bc:	1c62      	adds	r2, r4, #1
 801b9be:	d43d      	bmi.n	801ba3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801b9c0:	4594      	cmp	ip, r2
 801b9c2:	dd3b      	ble.n	801ba3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801b9c4:	f1ba 0f00 	cmp.w	sl, #0
 801b9c8:	d038      	beq.n	801ba3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd0>
 801b9ca:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801b9ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b9d2:	441d      	add	r5, r3
 801b9d4:	3601      	adds	r6, #1
 801b9d6:	d435      	bmi.n	801ba44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801b9d8:	45b0      	cmp	r8, r6
 801b9da:	dd33      	ble.n	801ba44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801b9dc:	b390      	cbz	r0, 801ba44 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd8>
 801b9de:	2c00      	cmp	r4, #0
 801b9e0:	db2e      	blt.n	801ba40 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801b9e2:	45a4      	cmp	ip, r4
 801b9e4:	dd2c      	ble.n	801ba40 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd4>
 801b9e6:	f81e 600c 	ldrb.w	r6, [lr, ip]
 801b9ea:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b9ee:	441e      	add	r6, r3
 801b9f0:	1c62      	adds	r2, r4, #1
 801b9f2:	d42a      	bmi.n	801ba4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801b9f4:	4594      	cmp	ip, r2
 801b9f6:	dd28      	ble.n	801ba4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801b9f8:	f1ba 0f00 	cmp.w	sl, #0
 801b9fc:	d025      	beq.n	801ba4a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xde>
 801b9fe:	44f4      	add	ip, lr
 801ba00:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801ba04:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ba08:	4413      	add	r3, r2
 801ba0a:	f1ba 0f0f 	cmp.w	sl, #15
 801ba0e:	f897 8000 	ldrb.w	r8, [r7]
 801ba12:	f895 9000 	ldrb.w	r9, [r5]
 801ba16:	f896 e000 	ldrb.w	lr, [r6]
 801ba1a:	f893 c000 	ldrb.w	ip, [r3]
 801ba1e:	d801      	bhi.n	801ba24 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb8>
 801ba20:	280f      	cmp	r0, #15
 801ba22:	d914      	bls.n	801ba4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe2>
 801ba24:	4b29      	ldr	r3, [pc, #164]	; (801bacc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801ba26:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801ba2a:	4a29      	ldr	r2, [pc, #164]	; (801bad0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801ba2c:	4829      	ldr	r0, [pc, #164]	; (801bad4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x168>)
 801ba2e:	f006 fc87 	bl	8022340 <__assert_func>
 801ba32:	af01      	add	r7, sp, #4
 801ba34:	e7c2      	b.n	801b9bc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801ba36:	ad01      	add	r5, sp, #4
 801ba38:	462f      	mov	r7, r5
 801ba3a:	e7cb      	b.n	801b9d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801ba3c:	ad01      	add	r5, sp, #4
 801ba3e:	e7c9      	b.n	801b9d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801ba40:	ae01      	add	r6, sp, #4
 801ba42:	e7d5      	b.n	801b9f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x84>
 801ba44:	ab01      	add	r3, sp, #4
 801ba46:	461e      	mov	r6, r3
 801ba48:	e7df      	b.n	801ba0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801ba4a:	ab01      	add	r3, sp, #4
 801ba4c:	e7dd      	b.n	801ba0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9e>
 801ba4e:	fa1f f48a 	uxth.w	r4, sl
 801ba52:	b280      	uxth	r0, r0
 801ba54:	fb04 fa00 	mul.w	sl, r4, r0
 801ba58:	0124      	lsls	r4, r4, #4
 801ba5a:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801ba5e:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 801ba62:	b282      	uxth	r2, r0
 801ba64:	eba4 000a 	sub.w	r0, r4, sl
 801ba68:	ebab 0b02 	sub.w	fp, fp, r2
 801ba6c:	b280      	uxth	r0, r0
 801ba6e:	fa1f fb8b 	uxth.w	fp, fp
 801ba72:	fb00 f909 	mul.w	r9, r0, r9
 801ba76:	fb0b 9808 	mla	r8, fp, r8, r9
 801ba7a:	fb02 8e0e 	mla	lr, r2, lr, r8
 801ba7e:	fb0a ec0c 	mla	ip, sl, ip, lr
 801ba82:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ba86:	f881 c000 	strb.w	ip, [r1]
 801ba8a:	786c      	ldrb	r4, [r5, #1]
 801ba8c:	f897 c001 	ldrb.w	ip, [r7, #1]
 801ba90:	4344      	muls	r4, r0
 801ba92:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801ba96:	7874      	ldrb	r4, [r6, #1]
 801ba98:	fb02 cc04 	mla	ip, r2, r4, ip
 801ba9c:	785c      	ldrb	r4, [r3, #1]
 801ba9e:	fb0a c404 	mla	r4, sl, r4, ip
 801baa2:	1224      	asrs	r4, r4, #8
 801baa4:	704c      	strb	r4, [r1, #1]
 801baa6:	78ad      	ldrb	r5, [r5, #2]
 801baa8:	78bc      	ldrb	r4, [r7, #2]
 801baaa:	4368      	muls	r0, r5
 801baac:	fb0b 0b04 	mla	fp, fp, r4, r0
 801bab0:	78b0      	ldrb	r0, [r6, #2]
 801bab2:	fb02 b000 	mla	r0, r2, r0, fp
 801bab6:	789a      	ldrb	r2, [r3, #2]
 801bab8:	fb0a 0a02 	mla	sl, sl, r2, r0
 801babc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bac0:	f881 a002 	strb.w	sl, [r1, #2]
 801bac4:	b003      	add	sp, #12
 801bac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801baca:	bf00      	nop
 801bacc:	08027a30 	.word	0x08027a30
 801bad0:	08027f26 	.word	0x08027f26
 801bad4:	08027af9 	.word	0x08027af9

0801bad8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801badc:	ed2d 8b0a 	vpush	{d8-d12}
 801bae0:	b08f      	sub	sp, #60	; 0x3c
 801bae2:	eeb0 aa40 	vmov.f32	s20, s0
 801bae6:	eef0 9a60 	vmov.f32	s19, s1
 801baea:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 801baec:	eeb0 9a41 	vmov.f32	s18, s2
 801baf0:	9307      	str	r3, [sp, #28]
 801baf2:	eeb0 8a62 	vmov.f32	s16, s5
 801baf6:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	; 0xac
 801bafa:	eef0 8a43 	vmov.f32	s17, s6
 801bafe:	900d      	str	r0, [sp, #52]	; 0x34
 801bb00:	eeb0 ca44 	vmov.f32	s24, s8
 801bb04:	6860      	ldr	r0, [r4, #4]
 801bb06:	eef0 ba64 	vmov.f32	s23, s9
 801bb0a:	9309      	str	r3, [sp, #36]	; 0x24
 801bb0c:	eeb0 ba45 	vmov.f32	s22, s10
 801bb10:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801bb14:	f9bd 50a8 	ldrsh.w	r5, [sp, #168]	; 0xa8
 801bb18:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 801bb1c:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801bb20:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801bb22:	fb00 1303 	mla	r3, r0, r3, r1
 801bb26:	6821      	ldr	r1, [r4, #0]
 801bb28:	6854      	ldr	r4, [r2, #4]
 801bb2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bb2e:	3404      	adds	r4, #4
 801bb30:	18cb      	adds	r3, r1, r3
 801bb32:	9308      	str	r3, [sp, #32]
 801bb34:	6813      	ldr	r3, [r2, #0]
 801bb36:	930a      	str	r3, [sp, #40]	; 0x28
 801bb38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bb3a:	2b00      	cmp	r3, #0
 801bb3c:	dc03      	bgt.n	801bb46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801bb3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bb40:	2b00      	cmp	r3, #0
 801bb42:	f340 81d2 	ble.w	801beea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801bb46:	9b07      	ldr	r3, [sp, #28]
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	f340 80e3 	ble.w	801bd14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801bb4e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801bb50:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bb52:	1412      	asrs	r2, r2, #16
 801bb54:	ea4f 4323 	mov.w	r3, r3, asr #16
 801bb58:	d42f      	bmi.n	801bbba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801bb5a:	1c51      	adds	r1, r2, #1
 801bb5c:	428d      	cmp	r5, r1
 801bb5e:	dd2f      	ble.n	801bbc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	db2d      	blt.n	801bbc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801bb64:	1c59      	adds	r1, r3, #1
 801bb66:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bb68:	4288      	cmp	r0, r1
 801bb6a:	dd29      	ble.n	801bbc0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801bb6c:	9b07      	ldr	r3, [sp, #28]
 801bb6e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801bb70:	3b01      	subs	r3, #1
 801bb72:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801bb74:	fb02 1203 	mla	r2, r2, r3, r1
 801bb78:	1412      	asrs	r2, r2, #16
 801bb7a:	d42b      	bmi.n	801bbd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801bb7c:	3201      	adds	r2, #1
 801bb7e:	4295      	cmp	r5, r2
 801bb80:	dd28      	ble.n	801bbd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801bb82:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801bb84:	9924      	ldr	r1, [sp, #144]	; 0x90
 801bb86:	fb02 1303 	mla	r3, r2, r3, r1
 801bb8a:	141b      	asrs	r3, r3, #16
 801bb8c:	d422      	bmi.n	801bbd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801bb8e:	3301      	adds	r3, #1
 801bb90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bb92:	429a      	cmp	r2, r3
 801bb94:	dd1e      	ble.n	801bbd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801bb96:	9b08      	ldr	r3, [sp, #32]
 801bb98:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801bb9c:	f103 0803 	add.w	r8, r3, #3
 801bba0:	f1ba 0f00 	cmp.w	sl, #0
 801bba4:	f300 8119 	bgt.w	801bdda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x302>
 801bba8:	9b07      	ldr	r3, [sp, #28]
 801bbaa:	9a08      	ldr	r2, [sp, #32]
 801bbac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bbb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bbb4:	441a      	add	r2, r3
 801bbb6:	9208      	str	r2, [sp, #32]
 801bbb8:	e0ae      	b.n	801bd18 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801bbba:	1c51      	adds	r1, r2, #1
 801bbbc:	f040 809b 	bne.w	801bcf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801bbc0:	42aa      	cmp	r2, r5
 801bbc2:	f280 8098 	bge.w	801bcf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801bbc6:	1c5a      	adds	r2, r3, #1
 801bbc8:	f2c0 8095 	blt.w	801bcf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801bbcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bbce:	4293      	cmp	r3, r2
 801bbd0:	f280 8091 	bge.w	801bcf6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 801bbd4:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 801bbd8:	f1bb 0f00 	cmp.w	fp, #0
 801bbdc:	dde4      	ble.n	801bba8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801bbde:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bbe0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801bbe2:	141a      	asrs	r2, r3, #16
 801bbe4:	9924      	ldr	r1, [sp, #144]	; 0x90
 801bbe6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801bbe8:	1400      	asrs	r0, r0, #16
 801bbea:	f3c1 3103 	ubfx	r1, r1, #12, #4
 801bbee:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801bbf2:	f100 80dc 	bmi.w	801bdae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d6>
 801bbf6:	1c47      	adds	r7, r0, #1
 801bbf8:	42bd      	cmp	r5, r7
 801bbfa:	f340 80da 	ble.w	801bdb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801bbfe:	2a00      	cmp	r2, #0
 801bc00:	f2c0 80d7 	blt.w	801bdb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801bc04:	f102 0c01 	add.w	ip, r2, #1
 801bc08:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801bc0a:	4567      	cmp	r7, ip
 801bc0c:	f340 80d1 	ble.w	801bdb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801bc10:	fb02 0005 	mla	r0, r2, r5, r0
 801bc14:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801bc16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bc18:	f817 8000 	ldrb.w	r8, [r7, r0]
 801bc1c:	4402      	add	r2, r0
 801bc1e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801bc22:	eb04 0c08 	add.w	ip, r4, r8
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	f000 80b3 	beq.w	801bd92 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ba>
 801bc2c:	7857      	ldrb	r7, [r2, #1]
 801bc2e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801bc32:	4427      	add	r7, r4
 801bc34:	2900      	cmp	r1, #0
 801bc36:	f000 80b4 	beq.w	801bda2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ca>
 801bc3a:	1950      	adds	r0, r2, r5
 801bc3c:	5d52      	ldrb	r2, [r2, r5]
 801bc3e:	7840      	ldrb	r0, [r0, #1]
 801bc40:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bc44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bc48:	4422      	add	r2, r4
 801bc4a:	4420      	add	r0, r4
 801bc4c:	b29b      	uxth	r3, r3
 801bc4e:	f814 a008 	ldrb.w	sl, [r4, r8]
 801bc52:	b289      	uxth	r1, r1
 801bc54:	f897 8000 	ldrb.w	r8, [r7]
 801bc58:	fb03 f901 	mul.w	r9, r3, r1
 801bc5c:	011b      	lsls	r3, r3, #4
 801bc5e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801bc62:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801bc66:	eba3 0309 	sub.w	r3, r3, r9
 801bc6a:	b289      	uxth	r1, r1
 801bc6c:	b29b      	uxth	r3, r3
 801bc6e:	ebae 0e01 	sub.w	lr, lr, r1
 801bc72:	fb03 f808 	mul.w	r8, r3, r8
 801bc76:	fa1f fe8e 	uxth.w	lr, lr
 801bc7a:	fb0e 880a 	mla	r8, lr, sl, r8
 801bc7e:	f892 a000 	ldrb.w	sl, [r2]
 801bc82:	fb01 880a 	mla	r8, r1, sl, r8
 801bc86:	f890 a000 	ldrb.w	sl, [r0]
 801bc8a:	fb09 880a 	mla	r8, r9, sl, r8
 801bc8e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bc92:	f886 8000 	strb.w	r8, [r6]
 801bc96:	f897 8001 	ldrb.w	r8, [r7, #1]
 801bc9a:	f89c a001 	ldrb.w	sl, [ip, #1]
 801bc9e:	fb03 f808 	mul.w	r8, r3, r8
 801bca2:	fb0e 880a 	mla	r8, lr, sl, r8
 801bca6:	f892 a001 	ldrb.w	sl, [r2, #1]
 801bcaa:	fb01 880a 	mla	r8, r1, sl, r8
 801bcae:	f890 a001 	ldrb.w	sl, [r0, #1]
 801bcb2:	fb09 880a 	mla	r8, r9, sl, r8
 801bcb6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bcba:	f886 8001 	strb.w	r8, [r6, #1]
 801bcbe:	78bf      	ldrb	r7, [r7, #2]
 801bcc0:	f89c c002 	ldrb.w	ip, [ip, #2]
 801bcc4:	437b      	muls	r3, r7
 801bcc6:	7892      	ldrb	r2, [r2, #2]
 801bcc8:	fb0e 330c 	mla	r3, lr, ip, r3
 801bccc:	fb01 3102 	mla	r1, r1, r2, r3
 801bcd0:	7882      	ldrb	r2, [r0, #2]
 801bcd2:	fb09 1902 	mla	r9, r9, r2, r1
 801bcd6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bcda:	f886 9002 	strb.w	r9, [r6, #2]
 801bcde:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801bce0:	3603      	adds	r6, #3
 801bce2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801bce4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801bce8:	4413      	add	r3, r2
 801bcea:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801bcec:	9323      	str	r3, [sp, #140]	; 0x8c
 801bcee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bcf0:	4413      	add	r3, r2
 801bcf2:	9324      	str	r3, [sp, #144]	; 0x90
 801bcf4:	e770      	b.n	801bbd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801bcf6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801bcf8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801bcfa:	4413      	add	r3, r2
 801bcfc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801bcfe:	9323      	str	r3, [sp, #140]	; 0x8c
 801bd00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bd02:	4413      	add	r3, r2
 801bd04:	9324      	str	r3, [sp, #144]	; 0x90
 801bd06:	9b07      	ldr	r3, [sp, #28]
 801bd08:	3b01      	subs	r3, #1
 801bd0a:	9307      	str	r3, [sp, #28]
 801bd0c:	9b08      	ldr	r3, [sp, #32]
 801bd0e:	3303      	adds	r3, #3
 801bd10:	9308      	str	r3, [sp, #32]
 801bd12:	e718      	b.n	801bb46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801bd14:	f47f af2a 	bne.w	801bb6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801bd18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bd1a:	2b00      	cmp	r3, #0
 801bd1c:	f340 80e5 	ble.w	801beea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x412>
 801bd20:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801bd24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bd26:	ee79 9aab 	vadd.f32	s19, s19, s23
 801bd2a:	eef0 6a48 	vmov.f32	s13, s16
 801bd2e:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801bd32:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801bd36:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bd3a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801bd3e:	eef0 6a68 	vmov.f32	s13, s17
 801bd42:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bd46:	edcd 6a24 	vstr	s13, [sp, #144]	; 0x90
 801bd4a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801bd4e:	ee69 7a27 	vmul.f32	s15, s18, s15
 801bd52:	ee37 8a48 	vsub.f32	s16, s14, s16
 801bd56:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801bd5a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801bd5e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801bd62:	ee18 2a10 	vmov	r2, s16
 801bd66:	eeb0 8a47 	vmov.f32	s16, s14
 801bd6a:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd6e:	ee18 2a90 	vmov	r2, s17
 801bd72:	9325      	str	r3, [sp, #148]	; 0x94
 801bd74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bd76:	eef0 8a67 	vmov.f32	s17, s15
 801bd7a:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd7e:	9326      	str	r3, [sp, #152]	; 0x98
 801bd80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bd82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bd84:	3b01      	subs	r3, #1
 801bd86:	930b      	str	r3, [sp, #44]	; 0x2c
 801bd88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bd8a:	bf08      	it	eq
 801bd8c:	4613      	moveq	r3, r2
 801bd8e:	9307      	str	r3, [sp, #28]
 801bd90:	e6d2      	b.n	801bb38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801bd92:	b149      	cbz	r1, 801bda8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801bd94:	5d52      	ldrb	r2, [r2, r5]
 801bd96:	4660      	mov	r0, ip
 801bd98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bd9c:	4422      	add	r2, r4
 801bd9e:	4667      	mov	r7, ip
 801bda0:	e754      	b.n	801bc4c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801bda2:	4660      	mov	r0, ip
 801bda4:	4662      	mov	r2, ip
 801bda6:	e751      	b.n	801bc4c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801bda8:	4660      	mov	r0, ip
 801bdaa:	4662      	mov	r2, ip
 801bdac:	e7f7      	b.n	801bd9e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801bdae:	1c47      	adds	r7, r0, #1
 801bdb0:	d195      	bne.n	801bcde <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801bdb2:	4285      	cmp	r5, r0
 801bdb4:	dd93      	ble.n	801bcde <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801bdb6:	1c57      	adds	r7, r2, #1
 801bdb8:	db91      	blt.n	801bcde <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801bdba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801bdbc:	4297      	cmp	r7, r2
 801bdbe:	dd8e      	ble.n	801bcde <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801bdc0:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801bdc4:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801bdc8:	e9cd 5700 	strd	r5, r7, [sp]
 801bdcc:	4623      	mov	r3, r4
 801bdce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bdd0:	4631      	mov	r1, r6
 801bdd2:	980d      	ldr	r0, [sp, #52]	; 0x34
 801bdd4:	f7ff fdca 	bl	801b96c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801bdd8:	e781      	b.n	801bcde <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801bdda:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801bddc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801bdde:	1410      	asrs	r0, r2, #16
 801bde0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801bde4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801bde6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801bde8:	1412      	asrs	r2, r2, #16
 801bdea:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801bdee:	fb05 2000 	mla	r0, r5, r0, r2
 801bdf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bdf4:	f816 e000 	ldrb.w	lr, [r6, r0]
 801bdf8:	4402      	add	r2, r0
 801bdfa:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801bdfe:	eb04 070e 	add.w	r7, r4, lr
 801be02:	2b00      	cmp	r3, #0
 801be04:	d063      	beq.n	801bece <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801be06:	7856      	ldrb	r6, [r2, #1]
 801be08:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801be0c:	4426      	add	r6, r4
 801be0e:	2900      	cmp	r1, #0
 801be10:	d065      	beq.n	801bede <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801be12:	1950      	adds	r0, r2, r5
 801be14:	5d52      	ldrb	r2, [r2, r5]
 801be16:	7840      	ldrb	r0, [r0, #1]
 801be18:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801be1c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801be20:	4422      	add	r2, r4
 801be22:	4420      	add	r0, r4
 801be24:	b29b      	uxth	r3, r3
 801be26:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801be2a:	b289      	uxth	r1, r1
 801be2c:	f896 e000 	ldrb.w	lr, [r6]
 801be30:	f108 0803 	add.w	r8, r8, #3
 801be34:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801be38:	fb03 f901 	mul.w	r9, r3, r1
 801be3c:	011b      	lsls	r3, r3, #4
 801be3e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801be42:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801be46:	eba3 0309 	sub.w	r3, r3, r9
 801be4a:	b289      	uxth	r1, r1
 801be4c:	b29b      	uxth	r3, r3
 801be4e:	ebac 0c01 	sub.w	ip, ip, r1
 801be52:	fb03 fe0e 	mul.w	lr, r3, lr
 801be56:	fa1f fc8c 	uxth.w	ip, ip
 801be5a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801be5e:	f892 b000 	ldrb.w	fp, [r2]
 801be62:	fb01 ee0b 	mla	lr, r1, fp, lr
 801be66:	f890 b000 	ldrb.w	fp, [r0]
 801be6a:	fb09 ee0b 	mla	lr, r9, fp, lr
 801be6e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801be72:	f808 ec06 	strb.w	lr, [r8, #-6]
 801be76:	f896 e001 	ldrb.w	lr, [r6, #1]
 801be7a:	f897 b001 	ldrb.w	fp, [r7, #1]
 801be7e:	fb03 fe0e 	mul.w	lr, r3, lr
 801be82:	fb0c ee0b 	mla	lr, ip, fp, lr
 801be86:	f892 b001 	ldrb.w	fp, [r2, #1]
 801be8a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801be8e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801be92:	fb09 ee0b 	mla	lr, r9, fp, lr
 801be96:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801be9a:	f808 ec05 	strb.w	lr, [r8, #-5]
 801be9e:	78b6      	ldrb	r6, [r6, #2]
 801bea0:	78bf      	ldrb	r7, [r7, #2]
 801bea2:	4373      	muls	r3, r6
 801bea4:	7896      	ldrb	r6, [r2, #2]
 801bea6:	7882      	ldrb	r2, [r0, #2]
 801bea8:	fb0c 3307 	mla	r3, ip, r7, r3
 801beac:	fb01 3306 	mla	r3, r1, r6, r3
 801beb0:	fb09 3902 	mla	r9, r9, r2, r3
 801beb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801beb6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801beb8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bebc:	4413      	add	r3, r2
 801bebe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801bec0:	f808 9c04 	strb.w	r9, [r8, #-4]
 801bec4:	9323      	str	r3, [sp, #140]	; 0x8c
 801bec6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801bec8:	4413      	add	r3, r2
 801beca:	9324      	str	r3, [sp, #144]	; 0x90
 801becc:	e668      	b.n	801bba0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801bece:	b149      	cbz	r1, 801bee4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40c>
 801bed0:	5d52      	ldrb	r2, [r2, r5]
 801bed2:	4638      	mov	r0, r7
 801bed4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bed8:	4422      	add	r2, r4
 801beda:	463e      	mov	r6, r7
 801bedc:	e7a2      	b.n	801be24 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801bede:	4638      	mov	r0, r7
 801bee0:	463a      	mov	r2, r7
 801bee2:	e79f      	b.n	801be24 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34c>
 801bee4:	4638      	mov	r0, r7
 801bee6:	463a      	mov	r2, r7
 801bee8:	e7f7      	b.n	801beda <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x402>
 801beea:	b00f      	add	sp, #60	; 0x3c
 801beec:	ecbd 8b0a 	vpop	{d8-d12}
 801bef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bef4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801bef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bef8:	b087      	sub	sp, #28
 801befa:	7888      	ldrb	r0, [r1, #2]
 801befc:	9002      	str	r0, [sp, #8]
 801befe:	7848      	ldrb	r0, [r1, #1]
 801bf00:	9e02      	ldr	r6, [sp, #8]
 801bf02:	9003      	str	r0, [sp, #12]
 801bf04:	7808      	ldrb	r0, [r1, #0]
 801bf06:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801bf0a:	9004      	str	r0, [sp, #16]
 801bf0c:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801bf10:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
 801bf14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801bf18:	9e03      	ldr	r6, [sp, #12]
 801bf1a:	f89d c050 	ldrb.w	ip, [sp, #80]	; 0x50
 801bf1e:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801bf22:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 801bf26:	e9dd 7412 	ldrd	r7, r4, [sp, #72]	; 0x48
 801bf2a:	fb04 7508 	mla	r5, r4, r8, r7
 801bf2e:	2c00      	cmp	r4, #0
 801bf30:	eb02 0905 	add.w	r9, r2, r5
 801bf34:	db45      	blt.n	801bfc2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801bf36:	45a2      	cmp	sl, r4
 801bf38:	dd43      	ble.n	801bfc2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xce>
 801bf3a:	2f00      	cmp	r7, #0
 801bf3c:	db3f      	blt.n	801bfbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801bf3e:	45b8      	cmp	r8, r7
 801bf40:	dd3d      	ble.n	801bfbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xca>
 801bf42:	5d52      	ldrb	r2, [r2, r5]
 801bf44:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801bf48:	1c7a      	adds	r2, r7, #1
 801bf4a:	d43d      	bmi.n	801bfc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801bf4c:	4590      	cmp	r8, r2
 801bf4e:	dd3b      	ble.n	801bfc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801bf50:	f1bc 0f00 	cmp.w	ip, #0
 801bf54:	d038      	beq.n	801bfc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd4>
 801bf56:	f899 2001 	ldrb.w	r2, [r9, #1]
 801bf5a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801bf5e:	3401      	adds	r4, #1
 801bf60:	d436      	bmi.n	801bfd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801bf62:	45a2      	cmp	sl, r4
 801bf64:	dd34      	ble.n	801bfd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801bf66:	f1be 0f00 	cmp.w	lr, #0
 801bf6a:	d031      	beq.n	801bfd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xdc>
 801bf6c:	2f00      	cmp	r7, #0
 801bf6e:	db2d      	blt.n	801bfcc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801bf70:	45b8      	cmp	r8, r7
 801bf72:	dd2b      	ble.n	801bfcc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xd8>
 801bf74:	f819 2008 	ldrb.w	r2, [r9, r8]
 801bf78:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801bf7c:	3701      	adds	r7, #1
 801bf7e:	d409      	bmi.n	801bf94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801bf80:	45b8      	cmp	r8, r7
 801bf82:	dd07      	ble.n	801bf94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801bf84:	f1bc 0f00 	cmp.w	ip, #0
 801bf88:	d004      	beq.n	801bf94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801bf8a:	44c8      	add	r8, r9
 801bf8c:	f898 2001 	ldrb.w	r2, [r8, #1]
 801bf90:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801bf94:	f1bc 0f0f 	cmp.w	ip, #15
 801bf98:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801bf9c:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801bfa0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801bfa4:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801bfa8:	d802      	bhi.n	801bfb0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbc>
 801bfaa:	f1be 0f0f 	cmp.w	lr, #15
 801bfae:	d911      	bls.n	801bfd4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xe0>
 801bfb0:	4b77      	ldr	r3, [pc, #476]	; (801c190 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x29c>)
 801bfb2:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801bfb6:	4a77      	ldr	r2, [pc, #476]	; (801c194 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a0>)
 801bfb8:	4877      	ldr	r0, [pc, #476]	; (801c198 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x2a4>)
 801bfba:	f006 f9c1 	bl	8022340 <__assert_func>
 801bfbe:	4606      	mov	r6, r0
 801bfc0:	e7c2      	b.n	801bf48 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x54>
 801bfc2:	4605      	mov	r5, r0
 801bfc4:	4606      	mov	r6, r0
 801bfc6:	e7ca      	b.n	801bf5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801bfc8:	4605      	mov	r5, r0
 801bfca:	e7c8      	b.n	801bf5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x6a>
 801bfcc:	4604      	mov	r4, r0
 801bfce:	e7d5      	b.n	801bf7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x88>
 801bfd0:	4604      	mov	r4, r0
 801bfd2:	e7df      	b.n	801bf94 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa0>
 801bfd4:	fa1f fc8c 	uxth.w	ip, ip
 801bfd8:	fa1f f28e 	uxth.w	r2, lr
 801bfdc:	fb02 fe0c 	mul.w	lr, r2, ip
 801bfe0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801bfe4:	ebce 1202 	rsb	r2, lr, r2, lsl #4
 801bfe8:	ebac 070e 	sub.w	r7, ip, lr
 801bfec:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801bff0:	b292      	uxth	r2, r2
 801bff2:	b2bf      	uxth	r7, r7
 801bff4:	1a9b      	subs	r3, r3, r2
 801bff6:	fb07 fc0a 	mul.w	ip, r7, sl
 801bffa:	b29b      	uxth	r3, r3
 801bffc:	fb03 cc0b 	mla	ip, r3, fp, ip
 801c000:	9301      	str	r3, [sp, #4]
 801c002:	fb02 cc09 	mla	ip, r2, r9, ip
 801c006:	fb0e cc08 	mla	ip, lr, r8, ip
 801c00a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801c00e:	9305      	str	r3, [sp, #20]
 801c010:	2b00      	cmp	r3, #0
 801c012:	f000 80b9 	beq.w	801c188 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x294>
 801c016:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801c01a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c01e:	fb0b fc0c 	mul.w	ip, fp, ip
 801c022:	fb0b f606 	mul.w	r6, fp, r6
 801c026:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801c02a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c02e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801c032:	44dc      	add	ip, fp
 801c034:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801c038:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801c03c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c040:	fb0a fb0b 	mul.w	fp, sl, fp
 801c044:	fb0a fa05 	mul.w	sl, sl, r5
 801c048:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801c04c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801c050:	f50a 7580 	add.w	r5, sl, #256	; 0x100
 801c054:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801c058:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801c05c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c060:	eb05 2a1a 	add.w	sl, r5, sl, lsr #8
 801c064:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c068:	0a36      	lsrs	r6, r6, #8
 801c06a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c06e:	44dc      	add	ip, fp
 801c070:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801c074:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801c078:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c07c:	fb09 fb0b 	mul.w	fp, r9, fp
 801c080:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c084:	fb09 f904 	mul.w	r9, r9, r4
 801c088:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c08c:	ea4f 251b 	mov.w	r5, fp, lsr #8
 801c090:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c094:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801c098:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c09c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801c0a0:	fb0c fc07 	mul.w	ip, ip, r7
 801c0a4:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801c0a8:	f000 14ff 	and.w	r4, r0, #16711935	; 0xff00ff
 801c0ac:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801c0b0:	445d      	add	r5, fp
 801c0b2:	fb08 f404 	mul.w	r4, r8, r4
 801c0b6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c0ba:	fb08 f800 	mul.w	r8, r8, r0
 801c0be:	0a2d      	lsrs	r5, r5, #8
 801c0c0:	0a20      	lsrs	r0, r4, #8
 801c0c2:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801c0c6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801c0ca:	fb07 f70a 	mul.w	r7, r7, sl
 801c0ce:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c0d2:	4404      	add	r4, r0
 801c0d4:	f508 7080 	add.w	r0, r8, #256	; 0x100
 801c0d8:	0a24      	lsrs	r4, r4, #8
 801c0da:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 801c0de:	9801      	ldr	r0, [sp, #4]
 801c0e0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801c0e4:	fb03 cc00 	mla	ip, r3, r0, ip
 801c0e8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801c0ec:	fb00 7606 	mla	r6, r0, r6, r7
 801c0f0:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 801c0f4:	fb04 cc0e 	mla	ip, r4, lr, ip
 801c0f8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801c0fc:	b280      	uxth	r0, r0
 801c0fe:	9c04      	ldr	r4, [sp, #16]
 801c100:	fb05 cc02 	mla	ip, r5, r2, ip
 801c104:	fb0e 6e08 	mla	lr, lr, r8, r6
 801c108:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c10c:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801c110:	f409 4c7f 	and.w	ip, r9, #65280	; 0xff00
 801c114:	fb02 ec0c 	mla	ip, r2, ip, lr
 801c118:	9a05      	ldr	r2, [sp, #20]
 801c11a:	4342      	muls	r2, r0
 801c11c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c120:	1c53      	adds	r3, r2, #1
 801c122:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c126:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c12a:	ea45 0c0c 	orr.w	ip, r5, ip
 801c12e:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801c132:	fa5f f28c 	uxtb.w	r2, ip
 801c136:	b2db      	uxtb	r3, r3
 801c138:	fb14 f403 	smulbb	r4, r4, r3
 801c13c:	fb02 4200 	mla	r2, r2, r0, r4
 801c140:	b292      	uxth	r2, r2
 801c142:	1c54      	adds	r4, r2, #1
 801c144:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801c148:	9c03      	ldr	r4, [sp, #12]
 801c14a:	fb14 f403 	smulbb	r4, r4, r3
 801c14e:	1212      	asrs	r2, r2, #8
 801c150:	700a      	strb	r2, [r1, #0]
 801c152:	f3cc 2207 	ubfx	r2, ip, #8, #8
 801c156:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801c15a:	fb02 4200 	mla	r2, r2, r0, r4
 801c15e:	b292      	uxth	r2, r2
 801c160:	1c54      	adds	r4, r2, #1
 801c162:	eb04 2212 	add.w	r2, r4, r2, lsr #8
 801c166:	1212      	asrs	r2, r2, #8
 801c168:	704a      	strb	r2, [r1, #1]
 801c16a:	9a02      	ldr	r2, [sp, #8]
 801c16c:	fb12 f303 	smulbb	r3, r2, r3
 801c170:	fb0c 3c00 	mla	ip, ip, r0, r3
 801c174:	fa1f fc8c 	uxth.w	ip, ip
 801c178:	f10c 0301 	add.w	r3, ip, #1
 801c17c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c180:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c184:	f881 c002 	strb.w	ip, [r1, #2]
 801c188:	b007      	add	sp, #28
 801c18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c18e:	bf00      	nop
 801c190:	08027a30 	.word	0x08027a30
 801c194:	08027f26 	.word	0x08027f26
 801c198:	08027af9 	.word	0x08027af9

0801c19c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1a0:	ed2d 8b08 	vpush	{d8-d11}
 801c1a4:	b09b      	sub	sp, #108	; 0x6c
 801c1a6:	eeb0 aa40 	vmov.f32	s20, s0
 801c1aa:	eef0 9a60 	vmov.f32	s19, s1
 801c1ae:	930a      	str	r3, [sp, #40]	; 0x28
 801c1b0:	eeb0 9a41 	vmov.f32	s18, s2
 801c1b4:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801c1b8:	eeb0 8a62 	vmov.f32	s16, s5
 801c1bc:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 801c1be:	eef0 8a43 	vmov.f32	s17, s6
 801c1c2:	9312      	str	r3, [sp, #72]	; 0x48
 801c1c4:	eef0 ba44 	vmov.f32	s23, s8
 801c1c8:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801c1cc:	eeb0 ba64 	vmov.f32	s22, s9
 801c1d0:	9019      	str	r0, [sp, #100]	; 0x64
 801c1d2:	eef0 aa45 	vmov.f32	s21, s10
 801c1d6:	9114      	str	r1, [sp, #80]	; 0x50
 801c1d8:	9317      	str	r3, [sp, #92]	; 0x5c
 801c1da:	6868      	ldr	r0, [r5, #4]
 801c1dc:	9218      	str	r2, [sp, #96]	; 0x60
 801c1de:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801c1e0:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801c1e4:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801c1e8:	fb00 1303 	mla	r3, r0, r3, r1
 801c1ec:	6829      	ldr	r1, [r5, #0]
 801c1ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c1f2:	18cb      	adds	r3, r1, r3
 801c1f4:	930d      	str	r3, [sp, #52]	; 0x34
 801c1f6:	6813      	ldr	r3, [r2, #0]
 801c1f8:	9313      	str	r3, [sp, #76]	; 0x4c
 801c1fa:	6853      	ldr	r3, [r2, #4]
 801c1fc:	3304      	adds	r3, #4
 801c1fe:	9309      	str	r3, [sp, #36]	; 0x24
 801c200:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c202:	2b00      	cmp	r3, #0
 801c204:	dc03      	bgt.n	801c20e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801c206:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c208:	2b00      	cmp	r3, #0
 801c20a:	f340 8352 	ble.w	801c8b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801c20e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c210:	2b00      	cmp	r3, #0
 801c212:	f340 81a2 	ble.w	801c55a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3be>
 801c216:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801c218:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c21a:	1412      	asrs	r2, r2, #16
 801c21c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801c220:	d431      	bmi.n	801c286 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801c222:	1c51      	adds	r1, r2, #1
 801c224:	428c      	cmp	r4, r1
 801c226:	dd31      	ble.n	801c28c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801c228:	2b00      	cmp	r3, #0
 801c22a:	db2f      	blt.n	801c28c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801c22c:	1c59      	adds	r1, r3, #1
 801c22e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c230:	4288      	cmp	r0, r1
 801c232:	dd2b      	ble.n	801c28c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf0>
 801c234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c236:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801c238:	3b01      	subs	r3, #1
 801c23a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801c23c:	fb02 1203 	mla	r2, r2, r3, r1
 801c240:	1412      	asrs	r2, r2, #16
 801c242:	d42d      	bmi.n	801c2a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801c244:	3201      	adds	r2, #1
 801c246:	4294      	cmp	r4, r2
 801c248:	dd2a      	ble.n	801c2a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801c24a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801c24c:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801c24e:	fb02 1303 	mla	r3, r2, r3, r1
 801c252:	141b      	asrs	r3, r3, #16
 801c254:	d424      	bmi.n	801c2a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801c256:	3301      	adds	r3, #1
 801c258:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c25a:	429a      	cmp	r2, r3
 801c25c:	dd20      	ble.n	801c2a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801c25e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c260:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 801c264:	f103 0e03 	add.w	lr, r3, #3
 801c268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c26a:	9315      	str	r3, [sp, #84]	; 0x54
 801c26c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c26e:	2b00      	cmp	r3, #0
 801c270:	f300 81de 	bgt.w	801c630 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 801c274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c276:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c278:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c27c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c280:	441a      	add	r2, r3
 801c282:	920d      	str	r2, [sp, #52]	; 0x34
 801c284:	e16b      	b.n	801c55e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c2>
 801c286:	1c51      	adds	r1, r2, #1
 801c288:	f040 8158 	bne.w	801c53c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801c28c:	42a2      	cmp	r2, r4
 801c28e:	f280 8155 	bge.w	801c53c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801c292:	1c5a      	adds	r2, r3, #1
 801c294:	f2c0 8152 	blt.w	801c53c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801c298:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c29a:	4293      	cmp	r3, r2
 801c29c:	f280 814e 	bge.w	801c53c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801c2a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c2a2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801c2a4:	9316      	str	r3, [sp, #88]	; 0x58
 801c2a6:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801c2aa:	9315      	str	r3, [sp, #84]	; 0x54
 801c2ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c2ae:	2b00      	cmp	r3, #0
 801c2b0:	dde0      	ble.n	801c274 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801c2b2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801c2b4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c2b6:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801c2ba:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801c2bc:	141b      	asrs	r3, r3, #16
 801c2be:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c2c2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801c2c4:	1412      	asrs	r2, r2, #16
 801c2c6:	f100 819a 	bmi.w	801c5fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 801c2ca:	1c55      	adds	r5, r2, #1
 801c2cc:	42ac      	cmp	r4, r5
 801c2ce:	f340 8198 	ble.w	801c602 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801c2d2:	2b00      	cmp	r3, #0
 801c2d4:	f2c0 8195 	blt.w	801c602 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801c2d8:	1c5d      	adds	r5, r3, #1
 801c2da:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801c2dc:	42af      	cmp	r7, r5
 801c2de:	f340 8190 	ble.w	801c602 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801c2e2:	fb03 2304 	mla	r3, r3, r4, r2
 801c2e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c2e8:	18d5      	adds	r5, r2, r3
 801c2ea:	5cd3      	ldrb	r3, [r2, r3]
 801c2ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c2ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c2f2:	0e1f      	lsrs	r7, r3, #24
 801c2f4:	2800      	cmp	r0, #0
 801c2f6:	f000 8171 	beq.w	801c5dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801c2fa:	f895 c001 	ldrb.w	ip, [r5, #1]
 801c2fe:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801c302:	920e      	str	r2, [sp, #56]	; 0x38
 801c304:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801c308:	2900      	cmp	r1, #0
 801c30a:	f000 8172 	beq.w	801c5f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 801c30e:	eb05 0c04 	add.w	ip, r5, r4
 801c312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c314:	5d2d      	ldrb	r5, [r5, r4]
 801c316:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 801c31a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801c31e:	950b      	str	r5, [sp, #44]	; 0x2c
 801c320:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801c324:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801c326:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801c32a:	0e15      	lsrs	r5, r2, #24
 801c32c:	920f      	str	r2, [sp, #60]	; 0x3c
 801c32e:	b280      	uxth	r0, r0
 801c330:	b289      	uxth	r1, r1
 801c332:	fb00 fa01 	mul.w	sl, r0, r1
 801c336:	0100      	lsls	r0, r0, #4
 801c338:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801c33c:	eba0 080a 	sub.w	r8, r0, sl
 801c340:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801c344:	b289      	uxth	r1, r1
 801c346:	fa1f f888 	uxth.w	r8, r8
 801c34a:	1a52      	subs	r2, r2, r1
 801c34c:	fb08 f00e 	mul.w	r0, r8, lr
 801c350:	b292      	uxth	r2, r2
 801c352:	fb02 0007 	mla	r0, r2, r7, r0
 801c356:	fb01 0009 	mla	r0, r1, r9, r0
 801c35a:	fb0a 0005 	mla	r0, sl, r5, r0
 801c35e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c362:	2800      	cmp	r0, #0
 801c364:	f000 80dd 	beq.w	801c522 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801c368:	2fff      	cmp	r7, #255	; 0xff
 801c36a:	d01a      	beq.n	801c3a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 801c36c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801c370:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c374:	fb07 fc0c 	mul.w	ip, r7, ip
 801c378:	435f      	muls	r7, r3
 801c37a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801c37e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c382:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801c386:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c38a:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801c38e:	4463      	add	r3, ip
 801c390:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801c394:	0a1b      	lsrs	r3, r3, #8
 801c396:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801c39a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c39e:	ea43 030b 	orr.w	r3, r3, fp
 801c3a2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c3a6:	d01e      	beq.n	801c3e6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24a>
 801c3a8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801c3aa:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 801c3ae:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801c3b2:	fb0e fb0b 	mul.w	fp, lr, fp
 801c3b6:	fb0e fe07 	mul.w	lr, lr, r7
 801c3ba:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801c3be:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c3c2:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801c3c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c3ca:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801c3ce:	44dc      	add	ip, fp
 801c3d0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c3d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c3d8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801c3dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c3e0:	ea4c 070e 	orr.w	r7, ip, lr
 801c3e4:	970e      	str	r7, [sp, #56]	; 0x38
 801c3e6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801c3ea:	d01e      	beq.n	801c42a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801c3ec:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801c3ee:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801c3f2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801c3f6:	fb09 fe0e 	mul.w	lr, r9, lr
 801c3fa:	fb09 f907 	mul.w	r9, r9, r7
 801c3fe:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801c402:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801c406:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801c40a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c40e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801c412:	44f4      	add	ip, lr
 801c414:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c418:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c41c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801c420:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c424:	ea4c 0709 	orr.w	r7, ip, r9
 801c428:	970b      	str	r7, [sp, #44]	; 0x2c
 801c42a:	2dff      	cmp	r5, #255	; 0xff
 801c42c:	d01c      	beq.n	801c468 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 801c42e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c430:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801c434:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801c438:	fb05 fe0e 	mul.w	lr, r5, lr
 801c43c:	437d      	muls	r5, r7
 801c43e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801c442:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801c446:	f505 7780 	add.w	r7, r5, #256	; 0x100
 801c44a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c44e:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801c452:	44f4      	add	ip, lr
 801c454:	0a2d      	lsrs	r5, r5, #8
 801c456:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c45a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801c45e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c462:	ea4c 0505 	orr.w	r5, ip, r5
 801c466:	950f      	str	r5, [sp, #60]	; 0x3c
 801c468:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801c46a:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801c46e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c472:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801c476:	fb08 f505 	mul.w	r5, r8, r5
 801c47a:	fb02 5507 	mla	r5, r2, r7, r5
 801c47e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801c480:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c484:	fb01 5507 	mla	r5, r1, r7, r5
 801c488:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c48a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c48e:	fb0a 5507 	mla	r5, sl, r7, r5
 801c492:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801c494:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801c498:	0a2d      	lsrs	r5, r5, #8
 801c49a:	fb08 f807 	mul.w	r8, r8, r7
 801c49e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801c4a2:	fb02 8303 	mla	r3, r2, r3, r8
 801c4a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c4a8:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801c4ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c4ae:	fb01 330c 	mla	r3, r1, ip, r3
 801c4b2:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801c4b6:	fb0a 3a01 	mla	sl, sl, r1, r3
 801c4ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c4bc:	9915      	ldr	r1, [sp, #84]	; 0x54
 801c4be:	4343      	muls	r3, r0
 801c4c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c4c4:	1c58      	adds	r0, r3, #1
 801c4c6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c4ca:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801c4ce:	ea45 050a 	orr.w	r5, r5, sl
 801c4d2:	7833      	ldrb	r3, [r6, #0]
 801c4d4:	b2ea      	uxtb	r2, r5
 801c4d6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801c4da:	fb12 f201 	smulbb	r2, r2, r1
 801c4de:	b2c0      	uxtb	r0, r0
 801c4e0:	fb03 2300 	mla	r3, r3, r0, r2
 801c4e4:	b29b      	uxth	r3, r3
 801c4e6:	1c5a      	adds	r2, r3, #1
 801c4e8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c4ec:	7872      	ldrb	r2, [r6, #1]
 801c4ee:	fb12 f200 	smulbb	r2, r2, r0
 801c4f2:	121b      	asrs	r3, r3, #8
 801c4f4:	7033      	strb	r3, [r6, #0]
 801c4f6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801c4fa:	0c2d      	lsrs	r5, r5, #16
 801c4fc:	fb03 2301 	mla	r3, r3, r1, r2
 801c500:	b29b      	uxth	r3, r3
 801c502:	1c5a      	adds	r2, r3, #1
 801c504:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c508:	121b      	asrs	r3, r3, #8
 801c50a:	7073      	strb	r3, [r6, #1]
 801c50c:	78b3      	ldrb	r3, [r6, #2]
 801c50e:	fb13 f000 	smulbb	r0, r3, r0
 801c512:	fb05 0501 	mla	r5, r5, r1, r0
 801c516:	b2ad      	uxth	r5, r5
 801c518:	1c6b      	adds	r3, r5, #1
 801c51a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801c51e:	122d      	asrs	r5, r5, #8
 801c520:	70b5      	strb	r5, [r6, #2]
 801c522:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801c524:	3603      	adds	r6, #3
 801c526:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801c528:	4413      	add	r3, r2
 801c52a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801c52c:	932d      	str	r3, [sp, #180]	; 0xb4
 801c52e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c530:	4413      	add	r3, r2
 801c532:	932e      	str	r3, [sp, #184]	; 0xb8
 801c534:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c536:	3b01      	subs	r3, #1
 801c538:	9316      	str	r3, [sp, #88]	; 0x58
 801c53a:	e6b7      	b.n	801c2ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801c53c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801c53e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801c540:	4413      	add	r3, r2
 801c542:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801c544:	932d      	str	r3, [sp, #180]	; 0xb4
 801c546:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c548:	4413      	add	r3, r2
 801c54a:	932e      	str	r3, [sp, #184]	; 0xb8
 801c54c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c54e:	3b01      	subs	r3, #1
 801c550:	930a      	str	r3, [sp, #40]	; 0x28
 801c552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c554:	3303      	adds	r3, #3
 801c556:	930d      	str	r3, [sp, #52]	; 0x34
 801c558:	e659      	b.n	801c20e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801c55a:	f47f ae6b 	bne.w	801c234 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801c55e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c560:	2b00      	cmp	r3, #0
 801c562:	f340 81a6 	ble.w	801c8b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x716>
 801c566:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c56a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c56c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801c570:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801c574:	eef0 6a48 	vmov.f32	s13, s16
 801c578:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801c57c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801c580:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c584:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801c588:	eef0 6a68 	vmov.f32	s13, s17
 801c58c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c590:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 801c594:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801c598:	ee69 7a27 	vmul.f32	s15, s18, s15
 801c59c:	ee37 8a48 	vsub.f32	s16, s14, s16
 801c5a0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801c5a4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801c5a8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801c5ac:	ee18 2a10 	vmov	r2, s16
 801c5b0:	eeb0 8a47 	vmov.f32	s16, s14
 801c5b4:	fb92 f3f3 	sdiv	r3, r2, r3
 801c5b8:	ee18 2a90 	vmov	r2, s17
 801c5bc:	932f      	str	r3, [sp, #188]	; 0xbc
 801c5be:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c5c0:	eef0 8a67 	vmov.f32	s17, s15
 801c5c4:	fb92 f3f3 	sdiv	r3, r2, r3
 801c5c8:	9330      	str	r3, [sp, #192]	; 0xc0
 801c5ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c5cc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c5ce:	3b01      	subs	r3, #1
 801c5d0:	9314      	str	r3, [sp, #80]	; 0x50
 801c5d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c5d4:	bf08      	it	eq
 801c5d6:	4613      	moveq	r3, r2
 801c5d8:	930a      	str	r3, [sp, #40]	; 0x28
 801c5da:	e611      	b.n	801c200 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801c5dc:	b161      	cbz	r1, 801c5f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 801c5de:	5d2a      	ldrb	r2, [r5, r4]
 801c5e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801c5e2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801c5e6:	25ff      	movs	r5, #255	; 0xff
 801c5e8:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801c5ec:	920b      	str	r2, [sp, #44]	; 0x2c
 801c5ee:	46ae      	mov	lr, r5
 801c5f0:	e69d      	b.n	801c32e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801c5f2:	25ff      	movs	r5, #255	; 0xff
 801c5f4:	46a9      	mov	r9, r5
 801c5f6:	e69a      	b.n	801c32e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x192>
 801c5f8:	25ff      	movs	r5, #255	; 0xff
 801c5fa:	46a9      	mov	r9, r5
 801c5fc:	e7f7      	b.n	801c5ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x452>
 801c5fe:	1c57      	adds	r7, r2, #1
 801c600:	d18f      	bne.n	801c522 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801c602:	4294      	cmp	r4, r2
 801c604:	dd8d      	ble.n	801c522 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801c606:	1c5d      	adds	r5, r3, #1
 801c608:	db8b      	blt.n	801c522 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801c60a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c60c:	429d      	cmp	r5, r3
 801c60e:	dd88      	ble.n	801c522 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801c610:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801c612:	9202      	str	r2, [sp, #8]
 801c614:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c616:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801c61a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c61c:	9819      	ldr	r0, [sp, #100]	; 0x64
 801c61e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801c622:	e9cd 4300 	strd	r4, r3, [sp]
 801c626:	4631      	mov	r1, r6
 801c628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c62a:	f7ff fc63 	bl	801bef4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801c62e:	e778      	b.n	801c522 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x386>
 801c630:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801c632:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801c634:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801c638:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c63a:	1412      	asrs	r2, r2, #16
 801c63c:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801c640:	141b      	asrs	r3, r3, #16
 801c642:	fb04 2303 	mla	r3, r4, r3, r2
 801c646:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c648:	18d5      	adds	r5, r2, r3
 801c64a:	5cd3      	ldrb	r3, [r2, r3]
 801c64c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c64e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c652:	0e1e      	lsrs	r6, r3, #24
 801c654:	2900      	cmp	r1, #0
 801c656:	f000 811b 	beq.w	801c890 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f4>
 801c65a:	786a      	ldrb	r2, [r5, #1]
 801c65c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801c65e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801c662:	9210      	str	r2, [sp, #64]	; 0x40
 801c664:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801c668:	2800      	cmp	r0, #0
 801c66a:	f000 811c 	beq.w	801c8a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70a>
 801c66e:	192a      	adds	r2, r5, r4
 801c670:	5d2d      	ldrb	r5, [r5, r4]
 801c672:	7852      	ldrb	r2, [r2, #1]
 801c674:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801c678:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801c67c:	950c      	str	r5, [sp, #48]	; 0x30
 801c67e:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801c682:	0e15      	lsrs	r5, r2, #24
 801c684:	9211      	str	r2, [sp, #68]	; 0x44
 801c686:	b289      	uxth	r1, r1
 801c688:	b280      	uxth	r0, r0
 801c68a:	fb01 fa00 	mul.w	sl, r1, r0
 801c68e:	0109      	lsls	r1, r1, #4
 801c690:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801c694:	eba1 080a 	sub.w	r8, r1, sl
 801c698:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801c69c:	b280      	uxth	r0, r0
 801c69e:	fa1f f888 	uxth.w	r8, r8
 801c6a2:	1a12      	subs	r2, r2, r0
 801c6a4:	fb08 f10c 	mul.w	r1, r8, ip
 801c6a8:	b292      	uxth	r2, r2
 801c6aa:	fb02 1106 	mla	r1, r2, r6, r1
 801c6ae:	fb00 1109 	mla	r1, r0, r9, r1
 801c6b2:	fb0a 1105 	mla	r1, sl, r5, r1
 801c6b6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801c6ba:	2900      	cmp	r1, #0
 801c6bc:	f000 80da 	beq.w	801c874 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d8>
 801c6c0:	2eff      	cmp	r6, #255	; 0xff
 801c6c2:	d016      	beq.n	801c6f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 801c6c4:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801c6c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c6cc:	4377      	muls	r7, r6
 801c6ce:	435e      	muls	r6, r3
 801c6d0:	0a3b      	lsrs	r3, r7, #8
 801c6d2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c6d6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c6da:	443b      	add	r3, r7
 801c6dc:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801c6e0:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801c6e4:	0a1b      	lsrs	r3, r3, #8
 801c6e6:	0a3f      	lsrs	r7, r7, #8
 801c6e8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c6ec:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801c6f0:	433b      	orrs	r3, r7
 801c6f2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801c6f6:	d01d      	beq.n	801c734 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x598>
 801c6f8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c6fa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801c6fc:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801c700:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801c704:	fb0c f606 	mul.w	r6, ip, r6
 801c708:	fb0c fc07 	mul.w	ip, ip, r7
 801c70c:	0a37      	lsrs	r7, r6, #8
 801c70e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801c712:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c716:	4437      	add	r7, r6
 801c718:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801c71c:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801c720:	0a3f      	lsrs	r7, r7, #8
 801c722:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c726:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c72a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c72e:	ea47 060c 	orr.w	r6, r7, ip
 801c732:	9610      	str	r6, [sp, #64]	; 0x40
 801c734:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801c738:	d01d      	beq.n	801c776 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 801c73a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801c73c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801c740:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c744:	fb09 fc0c 	mul.w	ip, r9, ip
 801c748:	fb09 f906 	mul.w	r9, r9, r6
 801c74c:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801c750:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c754:	f509 7680 	add.w	r6, r9, #256	; 0x100
 801c758:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c75c:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801c760:	4467      	add	r7, ip
 801c762:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c766:	0a3f      	lsrs	r7, r7, #8
 801c768:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801c76c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c770:	ea47 0609 	orr.w	r6, r7, r9
 801c774:	960c      	str	r6, [sp, #48]	; 0x30
 801c776:	2dff      	cmp	r5, #255	; 0xff
 801c778:	d01a      	beq.n	801c7b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x614>
 801c77a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c77c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801c780:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c784:	fb05 fc0c 	mul.w	ip, r5, ip
 801c788:	4375      	muls	r5, r6
 801c78a:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801c78e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c792:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801c796:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c79a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801c79e:	4467      	add	r7, ip
 801c7a0:	0a2d      	lsrs	r5, r5, #8
 801c7a2:	0a3f      	lsrs	r7, r7, #8
 801c7a4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801c7a8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c7ac:	433d      	orrs	r5, r7
 801c7ae:	9511      	str	r5, [sp, #68]	; 0x44
 801c7b0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801c7b2:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801c7b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c7ba:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801c7be:	fb08 f505 	mul.w	r5, r8, r5
 801c7c2:	fb02 5506 	mla	r5, r2, r6, r5
 801c7c6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801c7c8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801c7cc:	fb00 5506 	mla	r5, r0, r6, r5
 801c7d0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c7d2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801c7d6:	fb0a 5506 	mla	r5, sl, r6, r5
 801c7da:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801c7dc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c7e0:	0a2d      	lsrs	r5, r5, #8
 801c7e2:	fb08 f806 	mul.w	r8, r8, r6
 801c7e6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801c7ea:	fb02 8303 	mla	r3, r2, r3, r8
 801c7ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c7f0:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801c7f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c7f6:	fb00 3307 	mla	r3, r0, r7, r3
 801c7fa:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801c7fe:	fb0a 3c0c 	mla	ip, sl, ip, r3
 801c802:	fb01 f30b 	mul.w	r3, r1, fp
 801c806:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c80a:	1c59      	adds	r1, r3, #1
 801c80c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c810:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801c814:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801c818:	ea45 050c 	orr.w	r5, r5, ip
 801c81c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801c820:	b2ea      	uxtb	r2, r5
 801c822:	b2c9      	uxtb	r1, r1
 801c824:	fb12 f20b 	smulbb	r2, r2, fp
 801c828:	fb03 2301 	mla	r3, r3, r1, r2
 801c82c:	b29b      	uxth	r3, r3
 801c82e:	1c5a      	adds	r2, r3, #1
 801c830:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c834:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801c838:	fb12 f201 	smulbb	r2, r2, r1
 801c83c:	121b      	asrs	r3, r3, #8
 801c83e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801c842:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801c846:	0c2d      	lsrs	r5, r5, #16
 801c848:	fb03 230b 	mla	r3, r3, fp, r2
 801c84c:	b29b      	uxth	r3, r3
 801c84e:	1c5a      	adds	r2, r3, #1
 801c850:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c854:	121b      	asrs	r3, r3, #8
 801c856:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801c85a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801c85e:	fb13 f101 	smulbb	r1, r3, r1
 801c862:	fb05 150b 	mla	r5, r5, fp, r1
 801c866:	b2ad      	uxth	r5, r5
 801c868:	1c69      	adds	r1, r5, #1
 801c86a:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801c86e:	122d      	asrs	r5, r5, #8
 801c870:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801c874:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801c876:	f10e 0e03 	add.w	lr, lr, #3
 801c87a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801c87c:	4413      	add	r3, r2
 801c87e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801c880:	932d      	str	r3, [sp, #180]	; 0xb4
 801c882:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c884:	4413      	add	r3, r2
 801c886:	932e      	str	r3, [sp, #184]	; 0xb8
 801c888:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c88a:	3b01      	subs	r3, #1
 801c88c:	9315      	str	r3, [sp, #84]	; 0x54
 801c88e:	e4ed      	b.n	801c26c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801c890:	b160      	cbz	r0, 801c8ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x710>
 801c892:	5d2a      	ldrb	r2, [r5, r4]
 801c894:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801c896:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801c89a:	25ff      	movs	r5, #255	; 0xff
 801c89c:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801c8a0:	920c      	str	r2, [sp, #48]	; 0x30
 801c8a2:	46ac      	mov	ip, r5
 801c8a4:	e6ef      	b.n	801c686 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801c8a6:	25ff      	movs	r5, #255	; 0xff
 801c8a8:	46a9      	mov	r9, r5
 801c8aa:	e6ec      	b.n	801c686 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ea>
 801c8ac:	25ff      	movs	r5, #255	; 0xff
 801c8ae:	46a9      	mov	r9, r5
 801c8b0:	e7f7      	b.n	801c8a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x706>
 801c8b2:	b01b      	add	sp, #108	; 0x6c
 801c8b4:	ecbd 8b08 	vpop	{d8-d11}
 801c8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c8bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801c8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8c0:	b085      	sub	sp, #20
 801c8c2:	7888      	ldrb	r0, [r1, #2]
 801c8c4:	4692      	mov	sl, r2
 801c8c6:	4698      	mov	r8, r3
 801c8c8:	9000      	str	r0, [sp, #0]
 801c8ca:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801c8ce:	7848      	ldrb	r0, [r1, #1]
 801c8d0:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801c8d4:	9001      	str	r0, [sp, #4]
 801c8d6:	7808      	ldrb	r0, [r1, #0]
 801c8d8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801c8dc:	9002      	str	r0, [sp, #8]
 801c8de:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801c8e2:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801c8e6:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801c8ea:	fb04 560c 	mla	r6, r4, ip, r5
 801c8ee:	2c00      	cmp	r4, #0
 801c8f0:	eb02 0e06 	add.w	lr, r2, r6
 801c8f4:	9a00      	ldr	r2, [sp, #0]
 801c8f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801c8fa:	9a01      	ldr	r2, [sp, #4]
 801c8fc:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801c900:	db3e      	blt.n	801c980 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801c902:	45a1      	cmp	r9, r4
 801c904:	dd3c      	ble.n	801c980 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc4>
 801c906:	2d00      	cmp	r5, #0
 801c908:	db38      	blt.n	801c97c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801c90a:	45ac      	cmp	ip, r5
 801c90c:	dd36      	ble.n	801c97c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc0>
 801c90e:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801c912:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801c916:	1c6e      	adds	r6, r5, #1
 801c918:	d435      	bmi.n	801c986 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801c91a:	45b4      	cmp	ip, r6
 801c91c:	dd33      	ble.n	801c986 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801c91e:	b393      	cbz	r3, 801c986 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xca>
 801c920:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801c924:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 801c928:	3401      	adds	r4, #1
 801c92a:	d430      	bmi.n	801c98e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801c92c:	45a1      	cmp	r9, r4
 801c92e:	dd2e      	ble.n	801c98e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801c930:	b36f      	cbz	r7, 801c98e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd2>
 801c932:	2d00      	cmp	r5, #0
 801c934:	db29      	blt.n	801c98a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801c936:	45ac      	cmp	ip, r5
 801c938:	dd27      	ble.n	801c98a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xce>
 801c93a:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801c93e:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801c942:	3501      	adds	r5, #1
 801c944:	d407      	bmi.n	801c956 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801c946:	45ac      	cmp	ip, r5
 801c948:	dd05      	ble.n	801c956 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801c94a:	b123      	cbz	r3, 801c956 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801c94c:	44f4      	add	ip, lr
 801c94e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801c952:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801c956:	2b0f      	cmp	r3, #15
 801c958:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801c95c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801c960:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801c964:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801c968:	d801      	bhi.n	801c96e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801c96a:	2f0f      	cmp	r7, #15
 801c96c:	d911      	bls.n	801c992 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xd6>
 801c96e:	4b76      	ldr	r3, [pc, #472]	; (801cb48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 801c970:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801c974:	4a75      	ldr	r2, [pc, #468]	; (801cb4c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801c976:	4876      	ldr	r0, [pc, #472]	; (801cb50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 801c978:	f005 fce2 	bl	8022340 <__assert_func>
 801c97c:	4602      	mov	r2, r0
 801c97e:	e7ca      	b.n	801c916 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x5a>
 801c980:	4606      	mov	r6, r0
 801c982:	4602      	mov	r2, r0
 801c984:	e7d0      	b.n	801c928 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801c986:	4606      	mov	r6, r0
 801c988:	e7ce      	b.n	801c928 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x6c>
 801c98a:	4604      	mov	r4, r0
 801c98c:	e7d9      	b.n	801c942 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x86>
 801c98e:	4604      	mov	r4, r0
 801c990:	e7e1      	b.n	801c956 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9a>
 801c992:	b29b      	uxth	r3, r3
 801c994:	b2bf      	uxth	r7, r7
 801c996:	fb07 fe03 	mul.w	lr, r7, r3
 801c99a:	011b      	lsls	r3, r3, #4
 801c99c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801c9a0:	eba3 0c0e 	sub.w	ip, r3, lr
 801c9a4:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801c9a8:	b2bf      	uxth	r7, r7
 801c9aa:	fa1f fc8c 	uxth.w	ip, ip
 801c9ae:	1bed      	subs	r5, r5, r7
 801c9b0:	fb0c f30a 	mul.w	r3, ip, sl
 801c9b4:	b2ad      	uxth	r5, r5
 801c9b6:	fb05 330b 	mla	r3, r5, fp, r3
 801c9ba:	fb07 3309 	mla	r3, r7, r9, r3
 801c9be:	fb0e 3308 	mla	r3, lr, r8, r3
 801c9c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c9c6:	9303      	str	r3, [sp, #12]
 801c9c8:	2b00      	cmp	r3, #0
 801c9ca:	f000 80b9 	beq.w	801cb40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x284>
 801c9ce:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c9d2:	d018      	beq.n	801ca06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x14a>
 801c9d4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801c9d8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c9dc:	fb0b f303 	mul.w	r3, fp, r3
 801c9e0:	fb0b fb02 	mul.w	fp, fp, r2
 801c9e4:	0a1a      	lsrs	r2, r3, #8
 801c9e6:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801c9ea:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c9ee:	441a      	add	r2, r3
 801c9f0:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801c9f4:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801c9f8:	0a12      	lsrs	r2, r2, #8
 801c9fa:	0a1b      	lsrs	r3, r3, #8
 801c9fc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801ca00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ca04:	431a      	orrs	r2, r3
 801ca06:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801ca0a:	d019      	beq.n	801ca40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x184>
 801ca0c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801ca10:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ca14:	fb0a fb0b 	mul.w	fp, sl, fp
 801ca18:	fb0a fa06 	mul.w	sl, sl, r6
 801ca1c:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801ca20:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ca24:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801ca28:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ca2c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801ca30:	445e      	add	r6, fp
 801ca32:	0a1b      	lsrs	r3, r3, #8
 801ca34:	0a36      	lsrs	r6, r6, #8
 801ca36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ca3a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ca3e:	431e      	orrs	r6, r3
 801ca40:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ca44:	d019      	beq.n	801ca7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1be>
 801ca46:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801ca4a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801ca4e:	fb09 fa0a 	mul.w	sl, r9, sl
 801ca52:	fb09 f904 	mul.w	r9, r9, r4
 801ca56:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801ca5a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ca5e:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801ca62:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801ca66:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801ca6a:	4454      	add	r4, sl
 801ca6c:	0a1b      	lsrs	r3, r3, #8
 801ca6e:	0a24      	lsrs	r4, r4, #8
 801ca70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ca74:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801ca78:	431c      	orrs	r4, r3
 801ca7a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ca7e:	d019      	beq.n	801cab4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f8>
 801ca80:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801ca84:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801ca88:	fb08 f909 	mul.w	r9, r8, r9
 801ca8c:	fb08 f800 	mul.w	r8, r8, r0
 801ca90:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801ca94:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801ca98:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801ca9c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801caa0:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801caa4:	4448      	add	r0, r9
 801caa6:	0a1b      	lsrs	r3, r3, #8
 801caa8:	0a00      	lsrs	r0, r0, #8
 801caaa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801caae:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801cab2:	4318      	orrs	r0, r3
 801cab4:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801cab8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801cabc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801cac0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801cac4:	fb0c f808 	mul.w	r8, ip, r8
 801cac8:	fb0c f606 	mul.w	r6, ip, r6
 801cacc:	fb05 8803 	mla	r8, r5, r3, r8
 801cad0:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801cad4:	fb05 6202 	mla	r2, r5, r2, r6
 801cad8:	fb07 8803 	mla	r8, r7, r3, r8
 801cadc:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801cae0:	fb0e 8303 	mla	r3, lr, r3, r8
 801cae4:	0a1b      	lsrs	r3, r3, #8
 801cae6:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801caea:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 801caee:	9c02      	ldr	r4, [sp, #8]
 801caf0:	fb07 2703 	mla	r7, r7, r3, r2
 801caf4:	9a03      	ldr	r2, [sp, #12]
 801caf6:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801cafa:	43d2      	mvns	r2, r2
 801cafc:	fb0e 7303 	mla	r3, lr, r3, r7
 801cb00:	b2d2      	uxtb	r2, r2
 801cb02:	0a1b      	lsrs	r3, r3, #8
 801cb04:	4354      	muls	r4, r2
 801cb06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cb0a:	1c60      	adds	r0, r4, #1
 801cb0c:	ea48 0303 	orr.w	r3, r8, r3
 801cb10:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801cb14:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801cb18:	7008      	strb	r0, [r1, #0]
 801cb1a:	9801      	ldr	r0, [sp, #4]
 801cb1c:	4350      	muls	r0, r2
 801cb1e:	1c44      	adds	r4, r0, #1
 801cb20:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 801cb24:	0a18      	lsrs	r0, r3, #8
 801cb26:	0c1b      	lsrs	r3, r3, #16
 801cb28:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801cb2c:	7048      	strb	r0, [r1, #1]
 801cb2e:	9800      	ldr	r0, [sp, #0]
 801cb30:	4350      	muls	r0, r2
 801cb32:	4602      	mov	r2, r0
 801cb34:	3001      	adds	r0, #1
 801cb36:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801cb3a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801cb3e:	708b      	strb	r3, [r1, #2]
 801cb40:	b005      	add	sp, #20
 801cb42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb46:	bf00      	nop
 801cb48:	08027a30 	.word	0x08027a30
 801cb4c:	08027f26 	.word	0x08027f26
 801cb50:	08027af9 	.word	0x08027af9

0801cb54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801cb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb58:	ed2d 8b08 	vpush	{d8-d11}
 801cb5c:	b097      	sub	sp, #92	; 0x5c
 801cb5e:	eeb0 aa40 	vmov.f32	s20, s0
 801cb62:	eef0 9a60 	vmov.f32	s19, s1
 801cb66:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 801cb68:	eeb0 9a41 	vmov.f32	s18, s2
 801cb6c:	9308      	str	r3, [sp, #32]
 801cb6e:	eeb0 8a62 	vmov.f32	s16, s5
 801cb72:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801cb76:	eef0 8a43 	vmov.f32	s17, s6
 801cb7a:	9015      	str	r0, [sp, #84]	; 0x54
 801cb7c:	eef0 ba44 	vmov.f32	s23, s8
 801cb80:	6868      	ldr	r0, [r5, #4]
 801cb82:	eeb0 ba64 	vmov.f32	s22, s9
 801cb86:	9112      	str	r1, [sp, #72]	; 0x48
 801cb88:	eef0 aa45 	vmov.f32	s21, s10
 801cb8c:	9310      	str	r3, [sp, #64]	; 0x40
 801cb8e:	9214      	str	r2, [sp, #80]	; 0x50
 801cb90:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801cb92:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 801cb96:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801cb9a:	fb00 1303 	mla	r3, r0, r3, r1
 801cb9e:	6829      	ldr	r1, [r5, #0]
 801cba0:	6855      	ldr	r5, [r2, #4]
 801cba2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cba6:	3504      	adds	r5, #4
 801cba8:	18cb      	adds	r3, r1, r3
 801cbaa:	930b      	str	r3, [sp, #44]	; 0x2c
 801cbac:	6813      	ldr	r3, [r2, #0]
 801cbae:	9311      	str	r3, [sp, #68]	; 0x44
 801cbb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	dc03      	bgt.n	801cbbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801cbb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cbb8:	2b00      	cmp	r3, #0
 801cbba:	f340 8333 	ble.w	801d224 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 801cbbe:	9b08      	ldr	r3, [sp, #32]
 801cbc0:	2b00      	cmp	r3, #0
 801cbc2:	f340 8190 	ble.w	801cee6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801cbc6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801cbc8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801cbca:	1412      	asrs	r2, r2, #16
 801cbcc:	ea4f 4323 	mov.w	r3, r3, asr #16
 801cbd0:	d42f      	bmi.n	801cc32 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801cbd2:	1c51      	adds	r1, r2, #1
 801cbd4:	428c      	cmp	r4, r1
 801cbd6:	dd2f      	ble.n	801cc38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801cbd8:	2b00      	cmp	r3, #0
 801cbda:	db2d      	blt.n	801cc38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801cbdc:	1c59      	adds	r1, r3, #1
 801cbde:	9810      	ldr	r0, [sp, #64]	; 0x40
 801cbe0:	4288      	cmp	r0, r1
 801cbe2:	dd29      	ble.n	801cc38 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801cbe4:	9b08      	ldr	r3, [sp, #32]
 801cbe6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801cbe8:	3b01      	subs	r3, #1
 801cbea:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801cbec:	fb02 1203 	mla	r2, r2, r3, r1
 801cbf0:	1412      	asrs	r2, r2, #16
 801cbf2:	d42b      	bmi.n	801cc4c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801cbf4:	3201      	adds	r2, #1
 801cbf6:	4294      	cmp	r4, r2
 801cbf8:	dd28      	ble.n	801cc4c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801cbfa:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801cbfc:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801cbfe:	fb02 1303 	mla	r3, r2, r3, r1
 801cc02:	141b      	asrs	r3, r3, #16
 801cc04:	d422      	bmi.n	801cc4c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801cc06:	3301      	adds	r3, #1
 801cc08:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cc0a:	429a      	cmp	r2, r3
 801cc0c:	dd1e      	ble.n	801cc4c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801cc0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc10:	f103 0803 	add.w	r8, r3, #3
 801cc14:	9b08      	ldr	r3, [sp, #32]
 801cc16:	9307      	str	r3, [sp, #28]
 801cc18:	9b07      	ldr	r3, [sp, #28]
 801cc1a:	2b00      	cmp	r3, #0
 801cc1c:	f300 81ca 	bgt.w	801cfb4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 801cc20:	9b08      	ldr	r3, [sp, #32]
 801cc22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cc24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cc28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cc2c:	441a      	add	r2, r3
 801cc2e:	920b      	str	r2, [sp, #44]	; 0x2c
 801cc30:	e15b      	b.n	801ceea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801cc32:	1c51      	adds	r1, r2, #1
 801cc34:	f040 8148 	bne.w	801cec8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801cc38:	42a2      	cmp	r2, r4
 801cc3a:	f280 8145 	bge.w	801cec8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801cc3e:	1c5a      	adds	r2, r3, #1
 801cc40:	f2c0 8142 	blt.w	801cec8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801cc44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cc46:	4293      	cmp	r3, r2
 801cc48:	f280 813e 	bge.w	801cec8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x374>
 801cc4c:	9b08      	ldr	r3, [sp, #32]
 801cc4e:	9313      	str	r3, [sp, #76]	; 0x4c
 801cc50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc52:	9307      	str	r3, [sp, #28]
 801cc54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cc56:	2b00      	cmp	r3, #0
 801cc58:	dde2      	ble.n	801cc20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801cc5a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801cc5c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801cc5e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801cc62:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801cc64:	141b      	asrs	r3, r3, #16
 801cc66:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801cc6a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801cc6c:	1412      	asrs	r2, r2, #16
 801cc6e:	f100 818b 	bmi.w	801cf88 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x434>
 801cc72:	1c56      	adds	r6, r2, #1
 801cc74:	42b4      	cmp	r4, r6
 801cc76:	f340 8189 	ble.w	801cf8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801cc7a:	2b00      	cmp	r3, #0
 801cc7c:	f2c0 8186 	blt.w	801cf8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801cc80:	1c5e      	adds	r6, r3, #1
 801cc82:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801cc84:	42b7      	cmp	r7, r6
 801cc86:	f340 8181 	ble.w	801cf8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x438>
 801cc8a:	fb03 2304 	mla	r3, r3, r4, r2
 801cc8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cc90:	18d6      	adds	r6, r2, r3
 801cc92:	5cd3      	ldrb	r3, [r2, r3]
 801cc94:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801cc98:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801cc9c:	2900      	cmp	r1, #0
 801cc9e:	f000 8163 	beq.w	801cf68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 801cca2:	7872      	ldrb	r2, [r6, #1]
 801cca4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801cca8:	920c      	str	r2, [sp, #48]	; 0x30
 801ccaa:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801ccae:	2800      	cmp	r0, #0
 801ccb0:	f000 8164 	beq.w	801cf7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x428>
 801ccb4:	1932      	adds	r2, r6, r4
 801ccb6:	5d36      	ldrb	r6, [r6, r4]
 801ccb8:	7852      	ldrb	r2, [r2, #1]
 801ccba:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801ccbe:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801ccc2:	9609      	str	r6, [sp, #36]	; 0x24
 801ccc4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801ccc8:	0e16      	lsrs	r6, r2, #24
 801ccca:	920d      	str	r2, [sp, #52]	; 0x34
 801cccc:	b289      	uxth	r1, r1
 801ccce:	b280      	uxth	r0, r0
 801ccd0:	fb01 fb00 	mul.w	fp, r1, r0
 801ccd4:	0109      	lsls	r1, r1, #4
 801ccd6:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801ccda:	eba1 090b 	sub.w	r9, r1, fp
 801ccde:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801cce2:	b280      	uxth	r0, r0
 801cce4:	fa1f f989 	uxth.w	r9, r9
 801cce8:	1a12      	subs	r2, r2, r0
 801ccea:	fb09 f108 	mul.w	r1, r9, r8
 801ccee:	b292      	uxth	r2, r2
 801ccf0:	fb02 110c 	mla	r1, r2, ip, r1
 801ccf4:	fb00 110a 	mla	r1, r0, sl, r1
 801ccf8:	fb0b 1106 	mla	r1, fp, r6, r1
 801ccfc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801cd00:	2900      	cmp	r1, #0
 801cd02:	f000 80d2 	beq.w	801ceaa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801cd06:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801cd0a:	d01b      	beq.n	801cd44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f0>
 801cd0c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801cd10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cd14:	fb0c fe0e 	mul.w	lr, ip, lr
 801cd18:	fb0c fc03 	mul.w	ip, ip, r3
 801cd1c:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801cd20:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801cd24:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801cd28:	4473      	add	r3, lr
 801cd2a:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801cd2e:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801cd32:	0a1b      	lsrs	r3, r3, #8
 801cd34:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cd38:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801cd3c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801cd40:	ea43 030e 	orr.w	r3, r3, lr
 801cd44:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801cd48:	d01e      	beq.n	801cd88 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x234>
 801cd4a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801cd4c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801cd50:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 801cd54:	fb08 fc0c 	mul.w	ip, r8, ip
 801cd58:	fb08 f80e 	mul.w	r8, r8, lr
 801cd5c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801cd60:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801cd64:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cd68:	44e6      	add	lr, ip
 801cd6a:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801cd6e:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801cd72:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cd76:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801cd7a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cd7e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801cd82:	ea4e 0708 	orr.w	r7, lr, r8
 801cd86:	970c      	str	r7, [sp, #48]	; 0x30
 801cd88:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801cd8c:	d01e      	beq.n	801cdcc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801cd8e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801cd90:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801cd94:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801cd98:	fb0a f808 	mul.w	r8, sl, r8
 801cd9c:	fb0a fa0c 	mul.w	sl, sl, ip
 801cda0:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801cda4:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801cda8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801cdac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cdb0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cdb4:	44c6      	add	lr, r8
 801cdb6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cdba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cdbe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cdc2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cdc6:	ea4e 070a 	orr.w	r7, lr, sl
 801cdca:	9709      	str	r7, [sp, #36]	; 0x24
 801cdcc:	2eff      	cmp	r6, #255	; 0xff
 801cdce:	d01d      	beq.n	801ce0c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 801cdd0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801cdd2:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801cdd6:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801cdda:	fb06 f808 	mul.w	r8, r6, r8
 801cdde:	fb06 f60c 	mul.w	r6, r6, ip
 801cde2:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801cde6:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801cdea:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801cdee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cdf2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801cdf6:	44c6      	add	lr, r8
 801cdf8:	0a36      	lsrs	r6, r6, #8
 801cdfa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cdfe:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ce02:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ce06:	ea4e 0606 	orr.w	r6, lr, r6
 801ce0a:	960d      	str	r6, [sp, #52]	; 0x34
 801ce0c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801ce0e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ce12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ce14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ce18:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ce1c:	43c9      	mvns	r1, r1
 801ce1e:	fb09 f606 	mul.w	r6, r9, r6
 801ce22:	b2c9      	uxtb	r1, r1
 801ce24:	fb02 660c 	mla	r6, r2, ip, r6
 801ce28:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801ce2c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801ce2e:	fb00 660c 	mla	r6, r0, ip, r6
 801ce32:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801ce36:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801ce38:	fb0b 660c 	mla	r6, fp, ip, r6
 801ce3c:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801ce40:	fb09 f90c 	mul.w	r9, r9, ip
 801ce44:	0a36      	lsrs	r6, r6, #8
 801ce46:	fb02 9303 	mla	r3, r2, r3, r9
 801ce4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ce4c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ce50:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801ce54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ce56:	fb00 330e 	mla	r3, r0, lr, r3
 801ce5a:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801ce5e:	fb0b 3b00 	mla	fp, fp, r0, r3
 801ce62:	9b07      	ldr	r3, [sp, #28]
 801ce64:	781b      	ldrb	r3, [r3, #0]
 801ce66:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ce6a:	fb03 f201 	mul.w	r2, r3, r1
 801ce6e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801ce72:	1c53      	adds	r3, r2, #1
 801ce74:	ea46 060b 	orr.w	r6, r6, fp
 801ce78:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ce7c:	9a07      	ldr	r2, [sp, #28]
 801ce7e:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801ce82:	7013      	strb	r3, [r2, #0]
 801ce84:	7853      	ldrb	r3, [r2, #1]
 801ce86:	434b      	muls	r3, r1
 801ce88:	1c5a      	adds	r2, r3, #1
 801ce8a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ce8e:	0a33      	lsrs	r3, r6, #8
 801ce90:	0c36      	lsrs	r6, r6, #16
 801ce92:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ce96:	9a07      	ldr	r2, [sp, #28]
 801ce98:	7053      	strb	r3, [r2, #1]
 801ce9a:	7893      	ldrb	r3, [r2, #2]
 801ce9c:	4359      	muls	r1, r3
 801ce9e:	1c4b      	adds	r3, r1, #1
 801cea0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801cea4:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 801cea8:	7096      	strb	r6, [r2, #2]
 801ceaa:	9b07      	ldr	r3, [sp, #28]
 801ceac:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ceae:	3303      	adds	r3, #3
 801ceb0:	9307      	str	r3, [sp, #28]
 801ceb2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ceb4:	4413      	add	r3, r2
 801ceb6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ceb8:	9329      	str	r3, [sp, #164]	; 0xa4
 801ceba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801cebc:	4413      	add	r3, r2
 801cebe:	932a      	str	r3, [sp, #168]	; 0xa8
 801cec0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cec2:	3b01      	subs	r3, #1
 801cec4:	9313      	str	r3, [sp, #76]	; 0x4c
 801cec6:	e6c5      	b.n	801cc54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801cec8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ceca:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801cecc:	4413      	add	r3, r2
 801cece:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ced0:	9329      	str	r3, [sp, #164]	; 0xa4
 801ced2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ced4:	4413      	add	r3, r2
 801ced6:	932a      	str	r3, [sp, #168]	; 0xa8
 801ced8:	9b08      	ldr	r3, [sp, #32]
 801ceda:	3b01      	subs	r3, #1
 801cedc:	9308      	str	r3, [sp, #32]
 801cede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cee0:	3303      	adds	r3, #3
 801cee2:	930b      	str	r3, [sp, #44]	; 0x2c
 801cee4:	e66b      	b.n	801cbbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801cee6:	f47f ae7d 	bne.w	801cbe4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801ceea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ceec:	2b00      	cmp	r3, #0
 801ceee:	f340 8199 	ble.w	801d224 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6d0>
 801cef2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cef6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cef8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801cefc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801cf00:	eef0 6a48 	vmov.f32	s13, s16
 801cf04:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801cf08:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801cf0c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cf10:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801cf14:	eef0 6a68 	vmov.f32	s13, s17
 801cf18:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cf1c:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 801cf20:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801cf24:	ee69 7a27 	vmul.f32	s15, s18, s15
 801cf28:	ee37 8a48 	vsub.f32	s16, s14, s16
 801cf2c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801cf30:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801cf34:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801cf38:	ee18 2a10 	vmov	r2, s16
 801cf3c:	eeb0 8a47 	vmov.f32	s16, s14
 801cf40:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf44:	ee18 2a90 	vmov	r2, s17
 801cf48:	932b      	str	r3, [sp, #172]	; 0xac
 801cf4a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cf4c:	eef0 8a67 	vmov.f32	s17, s15
 801cf50:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf54:	932c      	str	r3, [sp, #176]	; 0xb0
 801cf56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cf58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cf5a:	3b01      	subs	r3, #1
 801cf5c:	9312      	str	r3, [sp, #72]	; 0x48
 801cf5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cf60:	bf08      	it	eq
 801cf62:	4613      	moveq	r3, r2
 801cf64:	9308      	str	r3, [sp, #32]
 801cf66:	e623      	b.n	801cbb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801cf68:	b158      	cbz	r0, 801cf82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 801cf6a:	5d32      	ldrb	r2, [r6, r4]
 801cf6c:	26ff      	movs	r6, #255	; 0xff
 801cf6e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801cf72:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 801cf76:	9209      	str	r2, [sp, #36]	; 0x24
 801cf78:	46b0      	mov	r8, r6
 801cf7a:	e6a7      	b.n	801cccc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 801cf7c:	26ff      	movs	r6, #255	; 0xff
 801cf7e:	46b2      	mov	sl, r6
 801cf80:	e6a4      	b.n	801cccc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x178>
 801cf82:	26ff      	movs	r6, #255	; 0xff
 801cf84:	46b2      	mov	sl, r6
 801cf86:	e7f7      	b.n	801cf78 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 801cf88:	1c57      	adds	r7, r2, #1
 801cf8a:	d18e      	bne.n	801ceaa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801cf8c:	4294      	cmp	r4, r2
 801cf8e:	dd8c      	ble.n	801ceaa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801cf90:	1c5e      	adds	r6, r3, #1
 801cf92:	db8a      	blt.n	801ceaa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801cf94:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801cf96:	429e      	cmp	r6, r3
 801cf98:	dd87      	ble.n	801ceaa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801cf9a:	e9cd 1004 	strd	r1, r0, [sp, #16]
 801cf9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801cfa2:	e9cd 4600 	strd	r4, r6, [sp]
 801cfa6:	462b      	mov	r3, r5
 801cfa8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cfaa:	9907      	ldr	r1, [sp, #28]
 801cfac:	9815      	ldr	r0, [sp, #84]	; 0x54
 801cfae:	f7ff fc85 	bl	801c8bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801cfb2:	e77a      	b.n	801ceaa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801cfb4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801cfb6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801cfb8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801cfbc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801cfbe:	1409      	asrs	r1, r1, #16
 801cfc0:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801cfc4:	141b      	asrs	r3, r3, #16
 801cfc6:	fb04 1303 	mla	r3, r4, r3, r1
 801cfca:	9911      	ldr	r1, [sp, #68]	; 0x44
 801cfcc:	18ce      	adds	r6, r1, r3
 801cfce:	5ccb      	ldrb	r3, [r1, r3]
 801cfd0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801cfd4:	0e1f      	lsrs	r7, r3, #24
 801cfd6:	2a00      	cmp	r2, #0
 801cfd8:	f000 8114 	beq.w	801d204 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b0>
 801cfdc:	7871      	ldrb	r1, [r6, #1]
 801cfde:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801cfe2:	910e      	str	r1, [sp, #56]	; 0x38
 801cfe4:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801cfe8:	2800      	cmp	r0, #0
 801cfea:	f000 8115 	beq.w	801d218 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c4>
 801cfee:	1931      	adds	r1, r6, r4
 801cff0:	5d36      	ldrb	r6, [r6, r4]
 801cff2:	7849      	ldrb	r1, [r1, #1]
 801cff4:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801cff8:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801cffc:	960a      	str	r6, [sp, #40]	; 0x28
 801cffe:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801d002:	0e0e      	lsrs	r6, r1, #24
 801d004:	910f      	str	r1, [sp, #60]	; 0x3c
 801d006:	b292      	uxth	r2, r2
 801d008:	b280      	uxth	r0, r0
 801d00a:	fb02 fb00 	mul.w	fp, r2, r0
 801d00e:	0112      	lsls	r2, r2, #4
 801d010:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801d014:	eba2 090b 	sub.w	r9, r2, fp
 801d018:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801d01c:	b280      	uxth	r0, r0
 801d01e:	fa1f f989 	uxth.w	r9, r9
 801d022:	1a09      	subs	r1, r1, r0
 801d024:	fb09 f20e 	mul.w	r2, r9, lr
 801d028:	b289      	uxth	r1, r1
 801d02a:	fb01 2207 	mla	r2, r1, r7, r2
 801d02e:	fb00 220a 	mla	r2, r0, sl, r2
 801d032:	fb0b 2206 	mla	r2, fp, r6, r2
 801d036:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801d03a:	9213      	str	r2, [sp, #76]	; 0x4c
 801d03c:	2a00      	cmp	r2, #0
 801d03e:	f000 80d4 	beq.w	801d1ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x696>
 801d042:	2fff      	cmp	r7, #255	; 0xff
 801d044:	d01a      	beq.n	801d07c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x528>
 801d046:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801d04a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d04e:	fb07 fc0c 	mul.w	ip, r7, ip
 801d052:	435f      	muls	r7, r3
 801d054:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801d058:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d05c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d060:	4463      	add	r3, ip
 801d062:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 801d066:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 801d06a:	0a1b      	lsrs	r3, r3, #8
 801d06c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d070:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d074:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d078:	ea43 030c 	orr.w	r3, r3, ip
 801d07c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d080:	d01f      	beq.n	801d0c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56e>
 801d082:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801d084:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d086:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d08a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801d08e:	fb0e f707 	mul.w	r7, lr, r7
 801d092:	fb0e fe0c 	mul.w	lr, lr, ip
 801d096:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d09a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d09e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d0a2:	44bc      	add	ip, r7
 801d0a4:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801d0a8:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801d0ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d0b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d0b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d0b8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801d0bc:	ea4c 020e 	orr.w	r2, ip, lr
 801d0c0:	920e      	str	r2, [sp, #56]	; 0x38
 801d0c2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801d0c6:	d01e      	beq.n	801d106 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b2>
 801d0c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d0ca:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801d0ce:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801d0d2:	fb0a fe0e 	mul.w	lr, sl, lr
 801d0d6:	fb0a fa07 	mul.w	sl, sl, r7
 801d0da:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801d0de:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801d0e2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d0e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d0ea:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d0ee:	44f4      	add	ip, lr
 801d0f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d0f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d0f8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d0fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d100:	ea4c 020a 	orr.w	r2, ip, sl
 801d104:	920a      	str	r2, [sp, #40]	; 0x28
 801d106:	2eff      	cmp	r6, #255	; 0xff
 801d108:	d01c      	beq.n	801d144 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f0>
 801d10a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d10c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801d110:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801d114:	fb06 fe0e 	mul.w	lr, r6, lr
 801d118:	437e      	muls	r6, r7
 801d11a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801d11e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801d122:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801d126:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d12a:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801d12e:	44f4      	add	ip, lr
 801d130:	0a36      	lsrs	r6, r6, #8
 801d132:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d136:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d13a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d13e:	ea4c 0206 	orr.w	r2, ip, r6
 801d142:	920f      	str	r2, [sp, #60]	; 0x3c
 801d144:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d146:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801d14a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d14e:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801d152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d154:	fb09 f606 	mul.w	r6, r9, r6
 801d158:	fb01 6607 	mla	r6, r1, r7, r6
 801d15c:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801d160:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d162:	fb00 6607 	mla	r6, r0, r7, r6
 801d166:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801d16a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d16c:	fb0b 6607 	mla	r6, fp, r7, r6
 801d170:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801d174:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d176:	fb09 f907 	mul.w	r9, r9, r7
 801d17a:	0a36      	lsrs	r6, r6, #8
 801d17c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801d180:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d182:	fb01 9303 	mla	r3, r1, r3, r9
 801d186:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801d18a:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801d18e:	fb00 330c 	mla	r3, r0, ip, r3
 801d192:	fb0b 3e0e 	mla	lr, fp, lr, r3
 801d196:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d198:	43da      	mvns	r2, r3
 801d19a:	f818 3c03 	ldrb.w	r3, [r8, #-3]
 801d19e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d1a2:	b2d2      	uxtb	r2, r2
 801d1a4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801d1a8:	fb03 f102 	mul.w	r1, r3, r2
 801d1ac:	ea46 060e 	orr.w	r6, r6, lr
 801d1b0:	1c4b      	adds	r3, r1, #1
 801d1b2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801d1b6:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801d1ba:	f808 3c03 	strb.w	r3, [r8, #-3]
 801d1be:	f818 3c02 	ldrb.w	r3, [r8, #-2]
 801d1c2:	4353      	muls	r3, r2
 801d1c4:	1c59      	adds	r1, r3, #1
 801d1c6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801d1ca:	0a33      	lsrs	r3, r6, #8
 801d1cc:	0c36      	lsrs	r6, r6, #16
 801d1ce:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801d1d2:	f808 3c02 	strb.w	r3, [r8, #-2]
 801d1d6:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801d1da:	435a      	muls	r2, r3
 801d1dc:	1c53      	adds	r3, r2, #1
 801d1de:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801d1e2:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801d1e6:	f808 6c01 	strb.w	r6, [r8, #-1]
 801d1ea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d1ec:	f108 0803 	add.w	r8, r8, #3
 801d1f0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801d1f2:	4413      	add	r3, r2
 801d1f4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801d1f6:	9329      	str	r3, [sp, #164]	; 0xa4
 801d1f8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d1fa:	4413      	add	r3, r2
 801d1fc:	932a      	str	r3, [sp, #168]	; 0xa8
 801d1fe:	9b07      	ldr	r3, [sp, #28]
 801d200:	3b01      	subs	r3, #1
 801d202:	e508      	b.n	801cc16 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc2>
 801d204:	b158      	cbz	r0, 801d21e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ca>
 801d206:	5d31      	ldrb	r1, [r6, r4]
 801d208:	26ff      	movs	r6, #255	; 0xff
 801d20a:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801d20e:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801d212:	910a      	str	r1, [sp, #40]	; 0x28
 801d214:	46b6      	mov	lr, r6
 801d216:	e6f6      	b.n	801d006 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 801d218:	26ff      	movs	r6, #255	; 0xff
 801d21a:	46b2      	mov	sl, r6
 801d21c:	e6f3      	b.n	801d006 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b2>
 801d21e:	26ff      	movs	r6, #255	; 0xff
 801d220:	46b2      	mov	sl, r6
 801d222:	e7f7      	b.n	801d214 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c0>
 801d224:	b017      	add	sp, #92	; 0x5c
 801d226:	ecbd 8b08 	vpop	{d8-d11}
 801d22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d230 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801d230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d234:	b08d      	sub	sp, #52	; 0x34
 801d236:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 801d23a:	9103      	str	r1, [sp, #12]
 801d23c:	fb07 5803 	mla	r8, r7, r3, r5
 801d240:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801d244:	9803      	ldr	r0, [sp, #12]
 801d246:	2f00      	cmp	r7, #0
 801d248:	910b      	str	r1, [sp, #44]	; 0x2c
 801d24a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d24e:	9903      	ldr	r1, [sp, #12]
 801d250:	9c03      	ldr	r4, [sp, #12]
 801d252:	eb02 0608 	add.w	r6, r2, r8
 801d256:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801d25a:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 801d25e:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801d262:	7809      	ldrb	r1, [r1, #0]
 801d264:	7840      	ldrb	r0, [r0, #1]
 801d266:	78a4      	ldrb	r4, [r4, #2]
 801d268:	db51      	blt.n	801d30e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801d26a:	45be      	cmp	lr, r7
 801d26c:	dd4f      	ble.n	801d30e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801d26e:	2d00      	cmp	r5, #0
 801d270:	db49      	blt.n	801d306 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801d272:	42ab      	cmp	r3, r5
 801d274:	dd47      	ble.n	801d306 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801d276:	f812 2008 	ldrb.w	r2, [r2, r8]
 801d27a:	9204      	str	r2, [sp, #16]
 801d27c:	7872      	ldrb	r2, [r6, #1]
 801d27e:	9205      	str	r2, [sp, #20]
 801d280:	78b2      	ldrb	r2, [r6, #2]
 801d282:	9206      	str	r2, [sp, #24]
 801d284:	1c6a      	adds	r2, r5, #1
 801d286:	d449      	bmi.n	801d31c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801d288:	4293      	cmp	r3, r2
 801d28a:	dd47      	ble.n	801d31c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801d28c:	f1bc 0f00 	cmp.w	ip, #0
 801d290:	d044      	beq.n	801d31c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801d292:	7972      	ldrb	r2, [r6, #5]
 801d294:	f896 b003 	ldrb.w	fp, [r6, #3]
 801d298:	f896 a004 	ldrb.w	sl, [r6, #4]
 801d29c:	9201      	str	r2, [sp, #4]
 801d29e:	3701      	adds	r7, #1
 801d2a0:	d444      	bmi.n	801d32c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801d2a2:	45be      	cmp	lr, r7
 801d2a4:	dd42      	ble.n	801d32c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801d2a6:	f1b9 0f00 	cmp.w	r9, #0
 801d2aa:	f000 80c1 	beq.w	801d430 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 801d2ae:	2d00      	cmp	r5, #0
 801d2b0:	db38      	blt.n	801d324 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801d2b2:	42ab      	cmp	r3, r5
 801d2b4:	dd36      	ble.n	801d324 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801d2b6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801d2ba:	f816 8002 	ldrb.w	r8, [r6, r2]
 801d2be:	2203      	movs	r2, #3
 801d2c0:	fb03 6702 	mla	r7, r3, r2, r6
 801d2c4:	fb03 6202 	mla	r2, r3, r2, r6
 801d2c8:	787f      	ldrb	r7, [r7, #1]
 801d2ca:	f892 e002 	ldrb.w	lr, [r2, #2]
 801d2ce:	9702      	str	r7, [sp, #8]
 801d2d0:	3501      	adds	r5, #1
 801d2d2:	d432      	bmi.n	801d33a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 801d2d4:	42ab      	cmp	r3, r5
 801d2d6:	dd30      	ble.n	801d33a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 801d2d8:	f1bc 0f00 	cmp.w	ip, #0
 801d2dc:	d031      	beq.n	801d342 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 801d2de:	2703      	movs	r7, #3
 801d2e0:	fb13 7207 	smlabb	r2, r3, r7, r7
 801d2e4:	5cb5      	ldrb	r5, [r6, r2]
 801d2e6:	fb03 6207 	mla	r2, r3, r7, r6
 801d2ea:	fb03 6307 	mla	r3, r3, r7, r6
 801d2ee:	7912      	ldrb	r2, [r2, #4]
 801d2f0:	795e      	ldrb	r6, [r3, #5]
 801d2f2:	f1bc 0f0f 	cmp.w	ip, #15
 801d2f6:	d927      	bls.n	801d348 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 801d2f8:	4b53      	ldr	r3, [pc, #332]	; (801d448 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 801d2fa:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801d2fe:	4a53      	ldr	r2, [pc, #332]	; (801d44c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 801d300:	4853      	ldr	r0, [pc, #332]	; (801d450 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 801d302:	f005 f81d 	bl	8022340 <__assert_func>
 801d306:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801d30a:	9104      	str	r1, [sp, #16]
 801d30c:	e7ba      	b.n	801d284 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 801d30e:	9401      	str	r4, [sp, #4]
 801d310:	4682      	mov	sl, r0
 801d312:	468b      	mov	fp, r1
 801d314:	9104      	str	r1, [sp, #16]
 801d316:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801d31a:	e7c0      	b.n	801d29e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 801d31c:	9401      	str	r4, [sp, #4]
 801d31e:	4682      	mov	sl, r0
 801d320:	468b      	mov	fp, r1
 801d322:	e7bc      	b.n	801d29e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 801d324:	46a6      	mov	lr, r4
 801d326:	9002      	str	r0, [sp, #8]
 801d328:	4688      	mov	r8, r1
 801d32a:	e7d1      	b.n	801d2d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 801d32c:	4626      	mov	r6, r4
 801d32e:	4602      	mov	r2, r0
 801d330:	460d      	mov	r5, r1
 801d332:	46a6      	mov	lr, r4
 801d334:	9002      	str	r0, [sp, #8]
 801d336:	4688      	mov	r8, r1
 801d338:	e7db      	b.n	801d2f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801d33a:	4626      	mov	r6, r4
 801d33c:	4602      	mov	r2, r0
 801d33e:	460d      	mov	r5, r1
 801d340:	e7d7      	b.n	801d2f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801d342:	4626      	mov	r6, r4
 801d344:	4602      	mov	r2, r0
 801d346:	460d      	mov	r5, r1
 801d348:	f1b9 0f0f 	cmp.w	r9, #15
 801d34c:	d8d4      	bhi.n	801d2f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801d34e:	fa1f f38c 	uxth.w	r3, ip
 801d352:	fa1f fc89 	uxth.w	ip, r9
 801d356:	fb03 f70c 	mul.w	r7, r3, ip
 801d35a:	011b      	lsls	r3, r3, #4
 801d35c:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801d360:	9707      	str	r7, [sp, #28]
 801d362:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801d366:	fa1f fc8c 	uxth.w	ip, ip
 801d36a:	eba7 070c 	sub.w	r7, r7, ip
 801d36e:	b2bf      	uxth	r7, r7
 801d370:	9709      	str	r7, [sp, #36]	; 0x24
 801d372:	9f07      	ldr	r7, [sp, #28]
 801d374:	1bdb      	subs	r3, r3, r7
 801d376:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801d37a:	b29b      	uxth	r3, r3
 801d37c:	9708      	str	r7, [sp, #32]
 801d37e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801d380:	930a      	str	r3, [sp, #40]	; 0x28
 801d382:	ea6f 0907 	mvn.w	r9, r7
 801d386:	fb03 fb0b 	mul.w	fp, r3, fp
 801d38a:	9f04      	ldr	r7, [sp, #16]
 801d38c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d38e:	fa5f f989 	uxtb.w	r9, r9
 801d392:	fb03 bb07 	mla	fp, r3, r7, fp
 801d396:	9f07      	ldr	r7, [sp, #28]
 801d398:	fb11 f109 	smulbb	r1, r1, r9
 801d39c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d39e:	fb0c b808 	mla	r8, ip, r8, fp
 801d3a2:	fb10 f009 	smulbb	r0, r0, r9
 801d3a6:	fb14 f409 	smulbb	r4, r4, r9
 801d3aa:	fb07 8805 	mla	r8, r7, r5, r8
 801d3ae:	9d08      	ldr	r5, [sp, #32]
 801d3b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801d3b2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801d3b6:	fb08 1805 	mla	r8, r8, r5, r1
 801d3ba:	9d05      	ldr	r5, [sp, #20]
 801d3bc:	fa1f f888 	uxth.w	r8, r8
 801d3c0:	f108 0101 	add.w	r1, r8, #1
 801d3c4:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801d3c8:	9903      	ldr	r1, [sp, #12]
 801d3ca:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d3ce:	f881 8000 	strb.w	r8, [r1]
 801d3d2:	fb03 f10a 	mul.w	r1, r3, sl
 801d3d6:	fb07 1105 	mla	r1, r7, r5, r1
 801d3da:	9d02      	ldr	r5, [sp, #8]
 801d3dc:	fb0c 1105 	mla	r1, ip, r5, r1
 801d3e0:	9d07      	ldr	r5, [sp, #28]
 801d3e2:	fb05 1102 	mla	r1, r5, r2, r1
 801d3e6:	9a08      	ldr	r2, [sp, #32]
 801d3e8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d3ec:	fb01 0102 	mla	r1, r1, r2, r0
 801d3f0:	9a03      	ldr	r2, [sp, #12]
 801d3f2:	b289      	uxth	r1, r1
 801d3f4:	1c48      	adds	r0, r1, #1
 801d3f6:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801d3fa:	1209      	asrs	r1, r1, #8
 801d3fc:	7051      	strb	r1, [r2, #1]
 801d3fe:	9a01      	ldr	r2, [sp, #4]
 801d400:	4353      	muls	r3, r2
 801d402:	9a06      	ldr	r2, [sp, #24]
 801d404:	fb07 3702 	mla	r7, r7, r2, r3
 801d408:	9b08      	ldr	r3, [sp, #32]
 801d40a:	fb0c 7c0e 	mla	ip, ip, lr, r7
 801d40e:	fb05 c606 	mla	r6, r5, r6, ip
 801d412:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801d416:	fb06 4603 	mla	r6, r6, r3, r4
 801d41a:	9b03      	ldr	r3, [sp, #12]
 801d41c:	b2b6      	uxth	r6, r6
 801d41e:	f106 0e01 	add.w	lr, r6, #1
 801d422:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801d426:	1236      	asrs	r6, r6, #8
 801d428:	709e      	strb	r6, [r3, #2]
 801d42a:	b00d      	add	sp, #52	; 0x34
 801d42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d430:	f1bc 0f0f 	cmp.w	ip, #15
 801d434:	f63f af60 	bhi.w	801d2f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801d438:	4626      	mov	r6, r4
 801d43a:	4602      	mov	r2, r0
 801d43c:	460d      	mov	r5, r1
 801d43e:	46a6      	mov	lr, r4
 801d440:	9002      	str	r0, [sp, #8]
 801d442:	4688      	mov	r8, r1
 801d444:	e783      	b.n	801d34e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 801d446:	bf00      	nop
 801d448:	08027a30 	.word	0x08027a30
 801d44c:	08027f26 	.word	0x08027f26
 801d450:	08027af9 	.word	0x08027af9

0801d454 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d458:	ed2d 8b08 	vpush	{d8-d11}
 801d45c:	b0a1      	sub	sp, #132	; 0x84
 801d45e:	eeb0 aa40 	vmov.f32	s20, s0
 801d462:	eef0 9a60 	vmov.f32	s19, s1
 801d466:	9307      	str	r3, [sp, #28]
 801d468:	eeb0 9a41 	vmov.f32	s18, s2
 801d46c:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	; 0xe8
 801d470:	eeb0 8a62 	vmov.f32	s16, s5
 801d474:	9210      	str	r2, [sp, #64]	; 0x40
 801d476:	eef0 8a43 	vmov.f32	s17, s6
 801d47a:	9308      	str	r3, [sp, #32]
 801d47c:	eef0 ba44 	vmov.f32	s23, s8
 801d480:	f9bd 30ec 	ldrsh.w	r3, [sp, #236]	; 0xec
 801d484:	eeb0 ba64 	vmov.f32	s22, s9
 801d488:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 801d48a:	eef0 aa45 	vmov.f32	s21, s10
 801d48e:	930a      	str	r3, [sp, #40]	; 0x28
 801d490:	f89d 30f4 	ldrb.w	r3, [sp, #244]	; 0xf4
 801d494:	901f      	str	r0, [sp, #124]	; 0x7c
 801d496:	930f      	str	r3, [sp, #60]	; 0x3c
 801d498:	6850      	ldr	r0, [r2, #4]
 801d49a:	910e      	str	r1, [sp, #56]	; 0x38
 801d49c:	6812      	ldr	r2, [r2, #0]
 801d49e:	e9dd 1338 	ldrd	r1, r3, [sp, #224]	; 0xe0
 801d4a2:	e9dd 8b33 	ldrd	r8, fp, [sp, #204]	; 0xcc
 801d4a6:	fb00 1303 	mla	r3, r0, r3, r1
 801d4aa:	9908      	ldr	r1, [sp, #32]
 801d4ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d4b0:	18d3      	adds	r3, r2, r3
 801d4b2:	2203      	movs	r2, #3
 801d4b4:	9309      	str	r3, [sp, #36]	; 0x24
 801d4b6:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 801d4b8:	681b      	ldr	r3, [r3, #0]
 801d4ba:	930c      	str	r3, [sp, #48]	; 0x30
 801d4bc:	f06f 0304 	mvn.w	r3, #4
 801d4c0:	fb11 3302 	smlabb	r3, r1, r2, r3
 801d4c4:	930d      	str	r3, [sp, #52]	; 0x34
 801d4c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d4c8:	43db      	mvns	r3, r3
 801d4ca:	b2db      	uxtb	r3, r3
 801d4cc:	930b      	str	r3, [sp, #44]	; 0x2c
 801d4ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d4d0:	2b00      	cmp	r3, #0
 801d4d2:	dc03      	bgt.n	801d4dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 801d4d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d4d6:	2b00      	cmp	r3, #0
 801d4d8:	f340 81df 	ble.w	801d89a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 801d4dc:	9b07      	ldr	r3, [sp, #28]
 801d4de:	2b00      	cmp	r3, #0
 801d4e0:	f340 80f2 	ble.w	801d6c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801d4e4:	ea5f 4228 	movs.w	r2, r8, asr #16
 801d4e8:	ea4f 432b 	mov.w	r3, fp, asr #16
 801d4ec:	d430      	bmi.n	801d550 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801d4ee:	1c51      	adds	r1, r2, #1
 801d4f0:	9808      	ldr	r0, [sp, #32]
 801d4f2:	4281      	cmp	r1, r0
 801d4f4:	da2f      	bge.n	801d556 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801d4f6:	2b00      	cmp	r3, #0
 801d4f8:	db2d      	blt.n	801d556 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801d4fa:	1c59      	adds	r1, r3, #1
 801d4fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 801d4fe:	4288      	cmp	r0, r1
 801d500:	dd29      	ble.n	801d556 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801d502:	9b07      	ldr	r3, [sp, #28]
 801d504:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801d506:	3b01      	subs	r3, #1
 801d508:	fb02 8203 	mla	r2, r2, r3, r8
 801d50c:	1412      	asrs	r2, r2, #16
 801d50e:	d42d      	bmi.n	801d56c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801d510:	3201      	adds	r2, #1
 801d512:	9908      	ldr	r1, [sp, #32]
 801d514:	4291      	cmp	r1, r2
 801d516:	dd29      	ble.n	801d56c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801d518:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801d51a:	fb02 b303 	mla	r3, r2, r3, fp
 801d51e:	141b      	asrs	r3, r3, #16
 801d520:	d424      	bmi.n	801d56c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801d522:	3301      	adds	r3, #1
 801d524:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d526:	429a      	cmp	r2, r3
 801d528:	dd20      	ble.n	801d56c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 801d52a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d52c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801d530:	1cde      	adds	r6, r3, #3
 801d532:	f8bd e03c 	ldrh.w	lr, [sp, #60]	; 0x3c
 801d536:	f1bc 0f00 	cmp.w	ip, #0
 801d53a:	f300 811f 	bgt.w	801d77c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x328>
 801d53e:	9b07      	ldr	r3, [sp, #28]
 801d540:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d546:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d54a:	4423      	add	r3, r4
 801d54c:	9309      	str	r3, [sp, #36]	; 0x24
 801d54e:	e0bd      	b.n	801d6cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801d550:	1c57      	adds	r7, r2, #1
 801d552:	f040 80ae 	bne.w	801d6b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801d556:	9908      	ldr	r1, [sp, #32]
 801d558:	428a      	cmp	r2, r1
 801d55a:	f280 80aa 	bge.w	801d6b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801d55e:	1c5e      	adds	r6, r3, #1
 801d560:	f2c0 80a7 	blt.w	801d6b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801d564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d566:	4293      	cmp	r3, r2
 801d568:	f280 80a3 	bge.w	801d6b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x25e>
 801d56c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801d570:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801d572:	f1ba 0f00 	cmp.w	sl, #0
 801d576:	dde2      	ble.n	801d53e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801d578:	ea5f 4028 	movs.w	r0, r8, asr #16
 801d57c:	f3c8 3303 	ubfx	r3, r8, #12, #4
 801d580:	ea4f 412b 	mov.w	r1, fp, asr #16
 801d584:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801d588:	f100 80df 	bmi.w	801d74a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 801d58c:	1c45      	adds	r5, r0, #1
 801d58e:	9f08      	ldr	r7, [sp, #32]
 801d590:	42af      	cmp	r7, r5
 801d592:	f340 80dc 	ble.w	801d74e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801d596:	2900      	cmp	r1, #0
 801d598:	f2c0 80d9 	blt.w	801d74e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801d59c:	1c4d      	adds	r5, r1, #1
 801d59e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801d5a0:	42af      	cmp	r7, r5
 801d5a2:	f340 80d4 	ble.w	801d74e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801d5a6:	9d08      	ldr	r5, [sp, #32]
 801d5a8:	fb05 0101 	mla	r1, r5, r1, r0
 801d5ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d5ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d5b2:	1845      	adds	r5, r0, r1
 801d5b4:	5c40      	ldrb	r0, [r0, r1]
 801d5b6:	792f      	ldrb	r7, [r5, #4]
 801d5b8:	7869      	ldrb	r1, [r5, #1]
 801d5ba:	9711      	str	r7, [sp, #68]	; 0x44
 801d5bc:	796f      	ldrb	r7, [r5, #5]
 801d5be:	f895 e002 	ldrb.w	lr, [r5, #2]
 801d5c2:	f895 9003 	ldrb.w	r9, [r5, #3]
 801d5c6:	9712      	str	r7, [sp, #72]	; 0x48
 801d5c8:	b17a      	cbz	r2, 801d5ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x196>
 801d5ca:	3505      	adds	r5, #5
 801d5cc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801d5ce:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d5d0:	19ef      	adds	r7, r5, r7
 801d5d2:	5d2d      	ldrb	r5, [r5, r4]
 801d5d4:	787c      	ldrb	r4, [r7, #1]
 801d5d6:	9513      	str	r5, [sp, #76]	; 0x4c
 801d5d8:	9415      	str	r4, [sp, #84]	; 0x54
 801d5da:	78bc      	ldrb	r4, [r7, #2]
 801d5dc:	9417      	str	r4, [sp, #92]	; 0x5c
 801d5de:	78fc      	ldrb	r4, [r7, #3]
 801d5e0:	9414      	str	r4, [sp, #80]	; 0x50
 801d5e2:	793c      	ldrb	r4, [r7, #4]
 801d5e4:	9416      	str	r4, [sp, #88]	; 0x58
 801d5e6:	797c      	ldrb	r4, [r7, #5]
 801d5e8:	9418      	str	r4, [sp, #96]	; 0x60
 801d5ea:	b29b      	uxth	r3, r3
 801d5ec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d5ee:	b292      	uxth	r2, r2
 801d5f0:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801d5f4:	fb03 f702 	mul.w	r7, r3, r2
 801d5f8:	011b      	lsls	r3, r3, #4
 801d5fa:	ebc7 1202 	rsb	r2, r7, r2, lsl #4
 801d5fe:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801d602:	1bdb      	subs	r3, r3, r7
 801d604:	b292      	uxth	r2, r2
 801d606:	b29b      	uxth	r3, r3
 801d608:	ebac 0c02 	sub.w	ip, ip, r2
 801d60c:	fb03 f909 	mul.w	r9, r3, r9
 801d610:	fa1f fc8c 	uxth.w	ip, ip
 801d614:	fb0c 9000 	mla	r0, ip, r0, r9
 801d618:	f896 9000 	ldrb.w	r9, [r6]
 801d61c:	fb02 0004 	mla	r0, r2, r4, r0
 801d620:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d622:	fb07 0004 	mla	r0, r7, r4, r0
 801d626:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d628:	fb19 f904 	smulbb	r9, r9, r4
 801d62c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d630:	fb00 9005 	mla	r0, r0, r5, r9
 801d634:	b280      	uxth	r0, r0
 801d636:	f100 0901 	add.w	r9, r0, #1
 801d63a:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801d63e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d640:	4358      	muls	r0, r3
 801d642:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d646:	fb0c 0101 	mla	r1, ip, r1, r0
 801d64a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d64c:	f886 9000 	strb.w	r9, [r6]
 801d650:	fb02 1100 	mla	r1, r2, r0, r1
 801d654:	9816      	ldr	r0, [sp, #88]	; 0x58
 801d656:	fb07 1100 	mla	r1, r7, r0, r1
 801d65a:	7870      	ldrb	r0, [r6, #1]
 801d65c:	fb10 f004 	smulbb	r0, r0, r4
 801d660:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d664:	fb01 0105 	mla	r1, r1, r5, r0
 801d668:	b289      	uxth	r1, r1
 801d66a:	1c48      	adds	r0, r1, #1
 801d66c:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801d670:	1209      	asrs	r1, r1, #8
 801d672:	7071      	strb	r1, [r6, #1]
 801d674:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d676:	434b      	muls	r3, r1
 801d678:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801d67a:	fb0c 330e 	mla	r3, ip, lr, r3
 801d67e:	fb02 3201 	mla	r2, r2, r1, r3
 801d682:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d684:	fb07 2703 	mla	r7, r7, r3, r2
 801d688:	78b2      	ldrb	r2, [r6, #2]
 801d68a:	fb12 f204 	smulbb	r2, r2, r4
 801d68e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801d692:	fb07 2505 	mla	r5, r7, r5, r2
 801d696:	b2ad      	uxth	r5, r5
 801d698:	1c6f      	adds	r7, r5, #1
 801d69a:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801d69e:	122d      	asrs	r5, r5, #8
 801d6a0:	70b5      	strb	r5, [r6, #2]
 801d6a2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801d6a4:	3603      	adds	r6, #3
 801d6a6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801d6aa:	4498      	add	r8, r3
 801d6ac:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801d6ae:	449b      	add	fp, r3
 801d6b0:	e75f      	b.n	801d572 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 801d6b2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801d6b4:	4498      	add	r8, r3
 801d6b6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801d6b8:	449b      	add	fp, r3
 801d6ba:	9b07      	ldr	r3, [sp, #28]
 801d6bc:	3b01      	subs	r3, #1
 801d6be:	9307      	str	r3, [sp, #28]
 801d6c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d6c2:	3303      	adds	r3, #3
 801d6c4:	9309      	str	r3, [sp, #36]	; 0x24
 801d6c6:	e709      	b.n	801d4dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 801d6c8:	f47f af1b 	bne.w	801d502 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xae>
 801d6cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d6ce:	2b00      	cmp	r3, #0
 801d6d0:	f340 80e3 	ble.w	801d89a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 801d6d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d6d8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801d6da:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801d6de:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801d6e2:	eef0 6a48 	vmov.f32	s13, s16
 801d6e6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801d6ea:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801d6ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d6f2:	ee16 8a90 	vmov	r8, s13
 801d6f6:	eef0 6a68 	vmov.f32	s13, s17
 801d6fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d6fe:	ee16 ba90 	vmov	fp, s13
 801d702:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801d706:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d70a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801d70e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801d712:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801d716:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d71a:	ee18 2a10 	vmov	r2, s16
 801d71e:	eeb0 8a47 	vmov.f32	s16, s14
 801d722:	fb92 f3f3 	sdiv	r3, r2, r3
 801d726:	ee18 2a90 	vmov	r2, s17
 801d72a:	9335      	str	r3, [sp, #212]	; 0xd4
 801d72c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801d72e:	eef0 8a67 	vmov.f32	s17, s15
 801d732:	fb92 f3f3 	sdiv	r3, r2, r3
 801d736:	9336      	str	r3, [sp, #216]	; 0xd8
 801d738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d73a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d73c:	3b01      	subs	r3, #1
 801d73e:	930e      	str	r3, [sp, #56]	; 0x38
 801d740:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801d742:	bf08      	it	eq
 801d744:	4613      	moveq	r3, r2
 801d746:	9307      	str	r3, [sp, #28]
 801d748:	e6c1      	b.n	801d4ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801d74a:	1c45      	adds	r5, r0, #1
 801d74c:	d1a9      	bne.n	801d6a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801d74e:	9c08      	ldr	r4, [sp, #32]
 801d750:	42a0      	cmp	r0, r4
 801d752:	daa6      	bge.n	801d6a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801d754:	1c4c      	adds	r4, r1, #1
 801d756:	dba4      	blt.n	801d6a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801d758:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d75a:	428c      	cmp	r4, r1
 801d75c:	dda1      	ble.n	801d6a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801d75e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d760:	9001      	str	r0, [sp, #4]
 801d762:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801d764:	e9cd 1302 	strd	r1, r3, [sp, #8]
 801d768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d76a:	4631      	mov	r1, r6
 801d76c:	e9cd 2404 	strd	r2, r4, [sp, #16]
 801d770:	9300      	str	r3, [sp, #0]
 801d772:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d774:	9b08      	ldr	r3, [sp, #32]
 801d776:	f7ff fd5b 	bl	801d230 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801d77a:	e792      	b.n	801d6a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801d77c:	ea4f 4228 	mov.w	r2, r8, asr #16
 801d780:	9c08      	ldr	r4, [sp, #32]
 801d782:	ea4f 402b 	mov.w	r0, fp, asr #16
 801d786:	f3cb 3103 	ubfx	r1, fp, #12, #4
 801d78a:	f3c8 3303 	ubfx	r3, r8, #12, #4
 801d78e:	fb04 2000 	mla	r0, r4, r0, r2
 801d792:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d794:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d796:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d79a:	4402      	add	r2, r0
 801d79c:	5c25      	ldrb	r5, [r4, r0]
 801d79e:	7894      	ldrb	r4, [r2, #2]
 801d7a0:	7850      	ldrb	r0, [r2, #1]
 801d7a2:	9411      	str	r4, [sp, #68]	; 0x44
 801d7a4:	7954      	ldrb	r4, [r2, #5]
 801d7a6:	f892 a003 	ldrb.w	sl, [r2, #3]
 801d7aa:	f892 9004 	ldrb.w	r9, [r2, #4]
 801d7ae:	9412      	str	r4, [sp, #72]	; 0x48
 801d7b0:	b171      	cbz	r1, 801d7d0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801d7b2:	3205      	adds	r2, #5
 801d7b4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d7b6:	1917      	adds	r7, r2, r4
 801d7b8:	5d12      	ldrb	r2, [r2, r4]
 801d7ba:	9219      	str	r2, [sp, #100]	; 0x64
 801d7bc:	787a      	ldrb	r2, [r7, #1]
 801d7be:	921b      	str	r2, [sp, #108]	; 0x6c
 801d7c0:	78ba      	ldrb	r2, [r7, #2]
 801d7c2:	921d      	str	r2, [sp, #116]	; 0x74
 801d7c4:	78fa      	ldrb	r2, [r7, #3]
 801d7c6:	921a      	str	r2, [sp, #104]	; 0x68
 801d7c8:	793a      	ldrb	r2, [r7, #4]
 801d7ca:	921c      	str	r2, [sp, #112]	; 0x70
 801d7cc:	797a      	ldrb	r2, [r7, #5]
 801d7ce:	921e      	str	r2, [sp, #120]	; 0x78
 801d7d0:	b29b      	uxth	r3, r3
 801d7d2:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801d7d4:	b289      	uxth	r1, r1
 801d7d6:	3603      	adds	r6, #3
 801d7d8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801d7dc:	fb03 f201 	mul.w	r2, r3, r1
 801d7e0:	011b      	lsls	r3, r3, #4
 801d7e2:	ebc2 1101 	rsb	r1, r2, r1, lsl #4
 801d7e6:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801d7ea:	1a9b      	subs	r3, r3, r2
 801d7ec:	b289      	uxth	r1, r1
 801d7ee:	b29b      	uxth	r3, r3
 801d7f0:	1a7f      	subs	r7, r7, r1
 801d7f2:	fb03 fa0a 	mul.w	sl, r3, sl
 801d7f6:	b2bf      	uxth	r7, r7
 801d7f8:	fb03 f909 	mul.w	r9, r3, r9
 801d7fc:	fb07 a505 	mla	r5, r7, r5, sl
 801d800:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 801d804:	fb07 9000 	mla	r0, r7, r0, r9
 801d808:	fb01 5504 	mla	r5, r1, r4, r5
 801d80c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801d80e:	fb02 5504 	mla	r5, r2, r4, r5
 801d812:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d814:	fb1a fa04 	smulbb	sl, sl, r4
 801d818:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801d81c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 801d81e:	fb05 a50e 	mla	r5, r5, lr, sl
 801d822:	fb01 0004 	mla	r0, r1, r4, r0
 801d826:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801d828:	b2ad      	uxth	r5, r5
 801d82a:	fb02 0004 	mla	r0, r2, r4, r0
 801d82e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d830:	f105 0a01 	add.w	sl, r5, #1
 801d834:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d838:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801d83c:	122d      	asrs	r5, r5, #8
 801d83e:	f806 5c06 	strb.w	r5, [r6, #-6]
 801d842:	f816 5c05 	ldrb.w	r5, [r6, #-5]
 801d846:	fb15 f504 	smulbb	r5, r5, r4
 801d84a:	fb00 500e 	mla	r0, r0, lr, r5
 801d84e:	b280      	uxth	r0, r0
 801d850:	1c45      	adds	r5, r0, #1
 801d852:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801d856:	1200      	asrs	r0, r0, #8
 801d858:	f806 0c05 	strb.w	r0, [r6, #-5]
 801d85c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d85e:	4343      	muls	r3, r0
 801d860:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d862:	fb07 3300 	mla	r3, r7, r0, r3
 801d866:	981d      	ldr	r0, [sp, #116]	; 0x74
 801d868:	fb01 3100 	mla	r1, r1, r0, r3
 801d86c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d86e:	fb02 1203 	mla	r2, r2, r3, r1
 801d872:	f816 1c04 	ldrb.w	r1, [r6, #-4]
 801d876:	fb11 f104 	smulbb	r1, r1, r4
 801d87a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801d87e:	fb02 120e 	mla	r2, r2, lr, r1
 801d882:	b292      	uxth	r2, r2
 801d884:	1c53      	adds	r3, r2, #1
 801d886:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801d88a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 801d88c:	1212      	asrs	r2, r2, #8
 801d88e:	4498      	add	r8, r3
 801d890:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801d892:	f806 2c04 	strb.w	r2, [r6, #-4]
 801d896:	449b      	add	fp, r3
 801d898:	e64d      	b.n	801d536 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801d89a:	b021      	add	sp, #132	; 0x84
 801d89c:	ecbd 8b08 	vpop	{d8-d11}
 801d8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d8a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801d8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8a8:	b085      	sub	sp, #20
 801d8aa:	784d      	ldrb	r5, [r1, #1]
 801d8ac:	788e      	ldrb	r6, [r1, #2]
 801d8ae:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801d8b2:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 801d8b6:	9403      	str	r4, [sp, #12]
 801d8b8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801d8bc:	780c      	ldrb	r4, [r1, #0]
 801d8be:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 801d8c2:	fb07 ce03 	mla	lr, r7, r3, ip
 801d8c6:	2f00      	cmp	r7, #0
 801d8c8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d8cc:	eb02 0b0e 	add.w	fp, r2, lr
 801d8d0:	db56      	blt.n	801d980 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801d8d2:	45b9      	cmp	r9, r7
 801d8d4:	dd54      	ble.n	801d980 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801d8d6:	f1bc 0f00 	cmp.w	ip, #0
 801d8da:	db4d      	blt.n	801d978 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 801d8dc:	4563      	cmp	r3, ip
 801d8de:	dd4b      	ble.n	801d978 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 801d8e0:	f812 200e 	ldrb.w	r2, [r2, lr]
 801d8e4:	9200      	str	r2, [sp, #0]
 801d8e6:	f89b 2001 	ldrb.w	r2, [fp, #1]
 801d8ea:	9201      	str	r2, [sp, #4]
 801d8ec:	f89b 2002 	ldrb.w	r2, [fp, #2]
 801d8f0:	9202      	str	r2, [sp, #8]
 801d8f2:	f11c 0201 	adds.w	r2, ip, #1
 801d8f6:	d44a      	bmi.n	801d98e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801d8f8:	4293      	cmp	r3, r2
 801d8fa:	dd48      	ble.n	801d98e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801d8fc:	2800      	cmp	r0, #0
 801d8fe:	d046      	beq.n	801d98e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801d900:	f89b e003 	ldrb.w	lr, [fp, #3]
 801d904:	f89b 8004 	ldrb.w	r8, [fp, #4]
 801d908:	f89b a005 	ldrb.w	sl, [fp, #5]
 801d90c:	3701      	adds	r7, #1
 801d90e:	d446      	bmi.n	801d99e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 801d910:	45b9      	cmp	r9, r7
 801d912:	dd44      	ble.n	801d99e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 801d914:	9a03      	ldr	r2, [sp, #12]
 801d916:	2a00      	cmp	r2, #0
 801d918:	d045      	beq.n	801d9a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 801d91a:	f1bc 0f00 	cmp.w	ip, #0
 801d91e:	db3a      	blt.n	801d996 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 801d920:	4563      	cmp	r3, ip
 801d922:	dd38      	ble.n	801d996 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 801d924:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801d928:	f04f 0903 	mov.w	r9, #3
 801d92c:	f81b 7002 	ldrb.w	r7, [fp, r2]
 801d930:	fb03 b209 	mla	r2, r3, r9, fp
 801d934:	fb03 b909 	mla	r9, r3, r9, fp
 801d938:	7852      	ldrb	r2, [r2, #1]
 801d93a:	f899 9002 	ldrb.w	r9, [r9, #2]
 801d93e:	f11c 0c01 	adds.w	ip, ip, #1
 801d942:	d40d      	bmi.n	801d960 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801d944:	4563      	cmp	r3, ip
 801d946:	dd0b      	ble.n	801d960 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801d948:	b160      	cbz	r0, 801d964 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 801d94a:	2603      	movs	r6, #3
 801d94c:	fb13 6406 	smlabb	r4, r3, r6, r6
 801d950:	fb03 b506 	mla	r5, r3, r6, fp
 801d954:	fb03 b306 	mla	r3, r3, r6, fp
 801d958:	f81b 4004 	ldrb.w	r4, [fp, r4]
 801d95c:	792d      	ldrb	r5, [r5, #4]
 801d95e:	795e      	ldrb	r6, [r3, #5]
 801d960:	280f      	cmp	r0, #15
 801d962:	d802      	bhi.n	801d96a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801d964:	9b03      	ldr	r3, [sp, #12]
 801d966:	2b0f      	cmp	r3, #15
 801d968:	d922      	bls.n	801d9b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 801d96a:	4b2f      	ldr	r3, [pc, #188]	; (801da28 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 801d96c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801d970:	4a2e      	ldr	r2, [pc, #184]	; (801da2c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 801d972:	482f      	ldr	r0, [pc, #188]	; (801da30 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 801d974:	f004 fce4 	bl	8022340 <__assert_func>
 801d978:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801d97c:	9400      	str	r4, [sp, #0]
 801d97e:	e7b8      	b.n	801d8f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 801d980:	46b2      	mov	sl, r6
 801d982:	46a8      	mov	r8, r5
 801d984:	46a6      	mov	lr, r4
 801d986:	9400      	str	r4, [sp, #0]
 801d988:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801d98c:	e7be      	b.n	801d90c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801d98e:	46b2      	mov	sl, r6
 801d990:	46a8      	mov	r8, r5
 801d992:	46a6      	mov	lr, r4
 801d994:	e7ba      	b.n	801d90c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801d996:	46b1      	mov	r9, r6
 801d998:	462a      	mov	r2, r5
 801d99a:	4627      	mov	r7, r4
 801d99c:	e7cf      	b.n	801d93e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801d99e:	46b1      	mov	r9, r6
 801d9a0:	462a      	mov	r2, r5
 801d9a2:	4627      	mov	r7, r4
 801d9a4:	e7dc      	b.n	801d960 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801d9a6:	280f      	cmp	r0, #15
 801d9a8:	d8df      	bhi.n	801d96a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801d9aa:	46b1      	mov	r9, r6
 801d9ac:	462a      	mov	r2, r5
 801d9ae:	4627      	mov	r7, r4
 801d9b0:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 801d9b4:	b280      	uxth	r0, r0
 801d9b6:	fb00 f30b 	mul.w	r3, r0, fp
 801d9ba:	0100      	lsls	r0, r0, #4
 801d9bc:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 801d9c0:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 801d9c4:	1ac0      	subs	r0, r0, r3
 801d9c6:	fa1f fb8b 	uxth.w	fp, fp
 801d9ca:	b280      	uxth	r0, r0
 801d9cc:	ebac 0c0b 	sub.w	ip, ip, fp
 801d9d0:	9003      	str	r0, [sp, #12]
 801d9d2:	fa1f fc8c 	uxth.w	ip, ip
 801d9d6:	fb00 fe0e 	mul.w	lr, r0, lr
 801d9da:	9800      	ldr	r0, [sp, #0]
 801d9dc:	fb0c ee00 	mla	lr, ip, r0, lr
 801d9e0:	9803      	ldr	r0, [sp, #12]
 801d9e2:	fb00 f808 	mul.w	r8, r0, r8
 801d9e6:	9801      	ldr	r0, [sp, #4]
 801d9e8:	fb0b ee07 	mla	lr, fp, r7, lr
 801d9ec:	fb0c 8800 	mla	r8, ip, r0, r8
 801d9f0:	fb03 ee04 	mla	lr, r3, r4, lr
 801d9f4:	fb0b 8202 	mla	r2, fp, r2, r8
 801d9f8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d9fc:	fb03 2505 	mla	r5, r3, r5, r2
 801da00:	9a03      	ldr	r2, [sp, #12]
 801da02:	f881 e000 	strb.w	lr, [r1]
 801da06:	fb02 f00a 	mul.w	r0, r2, sl
 801da0a:	9a02      	ldr	r2, [sp, #8]
 801da0c:	122d      	asrs	r5, r5, #8
 801da0e:	fb0c 0c02 	mla	ip, ip, r2, r0
 801da12:	704d      	strb	r5, [r1, #1]
 801da14:	fb0b c909 	mla	r9, fp, r9, ip
 801da18:	fb03 9606 	mla	r6, r3, r6, r9
 801da1c:	1236      	asrs	r6, r6, #8
 801da1e:	708e      	strb	r6, [r1, #2]
 801da20:	b005      	add	sp, #20
 801da22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da26:	bf00      	nop
 801da28:	08027a30 	.word	0x08027a30
 801da2c:	08027f26 	.word	0x08027f26
 801da30:	08027af9 	.word	0x08027af9

0801da34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801da34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da38:	ed2d 8b0a 	vpush	{d8-d12}
 801da3c:	b09d      	sub	sp, #116	; 0x74
 801da3e:	eeb0 aa40 	vmov.f32	s20, s0
 801da42:	eef0 9a60 	vmov.f32	s19, s1
 801da46:	9306      	str	r3, [sp, #24]
 801da48:	eeb0 9a41 	vmov.f32	s18, s2
 801da4c:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
 801da50:	eeb0 8a62 	vmov.f32	s16, s5
 801da54:	901b      	str	r0, [sp, #108]	; 0x6c
 801da56:	eef0 8a43 	vmov.f32	s17, s6
 801da5a:	9307      	str	r3, [sp, #28]
 801da5c:	eeb0 ca44 	vmov.f32	s24, s8
 801da60:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	; 0xe4
 801da64:	eef0 ba64 	vmov.f32	s23, s9
 801da68:	eeb0 ba45 	vmov.f32	s22, s10
 801da6c:	9309      	str	r3, [sp, #36]	; 0x24
 801da6e:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801da72:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
 801da76:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801da78:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 801da7c:	6850      	ldr	r0, [r2, #4]
 801da7e:	6812      	ldr	r2, [r2, #0]
 801da80:	fb00 1303 	mla	r3, r0, r3, r1
 801da84:	9907      	ldr	r1, [sp, #28]
 801da86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801da8a:	18d3      	adds	r3, r2, r3
 801da8c:	2203      	movs	r2, #3
 801da8e:	9308      	str	r3, [sp, #32]
 801da90:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 801da92:	681b      	ldr	r3, [r3, #0]
 801da94:	930a      	str	r3, [sp, #40]	; 0x28
 801da96:	f06f 0304 	mvn.w	r3, #4
 801da9a:	e9dd 6531 	ldrd	r6, r5, [sp, #196]	; 0xc4
 801da9e:	fb11 3302 	smlabb	r3, r1, r2, r3
 801daa2:	930b      	str	r3, [sp, #44]	; 0x2c
 801daa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801daa6:	2b00      	cmp	r3, #0
 801daa8:	dc03      	bgt.n	801dab2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801daaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801daac:	2b00      	cmp	r3, #0
 801daae:	f340 8193 	ble.w	801ddd8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 801dab2:	9b06      	ldr	r3, [sp, #24]
 801dab4:	2b00      	cmp	r3, #0
 801dab6:	f340 80d0 	ble.w	801dc5a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x226>
 801daba:	1432      	asrs	r2, r6, #16
 801dabc:	ea4f 4325 	mov.w	r3, r5, asr #16
 801dac0:	d42f      	bmi.n	801db22 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801dac2:	1c51      	adds	r1, r2, #1
 801dac4:	9807      	ldr	r0, [sp, #28]
 801dac6:	4281      	cmp	r1, r0
 801dac8:	da2e      	bge.n	801db28 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801daca:	2b00      	cmp	r3, #0
 801dacc:	db2c      	blt.n	801db28 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801dace:	1c59      	adds	r1, r3, #1
 801dad0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dad2:	4288      	cmp	r0, r1
 801dad4:	dd28      	ble.n	801db28 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801dad6:	9b06      	ldr	r3, [sp, #24]
 801dad8:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801dada:	3b01      	subs	r3, #1
 801dadc:	fb02 6203 	mla	r2, r2, r3, r6
 801dae0:	1412      	asrs	r2, r2, #16
 801dae2:	d42c      	bmi.n	801db3e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801dae4:	3201      	adds	r2, #1
 801dae6:	9907      	ldr	r1, [sp, #28]
 801dae8:	4291      	cmp	r1, r2
 801daea:	dd28      	ble.n	801db3e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801daec:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 801daee:	fb02 5303 	mla	r3, r2, r3, r5
 801daf2:	141b      	asrs	r3, r3, #16
 801daf4:	d423      	bmi.n	801db3e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801daf6:	3301      	adds	r3, #1
 801daf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dafa:	429a      	cmp	r2, r3
 801dafc:	dd1f      	ble.n	801db3e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801dafe:	9b08      	ldr	r3, [sp, #32]
 801db00:	f8dd e018 	ldr.w	lr, [sp, #24]
 801db04:	f103 0c03 	add.w	ip, r3, #3
 801db08:	f1be 0f00 	cmp.w	lr, #0
 801db0c:	f300 80fa 	bgt.w	801dd04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801db10:	9b06      	ldr	r3, [sp, #24]
 801db12:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801db16:	9b08      	ldr	r3, [sp, #32]
 801db18:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801db1c:	4423      	add	r3, r4
 801db1e:	9308      	str	r3, [sp, #32]
 801db20:	e09d      	b.n	801dc5e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 801db22:	1c51      	adds	r1, r2, #1
 801db24:	f040 808e 	bne.w	801dc44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801db28:	9907      	ldr	r1, [sp, #28]
 801db2a:	428a      	cmp	r2, r1
 801db2c:	f280 808a 	bge.w	801dc44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801db30:	1c5f      	adds	r7, r3, #1
 801db32:	f2c0 8087 	blt.w	801dc44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801db36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801db38:	4293      	cmp	r3, r2
 801db3a:	f280 8083 	bge.w	801dc44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 801db3e:	9f06      	ldr	r7, [sp, #24]
 801db40:	f8dd a020 	ldr.w	sl, [sp, #32]
 801db44:	2f00      	cmp	r7, #0
 801db46:	dde3      	ble.n	801db10 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 801db48:	1432      	asrs	r2, r6, #16
 801db4a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801db4e:	ea4f 4325 	mov.w	r3, r5, asr #16
 801db52:	f3c5 3b03 	ubfx	fp, r5, #12, #4
 801db56:	f100 80bf 	bmi.w	801dcd8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a4>
 801db5a:	1c50      	adds	r0, r2, #1
 801db5c:	9c07      	ldr	r4, [sp, #28]
 801db5e:	4284      	cmp	r4, r0
 801db60:	f340 80bc 	ble.w	801dcdc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801db64:	2b00      	cmp	r3, #0
 801db66:	f2c0 80b9 	blt.w	801dcdc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801db6a:	1c58      	adds	r0, r3, #1
 801db6c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801db6e:	4284      	cmp	r4, r0
 801db70:	f340 80b4 	ble.w	801dcdc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801db74:	9807      	ldr	r0, [sp, #28]
 801db76:	fb00 2303 	mla	r3, r0, r3, r2
 801db7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801db7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801db7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db82:	441a      	add	r2, r3
 801db84:	f810 c003 	ldrb.w	ip, [r0, r3]
 801db88:	7953      	ldrb	r3, [r2, #5]
 801db8a:	7850      	ldrb	r0, [r2, #1]
 801db8c:	f892 e002 	ldrb.w	lr, [r2, #2]
 801db90:	f892 9003 	ldrb.w	r9, [r2, #3]
 801db94:	f892 8004 	ldrb.w	r8, [r2, #4]
 801db98:	930e      	str	r3, [sp, #56]	; 0x38
 801db9a:	f1bb 0f00 	cmp.w	fp, #0
 801db9e:	d00f      	beq.n	801dbc0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x18c>
 801dba0:	3205      	adds	r2, #5
 801dba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dba4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dba6:	18d3      	adds	r3, r2, r3
 801dba8:	5d12      	ldrb	r2, [r2, r4]
 801dbaa:	920f      	str	r2, [sp, #60]	; 0x3c
 801dbac:	785a      	ldrb	r2, [r3, #1]
 801dbae:	9211      	str	r2, [sp, #68]	; 0x44
 801dbb0:	789a      	ldrb	r2, [r3, #2]
 801dbb2:	9213      	str	r2, [sp, #76]	; 0x4c
 801dbb4:	78da      	ldrb	r2, [r3, #3]
 801dbb6:	9210      	str	r2, [sp, #64]	; 0x40
 801dbb8:	791a      	ldrb	r2, [r3, #4]
 801dbba:	795b      	ldrb	r3, [r3, #5]
 801dbbc:	9212      	str	r2, [sp, #72]	; 0x48
 801dbbe:	9314      	str	r3, [sp, #80]	; 0x50
 801dbc0:	b28b      	uxth	r3, r1
 801dbc2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801dbc4:	fa1f f28b 	uxth.w	r2, fp
 801dbc8:	fb03 fb02 	mul.w	fp, r3, r2
 801dbcc:	011b      	lsls	r3, r3, #4
 801dbce:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801dbd2:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 801dbd6:	eba3 030b 	sub.w	r3, r3, fp
 801dbda:	b292      	uxth	r2, r2
 801dbdc:	b29b      	uxth	r3, r3
 801dbde:	1a89      	subs	r1, r1, r2
 801dbe0:	fb03 f808 	mul.w	r8, r3, r8
 801dbe4:	b289      	uxth	r1, r1
 801dbe6:	fb03 f909 	mul.w	r9, r3, r9
 801dbea:	fb01 8800 	mla	r8, r1, r0, r8
 801dbee:	9811      	ldr	r0, [sp, #68]	; 0x44
 801dbf0:	fb01 990c 	mla	r9, r1, ip, r9
 801dbf4:	fb02 8800 	mla	r8, r2, r0, r8
 801dbf8:	9812      	ldr	r0, [sp, #72]	; 0x48
 801dbfa:	fb02 9904 	mla	r9, r2, r4, r9
 801dbfe:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801dc00:	fb0b 8800 	mla	r8, fp, r0, r8
 801dc04:	980e      	ldr	r0, [sp, #56]	; 0x38
 801dc06:	fb0b 9904 	mla	r9, fp, r4, r9
 801dc0a:	4343      	muls	r3, r0
 801dc0c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dc10:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dc14:	fb01 330e 	mla	r3, r1, lr, r3
 801dc18:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801dc1a:	f88a 9000 	strb.w	r9, [sl]
 801dc1e:	fb02 3201 	mla	r2, r2, r1, r3
 801dc22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801dc24:	f88a 8001 	strb.w	r8, [sl, #1]
 801dc28:	fb0b 2b03 	mla	fp, fp, r3, r2
 801dc2c:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 801dc30:	f88a b002 	strb.w	fp, [sl, #2]
 801dc34:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801dc36:	f10a 0a03 	add.w	sl, sl, #3
 801dc3a:	3f01      	subs	r7, #1
 801dc3c:	441e      	add	r6, r3
 801dc3e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801dc40:	441d      	add	r5, r3
 801dc42:	e77f      	b.n	801db44 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801dc44:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801dc46:	441e      	add	r6, r3
 801dc48:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801dc4a:	441d      	add	r5, r3
 801dc4c:	9b06      	ldr	r3, [sp, #24]
 801dc4e:	3b01      	subs	r3, #1
 801dc50:	9306      	str	r3, [sp, #24]
 801dc52:	9b08      	ldr	r3, [sp, #32]
 801dc54:	3303      	adds	r3, #3
 801dc56:	9308      	str	r3, [sp, #32]
 801dc58:	e72b      	b.n	801dab2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 801dc5a:	f47f af3c 	bne.w	801dad6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 801dc5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dc60:	2b00      	cmp	r3, #0
 801dc62:	f340 80b9 	ble.w	801ddd8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a4>
 801dc66:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801dc6a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801dc6c:	ee79 9aab 	vadd.f32	s19, s19, s23
 801dc70:	eef0 6a48 	vmov.f32	s13, s16
 801dc74:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801dc78:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801dc7c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dc80:	ee16 6a90 	vmov	r6, s13
 801dc84:	eef0 6a68 	vmov.f32	s13, s17
 801dc88:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dc8c:	ee16 5a90 	vmov	r5, s13
 801dc90:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801dc94:	ee69 7a27 	vmul.f32	s15, s18, s15
 801dc98:	ee37 8a48 	vsub.f32	s16, s14, s16
 801dc9c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801dca0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801dca4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801dca8:	ee18 2a10 	vmov	r2, s16
 801dcac:	eeb0 8a47 	vmov.f32	s16, s14
 801dcb0:	fb92 f3f3 	sdiv	r3, r2, r3
 801dcb4:	ee18 2a90 	vmov	r2, s17
 801dcb8:	9333      	str	r3, [sp, #204]	; 0xcc
 801dcba:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801dcbc:	eef0 8a67 	vmov.f32	s17, s15
 801dcc0:	fb92 f3f3 	sdiv	r3, r2, r3
 801dcc4:	9334      	str	r3, [sp, #208]	; 0xd0
 801dcc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dcc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dcca:	3b01      	subs	r3, #1
 801dccc:	930c      	str	r3, [sp, #48]	; 0x30
 801dcce:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801dcd0:	bf08      	it	eq
 801dcd2:	4613      	moveq	r3, r2
 801dcd4:	9306      	str	r3, [sp, #24]
 801dcd6:	e6e5      	b.n	801daa4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801dcd8:	1c54      	adds	r4, r2, #1
 801dcda:	d1ab      	bne.n	801dc34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801dcdc:	9807      	ldr	r0, [sp, #28]
 801dcde:	4282      	cmp	r2, r0
 801dce0:	daa8      	bge.n	801dc34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801dce2:	1c58      	adds	r0, r3, #1
 801dce4:	dba6      	blt.n	801dc34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801dce6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dce8:	4298      	cmp	r0, r3
 801dcea:	dda3      	ble.n	801dc34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801dcec:	9000      	str	r0, [sp, #0]
 801dcee:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801dcf0:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801dcf4:	e9cd 1b03 	strd	r1, fp, [sp, #12]
 801dcf8:	9b07      	ldr	r3, [sp, #28]
 801dcfa:	4651      	mov	r1, sl
 801dcfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801dcfe:	f7ff fdd1 	bl	801d8a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801dd02:	e797      	b.n	801dc34 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801dd04:	1431      	asrs	r1, r6, #16
 801dd06:	9c07      	ldr	r4, [sp, #28]
 801dd08:	1428      	asrs	r0, r5, #16
 801dd0a:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801dd0e:	f3c6 3303 	ubfx	r3, r6, #12, #4
 801dd12:	fb04 1000 	mla	r0, r4, r0, r1
 801dd16:	990a      	ldr	r1, [sp, #40]	; 0x28
 801dd18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801dd1a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801dd1e:	4401      	add	r1, r0
 801dd20:	5c20      	ldrb	r0, [r4, r0]
 801dd22:	f891 8002 	ldrb.w	r8, [r1, #2]
 801dd26:	900e      	str	r0, [sp, #56]	; 0x38
 801dd28:	f891 a003 	ldrb.w	sl, [r1, #3]
 801dd2c:	7848      	ldrb	r0, [r1, #1]
 801dd2e:	f891 9004 	ldrb.w	r9, [r1, #4]
 801dd32:	f891 b005 	ldrb.w	fp, [r1, #5]
 801dd36:	b172      	cbz	r2, 801dd56 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x322>
 801dd38:	3105      	adds	r1, #5
 801dd3a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dd3c:	190f      	adds	r7, r1, r4
 801dd3e:	5d09      	ldrb	r1, [r1, r4]
 801dd40:	9115      	str	r1, [sp, #84]	; 0x54
 801dd42:	7879      	ldrb	r1, [r7, #1]
 801dd44:	9117      	str	r1, [sp, #92]	; 0x5c
 801dd46:	78b9      	ldrb	r1, [r7, #2]
 801dd48:	9119      	str	r1, [sp, #100]	; 0x64
 801dd4a:	78f9      	ldrb	r1, [r7, #3]
 801dd4c:	9116      	str	r1, [sp, #88]	; 0x58
 801dd4e:	7939      	ldrb	r1, [r7, #4]
 801dd50:	9118      	str	r1, [sp, #96]	; 0x60
 801dd52:	7979      	ldrb	r1, [r7, #5]
 801dd54:	911a      	str	r1, [sp, #104]	; 0x68
 801dd56:	b29b      	uxth	r3, r3
 801dd58:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801dd5a:	b292      	uxth	r2, r2
 801dd5c:	f10c 0c03 	add.w	ip, ip, #3
 801dd60:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 801dd64:	fb03 f102 	mul.w	r1, r3, r2
 801dd68:	011b      	lsls	r3, r3, #4
 801dd6a:	ebc1 1202 	rsb	r2, r1, r2, lsl #4
 801dd6e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801dd72:	1a5b      	subs	r3, r3, r1
 801dd74:	b292      	uxth	r2, r2
 801dd76:	b29b      	uxth	r3, r3
 801dd78:	1abf      	subs	r7, r7, r2
 801dd7a:	fb03 f909 	mul.w	r9, r3, r9
 801dd7e:	b2bf      	uxth	r7, r7
 801dd80:	fb03 fa0a 	mul.w	sl, r3, sl
 801dd84:	fb03 f30b 	mul.w	r3, r3, fp
 801dd88:	fb07 9900 	mla	r9, r7, r0, r9
 801dd8c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801dd8e:	fb07 aa04 	mla	sl, r7, r4, sl
 801dd92:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801dd94:	fb02 9900 	mla	r9, r2, r0, r9
 801dd98:	9818      	ldr	r0, [sp, #96]	; 0x60
 801dd9a:	fb07 3308 	mla	r3, r7, r8, r3
 801dd9e:	fb01 9900 	mla	r9, r1, r0, r9
 801dda2:	9819      	ldr	r0, [sp, #100]	; 0x64
 801dda4:	fb02 aa04 	mla	sl, r2, r4, sl
 801dda8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ddaa:	fb02 3200 	mla	r2, r2, r0, r3
 801ddae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801ddb0:	fb01 aa04 	mla	sl, r1, r4, sl
 801ddb4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ddb8:	fb01 2103 	mla	r1, r1, r3, r2
 801ddbc:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801ddbe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ddc2:	f80c 9c05 	strb.w	r9, [ip, #-5]
 801ddc6:	1209      	asrs	r1, r1, #8
 801ddc8:	441e      	add	r6, r3
 801ddca:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801ddcc:	f80c ac06 	strb.w	sl, [ip, #-6]
 801ddd0:	f80c 1c04 	strb.w	r1, [ip, #-4]
 801ddd4:	441d      	add	r5, r3
 801ddd6:	e697      	b.n	801db08 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801ddd8:	b01d      	add	sp, #116	; 0x74
 801ddda:	ecbd 8b0a 	vpop	{d8-d12}
 801ddde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801dde4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801dde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dde8:	b085      	sub	sp, #20
 801ddea:	7888      	ldrb	r0, [r1, #2]
 801ddec:	4691      	mov	r9, r2
 801ddee:	9000      	str	r0, [sp, #0]
 801ddf0:	7848      	ldrb	r0, [r1, #1]
 801ddf2:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 801ddf6:	9001      	str	r0, [sp, #4]
 801ddf8:	7808      	ldrb	r0, [r1, #0]
 801ddfa:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801ddfe:	9002      	str	r0, [sp, #8]
 801de00:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801de04:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 801de08:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 801de0c:	fb04 c603 	mla	r6, r4, r3, ip
 801de10:	2c00      	cmp	r4, #0
 801de12:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 801de16:	9a00      	ldr	r2, [sp, #0]
 801de18:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801de1c:	9a01      	ldr	r2, [sp, #4]
 801de1e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801de22:	db3a      	blt.n	801de9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 801de24:	45a0      	cmp	r8, r4
 801de26:	dd38      	ble.n	801de9a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb6>
 801de28:	f1bc 0f00 	cmp.w	ip, #0
 801de2c:	db33      	blt.n	801de96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 801de2e:	4563      	cmp	r3, ip
 801de30:	dd31      	ble.n	801de96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb2>
 801de32:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 801de36:	f11c 0601 	adds.w	r6, ip, #1
 801de3a:	d431      	bmi.n	801dea0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 801de3c:	42b3      	cmp	r3, r6
 801de3e:	dd2f      	ble.n	801dea0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 801de40:	b375      	cbz	r5, 801dea0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xbc>
 801de42:	f8de 6004 	ldr.w	r6, [lr, #4]
 801de46:	3401      	adds	r4, #1
 801de48:	d42e      	bmi.n	801dea8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 801de4a:	45a0      	cmp	r8, r4
 801de4c:	dd2c      	ble.n	801dea8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 801de4e:	b35f      	cbz	r7, 801dea8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc4>
 801de50:	f1bc 0f00 	cmp.w	ip, #0
 801de54:	db26      	blt.n	801dea4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 801de56:	4563      	cmp	r3, ip
 801de58:	dd24      	ble.n	801dea4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc0>
 801de5a:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 801de5e:	f11c 0c01 	adds.w	ip, ip, #1
 801de62:	d405      	bmi.n	801de70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801de64:	4563      	cmp	r3, ip
 801de66:	dd03      	ble.n	801de70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801de68:	b115      	cbz	r5, 801de70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801de6a:	3301      	adds	r3, #1
 801de6c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 801de70:	2d0f      	cmp	r5, #15
 801de72:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801de76:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801de7a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801de7e:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801de82:	d801      	bhi.n	801de88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa4>
 801de84:	2f0f      	cmp	r7, #15
 801de86:	d911      	bls.n	801deac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xc8>
 801de88:	4b80      	ldr	r3, [pc, #512]	; (801e08c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 801de8a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801de8e:	4a80      	ldr	r2, [pc, #512]	; (801e090 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 801de90:	4880      	ldr	r0, [pc, #512]	; (801e094 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2b0>)
 801de92:	f004 fa55 	bl	8022340 <__assert_func>
 801de96:	4602      	mov	r2, r0
 801de98:	e7cd      	b.n	801de36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x52>
 801de9a:	4606      	mov	r6, r0
 801de9c:	4602      	mov	r2, r0
 801de9e:	e7d2      	b.n	801de46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 801dea0:	4606      	mov	r6, r0
 801dea2:	e7d0      	b.n	801de46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x62>
 801dea4:	4604      	mov	r4, r0
 801dea6:	e7da      	b.n	801de5e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7a>
 801dea8:	4604      	mov	r4, r0
 801deaa:	e7e1      	b.n	801de70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801deac:	b2ab      	uxth	r3, r5
 801deae:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801deb2:	b2bf      	uxth	r7, r7
 801deb4:	fb03 fe07 	mul.w	lr, r3, r7
 801deb8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801debc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801dec0:	eba3 0c0e 	sub.w	ip, r3, lr
 801dec4:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801dec8:	b2bf      	uxth	r7, r7
 801deca:	fa1f fc8c 	uxth.w	ip, ip
 801dece:	eba5 0507 	sub.w	r5, r5, r7
 801ded2:	fb0c f30a 	mul.w	r3, ip, sl
 801ded6:	b2ad      	uxth	r5, r5
 801ded8:	fb05 330b 	mla	r3, r5, fp, r3
 801dedc:	fb07 3309 	mla	r3, r7, r9, r3
 801dee0:	fb0e 3308 	mla	r3, lr, r8, r3
 801dee4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dee8:	9303      	str	r3, [sp, #12]
 801deea:	d018      	beq.n	801df1e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x13a>
 801deec:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801def0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801def4:	fb0b f303 	mul.w	r3, fp, r3
 801def8:	fb0b fb02 	mul.w	fp, fp, r2
 801defc:	0a1a      	lsrs	r2, r3, #8
 801defe:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801df02:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801df06:	441a      	add	r2, r3
 801df08:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801df0c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801df10:	0a12      	lsrs	r2, r2, #8
 801df12:	0a1b      	lsrs	r3, r3, #8
 801df14:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801df18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801df1c:	431a      	orrs	r2, r3
 801df1e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801df22:	d019      	beq.n	801df58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x174>
 801df24:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801df28:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801df2c:	fb0a fb0b 	mul.w	fp, sl, fp
 801df30:	fb0a fa06 	mul.w	sl, sl, r6
 801df34:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801df38:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801df3c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801df40:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801df44:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801df48:	445e      	add	r6, fp
 801df4a:	0a1b      	lsrs	r3, r3, #8
 801df4c:	0a36      	lsrs	r6, r6, #8
 801df4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801df52:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801df56:	431e      	orrs	r6, r3
 801df58:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801df5c:	d019      	beq.n	801df92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1ae>
 801df5e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801df62:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801df66:	fb09 fa0a 	mul.w	sl, r9, sl
 801df6a:	fb09 f904 	mul.w	r9, r9, r4
 801df6e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801df72:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801df76:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801df7a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801df7e:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801df82:	4454      	add	r4, sl
 801df84:	0a1b      	lsrs	r3, r3, #8
 801df86:	0a24      	lsrs	r4, r4, #8
 801df88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801df8c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801df90:	431c      	orrs	r4, r3
 801df92:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801df96:	d019      	beq.n	801dfcc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1e8>
 801df98:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801df9c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801dfa0:	fb08 f909 	mul.w	r9, r8, r9
 801dfa4:	fb08 f800 	mul.w	r8, r8, r0
 801dfa8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801dfac:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801dfb0:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801dfb4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801dfb8:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801dfbc:	4448      	add	r0, r9
 801dfbe:	0a1b      	lsrs	r3, r3, #8
 801dfc0:	0a00      	lsrs	r0, r0, #8
 801dfc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dfc6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801dfca:	4318      	orrs	r0, r3
 801dfcc:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801dfd0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801dfd4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801dfd8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801dfdc:	fb0c f808 	mul.w	r8, ip, r8
 801dfe0:	fb0c f606 	mul.w	r6, ip, r6
 801dfe4:	fb05 8803 	mla	r8, r5, r3, r8
 801dfe8:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801dfec:	fb05 6202 	mla	r2, r5, r2, r6
 801dff0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801dff4:	fb07 8803 	mla	r8, r7, r3, r8
 801dff8:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801dffc:	fb07 2704 	mla	r7, r7, r4, r2
 801e000:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e004:	fb0e 8303 	mla	r3, lr, r3, r8
 801e008:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 801e00c:	fb0e 7e00 	mla	lr, lr, r0, r7
 801e010:	9803      	ldr	r0, [sp, #12]
 801e012:	b292      	uxth	r2, r2
 801e014:	9c02      	ldr	r4, [sp, #8]
 801e016:	0a1b      	lsrs	r3, r3, #8
 801e018:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e01c:	4350      	muls	r0, r2
 801e01e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e022:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801e026:	ea43 0e0e 	orr.w	lr, r3, lr
 801e02a:	1c43      	adds	r3, r0, #1
 801e02c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801e030:	fa5f f08e 	uxtb.w	r0, lr
 801e034:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801e038:	b2db      	uxtb	r3, r3
 801e03a:	fb14 f403 	smulbb	r4, r4, r3
 801e03e:	fb00 4002 	mla	r0, r0, r2, r4
 801e042:	b280      	uxth	r0, r0
 801e044:	1c44      	adds	r4, r0, #1
 801e046:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801e04a:	9c01      	ldr	r4, [sp, #4]
 801e04c:	fb14 f403 	smulbb	r4, r4, r3
 801e050:	1200      	asrs	r0, r0, #8
 801e052:	7008      	strb	r0, [r1, #0]
 801e054:	f3ce 2007 	ubfx	r0, lr, #8, #8
 801e058:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801e05c:	fb00 4002 	mla	r0, r0, r2, r4
 801e060:	b280      	uxth	r0, r0
 801e062:	1c44      	adds	r4, r0, #1
 801e064:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801e068:	1200      	asrs	r0, r0, #8
 801e06a:	7048      	strb	r0, [r1, #1]
 801e06c:	9800      	ldr	r0, [sp, #0]
 801e06e:	fb10 f303 	smulbb	r3, r0, r3
 801e072:	fb0e 3202 	mla	r2, lr, r2, r3
 801e076:	b292      	uxth	r2, r2
 801e078:	f102 0e01 	add.w	lr, r2, #1
 801e07c:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801e080:	1212      	asrs	r2, r2, #8
 801e082:	708a      	strb	r2, [r1, #2]
 801e084:	b005      	add	sp, #20
 801e086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e08a:	bf00      	nop
 801e08c:	08027a30 	.word	0x08027a30
 801e090:	08027f26 	.word	0x08027f26
 801e094:	08027af9 	.word	0x08027af9

0801e098 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e09c:	ed2d 8b08 	vpush	{d8-d11}
 801e0a0:	b099      	sub	sp, #100	; 0x64
 801e0a2:	eeb0 aa40 	vmov.f32	s20, s0
 801e0a6:	eef0 9a60 	vmov.f32	s19, s1
 801e0aa:	9306      	str	r3, [sp, #24]
 801e0ac:	eeb0 9a41 	vmov.f32	s18, s2
 801e0b0:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 801e0b4:	eeb0 8a62 	vmov.f32	s16, s5
 801e0b8:	9216      	str	r2, [sp, #88]	; 0x58
 801e0ba:	eef0 8a43 	vmov.f32	s17, s6
 801e0be:	9307      	str	r3, [sp, #28]
 801e0c0:	eef0 ba44 	vmov.f32	s23, s8
 801e0c4:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 801e0c8:	eeb0 ba64 	vmov.f32	s22, s9
 801e0cc:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801e0ce:	eef0 aa45 	vmov.f32	s21, s10
 801e0d2:	9310      	str	r3, [sp, #64]	; 0x40
 801e0d4:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 801e0d8:	9017      	str	r0, [sp, #92]	; 0x5c
 801e0da:	9112      	str	r1, [sp, #72]	; 0x48
 801e0dc:	6850      	ldr	r0, [r2, #4]
 801e0de:	9315      	str	r3, [sp, #84]	; 0x54
 801e0e0:	6812      	ldr	r2, [r2, #0]
 801e0e2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801e0e4:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801e0e8:	fb00 1303 	mla	r3, r0, r3, r1
 801e0ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e0f0:	18d3      	adds	r3, r2, r3
 801e0f2:	930a      	str	r3, [sp, #40]	; 0x28
 801e0f4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801e0f6:	681b      	ldr	r3, [r3, #0]
 801e0f8:	9311      	str	r3, [sp, #68]	; 0x44
 801e0fa:	9b07      	ldr	r3, [sp, #28]
 801e0fc:	009b      	lsls	r3, r3, #2
 801e0fe:	930e      	str	r3, [sp, #56]	; 0x38
 801e100:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e102:	2b00      	cmp	r3, #0
 801e104:	dc03      	bgt.n	801e10e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801e106:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e108:	2b00      	cmp	r3, #0
 801e10a:	f340 833b 	ble.w	801e784 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 801e10e:	9b06      	ldr	r3, [sp, #24]
 801e110:	2b00      	cmp	r3, #0
 801e112:	f340 8197 	ble.w	801e444 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 801e116:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801e118:	1423      	asrs	r3, r4, #16
 801e11a:	1412      	asrs	r2, r2, #16
 801e11c:	d432      	bmi.n	801e184 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 801e11e:	1c51      	adds	r1, r2, #1
 801e120:	9807      	ldr	r0, [sp, #28]
 801e122:	4288      	cmp	r0, r1
 801e124:	dd31      	ble.n	801e18a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801e126:	2b00      	cmp	r3, #0
 801e128:	db2f      	blt.n	801e18a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801e12a:	1c59      	adds	r1, r3, #1
 801e12c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e12e:	4288      	cmp	r0, r1
 801e130:	dd2b      	ble.n	801e18a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801e132:	9b06      	ldr	r3, [sp, #24]
 801e134:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e136:	3b01      	subs	r3, #1
 801e138:	992b      	ldr	r1, [sp, #172]	; 0xac
 801e13a:	fb02 1203 	mla	r2, r2, r3, r1
 801e13e:	1412      	asrs	r2, r2, #16
 801e140:	d42e      	bmi.n	801e1a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801e142:	3201      	adds	r2, #1
 801e144:	9907      	ldr	r1, [sp, #28]
 801e146:	4291      	cmp	r1, r2
 801e148:	dd2a      	ble.n	801e1a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801e14a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801e14c:	fb02 4303 	mla	r3, r2, r3, r4
 801e150:	141b      	asrs	r3, r3, #16
 801e152:	d425      	bmi.n	801e1a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801e154:	3301      	adds	r3, #1
 801e156:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e158:	429a      	cmp	r2, r3
 801e15a:	dd21      	ble.n	801e1a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801e15c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e15e:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 801e162:	f103 0e03 	add.w	lr, r3, #3
 801e166:	9b06      	ldr	r3, [sp, #24]
 801e168:	9313      	str	r3, [sp, #76]	; 0x4c
 801e16a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e16c:	2b00      	cmp	r3, #0
 801e16e:	f300 81d2 	bgt.w	801e516 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47e>
 801e172:	9b06      	ldr	r3, [sp, #24]
 801e174:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e17a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e17e:	4423      	add	r3, r4
 801e180:	930a      	str	r3, [sp, #40]	; 0x28
 801e182:	e161      	b.n	801e448 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 801e184:	1c51      	adds	r1, r2, #1
 801e186:	f040 8150 	bne.w	801e42a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801e18a:	9907      	ldr	r1, [sp, #28]
 801e18c:	428a      	cmp	r2, r1
 801e18e:	f280 814c 	bge.w	801e42a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801e192:	1c5a      	adds	r2, r3, #1
 801e194:	f2c0 8149 	blt.w	801e42a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801e198:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e19a:	4293      	cmp	r3, r2
 801e19c:	f280 8145 	bge.w	801e42a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801e1a0:	9b06      	ldr	r3, [sp, #24]
 801e1a2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801e1a4:	9314      	str	r3, [sp, #80]	; 0x50
 801e1a6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801e1aa:	9313      	str	r3, [sp, #76]	; 0x4c
 801e1ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e1ae:	2b00      	cmp	r3, #0
 801e1b0:	dddf      	ble.n	801e172 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 801e1b2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801e1b4:	1423      	asrs	r3, r4, #16
 801e1b6:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801e1ba:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801e1be:	1412      	asrs	r2, r2, #16
 801e1c0:	f100 8190 	bmi.w	801e4e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 801e1c4:	1c55      	adds	r5, r2, #1
 801e1c6:	9f07      	ldr	r7, [sp, #28]
 801e1c8:	42af      	cmp	r7, r5
 801e1ca:	f340 818d 	ble.w	801e4e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 801e1ce:	2b00      	cmp	r3, #0
 801e1d0:	f2c0 818a 	blt.w	801e4e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 801e1d4:	1c5d      	adds	r5, r3, #1
 801e1d6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801e1d8:	42af      	cmp	r7, r5
 801e1da:	f340 8185 	ble.w	801e4e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x450>
 801e1de:	9d07      	ldr	r5, [sp, #28]
 801e1e0:	fb03 2305 	mla	r3, r3, r5, r2
 801e1e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e1e6:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801e1ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e1ee:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e1f2:	2800      	cmp	r0, #0
 801e1f4:	f000 8167 	beq.w	801e4c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 801e1f8:	686a      	ldr	r2, [r5, #4]
 801e1fa:	920b      	str	r2, [sp, #44]	; 0x2c
 801e1fc:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801e200:	2900      	cmp	r1, #0
 801e202:	f000 8169 	beq.w	801e4d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801e206:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e208:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801e20a:	18aa      	adds	r2, r5, r2
 801e20c:	59ed      	ldr	r5, [r5, r7]
 801e20e:	6852      	ldr	r2, [r2, #4]
 801e210:	9508      	str	r5, [sp, #32]
 801e212:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801e216:	0e15      	lsrs	r5, r2, #24
 801e218:	920c      	str	r2, [sp, #48]	; 0x30
 801e21a:	b280      	uxth	r0, r0
 801e21c:	b289      	uxth	r1, r1
 801e21e:	fb00 fb01 	mul.w	fp, r0, r1
 801e222:	0100      	lsls	r0, r0, #4
 801e224:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 801e228:	eba0 090b 	sub.w	r9, r0, fp
 801e22c:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801e230:	b289      	uxth	r1, r1
 801e232:	fa1f f989 	uxth.w	r9, r9
 801e236:	1a52      	subs	r2, r2, r1
 801e238:	fb09 f008 	mul.w	r0, r9, r8
 801e23c:	b292      	uxth	r2, r2
 801e23e:	fb02 000c 	mla	r0, r2, ip, r0
 801e242:	fb01 000a 	mla	r0, r1, sl, r0
 801e246:	fb0b 0005 	mla	r0, fp, r5, r0
 801e24a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e24e:	2800      	cmp	r0, #0
 801e250:	f000 80e0 	beq.w	801e414 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801e254:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e258:	d01b      	beq.n	801e292 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fa>
 801e25a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801e25e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e262:	fb0c fe0e 	mul.w	lr, ip, lr
 801e266:	fb0c fc03 	mul.w	ip, ip, r3
 801e26a:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801e26e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801e272:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e276:	4473      	add	r3, lr
 801e278:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801e27c:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801e280:	0a1b      	lsrs	r3, r3, #8
 801e282:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e286:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e28a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801e28e:	ea43 030e 	orr.w	r3, r3, lr
 801e292:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e296:	d01e      	beq.n	801e2d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23e>
 801e298:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e29a:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801e29e:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 801e2a2:	fb08 fc0c 	mul.w	ip, r8, ip
 801e2a6:	fb08 f80e 	mul.w	r8, r8, lr
 801e2aa:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801e2ae:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e2b2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e2b6:	44e6      	add	lr, ip
 801e2b8:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801e2bc:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801e2c0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e2c4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801e2c8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e2cc:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801e2d0:	ea4e 0708 	orr.w	r7, lr, r8
 801e2d4:	970b      	str	r7, [sp, #44]	; 0x2c
 801e2d6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e2da:	d01e      	beq.n	801e31a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801e2dc:	9f08      	ldr	r7, [sp, #32]
 801e2de:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801e2e2:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801e2e6:	fb0a f808 	mul.w	r8, sl, r8
 801e2ea:	fb0a fa0c 	mul.w	sl, sl, ip
 801e2ee:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801e2f2:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801e2f6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e2fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e2fe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e302:	44c6      	add	lr, r8
 801e304:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e308:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e30c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e310:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e314:	ea4e 070a 	orr.w	r7, lr, sl
 801e318:	9708      	str	r7, [sp, #32]
 801e31a:	2dff      	cmp	r5, #255	; 0xff
 801e31c:	d01d      	beq.n	801e35a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 801e31e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e320:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801e324:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801e328:	fb05 f808 	mul.w	r8, r5, r8
 801e32c:	fb05 f50c 	mul.w	r5, r5, ip
 801e330:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801e334:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801e338:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801e33c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e340:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801e344:	44c6      	add	lr, r8
 801e346:	0a2d      	lsrs	r5, r5, #8
 801e348:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e34c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801e350:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e354:	ea4e 0505 	orr.w	r5, lr, r5
 801e358:	950c      	str	r5, [sp, #48]	; 0x30
 801e35a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801e35c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801e360:	9f08      	ldr	r7, [sp, #32]
 801e362:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e366:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e36a:	fb09 f505 	mul.w	r5, r9, r5
 801e36e:	fb02 550c 	mla	r5, r2, ip, r5
 801e372:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801e376:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e378:	fb01 550c 	mla	r5, r1, ip, r5
 801e37c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801e380:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e382:	fb0b 550c 	mla	r5, fp, ip, r5
 801e386:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801e38a:	fb09 f90c 	mul.w	r9, r9, ip
 801e38e:	0a2d      	lsrs	r5, r5, #8
 801e390:	fb02 9303 	mla	r3, r2, r3, r9
 801e394:	9a08      	ldr	r2, [sp, #32]
 801e396:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e39a:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801e39e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e3a0:	fb01 330e 	mla	r3, r1, lr, r3
 801e3a4:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801e3a8:	fb0b 3b01 	mla	fp, fp, r1, r3
 801e3ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e3ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801e3b0:	4343      	muls	r3, r0
 801e3b2:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801e3b6:	1c58      	adds	r0, r3, #1
 801e3b8:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801e3bc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e3c0:	ea45 050b 	orr.w	r5, r5, fp
 801e3c4:	7833      	ldrb	r3, [r6, #0]
 801e3c6:	b2ea      	uxtb	r2, r5
 801e3c8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801e3cc:	fb12 f201 	smulbb	r2, r2, r1
 801e3d0:	b2c0      	uxtb	r0, r0
 801e3d2:	fb03 2300 	mla	r3, r3, r0, r2
 801e3d6:	b29b      	uxth	r3, r3
 801e3d8:	1c5a      	adds	r2, r3, #1
 801e3da:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e3de:	7872      	ldrb	r2, [r6, #1]
 801e3e0:	fb12 f200 	smulbb	r2, r2, r0
 801e3e4:	121b      	asrs	r3, r3, #8
 801e3e6:	7033      	strb	r3, [r6, #0]
 801e3e8:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801e3ec:	0c2d      	lsrs	r5, r5, #16
 801e3ee:	fb03 2301 	mla	r3, r3, r1, r2
 801e3f2:	b29b      	uxth	r3, r3
 801e3f4:	1c5a      	adds	r2, r3, #1
 801e3f6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e3fa:	121b      	asrs	r3, r3, #8
 801e3fc:	7073      	strb	r3, [r6, #1]
 801e3fe:	78b3      	ldrb	r3, [r6, #2]
 801e400:	fb13 f000 	smulbb	r0, r3, r0
 801e404:	fb05 0501 	mla	r5, r5, r1, r0
 801e408:	b2ad      	uxth	r5, r5
 801e40a:	1c6b      	adds	r3, r5, #1
 801e40c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e410:	122d      	asrs	r5, r5, #8
 801e412:	70b5      	strb	r5, [r6, #2]
 801e414:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e416:	3603      	adds	r6, #3
 801e418:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e41a:	4413      	add	r3, r2
 801e41c:	932b      	str	r3, [sp, #172]	; 0xac
 801e41e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e420:	441c      	add	r4, r3
 801e422:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e424:	3b01      	subs	r3, #1
 801e426:	9314      	str	r3, [sp, #80]	; 0x50
 801e428:	e6c0      	b.n	801e1ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 801e42a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e42c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e42e:	4413      	add	r3, r2
 801e430:	932b      	str	r3, [sp, #172]	; 0xac
 801e432:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e434:	441c      	add	r4, r3
 801e436:	9b06      	ldr	r3, [sp, #24]
 801e438:	3b01      	subs	r3, #1
 801e43a:	9306      	str	r3, [sp, #24]
 801e43c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e43e:	3303      	adds	r3, #3
 801e440:	930a      	str	r3, [sp, #40]	; 0x28
 801e442:	e664      	b.n	801e10e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801e444:	f47f ae75 	bne.w	801e132 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 801e448:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e44a:	2b00      	cmp	r3, #0
 801e44c:	f340 819a 	ble.w	801e784 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ec>
 801e450:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e454:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e456:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801e45a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801e45e:	eef0 6a48 	vmov.f32	s13, s16
 801e462:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801e466:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801e46a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e46e:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 801e472:	eef0 6a68 	vmov.f32	s13, s17
 801e476:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e47a:	ee16 4a90 	vmov	r4, s13
 801e47e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e482:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e486:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e48a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e48e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e492:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e496:	ee18 2a10 	vmov	r2, s16
 801e49a:	eeb0 8a47 	vmov.f32	s16, s14
 801e49e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e4a2:	ee18 2a90 	vmov	r2, s17
 801e4a6:	932d      	str	r3, [sp, #180]	; 0xb4
 801e4a8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e4aa:	eef0 8a67 	vmov.f32	s17, s15
 801e4ae:	fb92 f3f3 	sdiv	r3, r2, r3
 801e4b2:	932e      	str	r3, [sp, #184]	; 0xb8
 801e4b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e4b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e4b8:	3b01      	subs	r3, #1
 801e4ba:	9312      	str	r3, [sp, #72]	; 0x48
 801e4bc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e4be:	bf08      	it	eq
 801e4c0:	4613      	moveq	r3, r2
 801e4c2:	9306      	str	r3, [sp, #24]
 801e4c4:	e61c      	b.n	801e100 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801e4c6:	b151      	cbz	r1, 801e4de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 801e4c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e4ca:	58aa      	ldr	r2, [r5, r2]
 801e4cc:	25ff      	movs	r5, #255	; 0xff
 801e4ce:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 801e4d2:	9208      	str	r2, [sp, #32]
 801e4d4:	46a8      	mov	r8, r5
 801e4d6:	e6a0      	b.n	801e21a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 801e4d8:	25ff      	movs	r5, #255	; 0xff
 801e4da:	46aa      	mov	sl, r5
 801e4dc:	e69d      	b.n	801e21a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x182>
 801e4de:	25ff      	movs	r5, #255	; 0xff
 801e4e0:	46aa      	mov	sl, r5
 801e4e2:	e7f7      	b.n	801e4d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 801e4e4:	1c57      	adds	r7, r2, #1
 801e4e6:	d195      	bne.n	801e414 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801e4e8:	9d07      	ldr	r5, [sp, #28]
 801e4ea:	4295      	cmp	r5, r2
 801e4ec:	dd92      	ble.n	801e414 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801e4ee:	1c5d      	adds	r5, r3, #1
 801e4f0:	db90      	blt.n	801e414 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801e4f2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801e4f4:	429d      	cmp	r5, r3
 801e4f6:	dd8d      	ble.n	801e414 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801e4f8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801e4fa:	9201      	str	r2, [sp, #4]
 801e4fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e4fe:	e9cd 3002 	strd	r3, r0, [sp, #8]
 801e502:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e504:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801e506:	9300      	str	r3, [sp, #0]
 801e508:	9b07      	ldr	r3, [sp, #28]
 801e50a:	e9cd 1504 	strd	r1, r5, [sp, #16]
 801e50e:	4631      	mov	r1, r6
 801e510:	f7ff fc68 	bl	801dde4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801e514:	e77e      	b.n	801e414 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801e516:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e518:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801e51c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801e51e:	9d07      	ldr	r5, [sp, #28]
 801e520:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801e524:	1412      	asrs	r2, r2, #16
 801e526:	1423      	asrs	r3, r4, #16
 801e528:	fb05 2303 	mla	r3, r5, r3, r2
 801e52c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e52e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801e532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e536:	0e1e      	lsrs	r6, r3, #24
 801e538:	2900      	cmp	r1, #0
 801e53a:	f000 8114 	beq.w	801e766 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ce>
 801e53e:	686a      	ldr	r2, [r5, #4]
 801e540:	920d      	str	r2, [sp, #52]	; 0x34
 801e542:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801e546:	2800      	cmp	r0, #0
 801e548:	f000 8116 	beq.w	801e778 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e0>
 801e54c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e54e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801e550:	18aa      	adds	r2, r5, r2
 801e552:	59ed      	ldr	r5, [r5, r7]
 801e554:	6852      	ldr	r2, [r2, #4]
 801e556:	9509      	str	r5, [sp, #36]	; 0x24
 801e558:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801e55c:	0e15      	lsrs	r5, r2, #24
 801e55e:	920f      	str	r2, [sp, #60]	; 0x3c
 801e560:	b289      	uxth	r1, r1
 801e562:	b280      	uxth	r0, r0
 801e564:	fb01 fa00 	mul.w	sl, r1, r0
 801e568:	0109      	lsls	r1, r1, #4
 801e56a:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801e56e:	eba1 080a 	sub.w	r8, r1, sl
 801e572:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801e576:	b280      	uxth	r0, r0
 801e578:	fa1f f888 	uxth.w	r8, r8
 801e57c:	1a12      	subs	r2, r2, r0
 801e57e:	fb08 f10c 	mul.w	r1, r8, ip
 801e582:	b292      	uxth	r2, r2
 801e584:	fb02 1106 	mla	r1, r2, r6, r1
 801e588:	fb00 1109 	mla	r1, r0, r9, r1
 801e58c:	fb0a 1105 	mla	r1, sl, r5, r1
 801e590:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e594:	2900      	cmp	r1, #0
 801e596:	f000 80da 	beq.w	801e74e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 801e59a:	2eff      	cmp	r6, #255	; 0xff
 801e59c:	d016      	beq.n	801e5cc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x534>
 801e59e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801e5a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e5a6:	4377      	muls	r7, r6
 801e5a8:	435e      	muls	r6, r3
 801e5aa:	0a3b      	lsrs	r3, r7, #8
 801e5ac:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e5b0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e5b4:	443b      	add	r3, r7
 801e5b6:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801e5ba:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801e5be:	0a1b      	lsrs	r3, r3, #8
 801e5c0:	0a3f      	lsrs	r7, r7, #8
 801e5c2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e5c6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e5ca:	433b      	orrs	r3, r7
 801e5cc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e5d0:	d01d      	beq.n	801e60e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x576>
 801e5d2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801e5d4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801e5d6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e5da:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e5de:	fb0c f606 	mul.w	r6, ip, r6
 801e5e2:	fb0c fc07 	mul.w	ip, ip, r7
 801e5e6:	0a37      	lsrs	r7, r6, #8
 801e5e8:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801e5ec:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e5f0:	4437      	add	r7, r6
 801e5f2:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801e5f6:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801e5fa:	0a3f      	lsrs	r7, r7, #8
 801e5fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e600:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e604:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e608:	ea47 060c 	orr.w	r6, r7, ip
 801e60c:	960d      	str	r6, [sp, #52]	; 0x34
 801e60e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e612:	d01d      	beq.n	801e650 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5b8>
 801e614:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801e616:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801e61a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e61e:	fb09 fc0c 	mul.w	ip, r9, ip
 801e622:	fb09 f906 	mul.w	r9, r9, r6
 801e626:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801e62a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e62e:	f509 7680 	add.w	r6, r9, #256	; 0x100
 801e632:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e636:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801e63a:	4467      	add	r7, ip
 801e63c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e640:	0a3f      	lsrs	r7, r7, #8
 801e642:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801e646:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e64a:	ea47 0609 	orr.w	r6, r7, r9
 801e64e:	9609      	str	r6, [sp, #36]	; 0x24
 801e650:	2dff      	cmp	r5, #255	; 0xff
 801e652:	d01a      	beq.n	801e68a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5f2>
 801e654:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801e656:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801e65a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e65e:	fb05 fc0c 	mul.w	ip, r5, ip
 801e662:	4375      	muls	r5, r6
 801e664:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801e668:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e66c:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801e670:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e674:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801e678:	4467      	add	r7, ip
 801e67a:	0a2d      	lsrs	r5, r5, #8
 801e67c:	0a3f      	lsrs	r7, r7, #8
 801e67e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801e682:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e686:	433d      	orrs	r5, r7
 801e688:	950f      	str	r5, [sp, #60]	; 0x3c
 801e68a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801e68c:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801e690:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e694:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e698:	fb08 f505 	mul.w	r5, r8, r5
 801e69c:	fb02 5506 	mla	r5, r2, r6, r5
 801e6a0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801e6a2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e6a6:	fb00 5506 	mla	r5, r0, r6, r5
 801e6aa:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801e6ac:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e6b0:	fb0a 5506 	mla	r5, sl, r6, r5
 801e6b4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801e6b6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e6ba:	0a2d      	lsrs	r5, r5, #8
 801e6bc:	fb08 f806 	mul.w	r8, r8, r6
 801e6c0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e6c4:	fb02 8303 	mla	r3, r2, r3, r8
 801e6c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e6ca:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801e6ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e6d0:	fb00 3307 	mla	r3, r0, r7, r3
 801e6d4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801e6d8:	fb0a 3c0c 	mla	ip, sl, ip, r3
 801e6dc:	fb01 f30b 	mul.w	r3, r1, fp
 801e6e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e6e4:	1c59      	adds	r1, r3, #1
 801e6e6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e6ea:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e6ee:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801e6f2:	ea45 050c 	orr.w	r5, r5, ip
 801e6f6:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801e6fa:	b2ea      	uxtb	r2, r5
 801e6fc:	b2c9      	uxtb	r1, r1
 801e6fe:	fb12 f20b 	smulbb	r2, r2, fp
 801e702:	fb03 2301 	mla	r3, r3, r1, r2
 801e706:	b29b      	uxth	r3, r3
 801e708:	1c5a      	adds	r2, r3, #1
 801e70a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e70e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801e712:	fb12 f201 	smulbb	r2, r2, r1
 801e716:	121b      	asrs	r3, r3, #8
 801e718:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801e71c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801e720:	0c2d      	lsrs	r5, r5, #16
 801e722:	fb03 230b 	mla	r3, r3, fp, r2
 801e726:	b29b      	uxth	r3, r3
 801e728:	1c5a      	adds	r2, r3, #1
 801e72a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e72e:	121b      	asrs	r3, r3, #8
 801e730:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801e734:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801e738:	fb13 f101 	smulbb	r1, r3, r1
 801e73c:	fb05 150b 	mla	r5, r5, fp, r1
 801e740:	b2ad      	uxth	r5, r5
 801e742:	1c69      	adds	r1, r5, #1
 801e744:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801e748:	122d      	asrs	r5, r5, #8
 801e74a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801e74e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e750:	f10e 0e03 	add.w	lr, lr, #3
 801e754:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e756:	4413      	add	r3, r2
 801e758:	932b      	str	r3, [sp, #172]	; 0xac
 801e75a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e75c:	441c      	add	r4, r3
 801e75e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e760:	3b01      	subs	r3, #1
 801e762:	9313      	str	r3, [sp, #76]	; 0x4c
 801e764:	e501      	b.n	801e16a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 801e766:	b150      	cbz	r0, 801e77e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e6>
 801e768:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e76a:	58aa      	ldr	r2, [r5, r2]
 801e76c:	25ff      	movs	r5, #255	; 0xff
 801e76e:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801e772:	9209      	str	r2, [sp, #36]	; 0x24
 801e774:	46ac      	mov	ip, r5
 801e776:	e6f3      	b.n	801e560 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 801e778:	25ff      	movs	r5, #255	; 0xff
 801e77a:	46a9      	mov	r9, r5
 801e77c:	e6f0      	b.n	801e560 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c8>
 801e77e:	25ff      	movs	r5, #255	; 0xff
 801e780:	46a9      	mov	r9, r5
 801e782:	e7f7      	b.n	801e774 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6dc>
 801e784:	b019      	add	sp, #100	; 0x64
 801e786:	ecbd 8b08 	vpop	{d8-d11}
 801e78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e790 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801e790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e794:	b085      	sub	sp, #20
 801e796:	7888      	ldrb	r0, [r1, #2]
 801e798:	4691      	mov	r9, r2
 801e79a:	9000      	str	r0, [sp, #0]
 801e79c:	7848      	ldrb	r0, [r1, #1]
 801e79e:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 801e7a2:	9001      	str	r0, [sp, #4]
 801e7a4:	7808      	ldrb	r0, [r1, #0]
 801e7a6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801e7aa:	9002      	str	r0, [sp, #8]
 801e7ac:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801e7b0:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 801e7b4:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 801e7b8:	fb04 c603 	mla	r6, r4, r3, ip
 801e7bc:	2c00      	cmp	r4, #0
 801e7be:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 801e7c2:	9a00      	ldr	r2, [sp, #0]
 801e7c4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801e7c8:	9a01      	ldr	r2, [sp, #4]
 801e7ca:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801e7ce:	db3a      	blt.n	801e846 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 801e7d0:	45a0      	cmp	r8, r4
 801e7d2:	dd38      	ble.n	801e846 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb6>
 801e7d4:	f1bc 0f00 	cmp.w	ip, #0
 801e7d8:	db33      	blt.n	801e842 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 801e7da:	4563      	cmp	r3, ip
 801e7dc:	dd31      	ble.n	801e842 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb2>
 801e7de:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 801e7e2:	f11c 0601 	adds.w	r6, ip, #1
 801e7e6:	d431      	bmi.n	801e84c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 801e7e8:	42b3      	cmp	r3, r6
 801e7ea:	dd2f      	ble.n	801e84c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 801e7ec:	b375      	cbz	r5, 801e84c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xbc>
 801e7ee:	f8de 6004 	ldr.w	r6, [lr, #4]
 801e7f2:	3401      	adds	r4, #1
 801e7f4:	d42e      	bmi.n	801e854 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 801e7f6:	45a0      	cmp	r8, r4
 801e7f8:	dd2c      	ble.n	801e854 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 801e7fa:	b35f      	cbz	r7, 801e854 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc4>
 801e7fc:	f1bc 0f00 	cmp.w	ip, #0
 801e800:	db26      	blt.n	801e850 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 801e802:	4563      	cmp	r3, ip
 801e804:	dd24      	ble.n	801e850 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc0>
 801e806:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 801e80a:	f11c 0c01 	adds.w	ip, ip, #1
 801e80e:	d405      	bmi.n	801e81c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801e810:	4563      	cmp	r3, ip
 801e812:	dd03      	ble.n	801e81c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801e814:	b115      	cbz	r5, 801e81c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801e816:	3301      	adds	r3, #1
 801e818:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 801e81c:	2d0f      	cmp	r5, #15
 801e81e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801e822:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801e826:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801e82a:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801e82e:	d801      	bhi.n	801e834 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa4>
 801e830:	2f0f      	cmp	r7, #15
 801e832:	d911      	bls.n	801e858 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xc8>
 801e834:	4b77      	ldr	r3, [pc, #476]	; (801ea14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x284>)
 801e836:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801e83a:	4a77      	ldr	r2, [pc, #476]	; (801ea18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x288>)
 801e83c:	4877      	ldr	r0, [pc, #476]	; (801ea1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x28c>)
 801e83e:	f003 fd7f 	bl	8022340 <__assert_func>
 801e842:	4602      	mov	r2, r0
 801e844:	e7cd      	b.n	801e7e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x52>
 801e846:	4606      	mov	r6, r0
 801e848:	4602      	mov	r2, r0
 801e84a:	e7d2      	b.n	801e7f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 801e84c:	4606      	mov	r6, r0
 801e84e:	e7d0      	b.n	801e7f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x62>
 801e850:	4604      	mov	r4, r0
 801e852:	e7da      	b.n	801e80a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7a>
 801e854:	4604      	mov	r4, r0
 801e856:	e7e1      	b.n	801e81c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801e858:	b2ab      	uxth	r3, r5
 801e85a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801e85e:	b2bf      	uxth	r7, r7
 801e860:	fb03 fe07 	mul.w	lr, r3, r7
 801e864:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801e868:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801e86c:	eba3 0c0e 	sub.w	ip, r3, lr
 801e870:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801e874:	b2bf      	uxth	r7, r7
 801e876:	fa1f fc8c 	uxth.w	ip, ip
 801e87a:	eba5 0507 	sub.w	r5, r5, r7
 801e87e:	fb0c f30a 	mul.w	r3, ip, sl
 801e882:	b2ad      	uxth	r5, r5
 801e884:	fb05 330b 	mla	r3, r5, fp, r3
 801e888:	fb07 3309 	mla	r3, r7, r9, r3
 801e88c:	fb0e 3308 	mla	r3, lr, r8, r3
 801e890:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e894:	9303      	str	r3, [sp, #12]
 801e896:	d018      	beq.n	801e8ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x13a>
 801e898:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801e89c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e8a0:	fb0b f303 	mul.w	r3, fp, r3
 801e8a4:	fb0b fb02 	mul.w	fp, fp, r2
 801e8a8:	0a1a      	lsrs	r2, r3, #8
 801e8aa:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801e8ae:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e8b2:	441a      	add	r2, r3
 801e8b4:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801e8b8:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801e8bc:	0a12      	lsrs	r2, r2, #8
 801e8be:	0a1b      	lsrs	r3, r3, #8
 801e8c0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e8c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e8c8:	431a      	orrs	r2, r3
 801e8ca:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e8ce:	d019      	beq.n	801e904 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x174>
 801e8d0:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801e8d4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e8d8:	fb0a fb0b 	mul.w	fp, sl, fp
 801e8dc:	fb0a fa06 	mul.w	sl, sl, r6
 801e8e0:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801e8e4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e8e8:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801e8ec:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e8f0:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801e8f4:	445e      	add	r6, fp
 801e8f6:	0a1b      	lsrs	r3, r3, #8
 801e8f8:	0a36      	lsrs	r6, r6, #8
 801e8fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e8fe:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e902:	431e      	orrs	r6, r3
 801e904:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e908:	d019      	beq.n	801e93e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1ae>
 801e90a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801e90e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801e912:	fb09 fa0a 	mul.w	sl, r9, sl
 801e916:	fb09 f904 	mul.w	r9, r9, r4
 801e91a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801e91e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e922:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801e926:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801e92a:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801e92e:	4454      	add	r4, sl
 801e930:	0a1b      	lsrs	r3, r3, #8
 801e932:	0a24      	lsrs	r4, r4, #8
 801e934:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e938:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801e93c:	431c      	orrs	r4, r3
 801e93e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e942:	d019      	beq.n	801e978 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1e8>
 801e944:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801e948:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e94c:	fb08 f909 	mul.w	r9, r8, r9
 801e950:	fb08 f800 	mul.w	r8, r8, r0
 801e954:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801e958:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801e95c:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801e960:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e964:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801e968:	4448      	add	r0, r9
 801e96a:	0a1b      	lsrs	r3, r3, #8
 801e96c:	0a00      	lsrs	r0, r0, #8
 801e96e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e972:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e976:	4318      	orrs	r0, r3
 801e978:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801e97c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e980:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801e984:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e988:	fb0c f808 	mul.w	r8, ip, r8
 801e98c:	fb0c f606 	mul.w	r6, ip, r6
 801e990:	fb05 8803 	mla	r8, r5, r3, r8
 801e994:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801e998:	fb05 6202 	mla	r2, r5, r2, r6
 801e99c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801e9a0:	fb07 8803 	mla	r8, r7, r3, r8
 801e9a4:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801e9a8:	fb07 2704 	mla	r7, r7, r4, r2
 801e9ac:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e9b0:	fb0e 8303 	mla	r3, lr, r3, r8
 801e9b4:	fb0e 7e00 	mla	lr, lr, r0, r7
 801e9b8:	9802      	ldr	r0, [sp, #8]
 801e9ba:	0a1b      	lsrs	r3, r3, #8
 801e9bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e9c0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e9c4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801e9c8:	ea43 0e0e 	orr.w	lr, r3, lr
 801e9cc:	9b03      	ldr	r3, [sp, #12]
 801e9ce:	43db      	mvns	r3, r3
 801e9d0:	b2db      	uxtb	r3, r3
 801e9d2:	4358      	muls	r0, r3
 801e9d4:	1c42      	adds	r2, r0, #1
 801e9d6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801e9da:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801e9de:	700a      	strb	r2, [r1, #0]
 801e9e0:	9a01      	ldr	r2, [sp, #4]
 801e9e2:	435a      	muls	r2, r3
 801e9e4:	1c50      	adds	r0, r2, #1
 801e9e6:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801e9ea:	ea4f 221e 	mov.w	r2, lr, lsr #8
 801e9ee:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801e9f2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801e9f6:	704a      	strb	r2, [r1, #1]
 801e9f8:	9a00      	ldr	r2, [sp, #0]
 801e9fa:	435a      	muls	r2, r3
 801e9fc:	4613      	mov	r3, r2
 801e9fe:	3201      	adds	r2, #1
 801ea00:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ea04:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801ea08:	f881 e002 	strb.w	lr, [r1, #2]
 801ea0c:	b005      	add	sp, #20
 801ea0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea12:	bf00      	nop
 801ea14:	08027a30 	.word	0x08027a30
 801ea18:	08027f26 	.word	0x08027f26
 801ea1c:	08027af9 	.word	0x08027af9

0801ea20 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ea20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea24:	ed2d 8b08 	vpush	{d8-d11}
 801ea28:	b097      	sub	sp, #92	; 0x5c
 801ea2a:	eeb0 aa40 	vmov.f32	s20, s0
 801ea2e:	eef0 9a60 	vmov.f32	s19, s1
 801ea32:	9306      	str	r3, [sp, #24]
 801ea34:	eeb0 9a41 	vmov.f32	s18, s2
 801ea38:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 801ea3c:	eeb0 8a62 	vmov.f32	s16, s5
 801ea40:	9214      	str	r2, [sp, #80]	; 0x50
 801ea42:	eef0 8a43 	vmov.f32	s17, s6
 801ea46:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ea48:	eef0 ba44 	vmov.f32	s23, s8
 801ea4c:	9307      	str	r3, [sp, #28]
 801ea4e:	eeb0 ba64 	vmov.f32	s22, s9
 801ea52:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801ea56:	eef0 aa45 	vmov.f32	s21, s10
 801ea5a:	9015      	str	r0, [sp, #84]	; 0x54
 801ea5c:	9112      	str	r1, [sp, #72]	; 0x48
 801ea5e:	6850      	ldr	r0, [r2, #4]
 801ea60:	9310      	str	r3, [sp, #64]	; 0x40
 801ea62:	6812      	ldr	r2, [r2, #0]
 801ea64:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 801ea66:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801ea6a:	fb00 1303 	mla	r3, r0, r3, r1
 801ea6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ea72:	18d3      	adds	r3, r2, r3
 801ea74:	930a      	str	r3, [sp, #40]	; 0x28
 801ea76:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801ea78:	681b      	ldr	r3, [r3, #0]
 801ea7a:	9311      	str	r3, [sp, #68]	; 0x44
 801ea7c:	9b07      	ldr	r3, [sp, #28]
 801ea7e:	009b      	lsls	r3, r3, #2
 801ea80:	930e      	str	r3, [sp, #56]	; 0x38
 801ea82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ea84:	2b00      	cmp	r3, #0
 801ea86:	dc03      	bgt.n	801ea90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801ea88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ea8a:	2b00      	cmp	r3, #0
 801ea8c:	f340 832e 	ble.w	801f0ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 801ea90:	9b06      	ldr	r3, [sp, #24]
 801ea92:	2b00      	cmp	r3, #0
 801ea94:	f340 8186 	ble.w	801eda4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x384>
 801ea98:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ea9a:	1423      	asrs	r3, r4, #16
 801ea9c:	1412      	asrs	r2, r2, #16
 801ea9e:	d42f      	bmi.n	801eb00 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801eaa0:	1c51      	adds	r1, r2, #1
 801eaa2:	9807      	ldr	r0, [sp, #28]
 801eaa4:	4288      	cmp	r0, r1
 801eaa6:	dd2e      	ble.n	801eb06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801eaa8:	2b00      	cmp	r3, #0
 801eaaa:	db2c      	blt.n	801eb06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801eaac:	1c59      	adds	r1, r3, #1
 801eaae:	9810      	ldr	r0, [sp, #64]	; 0x40
 801eab0:	4288      	cmp	r0, r1
 801eab2:	dd28      	ble.n	801eb06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801eab4:	9b06      	ldr	r3, [sp, #24]
 801eab6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801eab8:	3b01      	subs	r3, #1
 801eaba:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801eabc:	fb02 1203 	mla	r2, r2, r3, r1
 801eac0:	1412      	asrs	r2, r2, #16
 801eac2:	d42b      	bmi.n	801eb1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801eac4:	3201      	adds	r2, #1
 801eac6:	9907      	ldr	r1, [sp, #28]
 801eac8:	4291      	cmp	r1, r2
 801eaca:	dd27      	ble.n	801eb1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801eacc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801eace:	fb02 4303 	mla	r3, r2, r3, r4
 801ead2:	141b      	asrs	r3, r3, #16
 801ead4:	d422      	bmi.n	801eb1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801ead6:	3301      	adds	r3, #1
 801ead8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801eada:	429a      	cmp	r2, r3
 801eadc:	dd1e      	ble.n	801eb1c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801eade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eae0:	f8dd b018 	ldr.w	fp, [sp, #24]
 801eae4:	1cdd      	adds	r5, r3, #3
 801eae6:	f1bb 0f00 	cmp.w	fp, #0
 801eaea:	f300 81c4 	bgt.w	801ee76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x456>
 801eaee:	9b06      	ldr	r3, [sp, #24]
 801eaf0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801eaf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eaf6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801eafa:	4423      	add	r3, r4
 801eafc:	930a      	str	r3, [sp, #40]	; 0x28
 801eafe:	e153      	b.n	801eda8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x388>
 801eb00:	1c51      	adds	r1, r2, #1
 801eb02:	f040 8142 	bne.w	801ed8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 801eb06:	9907      	ldr	r1, [sp, #28]
 801eb08:	428a      	cmp	r2, r1
 801eb0a:	f280 813e 	bge.w	801ed8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 801eb0e:	1c5a      	adds	r2, r3, #1
 801eb10:	f2c0 813b 	blt.w	801ed8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 801eb14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801eb16:	4293      	cmp	r3, r2
 801eb18:	f280 8137 	bge.w	801ed8a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 801eb1c:	9b06      	ldr	r3, [sp, #24]
 801eb1e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801eb20:	9313      	str	r3, [sp, #76]	; 0x4c
 801eb22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801eb24:	2b00      	cmp	r3, #0
 801eb26:	dde2      	ble.n	801eaee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 801eb28:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801eb2a:	1423      	asrs	r3, r4, #16
 801eb2c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801eb2e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801eb32:	1409      	asrs	r1, r1, #16
 801eb34:	f3c2 3203 	ubfx	r2, r2, #12, #4
 801eb38:	f100 8187 	bmi.w	801ee4a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 801eb3c:	1c4e      	adds	r6, r1, #1
 801eb3e:	9f07      	ldr	r7, [sp, #28]
 801eb40:	42b7      	cmp	r7, r6
 801eb42:	f340 8184 	ble.w	801ee4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 801eb46:	2b00      	cmp	r3, #0
 801eb48:	f2c0 8181 	blt.w	801ee4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 801eb4c:	1c5e      	adds	r6, r3, #1
 801eb4e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801eb50:	42b7      	cmp	r7, r6
 801eb52:	f340 817c 	ble.w	801ee4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 801eb56:	9e07      	ldr	r6, [sp, #28]
 801eb58:	fb03 1306 	mla	r3, r3, r6, r1
 801eb5c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801eb5e:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 801eb62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801eb66:	0e1f      	lsrs	r7, r3, #24
 801eb68:	2a00      	cmp	r2, #0
 801eb6a:	f000 815c 	beq.w	801ee26 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801eb6e:	6871      	ldr	r1, [r6, #4]
 801eb70:	910b      	str	r1, [sp, #44]	; 0x2c
 801eb72:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801eb76:	2800      	cmp	r0, #0
 801eb78:	f000 815e 	beq.w	801ee38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x418>
 801eb7c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801eb7e:	eb06 0c01 	add.w	ip, r6, r1
 801eb82:	5876      	ldr	r6, [r6, r1]
 801eb84:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801eb88:	ea4f 6916 	mov.w	r9, r6, lsr #24
 801eb8c:	9608      	str	r6, [sp, #32]
 801eb8e:	0e0e      	lsrs	r6, r1, #24
 801eb90:	910c      	str	r1, [sp, #48]	; 0x30
 801eb92:	b292      	uxth	r2, r2
 801eb94:	b280      	uxth	r0, r0
 801eb96:	fb02 fa00 	mul.w	sl, r2, r0
 801eb9a:	0112      	lsls	r2, r2, #4
 801eb9c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801eba0:	eba2 080a 	sub.w	r8, r2, sl
 801eba4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801eba8:	b280      	uxth	r0, r0
 801ebaa:	fa1f f888 	uxth.w	r8, r8
 801ebae:	1a09      	subs	r1, r1, r0
 801ebb0:	fb08 f20e 	mul.w	r2, r8, lr
 801ebb4:	b289      	uxth	r1, r1
 801ebb6:	fb01 2207 	mla	r2, r1, r7, r2
 801ebba:	fb00 2209 	mla	r2, r0, r9, r2
 801ebbe:	fb0a 2206 	mla	r2, sl, r6, r2
 801ebc2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ebc6:	2a00      	cmp	r2, #0
 801ebc8:	f000 80d4 	beq.w	801ed74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 801ebcc:	2fff      	cmp	r7, #255	; 0xff
 801ebce:	d01a      	beq.n	801ec06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e6>
 801ebd0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ebd4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ebd8:	fb07 fc0c 	mul.w	ip, r7, ip
 801ebdc:	435f      	muls	r7, r3
 801ebde:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801ebe2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ebe6:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801ebea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ebee:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801ebf2:	4463      	add	r3, ip
 801ebf4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ebf8:	0a1b      	lsrs	r3, r3, #8
 801ebfa:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801ebfe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ec02:	ea43 030b 	orr.w	r3, r3, fp
 801ec06:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ec0a:	d01e      	beq.n	801ec4a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22a>
 801ec0c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ec0e:	f007 1bff 	and.w	fp, r7, #16711935	; 0xff00ff
 801ec12:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ec16:	fb0e fb0b 	mul.w	fp, lr, fp
 801ec1a:	fb0e fe07 	mul.w	lr, lr, r7
 801ec1e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801ec22:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ec26:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801ec2a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ec2e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801ec32:	44dc      	add	ip, fp
 801ec34:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ec38:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ec3c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801ec40:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ec44:	ea4c 070e 	orr.w	r7, ip, lr
 801ec48:	970b      	str	r7, [sp, #44]	; 0x2c
 801ec4a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ec4e:	d01e      	beq.n	801ec8e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 801ec50:	9f08      	ldr	r7, [sp, #32]
 801ec52:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801ec56:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ec5a:	fb09 fe0e 	mul.w	lr, r9, lr
 801ec5e:	fb09 f907 	mul.w	r9, r9, r7
 801ec62:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801ec66:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801ec6a:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801ec6e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ec72:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801ec76:	44f4      	add	ip, lr
 801ec78:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ec7c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ec80:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801ec84:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ec88:	ea4c 0709 	orr.w	r7, ip, r9
 801ec8c:	9708      	str	r7, [sp, #32]
 801ec8e:	2eff      	cmp	r6, #255	; 0xff
 801ec90:	d01c      	beq.n	801eccc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 801ec92:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801ec94:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801ec98:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ec9c:	fb06 fe0e 	mul.w	lr, r6, lr
 801eca0:	437e      	muls	r6, r7
 801eca2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801eca6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801ecaa:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801ecae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ecb2:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801ecb6:	44f4      	add	ip, lr
 801ecb8:	0a36      	lsrs	r6, r6, #8
 801ecba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ecbe:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ecc2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ecc6:	ea4c 0606 	orr.w	r6, ip, r6
 801ecca:	960c      	str	r6, [sp, #48]	; 0x30
 801eccc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801ecce:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801ecd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ecd6:	2aff      	cmp	r2, #255	; 0xff
 801ecd8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ecdc:	fb08 f606 	mul.w	r6, r8, r6
 801ece0:	fb01 6607 	mla	r6, r1, r7, r6
 801ece4:	9f08      	ldr	r7, [sp, #32]
 801ece6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ecea:	fb00 6607 	mla	r6, r0, r7, r6
 801ecee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801ecf0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ecf4:	fb0a 6607 	mla	r6, sl, r7, r6
 801ecf8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ecfa:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ecfe:	ea4f 2616 	mov.w	r6, r6, lsr #8
 801ed02:	fb08 f807 	mul.w	r8, r8, r7
 801ed06:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ed0a:	fb01 8303 	mla	r3, r1, r3, r8
 801ed0e:	9908      	ldr	r1, [sp, #32]
 801ed10:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801ed14:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ed16:	fb00 330c 	mla	r3, r0, ip, r3
 801ed1a:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801ed1e:	fb0a 3a00 	mla	sl, sl, r0, r3
 801ed22:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ed26:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ed2a:	ea46 060a 	orr.w	r6, r6, sl
 801ed2e:	b2f0      	uxtb	r0, r6
 801ed30:	f3c6 2107 	ubfx	r1, r6, #8, #8
 801ed34:	ea4f 4616 	mov.w	r6, r6, lsr #16
 801ed38:	f000 8084 	beq.w	801ee44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x424>
 801ed3c:	43d2      	mvns	r2, r2
 801ed3e:	782b      	ldrb	r3, [r5, #0]
 801ed40:	b2d2      	uxtb	r2, r2
 801ed42:	fb03 f702 	mul.w	r7, r3, r2
 801ed46:	1c7b      	adds	r3, r7, #1
 801ed48:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801ed4c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801ed50:	702b      	strb	r3, [r5, #0]
 801ed52:	786b      	ldrb	r3, [r5, #1]
 801ed54:	fb03 f002 	mul.w	r0, r3, r2
 801ed58:	1c43      	adds	r3, r0, #1
 801ed5a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801ed5e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801ed62:	706b      	strb	r3, [r5, #1]
 801ed64:	78ab      	ldrb	r3, [r5, #2]
 801ed66:	4353      	muls	r3, r2
 801ed68:	1c5a      	adds	r2, r3, #1
 801ed6a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ed6e:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801ed72:	70ae      	strb	r6, [r5, #2]
 801ed74:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ed76:	3503      	adds	r5, #3
 801ed78:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ed7a:	4413      	add	r3, r2
 801ed7c:	9329      	str	r3, [sp, #164]	; 0xa4
 801ed7e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ed80:	441c      	add	r4, r3
 801ed82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ed84:	3b01      	subs	r3, #1
 801ed86:	9313      	str	r3, [sp, #76]	; 0x4c
 801ed88:	e6cb      	b.n	801eb22 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801ed8a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ed8c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ed8e:	4413      	add	r3, r2
 801ed90:	9329      	str	r3, [sp, #164]	; 0xa4
 801ed92:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ed94:	441c      	add	r4, r3
 801ed96:	9b06      	ldr	r3, [sp, #24]
 801ed98:	3b01      	subs	r3, #1
 801ed9a:	9306      	str	r3, [sp, #24]
 801ed9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ed9e:	3303      	adds	r3, #3
 801eda0:	930a      	str	r3, [sp, #40]	; 0x28
 801eda2:	e675      	b.n	801ea90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801eda4:	f47f ae86 	bne.w	801eab4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801eda8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801edaa:	2b00      	cmp	r3, #0
 801edac:	f340 819e 	ble.w	801f0ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6cc>
 801edb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801edb4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801edb6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801edba:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801edbe:	eef0 6a48 	vmov.f32	s13, s16
 801edc2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801edc6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801edca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801edce:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801edd2:	eef0 6a68 	vmov.f32	s13, s17
 801edd6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801edda:	ee16 4a90 	vmov	r4, s13
 801edde:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ede2:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ede6:	ee37 8a48 	vsub.f32	s16, s14, s16
 801edea:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801edee:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801edf2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801edf6:	ee18 2a10 	vmov	r2, s16
 801edfa:	eeb0 8a47 	vmov.f32	s16, s14
 801edfe:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee02:	ee18 2a90 	vmov	r2, s17
 801ee06:	932b      	str	r3, [sp, #172]	; 0xac
 801ee08:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ee0a:	eef0 8a67 	vmov.f32	s17, s15
 801ee0e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee12:	932c      	str	r3, [sp, #176]	; 0xb0
 801ee14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ee16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ee18:	3b01      	subs	r3, #1
 801ee1a:	9312      	str	r3, [sp, #72]	; 0x48
 801ee1c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ee1e:	bf08      	it	eq
 801ee20:	4613      	moveq	r3, r2
 801ee22:	9306      	str	r3, [sp, #24]
 801ee24:	e62d      	b.n	801ea82 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 801ee26:	b150      	cbz	r0, 801ee3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41e>
 801ee28:	990e      	ldr	r1, [sp, #56]	; 0x38
 801ee2a:	5871      	ldr	r1, [r6, r1]
 801ee2c:	26ff      	movs	r6, #255	; 0xff
 801ee2e:	ea4f 6911 	mov.w	r9, r1, lsr #24
 801ee32:	9108      	str	r1, [sp, #32]
 801ee34:	46b6      	mov	lr, r6
 801ee36:	e6ac      	b.n	801eb92 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 801ee38:	26ff      	movs	r6, #255	; 0xff
 801ee3a:	46b1      	mov	r9, r6
 801ee3c:	e6a9      	b.n	801eb92 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 801ee3e:	26ff      	movs	r6, #255	; 0xff
 801ee40:	46b1      	mov	r9, r6
 801ee42:	e7f7      	b.n	801ee34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x414>
 801ee44:	7028      	strb	r0, [r5, #0]
 801ee46:	7069      	strb	r1, [r5, #1]
 801ee48:	e793      	b.n	801ed72 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x352>
 801ee4a:	1c4f      	adds	r7, r1, #1
 801ee4c:	d192      	bne.n	801ed74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 801ee4e:	9e07      	ldr	r6, [sp, #28]
 801ee50:	428e      	cmp	r6, r1
 801ee52:	dd8f      	ble.n	801ed74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 801ee54:	1c5e      	adds	r6, r3, #1
 801ee56:	db8d      	blt.n	801ed74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 801ee58:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801ee5a:	429e      	cmp	r6, r3
 801ee5c:	dd8a      	ble.n	801ed74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 801ee5e:	9600      	str	r6, [sp, #0]
 801ee60:	e9cd 2003 	strd	r2, r0, [sp, #12]
 801ee64:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801ee68:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ee6a:	4629      	mov	r1, r5
 801ee6c:	9b07      	ldr	r3, [sp, #28]
 801ee6e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ee70:	f7ff fc8e 	bl	801e790 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801ee74:	e77e      	b.n	801ed74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x354>
 801ee76:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ee78:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801ee7c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801ee7e:	9e07      	ldr	r6, [sp, #28]
 801ee80:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ee84:	1409      	asrs	r1, r1, #16
 801ee86:	1423      	asrs	r3, r4, #16
 801ee88:	fb06 1303 	mla	r3, r6, r3, r1
 801ee8c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ee8e:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 801ee92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801ee96:	0e1f      	lsrs	r7, r3, #24
 801ee98:	2a00      	cmp	r2, #0
 801ee9a:	f000 8113 	beq.w	801f0c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a4>
 801ee9e:	6871      	ldr	r1, [r6, #4]
 801eea0:	910d      	str	r1, [sp, #52]	; 0x34
 801eea2:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801eea6:	2800      	cmp	r0, #0
 801eea8:	f000 8115 	beq.w	801f0d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b6>
 801eeac:	990e      	ldr	r1, [sp, #56]	; 0x38
 801eeae:	eb06 0c01 	add.w	ip, r6, r1
 801eeb2:	5876      	ldr	r6, [r6, r1]
 801eeb4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801eeb8:	ea4f 6916 	mov.w	r9, r6, lsr #24
 801eebc:	9609      	str	r6, [sp, #36]	; 0x24
 801eebe:	0e0e      	lsrs	r6, r1, #24
 801eec0:	910f      	str	r1, [sp, #60]	; 0x3c
 801eec2:	b292      	uxth	r2, r2
 801eec4:	b280      	uxth	r0, r0
 801eec6:	fb02 fa00 	mul.w	sl, r2, r0
 801eeca:	0112      	lsls	r2, r2, #4
 801eecc:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801eed0:	eba2 080a 	sub.w	r8, r2, sl
 801eed4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801eed8:	b280      	uxth	r0, r0
 801eeda:	fa1f f888 	uxth.w	r8, r8
 801eede:	1a09      	subs	r1, r1, r0
 801eee0:	fb08 f20e 	mul.w	r2, r8, lr
 801eee4:	b289      	uxth	r1, r1
 801eee6:	fb01 2207 	mla	r2, r1, r7, r2
 801eeea:	fb00 2209 	mla	r2, r0, r9, r2
 801eeee:	fb0a 2206 	mla	r2, sl, r6, r2
 801eef2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801eef6:	2a00      	cmp	r2, #0
 801eef8:	f000 80da 	beq.w	801f0b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x690>
 801eefc:	2fff      	cmp	r7, #255	; 0xff
 801eefe:	d01a      	beq.n	801ef36 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x516>
 801ef00:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ef04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ef08:	fb07 fc0c 	mul.w	ip, r7, ip
 801ef0c:	435f      	muls	r7, r3
 801ef0e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801ef12:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ef16:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ef1a:	4463      	add	r3, ip
 801ef1c:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 801ef20:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 801ef24:	0a1b      	lsrs	r3, r3, #8
 801ef26:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ef2a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ef2e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ef32:	ea43 030c 	orr.w	r3, r3, ip
 801ef36:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ef3a:	d021      	beq.n	801ef80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x560>
 801ef3c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801ef3e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ef42:	fb0e f707 	mul.w	r7, lr, r7
 801ef46:	9713      	str	r7, [sp, #76]	; 0x4c
 801ef48:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801ef4a:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801ef4e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801ef50:	fb0e fe0c 	mul.w	lr, lr, ip
 801ef54:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ef58:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ef5c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ef60:	44bc      	add	ip, r7
 801ef62:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801ef66:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801ef6a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ef6e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ef72:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ef76:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801ef7a:	ea4c 070e 	orr.w	r7, ip, lr
 801ef7e:	970d      	str	r7, [sp, #52]	; 0x34
 801ef80:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ef84:	d01e      	beq.n	801efc4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a4>
 801ef86:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ef88:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801ef8c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ef90:	fb09 fe0e 	mul.w	lr, r9, lr
 801ef94:	fb09 f907 	mul.w	r9, r9, r7
 801ef98:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801ef9c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801efa0:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801efa4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801efa8:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801efac:	44f4      	add	ip, lr
 801efae:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801efb2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801efb6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801efba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801efbe:	ea4c 0709 	orr.w	r7, ip, r9
 801efc2:	9709      	str	r7, [sp, #36]	; 0x24
 801efc4:	2eff      	cmp	r6, #255	; 0xff
 801efc6:	d01c      	beq.n	801f002 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e2>
 801efc8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801efca:	f007 1eff 	and.w	lr, r7, #16711935	; 0xff00ff
 801efce:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801efd2:	fb06 fe0e 	mul.w	lr, r6, lr
 801efd6:	437e      	muls	r6, r7
 801efd8:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801efdc:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801efe0:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801efe4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801efe8:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801efec:	44f4      	add	ip, lr
 801efee:	0a36      	lsrs	r6, r6, #8
 801eff0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eff4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801eff8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801effc:	ea4c 0606 	orr.w	r6, ip, r6
 801f000:	960f      	str	r6, [sp, #60]	; 0x3c
 801f002:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801f004:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801f008:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801f00c:	2aff      	cmp	r2, #255	; 0xff
 801f00e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f012:	fb08 f606 	mul.w	r6, r8, r6
 801f016:	fb01 6607 	mla	r6, r1, r7, r6
 801f01a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f01c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f020:	fb00 6607 	mla	r6, r0, r7, r6
 801f024:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801f026:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801f02a:	fb0a 6607 	mla	r6, sl, r7, r6
 801f02e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801f030:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801f034:	ea4f 2616 	mov.w	r6, r6, lsr #8
 801f038:	fb08 f807 	mul.w	r8, r8, r7
 801f03c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801f040:	fb01 8303 	mla	r3, r1, r3, r8
 801f044:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f046:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801f04a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801f04c:	fb00 330c 	mla	r3, r0, ip, r3
 801f050:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801f054:	fb0a 3e0e 	mla	lr, sl, lr, r3
 801f058:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f05c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f060:	ea46 060e 	orr.w	r6, r6, lr
 801f064:	b2f0      	uxtb	r0, r6
 801f066:	f3c6 2107 	ubfx	r1, r6, #8, #8
 801f06a:	ea4f 4616 	mov.w	r6, r6, lsr #16
 801f06e:	d038      	beq.n	801f0e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c2>
 801f070:	43d2      	mvns	r2, r2
 801f072:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 801f076:	b2d2      	uxtb	r2, r2
 801f078:	4357      	muls	r7, r2
 801f07a:	1c7b      	adds	r3, r7, #1
 801f07c:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801f080:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801f084:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 801f088:	4350      	muls	r0, r2
 801f08a:	f805 3c03 	strb.w	r3, [r5, #-3]
 801f08e:	1c43      	adds	r3, r0, #1
 801f090:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801f094:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f098:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801f09c:	4353      	muls	r3, r2
 801f09e:	f805 1c02 	strb.w	r1, [r5, #-2]
 801f0a2:	1c5a      	adds	r2, r3, #1
 801f0a4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f0a8:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801f0ac:	f805 6c01 	strb.w	r6, [r5, #-1]
 801f0b0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f0b2:	3503      	adds	r5, #3
 801f0b4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f0b6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801f0ba:	4413      	add	r3, r2
 801f0bc:	9329      	str	r3, [sp, #164]	; 0xa4
 801f0be:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f0c0:	441c      	add	r4, r3
 801f0c2:	e510      	b.n	801eae6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 801f0c4:	b150      	cbz	r0, 801f0dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 801f0c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 801f0c8:	5871      	ldr	r1, [r6, r1]
 801f0ca:	26ff      	movs	r6, #255	; 0xff
 801f0cc:	ea4f 6911 	mov.w	r9, r1, lsr #24
 801f0d0:	9109      	str	r1, [sp, #36]	; 0x24
 801f0d2:	46b6      	mov	lr, r6
 801f0d4:	e6f5      	b.n	801eec2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 801f0d6:	26ff      	movs	r6, #255	; 0xff
 801f0d8:	46b1      	mov	r9, r6
 801f0da:	e6f2      	b.n	801eec2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 801f0dc:	26ff      	movs	r6, #255	; 0xff
 801f0de:	46b1      	mov	r9, r6
 801f0e0:	e7f7      	b.n	801f0d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6b2>
 801f0e2:	f805 0c03 	strb.w	r0, [r5, #-3]
 801f0e6:	f805 1c02 	strb.w	r1, [r5, #-2]
 801f0ea:	e7df      	b.n	801f0ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68c>
 801f0ec:	b017      	add	sp, #92	; 0x5c
 801f0ee:	ecbd 8b08 	vpop	{d8-d11}
 801f0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f0f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801f0f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0fc:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801f100:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801f104:	2800      	cmp	r0, #0
 801f106:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801f10a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801f10e:	fb0c 0e03 	mla	lr, ip, r3, r0
 801f112:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801f116:	db6b      	blt.n	801f1f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801f118:	4580      	cmp	r8, r0
 801f11a:	dd69      	ble.n	801f1f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801f11c:	f1bc 0f00 	cmp.w	ip, #0
 801f120:	db66      	blt.n	801f1f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801f122:	45e1      	cmp	r9, ip
 801f124:	dd64      	ble.n	801f1f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801f126:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801f12a:	f01e 0f01 	tst.w	lr, #1
 801f12e:	5d16      	ldrb	r6, [r2, r4]
 801f130:	bf0c      	ite	eq
 801f132:	f006 060f 	andeq.w	r6, r6, #15
 801f136:	1136      	asrne	r6, r6, #4
 801f138:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801f13c:	b2f6      	uxtb	r6, r6
 801f13e:	f110 0a01 	adds.w	sl, r0, #1
 801f142:	d457      	bmi.n	801f1f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801f144:	45d0      	cmp	r8, sl
 801f146:	dd55      	ble.n	801f1f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801f148:	f1bc 0f00 	cmp.w	ip, #0
 801f14c:	db52      	blt.n	801f1f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801f14e:	45e1      	cmp	r9, ip
 801f150:	dd50      	ble.n	801f1f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801f152:	2f00      	cmp	r7, #0
 801f154:	f000 80ac 	beq.w	801f2b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 801f158:	f10e 0b01 	add.w	fp, lr, #1
 801f15c:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801f160:	f01b 0f01 	tst.w	fp, #1
 801f164:	5d14      	ldrb	r4, [r2, r4]
 801f166:	bf0c      	ite	eq
 801f168:	f004 040f 	andeq.w	r4, r4, #15
 801f16c:	1124      	asrne	r4, r4, #4
 801f16e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801f172:	b2e4      	uxtb	r4, r4
 801f174:	2d00      	cmp	r5, #0
 801f176:	f000 8096 	beq.w	801f2a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 801f17a:	2800      	cmp	r0, #0
 801f17c:	f10c 0c01 	add.w	ip, ip, #1
 801f180:	db3c      	blt.n	801f1fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801f182:	4580      	cmp	r8, r0
 801f184:	dd3a      	ble.n	801f1fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801f186:	f1bc 0f00 	cmp.w	ip, #0
 801f18a:	db37      	blt.n	801f1fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801f18c:	45e1      	cmp	r9, ip
 801f18e:	dd35      	ble.n	801f1fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801f190:	eb03 0b0e 	add.w	fp, r3, lr
 801f194:	ea4f 005b 	mov.w	r0, fp, lsr #1
 801f198:	f01b 0f01 	tst.w	fp, #1
 801f19c:	5c10      	ldrb	r0, [r2, r0]
 801f19e:	bf0c      	ite	eq
 801f1a0:	f000 000f 	andeq.w	r0, r0, #15
 801f1a4:	1100      	asrne	r0, r0, #4
 801f1a6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801f1aa:	b2c0      	uxtb	r0, r0
 801f1ac:	f1ba 0f00 	cmp.w	sl, #0
 801f1b0:	db26      	blt.n	801f200 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801f1b2:	45d0      	cmp	r8, sl
 801f1b4:	dd24      	ble.n	801f200 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801f1b6:	f1bc 0f00 	cmp.w	ip, #0
 801f1ba:	db21      	blt.n	801f200 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801f1bc:	45e1      	cmp	r9, ip
 801f1be:	dd1f      	ble.n	801f200 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801f1c0:	b307      	cbz	r7, 801f204 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 801f1c2:	3301      	adds	r3, #1
 801f1c4:	449e      	add	lr, r3
 801f1c6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801f1ca:	f01e 0f01 	tst.w	lr, #1
 801f1ce:	5cd3      	ldrb	r3, [r2, r3]
 801f1d0:	bf0c      	ite	eq
 801f1d2:	f003 030f 	andeq.w	r3, r3, #15
 801f1d6:	111b      	asrne	r3, r3, #4
 801f1d8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801f1dc:	b2db      	uxtb	r3, r3
 801f1de:	2f0f      	cmp	r7, #15
 801f1e0:	d911      	bls.n	801f206 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 801f1e2:	4b35      	ldr	r3, [pc, #212]	; (801f2b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 801f1e4:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f1e8:	4a34      	ldr	r2, [pc, #208]	; (801f2bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 801f1ea:	4835      	ldr	r0, [pc, #212]	; (801f2c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 801f1ec:	f003 f8a8 	bl	8022340 <__assert_func>
 801f1f0:	2600      	movs	r6, #0
 801f1f2:	e7a4      	b.n	801f13e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 801f1f4:	2400      	movs	r4, #0
 801f1f6:	e7bd      	b.n	801f174 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 801f1f8:	463c      	mov	r4, r7
 801f1fa:	e7be      	b.n	801f17a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 801f1fc:	2000      	movs	r0, #0
 801f1fe:	e7d5      	b.n	801f1ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 801f200:	2300      	movs	r3, #0
 801f202:	e7ec      	b.n	801f1de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 801f204:	463b      	mov	r3, r7
 801f206:	2d0f      	cmp	r5, #15
 801f208:	d8eb      	bhi.n	801f1e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 801f20a:	b2bf      	uxth	r7, r7
 801f20c:	b2ad      	uxth	r5, r5
 801f20e:	fb07 f205 	mul.w	r2, r7, r5
 801f212:	013f      	lsls	r7, r7, #4
 801f214:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 801f218:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801f21c:	1abf      	subs	r7, r7, r2
 801f21e:	b2ad      	uxth	r5, r5
 801f220:	b2bf      	uxth	r7, r7
 801f222:	ebac 0c05 	sub.w	ip, ip, r5
 801f226:	437c      	muls	r4, r7
 801f228:	fa1f fc8c 	uxth.w	ip, ip
 801f22c:	fb06 440c 	mla	r4, r6, ip, r4
 801f230:	fb05 4400 	mla	r4, r5, r0, r4
 801f234:	fb02 4203 	mla	r2, r2, r3, r4
 801f238:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801f23c:	b38a      	cbz	r2, 801f2a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 801f23e:	4b21      	ldr	r3, [pc, #132]	; (801f2c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 801f240:	681c      	ldr	r4, [r3, #0]
 801f242:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801f246:	b2e5      	uxtb	r5, r4
 801f248:	4353      	muls	r3, r2
 801f24a:	1c5a      	adds	r2, r3, #1
 801f24c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f250:	1212      	asrs	r2, r2, #8
 801f252:	b290      	uxth	r0, r2
 801f254:	43d2      	mvns	r2, r2
 801f256:	fb15 f500 	smulbb	r5, r5, r0
 801f25a:	b2d3      	uxtb	r3, r2
 801f25c:	780a      	ldrb	r2, [r1, #0]
 801f25e:	fb02 5203 	mla	r2, r2, r3, r5
 801f262:	b292      	uxth	r2, r2
 801f264:	1c55      	adds	r5, r2, #1
 801f266:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801f26a:	784d      	ldrb	r5, [r1, #1]
 801f26c:	fb15 f503 	smulbb	r5, r5, r3
 801f270:	1212      	asrs	r2, r2, #8
 801f272:	700a      	strb	r2, [r1, #0]
 801f274:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801f278:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801f27c:	fb02 5200 	mla	r2, r2, r0, r5
 801f280:	b292      	uxth	r2, r2
 801f282:	1c55      	adds	r5, r2, #1
 801f284:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801f288:	1212      	asrs	r2, r2, #8
 801f28a:	704a      	strb	r2, [r1, #1]
 801f28c:	788a      	ldrb	r2, [r1, #2]
 801f28e:	fb12 f303 	smulbb	r3, r2, r3
 801f292:	fb04 3300 	mla	r3, r4, r0, r3
 801f296:	b29b      	uxth	r3, r3
 801f298:	1c5a      	adds	r2, r3, #1
 801f29a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f29e:	121b      	asrs	r3, r3, #8
 801f2a0:	708b      	strb	r3, [r1, #2]
 801f2a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2a6:	2f0f      	cmp	r7, #15
 801f2a8:	d89b      	bhi.n	801f1e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 801f2aa:	462b      	mov	r3, r5
 801f2ac:	4628      	mov	r0, r5
 801f2ae:	e7ac      	b.n	801f20a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 801f2b0:	2d00      	cmp	r5, #0
 801f2b2:	d1a1      	bne.n	801f1f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 801f2b4:	462c      	mov	r4, r5
 801f2b6:	e7f8      	b.n	801f2aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 801f2b8:	08027a30 	.word	0x08027a30
 801f2bc:	08027f26 	.word	0x08027f26
 801f2c0:	08027af9 	.word	0x08027af9
 801f2c4:	2000b288 	.word	0x2000b288

0801f2c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2cc:	ed2d 8b08 	vpush	{d8-d11}
 801f2d0:	b097      	sub	sp, #92	; 0x5c
 801f2d2:	eeb0 aa40 	vmov.f32	s20, s0
 801f2d6:	eef0 9a60 	vmov.f32	s19, s1
 801f2da:	9308      	str	r3, [sp, #32]
 801f2dc:	eeb0 9a41 	vmov.f32	s18, s2
 801f2e0:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801f2e4:	eeb0 8a62 	vmov.f32	s16, s5
 801f2e8:	9214      	str	r2, [sp, #80]	; 0x50
 801f2ea:	eef0 8a43 	vmov.f32	s17, s6
 801f2ee:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f2f0:	eef0 ba44 	vmov.f32	s23, s8
 801f2f4:	9309      	str	r3, [sp, #36]	; 0x24
 801f2f6:	eeb0 ba64 	vmov.f32	s22, s9
 801f2fa:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 801f2fe:	eef0 aa45 	vmov.f32	s21, s10
 801f302:	9015      	str	r0, [sp, #84]	; 0x54
 801f304:	910c      	str	r1, [sp, #48]	; 0x30
 801f306:	930e      	str	r3, [sp, #56]	; 0x38
 801f308:	6850      	ldr	r0, [r2, #4]
 801f30a:	f9bd b0c0 	ldrsh.w	fp, [sp, #192]	; 0xc0
 801f30e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801f312:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 801f316:	fb00 1803 	mla	r8, r0, r3, r1
 801f31a:	6813      	ldr	r3, [r2, #0]
 801f31c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f320:	4498      	add	r8, r3
 801f322:	f10b 0301 	add.w	r3, fp, #1
 801f326:	f023 0301 	bic.w	r3, r3, #1
 801f32a:	930f      	str	r3, [sp, #60]	; 0x3c
 801f32c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801f32e:	681f      	ldr	r7, [r3, #0]
 801f330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f332:	2b00      	cmp	r3, #0
 801f334:	dc03      	bgt.n	801f33e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801f336:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f338:	2b00      	cmp	r3, #0
 801f33a:	f340 8238 	ble.w	801f7ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801f33e:	9b08      	ldr	r3, [sp, #32]
 801f340:	2b00      	cmp	r3, #0
 801f342:	f340 810c 	ble.w	801f55e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801f346:	142a      	asrs	r2, r5, #16
 801f348:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f34c:	d42c      	bmi.n	801f3a8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801f34e:	1c51      	adds	r1, r2, #1
 801f350:	458b      	cmp	fp, r1
 801f352:	dd2c      	ble.n	801f3ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801f354:	2b00      	cmp	r3, #0
 801f356:	db2a      	blt.n	801f3ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801f358:	1c59      	adds	r1, r3, #1
 801f35a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f35c:	4288      	cmp	r0, r1
 801f35e:	dd26      	ble.n	801f3ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801f360:	9b08      	ldr	r3, [sp, #32]
 801f362:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f364:	3b01      	subs	r3, #1
 801f366:	fb02 5203 	mla	r2, r2, r3, r5
 801f36a:	1412      	asrs	r2, r2, #16
 801f36c:	d429      	bmi.n	801f3c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801f36e:	3201      	adds	r2, #1
 801f370:	4593      	cmp	fp, r2
 801f372:	dd26      	ble.n	801f3c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801f374:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801f376:	fb02 6303 	mla	r3, r2, r3, r6
 801f37a:	141b      	asrs	r3, r3, #16
 801f37c:	d421      	bmi.n	801f3c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801f37e:	3301      	adds	r3, #1
 801f380:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f382:	429a      	cmp	r2, r3
 801f384:	dd1d      	ble.n	801f3c2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801f386:	f108 0e03 	add.w	lr, r8, #3
 801f38a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801f38e:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801f392:	f1b9 0f00 	cmp.w	r9, #0
 801f396:	f300 814f 	bgt.w	801f638 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x370>
 801f39a:	9b08      	ldr	r3, [sp, #32]
 801f39c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f3a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f3a4:	44a0      	add	r8, r4
 801f3a6:	e0dc      	b.n	801f562 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 801f3a8:	1c51      	adds	r1, r2, #1
 801f3aa:	f040 80ce 	bne.w	801f54a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f3ae:	4593      	cmp	fp, r2
 801f3b0:	f340 80cb 	ble.w	801f54a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f3b4:	1c5a      	adds	r2, r3, #1
 801f3b6:	f2c0 80c8 	blt.w	801f54a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f3ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f3bc:	4293      	cmp	r3, r2
 801f3be:	f280 80c4 	bge.w	801f54a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 801f3c2:	9b08      	ldr	r3, [sp, #32]
 801f3c4:	46c1      	mov	r9, r8
 801f3c6:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801f3ca:	930d      	str	r3, [sp, #52]	; 0x34
 801f3cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f3ce:	2b00      	cmp	r3, #0
 801f3d0:	dde3      	ble.n	801f39a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 801f3d2:	1428      	asrs	r0, r5, #16
 801f3d4:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801f3d8:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f3dc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801f3e0:	f100 8111 	bmi.w	801f606 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 801f3e4:	f100 0c01 	add.w	ip, r0, #1
 801f3e8:	45e3      	cmp	fp, ip
 801f3ea:	f340 810e 	ble.w	801f60a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 801f3ee:	2b00      	cmp	r3, #0
 801f3f0:	f2c0 810b 	blt.w	801f60a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 801f3f4:	f103 0c01 	add.w	ip, r3, #1
 801f3f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f3fa:	4564      	cmp	r4, ip
 801f3fc:	f340 8105 	ble.w	801f60a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 801f400:	fb03 030a 	mla	r3, r3, sl, r0
 801f404:	0858      	lsrs	r0, r3, #1
 801f406:	07dc      	lsls	r4, r3, #31
 801f408:	5c38      	ldrb	r0, [r7, r0]
 801f40a:	bf54      	ite	pl
 801f40c:	f000 000f 	andpl.w	r0, r0, #15
 801f410:	1100      	asrmi	r0, r0, #4
 801f412:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801f416:	b2c0      	uxtb	r0, r0
 801f418:	2a00      	cmp	r2, #0
 801f41a:	f000 80e1 	beq.w	801f5e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x318>
 801f41e:	f103 0e01 	add.w	lr, r3, #1
 801f422:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801f426:	f01e 0f01 	tst.w	lr, #1
 801f42a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f42e:	bf0c      	ite	eq
 801f430:	f00c 0c0f 	andeq.w	ip, ip, #15
 801f434:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801f438:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f43c:	fa5f f48c 	uxtb.w	r4, ip
 801f440:	9410      	str	r4, [sp, #64]	; 0x40
 801f442:	b1f9      	cbz	r1, 801f484 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 801f444:	4453      	add	r3, sl
 801f446:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801f44a:	07dc      	lsls	r4, r3, #31
 801f44c:	f103 0301 	add.w	r3, r3, #1
 801f450:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f454:	bf54      	ite	pl
 801f456:	f00c 0c0f 	andpl.w	ip, ip, #15
 801f45a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801f45e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f462:	fa5f f48c 	uxtb.w	r4, ip
 801f466:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801f46a:	940a      	str	r4, [sp, #40]	; 0x28
 801f46c:	07dc      	lsls	r4, r3, #31
 801f46e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f472:	bf54      	ite	pl
 801f474:	f00c 030f 	andpl.w	r3, ip, #15
 801f478:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801f47c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801f480:	b2db      	uxtb	r3, r3
 801f482:	9311      	str	r3, [sp, #68]	; 0x44
 801f484:	b292      	uxth	r2, r2
 801f486:	b289      	uxth	r1, r1
 801f488:	0113      	lsls	r3, r2, #4
 801f48a:	fb02 fc01 	mul.w	ip, r2, r1
 801f48e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f490:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801f494:	ebcc 1101 	rsb	r1, ip, r1, lsl #4
 801f498:	eba3 030c 	sub.w	r3, r3, ip
 801f49c:	b289      	uxth	r1, r1
 801f49e:	b29b      	uxth	r3, r3
 801f4a0:	ebae 0e01 	sub.w	lr, lr, r1
 801f4a4:	4353      	muls	r3, r2
 801f4a6:	fa1f fe8e 	uxth.w	lr, lr
 801f4aa:	fb00 320e 	mla	r2, r0, lr, r3
 801f4ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f4b0:	fb01 2203 	mla	r2, r1, r3, r2
 801f4b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f4b6:	fb0c 2203 	mla	r2, ip, r3, r2
 801f4ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801f4be:	2a00      	cmp	r2, #0
 801f4c0:	d039      	beq.n	801f536 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 801f4c2:	4bbd      	ldr	r3, [pc, #756]	; (801f7b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 801f4c4:	6819      	ldr	r1, [r3, #0]
 801f4c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f4c8:	fa5f fc81 	uxtb.w	ip, r1
 801f4cc:	435a      	muls	r2, r3
 801f4ce:	1c53      	adds	r3, r2, #1
 801f4d0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801f4d4:	1212      	asrs	r2, r2, #8
 801f4d6:	b290      	uxth	r0, r2
 801f4d8:	43d2      	mvns	r2, r2
 801f4da:	fb1c fc00 	smulbb	ip, ip, r0
 801f4de:	b2d3      	uxtb	r3, r2
 801f4e0:	f899 2000 	ldrb.w	r2, [r9]
 801f4e4:	fb02 c203 	mla	r2, r2, r3, ip
 801f4e8:	b292      	uxth	r2, r2
 801f4ea:	f102 0c01 	add.w	ip, r2, #1
 801f4ee:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801f4f2:	f899 c001 	ldrb.w	ip, [r9, #1]
 801f4f6:	fb1c fc03 	smulbb	ip, ip, r3
 801f4fa:	1212      	asrs	r2, r2, #8
 801f4fc:	f889 2000 	strb.w	r2, [r9]
 801f500:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801f504:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801f508:	fb02 c200 	mla	r2, r2, r0, ip
 801f50c:	b292      	uxth	r2, r2
 801f50e:	f102 0c01 	add.w	ip, r2, #1
 801f512:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801f516:	1212      	asrs	r2, r2, #8
 801f518:	f889 2001 	strb.w	r2, [r9, #1]
 801f51c:	f899 2002 	ldrb.w	r2, [r9, #2]
 801f520:	fb12 f303 	smulbb	r3, r2, r3
 801f524:	fb01 3300 	mla	r3, r1, r0, r3
 801f528:	b29b      	uxth	r3, r3
 801f52a:	1c5a      	adds	r2, r3, #1
 801f52c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f530:	121b      	asrs	r3, r3, #8
 801f532:	f889 3002 	strb.w	r3, [r9, #2]
 801f536:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f538:	f109 0903 	add.w	r9, r9, #3
 801f53c:	441d      	add	r5, r3
 801f53e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f540:	441e      	add	r6, r3
 801f542:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f544:	3b01      	subs	r3, #1
 801f546:	930d      	str	r3, [sp, #52]	; 0x34
 801f548:	e740      	b.n	801f3cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801f54a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f54c:	f108 0803 	add.w	r8, r8, #3
 801f550:	441d      	add	r5, r3
 801f552:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f554:	441e      	add	r6, r3
 801f556:	9b08      	ldr	r3, [sp, #32]
 801f558:	3b01      	subs	r3, #1
 801f55a:	9308      	str	r3, [sp, #32]
 801f55c:	e6ef      	b.n	801f33e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801f55e:	f47f aeff 	bne.w	801f360 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801f562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f564:	2b00      	cmp	r3, #0
 801f566:	f340 8122 	ble.w	801f7ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e6>
 801f56a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f56e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f570:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f574:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f578:	eef0 6a48 	vmov.f32	s13, s16
 801f57c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f580:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f584:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f588:	ee16 5a90 	vmov	r5, s13
 801f58c:	eef0 6a68 	vmov.f32	s13, s17
 801f590:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f594:	ee16 6a90 	vmov	r6, s13
 801f598:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f59c:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f5a0:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f5a4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f5a8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f5ac:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f5b0:	ee18 2a10 	vmov	r2, s16
 801f5b4:	eeb0 8a47 	vmov.f32	s16, s14
 801f5b8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f5bc:	ee18 2a90 	vmov	r2, s17
 801f5c0:	932b      	str	r3, [sp, #172]	; 0xac
 801f5c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f5c4:	eef0 8a67 	vmov.f32	s17, s15
 801f5c8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f5cc:	932c      	str	r3, [sp, #176]	; 0xb0
 801f5ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f5d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f5d2:	3b01      	subs	r3, #1
 801f5d4:	930c      	str	r3, [sp, #48]	; 0x30
 801f5d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f5d8:	bf08      	it	eq
 801f5da:	4613      	moveq	r3, r2
 801f5dc:	9308      	str	r3, [sp, #32]
 801f5de:	e6a7      	b.n	801f330 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801f5e0:	2900      	cmp	r1, #0
 801f5e2:	f43f af4f 	beq.w	801f484 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 801f5e6:	4453      	add	r3, sl
 801f5e8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801f5ec:	07db      	lsls	r3, r3, #31
 801f5ee:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f5f2:	bf54      	ite	pl
 801f5f4:	f00c 030f 	andpl.w	r3, ip, #15
 801f5f8:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801f5fc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801f600:	b2db      	uxtb	r3, r3
 801f602:	930a      	str	r3, [sp, #40]	; 0x28
 801f604:	e73e      	b.n	801f484 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1bc>
 801f606:	1c44      	adds	r4, r0, #1
 801f608:	d195      	bne.n	801f536 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 801f60a:	4583      	cmp	fp, r0
 801f60c:	dd93      	ble.n	801f536 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 801f60e:	1c5c      	adds	r4, r3, #1
 801f610:	db91      	blt.n	801f536 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 801f612:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f614:	429c      	cmp	r4, r3
 801f616:	dd8e      	ble.n	801f536 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 801f618:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f61a:	9002      	str	r0, [sp, #8]
 801f61c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f61e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801f622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f624:	463a      	mov	r2, r7
 801f626:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f62a:	e9cd b300 	strd	fp, r3, [sp]
 801f62e:	4649      	mov	r1, r9
 801f630:	4653      	mov	r3, sl
 801f632:	f7ff fd61 	bl	801f0f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801f636:	e77e      	b.n	801f536 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26e>
 801f638:	142a      	asrs	r2, r5, #16
 801f63a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f63e:	1433      	asrs	r3, r6, #16
 801f640:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f644:	fb0a 2303 	mla	r3, sl, r3, r2
 801f648:	085a      	lsrs	r2, r3, #1
 801f64a:	07dc      	lsls	r4, r3, #31
 801f64c:	5cba      	ldrb	r2, [r7, r2]
 801f64e:	bf54      	ite	pl
 801f650:	f002 020f 	andpl.w	r2, r2, #15
 801f654:	1112      	asrmi	r2, r2, #4
 801f656:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f65a:	b2d2      	uxtb	r2, r2
 801f65c:	2900      	cmp	r1, #0
 801f65e:	f000 8093 	beq.w	801f788 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c0>
 801f662:	1c5c      	adds	r4, r3, #1
 801f664:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 801f668:	07e4      	lsls	r4, r4, #31
 801f66a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f66e:	bf54      	ite	pl
 801f670:	f00c 0c0f 	andpl.w	ip, ip, #15
 801f674:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801f678:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f67c:	fa5f f48c 	uxtb.w	r4, ip
 801f680:	9412      	str	r4, [sp, #72]	; 0x48
 801f682:	b300      	cbz	r0, 801f6c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 801f684:	4453      	add	r3, sl
 801f686:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801f68a:	07dc      	lsls	r4, r3, #31
 801f68c:	f103 0301 	add.w	r3, r3, #1
 801f690:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f694:	bf54      	ite	pl
 801f696:	f00c 0c0f 	andpl.w	ip, ip, #15
 801f69a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801f69e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f6a2:	fa5f f48c 	uxtb.w	r4, ip
 801f6a6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801f6aa:	940b      	str	r4, [sp, #44]	; 0x2c
 801f6ac:	07dc      	lsls	r4, r3, #31
 801f6ae:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f6b2:	bf54      	ite	pl
 801f6b4:	f00c 0c0f 	andpl.w	ip, ip, #15
 801f6b8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801f6bc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f6c0:	fa5f f38c 	uxtb.w	r3, ip
 801f6c4:	9313      	str	r3, [sp, #76]	; 0x4c
 801f6c6:	b289      	uxth	r1, r1
 801f6c8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f6ca:	b280      	uxth	r0, r0
 801f6cc:	fb01 f300 	mul.w	r3, r1, r0
 801f6d0:	0109      	lsls	r1, r1, #4
 801f6d2:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801f6d6:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801f6da:	1ac9      	subs	r1, r1, r3
 801f6dc:	b280      	uxth	r0, r0
 801f6de:	b289      	uxth	r1, r1
 801f6e0:	ebac 0c00 	sub.w	ip, ip, r0
 801f6e4:	4361      	muls	r1, r4
 801f6e6:	fa1f fc8c 	uxth.w	ip, ip
 801f6ea:	fb02 120c 	mla	r2, r2, ip, r1
 801f6ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f6f0:	fb00 2001 	mla	r0, r0, r1, r2
 801f6f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f6f6:	fb03 0302 	mla	r3, r3, r2, r0
 801f6fa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f6fe:	2b00      	cmp	r3, #0
 801f700:	d039      	beq.n	801f776 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 801f702:	4a2d      	ldr	r2, [pc, #180]	; (801f7b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4f0>)
 801f704:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801f708:	6810      	ldr	r0, [r2, #0]
 801f70a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f70c:	fa5f fc80 	uxtb.w	ip, r0
 801f710:	4353      	muls	r3, r2
 801f712:	1c5a      	adds	r2, r3, #1
 801f714:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f718:	121b      	asrs	r3, r3, #8
 801f71a:	b29a      	uxth	r2, r3
 801f71c:	43db      	mvns	r3, r3
 801f71e:	fb1c fc02 	smulbb	ip, ip, r2
 801f722:	b2db      	uxtb	r3, r3
 801f724:	fb01 c103 	mla	r1, r1, r3, ip
 801f728:	b289      	uxth	r1, r1
 801f72a:	f101 0c01 	add.w	ip, r1, #1
 801f72e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801f732:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801f736:	fb1c fc03 	smulbb	ip, ip, r3
 801f73a:	1209      	asrs	r1, r1, #8
 801f73c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801f740:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801f744:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801f748:	fb01 c102 	mla	r1, r1, r2, ip
 801f74c:	b289      	uxth	r1, r1
 801f74e:	f101 0c01 	add.w	ip, r1, #1
 801f752:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801f756:	1209      	asrs	r1, r1, #8
 801f758:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801f75c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801f760:	fb11 f303 	smulbb	r3, r1, r3
 801f764:	fb00 3002 	mla	r0, r0, r2, r3
 801f768:	b280      	uxth	r0, r0
 801f76a:	1c42      	adds	r2, r0, #1
 801f76c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801f770:	1200      	asrs	r0, r0, #8
 801f772:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801f776:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f778:	f10e 0e03 	add.w	lr, lr, #3
 801f77c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801f780:	441d      	add	r5, r3
 801f782:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f784:	441e      	add	r6, r3
 801f786:	e604      	b.n	801f392 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xca>
 801f788:	2800      	cmp	r0, #0
 801f78a:	d09c      	beq.n	801f6c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 801f78c:	4453      	add	r3, sl
 801f78e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801f792:	07db      	lsls	r3, r3, #31
 801f794:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f798:	bf54      	ite	pl
 801f79a:	f00c 0c0f 	andpl.w	ip, ip, #15
 801f79e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801f7a2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f7a6:	fa5f f38c 	uxtb.w	r3, ip
 801f7aa:	930b      	str	r3, [sp, #44]	; 0x2c
 801f7ac:	e78b      	b.n	801f6c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fe>
 801f7ae:	b017      	add	sp, #92	; 0x5c
 801f7b0:	ecbd 8b08 	vpop	{d8-d11}
 801f7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f7b8:	2000b288 	.word	0x2000b288

0801f7bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801f7bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7c0:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801f7c4:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801f7c8:	2800      	cmp	r0, #0
 801f7ca:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801f7ce:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801f7d2:	fb0c 0e03 	mla	lr, ip, r3, r0
 801f7d6:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801f7da:	db6b      	blt.n	801f8b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801f7dc:	4580      	cmp	r8, r0
 801f7de:	dd69      	ble.n	801f8b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801f7e0:	f1bc 0f00 	cmp.w	ip, #0
 801f7e4:	db66      	blt.n	801f8b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801f7e6:	45e1      	cmp	r9, ip
 801f7e8:	dd64      	ble.n	801f8b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801f7ea:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801f7ee:	f01e 0f01 	tst.w	lr, #1
 801f7f2:	5d16      	ldrb	r6, [r2, r4]
 801f7f4:	bf0c      	ite	eq
 801f7f6:	f006 060f 	andeq.w	r6, r6, #15
 801f7fa:	1136      	asrne	r6, r6, #4
 801f7fc:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801f800:	b2f6      	uxtb	r6, r6
 801f802:	f110 0a01 	adds.w	sl, r0, #1
 801f806:	d457      	bmi.n	801f8b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801f808:	45d0      	cmp	r8, sl
 801f80a:	dd55      	ble.n	801f8b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801f80c:	f1bc 0f00 	cmp.w	ip, #0
 801f810:	db52      	blt.n	801f8b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801f812:	45e1      	cmp	r9, ip
 801f814:	dd50      	ble.n	801f8b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801f816:	2f00      	cmp	r7, #0
 801f818:	f000 80a5 	beq.w	801f966 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 801f81c:	f10e 0b01 	add.w	fp, lr, #1
 801f820:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801f824:	f01b 0f01 	tst.w	fp, #1
 801f828:	5d14      	ldrb	r4, [r2, r4]
 801f82a:	bf0c      	ite	eq
 801f82c:	f004 040f 	andeq.w	r4, r4, #15
 801f830:	1124      	asrne	r4, r4, #4
 801f832:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801f836:	b2e4      	uxtb	r4, r4
 801f838:	2d00      	cmp	r5, #0
 801f83a:	f000 808f 	beq.w	801f95c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 801f83e:	2800      	cmp	r0, #0
 801f840:	f10c 0c01 	add.w	ip, ip, #1
 801f844:	db3c      	blt.n	801f8c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801f846:	4580      	cmp	r8, r0
 801f848:	dd3a      	ble.n	801f8c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801f84a:	f1bc 0f00 	cmp.w	ip, #0
 801f84e:	db37      	blt.n	801f8c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801f850:	45e1      	cmp	r9, ip
 801f852:	dd35      	ble.n	801f8c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801f854:	eb03 0b0e 	add.w	fp, r3, lr
 801f858:	ea4f 005b 	mov.w	r0, fp, lsr #1
 801f85c:	f01b 0f01 	tst.w	fp, #1
 801f860:	5c10      	ldrb	r0, [r2, r0]
 801f862:	bf0c      	ite	eq
 801f864:	f000 000f 	andeq.w	r0, r0, #15
 801f868:	1100      	asrne	r0, r0, #4
 801f86a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801f86e:	b2c0      	uxtb	r0, r0
 801f870:	f1ba 0f00 	cmp.w	sl, #0
 801f874:	db26      	blt.n	801f8c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801f876:	45d0      	cmp	r8, sl
 801f878:	dd24      	ble.n	801f8c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801f87a:	f1bc 0f00 	cmp.w	ip, #0
 801f87e:	db21      	blt.n	801f8c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801f880:	45e1      	cmp	r9, ip
 801f882:	dd1f      	ble.n	801f8c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801f884:	b307      	cbz	r7, 801f8c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 801f886:	3301      	adds	r3, #1
 801f888:	449e      	add	lr, r3
 801f88a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801f88e:	f01e 0f01 	tst.w	lr, #1
 801f892:	5cd3      	ldrb	r3, [r2, r3]
 801f894:	bf0c      	ite	eq
 801f896:	f003 030f 	andeq.w	r3, r3, #15
 801f89a:	111b      	asrne	r3, r3, #4
 801f89c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801f8a0:	b2db      	uxtb	r3, r3
 801f8a2:	2f0f      	cmp	r7, #15
 801f8a4:	d911      	bls.n	801f8ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 801f8a6:	4b32      	ldr	r3, [pc, #200]	; (801f970 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 801f8a8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801f8ac:	4a31      	ldr	r2, [pc, #196]	; (801f974 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 801f8ae:	4832      	ldr	r0, [pc, #200]	; (801f978 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 801f8b0:	f002 fd46 	bl	8022340 <__assert_func>
 801f8b4:	2600      	movs	r6, #0
 801f8b6:	e7a4      	b.n	801f802 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 801f8b8:	2400      	movs	r4, #0
 801f8ba:	e7bd      	b.n	801f838 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 801f8bc:	463c      	mov	r4, r7
 801f8be:	e7be      	b.n	801f83e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 801f8c0:	2000      	movs	r0, #0
 801f8c2:	e7d5      	b.n	801f870 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 801f8c4:	2300      	movs	r3, #0
 801f8c6:	e7ec      	b.n	801f8a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 801f8c8:	463b      	mov	r3, r7
 801f8ca:	2d0f      	cmp	r5, #15
 801f8cc:	d8eb      	bhi.n	801f8a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801f8ce:	b2bf      	uxth	r7, r7
 801f8d0:	b2ad      	uxth	r5, r5
 801f8d2:	fb07 f205 	mul.w	r2, r7, r5
 801f8d6:	013f      	lsls	r7, r7, #4
 801f8d8:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 801f8dc:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801f8e0:	1abf      	subs	r7, r7, r2
 801f8e2:	b2ad      	uxth	r5, r5
 801f8e4:	b2bf      	uxth	r7, r7
 801f8e6:	ebac 0c05 	sub.w	ip, ip, r5
 801f8ea:	437c      	muls	r4, r7
 801f8ec:	fa1f fc8c 	uxth.w	ip, ip
 801f8f0:	fb06 440c 	mla	r4, r6, ip, r4
 801f8f4:	fb05 4400 	mla	r4, r5, r0, r4
 801f8f8:	fb02 4303 	mla	r3, r2, r3, r4
 801f8fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f900:	b353      	cbz	r3, 801f958 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 801f902:	4a1e      	ldr	r2, [pc, #120]	; (801f97c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 801f904:	7808      	ldrb	r0, [r1, #0]
 801f906:	6814      	ldr	r4, [r2, #0]
 801f908:	b29a      	uxth	r2, r3
 801f90a:	43db      	mvns	r3, r3
 801f90c:	b2e5      	uxtb	r5, r4
 801f90e:	b2db      	uxtb	r3, r3
 801f910:	fb15 f502 	smulbb	r5, r5, r2
 801f914:	fb00 5003 	mla	r0, r0, r3, r5
 801f918:	b280      	uxth	r0, r0
 801f91a:	1c45      	adds	r5, r0, #1
 801f91c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801f920:	784d      	ldrb	r5, [r1, #1]
 801f922:	fb15 f503 	smulbb	r5, r5, r3
 801f926:	1200      	asrs	r0, r0, #8
 801f928:	7008      	strb	r0, [r1, #0]
 801f92a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801f92e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801f932:	fb00 5002 	mla	r0, r0, r2, r5
 801f936:	b280      	uxth	r0, r0
 801f938:	1c45      	adds	r5, r0, #1
 801f93a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801f93e:	1200      	asrs	r0, r0, #8
 801f940:	7048      	strb	r0, [r1, #1]
 801f942:	7888      	ldrb	r0, [r1, #2]
 801f944:	fb10 f303 	smulbb	r3, r0, r3
 801f948:	fb04 3202 	mla	r2, r4, r2, r3
 801f94c:	b292      	uxth	r2, r2
 801f94e:	1c53      	adds	r3, r2, #1
 801f950:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801f954:	1212      	asrs	r2, r2, #8
 801f956:	708a      	strb	r2, [r1, #2]
 801f958:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f95c:	2f0f      	cmp	r7, #15
 801f95e:	d8a2      	bhi.n	801f8a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801f960:	462b      	mov	r3, r5
 801f962:	4628      	mov	r0, r5
 801f964:	e7b3      	b.n	801f8ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 801f966:	2d00      	cmp	r5, #0
 801f968:	d1a8      	bne.n	801f8bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 801f96a:	462c      	mov	r4, r5
 801f96c:	e7f8      	b.n	801f960 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 801f96e:	bf00      	nop
 801f970:	08027a30 	.word	0x08027a30
 801f974:	08027f26 	.word	0x08027f26
 801f978:	08027af9 	.word	0x08027af9
 801f97c:	2000b288 	.word	0x2000b288

0801f980 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f984:	ed2d 8b08 	vpush	{d8-d11}
 801f988:	b095      	sub	sp, #84	; 0x54
 801f98a:	461c      	mov	r4, r3
 801f98c:	eeb0 aa40 	vmov.f32	s20, s0
 801f990:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 801f994:	eef0 9a60 	vmov.f32	s19, s1
 801f998:	920e      	str	r2, [sp, #56]	; 0x38
 801f99a:	eeb0 9a41 	vmov.f32	s18, s2
 801f99e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f9a0:	eeb0 8a62 	vmov.f32	s16, s5
 801f9a4:	9307      	str	r3, [sp, #28]
 801f9a6:	eef0 8a43 	vmov.f32	s17, s6
 801f9aa:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801f9ae:	eef0 ba44 	vmov.f32	s23, s8
 801f9b2:	9013      	str	r0, [sp, #76]	; 0x4c
 801f9b4:	eeb0 ba64 	vmov.f32	s22, s9
 801f9b8:	9109      	str	r1, [sp, #36]	; 0x24
 801f9ba:	eef0 aa45 	vmov.f32	s21, s10
 801f9be:	9308      	str	r3, [sp, #32]
 801f9c0:	6850      	ldr	r0, [r2, #4]
 801f9c2:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801f9c6:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 801f9ca:	fb00 1803 	mla	r8, r0, r3, r1
 801f9ce:	6813      	ldr	r3, [r2, #0]
 801f9d0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f9d4:	4498      	add	r8, r3
 801f9d6:	9b07      	ldr	r3, [sp, #28]
 801f9d8:	3301      	adds	r3, #1
 801f9da:	f023 0301 	bic.w	r3, r3, #1
 801f9de:	930b      	str	r3, [sp, #44]	; 0x2c
 801f9e0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f9e2:	681f      	ldr	r7, [r3, #0]
 801f9e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f9e6:	2b00      	cmp	r3, #0
 801f9e8:	dc03      	bgt.n	801f9f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801f9ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f9ec:	2b00      	cmp	r3, #0
 801f9ee:	f340 8238 	ble.w	801fe62 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801f9f2:	2c00      	cmp	r4, #0
 801f9f4:	f340 8109 	ble.w	801fc0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801f9f8:	142a      	asrs	r2, r5, #16
 801f9fa:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f9fe:	d42b      	bmi.n	801fa58 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801fa00:	1c51      	adds	r1, r2, #1
 801fa02:	9807      	ldr	r0, [sp, #28]
 801fa04:	4288      	cmp	r0, r1
 801fa06:	dd2a      	ble.n	801fa5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801fa08:	2b00      	cmp	r3, #0
 801fa0a:	db28      	blt.n	801fa5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801fa0c:	1c59      	adds	r1, r3, #1
 801fa0e:	9808      	ldr	r0, [sp, #32]
 801fa10:	4288      	cmp	r0, r1
 801fa12:	dd24      	ble.n	801fa5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801fa14:	1e63      	subs	r3, r4, #1
 801fa16:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801fa18:	fb02 5203 	mla	r2, r2, r3, r5
 801fa1c:	1412      	asrs	r2, r2, #16
 801fa1e:	d429      	bmi.n	801fa74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801fa20:	3201      	adds	r2, #1
 801fa22:	9907      	ldr	r1, [sp, #28]
 801fa24:	4291      	cmp	r1, r2
 801fa26:	dd25      	ble.n	801fa74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801fa28:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801fa2a:	fb02 6303 	mla	r3, r2, r3, r6
 801fa2e:	141b      	asrs	r3, r3, #16
 801fa30:	d420      	bmi.n	801fa74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801fa32:	3301      	adds	r3, #1
 801fa34:	9a08      	ldr	r2, [sp, #32]
 801fa36:	429a      	cmp	r2, r3
 801fa38:	dd1c      	ble.n	801fa74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801fa3a:	f108 0e03 	add.w	lr, r8, #3
 801fa3e:	46a1      	mov	r9, r4
 801fa40:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 801fa44:	f1b9 0f00 	cmp.w	r9, #0
 801fa48:	f300 8155 	bgt.w	801fcf6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x376>
 801fa4c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801fa50:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fa54:	44a0      	add	r8, r4
 801fa56:	e0da      	b.n	801fc0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 801fa58:	1c50      	adds	r0, r2, #1
 801fa5a:	f040 80ce 	bne.w	801fbfa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 801fa5e:	9907      	ldr	r1, [sp, #28]
 801fa60:	4291      	cmp	r1, r2
 801fa62:	f340 80ca 	ble.w	801fbfa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 801fa66:	1c59      	adds	r1, r3, #1
 801fa68:	f2c0 80c7 	blt.w	801fbfa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 801fa6c:	9a08      	ldr	r2, [sp, #32]
 801fa6e:	4293      	cmp	r3, r2
 801fa70:	f280 80c3 	bge.w	801fbfa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27a>
 801fa74:	46a3      	mov	fp, r4
 801fa76:	46c1      	mov	r9, r8
 801fa78:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 801fa7c:	f1bb 0f00 	cmp.w	fp, #0
 801fa80:	dde4      	ble.n	801fa4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801fa82:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801fa86:	1428      	asrs	r0, r5, #16
 801fa88:	ea4f 4326 	mov.w	r3, r6, asr #16
 801fa8c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801fa90:	920a      	str	r2, [sp, #40]	; 0x28
 801fa92:	f100 8116 	bmi.w	801fcc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 801fa96:	f100 0c01 	add.w	ip, r0, #1
 801fa9a:	9a07      	ldr	r2, [sp, #28]
 801fa9c:	4562      	cmp	r2, ip
 801fa9e:	f340 8112 	ble.w	801fcc6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801faa2:	2b00      	cmp	r3, #0
 801faa4:	f2c0 810f 	blt.w	801fcc6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801faa8:	f103 0c01 	add.w	ip, r3, #1
 801faac:	9a08      	ldr	r2, [sp, #32]
 801faae:	4562      	cmp	r2, ip
 801fab0:	f340 8109 	ble.w	801fcc6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x346>
 801fab4:	fb03 030a 	mla	r3, r3, sl, r0
 801fab8:	0858      	lsrs	r0, r3, #1
 801faba:	07da      	lsls	r2, r3, #31
 801fabc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fabe:	5c38      	ldrb	r0, [r7, r0]
 801fac0:	bf54      	ite	pl
 801fac2:	f000 000f 	andpl.w	r0, r0, #15
 801fac6:	1100      	asrmi	r0, r0, #4
 801fac8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801facc:	b2c0      	uxtb	r0, r0
 801face:	2a00      	cmp	r2, #0
 801fad0:	f000 80dd 	beq.w	801fc8e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30e>
 801fad4:	f103 0e01 	add.w	lr, r3, #1
 801fad8:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801fadc:	f01e 0f01 	tst.w	lr, #1
 801fae0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801fae4:	bf0c      	ite	eq
 801fae6:	f00c 0c0f 	andeq.w	ip, ip, #15
 801faea:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801faee:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801faf2:	fa5f fc8c 	uxtb.w	ip, ip
 801faf6:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 801fafa:	b301      	cbz	r1, 801fb3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801fafc:	4453      	add	r3, sl
 801fafe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801fb02:	07da      	lsls	r2, r3, #31
 801fb04:	f103 0301 	add.w	r3, r3, #1
 801fb08:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801fb0c:	bf54      	ite	pl
 801fb0e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801fb12:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801fb16:	07da      	lsls	r2, r3, #31
 801fb18:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801fb1c:	fa5f fc8c 	uxtb.w	ip, ip
 801fb20:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 801fb24:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801fb28:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801fb2c:	bf54      	ite	pl
 801fb2e:	f00c 030f 	andpl.w	r3, ip, #15
 801fb32:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801fb36:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801fb3a:	b2db      	uxtb	r3, r3
 801fb3c:	9310      	str	r3, [sp, #64]	; 0x40
 801fb3e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801fb42:	b289      	uxth	r1, r1
 801fb44:	fb02 f301 	mul.w	r3, r2, r1
 801fb48:	0112      	lsls	r2, r2, #4
 801fb4a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801fb4e:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801fb52:	1ad2      	subs	r2, r2, r3
 801fb54:	fa1f fe81 	uxth.w	lr, r1
 801fb58:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801fb5a:	b292      	uxth	r2, r2
 801fb5c:	ebac 0c0e 	sub.w	ip, ip, lr
 801fb60:	434a      	muls	r2, r1
 801fb62:	fa1f fc8c 	uxth.w	ip, ip
 801fb66:	fb00 200c 	mla	r0, r0, ip, r2
 801fb6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fb6c:	fb0e 0002 	mla	r0, lr, r2, r0
 801fb70:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fb72:	fb03 0002 	mla	r0, r3, r2, r0
 801fb76:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801fb7a:	b3a8      	cbz	r0, 801fbe8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801fb7c:	4bbb      	ldr	r3, [pc, #748]	; (801fe6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 801fb7e:	28ff      	cmp	r0, #255	; 0xff
 801fb80:	681b      	ldr	r3, [r3, #0]
 801fb82:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801fb86:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801fb8a:	b2db      	uxtb	r3, r3
 801fb8c:	f000 8092 	beq.w	801fcb4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x334>
 801fb90:	b282      	uxth	r2, r0
 801fb92:	43c0      	mvns	r0, r0
 801fb94:	f899 e000 	ldrb.w	lr, [r9]
 801fb98:	fb13 f302 	smulbb	r3, r3, r2
 801fb9c:	b2c0      	uxtb	r0, r0
 801fb9e:	fb11 f102 	smulbb	r1, r1, r2
 801fba2:	fb0e 3300 	mla	r3, lr, r0, r3
 801fba6:	fb1c f202 	smulbb	r2, ip, r2
 801fbaa:	b29b      	uxth	r3, r3
 801fbac:	f103 0e01 	add.w	lr, r3, #1
 801fbb0:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801fbb4:	121b      	asrs	r3, r3, #8
 801fbb6:	f889 3000 	strb.w	r3, [r9]
 801fbba:	f899 3001 	ldrb.w	r3, [r9, #1]
 801fbbe:	fb03 1100 	mla	r1, r3, r0, r1
 801fbc2:	b289      	uxth	r1, r1
 801fbc4:	1c4b      	adds	r3, r1, #1
 801fbc6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801fbca:	f899 3002 	ldrb.w	r3, [r9, #2]
 801fbce:	fb03 2000 	mla	r0, r3, r0, r2
 801fbd2:	1209      	asrs	r1, r1, #8
 801fbd4:	b280      	uxth	r0, r0
 801fbd6:	f889 1001 	strb.w	r1, [r9, #1]
 801fbda:	f100 0c01 	add.w	ip, r0, #1
 801fbde:	eb0c 2010 	add.w	r0, ip, r0, lsr #8
 801fbe2:	1200      	asrs	r0, r0, #8
 801fbe4:	f889 0002 	strb.w	r0, [r9, #2]
 801fbe8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fbea:	f109 0903 	add.w	r9, r9, #3
 801fbee:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801fbf2:	441d      	add	r5, r3
 801fbf4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fbf6:	441e      	add	r6, r3
 801fbf8:	e740      	b.n	801fa7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfc>
 801fbfa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fbfc:	3c01      	subs	r4, #1
 801fbfe:	f108 0803 	add.w	r8, r8, #3
 801fc02:	441d      	add	r5, r3
 801fc04:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fc06:	441e      	add	r6, r3
 801fc08:	e6f3      	b.n	801f9f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801fc0a:	f47f af03 	bne.w	801fa14 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801fc0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc10:	2b00      	cmp	r3, #0
 801fc12:	f340 8126 	ble.w	801fe62 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e2>
 801fc16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fc1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fc1c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801fc20:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801fc24:	eef0 6a48 	vmov.f32	s13, s16
 801fc28:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801fc2c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801fc30:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc34:	ee16 5a90 	vmov	r5, s13
 801fc38:	eef0 6a68 	vmov.f32	s13, s17
 801fc3c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc40:	ee16 6a90 	vmov	r6, s13
 801fc44:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fc48:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fc4c:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fc50:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fc54:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fc58:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fc5c:	ee18 2a10 	vmov	r2, s16
 801fc60:	eeb0 8a47 	vmov.f32	s16, s14
 801fc64:	fb92 f3f3 	sdiv	r3, r2, r3
 801fc68:	ee18 2a90 	vmov	r2, s17
 801fc6c:	9329      	str	r3, [sp, #164]	; 0xa4
 801fc6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fc70:	eef0 8a67 	vmov.f32	s17, s15
 801fc74:	fb92 f3f3 	sdiv	r3, r2, r3
 801fc78:	932a      	str	r3, [sp, #168]	; 0xa8
 801fc7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fc7e:	3b01      	subs	r3, #1
 801fc80:	9309      	str	r3, [sp, #36]	; 0x24
 801fc82:	bf08      	it	eq
 801fc84:	4614      	moveq	r4, r2
 801fc86:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fc88:	bf18      	it	ne
 801fc8a:	461c      	movne	r4, r3
 801fc8c:	e6aa      	b.n	801f9e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801fc8e:	2900      	cmp	r1, #0
 801fc90:	f43f af55 	beq.w	801fb3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801fc94:	4453      	add	r3, sl
 801fc96:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801fc9a:	07db      	lsls	r3, r3, #31
 801fc9c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801fca0:	bf54      	ite	pl
 801fca2:	f00c 030f 	andpl.w	r3, ip, #15
 801fca6:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801fcaa:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801fcae:	b2db      	uxtb	r3, r3
 801fcb0:	930c      	str	r3, [sp, #48]	; 0x30
 801fcb2:	e744      	b.n	801fb3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1be>
 801fcb4:	f889 3000 	strb.w	r3, [r9]
 801fcb8:	f889 1001 	strb.w	r1, [r9, #1]
 801fcbc:	f889 c002 	strb.w	ip, [r9, #2]
 801fcc0:	e792      	b.n	801fbe8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801fcc2:	1c42      	adds	r2, r0, #1
 801fcc4:	d190      	bne.n	801fbe8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801fcc6:	9a07      	ldr	r2, [sp, #28]
 801fcc8:	4282      	cmp	r2, r0
 801fcca:	dd8d      	ble.n	801fbe8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801fccc:	1c5a      	adds	r2, r3, #1
 801fcce:	db8b      	blt.n	801fbe8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801fcd0:	9a08      	ldr	r2, [sp, #32]
 801fcd2:	429a      	cmp	r2, r3
 801fcd4:	dd88      	ble.n	801fbe8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801fcd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fcd8:	9105      	str	r1, [sp, #20]
 801fcda:	4649      	mov	r1, r9
 801fcdc:	9002      	str	r0, [sp, #8]
 801fcde:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fce0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801fce4:	9b08      	ldr	r3, [sp, #32]
 801fce6:	463a      	mov	r2, r7
 801fce8:	9301      	str	r3, [sp, #4]
 801fcea:	9b07      	ldr	r3, [sp, #28]
 801fcec:	9300      	str	r3, [sp, #0]
 801fcee:	4653      	mov	r3, sl
 801fcf0:	f7ff fd64 	bl	801f7bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801fcf4:	e778      	b.n	801fbe8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x268>
 801fcf6:	142a      	asrs	r2, r5, #16
 801fcf8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801fcfc:	1433      	asrs	r3, r6, #16
 801fcfe:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801fd02:	fb0a 2303 	mla	r3, sl, r3, r2
 801fd06:	085a      	lsrs	r2, r3, #1
 801fd08:	07d9      	lsls	r1, r3, #31
 801fd0a:	5cba      	ldrb	r2, [r7, r2]
 801fd0c:	bf54      	ite	pl
 801fd0e:	f002 020f 	andpl.w	r2, r2, #15
 801fd12:	1112      	asrmi	r2, r2, #4
 801fd14:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fd18:	b2d2      	uxtb	r2, r2
 801fd1a:	2800      	cmp	r0, #0
 801fd1c:	f000 808a 	beq.w	801fe34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4b4>
 801fd20:	f103 0b01 	add.w	fp, r3, #1
 801fd24:	ea4f 015b 	mov.w	r1, fp, lsr #1
 801fd28:	f01b 0f01 	tst.w	fp, #1
 801fd2c:	5c79      	ldrb	r1, [r7, r1]
 801fd2e:	bf0c      	ite	eq
 801fd30:	f001 010f 	andeq.w	r1, r1, #15
 801fd34:	1109      	asrne	r1, r1, #4
 801fd36:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801fd3a:	b2c9      	uxtb	r1, r1
 801fd3c:	9111      	str	r1, [sp, #68]	; 0x44
 801fd3e:	f1bc 0f00 	cmp.w	ip, #0
 801fd42:	d019      	beq.n	801fd78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 801fd44:	4453      	add	r3, sl
 801fd46:	0859      	lsrs	r1, r3, #1
 801fd48:	f013 0f01 	tst.w	r3, #1
 801fd4c:	f103 0301 	add.w	r3, r3, #1
 801fd50:	5c79      	ldrb	r1, [r7, r1]
 801fd52:	bf0c      	ite	eq
 801fd54:	f001 010f 	andeq.w	r1, r1, #15
 801fd58:	1109      	asrne	r1, r1, #4
 801fd5a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801fd5e:	b2c9      	uxtb	r1, r1
 801fd60:	910d      	str	r1, [sp, #52]	; 0x34
 801fd62:	0859      	lsrs	r1, r3, #1
 801fd64:	07db      	lsls	r3, r3, #31
 801fd66:	5c79      	ldrb	r1, [r7, r1]
 801fd68:	bf54      	ite	pl
 801fd6a:	f001 010f 	andpl.w	r1, r1, #15
 801fd6e:	1109      	asrmi	r1, r1, #4
 801fd70:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801fd74:	b2c9      	uxtb	r1, r1
 801fd76:	9112      	str	r1, [sp, #72]	; 0x48
 801fd78:	b280      	uxth	r0, r0
 801fd7a:	fa1f fc8c 	uxth.w	ip, ip
 801fd7e:	fb00 f30c 	mul.w	r3, r0, ip
 801fd82:	0100      	lsls	r0, r0, #4
 801fd84:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 801fd88:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801fd8c:	1ac0      	subs	r0, r0, r3
 801fd8e:	fa1f fc8c 	uxth.w	ip, ip
 801fd92:	b280      	uxth	r0, r0
 801fd94:	eba1 010c 	sub.w	r1, r1, ip
 801fd98:	fa1f fb81 	uxth.w	fp, r1
 801fd9c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801fd9e:	4348      	muls	r0, r1
 801fda0:	990d      	ldr	r1, [sp, #52]	; 0x34
 801fda2:	fb02 020b 	mla	r2, r2, fp, r0
 801fda6:	fb0c 2c01 	mla	ip, ip, r1, r2
 801fdaa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fdac:	fb03 c302 	mla	r3, r3, r2, ip
 801fdb0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fdb4:	b3ab      	cbz	r3, 801fe22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 801fdb6:	4a2d      	ldr	r2, [pc, #180]	; (801fe6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ec>)
 801fdb8:	2bff      	cmp	r3, #255	; 0xff
 801fdba:	6811      	ldr	r1, [r2, #0]
 801fdbc:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 801fdc0:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 801fdc4:	b2c9      	uxtb	r1, r1
 801fdc6:	d045      	beq.n	801fe54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801fdc8:	b298      	uxth	r0, r3
 801fdca:	43db      	mvns	r3, r3
 801fdcc:	f81e 2c03 	ldrb.w	r2, [lr, #-3]
 801fdd0:	fb11 f100 	smulbb	r1, r1, r0
 801fdd4:	b2db      	uxtb	r3, r3
 801fdd6:	fb1c fc00 	smulbb	ip, ip, r0
 801fdda:	fb02 1103 	mla	r1, r2, r3, r1
 801fdde:	fb1b f000 	smulbb	r0, fp, r0
 801fde2:	b289      	uxth	r1, r1
 801fde4:	1c4a      	adds	r2, r1, #1
 801fde6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801fdea:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801fdee:	fb02 cc03 	mla	ip, r2, r3, ip
 801fdf2:	1209      	asrs	r1, r1, #8
 801fdf4:	fa1f fc8c 	uxth.w	ip, ip
 801fdf8:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801fdfc:	f10c 0201 	add.w	r2, ip, #1
 801fe00:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801fe04:	f81e 2c01 	ldrb.w	r2, [lr, #-1]
 801fe08:	fb02 0303 	mla	r3, r2, r3, r0
 801fe0c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fe10:	b29b      	uxth	r3, r3
 801fe12:	f80e cc02 	strb.w	ip, [lr, #-2]
 801fe16:	1c5a      	adds	r2, r3, #1
 801fe18:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fe1c:	121b      	asrs	r3, r3, #8
 801fe1e:	f80e 3c01 	strb.w	r3, [lr, #-1]
 801fe22:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fe24:	f10e 0e03 	add.w	lr, lr, #3
 801fe28:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801fe2c:	441d      	add	r5, r3
 801fe2e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fe30:	441e      	add	r6, r3
 801fe32:	e607      	b.n	801fa44 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 801fe34:	f1bc 0f00 	cmp.w	ip, #0
 801fe38:	d09e      	beq.n	801fd78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 801fe3a:	4453      	add	r3, sl
 801fe3c:	0859      	lsrs	r1, r3, #1
 801fe3e:	07db      	lsls	r3, r3, #31
 801fe40:	5c79      	ldrb	r1, [r7, r1]
 801fe42:	bf54      	ite	pl
 801fe44:	f001 010f 	andpl.w	r1, r1, #15
 801fe48:	1109      	asrmi	r1, r1, #4
 801fe4a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801fe4e:	b2c9      	uxtb	r1, r1
 801fe50:	910d      	str	r1, [sp, #52]	; 0x34
 801fe52:	e791      	b.n	801fd78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 801fe54:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801fe58:	f80e cc02 	strb.w	ip, [lr, #-2]
 801fe5c:	f80e bc01 	strb.w	fp, [lr, #-1]
 801fe60:	e7df      	b.n	801fe22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 801fe62:	b015      	add	sp, #84	; 0x54
 801fe64:	ecbd 8b08 	vpop	{d8-d11}
 801fe68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe6c:	2000b288 	.word	0x2000b288

0801fe70 <CRC_Lock>:
 801fe70:	4a1d      	ldr	r2, [pc, #116]	; (801fee8 <CRC_Lock+0x78>)
 801fe72:	b530      	push	{r4, r5, lr}
 801fe74:	6813      	ldr	r3, [r2, #0]
 801fe76:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801fe7a:	f24c 2540 	movw	r5, #49728	; 0xc240
 801fe7e:	f023 0301 	bic.w	r3, r3, #1
 801fe82:	6013      	str	r3, [r2, #0]
 801fe84:	4b19      	ldr	r3, [pc, #100]	; (801feec <CRC_Lock+0x7c>)
 801fe86:	681a      	ldr	r2, [r3, #0]
 801fe88:	4022      	ands	r2, r4
 801fe8a:	42aa      	cmp	r2, r5
 801fe8c:	d005      	beq.n	801fe9a <CRC_Lock+0x2a>
 801fe8e:	681b      	ldr	r3, [r3, #0]
 801fe90:	f24c 2270 	movw	r2, #49776	; 0xc270
 801fe94:	4023      	ands	r3, r4
 801fe96:	4293      	cmp	r3, r2
 801fe98:	d11d      	bne.n	801fed6 <CRC_Lock+0x66>
 801fe9a:	4b15      	ldr	r3, [pc, #84]	; (801fef0 <CRC_Lock+0x80>)
 801fe9c:	681b      	ldr	r3, [r3, #0]
 801fe9e:	b9d3      	cbnz	r3, 801fed6 <CRC_Lock+0x66>
 801fea0:	4a14      	ldr	r2, [pc, #80]	; (801fef4 <CRC_Lock+0x84>)
 801fea2:	6813      	ldr	r3, [r2, #0]
 801fea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801fea8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801feac:	d006      	beq.n	801febc <CRC_Lock+0x4c>
 801feae:	6813      	ldr	r3, [r2, #0]
 801feb0:	f240 4283 	movw	r2, #1155	; 0x483
 801feb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801feb8:	4293      	cmp	r3, r2
 801feba:	d10c      	bne.n	801fed6 <CRC_Lock+0x66>
 801febc:	4b0e      	ldr	r3, [pc, #56]	; (801fef8 <CRC_Lock+0x88>)
 801febe:	2201      	movs	r2, #1
 801fec0:	601a      	str	r2, [r3, #0]
 801fec2:	681a      	ldr	r2, [r3, #0]
 801fec4:	2a00      	cmp	r2, #0
 801fec6:	d1fc      	bne.n	801fec2 <CRC_Lock+0x52>
 801fec8:	4b0c      	ldr	r3, [pc, #48]	; (801fefc <CRC_Lock+0x8c>)
 801feca:	6018      	str	r0, [r3, #0]
 801fecc:	6818      	ldr	r0, [r3, #0]
 801fece:	1a43      	subs	r3, r0, r1
 801fed0:	4258      	negs	r0, r3
 801fed2:	4158      	adcs	r0, r3
 801fed4:	bd30      	pop	{r4, r5, pc}
 801fed6:	4b0a      	ldr	r3, [pc, #40]	; (801ff00 <CRC_Lock+0x90>)
 801fed8:	2201      	movs	r2, #1
 801feda:	601a      	str	r2, [r3, #0]
 801fedc:	681a      	ldr	r2, [r3, #0]
 801fede:	2a00      	cmp	r2, #0
 801fee0:	d1fc      	bne.n	801fedc <CRC_Lock+0x6c>
 801fee2:	4b08      	ldr	r3, [pc, #32]	; (801ff04 <CRC_Lock+0x94>)
 801fee4:	e7f1      	b.n	801feca <CRC_Lock+0x5a>
 801fee6:	bf00      	nop
 801fee8:	e0002000 	.word	0xe0002000
 801feec:	e000ed00 	.word	0xe000ed00
 801fef0:	e0042000 	.word	0xe0042000
 801fef4:	5c001000 	.word	0x5c001000
 801fef8:	58024c08 	.word	0x58024c08
 801fefc:	58024c00 	.word	0x58024c00
 801ff00:	40023008 	.word	0x40023008
 801ff04:	40023000 	.word	0x40023000

0801ff08 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801ff08:	6101      	str	r1, [r0, #16]
 801ff0a:	4770      	bx	lr

0801ff0c <_ZN8touchgfx8Gestures4tickEv>:
 801ff0c:	7b83      	ldrb	r3, [r0, #14]
 801ff0e:	b14b      	cbz	r3, 801ff24 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801ff10:	8903      	ldrh	r3, [r0, #8]
 801ff12:	3301      	adds	r3, #1
 801ff14:	b29b      	uxth	r3, r3
 801ff16:	2b07      	cmp	r3, #7
 801ff18:	8103      	strh	r3, [r0, #8]
 801ff1a:	bf81      	itttt	hi
 801ff1c:	2300      	movhi	r3, #0
 801ff1e:	8143      	strhhi	r3, [r0, #10]
 801ff20:	8183      	strhhi	r3, [r0, #12]
 801ff22:	7383      	strbhi	r3, [r0, #14]
 801ff24:	4770      	bx	lr
	...

0801ff28 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801ff28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801ff2c:	4604      	mov	r4, r0
 801ff2e:	4698      	mov	r8, r3
 801ff30:	8880      	ldrh	r0, [r0, #4]
 801ff32:	4617      	mov	r7, r2
 801ff34:	4b1d      	ldr	r3, [pc, #116]	; (801ffac <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801ff36:	460e      	mov	r6, r1
 801ff38:	f8ad 0006 	strh.w	r0, [sp, #6]
 801ff3c:	eba8 0000 	sub.w	r0, r8, r0
 801ff40:	9300      	str	r3, [sp, #0]
 801ff42:	2300      	movs	r3, #0
 801ff44:	b280      	uxth	r0, r0
 801ff46:	8aa2      	ldrh	r2, [r4, #20]
 801ff48:	f88d 3004 	strb.w	r3, [sp, #4]
 801ff4c:	b203      	sxth	r3, r0
 801ff4e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801ff52:	88e1      	ldrh	r1, [r4, #6]
 801ff54:	2b00      	cmp	r3, #0
 801ff56:	f8ad 800a 	strh.w	r8, [sp, #10]
 801ff5a:	f8ad 1008 	strh.w	r1, [sp, #8]
 801ff5e:	bfb8      	it	lt
 801ff60:	4240      	neglt	r0, r0
 801ff62:	f8ad 500c 	strh.w	r5, [sp, #12]
 801ff66:	bfb8      	it	lt
 801ff68:	b203      	sxthlt	r3, r0
 801ff6a:	4293      	cmp	r3, r2
 801ff6c:	dc08      	bgt.n	801ff80 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 801ff6e:	1a69      	subs	r1, r5, r1
 801ff70:	b289      	uxth	r1, r1
 801ff72:	b20b      	sxth	r3, r1
 801ff74:	2b00      	cmp	r3, #0
 801ff76:	bfbc      	itt	lt
 801ff78:	4249      	neglt	r1, r1
 801ff7a:	b20b      	sxthlt	r3, r1
 801ff7c:	429a      	cmp	r2, r3
 801ff7e:	da13      	bge.n	801ffa8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 801ff80:	6920      	ldr	r0, [r4, #16]
 801ff82:	4669      	mov	r1, sp
 801ff84:	eba8 0606 	sub.w	r6, r8, r6
 801ff88:	1bef      	subs	r7, r5, r7
 801ff8a:	6803      	ldr	r3, [r0, #0]
 801ff8c:	685b      	ldr	r3, [r3, #4]
 801ff8e:	4798      	blx	r3
 801ff90:	2300      	movs	r3, #0
 801ff92:	2001      	movs	r0, #1
 801ff94:	8166      	strh	r6, [r4, #10]
 801ff96:	8123      	strh	r3, [r4, #8]
 801ff98:	81a7      	strh	r7, [r4, #12]
 801ff9a:	f8a4 8004 	strh.w	r8, [r4, #4]
 801ff9e:	80e5      	strh	r5, [r4, #6]
 801ffa0:	73a0      	strb	r0, [r4, #14]
 801ffa2:	b004      	add	sp, #16
 801ffa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ffa8:	2000      	movs	r0, #0
 801ffaa:	e7fa      	b.n	801ffa2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 801ffac:	08026c5c 	.word	0x08026c5c

0801ffb0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801ffb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ffb2:	461e      	mov	r6, r3
 801ffb4:	1e4b      	subs	r3, r1, #1
 801ffb6:	b085      	sub	sp, #20
 801ffb8:	4604      	mov	r4, r0
 801ffba:	2b01      	cmp	r3, #1
 801ffbc:	460d      	mov	r5, r1
 801ffbe:	4617      	mov	r7, r2
 801ffc0:	d84b      	bhi.n	802005a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801ffc2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ffc6:	1cd3      	adds	r3, r2, #3
 801ffc8:	b29b      	uxth	r3, r3
 801ffca:	2b06      	cmp	r3, #6
 801ffcc:	d916      	bls.n	801fffc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801ffce:	f8df c098 	ldr.w	ip, [pc, #152]	; 8020068 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 801ffd2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ffd6:	f8cd c004 	str.w	ip, [sp, #4]
 801ffda:	f04f 0c00 	mov.w	ip, #0
 801ffde:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ffe2:	6900      	ldr	r0, [r0, #16]
 801ffe4:	f8ad 100c 	strh.w	r1, [sp, #12]
 801ffe8:	a901      	add	r1, sp, #4
 801ffea:	f88d c008 	strb.w	ip, [sp, #8]
 801ffee:	f8ad 200a 	strh.w	r2, [sp, #10]
 801fff2:	f8ad 300e 	strh.w	r3, [sp, #14]
 801fff6:	6803      	ldr	r3, [r0, #0]
 801fff8:	689b      	ldr	r3, [r3, #8]
 801fffa:	4798      	blx	r3
 801fffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020000:	1cd3      	adds	r3, r2, #3
 8020002:	b29b      	uxth	r3, r3
 8020004:	2b06      	cmp	r3, #6
 8020006:	d916      	bls.n	8020036 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8020008:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8020068 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 802000c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020010:	f8cd c004 	str.w	ip, [sp, #4]
 8020014:	f04f 0c01 	mov.w	ip, #1
 8020018:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802001c:	6920      	ldr	r0, [r4, #16]
 802001e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8020022:	a901      	add	r1, sp, #4
 8020024:	f88d c008 	strb.w	ip, [sp, #8]
 8020028:	f8ad 200a 	strh.w	r2, [sp, #10]
 802002c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020030:	6803      	ldr	r3, [r0, #0]
 8020032:	689b      	ldr	r3, [r3, #8]
 8020034:	4798      	blx	r3
 8020036:	4b0b      	ldr	r3, [pc, #44]	; (8020064 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 8020038:	a901      	add	r1, sp, #4
 802003a:	6920      	ldr	r0, [r4, #16]
 802003c:	9301      	str	r3, [sp, #4]
 802003e:	2300      	movs	r3, #0
 8020040:	f88d 5008 	strb.w	r5, [sp, #8]
 8020044:	f8ad 700a 	strh.w	r7, [sp, #10]
 8020048:	f8ad 600c 	strh.w	r6, [sp, #12]
 802004c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020050:	6803      	ldr	r3, [r0, #0]
 8020052:	681b      	ldr	r3, [r3, #0]
 8020054:	4798      	blx	r3
 8020056:	b005      	add	sp, #20
 8020058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802005a:	2900      	cmp	r1, #0
 802005c:	d1eb      	bne.n	8020036 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802005e:	80a2      	strh	r2, [r4, #4]
 8020060:	80c6      	strh	r6, [r0, #6]
 8020062:	e7e8      	b.n	8020036 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8020064:	08026c48 	.word	0x08026c48
 8020068:	08026c70 	.word	0x08026c70

0802006c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>:
 802006c:	10c9      	asrs	r1, r1, #3
 802006e:	2900      	cmp	r1, #0
 8020070:	bfb8      	it	lt
 8020072:	4249      	neglt	r1, r1
 8020074:	2801      	cmp	r0, #1
 8020076:	d108      	bne.n	802008a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8020078:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802007c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8020080:	4601      	mov	r1, r0
 8020082:	dd02      	ble.n	802008a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16+0x1e>
 8020084:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8020088:	4770      	bx	lr
 802008a:	29ff      	cmp	r1, #255	; 0xff
 802008c:	bfa8      	it	ge
 802008e:	21ff      	movge	r1, #255	; 0xff
 8020090:	4608      	mov	r0, r1
 8020092:	4770      	bx	lr

08020094 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 8020094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020098:	688c      	ldr	r4, [r1, #8]
 802009a:	b087      	sub	sp, #28
 802009c:	4607      	mov	r7, r0
 802009e:	2c00      	cmp	r4, #0
 80200a0:	db2b      	blt.n	80200fa <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 80200a2:	6803      	ldr	r3, [r0, #0]
 80200a4:	68da      	ldr	r2, [r3, #12]
 80200a6:	42a2      	cmp	r2, r4
 80200a8:	dd27      	ble.n	80200fa <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 80200aa:	681a      	ldr	r2, [r3, #0]
 80200ac:	691e      	ldr	r6, [r3, #16]
 80200ae:	68cd      	ldr	r5, [r1, #12]
 80200b0:	fb06 2604 	mla	r6, r6, r4, r2
 80200b4:	f8d1 901c 	ldr.w	r9, [r1, #28]
 80200b8:	698a      	ldr	r2, [r1, #24]
 80200ba:	f893 a004 	ldrb.w	sl, [r3, #4]
 80200be:	f8d1 8020 	ldr.w	r8, [r1, #32]
 80200c2:	9205      	str	r2, [sp, #20]
 80200c4:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 80200c8:	9b05      	ldr	r3, [sp, #20]
 80200ca:	6839      	ldr	r1, [r7, #0]
 80200cc:	eb03 0c02 	add.w	ip, r3, r2
 80200d0:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 80200d4:	6889      	ldr	r1, [r1, #8]
 80200d6:	1898      	adds	r0, r3, r2
 80200d8:	4288      	cmp	r0, r1
 80200da:	db02      	blt.n	80200e2 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 80200dc:	1a8b      	subs	r3, r1, r2
 80200de:	2b00      	cmp	r3, #0
 80200e0:	dd09      	ble.n	80200f6 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 80200e2:	6878      	ldr	r0, [r7, #4]
 80200e4:	6801      	ldr	r1, [r0, #0]
 80200e6:	9400      	str	r4, [sp, #0]
 80200e8:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 80200ec:	4653      	mov	r3, sl
 80200ee:	f8d1 b008 	ldr.w	fp, [r1, #8]
 80200f2:	4631      	mov	r1, r6
 80200f4:	47d8      	blx	fp
 80200f6:	3d01      	subs	r5, #1
 80200f8:	d1e4      	bne.n	80200c4 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 80200fa:	b007      	add	sp, #28
 80200fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020100 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8020100:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8020104:	b90b      	cbnz	r3, 802010a <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 8020106:	f001 b974 	b.w	80213f2 <_ZN8touchgfx7Outline6lineToEii>
 802010a:	4770      	bx	lr

0802010c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 802010c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020110:	4604      	mov	r4, r0
 8020112:	2600      	movs	r6, #0
 8020114:	4b8e      	ldr	r3, [pc, #568]	; (8020350 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x244>)
 8020116:	f100 0518 	add.w	r5, r0, #24
 802011a:	f104 072c 	add.w	r7, r4, #44	; 0x2c
 802011e:	b086      	sub	sp, #24
 8020120:	4690      	mov	r8, r2
 8020122:	e9c0 3100 	strd	r3, r1, [r0]
 8020126:	e9c0 6602 	strd	r6, r6, [r0, #8]
 802012a:	e9c0 6604 	strd	r6, r6, [r0, #16]
 802012e:	4628      	mov	r0, r5
 8020130:	f001 fb75 	bl	802181e <_ZN8touchgfx15RenderingBufferC1Ev>
 8020134:	4638      	mov	r0, r7
 8020136:	f000 fb45 	bl	80207c4 <_ZN8touchgfx7OutlineC1Ev>
 802013a:	f104 0074 	add.w	r0, r4, #116	; 0x74
 802013e:	f001 fb23 	bl	8021788 <_ZN8touchgfx8ScanlineC1Ev>
 8020142:	2301      	movs	r3, #1
 8020144:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 8020148:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
 802014c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8020150:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
 8020154:	f8a4 60ac 	strh.w	r6, [r4, #172]	; 0xac
 8020158:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 802015c:	e9c4 662c 	strd	r6, r6, [r4, #176]	; 0xb0
 8020160:	f7f4 fc24 	bl	80149ac <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 8020164:	b928      	cbnz	r0, 8020172 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x66>
 8020166:	4b7b      	ldr	r3, [pc, #492]	; (8020354 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 8020168:	2118      	movs	r1, #24
 802016a:	4a7b      	ldr	r2, [pc, #492]	; (8020358 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 802016c:	487b      	ldr	r0, [pc, #492]	; (802035c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 802016e:	f002 f8e7 	bl	8022340 <__assert_func>
 8020172:	f9b8 2000 	ldrsh.w	r2, [r8]
 8020176:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802017a:	f8d4 c004 	ldr.w	ip, [r4, #4]
 802017e:	4410      	add	r0, r2
 8020180:	9602      	str	r6, [sp, #8]
 8020182:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8020186:	b280      	uxth	r0, r0
 8020188:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 802018c:	fa0f fa80 	sxth.w	sl, r0
 8020190:	f1ba 0f00 	cmp.w	sl, #0
 8020194:	dd70      	ble.n	8020278 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 8020196:	4591      	cmp	r9, r2
 8020198:	dd6e      	ble.n	8020278 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 802019a:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 802019e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80201a2:	440b      	add	r3, r1
 80201a4:	b29b      	uxth	r3, r3
 80201a6:	b21e      	sxth	r6, r3
 80201a8:	2e00      	cmp	r6, #0
 80201aa:	dd65      	ble.n	8020278 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80201ac:	458e      	cmp	lr, r1
 80201ae:	dd63      	ble.n	8020278 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x16c>
 80201b0:	45d1      	cmp	r9, sl
 80201b2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80201b6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80201ba:	bfb8      	it	lt
 80201bc:	fa1f f089 	uxthlt.w	r0, r9
 80201c0:	45b6      	cmp	lr, r6
 80201c2:	f8ad 2008 	strh.w	r2, [sp, #8]
 80201c6:	bfb8      	it	lt
 80201c8:	fa1f f38e 	uxthlt.w	r3, lr
 80201cc:	1a80      	subs	r0, r0, r2
 80201ce:	f8ad 100a 	strh.w	r1, [sp, #10]
 80201d2:	1a5b      	subs	r3, r3, r1
 80201d4:	f8ad 000c 	strh.w	r0, [sp, #12]
 80201d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80201dc:	f10d 0808 	add.w	r8, sp, #8
 80201e0:	ae04      	add	r6, sp, #16
 80201e2:	e898 0003 	ldmia.w	r8, {r0, r1}
 80201e6:	e886 0003 	stmia.w	r6, {r0, r1}
 80201ea:	f8dc 3000 	ldr.w	r3, [ip]
 80201ee:	4660      	mov	r0, ip
 80201f0:	4631      	mov	r1, r6
 80201f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80201f4:	4798      	blx	r3
 80201f6:	6861      	ldr	r1, [r4, #4]
 80201f8:	4640      	mov	r0, r8
 80201fa:	3104      	adds	r1, #4
 80201fc:	f7f5 fa44 	bl	8015688 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020200:	4630      	mov	r0, r6
 8020202:	f7f5 fa59 	bl	80156b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020206:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 802020a:	f7f4 fb5f 	bl	80148cc <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 802020e:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
 8020212:	4638      	mov	r0, r7
 8020214:	f000 fab2 	bl	802077c <_ZN8touchgfx7Outline5resetEv>
 8020218:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 802021c:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8020220:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
 8020224:	015b      	lsls	r3, r3, #5
 8020226:	f8a4 209c 	strh.w	r2, [r4, #156]	; 0x9c
 802022a:	0152      	lsls	r2, r2, #5
 802022c:	60e3      	str	r3, [r4, #12]
 802022e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8020232:	60a2      	str	r2, [r4, #8]
 8020234:	015b      	lsls	r3, r3, #5
 8020236:	6123      	str	r3, [r4, #16]
 8020238:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 802023c:	015b      	lsls	r3, r3, #5
 802023e:	6163      	str	r3, [r4, #20]
 8020240:	4b47      	ldr	r3, [pc, #284]	; (8020360 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 8020242:	6818      	ldr	r0, [r3, #0]
 8020244:	6803      	ldr	r3, [r0, #0]
 8020246:	6a1b      	ldr	r3, [r3, #32]
 8020248:	4798      	blx	r3
 802024a:	4606      	mov	r6, r0
 802024c:	f7e9 ff60 	bl	800a110 <_ZN8touchgfx3HAL3lcdEv>
 8020250:	6803      	ldr	r3, [r0, #0]
 8020252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020254:	4798      	blx	r3
 8020256:	4607      	mov	r7, r0
 8020258:	f7e9 ff5a 	bl	800a110 <_ZN8touchgfx3HAL3lcdEv>
 802025c:	6803      	ldr	r3, [r0, #0]
 802025e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020260:	4798      	blx	r3
 8020262:	280c      	cmp	r0, #12
 8020264:	d854      	bhi.n	8020310 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x204>
 8020266:	e8df f000 	tbb	[pc, r0]
 802026a:	554b      	.short	0x554b
 802026c:	2b6e0a66 	.word	0x2b6e0a66
 8020270:	5f5f5f3b 	.word	0x5f5f5f3b
 8020274:	5f5f      	.short	0x5f5f
 8020276:	6e          	.byte	0x6e
 8020277:	00          	.byte	0x00
 8020278:	2300      	movs	r3, #0
 802027a:	9303      	str	r3, [sp, #12]
 802027c:	e7ae      	b.n	80201dc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd0>
 802027e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020282:	2108      	movs	r1, #8
 8020284:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020288:	fb92 f1f1 	sdiv	r1, r2, r1
 802028c:	fb07 1303 	mla	r3, r7, r3, r1
 8020290:	441e      	add	r6, r3
 8020292:	4253      	negs	r3, r2
 8020294:	f002 0207 	and.w	r2, r2, #7
 8020298:	f003 0307 	and.w	r3, r3, #7
 802029c:	bf58      	it	pl
 802029e:	425a      	negpl	r2, r3
 80202a0:	b2d2      	uxtb	r2, r2
 80202a2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80202a6:	4628      	mov	r0, r5
 80202a8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80202ac:	66e1      	str	r1, [r4, #108]	; 0x6c
 80202ae:	e9cd 1700 	strd	r1, r7, [sp]
 80202b2:	4631      	mov	r1, r6
 80202b4:	f001 fabb 	bl	802182e <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 80202b8:	4620      	mov	r0, r4
 80202ba:	b006      	add	sp, #24
 80202bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80202c0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80202c4:	2104      	movs	r1, #4
 80202c6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80202ca:	fb92 f1f1 	sdiv	r1, r2, r1
 80202ce:	fb07 1303 	mla	r3, r7, r3, r1
 80202d2:	441e      	add	r6, r3
 80202d4:	4253      	negs	r3, r2
 80202d6:	f002 0203 	and.w	r2, r2, #3
 80202da:	f003 0303 	and.w	r3, r3, #3
 80202de:	e7dd      	b.n	802029c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x190>
 80202e0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80202e4:	2102      	movs	r1, #2
 80202e6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80202ea:	2a00      	cmp	r2, #0
 80202ec:	fb92 f1f1 	sdiv	r1, r2, r1
 80202f0:	f002 0201 	and.w	r2, r2, #1
 80202f4:	fb07 1303 	mla	r3, r7, r3, r1
 80202f8:	bfb8      	it	lt
 80202fa:	4252      	neglt	r2, r2
 80202fc:	441e      	add	r6, r3
 80202fe:	e7cf      	b.n	80202a0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 8020300:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020304:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020308:	437b      	muls	r3, r7
 802030a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802030e:	441e      	add	r6, r3
 8020310:	2200      	movs	r2, #0
 8020312:	e7c6      	b.n	80202a2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x196>
 8020314:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020318:	2103      	movs	r1, #3
 802031a:	fb07 f203 	mul.w	r2, r7, r3
 802031e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8020322:	fb13 2301 	smlabb	r3, r3, r1, r2
 8020326:	e7f2      	b.n	802030e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8020328:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802032c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020330:	fb07 2303 	mla	r3, r7, r3, r2
 8020334:	e7eb      	b.n	802030e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8020336:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802033a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802033e:	437b      	muls	r3, r7
 8020340:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8020344:	e7e3      	b.n	802030e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x202>
 8020346:	4b07      	ldr	r3, [pc, #28]	; (8020364 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 8020348:	2156      	movs	r1, #86	; 0x56
 802034a:	4a03      	ldr	r2, [pc, #12]	; (8020358 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 802034c:	e70e      	b.n	802016c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x60>
 802034e:	bf00      	nop
 8020350:	0802824c 	.word	0x0802824c
 8020354:	08028196 	.word	0x08028196
 8020358:	08028254 	.word	0x08028254
 802035c:	080281f2 	.word	0x080281f2
 8020360:	2000b260 	.word	0x2000b260
 8020364:	08028226 	.word	0x08028226

08020368 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 8020368:	6812      	ldr	r2, [r2, #0]
 802036a:	2a00      	cmp	r2, #0
 802036c:	db0b      	blt.n	8020386 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 802036e:	9800      	ldr	r0, [sp, #0]
 8020370:	6800      	ldr	r0, [r0, #0]
 8020372:	4290      	cmp	r0, r2
 8020374:	bfd4      	ite	le
 8020376:	2002      	movle	r0, #2
 8020378:	2000      	movgt	r0, #0
 802037a:	680a      	ldr	r2, [r1, #0]
 802037c:	2a00      	cmp	r2, #0
 802037e:	da04      	bge.n	802038a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 8020380:	f040 0004 	orr.w	r0, r0, #4
 8020384:	4770      	bx	lr
 8020386:	2001      	movs	r0, #1
 8020388:	e7f7      	b.n	802037a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 802038a:	681b      	ldr	r3, [r3, #0]
 802038c:	4293      	cmp	r3, r2
 802038e:	bfd8      	it	le
 8020390:	f040 0008 	orrle.w	r0, r0, #8
 8020394:	4770      	bx	lr
	...

08020398 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8020398:	4b07      	ldr	r3, [pc, #28]	; (80203b8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802039a:	b510      	push	{r4, lr}
 802039c:	781b      	ldrb	r3, [r3, #0]
 802039e:	2b01      	cmp	r3, #1
 80203a0:	d108      	bne.n	80203b4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80203a2:	6843      	ldr	r3, [r0, #4]
 80203a4:	6814      	ldr	r4, [r2, #0]
 80203a6:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80203aa:	680b      	ldr	r3, [r1, #0]
 80203ac:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80203b0:	6013      	str	r3, [r2, #0]
 80203b2:	600c      	str	r4, [r1, #0]
 80203b4:	bd10      	pop	{r4, pc}
 80203b6:	bf00      	nop
 80203b8:	2000b258 	.word	0x2000b258

080203bc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 80203bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80203be:	b085      	sub	sp, #20
 80203c0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80203c4:	4604      	mov	r4, r0
 80203c6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80203ca:	b33b      	cbz	r3, 802041c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 80203cc:	aa02      	add	r2, sp, #8
 80203ce:	a903      	add	r1, sp, #12
 80203d0:	f7ff ffe2 	bl	8020398 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80203d4:	68a3      	ldr	r3, [r4, #8]
 80203d6:	9e03      	ldr	r6, [sp, #12]
 80203d8:	aa02      	add	r2, sp, #8
 80203da:	9f02      	ldr	r7, [sp, #8]
 80203dc:	a903      	add	r1, sp, #12
 80203de:	1af6      	subs	r6, r6, r3
 80203e0:	68e3      	ldr	r3, [r4, #12]
 80203e2:	4620      	mov	r0, r4
 80203e4:	1aff      	subs	r7, r7, r3
 80203e6:	f104 0314 	add.w	r3, r4, #20
 80203ea:	9603      	str	r6, [sp, #12]
 80203ec:	9300      	str	r3, [sp, #0]
 80203ee:	f104 0310 	add.w	r3, r4, #16
 80203f2:	9702      	str	r7, [sp, #8]
 80203f4:	f7ff ffb8 	bl	8020368 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80203f8:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
 80203fc:	4605      	mov	r5, r0
 80203fe:	b97b      	cbnz	r3, 8020420 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 8020400:	463a      	mov	r2, r7
 8020402:	4631      	mov	r1, r6
 8020404:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8020408:	f7ff fe7a 	bl	8020100 <_ZN8touchgfx10Rasterizer6lineToEii>
 802040c:	9b03      	ldr	r3, [sp, #12]
 802040e:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 8020412:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8020416:	9b02      	ldr	r3, [sp, #8]
 8020418:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 802041c:	b005      	add	sp, #20
 802041e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020420:	b110      	cbz	r0, 8020428 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 8020422:	ea13 0200 	ands.w	r2, r3, r0
 8020426:	d11c      	bne.n	8020462 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8020428:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
 802042c:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 8020430:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
 8020434:	b188      	cbz	r0, 802045a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8020436:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 802043a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 802043e:	b913      	cbnz	r3, 8020446 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 8020440:	4630      	mov	r0, r6
 8020442:	f001 f806 	bl	8021452 <_ZN8touchgfx7Outline6moveToEii>
 8020446:	2300      	movs	r3, #0
 8020448:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 802044c:	2301      	movs	r3, #1
 802044e:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8020452:	4630      	mov	r0, r6
 8020454:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8020458:	e7d6      	b.n	8020408 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 802045a:	4630      	mov	r0, r6
 802045c:	f7ff fe50 	bl	8020100 <_ZN8touchgfx10Rasterizer6lineToEii>
 8020460:	e7f7      	b.n	8020452 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 8020462:	4615      	mov	r5, r2
 8020464:	e7d2      	b.n	802040c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

08020466 <_ZN8touchgfx6Canvas5closeEv>:
 8020466:	b538      	push	{r3, r4, r5, lr}
 8020468:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 802046c:	4604      	mov	r4, r0
 802046e:	b993      	cbnz	r3, 8020496 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8020470:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8020474:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 8020478:	4213      	tst	r3, r2
 802047a:	d10c      	bne.n	8020496 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802047c:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 8020480:	b123      	cbz	r3, 802048c <_ZN8touchgfx6Canvas5closeEv+0x26>
 8020482:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
 8020486:	4628      	mov	r0, r5
 8020488:	f7ff fe3a 	bl	8020100 <_ZN8touchgfx10Rasterizer6lineToEii>
 802048c:	4628      	mov	r0, r5
 802048e:	e9d4 122c 	ldrd	r1, r2, [r4, #176]	; 0xb0
 8020492:	f7ff fe35 	bl	8020100 <_ZN8touchgfx10Rasterizer6lineToEii>
 8020496:	2300      	movs	r3, #0
 8020498:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 802049c:	bd38      	pop	{r3, r4, r5, pc}

0802049e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802049e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80204a0:	b085      	sub	sp, #20
 80204a2:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80204a6:	4604      	mov	r4, r0
 80204a8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80204ac:	b353      	cbz	r3, 8020504 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 80204ae:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80204b2:	b90b      	cbnz	r3, 80204b8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 80204b4:	f7ff ffd7 	bl	8020466 <_ZN8touchgfx6Canvas5closeEv>
 80204b8:	aa02      	add	r2, sp, #8
 80204ba:	a903      	add	r1, sp, #12
 80204bc:	4620      	mov	r0, r4
 80204be:	f7ff ff6b 	bl	8020398 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80204c2:	68a3      	ldr	r3, [r4, #8]
 80204c4:	9d03      	ldr	r5, [sp, #12]
 80204c6:	aa02      	add	r2, sp, #8
 80204c8:	9e02      	ldr	r6, [sp, #8]
 80204ca:	a903      	add	r1, sp, #12
 80204cc:	1aed      	subs	r5, r5, r3
 80204ce:	68e3      	ldr	r3, [r4, #12]
 80204d0:	4620      	mov	r0, r4
 80204d2:	1af6      	subs	r6, r6, r3
 80204d4:	f104 0314 	add.w	r3, r4, #20
 80204d8:	9503      	str	r5, [sp, #12]
 80204da:	9300      	str	r3, [sp, #0]
 80204dc:	f104 0310 	add.w	r3, r4, #16
 80204e0:	9602      	str	r6, [sp, #8]
 80204e2:	f7ff ff41 	bl	8020368 <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 80204e6:	4607      	mov	r7, r0
 80204e8:	b170      	cbz	r0, 8020508 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 80204ea:	2301      	movs	r3, #1
 80204ec:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 80204f0:	9a03      	ldr	r2, [sp, #12]
 80204f2:	9b02      	ldr	r3, [sp, #8]
 80204f4:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
 80204f8:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
 80204fc:	f884 70ac 	strb.w	r7, [r4, #172]	; 0xac
 8020500:	e9c4 2329 	strd	r2, r3, [r4, #164]	; 0xa4
 8020504:	b005      	add	sp, #20
 8020506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020508:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 802050c:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
 8020510:	b92b      	cbnz	r3, 802051e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 8020512:	4632      	mov	r2, r6
 8020514:	4629      	mov	r1, r5
 8020516:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 802051a:	f000 ff9a 	bl	8021452 <_ZN8touchgfx7Outline6moveToEii>
 802051e:	2300      	movs	r3, #0
 8020520:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 8020524:	2301      	movs	r3, #1
 8020526:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 802052a:	e7e1      	b.n	80204f0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

0802052c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 802052c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020530:	4604      	mov	r4, r0
 8020532:	b087      	sub	sp, #28
 8020534:	9105      	str	r1, [sp, #20]
 8020536:	f001 f8d0 	bl	80216da <_ZN8touchgfx7Outline8getCellsEv>
 802053a:	f8d4 9008 	ldr.w	r9, [r4, #8]
 802053e:	4605      	mov	r5, r0
 8020540:	f1b9 0f00 	cmp.w	r9, #0
 8020544:	d103      	bne.n	802054e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 8020546:	2001      	movs	r0, #1
 8020548:	b007      	add	sp, #28
 802054a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802054e:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8020552:	2e00      	cmp	r6, #0
 8020554:	d139      	bne.n	80205ca <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 8020556:	f104 0848 	add.w	r8, r4, #72	; 0x48
 802055a:	f105 0708 	add.w	r7, r5, #8
 802055e:	4640      	mov	r0, r8
 8020560:	f001 f8fd 	bl	802175e <_ZN8touchgfx8Scanline5resetEv>
 8020564:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8020568:	9303      	str	r3, [sp, #12]
 802056a:	f9b5 b000 	ldrsh.w	fp, [r5]
 802056e:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 8020572:	46da      	mov	sl, fp
 8020574:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8020578:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 802057c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8020580:	9b03      	ldr	r3, [sp, #12]
 8020582:	4416      	add	r6, r2
 8020584:	9504      	str	r5, [sp, #16]
 8020586:	463d      	mov	r5, r7
 8020588:	3b01      	subs	r3, #1
 802058a:	9303      	str	r3, [sp, #12]
 802058c:	3301      	adds	r3, #1
 802058e:	d01e      	beq.n	80205ce <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 8020590:	3708      	adds	r7, #8
 8020592:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 8020596:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 802059a:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 802059e:	4290      	cmp	r0, r2
 80205a0:	d11e      	bne.n	80205e0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 80205a2:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 80205a6:	4411      	add	r1, r2
 80205a8:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 80205ac:	e7e8      	b.n	8020580 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 80205ae:	1c91      	adds	r1, r2, #2
 80205b0:	f04f 0301 	mov.w	r3, #1
 80205b4:	65e1      	str	r1, [r4, #92]	; 0x5c
 80205b6:	8053      	strh	r3, [r2, #2]
 80205b8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80205ba:	1c91      	adds	r1, r2, #2
 80205bc:	65a1      	str	r1, [r4, #88]	; 0x58
 80205be:	f8a2 b002 	strh.w	fp, [r2, #2]
 80205c2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80205c4:	3201      	adds	r2, #1
 80205c6:	6562      	str	r2, [r4, #84]	; 0x54
 80205c8:	e03a      	b.n	8020640 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 80205ca:	2000      	movs	r0, #0
 80205cc:	e7bc      	b.n	8020548 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 80205ce:	b951      	cbnz	r1, 80205e6 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 80205d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80205d2:	2b00      	cmp	r3, #0
 80205d4:	d0b7      	beq.n	8020546 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80205d6:	4641      	mov	r1, r8
 80205d8:	9805      	ldr	r0, [sp, #20]
 80205da:	f7ff fd5b 	bl	8020094 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 80205de:	e7b2      	b.n	8020546 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 80205e0:	2900      	cmp	r1, #0
 80205e2:	d035      	beq.n	8020650 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 80205e4:	9504      	str	r5, [sp, #16]
 80205e6:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 80205ea:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 80205ee:	f7ff fd3d 	bl	802006c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 80205f2:	4605      	mov	r5, r0
 80205f4:	b330      	cbz	r0, 8020644 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 80205f6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80205f8:	b182      	cbz	r2, 802061c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 80205fa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80205fc:	454a      	cmp	r2, r9
 80205fe:	d00d      	beq.n	802061c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 8020600:	4641      	mov	r1, r8
 8020602:	9805      	ldr	r0, [sp, #20]
 8020604:	f7ff fd46 	bl	8020094 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 8020608:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802060c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 802060e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8020612:	65e2      	str	r2, [r4, #92]	; 0x5c
 8020614:	2300      	movs	r3, #0
 8020616:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020618:	6563      	str	r3, [r4, #84]	; 0x54
 802061a:	65a2      	str	r2, [r4, #88]	; 0x58
 802061c:	f1bb 0f00 	cmp.w	fp, #0
 8020620:	db10      	blt.n	8020644 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 8020622:	f7f4 f9d1 	bl	80149c8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 8020626:	4583      	cmp	fp, r0
 8020628:	d20c      	bcs.n	8020644 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 802062a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 802062c:	f802 500b 	strb.w	r5, [r2, fp]
 8020630:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8020632:	3201      	adds	r2, #1
 8020634:	455a      	cmp	r2, fp
 8020636:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8020638:	d1b9      	bne.n	80205ae <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 802063a:	8811      	ldrh	r1, [r2, #0]
 802063c:	3101      	adds	r1, #1
 802063e:	8011      	strh	r1, [r2, #0]
 8020640:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 8020644:	9b03      	ldr	r3, [sp, #12]
 8020646:	3301      	adds	r3, #1
 8020648:	d0c2      	beq.n	80205d0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 802064a:	f10b 0a01 	add.w	sl, fp, #1
 802064e:	9d04      	ldr	r5, [sp, #16]
 8020650:	f9b5 3000 	ldrsh.w	r3, [r5]
 8020654:	4553      	cmp	r3, sl
 8020656:	dd88      	ble.n	802056a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8020658:	01b1      	lsls	r1, r6, #6
 802065a:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 802065e:	f7ff fd05 	bl	802006c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.16>
 8020662:	4683      	mov	fp, r0
 8020664:	2800      	cmp	r0, #0
 8020666:	d080      	beq.n	802056a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 8020668:	6d63      	ldr	r3, [r4, #84]	; 0x54
 802066a:	b183      	cbz	r3, 802068e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 802066c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 802066e:	454b      	cmp	r3, r9
 8020670:	d00d      	beq.n	802068e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 8020672:	4641      	mov	r1, r8
 8020674:	9805      	ldr	r0, [sp, #20]
 8020676:	f7ff fd0d 	bl	8020094 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 802067a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 802067e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8020682:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8020684:	65e3      	str	r3, [r4, #92]	; 0x5c
 8020686:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020688:	65a3      	str	r3, [r4, #88]	; 0x58
 802068a:	2300      	movs	r3, #0
 802068c:	6563      	str	r3, [r4, #84]	; 0x54
 802068e:	f9b5 3000 	ldrsh.w	r3, [r5]
 8020692:	464a      	mov	r2, r9
 8020694:	f8cd b000 	str.w	fp, [sp]
 8020698:	4651      	mov	r1, sl
 802069a:	eba3 030a 	sub.w	r3, r3, sl
 802069e:	4640      	mov	r0, r8
 80206a0:	f001 f884 	bl	80217ac <_ZN8touchgfx8Scanline7addSpanEiijj>
 80206a4:	e761      	b.n	802056a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

080206a6 <_ZN8touchgfx6Canvas6renderEv>:
 80206a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80206a8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80206ac:	4604      	mov	r4, r0
 80206ae:	b913      	cbnz	r3, 80206b6 <_ZN8touchgfx6Canvas6renderEv+0x10>
 80206b0:	2001      	movs	r0, #1
 80206b2:	b003      	add	sp, #12
 80206b4:	bd30      	pop	{r4, r5, pc}
 80206b6:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80206ba:	2b00      	cmp	r3, #0
 80206bc:	d131      	bne.n	8020722 <_ZN8touchgfx6Canvas6renderEv+0x7c>
 80206be:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 80206c2:	2b00      	cmp	r3, #0
 80206c4:	d0f4      	beq.n	80206b0 <_ZN8touchgfx6Canvas6renderEv+0xa>
 80206c6:	6840      	ldr	r0, [r0, #4]
 80206c8:	6803      	ldr	r3, [r0, #0]
 80206ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80206cc:	4798      	blx	r3
 80206ce:	2800      	cmp	r0, #0
 80206d0:	d0ee      	beq.n	80206b0 <_ZN8touchgfx6Canvas6renderEv+0xa>
 80206d2:	4620      	mov	r0, r4
 80206d4:	f7ff fec7 	bl	8020466 <_ZN8touchgfx6Canvas5closeEv>
 80206d8:	6860      	ldr	r0, [r4, #4]
 80206da:	6803      	ldr	r3, [r0, #0]
 80206dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80206de:	4798      	blx	r3
 80206e0:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 80206e4:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 80206e8:	f7f3 fc8b 	bl	8014002 <_ZN8touchgfx15AbstractPainter9setOffsetEtt>
 80206ec:	6860      	ldr	r0, [r4, #4]
 80206ee:	6803      	ldr	r3, [r0, #0]
 80206f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80206f2:	4798      	blx	r3
 80206f4:	4605      	mov	r5, r0
 80206f6:	6860      	ldr	r0, [r4, #4]
 80206f8:	6803      	ldr	r3, [r0, #0]
 80206fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80206fc:	4798      	blx	r3
 80206fe:	4601      	mov	r1, r0
 8020700:	4628      	mov	r0, r5
 8020702:	f7f3 fc81 	bl	8014008 <_ZN8touchgfx15AbstractPainter14setWidgetAlphaEh>
 8020706:	6860      	ldr	r0, [r4, #4]
 8020708:	6803      	ldr	r3, [r0, #0]
 802070a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802070c:	4798      	blx	r3
 802070e:	f104 0318 	add.w	r3, r4, #24
 8020712:	4669      	mov	r1, sp
 8020714:	e9cd 3000 	strd	r3, r0, [sp]
 8020718:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 802071c:	f7ff ff06 	bl	802052c <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 8020720:	e7c7      	b.n	80206b2 <_ZN8touchgfx6Canvas6renderEv+0xc>
 8020722:	2000      	movs	r0, #0
 8020724:	e7c5      	b.n	80206b2 <_ZN8touchgfx6Canvas6renderEv+0xc>
	...

08020728 <_ZN8touchgfx6CanvasD1Ev>:
 8020728:	b538      	push	{r3, r4, r5, lr}
 802072a:	4605      	mov	r5, r0
 802072c:	4b08      	ldr	r3, [pc, #32]	; (8020750 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 802072e:	4604      	mov	r4, r0
 8020730:	f845 3b2c 	str.w	r3, [r5], #44
 8020734:	4b07      	ldr	r3, [pc, #28]	; (8020754 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 8020736:	6818      	ldr	r0, [r3, #0]
 8020738:	6803      	ldr	r3, [r0, #0]
 802073a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802073c:	4798      	blx	r3
 802073e:	4628      	mov	r0, r5
 8020740:	f000 f814 	bl	802076c <_ZN8touchgfx7OutlineD1Ev>
 8020744:	f104 0018 	add.w	r0, r4, #24
 8020748:	f001 f870 	bl	802182c <_ZN8touchgfx15RenderingBufferD1Ev>
 802074c:	4620      	mov	r0, r4
 802074e:	bd38      	pop	{r3, r4, r5, pc}
 8020750:	0802824c 	.word	0x0802824c
 8020754:	2000b260 	.word	0x2000b260

08020758 <_ZN8touchgfx6CanvasD0Ev>:
 8020758:	b510      	push	{r4, lr}
 802075a:	4604      	mov	r4, r0
 802075c:	f7ff ffe4 	bl	8020728 <_ZN8touchgfx6CanvasD1Ev>
 8020760:	21b8      	movs	r1, #184	; 0xb8
 8020762:	4620      	mov	r0, r4
 8020764:	f001 f873 	bl	802184e <_ZdlPvj>
 8020768:	4620      	mov	r0, r4
 802076a:	bd10      	pop	{r4, pc}

0802076c <_ZN8touchgfx7OutlineD1Ev>:
 802076c:	4770      	bx	lr

0802076e <_ZN8touchgfx7OutlineD0Ev>:
 802076e:	b510      	push	{r4, lr}
 8020770:	4604      	mov	r4, r0
 8020772:	2148      	movs	r1, #72	; 0x48
 8020774:	f001 f86b 	bl	802184e <_ZdlPvj>
 8020778:	4620      	mov	r0, r4
 802077a:	bd10      	pop	{r4, pc}

0802077c <_ZN8touchgfx7Outline5resetEv>:
 802077c:	b510      	push	{r4, lr}
 802077e:	4604      	mov	r4, r0
 8020780:	f7f4 f93a 	bl	80149f8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8020784:	60e0      	str	r0, [r4, #12]
 8020786:	f7f4 f93d 	bl	8014a04 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 802078a:	68e3      	ldr	r3, [r4, #12]
 802078c:	2200      	movs	r2, #0
 802078e:	08c0      	lsrs	r0, r0, #3
 8020790:	6123      	str	r3, [r4, #16]
 8020792:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8020796:	6060      	str	r0, [r4, #4]
 8020798:	82a3      	strh	r3, [r4, #20]
 802079a:	82e3      	strh	r3, [r4, #22]
 802079c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802079e:	60a2      	str	r2, [r4, #8]
 80207a0:	f023 0301 	bic.w	r3, r3, #1
 80207a4:	8322      	strh	r2, [r4, #24]
 80207a6:	8362      	strh	r2, [r4, #26]
 80207a8:	f043 0302 	orr.w	r3, r3, #2
 80207ac:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80207b0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80207b2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80207b6:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 80207ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80207be:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80207c2:	bd10      	pop	{r4, pc}

080207c4 <_ZN8touchgfx7OutlineC1Ev>:
 80207c4:	4b0f      	ldr	r3, [pc, #60]	; (8020804 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 80207c6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80207ca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80207ce:	b510      	push	{r4, lr}
 80207d0:	6003      	str	r3, [r0, #0]
 80207d2:	2300      	movs	r3, #0
 80207d4:	4604      	mov	r4, r0
 80207d6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80207da:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80207de:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80207e2:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80207e6:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80207ea:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 80207ee:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80207f2:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 80207f6:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 80207fa:	f7ff ffbf 	bl	802077c <_ZN8touchgfx7Outline5resetEv>
 80207fe:	4620      	mov	r0, r4
 8020800:	bd10      	pop	{r4, pc}
 8020802:	bf00      	nop
 8020804:	080282ac 	.word	0x080282ac

08020808 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8020808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802080c:	b093      	sub	sp, #76	; 0x4c
 802080e:	4604      	mov	r4, r0
 8020810:	1156      	asrs	r6, r2, #5
 8020812:	f002 0e1f 	and.w	lr, r2, #31
 8020816:	981c      	ldr	r0, [sp, #112]	; 0x70
 8020818:	9305      	str	r3, [sp, #20]
 802081a:	1143      	asrs	r3, r0, #5
 802081c:	1145      	asrs	r5, r0, #5
 802081e:	930c      	str	r3, [sp, #48]	; 0x30
 8020820:	f000 031f 	and.w	r3, r0, #31
 8020824:	9303      	str	r3, [sp, #12]
 8020826:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8020828:	42b3      	cmp	r3, r6
 802082a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802082c:	bfc8      	it	gt
 802082e:	6326      	strgt	r6, [r4, #48]	; 0x30
 8020830:	42b3      	cmp	r3, r6
 8020832:	bfdc      	itt	le
 8020834:	1c73      	addle	r3, r6, #1
 8020836:	63a3      	strle	r3, [r4, #56]	; 0x38
 8020838:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802083a:	42ab      	cmp	r3, r5
 802083c:	bfc8      	it	gt
 802083e:	462b      	movgt	r3, r5
 8020840:	ea4f 1560 	mov.w	r5, r0, asr #5
 8020844:	bfc8      	it	gt
 8020846:	6323      	strgt	r3, [r4, #48]	; 0x30
 8020848:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802084a:	42ab      	cmp	r3, r5
 802084c:	bfd8      	it	le
 802084e:	462b      	movle	r3, r5
 8020850:	ea4f 1561 	mov.w	r5, r1, asr #5
 8020854:	bfdc      	itt	le
 8020856:	3301      	addle	r3, #1
 8020858:	63a3      	strle	r3, [r4, #56]	; 0x38
 802085a:	9b05      	ldr	r3, [sp, #20]
 802085c:	eba3 0a01 	sub.w	sl, r3, r1
 8020860:	1143      	asrs	r3, r0, #5
 8020862:	429e      	cmp	r6, r3
 8020864:	f040 8119 	bne.w	8020a9a <_ZN8touchgfx7Outline10renderLineEiiii+0x292>
 8020868:	9b05      	ldr	r3, [sp, #20]
 802086a:	ea4f 1c63 	mov.w	ip, r3, asr #5
 802086e:	9b03      	ldr	r3, [sp, #12]
 8020870:	459e      	cmp	lr, r3
 8020872:	d12c      	bne.n	80208ce <_ZN8touchgfx7Outline10renderLineEiiii+0xc6>
 8020874:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8020878:	eb0c 4106 	add.w	r1, ip, r6, lsl #16
 802087c:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8020880:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8020884:	4291      	cmp	r1, r2
 8020886:	d037      	beq.n	80208f8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8020888:	8b61      	ldrh	r1, [r4, #26]
 802088a:	8b22      	ldrh	r2, [r4, #24]
 802088c:	430a      	orrs	r2, r1
 802088e:	d00b      	beq.n	80208a8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8020890:	2b00      	cmp	r3, #0
 8020892:	db09      	blt.n	80208a8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 8020894:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8020896:	429a      	cmp	r2, r3
 8020898:	dd06      	ble.n	80208a8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 802089a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 802089e:	429a      	cmp	r2, r3
 80208a0:	d308      	bcc.n	80208b4 <_ZN8touchgfx7Outline10renderLineEiiii+0xac>
 80208a2:	2301      	movs	r3, #1
 80208a4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80208a8:	f8a4 c014 	strh.w	ip, [r4, #20]
 80208ac:	82e6      	strh	r6, [r4, #22]
 80208ae:	2300      	movs	r3, #0
 80208b0:	8323      	strh	r3, [r4, #24]
 80208b2:	e0c6      	b.n	8020a42 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 80208b4:	f104 0314 	add.w	r3, r4, #20
 80208b8:	6922      	ldr	r2, [r4, #16]
 80208ba:	cb03      	ldmia	r3!, {r0, r1}
 80208bc:	6010      	str	r0, [r2, #0]
 80208be:	6051      	str	r1, [r2, #4]
 80208c0:	6923      	ldr	r3, [r4, #16]
 80208c2:	3308      	adds	r3, #8
 80208c4:	6123      	str	r3, [r4, #16]
 80208c6:	68a3      	ldr	r3, [r4, #8]
 80208c8:	3301      	adds	r3, #1
 80208ca:	60a3      	str	r3, [r4, #8]
 80208cc:	e7ec      	b.n	80208a8 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0>
 80208ce:	9b05      	ldr	r3, [sp, #20]
 80208d0:	45ac      	cmp	ip, r5
 80208d2:	f001 011f 	and.w	r1, r1, #31
 80208d6:	8b20      	ldrh	r0, [r4, #24]
 80208d8:	f003 031f 	and.w	r3, r3, #31
 80208dc:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80208e0:	9304      	str	r3, [sp, #16]
 80208e2:	9b03      	ldr	r3, [sp, #12]
 80208e4:	eba3 020e 	sub.w	r2, r3, lr
 80208e8:	d109      	bne.n	80208fe <_ZN8touchgfx7Outline10renderLineEiiii+0xf6>
 80208ea:	9b04      	ldr	r3, [sp, #16]
 80208ec:	4410      	add	r0, r2
 80208ee:	4419      	add	r1, r3
 80208f0:	8320      	strh	r0, [r4, #24]
 80208f2:	fb02 8201 	mla	r2, r2, r1, r8
 80208f6:	8362      	strh	r2, [r4, #26]
 80208f8:	b013      	add	sp, #76	; 0x4c
 80208fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80208fe:	f1ba 0f00 	cmp.w	sl, #0
 8020902:	f2c0 80a0 	blt.w	8020a46 <_ZN8touchgfx7Outline10renderLineEiiii+0x23e>
 8020906:	f1c1 0320 	rsb	r3, r1, #32
 802090a:	f04f 0b20 	mov.w	fp, #32
 802090e:	435a      	muls	r2, r3
 8020910:	2301      	movs	r3, #1
 8020912:	9302      	str	r3, [sp, #8]
 8020914:	4459      	add	r1, fp
 8020916:	fb92 f7fa 	sdiv	r7, r2, sl
 802091a:	fb0a 2217 	mls	r2, sl, r7, r2
 802091e:	2a00      	cmp	r2, #0
 8020920:	bfbc      	itt	lt
 8020922:	f107 37ff 	addlt.w	r7, r7, #4294967295	; 0xffffffff
 8020926:	4452      	addlt	r2, sl
 8020928:	fb07 8101 	mla	r1, r7, r1, r8
 802092c:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8020930:	4438      	add	r0, r7
 8020932:	b20b      	sxth	r3, r1
 8020934:	9902      	ldr	r1, [sp, #8]
 8020936:	b200      	sxth	r0, r0
 8020938:	9301      	str	r3, [sp, #4]
 802093a:	8363      	strh	r3, [r4, #26]
 802093c:	186b      	adds	r3, r5, r1
 802093e:	0435      	lsls	r5, r6, #16
 8020940:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8020944:	8320      	strh	r0, [r4, #24]
 8020946:	eb03 0905 	add.w	r9, r3, r5
 802094a:	eb08 4801 	add.w	r8, r8, r1, lsl #16
 802094e:	9300      	str	r3, [sp, #0]
 8020950:	45c1      	cmp	r9, r8
 8020952:	9505      	str	r5, [sp, #20]
 8020954:	d014      	beq.n	8020980 <_ZN8touchgfx7Outline10renderLineEiiii+0x178>
 8020956:	9b01      	ldr	r3, [sp, #4]
 8020958:	4303      	orrs	r3, r0
 802095a:	d00b      	beq.n	8020974 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 802095c:	2900      	cmp	r1, #0
 802095e:	db09      	blt.n	8020974 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8020960:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020962:	428b      	cmp	r3, r1
 8020964:	dd06      	ble.n	8020974 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8020966:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 802096a:	4299      	cmp	r1, r3
 802096c:	d374      	bcc.n	8020a58 <_ZN8touchgfx7Outline10renderLineEiiii+0x250>
 802096e:	2301      	movs	r3, #1
 8020970:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8020974:	9b00      	ldr	r3, [sp, #0]
 8020976:	82e6      	strh	r6, [r4, #22]
 8020978:	82a3      	strh	r3, [r4, #20]
 802097a:	2300      	movs	r3, #0
 802097c:	8323      	strh	r3, [r4, #24]
 802097e:	8363      	strh	r3, [r4, #26]
 8020980:	9900      	ldr	r1, [sp, #0]
 8020982:	eb0e 0307 	add.w	r3, lr, r7
 8020986:	458c      	cmp	ip, r1
 8020988:	d04e      	beq.n	8020a28 <_ZN8touchgfx7Outline10renderLineEiiii+0x220>
 802098a:	9903      	ldr	r1, [sp, #12]
 802098c:	eba2 020a 	sub.w	r2, r2, sl
 8020990:	1ac9      	subs	r1, r1, r3
 8020992:	9201      	str	r2, [sp, #4]
 8020994:	440f      	add	r7, r1
 8020996:	017f      	lsls	r7, r7, #5
 8020998:	fb97 fefa 	sdiv	lr, r7, sl
 802099c:	fb0a 771e 	mls	r7, sl, lr, r7
 80209a0:	2f00      	cmp	r7, #0
 80209a2:	bfbc      	itt	lt
 80209a4:	f10e 3eff 	addlt.w	lr, lr, #4294967295	; 0xffffffff
 80209a8:	4457      	addlt	r7, sl
 80209aa:	f10e 0101 	add.w	r1, lr, #1
 80209ae:	9106      	str	r1, [sp, #24]
 80209b0:	9a01      	ldr	r2, [sp, #4]
 80209b2:	8b20      	ldrh	r0, [r4, #24]
 80209b4:	19d2      	adds	r2, r2, r7
 80209b6:	8b61      	ldrh	r1, [r4, #26]
 80209b8:	9d02      	ldr	r5, [sp, #8]
 80209ba:	9201      	str	r2, [sp, #4]
 80209bc:	bf5b      	ittet	pl
 80209be:	eba2 020a 	subpl.w	r2, r2, sl
 80209c2:	f8dd 8018 	ldrpl.w	r8, [sp, #24]
 80209c6:	46f0      	movmi	r8, lr
 80209c8:	9201      	strpl	r2, [sp, #4]
 80209ca:	9a00      	ldr	r2, [sp, #0]
 80209cc:	4440      	add	r0, r8
 80209ce:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 80209d2:	4443      	add	r3, r8
 80209d4:	442a      	add	r2, r5
 80209d6:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80209da:	9d05      	ldr	r5, [sp, #20]
 80209dc:	b200      	sxth	r0, r0
 80209de:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 80209e2:	b209      	sxth	r1, r1
 80209e4:	4415      	add	r5, r2
 80209e6:	8320      	strh	r0, [r4, #24]
 80209e8:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80209ec:	8361      	strh	r1, [r4, #26]
 80209ee:	9200      	str	r2, [sp, #0]
 80209f0:	454d      	cmp	r5, r9
 80209f2:	d016      	beq.n	8020a22 <_ZN8touchgfx7Outline10renderLineEiiii+0x21a>
 80209f4:	4301      	orrs	r1, r0
 80209f6:	d00d      	beq.n	8020a14 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80209f8:	f1b8 0f00 	cmp.w	r8, #0
 80209fc:	db0a      	blt.n	8020a14 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 80209fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8020a00:	4541      	cmp	r1, r8
 8020a02:	dd07      	ble.n	8020a14 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8020a04:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8020a08:	4288      	cmp	r0, r1
 8020a0a:	d335      	bcc.n	8020a78 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 8020a0c:	f04f 0101 	mov.w	r1, #1
 8020a10:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8020a14:	9900      	ldr	r1, [sp, #0]
 8020a16:	82e6      	strh	r6, [r4, #22]
 8020a18:	82a1      	strh	r1, [r4, #20]
 8020a1a:	f04f 0100 	mov.w	r1, #0
 8020a1e:	8321      	strh	r1, [r4, #24]
 8020a20:	8361      	strh	r1, [r4, #26]
 8020a22:	9a00      	ldr	r2, [sp, #0]
 8020a24:	4594      	cmp	ip, r2
 8020a26:	d1c3      	bne.n	80209b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1a8>
 8020a28:	9a03      	ldr	r2, [sp, #12]
 8020a2a:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 8020a2e:	1ad3      	subs	r3, r2, r3
 8020a30:	8b22      	ldrh	r2, [r4, #24]
 8020a32:	441a      	add	r2, r3
 8020a34:	8322      	strh	r2, [r4, #24]
 8020a36:	9a04      	ldr	r2, [sp, #16]
 8020a38:	3220      	adds	r2, #32
 8020a3a:	eba2 020b 	sub.w	r2, r2, fp
 8020a3e:	fb03 c302 	mla	r3, r3, r2, ip
 8020a42:	8363      	strh	r3, [r4, #26]
 8020a44:	e758      	b.n	80208f8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8020a46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020a4a:	434a      	muls	r2, r1
 8020a4c:	f1ca 0a00 	rsb	sl, sl, #0
 8020a50:	f04f 0b00 	mov.w	fp, #0
 8020a54:	9302      	str	r3, [sp, #8]
 8020a56:	e75d      	b.n	8020914 <_ZN8touchgfx7Outline10renderLineEiiii+0x10c>
 8020a58:	f104 0314 	add.w	r3, r4, #20
 8020a5c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8020a60:	cb03      	ldmia	r3!, {r0, r1}
 8020a62:	f8c8 0000 	str.w	r0, [r8]
 8020a66:	f8c8 1004 	str.w	r1, [r8, #4]
 8020a6a:	6923      	ldr	r3, [r4, #16]
 8020a6c:	3308      	adds	r3, #8
 8020a6e:	6123      	str	r3, [r4, #16]
 8020a70:	68a3      	ldr	r3, [r4, #8]
 8020a72:	3301      	adds	r3, #1
 8020a74:	60a3      	str	r3, [r4, #8]
 8020a76:	e77d      	b.n	8020974 <_ZN8touchgfx7Outline10renderLineEiiii+0x16c>
 8020a78:	f104 0814 	add.w	r8, r4, #20
 8020a7c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8020a80:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8020a84:	f8c9 0000 	str.w	r0, [r9]
 8020a88:	f8c9 1004 	str.w	r1, [r9, #4]
 8020a8c:	6921      	ldr	r1, [r4, #16]
 8020a8e:	3108      	adds	r1, #8
 8020a90:	6121      	str	r1, [r4, #16]
 8020a92:	68a1      	ldr	r1, [r4, #8]
 8020a94:	3101      	adds	r1, #1
 8020a96:	60a1      	str	r1, [r4, #8]
 8020a98:	e7bc      	b.n	8020a14 <_ZN8touchgfx7Outline10renderLineEiiii+0x20c>
 8020a9a:	1a83      	subs	r3, r0, r2
 8020a9c:	9301      	str	r3, [sp, #4]
 8020a9e:	f1ba 0f00 	cmp.w	sl, #0
 8020aa2:	f040 8094 	bne.w	8020bce <_ZN8touchgfx7Outline10renderLineEiiii+0x3c6>
 8020aa6:	9a01      	ldr	r2, [sp, #4]
 8020aa8:	0049      	lsls	r1, r1, #1
 8020aaa:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 8020aae:	2a00      	cmp	r2, #0
 8020ab0:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 8020ab4:	8b62      	ldrh	r2, [r4, #26]
 8020ab6:	bfaa      	itet	ge
 8020ab8:	f04f 0a20 	movge.w	sl, #32
 8020abc:	f04f 38ff 	movlt.w	r8, #4294967295	; 0xffffffff
 8020ac0:	f04f 0801 	movge.w	r8, #1
 8020ac4:	8b21      	ldrh	r1, [r4, #24]
 8020ac6:	ebaa 0e0e 	sub.w	lr, sl, lr
 8020aca:	4471      	add	r1, lr
 8020acc:	fb0e 2e03 	mla	lr, lr, r3, r2
 8020ad0:	eb08 0206 	add.w	r2, r8, r6
 8020ad4:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8020ad8:	b209      	sxth	r1, r1
 8020ada:	eb05 4702 	add.w	r7, r5, r2, lsl #16
 8020ade:	eb06 4600 	add.w	r6, r6, r0, lsl #16
 8020ae2:	8321      	strh	r1, [r4, #24]
 8020ae4:	fa0f fe8e 	sxth.w	lr, lr
 8020ae8:	42b7      	cmp	r7, r6
 8020aea:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8020aee:	d013      	beq.n	8020b18 <_ZN8touchgfx7Outline10renderLineEiiii+0x310>
 8020af0:	ea51 010e 	orrs.w	r1, r1, lr
 8020af4:	d00b      	beq.n	8020b0e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8020af6:	2800      	cmp	r0, #0
 8020af8:	db09      	blt.n	8020b0e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8020afa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8020afc:	4281      	cmp	r1, r0
 8020afe:	dd06      	ble.n	8020b0e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8020b00:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8020b04:	4288      	cmp	r0, r1
 8020b06:	d339      	bcc.n	8020b7c <_ZN8touchgfx7Outline10renderLineEiiii+0x374>
 8020b08:	2101      	movs	r1, #1
 8020b0a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8020b0e:	2100      	movs	r1, #0
 8020b10:	82a5      	strh	r5, [r4, #20]
 8020b12:	82e2      	strh	r2, [r4, #22]
 8020b14:	8321      	strh	r1, [r4, #24]
 8020b16:	8361      	strh	r1, [r4, #26]
 8020b18:	f1aa 0610 	sub.w	r6, sl, #16
 8020b1c:	f04f 0e00 	mov.w	lr, #0
 8020b20:	f04f 0b01 	mov.w	fp, #1
 8020b24:	0076      	lsls	r6, r6, #1
 8020b26:	fb06 f703 	mul.w	r7, r6, r3
 8020b2a:	b236      	sxth	r6, r6
 8020b2c:	b23f      	sxth	r7, r7
 8020b2e:	ea46 0107 	orr.w	r1, r6, r7
 8020b32:	9100      	str	r1, [sp, #0]
 8020b34:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020b36:	428a      	cmp	r2, r1
 8020b38:	d03e      	beq.n	8020bb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3b0>
 8020b3a:	4442      	add	r2, r8
 8020b3c:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8020b40:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8020b44:	eb05 4c02 	add.w	ip, r5, r2, lsl #16
 8020b48:	8326      	strh	r6, [r4, #24]
 8020b4a:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 8020b4e:	8367      	strh	r7, [r4, #26]
 8020b50:	4584      	cmp	ip, r0
 8020b52:	d0ef      	beq.n	8020b34 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8020b54:	9800      	ldr	r0, [sp, #0]
 8020b56:	b150      	cbz	r0, 8020b6e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8020b58:	2900      	cmp	r1, #0
 8020b5a:	db08      	blt.n	8020b6e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8020b5c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8020b5e:	4288      	cmp	r0, r1
 8020b60:	dd05      	ble.n	8020b6e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8020b62:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8020b66:	4288      	cmp	r0, r1
 8020b68:	d315      	bcc.n	8020b96 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 8020b6a:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
 8020b6e:	82a5      	strh	r5, [r4, #20]
 8020b70:	82e2      	strh	r2, [r4, #22]
 8020b72:	f8a4 e018 	strh.w	lr, [r4, #24]
 8020b76:	f8a4 e01a 	strh.w	lr, [r4, #26]
 8020b7a:	e7db      	b.n	8020b34 <_ZN8touchgfx7Outline10renderLineEiiii+0x32c>
 8020b7c:	f104 0614 	add.w	r6, r4, #20
 8020b80:	6927      	ldr	r7, [r4, #16]
 8020b82:	ce03      	ldmia	r6!, {r0, r1}
 8020b84:	6038      	str	r0, [r7, #0]
 8020b86:	6079      	str	r1, [r7, #4]
 8020b88:	6921      	ldr	r1, [r4, #16]
 8020b8a:	3108      	adds	r1, #8
 8020b8c:	6121      	str	r1, [r4, #16]
 8020b8e:	68a1      	ldr	r1, [r4, #8]
 8020b90:	3101      	adds	r1, #1
 8020b92:	60a1      	str	r1, [r4, #8]
 8020b94:	e7bb      	b.n	8020b0e <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8020b96:	f104 0c14 	add.w	ip, r4, #20
 8020b9a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8020b9e:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 8020ba2:	f8c9 0000 	str.w	r0, [r9]
 8020ba6:	f8c9 1004 	str.w	r1, [r9, #4]
 8020baa:	6921      	ldr	r1, [r4, #16]
 8020bac:	3108      	adds	r1, #8
 8020bae:	6121      	str	r1, [r4, #16]
 8020bb0:	68a1      	ldr	r1, [r4, #8]
 8020bb2:	3101      	adds	r1, #1
 8020bb4:	60a1      	str	r1, [r4, #8]
 8020bb6:	e7da      	b.n	8020b6e <_ZN8touchgfx7Outline10renderLineEiiii+0x366>
 8020bb8:	9a03      	ldr	r2, [sp, #12]
 8020bba:	8b61      	ldrh	r1, [r4, #26]
 8020bbc:	f1a2 0c20 	sub.w	ip, r2, #32
 8020bc0:	8b22      	ldrh	r2, [r4, #24]
 8020bc2:	44d4      	add	ip, sl
 8020bc4:	4462      	add	r2, ip
 8020bc6:	fb0c 1303 	mla	r3, ip, r3, r1
 8020bca:	8322      	strh	r2, [r4, #24]
 8020bcc:	e739      	b.n	8020a42 <_ZN8touchgfx7Outline10renderLineEiiii+0x23a>
 8020bce:	9b01      	ldr	r3, [sp, #4]
 8020bd0:	2b00      	cmp	r3, #0
 8020bd2:	db3f      	blt.n	8020c54 <_ZN8touchgfx7Outline10renderLineEiiii+0x44c>
 8020bd4:	2201      	movs	r2, #1
 8020bd6:	f1ce 0320 	rsb	r3, lr, #32
 8020bda:	920b      	str	r2, [sp, #44]	; 0x2c
 8020bdc:	2220      	movs	r2, #32
 8020bde:	fb0a f303 	mul.w	r3, sl, r3
 8020be2:	9202      	str	r2, [sp, #8]
 8020be4:	9a01      	ldr	r2, [sp, #4]
 8020be6:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8020bea:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8020bee:	fb93 f7f2 	sdiv	r7, r3, r2
 8020bf2:	fb02 3317 	mls	r3, r2, r7, r3
 8020bf6:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8020bfa:	2b00      	cmp	r3, #0
 8020bfc:	9308      	str	r3, [sp, #32]
 8020bfe:	bfbc      	itt	lt
 8020c00:	f107 37ff 	addlt.w	r7, r7, #4294967295	; 0xffffffff
 8020c04:	189b      	addlt	r3, r3, r2
 8020c06:	eb07 0b01 	add.w	fp, r7, r1
 8020c0a:	bfb8      	it	lt
 8020c0c:	9308      	strlt	r3, [sp, #32]
 8020c0e:	ea4f 136b 	mov.w	r3, fp, asr #5
 8020c12:	9304      	str	r3, [sp, #16]
 8020c14:	9b02      	ldr	r3, [sp, #8]
 8020c16:	4573      	cmp	r3, lr
 8020c18:	d133      	bne.n	8020c82 <_ZN8touchgfx7Outline10renderLineEiiii+0x47a>
 8020c1a:	9b04      	ldr	r3, [sp, #16]
 8020c1c:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8020c20:	454b      	cmp	r3, r9
 8020c22:	d045      	beq.n	8020cb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8020c24:	8b62      	ldrh	r2, [r4, #26]
 8020c26:	8b23      	ldrh	r3, [r4, #24]
 8020c28:	4313      	orrs	r3, r2
 8020c2a:	d00c      	beq.n	8020c46 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8020c2c:	f1b8 0f00 	cmp.w	r8, #0
 8020c30:	db09      	blt.n	8020c46 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8020c32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020c34:	4543      	cmp	r3, r8
 8020c36:	dd06      	ble.n	8020c46 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8020c38:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8020c3c:	429a      	cmp	r2, r3
 8020c3e:	d313      	bcc.n	8020c68 <_ZN8touchgfx7Outline10renderLineEiiii+0x460>
 8020c40:	2301      	movs	r3, #1
 8020c42:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8020c46:	9b04      	ldr	r3, [sp, #16]
 8020c48:	82e6      	strh	r6, [r4, #22]
 8020c4a:	82a3      	strh	r3, [r4, #20]
 8020c4c:	2300      	movs	r3, #0
 8020c4e:	8323      	strh	r3, [r4, #24]
 8020c50:	8363      	strh	r3, [r4, #26]
 8020c52:	e02d      	b.n	8020cb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4a8>
 8020c54:	9a01      	ldr	r2, [sp, #4]
 8020c56:	fb0a f30e 	mul.w	r3, sl, lr
 8020c5a:	4252      	negs	r2, r2
 8020c5c:	9201      	str	r2, [sp, #4]
 8020c5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020c62:	920b      	str	r2, [sp, #44]	; 0x2c
 8020c64:	2200      	movs	r2, #0
 8020c66:	e7bc      	b.n	8020be2 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8020c68:	f104 0314 	add.w	r3, r4, #20
 8020c6c:	6922      	ldr	r2, [r4, #16]
 8020c6e:	cb03      	ldmia	r3!, {r0, r1}
 8020c70:	6010      	str	r0, [r2, #0]
 8020c72:	6051      	str	r1, [r2, #4]
 8020c74:	6923      	ldr	r3, [r4, #16]
 8020c76:	3308      	adds	r3, #8
 8020c78:	6123      	str	r3, [r4, #16]
 8020c7a:	68a3      	ldr	r3, [r4, #8]
 8020c7c:	3301      	adds	r3, #1
 8020c7e:	60a3      	str	r3, [r4, #8]
 8020c80:	e7e1      	b.n	8020c46 <_ZN8touchgfx7Outline10renderLineEiiii+0x43e>
 8020c82:	f00b 031f 	and.w	r3, fp, #31
 8020c86:	f001 011f 	and.w	r1, r1, #31
 8020c8a:	8b20      	ldrh	r0, [r4, #24]
 8020c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8020c8e:	9b02      	ldr	r3, [sp, #8]
 8020c90:	eba3 020e 	sub.w	r2, r3, lr
 8020c94:	8b63      	ldrh	r3, [r4, #26]
 8020c96:	9300      	str	r3, [sp, #0]
 8020c98:	9b04      	ldr	r3, [sp, #16]
 8020c9a:	42ab      	cmp	r3, r5
 8020c9c:	f040 80ef 	bne.w	8020e7e <_ZN8touchgfx7Outline10renderLineEiiii+0x676>
 8020ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ca2:	4410      	add	r0, r2
 8020ca4:	4419      	add	r1, r3
 8020ca6:	9b00      	ldr	r3, [sp, #0]
 8020ca8:	8320      	strh	r0, [r4, #24]
 8020caa:	fb02 3101 	mla	r1, r2, r1, r3
 8020cae:	8361      	strh	r1, [r4, #26]
 8020cb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020cb2:	9904      	ldr	r1, [sp, #16]
 8020cb4:	4433      	add	r3, r6
 8020cb6:	9300      	str	r3, [sp, #0]
 8020cb8:	9a00      	ldr	r2, [sp, #0]
 8020cba:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8020cbe:	eb01 4002 	add.w	r0, r1, r2, lsl #16
 8020cc2:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8020cc6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8020cca:	4288      	cmp	r0, r1
 8020ccc:	d018      	beq.n	8020d00 <_ZN8touchgfx7Outline10renderLineEiiii+0x4f8>
 8020cce:	8b60      	ldrh	r0, [r4, #26]
 8020cd0:	8b21      	ldrh	r1, [r4, #24]
 8020cd2:	ea50 0201 	orrs.w	r2, r0, r1
 8020cd6:	d00c      	beq.n	8020cf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8020cd8:	2b00      	cmp	r3, #0
 8020cda:	db0a      	blt.n	8020cf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8020cdc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8020cde:	4299      	cmp	r1, r3
 8020ce0:	dd07      	ble.n	8020cf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 8020ce2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8020ce6:	4299      	cmp	r1, r3
 8020ce8:	f0c0 818b 	bcc.w	8021002 <_ZN8touchgfx7Outline10renderLineEiiii+0x7fa>
 8020cec:	2301      	movs	r3, #1
 8020cee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8020cf2:	9b04      	ldr	r3, [sp, #16]
 8020cf4:	82a3      	strh	r3, [r4, #20]
 8020cf6:	9b00      	ldr	r3, [sp, #0]
 8020cf8:	82e3      	strh	r3, [r4, #22]
 8020cfa:	2300      	movs	r3, #0
 8020cfc:	8323      	strh	r3, [r4, #24]
 8020cfe:	8363      	strh	r3, [r4, #26]
 8020d00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020d02:	9a00      	ldr	r2, [sp, #0]
 8020d04:	4293      	cmp	r3, r2
 8020d06:	f000 808d 	beq.w	8020e24 <_ZN8touchgfx7Outline10renderLineEiiii+0x61c>
 8020d0a:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8020d0e:	9901      	ldr	r1, [sp, #4]
 8020d10:	9801      	ldr	r0, [sp, #4]
 8020d12:	fb93 f1f1 	sdiv	r1, r3, r1
 8020d16:	fb00 3311 	mls	r3, r0, r1, r3
 8020d1a:	9106      	str	r1, [sp, #24]
 8020d1c:	2b00      	cmp	r3, #0
 8020d1e:	9307      	str	r3, [sp, #28]
 8020d20:	da04      	bge.n	8020d2c <_ZN8touchgfx7Outline10renderLineEiiii+0x524>
 8020d22:	1e4b      	subs	r3, r1, #1
 8020d24:	9306      	str	r3, [sp, #24]
 8020d26:	9b07      	ldr	r3, [sp, #28]
 8020d28:	4403      	add	r3, r0
 8020d2a:	9307      	str	r3, [sp, #28]
 8020d2c:	9b08      	ldr	r3, [sp, #32]
 8020d2e:	f04f 0c00 	mov.w	ip, #0
 8020d32:	9901      	ldr	r1, [sp, #4]
 8020d34:	1a5b      	subs	r3, r3, r1
 8020d36:	4659      	mov	r1, fp
 8020d38:	9308      	str	r3, [sp, #32]
 8020d3a:	9b02      	ldr	r3, [sp, #8]
 8020d3c:	f1c3 0320 	rsb	r3, r3, #32
 8020d40:	930a      	str	r3, [sp, #40]	; 0x28
 8020d42:	980a      	ldr	r0, [sp, #40]	; 0x28
 8020d44:	9b02      	ldr	r3, [sp, #8]
 8020d46:	1a1b      	subs	r3, r3, r0
 8020d48:	9309      	str	r3, [sp, #36]	; 0x24
 8020d4a:	f9b4 e016 	ldrsh.w	lr, [r4, #22]
 8020d4e:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8020d52:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 8020d56:	eb08 480e 	add.w	r8, r8, lr, lsl #16
 8020d5a:	181b      	adds	r3, r3, r0
 8020d5c:	bf58      	it	pl
 8020d5e:	9801      	ldrpl	r0, [sp, #4]
 8020d60:	9308      	str	r3, [sp, #32]
 8020d62:	bf54      	ite	pl
 8020d64:	1a1b      	subpl	r3, r3, r0
 8020d66:	9d06      	ldrmi	r5, [sp, #24]
 8020d68:	9802      	ldr	r0, [sp, #8]
 8020d6a:	bf5e      	ittt	pl
 8020d6c:	9308      	strpl	r3, [sp, #32]
 8020d6e:	9b06      	ldrpl	r3, [sp, #24]
 8020d70:	1c5d      	addpl	r5, r3, #1
 8020d72:	44ab      	add	fp, r5
 8020d74:	ea4f 136b 	mov.w	r3, fp, asr #5
 8020d78:	9304      	str	r3, [sp, #16]
 8020d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020d7c:	4283      	cmp	r3, r0
 8020d7e:	f040 815a 	bne.w	8021036 <_ZN8touchgfx7Outline10renderLineEiiii+0x82e>
 8020d82:	9b04      	ldr	r3, [sp, #16]
 8020d84:	9a00      	ldr	r2, [sp, #0]
 8020d86:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8020d8a:	4543      	cmp	r3, r8
 8020d8c:	d01a      	beq.n	8020dc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8020d8e:	8b61      	ldrh	r1, [r4, #26]
 8020d90:	8b23      	ldrh	r3, [r4, #24]
 8020d92:	430b      	orrs	r3, r1
 8020d94:	d00e      	beq.n	8020db4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8020d96:	f1be 0f00 	cmp.w	lr, #0
 8020d9a:	db0b      	blt.n	8020db4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8020d9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020d9e:	4573      	cmp	r3, lr
 8020da0:	dd08      	ble.n	8020db4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8020da2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8020da6:	4299      	cmp	r1, r3
 8020da8:	f0c0 8138 	bcc.w	802101c <_ZN8touchgfx7Outline10renderLineEiiii+0x814>
 8020dac:	f04f 0301 	mov.w	r3, #1
 8020db0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8020db4:	9b04      	ldr	r3, [sp, #16]
 8020db6:	f8a4 c018 	strh.w	ip, [r4, #24]
 8020dba:	82a3      	strh	r3, [r4, #20]
 8020dbc:	9b00      	ldr	r3, [sp, #0]
 8020dbe:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8020dc2:	82e3      	strh	r3, [r4, #22]
 8020dc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020dc6:	9a00      	ldr	r2, [sp, #0]
 8020dc8:	441a      	add	r2, r3
 8020dca:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8020dce:	9200      	str	r2, [sp, #0]
 8020dd0:	9900      	ldr	r1, [sp, #0]
 8020dd2:	9a04      	ldr	r2, [sp, #16]
 8020dd4:	eb02 4001 	add.w	r0, r2, r1, lsl #16
 8020dd8:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8020ddc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8020de0:	4288      	cmp	r0, r1
 8020de2:	d01a      	beq.n	8020e1a <_ZN8touchgfx7Outline10renderLineEiiii+0x612>
 8020de4:	8b60      	ldrh	r0, [r4, #26]
 8020de6:	8b21      	ldrh	r1, [r4, #24]
 8020de8:	ea50 0201 	orrs.w	r2, r0, r1
 8020dec:	d00d      	beq.n	8020e0a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8020dee:	2b00      	cmp	r3, #0
 8020df0:	db0b      	blt.n	8020e0a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8020df2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8020df4:	4299      	cmp	r1, r3
 8020df6:	dd08      	ble.n	8020e0a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 8020df8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8020dfc:	4299      	cmp	r1, r3
 8020dfe:	f0c0 81f9 	bcc.w	80211f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 8020e02:	f04f 0301 	mov.w	r3, #1
 8020e06:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8020e0a:	9b04      	ldr	r3, [sp, #16]
 8020e0c:	f8a4 c018 	strh.w	ip, [r4, #24]
 8020e10:	82a3      	strh	r3, [r4, #20]
 8020e12:	9b00      	ldr	r3, [sp, #0]
 8020e14:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8020e18:	82e3      	strh	r3, [r4, #22]
 8020e1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020e1c:	4659      	mov	r1, fp
 8020e1e:	9a00      	ldr	r2, [sp, #0]
 8020e20:	4293      	cmp	r3, r2
 8020e22:	d192      	bne.n	8020d4a <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 8020e24:	9b02      	ldr	r3, [sp, #8]
 8020e26:	f1c3 0c20 	rsb	ip, r3, #32
 8020e2a:	9b05      	ldr	r3, [sp, #20]
 8020e2c:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8020e30:	9b03      	ldr	r3, [sp, #12]
 8020e32:	459c      	cmp	ip, r3
 8020e34:	f040 81f8 	bne.w	8021228 <_ZN8touchgfx7Outline10renderLineEiiii+0xa20>
 8020e38:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8020e3c:	9a00      	ldr	r2, [sp, #0]
 8020e3e:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8020e42:	eb0e 4002 	add.w	r0, lr, r2, lsl #16
 8020e46:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8020e4a:	4288      	cmp	r0, r1
 8020e4c:	f43f ad54 	beq.w	80208f8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 8020e50:	8b60      	ldrh	r0, [r4, #26]
 8020e52:	8b21      	ldrh	r1, [r4, #24]
 8020e54:	ea50 0201 	orrs.w	r2, r0, r1
 8020e58:	d00c      	beq.n	8020e74 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8020e5a:	2b00      	cmp	r3, #0
 8020e5c:	db0a      	blt.n	8020e74 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8020e5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8020e60:	4299      	cmp	r1, r3
 8020e62:	dd07      	ble.n	8020e74 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8020e64:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8020e68:	4299      	cmp	r1, r3
 8020e6a:	f0c0 81d0 	bcc.w	802120e <_ZN8touchgfx7Outline10renderLineEiiii+0xa06>
 8020e6e:	2301      	movs	r3, #1
 8020e70:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8020e74:	9b00      	ldr	r3, [sp, #0]
 8020e76:	f8a4 e014 	strh.w	lr, [r4, #20]
 8020e7a:	82e3      	strh	r3, [r4, #22]
 8020e7c:	e517      	b.n	80208ae <_ZN8touchgfx7Outline10renderLineEiiii+0xa6>
 8020e7e:	2f00      	cmp	r7, #0
 8020e80:	f2c0 8097 	blt.w	8020fb2 <_ZN8touchgfx7Outline10renderLineEiiii+0x7aa>
 8020e84:	2301      	movs	r3, #1
 8020e86:	f1c1 0c20 	rsb	ip, r1, #32
 8020e8a:	9307      	str	r3, [sp, #28]
 8020e8c:	2320      	movs	r3, #32
 8020e8e:	fb02 f20c 	mul.w	r2, r2, ip
 8020e92:	9306      	str	r3, [sp, #24]
 8020e94:	9b06      	ldr	r3, [sp, #24]
 8020e96:	fb92 fcf7 	sdiv	ip, r2, r7
 8020e9a:	fb07 221c 	mls	r2, r7, ip, r2
 8020e9e:	4419      	add	r1, r3
 8020ea0:	9b00      	ldr	r3, [sp, #0]
 8020ea2:	2a00      	cmp	r2, #0
 8020ea4:	bfbc      	itt	lt
 8020ea6:	f10c 3cff 	addlt.w	ip, ip, #4294967295	; 0xffffffff
 8020eaa:	19d2      	addlt	r2, r2, r7
 8020eac:	fb0c 3101 	mla	r1, ip, r1, r3
 8020eb0:	9b07      	ldr	r3, [sp, #28]
 8020eb2:	4460      	add	r0, ip
 8020eb4:	441d      	add	r5, r3
 8020eb6:	0433      	lsls	r3, r6, #16
 8020eb8:	b200      	sxth	r0, r0
 8020eba:	930a      	str	r3, [sp, #40]	; 0x28
 8020ebc:	18eb      	adds	r3, r5, r3
 8020ebe:	b209      	sxth	r1, r1
 8020ec0:	8320      	strh	r0, [r4, #24]
 8020ec2:	454b      	cmp	r3, r9
 8020ec4:	8361      	strh	r1, [r4, #26]
 8020ec6:	d014      	beq.n	8020ef2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6ea>
 8020ec8:	ea50 0301 	orrs.w	r3, r0, r1
 8020ecc:	d00c      	beq.n	8020ee8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8020ece:	f1b8 0f00 	cmp.w	r8, #0
 8020ed2:	db09      	blt.n	8020ee8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8020ed4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020ed6:	4543      	cmp	r3, r8
 8020ed8:	dd06      	ble.n	8020ee8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8020eda:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8020ede:	4299      	cmp	r1, r3
 8020ee0:	d36e      	bcc.n	8020fc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8020ee2:	2301      	movs	r3, #1
 8020ee4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8020ee8:	2300      	movs	r3, #0
 8020eea:	82a5      	strh	r5, [r4, #20]
 8020eec:	82e6      	strh	r6, [r4, #22]
 8020eee:	8323      	strh	r3, [r4, #24]
 8020ef0:	8363      	strh	r3, [r4, #26]
 8020ef2:	9904      	ldr	r1, [sp, #16]
 8020ef4:	eb0e 030c 	add.w	r3, lr, ip
 8020ef8:	42a9      	cmp	r1, r5
 8020efa:	d04d      	beq.n	8020f98 <_ZN8touchgfx7Outline10renderLineEiiii+0x790>
 8020efc:	9902      	ldr	r1, [sp, #8]
 8020efe:	1bd2      	subs	r2, r2, r7
 8020f00:	1ac9      	subs	r1, r1, r3
 8020f02:	9200      	str	r2, [sp, #0]
 8020f04:	448c      	add	ip, r1
 8020f06:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 8020f0a:	fb9c fef7 	sdiv	lr, ip, r7
 8020f0e:	fb07 cc1e 	mls	ip, r7, lr, ip
 8020f12:	f1bc 0f00 	cmp.w	ip, #0
 8020f16:	bfbc      	itt	lt
 8020f18:	f10e 3eff 	addlt.w	lr, lr, #4294967295	; 0xffffffff
 8020f1c:	44bc      	addlt	ip, r7
 8020f1e:	f10e 0101 	add.w	r1, lr, #1
 8020f22:	910d      	str	r1, [sp, #52]	; 0x34
 8020f24:	9a00      	ldr	r2, [sp, #0]
 8020f26:	8b20      	ldrh	r0, [r4, #24]
 8020f28:	eb12 020c 	adds.w	r2, r2, ip
 8020f2c:	8b61      	ldrh	r1, [r4, #26]
 8020f2e:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 8020f32:	9200      	str	r2, [sp, #0]
 8020f34:	bf5b      	ittet	pl
 8020f36:	1bd2      	subpl	r2, r2, r7
 8020f38:	f8dd 8034 	ldrpl.w	r8, [sp, #52]	; 0x34
 8020f3c:	46f0      	movmi	r8, lr
 8020f3e:	9200      	strpl	r2, [sp, #0]
 8020f40:	9a07      	ldr	r2, [sp, #28]
 8020f42:	4440      	add	r0, r8
 8020f44:	eb01 1148 	add.w	r1, r1, r8, lsl #5
 8020f48:	4443      	add	r3, r8
 8020f4a:	4415      	add	r5, r2
 8020f4c:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8020f50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020f52:	b200      	sxth	r0, r0
 8020f54:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 8020f58:	442a      	add	r2, r5
 8020f5a:	b209      	sxth	r1, r1
 8020f5c:	8320      	strh	r0, [r4, #24]
 8020f5e:	454a      	cmp	r2, r9
 8020f60:	8361      	strh	r1, [r4, #26]
 8020f62:	d016      	beq.n	8020f92 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8020f64:	ea50 0201 	orrs.w	r2, r0, r1
 8020f68:	d00d      	beq.n	8020f86 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8020f6a:	f1b8 0f00 	cmp.w	r8, #0
 8020f6e:	db0a      	blt.n	8020f86 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8020f70:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8020f72:	4541      	cmp	r1, r8
 8020f74:	dd07      	ble.n	8020f86 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8020f76:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8020f7a:	4288      	cmp	r0, r1
 8020f7c:	d330      	bcc.n	8020fe0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7d8>
 8020f7e:	f04f 0201 	mov.w	r2, #1
 8020f82:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8020f86:	f04f 0200 	mov.w	r2, #0
 8020f8a:	82a5      	strh	r5, [r4, #20]
 8020f8c:	82e6      	strh	r6, [r4, #22]
 8020f8e:	8322      	strh	r2, [r4, #24]
 8020f90:	8362      	strh	r2, [r4, #26]
 8020f92:	9904      	ldr	r1, [sp, #16]
 8020f94:	42a9      	cmp	r1, r5
 8020f96:	d1c5      	bne.n	8020f24 <_ZN8touchgfx7Outline10renderLineEiiii+0x71c>
 8020f98:	9a02      	ldr	r2, [sp, #8]
 8020f9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020f9c:	1ad3      	subs	r3, r2, r3
 8020f9e:	8b22      	ldrh	r2, [r4, #24]
 8020fa0:	3120      	adds	r1, #32
 8020fa2:	441a      	add	r2, r3
 8020fa4:	8322      	strh	r2, [r4, #24]
 8020fa6:	9a06      	ldr	r2, [sp, #24]
 8020fa8:	1a89      	subs	r1, r1, r2
 8020faa:	8b62      	ldrh	r2, [r4, #26]
 8020fac:	fb03 2301 	mla	r3, r3, r1, r2
 8020fb0:	e64e      	b.n	8020c50 <_ZN8touchgfx7Outline10renderLineEiiii+0x448>
 8020fb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020fb6:	434a      	muls	r2, r1
 8020fb8:	427f      	negs	r7, r7
 8020fba:	9307      	str	r3, [sp, #28]
 8020fbc:	2300      	movs	r3, #0
 8020fbe:	e768      	b.n	8020e92 <_ZN8touchgfx7Outline10renderLineEiiii+0x68a>
 8020fc0:	f104 0314 	add.w	r3, r4, #20
 8020fc4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8020fc8:	cb03      	ldmia	r3!, {r0, r1}
 8020fca:	f8c8 0000 	str.w	r0, [r8]
 8020fce:	f8c8 1004 	str.w	r1, [r8, #4]
 8020fd2:	6923      	ldr	r3, [r4, #16]
 8020fd4:	3308      	adds	r3, #8
 8020fd6:	6123      	str	r3, [r4, #16]
 8020fd8:	68a3      	ldr	r3, [r4, #8]
 8020fda:	3301      	adds	r3, #1
 8020fdc:	60a3      	str	r3, [r4, #8]
 8020fde:	e783      	b.n	8020ee8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8020fe0:	f104 0814 	add.w	r8, r4, #20
 8020fe4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8020fe8:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 8020fec:	f8c9 0000 	str.w	r0, [r9]
 8020ff0:	f8c9 1004 	str.w	r1, [r9, #4]
 8020ff4:	6921      	ldr	r1, [r4, #16]
 8020ff6:	3108      	adds	r1, #8
 8020ff8:	6121      	str	r1, [r4, #16]
 8020ffa:	68a1      	ldr	r1, [r4, #8]
 8020ffc:	3101      	adds	r1, #1
 8020ffe:	60a1      	str	r1, [r4, #8]
 8021000:	e7c1      	b.n	8020f86 <_ZN8touchgfx7Outline10renderLineEiiii+0x77e>
 8021002:	f104 0314 	add.w	r3, r4, #20
 8021006:	6925      	ldr	r5, [r4, #16]
 8021008:	cb03      	ldmia	r3!, {r0, r1}
 802100a:	6028      	str	r0, [r5, #0]
 802100c:	6069      	str	r1, [r5, #4]
 802100e:	6923      	ldr	r3, [r4, #16]
 8021010:	3308      	adds	r3, #8
 8021012:	6123      	str	r3, [r4, #16]
 8021014:	68a3      	ldr	r3, [r4, #8]
 8021016:	3301      	adds	r3, #1
 8021018:	60a3      	str	r3, [r4, #8]
 802101a:	e66a      	b.n	8020cf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x4ea>
 802101c:	f104 0314 	add.w	r3, r4, #20
 8021020:	6925      	ldr	r5, [r4, #16]
 8021022:	cb03      	ldmia	r3!, {r0, r1}
 8021024:	6028      	str	r0, [r5, #0]
 8021026:	6069      	str	r1, [r5, #4]
 8021028:	6923      	ldr	r3, [r4, #16]
 802102a:	3308      	adds	r3, #8
 802102c:	6123      	str	r3, [r4, #16]
 802102e:	68a3      	ldr	r3, [r4, #8]
 8021030:	3301      	adds	r3, #1
 8021032:	60a3      	str	r3, [r4, #8]
 8021034:	e6be      	b.n	8020db4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5ac>
 8021036:	f00b 031f 	and.w	r3, fp, #31
 802103a:	114f      	asrs	r7, r1, #5
 802103c:	8b20      	ldrh	r0, [r4, #24]
 802103e:	f001 011f 	and.w	r1, r1, #31
 8021042:	930f      	str	r3, [sp, #60]	; 0x3c
 8021044:	9b04      	ldr	r3, [sp, #16]
 8021046:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802104a:	429f      	cmp	r7, r3
 802104c:	d10a      	bne.n	8021064 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 802104e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021050:	4418      	add	r0, r3
 8021052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021054:	4419      	add	r1, r3
 8021056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021058:	8320      	strh	r0, [r4, #24]
 802105a:	fb03 9901 	mla	r9, r3, r1, r9
 802105e:	f8a4 901a 	strh.w	r9, [r4, #26]
 8021062:	e6af      	b.n	8020dc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 8021064:	2d00      	cmp	r5, #0
 8021066:	f2c0 809b 	blt.w	80211a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x998>
 802106a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802106c:	f1c1 0320 	rsb	r3, r1, #32
 8021070:	4373      	muls	r3, r6
 8021072:	2601      	movs	r6, #1
 8021074:	960e      	str	r6, [sp, #56]	; 0x38
 8021076:	2620      	movs	r6, #32
 8021078:	960d      	str	r6, [sp, #52]	; 0x34
 802107a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802107c:	fb93 f6f5 	sdiv	r6, r3, r5
 8021080:	4411      	add	r1, r2
 8021082:	fb05 3316 	mls	r3, r5, r6, r3
 8021086:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021088:	2b00      	cmp	r3, #0
 802108a:	4417      	add	r7, r2
 802108c:	9a00      	ldr	r2, [sp, #0]
 802108e:	bfbc      	itt	lt
 8021090:	f106 36ff 	addlt.w	r6, r6, #4294967295	; 0xffffffff
 8021094:	195b      	addlt	r3, r3, r5
 8021096:	0412      	lsls	r2, r2, #16
 8021098:	fb06 9101 	mla	r1, r6, r1, r9
 802109c:	4430      	add	r0, r6
 802109e:	eb07 0902 	add.w	r9, r7, r2
 80210a2:	9210      	str	r2, [sp, #64]	; 0x40
 80210a4:	b200      	sxth	r0, r0
 80210a6:	b209      	sxth	r1, r1
 80210a8:	45c1      	cmp	r9, r8
 80210aa:	8320      	strh	r0, [r4, #24]
 80210ac:	8361      	strh	r1, [r4, #26]
 80210ae:	d017      	beq.n	80210e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x8d8>
 80210b0:	ea50 0201 	orrs.w	r2, r0, r1
 80210b4:	d00d      	beq.n	80210d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80210b6:	f1be 0f00 	cmp.w	lr, #0
 80210ba:	db0a      	blt.n	80210d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80210bc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80210be:	4571      	cmp	r1, lr
 80210c0:	dd07      	ble.n	80210d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80210c2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80210c6:	4288      	cmp	r0, r1
 80210c8:	d372      	bcc.n	80211b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x9a8>
 80210ca:	f04f 0201 	mov.w	r2, #1
 80210ce:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 80210d2:	9a00      	ldr	r2, [sp, #0]
 80210d4:	82a7      	strh	r7, [r4, #20]
 80210d6:	82e2      	strh	r2, [r4, #22]
 80210d8:	f8a4 c018 	strh.w	ip, [r4, #24]
 80210dc:	f8a4 c01a 	strh.w	ip, [r4, #26]
 80210e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80210e2:	eb02 0e06 	add.w	lr, r2, r6
 80210e6:	9a04      	ldr	r2, [sp, #16]
 80210e8:	42ba      	cmp	r2, r7
 80210ea:	d049      	beq.n	8021180 <_ZN8touchgfx7Outline10renderLineEiiii+0x978>
 80210ec:	9a02      	ldr	r2, [sp, #8]
 80210ee:	1b5b      	subs	r3, r3, r5
 80210f0:	eba2 010e 	sub.w	r1, r2, lr
 80210f4:	440e      	add	r6, r1
 80210f6:	0176      	lsls	r6, r6, #5
 80210f8:	fb96 f8f5 	sdiv	r8, r6, r5
 80210fc:	fb05 6618 	mls	r6, r5, r8, r6
 8021100:	2e00      	cmp	r6, #0
 8021102:	bfbc      	itt	lt
 8021104:	f108 38ff 	addlt.w	r8, r8, #4294967295	; 0xffffffff
 8021108:	1976      	addlt	r6, r6, r5
 802110a:	f108 0201 	add.w	r2, r8, #1
 802110e:	9211      	str	r2, [sp, #68]	; 0x44
 8021110:	199b      	adds	r3, r3, r6
 8021112:	8b20      	ldrh	r0, [r4, #24]
 8021114:	8b61      	ldrh	r1, [r4, #26]
 8021116:	bf54      	ite	pl
 8021118:	f8dd 9044 	ldrpl.w	r9, [sp, #68]	; 0x44
 802111c:	46c1      	movmi	r9, r8
 802111e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021120:	bf58      	it	pl
 8021122:	1b5b      	subpl	r3, r3, r5
 8021124:	4448      	add	r0, r9
 8021126:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 802112a:	4417      	add	r7, r2
 802112c:	44ce      	add	lr, r9
 802112e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021130:	b200      	sxth	r0, r0
 8021132:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8021136:	b209      	sxth	r1, r1
 8021138:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 802113c:	443a      	add	r2, r7
 802113e:	8320      	strh	r0, [r4, #24]
 8021140:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8021144:	8361      	strh	r1, [r4, #26]
 8021146:	4552      	cmp	r2, sl
 8021148:	d017      	beq.n	802117a <_ZN8touchgfx7Outline10renderLineEiiii+0x972>
 802114a:	ea50 0201 	orrs.w	r2, r0, r1
 802114e:	d00d      	beq.n	802116c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8021150:	f1b9 0f00 	cmp.w	r9, #0
 8021154:	db0a      	blt.n	802116c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 8021156:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8021158:	4549      	cmp	r1, r9
 802115a:	dd07      	ble.n	802116c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 802115c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8021160:	4288      	cmp	r0, r1
 8021162:	d336      	bcc.n	80211d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ca>
 8021164:	f04f 0201 	mov.w	r2, #1
 8021168:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 802116c:	9a00      	ldr	r2, [sp, #0]
 802116e:	82a7      	strh	r7, [r4, #20]
 8021170:	82e2      	strh	r2, [r4, #22]
 8021172:	f8a4 c018 	strh.w	ip, [r4, #24]
 8021176:	f8a4 c01a 	strh.w	ip, [r4, #26]
 802117a:	9a04      	ldr	r2, [sp, #16]
 802117c:	42ba      	cmp	r2, r7
 802117e:	d1c7      	bne.n	8021110 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 8021180:	9b02      	ldr	r3, [sp, #8]
 8021182:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021184:	eba3 0e0e 	sub.w	lr, r3, lr
 8021188:	8b23      	ldrh	r3, [r4, #24]
 802118a:	3120      	adds	r1, #32
 802118c:	4473      	add	r3, lr
 802118e:	8323      	strh	r3, [r4, #24]
 8021190:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021192:	1ac9      	subs	r1, r1, r3
 8021194:	8b63      	ldrh	r3, [r4, #26]
 8021196:	fb0e 3e01 	mla	lr, lr, r1, r3
 802119a:	f8a4 e01a 	strh.w	lr, [r4, #26]
 802119e:	e611      	b.n	8020dc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x5bc>
 80211a0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80211a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80211a6:	426d      	negs	r5, r5
 80211a8:	960e      	str	r6, [sp, #56]	; 0x38
 80211aa:	2600      	movs	r6, #0
 80211ac:	434b      	muls	r3, r1
 80211ae:	e763      	b.n	8021078 <_ZN8touchgfx7Outline10renderLineEiiii+0x870>
 80211b0:	f104 0e14 	add.w	lr, r4, #20
 80211b4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80211b8:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 80211bc:	f8c8 0000 	str.w	r0, [r8]
 80211c0:	f8c8 1004 	str.w	r1, [r8, #4]
 80211c4:	6921      	ldr	r1, [r4, #16]
 80211c6:	3108      	adds	r1, #8
 80211c8:	6121      	str	r1, [r4, #16]
 80211ca:	68a1      	ldr	r1, [r4, #8]
 80211cc:	3101      	adds	r1, #1
 80211ce:	60a1      	str	r1, [r4, #8]
 80211d0:	e77f      	b.n	80210d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ca>
 80211d2:	f104 0914 	add.w	r9, r4, #20
 80211d6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80211da:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 80211de:	f8ca 0000 	str.w	r0, [sl]
 80211e2:	f8ca 1004 	str.w	r1, [sl, #4]
 80211e6:	6921      	ldr	r1, [r4, #16]
 80211e8:	3108      	adds	r1, #8
 80211ea:	6121      	str	r1, [r4, #16]
 80211ec:	68a1      	ldr	r1, [r4, #8]
 80211ee:	3101      	adds	r1, #1
 80211f0:	60a1      	str	r1, [r4, #8]
 80211f2:	e7bb      	b.n	802116c <_ZN8touchgfx7Outline10renderLineEiiii+0x964>
 80211f4:	f104 0314 	add.w	r3, r4, #20
 80211f8:	6925      	ldr	r5, [r4, #16]
 80211fa:	cb03      	ldmia	r3!, {r0, r1}
 80211fc:	6028      	str	r0, [r5, #0]
 80211fe:	6069      	str	r1, [r5, #4]
 8021200:	6923      	ldr	r3, [r4, #16]
 8021202:	3308      	adds	r3, #8
 8021204:	6123      	str	r3, [r4, #16]
 8021206:	68a3      	ldr	r3, [r4, #8]
 8021208:	3301      	adds	r3, #1
 802120a:	60a3      	str	r3, [r4, #8]
 802120c:	e5fd      	b.n	8020e0a <_ZN8touchgfx7Outline10renderLineEiiii+0x602>
 802120e:	f104 0314 	add.w	r3, r4, #20
 8021212:	6925      	ldr	r5, [r4, #16]
 8021214:	cb03      	ldmia	r3!, {r0, r1}
 8021216:	6028      	str	r0, [r5, #0]
 8021218:	6069      	str	r1, [r5, #4]
 802121a:	6923      	ldr	r3, [r4, #16]
 802121c:	3308      	adds	r3, #8
 802121e:	6123      	str	r3, [r4, #16]
 8021220:	68a3      	ldr	r3, [r4, #8]
 8021222:	3301      	adds	r3, #1
 8021224:	60a3      	str	r3, [r4, #8]
 8021226:	e625      	b.n	8020e74 <_ZN8touchgfx7Outline10renderLineEiiii+0x66c>
 8021228:	9b05      	ldr	r3, [sp, #20]
 802122a:	ea4f 176b 	mov.w	r7, fp, asr #5
 802122e:	f00b 081f 	and.w	r8, fp, #31
 8021232:	8b20      	ldrh	r0, [r4, #24]
 8021234:	f003 031f 	and.w	r3, r3, #31
 8021238:	4577      	cmp	r7, lr
 802123a:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 802123e:	9302      	str	r3, [sp, #8]
 8021240:	9b03      	ldr	r3, [sp, #12]
 8021242:	eba3 050c 	sub.w	r5, r3, ip
 8021246:	d108      	bne.n	802125a <_ZN8touchgfx7Outline10renderLineEiiii+0xa52>
 8021248:	9b02      	ldr	r3, [sp, #8]
 802124a:	4428      	add	r0, r5
 802124c:	4498      	add	r8, r3
 802124e:	8320      	strh	r0, [r4, #24]
 8021250:	fb05 9508 	mla	r5, r5, r8, r9
 8021254:	8365      	strh	r5, [r4, #26]
 8021256:	f7ff bb4f 	b.w	80208f8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802125a:	9b05      	ldr	r3, [sp, #20]
 802125c:	ebb3 030b 	subs.w	r3, r3, fp
 8021260:	f100 809c 	bmi.w	802139c <_ZN8touchgfx7Outline10renderLineEiiii+0xb94>
 8021264:	f1c8 0120 	rsb	r1, r8, #32
 8021268:	2201      	movs	r2, #1
 802126a:	f04f 0b20 	mov.w	fp, #32
 802126e:	434d      	muls	r5, r1
 8021270:	9201      	str	r2, [sp, #4]
 8021272:	9a01      	ldr	r2, [sp, #4]
 8021274:	44d8      	add	r8, fp
 8021276:	fb95 f6f3 	sdiv	r6, r5, r3
 802127a:	fb03 5516 	mls	r5, r3, r6, r5
 802127e:	4417      	add	r7, r2
 8021280:	9a00      	ldr	r2, [sp, #0]
 8021282:	2d00      	cmp	r5, #0
 8021284:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8021288:	bfbc      	itt	lt
 802128a:	f106 36ff 	addlt.w	r6, r6, #4294967295	; 0xffffffff
 802128e:	18ed      	addlt	r5, r5, r3
 8021290:	eb07 0a02 	add.w	sl, r7, r2
 8021294:	9204      	str	r2, [sp, #16]
 8021296:	fb06 9808 	mla	r8, r6, r8, r9
 802129a:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 802129e:	4430      	add	r0, r6
 80212a0:	fa0f f188 	sxth.w	r1, r8
 80212a4:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 80212a8:	b200      	sxth	r0, r0
 80212aa:	eb09 4908 	add.w	r9, r9, r8, lsl #16
 80212ae:	8361      	strh	r1, [r4, #26]
 80212b0:	8320      	strh	r0, [r4, #24]
 80212b2:	45ca      	cmp	sl, r9
 80212b4:	d015      	beq.n	80212e2 <_ZN8touchgfx7Outline10renderLineEiiii+0xada>
 80212b6:	ea50 0201 	orrs.w	r2, r0, r1
 80212ba:	d00c      	beq.n	80212d6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80212bc:	f1b8 0f00 	cmp.w	r8, #0
 80212c0:	db09      	blt.n	80212d6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80212c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80212c4:	4541      	cmp	r1, r8
 80212c6:	dd06      	ble.n	80212d6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80212c8:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80212cc:	4288      	cmp	r0, r1
 80212ce:	d36e      	bcc.n	80213ae <_ZN8touchgfx7Outline10renderLineEiiii+0xba6>
 80212d0:	2101      	movs	r1, #1
 80212d2:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 80212d6:	2100      	movs	r1, #0
 80212d8:	9a00      	ldr	r2, [sp, #0]
 80212da:	82a7      	strh	r7, [r4, #20]
 80212dc:	82e2      	strh	r2, [r4, #22]
 80212de:	8321      	strh	r1, [r4, #24]
 80212e0:	8361      	strh	r1, [r4, #26]
 80212e2:	45be      	cmp	lr, r7
 80212e4:	44b4      	add	ip, r6
 80212e6:	d048      	beq.n	802137a <_ZN8touchgfx7Outline10renderLineEiiii+0xb72>
 80212e8:	9a03      	ldr	r2, [sp, #12]
 80212ea:	1aed      	subs	r5, r5, r3
 80212ec:	eba2 010c 	sub.w	r1, r2, ip
 80212f0:	440e      	add	r6, r1
 80212f2:	0176      	lsls	r6, r6, #5
 80212f4:	fb96 f8f3 	sdiv	r8, r6, r3
 80212f8:	fb03 6618 	mls	r6, r3, r8, r6
 80212fc:	2e00      	cmp	r6, #0
 80212fe:	bfbc      	itt	lt
 8021300:	f108 38ff 	addlt.w	r8, r8, #4294967295	; 0xffffffff
 8021304:	18f6      	addlt	r6, r6, r3
 8021306:	f108 0201 	add.w	r2, r8, #1
 802130a:	9205      	str	r2, [sp, #20]
 802130c:	19ad      	adds	r5, r5, r6
 802130e:	8b20      	ldrh	r0, [r4, #24]
 8021310:	8b61      	ldrh	r1, [r4, #26]
 8021312:	bf54      	ite	pl
 8021314:	f8dd 9014 	ldrpl.w	r9, [sp, #20]
 8021318:	46c1      	movmi	r9, r8
 802131a:	9a01      	ldr	r2, [sp, #4]
 802131c:	bf58      	it	pl
 802131e:	1aed      	subpl	r5, r5, r3
 8021320:	4448      	add	r0, r9
 8021322:	eb01 1149 	add.w	r1, r1, r9, lsl #5
 8021326:	4417      	add	r7, r2
 8021328:	44cc      	add	ip, r9
 802132a:	9a04      	ldr	r2, [sp, #16]
 802132c:	b200      	sxth	r0, r0
 802132e:	f9b4 9016 	ldrsh.w	r9, [r4, #22]
 8021332:	b209      	sxth	r1, r1
 8021334:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
 8021338:	443a      	add	r2, r7
 802133a:	8320      	strh	r0, [r4, #24]
 802133c:	eb0a 4a09 	add.w	sl, sl, r9, lsl #16
 8021340:	8361      	strh	r1, [r4, #26]
 8021342:	4552      	cmp	r2, sl
 8021344:	d017      	beq.n	8021376 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6e>
 8021346:	ea50 0201 	orrs.w	r2, r0, r1
 802134a:	d00d      	beq.n	8021368 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 802134c:	f1b9 0f00 	cmp.w	r9, #0
 8021350:	db0a      	blt.n	8021368 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8021352:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8021354:	4549      	cmp	r1, r9
 8021356:	dd07      	ble.n	8021368 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>
 8021358:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 802135c:	4288      	cmp	r0, r1
 802135e:	d337      	bcc.n	80213d0 <_ZN8touchgfx7Outline10renderLineEiiii+0xbc8>
 8021360:	f04f 0201 	mov.w	r2, #1
 8021364:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8021368:	9a00      	ldr	r2, [sp, #0]
 802136a:	82a7      	strh	r7, [r4, #20]
 802136c:	82e2      	strh	r2, [r4, #22]
 802136e:	f04f 0200 	mov.w	r2, #0
 8021372:	8322      	strh	r2, [r4, #24]
 8021374:	8362      	strh	r2, [r4, #26]
 8021376:	45be      	cmp	lr, r7
 8021378:	d1c8      	bne.n	802130c <_ZN8touchgfx7Outline10renderLineEiiii+0xb04>
 802137a:	9b03      	ldr	r3, [sp, #12]
 802137c:	8b62      	ldrh	r2, [r4, #26]
 802137e:	eba3 0c0c 	sub.w	ip, r3, ip
 8021382:	8b23      	ldrh	r3, [r4, #24]
 8021384:	4463      	add	r3, ip
 8021386:	8323      	strh	r3, [r4, #24]
 8021388:	9b02      	ldr	r3, [sp, #8]
 802138a:	3320      	adds	r3, #32
 802138c:	eba3 030b 	sub.w	r3, r3, fp
 8021390:	fb0c 2c03 	mla	ip, ip, r3, r2
 8021394:	f8a4 c01a 	strh.w	ip, [r4, #26]
 8021398:	f7ff baae 	b.w	80208f8 <_ZN8touchgfx7Outline10renderLineEiiii+0xf0>
 802139c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80213a0:	fb05 f508 	mul.w	r5, r5, r8
 80213a4:	425b      	negs	r3, r3
 80213a6:	f04f 0b00 	mov.w	fp, #0
 80213aa:	9201      	str	r2, [sp, #4]
 80213ac:	e761      	b.n	8021272 <_ZN8touchgfx7Outline10renderLineEiiii+0xa6a>
 80213ae:	f104 0814 	add.w	r8, r4, #20
 80213b2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80213b6:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 80213ba:	f8c9 0000 	str.w	r0, [r9]
 80213be:	f8c9 1004 	str.w	r1, [r9, #4]
 80213c2:	6921      	ldr	r1, [r4, #16]
 80213c4:	3108      	adds	r1, #8
 80213c6:	6121      	str	r1, [r4, #16]
 80213c8:	68a1      	ldr	r1, [r4, #8]
 80213ca:	3101      	adds	r1, #1
 80213cc:	60a1      	str	r1, [r4, #8]
 80213ce:	e782      	b.n	80212d6 <_ZN8touchgfx7Outline10renderLineEiiii+0xace>
 80213d0:	f104 0914 	add.w	r9, r4, #20
 80213d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80213d8:	e8b9 0003 	ldmia.w	r9!, {r0, r1}
 80213dc:	f8ca 0000 	str.w	r0, [sl]
 80213e0:	f8ca 1004 	str.w	r1, [sl, #4]
 80213e4:	6921      	ldr	r1, [r4, #16]
 80213e6:	3108      	adds	r1, #8
 80213e8:	6121      	str	r1, [r4, #16]
 80213ea:	68a1      	ldr	r1, [r4, #8]
 80213ec:	3101      	adds	r1, #1
 80213ee:	60a1      	str	r1, [r4, #8]
 80213f0:	e7ba      	b.n	8021368 <_ZN8touchgfx7Outline10renderLineEiiii+0xb60>

080213f2 <_ZN8touchgfx7Outline6lineToEii>:
 80213f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80213f4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80213f6:	4604      	mov	r4, r0
 80213f8:	460d      	mov	r5, r1
 80213fa:	4616      	mov	r6, r2
 80213fc:	079b      	lsls	r3, r3, #30
 80213fe:	d526      	bpl.n	802144e <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8021400:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8021404:	ea85 0001 	eor.w	r0, r5, r1
 8021408:	ea86 0302 	eor.w	r3, r6, r2
 802140c:	4303      	orrs	r3, r0
 802140e:	d01e      	beq.n	802144e <_ZN8touchgfx7Outline6lineToEii+0x5c>
 8021410:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8021412:	114b      	asrs	r3, r1, #5
 8021414:	9600      	str	r6, [sp, #0]
 8021416:	4283      	cmp	r3, r0
 8021418:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802141a:	bfb8      	it	lt
 802141c:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 802141e:	3301      	adds	r3, #1
 8021420:	4283      	cmp	r3, r0
 8021422:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8021424:	bfc8      	it	gt
 8021426:	6363      	strgt	r3, [r4, #52]	; 0x34
 8021428:	116b      	asrs	r3, r5, #5
 802142a:	4283      	cmp	r3, r0
 802142c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 802142e:	bfb8      	it	lt
 8021430:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 8021432:	3301      	adds	r3, #1
 8021434:	4283      	cmp	r3, r0
 8021436:	4620      	mov	r0, r4
 8021438:	bfc8      	it	gt
 802143a:	6363      	strgt	r3, [r4, #52]	; 0x34
 802143c:	462b      	mov	r3, r5
 802143e:	f7ff f9e3 	bl	8020808 <_ZN8touchgfx7Outline10renderLineEiiii>
 8021442:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8021444:	f043 0301 	orr.w	r3, r3, #1
 8021448:	e9c4 5607 	strd	r5, r6, [r4, #28]
 802144c:	63e3      	str	r3, [r4, #60]	; 0x3c
 802144e:	b002      	add	sp, #8
 8021450:	bd70      	pop	{r4, r5, r6, pc}

08021452 <_ZN8touchgfx7Outline6moveToEii>:
 8021452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021454:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8021456:	4615      	mov	r5, r2
 8021458:	4604      	mov	r4, r0
 802145a:	460e      	mov	r6, r1
 802145c:	079a      	lsls	r2, r3, #30
 802145e:	d401      	bmi.n	8021464 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8021460:	f7ff f98c 	bl	802077c <_ZN8touchgfx7Outline5resetEv>
 8021464:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8021466:	07db      	lsls	r3, r3, #31
 8021468:	d504      	bpl.n	8021474 <_ZN8touchgfx7Outline6moveToEii+0x22>
 802146a:	4620      	mov	r0, r4
 802146c:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 8021470:	f7ff ffbf 	bl	80213f2 <_ZN8touchgfx7Outline6lineToEii>
 8021474:	ea4f 1c66 	mov.w	ip, r6, asr #5
 8021478:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802147c:	116f      	asrs	r7, r5, #5
 802147e:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8021482:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 8021486:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 802148a:	4291      	cmp	r1, r2
 802148c:	d015      	beq.n	80214ba <_ZN8touchgfx7Outline6moveToEii+0x68>
 802148e:	8b61      	ldrh	r1, [r4, #26]
 8021490:	8b22      	ldrh	r2, [r4, #24]
 8021492:	430a      	orrs	r2, r1
 8021494:	d00b      	beq.n	80214ae <_ZN8touchgfx7Outline6moveToEii+0x5c>
 8021496:	2b00      	cmp	r3, #0
 8021498:	db09      	blt.n	80214ae <_ZN8touchgfx7Outline6moveToEii+0x5c>
 802149a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802149c:	429a      	cmp	r2, r3
 802149e:	dd06      	ble.n	80214ae <_ZN8touchgfx7Outline6moveToEii+0x5c>
 80214a0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 80214a4:	429a      	cmp	r2, r3
 80214a6:	d30d      	bcc.n	80214c4 <_ZN8touchgfx7Outline6moveToEii+0x72>
 80214a8:	2301      	movs	r3, #1
 80214aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80214ae:	2300      	movs	r3, #0
 80214b0:	f8a4 c014 	strh.w	ip, [r4, #20]
 80214b4:	82e7      	strh	r7, [r4, #22]
 80214b6:	8323      	strh	r3, [r4, #24]
 80214b8:	8363      	strh	r3, [r4, #26]
 80214ba:	61e6      	str	r6, [r4, #28]
 80214bc:	62a5      	str	r5, [r4, #40]	; 0x28
 80214be:	e9c4 5608 	strd	r5, r6, [r4, #32]
 80214c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80214c4:	f104 0314 	add.w	r3, r4, #20
 80214c8:	6922      	ldr	r2, [r4, #16]
 80214ca:	cb03      	ldmia	r3!, {r0, r1}
 80214cc:	6010      	str	r0, [r2, #0]
 80214ce:	6051      	str	r1, [r2, #4]
 80214d0:	6923      	ldr	r3, [r4, #16]
 80214d2:	3308      	adds	r3, #8
 80214d4:	6123      	str	r3, [r4, #16]
 80214d6:	68a3      	ldr	r3, [r4, #8]
 80214d8:	3301      	adds	r3, #1
 80214da:	60a3      	str	r3, [r4, #8]
 80214dc:	e7e7      	b.n	80214ae <_ZN8touchgfx7Outline6moveToEii+0x5c>

080214de <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80214de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214e2:	b0d1      	sub	sp, #324	; 0x144
 80214e4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80214e8:	466c      	mov	r4, sp
 80214ea:	1a0d      	subs	r5, r1, r0
 80214ec:	f100 0208 	add.w	r2, r0, #8
 80214f0:	2d48      	cmp	r5, #72	; 0x48
 80214f2:	f340 80ba 	ble.w	802166a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80214f6:	112d      	asrs	r5, r5, #4
 80214f8:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 80214fc:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8021500:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 8021504:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 8021508:	f9b0 8000 	ldrsh.w	r8, [r0]
 802150c:	681e      	ldr	r6, [r3, #0]
 802150e:	6006      	str	r6, [r0, #0]
 8021510:	685e      	ldr	r6, [r3, #4]
 8021512:	6046      	str	r6, [r0, #4]
 8021514:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 8021518:	f8a3 c004 	strh.w	ip, [r3, #4]
 802151c:	f8a3 e002 	strh.w	lr, [r3, #2]
 8021520:	80df      	strh	r7, [r3, #6]
 8021522:	f1a1 0308 	sub.w	r3, r1, #8
 8021526:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 802152a:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802152e:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 8021532:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8021536:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802153a:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 802153e:	45ac      	cmp	ip, r5
 8021540:	dd0f      	ble.n	8021562 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 8021542:	681d      	ldr	r5, [r3, #0]
 8021544:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 8021548:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 802154c:	6015      	str	r5, [r2, #0]
 802154e:	685d      	ldr	r5, [r3, #4]
 8021550:	6055      	str	r5, [r2, #4]
 8021552:	f821 7c08 	strh.w	r7, [r1, #-8]
 8021556:	f821 6c06 	strh.w	r6, [r1, #-6]
 802155a:	f821 ec04 	strh.w	lr, [r1, #-4]
 802155e:	f821 cc02 	strh.w	ip, [r1, #-2]
 8021562:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8021566:	f9b0 7000 	ldrsh.w	r7, [r0]
 802156a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802156e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8021572:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 8021576:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 802157a:	4565      	cmp	r5, ip
 802157c:	dd0d      	ble.n	802159a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 802157e:	6815      	ldr	r5, [r2, #0]
 8021580:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8021584:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8021588:	6005      	str	r5, [r0, #0]
 802158a:	6855      	ldr	r5, [r2, #4]
 802158c:	8107      	strh	r7, [r0, #8]
 802158e:	6045      	str	r5, [r0, #4]
 8021590:	8146      	strh	r6, [r0, #10]
 8021592:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8021596:	f8a0 c00e 	strh.w	ip, [r0, #14]
 802159a:	f9b0 7000 	ldrsh.w	r7, [r0]
 802159e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80215a2:	f931 ec06 	ldrsh.w	lr, [r1, #-6]
 80215a6:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80215aa:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 80215ae:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 80215b2:	45ac      	cmp	ip, r5
 80215b4:	dd0f      	ble.n	80215d6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 80215b6:	681d      	ldr	r5, [r3, #0]
 80215b8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80215bc:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80215c0:	6005      	str	r5, [r0, #0]
 80215c2:	685d      	ldr	r5, [r3, #4]
 80215c4:	6045      	str	r5, [r0, #4]
 80215c6:	f821 7c08 	strh.w	r7, [r1, #-8]
 80215ca:	f821 6c06 	strh.w	r6, [r1, #-6]
 80215ce:	f821 ec04 	strh.w	lr, [r1, #-4]
 80215d2:	f821 cc02 	strh.w	ip, [r1, #-2]
 80215d6:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 80215da:	f102 0508 	add.w	r5, r2, #8
 80215de:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 80215e2:	f9b0 e000 	ldrsh.w	lr, [r0]
 80215e6:	462f      	mov	r7, r5
 80215e8:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80215ec:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 80215f0:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 80215f4:	45b2      	cmp	sl, r6
 80215f6:	dc18      	bgt.n	802162a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 80215f8:	3b08      	subs	r3, #8
 80215fa:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 80215fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8021602:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 8021606:	45b2      	cmp	sl, r6
 8021608:	dbf6      	blt.n	80215f8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 802160a:	42ab      	cmp	r3, r5
 802160c:	681e      	ldr	r6, [r3, #0]
 802160e:	d30e      	bcc.n	802162e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 8021610:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 8021614:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8021618:	602e      	str	r6, [r5, #0]
 802161a:	685e      	ldr	r6, [r3, #4]
 802161c:	606e      	str	r6, [r5, #4]
 802161e:	f8a3 9000 	strh.w	r9, [r3]
 8021622:	f8a3 8002 	strh.w	r8, [r3, #2]
 8021626:	809f      	strh	r7, [r3, #4]
 8021628:	80da      	strh	r2, [r3, #6]
 802162a:	462a      	mov	r2, r5
 802162c:	e7d3      	b.n	80215d6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 802162e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8021632:	6006      	str	r6, [r0, #0]
 8021634:	685e      	ldr	r6, [r3, #4]
 8021636:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 802163a:	6046      	str	r6, [r0, #4]
 802163c:	1a1e      	subs	r6, r3, r0
 802163e:	80da      	strh	r2, [r3, #6]
 8021640:	1b4a      	subs	r2, r1, r5
 8021642:	f8a3 e000 	strh.w	lr, [r3]
 8021646:	10d2      	asrs	r2, r2, #3
 8021648:	f8a3 c002 	strh.w	ip, [r3, #2]
 802164c:	f8a3 8004 	strh.w	r8, [r3, #4]
 8021650:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 8021654:	bfb5      	itete	lt
 8021656:	e9c4 0300 	strdlt	r0, r3, [r4]
 802165a:	4607      	movge	r7, r0
 802165c:	460b      	movlt	r3, r1
 802165e:	e9c4 5100 	strdge	r5, r1, [r4]
 8021662:	4638      	mov	r0, r7
 8021664:	3408      	adds	r4, #8
 8021666:	4619      	mov	r1, r3
 8021668:	e73f      	b.n	80214ea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 802166a:	4291      	cmp	r1, r2
 802166c:	d925      	bls.n	80216ba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 802166e:	f1a2 0310 	sub.w	r3, r2, #16
 8021672:	f9b3 600a 	ldrsh.w	r6, [r3, #10]
 8021676:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 802167a:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 802167e:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 8021682:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8021686:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 802168a:	42b5      	cmp	r5, r6
 802168c:	dd13      	ble.n	80216b6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 802168e:	461d      	mov	r5, r3
 8021690:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 8021694:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 8021698:	3b08      	subs	r3, #8
 802169a:	f855 6f08 	ldr.w	r6, [r5, #8]!
 802169e:	619e      	str	r6, [r3, #24]
 80216a0:	42a8      	cmp	r0, r5
 80216a2:	686e      	ldr	r6, [r5, #4]
 80216a4:	f8a3 c010 	strh.w	ip, [r3, #16]
 80216a8:	61de      	str	r6, [r3, #28]
 80216aa:	825f      	strh	r7, [r3, #18]
 80216ac:	f8a3 8014 	strh.w	r8, [r3, #20]
 80216b0:	f8a3 e016 	strh.w	lr, [r3, #22]
 80216b4:	d1dd      	bne.n	8021672 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 80216b6:	3208      	adds	r2, #8
 80216b8:	e7d7      	b.n	802166a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 80216ba:	466b      	mov	r3, sp
 80216bc:	429c      	cmp	r4, r3
 80216be:	d903      	bls.n	80216c8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 80216c0:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80216c4:	3c08      	subs	r4, #8
 80216c6:	e710      	b.n	80214ea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 80216c8:	b051      	add	sp, #324	; 0x144
 80216ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080216ce <_ZN8touchgfx7Outline9sortCellsEv>:
 80216ce:	6881      	ldr	r1, [r0, #8]
 80216d0:	b111      	cbz	r1, 80216d8 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 80216d2:	68c0      	ldr	r0, [r0, #12]
 80216d4:	f7ff bf03 	b.w	80214de <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80216d8:	4770      	bx	lr

080216da <_ZN8touchgfx7Outline8getCellsEv>:
 80216da:	b510      	push	{r4, lr}
 80216dc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80216de:	4604      	mov	r4, r0
 80216e0:	07da      	lsls	r2, r3, #31
 80216e2:	d507      	bpl.n	80216f4 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 80216e4:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 80216e8:	f7ff fe83 	bl	80213f2 <_ZN8touchgfx7Outline6lineToEii>
 80216ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80216ee:	f023 0301 	bic.w	r3, r3, #1
 80216f2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80216f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80216f6:	079b      	lsls	r3, r3, #30
 80216f8:	d51a      	bpl.n	8021730 <_ZN8touchgfx7Outline8getCellsEv+0x56>
 80216fa:	8b62      	ldrh	r2, [r4, #26]
 80216fc:	8b23      	ldrh	r3, [r4, #24]
 80216fe:	4313      	orrs	r3, r2
 8021700:	d00d      	beq.n	802171e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8021702:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8021706:	2b00      	cmp	r3, #0
 8021708:	db09      	blt.n	802171e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 802170a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 802170c:	4293      	cmp	r3, r2
 802170e:	da06      	bge.n	802171e <_ZN8touchgfx7Outline8getCellsEv+0x44>
 8021710:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8021714:	429a      	cmp	r2, r3
 8021716:	d80d      	bhi.n	8021734 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 8021718:	2301      	movs	r3, #1
 802171a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 802171e:	68a0      	ldr	r0, [r4, #8]
 8021720:	b138      	cbz	r0, 8021732 <_ZN8touchgfx7Outline8getCellsEv+0x58>
 8021722:	4620      	mov	r0, r4
 8021724:	f7ff ffd3 	bl	80216ce <_ZN8touchgfx7Outline9sortCellsEv>
 8021728:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802172a:	f023 0302 	bic.w	r3, r3, #2
 802172e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8021730:	68e0      	ldr	r0, [r4, #12]
 8021732:	bd10      	pop	{r4, pc}
 8021734:	f104 0314 	add.w	r3, r4, #20
 8021738:	6922      	ldr	r2, [r4, #16]
 802173a:	cb03      	ldmia	r3!, {r0, r1}
 802173c:	6010      	str	r0, [r2, #0]
 802173e:	6051      	str	r1, [r2, #4]
 8021740:	6923      	ldr	r3, [r4, #16]
 8021742:	3308      	adds	r3, #8
 8021744:	6123      	str	r3, [r4, #16]
 8021746:	68a3      	ldr	r3, [r4, #8]
 8021748:	3301      	adds	r3, #1
 802174a:	60a3      	str	r3, [r4, #8]
 802174c:	e7e7      	b.n	802171e <_ZN8touchgfx7Outline8getCellsEv+0x44>

0802174e <_ZN8touchgfx8ScanlineD1Ev>:
 802174e:	4770      	bx	lr

08021750 <_ZN8touchgfx8ScanlineD0Ev>:
 8021750:	b510      	push	{r4, lr}
 8021752:	4604      	mov	r4, r0
 8021754:	2124      	movs	r1, #36	; 0x24
 8021756:	f000 f87a 	bl	802184e <_ZdlPvj>
 802175a:	4620      	mov	r0, r4
 802175c:	bd10      	pop	{r4, pc}

0802175e <_ZN8touchgfx8Scanline5resetEv>:
 802175e:	b510      	push	{r4, lr}
 8021760:	4604      	mov	r4, r0
 8021762:	f7f3 f937 	bl	80149d4 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 8021766:	61a0      	str	r0, [r4, #24]
 8021768:	f7f3 f93a 	bl	80149e0 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 802176c:	61e0      	str	r0, [r4, #28]
 802176e:	f7f3 f93d 	bl	80149ec <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 8021772:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8021776:	6220      	str	r0, [r4, #32]
 8021778:	6160      	str	r0, [r4, #20]
 802177a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 802177e:	69e3      	ldr	r3, [r4, #28]
 8021780:	6123      	str	r3, [r4, #16]
 8021782:	2300      	movs	r3, #0
 8021784:	60e3      	str	r3, [r4, #12]
 8021786:	bd10      	pop	{r4, pc}

08021788 <_ZN8touchgfx8ScanlineC1Ev>:
 8021788:	4b07      	ldr	r3, [pc, #28]	; (80217a8 <_ZN8touchgfx8ScanlineC1Ev+0x20>)
 802178a:	b510      	push	{r4, lr}
 802178c:	6003      	str	r3, [r0, #0]
 802178e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8021792:	4604      	mov	r4, r0
 8021794:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8021798:	2300      	movs	r3, #0
 802179a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802179e:	6143      	str	r3, [r0, #20]
 80217a0:	f7ff ffdd 	bl	802175e <_ZN8touchgfx8Scanline5resetEv>
 80217a4:	4620      	mov	r0, r4
 80217a6:	bd10      	pop	{r4, pc}
 80217a8:	080282bc 	.word	0x080282bc

080217ac <_ZN8touchgfx8Scanline7addSpanEiijj>:
 80217ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80217b0:	1e0c      	subs	r4, r1, #0
 80217b2:	4605      	mov	r5, r0
 80217b4:	4617      	mov	r7, r2
 80217b6:	461e      	mov	r6, r3
 80217b8:	da03      	bge.n	80217c2 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 80217ba:	4426      	add	r6, r4
 80217bc:	2e01      	cmp	r6, #1
 80217be:	d421      	bmi.n	8021804 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80217c0:	2400      	movs	r4, #0
 80217c2:	f7f3 f901 	bl	80149c8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80217c6:	42a0      	cmp	r0, r4
 80217c8:	d91c      	bls.n	8021804 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 80217ca:	eb04 0806 	add.w	r8, r4, r6
 80217ce:	f7f3 f8fb 	bl	80149c8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80217d2:	4580      	cmp	r8, r0
 80217d4:	d902      	bls.n	80217dc <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 80217d6:	f7f3 f8f7 	bl	80149c8 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 80217da:	1b06      	subs	r6, r0, r4
 80217dc:	69a8      	ldr	r0, [r5, #24]
 80217de:	4632      	mov	r2, r6
 80217e0:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80217e4:	4420      	add	r0, r4
 80217e6:	f7f4 fe7c 	bl	80164e2 <_ZN8touchgfx6memsetEPvhm>
 80217ea:	686b      	ldr	r3, [r5, #4]
 80217ec:	b2b2      	uxth	r2, r6
 80217ee:	3301      	adds	r3, #1
 80217f0:	42a3      	cmp	r3, r4
 80217f2:	696b      	ldr	r3, [r5, #20]
 80217f4:	d108      	bne.n	8021808 <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 80217f6:	8819      	ldrh	r1, [r3, #0]
 80217f8:	440a      	add	r2, r1
 80217fa:	801a      	strh	r2, [r3, #0]
 80217fc:	3c01      	subs	r4, #1
 80217fe:	4434      	add	r4, r6
 8021800:	e9c5 4701 	strd	r4, r7, [r5, #4]
 8021804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021808:	1c99      	adds	r1, r3, #2
 802180a:	6169      	str	r1, [r5, #20]
 802180c:	805a      	strh	r2, [r3, #2]
 802180e:	692b      	ldr	r3, [r5, #16]
 8021810:	1c9a      	adds	r2, r3, #2
 8021812:	612a      	str	r2, [r5, #16]
 8021814:	805c      	strh	r4, [r3, #2]
 8021816:	68eb      	ldr	r3, [r5, #12]
 8021818:	3301      	adds	r3, #1
 802181a:	60eb      	str	r3, [r5, #12]
 802181c:	e7ee      	b.n	80217fc <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0802181e <_ZN8touchgfx15RenderingBufferC1Ev>:
 802181e:	2200      	movs	r2, #0
 8021820:	6002      	str	r2, [r0, #0]
 8021822:	7102      	strb	r2, [r0, #4]
 8021824:	6102      	str	r2, [r0, #16]
 8021826:	e9c0 2202 	strd	r2, r2, [r0, #8]
 802182a:	4770      	bx	lr

0802182c <_ZN8touchgfx15RenderingBufferD1Ev>:
 802182c:	4770      	bx	lr

0802182e <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 802182e:	6083      	str	r3, [r0, #8]
 8021830:	9b00      	ldr	r3, [sp, #0]
 8021832:	6001      	str	r1, [r0, #0]
 8021834:	60c3      	str	r3, [r0, #12]
 8021836:	9b01      	ldr	r3, [sp, #4]
 8021838:	7102      	strb	r2, [r0, #4]
 802183a:	6103      	str	r3, [r0, #16]
 802183c:	4770      	bx	lr

0802183e <__aeabi_atexit>:
 802183e:	460b      	mov	r3, r1
 8021840:	4601      	mov	r1, r0
 8021842:	4618      	mov	r0, r3
 8021844:	f000 bda0 	b.w	8022388 <__cxa_atexit>

08021848 <__cxa_pure_virtual>:
 8021848:	b508      	push	{r3, lr}
 802184a:	f000 f81f 	bl	802188c <_ZSt9terminatev>

0802184e <_ZdlPvj>:
 802184e:	f000 b80f 	b.w	8021870 <_ZdlPv>

08021852 <__cxa_guard_acquire>:
 8021852:	6803      	ldr	r3, [r0, #0]
 8021854:	07db      	lsls	r3, r3, #31
 8021856:	d406      	bmi.n	8021866 <__cxa_guard_acquire+0x14>
 8021858:	7843      	ldrb	r3, [r0, #1]
 802185a:	b103      	cbz	r3, 802185e <__cxa_guard_acquire+0xc>
 802185c:	deff      	udf	#255	; 0xff
 802185e:	2301      	movs	r3, #1
 8021860:	7043      	strb	r3, [r0, #1]
 8021862:	4618      	mov	r0, r3
 8021864:	4770      	bx	lr
 8021866:	2000      	movs	r0, #0
 8021868:	4770      	bx	lr

0802186a <__cxa_guard_release>:
 802186a:	2301      	movs	r3, #1
 802186c:	6003      	str	r3, [r0, #0]
 802186e:	4770      	bx	lr

08021870 <_ZdlPv>:
 8021870:	f000 bddc 	b.w	802242c <free>

08021874 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8021874:	b508      	push	{r3, lr}
 8021876:	4780      	blx	r0
 8021878:	f000 fd5a 	bl	8022330 <abort>

0802187c <_ZSt13get_terminatev>:
 802187c:	4b02      	ldr	r3, [pc, #8]	; (8021888 <_ZSt13get_terminatev+0xc>)
 802187e:	6818      	ldr	r0, [r3, #0]
 8021880:	f3bf 8f5b 	dmb	ish
 8021884:	4770      	bx	lr
 8021886:	bf00      	nop
 8021888:	200000a4 	.word	0x200000a4

0802188c <_ZSt9terminatev>:
 802188c:	b508      	push	{r3, lr}
 802188e:	f7ff fff5 	bl	802187c <_ZSt13get_terminatev>
 8021892:	f7ff ffef 	bl	8021874 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08021898 <sinf>:
 8021898:	ee10 3a10 	vmov	r3, s0
 802189c:	b507      	push	{r0, r1, r2, lr}
 802189e:	4a1d      	ldr	r2, [pc, #116]	; (8021914 <sinf+0x7c>)
 80218a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80218a4:	4293      	cmp	r3, r2
 80218a6:	dc05      	bgt.n	80218b4 <sinf+0x1c>
 80218a8:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8021918 <sinf+0x80>
 80218ac:	2000      	movs	r0, #0
 80218ae:	f000 fc41 	bl	8022134 <__kernel_sinf>
 80218b2:	e004      	b.n	80218be <sinf+0x26>
 80218b4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80218b8:	db04      	blt.n	80218c4 <sinf+0x2c>
 80218ba:	ee30 0a40 	vsub.f32	s0, s0, s0
 80218be:	b003      	add	sp, #12
 80218c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80218c4:	4668      	mov	r0, sp
 80218c6:	f000 f829 	bl	802191c <__ieee754_rem_pio2f>
 80218ca:	f000 0003 	and.w	r0, r0, #3
 80218ce:	2801      	cmp	r0, #1
 80218d0:	d008      	beq.n	80218e4 <sinf+0x4c>
 80218d2:	2802      	cmp	r0, #2
 80218d4:	d00d      	beq.n	80218f2 <sinf+0x5a>
 80218d6:	b9b0      	cbnz	r0, 8021906 <sinf+0x6e>
 80218d8:	2001      	movs	r0, #1
 80218da:	eddd 0a01 	vldr	s1, [sp, #4]
 80218de:	ed9d 0a00 	vldr	s0, [sp]
 80218e2:	e7e4      	b.n	80218ae <sinf+0x16>
 80218e4:	eddd 0a01 	vldr	s1, [sp, #4]
 80218e8:	ed9d 0a00 	vldr	s0, [sp]
 80218ec:	f000 f942 	bl	8021b74 <__kernel_cosf>
 80218f0:	e7e5      	b.n	80218be <sinf+0x26>
 80218f2:	2001      	movs	r0, #1
 80218f4:	eddd 0a01 	vldr	s1, [sp, #4]
 80218f8:	ed9d 0a00 	vldr	s0, [sp]
 80218fc:	f000 fc1a 	bl	8022134 <__kernel_sinf>
 8021900:	eeb1 0a40 	vneg.f32	s0, s0
 8021904:	e7db      	b.n	80218be <sinf+0x26>
 8021906:	eddd 0a01 	vldr	s1, [sp, #4]
 802190a:	ed9d 0a00 	vldr	s0, [sp]
 802190e:	f000 f931 	bl	8021b74 <__kernel_cosf>
 8021912:	e7f5      	b.n	8021900 <sinf+0x68>
 8021914:	3f490fd8 	.word	0x3f490fd8
 8021918:	00000000 	.word	0x00000000

0802191c <__ieee754_rem_pio2f>:
 802191c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802191e:	ee10 6a10 	vmov	r6, s0
 8021922:	4b86      	ldr	r3, [pc, #536]	; (8021b3c <__ieee754_rem_pio2f+0x220>)
 8021924:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8021928:	429c      	cmp	r4, r3
 802192a:	b087      	sub	sp, #28
 802192c:	4605      	mov	r5, r0
 802192e:	dc05      	bgt.n	802193c <__ieee754_rem_pio2f+0x20>
 8021930:	2300      	movs	r3, #0
 8021932:	ed85 0a00 	vstr	s0, [r5]
 8021936:	6043      	str	r3, [r0, #4]
 8021938:	2000      	movs	r0, #0
 802193a:	e020      	b.n	802197e <__ieee754_rem_pio2f+0x62>
 802193c:	4b80      	ldr	r3, [pc, #512]	; (8021b40 <__ieee754_rem_pio2f+0x224>)
 802193e:	429c      	cmp	r4, r3
 8021940:	dc38      	bgt.n	80219b4 <__ieee754_rem_pio2f+0x98>
 8021942:	2e00      	cmp	r6, #0
 8021944:	f024 040f 	bic.w	r4, r4, #15
 8021948:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8021b44 <__ieee754_rem_pio2f+0x228>
 802194c:	4b7e      	ldr	r3, [pc, #504]	; (8021b48 <__ieee754_rem_pio2f+0x22c>)
 802194e:	dd18      	ble.n	8021982 <__ieee754_rem_pio2f+0x66>
 8021950:	429c      	cmp	r4, r3
 8021952:	ee70 7a47 	vsub.f32	s15, s0, s14
 8021956:	bf09      	itett	eq
 8021958:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8021b4c <__ieee754_rem_pio2f+0x230>
 802195c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8021b50 <__ieee754_rem_pio2f+0x234>
 8021960:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8021964:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8021b54 <__ieee754_rem_pio2f+0x238>
 8021968:	ee77 6ac7 	vsub.f32	s13, s15, s14
 802196c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8021970:	edc0 6a00 	vstr	s13, [r0]
 8021974:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021978:	edc0 7a01 	vstr	s15, [r0, #4]
 802197c:	2001      	movs	r0, #1
 802197e:	b007      	add	sp, #28
 8021980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021982:	429c      	cmp	r4, r3
 8021984:	ee70 7a07 	vadd.f32	s15, s0, s14
 8021988:	bf09      	itett	eq
 802198a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8021b4c <__ieee754_rem_pio2f+0x230>
 802198e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8021b50 <__ieee754_rem_pio2f+0x234>
 8021992:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8021996:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8021b54 <__ieee754_rem_pio2f+0x238>
 802199a:	ee77 6a87 	vadd.f32	s13, s15, s14
 802199e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80219a2:	edc0 6a00 	vstr	s13, [r0]
 80219a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80219aa:	edc0 7a01 	vstr	s15, [r0, #4]
 80219ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80219b2:	e7e4      	b.n	802197e <__ieee754_rem_pio2f+0x62>
 80219b4:	4b68      	ldr	r3, [pc, #416]	; (8021b58 <__ieee754_rem_pio2f+0x23c>)
 80219b6:	429c      	cmp	r4, r3
 80219b8:	dc71      	bgt.n	8021a9e <__ieee754_rem_pio2f+0x182>
 80219ba:	f000 fc03 	bl	80221c4 <fabsf>
 80219be:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8021b5c <__ieee754_rem_pio2f+0x240>
 80219c2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80219c6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80219ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80219ce:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80219d2:	ee17 0a90 	vmov	r0, s15
 80219d6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8021b44 <__ieee754_rem_pio2f+0x228>
 80219da:	eeb1 7a46 	vneg.f32	s14, s12
 80219de:	eea7 0a27 	vfma.f32	s0, s14, s15
 80219e2:	281f      	cmp	r0, #31
 80219e4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8021b50 <__ieee754_rem_pio2f+0x234>
 80219e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80219ec:	ee70 6a67 	vsub.f32	s13, s0, s15
 80219f0:	ee16 3a90 	vmov	r3, s13
 80219f4:	dc1c      	bgt.n	8021a30 <__ieee754_rem_pio2f+0x114>
 80219f6:	1e47      	subs	r7, r0, #1
 80219f8:	4959      	ldr	r1, [pc, #356]	; (8021b60 <__ieee754_rem_pio2f+0x244>)
 80219fa:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80219fe:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8021a02:	428a      	cmp	r2, r1
 8021a04:	d014      	beq.n	8021a30 <__ieee754_rem_pio2f+0x114>
 8021a06:	602b      	str	r3, [r5, #0]
 8021a08:	ed95 7a00 	vldr	s14, [r5]
 8021a0c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8021a10:	2e00      	cmp	r6, #0
 8021a12:	ee30 0a67 	vsub.f32	s0, s0, s15
 8021a16:	ed85 0a01 	vstr	s0, [r5, #4]
 8021a1a:	dab0      	bge.n	802197e <__ieee754_rem_pio2f+0x62>
 8021a1c:	eeb1 7a47 	vneg.f32	s14, s14
 8021a20:	eeb1 0a40 	vneg.f32	s0, s0
 8021a24:	ed85 7a00 	vstr	s14, [r5]
 8021a28:	ed85 0a01 	vstr	s0, [r5, #4]
 8021a2c:	4240      	negs	r0, r0
 8021a2e:	e7a6      	b.n	802197e <__ieee754_rem_pio2f+0x62>
 8021a30:	15e4      	asrs	r4, r4, #23
 8021a32:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8021a36:	1aa2      	subs	r2, r4, r2
 8021a38:	2a08      	cmp	r2, #8
 8021a3a:	dde4      	ble.n	8021a06 <__ieee754_rem_pio2f+0xea>
 8021a3c:	eddf 7a43 	vldr	s15, [pc, #268]	; 8021b4c <__ieee754_rem_pio2f+0x230>
 8021a40:	eef0 6a40 	vmov.f32	s13, s0
 8021a44:	eee7 6a27 	vfma.f32	s13, s14, s15
 8021a48:	ee30 0a66 	vsub.f32	s0, s0, s13
 8021a4c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8021a50:	eddf 7a40 	vldr	s15, [pc, #256]	; 8021b54 <__ieee754_rem_pio2f+0x238>
 8021a54:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8021a58:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8021a5c:	eef0 7a40 	vmov.f32	s15, s0
 8021a60:	ee15 3a90 	vmov	r3, s11
 8021a64:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8021a68:	1aa4      	subs	r4, r4, r2
 8021a6a:	2c19      	cmp	r4, #25
 8021a6c:	dc04      	bgt.n	8021a78 <__ieee754_rem_pio2f+0x15c>
 8021a6e:	edc5 5a00 	vstr	s11, [r5]
 8021a72:	eeb0 0a66 	vmov.f32	s0, s13
 8021a76:	e7c7      	b.n	8021a08 <__ieee754_rem_pio2f+0xec>
 8021a78:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8021b64 <__ieee754_rem_pio2f+0x248>
 8021a7c:	eeb0 0a66 	vmov.f32	s0, s13
 8021a80:	eea7 0a25 	vfma.f32	s0, s14, s11
 8021a84:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8021a88:	eee7 7a25 	vfma.f32	s15, s14, s11
 8021a8c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8021b68 <__ieee754_rem_pio2f+0x24c>
 8021a90:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8021a94:	ee30 7a67 	vsub.f32	s14, s0, s15
 8021a98:	ed85 7a00 	vstr	s14, [r5]
 8021a9c:	e7b4      	b.n	8021a08 <__ieee754_rem_pio2f+0xec>
 8021a9e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8021aa2:	db06      	blt.n	8021ab2 <__ieee754_rem_pio2f+0x196>
 8021aa4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8021aa8:	edc0 7a01 	vstr	s15, [r0, #4]
 8021aac:	edc0 7a00 	vstr	s15, [r0]
 8021ab0:	e742      	b.n	8021938 <__ieee754_rem_pio2f+0x1c>
 8021ab2:	15e2      	asrs	r2, r4, #23
 8021ab4:	3a86      	subs	r2, #134	; 0x86
 8021ab6:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8021aba:	ee07 3a90 	vmov	s15, r3
 8021abe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8021ac2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8021b6c <__ieee754_rem_pio2f+0x250>
 8021ac6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021aca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021ace:	ed8d 7a03 	vstr	s14, [sp, #12]
 8021ad2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8021ad6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8021ada:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021ade:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021ae2:	ed8d 7a04 	vstr	s14, [sp, #16]
 8021ae6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8021aea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8021aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021af2:	edcd 7a05 	vstr	s15, [sp, #20]
 8021af6:	d11e      	bne.n	8021b36 <__ieee754_rem_pio2f+0x21a>
 8021af8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8021afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b00:	bf0c      	ite	eq
 8021b02:	2301      	moveq	r3, #1
 8021b04:	2302      	movne	r3, #2
 8021b06:	491a      	ldr	r1, [pc, #104]	; (8021b70 <__ieee754_rem_pio2f+0x254>)
 8021b08:	9101      	str	r1, [sp, #4]
 8021b0a:	2102      	movs	r1, #2
 8021b0c:	9100      	str	r1, [sp, #0]
 8021b0e:	a803      	add	r0, sp, #12
 8021b10:	4629      	mov	r1, r5
 8021b12:	f000 f88d 	bl	8021c30 <__kernel_rem_pio2f>
 8021b16:	2e00      	cmp	r6, #0
 8021b18:	f6bf af31 	bge.w	802197e <__ieee754_rem_pio2f+0x62>
 8021b1c:	edd5 7a00 	vldr	s15, [r5]
 8021b20:	eef1 7a67 	vneg.f32	s15, s15
 8021b24:	edc5 7a00 	vstr	s15, [r5]
 8021b28:	edd5 7a01 	vldr	s15, [r5, #4]
 8021b2c:	eef1 7a67 	vneg.f32	s15, s15
 8021b30:	edc5 7a01 	vstr	s15, [r5, #4]
 8021b34:	e77a      	b.n	8021a2c <__ieee754_rem_pio2f+0x110>
 8021b36:	2303      	movs	r3, #3
 8021b38:	e7e5      	b.n	8021b06 <__ieee754_rem_pio2f+0x1ea>
 8021b3a:	bf00      	nop
 8021b3c:	3f490fd8 	.word	0x3f490fd8
 8021b40:	4016cbe3 	.word	0x4016cbe3
 8021b44:	3fc90f80 	.word	0x3fc90f80
 8021b48:	3fc90fd0 	.word	0x3fc90fd0
 8021b4c:	37354400 	.word	0x37354400
 8021b50:	37354443 	.word	0x37354443
 8021b54:	2e85a308 	.word	0x2e85a308
 8021b58:	43490f80 	.word	0x43490f80
 8021b5c:	3f22f984 	.word	0x3f22f984
 8021b60:	080282c4 	.word	0x080282c4
 8021b64:	2e85a300 	.word	0x2e85a300
 8021b68:	248d3132 	.word	0x248d3132
 8021b6c:	43800000 	.word	0x43800000
 8021b70:	08028344 	.word	0x08028344

08021b74 <__kernel_cosf>:
 8021b74:	ee10 3a10 	vmov	r3, s0
 8021b78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021b7c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8021b80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021b84:	da05      	bge.n	8021b92 <__kernel_cosf+0x1e>
 8021b86:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8021b8a:	ee17 2a90 	vmov	r2, s15
 8021b8e:	2a00      	cmp	r2, #0
 8021b90:	d03b      	beq.n	8021c0a <__kernel_cosf+0x96>
 8021b92:	ee20 6a00 	vmul.f32	s12, s0, s0
 8021b96:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8021b9a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8021c10 <__kernel_cosf+0x9c>
 8021b9e:	4a1d      	ldr	r2, [pc, #116]	; (8021c14 <__kernel_cosf+0xa0>)
 8021ba0:	ee66 7a07 	vmul.f32	s15, s12, s14
 8021ba4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8021c18 <__kernel_cosf+0xa4>
 8021ba8:	eea6 7a25 	vfma.f32	s14, s12, s11
 8021bac:	4293      	cmp	r3, r2
 8021bae:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8021c1c <__kernel_cosf+0xa8>
 8021bb2:	eee7 5a06 	vfma.f32	s11, s14, s12
 8021bb6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8021c20 <__kernel_cosf+0xac>
 8021bba:	eea5 7a86 	vfma.f32	s14, s11, s12
 8021bbe:	eddf 5a19 	vldr	s11, [pc, #100]	; 8021c24 <__kernel_cosf+0xb0>
 8021bc2:	eee7 5a06 	vfma.f32	s11, s14, s12
 8021bc6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8021c28 <__kernel_cosf+0xb4>
 8021bca:	eea5 7a86 	vfma.f32	s14, s11, s12
 8021bce:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8021bd2:	ee27 7a06 	vmul.f32	s14, s14, s12
 8021bd6:	eee6 0a07 	vfma.f32	s1, s12, s14
 8021bda:	dc04      	bgt.n	8021be6 <__kernel_cosf+0x72>
 8021bdc:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8021be0:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8021be4:	4770      	bx	lr
 8021be6:	4a11      	ldr	r2, [pc, #68]	; (8021c2c <__kernel_cosf+0xb8>)
 8021be8:	4293      	cmp	r3, r2
 8021bea:	bfda      	itte	le
 8021bec:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8021bf0:	ee07 3a10 	vmovle	s14, r3
 8021bf4:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8021bf8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021bfc:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8021c00:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8021c04:	ee30 0a67 	vsub.f32	s0, s0, s15
 8021c08:	4770      	bx	lr
 8021c0a:	eeb0 0a66 	vmov.f32	s0, s13
 8021c0e:	4770      	bx	lr
 8021c10:	ad47d74e 	.word	0xad47d74e
 8021c14:	3e999999 	.word	0x3e999999
 8021c18:	310f74f6 	.word	0x310f74f6
 8021c1c:	b493f27c 	.word	0xb493f27c
 8021c20:	37d00d01 	.word	0x37d00d01
 8021c24:	bab60b61 	.word	0xbab60b61
 8021c28:	3d2aaaab 	.word	0x3d2aaaab
 8021c2c:	3f480000 	.word	0x3f480000

08021c30 <__kernel_rem_pio2f>:
 8021c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c34:	ed2d 8b04 	vpush	{d8-d9}
 8021c38:	b0d7      	sub	sp, #348	; 0x15c
 8021c3a:	469b      	mov	fp, r3
 8021c3c:	460e      	mov	r6, r1
 8021c3e:	4bbe      	ldr	r3, [pc, #760]	; (8021f38 <__kernel_rem_pio2f+0x308>)
 8021c40:	9964      	ldr	r1, [sp, #400]	; 0x190
 8021c42:	9002      	str	r0, [sp, #8]
 8021c44:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8021c48:	9865      	ldr	r0, [sp, #404]	; 0x194
 8021c4a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8021f48 <__kernel_rem_pio2f+0x318>
 8021c4e:	1ed1      	subs	r1, r2, #3
 8021c50:	2308      	movs	r3, #8
 8021c52:	fb91 f1f3 	sdiv	r1, r1, r3
 8021c56:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8021c5a:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 8021c5e:	1c4c      	adds	r4, r1, #1
 8021c60:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8021c64:	eba1 050a 	sub.w	r5, r1, sl
 8021c68:	aa1a      	add	r2, sp, #104	; 0x68
 8021c6a:	eb09 070a 	add.w	r7, r9, sl
 8021c6e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8021c72:	4696      	mov	lr, r2
 8021c74:	2300      	movs	r3, #0
 8021c76:	42bb      	cmp	r3, r7
 8021c78:	dd0f      	ble.n	8021c9a <__kernel_rem_pio2f+0x6a>
 8021c7a:	af42      	add	r7, sp, #264	; 0x108
 8021c7c:	2200      	movs	r2, #0
 8021c7e:	454a      	cmp	r2, r9
 8021c80:	dc27      	bgt.n	8021cd2 <__kernel_rem_pio2f+0xa2>
 8021c82:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8021c86:	eb0b 0302 	add.w	r3, fp, r2
 8021c8a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8021c8e:	9d02      	ldr	r5, [sp, #8]
 8021c90:	eddf 7aad 	vldr	s15, [pc, #692]	; 8021f48 <__kernel_rem_pio2f+0x318>
 8021c94:	f04f 0c00 	mov.w	ip, #0
 8021c98:	e015      	b.n	8021cc6 <__kernel_rem_pio2f+0x96>
 8021c9a:	42dd      	cmn	r5, r3
 8021c9c:	bf5d      	ittte	pl
 8021c9e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8021ca2:	ee07 2a90 	vmovpl	s15, r2
 8021ca6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8021caa:	eef0 7a47 	vmovmi.f32	s15, s14
 8021cae:	ecee 7a01 	vstmia	lr!, {s15}
 8021cb2:	3301      	adds	r3, #1
 8021cb4:	e7df      	b.n	8021c76 <__kernel_rem_pio2f+0x46>
 8021cb6:	ecf5 6a01 	vldmia	r5!, {s13}
 8021cba:	ed33 7a01 	vldmdb	r3!, {s14}
 8021cbe:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021cc2:	f10c 0c01 	add.w	ip, ip, #1
 8021cc6:	45d4      	cmp	ip, sl
 8021cc8:	ddf5      	ble.n	8021cb6 <__kernel_rem_pio2f+0x86>
 8021cca:	ece7 7a01 	vstmia	r7!, {s15}
 8021cce:	3201      	adds	r2, #1
 8021cd0:	e7d5      	b.n	8021c7e <__kernel_rem_pio2f+0x4e>
 8021cd2:	ab06      	add	r3, sp, #24
 8021cd4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8021cd8:	9304      	str	r3, [sp, #16]
 8021cda:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8021f44 <__kernel_rem_pio2f+0x314>
 8021cde:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8021f40 <__kernel_rem_pio2f+0x310>
 8021ce2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8021ce6:	9303      	str	r3, [sp, #12]
 8021ce8:	464d      	mov	r5, r9
 8021cea:	ab56      	add	r3, sp, #344	; 0x158
 8021cec:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8021cf0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8021cf4:	3f01      	subs	r7, #1
 8021cf6:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8021cfa:	00bf      	lsls	r7, r7, #2
 8021cfc:	ab56      	add	r3, sp, #344	; 0x158
 8021cfe:	19da      	adds	r2, r3, r7
 8021d00:	3a4c      	subs	r2, #76	; 0x4c
 8021d02:	2300      	movs	r3, #0
 8021d04:	1ae9      	subs	r1, r5, r3
 8021d06:	2900      	cmp	r1, #0
 8021d08:	dc4c      	bgt.n	8021da4 <__kernel_rem_pio2f+0x174>
 8021d0a:	4620      	mov	r0, r4
 8021d0c:	f000 faa4 	bl	8022258 <scalbnf>
 8021d10:	eeb0 8a40 	vmov.f32	s16, s0
 8021d14:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8021d18:	ee28 0a00 	vmul.f32	s0, s16, s0
 8021d1c:	f000 fa5a 	bl	80221d4 <floorf>
 8021d20:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8021d24:	eea0 8a67 	vfms.f32	s16, s0, s15
 8021d28:	2c00      	cmp	r4, #0
 8021d2a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8021d2e:	edcd 7a01 	vstr	s15, [sp, #4]
 8021d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021d36:	ee38 8a67 	vsub.f32	s16, s16, s15
 8021d3a:	dd48      	ble.n	8021dce <__kernel_rem_pio2f+0x19e>
 8021d3c:	1e69      	subs	r1, r5, #1
 8021d3e:	ab06      	add	r3, sp, #24
 8021d40:	f1c4 0008 	rsb	r0, r4, #8
 8021d44:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8021d48:	9a01      	ldr	r2, [sp, #4]
 8021d4a:	fa4c f300 	asr.w	r3, ip, r0
 8021d4e:	441a      	add	r2, r3
 8021d50:	4083      	lsls	r3, r0
 8021d52:	9201      	str	r2, [sp, #4]
 8021d54:	ebac 0203 	sub.w	r2, ip, r3
 8021d58:	ab06      	add	r3, sp, #24
 8021d5a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8021d5e:	f1c4 0307 	rsb	r3, r4, #7
 8021d62:	fa42 f803 	asr.w	r8, r2, r3
 8021d66:	f1b8 0f00 	cmp.w	r8, #0
 8021d6a:	dd41      	ble.n	8021df0 <__kernel_rem_pio2f+0x1c0>
 8021d6c:	9b01      	ldr	r3, [sp, #4]
 8021d6e:	2000      	movs	r0, #0
 8021d70:	3301      	adds	r3, #1
 8021d72:	9301      	str	r3, [sp, #4]
 8021d74:	4601      	mov	r1, r0
 8021d76:	4285      	cmp	r5, r0
 8021d78:	dc6d      	bgt.n	8021e56 <__kernel_rem_pio2f+0x226>
 8021d7a:	2c00      	cmp	r4, #0
 8021d7c:	dd04      	ble.n	8021d88 <__kernel_rem_pio2f+0x158>
 8021d7e:	2c01      	cmp	r4, #1
 8021d80:	d07e      	beq.n	8021e80 <__kernel_rem_pio2f+0x250>
 8021d82:	2c02      	cmp	r4, #2
 8021d84:	f000 8086 	beq.w	8021e94 <__kernel_rem_pio2f+0x264>
 8021d88:	f1b8 0f02 	cmp.w	r8, #2
 8021d8c:	d130      	bne.n	8021df0 <__kernel_rem_pio2f+0x1c0>
 8021d8e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8021d92:	ee30 8a48 	vsub.f32	s16, s0, s16
 8021d96:	b359      	cbz	r1, 8021df0 <__kernel_rem_pio2f+0x1c0>
 8021d98:	4620      	mov	r0, r4
 8021d9a:	f000 fa5d 	bl	8022258 <scalbnf>
 8021d9e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8021da2:	e025      	b.n	8021df0 <__kernel_rem_pio2f+0x1c0>
 8021da4:	ee60 7a28 	vmul.f32	s15, s0, s17
 8021da8:	a806      	add	r0, sp, #24
 8021daa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021db2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8021db6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8021dba:	ee10 1a10 	vmov	r1, s0
 8021dbe:	ed32 0a01 	vldmdb	r2!, {s0}
 8021dc2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8021dc6:	ee37 0a80 	vadd.f32	s0, s15, s0
 8021dca:	3301      	adds	r3, #1
 8021dcc:	e79a      	b.n	8021d04 <__kernel_rem_pio2f+0xd4>
 8021dce:	d106      	bne.n	8021dde <__kernel_rem_pio2f+0x1ae>
 8021dd0:	1e6b      	subs	r3, r5, #1
 8021dd2:	aa06      	add	r2, sp, #24
 8021dd4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8021dd8:	ea4f 2822 	mov.w	r8, r2, asr #8
 8021ddc:	e7c3      	b.n	8021d66 <__kernel_rem_pio2f+0x136>
 8021dde:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8021de2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8021de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021dea:	da31      	bge.n	8021e50 <__kernel_rem_pio2f+0x220>
 8021dec:	f04f 0800 	mov.w	r8, #0
 8021df0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8021df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021df8:	f040 80a8 	bne.w	8021f4c <__kernel_rem_pio2f+0x31c>
 8021dfc:	1e6b      	subs	r3, r5, #1
 8021dfe:	4618      	mov	r0, r3
 8021e00:	2200      	movs	r2, #0
 8021e02:	4548      	cmp	r0, r9
 8021e04:	da4d      	bge.n	8021ea2 <__kernel_rem_pio2f+0x272>
 8021e06:	2a00      	cmp	r2, #0
 8021e08:	f000 8087 	beq.w	8021f1a <__kernel_rem_pio2f+0x2ea>
 8021e0c:	aa06      	add	r2, sp, #24
 8021e0e:	3c08      	subs	r4, #8
 8021e10:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8021e14:	2900      	cmp	r1, #0
 8021e16:	f000 808d 	beq.w	8021f34 <__kernel_rem_pio2f+0x304>
 8021e1a:	4620      	mov	r0, r4
 8021e1c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8021e20:	9302      	str	r3, [sp, #8]
 8021e22:	f000 fa19 	bl	8022258 <scalbnf>
 8021e26:	9b02      	ldr	r3, [sp, #8]
 8021e28:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8021f44 <__kernel_rem_pio2f+0x314>
 8021e2c:	0099      	lsls	r1, r3, #2
 8021e2e:	aa42      	add	r2, sp, #264	; 0x108
 8021e30:	1850      	adds	r0, r2, r1
 8021e32:	1d05      	adds	r5, r0, #4
 8021e34:	461c      	mov	r4, r3
 8021e36:	2c00      	cmp	r4, #0
 8021e38:	f280 80b8 	bge.w	8021fac <__kernel_rem_pio2f+0x37c>
 8021e3c:	2500      	movs	r5, #0
 8021e3e:	1b5c      	subs	r4, r3, r5
 8021e40:	2c00      	cmp	r4, #0
 8021e42:	f2c0 80d8 	blt.w	8021ff6 <__kernel_rem_pio2f+0x3c6>
 8021e46:	4f3d      	ldr	r7, [pc, #244]	; (8021f3c <__kernel_rem_pio2f+0x30c>)
 8021e48:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8021f48 <__kernel_rem_pio2f+0x318>
 8021e4c:	2400      	movs	r4, #0
 8021e4e:	e0c6      	b.n	8021fde <__kernel_rem_pio2f+0x3ae>
 8021e50:	f04f 0802 	mov.w	r8, #2
 8021e54:	e78a      	b.n	8021d6c <__kernel_rem_pio2f+0x13c>
 8021e56:	ab06      	add	r3, sp, #24
 8021e58:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8021e5c:	b949      	cbnz	r1, 8021e72 <__kernel_rem_pio2f+0x242>
 8021e5e:	b12b      	cbz	r3, 8021e6c <__kernel_rem_pio2f+0x23c>
 8021e60:	aa06      	add	r2, sp, #24
 8021e62:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8021e66:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8021e6a:	2301      	movs	r3, #1
 8021e6c:	3001      	adds	r0, #1
 8021e6e:	4619      	mov	r1, r3
 8021e70:	e781      	b.n	8021d76 <__kernel_rem_pio2f+0x146>
 8021e72:	aa06      	add	r2, sp, #24
 8021e74:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8021e78:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8021e7c:	460b      	mov	r3, r1
 8021e7e:	e7f5      	b.n	8021e6c <__kernel_rem_pio2f+0x23c>
 8021e80:	1e68      	subs	r0, r5, #1
 8021e82:	ab06      	add	r3, sp, #24
 8021e84:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8021e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021e8c:	aa06      	add	r2, sp, #24
 8021e8e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8021e92:	e779      	b.n	8021d88 <__kernel_rem_pio2f+0x158>
 8021e94:	1e68      	subs	r0, r5, #1
 8021e96:	ab06      	add	r3, sp, #24
 8021e98:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8021e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8021ea0:	e7f4      	b.n	8021e8c <__kernel_rem_pio2f+0x25c>
 8021ea2:	a906      	add	r1, sp, #24
 8021ea4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8021ea8:	3801      	subs	r0, #1
 8021eaa:	430a      	orrs	r2, r1
 8021eac:	e7a9      	b.n	8021e02 <__kernel_rem_pio2f+0x1d2>
 8021eae:	f10c 0c01 	add.w	ip, ip, #1
 8021eb2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8021eb6:	2a00      	cmp	r2, #0
 8021eb8:	d0f9      	beq.n	8021eae <__kernel_rem_pio2f+0x27e>
 8021eba:	eb0b 0305 	add.w	r3, fp, r5
 8021ebe:	aa1a      	add	r2, sp, #104	; 0x68
 8021ec0:	009b      	lsls	r3, r3, #2
 8021ec2:	1898      	adds	r0, r3, r2
 8021ec4:	3004      	adds	r0, #4
 8021ec6:	1c69      	adds	r1, r5, #1
 8021ec8:	3704      	adds	r7, #4
 8021eca:	2200      	movs	r2, #0
 8021ecc:	4465      	add	r5, ip
 8021ece:	9005      	str	r0, [sp, #20]
 8021ed0:	428d      	cmp	r5, r1
 8021ed2:	f6ff af0a 	blt.w	8021cea <__kernel_rem_pio2f+0xba>
 8021ed6:	a81a      	add	r0, sp, #104	; 0x68
 8021ed8:	eb02 0c03 	add.w	ip, r2, r3
 8021edc:	4484      	add	ip, r0
 8021ede:	9803      	ldr	r0, [sp, #12]
 8021ee0:	f8dd e008 	ldr.w	lr, [sp, #8]
 8021ee4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8021ee8:	9001      	str	r0, [sp, #4]
 8021eea:	ee07 0a90 	vmov	s15, r0
 8021eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021ef2:	9805      	ldr	r0, [sp, #20]
 8021ef4:	edcc 7a00 	vstr	s15, [ip]
 8021ef8:	eddf 7a13 	vldr	s15, [pc, #76]	; 8021f48 <__kernel_rem_pio2f+0x318>
 8021efc:	eb00 0802 	add.w	r8, r0, r2
 8021f00:	f04f 0c00 	mov.w	ip, #0
 8021f04:	45d4      	cmp	ip, sl
 8021f06:	dd0c      	ble.n	8021f22 <__kernel_rem_pio2f+0x2f2>
 8021f08:	eb02 0c07 	add.w	ip, r2, r7
 8021f0c:	a842      	add	r0, sp, #264	; 0x108
 8021f0e:	4484      	add	ip, r0
 8021f10:	edcc 7a01 	vstr	s15, [ip, #4]
 8021f14:	3101      	adds	r1, #1
 8021f16:	3204      	adds	r2, #4
 8021f18:	e7da      	b.n	8021ed0 <__kernel_rem_pio2f+0x2a0>
 8021f1a:	9b04      	ldr	r3, [sp, #16]
 8021f1c:	f04f 0c01 	mov.w	ip, #1
 8021f20:	e7c7      	b.n	8021eb2 <__kernel_rem_pio2f+0x282>
 8021f22:	ecfe 6a01 	vldmia	lr!, {s13}
 8021f26:	ed38 7a01 	vldmdb	r8!, {s14}
 8021f2a:	f10c 0c01 	add.w	ip, ip, #1
 8021f2e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021f32:	e7e7      	b.n	8021f04 <__kernel_rem_pio2f+0x2d4>
 8021f34:	3b01      	subs	r3, #1
 8021f36:	e769      	b.n	8021e0c <__kernel_rem_pio2f+0x1dc>
 8021f38:	08028688 	.word	0x08028688
 8021f3c:	0802865c 	.word	0x0802865c
 8021f40:	43800000 	.word	0x43800000
 8021f44:	3b800000 	.word	0x3b800000
 8021f48:	00000000 	.word	0x00000000
 8021f4c:	4260      	negs	r0, r4
 8021f4e:	eeb0 0a48 	vmov.f32	s0, s16
 8021f52:	f000 f981 	bl	8022258 <scalbnf>
 8021f56:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8021f40 <__kernel_rem_pio2f+0x310>
 8021f5a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8021f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f62:	db1a      	blt.n	8021f9a <__kernel_rem_pio2f+0x36a>
 8021f64:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8021f44 <__kernel_rem_pio2f+0x314>
 8021f68:	ee60 7a27 	vmul.f32	s15, s0, s15
 8021f6c:	aa06      	add	r2, sp, #24
 8021f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021f72:	a906      	add	r1, sp, #24
 8021f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021f78:	3408      	adds	r4, #8
 8021f7a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8021f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021f82:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8021f86:	ee10 3a10 	vmov	r3, s0
 8021f8a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8021f8e:	1c6b      	adds	r3, r5, #1
 8021f90:	ee17 2a90 	vmov	r2, s15
 8021f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8021f98:	e73f      	b.n	8021e1a <__kernel_rem_pio2f+0x1ea>
 8021f9a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8021f9e:	aa06      	add	r2, sp, #24
 8021fa0:	ee10 3a10 	vmov	r3, s0
 8021fa4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8021fa8:	462b      	mov	r3, r5
 8021faa:	e736      	b.n	8021e1a <__kernel_rem_pio2f+0x1ea>
 8021fac:	aa06      	add	r2, sp, #24
 8021fae:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8021fb2:	9202      	str	r2, [sp, #8]
 8021fb4:	ee07 2a90 	vmov	s15, r2
 8021fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021fbc:	3c01      	subs	r4, #1
 8021fbe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8021fc2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8021fc6:	ed65 7a01 	vstmdb	r5!, {s15}
 8021fca:	e734      	b.n	8021e36 <__kernel_rem_pio2f+0x206>
 8021fcc:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8021fd0:	ecf7 6a01 	vldmia	r7!, {s13}
 8021fd4:	ed9c 7a00 	vldr	s14, [ip]
 8021fd8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021fdc:	3401      	adds	r4, #1
 8021fde:	454c      	cmp	r4, r9
 8021fe0:	dc01      	bgt.n	8021fe6 <__kernel_rem_pio2f+0x3b6>
 8021fe2:	42a5      	cmp	r5, r4
 8021fe4:	daf2      	bge.n	8021fcc <__kernel_rem_pio2f+0x39c>
 8021fe6:	aa56      	add	r2, sp, #344	; 0x158
 8021fe8:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8021fec:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8021ff0:	3501      	adds	r5, #1
 8021ff2:	3804      	subs	r0, #4
 8021ff4:	e723      	b.n	8021e3e <__kernel_rem_pio2f+0x20e>
 8021ff6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8021ff8:	2a03      	cmp	r2, #3
 8021ffa:	d84d      	bhi.n	8022098 <__kernel_rem_pio2f+0x468>
 8021ffc:	e8df f002 	tbb	[pc, r2]
 8022000:	021f1f3e 	.word	0x021f1f3e
 8022004:	aa56      	add	r2, sp, #344	; 0x158
 8022006:	4411      	add	r1, r2
 8022008:	399c      	subs	r1, #156	; 0x9c
 802200a:	4608      	mov	r0, r1
 802200c:	461c      	mov	r4, r3
 802200e:	2c00      	cmp	r4, #0
 8022010:	dc5f      	bgt.n	80220d2 <__kernel_rem_pio2f+0x4a2>
 8022012:	4608      	mov	r0, r1
 8022014:	461c      	mov	r4, r3
 8022016:	2c01      	cmp	r4, #1
 8022018:	dc6b      	bgt.n	80220f2 <__kernel_rem_pio2f+0x4c2>
 802201a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8021f48 <__kernel_rem_pio2f+0x318>
 802201e:	2b01      	cmp	r3, #1
 8022020:	dc77      	bgt.n	8022112 <__kernel_rem_pio2f+0x4e2>
 8022022:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8022026:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 802202a:	f1b8 0f00 	cmp.w	r8, #0
 802202e:	d176      	bne.n	802211e <__kernel_rem_pio2f+0x4ee>
 8022030:	edc6 6a00 	vstr	s13, [r6]
 8022034:	ed86 7a01 	vstr	s14, [r6, #4]
 8022038:	edc6 7a02 	vstr	s15, [r6, #8]
 802203c:	e02c      	b.n	8022098 <__kernel_rem_pio2f+0x468>
 802203e:	aa56      	add	r2, sp, #344	; 0x158
 8022040:	4411      	add	r1, r2
 8022042:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8021f48 <__kernel_rem_pio2f+0x318>
 8022046:	399c      	subs	r1, #156	; 0x9c
 8022048:	4618      	mov	r0, r3
 802204a:	2800      	cmp	r0, #0
 802204c:	da32      	bge.n	80220b4 <__kernel_rem_pio2f+0x484>
 802204e:	f1b8 0f00 	cmp.w	r8, #0
 8022052:	d035      	beq.n	80220c0 <__kernel_rem_pio2f+0x490>
 8022054:	eef1 7a47 	vneg.f32	s15, s14
 8022058:	edc6 7a00 	vstr	s15, [r6]
 802205c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8022060:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022064:	a82f      	add	r0, sp, #188	; 0xbc
 8022066:	2101      	movs	r1, #1
 8022068:	428b      	cmp	r3, r1
 802206a:	da2c      	bge.n	80220c6 <__kernel_rem_pio2f+0x496>
 802206c:	f1b8 0f00 	cmp.w	r8, #0
 8022070:	d001      	beq.n	8022076 <__kernel_rem_pio2f+0x446>
 8022072:	eef1 7a67 	vneg.f32	s15, s15
 8022076:	edc6 7a01 	vstr	s15, [r6, #4]
 802207a:	e00d      	b.n	8022098 <__kernel_rem_pio2f+0x468>
 802207c:	aa56      	add	r2, sp, #344	; 0x158
 802207e:	4411      	add	r1, r2
 8022080:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8021f48 <__kernel_rem_pio2f+0x318>
 8022084:	399c      	subs	r1, #156	; 0x9c
 8022086:	2b00      	cmp	r3, #0
 8022088:	da0e      	bge.n	80220a8 <__kernel_rem_pio2f+0x478>
 802208a:	f1b8 0f00 	cmp.w	r8, #0
 802208e:	d001      	beq.n	8022094 <__kernel_rem_pio2f+0x464>
 8022090:	eef1 7a67 	vneg.f32	s15, s15
 8022094:	edc6 7a00 	vstr	s15, [r6]
 8022098:	9b01      	ldr	r3, [sp, #4]
 802209a:	f003 0007 	and.w	r0, r3, #7
 802209e:	b057      	add	sp, #348	; 0x15c
 80220a0:	ecbd 8b04 	vpop	{d8-d9}
 80220a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220a8:	ed31 7a01 	vldmdb	r1!, {s14}
 80220ac:	3b01      	subs	r3, #1
 80220ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80220b2:	e7e8      	b.n	8022086 <__kernel_rem_pio2f+0x456>
 80220b4:	ed71 7a01 	vldmdb	r1!, {s15}
 80220b8:	3801      	subs	r0, #1
 80220ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80220be:	e7c4      	b.n	802204a <__kernel_rem_pio2f+0x41a>
 80220c0:	eef0 7a47 	vmov.f32	s15, s14
 80220c4:	e7c8      	b.n	8022058 <__kernel_rem_pio2f+0x428>
 80220c6:	ecb0 7a01 	vldmia	r0!, {s14}
 80220ca:	3101      	adds	r1, #1
 80220cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80220d0:	e7ca      	b.n	8022068 <__kernel_rem_pio2f+0x438>
 80220d2:	ed50 7a02 	vldr	s15, [r0, #-8]
 80220d6:	ed70 6a01 	vldmdb	r0!, {s13}
 80220da:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80220de:	3c01      	subs	r4, #1
 80220e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80220e4:	ed00 7a01 	vstr	s14, [r0, #-4]
 80220e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80220ec:	edc0 7a00 	vstr	s15, [r0]
 80220f0:	e78d      	b.n	802200e <__kernel_rem_pio2f+0x3de>
 80220f2:	ed50 7a02 	vldr	s15, [r0, #-8]
 80220f6:	ed70 6a01 	vldmdb	r0!, {s13}
 80220fa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80220fe:	3c01      	subs	r4, #1
 8022100:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022104:	ed00 7a01 	vstr	s14, [r0, #-4]
 8022108:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802210c:	edc0 7a00 	vstr	s15, [r0]
 8022110:	e781      	b.n	8022016 <__kernel_rem_pio2f+0x3e6>
 8022112:	ed31 7a01 	vldmdb	r1!, {s14}
 8022116:	3b01      	subs	r3, #1
 8022118:	ee77 7a87 	vadd.f32	s15, s15, s14
 802211c:	e77f      	b.n	802201e <__kernel_rem_pio2f+0x3ee>
 802211e:	eef1 6a66 	vneg.f32	s13, s13
 8022122:	eeb1 7a47 	vneg.f32	s14, s14
 8022126:	edc6 6a00 	vstr	s13, [r6]
 802212a:	ed86 7a01 	vstr	s14, [r6, #4]
 802212e:	eef1 7a67 	vneg.f32	s15, s15
 8022132:	e781      	b.n	8022038 <__kernel_rem_pio2f+0x408>

08022134 <__kernel_sinf>:
 8022134:	ee10 3a10 	vmov	r3, s0
 8022138:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802213c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8022140:	da04      	bge.n	802214c <__kernel_sinf+0x18>
 8022142:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8022146:	ee17 3a90 	vmov	r3, s15
 802214a:	b35b      	cbz	r3, 80221a4 <__kernel_sinf+0x70>
 802214c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8022150:	eddf 7a15 	vldr	s15, [pc, #84]	; 80221a8 <__kernel_sinf+0x74>
 8022154:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80221ac <__kernel_sinf+0x78>
 8022158:	eea7 6a27 	vfma.f32	s12, s14, s15
 802215c:	eddf 7a14 	vldr	s15, [pc, #80]	; 80221b0 <__kernel_sinf+0x7c>
 8022160:	eee6 7a07 	vfma.f32	s15, s12, s14
 8022164:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80221b4 <__kernel_sinf+0x80>
 8022168:	eea7 6a87 	vfma.f32	s12, s15, s14
 802216c:	eddf 7a12 	vldr	s15, [pc, #72]	; 80221b8 <__kernel_sinf+0x84>
 8022170:	ee60 6a07 	vmul.f32	s13, s0, s14
 8022174:	eee6 7a07 	vfma.f32	s15, s12, s14
 8022178:	b930      	cbnz	r0, 8022188 <__kernel_sinf+0x54>
 802217a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80221bc <__kernel_sinf+0x88>
 802217e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022182:	eea6 0a26 	vfma.f32	s0, s12, s13
 8022186:	4770      	bx	lr
 8022188:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802218c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8022190:	eee0 7a86 	vfma.f32	s15, s1, s12
 8022194:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8022198:	eddf 7a09 	vldr	s15, [pc, #36]	; 80221c0 <__kernel_sinf+0x8c>
 802219c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80221a0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80221a4:	4770      	bx	lr
 80221a6:	bf00      	nop
 80221a8:	2f2ec9d3 	.word	0x2f2ec9d3
 80221ac:	b2d72f34 	.word	0xb2d72f34
 80221b0:	3638ef1b 	.word	0x3638ef1b
 80221b4:	b9500d01 	.word	0xb9500d01
 80221b8:	3c088889 	.word	0x3c088889
 80221bc:	be2aaaab 	.word	0xbe2aaaab
 80221c0:	3e2aaaab 	.word	0x3e2aaaab

080221c4 <fabsf>:
 80221c4:	ee10 3a10 	vmov	r3, s0
 80221c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80221cc:	ee00 3a10 	vmov	s0, r3
 80221d0:	4770      	bx	lr
	...

080221d4 <floorf>:
 80221d4:	ee10 3a10 	vmov	r3, s0
 80221d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80221dc:	0dca      	lsrs	r2, r1, #23
 80221de:	3a7f      	subs	r2, #127	; 0x7f
 80221e0:	2a16      	cmp	r2, #22
 80221e2:	dc2a      	bgt.n	802223a <floorf+0x66>
 80221e4:	2a00      	cmp	r2, #0
 80221e6:	da11      	bge.n	802220c <floorf+0x38>
 80221e8:	eddf 7a18 	vldr	s15, [pc, #96]	; 802224c <floorf+0x78>
 80221ec:	ee30 0a27 	vadd.f32	s0, s0, s15
 80221f0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80221f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80221f8:	dd05      	ble.n	8022206 <floorf+0x32>
 80221fa:	2b00      	cmp	r3, #0
 80221fc:	da23      	bge.n	8022246 <floorf+0x72>
 80221fe:	4a14      	ldr	r2, [pc, #80]	; (8022250 <floorf+0x7c>)
 8022200:	2900      	cmp	r1, #0
 8022202:	bf18      	it	ne
 8022204:	4613      	movne	r3, r2
 8022206:	ee00 3a10 	vmov	s0, r3
 802220a:	4770      	bx	lr
 802220c:	4911      	ldr	r1, [pc, #68]	; (8022254 <floorf+0x80>)
 802220e:	4111      	asrs	r1, r2
 8022210:	420b      	tst	r3, r1
 8022212:	d0fa      	beq.n	802220a <floorf+0x36>
 8022214:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802224c <floorf+0x78>
 8022218:	ee30 0a27 	vadd.f32	s0, s0, s15
 802221c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8022220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022224:	ddef      	ble.n	8022206 <floorf+0x32>
 8022226:	2b00      	cmp	r3, #0
 8022228:	bfbe      	ittt	lt
 802222a:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 802222e:	fa40 f202 	asrlt.w	r2, r0, r2
 8022232:	189b      	addlt	r3, r3, r2
 8022234:	ea23 0301 	bic.w	r3, r3, r1
 8022238:	e7e5      	b.n	8022206 <floorf+0x32>
 802223a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802223e:	d3e4      	bcc.n	802220a <floorf+0x36>
 8022240:	ee30 0a00 	vadd.f32	s0, s0, s0
 8022244:	4770      	bx	lr
 8022246:	2300      	movs	r3, #0
 8022248:	e7dd      	b.n	8022206 <floorf+0x32>
 802224a:	bf00      	nop
 802224c:	7149f2ca 	.word	0x7149f2ca
 8022250:	bf800000 	.word	0xbf800000
 8022254:	007fffff 	.word	0x007fffff

08022258 <scalbnf>:
 8022258:	b508      	push	{r3, lr}
 802225a:	ee10 2a10 	vmov	r2, s0
 802225e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8022262:	ed2d 8b02 	vpush	{d8}
 8022266:	eef0 0a40 	vmov.f32	s1, s0
 802226a:	d004      	beq.n	8022276 <scalbnf+0x1e>
 802226c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8022270:	d306      	bcc.n	8022280 <scalbnf+0x28>
 8022272:	ee70 0a00 	vadd.f32	s1, s0, s0
 8022276:	ecbd 8b02 	vpop	{d8}
 802227a:	eeb0 0a60 	vmov.f32	s0, s1
 802227e:	bd08      	pop	{r3, pc}
 8022280:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8022284:	d21c      	bcs.n	80222c0 <scalbnf+0x68>
 8022286:	4b1f      	ldr	r3, [pc, #124]	; (8022304 <scalbnf+0xac>)
 8022288:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8022308 <scalbnf+0xb0>
 802228c:	4298      	cmp	r0, r3
 802228e:	ee60 0a27 	vmul.f32	s1, s0, s15
 8022292:	db10      	blt.n	80222b6 <scalbnf+0x5e>
 8022294:	ee10 2a90 	vmov	r2, s1
 8022298:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 802229c:	3b19      	subs	r3, #25
 802229e:	4403      	add	r3, r0
 80222a0:	2bfe      	cmp	r3, #254	; 0xfe
 80222a2:	dd0f      	ble.n	80222c4 <scalbnf+0x6c>
 80222a4:	ed9f 8a19 	vldr	s16, [pc, #100]	; 802230c <scalbnf+0xb4>
 80222a8:	eeb0 0a48 	vmov.f32	s0, s16
 80222ac:	f000 f834 	bl	8022318 <copysignf>
 80222b0:	ee60 0a08 	vmul.f32	s1, s0, s16
 80222b4:	e7df      	b.n	8022276 <scalbnf+0x1e>
 80222b6:	eddf 7a16 	vldr	s15, [pc, #88]	; 8022310 <scalbnf+0xb8>
 80222ba:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80222be:	e7da      	b.n	8022276 <scalbnf+0x1e>
 80222c0:	0ddb      	lsrs	r3, r3, #23
 80222c2:	e7ec      	b.n	802229e <scalbnf+0x46>
 80222c4:	2b00      	cmp	r3, #0
 80222c6:	dd06      	ble.n	80222d6 <scalbnf+0x7e>
 80222c8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80222cc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80222d0:	ee00 3a90 	vmov	s1, r3
 80222d4:	e7cf      	b.n	8022276 <scalbnf+0x1e>
 80222d6:	f113 0f16 	cmn.w	r3, #22
 80222da:	da06      	bge.n	80222ea <scalbnf+0x92>
 80222dc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80222e0:	4298      	cmp	r0, r3
 80222e2:	dcdf      	bgt.n	80222a4 <scalbnf+0x4c>
 80222e4:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8022310 <scalbnf+0xb8>
 80222e8:	e7de      	b.n	80222a8 <scalbnf+0x50>
 80222ea:	3319      	adds	r3, #25
 80222ec:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80222f0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80222f4:	eddf 7a07 	vldr	s15, [pc, #28]	; 8022314 <scalbnf+0xbc>
 80222f8:	ee07 3a10 	vmov	s14, r3
 80222fc:	ee67 0a27 	vmul.f32	s1, s14, s15
 8022300:	e7b9      	b.n	8022276 <scalbnf+0x1e>
 8022302:	bf00      	nop
 8022304:	ffff3cb0 	.word	0xffff3cb0
 8022308:	4c000000 	.word	0x4c000000
 802230c:	7149f2ca 	.word	0x7149f2ca
 8022310:	0da24260 	.word	0x0da24260
 8022314:	33000000 	.word	0x33000000

08022318 <copysignf>:
 8022318:	ee10 3a10 	vmov	r3, s0
 802231c:	ee10 2a90 	vmov	r2, s1
 8022320:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8022324:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8022328:	4313      	orrs	r3, r2
 802232a:	ee00 3a10 	vmov	s0, r3
 802232e:	4770      	bx	lr

08022330 <abort>:
 8022330:	b508      	push	{r3, lr}
 8022332:	2006      	movs	r0, #6
 8022334:	f000 fc3e 	bl	8022bb4 <raise>
 8022338:	2001      	movs	r0, #1
 802233a:	f7df fc23 	bl	8001b84 <_exit>
	...

08022340 <__assert_func>:
 8022340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022342:	461c      	mov	r4, r3
 8022344:	4b09      	ldr	r3, [pc, #36]	; (802236c <__assert_func+0x2c>)
 8022346:	681b      	ldr	r3, [r3, #0]
 8022348:	4605      	mov	r5, r0
 802234a:	68d8      	ldr	r0, [r3, #12]
 802234c:	b152      	cbz	r2, 8022364 <__assert_func+0x24>
 802234e:	4b08      	ldr	r3, [pc, #32]	; (8022370 <__assert_func+0x30>)
 8022350:	9100      	str	r1, [sp, #0]
 8022352:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8022356:	4907      	ldr	r1, [pc, #28]	; (8022374 <__assert_func+0x34>)
 8022358:	462b      	mov	r3, r5
 802235a:	4622      	mov	r2, r4
 802235c:	f000 f828 	bl	80223b0 <fiprintf>
 8022360:	f7ff ffe6 	bl	8022330 <abort>
 8022364:	4b04      	ldr	r3, [pc, #16]	; (8022378 <__assert_func+0x38>)
 8022366:	461a      	mov	r2, r3
 8022368:	e7f2      	b.n	8022350 <__assert_func+0x10>
 802236a:	bf00      	nop
 802236c:	200000a8 	.word	0x200000a8
 8022370:	08028694 	.word	0x08028694
 8022374:	080286a1 	.word	0x080286a1
 8022378:	080286cf 	.word	0x080286cf

0802237c <atexit>:
 802237c:	2300      	movs	r3, #0
 802237e:	4601      	mov	r1, r0
 8022380:	461a      	mov	r2, r3
 8022382:	4618      	mov	r0, r3
 8022384:	f000 bcf2 	b.w	8022d6c <__register_exitproc>

08022388 <__cxa_atexit>:
 8022388:	b510      	push	{r4, lr}
 802238a:	4c05      	ldr	r4, [pc, #20]	; (80223a0 <__cxa_atexit+0x18>)
 802238c:	4613      	mov	r3, r2
 802238e:	b12c      	cbz	r4, 802239c <__cxa_atexit+0x14>
 8022390:	460a      	mov	r2, r1
 8022392:	4601      	mov	r1, r0
 8022394:	2002      	movs	r0, #2
 8022396:	f000 fce9 	bl	8022d6c <__register_exitproc>
 802239a:	bd10      	pop	{r4, pc}
 802239c:	4620      	mov	r0, r4
 802239e:	e7fc      	b.n	802239a <__cxa_atexit+0x12>
 80223a0:	08022d6d 	.word	0x08022d6d

080223a4 <__errno>:
 80223a4:	4b01      	ldr	r3, [pc, #4]	; (80223ac <__errno+0x8>)
 80223a6:	6818      	ldr	r0, [r3, #0]
 80223a8:	4770      	bx	lr
 80223aa:	bf00      	nop
 80223ac:	200000a8 	.word	0x200000a8

080223b0 <fiprintf>:
 80223b0:	b40e      	push	{r1, r2, r3}
 80223b2:	b503      	push	{r0, r1, lr}
 80223b4:	4601      	mov	r1, r0
 80223b6:	ab03      	add	r3, sp, #12
 80223b8:	4805      	ldr	r0, [pc, #20]	; (80223d0 <fiprintf+0x20>)
 80223ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80223be:	6800      	ldr	r0, [r0, #0]
 80223c0:	9301      	str	r3, [sp, #4]
 80223c2:	f000 f921 	bl	8022608 <_vfiprintf_r>
 80223c6:	b002      	add	sp, #8
 80223c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80223cc:	b003      	add	sp, #12
 80223ce:	4770      	bx	lr
 80223d0:	200000a8 	.word	0x200000a8

080223d4 <__libc_init_array>:
 80223d4:	b570      	push	{r4, r5, r6, lr}
 80223d6:	4e0d      	ldr	r6, [pc, #52]	; (802240c <__libc_init_array+0x38>)
 80223d8:	4c0d      	ldr	r4, [pc, #52]	; (8022410 <__libc_init_array+0x3c>)
 80223da:	1ba4      	subs	r4, r4, r6
 80223dc:	10a4      	asrs	r4, r4, #2
 80223de:	2500      	movs	r5, #0
 80223e0:	42a5      	cmp	r5, r4
 80223e2:	d109      	bne.n	80223f8 <__libc_init_array+0x24>
 80223e4:	4e0b      	ldr	r6, [pc, #44]	; (8022414 <__libc_init_array+0x40>)
 80223e6:	4c0c      	ldr	r4, [pc, #48]	; (8022418 <__libc_init_array+0x44>)
 80223e8:	f000 ffb0 	bl	802334c <_init>
 80223ec:	1ba4      	subs	r4, r4, r6
 80223ee:	10a4      	asrs	r4, r4, #2
 80223f0:	2500      	movs	r5, #0
 80223f2:	42a5      	cmp	r5, r4
 80223f4:	d105      	bne.n	8022402 <__libc_init_array+0x2e>
 80223f6:	bd70      	pop	{r4, r5, r6, pc}
 80223f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80223fc:	4798      	blx	r3
 80223fe:	3501      	adds	r5, #1
 8022400:	e7ee      	b.n	80223e0 <__libc_init_array+0xc>
 8022402:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8022406:	4798      	blx	r3
 8022408:	3501      	adds	r5, #1
 802240a:	e7f2      	b.n	80223f2 <__libc_init_array+0x1e>
 802240c:	08028774 	.word	0x08028774
 8022410:	08028774 	.word	0x08028774
 8022414:	08028774 	.word	0x08028774
 8022418:	08028788 	.word	0x08028788

0802241c <malloc>:
 802241c:	4b02      	ldr	r3, [pc, #8]	; (8022428 <malloc+0xc>)
 802241e:	4601      	mov	r1, r0
 8022420:	6818      	ldr	r0, [r3, #0]
 8022422:	f000 b86d 	b.w	8022500 <_malloc_r>
 8022426:	bf00      	nop
 8022428:	200000a8 	.word	0x200000a8

0802242c <free>:
 802242c:	4b02      	ldr	r3, [pc, #8]	; (8022438 <free+0xc>)
 802242e:	4601      	mov	r1, r0
 8022430:	6818      	ldr	r0, [r3, #0]
 8022432:	f000 b817 	b.w	8022464 <_free_r>
 8022436:	bf00      	nop
 8022438:	200000a8 	.word	0x200000a8

0802243c <memcpy>:
 802243c:	b510      	push	{r4, lr}
 802243e:	1e43      	subs	r3, r0, #1
 8022440:	440a      	add	r2, r1
 8022442:	4291      	cmp	r1, r2
 8022444:	d100      	bne.n	8022448 <memcpy+0xc>
 8022446:	bd10      	pop	{r4, pc}
 8022448:	f811 4b01 	ldrb.w	r4, [r1], #1
 802244c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022450:	e7f7      	b.n	8022442 <memcpy+0x6>

08022452 <memset>:
 8022452:	4402      	add	r2, r0
 8022454:	4603      	mov	r3, r0
 8022456:	4293      	cmp	r3, r2
 8022458:	d100      	bne.n	802245c <memset+0xa>
 802245a:	4770      	bx	lr
 802245c:	f803 1b01 	strb.w	r1, [r3], #1
 8022460:	e7f9      	b.n	8022456 <memset+0x4>
	...

08022464 <_free_r>:
 8022464:	b538      	push	{r3, r4, r5, lr}
 8022466:	4605      	mov	r5, r0
 8022468:	2900      	cmp	r1, #0
 802246a:	d045      	beq.n	80224f8 <_free_r+0x94>
 802246c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022470:	1f0c      	subs	r4, r1, #4
 8022472:	2b00      	cmp	r3, #0
 8022474:	bfb8      	it	lt
 8022476:	18e4      	addlt	r4, r4, r3
 8022478:	f000 feba 	bl	80231f0 <__malloc_lock>
 802247c:	4a1f      	ldr	r2, [pc, #124]	; (80224fc <_free_r+0x98>)
 802247e:	6813      	ldr	r3, [r2, #0]
 8022480:	4610      	mov	r0, r2
 8022482:	b933      	cbnz	r3, 8022492 <_free_r+0x2e>
 8022484:	6063      	str	r3, [r4, #4]
 8022486:	6014      	str	r4, [r2, #0]
 8022488:	4628      	mov	r0, r5
 802248a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802248e:	f000 beb0 	b.w	80231f2 <__malloc_unlock>
 8022492:	42a3      	cmp	r3, r4
 8022494:	d90c      	bls.n	80224b0 <_free_r+0x4c>
 8022496:	6821      	ldr	r1, [r4, #0]
 8022498:	1862      	adds	r2, r4, r1
 802249a:	4293      	cmp	r3, r2
 802249c:	bf04      	itt	eq
 802249e:	681a      	ldreq	r2, [r3, #0]
 80224a0:	685b      	ldreq	r3, [r3, #4]
 80224a2:	6063      	str	r3, [r4, #4]
 80224a4:	bf04      	itt	eq
 80224a6:	1852      	addeq	r2, r2, r1
 80224a8:	6022      	streq	r2, [r4, #0]
 80224aa:	6004      	str	r4, [r0, #0]
 80224ac:	e7ec      	b.n	8022488 <_free_r+0x24>
 80224ae:	4613      	mov	r3, r2
 80224b0:	685a      	ldr	r2, [r3, #4]
 80224b2:	b10a      	cbz	r2, 80224b8 <_free_r+0x54>
 80224b4:	42a2      	cmp	r2, r4
 80224b6:	d9fa      	bls.n	80224ae <_free_r+0x4a>
 80224b8:	6819      	ldr	r1, [r3, #0]
 80224ba:	1858      	adds	r0, r3, r1
 80224bc:	42a0      	cmp	r0, r4
 80224be:	d10b      	bne.n	80224d8 <_free_r+0x74>
 80224c0:	6820      	ldr	r0, [r4, #0]
 80224c2:	4401      	add	r1, r0
 80224c4:	1858      	adds	r0, r3, r1
 80224c6:	4282      	cmp	r2, r0
 80224c8:	6019      	str	r1, [r3, #0]
 80224ca:	d1dd      	bne.n	8022488 <_free_r+0x24>
 80224cc:	6810      	ldr	r0, [r2, #0]
 80224ce:	6852      	ldr	r2, [r2, #4]
 80224d0:	605a      	str	r2, [r3, #4]
 80224d2:	4401      	add	r1, r0
 80224d4:	6019      	str	r1, [r3, #0]
 80224d6:	e7d7      	b.n	8022488 <_free_r+0x24>
 80224d8:	d902      	bls.n	80224e0 <_free_r+0x7c>
 80224da:	230c      	movs	r3, #12
 80224dc:	602b      	str	r3, [r5, #0]
 80224de:	e7d3      	b.n	8022488 <_free_r+0x24>
 80224e0:	6820      	ldr	r0, [r4, #0]
 80224e2:	1821      	adds	r1, r4, r0
 80224e4:	428a      	cmp	r2, r1
 80224e6:	bf04      	itt	eq
 80224e8:	6811      	ldreq	r1, [r2, #0]
 80224ea:	6852      	ldreq	r2, [r2, #4]
 80224ec:	6062      	str	r2, [r4, #4]
 80224ee:	bf04      	itt	eq
 80224f0:	1809      	addeq	r1, r1, r0
 80224f2:	6021      	streq	r1, [r4, #0]
 80224f4:	605c      	str	r4, [r3, #4]
 80224f6:	e7c7      	b.n	8022488 <_free_r+0x24>
 80224f8:	bd38      	pop	{r3, r4, r5, pc}
 80224fa:	bf00      	nop
 80224fc:	2000b37c 	.word	0x2000b37c

08022500 <_malloc_r>:
 8022500:	b570      	push	{r4, r5, r6, lr}
 8022502:	1ccd      	adds	r5, r1, #3
 8022504:	f025 0503 	bic.w	r5, r5, #3
 8022508:	3508      	adds	r5, #8
 802250a:	2d0c      	cmp	r5, #12
 802250c:	bf38      	it	cc
 802250e:	250c      	movcc	r5, #12
 8022510:	2d00      	cmp	r5, #0
 8022512:	4606      	mov	r6, r0
 8022514:	db01      	blt.n	802251a <_malloc_r+0x1a>
 8022516:	42a9      	cmp	r1, r5
 8022518:	d903      	bls.n	8022522 <_malloc_r+0x22>
 802251a:	230c      	movs	r3, #12
 802251c:	6033      	str	r3, [r6, #0]
 802251e:	2000      	movs	r0, #0
 8022520:	bd70      	pop	{r4, r5, r6, pc}
 8022522:	f000 fe65 	bl	80231f0 <__malloc_lock>
 8022526:	4a21      	ldr	r2, [pc, #132]	; (80225ac <_malloc_r+0xac>)
 8022528:	6814      	ldr	r4, [r2, #0]
 802252a:	4621      	mov	r1, r4
 802252c:	b991      	cbnz	r1, 8022554 <_malloc_r+0x54>
 802252e:	4c20      	ldr	r4, [pc, #128]	; (80225b0 <_malloc_r+0xb0>)
 8022530:	6823      	ldr	r3, [r4, #0]
 8022532:	b91b      	cbnz	r3, 802253c <_malloc_r+0x3c>
 8022534:	4630      	mov	r0, r6
 8022536:	f000 fb05 	bl	8022b44 <_sbrk_r>
 802253a:	6020      	str	r0, [r4, #0]
 802253c:	4629      	mov	r1, r5
 802253e:	4630      	mov	r0, r6
 8022540:	f000 fb00 	bl	8022b44 <_sbrk_r>
 8022544:	1c43      	adds	r3, r0, #1
 8022546:	d124      	bne.n	8022592 <_malloc_r+0x92>
 8022548:	230c      	movs	r3, #12
 802254a:	6033      	str	r3, [r6, #0]
 802254c:	4630      	mov	r0, r6
 802254e:	f000 fe50 	bl	80231f2 <__malloc_unlock>
 8022552:	e7e4      	b.n	802251e <_malloc_r+0x1e>
 8022554:	680b      	ldr	r3, [r1, #0]
 8022556:	1b5b      	subs	r3, r3, r5
 8022558:	d418      	bmi.n	802258c <_malloc_r+0x8c>
 802255a:	2b0b      	cmp	r3, #11
 802255c:	d90f      	bls.n	802257e <_malloc_r+0x7e>
 802255e:	600b      	str	r3, [r1, #0]
 8022560:	50cd      	str	r5, [r1, r3]
 8022562:	18cc      	adds	r4, r1, r3
 8022564:	4630      	mov	r0, r6
 8022566:	f000 fe44 	bl	80231f2 <__malloc_unlock>
 802256a:	f104 000b 	add.w	r0, r4, #11
 802256e:	1d23      	adds	r3, r4, #4
 8022570:	f020 0007 	bic.w	r0, r0, #7
 8022574:	1ac3      	subs	r3, r0, r3
 8022576:	d0d3      	beq.n	8022520 <_malloc_r+0x20>
 8022578:	425a      	negs	r2, r3
 802257a:	50e2      	str	r2, [r4, r3]
 802257c:	e7d0      	b.n	8022520 <_malloc_r+0x20>
 802257e:	428c      	cmp	r4, r1
 8022580:	684b      	ldr	r3, [r1, #4]
 8022582:	bf16      	itet	ne
 8022584:	6063      	strne	r3, [r4, #4]
 8022586:	6013      	streq	r3, [r2, #0]
 8022588:	460c      	movne	r4, r1
 802258a:	e7eb      	b.n	8022564 <_malloc_r+0x64>
 802258c:	460c      	mov	r4, r1
 802258e:	6849      	ldr	r1, [r1, #4]
 8022590:	e7cc      	b.n	802252c <_malloc_r+0x2c>
 8022592:	1cc4      	adds	r4, r0, #3
 8022594:	f024 0403 	bic.w	r4, r4, #3
 8022598:	42a0      	cmp	r0, r4
 802259a:	d005      	beq.n	80225a8 <_malloc_r+0xa8>
 802259c:	1a21      	subs	r1, r4, r0
 802259e:	4630      	mov	r0, r6
 80225a0:	f000 fad0 	bl	8022b44 <_sbrk_r>
 80225a4:	3001      	adds	r0, #1
 80225a6:	d0cf      	beq.n	8022548 <_malloc_r+0x48>
 80225a8:	6025      	str	r5, [r4, #0]
 80225aa:	e7db      	b.n	8022564 <_malloc_r+0x64>
 80225ac:	2000b37c 	.word	0x2000b37c
 80225b0:	2000b380 	.word	0x2000b380

080225b4 <__sfputc_r>:
 80225b4:	6893      	ldr	r3, [r2, #8]
 80225b6:	3b01      	subs	r3, #1
 80225b8:	2b00      	cmp	r3, #0
 80225ba:	b410      	push	{r4}
 80225bc:	6093      	str	r3, [r2, #8]
 80225be:	da08      	bge.n	80225d2 <__sfputc_r+0x1e>
 80225c0:	6994      	ldr	r4, [r2, #24]
 80225c2:	42a3      	cmp	r3, r4
 80225c4:	db01      	blt.n	80225ca <__sfputc_r+0x16>
 80225c6:	290a      	cmp	r1, #10
 80225c8:	d103      	bne.n	80225d2 <__sfputc_r+0x1e>
 80225ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80225ce:	f000 bb0d 	b.w	8022bec <__swbuf_r>
 80225d2:	6813      	ldr	r3, [r2, #0]
 80225d4:	1c58      	adds	r0, r3, #1
 80225d6:	6010      	str	r0, [r2, #0]
 80225d8:	7019      	strb	r1, [r3, #0]
 80225da:	4608      	mov	r0, r1
 80225dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80225e0:	4770      	bx	lr

080225e2 <__sfputs_r>:
 80225e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80225e4:	4606      	mov	r6, r0
 80225e6:	460f      	mov	r7, r1
 80225e8:	4614      	mov	r4, r2
 80225ea:	18d5      	adds	r5, r2, r3
 80225ec:	42ac      	cmp	r4, r5
 80225ee:	d101      	bne.n	80225f4 <__sfputs_r+0x12>
 80225f0:	2000      	movs	r0, #0
 80225f2:	e007      	b.n	8022604 <__sfputs_r+0x22>
 80225f4:	463a      	mov	r2, r7
 80225f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80225fa:	4630      	mov	r0, r6
 80225fc:	f7ff ffda 	bl	80225b4 <__sfputc_r>
 8022600:	1c43      	adds	r3, r0, #1
 8022602:	d1f3      	bne.n	80225ec <__sfputs_r+0xa>
 8022604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022608 <_vfiprintf_r>:
 8022608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802260c:	460c      	mov	r4, r1
 802260e:	b09d      	sub	sp, #116	; 0x74
 8022610:	4617      	mov	r7, r2
 8022612:	461d      	mov	r5, r3
 8022614:	4606      	mov	r6, r0
 8022616:	b118      	cbz	r0, 8022620 <_vfiprintf_r+0x18>
 8022618:	6983      	ldr	r3, [r0, #24]
 802261a:	b90b      	cbnz	r3, 8022620 <_vfiprintf_r+0x18>
 802261c:	f000 fcfa 	bl	8023014 <__sinit>
 8022620:	4b7c      	ldr	r3, [pc, #496]	; (8022814 <_vfiprintf_r+0x20c>)
 8022622:	429c      	cmp	r4, r3
 8022624:	d158      	bne.n	80226d8 <_vfiprintf_r+0xd0>
 8022626:	6874      	ldr	r4, [r6, #4]
 8022628:	89a3      	ldrh	r3, [r4, #12]
 802262a:	0718      	lsls	r0, r3, #28
 802262c:	d55e      	bpl.n	80226ec <_vfiprintf_r+0xe4>
 802262e:	6923      	ldr	r3, [r4, #16]
 8022630:	2b00      	cmp	r3, #0
 8022632:	d05b      	beq.n	80226ec <_vfiprintf_r+0xe4>
 8022634:	2300      	movs	r3, #0
 8022636:	9309      	str	r3, [sp, #36]	; 0x24
 8022638:	2320      	movs	r3, #32
 802263a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802263e:	2330      	movs	r3, #48	; 0x30
 8022640:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022644:	9503      	str	r5, [sp, #12]
 8022646:	f04f 0b01 	mov.w	fp, #1
 802264a:	46b8      	mov	r8, r7
 802264c:	4645      	mov	r5, r8
 802264e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8022652:	b10b      	cbz	r3, 8022658 <_vfiprintf_r+0x50>
 8022654:	2b25      	cmp	r3, #37	; 0x25
 8022656:	d154      	bne.n	8022702 <_vfiprintf_r+0xfa>
 8022658:	ebb8 0a07 	subs.w	sl, r8, r7
 802265c:	d00b      	beq.n	8022676 <_vfiprintf_r+0x6e>
 802265e:	4653      	mov	r3, sl
 8022660:	463a      	mov	r2, r7
 8022662:	4621      	mov	r1, r4
 8022664:	4630      	mov	r0, r6
 8022666:	f7ff ffbc 	bl	80225e2 <__sfputs_r>
 802266a:	3001      	adds	r0, #1
 802266c:	f000 80c2 	beq.w	80227f4 <_vfiprintf_r+0x1ec>
 8022670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022672:	4453      	add	r3, sl
 8022674:	9309      	str	r3, [sp, #36]	; 0x24
 8022676:	f898 3000 	ldrb.w	r3, [r8]
 802267a:	2b00      	cmp	r3, #0
 802267c:	f000 80ba 	beq.w	80227f4 <_vfiprintf_r+0x1ec>
 8022680:	2300      	movs	r3, #0
 8022682:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022686:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802268a:	9304      	str	r3, [sp, #16]
 802268c:	9307      	str	r3, [sp, #28]
 802268e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022692:	931a      	str	r3, [sp, #104]	; 0x68
 8022694:	46a8      	mov	r8, r5
 8022696:	2205      	movs	r2, #5
 8022698:	f818 1b01 	ldrb.w	r1, [r8], #1
 802269c:	485e      	ldr	r0, [pc, #376]	; (8022818 <_vfiprintf_r+0x210>)
 802269e:	f7dd fdb7 	bl	8000210 <memchr>
 80226a2:	9b04      	ldr	r3, [sp, #16]
 80226a4:	bb78      	cbnz	r0, 8022706 <_vfiprintf_r+0xfe>
 80226a6:	06d9      	lsls	r1, r3, #27
 80226a8:	bf44      	itt	mi
 80226aa:	2220      	movmi	r2, #32
 80226ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80226b0:	071a      	lsls	r2, r3, #28
 80226b2:	bf44      	itt	mi
 80226b4:	222b      	movmi	r2, #43	; 0x2b
 80226b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80226ba:	782a      	ldrb	r2, [r5, #0]
 80226bc:	2a2a      	cmp	r2, #42	; 0x2a
 80226be:	d02a      	beq.n	8022716 <_vfiprintf_r+0x10e>
 80226c0:	9a07      	ldr	r2, [sp, #28]
 80226c2:	46a8      	mov	r8, r5
 80226c4:	2000      	movs	r0, #0
 80226c6:	250a      	movs	r5, #10
 80226c8:	4641      	mov	r1, r8
 80226ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80226ce:	3b30      	subs	r3, #48	; 0x30
 80226d0:	2b09      	cmp	r3, #9
 80226d2:	d969      	bls.n	80227a8 <_vfiprintf_r+0x1a0>
 80226d4:	b360      	cbz	r0, 8022730 <_vfiprintf_r+0x128>
 80226d6:	e024      	b.n	8022722 <_vfiprintf_r+0x11a>
 80226d8:	4b50      	ldr	r3, [pc, #320]	; (802281c <_vfiprintf_r+0x214>)
 80226da:	429c      	cmp	r4, r3
 80226dc:	d101      	bne.n	80226e2 <_vfiprintf_r+0xda>
 80226de:	68b4      	ldr	r4, [r6, #8]
 80226e0:	e7a2      	b.n	8022628 <_vfiprintf_r+0x20>
 80226e2:	4b4f      	ldr	r3, [pc, #316]	; (8022820 <_vfiprintf_r+0x218>)
 80226e4:	429c      	cmp	r4, r3
 80226e6:	bf08      	it	eq
 80226e8:	68f4      	ldreq	r4, [r6, #12]
 80226ea:	e79d      	b.n	8022628 <_vfiprintf_r+0x20>
 80226ec:	4621      	mov	r1, r4
 80226ee:	4630      	mov	r0, r6
 80226f0:	f000 face 	bl	8022c90 <__swsetup_r>
 80226f4:	2800      	cmp	r0, #0
 80226f6:	d09d      	beq.n	8022634 <_vfiprintf_r+0x2c>
 80226f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80226fc:	b01d      	add	sp, #116	; 0x74
 80226fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022702:	46a8      	mov	r8, r5
 8022704:	e7a2      	b.n	802264c <_vfiprintf_r+0x44>
 8022706:	4a44      	ldr	r2, [pc, #272]	; (8022818 <_vfiprintf_r+0x210>)
 8022708:	1a80      	subs	r0, r0, r2
 802270a:	fa0b f000 	lsl.w	r0, fp, r0
 802270e:	4318      	orrs	r0, r3
 8022710:	9004      	str	r0, [sp, #16]
 8022712:	4645      	mov	r5, r8
 8022714:	e7be      	b.n	8022694 <_vfiprintf_r+0x8c>
 8022716:	9a03      	ldr	r2, [sp, #12]
 8022718:	1d11      	adds	r1, r2, #4
 802271a:	6812      	ldr	r2, [r2, #0]
 802271c:	9103      	str	r1, [sp, #12]
 802271e:	2a00      	cmp	r2, #0
 8022720:	db01      	blt.n	8022726 <_vfiprintf_r+0x11e>
 8022722:	9207      	str	r2, [sp, #28]
 8022724:	e004      	b.n	8022730 <_vfiprintf_r+0x128>
 8022726:	4252      	negs	r2, r2
 8022728:	f043 0302 	orr.w	r3, r3, #2
 802272c:	9207      	str	r2, [sp, #28]
 802272e:	9304      	str	r3, [sp, #16]
 8022730:	f898 3000 	ldrb.w	r3, [r8]
 8022734:	2b2e      	cmp	r3, #46	; 0x2e
 8022736:	d10e      	bne.n	8022756 <_vfiprintf_r+0x14e>
 8022738:	f898 3001 	ldrb.w	r3, [r8, #1]
 802273c:	2b2a      	cmp	r3, #42	; 0x2a
 802273e:	d138      	bne.n	80227b2 <_vfiprintf_r+0x1aa>
 8022740:	9b03      	ldr	r3, [sp, #12]
 8022742:	1d1a      	adds	r2, r3, #4
 8022744:	681b      	ldr	r3, [r3, #0]
 8022746:	9203      	str	r2, [sp, #12]
 8022748:	2b00      	cmp	r3, #0
 802274a:	bfb8      	it	lt
 802274c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8022750:	f108 0802 	add.w	r8, r8, #2
 8022754:	9305      	str	r3, [sp, #20]
 8022756:	4d33      	ldr	r5, [pc, #204]	; (8022824 <_vfiprintf_r+0x21c>)
 8022758:	f898 1000 	ldrb.w	r1, [r8]
 802275c:	2203      	movs	r2, #3
 802275e:	4628      	mov	r0, r5
 8022760:	f7dd fd56 	bl	8000210 <memchr>
 8022764:	b140      	cbz	r0, 8022778 <_vfiprintf_r+0x170>
 8022766:	2340      	movs	r3, #64	; 0x40
 8022768:	1b40      	subs	r0, r0, r5
 802276a:	fa03 f000 	lsl.w	r0, r3, r0
 802276e:	9b04      	ldr	r3, [sp, #16]
 8022770:	4303      	orrs	r3, r0
 8022772:	f108 0801 	add.w	r8, r8, #1
 8022776:	9304      	str	r3, [sp, #16]
 8022778:	f898 1000 	ldrb.w	r1, [r8]
 802277c:	482a      	ldr	r0, [pc, #168]	; (8022828 <_vfiprintf_r+0x220>)
 802277e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022782:	2206      	movs	r2, #6
 8022784:	f108 0701 	add.w	r7, r8, #1
 8022788:	f7dd fd42 	bl	8000210 <memchr>
 802278c:	2800      	cmp	r0, #0
 802278e:	d037      	beq.n	8022800 <_vfiprintf_r+0x1f8>
 8022790:	4b26      	ldr	r3, [pc, #152]	; (802282c <_vfiprintf_r+0x224>)
 8022792:	bb1b      	cbnz	r3, 80227dc <_vfiprintf_r+0x1d4>
 8022794:	9b03      	ldr	r3, [sp, #12]
 8022796:	3307      	adds	r3, #7
 8022798:	f023 0307 	bic.w	r3, r3, #7
 802279c:	3308      	adds	r3, #8
 802279e:	9303      	str	r3, [sp, #12]
 80227a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80227a2:	444b      	add	r3, r9
 80227a4:	9309      	str	r3, [sp, #36]	; 0x24
 80227a6:	e750      	b.n	802264a <_vfiprintf_r+0x42>
 80227a8:	fb05 3202 	mla	r2, r5, r2, r3
 80227ac:	2001      	movs	r0, #1
 80227ae:	4688      	mov	r8, r1
 80227b0:	e78a      	b.n	80226c8 <_vfiprintf_r+0xc0>
 80227b2:	2300      	movs	r3, #0
 80227b4:	f108 0801 	add.w	r8, r8, #1
 80227b8:	9305      	str	r3, [sp, #20]
 80227ba:	4619      	mov	r1, r3
 80227bc:	250a      	movs	r5, #10
 80227be:	4640      	mov	r0, r8
 80227c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80227c4:	3a30      	subs	r2, #48	; 0x30
 80227c6:	2a09      	cmp	r2, #9
 80227c8:	d903      	bls.n	80227d2 <_vfiprintf_r+0x1ca>
 80227ca:	2b00      	cmp	r3, #0
 80227cc:	d0c3      	beq.n	8022756 <_vfiprintf_r+0x14e>
 80227ce:	9105      	str	r1, [sp, #20]
 80227d0:	e7c1      	b.n	8022756 <_vfiprintf_r+0x14e>
 80227d2:	fb05 2101 	mla	r1, r5, r1, r2
 80227d6:	2301      	movs	r3, #1
 80227d8:	4680      	mov	r8, r0
 80227da:	e7f0      	b.n	80227be <_vfiprintf_r+0x1b6>
 80227dc:	ab03      	add	r3, sp, #12
 80227de:	9300      	str	r3, [sp, #0]
 80227e0:	4622      	mov	r2, r4
 80227e2:	4b13      	ldr	r3, [pc, #76]	; (8022830 <_vfiprintf_r+0x228>)
 80227e4:	a904      	add	r1, sp, #16
 80227e6:	4630      	mov	r0, r6
 80227e8:	f3af 8000 	nop.w
 80227ec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80227f0:	4681      	mov	r9, r0
 80227f2:	d1d5      	bne.n	80227a0 <_vfiprintf_r+0x198>
 80227f4:	89a3      	ldrh	r3, [r4, #12]
 80227f6:	065b      	lsls	r3, r3, #25
 80227f8:	f53f af7e 	bmi.w	80226f8 <_vfiprintf_r+0xf0>
 80227fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80227fe:	e77d      	b.n	80226fc <_vfiprintf_r+0xf4>
 8022800:	ab03      	add	r3, sp, #12
 8022802:	9300      	str	r3, [sp, #0]
 8022804:	4622      	mov	r2, r4
 8022806:	4b0a      	ldr	r3, [pc, #40]	; (8022830 <_vfiprintf_r+0x228>)
 8022808:	a904      	add	r1, sp, #16
 802280a:	4630      	mov	r0, r6
 802280c:	f000 f888 	bl	8022920 <_printf_i>
 8022810:	e7ec      	b.n	80227ec <_vfiprintf_r+0x1e4>
 8022812:	bf00      	nop
 8022814:	0802872c 	.word	0x0802872c
 8022818:	080286d4 	.word	0x080286d4
 802281c:	0802874c 	.word	0x0802874c
 8022820:	0802870c 	.word	0x0802870c
 8022824:	080286da 	.word	0x080286da
 8022828:	080286de 	.word	0x080286de
 802282c:	00000000 	.word	0x00000000
 8022830:	080225e3 	.word	0x080225e3

08022834 <_printf_common>:
 8022834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022838:	4691      	mov	r9, r2
 802283a:	461f      	mov	r7, r3
 802283c:	688a      	ldr	r2, [r1, #8]
 802283e:	690b      	ldr	r3, [r1, #16]
 8022840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022844:	4293      	cmp	r3, r2
 8022846:	bfb8      	it	lt
 8022848:	4613      	movlt	r3, r2
 802284a:	f8c9 3000 	str.w	r3, [r9]
 802284e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022852:	4606      	mov	r6, r0
 8022854:	460c      	mov	r4, r1
 8022856:	b112      	cbz	r2, 802285e <_printf_common+0x2a>
 8022858:	3301      	adds	r3, #1
 802285a:	f8c9 3000 	str.w	r3, [r9]
 802285e:	6823      	ldr	r3, [r4, #0]
 8022860:	0699      	lsls	r1, r3, #26
 8022862:	bf42      	ittt	mi
 8022864:	f8d9 3000 	ldrmi.w	r3, [r9]
 8022868:	3302      	addmi	r3, #2
 802286a:	f8c9 3000 	strmi.w	r3, [r9]
 802286e:	6825      	ldr	r5, [r4, #0]
 8022870:	f015 0506 	ands.w	r5, r5, #6
 8022874:	d107      	bne.n	8022886 <_printf_common+0x52>
 8022876:	f104 0a19 	add.w	sl, r4, #25
 802287a:	68e3      	ldr	r3, [r4, #12]
 802287c:	f8d9 2000 	ldr.w	r2, [r9]
 8022880:	1a9b      	subs	r3, r3, r2
 8022882:	42ab      	cmp	r3, r5
 8022884:	dc28      	bgt.n	80228d8 <_printf_common+0xa4>
 8022886:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802288a:	6822      	ldr	r2, [r4, #0]
 802288c:	3300      	adds	r3, #0
 802288e:	bf18      	it	ne
 8022890:	2301      	movne	r3, #1
 8022892:	0692      	lsls	r2, r2, #26
 8022894:	d42d      	bmi.n	80228f2 <_printf_common+0xbe>
 8022896:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802289a:	4639      	mov	r1, r7
 802289c:	4630      	mov	r0, r6
 802289e:	47c0      	blx	r8
 80228a0:	3001      	adds	r0, #1
 80228a2:	d020      	beq.n	80228e6 <_printf_common+0xb2>
 80228a4:	6823      	ldr	r3, [r4, #0]
 80228a6:	68e5      	ldr	r5, [r4, #12]
 80228a8:	f8d9 2000 	ldr.w	r2, [r9]
 80228ac:	f003 0306 	and.w	r3, r3, #6
 80228b0:	2b04      	cmp	r3, #4
 80228b2:	bf08      	it	eq
 80228b4:	1aad      	subeq	r5, r5, r2
 80228b6:	68a3      	ldr	r3, [r4, #8]
 80228b8:	6922      	ldr	r2, [r4, #16]
 80228ba:	bf0c      	ite	eq
 80228bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80228c0:	2500      	movne	r5, #0
 80228c2:	4293      	cmp	r3, r2
 80228c4:	bfc4      	itt	gt
 80228c6:	1a9b      	subgt	r3, r3, r2
 80228c8:	18ed      	addgt	r5, r5, r3
 80228ca:	f04f 0900 	mov.w	r9, #0
 80228ce:	341a      	adds	r4, #26
 80228d0:	454d      	cmp	r5, r9
 80228d2:	d11a      	bne.n	802290a <_printf_common+0xd6>
 80228d4:	2000      	movs	r0, #0
 80228d6:	e008      	b.n	80228ea <_printf_common+0xb6>
 80228d8:	2301      	movs	r3, #1
 80228da:	4652      	mov	r2, sl
 80228dc:	4639      	mov	r1, r7
 80228de:	4630      	mov	r0, r6
 80228e0:	47c0      	blx	r8
 80228e2:	3001      	adds	r0, #1
 80228e4:	d103      	bne.n	80228ee <_printf_common+0xba>
 80228e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80228ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80228ee:	3501      	adds	r5, #1
 80228f0:	e7c3      	b.n	802287a <_printf_common+0x46>
 80228f2:	18e1      	adds	r1, r4, r3
 80228f4:	1c5a      	adds	r2, r3, #1
 80228f6:	2030      	movs	r0, #48	; 0x30
 80228f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80228fc:	4422      	add	r2, r4
 80228fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022902:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022906:	3302      	adds	r3, #2
 8022908:	e7c5      	b.n	8022896 <_printf_common+0x62>
 802290a:	2301      	movs	r3, #1
 802290c:	4622      	mov	r2, r4
 802290e:	4639      	mov	r1, r7
 8022910:	4630      	mov	r0, r6
 8022912:	47c0      	blx	r8
 8022914:	3001      	adds	r0, #1
 8022916:	d0e6      	beq.n	80228e6 <_printf_common+0xb2>
 8022918:	f109 0901 	add.w	r9, r9, #1
 802291c:	e7d8      	b.n	80228d0 <_printf_common+0x9c>
	...

08022920 <_printf_i>:
 8022920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022924:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8022928:	460c      	mov	r4, r1
 802292a:	7e09      	ldrb	r1, [r1, #24]
 802292c:	b085      	sub	sp, #20
 802292e:	296e      	cmp	r1, #110	; 0x6e
 8022930:	4617      	mov	r7, r2
 8022932:	4606      	mov	r6, r0
 8022934:	4698      	mov	r8, r3
 8022936:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022938:	f000 80b3 	beq.w	8022aa2 <_printf_i+0x182>
 802293c:	d822      	bhi.n	8022984 <_printf_i+0x64>
 802293e:	2963      	cmp	r1, #99	; 0x63
 8022940:	d036      	beq.n	80229b0 <_printf_i+0x90>
 8022942:	d80a      	bhi.n	802295a <_printf_i+0x3a>
 8022944:	2900      	cmp	r1, #0
 8022946:	f000 80b9 	beq.w	8022abc <_printf_i+0x19c>
 802294a:	2958      	cmp	r1, #88	; 0x58
 802294c:	f000 8083 	beq.w	8022a56 <_printf_i+0x136>
 8022950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022954:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8022958:	e032      	b.n	80229c0 <_printf_i+0xa0>
 802295a:	2964      	cmp	r1, #100	; 0x64
 802295c:	d001      	beq.n	8022962 <_printf_i+0x42>
 802295e:	2969      	cmp	r1, #105	; 0x69
 8022960:	d1f6      	bne.n	8022950 <_printf_i+0x30>
 8022962:	6820      	ldr	r0, [r4, #0]
 8022964:	6813      	ldr	r3, [r2, #0]
 8022966:	0605      	lsls	r5, r0, #24
 8022968:	f103 0104 	add.w	r1, r3, #4
 802296c:	d52a      	bpl.n	80229c4 <_printf_i+0xa4>
 802296e:	681b      	ldr	r3, [r3, #0]
 8022970:	6011      	str	r1, [r2, #0]
 8022972:	2b00      	cmp	r3, #0
 8022974:	da03      	bge.n	802297e <_printf_i+0x5e>
 8022976:	222d      	movs	r2, #45	; 0x2d
 8022978:	425b      	negs	r3, r3
 802297a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802297e:	486f      	ldr	r0, [pc, #444]	; (8022b3c <_printf_i+0x21c>)
 8022980:	220a      	movs	r2, #10
 8022982:	e039      	b.n	80229f8 <_printf_i+0xd8>
 8022984:	2973      	cmp	r1, #115	; 0x73
 8022986:	f000 809d 	beq.w	8022ac4 <_printf_i+0x1a4>
 802298a:	d808      	bhi.n	802299e <_printf_i+0x7e>
 802298c:	296f      	cmp	r1, #111	; 0x6f
 802298e:	d020      	beq.n	80229d2 <_printf_i+0xb2>
 8022990:	2970      	cmp	r1, #112	; 0x70
 8022992:	d1dd      	bne.n	8022950 <_printf_i+0x30>
 8022994:	6823      	ldr	r3, [r4, #0]
 8022996:	f043 0320 	orr.w	r3, r3, #32
 802299a:	6023      	str	r3, [r4, #0]
 802299c:	e003      	b.n	80229a6 <_printf_i+0x86>
 802299e:	2975      	cmp	r1, #117	; 0x75
 80229a0:	d017      	beq.n	80229d2 <_printf_i+0xb2>
 80229a2:	2978      	cmp	r1, #120	; 0x78
 80229a4:	d1d4      	bne.n	8022950 <_printf_i+0x30>
 80229a6:	2378      	movs	r3, #120	; 0x78
 80229a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80229ac:	4864      	ldr	r0, [pc, #400]	; (8022b40 <_printf_i+0x220>)
 80229ae:	e055      	b.n	8022a5c <_printf_i+0x13c>
 80229b0:	6813      	ldr	r3, [r2, #0]
 80229b2:	1d19      	adds	r1, r3, #4
 80229b4:	681b      	ldr	r3, [r3, #0]
 80229b6:	6011      	str	r1, [r2, #0]
 80229b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80229bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80229c0:	2301      	movs	r3, #1
 80229c2:	e08c      	b.n	8022ade <_printf_i+0x1be>
 80229c4:	681b      	ldr	r3, [r3, #0]
 80229c6:	6011      	str	r1, [r2, #0]
 80229c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80229cc:	bf18      	it	ne
 80229ce:	b21b      	sxthne	r3, r3
 80229d0:	e7cf      	b.n	8022972 <_printf_i+0x52>
 80229d2:	6813      	ldr	r3, [r2, #0]
 80229d4:	6825      	ldr	r5, [r4, #0]
 80229d6:	1d18      	adds	r0, r3, #4
 80229d8:	6010      	str	r0, [r2, #0]
 80229da:	0628      	lsls	r0, r5, #24
 80229dc:	d501      	bpl.n	80229e2 <_printf_i+0xc2>
 80229de:	681b      	ldr	r3, [r3, #0]
 80229e0:	e002      	b.n	80229e8 <_printf_i+0xc8>
 80229e2:	0668      	lsls	r0, r5, #25
 80229e4:	d5fb      	bpl.n	80229de <_printf_i+0xbe>
 80229e6:	881b      	ldrh	r3, [r3, #0]
 80229e8:	4854      	ldr	r0, [pc, #336]	; (8022b3c <_printf_i+0x21c>)
 80229ea:	296f      	cmp	r1, #111	; 0x6f
 80229ec:	bf14      	ite	ne
 80229ee:	220a      	movne	r2, #10
 80229f0:	2208      	moveq	r2, #8
 80229f2:	2100      	movs	r1, #0
 80229f4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80229f8:	6865      	ldr	r5, [r4, #4]
 80229fa:	60a5      	str	r5, [r4, #8]
 80229fc:	2d00      	cmp	r5, #0
 80229fe:	f2c0 8095 	blt.w	8022b2c <_printf_i+0x20c>
 8022a02:	6821      	ldr	r1, [r4, #0]
 8022a04:	f021 0104 	bic.w	r1, r1, #4
 8022a08:	6021      	str	r1, [r4, #0]
 8022a0a:	2b00      	cmp	r3, #0
 8022a0c:	d13d      	bne.n	8022a8a <_printf_i+0x16a>
 8022a0e:	2d00      	cmp	r5, #0
 8022a10:	f040 808e 	bne.w	8022b30 <_printf_i+0x210>
 8022a14:	4665      	mov	r5, ip
 8022a16:	2a08      	cmp	r2, #8
 8022a18:	d10b      	bne.n	8022a32 <_printf_i+0x112>
 8022a1a:	6823      	ldr	r3, [r4, #0]
 8022a1c:	07db      	lsls	r3, r3, #31
 8022a1e:	d508      	bpl.n	8022a32 <_printf_i+0x112>
 8022a20:	6923      	ldr	r3, [r4, #16]
 8022a22:	6862      	ldr	r2, [r4, #4]
 8022a24:	429a      	cmp	r2, r3
 8022a26:	bfde      	ittt	le
 8022a28:	2330      	movle	r3, #48	; 0x30
 8022a2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8022a2e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8022a32:	ebac 0305 	sub.w	r3, ip, r5
 8022a36:	6123      	str	r3, [r4, #16]
 8022a38:	f8cd 8000 	str.w	r8, [sp]
 8022a3c:	463b      	mov	r3, r7
 8022a3e:	aa03      	add	r2, sp, #12
 8022a40:	4621      	mov	r1, r4
 8022a42:	4630      	mov	r0, r6
 8022a44:	f7ff fef6 	bl	8022834 <_printf_common>
 8022a48:	3001      	adds	r0, #1
 8022a4a:	d14d      	bne.n	8022ae8 <_printf_i+0x1c8>
 8022a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022a50:	b005      	add	sp, #20
 8022a52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022a56:	4839      	ldr	r0, [pc, #228]	; (8022b3c <_printf_i+0x21c>)
 8022a58:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8022a5c:	6813      	ldr	r3, [r2, #0]
 8022a5e:	6821      	ldr	r1, [r4, #0]
 8022a60:	1d1d      	adds	r5, r3, #4
 8022a62:	681b      	ldr	r3, [r3, #0]
 8022a64:	6015      	str	r5, [r2, #0]
 8022a66:	060a      	lsls	r2, r1, #24
 8022a68:	d50b      	bpl.n	8022a82 <_printf_i+0x162>
 8022a6a:	07ca      	lsls	r2, r1, #31
 8022a6c:	bf44      	itt	mi
 8022a6e:	f041 0120 	orrmi.w	r1, r1, #32
 8022a72:	6021      	strmi	r1, [r4, #0]
 8022a74:	b91b      	cbnz	r3, 8022a7e <_printf_i+0x15e>
 8022a76:	6822      	ldr	r2, [r4, #0]
 8022a78:	f022 0220 	bic.w	r2, r2, #32
 8022a7c:	6022      	str	r2, [r4, #0]
 8022a7e:	2210      	movs	r2, #16
 8022a80:	e7b7      	b.n	80229f2 <_printf_i+0xd2>
 8022a82:	064d      	lsls	r5, r1, #25
 8022a84:	bf48      	it	mi
 8022a86:	b29b      	uxthmi	r3, r3
 8022a88:	e7ef      	b.n	8022a6a <_printf_i+0x14a>
 8022a8a:	4665      	mov	r5, ip
 8022a8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8022a90:	fb02 3311 	mls	r3, r2, r1, r3
 8022a94:	5cc3      	ldrb	r3, [r0, r3]
 8022a96:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8022a9a:	460b      	mov	r3, r1
 8022a9c:	2900      	cmp	r1, #0
 8022a9e:	d1f5      	bne.n	8022a8c <_printf_i+0x16c>
 8022aa0:	e7b9      	b.n	8022a16 <_printf_i+0xf6>
 8022aa2:	6813      	ldr	r3, [r2, #0]
 8022aa4:	6825      	ldr	r5, [r4, #0]
 8022aa6:	6961      	ldr	r1, [r4, #20]
 8022aa8:	1d18      	adds	r0, r3, #4
 8022aaa:	6010      	str	r0, [r2, #0]
 8022aac:	0628      	lsls	r0, r5, #24
 8022aae:	681b      	ldr	r3, [r3, #0]
 8022ab0:	d501      	bpl.n	8022ab6 <_printf_i+0x196>
 8022ab2:	6019      	str	r1, [r3, #0]
 8022ab4:	e002      	b.n	8022abc <_printf_i+0x19c>
 8022ab6:	066a      	lsls	r2, r5, #25
 8022ab8:	d5fb      	bpl.n	8022ab2 <_printf_i+0x192>
 8022aba:	8019      	strh	r1, [r3, #0]
 8022abc:	2300      	movs	r3, #0
 8022abe:	6123      	str	r3, [r4, #16]
 8022ac0:	4665      	mov	r5, ip
 8022ac2:	e7b9      	b.n	8022a38 <_printf_i+0x118>
 8022ac4:	6813      	ldr	r3, [r2, #0]
 8022ac6:	1d19      	adds	r1, r3, #4
 8022ac8:	6011      	str	r1, [r2, #0]
 8022aca:	681d      	ldr	r5, [r3, #0]
 8022acc:	6862      	ldr	r2, [r4, #4]
 8022ace:	2100      	movs	r1, #0
 8022ad0:	4628      	mov	r0, r5
 8022ad2:	f7dd fb9d 	bl	8000210 <memchr>
 8022ad6:	b108      	cbz	r0, 8022adc <_printf_i+0x1bc>
 8022ad8:	1b40      	subs	r0, r0, r5
 8022ada:	6060      	str	r0, [r4, #4]
 8022adc:	6863      	ldr	r3, [r4, #4]
 8022ade:	6123      	str	r3, [r4, #16]
 8022ae0:	2300      	movs	r3, #0
 8022ae2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022ae6:	e7a7      	b.n	8022a38 <_printf_i+0x118>
 8022ae8:	6923      	ldr	r3, [r4, #16]
 8022aea:	462a      	mov	r2, r5
 8022aec:	4639      	mov	r1, r7
 8022aee:	4630      	mov	r0, r6
 8022af0:	47c0      	blx	r8
 8022af2:	3001      	adds	r0, #1
 8022af4:	d0aa      	beq.n	8022a4c <_printf_i+0x12c>
 8022af6:	6823      	ldr	r3, [r4, #0]
 8022af8:	079b      	lsls	r3, r3, #30
 8022afa:	d413      	bmi.n	8022b24 <_printf_i+0x204>
 8022afc:	68e0      	ldr	r0, [r4, #12]
 8022afe:	9b03      	ldr	r3, [sp, #12]
 8022b00:	4298      	cmp	r0, r3
 8022b02:	bfb8      	it	lt
 8022b04:	4618      	movlt	r0, r3
 8022b06:	e7a3      	b.n	8022a50 <_printf_i+0x130>
 8022b08:	2301      	movs	r3, #1
 8022b0a:	464a      	mov	r2, r9
 8022b0c:	4639      	mov	r1, r7
 8022b0e:	4630      	mov	r0, r6
 8022b10:	47c0      	blx	r8
 8022b12:	3001      	adds	r0, #1
 8022b14:	d09a      	beq.n	8022a4c <_printf_i+0x12c>
 8022b16:	3501      	adds	r5, #1
 8022b18:	68e3      	ldr	r3, [r4, #12]
 8022b1a:	9a03      	ldr	r2, [sp, #12]
 8022b1c:	1a9b      	subs	r3, r3, r2
 8022b1e:	42ab      	cmp	r3, r5
 8022b20:	dcf2      	bgt.n	8022b08 <_printf_i+0x1e8>
 8022b22:	e7eb      	b.n	8022afc <_printf_i+0x1dc>
 8022b24:	2500      	movs	r5, #0
 8022b26:	f104 0919 	add.w	r9, r4, #25
 8022b2a:	e7f5      	b.n	8022b18 <_printf_i+0x1f8>
 8022b2c:	2b00      	cmp	r3, #0
 8022b2e:	d1ac      	bne.n	8022a8a <_printf_i+0x16a>
 8022b30:	7803      	ldrb	r3, [r0, #0]
 8022b32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022b36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022b3a:	e76c      	b.n	8022a16 <_printf_i+0xf6>
 8022b3c:	080286e5 	.word	0x080286e5
 8022b40:	080286f6 	.word	0x080286f6

08022b44 <_sbrk_r>:
 8022b44:	b538      	push	{r3, r4, r5, lr}
 8022b46:	4c06      	ldr	r4, [pc, #24]	; (8022b60 <_sbrk_r+0x1c>)
 8022b48:	2300      	movs	r3, #0
 8022b4a:	4605      	mov	r5, r0
 8022b4c:	4608      	mov	r0, r1
 8022b4e:	6023      	str	r3, [r4, #0]
 8022b50:	f7df f890 	bl	8001c74 <_sbrk>
 8022b54:	1c43      	adds	r3, r0, #1
 8022b56:	d102      	bne.n	8022b5e <_sbrk_r+0x1a>
 8022b58:	6823      	ldr	r3, [r4, #0]
 8022b5a:	b103      	cbz	r3, 8022b5e <_sbrk_r+0x1a>
 8022b5c:	602b      	str	r3, [r5, #0]
 8022b5e:	bd38      	pop	{r3, r4, r5, pc}
 8022b60:	2000b788 	.word	0x2000b788

08022b64 <_raise_r>:
 8022b64:	291f      	cmp	r1, #31
 8022b66:	b538      	push	{r3, r4, r5, lr}
 8022b68:	4604      	mov	r4, r0
 8022b6a:	460d      	mov	r5, r1
 8022b6c:	d904      	bls.n	8022b78 <_raise_r+0x14>
 8022b6e:	2316      	movs	r3, #22
 8022b70:	6003      	str	r3, [r0, #0]
 8022b72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022b76:	bd38      	pop	{r3, r4, r5, pc}
 8022b78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8022b7a:	b112      	cbz	r2, 8022b82 <_raise_r+0x1e>
 8022b7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022b80:	b94b      	cbnz	r3, 8022b96 <_raise_r+0x32>
 8022b82:	4620      	mov	r0, r4
 8022b84:	f000 f830 	bl	8022be8 <_getpid_r>
 8022b88:	462a      	mov	r2, r5
 8022b8a:	4601      	mov	r1, r0
 8022b8c:	4620      	mov	r0, r4
 8022b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022b92:	f000 b817 	b.w	8022bc4 <_kill_r>
 8022b96:	2b01      	cmp	r3, #1
 8022b98:	d00a      	beq.n	8022bb0 <_raise_r+0x4c>
 8022b9a:	1c59      	adds	r1, r3, #1
 8022b9c:	d103      	bne.n	8022ba6 <_raise_r+0x42>
 8022b9e:	2316      	movs	r3, #22
 8022ba0:	6003      	str	r3, [r0, #0]
 8022ba2:	2001      	movs	r0, #1
 8022ba4:	e7e7      	b.n	8022b76 <_raise_r+0x12>
 8022ba6:	2400      	movs	r4, #0
 8022ba8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022bac:	4628      	mov	r0, r5
 8022bae:	4798      	blx	r3
 8022bb0:	2000      	movs	r0, #0
 8022bb2:	e7e0      	b.n	8022b76 <_raise_r+0x12>

08022bb4 <raise>:
 8022bb4:	4b02      	ldr	r3, [pc, #8]	; (8022bc0 <raise+0xc>)
 8022bb6:	4601      	mov	r1, r0
 8022bb8:	6818      	ldr	r0, [r3, #0]
 8022bba:	f7ff bfd3 	b.w	8022b64 <_raise_r>
 8022bbe:	bf00      	nop
 8022bc0:	200000a8 	.word	0x200000a8

08022bc4 <_kill_r>:
 8022bc4:	b538      	push	{r3, r4, r5, lr}
 8022bc6:	4c07      	ldr	r4, [pc, #28]	; (8022be4 <_kill_r+0x20>)
 8022bc8:	2300      	movs	r3, #0
 8022bca:	4605      	mov	r5, r0
 8022bcc:	4608      	mov	r0, r1
 8022bce:	4611      	mov	r1, r2
 8022bd0:	6023      	str	r3, [r4, #0]
 8022bd2:	f7de ffc7 	bl	8001b64 <_kill>
 8022bd6:	1c43      	adds	r3, r0, #1
 8022bd8:	d102      	bne.n	8022be0 <_kill_r+0x1c>
 8022bda:	6823      	ldr	r3, [r4, #0]
 8022bdc:	b103      	cbz	r3, 8022be0 <_kill_r+0x1c>
 8022bde:	602b      	str	r3, [r5, #0]
 8022be0:	bd38      	pop	{r3, r4, r5, pc}
 8022be2:	bf00      	nop
 8022be4:	2000b788 	.word	0x2000b788

08022be8 <_getpid_r>:
 8022be8:	f7de bfb4 	b.w	8001b54 <_getpid>

08022bec <__swbuf_r>:
 8022bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022bee:	460e      	mov	r6, r1
 8022bf0:	4614      	mov	r4, r2
 8022bf2:	4605      	mov	r5, r0
 8022bf4:	b118      	cbz	r0, 8022bfe <__swbuf_r+0x12>
 8022bf6:	6983      	ldr	r3, [r0, #24]
 8022bf8:	b90b      	cbnz	r3, 8022bfe <__swbuf_r+0x12>
 8022bfa:	f000 fa0b 	bl	8023014 <__sinit>
 8022bfe:	4b21      	ldr	r3, [pc, #132]	; (8022c84 <__swbuf_r+0x98>)
 8022c00:	429c      	cmp	r4, r3
 8022c02:	d12a      	bne.n	8022c5a <__swbuf_r+0x6e>
 8022c04:	686c      	ldr	r4, [r5, #4]
 8022c06:	69a3      	ldr	r3, [r4, #24]
 8022c08:	60a3      	str	r3, [r4, #8]
 8022c0a:	89a3      	ldrh	r3, [r4, #12]
 8022c0c:	071a      	lsls	r2, r3, #28
 8022c0e:	d52e      	bpl.n	8022c6e <__swbuf_r+0x82>
 8022c10:	6923      	ldr	r3, [r4, #16]
 8022c12:	b363      	cbz	r3, 8022c6e <__swbuf_r+0x82>
 8022c14:	6923      	ldr	r3, [r4, #16]
 8022c16:	6820      	ldr	r0, [r4, #0]
 8022c18:	1ac0      	subs	r0, r0, r3
 8022c1a:	6963      	ldr	r3, [r4, #20]
 8022c1c:	b2f6      	uxtb	r6, r6
 8022c1e:	4283      	cmp	r3, r0
 8022c20:	4637      	mov	r7, r6
 8022c22:	dc04      	bgt.n	8022c2e <__swbuf_r+0x42>
 8022c24:	4621      	mov	r1, r4
 8022c26:	4628      	mov	r0, r5
 8022c28:	f000 f98a 	bl	8022f40 <_fflush_r>
 8022c2c:	bb28      	cbnz	r0, 8022c7a <__swbuf_r+0x8e>
 8022c2e:	68a3      	ldr	r3, [r4, #8]
 8022c30:	3b01      	subs	r3, #1
 8022c32:	60a3      	str	r3, [r4, #8]
 8022c34:	6823      	ldr	r3, [r4, #0]
 8022c36:	1c5a      	adds	r2, r3, #1
 8022c38:	6022      	str	r2, [r4, #0]
 8022c3a:	701e      	strb	r6, [r3, #0]
 8022c3c:	6963      	ldr	r3, [r4, #20]
 8022c3e:	3001      	adds	r0, #1
 8022c40:	4283      	cmp	r3, r0
 8022c42:	d004      	beq.n	8022c4e <__swbuf_r+0x62>
 8022c44:	89a3      	ldrh	r3, [r4, #12]
 8022c46:	07db      	lsls	r3, r3, #31
 8022c48:	d519      	bpl.n	8022c7e <__swbuf_r+0x92>
 8022c4a:	2e0a      	cmp	r6, #10
 8022c4c:	d117      	bne.n	8022c7e <__swbuf_r+0x92>
 8022c4e:	4621      	mov	r1, r4
 8022c50:	4628      	mov	r0, r5
 8022c52:	f000 f975 	bl	8022f40 <_fflush_r>
 8022c56:	b190      	cbz	r0, 8022c7e <__swbuf_r+0x92>
 8022c58:	e00f      	b.n	8022c7a <__swbuf_r+0x8e>
 8022c5a:	4b0b      	ldr	r3, [pc, #44]	; (8022c88 <__swbuf_r+0x9c>)
 8022c5c:	429c      	cmp	r4, r3
 8022c5e:	d101      	bne.n	8022c64 <__swbuf_r+0x78>
 8022c60:	68ac      	ldr	r4, [r5, #8]
 8022c62:	e7d0      	b.n	8022c06 <__swbuf_r+0x1a>
 8022c64:	4b09      	ldr	r3, [pc, #36]	; (8022c8c <__swbuf_r+0xa0>)
 8022c66:	429c      	cmp	r4, r3
 8022c68:	bf08      	it	eq
 8022c6a:	68ec      	ldreq	r4, [r5, #12]
 8022c6c:	e7cb      	b.n	8022c06 <__swbuf_r+0x1a>
 8022c6e:	4621      	mov	r1, r4
 8022c70:	4628      	mov	r0, r5
 8022c72:	f000 f80d 	bl	8022c90 <__swsetup_r>
 8022c76:	2800      	cmp	r0, #0
 8022c78:	d0cc      	beq.n	8022c14 <__swbuf_r+0x28>
 8022c7a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8022c7e:	4638      	mov	r0, r7
 8022c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022c82:	bf00      	nop
 8022c84:	0802872c 	.word	0x0802872c
 8022c88:	0802874c 	.word	0x0802874c
 8022c8c:	0802870c 	.word	0x0802870c

08022c90 <__swsetup_r>:
 8022c90:	4b32      	ldr	r3, [pc, #200]	; (8022d5c <__swsetup_r+0xcc>)
 8022c92:	b570      	push	{r4, r5, r6, lr}
 8022c94:	681d      	ldr	r5, [r3, #0]
 8022c96:	4606      	mov	r6, r0
 8022c98:	460c      	mov	r4, r1
 8022c9a:	b125      	cbz	r5, 8022ca6 <__swsetup_r+0x16>
 8022c9c:	69ab      	ldr	r3, [r5, #24]
 8022c9e:	b913      	cbnz	r3, 8022ca6 <__swsetup_r+0x16>
 8022ca0:	4628      	mov	r0, r5
 8022ca2:	f000 f9b7 	bl	8023014 <__sinit>
 8022ca6:	4b2e      	ldr	r3, [pc, #184]	; (8022d60 <__swsetup_r+0xd0>)
 8022ca8:	429c      	cmp	r4, r3
 8022caa:	d10f      	bne.n	8022ccc <__swsetup_r+0x3c>
 8022cac:	686c      	ldr	r4, [r5, #4]
 8022cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022cb2:	b29a      	uxth	r2, r3
 8022cb4:	0715      	lsls	r5, r2, #28
 8022cb6:	d42c      	bmi.n	8022d12 <__swsetup_r+0x82>
 8022cb8:	06d0      	lsls	r0, r2, #27
 8022cba:	d411      	bmi.n	8022ce0 <__swsetup_r+0x50>
 8022cbc:	2209      	movs	r2, #9
 8022cbe:	6032      	str	r2, [r6, #0]
 8022cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022cc4:	81a3      	strh	r3, [r4, #12]
 8022cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022cca:	e03e      	b.n	8022d4a <__swsetup_r+0xba>
 8022ccc:	4b25      	ldr	r3, [pc, #148]	; (8022d64 <__swsetup_r+0xd4>)
 8022cce:	429c      	cmp	r4, r3
 8022cd0:	d101      	bne.n	8022cd6 <__swsetup_r+0x46>
 8022cd2:	68ac      	ldr	r4, [r5, #8]
 8022cd4:	e7eb      	b.n	8022cae <__swsetup_r+0x1e>
 8022cd6:	4b24      	ldr	r3, [pc, #144]	; (8022d68 <__swsetup_r+0xd8>)
 8022cd8:	429c      	cmp	r4, r3
 8022cda:	bf08      	it	eq
 8022cdc:	68ec      	ldreq	r4, [r5, #12]
 8022cde:	e7e6      	b.n	8022cae <__swsetup_r+0x1e>
 8022ce0:	0751      	lsls	r1, r2, #29
 8022ce2:	d512      	bpl.n	8022d0a <__swsetup_r+0x7a>
 8022ce4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022ce6:	b141      	cbz	r1, 8022cfa <__swsetup_r+0x6a>
 8022ce8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022cec:	4299      	cmp	r1, r3
 8022cee:	d002      	beq.n	8022cf6 <__swsetup_r+0x66>
 8022cf0:	4630      	mov	r0, r6
 8022cf2:	f7ff fbb7 	bl	8022464 <_free_r>
 8022cf6:	2300      	movs	r3, #0
 8022cf8:	6363      	str	r3, [r4, #52]	; 0x34
 8022cfa:	89a3      	ldrh	r3, [r4, #12]
 8022cfc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022d00:	81a3      	strh	r3, [r4, #12]
 8022d02:	2300      	movs	r3, #0
 8022d04:	6063      	str	r3, [r4, #4]
 8022d06:	6923      	ldr	r3, [r4, #16]
 8022d08:	6023      	str	r3, [r4, #0]
 8022d0a:	89a3      	ldrh	r3, [r4, #12]
 8022d0c:	f043 0308 	orr.w	r3, r3, #8
 8022d10:	81a3      	strh	r3, [r4, #12]
 8022d12:	6923      	ldr	r3, [r4, #16]
 8022d14:	b94b      	cbnz	r3, 8022d2a <__swsetup_r+0x9a>
 8022d16:	89a3      	ldrh	r3, [r4, #12]
 8022d18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022d20:	d003      	beq.n	8022d2a <__swsetup_r+0x9a>
 8022d22:	4621      	mov	r1, r4
 8022d24:	4630      	mov	r0, r6
 8022d26:	f000 fa23 	bl	8023170 <__smakebuf_r>
 8022d2a:	89a2      	ldrh	r2, [r4, #12]
 8022d2c:	f012 0301 	ands.w	r3, r2, #1
 8022d30:	d00c      	beq.n	8022d4c <__swsetup_r+0xbc>
 8022d32:	2300      	movs	r3, #0
 8022d34:	60a3      	str	r3, [r4, #8]
 8022d36:	6963      	ldr	r3, [r4, #20]
 8022d38:	425b      	negs	r3, r3
 8022d3a:	61a3      	str	r3, [r4, #24]
 8022d3c:	6923      	ldr	r3, [r4, #16]
 8022d3e:	b953      	cbnz	r3, 8022d56 <__swsetup_r+0xc6>
 8022d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022d44:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8022d48:	d1ba      	bne.n	8022cc0 <__swsetup_r+0x30>
 8022d4a:	bd70      	pop	{r4, r5, r6, pc}
 8022d4c:	0792      	lsls	r2, r2, #30
 8022d4e:	bf58      	it	pl
 8022d50:	6963      	ldrpl	r3, [r4, #20]
 8022d52:	60a3      	str	r3, [r4, #8]
 8022d54:	e7f2      	b.n	8022d3c <__swsetup_r+0xac>
 8022d56:	2000      	movs	r0, #0
 8022d58:	e7f7      	b.n	8022d4a <__swsetup_r+0xba>
 8022d5a:	bf00      	nop
 8022d5c:	200000a8 	.word	0x200000a8
 8022d60:	0802872c 	.word	0x0802872c
 8022d64:	0802874c 	.word	0x0802874c
 8022d68:	0802870c 	.word	0x0802870c

08022d6c <__register_exitproc>:
 8022d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022d70:	4d2c      	ldr	r5, [pc, #176]	; (8022e24 <__register_exitproc+0xb8>)
 8022d72:	682c      	ldr	r4, [r5, #0]
 8022d74:	4607      	mov	r7, r0
 8022d76:	460e      	mov	r6, r1
 8022d78:	4691      	mov	r9, r2
 8022d7a:	4698      	mov	r8, r3
 8022d7c:	b934      	cbnz	r4, 8022d8c <__register_exitproc+0x20>
 8022d7e:	4b2a      	ldr	r3, [pc, #168]	; (8022e28 <__register_exitproc+0xbc>)
 8022d80:	4c2a      	ldr	r4, [pc, #168]	; (8022e2c <__register_exitproc+0xc0>)
 8022d82:	602c      	str	r4, [r5, #0]
 8022d84:	b113      	cbz	r3, 8022d8c <__register_exitproc+0x20>
 8022d86:	681b      	ldr	r3, [r3, #0]
 8022d88:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8022d8c:	6863      	ldr	r3, [r4, #4]
 8022d8e:	2b1f      	cmp	r3, #31
 8022d90:	dd3d      	ble.n	8022e0e <__register_exitproc+0xa2>
 8022d92:	4b27      	ldr	r3, [pc, #156]	; (8022e30 <__register_exitproc+0xc4>)
 8022d94:	b91b      	cbnz	r3, 8022d9e <__register_exitproc+0x32>
 8022d96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022d9e:	208c      	movs	r0, #140	; 0x8c
 8022da0:	f7ff fb3c 	bl	802241c <malloc>
 8022da4:	4604      	mov	r4, r0
 8022da6:	2800      	cmp	r0, #0
 8022da8:	d0f5      	beq.n	8022d96 <__register_exitproc+0x2a>
 8022daa:	2300      	movs	r3, #0
 8022dac:	682a      	ldr	r2, [r5, #0]
 8022dae:	6002      	str	r2, [r0, #0]
 8022db0:	6043      	str	r3, [r0, #4]
 8022db2:	6028      	str	r0, [r5, #0]
 8022db4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8022db8:	b30f      	cbz	r7, 8022dfe <__register_exitproc+0x92>
 8022dba:	f44f 7084 	mov.w	r0, #264	; 0x108
 8022dbe:	f7ff fb2d 	bl	802241c <malloc>
 8022dc2:	2800      	cmp	r0, #0
 8022dc4:	d0e7      	beq.n	8022d96 <__register_exitproc+0x2a>
 8022dc6:	2300      	movs	r3, #0
 8022dc8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8022dcc:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8022dd0:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8022dd4:	6862      	ldr	r2, [r4, #4]
 8022dd6:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8022dda:	2301      	movs	r3, #1
 8022ddc:	4093      	lsls	r3, r2
 8022dde:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8022de2:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8022de6:	431a      	orrs	r2, r3
 8022de8:	2f02      	cmp	r7, #2
 8022dea:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8022dee:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 8022df2:	bf02      	ittt	eq
 8022df4:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8022df8:	4313      	orreq	r3, r2
 8022dfa:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8022dfe:	6863      	ldr	r3, [r4, #4]
 8022e00:	1c5a      	adds	r2, r3, #1
 8022e02:	3302      	adds	r3, #2
 8022e04:	6062      	str	r2, [r4, #4]
 8022e06:	2000      	movs	r0, #0
 8022e08:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8022e0c:	e7c5      	b.n	8022d9a <__register_exitproc+0x2e>
 8022e0e:	2f00      	cmp	r7, #0
 8022e10:	d0f5      	beq.n	8022dfe <__register_exitproc+0x92>
 8022e12:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8022e16:	2800      	cmp	r0, #0
 8022e18:	d1dc      	bne.n	8022dd4 <__register_exitproc+0x68>
 8022e1a:	4b05      	ldr	r3, [pc, #20]	; (8022e30 <__register_exitproc+0xc4>)
 8022e1c:	2b00      	cmp	r3, #0
 8022e1e:	d0ba      	beq.n	8022d96 <__register_exitproc+0x2a>
 8022e20:	e7cb      	b.n	8022dba <__register_exitproc+0x4e>
 8022e22:	bf00      	nop
 8022e24:	2000b518 	.word	0x2000b518
 8022e28:	08028708 	.word	0x08028708
 8022e2c:	2000b48c 	.word	0x2000b48c
 8022e30:	0802241d 	.word	0x0802241d

08022e34 <__sflush_r>:
 8022e34:	898a      	ldrh	r2, [r1, #12]
 8022e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022e3a:	4605      	mov	r5, r0
 8022e3c:	0710      	lsls	r0, r2, #28
 8022e3e:	460c      	mov	r4, r1
 8022e40:	d458      	bmi.n	8022ef4 <__sflush_r+0xc0>
 8022e42:	684b      	ldr	r3, [r1, #4]
 8022e44:	2b00      	cmp	r3, #0
 8022e46:	dc05      	bgt.n	8022e54 <__sflush_r+0x20>
 8022e48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022e4a:	2b00      	cmp	r3, #0
 8022e4c:	dc02      	bgt.n	8022e54 <__sflush_r+0x20>
 8022e4e:	2000      	movs	r0, #0
 8022e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022e54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022e56:	2e00      	cmp	r6, #0
 8022e58:	d0f9      	beq.n	8022e4e <__sflush_r+0x1a>
 8022e5a:	2300      	movs	r3, #0
 8022e5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022e60:	682f      	ldr	r7, [r5, #0]
 8022e62:	6a21      	ldr	r1, [r4, #32]
 8022e64:	602b      	str	r3, [r5, #0]
 8022e66:	d032      	beq.n	8022ece <__sflush_r+0x9a>
 8022e68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022e6a:	89a3      	ldrh	r3, [r4, #12]
 8022e6c:	075a      	lsls	r2, r3, #29
 8022e6e:	d505      	bpl.n	8022e7c <__sflush_r+0x48>
 8022e70:	6863      	ldr	r3, [r4, #4]
 8022e72:	1ac0      	subs	r0, r0, r3
 8022e74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022e76:	b10b      	cbz	r3, 8022e7c <__sflush_r+0x48>
 8022e78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022e7a:	1ac0      	subs	r0, r0, r3
 8022e7c:	2300      	movs	r3, #0
 8022e7e:	4602      	mov	r2, r0
 8022e80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022e82:	6a21      	ldr	r1, [r4, #32]
 8022e84:	4628      	mov	r0, r5
 8022e86:	47b0      	blx	r6
 8022e88:	1c43      	adds	r3, r0, #1
 8022e8a:	89a3      	ldrh	r3, [r4, #12]
 8022e8c:	d106      	bne.n	8022e9c <__sflush_r+0x68>
 8022e8e:	6829      	ldr	r1, [r5, #0]
 8022e90:	291d      	cmp	r1, #29
 8022e92:	d848      	bhi.n	8022f26 <__sflush_r+0xf2>
 8022e94:	4a29      	ldr	r2, [pc, #164]	; (8022f3c <__sflush_r+0x108>)
 8022e96:	40ca      	lsrs	r2, r1
 8022e98:	07d6      	lsls	r6, r2, #31
 8022e9a:	d544      	bpl.n	8022f26 <__sflush_r+0xf2>
 8022e9c:	2200      	movs	r2, #0
 8022e9e:	6062      	str	r2, [r4, #4]
 8022ea0:	04d9      	lsls	r1, r3, #19
 8022ea2:	6922      	ldr	r2, [r4, #16]
 8022ea4:	6022      	str	r2, [r4, #0]
 8022ea6:	d504      	bpl.n	8022eb2 <__sflush_r+0x7e>
 8022ea8:	1c42      	adds	r2, r0, #1
 8022eaa:	d101      	bne.n	8022eb0 <__sflush_r+0x7c>
 8022eac:	682b      	ldr	r3, [r5, #0]
 8022eae:	b903      	cbnz	r3, 8022eb2 <__sflush_r+0x7e>
 8022eb0:	6560      	str	r0, [r4, #84]	; 0x54
 8022eb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022eb4:	602f      	str	r7, [r5, #0]
 8022eb6:	2900      	cmp	r1, #0
 8022eb8:	d0c9      	beq.n	8022e4e <__sflush_r+0x1a>
 8022eba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022ebe:	4299      	cmp	r1, r3
 8022ec0:	d002      	beq.n	8022ec8 <__sflush_r+0x94>
 8022ec2:	4628      	mov	r0, r5
 8022ec4:	f7ff face 	bl	8022464 <_free_r>
 8022ec8:	2000      	movs	r0, #0
 8022eca:	6360      	str	r0, [r4, #52]	; 0x34
 8022ecc:	e7c0      	b.n	8022e50 <__sflush_r+0x1c>
 8022ece:	2301      	movs	r3, #1
 8022ed0:	4628      	mov	r0, r5
 8022ed2:	47b0      	blx	r6
 8022ed4:	1c41      	adds	r1, r0, #1
 8022ed6:	d1c8      	bne.n	8022e6a <__sflush_r+0x36>
 8022ed8:	682b      	ldr	r3, [r5, #0]
 8022eda:	2b00      	cmp	r3, #0
 8022edc:	d0c5      	beq.n	8022e6a <__sflush_r+0x36>
 8022ede:	2b1d      	cmp	r3, #29
 8022ee0:	d001      	beq.n	8022ee6 <__sflush_r+0xb2>
 8022ee2:	2b16      	cmp	r3, #22
 8022ee4:	d101      	bne.n	8022eea <__sflush_r+0xb6>
 8022ee6:	602f      	str	r7, [r5, #0]
 8022ee8:	e7b1      	b.n	8022e4e <__sflush_r+0x1a>
 8022eea:	89a3      	ldrh	r3, [r4, #12]
 8022eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022ef0:	81a3      	strh	r3, [r4, #12]
 8022ef2:	e7ad      	b.n	8022e50 <__sflush_r+0x1c>
 8022ef4:	690f      	ldr	r7, [r1, #16]
 8022ef6:	2f00      	cmp	r7, #0
 8022ef8:	d0a9      	beq.n	8022e4e <__sflush_r+0x1a>
 8022efa:	0793      	lsls	r3, r2, #30
 8022efc:	680e      	ldr	r6, [r1, #0]
 8022efe:	bf08      	it	eq
 8022f00:	694b      	ldreq	r3, [r1, #20]
 8022f02:	600f      	str	r7, [r1, #0]
 8022f04:	bf18      	it	ne
 8022f06:	2300      	movne	r3, #0
 8022f08:	eba6 0807 	sub.w	r8, r6, r7
 8022f0c:	608b      	str	r3, [r1, #8]
 8022f0e:	f1b8 0f00 	cmp.w	r8, #0
 8022f12:	dd9c      	ble.n	8022e4e <__sflush_r+0x1a>
 8022f14:	4643      	mov	r3, r8
 8022f16:	463a      	mov	r2, r7
 8022f18:	6a21      	ldr	r1, [r4, #32]
 8022f1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022f1c:	4628      	mov	r0, r5
 8022f1e:	47b0      	blx	r6
 8022f20:	2800      	cmp	r0, #0
 8022f22:	dc06      	bgt.n	8022f32 <__sflush_r+0xfe>
 8022f24:	89a3      	ldrh	r3, [r4, #12]
 8022f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022f2a:	81a3      	strh	r3, [r4, #12]
 8022f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022f30:	e78e      	b.n	8022e50 <__sflush_r+0x1c>
 8022f32:	4407      	add	r7, r0
 8022f34:	eba8 0800 	sub.w	r8, r8, r0
 8022f38:	e7e9      	b.n	8022f0e <__sflush_r+0xda>
 8022f3a:	bf00      	nop
 8022f3c:	20400001 	.word	0x20400001

08022f40 <_fflush_r>:
 8022f40:	b538      	push	{r3, r4, r5, lr}
 8022f42:	690b      	ldr	r3, [r1, #16]
 8022f44:	4605      	mov	r5, r0
 8022f46:	460c      	mov	r4, r1
 8022f48:	b1db      	cbz	r3, 8022f82 <_fflush_r+0x42>
 8022f4a:	b118      	cbz	r0, 8022f54 <_fflush_r+0x14>
 8022f4c:	6983      	ldr	r3, [r0, #24]
 8022f4e:	b90b      	cbnz	r3, 8022f54 <_fflush_r+0x14>
 8022f50:	f000 f860 	bl	8023014 <__sinit>
 8022f54:	4b0c      	ldr	r3, [pc, #48]	; (8022f88 <_fflush_r+0x48>)
 8022f56:	429c      	cmp	r4, r3
 8022f58:	d109      	bne.n	8022f6e <_fflush_r+0x2e>
 8022f5a:	686c      	ldr	r4, [r5, #4]
 8022f5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022f60:	b17b      	cbz	r3, 8022f82 <_fflush_r+0x42>
 8022f62:	4621      	mov	r1, r4
 8022f64:	4628      	mov	r0, r5
 8022f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022f6a:	f7ff bf63 	b.w	8022e34 <__sflush_r>
 8022f6e:	4b07      	ldr	r3, [pc, #28]	; (8022f8c <_fflush_r+0x4c>)
 8022f70:	429c      	cmp	r4, r3
 8022f72:	d101      	bne.n	8022f78 <_fflush_r+0x38>
 8022f74:	68ac      	ldr	r4, [r5, #8]
 8022f76:	e7f1      	b.n	8022f5c <_fflush_r+0x1c>
 8022f78:	4b05      	ldr	r3, [pc, #20]	; (8022f90 <_fflush_r+0x50>)
 8022f7a:	429c      	cmp	r4, r3
 8022f7c:	bf08      	it	eq
 8022f7e:	68ec      	ldreq	r4, [r5, #12]
 8022f80:	e7ec      	b.n	8022f5c <_fflush_r+0x1c>
 8022f82:	2000      	movs	r0, #0
 8022f84:	bd38      	pop	{r3, r4, r5, pc}
 8022f86:	bf00      	nop
 8022f88:	0802872c 	.word	0x0802872c
 8022f8c:	0802874c 	.word	0x0802874c
 8022f90:	0802870c 	.word	0x0802870c

08022f94 <std>:
 8022f94:	2300      	movs	r3, #0
 8022f96:	b510      	push	{r4, lr}
 8022f98:	4604      	mov	r4, r0
 8022f9a:	e9c0 3300 	strd	r3, r3, [r0]
 8022f9e:	6083      	str	r3, [r0, #8]
 8022fa0:	8181      	strh	r1, [r0, #12]
 8022fa2:	6643      	str	r3, [r0, #100]	; 0x64
 8022fa4:	81c2      	strh	r2, [r0, #14]
 8022fa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022faa:	6183      	str	r3, [r0, #24]
 8022fac:	4619      	mov	r1, r3
 8022fae:	2208      	movs	r2, #8
 8022fb0:	305c      	adds	r0, #92	; 0x5c
 8022fb2:	f7ff fa4e 	bl	8022452 <memset>
 8022fb6:	4b05      	ldr	r3, [pc, #20]	; (8022fcc <std+0x38>)
 8022fb8:	6263      	str	r3, [r4, #36]	; 0x24
 8022fba:	4b05      	ldr	r3, [pc, #20]	; (8022fd0 <std+0x3c>)
 8022fbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8022fbe:	4b05      	ldr	r3, [pc, #20]	; (8022fd4 <std+0x40>)
 8022fc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022fc2:	4b05      	ldr	r3, [pc, #20]	; (8022fd8 <std+0x44>)
 8022fc4:	6224      	str	r4, [r4, #32]
 8022fc6:	6323      	str	r3, [r4, #48]	; 0x30
 8022fc8:	bd10      	pop	{r4, pc}
 8022fca:	bf00      	nop
 8022fcc:	080231f5 	.word	0x080231f5
 8022fd0:	08023217 	.word	0x08023217
 8022fd4:	0802324f 	.word	0x0802324f
 8022fd8:	08023273 	.word	0x08023273

08022fdc <_cleanup_r>:
 8022fdc:	4901      	ldr	r1, [pc, #4]	; (8022fe4 <_cleanup_r+0x8>)
 8022fde:	f000 b885 	b.w	80230ec <_fwalk_reent>
 8022fe2:	bf00      	nop
 8022fe4:	08022f41 	.word	0x08022f41

08022fe8 <__sfmoreglue>:
 8022fe8:	b570      	push	{r4, r5, r6, lr}
 8022fea:	1e4a      	subs	r2, r1, #1
 8022fec:	2568      	movs	r5, #104	; 0x68
 8022fee:	4355      	muls	r5, r2
 8022ff0:	460e      	mov	r6, r1
 8022ff2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8022ff6:	f7ff fa83 	bl	8022500 <_malloc_r>
 8022ffa:	4604      	mov	r4, r0
 8022ffc:	b140      	cbz	r0, 8023010 <__sfmoreglue+0x28>
 8022ffe:	2100      	movs	r1, #0
 8023000:	e9c0 1600 	strd	r1, r6, [r0]
 8023004:	300c      	adds	r0, #12
 8023006:	60a0      	str	r0, [r4, #8]
 8023008:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802300c:	f7ff fa21 	bl	8022452 <memset>
 8023010:	4620      	mov	r0, r4
 8023012:	bd70      	pop	{r4, r5, r6, pc}

08023014 <__sinit>:
 8023014:	6983      	ldr	r3, [r0, #24]
 8023016:	b510      	push	{r4, lr}
 8023018:	4604      	mov	r4, r0
 802301a:	bb33      	cbnz	r3, 802306a <__sinit+0x56>
 802301c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8023020:	6503      	str	r3, [r0, #80]	; 0x50
 8023022:	4b12      	ldr	r3, [pc, #72]	; (802306c <__sinit+0x58>)
 8023024:	4a12      	ldr	r2, [pc, #72]	; (8023070 <__sinit+0x5c>)
 8023026:	681b      	ldr	r3, [r3, #0]
 8023028:	6282      	str	r2, [r0, #40]	; 0x28
 802302a:	4298      	cmp	r0, r3
 802302c:	bf04      	itt	eq
 802302e:	2301      	moveq	r3, #1
 8023030:	6183      	streq	r3, [r0, #24]
 8023032:	f000 f81f 	bl	8023074 <__sfp>
 8023036:	6060      	str	r0, [r4, #4]
 8023038:	4620      	mov	r0, r4
 802303a:	f000 f81b 	bl	8023074 <__sfp>
 802303e:	60a0      	str	r0, [r4, #8]
 8023040:	4620      	mov	r0, r4
 8023042:	f000 f817 	bl	8023074 <__sfp>
 8023046:	2200      	movs	r2, #0
 8023048:	60e0      	str	r0, [r4, #12]
 802304a:	2104      	movs	r1, #4
 802304c:	6860      	ldr	r0, [r4, #4]
 802304e:	f7ff ffa1 	bl	8022f94 <std>
 8023052:	2201      	movs	r2, #1
 8023054:	2109      	movs	r1, #9
 8023056:	68a0      	ldr	r0, [r4, #8]
 8023058:	f7ff ff9c 	bl	8022f94 <std>
 802305c:	2202      	movs	r2, #2
 802305e:	2112      	movs	r1, #18
 8023060:	68e0      	ldr	r0, [r4, #12]
 8023062:	f7ff ff97 	bl	8022f94 <std>
 8023066:	2301      	movs	r3, #1
 8023068:	61a3      	str	r3, [r4, #24]
 802306a:	bd10      	pop	{r4, pc}
 802306c:	080286d0 	.word	0x080286d0
 8023070:	08022fdd 	.word	0x08022fdd

08023074 <__sfp>:
 8023074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023076:	4b1b      	ldr	r3, [pc, #108]	; (80230e4 <__sfp+0x70>)
 8023078:	681e      	ldr	r6, [r3, #0]
 802307a:	69b3      	ldr	r3, [r6, #24]
 802307c:	4607      	mov	r7, r0
 802307e:	b913      	cbnz	r3, 8023086 <__sfp+0x12>
 8023080:	4630      	mov	r0, r6
 8023082:	f7ff ffc7 	bl	8023014 <__sinit>
 8023086:	3648      	adds	r6, #72	; 0x48
 8023088:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802308c:	3b01      	subs	r3, #1
 802308e:	d503      	bpl.n	8023098 <__sfp+0x24>
 8023090:	6833      	ldr	r3, [r6, #0]
 8023092:	b133      	cbz	r3, 80230a2 <__sfp+0x2e>
 8023094:	6836      	ldr	r6, [r6, #0]
 8023096:	e7f7      	b.n	8023088 <__sfp+0x14>
 8023098:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802309c:	b16d      	cbz	r5, 80230ba <__sfp+0x46>
 802309e:	3468      	adds	r4, #104	; 0x68
 80230a0:	e7f4      	b.n	802308c <__sfp+0x18>
 80230a2:	2104      	movs	r1, #4
 80230a4:	4638      	mov	r0, r7
 80230a6:	f7ff ff9f 	bl	8022fe8 <__sfmoreglue>
 80230aa:	6030      	str	r0, [r6, #0]
 80230ac:	2800      	cmp	r0, #0
 80230ae:	d1f1      	bne.n	8023094 <__sfp+0x20>
 80230b0:	230c      	movs	r3, #12
 80230b2:	603b      	str	r3, [r7, #0]
 80230b4:	4604      	mov	r4, r0
 80230b6:	4620      	mov	r0, r4
 80230b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80230ba:	4b0b      	ldr	r3, [pc, #44]	; (80230e8 <__sfp+0x74>)
 80230bc:	6665      	str	r5, [r4, #100]	; 0x64
 80230be:	e9c4 5500 	strd	r5, r5, [r4]
 80230c2:	60a5      	str	r5, [r4, #8]
 80230c4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80230c8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80230cc:	2208      	movs	r2, #8
 80230ce:	4629      	mov	r1, r5
 80230d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80230d4:	f7ff f9bd 	bl	8022452 <memset>
 80230d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80230dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80230e0:	e7e9      	b.n	80230b6 <__sfp+0x42>
 80230e2:	bf00      	nop
 80230e4:	080286d0 	.word	0x080286d0
 80230e8:	ffff0001 	.word	0xffff0001

080230ec <_fwalk_reent>:
 80230ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80230f0:	4680      	mov	r8, r0
 80230f2:	4689      	mov	r9, r1
 80230f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80230f8:	2600      	movs	r6, #0
 80230fa:	b914      	cbnz	r4, 8023102 <_fwalk_reent+0x16>
 80230fc:	4630      	mov	r0, r6
 80230fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023102:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8023106:	3f01      	subs	r7, #1
 8023108:	d501      	bpl.n	802310e <_fwalk_reent+0x22>
 802310a:	6824      	ldr	r4, [r4, #0]
 802310c:	e7f5      	b.n	80230fa <_fwalk_reent+0xe>
 802310e:	89ab      	ldrh	r3, [r5, #12]
 8023110:	2b01      	cmp	r3, #1
 8023112:	d907      	bls.n	8023124 <_fwalk_reent+0x38>
 8023114:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023118:	3301      	adds	r3, #1
 802311a:	d003      	beq.n	8023124 <_fwalk_reent+0x38>
 802311c:	4629      	mov	r1, r5
 802311e:	4640      	mov	r0, r8
 8023120:	47c8      	blx	r9
 8023122:	4306      	orrs	r6, r0
 8023124:	3568      	adds	r5, #104	; 0x68
 8023126:	e7ee      	b.n	8023106 <_fwalk_reent+0x1a>

08023128 <__swhatbuf_r>:
 8023128:	b570      	push	{r4, r5, r6, lr}
 802312a:	460e      	mov	r6, r1
 802312c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023130:	2900      	cmp	r1, #0
 8023132:	b096      	sub	sp, #88	; 0x58
 8023134:	4614      	mov	r4, r2
 8023136:	461d      	mov	r5, r3
 8023138:	da07      	bge.n	802314a <__swhatbuf_r+0x22>
 802313a:	2300      	movs	r3, #0
 802313c:	602b      	str	r3, [r5, #0]
 802313e:	89b3      	ldrh	r3, [r6, #12]
 8023140:	061a      	lsls	r2, r3, #24
 8023142:	d410      	bmi.n	8023166 <__swhatbuf_r+0x3e>
 8023144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023148:	e00e      	b.n	8023168 <__swhatbuf_r+0x40>
 802314a:	466a      	mov	r2, sp
 802314c:	f000 f8b8 	bl	80232c0 <_fstat_r>
 8023150:	2800      	cmp	r0, #0
 8023152:	dbf2      	blt.n	802313a <__swhatbuf_r+0x12>
 8023154:	9a01      	ldr	r2, [sp, #4]
 8023156:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802315a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802315e:	425a      	negs	r2, r3
 8023160:	415a      	adcs	r2, r3
 8023162:	602a      	str	r2, [r5, #0]
 8023164:	e7ee      	b.n	8023144 <__swhatbuf_r+0x1c>
 8023166:	2340      	movs	r3, #64	; 0x40
 8023168:	2000      	movs	r0, #0
 802316a:	6023      	str	r3, [r4, #0]
 802316c:	b016      	add	sp, #88	; 0x58
 802316e:	bd70      	pop	{r4, r5, r6, pc}

08023170 <__smakebuf_r>:
 8023170:	898b      	ldrh	r3, [r1, #12]
 8023172:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023174:	079d      	lsls	r5, r3, #30
 8023176:	4606      	mov	r6, r0
 8023178:	460c      	mov	r4, r1
 802317a:	d507      	bpl.n	802318c <__smakebuf_r+0x1c>
 802317c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023180:	6023      	str	r3, [r4, #0]
 8023182:	6123      	str	r3, [r4, #16]
 8023184:	2301      	movs	r3, #1
 8023186:	6163      	str	r3, [r4, #20]
 8023188:	b002      	add	sp, #8
 802318a:	bd70      	pop	{r4, r5, r6, pc}
 802318c:	ab01      	add	r3, sp, #4
 802318e:	466a      	mov	r2, sp
 8023190:	f7ff ffca 	bl	8023128 <__swhatbuf_r>
 8023194:	9900      	ldr	r1, [sp, #0]
 8023196:	4605      	mov	r5, r0
 8023198:	4630      	mov	r0, r6
 802319a:	f7ff f9b1 	bl	8022500 <_malloc_r>
 802319e:	b948      	cbnz	r0, 80231b4 <__smakebuf_r+0x44>
 80231a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80231a4:	059a      	lsls	r2, r3, #22
 80231a6:	d4ef      	bmi.n	8023188 <__smakebuf_r+0x18>
 80231a8:	f023 0303 	bic.w	r3, r3, #3
 80231ac:	f043 0302 	orr.w	r3, r3, #2
 80231b0:	81a3      	strh	r3, [r4, #12]
 80231b2:	e7e3      	b.n	802317c <__smakebuf_r+0xc>
 80231b4:	4b0d      	ldr	r3, [pc, #52]	; (80231ec <__smakebuf_r+0x7c>)
 80231b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80231b8:	89a3      	ldrh	r3, [r4, #12]
 80231ba:	6020      	str	r0, [r4, #0]
 80231bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80231c0:	81a3      	strh	r3, [r4, #12]
 80231c2:	9b00      	ldr	r3, [sp, #0]
 80231c4:	6163      	str	r3, [r4, #20]
 80231c6:	9b01      	ldr	r3, [sp, #4]
 80231c8:	6120      	str	r0, [r4, #16]
 80231ca:	b15b      	cbz	r3, 80231e4 <__smakebuf_r+0x74>
 80231cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80231d0:	4630      	mov	r0, r6
 80231d2:	f000 f887 	bl	80232e4 <_isatty_r>
 80231d6:	b128      	cbz	r0, 80231e4 <__smakebuf_r+0x74>
 80231d8:	89a3      	ldrh	r3, [r4, #12]
 80231da:	f023 0303 	bic.w	r3, r3, #3
 80231de:	f043 0301 	orr.w	r3, r3, #1
 80231e2:	81a3      	strh	r3, [r4, #12]
 80231e4:	89a3      	ldrh	r3, [r4, #12]
 80231e6:	431d      	orrs	r5, r3
 80231e8:	81a5      	strh	r5, [r4, #12]
 80231ea:	e7cd      	b.n	8023188 <__smakebuf_r+0x18>
 80231ec:	08022fdd 	.word	0x08022fdd

080231f0 <__malloc_lock>:
 80231f0:	4770      	bx	lr

080231f2 <__malloc_unlock>:
 80231f2:	4770      	bx	lr

080231f4 <__sread>:
 80231f4:	b510      	push	{r4, lr}
 80231f6:	460c      	mov	r4, r1
 80231f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80231fc:	f000 f894 	bl	8023328 <_read_r>
 8023200:	2800      	cmp	r0, #0
 8023202:	bfab      	itete	ge
 8023204:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023206:	89a3      	ldrhlt	r3, [r4, #12]
 8023208:	181b      	addge	r3, r3, r0
 802320a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802320e:	bfac      	ite	ge
 8023210:	6563      	strge	r3, [r4, #84]	; 0x54
 8023212:	81a3      	strhlt	r3, [r4, #12]
 8023214:	bd10      	pop	{r4, pc}

08023216 <__swrite>:
 8023216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802321a:	461f      	mov	r7, r3
 802321c:	898b      	ldrh	r3, [r1, #12]
 802321e:	05db      	lsls	r3, r3, #23
 8023220:	4605      	mov	r5, r0
 8023222:	460c      	mov	r4, r1
 8023224:	4616      	mov	r6, r2
 8023226:	d505      	bpl.n	8023234 <__swrite+0x1e>
 8023228:	2302      	movs	r3, #2
 802322a:	2200      	movs	r2, #0
 802322c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023230:	f000 f868 	bl	8023304 <_lseek_r>
 8023234:	89a3      	ldrh	r3, [r4, #12]
 8023236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802323a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802323e:	81a3      	strh	r3, [r4, #12]
 8023240:	4632      	mov	r2, r6
 8023242:	463b      	mov	r3, r7
 8023244:	4628      	mov	r0, r5
 8023246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802324a:	f000 b817 	b.w	802327c <_write_r>

0802324e <__sseek>:
 802324e:	b510      	push	{r4, lr}
 8023250:	460c      	mov	r4, r1
 8023252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023256:	f000 f855 	bl	8023304 <_lseek_r>
 802325a:	1c43      	adds	r3, r0, #1
 802325c:	89a3      	ldrh	r3, [r4, #12]
 802325e:	bf15      	itete	ne
 8023260:	6560      	strne	r0, [r4, #84]	; 0x54
 8023262:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023266:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802326a:	81a3      	strheq	r3, [r4, #12]
 802326c:	bf18      	it	ne
 802326e:	81a3      	strhne	r3, [r4, #12]
 8023270:	bd10      	pop	{r4, pc}

08023272 <__sclose>:
 8023272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023276:	f000 b813 	b.w	80232a0 <_close_r>
	...

0802327c <_write_r>:
 802327c:	b538      	push	{r3, r4, r5, lr}
 802327e:	4c07      	ldr	r4, [pc, #28]	; (802329c <_write_r+0x20>)
 8023280:	4605      	mov	r5, r0
 8023282:	4608      	mov	r0, r1
 8023284:	4611      	mov	r1, r2
 8023286:	2200      	movs	r2, #0
 8023288:	6022      	str	r2, [r4, #0]
 802328a:	461a      	mov	r2, r3
 802328c:	f7de fca1 	bl	8001bd2 <_write>
 8023290:	1c43      	adds	r3, r0, #1
 8023292:	d102      	bne.n	802329a <_write_r+0x1e>
 8023294:	6823      	ldr	r3, [r4, #0]
 8023296:	b103      	cbz	r3, 802329a <_write_r+0x1e>
 8023298:	602b      	str	r3, [r5, #0]
 802329a:	bd38      	pop	{r3, r4, r5, pc}
 802329c:	2000b788 	.word	0x2000b788

080232a0 <_close_r>:
 80232a0:	b538      	push	{r3, r4, r5, lr}
 80232a2:	4c06      	ldr	r4, [pc, #24]	; (80232bc <_close_r+0x1c>)
 80232a4:	2300      	movs	r3, #0
 80232a6:	4605      	mov	r5, r0
 80232a8:	4608      	mov	r0, r1
 80232aa:	6023      	str	r3, [r4, #0]
 80232ac:	f7de fcad 	bl	8001c0a <_close>
 80232b0:	1c43      	adds	r3, r0, #1
 80232b2:	d102      	bne.n	80232ba <_close_r+0x1a>
 80232b4:	6823      	ldr	r3, [r4, #0]
 80232b6:	b103      	cbz	r3, 80232ba <_close_r+0x1a>
 80232b8:	602b      	str	r3, [r5, #0]
 80232ba:	bd38      	pop	{r3, r4, r5, pc}
 80232bc:	2000b788 	.word	0x2000b788

080232c0 <_fstat_r>:
 80232c0:	b538      	push	{r3, r4, r5, lr}
 80232c2:	4c07      	ldr	r4, [pc, #28]	; (80232e0 <_fstat_r+0x20>)
 80232c4:	2300      	movs	r3, #0
 80232c6:	4605      	mov	r5, r0
 80232c8:	4608      	mov	r0, r1
 80232ca:	4611      	mov	r1, r2
 80232cc:	6023      	str	r3, [r4, #0]
 80232ce:	f7de fca8 	bl	8001c22 <_fstat>
 80232d2:	1c43      	adds	r3, r0, #1
 80232d4:	d102      	bne.n	80232dc <_fstat_r+0x1c>
 80232d6:	6823      	ldr	r3, [r4, #0]
 80232d8:	b103      	cbz	r3, 80232dc <_fstat_r+0x1c>
 80232da:	602b      	str	r3, [r5, #0]
 80232dc:	bd38      	pop	{r3, r4, r5, pc}
 80232de:	bf00      	nop
 80232e0:	2000b788 	.word	0x2000b788

080232e4 <_isatty_r>:
 80232e4:	b538      	push	{r3, r4, r5, lr}
 80232e6:	4c06      	ldr	r4, [pc, #24]	; (8023300 <_isatty_r+0x1c>)
 80232e8:	2300      	movs	r3, #0
 80232ea:	4605      	mov	r5, r0
 80232ec:	4608      	mov	r0, r1
 80232ee:	6023      	str	r3, [r4, #0]
 80232f0:	f7de fca7 	bl	8001c42 <_isatty>
 80232f4:	1c43      	adds	r3, r0, #1
 80232f6:	d102      	bne.n	80232fe <_isatty_r+0x1a>
 80232f8:	6823      	ldr	r3, [r4, #0]
 80232fa:	b103      	cbz	r3, 80232fe <_isatty_r+0x1a>
 80232fc:	602b      	str	r3, [r5, #0]
 80232fe:	bd38      	pop	{r3, r4, r5, pc}
 8023300:	2000b788 	.word	0x2000b788

08023304 <_lseek_r>:
 8023304:	b538      	push	{r3, r4, r5, lr}
 8023306:	4c07      	ldr	r4, [pc, #28]	; (8023324 <_lseek_r+0x20>)
 8023308:	4605      	mov	r5, r0
 802330a:	4608      	mov	r0, r1
 802330c:	4611      	mov	r1, r2
 802330e:	2200      	movs	r2, #0
 8023310:	6022      	str	r2, [r4, #0]
 8023312:	461a      	mov	r2, r3
 8023314:	f7de fca0 	bl	8001c58 <_lseek>
 8023318:	1c43      	adds	r3, r0, #1
 802331a:	d102      	bne.n	8023322 <_lseek_r+0x1e>
 802331c:	6823      	ldr	r3, [r4, #0]
 802331e:	b103      	cbz	r3, 8023322 <_lseek_r+0x1e>
 8023320:	602b      	str	r3, [r5, #0]
 8023322:	bd38      	pop	{r3, r4, r5, pc}
 8023324:	2000b788 	.word	0x2000b788

08023328 <_read_r>:
 8023328:	b538      	push	{r3, r4, r5, lr}
 802332a:	4c07      	ldr	r4, [pc, #28]	; (8023348 <_read_r+0x20>)
 802332c:	4605      	mov	r5, r0
 802332e:	4608      	mov	r0, r1
 8023330:	4611      	mov	r1, r2
 8023332:	2200      	movs	r2, #0
 8023334:	6022      	str	r2, [r4, #0]
 8023336:	461a      	mov	r2, r3
 8023338:	f7de fc2e 	bl	8001b98 <_read>
 802333c:	1c43      	adds	r3, r0, #1
 802333e:	d102      	bne.n	8023346 <_read_r+0x1e>
 8023340:	6823      	ldr	r3, [r4, #0]
 8023342:	b103      	cbz	r3, 8023346 <_read_r+0x1e>
 8023344:	602b      	str	r3, [r5, #0]
 8023346:	bd38      	pop	{r3, r4, r5, pc}
 8023348:	2000b788 	.word	0x2000b788

0802334c <_init>:
 802334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802334e:	bf00      	nop
 8023350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023352:	bc08      	pop	{r3}
 8023354:	469e      	mov	lr, r3
 8023356:	4770      	bx	lr

08023358 <_fini>:
 8023358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802335a:	bf00      	nop
 802335c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802335e:	bc08      	pop	{r3}
 8023360:	469e      	mov	lr, r3
 8023362:	4770      	bx	lr
